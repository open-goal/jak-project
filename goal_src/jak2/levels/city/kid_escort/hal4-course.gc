;;-*-Lisp-*-
(in-package goal)

;; name: hal4-course.gc
;; name in dgo: hal4-course
;; dgos: LKIDDOGE

;; DECOMP BEGINS

(deftype hal4-course (bot-course)
  ((defend-speeches bot-speech-list-shuffle  :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )


(deftype hal-escort (hal)
  ((hal4-course        hal4-course         :offset        652)
   (arrow-handle       handle              :offset        1032)
   (arrestor-handle    handle              :offset-assert 1040)
   (arrestor-time      time-frame          :offset-assert 1048)
   (locked-player-time time-frame          :offset-assert 1056)
   (dont-fail-until    time-frame          :offset-assert 1064)
   (played-defend-time time-frame          :offset-assert 1072)
   (played-get-in-time time-frame          :offset-assert 1080)
   (notice-plane       plane       :inline :offset-assert 1088)
   )
  :heap-base #x3d0
  :method-count-assert 237
  :size-assert         #x450
  :flag-assert         #xed03d00450
  (:methods
    (hal-escort-method-227 (_type_) symbol 227)
    (hal-escort-method-228 (_type_) symbol 228)
    (try-enter-vehicle (_type_) int 229)
    (hal-escort-method-230 (_type_) symbol 230)
    (init-traffic-params! (_type_ symbol) none 231)
    (hal-escort-method-232 (_type_) none 232)
    (set-traffic-danger! (_type_) none 233)
    (hal-escort-method-234 (_type_ nav-mesh) process 234)
    (hal-escort-method-235 (_type_) none 235)
    (vehicle-destroyed? (_type_) symbol 236)
    )
  )


;; WARN: Return type mismatch object vs none.
(defmethod go-idle hal-escort ((obj hal-escort))
  (cond
    ((task-node-closed? (game-task-node city-escort-kid-resolution))
     (cleanup-for-death obj)
     (go (method-of-object obj die-fast))
     )
    (else
      (go (method-of-object obj idle))
      )
    )
  (none)
  )

(defmethod init! hal-escort ((obj hal-escort))
  "Set defaults for various fields."
  (let ((t9-0 (method-of-type hal init!)))
    (t9-0 obj)
    )
  (set! (-> obj vehicle-handle) (the-as handle #f))
  (set! (-> obj arrestor-handle) (the-as handle #f))
  (set! (-> obj arrow-handle) (the-as handle #f))
  (set! (-> obj too-far-warn-dist-default) 61440.0)
  (set! (-> obj too-far-fail-dist-delta-default) 2048000.0)
  (set! (-> obj warn-to-fail-timeout) (the-as uint #x1b7740))
  (set! (-> obj warn-min-delay) (the-as uint 1200))
  (set! (-> obj warn-max-delay) (the-as uint 2100))
  0
  (none)
  )

(defmethod general-event-handler hal-escort ((obj hal-escort) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('notify)
     (case (-> arg3 param 0)
       (('arrest)
        (set! (-> obj arrestor-handle) (process->handle (the-as process (-> arg3 param 1))))
        (let ((v0-0 (the-as object (current-time))))
          (set! (-> obj arrestor-time) (the-as time-frame v0-0))
          v0-0
          )
        )
       (else
         ((method-of-type hal general-event-handler) obj arg0 arg1 arg2 arg3)
         )
       )
     )
    (else
      ((method-of-type hal general-event-handler) obj arg0 arg1 arg2 arg3)
      )
    )
  )

(defmethod init-enemy! hal-escort ((obj hal-escort))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (let ((t9-0 (method-of-type hal init-enemy!)))
    (t9-0 obj)
    )
  (set! (-> obj channel) (the-as uint 20))
  0
  (none)
  )

(defmethod hal-escort-method-235 hal-escort ((obj hal-escort))
  (let* ((s5-0 (handle->process (-> obj arrestor-handle)))
         (v1-3 (if (type? s5-0 process-focusable)
                   s5-0
                   )
               )
         )
    (when v1-3
      (cond
        ((>= (- (current-time) (-> obj arrestor-time)) (seconds 4))
         (set! (-> obj arrestor-handle) (the-as handle #f))
         )
        ((focus-test? (the-as process-focusable v1-3) hit)
         (when (and (>= (- (current-time) (-> obj played-defend-time)) (seconds 6))
                    (not (channel-active? obj (the-as uint 0)))
                    )
           (let ((a1-5 (bot-speech-list-method-9
                         (-> obj hal4-course defend-speeches)
                         obj
                         (-> obj hal4-course speeches)
                         (speech-flags)
                         )
                       )
                 )
             (when (>= a1-5 0)
               (play-speech obj a1-5)
               (set! (-> obj played-defend-time) (current-time))
               )
             )
           )
         (set! (-> obj arrestor-handle) (the-as handle #f))
         )
        )
      )
    )
  (if (and (not (speech-playing? obj 30))
           (nonzero? (-> obj played-defend-time))
           (>= (- (current-time) (-> obj played-defend-time)) (seconds 3))
           (not (channel-active? obj (the-as uint 0)))
           )
      (play-speech obj 30)
      )
  (none)
  )

(defmethod vehicle-destroyed? hal-escort ((obj hal-escort))
  (let ((v1-1 (handle->process (-> obj vehicle-handle))))
    (or (not v1-1) (logtest? (-> (the-as vehicle v1-1) flags) (rigid-body-object-flag dead)))
    )
  )

(defmethod hal-escort-method-227 hal-escort ((obj hal-escort))
  (let ((s5-0 *target*))
    (when (focus-test? s5-0 pilot-riding pilot)
      (let* ((a0-2 (-> obj actor-group 0 data 1 actor))
             (v1-5 (when a0-2
                     (let ((s4-0 (-> a0-2 extra process)))
                       (if (type? s4-0 process-focusable)
                           s4-0
                           )
                       )
                     )
                   )
             )
        (when (focus-test? (the-as process-focusable v1-5) pilot-riding pilot)
          (let* ((v1-12 (-> obj actor-group 0 data 2 actor))
                 (a0-5 (when v1-12
                         (let ((s4-1 (-> v1-12 extra process)))
                           (if (type? s4-1 process-focusable)
                               s4-1
                               )
                           )
                         )
                       )
                 )
            (when (not (focus-test? (the-as process-focusable a0-5) pilot-riding pilot))
              (let ((f0-0 245760.0))
                (and (< (* f0-0 f0-0)
                        (vector-vector-xz-distance-squared (get-trans (the-as process-focusable a0-5) 0) (get-trans s5-0 0))
                        )
                     (>= (current-time) (-> obj dont-fail-until))
                     )
                )
              )
            )
          )
        )
      )
    )
  )

;; WARN: Return type mismatch object vs symbol.
(defmethod hal-escort-method-228 hal-escort ((obj hal-escort))
  (let* ((v1-3 (-> obj actor-group 0 data 1 actor))
         (a0-1 (when v1-3
                 (let ((s5-0 (-> v1-3 extra process)))
                   (if (type? s5-0 process-focusable)
                       s5-0
                       )
                   )
                 )
               )
         (s5-1 *target*)
         )
    (the-as
      symbol
      (and a0-1
           (and s5-1
                (let ((f0-0 409600.0))
                  (and (< (* f0-0 f0-0)
                          (vector-vector-xz-distance-squared (get-trans (the-as process-focusable a0-1) 0) (get-trans s5-1 0))
                          )
                       (>= (current-time) (-> obj dont-fail-until))
                       )
                  )
                )
           )
      )
    )
  )

(defmethod hal-escort-method-234 hal-escort ((obj hal-escort) (arg0 nav-mesh))
  (let ((s2-0 (the-as process #f)))
    (let* ((v1-3 (-> obj actor-group 0 data 1 actor))
           (gp-0 (when v1-3
                   (let ((s5-0 (-> v1-3 extra process)))
                     (if (type? s5-0 process-focusable)
                         s5-0
                         )
                     )
                   )
                 )
           (s5-1 (new 'stack-no-clear 'vector))
           )
      (when gp-0
        (let ((f30-0 -1.0))
          (countdown (s2-1 4)
            (let ((s0-0 (new 'stack-no-clear 'vector))
                  (s1-0 (new 'stack-no-clear 'vector))
                  )
              (set-vector! s0-0 13312.0 0.0 17408.0 1.0)
              (vector-rotate-around-y! s0-0 s0-0 (* 16384.0 (the float s2-1)))
              (vector+! s0-0 s0-0 (-> (the-as process-focusable gp-0) root-override trans))
              (nav-mesh-method-10 arg0 s1-0 s0-0 (the-as nav-poly #f))
              (let ((f0-6 (vector-vector-xz-distance s1-0 (-> (the-as process-focusable gp-0) root-override trans))))
                (when (or (< f30-0 0.0) (< f30-0 f0-6))
                  (set! f30-0 f0-6)
                  (set! (-> s5-1 quad) (-> s1-0 quad))
                  )
                )
              )
            )
          )
        (let ((s2-2 (new 'stack 'traffic-object-spawn-params)))
          (set! (-> s2-2 object-type) (traffic-type crimson-guard-1))
          (set! (-> s2-2 behavior) (the-as uint 5))
          (set! (-> s2-2 id) (the-as uint 0))
          (set! (-> s2-2 nav-mesh) arg0)
          (set! (-> s2-2 nav-branch) #f)
          (set! (-> s2-2 proc) #f)
          (let ((v1-25 (-> obj actor-group 0 data 1 actor)))
            (set! (-> s2-2 handle) (process->handle (when v1-25
                                                      (let ((s4-1 (-> v1-25 extra process)))
                                                        (if (type? s4-1 process-focusable)
                                                            s4-1
                                                            )
                                                        )
                                                      )
                                                    )
                  )
            )
          (set! (-> s2-2 user-data) (the-as uint 0))
          (set! (-> s2-2 flags) (traffic-spawn-flags))
          (set! (-> s2-2 guard-type) (the-as uint 7))
          (vector-reset! (-> s2-2 velocity))
          (set! (-> s2-2 position quad) (-> s5-1 quad))
          (let ((a1-9 (new 'stack-no-clear 'vector)))
            (vector-! a1-9 (-> (the-as process-focusable gp-0) root-override trans) (-> s2-2 position))
            (forward-up->quaternion (-> s2-2 rotation) a1-9 *up-vector*)
            )
          (send-event *traffic-manager* 'activate-object s2-2)
          (set! s2-0 (-> s2-2 proc))
          )
        )
      )
    s2-0
    )
  )

(defmethod try-enter-vehicle hal-escort ((obj hal-escort))
  "Returns seat index"
  (let* ((gp-0 (handle->process (-> obj vehicle-handle)))
         (v1-6 (-> obj actor-group 0 data 1 actor))
         (s5-0 (when v1-6
                 (let ((s4-0 (-> v1-6 extra process)))
                   (if (type? s4-0 process-focusable)
                       s4-0
                       )
                   )
                 )
               )
         (s4-1 -1)
         )
    (when (and gp-0 (not (logtest? (-> (the-as vehicle gp-0) flags) (rigid-body-object-flag dead))) s5-0)
      (set! s4-1 (get-seat-count (the-as vehicle gp-0)))
      (while (nonzero? s4-1)
        (+! s4-1 -1)
        (if (= (get-rider-in-seat (the-as vehicle gp-0) s4-1) s5-0)
            (goto cfg-20)
            )
        )
      (set! s4-1
            (get-best-seat-for-vehicle (the-as vehicle gp-0) (-> (the-as process-focusable s5-0) root-override trans) 2 1)
            )
      )
    (label cfg-20)
    s4-1
    )
  )

(defmethod hal-escort-method-232 hal-escort ((obj hal-escort))
  (let* ((target *target*)
         (v1-3 (-> obj actor-group 0 data 1 actor))
         (s5-0 (when v1-3
                 (let ((s3-0 (-> v1-3 extra process)))
                   (if (type? s3-0 process-focusable)
                       s3-0
                       )
                   )
                 )
               )
         (a0-2 (-> obj actor-group 0 data 2 actor))
         (v1-8 (when a0-2
                 (let ((s3-1 (-> a0-2 extra process)))
                   (if (type? s3-1 process-focusable)
                       s3-1
                       )
                   )
                 )
               )
         )
    (when target
      (cond
        ((not (-> *setting-control* user-current pilot-exit))
         (when (and s5-0
                    v1-8
                    (not (focus-test? (the-as process-focusable s5-0) pilot-riding))
                    (not (focus-test? (the-as process-focusable v1-8) pilot-riding))
                    (>= (- (current-time) (-> obj locked-player-time)) (seconds 10))
                    )
           (remove-setting! 'pilot-exit)
           (set-setting! 'pilot #f 0.0 0)
           (apply-settings *setting-control*)
           )
         )
        ((focus-test? target pilot-riding)
         (when (and (nonzero? (-> target pilot))
                    (and (= (handle->process (-> target pilot vehicle)) (handle->process (-> obj vehicle-handle)))
                         (or (and s5-0 (focus-test? (the-as process-focusable s5-0) pilot))
                             (and v1-8 (focus-test? (the-as process-focusable v1-8) pilot))
                             )
                         )
                    )
           (set-setting! 'pilot-exit #f 0.0 0)
           (apply-settings *setting-control*)
           (set! (-> obj locked-player-time) (current-time))
           )
         )
        )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-traffic-params! hal-escort ((obj hal-escort) (arg0 symbol))
  (let ((gp-0 *traffic-manager*))
    (send-event gp-0 'deactivate-all)
    (send-event gp-0 'set-guard-multi-focus #t)
    (send-event gp-0 'set-max-alert-level 1)
    (send-event gp-0 'set-alert-level 1)
    (send-event gp-0 'set-guard-target-count-range 4 0 0)
    (send-event gp-0 'set-guard-target-count-range 5 0 0)
    (send-event gp-0 'set-guard-target-count-range 0 6 6)
    (send-event gp-0 'set-alert-duration #xa4cb80)
    (send-event gp-0 'set-object-reserve-count 6 #x7d00)
    (when arg0
      (send-event gp-0 'set-guard-force-visible #t)
      (let ((s4-1 (new 'stack 'traffic-object-spawn-params)))
        (let ((v1-51 (nav-mesh-from-res-tag (-> obj entity) 'nav-mesh-actor 0)))
          (set! (-> s4-1 object-type) (traffic-type crimson-guard-1))
          (set! (-> s4-1 behavior) (the-as uint 3))
          (set! (-> s4-1 id) (the-as uint 0))
          (set! (-> s4-1 nav-mesh) v1-51)
          )
        (set! (-> s4-1 nav-branch) #f)
        (set! (-> s4-1 proc) #f)
        (set! (-> s4-1 handle) (the-as handle #f))
        (set! (-> s4-1 user-data) (the-as uint 0))
        (set! (-> s4-1 flags) (traffic-spawn-flags))
        (set! (-> s4-1 guard-type) (the-as uint 7))
        (vector-reset! (-> s4-1 velocity))
        (set! (-> s4-1 position quad) (-> obj hal4-course spots 5 center quad))
        (quaternion-identity! (-> s4-1 rotation))
        (send-event gp-0 'activate-object s4-1)
        )
      )
    )
  (none)
  )

(defmethod set-traffic-danger! hal-escort ((obj hal-escort))
  (let ((a0-1 *target*))
    (when a0-1
      (let ((gp-0 (new 'stack-no-clear 'traffic-danger-info)))
        (set! (-> gp-0 sphere quad) (-> (get-trans a0-1 0) quad))
        (set! (-> gp-0 sphere r) 12288.0)
        (vector-reset! (-> gp-0 velocity))
        (set! (-> gp-0 notify-radius) 102400.0)
        (set! (-> gp-0 danger-level) 1.0)
        (set! (-> gp-0 decay-rate) 0.0)
        (set! (-> gp-0 flags) (traffic-danger-flags tdf0))
        (set! (-> gp-0 danger-type) (traffic-danger-type tdt4))
        (add-danger (-> (the-as traffic-manager *traffic-manager*) traffic-engine) gp-0)
        )
      )
    )
  0
  (none)
  )

(defmethod hal-escort-method-230 hal-escort ((obj hal-escort))
  (local-vars (a2-5 float) (a2-12 float))
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         )
    (let ((gp-0 (new 'stack-no-clear 'matrix))
          (s5-0 528)
          )
      (let ((v1-2 (-> obj hal4-course spots 9)))
        (set! (-> gp-0 vector 1 quad) (-> v1-2 center quad))
        (set! (-> gp-0 vector 1 w) (+ 81920.0 (-> v1-2 center w)))
        )
      (set! *actor-list-length* 0)
      (if (logtest? s5-0 512)
          (set! *actor-list-length*
                (fill-actor-list-for-sphere *actor-hash* (the-as sphere (-> gp-0 vector 1)) *actor-list* 256)
                )
          )
      (when (logtest? s5-0 1024)
        (let ((a0-4 (-> *collide-player-list* alive-list next0)))
          *collide-player-list*
          (let ((v1-14 (-> a0-4 next0)))
            (while (!= a0-4 (-> *collide-player-list* alive-list-end))
              (let* ((a0-5 (-> (the-as connection a0-4) param1))
                     (a1-3 (-> (the-as collide-shape-moving a0-5) root-prim))
                     )
                (when (logtest? (the-as collide-spec s5-0) (-> a1-3 prim-core collide-as))
                  (let ((a1-4 (-> a1-3 prim-core)))
                    (let ((a2-4 a1-4)
                          (a3-1 (-> gp-0 vector 1))
                          )
                      (.lvf vf2 (&-> a2-4 world-sphere quad))
                      (.lvf vf3 (&-> a3-1 quad))
                      )
                    (.sub.vf vf1 vf3 vf2)
                    (.mul.vf vf1 vf1 vf1)
                    (.add.y.vf vf1 vf1 vf1 :mask #b1)
                    (.add.z.vf vf1 vf1 vf1 :mask #b1)
                    (.mov a2-5 vf1)
                    (let ((f0-2 a2-5)
                          (f1-2 (+ (-> a1-4 world-sphere w) (-> gp-0 vector 1 w)))
                          )
                      (when (< f0-2 (* f1-2 f1-2))
                        (when (< *actor-list-length* 256)
                          (set! (-> *actor-list* *actor-list-length*) (the-as collide-shape a0-5))
                          (set! *actor-list-length* (+ *actor-list-length* 1))
                          )
                        )
                      )
                    )
                  )
                )
              (set! a0-4 v1-14)
              *collide-player-list*
              (set! v1-14 (-> v1-14 next0))
              )
            )
          )
        )
      (when (logtest? s5-0 256)
        (let ((a0-7 (-> *collide-hit-by-player-list* alive-list next0)))
          *collide-hit-by-player-list*
          (let ((v1-22 (-> a0-7 next0)))
            (while (!= a0-7 (-> *collide-hit-by-player-list* alive-list-end))
              (let* ((a0-8 (-> (the-as connection a0-7) param1))
                     (a1-15 (-> (the-as collide-shape-moving a0-8) root-prim))
                     )
                (when (logtest? (the-as collide-spec s5-0) (-> a1-15 prim-core collide-as))
                  (let ((a1-16 (-> a1-15 prim-core)))
                    (let ((a2-11 a1-16)
                          (a3-2 (-> gp-0 vector 1))
                          )
                      (.lvf vf2 (&-> a2-11 world-sphere quad))
                      (.lvf vf3 (&-> a3-2 quad))
                      )
                    (.sub.vf vf1 vf3 vf2)
                    (.mul.vf vf1 vf1 vf1)
                    (.add.y.vf vf1 vf1 vf1 :mask #b1)
                    (.add.z.vf vf1 vf1 vf1 :mask #b1)
                    (.mov a2-12 vf1)
                    (let ((f0-3 a2-12)
                          (f1-6 (+ (-> a1-16 world-sphere w) (-> gp-0 vector 1 w)))
                          )
                      (when (< f0-3 (* f1-6 f1-6))
                        (when (< *actor-list-length* 256)
                          (set! (-> *actor-list* *actor-list-length*) (the-as collide-shape a0-8))
                          (set! *actor-list-length* (+ *actor-list-length* 1))
                          )
                        )
                      )
                    )
                  )
                )
              (set! a0-7 v1-22)
              *collide-hit-by-player-list*
              (set! v1-22 (-> v1-22 next0))
              )
            )
          )
        )
      (dotimes (s4-0 *actor-list-length*)
        (let ((v1-27 (-> *actor-list* s4-0)))
          (when (logtest? (the-as collide-spec s5-0) (-> v1-27 root-prim prim-core collide-as))
            (let* ((s3-0 (-> v1-27 process))
                   (a0-16 (if (type? s3-0 process-focusable)
                              s3-0
                              )
                          )
                   )
              (when (and a0-16 (= (-> a0-16 type) crimson-guard))
                (let ((s3-1 (get-trans (the-as process-focusable a0-16) 0)))
                  (if (and (>= (-> gp-0 vector 1 w) (vector-vector-xz-distance (-> gp-0 vector 1) s3-1))
                           (>= (- (-> s3-1 y) (-> gp-0 vector 1 y)) -10240.0)
                           )
                      (return #t)
                      )
                  )
                )
              )
            )
          )
        )
      )
    #f
    )
  )

(defmethod play-too-far-warn-speech hal-escort ((obj hal-escort))
  (when (not (channel-active? obj (the-as uint 0)))
    (let ((s5-0 0))
      (let* ((v1-5 (-> obj actor-group 0 data 1 actor))
             (s4-0 (when v1-5
                     (let ((s3-0 (-> v1-5 extra process)))
                       (if (type? s3-0 process-focusable)
                           s3-0
                           )
                       )
                     )
                   )
             )
        (let* ((a0-3 (-> obj actor-group 0 data 2 actor))
               (v1-10 (when a0-3
                        (let ((s3-1 (-> a0-3 extra process)))
                          (if (type? s3-1 process-focusable)
                              s3-1
                              )
                          )
                        )
                      )
               )
          (if (or (logtest? (-> (the-as process-focusable s4-0) draw status) (draw-control-status on-screen))
                  (logtest? (-> (the-as process-focusable v1-10) draw status) (draw-control-status on-screen))
                  )
              (set! s5-0 (logior s5-0 32))
              )
          )
        (let ((s3-2 #f))
          (when (and (>= (-> obj waypoint waypoint-id) 19) *target*)
            (let* ((f30-0 (-> (get-trans (the-as process-focusable s4-0) 1) y))
                   (f0-1 (- (-> (get-trans *target* 1) y) f30-0))
                   )
              (cond
                ((>= f0-1 8192.0)
                 (set! s5-0 (logior s5-0 8))
                 (set! s3-2 #t)
                 )
                ((>= -8192.0 f0-1)
                 (set! s5-0 (logior s5-0 16))
                 (set! s3-2 #t)
                 )
                )
              )
            )
          (when (not s3-2)
            (let ((s3-3 (new 'stack-no-clear 'vector)))
              (vector-! s3-3 (target-pos 0) (-> (the-as process-focusable s4-0) root-override trans))
              (vector-normalize! s3-3 1.0)
              (if (>= (vector-dot s3-3 (-> obj follow-dir)) 0.0)
                  (set! s5-0 (logior s5-0 8))
                  (set! s5-0 (logior s5-0 16))
                  )
              )
            )
          )
        )
      (let ((a1-7 (bot-speech-list-method-9
                    (-> obj hal4-course too-far-warn-speeches)
                    obj
                    (-> obj hal4-course speeches)
                    (the-as speech-flags s5-0)
                    )
                  )
            )
        (when (>= a1-7 0)
          (play-speech obj a1-7)
          #t
          )
        )
      )
    )
  )

(defun hal4-walking-too-far ((arg0 hal-escort))
  (let ((gp-0 0))
    (let* ((v1-3 (-> arg0 actor-group 0 data 1 actor))
           (a0-1 (when v1-3
                   (let ((s4-0 (-> v1-3 extra process)))
                     (if (type? s4-0 process-focusable)
                         s4-0
                         )
                     )
                   )
                 )
           )
      (if (and a0-1 (>= (vector-vector-xz-distance (get-trans (the-as process-focusable a0-1) 0) (target-pos 0))
                        (-> arg0 too-far-warn-dist)
                        )
               )
          (set! gp-0 1)
          )
      )
    gp-0
    )
  )

(define *hal4-course*
  (new 'static 'hal4-course
    :course-id #xa
    :speech-count #x23
    :spot-count #xa
    :too-far-warn-speeches (new 'static 'bot-speech-list-shuffle
      :flags #xa
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 1 2 5 6 8 9 10 12 13 16 17 18 19)
      )
    :default-check-too-far #f
    :waypoints (new 'static 'boxed-array :type bot-waypoint
      (new 'static 'bot-waypoint
        :waypoint-id 1
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (process-entity-status! arg0 (entity-perm-status no-kill) #t)
          (set-setting! 'exclusive-task #f 0.0 (game-task city-escort-kid))
          (set-setting! 'allow-continue #f 0.0 0)
          (clear-speech-flags! arg0)
          (speech-control-method-10
            *speech-control*
            6
            (new 'static 'speech-type-info
              :channel #x1
              :priority -2
              :min-delay #x258
              :max-delay #x4b0
              :list (new 'static 'boxed-array :type string
                "kg280a"
                "kg281a"
                "kg282a"
                "kg283a"
                "kg284a"
                "kg285a"
                "kg286a"
                "kg287a"
                "kg288a"
                "kg289a"
                "kg290a"
                "kg291a"
                "kg292a"
                "kg294a"
                "kg297a"
                "kg298a"
                )
              )
            )
          (speech-control-method-10
            *speech-control*
            7
            (new 'static 'speech-type-info
              :channel #x1
              :priority -2
              :min-delay #x258
              :max-delay #x4b0
              :list (new 'static 'boxed-array :type string
                "kg280a"
                "kg281a"
                "kg282a"
                "kg283a"
                "kg284a"
                "kg285a"
                "kg286a"
                "kg287a"
                "kg288a"
                "kg289a"
                "kg290a"
                "kg291a"
                "kg292a"
                "kg294a"
                "kg295a"
                "kg296a"
                "kg297a"
                "kg298a"
                )
              )
            )
          (let ((v1-12 (-> arg0 actor-group 0 data 3 actor)))
            (if v1-12
                (logior! (-> v1-12 extra perm status) (entity-perm-status bit-9))
                )
            )
          (set-setting! 'airlock #f 0.0 0)
          (set-setting! 'minimap 'clear 0.0 (minimap-flag task-graph))
          (let ((s5-0 (new 'stack-no-clear 'task-arrow-params)))
            (set! (-> s5-0 pos quad) (-> arg0 hal4-course spots 1 center quad))
            (quaternion-identity! (-> s5-0 quat))
            (set! (-> s5-0 flags) (task-arrow-flags))
            (set! (-> s5-0 map-icon) (the-as uint 15))
            (set! (-> arg0 arrow-handle) (process->handle (task-arrow-spawn s5-0 (the-as task-arrow arg0))))
            )
          (let ((v1-24 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-24 bytes 5) 1)
            (set! (-> v1-24 bytes 6) 0)
            (set! (-> v1-24 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-24) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (let* ((v1-3 (-> arg1 actor-group 0 data 1 actor))
                             (s4-0 (when v1-3
                                     (let ((s5-0 (-> v1-3 extra process)))
                                       (if (type? s5-0 process-focusable)
                                           s5-0
                                           )
                                       )
                                     )
                                   )
                             (v1-8 (-> arg1 actor-group 0 data 2 actor))
                             (s5-1 (when v1-8
                                     (let ((s3-0 (-> v1-8 extra process)))
                                       (if (type? s3-0 process-focusable)
                                           s3-0
                                           )
                                       )
                                     )
                                   )
                             (v1-10 *traffic-manager*)
                             )
                        (cond
                          ((not (logtest? (-> arg1 waypoint-bits) 1))
                           (when (and s4-0 (and s5-1 v1-10))
                             (logior! (-> arg1 waypoint-bits) 1)
                             (set! (-> arg1 slave-handle 0) (process->handle s4-0))
                             (set! (-> arg1 slave-handle 1) (process->handle s5-1))
                             )
                           #f
                           )
                          ((not (logtest? (-> arg1 waypoint-bits) 2))
                           (logior! (-> arg1 waypoint-bits) 2)
                           (hal-method-226 arg1)
                           (send-event s4-0 'request 'waypoint 2)
                           (send-event s5-1 'request 'waypoint 2)
                           #f
                           )
                          ((not (logtest? (-> arg1 waypoint-bits) 4))
                           (logior! (-> arg1 waypoint-bits) 4)
                           (let ((s5-2 *traffic-manager*))
                             (send-event s5-2 'deactivate-all)
                             (let ((s4-1 (new 'stack 'traffic-object-spawn-params)))
                               (set! (-> s4-1 position quad) (-> arg1 hal4-course spots 2 center quad))
                               (quaternion-axis-angle! (-> s4-1 rotation) 0.0 1.0 0.0 0.0)
                               (set! (-> s4-1 object-type) (traffic-type cara))
                               (set! (-> s4-1 behavior) (the-as uint 0))
                               (set! (-> s4-1 id) (the-as uint 0))
                               (set! (-> s4-1 proc) #f)
                               (send-event s5-2 'spawn-object s4-1)
                               (let ((a0-26 (-> s4-1 proc)))
                                 (if a0-26
                                     (set! (-> arg1 vehicle-handle) (process->handle a0-26))
                                     )
                                 )
                               )
                             )
                           #f
                           )
                          (else
                            (let ((a0-30 s4-0))
                              (when (and (and a0-30 (let ((s4-2 1))
                                                      (< s4-2 (the-as int (send-event a0-30 'query 'waypoint)))
                                                      )
                                              )
                                         (let ((a0-32 s5-1))
                                           (and a0-32 (let ((s5-3 1))
                                                        (< s5-3 (the-as int (send-event a0-32 'query 'waypoint)))
                                                        )
                                                )
                                           )
                                         )
                                (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                (go-to-waypoint! arg1 2 #f)
                                (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                #t
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 2
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 hal-escort))
          (set-setting! 'sound-mode #f 0.0 2)
          (let ((s5-0 (-> arg0 hal4-course spots)))
            (vector-! (the-as vector (-> arg0 notice-plane)) (the-as vector (-> s5-0 4)) (the-as vector (-> s5-0 3)))
            (vector-normalize! (-> arg0 notice-plane) 1.0)
            (set! (-> arg0 notice-plane w)
                  (- (vector-dot (the-as vector (-> s5-0 3)) (the-as vector (-> arg0 notice-plane))))
                  )
            )
          (play-speech arg0 0)
          (let ((v1-10 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-10 bytes 5) 1)
            (set! (-> v1-10 bytes 6) 0)
            (set! (-> v1-10 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-10) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (local-vars (v1-14 symbol))
                      (let ((s5-0 (new 'stack-no-clear 'vector)))
                        (let* ((v1-3 (-> arg1 actor-group 0 data 1 actor))
                               (a0-1 (when v1-3
                                       (let ((s4-0 (-> v1-3 extra process)))
                                         (if (type? s4-0 process-focusable)
                                             s4-0
                                             )
                                         )
                                       )
                                     )
                               )
                          (when a0-1
                            (set! (-> s5-0 quad) (-> (get-trans (the-as process-focusable a0-1) 0) quad))
                            (set! (-> s5-0 w) 1.0)
                            (when (>= (vector4-dot s5-0 (the-as vector (-> arg1 notice-plane))) 0.0)
                              (set! v1-14 #t)
                              (goto cfg-14)
                              )
                            )
                          )
                        (set! (-> s5-0 quad) (-> (math-camera-pos) quad))
                        (set! (-> s5-0 w) 1.0)
                        (when (>= (vector4-dot s5-0 (the-as vector (-> arg1 notice-plane))) 0.0)
                          (set! v1-14 #t)
                          (goto cfg-14)
                          )
                        (set! (-> s5-0 quad) (-> (target-pos 0) quad))
                        (set! (-> s5-0 w) 1.0)
                        (when (>= (vector4-dot s5-0 (the-as vector (-> arg1 notice-plane))) 0.0)
                          (set! v1-14 #t)
                          (goto cfg-14)
                          )
                        )
                      (set! v1-14 #f)
                      (label cfg-14)
                      (when v1-14
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 3 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        #t
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 3
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 hal-escort))
          (init-traffic-params! arg0 #t)
          (set-setting! 'sound-mode #f 0.0 1)
          (let ((v1-5 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-5 bytes 5) 1)
            (set! (-> v1-5 bytes 6) 0)
            (set! (-> v1-5 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-5) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (if (and (not (speech-playing? arg1 3))
                               (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 1))
                               (not (channel-active? arg1 (the-as uint 0)))
                               )
                          (play-speech arg1 3)
                          )
                      (when (hal-escort-method-228 arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 28 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (when (speech-playing? arg1 3)
                        (let* ((v1-27 (-> arg1 actor-group 0 data 2 actor))
                               (a0-11 (when v1-27
                                        (let ((s5-0 (-> v1-27 extra process)))
                                          (if (type? s5-0 process-focusable)
                                              s5-0
                                              )
                                          )
                                        )
                                      )
                               )
                          (when (and a0-11 (>= (the-as int (send-event a0-11 'query 'waypoint)) 6))
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 6 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort)) (set-traffic-danger! arg0) (hal-escort-method-235 arg0) (none))
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 6
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 hal-escort))
          (reset-warn-time! arg0)
          (let ((v1-3 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-3 bytes 5) 1)
            (set! (-> v1-3 bytes 6) 0)
            (set! (-> v1-3 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-3) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (when (hal-escort-method-228 arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 28 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (when (vehicle-destroyed? arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 29 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (let* ((v1-25 (-> arg1 actor-group 0 data 2 actor))
                             (a0-9 (when v1-25
                                     (let ((s5-0 (-> v1-25 extra process)))
                                       (if (type? s5-0 process-focusable)
                                           s5-0
                                           )
                                       )
                                     )
                                   )
                             )
                        (when (and a0-9 (>= (the-as int (send-event a0-9 'query 'waypoint)) 15))
                          (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                          (go-to-waypoint! arg1 15 #f)
                          (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                          #t
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort)) (set-traffic-danger! arg0) (hal-escort-method-235 arg0) (none))
        :on-skipping-here #f
        :check-too-far 'hal4-walking-too-far
        )
      (new 'static 'bot-waypoint
        :waypoint-id 15
        :nav-mesh-index -1
        :skip-to #x14
        :on-set (lambda ((arg0 hal-escort))
          (send-event *traffic-manager* 'set-guard-force-visible #f)
          (let ((v1-5 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-5 bytes 5) 1)
            (set! (-> v1-5 bytes 6) 0)
            (set! (-> v1-5 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-5) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (hal-escort-method-232 arg1)
                      (when (hal-escort-method-228 arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 28 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (when (vehicle-destroyed? arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 29 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (when (hal-escort-method-227 arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 30 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (let* ((v1-38 (-> arg1 actor-group 0 data 1 actor))
                             (s4-0 (when v1-38
                                     (let ((s5-0 (-> v1-38 extra process)))
                                       (if (type? s5-0 process-focusable)
                                           s5-0
                                           )
                                       )
                                     )
                                   )
                             (v1-43 (-> arg1 actor-group 0 data 2 actor))
                             (s5-1 (when v1-43
                                     (let ((s3-0 (-> v1-43 extra process)))
                                       (if (type? s3-0 process-focusable)
                                           s3-0
                                           )
                                       )
                                     )
                                   )
                             (a0-16 s4-0)
                             )
                        (cond
                          ((and (and a0-16 (>= (the-as int (send-event a0-16 'query 'waypoint)) 18))
                                (let ((a0-18 s5-1))
                                  (and a0-18 (>= (the-as int (send-event a0-18 'query 'waypoint)) 18))
                                  )
                                )
                           (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                           (go-to-waypoint! arg1 18 #f)
                           (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                           #t
                           )
                          (else
                            (let ((a0-22 s4-0))
                              (when (or (and a0-22 (>= (the-as int (send-event a0-22 'query 'waypoint)) 17))
                                        (let ((a0-24 s5-1))
                                          (and a0-24 (>= (the-as int (send-event a0-24 'query 'waypoint)) 17))
                                          )
                                        )
                                (let ((s3-1 (try-enter-vehicle arg1))
                                      (gp-1 (handle->process (-> arg1 vehicle-handle)))
                                      )
                                  (let ((a0-29 s4-0))
                                    (if (and a0-29 (>= (the-as int (send-event a0-29 'query 'waypoint)) 17))
                                        (send-event s4-0 'request 'move-to-vehicle gp-1 s3-1)
                                        )
                                    )
                                  (let ((a0-33 s5-1))
                                    (if (and a0-33 (>= (the-as int (send-event a0-33 'query 'waypoint)) 17))
                                        (send-event s5-1 'request 'move-to-vehicle gp-1 s3-1)
                                        )
                                    )
                                  )
                                )
                              )
                            #f
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort)) (set-traffic-danger! arg0) (hal-escort-method-235 arg0) (none))
        :on-skipping-here (lambda ((arg0 hal-escort))
          (set! (-> arg0 dont-fail-until) (+ (current-time) (seconds 10)))
          (reset-warn-time! arg0)
          (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
          (send-event *target* 'continue (get-continue-by-name *game-info* "lkiddoge-skip0"))
          (let* ((v1-16 (-> arg0 actor-group 0 data 2 actor))
                 (s5-1 (when v1-16
                         (let ((s4-0 (-> v1-16 extra process)))
                           (if (type? s4-0 process-focusable)
                               s4-0
                               )
                           )
                         )
                       )
                 (v1-21 (-> arg0 actor-group 0 data 1 actor))
                 (s4-1 (when v1-21
                         (let ((s3-0 (-> v1-21 extra process)))
                           (if (type? s3-0 process-focusable)
                               s3-0
                               )
                           )
                         )
                       )
                 )
            (send-event s5-1 'skip)
            (send-event s4-1 'skip)
            )
          (init-traffic-params! arg0 #f)
          (none)
          )
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 18
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (let ((s5-0 *traffic-manager*))
            (send-event s5-0 'set-alert-level 2)
            (send-event s5-0 'set-max-alert-level 2)
            (send-event s5-0 'set-guard-target-count-range 4 1 1)
            (send-event s5-0 'set-guard-target-count-range 5 1 1)
            )
          (let ((v1-25 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-25 bytes 5) 1)
            (set! (-> v1-25 bytes 6) 0)
            (set! (-> v1-25 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-25) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (hal-escort-method-232 arg1)
                      (when (and (not (logtest? (-> arg1 waypoint-bits) 1)) (not (-> *setting-control* user-current pilot-exit)))
                        (send-event (handle->process (-> arg1 arrow-handle)) 'set-position (-> arg1 hal4-course spots 6))
                        (logior! (-> arg1 waypoint-bits) 1)
                        )
                      (if (and (not (speech-playing? arg1 14))
                               (not (-> *setting-control* user-current pilot-exit))
                               (>= (- (current-time) (-> arg1 locked-player-time)) (seconds 1.5))
                               )
                          (play-speech arg1 14)
                          )
                      (when (vehicle-destroyed? arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 29 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (let* ((v1-45 (-> arg1 actor-group 0 data 1 actor))
                             (s5-0 (when v1-45
                                     (let ((s4-0 (-> v1-45 extra process)))
                                       (if (type? s4-0 process-focusable)
                                           s4-0
                                           )
                                       )
                                     )
                                   )
                             (v1-50 (-> arg1 actor-group 0 data 2 actor))
                             (s4-1 (when v1-50
                                     (let ((s3-0 (-> v1-50 extra process)))
                                       (if (type? s3-0 process-focusable)
                                           s3-0
                                           )
                                       )
                                     )
                                   )
                             )
                        (let ((s3-1 #f))
                          (let* ((s1-0 (handle->process (-> arg1 vehicle-handle)))
                                 (s2-0 (if (type? s1-0 process-focusable)
                                           s1-0
                                           )
                                       )
                                 )
                            (when s2-0
                              (let ((s1-1 (get-trans (the-as process-focusable s2-0) 0))
                                    (s0-0 (-> arg1 hal4-course spots 7))
                                    )
                                (if (and (>= (-> arg1 hal4-course spots 7 center w) (vector-vector-xz-distance s1-1 (the-as vector s0-0)))
                                         (>= 16384.0 (- (-> s1-1 y) (-> s0-0 center y)))
                                         (>= 61440.0 (vector-length (-> (the-as process-focusable s2-0) root-override transv)))
                                         (>= 1.0 (vector-length (-> (the-as process-focusable s2-0) rbody state ang-velocity)))
                                         )
                                    (set! s3-1 #t)
                                    )
                                )
                              )
                            )
                          (if (focus-test? (the-as process-focusable s5-0) pilot)
                              (send-event s5-0 'request 'exit-vehicle s3-1 1)
                              )
                          (if (focus-test? (the-as process-focusable s5-0) pilot)
                              (send-event s4-1 'request 'exit-vehicle s3-1 1)
                              )
                          (if (and (not (speech-playing? arg1 7))
                                   (not (focus-test? (the-as process-focusable s4-1) pilot-riding))
                                   (not (logtest? (bot-flags bf17) (-> (the-as bot s4-1) bot-flags)))
                                   s3-1
                                   (not (channel-active? arg1 (the-as uint 0)))
                                   )
                              (play-speech arg1 7)
                              )
                          )
                        (when (and (not (focus-test? (the-as process-focusable s4-1) pilot))
                                   (not (logtest? (bot-flags bf17) (-> (the-as bot s4-1) bot-flags)))
                                   (not (focus-test? (the-as process-focusable s5-0) pilot))
                                   (not (logtest? (bot-flags bf17) (-> (the-as bot s5-0) bot-flags)))
                                   )
                          (send-event *target* 'end-mode)
                          (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                          (go-to-waypoint! arg1 19 #f)
                          (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                          #t
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort))
          (when (and (not (speech-playing? arg0 31)) (not (speech-playing? arg0 32)))
            (let ((v1-7 (handle->process (-> arg0 vehicle-handle))))
              (if (and v1-7
                       (and (not (logtest? (-> (the-as vehicle v1-7) flags) (rigid-body-object-flag dead)))
                            (>= (vector-length (-> (the-as vehicle v1-7) root-override-2 transv)) 40960.0)
                            (not (channel-active? arg0 (the-as uint 0)))
                            )
                       )
                  (play-speech arg0 (if (zero? (get-rand-int arg0 2))
                                        32
                                        31
                                        )
                               )
                  )
              )
            )
          (when (and (zero? (-> arg0 locked-player-time))
                     (or (not (speech-playing? arg0 33)) (not (speech-playing? arg0 34)))
                     (>= (- (current-time) (-> arg0 played-get-in-time)) (seconds 6))
                     (not (channel-active? arg0 (the-as uint 0)))
                     )
            (let ((a0-18 (handle->process (-> arg0 vehicle-handle))))
              (when a0-18
                (let ((f0-1 (vector-vector-xz-distance (get-trans (the-as vehicle a0-18) 0) (target-pos 0))))
                  (when (and (< 28672.0 f0-1) (< f0-1 184320.0))
                    (play-speech arg0 (if (speech-playing? arg0 33)
                                          34
                                          33
                                          )
                                 )
                    (set! (-> arg0 played-get-in-time) (current-time))
                    )
                  )
                )
              )
            )
          (none)
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 20
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 7)
            (set! (-> v1-1 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-1) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (if (!= (level-status *level* 'ctyinda) 'active)
                          (set! (-> arg1 waypoint-time0) (current-time))
                          )
                      (when (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 0.25))
                        (let* ((v1-11 (-> arg1 actor-group 0 data 2 actor))
                               (s5-1 (when v1-11
                                       (let ((s4-0 (-> v1-11 extra process)))
                                         (if (type? s4-0 process-focusable)
                                             s4-0
                                             )
                                         )
                                       )
                                     )
                               (v1-16 (-> arg1 actor-group 0 data 1 actor))
                               (s4-1 (when v1-16
                                       (let ((s3-0 (-> v1-16 extra process)))
                                         (if (type? s3-0 process-focusable)
                                             s3-0
                                             )
                                         )
                                       )
                                     )
                               )
                          (send-event s5-1 'hide #f)
                          (send-event s4-1 'hide #f)
                          (send-event s5-1 'skip)
                          (send-event s4-1 'skip)
                          )
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 19 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        #t
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here (lambda ((arg0 hal-escort))
          (set! (-> arg0 dont-fail-until) (+ (current-time) (seconds 15)))
          (reset-warn-time! arg0)
          (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
          (let* ((v1-10 (-> arg0 actor-group 0 data 2 actor))
                 (s5-0 (when v1-10
                         (let ((s4-0 (-> v1-10 extra process)))
                           (if (type? s4-0 process-focusable)
                               s4-0
                               )
                           )
                         )
                       )
                 (v1-15 (-> arg0 actor-group 0 data 1 actor))
                 (s4-1 (when v1-15
                         (let ((s3-0 (-> v1-15 extra process)))
                           (if (type? s3-0 process-focusable)
                               s3-0
                               )
                           )
                         )
                       )
                 )
            (vector-reset! (-> (the-as process-focusable s5-0) root-override transv))
            (vector-reset! (-> (the-as process-focusable s4-1) root-override transv))
            (send-event s5-0 'hide #t)
            (send-event s4-1 'hide #t)
            )
          (send-event arg0 'move-trans (-> arg0 hal4-course spots 7))
          (send-event *target* 'continue (get-continue-by-name *game-info* "lkiddoge-skip1"))
          (none)
          )
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 19
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (reset-warn-time! arg0)
          (send-event (handle->process (-> arg0 arrow-handle)) 'set-position (-> arg0 hal4-course spots 8))
          (let ((s5-0 *traffic-manager*))
            (send-event s5-0 'set-alert-level 1)
            (send-event s5-0 'set-max-alert-level 1)
            (send-event s5-0 'set-guard-target-count-range 4 0 0)
            (send-event s5-0 'end-pursuit-by-type 18)
            (send-event s5-0 'set-guard-target-count-range 5 0 0)
            (send-event s5-0 'end-pursuit-by-type 19)
            )
          (let ((v1-43 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-43 bytes 5) 1)
            (set! (-> v1-43 bytes 6) 7)
            (set! (-> v1-43 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-43) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (when (and (not (speech-playing? arg1 4))
                                 (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 2))
                                 (not (channel-active? arg1 (the-as uint 0)))
                                 )
                        (play-speech arg1 15)
                        (play-speech arg1 4)
                        )
                      (when (hal-escort-method-228 arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 31 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (let* ((v1-27 (-> arg1 actor-group 0 data 2 actor))
                             (s4-0 (when v1-27
                                     (let ((s5-0 (-> v1-27 extra process)))
                                       (if (type? s5-0 process-focusable)
                                           s5-0
                                           )
                                       )
                                     )
                                   )
                             (v1-32 (-> arg1 actor-group 0 data 1 actor))
                             (s5-1 (when v1-32
                                     (let ((s3-0 (-> v1-32 extra process)))
                                       (if (type? s3-0 process-focusable)
                                           s3-0
                                           )
                                       )
                                     )
                                   )
                             )
                        (when (and (and s4-0 (>= (the-as int (send-event s4-0 'query 'waypoint)) 25))
                                   (and s5-1 (>= (the-as int (send-event s5-1 'query 'waypoint)) 25))
                                   )
                          (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                          (go-to-waypoint! arg1 25 #f)
                          (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                          #t
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort))
          (hal-escort-method-232 arg0)
          (set-traffic-danger! arg0)
          (hal-escort-method-235 arg0)
          (none)
          )
        :on-skipping-here (lambda ((arg0 hal-escort))
          (set! (-> arg0 dont-fail-until) (+ (current-time) (seconds 15)))
          (reset-warn-time! arg0)
          (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
          (send-event arg0 'move-trans (-> arg0 hal4-course spots 7))
          (send-event *target* 'continue (get-continue-by-name *game-info* "lkiddoge-skip1"))
          (let* ((v1-23 (-> arg0 actor-group 0 data 2 actor))
                 (s5-1 (when v1-23
                         (let ((s4-0 (-> v1-23 extra process)))
                           (if (type? s4-0 process-focusable)
                               s4-0
                               )
                           )
                         )
                       )
                 (v1-28 (-> arg0 actor-group 0 data 1 actor))
                 (gp-1 (when v1-28
                         (let ((s4-1 (-> v1-28 extra process)))
                           (if (type? s4-1 process-focusable)
                               s4-1
                               )
                           )
                         )
                       )
                 )
            (send-event s5-1 'skip)
            (send-event gp-1 'skip)
            )
          (none)
          )
        :check-too-far 'hal4-walking-too-far
        )
      (new 'static 'bot-waypoint
        :waypoint-id 25
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 7)
            (set! (-> v1-1 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-1) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (when (hal-escort-method-228 arg1)
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 31 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        (return #t)
                        )
                      (let ((s4-0 (target-pos 0))
                            (s3-0 (-> arg1 hal4-course spots 9))
                            (s5-0 *target*)
                            )
                        (cond
                          ((and s5-0
                                (>= (-> s3-0 center w) (vector-vector-xz-distance s4-0 (-> s3-0 center)))
                                (and (>= (- (-> s4-0 y) (-> s3-0 center y)) -10240.0)
                                     (not (logtest? (-> s5-0 focus-status) (focus-status edge-grab)))
                                     )
                                )
                           (when (not (logtest? (-> arg1 bot-task-bits) 1))
                             (send-event *traffic-manager* 'set-alert-duration 300)
                             (logior! (-> arg1 bot-task-bits) 1)
                             )
                           (when (not (hal-escort-method-230 arg1))
                             (let* ((v1-34 (-> arg1 actor-group 0 data 2 actor))
                                    (s4-1 (when v1-34
                                            (let ((s3-1 (-> v1-34 extra process)))
                                              (if (type? s3-1 process-focusable)
                                                  s3-1
                                                  )
                                              )
                                            )
                                          )
                                    (v1-39 (-> arg1 actor-group 0 data 1 actor))
                                    (s3-2 (when v1-39
                                            (let ((s2-0 (-> v1-39 extra process)))
                                              (if (type? s2-0 process-focusable)
                                                  s2-0
                                                  )
                                              )
                                            )
                                          )
                                    )
                               (when (and (process-grab? s4-1 #t)
                                          (process-grab? s3-2 #t)
                                          (not (channel-active? arg1 (the-as uint 0)))
                                          (process-grab? s5-0 #f)
                                          )
                                 (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                 (go-to-waypoint! arg1 26 #f)
                                 (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                 (return #t)
                                 )
                               )
                             )
                           )
                          (else
                            (when (logtest? (-> arg1 bot-task-bits) 1)
                              (let ((s5-1 *traffic-manager*))
                                (send-event s5-1 'set-alert-level 1)
                                (send-event s5-1 'set-alert-duration #xa4cb80)
                                )
                              (set! (-> arg1 bot-task-bits) (logand -2 (-> arg1 bot-task-bits)))
                              )
                            )
                          )
                        )
                      #f
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort)) (set-traffic-danger! arg0) (hal-escort-method-235 arg0) (none))
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 26
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (remove-setting! 'sound-mode)
          (add-process
            *gui-control*
            arg0
            (gui-channel art-load)
            (gui-action queue)
            "dig-knock-down-scaffolding-intro"
            -99.0
            0
            )
          (remove-setting! 'airlock)
          (apply-settings *setting-control*)
          (send-event (handle->process (-> arg0 arrow-handle)) 'die)
          (play-speech arg0 11)
          (set-setting! 'entity-name "camera-224" 0.0 0)
          (let ((s5-0 *traffic-manager*))
            (send-event s5-0 'set-guard-target-level 0)
            (send-event s5-0 'set-max-alert-level 0)
            (send-event s5-0 'set-alert-level 0)
            )
          (let ((v1-32 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-32 bytes 5) 1)
            (set! (-> v1-32 bytes 6) 7)
            (set! (-> v1-32 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-32) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (with-pp
                        (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
                          (set! (-> a1-1 from) (process->ppointer pp))
                          (set! (-> a1-1 num-params) 0)
                          (set! (-> a1-1 message) 'open)
                          (let ((t9-0 send-event-function)
                                (v1-5 (-> arg1 actor-group 0 data 5 actor))
                                )
                            (t9-0
                              (if v1-5
                                  (-> v1-5 extra process)
                                  )
                              a1-1
                              )
                            )
                          )
                        (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
                          (set! (-> a1-2 from) (process->ppointer pp))
                          (set! (-> a1-2 num-params) 0)
                          (set! (-> a1-2 message) 'open)
                          (let ((t9-1 send-event-function)
                                (v1-13 (-> arg1 actor-group 0 data 6 actor))
                                )
                            (t9-1
                              (if v1-13
                                  (-> v1-13 extra process)
                                  )
                              a1-2
                              )
                            )
                          )
                        (when (and (not (logtest? (-> arg1 waypoint-bits) 2))
                                   (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 0.75))
                                   )
                          (logior! (-> arg1 waypoint-bits) 2)
                          (let ((s5-0 *traffic-manager*))
                            (send-event s5-0 'deactivate-by-type 6)
                            (send-event s5-0 'deactivate-by-type 18)
                            (send-event s5-0 'deactivate-by-type 19)
                            (send-event s5-0 'deactivate-by-type 20)
                            )
                          )
                        (when (and (not (logtest? (-> arg1 waypoint-bits) 1))
                                   (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 1.2))
                                   )
                          (let* ((v1-55 (-> arg1 actor-group 0 data 2 actor))
                                 (s5-1 (when v1-55
                                         (let ((s4-0 (-> v1-55 extra process)))
                                           (if (type? s4-0 process-focusable)
                                               s4-0
                                               )
                                           )
                                         )
                                       )
                                 )
                            (let* ((v1-60 (-> arg1 actor-group 0 data 1 actor))
                                   (a0-16 (when v1-60
                                            (let ((s4-1 (-> v1-60 extra process)))
                                              (if (type? s4-1 process-focusable)
                                                  s4-1
                                                  )
                                              )
                                            )
                                          )
                                   )
                              (logior! (-> arg1 waypoint-bits) 1)
                              (send-event a0-16 'request 'waypoint 26)
                              )
                            (send-event s5-1 'request 'waypoint 26)
                            )
                          )
                        (when (and (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 3))
                                   (not (channel-active? arg1 (the-as uint 0)))
                                   (scene-play arg1 "dig-knock-down-scaffolding-intro" #t)
                                   )
                          (remove-setting! 'entity-name)
                          (go-to-waypoint! arg1 27 #f)
                          (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                          #t
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 27
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 7)
            (set! (-> v1-1 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-1) check-done)
                  (the-as (function halt-wait-spot hal symbol) (lambda ((arg0 hal-escort)) (none)))
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 28
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (remove-setting! 'sound-mode)
          (let ((a0-2 *traffic-manager*))
            (send-event a0-2 'deactivate-by-type 6)
            )
          (let ((v1-8 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-8 bytes 5) 1)
            (set! (-> v1-8 bytes 6) 0)
            (set! (-> v1-8 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-8) check-done)
                  (the-as (function halt-wait-spot hal symbol) (lambda () #f))
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort))
          (when (not (logtest? (-> arg0 waypoint-bits) 1))
            (let* ((a1-1 (nav-mesh-from-res-tag (-> arg0 entity) 'nav-mesh-actor 0))
                   (gp-0 (hal-escort-method-234 arg0 a1-1))
                   )
              (when gp-0
                (logior! (-> arg0 waypoint-bits) 1)
                (let* ((v1-8 (-> arg0 actor-group 0 data 1 actor))
                       (a0-3 (when v1-8
                               (let ((s5-1 (-> v1-8 extra process)))
                                 (if (type? s5-1 process-focusable)
                                     s5-1
                                     )
                                 )
                               )
                             )
                       )
                  (send-event a0-3 'instant-arrest gp-0)
                  )
                )
              )
            )
          (none)
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 29
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (remove-setting! 'music)
          (remove-setting! 'sound-mode)
          (send-event (handle->process (-> arg0 arrow-handle)) 'die)
          (let ((v1-11 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-11 bytes 5) 1)
            (set! (-> v1-11 bytes 6) 0)
            (set! (-> v1-11 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-11) check-done)
                  (the-as
                    (function halt-wait-spot hal symbol)
                    (lambda ((arg0 object) (arg1 hal-escort))
                      (with-pp
                        (when (>= (- (current-time) (-> arg1 waypoint-time0)) (seconds 3))
                          (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
                            (set! (-> a1-1 from) (process->ppointer pp))
                            (set! (-> a1-1 num-params) 0)
                            (set! (-> a1-1 message) 'fail)
                            (let ((t9-0 send-event-function)
                                  (v1-8 (-> *game-info* sub-task-list (game-task-node city-escort-kid-resolution)))
                                  )
                              (t9-0
                                (handle->process (if (-> v1-8 info)
                                                     (-> v1-8 info manager)
                                                     (the-as handle #f)
                                                     )
                                                 )
                                a1-1
                                )
                              )
                            )
                          )
                        #f
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 30
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (remove-setting! 'music)
          (remove-setting! 'sound-mode)
          (let* ((v1-7 (-> arg0 actor-group 0 data 2 actor))
                 (a0-3 (when v1-7
                         (let ((s5-0 (-> v1-7 extra process)))
                           (if (type? s5-0 process-focusable)
                               s5-0
                               )
                           )
                         )
                       )
                 )
            (send-event a0-3 'request 'too-far-fail)
            )
          (let ((v1-15 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-15 bytes 5) 1)
            (set! (-> v1-15 bytes 6) 0)
            (set! (-> v1-15 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-15) check-done)
                  (the-as (function halt-wait-spot hal symbol) (lambda () #f))
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 31
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 hal-escort))
          (remove-setting! 'music)
          (remove-setting! 'sound-mode)
          (let ((a0-3 *traffic-manager*))
            (send-event a0-3 'deactivate-by-type 6)
            )
          (set-action!
            *gui-control*
            (gui-action stop)
            (the-as sound-id 1)
            (gui-channel art-load)
            (gui-action none)
            (the-as string #f)
            (the-as (function gui-connection symbol) #f)
            (the-as process #f)
            )
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) halt-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 7)
            (set! (-> v1-12 bytes 4) 0)
            (set! (-> (the-as halt-wait-spot v1-12) check-done)
                  (the-as (function halt-wait-spot hal symbol) (lambda () #f))
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 hal-escort))
          (when (not (logtest? (-> arg0 waypoint-bits) 1))
            (let* ((a1-1 (nav-mesh-from-res-tag (-> arg0 entity) 'nav-mesh-actor 1))
                   (gp-0 (hal-escort-method-234 arg0 a1-1))
                   )
              (when gp-0
                (logior! (-> arg0 waypoint-bits) 1)
                (let* ((v1-8 (-> arg0 actor-group 0 data 1 actor))
                       (a0-3 (when v1-8
                               (let ((s5-1 (-> v1-8 extra process)))
                                 (if (type? s5-1 process-focusable)
                                     s5-1
                                     )
                                 )
                               )
                             )
                       )
                  (send-event a0-3 'instant-arrest gp-0)
                  )
                )
              )
            )
          (none)
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      )
    :speeches (new 'static 'inline-array bot-speech-info 35
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "jd001")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "dsek002")
      (new 'static 'bot-speech-info :flags (speech-flags sf05) :hold-time #x5a :slave-id -1 :name "dsek003")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "dsek005")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "dsek006")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "dsek007")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "dsek008")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "dsek009")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "dsek010")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "dsek011")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "dsek012")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "dsek013")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "jk002")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk004")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "kg293a")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "kg299a")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "dsek001")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "dsek004")
      (new 'static 'bot-speech-info :flags (speech-flags sf03) :hold-time #x5a :slave-id -1 :name "jk001")
      (new 'static 'bot-speech-info :flags (speech-flags sf04) :hold-time #x5a :slave-id -1 :name "jk018")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk003")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk005")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk006")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk007")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk008")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk009")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk010")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk011")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk012")
      (new 'static 'bot-speech-info :flags (speech-flags sf02) :hold-time #x5a :slave-id -1 :name "jk013")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk017")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk015")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk016")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk014")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "jk019")
      )
    :speech-tunings (new 'static 'inline-array bot-speech-tuning 1
      (new 'static 'bot-speech-tuning :fo-min 100 :fo-max #x78 :fo-curve 1 :trans? #f)
      )
    :spots (new 'static 'inline-array bot-spot 10
      (new 'static 'bot-spot :center (new 'static 'vector :x 4703355.0 :y 33341.44 :z 225280.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4729856.0 :y 33341.44 :z 712335.4 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4729856.0 :y 42926.08 :z 712335.4 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4689756.0 :y 33341.44 :z 103383.04 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4672880.5 :y 33341.44 :z 90644.48 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4530954.0 :y 33341.44 :z 149504.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4036812.8 :y 32768.0 :z 4608123.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4036812.8 :y 32768.0 :z 4608123.0 :w 53248.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4479918.0 :y 103424.0 :z 4484137.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4471275.5 :y 101703.68 :z 4472054.0 :w 126976.0))
      )
    :defend-speeches (new 'static 'bot-speech-list-shuffle
      :flags #xa
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 20 21 22 23 24 25 26 27 28 29)
      )
    )
  )

(set! (-> *bot-course-table* course 10) *hal4-course*)
