;;-*-Lisp-*-
(in-package goal)

;; name: crocesc4-course.gc
;; name in dgo: crocesc4-course
;; dgos: LKIDDOGE

;; DECOMP BEGINS

(define *crocadog4-course*
  (new 'static 'bot-course
    :course-id #xc
    :spot-count #x17
    :default-check-too-far #f
    :waypoints (new 'static 'boxed-array :type bot-waypoint
      (new 'static 'bot-waypoint
        :waypoint-id 1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (process-entity-status! arg0 (entity-perm-status no-kill) #t)
          (clear-speech-flags! arg0)
          (logior! (-> arg0 focus-status) (focus-status disable))
          (set! (-> arg0 notice-enemy-dist) 0.0)
          (let ((v1-5 (-> arg0 root-override2 root-prim)))
            (set! (-> v1-5 prim-core collide-as) (collide-spec))
            (set! (-> v1-5 prim-core collide-with) (collide-spec))
            )
          0
          (move-to-point! (-> arg0 root-override2) (the-as vector (-> arg0 course spots 0)))
          (logclear! (-> arg0 mask) (process-mask actor-pause))
          (logclear! (-> arg0 enemy-flags) (enemy-flag notice))
          (let ((v1-16 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-16 bytes 5) 1)
            (set! (-> v1-16 bytes 6) 0)
            (set! (-> v1-16 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-16) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (< 1 (-> arg1 waypoint-request))
                        (let* ((a0-2 (-> arg1 actor-group 0 data 0 actor))
                               (v1-4 (if a0-2
                                         (-> a0-2 extra process)
                                         )
                                     )
                               )
                          (when v1-4
                            (set! (-> arg1 master-handle) (process->handle v1-4))
                            (set! (-> arg1 kid-handle) (-> (the-as hal-escort v1-4) slave-handle 0))
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 2 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 2
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (-> arg0 root-override2 root-prim)))
            (set! (-> v1-1 prim-core collide-as) (-> arg0 root-override2 backup-collide-as))
            (set! (-> v1-1 prim-core collide-with) (-> arg0 root-override2 backup-collide-with))
            )
          (vector-! (-> arg0 follow-dir) (the-as vector (-> arg0 course spots 2)) (-> arg0 root-override2 trans))
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-14 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-14 bytes 5) 1)
            (set! (-> v1-14 bytes 6) 1)
            (set! (-> v1-14 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-14) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 4 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 4
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 2)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 5 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 5
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (vector-! (-> arg0 follow-dir) (the-as vector (-> arg0 course spots 3)) (-> arg0 root-override2 trans))
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 3)
            (set! (-> v1-12 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-12) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 6 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 6
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (vector-! (-> arg0 follow-dir) (the-as vector (-> arg0 course spots 7)) (-> arg0 root-override2 trans))
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 4)
            (set! (-> v1-12 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-12) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 7 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 7
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 5)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 8 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 8
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 6)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 9 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 9
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (vector-! (-> arg0 follow-dir) (the-as vector (-> arg0 course spots 12)) (-> arg0 root-override2 trans))
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 7)
            (set! (-> v1-12 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-12) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 10 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 10
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 8)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 11 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 11
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 9)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 12 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 12
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 10)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 13 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 13
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 11)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 14 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 14
        :nav-mesh-index -1
        :skip-to #xf
        :on-set (lambda ((arg0 crocadog-escort))
          (vector-! (-> arg0 follow-dir) (the-as vector (-> arg0 course spots 14)) (-> arg0 root-override2 trans))
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 12)
            (set! (-> v1-12 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-12) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 15 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 15
        :nav-mesh-index -1
        :skip-to #x13
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 13)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 16 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (-> arg0 root-override2 root-prim)))
            (set! (-> v1-1 prim-core collide-as) (-> arg0 root-override2 backup-collide-as))
            (set! (-> v1-1 prim-core collide-with) (-> arg0 root-override2 backup-collide-with))
            )
          (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
          (send-event arg0 'move-trans (-> arg0 course spots 12))
          (vector-! (-> arg0 follow-dir) (the-as vector (-> arg0 course spots 14)) (-> arg0 root-override2 trans))
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (none)
          )
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 16
        :nav-mesh-index -1
        :skip-to #x13
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-3 (-> arg0 actor-group 0 data 0 actor)))
            (set! (-> arg0 poi-handle) (-> (the-as bot (if v1-3
                                                           (the-as bot (-> v1-3 extra process))
                                                           )
                                                   )
                                           vehicle-handle
                                           )
                  )
            )
          (let ((v1-7 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-7 bytes 5) 1)
            (set! (-> v1-7 bytes 6) 14)
            (set! (-> v1-7 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-7) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 17 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 17
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 15)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort)) (when (focus-test? arg1 pilot)
                                                                     (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                     (go-to-waypoint! arg1 18 #f)
                                                                     (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                     #t
                                                                     )
                            )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 18
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (clear-poi-and-focus! arg0)
          (let ((v1-3 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-3 bytes 5) 1)
            (set! (-> v1-3 bytes 6) 15)
            (set! (-> v1-3 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-3) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (and (not (focus-test? arg1 pilot)) (not (logtest? (bot-flags bf17) (-> arg1 bot-flags))))
                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                        (go-to-waypoint! arg1 19 #f)
                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                        #t
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 19
        :nav-mesh-index 1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((a1-0 (-> arg0 course spots)))
            (vector-! (-> arg0 follow-dir) (the-as vector (-> a1-0 19)) (the-as vector (-> a1-0 17)))
            )
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 17)
            (set! (-> v1-12 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-12) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 21 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (-> arg0 root-override2 root-prim)))
            (set! (-> v1-1 prim-core collide-as) (-> arg0 root-override2 backup-collide-as))
            (set! (-> v1-1 prim-core collide-with) (-> arg0 root-override2 backup-collide-with))
            )
          (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
          (send-event arg0 'move-trans (-> arg0 course spots 16))
          (none)
          )
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 21
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 18)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 22 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 22
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 19)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 23 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 23
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((a1-0 (-> arg0 course spots)))
            (vector-! (-> arg0 follow-dir) (the-as vector (-> a1-0 20)) (the-as vector (-> a1-0 19)))
            )
          (vector-normalize! (-> arg0 follow-dir) 1.0)
          (send-event (handle->process (-> arg0 master-handle)) 'notify 'follow-dir (-> arg0 follow-dir))
          (let ((v1-12 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-12 bytes 5) 1)
            (set! (-> v1-12 bytes 6) 20)
            (set! (-> v1-12 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-12) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 24 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 24
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 21)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort))
                      (when (outside-spot-radius? arg1 (the-as bot-spot #f) (the-as vector #f) #f)
                        (let* ((s5-0 (handle->process (-> arg1 kid-handle)))
                               (a0-6 (if (type? s5-0 process-focusable)
                                         s5-0
                                         )
                                     )
                               )
                          (when (or (not a0-6)
                                    (>= 20480.0
                                        (vector-vector-distance (get-trans (the-as process-focusable a0-6) 0) (-> arg1 root-override2 trans))
                                        )
                                    )
                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                            (go-to-waypoint! arg1 25 #f)
                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                            #t
                            )
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 25
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 22)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-1) check-done)
                  (the-as
                    (function crocesct-wait-spot crocadog-escort symbol)
                    (lambda ((arg0 object) (arg1 crocadog-escort)) (when (>= (-> arg1 waypoint-request) 26)
                                                                     (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                     (go-to-waypoint! arg1 26 #f)
                                                                     (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                     #t
                                                                     )
                            )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 26
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 crocadog-escort))
          (set! (-> arg0 poi-handle) (-> arg0 kid-handle))
          (set! (-> arg0 focus-mode) 1)
          (let ((v1-3 (get-task-by-type (-> arg0 ai-ctrl) crocesct-wait-spot arg0)))
            (set! (-> v1-3 bytes 5) 1)
            (set! (-> v1-3 bytes 6) 22)
            (set! (-> v1-3 bytes 4) -1)
            (set! (-> (the-as crocesct-wait-spot v1-3) check-done)
                  (the-as (function crocesct-wait-spot crocadog-escort symbol) (lambda ((arg0 crocadog-escort)) #f))
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      )
    :spots (new 'static 'inline-array bot-spot 23
      (new 'static 'bot-spot :center (new 'static 'vector :x 4708434.0 :y 33341.44 :z 172400.64 :w 10240.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4712284.0 :y 33341.44 :z 152944.64 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4670955.5 :y 33341.44 :z 107397.12 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4572528.5 :y 33341.44 :z 89006.08 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4531732.5 :y 33341.44 :z 142458.88 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4538245.0 :y 33341.44 :z 256942.08 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4420280.5 :y 33341.44 :z 274104.3 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4404142.0 :y 32358.4 :z 319979.53 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4434084.0 :y 33341.44 :z 381788.16 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4487577.5 :y 33341.44 :z 449167.38 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4472873.0 :y 33341.44 :z 570122.25 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4454113.5 :y 33341.44 :z 694026.25 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4488438.0 :y 33341.44 :z 751697.94 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4579287.0 :y 33341.44 :z 755793.94 :w 20480.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4746608.5 :y 33341.44 :z 711720.94 :w 61440.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4746608.5 :y 33341.44 :z 711720.94 :w 61440.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4101202.0 :y 32768.0 :z 4632617.0 :w 4096.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4164853.8 :y 32727.04 :z 4686848.0 :w 28672.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4245053.5 :y 55951.36 :z 4678983.5 :w 28672.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4424990.5 :y 99409.92 :z 4697743.5 :w 32768.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4433715.0 :y 99328.0 :z 4584571.0 :w 28672.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4429250.5 :y 99328.0 :z 4518748.0 :w 28672.0))
      (new 'static 'bot-spot :center (new 'static 'vector :x 4501954.5 :y 103874.56 :z 4503347.0 :w 14336.0))
      )
    )
  )

(set! (-> *bot-course-table* course 12) *crocadog4-course*)
