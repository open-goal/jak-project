;;-*-Lisp-*-
(in-package goal)

;; name: kidesc-states.gc
;; name in dgo: kidesc-states
;; dgos: LKIDDOGE

;; DECOMP BEGINS

(defstate waiting-idle (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (b!
      (not (and (-> self focus-info fproc) (>= (fabs (-> self focus-info ry-diff)) 9102.223)))
      cfg-6
      :delay (empty-form)
      )
    (go-waiting-turn self)
    (b! #t cfg-15 :delay (nop!))
    (label cfg-6)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (if (if (type? gp-0 process-focusable)
              gp-0
              )
          (go-virtual arrested)
          )
      )
    (label cfg-15)
    (when (not (focus-test? self grabbed))
      (cond
        ((logtest? (-> self bot-flags) (bot-flags bf15))
         (go-virtual move-to-vehicle)
         )
        ((not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
         (go-virtual traveling)
         )
        )
      )
    (none)
    )
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (cond
        ((and v1-2 (= v1-2 (-> self draw art-group data 3)))
         (ja-no-eval :num! (seek! max 0.1))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.2))
          )
        )
      )
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 3)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)) 0.1)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max 0.1))
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )

(defstate waiting-turn (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (when (not (focus-test? self grabbed))
      (if (and (not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
               (let ((gp-0 (handle->process (-> self arrestor-handle))))
                 (and (not (if (type? gp-0 process-focusable)
                               gp-0
                               )
                           )
                      (not (logtest? (-> self bot-flags) (bot-flags bf15)))
                      )
                 )
               )
          (go-virtual traveling)
          )
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 5)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 5)) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (check-arrest self)
    (none)
    )
  :post (behavior ()
    (seek-toward-heading-vec!
      (-> self root-override2)
      (-> self focus-info bullseye-xz-dir)
      49152.0
      (seconds 0.05)
      )
    (nav-enemy-simple-post)
    (none)
    )
  )

(defstate traveling (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-2 enemy-flags)))
          (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-2 enemy-flags))))
          )
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-2 enemy-flags))))
      (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info-override callback-info))
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (stop-looking-at-target! self)
    (nav-enemy-method-166 self)
    (set! (-> self player-blocking) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (cond
        ((if (type? gp-0 process-focusable)
             gp-0
             )
         (go-virtual arrested)
         )
        ((logtest? (-> self bot-flags) (bot-flags bf15))
         (go-virtual move-to-vehicle)
         )
        ((outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #t)
         (check-arrest self)
         )
        ((and (>= (- (current-time) (-> self state-time)) (seconds 0.5)) (bot-method-208 self))
         (go-virtual traveling-blocked)
         )
        ((and (nav-enemy-method-163 self) (>= (- (current-time) (-> self state-time)) (-> self reaction-time)))
         (go-stare2 self)
         )
        )
      )
    0
    (none)
    )
  :code (behavior ()
    (until #f
      (play-walk-anim self)
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (let ((a0-0 (-> self nav state))
          (v1-1 (-> self spot))
          )
      (logclear! (-> a0-0 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-0 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-0 target-post quad) (-> v1-1 center quad))
      )
    0
    (nav-enemy-travel-post)
    (none)
    )
  )

(defstate move-to-vehicle (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-2 enemy-flags)))
          (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-2 enemy-flags))))
          )
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-2 enemy-flags))))
      (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info-override callback-info))
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (stop-looking-at-target! self)
    (nav-enemy-method-166 self)
    (set! (-> self player-blocking) 0.0)
    (logclear! (-> self focus-status) (focus-status arrestable))
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self vehicle-handle))))
      (let ((s5-0 (handle->process (-> self arrestor-handle))))
        (cond
          ((if (type? s5-0 process-focusable)
               s5-0
               )
           (go-virtual arrested)
           )
          ((or (not gp-0)
               (logtest? (-> (the-as vehicle gp-0) flags) (rigid-body-object-flag dead))
               (not (logtest? (-> self bot-flags) (bot-flags bf15)))
               (< (-> self vehicle-seat-index) 0)
               )
           (logclear! (-> self bot-flags) (bot-flags bf15))
           (check-arrest self)
           )
          ((and (>= (- (current-time) (-> self state-time)) (seconds 0.5)) (bot-method-208 self))
           (go-virtual traveling-blocked)
           )
          ((and (nav-enemy-method-163 self) (>= (- (current-time) (-> self state-time)) (-> self reaction-time)))
           (go-stare2 self)
           )
          )
        )
      (let ((s5-1 (new 'stack-no-clear 'inline-array 'matrix 2)))
        (compute-seat-position (the-as vehicle gp-0) (the-as vector (-> s5-1 0)) (-> self vehicle-seat-index))
        (set! (-> s5-1 0 vector 1 quad) (-> self root-override2 trans quad))
        (set! (-> s5-1 0 trans quad) (-> s5-1 0 quad 0))
        (vector-!
          (the-as vector (-> s5-1 1))
          (the-as vector (-> s5-1 0))
          (-> (the-as vehicle gp-0) root-override-2 trans)
          )
        (vector-z-quaternion! (-> s5-1 0 vector 2) (-> self root-override2 quat))
        (let ((f30-1 (* 0.5 (vector-vector-xz-distance (-> s5-1 0 vector 1) (-> s5-1 0 trans)))))
          (vector-normalize! (-> s5-1 0 vector 2) (* 2.0 f30-1))
          (vector-normalize! (the-as vector (-> s5-1 1)) (* 4.0 f30-1))
          )
        (bot-method-181
          self
          (-> s5-1 1 vector 1)
          (-> s5-1 0 vector 1)
          (-> s5-1 0 vector 2)
          (-> s5-1 0 trans)
          (the-as vector (-> s5-1 1))
          0.8
          )
        (let ((a0-30 (-> self nav state))
              (v1-55 (-> s5-1 1 vector 1))
              )
          (logclear! (-> a0-30 flags) (nav-state-flag directional-mode))
          (logior! (-> a0-30 flags) (nav-state-flag target-poly-dirty))
          (set! (-> a0-30 target-post quad) (-> v1-55 quad))
          )
        0
        (if (and (< (vector-vector-xz-distance (the-as vector (-> s5-1 0)) (-> self root-override2 trans)) 17203.2)
                 (< (fabs (- (-> s5-1 0 vector 0 y) (-> self root-override2 trans y))) 20480.0)
                 )
            (go-virtual board-vehicle)
            )
        )
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (play-walk-anim self)
      (suspend)
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-travel-post)
  )

(defstate board-vehicle (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (let ((gp-0 (handle->process (-> self vehicle-handle))))
      (when (or (not (logtest? (-> self bot-flags) (bot-flags bf15))) (< (-> self vehicle-seat-index) 0))
        (logclear! (-> self bot-flags) (bot-flags bf15))
        (check-arrest self)
        )
      (put-rider-in-seat (the-as vehicle gp-0) (-> self vehicle-seat-index) self)
      )
    (set! (-> self focus-status) (logior (focus-status pilot) (-> self focus-status)))
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active))
    (logior! (-> self focus-status) (focus-status disable))
    (logclear! (-> self focus-status) (focus-status arrestable))
    (logclear! (-> self bot-flags) (bot-flags bf15))
    (none)
    )
  :exit (behavior ()
    (local-vars (v1-6 enemy-flag))
    (logior! (-> self root-override2 nav-flags) (nav-flags has-root-sphere))
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-5 (-> self enemy-flags)))
      (if (logtest? v1-5 (enemy-flag checking-water))
          (set! v1-6 (logior v1-5 (enemy-flag enable-on-active)))
          (set! v1-6 (logclear v1-5 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-6)
    (logclear! (-> self bot-flags) (bot-flags bf15))
    (none)
    )
  :trans (behavior ()
    (check-vehicle-exit self)
    (none)
    )
  :code (behavior ()
    (local-vars (sv-112 float))
    (ja-channel-push! 1 (seconds 0.1))
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (quaternion-copy! (the-as quaternion (-> gp-0 vector)) (-> self root-override2 quat))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 1.0 0) 0.25)
                  :frame-num (ja-aframe 0.0 0)
                  )
      (until (ja-done? 0)
        (let ((s5-1 (handle->process (-> self vehicle-handle)))
              (f30-0 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 0.0 0) (ja-aframe 1.0 0)))
              )
          (compute-seat-position (the-as vehicle s5-1) (-> gp-0 trans) (-> self vehicle-seat-index))
          (vector-! (-> gp-0 trans) (-> gp-0 trans) (-> self root-override2 trans))
          (quaternion<-rotate-y-vector (the-as quaternion (-> gp-0 vector 1)) (-> gp-0 trans))
          (quaternion-slerp!
            (-> self root-override2 quat)
            (the-as quaternion (-> gp-0 vector))
            (the-as quaternion (-> gp-0 vector 1))
            f30-0
            )
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 1.0 0) 0.25))
        )
      (let ((s5-3 (new 'stack-no-clear 'vector)))
        (set! (-> s5-3 quad) (-> self root-override2 trans quad))
        (quaternion-copy! (the-as quaternion (-> gp-0 vector)) (-> self root-override2 quat))
        (ja-no-eval :group! (-> self draw art-group data 10)
                    :num! (seek! (ja-aframe 8.0 0))
                    :frame-num (ja-aframe 1.0 0)
                    )
        (until (ja-done? 0)
          (let ((s4-2 (handle->process (-> self vehicle-handle))))
            (compute-seat-position (the-as vehicle s4-2) (-> gp-0 vector 2) (-> self vehicle-seat-index))
            (vector-! (-> gp-0 trans) (-> gp-0 vector 2) s5-3)
            (let ((s3-1 lerp-scale)
                  (s2-1 0.0)
                  (s1-1 1.0)
                  (s0-1 (ja-aframe-num 0))
                  )
              (set! sv-112 (ja-aframe 1.0 0))
              (let* ((t0-1 (ja-aframe 8.0 0))
                     (f30-1 (s3-1 s2-1 s1-1 s0-1 sv-112 t0-1))
                     )
                (quaternion-rotate-local-y!
                  (the-as quaternion (-> gp-0 vector 1))
                  (-> (the-as vehicle s4-2) root-override-2 quat)
                  (* f30-1 (if (zero? (-> self vehicle-seat-index))
                               -16384.0
                               16384.0
                               )
                     )
                  )
                (quaternion-slerp!
                  (-> self root-override2 quat)
                  (the-as quaternion (-> gp-0 vector))
                  (the-as quaternion (-> gp-0 vector 1))
                  f30-1
                  )
                (vector+float*! (-> self root-override2 trans) s5-3 (-> gp-0 trans) f30-1)
                )
              )
            )
          (suspend)
          (ja :num! (seek! (ja-aframe 8.0 0)))
          )
        )
      (logclear! (-> self root-override2 nav-flags) (nav-flags has-root-sphere))
      (let ((v1-49 (-> self nav)))
        (logclear! (-> v1-49 shape nav-flags) (nav-flags has-extra-sphere))
        )
      0
      (quaternion-copy! (new 'stack-no-clear 'quaternion) (-> self root-override2 quat))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 12.0 0) 0.25)
                  :frame-num (ja-aframe 8.0 0)
                  )
      (until (ja-done? 0)
        (let ((s5-5 (handle->process (-> self vehicle-handle))))
          (quaternion-copy! (the-as quaternion (-> gp-0 vector 1)) (-> (the-as vehicle s5-5) root-override-2 quat))
          (compute-seat-position (the-as vehicle s5-5) (-> self root-override2 trans) (-> self vehicle-seat-index))
          )
        (let ((f0-16 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 8.0 0) (ja-aframe 11.0 0))))
          (quaternion-rotate-local-y!
            (-> self root-override2 quat)
            (the-as quaternion (-> gp-0 vector 1))
            (* (- 1.0 f0-16) (if (zero? (-> self vehicle-seat-index))
                                 -16384.0
                                 16384.0
                                 )
               )
            )
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 12.0 0) 0.25))
        )
      )
    (set! (-> self focus-status) (logior (focus-status pilot-riding pilot) (-> self focus-status)))
    (go-virtual ride-vehicle)
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )

(defstate ride-vehicle (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active))
    (logclear! (-> self root-override2 nav-flags) (nav-flags has-root-sphere))
    (let ((v1-11 (-> self nav)))
      (logclear! (-> v1-11 shape nav-flags) (nav-flags has-extra-sphere))
      )
    0
    (set! (-> self focus-status) (logior (focus-status disable pilot-riding pilot) (-> self focus-status)))
    (logclear! (-> self focus-status) (focus-status arrestable))
    (none)
    )
  :exit (behavior ()
    (local-vars (v1-4 enemy-flag))
    (logior! (-> self root-override2 nav-flags) (nav-flags has-root-sphere))
    (let ((v1-3 (-> self enemy-flags)))
      (if (logtest? v1-3 (enemy-flag checking-water))
          (set! v1-4 (logior v1-3 (enemy-flag enable-on-active)))
          (set! v1-4 (logclear v1-3 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-4)
    (logclear! (-> self bot-flags) (bot-flags bf15))
    (none)
    )
  :trans (behavior ()
    (check-vehicle-exit self)
    (if (and (logtest? (bot-flags bf16) (-> self bot-flags)) (want-exit-vehicle? self (-> self exit-vehicle-dest)))
        (go-virtual exit-vehicle)
        )
    0
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 2 (seconds 0.2))
    (ja :group! (-> self draw art-group data 11))
    (ja :chan 1 :group! (-> self draw art-group data 12))
    (let ((f30-0 0.5)
          (f28-0 0.5)
          (f26-0 0.5)
          )
      (until #f
        (let ((gp-0 (-> *target* pilot)))
          (when (and (nonzero? gp-0) gp-0)
            (let ((f20-0 (lerp-scale 0.0 1.0 (-> gp-0 left-right-interp) 1.0 -1.0))
                  (f24-0 (lerp-scale 0.0 1.0 (-> gp-0 front-back-interp) -1.0 1.0))
                  (f0-4 (+ (fabs (-> gp-0 left-right-interp)) (fabs (-> gp-0 front-back-interp))))
                  (f22-0 0.5)
                  )
              (if (< 0.0 f0-4)
                  (set! f22-0 (/ (fabs (-> gp-0 front-back-interp)) f0-4))
                  )
              (set! f30-0 (seek f30-0 f20-0 (* 4.0 (-> self clock seconds-per-frame))))
              (set! f28-0 (seek f28-0 f24-0 (* 4.0 (-> self clock seconds-per-frame))))
              (set! f26-0 (seek f26-0 f22-0 (* 4.0 (-> self clock seconds-per-frame))))
              )
            )
          )
        (ja :num-func num-func-identity :frame-num (ja-aframe f30-0 0))
        (let ((gp-2 (-> self skel root-channel 1)))
          (set! (-> gp-2 frame-interp 1) f26-0)
          (set! (-> gp-2 frame-interp 0) f26-0)
          (set! (-> gp-2 num-func) num-func-identity)
          (set! (-> gp-2 frame-num) (ja-aframe f28-0 0))
          )
        (suspend)
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )

(defstate exit-vehicle (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active))
    (logior! (-> self root-override2 nav-flags) (nav-flags has-root-sphere))
    (logior! (-> self focus-status) (focus-status disable))
    (logclear! (-> self focus-status) (focus-status arrestable))
    (none)
    )
  :exit (behavior ()
    (local-vars (v1-17 enemy-flag))
    (let ((a0-1 (handle->process (-> self vehicle-handle))))
      (if a0-1
          (remove-rider (the-as vehicle a0-1) self)
          )
      )
    (set! (-> self vehicle-seat-index) -1)
    (set! (-> self vehicle-handle) (the-as handle #f))
    (logclear! (-> self bot-flags) (bot-flags bf16))
    (logclear! (-> self focus-status) (focus-status pilot-riding pilot))
    (let ((v1-11 (-> self nav)))
      (logclear! (-> v1-11 shape nav-flags) (nav-flags has-extra-sphere))
      )
    0
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-16 (-> self enemy-flags)))
      (if (logtest? v1-16 (enemy-flag checking-water))
          (set! v1-17 (logior v1-16 (enemy-flag enable-on-active)))
          (set! v1-17 (logclear v1-16 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-17)
    (logclear! (-> self bot-flags) (bot-flags bf15))
    (none)
    )
  :trans (behavior ()
    (check-vehicle-exit self)
    (none)
    )
  :code (behavior ()
    (local-vars (sv-80 float) (sv-96 float))
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 10)
                :num! (seek! (ja-aframe 8.0 0) 0.25)
                :frame-num (ja-aframe 12.0 0)
                )
    (until (ja-done? 0)
      (let ((gp-1 (handle->process (-> self vehicle-handle))))
        (quaternion-copy! (-> self root-override2 quat) (-> (the-as vehicle gp-1) root-override-2 quat))
        (compute-seat-position (the-as vehicle gp-1) (-> self root-override2 trans) (-> self vehicle-seat-index))
        )
      (let ((f0-3 (lerp-scale 0.0 1.0 (ja-aframe-num 0) (ja-aframe 11.0 0) (ja-aframe 8.0 0))))
        (quaternion-rotate-local-y!
          (-> self root-override2 quat)
          (-> self root-override2 quat)
          (* f0-3 (if (zero? (-> self vehicle-seat-index))
                      -16384.0
                      16384.0
                      )
             )
          )
        )
      (suspend)
      (ja :num! (seek! (ja-aframe 8.0 0) 0.25))
      )
    (logclear! (-> self focus-status) (focus-status pilot-riding))
    (let ((gp-4 (new 'stack-no-clear 'vector))
          (s5-1 (new 'stack-no-clear 'quaternion))
          )
      (set! (-> gp-4 quad) (-> self root-override2 trans quad))
      (ja-no-eval :group! (-> self draw art-group data 10)
                  :num! (seek! (ja-aframe 0.0 0))
                  :frame-num (ja-aframe 8.0 0)
                  )
      (until (ja-done? 0)
        (let ((s4-2 (handle->process (-> self vehicle-handle))))
          (compute-seat-position (the-as vehicle s4-2) gp-4 (-> self vehicle-seat-index))
          (quaternion-rotate-local-y!
            s5-1
            (-> (the-as vehicle s4-2) root-override-2 quat)
            (if (zero? (-> self vehicle-seat-index))
                -16384.0
                16384.0
                )
            )
          )
        (let ((s4-3 (-> self root-override2 quat)))
          (let ((f30-0 (quaternion-y-angle s5-1)))
            (quaternion-identity! s4-3)
            (quaternion-rotate-y! s4-3 s4-3 f30-0)
            )
          (let ((s3-1 lerp-scale)
                (s2-1 0.0)
                (s1-0 1.0)
                (s0-0 (ja-aframe-num 0))
                )
            (set! sv-80 (ja-aframe 8.0 0))
            (let* ((t0-1 (ja-aframe 1.0 0))
                   (f0-11 (s3-1 s2-1 s1-0 s0-0 sv-80 t0-1))
                   )
              (quaternion-slerp! s4-3 s5-1 s4-3 f0-11)
              )
            )
          )
        (want-exit-vehicle? self (-> self exit-vehicle-dest))
        (let* ((v1-44 (-> self nav))
               (a1-25 (-> self exit-vehicle-dest))
               (f0-12 (-> v1-44 extra-nav-sphere w))
               )
          (set! (-> v1-44 extra-nav-sphere quad) (-> a1-25 quad))
          (set! (-> v1-44 extra-nav-sphere w) f0-12)
          )
        0
        (let ((v1-47 (-> self nav)))
          (set! (-> v1-47 extra-nav-sphere w) (-> self nav-radius-backup))
          )
        0
        (let ((v1-49 (-> self nav)))
          (logior! (-> v1-49 shape nav-flags) (nav-flags has-extra-sphere))
          )
        0
        (new 'stack-no-clear 'vector)
        (let ((s4-4 (new 'stack-no-clear 'vector)))
          (vector-! s4-4 gp-4 (-> self exit-vehicle-dest))
          (let ((s3-2 lerp-scale)
                (s2-2 0.0)
                (s1-1 1.0)
                (s0-1 (ja-aframe-num 0))
                )
            (set! sv-96 (ja-aframe 1.0 0))
            (let* ((t0-2 (ja-aframe 8.0 0))
                   (f0-15 (s3-2 s2-2 s1-1 s0-1 sv-96 t0-2))
                   )
              (vector+float*! (-> self root-override2 trans) (-> self exit-vehicle-dest) s4-4 f0-15)
              )
            )
          )
        (suspend)
        (ja :num! (seek! (ja-aframe 0.0 0)))
        )
      )
    (react-to-focus self)
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )

(defstate traveling-blocked (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (cond
        ((if (type? gp-0 process-focusable)
             gp-0
             )
         (go-virtual arrested)
         )
        ((and (>= (- (current-time) (-> self state-time)) (seconds 1)) (not (bot-method-208 self)))
         (if (logtest? (-> self bot-flags) (bot-flags bf15))
             (go-virtual move-to-vehicle)
             (go-virtual traveling)
             )
         )
        )
      )
    (none)
    )
  :code (-> (method-of-type kid-escort waiting-idle) code)
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )

(defstate stare (kid-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot stare) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logclear (-> v1-4 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (if (if (type? gp-0 process-focusable)
              gp-0
              )
          (go-virtual arrested)
          )
      )
    (when (>= (- (current-time) (-> self state-time)) (seconds 0.1))
      (when (not (nav-enemy-method-163 self))
        (if (logtest? (-> self bot-flags) (bot-flags bf15))
            (go-virtual move-to-vehicle)
            (go-virtual traveling)
            )
        )
      )
    (none)
    )
  :code (-> (method-of-type kid-escort waiting-idle) code)
  )

(defstate hit (kid-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot hit) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :code (behavior ()
    (local-vars (v1-7 enemy-flag) (v1-15 enemy-flag))
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-6 (-> self enemy-flags)))
      (if (logtest? v1-6 (enemy-flag checking-water))
          (set! v1-7 (logior v1-6 (enemy-flag enable-on-active)))
          (set! v1-7 (logclear v1-6 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-7)
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-move-dest))
        (set! (-> self mask) (logior (process-mask collectable) (-> self mask)))
        (logclear! (-> self mask) (process-mask collectable))
        )
    (let ((v1-14 (-> self enemy-flags)))
      (if (logtest? (enemy-flag no-initial-move-to-ground) v1-14)
          (set! v1-15 (logior (enemy-flag check-water-backup) v1-14))
          (set! v1-15 (logclear v1-14 (enemy-flag check-water-backup)))
          )
      )
    (set! (-> self enemy-flags) v1-15)
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (logclear! (-> self focus-status) (focus-status hit))
    (react-to-focus self)
    (none)
    )
  )

(defstate knocked (kid-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot knocked) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  )

(defstate arrested (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (stop-looking-at-target! self)
    (set! (-> self travel-anim-interp) 0.0)
    (set! (-> self focus-status) (logior (focus-status arrestable) (-> self focus-status)))
    (logclear! (-> self focus-status) (focus-status disable))
    (if (logtest? (bot-flags bf19) (-> self bot-flags))
        (logclear! (-> self enemy-flags) (enemy-flag enable-on-active checking-water))
        )
    (none)
    )
  :trans (behavior ()
    (cond
      ((logtest? (-> self bot-flags) (bot-flags bf09))
       (fail-falling self)
       )
      (else
        (bot-method-223 self #f)
        (when (not (logtest? (bot-flags bf19) (-> self bot-flags)))
          (if (and (-> self focus-info fproc) (>= (fabs (-> self focus-info ry-diff)) 9102.223))
              (go-waiting-turn self)
              )
          (when (not (focus-test? self grabbed))
            (let ((gp-0 (handle->process (-> self arrestor-handle))))
              (if (not (if (type? gp-0 process-focusable)
                           gp-0
                           )
                       )
                  (react-to-focus self)
                  )
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (cond
      ((logtest? (bot-flags bf19) (-> self bot-flags))
       (fail-mission! self)
       (let* ((gp-0 (handle->process (-> self arrestor-handle)))
              (v1-7 (if (type? gp-0 process-focusable)
                        gp-0
                        )
                    )
              )
         (if v1-7
             (logclear! (-> (the-as crimson-guard v1-7) enemy-flags) (enemy-flag enable-on-active checking-water))
             )
         )
       )
      (else
        (ja-channel-push! 1 (seconds 0.1))
        (ja-no-eval :group! (-> self draw art-group data 8)
                    :num! (seek!
                      (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 8)) frames num-frames) -1))
                      0.143
                      )
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max 0.143))
          )
        )
      )
    (let ((v1-34 (ja-group)))
      (if (not (and v1-34 (= v1-34 (-> self draw art-group data 8))))
          (ja-channel-push! 1 (seconds 0.1))
          )
      )
    (ja-no-eval :group! (-> self draw art-group data 9)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 9)) frames num-frames) -1)) 0.1)
                :frame-num 0.0
                )
    (when (not (logtest? (bot-flags bf19) (-> self bot-flags)))
      (until #f
        (until (ja-done? 0)
          (if (>= (- (current-time) (-> self state-time)) (seconds 2.5))
              (goto cfg-27)
              )
          (suspend)
          (ja :num! (seek! max 0.1))
          )
        (ja-no-eval :group! (-> self draw art-group data 9)
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 9)) frames num-frames) -1)) 0.1)
                    :frame-num 0.0
                    )
        )
      #f
      (label cfg-27)
      (fail-mission! self)
      (let* ((gp-1 (handle->process (-> self arrestor-handle)))
             (v1-93 (if (type? gp-1 process-focusable)
                        gp-1
                        )
                    )
             )
        (if v1-93
            (logclear! (-> (the-as crimson-guard v1-93) enemy-flags) (enemy-flag enable-on-active checking-water))
            )
        )
      )
    (set! (-> self state-time) (current-time))
    (until #f
      (until (ja-done? 0)
        (if (and (logtest? (-> self bot-flags) (bot-flags failed))
                 (>= (- (current-time) (-> self state-time)) (seconds 3))
                 (reset? *fail-mission-control*)
                 )
            (reset! *fail-mission-control*)
            )
        (suspend)
        (ja :num! (seek! max 0.1))
        )
      (ja-no-eval :group! (-> self draw art-group data 9)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 9)) frames num-frames) -1)) 0.1)
                  :frame-num 0.0
                  )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )

(defstate die-falling (kid-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot die-falling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    (set! (-> self focus-status) (logior (focus-status arrestable) (-> self focus-status)))
    (logclear! (-> self focus-status) (focus-status disable))
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 8)
                :num! (seek!
                  (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 8)) frames num-frames) -1))
                  0.143
                  )
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.143))
      )
    (ja-no-eval :group! (-> self draw art-group data 9)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 9)) frames num-frames) -1)) 0.1)
                :frame-num 0.0
                )
    (until #f
      (until (ja-done? 0)
        (if (and (logtest? (-> self bot-flags) (bot-flags failed))
                 (>= (- (current-time) (-> self state-time)) (seconds 3))
                 (reset? *fail-mission-control*)
                 )
            (reset! *fail-mission-control*)
            )
        (suspend)
        (ja :num! (seek! max 0.1))
        )
      (ja-no-eval :group! (-> self draw art-group data 9)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 9)) frames num-frames) -1)) 0.1)
                  :frame-num 0.0
                  )
      )
    #f
    (none)
    )
  )

(defstate failed (kid-escort)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot failed) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    (set! (-> self focus-status) (logior (focus-status arrestable) (-> self focus-status)))
    (logclear! (-> self focus-status) (focus-status disable))
    (none)
    )
  :code (-> (method-of-type kid-escort die-falling) code)
  )

(defstate knocked-off-vehicle (kid-escort)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kid-escort) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (stop-looking-at-target! self)
    (logior! (-> self bot-flags) (bot-flags bf09))
    (logclear! (-> self enemy-flags) (enemy-flag enable-on-active checking-water))
    (logclear! (-> self focus-status) (focus-status dangerous))
    (logclear! (-> self enemy-flags) (enemy-flag check-water))
    (logclear! (-> self mask) (process-mask collectable))
    (logclear! (-> self enemy-flags) (enemy-flag look-at-move-dest))
    (logclear! (-> self mask) (process-mask actor-pause))
    (logclear! (-> self enemy-flags) (enemy-flag notice))
    (set! (-> self focus-status) (logior (focus-status arrestable) (-> self focus-status)))
    (logior! (-> self focus-status) (focus-status disable))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (dotimes (gp-0 3)
      (ja-no-eval :group! (-> self draw art-group data 3)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)) 0.1)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max 0.1))
        )
      )
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 8)
                :num! (seek!
                  (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 8)) frames num-frames) -1))
                  0.143
                  )
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.143))
      )
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 9)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 9)) frames num-frames) -1)) 0.1)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max 0.1))
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kid-escort) nav-enemy-simple-post)
  )
