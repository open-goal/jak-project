;;-*-Lisp-*-
(in-package goal)

;; name: kidesc.gc
;; name in dgo: kidesc
;; dgos: LKIDDOGE

;; DECOMP BEGINS

(define *kid-escort-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 2
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x3 :param0 #x1 :param1 #x1)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 3
    :notice-anim 3
    :hostile-anim -1
    :hit-anim 3
    :knocked-anim 6
    :knocked-land-anim 7
    :die-anim 3
    :die-falling-anim 3
    :victory-anim -1
    :jump-wind-up-anim 3
    :jump-in-air-anim 3
    :jump-land-anim 3
    :neck-joint 6
    :look-at-joint 6
    :bullseye-joint 4
    :notice-distance (meters 30)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 30)
    :default-hit-points 100
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :movement-gravity (meters -100)
    :friction 0.7
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 40960.0
    :knocked-soft-vxz-hi 40960.0
    :knocked-soft-vy-lo 40960.0
    :knocked-soft-vy-hi 40960.0
    :knocked-medium-vxz-lo 40960.0
    :knocked-medium-vxz-hi 40960.0
    :knocked-medium-vy-lo 40960.0
    :knocked-medium-vy-hi 40960.0
    :knocked-hard-vxz-lo 40960.0
    :knocked-hard-vxz-hi 40960.0
    :knocked-hard-vy-lo 40960.0
    :knocked-hard-vy-hi 40960.0
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 40960.0
    :knocked-yellow-vy-lo 40960.0
    :knocked-yellow-vy-hi 40960.0
    :knocked-red-vxz-lo 40960.0
    :knocked-red-vxz-hi 40960.0
    :knocked-red-vy-lo 40960.0
    :knocked-red-vy-hi 40960.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 40960.0
    :knocked-blue-vy-lo 40960.0
    :knocked-blue-vy-hi 40960.0
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 3
    :turn-anim -1
    :run-anim 3
    :taunt-anim -1
    :run-travel-speed (meters 4.5)
    :run-acceleration (meters 5)
    :run-turning-acceleration (meters 6)
    :walk-travel-speed (meters 4.5)
    :walk-acceleration (meters 5)
    :walk-turning-acceleration (meters 6)
    :maximum-rotation-rate (degrees 360.0)
    :notice-nav-radius (meters 0.85)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *kid-escort-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod general-event-handler kid-escort ((obj kid-escort) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (with-pp
    (case arg2
      (('arrest)
       (let* ((s4-0 (handle->process (-> obj arrestor-handle)))
              (v1-4 (if (type? s4-0 process-focusable)
                        s4-0
                        )
                    )
              )
         (when (or (not v1-4)
                   (= v1-4 arg0)
                   (and (!= v1-4 arg0) (>= (- (-> pp clock frame-counter) (-> obj arrest-attempt-time)) (seconds 0.1)))
                   )
           (set! (-> obj arrestor-handle) (process->handle arg0))
           (set! (-> obj arrest-attempt-time) (-> pp clock frame-counter))
           (if (!= v1-4 arg0)
               (send-event (handle->process (-> obj master-handle)) 'notify 'arrest arg0)
               )
           )
         )
       #t
       )
      (('instant-arrest)
       (set! (-> obj bot-flags) (logior (bot-flags bf19) (-> obj bot-flags)))
       (let ((s5-1 (the-as crimson-guard (-> arg3 param 0))))
         (set! (-> obj arrestor-handle) (process->handle s5-1))
         (set! (-> obj arrest-attempt-time) (-> pp clock frame-counter))
         (let ((a1-11 (new 'stack-no-clear 'vector)))
           (vector-! a1-11 (-> s5-1 root-override2 trans) (-> obj root-override2 trans))
           (set! (-> a1-11 y) 0.0)
           (forward-up->quaternion (-> obj root-override2 quat) a1-11 *up-vector*)
           )
         (logclear! (-> obj enemy-flags) (enemy-flag enable-on-active checking-water))
         (logclear! (-> obj mask) (process-mask collectable))
         (logclear! (-> obj enemy-flags) (enemy-flag look-at-move-dest))
         (logclear! (-> obj mask) (process-mask actor-pause))
         (logclear! (-> obj enemy-flags) (enemy-flag notice))
         (send-event (handle->process (-> obj master-handle)) 'notify 'arrest s5-1)
         )
       (go (method-of-object obj arrested))
       )
      (('attack)
       ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
       #f
       )
      (('nav-mesh-kill)
       (change-to *default-nav-mesh* obj)
       #t
       )
      (else
        ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
        )
      )
    )
  )

(defmethod run-logic? kid-escort ((obj kid-escort))
  (or (not (logtest? (process-mask enemy) (-> *setting-control* user-current process-mask)))
      (logtest? (-> obj bot-flags) (bot-flags bf09))
      )
  )

(defmethod enemy-method-97 kid-escort ((obj kid-escort))
  (with-pp
    (let* ((s4-0 (handle->process (-> obj attacker-handle)))
           (s5-0 (if (type? s4-0 process-focusable)
                     s4-0
                     )
                 )
           (s3-0 (handle->process (-> obj arrestor-handle)))
           (s4-1 (if (type? s3-0 process-focusable)
                     s3-0
                     )
                 )
           )
      (when s5-0
        (cond
          ((= (-> s5-0 type) target)
           (when (or (not (logtest? (-> obj bot-flags) (bot-flags attacked)))
                     (>= (- (-> pp clock frame-counter) (-> obj attacker-time)) (seconds 1.5))
                     )
             (if (logtest? (-> obj bot-flags) (bot-flags attacked))
                 (reset-attacker! obj)
                 )
             (set! s5-0 (the-as process #f))
             (set! (-> obj attacker-handle) (the-as handle #f))
             )
           )
          (else
            (when (>= (- (-> pp clock frame-counter) (-> obj attacker-time)) (seconds 6))
              (set! s5-0 (the-as process #f))
              (set! (-> obj attacker-handle) (the-as handle #f))
              )
            )
          )
        )
      (when s4-1
        (when (or (>= (- (-> pp clock frame-counter) (-> obj arrest-attempt-time)) (seconds 0.5))
                  (logtest? (-> (the-as process-focusable s4-1) focus-status) (focus-status dead hit))
                  )
          (set! s4-1 (the-as process #f))
          (set! (-> obj arrestor-handle) (the-as handle #f))
          )
        )
      (let ((v1-34 (-> obj focus-mode))
            (s3-1 (the-as process #f))
            )
        (cond
          ((zero? v1-34)
           (cond
             (s4-1
               (set! s3-1 s4-1)
               )
             (s5-0
               (set! s3-1 s5-0)
               )
             ((begin (set! s3-1 (select-focus! obj)) s3-1)
              (empty)
              )
             (else
               (let ((s5-1 (handle->process (-> obj poi-handle))))
                 (set! s3-1 (if (type? s5-1 process-focusable)
                                s5-1
                                )
                       )
                 )
               (if s3-1
                   (empty)
                   (set! s3-1 *target*)
                   )
               )
             )
           )
          ((= v1-34 1)
           (cond
             (s4-1
               (set! s3-1 s4-1)
               )
             (s5-0
               (set! s3-1 s5-0)
               )
             (else
               (let ((s5-2 (handle->process (-> obj poi-handle))))
                 (set! s3-1 (if (type? s5-2 process-focusable)
                                s5-2
                                )
                       )
                 )
               (cond
                 (s3-1
                   (empty)
                   )
                 ((begin (set! s3-1 (select-focus! obj)) s3-1)
                  (empty)
                  )
                 (else
                   (set! s3-1 *target*)
                   )
                 )
               )
             )
           )
          )
        (cond
          (s3-1
            (try-update-focus (-> obj focus) (the-as process-focusable s3-1) obj)
            (if (and (logtest? (-> obj bot-flags) (bot-flags attacked)) (!= (-> s3-1 type) target))
                (logclear! (-> obj bot-flags) (bot-flags attacked))
                )
            )
          (else
            (clear-focused (-> obj focus))
            (logclear! (-> obj bot-flags) (bot-flags attacked))
            )
          )
        s3-1
        )
      )
    )
  )

;; WARN: Return type mismatch object vs symbol.
(defmethod alive? kid-escort ((obj kid-escort))
  (let ((t9-0 (method-of-type bot alive?)))
    (the-as symbol (and (t9-0 obj) (-> obj next-state) (let ((v1-3 (-> obj next-state name)))
                                                         (or (= v1-3 'waiting-idle) (= v1-3 'waiting-turn))
                                                         )
                        )
            )
    )
  )

(defmethod init-from-entity! kid-escort ((obj kid-escort) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (stack-size-set! (-> obj main-thread) 512)
  ((method-of-type bot init-from-entity!) obj arg0)
  (none)
  )

(defmethod init-enemy-collision! kid-escort ((obj kid-escort))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 3) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 4))
      (set! (-> s4-0 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid can-ride no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 3276.8 0.0 4505.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid can-ride))
      (set-vector! (-> v1-13 local-sphere) 0.0 2048.0 0.0 2048.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 3584.0 0.0 2048.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-17 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-17 local-sphere) 0.0 5120.0 0.0 2048.0)
      )
    (set! (-> s5-0 nav-radius) 3481.6)
    (let ((v1-19 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-19 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-19 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> s5-0 event-priority) (the-as uint 3))
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

(defmethod init! kid-escort ((obj kid-escort))
  "Set defaults for various fields."
  (let ((t9-0 (method-of-type bot init!)))
    (t9-0 obj)
    )
  (set! (-> obj min-speed) 18022.4)
  (set! (-> obj max-speed) 18432.0)
  (set! (-> obj channel) (the-as uint 26))
  (set! (-> obj notice-enemy-dist) 122880.0)
  (set! (-> obj travel-anim-interp) 0.0)
  (set! (-> obj focus-info max-los-dist) 0.0)
  (set-vector! (-> obj root-override2 scale) 1.2 1.2 1.2 1.0)
  (set! (-> obj spot-color) (the-as uint #x60004f8f))
  (set! (-> obj arrestor-handle) (the-as handle #f))
  (set! (-> obj crocadog-handle) (the-as handle #f))
  0
  (none)
  )

(defmethod init-enemy! kid-escort ((obj kid-escort))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (init! obj)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-kid-escort" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (init-enemy-behaviour-and-stats! obj *kid-escort-nav-enemy-info*)
  (let ((v1-7 (-> obj neck)))
    (set! (-> v1-7 up) (the-as uint 1))
    (set! (-> v1-7 nose) (the-as uint 2))
    (set! (-> v1-7 ear) (the-as uint 0))
    (set-vector! (-> v1-7 twist-max) 11832.889 11832.889 0.0 1.0)
    (set! (-> v1-7 ignore-angle) 30947.555)
    )
  (let ((t9-4 (method-of-type bot init-enemy!)))
    (t9-4 obj)
    )
  (let ((v1-10 (-> obj nav)))
    (set! (-> v1-10 sphere-mask) (the-as uint 126))
    )
  0
  (set! (-> obj my-simple-focus) (process-spawn simple-focus :to obj))
  (set! (-> obj draw light-index) (the-as uint 10))
  0
  (none)
  )

(defmethod bot-method-214 kid-escort ((obj kid-escort))
  #f
  )

(defmethod react-to-focus kid-escort ((obj kid-escort))
  "@TODO - flesh out docs"
  (check-arrest obj)
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod go-waiting-turn kid-escort ((obj kid-escort))
  (go (method-of-object obj waiting-turn))
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod check-arrest kid-escort ((obj kid-escort))
  (let ((s5-0 (handle->process (-> obj arrestor-handle))))
    (cond
      ((if (type? s5-0 process-focusable)
           s5-0
           )
       (go (method-of-object obj arrested))
       )
      ((logtest? (-> obj bot-flags) (bot-flags bf15))
       (go (method-of-object obj move-to-vehicle))
       )
      (else
        (go (method-of-object obj waiting-idle))
        )
      )
    )
  (none)
  )

(defmethod play-walk-anim kid-escort ((obj kid-escort))
  (with-pp
    (let ((f30-0 (-> obj nav state speed))
          (v1-5 (if (> (-> obj skel active-channels) 0)
                    (-> obj skel root-channel 0 frame-group)
                    )
                )
          )
      (cond
        ((and v1-5 (= v1-5 (-> obj draw art-group data 4)))
         (let* ((f28-0 (current-cycle-distance (-> obj skel)))
                (f0-1 (quaternion-y-angle (-> obj root-override2 quat)))
                (f1-0 (deg- f0-1 (-> obj travel-prev-ry)))
                (f0-4 (fmin 18432.0 (* 0.35342914 (-> pp clock frames-per-second) (fabs f1-0))))
                (f0-7 (/ (* 8.0 (fmax f30-0 f0-4)) (* 15.0 f28-0)))
                (a0-8 (-> obj skel root-channel 0))
                )
           (set! (-> a0-8 param 0) f0-7)
           (joint-control-channel-group-eval! a0-8 (the-as art-joint-anim #f) num-func-loop!)
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.15))
          (let ((a0-10 (-> obj skel root-channel 0)))
            (set! (-> a0-10 dist) 6553.6)
            (set! (-> a0-10 frame-group) (the-as art-joint-anim (-> obj draw art-group data 4)))
            (set! (-> a0-10 param 0) 1.0)
            (joint-control-channel-group! a0-10 (the-as art-joint-anim (-> obj draw art-group data 4)) num-func-loop!)
            )
          )
        )
      )
    (none)
    )
  )

(defmethod damage-amount-from-attack kid-escort ((obj kid-escort) (arg0 process) (arg1 event-message-block))
  "@returns the amount of damage taken from an attack.  This can come straight off the [[attack-info]] or via [[penetrate-using->damage]]"
  0
  )

(defmethod bot-method-190 kid-escort ((obj kid-escort))
  #t
  )

(defmethod enemy-method-78 kid-escort ((obj kid-escort) (arg0 (pointer float)))
  (ja-channel-push! 1 (seconds 0.1))
  (let ((a1-2 (-> obj draw art-group data (-> obj enemy-info-override knocked-land-anim)))
        (a0-4 (-> obj skel root-channel 0))
        )
    (set! (-> a0-4 frame-group) (the-as art-joint-anim a1-2))
    (set! (-> a0-4 param 0) (the float (+ (-> (the-as art-joint-anim a1-2) frames num-frames) -1)))
    (set! (-> a0-4 param 1) (-> arg0 0))
    (set! (-> a0-4 frame-num) 0.0)
    (joint-control-channel-group! a0-4 (the-as art-joint-anim a1-2) num-func-seek!)
    )
  #t
  )

;; WARN: Return type mismatch float vs meters.
(defmethod set-cam-height! kid-escort ((obj kid-escort) (arg0 vector))
  (the-as
    meters
    (cond
      ((and (-> obj next-state) (= (-> obj next-state name) 'arrested))
       (set-vector! arg0 49152.0 12288.0 49152.0 1.0)
       (vector<-cspace+vector! arg0 (-> obj node-list data 2) arg0)
       (if (logtest? (-> obj focus-status) (focus-status under-water))
           (set! (-> arg0 y) (+ (get-water-height obj) (-> *setting-control* cam-current target-height)))
           )
       )
      (else
        ((method-of-type bot set-cam-height!) obj arg0)
        )
      )
    )
  )

(defmethod get-penetrate-info kid-escort ((obj kid-escort))
  "@returns the allowed way(s) this enemy can take damage
@see [[penetrate]] and [[penetrated-by-all&hit-points->penetrated-by]]"
  (let ((v1-1 ((method-of-type bot get-penetrate-info) obj)))
    (logior (penetrate jak-yellow-shot jak-red-shot jak-blue-shot) v1-1)
    )
  )

(defmethod bot-method-193 kid-escort ((obj kid-escort))
  (let* ((t9-0 (method-of-type bot bot-method-193))
         (v0-0 (t9-0 obj))
         )
    (if (and (not v0-0) (logtest? #x1c00000 (-> obj incoming penetrate-using)))
        (set! v0-0 #t)
        )
    v0-0
    )
  )

(defmethod enemy-method-79 kid-escort ((obj kid-escort) (arg0 int) (arg1 enemy-knocked-info))
  (local-vars (gp-0 symbol))
  (case arg0
    ((3)
     (set! gp-0 (ja-done? 0))
     (let ((f30-0 1.0))
       (if (>= (ja-aframe-num 0) 5.0)
           (set! f30-0 0.28)
           )
       (let ((a0-4 (-> obj skel root-channel 0)))
         (set! (-> a0-4 param 0) (the float (+ (-> a0-4 frame-group frames num-frames) -1)))
         (set! (-> a0-4 param 1) f30-0)
         (joint-control-channel-group-eval! a0-4 (the-as art-joint-anim #f) num-func-seek!)
         )
       )
     )
    (else
      (set! gp-0 ((method-of-type bot enemy-method-79) obj arg0 arg1))
      )
    )
  gp-0
  )

(defmethod want-exit-vehicle? kid-escort ((obj kid-escort) (arg0 vector))
  (let ((s3-0 (handle->process (-> obj vehicle-handle))))
    (if (or (not s3-0) (not (-> obj nav)))
        (return #f)
        )
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (compute-seat-position (the-as vehicle s3-0) s4-0 (-> obj vehicle-seat-index))
      (vector-! s4-0 s4-0 (-> (the-as vehicle s3-0) root-override-2 trans))
      (set! (-> s4-0 y) 0.0)
      (vector-normalize! s4-0 (+ 14336.0 (vector-length s4-0)))
      (vector+! s4-0 s4-0 (-> (the-as vehicle s3-0) root-override-2 trans))
      (let ((s3-1 (new 'stack-no-clear 'collide-query)))
        (when (enemy-above-ground? obj s3-1 s4-0 (collide-spec backgnd) 8192.0 81920.0 1024.0)
          (set! (-> s4-0 y) (-> s3-1 best-other-tri intersect y))
          (let ((s3-2 (new 'stack-no-clear 'vector)))
            (do-navigation-to-destination (-> obj nav state) (-> obj root-override2 trans))
            (when (cloest-point-on-mesh (-> obj nav) s3-2 s4-0 (the-as nav-poly #f))
              (let ((f0-4 2048.0))
                (when (>= (* f0-4 f0-4) (vector-vector-xz-distance-squared s3-2 s4-0))
                  (set! (-> arg0 quad) (-> s3-2 quad))
                  #t
                  )
                )
              )
            )
          )
        )
      )
    )
  )

(defmethod check-vehicle-exit kid-escort ((obj kid-escort))
  (local-vars (v1-25 enemy-flag))
  (with-pp
    (when (logtest? (focus-status pilot) (-> obj focus-status))
      (let ((s5-0 (handle->process (-> obj vehicle-handle))))
        (when (or (not s5-0) (logtest? (-> (the-as vehicle s5-0) flags) (rigid-body-object-flag dead)))
          (set! (-> obj bot-flags) (logior (bot-flags bf17) (-> obj bot-flags)))
          (logclear! (-> obj bot-flags) (bot-flags bf15))
          (logclear! (-> obj focus-status) (focus-status pilot-riding pilot))
          (if (the-as vehicle s5-0)
              (remove-rider (the-as vehicle s5-0) obj)
              )
          (set! (-> obj vehicle-seat-index) -1)
          (set! (-> obj vehicle-handle) (the-as handle #f))
          (logior! (-> obj root-override2 nav-flags) (nav-flags has-root-sphere))
          (let* ((s4-0 (-> obj root-override2 quat))
                 (f30-0 (quaternion-y-angle s4-0))
                 )
            (quaternion-identity! s4-0)
            (quaternion-rotate-y! s4-0 s4-0 f30-0)
            )
          (let ((v1-24 (-> obj enemy-flags)))
            (if (logtest? v1-24 (enemy-flag checking-water))
                (set! v1-25 (logior v1-24 (enemy-flag enable-on-active)))
                (set! v1-25 (logclear v1-24 (enemy-flag enable-on-active)))
                )
            )
          (set! (-> obj enemy-flags) v1-25)
          (let ((s4-2 (vector-!
                        (new 'stack-no-clear 'vector)
                        (-> obj root-override2 trans)
                        (-> (the-as vehicle s5-0) root-override-2 trans)
                        )
                      )
                )
            (vector-normalize! s4-2 57344.0)
            (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-4 from) (process->ppointer pp))
              (set! (-> a1-4 num-params) 2)
              (set! (-> a1-4 message) 'attack)
              (set! (-> a1-4 param 0) (the-as uint #f))
              (let ((v1-31 (new 'static 'attack-info :mask (attack-info-mask vector id attacker-velocity knock))))
                (let* ((a0-23 *game-info*)
                       (a2-2 (+ (-> a0-23 attack-id) 1))
                       )
                  (set! (-> a0-23 attack-id) a2-2)
                  (set! (-> v1-31 id) a2-2)
                  )
                (set! (-> v1-31 vector quad) (-> s4-2 quad))
                (set! (-> v1-31 attacker-velocity quad) (-> s4-2 quad))
                (set! (-> v1-31 knock) (the-as uint 8))
                (set! (-> a1-4 param 1) (the-as uint v1-31))
                )
              (send-event-function obj a1-4)
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod go-hostile kid-escort ((obj kid-escort))
  (cond
    ((logtest? (bot-flags bf17) (-> obj bot-flags))
     (logior! (-> obj bot-flags) (bot-flags bf09))
     (logclear! (-> obj enemy-flags) (enemy-flag enable-on-active checking-water))
     (logclear! (-> obj focus-status) (focus-status dangerous))
     (logclear! (-> obj enemy-flags) (enemy-flag check-water))
     (logclear! (-> obj mask) (process-mask collectable))
     (logclear! (-> obj enemy-flags) (enemy-flag look-at-move-dest))
     (logclear! (-> obj mask) (process-mask actor-pause))
     (logclear! (-> obj enemy-flags) (enemy-flag notice))
     (logior! (-> obj focus-status) (focus-status disable))
     (go (method-of-object obj knocked-off-vehicle))
     )
    (else
      (react-to-focus obj)
      )
    )
  (none)
  )

(defmethod enemy-method-102 kid-escort ((obj kid-escort))
  (if (logtest? (bot-flags bf19) (-> obj bot-flags))
      #f
      ((method-of-type bot enemy-method-102) obj)
      )
  )

(defmethod go-idle kid-escort ((obj kid-escort))
  (cond
    ((task-node-closed? (game-task-node city-escort-kid-resolution))
     (cleanup-for-death obj)
     (go (method-of-object obj die-fast))
     )
    (else
      (check-arrest obj)
      )
    )
  (none)
  )
