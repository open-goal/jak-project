;;-*-Lisp-*-
(in-package goal)

;; name: height-map-h.gc
;; name in dgo: height-map-h
;; dgos: CWI

(declare-type xz-height-map structure)
(define-extern *traffic-height-map* xz-height-map)

;; DECOMP BEGINS

(deftype xz-height-map (structure)
  "TODO - not terribly well understood yet, but this is used for the traffic height map
this is primarily used to store a massive amount of bytes in the `data` field
all initialized from static data."
  ((offset        float          3 :offset-assert   0)
   (x-offset      float            :offset          0)
   (y-offset      float            :offset          4)
   (z-offset      float            :offset          8)
   (x-inv-spacing float            :offset-assert  12)
   (z-inv-spacing float            :offset-assert  16)
   (y-scale       float            :offset-assert  20)
   (dim           int16          2 :offset-assert  24)
   (x-dim         int16            :offset         24)
   (z-dim         int16            :offset         26)
   (data          (pointer int8)   :offset-assert  28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  (:methods
    (get-height-at-point (_type_ vector) float 9)
    (debug-draw-mesh (_type_ vector) none 10)
    (debug-print (_type_) none 11)
    (debug-draw-at-point (_type_ vector) none 12)
    (debug-draw (_type_ vector) none 13)
    (debug-add-offset (_type_ vector int) none 14)
    )
  )


(defun get-traffic-height ((arg0 vector))
  "@returns The value of [[xz-height-map::9]] using [[*traffic-height-map*]] and the [[vector]] provided
@see [[xz-height-map::9]]"
  (get-height-at-point *traffic-height-map* arg0)
  )
