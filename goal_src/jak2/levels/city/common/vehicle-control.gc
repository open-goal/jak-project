;;-*-Lisp-*-
(in-package goal)

;; name: vehicle-control.gc
;; name in dgo: vehicle-control
;; dgos: CWI

;; DECOMP BEGINS

(define *vehicle-control-debug-obj* (the-as object #f))

(defmethod vehicle-controller-method-21 vehicle-controller ((obj vehicle-controller))
  (when (logtest? (-> obj flags) (vehicle-controller-flag attached))
    (let ((v1-3 (-> obj branch)))
      (when (or (not v1-3) (zero? v1-3))
        (break!)
        0
        )
      (when (logtest? (the-as int v1-3) 15)
        (break!)
        0
        )
      (let ((v1-4 (-> v1-3 src-node)))
        (when (or (not v1-4) (zero? v1-4))
          (break!)
          0
          )
        (when (< (the-as uint #x8000000) (the-as uint v1-4))
          (break!)
          0
          )
        )
      )
    )
  0
  (none)
  )

(defmethod vehicle-controller-method-20 vehicle-controller ((obj vehicle-controller) (arg0 object) (arg1 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (set! (-> obj max-turn-speed) (sqrtf (* (fmax 16384.0 arg1) (-> obj turn-accel))))
    (let ((v1-1 (new 'stack-no-clear 'vehicle-control-point)))
      (vector-! (-> v1-1 normal) (-> obj turn-exit-point) (the-as vector arg0))
      (set! (-> v1-1 local-pos quad) (-> obj turn-exit-dir quad))
      (set! (-> v1-1 local-pos x) (-> obj turn-exit-dir z))
      (set! (-> v1-1 local-pos z) (- (-> obj turn-exit-dir x)))
      (logior! (-> obj flags) (vehicle-controller-flag left-turn))
      (when (< 0.0 (vector-dot (-> v1-1 normal) (-> v1-1 local-pos)))
        (logclear! (-> obj flags) (vehicle-controller-flag left-turn))
        (vector-float*! (-> v1-1 local-pos) (-> v1-1 local-pos) -1.0)
        )
      (let ((a1-6 (-> obj dest-circle)))
        (let ((a0-12 (-> obj turn-exit-point)))
          (let ((v1-2 (-> v1-1 local-pos)))
            (let ((a3-3 arg1))
              (.mov vf7 a3-3)
              )
            (.lvf vf5 (&-> v1-2 quad))
            )
          (.lvf vf4 (&-> a0-12 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a1-6 quad) vf6)
        )
      )
    (set! (-> obj dest-circle w) arg1)
    0
    (vehicle-controller-method-16 obj (-> obj path-prev-point) (-> obj turn-enter-point))
    (set! (-> obj target-point quad) (-> obj turn-enter-point quad))
    (vector-! (-> obj turn-enter-dir) (-> obj turn-enter-point) (-> obj path-prev-point))
    (set! (-> obj turn-enter-dir y) 0.0)
    (vector-normalize! (-> obj turn-enter-dir) 1.0)
    (let ((f0-12 (cos 8192.0))
          (f30-0 (vector-dot (-> obj turn-enter-dir) (-> obj turn-exit-dir)))
          )
      (set! (-> obj max-turn-speed)
            (* (-> obj max-turn-speed) (+ 1.0 (fmax 0.0 (/ (- f30-0 f0-12) (- 1.0 f0-12)))))
            )
      (if (>= f30-0 (cos 1820.4445))
          (set! (-> obj max-turn-speed) 409600.0)
          )
      )
    0
    (none)
    )
  )

(defmethod vehicle-controller-method-19 vehicle-controller ((obj vehicle-controller) (arg0 vector) (arg1 object) (arg2 vector) (arg3 vector))
  (set! (-> obj path-prev-point quad) (-> arg0 quad))
  (vector-vector-distance arg0 arg2)
  (set! (-> obj target-speed) (vector-length arg3))
  (set! (-> obj turn-exit-point quad) (-> arg2 quad))
  (set! (-> obj turn-exit-dir quad) (-> arg3 quad))
  (set! (-> obj turn-exit-dir y) 0.0)
  (vector-normalize! (-> obj turn-exit-dir) 1.0)
  (vehicle-controller-method-20 obj arg0 (the-as float arg1))
  (logior! (-> obj flags) (vehicle-controller-flag on-straightaway))
  0
  (none)
  )

(defmethod vehicle-controller-method-13 vehicle-controller ((obj vehicle-controller) (arg0 nav-branch) (arg1 vector))
  (vehicle-controller-method-10 obj (the-as traffic-tracker arg0))
  (set! (-> obj path-prev-point quad) (-> arg1 quad))
  (set! (-> obj branch) arg0)
  (let ((v1-3 arg0))
    (set! (-> obj target-speed) (* 1024.0 (the float (-> v1-3 speed-limit))))
    )
  (let ((s4-1 (-> arg0 dest-node)))
    (let ((a1-2 s4-1)
          (v1-6 (-> obj turn-exit-point))
          )
      (set! (-> v1-6 quad) (-> a1-2 position quad))
      (set! (-> v1-6 w) 1.0)
      )
    (let ((v1-7 s4-1)
          (s3-0 (-> obj turn-exit-dir))
          )
      (let ((f0-5 (the float (-> v1-7 angle)))
            (s2-0 (new 'stack-no-clear 'vector))
            )
        (sincos! s2-0 f0-5)
        (set! (-> s3-0 x) (-> s2-0 y))
        (set! (-> s3-0 y) 0.0)
        (set! (-> s3-0 z) (- (-> s2-0 x)))
        )
      (set! (-> s3-0 w) 1.0)
      )
    (vehicle-controller-method-20 obj arg1 (* 1024.0 (the float (-> s4-1 radius))))
    )
  (logior! (-> obj flags) (vehicle-controller-flag on-straightaway))
  0
  (none)
  )

(defmethod vehicle-controller-method-15 vehicle-controller ((obj vehicle-controller))
  (let ((gp-0 (the-as nav-branch #f)))
    (let* ((s5-0 (-> obj branch dest-node))
           (s4-0 (-> s5-0 branch-count))
           )
      (b! (!= s4-0 1) cfg-4 :delay (empty-form))
      (let ((v1-4 (-> s5-0 branch-array 0)))
        (if (!= (-> v1-4 dest-node id) #xffff)
            (set! gp-0 v1-4)
            )
        )
      (b! #t cfg-12 :delay (nop!))
      (label cfg-4)
      (when (< 1 s4-0)
        (let ((v1-6 (rand-vu-int-count s4-0))
              (a0-8 s4-0)
              )
          (b! #t cfg-10 :delay (nop!))
          (label cfg-6)
          (+! a0-8 -1)
          (let ((a1-3 (-> s5-0 branch-array v1-6)))
            (b! (not (!= (-> a1-3 dest-node id) #xffff)) cfg-8 :delay (empty-form))
            (set! gp-0 a1-3)
            )
          (b! #t cfg-12 :delay (nop!))
          (label cfg-8)
          (+! v1-6 1)
          (if (>= v1-6 s4-0)
              (set! v1-6 0)
              )
          (label cfg-10)
          (b! (nonzero? a0-8) cfg-6 :delay (nop!))
          )
        )
      )
    (label cfg-12)
    gp-0
    )
  )

(defmethod vehicle-controller-method-14 vehicle-controller ((obj vehicle-controller) (arg0 vehicle))
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (gp-0 ((-> obj choose-branch-callback) obj arg0))
        )
    (when gp-0
      (vehicle-controller-method-11 obj)
      (set! (-> s4-0 quad) (-> obj turn-exit-point quad))
      (vehicle-controller-method-13 obj gp-0 s4-0)
      )
    gp-0
    )
  )

(defmethod vehicle-controller-method-16 vehicle-controller ((obj vehicle-controller) (arg0 vector) (arg1 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'vehicle-control-point)))
      (vector-! (-> s4-0 local-pos) (-> obj dest-circle) arg0)
      (set! (-> s4-0 local-pos y) 0.0)
      (let* ((v1-1 (-> s4-0 local-pos))
             (f30-0 (sqrtf (+ (* (-> v1-1 x) (-> v1-1 x)) (* (-> v1-1 z) (-> v1-1 z)))))
             (f28-0 (-> obj dest-circle w))
             )
        (vector-xz-normalize! (-> s4-0 local-pos) 1.0)
        (set! (-> s4-0 normal x) (-> s4-0 local-pos z))
        (set! (-> s4-0 normal y) 0.0)
        (set! (-> s4-0 normal z) (- (-> s4-0 local-pos x)))
        (if (logtest? (-> obj flags) (vehicle-controller-flag left-turn))
            (vector-float*! (-> s4-0 normal) (-> s4-0 normal) -1.0)
            )
        (let* ((f0-10 f30-0)
               (f0-12 (* f0-10 f0-10))
               (f1-3 f28-0)
               (f1-6 (sqrtf (- f0-12 (* f1-3 f1-3))))
               (f0-15 (/ (* f28-0 f1-6) f30-0))
               )
          (let ((f1-9 (/ (* f1-6 f1-6) f30-0)))
            (set! (-> arg1 quad) (-> arg0 quad))
            (let ((a1-5 arg1))
              (let ((v1-12 arg1))
                (let ((a0-5 (-> s4-0 local-pos)))
                  (let ((a2-1 f1-9))
                    (.mov vf7 a2-1)
                    )
                  (.lvf vf5 (&-> a0-5 quad))
                  )
                (.lvf vf4 (&-> v1-12 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> a1-5 quad) vf6)
              )
            )
          (let ((a0-6 arg1))
            (let ((v1-13 arg1))
              (let ((a1-6 (-> s4-0 normal)))
                (let ((a2-2 f0-15))
                  (.mov vf7 a2-2)
                  )
                (.lvf vf5 (&-> a1-6 quad))
                )
              (.lvf vf4 (&-> v1-13 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a0-6 quad) vf6)
            )
          )
        )
      )
    (set! (-> arg1 y) (-> obj turn-exit-point y))
    0
    (none)
    )
  )

(defun nearest-dist2-between-moving-points ((arg0 vector) (arg1 vector) (arg2 vector) (arg3 vector) (arg4 float))
  (let ((t1-0 (new 'stack-no-clear 'vector))
        (v1-0 (new 'stack-no-clear 'vector))
        )
    (vector-! t1-0 arg2 arg0)
    (vector-! v1-0 arg3 arg1)
    (let ((f0-1 (vector-dot t1-0 t1-0))
          (f1-1 (vector-dot v1-0 v1-0))
          (f2-1 (vector-dot t1-0 v1-0))
          (f3-0 0.0)
          )
      (if (< 0.0 f1-1)
          (set! f3-0 (fmax 0.0 (fmin (/ (- f2-1) f1-1) arg4)))
          )
      (+ f0-1 (* 2.0 f2-1 f3-0) (* f3-0 f3-0 f1-1))
      )
    )
  )

(defmethod vehicle-controller-method-18 vehicle-controller ((obj vehicle-controller) (arg0 vector) (arg1 vector) (arg2 vehicle) (arg3 float))
  (local-vars
    (v1-24 float)
    (v1-88 float)
    (a0-35 float)
    (a0-96 int)
    (a0-98 int)
    (sv-16 vector)
    (sv-20 float)
    (sv-24 float)
    )
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let* ((v1-1 (-> *perf-stats* data 21))
           (a0-1 (-> v1-1 ctrl))
           )
      (+! (-> v1-1 count) 1)
      (b! (zero? a0-1) cfg-2 :delay (nop!))
      (.mtc0 Perf 0)
      (.sync.l)
      (.sync.p)
      (.mtpc pcr0 0)
      (.mtpc pcr1 0)
      (.sync.l)
      (.sync.p)
      (.mtc0 Perf a0-1)
      )
    (.sync.l)
    (.sync.p)
    (label cfg-2)
    0
    (set! sv-16 arg0)
    (set! sv-20 arg3)
    (set! sv-24 (-> arg2 info-override info inv-mass))
    (let ((gp-0 (new 'stack-no-clear 'inline-array 'vector 16)))
      (set! (-> gp-0 15 x) (+ (-> obj target-speed) (-> obj target-speed-offset)))
      (set! (-> gp-0 1 quad) (-> arg1 quad))
      (set! (-> gp-0 0 quad) (-> arg2 root-override-2 trans quad))
      (vector-z-quaternion! (-> gp-0 3) (-> arg2 root-override-2 quat))
      (vector-reset! (-> gp-0 2))
      (cond
        ((logtest? (-> obj flags) (vehicle-controller-flag on-straightaway))
         (vector-! (-> gp-0 6) (-> obj turn-enter-point) (-> gp-0 0))
         (let ((f0-5 (vector-dot (-> gp-0 6) (-> obj turn-enter-dir))))
           (vector+float*! (-> gp-0 4) (-> obj turn-enter-point) (-> obj turn-enter-dir) (- f0-5))
           (set! (-> gp-0 5 quad) (-> obj turn-enter-dir quad))
           (if (>= 0.0 f0-5)
               (logclear! (-> obj flags) (vehicle-controller-flag on-straightaway))
               )
           (when (not (logtest? (-> obj flags) (vehicle-controller-flag no-slowing-for-turns)))
             (let ((f1-4 (* 0.5 (/ 1.0 (-> obj turn-accel)))))
               (.lvf vf1 (&-> arg1 quad))
               (.add.w.vf vf2 vf0 vf0 :mask #b1)
               (.mul.vf vf1 vf1 vf1)
               (.mul.x.vf acc vf2 vf1 :mask #b1)
               (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
               (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
               (.mov v1-24 vf1)
               (let ((f2-2 v1-24)
                     (f3-1 (-> obj max-turn-speed))
                     )
                 (if (>= (* f1-4 (- f2-2 (* f3-1 f3-1))) f0-5)
                     (set! (-> gp-0 15 x) (fmin (-> gp-0 15 x) (-> obj max-turn-speed)))
                     )
                 )
               )
             )
           )
         )
        (else
          (if (not (logtest? (-> obj flags) (vehicle-controller-flag no-slowing-for-turns)))
              (set! (-> gp-0 15 x) (fmin (-> gp-0 15 x) (-> obj max-turn-speed)))
              )
          (vector-! (-> gp-0 6) (-> gp-0 0) (-> obj dest-circle))
          (vector-normalize! (-> gp-0 6) 1.0)
          (set! (-> gp-0 5 x) (- (-> gp-0 6 z)))
          (set! (-> gp-0 5 y) 0.0)
          (set! (-> gp-0 5 z) (-> gp-0 6 x))
          (if (logtest? (-> obj flags) (vehicle-controller-flag left-turn))
              (vector-float*! (-> gp-0 5) (-> gp-0 5) -1.0)
              )
          (vector-float*! (-> gp-0 6) (-> gp-0 6) (-> obj dest-circle w))
          (vector+! (-> gp-0 4) (-> obj dest-circle) (-> gp-0 6))
          (when (logtest? (-> obj flags) (vehicle-controller-flag attached))
            (vector-! (-> gp-0 9) (-> obj turn-exit-point) (-> gp-0 0))
            (when (and (< (vector-dot (-> obj turn-exit-dir) (-> gp-0 9)) 0.0)
                       (>= (vector-dot (-> obj turn-exit-dir) (-> gp-0 3)) (cos 8192.0))
                       )
              (if (not (vehicle-controller-method-14 obj arg2))
                  (set! (-> gp-0 15 x) 0.0)
                  )
              )
            )
          )
        )
      (set! (-> gp-0 4 y) (-> gp-0 0 y))
      (when (and (nonzero? (-> obj traffic))
                 (not (logtest? (-> obj flags) (vehicle-controller-flag ignore-others)))
                 (let ((f0-22 (-> arg2 camera-dist2))
                       (f1-9 1228800.0)
                       )
                   (< f0-22 (* f1-9 f1-9))
                   )
                 )
        (let ((s3-1 (new 'stack-no-clear 'array 'collide-shape 12))
              (f30-1 (-> arg2 root-override-2 root-prim prim-core world-sphere w))
              )
          (countdown (s4-1 (fill-actor-list-for-line-sphere
                             (-> obj traffic object-hash)
                             (-> gp-0 0)
                             (-> gp-0 1)
                             (* 1.5 f30-1)
                             s3-1
                             10
                             (-> arg2 traffic-hash-id)
                             )
                           )
            (let* ((s2-0 (the-as basic (-> s3-1 s4-1)))
                   (v1-70 (if (type? (the-as collide-shape s2-0) vehicle)
                              (the-as vehicle s2-0)
                              )
                          )
                   )
              (when (and v1-70
                         (not (logtest? (-> v1-70 flags) (rigid-body-object-flag dead)))
                         (nonzero? (-> v1-70 flight-level-index))
                         )
                (set! (-> gp-0 10 quad) (-> v1-70 root-override-2 trans quad))
                (set! (-> gp-0 11 quad) (-> v1-70 root-override-2 transv quad))
                (vector-! (-> gp-0 12) (-> gp-0 0) (-> gp-0 10))
                (.lvf vf1 (&-> (-> gp-0 12) quad))
                (.add.w.vf vf2 vf0 vf0 :mask #b1)
                (.mul.vf vf1 vf1 vf1)
                (.mul.x.vf acc vf2 vf1 :mask #b1)
                (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                (.mov a0-35 vf1)
                (let ((f1-12 a0-35))
                  (vector-float*! (-> gp-0 14) (-> gp-0 12) (/ 1.0 (sqrtf f1-12)))
                  (when #t
                    (let* ((f0-28 (+ f30-1 (-> v1-70 root-override-2 root-prim prim-core world-sphere w)))
                           (f28-0 (* f0-28 f0-28))
                           )
                      (let ((f0-31 (fmax 0.0 (/ (- f28-0 f1-12) f28-0))))
                        (when (not (logtest? (-> v1-70 flags) (rigid-body-object-flag player-driving)))
                          (when (and (< 0.0 sv-20) (< f1-12 f28-0))
                            (vector-! (-> gp-0 13) (-> gp-0 1) (-> gp-0 11))
                            (let ((f1-14 (vector-dot (-> gp-0 14) (-> gp-0 13))))
                              (when (< f1-14 0.0)
                                (vector-float*!
                                  (-> gp-0 6)
                                  (-> gp-0 14)
                                  (* -0.5 (/ sv-24 (+ sv-24 (-> v1-70 info-override info inv-mass))) sv-20 f1-14)
                                  )
                                (vector+! (-> gp-0 2) (-> gp-0 2) (-> gp-0 6))
                                )
                              )
                            )
                          (vector-float*! (-> gp-0 6) (-> gp-0 14) (* 163840.0 f0-31))
                          (set! (-> gp-0 6 y) 0.0)
                          (vector+! (-> gp-0 2) (-> gp-0 2) (-> gp-0 6))
                          )
                        )
                      (when (< (cos 8192.0) (- (vector-dot (-> gp-0 3) (-> gp-0 14))))
                        (when (< (nearest-dist2-between-moving-points (-> gp-0 0) (-> gp-0 1) (-> gp-0 10) (-> gp-0 11) 2.0) f28-0)
                          (let ((f0-37 (fmax 0.0 (vector-dot (-> gp-0 3) (-> gp-0 11)))))
                            (set! (-> gp-0 15 x) (fmin (-> gp-0 15 x) f0-37))
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      (when (not (logtest? (-> obj flags) (vehicle-controller-flag ignore-others)))
        (vector-! (-> gp-0 6) (-> gp-0 4) (-> gp-0 0))
        (.lvf vf1 (&-> (-> gp-0 6) quad))
        (.add.w.vf vf2 vf0 vf0 :mask #b1)
        (.mul.vf vf1 vf1 vf1)
        (.mul.x.vf acc vf2 vf1 :mask #b1)
        (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
        (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
        (.mov v1-88 vf1)
        (let ((f0-39 v1-88))
          (logclear! (-> obj flags) (vehicle-controller-flag off-path))
          (let ((f1-23 4096.0))
            (when (< (* f1-23 f1-23) f0-39)
              (logior! (-> obj flags) (vehicle-controller-flag off-path))
              (let ((t9-8 vector-normalize!)
                    (a0-69 (-> gp-0 6))
                    (f1-26 12288.0)
                    (f2-12 4096.0)
                    )
                (t9-8 a0-69 (fmin f1-26 (- f0-39 (* f2-12 f2-12))))
                )
              (vector+! (-> gp-0 2) (-> gp-0 2) (-> gp-0 6))
              )
            )
          )
        (vector+float*! (-> gp-0 6) (-> gp-0 1) (-> gp-0 5) (- (vector-dot (-> gp-0 5) (-> gp-0 1))))
        (vector-! (-> gp-0 2) (-> gp-0 2) (-> gp-0 6))
        )
      (cond
        ((logtest? (-> obj flags) (vehicle-controller-flag direct-mode))
         (vector-! (-> gp-0 7) (-> obj turn-exit-point) (-> gp-0 0))
         (vector-normalize! (-> gp-0 7) (-> gp-0 15 x))
         (vector-! (-> gp-0 6) (-> gp-0 7) (-> gp-0 1))
         (vector-float*! (-> gp-0 6) (-> gp-0 6) 3.0)
         (let ((f0-48 (vector-dot (-> gp-0 3) (-> gp-0 6))))
           (if (< f0-48 0.0)
               (vector+float*! (-> gp-0 6) (-> gp-0 6) (-> gp-0 3) (* -0.875 f0-48))
               )
           )
         )
        (else
          (vector+float*! (-> gp-0 8) (-> gp-0 0) (-> gp-0 1) 0.4)
          (vector-! (-> gp-0 6) (-> gp-0 8) (-> obj turn-enter-point))
          (cond
            ((< (vector-dot (-> gp-0 6) (-> obj turn-enter-dir)) 0.0)
             (vector-! (-> gp-0 7) (-> obj turn-enter-point) (-> gp-0 0))
             )
            ((begin
               (vector-! (-> gp-0 6) (-> gp-0 8) (-> obj turn-exit-point))
               (< (vector-dot (-> gp-0 6) (-> obj turn-exit-dir)) 0.0)
               )
             (vector-! (-> gp-0 6) (-> gp-0 8) (-> obj dest-circle))
             (set! (-> gp-0 7 x) (- (-> gp-0 6 z)))
             (set! (-> gp-0 7 y) 0.0)
             (set! (-> gp-0 7 z) (-> gp-0 6 x))
             (if (logtest? (-> obj flags) (vehicle-controller-flag left-turn))
                 (vector-float*! (-> gp-0 7) (-> gp-0 7) -1.0)
                 )
             )
            (else
              (set! (-> gp-0 7 quad) (-> obj turn-exit-dir quad))
              )
            )
          (let ((f0-60 (vector-length (-> gp-0 7))))
            (if (< 0.1 f0-60)
                (vector-float*! (-> gp-0 7) (-> gp-0 7) (/ (-> gp-0 15 x) f0-60))
                )
            )
          (vector-! (-> gp-0 6) (-> gp-0 7) (-> gp-0 1))
          (vector-float*! (-> gp-0 6) (-> gp-0 6) 2.0)
          )
        )
      (vector+! (-> gp-0 2) (-> gp-0 2) (-> gp-0 6))
      (set! (-> sv-16 quad) (-> gp-0 2 quad))
      )
    (let ((v1-145 (-> *perf-stats* data 21)))
      (b! (zero? (-> v1-145 ctrl)) cfg-76 :delay (nop!))
      (.mtc0 Perf 0)
      (.sync.l)
      (.sync.p)
      (.mfpc a0-96 pcr0)
      (+! (-> v1-145 accum0) a0-96)
      (.mfpc a0-98 pcr1)
      (+! (-> v1-145 accum1) a0-98)
      )
    (label cfg-76)
    0
    0
    (none)
    )
  )

(defmethod vehicle-controller-method-10 vehicle-controller ((obj vehicle-controller) (arg0 traffic-tracker))
  (when (not (logtest? (-> obj flags) (vehicle-controller-flag attached)))
    (logior! (-> obj flags) (vehicle-controller-flag attached))
    (+! (-> arg0 active-object-count) 1)
    )
  0
  (none)
  )

(defmethod vehicle-controller-method-11 vehicle-controller ((obj vehicle-controller))
  (when (logtest? (-> obj flags) (vehicle-controller-flag attached))
    (logclear! (-> obj flags) (vehicle-controller-flag attached))
    (let ((v1-5 (-> obj branch)))
      (if (> (-> v1-5 user-count) 0)
          (+! (-> v1-5 user-count) -1)
          )
      )
    (when (logtest? (-> obj flags) (vehicle-controller-flag blocking-dest-node))
      (logclear! (-> obj flags) (vehicle-controller-flag blocking-dest-node))
      (logclear! (-> obj branch dest-node flags) (nav-node-flag-byte blocked))
      )
    )
  (set! (-> obj branch) (the-as nav-branch 0))
  (if (logtest? (-> obj flags) (vehicle-controller-flag blocking-dest-node))
      (format #t "blocking-dest-node bit set after detach~%")
      )
  0
  (none)
  )

(defmethod vehicle-controller-method-12 vehicle-controller ((obj vehicle-controller)
                                                          (arg0 rigid-body-vehicle-constants)
                                                          (arg1 vector)
                                                          (arg2 float)
                                                          (arg3 int)
                                                          (arg4 float)
                                                          )
  (let ((s3-0 (new 'stack-no-clear 'vector)))
    (set! (-> s3-0 quad) (-> arg1 quad))
    (set! (-> s3-0 y) 0.0)
    (vector-xz-normalize! s3-0 1.0)
    (cond
      ((= arg3 (-> arg0 sample-index))
       (let* ((f30-0 (* 0.0033333334 (the float (- (current-time) (-> arg0 sample-time)))))
              (f0-3 (acos-rad (vector-dot s3-0 (-> arg0 sample-dir))))
              (f28-0 (/ (* arg4 f30-0) f0-3))
              )
         (when (and (>= arg3 0) (< arg3 30))
           (format #t "sample ~d (~M m/s) angle ~f deg, time ~f sec~%" arg3 arg4 (* 57.29747 f0-3) f30-0)
           (format #t "sample ~d (~M m/s) radius ~M throttle ~f~%" arg3 arg4 f28-0 arg2)
           )
         )
       )
      (else
        (set! (-> arg0 sample-index) arg3)
        (set! (-> arg0 sample-time) (current-time))
        (set! (-> arg0 sample-dir quad) (-> s3-0 quad))
        )
      )
    )
  0
  (none)
  )

(defmethod draw-debug-info vehicle-controller ((obj vehicle-controller))
  (add-debug-sphere #t (bucket-id debug2) (-> obj dest-circle) (-> obj dest-circle w) *color-green*)
  (add-debug-x #t (bucket-id debug-no-zbuf1) (-> obj target-point) *color-white*)
  (add-debug-vector
    #t
    (bucket-id debug-no-zbuf1)
    (-> obj turn-exit-point)
    (-> obj turn-exit-dir)
    (meters 2)
    *color-red*
    )
  (add-debug-x #t (bucket-id debug-no-zbuf1) (-> obj turn-enter-point) *color-dark-red*)
  (add-debug-vector
    #t
    (bucket-id debug-no-zbuf1)
    (-> obj turn-enter-point)
    (-> obj turn-enter-dir)
    (meters 2)
    *color-dark-red*
    )
  (when (logtest? (-> obj flags) (vehicle-controller-flag on-straightaway))
    (let ((a3-5 (new 'stack-no-clear 'vector)))
      (vector-! a3-5 (-> obj target-point) (-> obj path-prev-point))
      (add-debug-line-sphere
        #t
        (bucket-id debug2)
        (-> obj path-prev-point)
        a3-5
        (-> obj dest-circle w)
        *color-yellow*
        )
      )
    )
  0
  (none)
  )

(defmethod vehicle-controller-method-9 vehicle-controller ((obj vehicle-controller))
  (set! (-> obj traffic) *traffic-engine*)
  (set! (-> obj choose-branch-callback) (the-as
                                          (function vehicle-controller vehicle nav-branch)
                                          (method-of-type vehicle-controller vehicle-controller-method-15)
                                          )
        )
  (set! (-> obj turn-accel) 49152.0)
  0
  (none)
  )
