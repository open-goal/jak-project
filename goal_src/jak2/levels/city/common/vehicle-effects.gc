;;-*-Lisp-*-
(in-package goal)

;; name: vehicle-effects.gc
;; name in dgo: vehicle-effects
;; dgos: CWI

;; DECOMP BEGINS

(defmethod do-engine-sounds vehicle ((obj vehicle))
  (local-vars (v1-36 float))
  (with-pp
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf1 :class vf)
           (vf2 :class vf)
           )
      (init-vf0-vector)
      (if (logtest? (rigid-body-object-flag ignition) (-> obj flags))
          (seek! (-> obj engine-sound-envelope) 1.0 (* 2.0 (-> pp clock seconds-per-frame)))
          (seek! (-> obj engine-sound-envelope) 0.0 (-> pp clock seconds-per-frame))
          )
      (cond
        ((< 0.0 (-> obj scrape-sound-envelope))
         (if (zero? (-> obj scrape-sound-id))
             (set! (-> obj scrape-sound-id) (new-sound-id))
             )
         (sound-play-by-name
           (-> obj info-override scrape-sound)
           (-> obj scrape-sound-id)
           (the int (* 1024.0 (-> obj scrape-sound-envelope)))
           0
           0
           (sound-group sfx)
           (-> obj impact-pos)
           )
         )
        (else
          (when (nonzero? (-> obj scrape-sound-id))
            (sound-stop (-> obj scrape-sound-id))
            (set! (-> obj scrape-sound-id) (new 'static 'sound-id))
            0
            )
          )
        )
      (cond
        ((< 0.0 (* (-> obj force-scale) (-> obj engine-sound-envelope)))
         (when (zero? (-> obj engine-sound-id))
           (set! (-> obj engine-sound-id) (new-sound-id))
           (set! (-> obj extra-sound-id) (new-sound-id))
           )
         (let* ((f30-0 (fabs (* (-> obj engine-thrust) (-> obj power-level) (-> obj force-scale))))
                (f28-0 (* (-> obj engine-sound-envelope) (+ 0.6 (* 0.4 f30-0))))
                (f26-0 (doppler-pitch-shift (-> obj root-override-2 trans) (-> obj root-override-2 transv)))
                (f0-22 (+ (-> obj info-override engine-pitch-offset)
                          (* (-> obj info-override engine-pitch-scale) f30-0)
                          (* (-> obj info-override engine-pitch-mod-amp)
                             (sin (* 109.22667 (the float (- (current-time) (-> obj state-time)))))
                             )
                          f26-0
                          )
                       )
                (a0-9 (static-sound-spec "vehicle-engine" :volume 0.0 :mask (pitch reg0)))
                )
           (set! (-> a0-9 sound-name) (-> obj info-override engine-sound))
           (set! (-> obj engine-sound-factor) f30-0)
           (cond
             (#f
               (let* ((f0-23 40960.0)
                      (f0-25 (* f0-23 f0-23))
                      )
                 (.lvf vf1 (&-> (-> obj rbody state lin-velocity) quad))
                 (.add.w.vf vf2 vf0 vf0 :mask #b1)
                 (.mul.vf vf1 vf1 vf1)
                 (.mul.x.vf acc vf2 vf1 :mask #b1)
                 (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                 (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                 (.mov v1-36 vf1)
                 (cond
                   ((< f0-25 v1-36)
                    (format *stdcon* "accel-to-steady ~d~%" (-> obj engine-sound-id))
                    (when (logtest? (rigid-body-object-flag idle-sound) (-> obj flags))
                      (format *stdcon* "new engine sound~%")
                      (sound-stop (-> obj engine-sound-id))
                      (set! (-> obj engine-sound-id) (new-sound-id))
                      (set! (-> obj flags)
                            (the-as rigid-body-object-flag (logclear (-> obj flags) (rigid-body-object-flag idle-sound)))
                            )
                      )
                    (sound-play "accel-to-steady" :id (-> obj engine-sound-id) :position (-> obj root-override-2 trans))
                    )
                   (else
                     (format *stdcon* "decel-to-idle id ~d~%" (-> obj engine-sound-id))
                     (when (not (logtest? (rigid-body-object-flag idle-sound) (-> obj flags)))
                       (format *stdcon* "new engine sound~%")
                       (sound-stop (-> obj engine-sound-id))
                       (set! (-> obj engine-sound-id) (new-sound-id))
                       (set! (-> obj flags)
                             (the-as rigid-body-object-flag (logior (rigid-body-object-flag idle-sound) (-> obj flags)))
                             )
                       )
                     (sound-play "decel-to-idle" :id (-> obj engine-sound-id) :position (-> obj root-override-2 trans))
                     )
                   )
                 )
               )
             (else
               (set! (-> a0-9 volume) (the int (* 1024.0 f28-0)))
               (set! (-> a0-9 pitch-mod) (the int (* 1524.0 f0-22)))
               (set! (-> a0-9 reg 0) (the-as uint (-> obj info-override engine-sound-select)))
               (set! (-> a0-9 reg 1) (the-as uint (the int (* 127.0 (-> obj hit-points)))))
               (sound-play-by-spec a0-9 (-> obj engine-sound-id) (-> obj root-override-2 trans))
               )
             )
           )
         0
         )
        (else
          (when (nonzero? (-> obj engine-sound-id))
            (sound-stop (-> obj engine-sound-id))
            (set! (-> obj engine-sound-id) (new 'static 'sound-id))
            0
            )
          )
        )
      (when (or (logtest? (-> obj flags) (rigid-body-object-flag player-driving)) (nonzero? (-> obj thrust-sound-id)))
        (if (zero? (-> obj thrust-sound-id))
            (set! (-> obj thrust-sound-id) (new-sound-id))
            )
        (seek! (-> obj sputter-sound-envelope) 0.0 (* 2.0 (-> pp clock seconds-per-frame)))
        (cond
          ((logtest? (-> obj flags) (rigid-body-object-flag player-driving))
           (set! (-> obj sputter-sound-envelope) (fmax (-> obj sputter-sound-envelope) (-> obj power-level)))
           (let ((f1-25
                   (fmin
                     1.0
                     (* 0.7
                        (-> obj force-scale)
                        (-> obj sputter-sound-envelope)
                        (+ (-> obj engine-sound-factor) (-> obj jump-thrust))
                        )
                     )
                   )
                 (f0-38 0.0)
                 )
             (sound-play-by-name
               (-> obj info-override thrust-sound)
               (-> obj thrust-sound-id)
               (the int (* 1024.0 f1-25))
               (the int (* 1524.0 f0-38))
               0
               (sound-group sfx)
               #t
               )
             )
           )
          (else
            (when (= (-> obj sputter-sound-envelope) 0.0)
              (sound-stop (-> obj thrust-sound-id))
              (set! (-> obj thrust-sound-id) (new 'static 'sound-id))
              0
              )
            )
          )
        )
      (if (< (rand-vu) (-> obj power-fluctuation-factor))
          (sound-play "damage-pops" :id (-> obj damage-pop-sound-id))
          )
      0
      (none)
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defun calc-fade-vals ((arg0 float))
  "@unused just a debugging print function"
  (let* ((f1-1 (* 0.00024414062 arg0))
         (f0-3 (- f1-1 (the float (the int f1-1))))
         (f1-3 (* 4096.0 (- f1-1 f0-3)))
         (f1-5 (/ -1.0 (* (- 1.0 f0-3) f1-3)))
         (f0-4 (/ f0-3 (- 1.0 f0-3)))
         )
    (format #t ":fade-a ~,,10f~%:fade-b ~,,10f~%" f1-5 f0-4)
    )
  (none)
  )

(define *vehicle-headlight-glow-template* (new 'static 'sprite-glow-data
                                            :position (new 'static 'vector :w 8192.0)
                                            :size-probe 163.84
                                            :z-offset 819.2
                                            :size-y 8192.0
                                            :color (new 'static 'rgbaf :x 255.0 :y 128.0 :w 16.0)
                                            :fade-a -0.0000122044
                                            :fade-b 8.997864
                                            :tex-id (new 'static 'texture-id :index #xbb :page #xc)
                                            )
        )

(define *vehicle-taillight-glow-template* (new 'static 'sprite-glow-data
                                            :position (new 'static 'vector :w 3072.0)
                                            :size-probe 122.88
                                            :z-offset 409.6
                                            :size-y 3072.0
                                            :color (new 'static 'rgbaf :x 255.0 :y 64.0 :w 16.0)
                                            :fade-a -0.0000122044
                                            :fade-b 8.997864
                                            :tex-id (new 'static 'texture-id :index #xbc :page #xc)
                                            )
        )

(define *vehicle-thruster-glow-template* (new 'static 'sprite-glow-data
                                           :position (new 'static 'vector :w 4096.0)
                                           :size-probe 102.4
                                           :size-y 4096.0
                                           :color (new 'static 'rgbaf :x 255.0 :y 64.0 :w 16.0)
                                           :fade-a -0.0000122044
                                           :fade-b 8.997864
                                           :tex-id (new 'static 'texture-id :index #xca :page #xc)
                                           )
        )

(defmethod draw-thruster vehicle ((obj vehicle) (arg0 vector) (arg1 vector) (arg2 float) (arg3 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((f0-0 (rand-vu-float-range 1.0 1.33))
           (s4-1 (* arg3 f0-0))
           (s0-0 (fmin (* arg2 f0-0) (* 0.5 s4-1)))
           (s3-1 (new 'stack-no-clear 'inline-array 'vehicle-control-point 3))
           (s2-0 (-> obj info-override))
           )
      (let ((a1-2 (-> s3-1 0 normal)))
        (let ((v1-2 arg0))
          (let ((a0-2 arg1))
            (let ((a2-2 (* 0.25 s4-1)))
              (.mov vf7 a2-2)
              )
            (.lvf vf5 (&-> a0-2 quad))
            )
          (.lvf vf4 (&-> v1-2 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a1-2 quad) vf6)
        )
      (quad-copy! (the-as pointer (-> s3-1 1)) (the-as pointer *vehicle-thruster-glow-template*) 4)
      (let* ((v1-3 (-> s3-1 1))
             (a1-4 (-> s3-1 0 normal))
             (f0-5 (-> v1-3 local-pos w))
             )
        (set! (-> v1-3 local-pos quad) (-> a1-4 quad))
        (set! (-> v1-3 local-pos w) f0-5)
        )
      0
      (let ((f28-0 (/ s4-1 (-> obj info-override thruster-flame-length))))
        (set! (-> s3-1 2 local-pos y) (rand-vu-float-range 0.0 64.0))
        (set! (-> s3-1 2 local-pos w) (* (-> obj fog-fade) (+ (* 16.0 f28-0) (* 4.0 (rand-vu)))))
        )
      (let ((f0-14 (* 4.0 s0-0)))
        (set! (-> s3-1 1 local-pos w) f0-14)
        (set! (-> s3-1 1 normal w) f0-14)
        (set! (-> s3-1 1 normal x) (* 0.025 f0-14))
        )
      (when (nonzero? *simple-sprite-system*)
        ;; added nonzero check
        (add! *simple-sprite-system* (the sprite-glow-data (-> s3-1 1)))
        )
      (forward-up->quaternion (the-as quaternion (-> s3-1 0)) arg1 (the-as vector (-> obj rbody state matrix)))
      (quaternion-rotate-local-x! (the-as quaternion (-> s3-1 0)) (the-as quaternion (-> s3-1 0)) 32768.0)
      (let ((v1-16 (-> s3-1 0 normal)))
        (let ((a0-10 (* 0.5 s4-1)))
          (.mov vf7 a0-10)
          )
        (.lvf vf5 (&-> arg1 quad))
        (.lvf vf4 (&-> arg0 quad))
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> v1-16 quad) vf6)
        )
      (set! (-> s2-0 part-thruster-scale-x initial-valuef) s0-0)
      (set! (-> s2-0 part-thruster-scale-y initial-valuef) s4-1)
      (dotimes (gp-1 2)
        (quaternion-rotate-local-z! (the-as quaternion (-> s3-1 0)) (the-as quaternion (-> s3-1 0)) 16384.0)
        (quaternion-copy! (-> s2-0 part-quat) (the-as quaternion (-> s3-1 0)))
        (let ((t9-9 sp-launch-particles-var)
              (a0-13 (-> s2-0 particle-system-3d))
              (a1-12 (-> s2-0 part-thruster))
              (a2-7 *launch-matrix*)
              )
          (set! (-> a2-7 trans quad) (-> s3-1 0 normal quad))
          (t9-9
            (the-as sparticle-system a0-13)
            (the-as sparticle-launcher a1-12)
            a2-7
            (the-as sparticle-launch-state #f)
            (the-as sparticle-launch-control #f)
            1.0
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod draw-thrusters vehicle ((obj vehicle))
  (local-vars (sv-272 sparticle-launcher) (sv-276 sparticle-launcher))
  (with-pp
    (when (= (-> obj controller traffic sync-mask-32) (ash 1 (logand (-> obj traffic-priority-id) 31)))
      (let ((f0-1
              (+ (-> *time-of-day-context* time) (* 0.048387095 (the float (logand (-> obj traffic-priority-id) 31))))
              )
            )
        (cond
          ((and (logtest? (-> obj flags) (rigid-body-object-flag riding)) (or (< f0-1 7.0) (< 19.0 f0-1)))
           (if (not (logtest? (rigid-body-object-flag lights-on) (-> obj flags)))
               (vehicle-method-131 obj)
               )
           )
          (else
            (if (logtest? (rigid-body-object-flag lights-on) (-> obj flags))
                (vehicle-method-132 obj)
                )
            )
          )
        )
      )
    (when (logtest? (rigid-body-object-flag lights-update) (-> obj flags))
      (let ((f30-0 (if (logtest? (rigid-body-object-flag lights-on) (-> obj flags))
                       1.0
                       0.0
                       )
                   )
            )
        (seek! (-> obj lights-factor) f30-0 (* 2.0 (-> pp clock seconds-per-frame)))
        (if (= (-> obj lights-factor) f30-0)
            (set! (-> obj flags)
                  (the-as rigid-body-object-flag (logclear (-> obj flags) (rigid-body-object-flag lights-update)))
                  )
            )
        )
      )
    (let ((s5-0 (new 'stack-no-clear 'inline-array 'matrix 2)))
      (let* ((v1-38 (-> s5-0 1))
             (a3-0 (-> obj node-list data 0 bone transform))
             (a0-16 (-> a3-0 quad 0))
             (a1-1 (-> a3-0 quad 1))
             (a2-1 (-> a3-0 quad 2))
             (a3-1 (-> a3-0 trans quad))
             )
        (set! (-> v1-38 quad 0) a0-16)
        (set! (-> v1-38 quad 1) a1-1)
        (set! (-> v1-38 quad 2) a2-1)
        (set! (-> v1-38 trans quad) a3-1)
        )
      (set-vector! (-> s5-0 0 vector 1) 0.0 0.0 -1.0 1.0)
      (vector-rotate*! (-> s5-0 0 vector 1) (-> s5-0 0 vector 1) (-> s5-0 1))
      (set! (-> obj fog-fade) (calc-fade-from-fog (-> obj root-override-2 trans)))
      (let ((f30-1 (* (-> obj fog-fade) (-> obj lights-factor))))
        (when (< 0.0 f30-1)
          (let ((s4-0 (new 'stack-no-clear 'sprite-glow-data))
                (s3-0 *vehicle-headlight-glow-template*)
                )
            (dotimes (s2-0 (-> obj info-override headlight-count))
              (quad-copy! (the-as pointer s4-0) (the-as pointer s3-0) 4)
              (vector-matrix*! (the-as vector (-> s5-0 0)) (-> obj info-override headlight-local-pos s2-0) (-> s5-0 1))
              (let* ((v1-44 s4-0)
                     (a1-6 (-> s5-0 0))
                     (f0-14 (-> v1-44 position w))
                     )
                (set! (-> v1-44 position quad) (-> a1-6 quad 0))
                (set! (-> v1-44 position w) f0-14)
                )
              0
              (set! (-> s4-0 rot-angle) (* 182.04445 (rand-vu-float-range -17.0 -13.0)))
              (set! (-> s4-0 color x) 255.0)
              (set! (-> s4-0 color y) (rand-vu-float-range 192.0 255.0))
              (set! (-> s4-0 color w) (* f30-1 (rand-vu-float-range 16.0 18.0)))
              (add! *simple-sprite-system* s4-0)
              (let ((f0-21 (-> obj camera-dist2))
                    (f1-6 245760.0)
                    )
                (when (< f0-21 (* f1-6 f1-6))
                  (let ((f0-22 3276.8))
                    (set! (-> s4-0 position w) f0-22)
                    (set! (-> s4-0 size-y) f0-22)
                    )
                  (set! (-> s4-0 fade-a) -0.00001356)
                  (set! (-> s4-0 fade-b) 2.3332994)
                  (set! (-> s4-0 color z) (rand-vu-float-range 128.0 160.0))
                  (set! (-> s4-0 color w) (* f30-1 (rand-vu-float-range 32.0 36.0)))
                  (add! *simple-sprite-system* s4-0)
                  )
                )
              )
            )
          (let ((s4-1 (new 'stack-no-clear 'sprite-glow-data)))
            (quad-copy! (the-as pointer s4-1) (the-as pointer *vehicle-taillight-glow-template*) 4)
            (dotimes (s3-1 (-> obj info-override taillight-count))
              (vector-matrix*! (the-as vector (-> s5-0 0)) (-> obj info-override taillight-local-pos s3-1) (-> s5-0 1))
              (let* ((v1-66 s4-1)
                     (a1-18 (-> s5-0 0))
                     (f0-28 (-> v1-66 position w))
                     )
                (set! (-> v1-66 position quad) (-> a1-18 quad 0))
                (set! (-> v1-66 position w) f0-28)
                )
              0
              (set! (-> s4-1 rot-angle) (* 182.04445 (rand-vu-float-range -4.0 4.0)))
              (set! (-> s4-1 color y) (* 64.0 (rand-vu)))
              (set! (-> s4-1 color w) (* f30-1 (rand-vu-float-range 16.0 21.0)))
              (add! *simple-sprite-system* s4-1)
              )
            )
          )
        )
      (when (logtest? (-> obj rbody state flags) (rigid-body-flag enable-physics))
        (let* ((f30-2 (fmax 0.0 (* (-> obj info-override thruster-flame-length)
                                   (-> obj power-level)
                                   (-> obj force-scale)
                                   (-> obj engine-thrust)
                                   )
                            )
                      )
               (f28-3 (fmin (-> obj info-override thruster-flame-width) f30-2))
               )
          (dotimes (s4-2 2)
            (vector-matrix*! (the-as vector (-> s5-0 0)) (-> obj info-override thruster-local-pos s4-2) (-> s5-0 1))
            (draw-thruster obj (the-as vector (-> s5-0 0)) (-> s5-0 0 vector 1) f28-3 f30-2)
            )
          )
        (when (logtest? (rigid-body-object-flag ignition) (-> obj flags))
          (set! (-> *part-id-table* 776 init-specs 2 initial-valuef)
                (* 6.0 (+ 0.25 (-> obj engine-power-factor)) (rand-vu))
                )
          (let* ((f0-40 1.0)
                 (f1-15 (-> obj engine-power-factor))
                 (f0-41 (- f0-40 (* f1-15 f1-15)))
                 )
            (set! (-> *part-id-table* 776 init-specs 9 initial-valuef) (* 16.0 f0-41))
            (set! (-> *part-id-table* 776 init-specs 9 random-rangef) (* 48.0 f0-41))
            )
          (let ((s4-3 (-> *part-id-table* 776)))
            (dotimes (s3-2 2)
              (vector-matrix*! (the-as vector (-> s5-0 0)) (-> obj info-override exhaust-local-pos s3-2) (-> s5-0 1))
              (vector-rotate*! (-> s5-0 0 vector 1) (-> obj info-override exhaust-local-dir s3-2) (-> s5-0 1))
              (vector+float*!
                (-> obj info-override part-vel)
                (-> obj rbody state lin-velocity)
                (-> s5-0 0 vector 1)
                (* 0.2 (-> obj info-override max-engine-thrust) (+ 0.5 (-> obj engine-power-factor)))
                )
              (let ((v1-117 (-> obj info-override part-vel))
                    (a0-45 (-> obj info-override part-vel))
                    (f0-46 300.0)
                    )
                (vector-float*! v1-117 a0-45 (/ 1.0 f0-46))
                )
              (set! (-> s4-3 birthaccum) (the-as float (-> obj exhaust-part-accum s3-2)))
              (let ((t9-25 sp-launch-particles-var)
                    (a0-46 (-> obj info-override particle-system-2d))
                    (a1-34 s4-3)
                    (a2-14 *launch-matrix*)
                    )
                (set! (-> a2-14 trans quad) (-> s5-0 0 quad 0))
                (t9-25
                  (the-as sparticle-system a0-46)
                  a1-34
                  a2-14
                  (the-as sparticle-launch-state #f)
                  (the-as sparticle-launch-control #f)
                  1.0
                  )
                )
              (set! (-> obj exhaust-part-accum s3-2) (the-as basic (-> s4-3 birthaccum)))
              )
            )
          )
        (when (< (-> obj hit-points) 0.75)
          (let* ((f28-5 (+ -32768.0 (* 32768.0 (rand-vu))))
                 (f24-0 (* 65536.0 (rand-vu)))
                 (f30-6 (cos f28-5))
                 (f28-6 (sin f28-5))
                 (f26-0 (cos f24-0))
                 )
            (set! (-> s5-0 0 trans x) (* f30-6 (sin f24-0)))
            (set! (-> s5-0 0 trans y) f28-6)
            (set! (-> s5-0 0 trans z) (* f30-6 f26-0))
            )
          (set! sv-272 (the-as sparticle-launcher #f))
          (set! sv-276 (the-as sparticle-launcher #f))
          (cond
            ((< (-> obj hit-points) 0.25)
             (set! sv-272 (-> *part-id-table* 778))
             (set! sv-276 (-> *part-id-table* 774))
             )
            ((< (-> obj hit-points) 0.5)
             (set! sv-272 (-> *part-id-table* 781))
             )
            (else
              (if (< (rand-vu) 0.05)
                  (set! sv-272 (-> *part-id-table* 783))
                  )
              )
            )
          (when sv-272
            (let ((s3-3 #f))
              (dotimes (s4-4 2)
                (vector-rotate*! (-> s5-0 0 vector 2) (-> obj info-override smoke-local-vel s4-4) (-> s5-0 1))
                (vector+! (-> s5-0 0 vector 2) (-> s5-0 0 vector 2) (-> obj rbody state lin-velocity))
                (vector+float*! (-> s5-0 0 vector 2) (-> s5-0 0 vector 2) (-> s5-0 0 trans) (* 24576.0 (rand-vu)))
                (let ((v1-152 (-> obj info-override part-vel))
                      (a0-54 (-> s5-0 0 vector 2))
                      (f0-63 300.0)
                      )
                  (vector-float*! v1-152 a0-54 (/ 1.0 f0-63))
                  )
                (vector-matrix*! (the-as vector (-> s5-0 0)) (-> obj info-override smoke-local-pos s4-4) (-> s5-0 1))
                (when (and sv-276 (< (rand-vu) 0.005))
                  (let ((t9-37 sp-launch-particles-var)
                        (a0-56 (-> obj info-override particle-system-2d))
                        (a1-44 sv-276)
                        (a2-17 *launch-matrix*)
                        )
                    (set! (-> a2-17 trans quad) (-> s5-0 0 quad 0))
                    (t9-37
                      (the-as sparticle-system a0-56)
                      a1-44
                      a2-17
                      (the-as sparticle-launch-state #f)
                      (the-as sparticle-launch-control #f)
                      1.0
                      )
                    )
                  (set! s3-3 #t)
                  )
                (set! (-> sv-272 birthaccum) (the-as float (-> obj smoke-part-accum s4-4)))
                (let ((t9-38 sp-launch-particles-var)
                      (a0-57 (-> obj info-override particle-system-2d))
                      (a1-45 sv-272)
                      (a2-18 *launch-matrix*)
                      )
                  (set! (-> a2-18 trans quad) (-> s5-0 0 quad 0))
                  (t9-38
                    (the-as sparticle-system a0-57)
                    a1-45
                    a2-18
                    (the-as sparticle-launch-state #f)
                    (the-as sparticle-launch-control #f)
                    1.0
                    )
                  )
                (set! (-> obj smoke-part-accum s4-4) (the-as basic (-> sv-272 birthaccum)))
                )
              (if s3-3
                  (sound-play "damage-zaps" :id (-> obj damage-zap-sound-id))
                  )
              )
            )
          )
        (when (>= (-> obj scrape-sound-envelope) 0.75)
          (let ((a1-47 (-> *part-id-table* 773))
                (t9-40 sp-launch-particles-var)
                (a0-60 (-> obj info-override particle-system-2d))
                (a2-20 *launch-matrix*)
                )
            (set! (-> a2-20 trans quad) (-> obj impact-pos quad))
            (t9-40
              (the-as sparticle-system a0-60)
              a1-47
              a2-20
              (the-as sparticle-launch-state #f)
              (the-as sparticle-launch-control #f)
              1.0
              )
            )
          )
        )
      )
    0
    (none)
    )
  )
