;;-*-Lisp-*-
(in-package goal)

;; name: ctyport-obs.gc
;; name in dgo: ctyport-obs
;; dgos: CWI

;; DECOMP BEGINS

(deftype boat-manager (process)
  ((mesh  basic          :offset-assert 128)
   (paths path-control 4 :offset-assert 132)
   )
  :heap-base #x20
  :method-count-assert 16
  :size-assert         #x94
  :flag-assert         #x1000200094
  (:methods
    (idle () _type_ :state 14)
    (boat-manager-method-15 (_type_) none 15)
    )
  )


(define *barge-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 100.0
      :inv-mass 0.01
      :linear-damping 0.9
      :angular-damping 0.9
      :bounce-factor 0.1
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :z 8192.0 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 16) (meters 6) (meters 20))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*barge-constants*
    :flags #x8
    :object-type #x11
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 10.0
    :engine-intake-factor 1.0
    :brake-factor 1.0
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 30)
    :ground-probe-distance (meters 3)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 1.0
    :air-drag-factor 1.0
    :steering-fin-angle 1820.4445
    :steering-thruster-factor 1.0
    :steering-thruster-max-gain 1.0
    :steering-thruster-half-gain-speed (meters 30)
    :tire-steering-angle 1274.3112
    :tire-friction-factor 1.0
    :tire-static-friction 0.5
    :tire-static-friction-speed (meters 1)
    :tire-dynamic-friction 0.25
    :tire-dynamic-friction-speed (meters 3)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.7
    :pitch-control-factor 1.0
    :roll-control-factor 1.0
    :jump-thrust-factor 0.5
    :buoyancy-factor 0.5
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :turning-accel (meters 20)
    :toughness-factor 1.0
    :damage-factor 0.5
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 182.04445
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :rider-stance #x1
    :grab-rail-array #f
    :rider-hand-offset (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "car-scrape-stn")
    :glance-sound (static-sound-name "car-glance-stn")
    :impact-sound (static-sound-name "car-impact-stn")
    :extra-sound (static-sound-name "car-by-1")
    :explosion-part #xa1
    :thruster-flame-width (meters 0.25)
    :thruster-flame-length (meters 4)
    :thruster-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :exhaust-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :smoke-local-vel (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :inv-lift-thruster-count 1.0
    :engine-thrust-local-pos (new 'static 'vector :z 22118.4 :w 1.0)
    :brake-local-pos (new 'static 'vector :w 1.0)
    :color-option-count 1
    :color-option-array (new 'static 'inline-array vector 1 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))
    )
  )

(deftype boat-base (vehicle)
  ((angle      float   :offset-assert 880)
   (y-rot      float   :offset-assert 884)
   (path-num   uint32  :offset-assert 888)
   (path-index float   :offset-assert 892)
   )
  :heap-base #x300
  :method-count-assert 149
  :size-assert         #x380
  :flag-assert         #x9503000380
  (:methods
    (boat-base-method-144 (_type_ nav-control) none 144)
    (boat-base-method-145 (_type_ nav-control) none 145)
    (boat-base-method-146 (_type_ nav-control) none 146)
    (boat-base-method-147 (_type_ nav-control) none 147)
    (boat-base-method-148 (_type_ nav-control) none 148)
    )
  )


(defmethod boat-base-method-144 boat-base ((obj boat-base) (arg0 nav-control))
  (rlet ((acc :class vf)
         (Q :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> arg0 state)))
      (set! (-> gp-0 rotation-rate) (-> gp-0 nav max-rotation-rate))
      (if (< 0.0 (-> gp-0 speed))
          (set! (-> gp-0 rotation-rate)
                (fmin
                  (-> gp-0 rotation-rate)
                  (* (/ (-> gp-0 nav turning-acceleration) (-> gp-0 speed)) (-> gp-0 mesh work rad-to-deg))
                  )
                )
          )
      (when (logtest? (-> gp-0 nav flags) (nav-control-flag update-heading-from-facing))
        (vector-z-quaternion! (-> gp-0 heading) (-> gp-0 nav shape quat))
        (set! (-> gp-0 heading y) 0.0)
        (let ((v1-12 (-> gp-0 heading)))
          (let ((f0-5 1.0))
            (.lvf vf1 (&-> v1-12 quad))
            (.mul.vf vf2 vf1 vf1 :mask #b111)
            (let ((a0-3 f0-5))
              (.mov vf3 a0-3)
              )
            )
          (.mul.x.vf acc vf0 vf2 :mask #b1000)
          (.add.mul.y.vf acc vf0 vf2 acc :mask #b1000)
          (.add.mul.z.vf vf2 vf0 vf2 acc :mask #b1000)
          (.isqrt.vf Q vf3 vf2 :fsf #b0 :ftf #b11)
          (.wait.vf)
          (.mul.vf vf1 vf1 Q :mask #b111)
          (.nop.vf)
          (.nop.vf)
          (.nop.vf)
          (.svf (&-> v1-12 quad) vf1)
          )
        )
      (let ((a1-2 (new 'stack-no-clear 'vector)))
        (set! (-> a1-2 quad) (-> gp-0 nav shape trans quad))
        (if (or (not (-> gp-0 current-poly))
                (!= (-> gp-0 current-pos x) (-> a1-2 x))
                (!= (-> gp-0 current-pos z) (-> a1-2 z))
                )
            (do-navigation-to-destination gp-0 a1-2)
            )
        )
      (logclear!
        (-> gp-0 flags)
        (nav-state-flag blocked in-target-poly at-target avoiding-sphere touching-sphere at-gap)
        )
      )
    0
    0
    (none)
    )
  )

(defmethod boat-base-method-145 boat-base ((obj boat-base) (arg0 nav-control))
  (navigate-using-route-portals (-> arg0 state))
  0
  0
  (none)
  )

(defmethod boat-base-method-146 boat-base ((obj boat-base) (arg0 nav-control))
  (navigate-using-best-dir-recompute-avoid-spheres-2 (-> arg0 state))
  0
  (none)
  )

(defmethod boat-base-method-147 boat-base ((obj boat-base) (arg0 nav-control))
  (update-travel-dir-from-spheres (-> arg0 state))
  0
  (none)
  )

(defmethod boat-base-method-148 boat-base ((obj boat-base) (arg0 nav-control))
  (compute-speed-simple (-> arg0 state))
  0
  (none)
  )

(define *boat-nav-callback-info*
  (new 'static 'nav-callback-info
    :callback-count 5
    :callback-array (new 'static 'array (function object nav-control none) 10
      (lambda ((arg0 object) (arg1 nav-control))
        (rlet ((acc :class vf)
               (Q :class vf)
               (vf0 :class vf)
               (vf1 :class vf)
               (vf2 :class vf)
               (vf3 :class vf)
               )
          (init-vf0-vector)
          (let ((gp-0 (-> arg1 state)))
            (set! (-> gp-0 rotation-rate) (-> gp-0 nav max-rotation-rate))
            (if (< 0.0 (-> gp-0 speed))
                (set! (-> gp-0 rotation-rate)
                      (fmin
                        (-> gp-0 rotation-rate)
                        (* (/ (-> gp-0 nav turning-acceleration) (-> gp-0 speed)) (-> gp-0 mesh work rad-to-deg))
                        )
                      )
                )
            (when (logtest? (-> gp-0 nav flags) (nav-control-flag update-heading-from-facing))
              (vector-z-quaternion! (-> gp-0 heading) (-> gp-0 nav shape quat))
              (set! (-> gp-0 heading y) 0.0)
              (let ((v1-14 (-> gp-0 heading)))
                (let ((f0-5 1.0))
                  (.lvf vf1 (&-> v1-14 quad))
                  (.mul.vf vf2 vf1 vf1 :mask #b111)
                  (let ((a0-3 f0-5))
                    (.mov vf3 a0-3)
                    )
                  )
                (.mul.x.vf acc vf0 vf2 :mask #b1000)
                (.add.mul.y.vf acc vf0 vf2 acc :mask #b1000)
                (.add.mul.z.vf vf2 vf0 vf2 acc :mask #b1000)
                (.isqrt.vf Q vf3 vf2 :fsf #b0 :ftf #b11)
                (.wait.vf)
                (.mul.vf vf1 vf1 Q :mask #b111)
                (.nop.vf)
                (.nop.vf)
                (.nop.vf)
                (.svf (&-> v1-14 quad) vf1)
                )
              )
            (let ((a1-2 (new 'stack-no-clear 'vector)))
              (set! (-> a1-2 quad) (-> gp-0 nav shape trans quad))
              (if (or (not (-> gp-0 current-poly))
                      (!= (-> gp-0 current-pos x) (-> a1-2 x))
                      (!= (-> gp-0 current-pos z) (-> a1-2 z))
                      )
                  (do-navigation-to-destination gp-0 a1-2)
                  )
              )
            (logclear!
              (-> gp-0 flags)
              (nav-state-flag blocked in-target-poly at-target avoiding-sphere touching-sphere at-gap)
              )
            )
          0
          0
          0
          (none)
          )
        )
      (lambda ((arg0 object) (arg1 nav-control)) (navigate-using-route-portals (-> arg1 state)) 0 0 0 (none))
      (lambda ((arg0 object) (arg1 nav-control))
        (let* ((v1-0 arg1)
               (a2-2 (-> v1-0 state mesh sphere-hash sphere-array))
               (a3-0 (-> v1-0 sphere-id-array))
               (t0-1 (-> v1-0 state mesh bounds))
               (t1-0 (-> v1-0 root-nav-sphere))
               (t2-0 (-> v1-0 sphere-count))
               )
          (dotimes (t3-0 t2-0)
            (let ((t5-0 (-> a2-2 (-> a3-0 t3-0)))
                  (t4-4 (-> v1-0 sphere-array t3-0))
                  )
              (vector-! (the-as vector t4-4) (the-as vector t5-0) t0-1)
              (set! (-> t4-4 r) (+ (-> t5-0 r) (-> t1-0 w)))
              )
            )
          )
        0
        (navigate-using-best-dir-recompute-avoid-spheres-2 (-> arg1 state))
        0
        0
        (none)
        )
      (lambda ((arg0 object) (arg1 nav-control))
        (let* ((v1-0 arg1)
               (a2-2 (-> v1-0 state mesh sphere-hash sphere-array))
               (a3-0 (-> v1-0 sphere-id-array))
               (t0-1 (-> v1-0 state mesh bounds))
               (t1-0 (-> v1-0 root-nav-sphere))
               (t2-0 (-> v1-0 sphere-count))
               )
          (dotimes (t3-0 t2-0)
            (let ((t5-0 (-> a2-2 (-> a3-0 t3-0)))
                  (t4-4 (-> v1-0 sphere-array t3-0))
                  )
              (vector-! (the-as vector t4-4) (the-as vector t5-0) t0-1)
              (set! (-> t4-4 r) (+ (-> t5-0 r) (-> t1-0 w)))
              )
            )
          )
        0
        (update-travel-dir-from-spheres (-> arg1 state))
        0
        0
        (none)
        )
      (lambda ((arg0 object) (arg1 nav-control)) (compute-speed-simple (-> arg1 state)) 0 0 (none))
      )
    )
  )

(defmethod apply-damage boat-base ((obj boat-base) (arg0 float) (arg1 rigid-body-impact))
  0
  (none)
  )

(defmethod rigid-body-object-method-47 boat-base ((obj boat-base) (arg0 process-drawable) (arg1 attack-info) (arg2 touching-shapes-entry) (arg3 penetrate))
  ((method-of-type vehicle rigid-body-object-method-47) obj arg0 arg1 arg2 arg3)
  #f
  )

(defmethod vehicle-method-120 boat-base ((obj boat-base))
  (with-pp
    (let ((t9-0 (method-of-type vehicle vehicle-method-120)))
      (t9-0 obj)
      )
    (when (not (logtest? (-> obj rbody state flags) (rigid-body-flag enable-physics)))
      (let ((a1-1 (vector-y-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override-2 quat)))
            (s5-0 (new 'stack-no-clear 'quaternion))
            )
        (quaternion-from-two-vectors-max-angle! s5-0 a1-1 *up-vector* (* 728.1778 (-> pp clock seconds-per-frame)))
        (quaternion*! (-> obj root-override-2 quat) s5-0 (-> obj root-override-2 quat))
        )
      (let ((s4-0 (new 'stack-no-clear 'vector))
            (s5-1 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override-2 quat)))
            )
        (new 'stack-no-clear 'vector)
        (let ((a1-4 (-> obj nav state)))
          (set! (-> s4-0 quad) (-> a1-4 velocity quad))
          )
        (let ((s1-0 (new 'stack-no-clear 'vector))
              (s2-0 (new 'stack-no-clear 'vector))
              (s3-0 (new 'stack 'clamp-travel-vector-to-mesh-return-info))
              )
          (let ((s0-0 (-> obj nav state current-poly)))
            (vector-xz-normalize-copy! s1-0 s4-0 163840.0)
            (set! (-> s2-0 quad) (-> s1-0 quad))
            (clamp-vector-to-mesh-no-gaps (-> obj nav) (-> obj root-override-2 trans) s0-0 s2-0 s3-0)
            )
          (when (-> s3-0 found-boundary)
            (let ((f30-0 (vector-length s4-0)))
              (vector-flatten! s4-0 s4-0 (-> s3-0 boundary-normal))
              (vector-rotate90-around-y! s4-0 (-> s3-0 boundary-normal))
              (vector-normalize! s4-0 f30-0)
              )
            (when (= obj *debug-actor*)
              (add-debug-vector #t (bucket-id debug-no-zbuf1) (-> obj root-override-2 trans) s4-0 (meters 10) *color-blue*)
              (format *stdcon* "avoid border~%")
              )
            )
          )
        (set! (-> obj y-rot) (- (-> obj y-rot) (* 2.0 (-> pp clock seconds-per-frame) (-> obj y-rot))))
        (+! (-> obj y-rot)
            (* 10.0
               (-> pp clock seconds-per-frame)
               (deg- (deg- (vector-y-angle s4-0) (quaternion-y-angle (-> obj root-override-2 quat))) (-> obj y-rot))
               )
            )
        (set! (-> obj y-rot) (fmax -10922.667 (fmin 10922.667 (-> obj y-rot))))
        (set! (-> obj y-rot) (deg- (vector-y-angle s4-0) (quaternion-y-angle (-> obj root-override-2 quat))))
        (quaternion-rotate-local-y!
          (-> obj root-override-2 quat)
          (-> obj root-override-2 quat)
          (* (-> obj y-rot) (-> pp clock seconds-per-frame))
          )
        (vector-v*float+! (-> obj root-override-2 trans) (-> obj root-override-2 trans) s5-1 8954.266)
        )
      (seek! (-> obj root-override-2 trans y) 4096.0 (* 4096.0 (-> pp clock seconds-per-frame)))
      (when (= obj *debug-actor*)
        (format *stdcon* "no physics~%")
        (format *stdcon* "~M~%" (-> obj root-override-2 trans y))
        )
      )
    (if (= obj *debug-actor*)
        (format *stdcon* "speed ~M~%" (vector-length (-> obj root-override-2 transv)))
        )
    (let ((s4-2 (ppointer->process (-> obj parent)))
          (s5-2 (new 'stack-no-clear 'vector))
          )
      (when s4-2
        (let ((a1-24 (-> obj nav state)))
          (set! (-> s5-2 quad) (-> a1-24 target-post quad))
          )
        (when (< (vector-vector-xz-distance (-> obj root-override-2 trans) s5-2) 163840.0)
          (set! (-> obj path-index) (+ 0.01 (-> obj path-index)))
          (let ((f0-22 (-> obj path-index)))
            (set! (-> obj path-index) (- f0-22 (* (the float (the int (/ f0-22 1.0))) 1.0)))
            )
          )
        (get-point-at-percent-along-path!
          (-> (the-as boat-manager (+ (* (-> obj path-num) 4) (the-as uint s4-2))) paths 0)
          s5-2
          (-> obj path-index)
          'interp
          )
        (let ((v1-76 (-> obj nav state)))
          (logclear! (-> v1-76 flags) (nav-state-flag directional-mode))
          (logior! (-> v1-76 flags) (nav-state-flag target-poly-dirty))
          (set! (-> v1-76 target-post quad) (-> s5-2 quad))
          )
        0
        )
      )
    (draw-thrusters obj)
    (none)
    )
  )

(defmethod rigid-body-object-method-29 boat-base ((obj boat-base) (arg0 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-0 (-> obj rbody))
          (s2-0 (-> obj info-override))
          (s4-0 (new 'stack-no-clear 'matrix))
          )
      (let ((a1-1 (-> obj nav state)))
        (set! (-> s4-0 vector 1 quad) (-> a1-1 velocity quad))
        )
      (vector-! (the-as vector (-> s4-0 vector)) (-> s4-0 vector 1) (-> s3-0 state lin-velocity))
      (vector-float*! (the-as vector (-> s4-0 vector)) (the-as vector (-> s4-0 vector)) (* 4.0 (-> s2-0 info mass)))
      (let ((s1-0 (-> s4-0 vector 2)))
        (let ((s0-0 (-> obj root-override-2 trans)))
          (let ((v1-7 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override-2 quat))))
            (let ((a0-6 40960.0))
              (.mov vf7 a0-6)
              )
            (.lvf vf5 (&-> v1-7 quad))
            )
          (.lvf vf4 (&-> s0-0 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s1-0 quad) vf6)
        )
      (let ((s0-1 (-> s4-0 vector 2)))
        (let ((s1-1 (-> s4-0 vector 2)))
          (let ((v1-9 (vector-y-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override-2 quat))))
            (let ((a0-9 -32768.0))
              (.mov vf7 a0-9)
              )
            (.lvf vf5 (&-> v1-9 quad))
            )
          (.lvf vf4 (&-> s1-1 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s0-1 quad) vf6)
        )
      (let ((v1-10 s3-0)
            (a1-9 (-> s4-0 vector 2))
            (a2-0 (-> s4-0 vector))
            )
        (rigid-body-method-18 (-> v1-10 state) a1-9 (the-as vector a2-0))
        )
      (.svf (&-> (-> s4-0 vector) 0 quad) vf0)
      (set! (-> s4-0 vector 0 y) (* -4.0 (-> s2-0 extra gravity) (-> s2-0 info mass)))
      (let ((a1-10 (-> s4-0 vector)))
        (rigid-body-method-20 (-> s3-0 state) (the-as vector a1-10))
        )
      )
    (rigid-body-object-method-50 obj arg0)
    (vehicle-method-99 obj arg0)
    (none)
    )
  )

(defmethod vehicle-method-96 boat-base ((obj boat-base))
  0
  (none)
  )

(defmethod do-engine-sounds boat-base ((obj boat-base))
  0
  (none)
  )

(defmethod vehicle-method-135 boat-base ((obj boat-base) (arg0 traffic-object-spawn-params))
  (get-nav-control obj (-> arg0 nav-mesh))
  (set! (-> obj nav callback-info) *boat-nav-callback-info*)
  (logior! (-> obj nav flags) (nav-control-flag display-marks limit-rotation-rate update-heading-from-facing))
  (let ((v1-4 (-> obj nav)))
    (set! (-> v1-4 target-speed) 40960.0)
    )
  0
  (let ((v1-6 (-> obj nav)))
    (set! (-> v1-6 acceleration) 8192.0)
    )
  0
  (let ((v1-8 (-> obj nav)))
    (set! (-> v1-8 turning-acceleration) 8192.0)
    )
  0
  (let ((v1-10 (-> obj nav)))
    (set! (-> v1-10 max-rotation-rate) 9102.223)
    )
  0
  (let ((v1-12 (-> obj nav)))
    (set! (-> v1-12 nav-cull-radius) 122880.0)
    )
  0
  (let ((v1-14 (-> obj nav)))
    (set! (-> v1-14 sphere-mask) (the-as uint 64))
    )
  0
  (set! (-> obj path-num) (-> arg0 user-data))
  (set! (-> obj path-index) (+ 0.05 (-> arg0 position w)))
  (set! (-> obj root-override-2 root-prim prim-core collide-as)
        (logior (collide-spec pusher) (-> obj root-override-2 root-prim prim-core collide-as))
        )
  (let ((v1-21 (-> obj root-override-2 root-prim)))
    (set! (-> obj root-override-2 backup-collide-as) (-> v1-21 prim-core collide-as))
    (set! (-> obj root-override-2 backup-collide-with) (-> v1-21 prim-core collide-with))
    )
  0
  (none)
  )

(defmethod alloc-and-init-rigid-body-control boat-base ((obj boat-base) (arg0 rigid-body-vehicle-constants))
  ((method-of-type vehicle alloc-and-init-rigid-body-control) obj arg0)
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod vehicle-method-113 boat-base ((obj boat-base))
  (go (method-of-object obj idle))
  (none)
  )

(defstate waiting (boat-base)
  :virtual #t
  :enter (behavior ()
    (go-virtual idle)
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  )

(defstate inactive (boat-base)
  :virtual #t
  :enter (behavior ()
    (go-virtual idle)
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  )

(defstate idle (boat-base)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior boat-base) vehicle-event-handler)
  :enter (behavior ()
    (logior! (-> self flags) (rigid-body-object-flag riding))
    (set! (-> self state-time) (current-time))
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :trans (behavior ()
    '()
    (none)
    )
  :post (behavior ()
    (rigid-body-object-method-37 self)
    (update-transforms (-> self root-override-2))
    (none)
    )
  )

(defskelgroup skel-barge barge barge-lod0-jg barge-idle-ja
              ((barge-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 20)
              )

(deftype barge (boat-base)
  ((engine   sound-id  :offset-assert 896)
   (bow-wash sound-id  :offset-assert 900)
   )
  :heap-base #x310
  :method-count-assert 149
  :size-assert         #x388
  :flag-assert         #x9503100388
  )


(defmethod vehicle-method-120 barge ((obj barge))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((t9-0 (method-of-type boat-base vehicle-method-120)))
      (t9-0 obj)
      )
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (let ((s4-0 (-> obj root-override-2 trans)))
        (let ((v1-3 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override-2 quat))))
          (let ((a0-4 -61440.0))
            (.mov vf7 a0-4)
            )
          (.lvf vf5 (&-> v1-3 quad))
          )
        (.lvf vf4 (&-> s4-0 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> s5-0 quad) vf6)
      (cond
        ((< (vector-vector-distance s5-0 (camera-pos)) 614400.0)
         (let ((a0-6 (static-sound-spec "barge-engine")))
           (sound-play-by-spec a0-6 (-> obj engine) s5-0)
           )
         )
        (else
          (sound-stop (-> obj engine))
          )
        )
      )
    (let ((s5-1 (new 'stack-no-clear 'vector)))
      (let ((s4-2 (-> obj root-override-2 trans)))
        (let ((v1-9 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override-2 quat))))
          (let ((a0-10 61440.0))
            (.mov vf7 a0-10)
            )
          (.lvf vf5 (&-> v1-9 quad))
          )
        (.lvf vf4 (&-> s4-2 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> s5-1 quad) vf6)
      (cond
        ((< (vector-vector-distance s5-1 (camera-pos)) 614400.0)
         (let ((a0-12 (static-sound-spec "bow-wash")))
           (sound-play-by-spec a0-12 (-> obj bow-wash) s5-1)
           )
         )
        (else
          (sound-stop (-> obj bow-wash))
          )
        )
      )
    (none)
    )
  )

(defmethod allocate-and-init-cshape barge ((obj barge))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 19) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 20))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 81920.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-11 prim-core action) (collide-action solid rideable))
      (set! (-> v1-11 transform-index) 3)
      (set-vector! (-> v1-11 local-sphere) 0.0 0.0 0.0 81920.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-13 prim-core action) (collide-action solid rideable))
      (set! (-> v1-13 transform-index) 3)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 81920.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 -32768.0 16384.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 -8192.0 16384.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 0.0 16384.0 16384.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set! (-> v1-21 transform-index) 0)
      (set-vector! (-> v1-21 local-sphere) 0.0 0.0 40960.0 16384.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-23 prim-core action) (collide-action solid))
      (set! (-> v1-23 transform-index) 0)
      (set-vector! (-> v1-23 local-sphere) 24576.0 0.0 -32768.0 16384.0)
      )
    (let ((v1-25 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-25 prim-core action) (collide-action solid))
      (set! (-> v1-25 transform-index) 0)
      (set-vector! (-> v1-25 local-sphere) 24576.0 0.0 -8192.0 16384.0)
      )
    (let ((v1-27 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-27 prim-core action) (collide-action solid))
      (set! (-> v1-27 transform-index) 0)
      (set-vector! (-> v1-27 local-sphere) 24576.0 0.0 16384.0 16384.0)
      )
    (let ((v1-29 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-29 prim-core action) (collide-action solid))
      (set! (-> v1-29 transform-index) 0)
      (set-vector! (-> v1-29 local-sphere) 24576.0 0.0 40960.0 16384.0)
      )
    (let ((v1-31 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-31 prim-core action) (collide-action solid))
      (set! (-> v1-31 transform-index) 0)
      (set-vector! (-> v1-31 local-sphere) -24576.0 0.0 -32768.0 16384.0)
      )
    (let ((v1-33 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-33 prim-core action) (collide-action solid))
      (set! (-> v1-33 transform-index) 0)
      (set-vector! (-> v1-33 local-sphere) -24576.0 0.0 -8192.0 16384.0)
      )
    (let ((v1-35 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-35 prim-core action) (collide-action solid))
      (set! (-> v1-35 transform-index) 0)
      (set-vector! (-> v1-35 local-sphere) -24576.0 0.0 16384.0 16384.0)
      )
    (let ((v1-37 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-37 prim-core action) (collide-action solid))
      (set! (-> v1-37 transform-index) 0)
      (set-vector! (-> v1-37 local-sphere) -24576.0 0.0 40960.0 16384.0)
      )
    (let ((v1-39 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-39 prim-core action) (collide-action solid))
      (set! (-> v1-39 transform-index) 0)
      (set-vector! (-> v1-39 local-sphere) 16384.0 0.0 -57344.0 16384.0)
      )
    (let ((v1-41 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-41 prim-core action) (collide-action solid))
      (set! (-> v1-41 transform-index) 0)
      (set-vector! (-> v1-41 local-sphere) -16384.0 0.0 -57344.0 16384.0)
      )
    (let ((v1-43 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-43 prim-core action) (collide-action solid))
      (set! (-> v1-43 transform-index) 0)
      (set-vector! (-> v1-43 local-sphere) 0.0 8192.0 -61440.0 16384.0)
      )
    (let ((v1-45 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-45 prim-core action) (collide-action solid))
      (set! (-> v1-45 transform-index) 0)
      (set-vector! (-> v1-45 local-sphere) -40960.0 0.0 -53248.0 16384.0)
      )
    (let ((v1-47 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-47 prim-core action) (collide-action solid))
      (set! (-> v1-47 transform-index) 0)
      (set-vector! (-> v1-47 local-sphere) 40960.0 0.0 -53248.0 16384.0)
      )
    (set! (-> s5-0 nav-radius) 81920.0)
    (let ((v1-49 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-49 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-49 prim-core collide-with))
      )
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body barge ((obj barge))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-barge" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control obj *barge-constants*)
  (set! (-> obj draw lod-set lod 0 dist) 1228800.0)
  (set! (-> obj engine) (new-sound-id))
  (set! (-> obj bow-wash) (new-sound-id))
  (iterate-prims
    (-> obj root-override-2)
    (lambda ((arg0 collide-shape-prim))
      (case (-> arg0 prim-core prim-type)
        (((prim-type sphere))
         (set! (-> arg0 prim-core collide-with) (collide-spec
                                                  backgnd
                                                  crate
                                                  civilian
                                                  enemy
                                                  obstacle
                                                  vehicle-sphere
                                                  hit-by-player-list
                                                  hit-by-others-list
                                                  collectable
                                                  pusher
                                                  )
               )
         (set! (-> arg0 prim-core collide-as) (collide-spec vehicle-sphere))
         )
        (((prim-type mesh))
         (set! (-> arg0 prim-core collide-with) (collide-spec jak player-list))
         (set! (-> arg0 prim-core collide-as) (collide-spec camera-blocker vehicle-mesh vehicle-mesh-probeable))
         )
        (((prim-type group))
         (set! (-> arg0 prim-core collide-with)
               (collide-spec
                 backgnd
                 jak
                 crate
                 civilian
                 enemy
                 obstacle
                 vehicle-sphere
                 hit-by-player-list
                 hit-by-others-list
                 player-list
                 collectable
                 pusher
                 )
               )
         (set! (-> arg0 prim-core collide-as)
               (collide-spec vehicle-sphere camera-blocker vehicle-mesh vehicle-mesh-probeable)
               )
         )
        )
      (none)
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch process vs boat-manager.
(defmethod relocate boat-manager ((obj boat-manager) (arg0 int))
  (dotimes (v1-0 4)
    (if (-> obj paths v1-0)
        (&+! (-> obj paths v1-0) arg0)
        )
    )
  (the-as boat-manager ((method-of-type process relocate) obj arg0))
  )

(defstate idle (boat-manager)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :trans (behavior ()
    (dotimes (gp-0 4)
      (let ((a0-0 (-> self paths gp-0)))
        (if a0-0
            (debug-draw a0-0)
            )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior boat-manager) sleep-code)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! boat-manager ((obj boat-manager) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (set! (-> obj mesh) (nav-mesh-from-res-tag arg0 'nav-mesh-actor 0))
  (set! (-> obj entity) arg0)
  (when (-> obj mesh)
    (dotimes (s5-1 4)
      (set! (-> obj paths s5-1) (new 'process 'curve-control obj 'path (the float s5-1)))
      (when (-> obj paths s5-1)
        (logior! (-> obj paths s5-1 flags) (path-control-flag display draw-line draw-point draw-text))
        (let ((s4-0 (-> obj paths s5-1))
              (s3-0 (new 'stack-no-clear 'vector))
              (s2-0 (new 'stack-no-clear 'vector))
              (f30-0 0.0)
              )
          1
          (the int (* 0.0000016276042 (total-distance s4-0)))
          (while (< f30-0 0.8)
            (displacement-between-points-at-percent-normalized! s4-0 s2-0 f30-0)
            (get-point-at-percent-along-path! s4-0 s3-0 f30-0 'interp)
            (vector-normalize! s2-0 1.0)
            (let ((s1-0 (new 'stack 'traffic-object-spawn-params)))
              (set! (-> s1-0 behavior) (the-as uint 1))
              (set! (-> s1-0 id) (the-as uint 0))
              (set! (-> s1-0 nav-mesh) (the-as nav-mesh (-> obj mesh)))
              (set! (-> s1-0 position quad) (-> s3-0 quad))
              (quaternion-look-at! (-> s1-0 rotation) s2-0 *up-vector*)
              (set! (-> s1-0 user-data) (the-as uint s5-1))
              (set! (-> s1-0 position w) f30-0)
              (logior! (-> s1-0 flags) (traffic-spawn-flags trsflags-00))
              (process->handle (vehicle-spawn obj barge s1-0))
              )
            (+! f30-0 (/ (* 4096.0 (+ 150.0 (* 150.0 (rand-vu)))) (total-distance s4-0)))
            )
          )
        )
      )
    )
  (go (method-of-object obj idle))
  (none)
  )
