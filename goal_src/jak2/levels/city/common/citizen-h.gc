;;-*-Lisp-*-
(in-package goal)

;; name: citizen-h.gc
;; name in dgo: citizen-h
;; dgos: CWI

;; +++citizen-flag
(defenum citizen-flag
  :type uint16
  :bitfield #t
  (persistent)
  (run-mode)
  (shuffle-mode)
  (in-pursuit)
  (hostile)
  (target-in-sight)
  (sticky-weapon)
  (knocked-out-car)
  (knocked-out-bike)
  (dark-guard)
  (female)
  )
;; ---citizen-flag

;; TODO - for traffic-manager
(declare-type citizen nav-enemy)
(declare-type traffic-object-spawn-params structure)
(define-extern citizen-init-by-other (function traffic-object-spawn-params none :behavior citizen))

;; DECOMP BEGINS

(deftype citizen (nav-enemy)
  ((flags               citizen-flag               :offset-assert 604)
   (traffic-id          int8                       :offset-assert 606)
   (hit-by-player-count int8                       :offset-assert 607)
   (gnd-height          float                      :offset-assert 608)
   (speed-scale         float                      :offset-assert 612)
   (controller          vehicle-controller :inline :offset-assert 624)
   (danger-pos          sphere             :inline :offset-assert 768)
   (vehicle             int64                      :offset-assert 784)
   (anim-shuffle        int32                      :offset-assert 792)
   (dist-walk-anim      float                      :offset-assert 796)
   (speed-walk          float                      :offset-assert 800)
   (anim-walk           int32                      :offset-assert 804)
   (dist-run-anim       float                      :offset-assert 808)
   (speed-run           float                      :offset-assert 812)
   (anim-run            int32                      :offset-assert 816)
   (water-anim          int32                      :offset-assert 820)
   (interp              float                      :offset-assert 824)
   (last-danger-time    time-frame                 :offset-assert 832)
   (next-time-look-at   time-frame                 :offset-assert 840)
   (stop-time-look-at   time-frame                 :offset-assert 848)
   (wait-return-state   symbol                     :offset-assert 856)
   (wait-time           time-frame                 :offset-assert 864)
   (cp-valid?           symbol                     :offset-assert 872)
   (cp-sphere           sphere             :inline :offset-assert 880)
   (cp-vec              vector             :inline :offset-assert 896)
   (cp-next-time        time-frame                 :offset-assert 912)
   (cp-exit-time        time-frame                 :offset-assert 920)
   (cp-force            vector             :inline :offset-assert 928)
   (cp-plane            plane              :inline :offset-assert 944)
   (cp-factor           float                      :offset-assert 960)
   )
  :heap-base #x350
  :method-count-assert 201
  :size-assert         #x3c4
  :flag-assert         #xc9035003c4
  (:methods
    (citizen-method-178 () none 178)
    (citizen-method-179 () none 179)
    (citizen-method-180 () none 180)
    (citizen-method-181 () none 181)
    (citizen-method-182 () none 182)
    (citizen-method-183 () none 183)
    (citizen-method-184 () none 184)
    (citizen-method-185 () none 185)
    (citizen-method-186 () none 186)
    (citizen-method-187 () none 187)
    (citizen-method-188 () none 188)
    (citizen-method-189 () none 189)
    (citizen-method-190 () none 190)
    (citizen-method-191 () none 191)
    (citizen-method-192 () none 192)
    (citizen-method-193 () none 193)
    (citizen-method-194 () none 194)
    (citizen-method-195 () none 195)
    (citizen-method-196 () none 196)
    (citizen-method-197 () none 197)
    (citizen-method-198 () none 198)
    (citizen-method-199 () none 199)
    (citizen-method-200 () none 200)
    )
  )
