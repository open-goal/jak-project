;;-*-Lisp-*-
(in-package goal)

;; name: bike.gc
;; name in dgo: bike
;; dgos: CWI

;; DECOMP BEGINS

(defskelgroup skel-bikea bikea bikea-lod0-jg bikea-idle-ja
              ((bikea-lod0-mg (meters 20)) (bikea-lod1-mg (meters 40)) (bikea-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.4)
              :shadow bikea-shadow-mg
              :origin-joint-index 3
              )

(defskelgroup skel-bikeb bikeb bikeb-lod0-jg bikeb-idle-ja
              ((bikeb-lod0-mg (meters 20)) (bikeb-lod1-mg (meters 40)) (bikeb-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.4)
              :shadow bikeb-shadow-mg
              :origin-joint-index 3
              )

(defskelgroup skel-bikec bikec bikec-lod0-jg bikec-idle-ja
              ((bikec-lod0-mg (meters 20)) (bikec-lod1-mg (meters 40)) (bikec-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.8)
              :shadow bikec-shadow-mg
              :origin-joint-index 3
              )

(defskelgroup skel-guard-bike crimson-bike crimson-bike-lod0-jg crimson-bike-idle-ja
              ((crimson-bike-lod0-mg (meters 20)) (crimson-bike-lod1-mg (meters 40)) (crimson-bike-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.4)
              :shadow crimson-bike-shadow-mg
              )

(define *bike-explosion-info*
  (new 'static 'vehicle-explosion-info
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      )
    :collide-spec #x1
    :art-level 'ctywide
    :skel #f
    :skel-name "skel-vehicle-explosion"
    :anim 2
    )
  )

(define *bikea-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 2.0
      :inv-mass 0.5
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :z 2457.6 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 3) (meters 4) (meters 6))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*bikea-constants*
    :flags #x70
    :object-type #xb
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 60.0
    :engine-intake-factor 1.5
    :brake-factor 3.5
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 40)
    :ground-probe-distance (meters 5)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 0.3
    :air-drag-factor 1.0
    :steering-thruster-factor 5.0
    :steering-thruster-max-gain 4.0
    :steering-thruster-half-gain-speed (meters 15)
    :tire-friction-factor 0.5
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.4
    :tire-dynamic-friction-speed (meters 2)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.75
    :pitch-control-factor 1.0
    :roll-control-factor 1.0
    :jump-thrust-factor 0.625
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters 4)
    :turning-accel (meters 25)
    :toughness-factor 1.0
    :damage-factor 4.0
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 5461.3335
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 2
    :section-count 2
    :grab-rail-count 2
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 2
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 2048.0 :w 1.0)
          (new 'static 'vector :x 2048.0 :z 4096.0 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -2048.0 :z 4096.0 :w 1.0)
          (new 'static 'vector :x -2048.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info :position (new 'static 'vector :w (the-as float #x10000)))
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 2048.0 :z -4096.0 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x10 #x8 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x20 #x4 #x0)
      :damage-seg-count 2
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-offset -0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound-select 1
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "bike-scrape-stn")
    :glance-sound (static-sound-name "bike-glance-stn")
    :impact-sound (static-sound-name "bike-impact-stn")
    :extra-sound (static-sound-name "bike-by-1")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 1
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :z -3276.8 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :y 204.8 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :y 204.8 :z -3276.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      (new 'static 'vector :x -1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :y -819.2 :z 10240.0 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :y 1433.6 :z -10240.0 :w 1.0) (new 'static 'vector))
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 819.2 :z 7372.8003 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 819.2 :z -2457.6 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5324.8 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10649.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :color-option-count 3
    :color-option-array (new 'static 'inline-array vector 3
      (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 0.7 :w 1.0)
      )
    )
  )

(define *bikeb-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 2.0
      :inv-mass 0.5
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :z 2457.6 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 3) (meters 4) (meters 6))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*bikeb-constants*
    :flags #x70
    :object-type #xc
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 60.0
    :engine-intake-factor 1.5
    :brake-factor 3.5
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 40)
    :ground-probe-distance (meters 5)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 0.3
    :air-drag-factor 1.0
    :steering-thruster-factor 5.0
    :steering-thruster-max-gain 4.0
    :steering-thruster-half-gain-speed (meters 15)
    :tire-friction-factor 0.5
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.4
    :tire-dynamic-friction-speed (meters 2)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.75
    :pitch-control-factor 1.0
    :roll-control-factor 1.0
    :jump-thrust-factor 0.625
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters 4)
    :turning-accel (meters 25)
    :toughness-factor 1.0
    :damage-factor 4.0
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 5461.3335
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 2
    :section-count 2
    :grab-rail-count 2
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 2
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 2048.0 :w 1.0)
          (new 'static 'vector :x 2048.0 :z 4096.0 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -2048.0 :z 4096.0 :w 1.0)
          (new 'static 'vector :x -2048.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 757.76 :z 1175.552 :w (the-as float #x10000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 2048.0 :z -4096.0 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x20 #x8 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x40 #x10 #x4)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-offset -0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound-select 1
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "bike-scrape-stn")
    :glance-sound (static-sound-name "bike-glance-stn")
    :impact-sound (static-sound-name "bike-impact-stn")
    :extra-sound (static-sound-name "bike-by-1")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 1
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :z -3276.8 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :y 204.8 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :y 204.8 :z -3276.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      (new 'static 'vector :x -1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :z 11059.2 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :y 1433.6 :z -8192.0 :w 1.0) (new 'static 'vector))
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7372.8003 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -2457.6 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5324.8 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10649.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :color-option-count 3
    :color-option-array (new 'static 'inline-array vector 3
      (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 0.7 :w 1.0)
      )
    )
  )

(define *bikec-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 2.0
      :inv-mass 0.5
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :z 2457.6 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 3) (meters 4) (meters 6))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*bikec-constants*
    :flags #x70
    :object-type #xd
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 60.0
    :engine-intake-factor 1.5
    :brake-factor 3.5
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 40)
    :ground-probe-distance (meters 5)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 0.3
    :air-drag-factor 1.0
    :steering-thruster-factor 5.0
    :steering-thruster-max-gain 4.0
    :steering-thruster-half-gain-speed (meters 15)
    :tire-friction-factor 0.5
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.4
    :tire-dynamic-friction-speed (meters 2)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.75
    :pitch-control-factor 1.0
    :roll-control-factor 1.0
    :jump-thrust-factor 0.625
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters 4)
    :turning-accel (meters 25)
    :toughness-factor 1.0
    :damage-factor 4.0
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 3640.889
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 2
    :section-count 2
    :grab-rail-count 2
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 2
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 2048.0 :w 1.0)
          (new 'static 'vector :x 2048.0 :z 8192.0 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -2048.0 :z 8192.0 :w 1.0)
          (new 'static 'vector :x -2048.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 802.816 :z 1318.912 :w (the-as float #x10000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 2048.0 :z -4096.0 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x20 #x8 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x40 #x10 #x4)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-offset -0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound-select 1
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "bike-scrape-stn")
    :glance-sound (static-sound-name "bike-glance-stn")
    :impact-sound (static-sound-name "bike-impact-stn")
    :extra-sound (static-sound-name "bike-by-1")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 1
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :z -3276.8 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :y 204.8 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :y 204.8 :z -3276.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      (new 'static 'vector :x -1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :y -614.4 :z 13721.6 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :y 614.4 :z -7168.0 :w 1.0) (new 'static 'vector))
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7372.8003 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -2457.6 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5324.8 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10649.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :color-option-count 3
    :color-option-array (new 'static 'inline-array vector 3
      (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 0.7 :w 1.0)
      )
    )
  )

(define *guard-bike-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 2.0
      :inv-mass 0.5
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :z 2457.6 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 3) (meters 4) (meters 6))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*guard-bike-constants*
    :flags #x54
    :object-type #x12
    :guard-type #x4
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 60.0
    :engine-intake-factor 1.5
    :brake-factor 3.5
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 40)
    :ground-probe-distance (meters 5)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 0.3
    :air-drag-factor 1.0
    :steering-thruster-factor 5.0
    :steering-thruster-max-gain 4.0
    :steering-thruster-half-gain-speed (meters 15)
    :tire-friction-factor 0.5
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.4
    :tire-dynamic-friction-speed (meters 2)
    :tire-inv-max-friction-speed 0.000034877234
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.75
    :pitch-control-factor 1.0
    :roll-control-factor 1.0
    :jump-thrust-factor 0.625
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters 4)
    :turning-accel (meters 25)
    :toughness-factor 1.0
    :damage-factor 4.0
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 5461.3335
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 2
    :section-count 2
    :grab-rail-count 2
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 2
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 2048.0 :w 1.0)
          (new 'static 'vector :x 2048.0 :z 4096.0 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -2048.0 :z 4096.0 :w 1.0)
          (new 'static 'vector :x -2048.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info :position (new 'static 'vector :w (the-as float #x10000)))
      (new 'static 'vehicle-seat-info :position (new 'static 'vector :z -4096.0 :w (the-as float #x40000)))
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x20 #x8 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x40 #x10 #x4)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-offset -0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound-select 1
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "bike-scrape-stn")
    :glance-sound (static-sound-name "bike-glance-stn")
    :impact-sound (static-sound-name "bike-impact-stn")
    :extra-sound (static-sound-name "bike-by-1")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 1
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :z -11878.4 :w 1.0)
      (new 'static 'vector :x -1024.0 :z -11878.4 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2048.0 :y 204.8 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -2048.0 :y 204.8 :z -3276.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2
      (new 'static 'vector :x 0.7 :z -0.7 :w 1.0)
      (new 'static 'vector :x -0.7 :z -0.7 :w 1.0)
      )
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2048.0 :y 204.8 :z -4505.6 :w 1.0)
      (new 'static 'vector :x -2048.0 :y 204.8 :z -4505.6 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2048.0 :w 1.0)
      (new 'static 'vector :x -2048.0 :w 1.0)
      )
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :y 819.2 :z 12288.0 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :y 2867.2 :z -9420.8 :w 1.0) (new 'static 'vector))
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7372.8003 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -2457.6 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5324.8 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10649.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :color-option-count 1
    :color-option-array (new 'static 'inline-array vector 1 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))
    )
  )

(set! (-> *bikea-constants* explosion) *bike-explosion-info*)

(set! (-> *bikeb-constants* explosion) *bike-explosion-info*)

(set! (-> *bikec-constants* explosion) *bike-explosion-info*)

(set! (-> *guard-bike-constants* explosion) *bike-explosion-info*)

(deftype bike-base (vehicle)
  ()
  :heap-base #x2f0
  :method-count-assert 144
  :size-assert         #x370
  :flag-assert         #x9002f00370
  )


(defmethod do-engine-sounds bike-base ((obj bike-base))
  ((the-as (function object none) (find-parent-method bike-base 36)) obj)
  (when (logtest? (-> obj flags) (rigid-body-object-flag player-driving))
    (if (zero? (-> obj roll-sound-id))
        (set! (-> obj roll-sound-id) (new-sound-id))
        )
    (let* ((f0-4
             (* 4.0
                (-> obj force-scale)
                (-> obj sputter-sound-envelope)
                (-> obj info-override inv-max-engine-thrust)
                (+ (-> obj roll-thrust 0) (-> obj roll-thrust 1))
                )
             )
           (f1-6 (* 0.32 f0-4))
           (f0-5 0.5)
           )
      (sound-play-by-name
        (static-sound-name "bike-thrust")
        (-> obj roll-sound-id)
        (the int (* 1024.0 f1-6))
        (the int (* 1524.0 f0-5))
        0
        (sound-group sfx)
        #t
        )
      )
    )
  0
  (none)
  )

(defmethod draw-thrusters bike-base ((obj bike-base))
  ((the-as (function object none) (find-parent-method bike-base 85)) obj)
  (when (logtest? (-> obj rbody state flags) (rigid-body-flag enable-physics))
    (let ((s5-0 (new 'stack-no-clear 'inline-array 'matrix 3)))
      (let* ((v1-4 (the-as object (-> s5-0 0 vector 2)))
             (a3-0 (-> obj node-list data 0 bone transform))
             (a0-5 (-> a3-0 quad 0))
             (a1-1 (-> a3-0 quad 1))
             (a2-0 (-> a3-0 quad 2))
             (a3-1 (-> a3-0 trans quad))
             )
        (set! (-> (the-as vector v1-4) quad) a0-5)
        (set! (-> (the-as (pointer uint128) v1-4) 1) a1-1)
        (set! (-> (the-as (pointer uint128) v1-4) 2) a2-0)
        (set! (-> (the-as (pointer uint128) v1-4) 3) a3-1)
        )
      (set-vector! (-> s5-0 0 vector 1) 0.0 -1.0 0.0 1.0)
      (vector-rotate*! (-> s5-0 0 vector 1) (-> s5-0 0 vector 1) (the-as matrix (-> s5-0 0 vector 2)))
      (let ((s4-0 (new 'static 'inline-array vector 2
                    (new 'static 'vector :x 2048.0 :y -1228.8 :z 2457.6 :w 1.0)
                    (new 'static 'vector :x -2048.0 :y -1228.8 :z 2457.6 :w 1.0)
                    )
                  )
            (s3-0 (new 'static 'inline-array vector 2
                    (new 'static 'vector :x 0.707 :y -0.707 :w 1.0)
                    (new 'static 'vector :x -0.707 :y -0.707 :w 1.0)
                    )
                  )
            )
        (dotimes (s2-0 2)
          (when (< 0.0 (-> obj roll-thrust s2-0))
            (vector-rotate*! (-> s5-0 0 vector 1) (-> s3-0 s2-0) (the-as matrix (-> s5-0 0 vector 2)))
            (vector-matrix*! (the-as vector (-> s5-0 0)) (-> s4-0 s2-0) (the-as matrix (-> s5-0 0 vector 2)))
            (let* ((a0-11 obj)
                   (t9-5 (method-of-object a0-11 draw-thruster))
                   (a1-5 (-> s5-0 0))
                   (a2-4 (-> s5-0 0 vector 1))
                   (a3-2 1638.4)
                   (f0-5 12288.0)
                   (f1-1 (-> obj info-override extra gravity))
                   )
              (t9-5
                a0-11
                (the-as vector a1-5)
                a2-4
                a3-2
                (* f0-5 (/ 1.0 f1-1) (-> obj info-override info inv-mass) (-> obj force-scale) (-> obj roll-thrust s2-0))
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(deftype bikea (bike-base)
  ((fin-fl  joint-mod-rotate-local  :offset-assert 880)
   (fin-fr  joint-mod-rotate-local  :offset-assert 884)
   (fin-rl  joint-mod-rotate-local  :offset-assert 888)
   (fin-rr  joint-mod-rotate-local  :offset-assert 892)
   (rudder  joint-mod-rotate-local  :offset-assert 896)
   (brake-l joint-mod-rotate-local  :offset-assert 900)
   (brake-r joint-mod-rotate-local  :offset-assert 904)
   )
  :heap-base #x310
  :method-count-assert 144
  :size-assert         #x38c
  :flag-assert         #x900310038c
  )


(defmethod relocate bikea ((obj bikea) (arg0 int))
  (if (nonzero? (-> obj fin-fl))
      (&+! (-> obj fin-fl) arg0)
      )
  (if (nonzero? (-> obj fin-fr))
      (&+! (-> obj fin-fr) arg0)
      )
  (if (nonzero? (-> obj fin-rl))
      (&+! (-> obj fin-rl) arg0)
      )
  (if (nonzero? (-> obj fin-rr))
      (&+! (-> obj fin-rr) arg0)
      )
  (if (nonzero? (-> obj rudder))
      (&+! (-> obj rudder) arg0)
      )
  (if (nonzero? (-> obj brake-l))
      (&+! (-> obj brake-l) arg0)
      )
  (if (nonzero? (-> obj brake-r))
      (&+! (-> obj brake-r) arg0)
      )
  ((the-as (function object int bikea) (find-parent-method bikea 7)) obj arg0)
  )

(defmethod allocate-and-init-cshape bikea ((obj bikea))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 11264.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 0.0 -819.2 4505.6 3686.4)
      (set! (-> v1-11 nav-radius) 6144.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-13 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 -3686.4 4096.0)
      (set! (-> v1-13 nav-radius) 6144.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 96))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 204.8 3276.8 1228.8 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 -819.2 9011.2 1638.4)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 1228.8 -8601.6 2048.0)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods bikea ((obj bikea))
  (let ((f30-0 (* 5461.3335 (-> obj controls steering)))
        (f26-0 (* -5461.3335 (-> obj controls lean-z)))
        (f28-0 (* -13653.333 (-> obj controls brake)))
        (s5-0 (new 'static 'vector :x 1.0 :w 1.0))
        )
    (quaternion-vector-angle! (-> obj fin-rl rotation) s5-0 (+ f26-0 (* 0.2 f30-0)))
    (quaternion-vector-angle! (-> obj fin-rr rotation) s5-0 (+ (- f26-0) (* 0.2 f30-0)))
    (quaternion-vector-angle! (-> obj fin-fl rotation) s5-0 (- (* -0.2 f26-0) f30-0))
    (quaternion-vector-angle! (-> obj fin-fr rotation) s5-0 (- (* 0.2 f26-0) f30-0))
    (quaternion-vector-angle! (-> obj rudder rotation) s5-0 f30-0)
    (quaternion-vector-angle! (-> obj brake-l rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> obj brake-r rotation) s5-0 f28-0)
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body bikea ((obj bikea))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bikea" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control obj *bikea-constants*)
  (set! (-> obj fin-fl) (new 'process 'joint-mod-rotate-local obj 8 #t))
  (set! (-> obj fin-fr) (new 'process 'joint-mod-rotate-local obj 7 #t))
  (set! (-> obj fin-rl) (new 'process 'joint-mod-rotate-local obj 6 #t))
  (set! (-> obj fin-rr) (new 'process 'joint-mod-rotate-local obj 5 #t))
  (set! (-> obj rudder) (new 'process 'joint-mod-rotate-local obj 4 #t))
  (set! (-> obj brake-l) (new 'process 'joint-mod-rotate-local obj 9 #t))
  (set! (-> obj brake-r) (new 'process 'joint-mod-rotate-local obj 10 #t))
  0
  (none)
  )

(deftype bikeb (bike-base)
  ((fin-rl   joint-mod-rotate-local  :offset-assert 880)
   (fin-rr   joint-mod-rotate-local  :offset-assert 884)
   (rudder   joint-mod-rotate-local  :offset-assert 888)
   (rudder-f joint-mod-rotate-local  :offset-assert 892)
   (brake-l  joint-mod-rotate-local  :offset-assert 896)
   (brake-r  joint-mod-rotate-local  :offset-assert 900)
   (flap-l   joint-mod-rotate-local  :offset-assert 904)
   (flap-r   joint-mod-rotate-local  :offset-assert 908)
   )
  :heap-base #x310
  :method-count-assert 144
  :size-assert         #x390
  :flag-assert         #x9003100390
  )


(defmethod relocate bikeb ((obj bikeb) (arg0 int))
  (if (nonzero? (-> obj fin-rl))
      (&+! (-> obj fin-rl) arg0)
      )
  (if (nonzero? (-> obj fin-rr))
      (&+! (-> obj fin-rr) arg0)
      )
  (if (nonzero? (-> obj rudder))
      (&+! (-> obj rudder) arg0)
      )
  (if (nonzero? (-> obj rudder-f))
      (&+! (-> obj rudder-f) arg0)
      )
  (if (nonzero? (-> obj brake-l))
      (&+! (-> obj brake-l) arg0)
      )
  (if (nonzero? (-> obj brake-r))
      (&+! (-> obj brake-r) arg0)
      )
  (if (nonzero? (-> obj flap-l))
      (&+! (-> obj flap-l) arg0)
      )
  (if (nonzero? (-> obj flap-r))
      (&+! (-> obj flap-r) arg0)
      )
  ((the-as (function object int bikeb) (find-parent-method bikeb 7)) obj arg0)
  )

(defmethod allocate-and-init-cshape bikeb ((obj bikeb))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 11264.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 0.0 -409.6 4505.6 4300.8)
      (set! (-> v1-11 nav-radius) 6144.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-13 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 -3686.4 4096.0)
      (set! (-> v1-13 nav-radius) 6144.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 96))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 204.8 3276.8 1228.8 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 -819.2 9011.2 1638.4)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 1228.8 -8601.6 2048.0)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods bikeb ((obj bikeb))
  (let ((f30-0 (* 5461.3335 (-> obj controls steering)))
        (f26-0 (* -5461.3335 (-> obj controls lean-z)))
        (f28-0 (* 13653.333 (-> obj controls brake)))
        (s5-0 (new 'static 'vector :x 1.0 :w 1.0))
        )
    (quaternion-vector-angle! (-> obj fin-rl rotation) s5-0 (+ f26-0 (* 0.2 f30-0)))
    (quaternion-vector-angle! (-> obj fin-rr rotation) s5-0 (+ (- f26-0) (* 0.2 f30-0)))
    (quaternion-vector-angle! (-> obj rudder rotation) s5-0 f30-0)
    (quaternion-vector-angle! (-> obj rudder-f rotation) s5-0 (- f30-0))
    (quaternion-vector-angle! (-> obj brake-l rotation) s5-0 (- f28-0))
    (quaternion-vector-angle! (-> obj brake-r rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> obj flap-l rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> obj flap-r rotation) s5-0 (- f28-0))
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body bikeb ((obj bikeb))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bikeb" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control obj *bikeb-constants*)
  (set! (-> obj fin-rl) (new 'process 'joint-mod-rotate-local obj 4 #t))
  (set! (-> obj fin-rr) (new 'process 'joint-mod-rotate-local obj 10 #t))
  (set! (-> obj rudder) (new 'process 'joint-mod-rotate-local obj 6 #t))
  (set! (-> obj rudder-f) (new 'process 'joint-mod-rotate-local obj 7 #t))
  (set! (-> obj brake-l) (new 'process 'joint-mod-rotate-local obj 8 #t))
  (set! (-> obj brake-r) (new 'process 'joint-mod-rotate-local obj 9 #t))
  (set! (-> obj flap-l) (new 'process 'joint-mod-rotate-local obj 5 #t))
  (set! (-> obj flap-r) (new 'process 'joint-mod-rotate-local obj 11 #t))
  0
  (none)
  )

(deftype bikec (bike-base)
  ((fin-fl    joint-mod-rotate-local  :offset-assert 880)
   (fin-fr    joint-mod-rotate-local  :offset-assert 884)
   (fin-rl    joint-mod-rotate-local  :offset-assert 888)
   (fin-rr    joint-mod-rotate-local  :offset-assert 892)
   (fin2-fl   joint-mod-rotate-local  :offset-assert 896)
   (fin2-fr   joint-mod-rotate-local  :offset-assert 900)
   (rudder    joint-mod-rotate-local  :offset-assert 904)
   (brake-l   joint-mod-rotate-local  :offset-assert 908)
   (brake-r   joint-mod-rotate-local  :offset-assert 912)
   (spoiler-l joint-mod-rotate-local  :offset-assert 916)
   (spoiler-r joint-mod-rotate-local  :offset-assert 920)
   )
  :heap-base #x320
  :method-count-assert 144
  :size-assert         #x39c
  :flag-assert         #x900320039c
  )


(defmethod relocate bikec ((obj bikec) (arg0 int))
  (if (nonzero? (-> obj fin-fl))
      (&+! (-> obj fin-fl) arg0)
      )
  (if (nonzero? (-> obj fin-fr))
      (&+! (-> obj fin-fr) arg0)
      )
  (if (nonzero? (-> obj fin-rl))
      (&+! (-> obj fin-rl) arg0)
      )
  (if (nonzero? (-> obj fin-rr))
      (&+! (-> obj fin-rr) arg0)
      )
  (if (nonzero? (-> obj fin2-fl))
      (&+! (-> obj fin2-fl) arg0)
      )
  (if (nonzero? (-> obj fin2-fr))
      (&+! (-> obj fin2-fr) arg0)
      )
  (if (nonzero? (-> obj rudder))
      (&+! (-> obj rudder) arg0)
      )
  (if (nonzero? (-> obj brake-l))
      (&+! (-> obj brake-l) arg0)
      )
  (if (nonzero? (-> obj brake-r))
      (&+! (-> obj brake-r) arg0)
      )
  (if (nonzero? (-> obj spoiler-l))
      (&+! (-> obj spoiler-l) arg0)
      )
  (if (nonzero? (-> obj spoiler-r))
      (&+! (-> obj spoiler-r) arg0)
      )
  ((the-as (function object int bikec) (find-parent-method bikec 7)) obj arg0)
  )

(defmethod allocate-and-init-cshape bikec ((obj bikec))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 13312.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 0.0 0.0 4505.6 4300.8)
      (set! (-> v1-11 nav-radius) 7577.6)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-13 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 -3686.4 4096.0)
      (set! (-> v1-13 nav-radius) 6144.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 96))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 204.8 3276.8 1228.8 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 9011.2 3686.4)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 1228.8 -8601.6 2048.0)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods bikec ((obj bikec))
  (let ((f30-0 (* 5461.3335 (-> obj controls steering)))
        (f26-0 (* -5461.3335 (-> obj controls lean-z)))
        (f28-0 (* 13653.333 (-> obj controls brake)))
        (s5-0 (new 'static 'vector :x 1.0 :w 1.0))
        )
    (quaternion-vector-angle! (-> obj fin-fl rotation) s5-0 (- f26-0))
    (quaternion-vector-angle! (-> obj fin-fr rotation) s5-0 f26-0)
    (quaternion-vector-angle! (-> obj fin2-fl rotation) s5-0 (- f26-0))
    (quaternion-vector-angle! (-> obj fin2-fr rotation) s5-0 f26-0)
    (quaternion-vector-angle! (-> obj fin-rl rotation) s5-0 (+ f26-0 (* 0.2 f30-0)))
    (quaternion-vector-angle! (-> obj fin-rr rotation) s5-0 (+ (- f26-0) (* 0.2 f30-0)))
    (quaternion-vector-angle! (-> obj rudder rotation) s5-0 f30-0)
    (quaternion-vector-angle! (-> obj brake-l rotation) s5-0 (- f28-0))
    (quaternion-vector-angle! (-> obj brake-r rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> obj spoiler-l rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> obj spoiler-r rotation) s5-0 (- f28-0))
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body bikec ((obj bikec))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bikec" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control obj *bikec-constants*)
  (set! (-> obj fin-fl) (new 'process 'joint-mod-rotate-local obj 7 #t))
  (set! (-> obj fin-fr) (new 'process 'joint-mod-rotate-local obj 6 #t))
  (set! (-> obj fin-rl) (new 'process 'joint-mod-rotate-local obj 9 #t))
  (set! (-> obj fin-rr) (new 'process 'joint-mod-rotate-local obj 10 #t))
  (set! (-> obj fin2-fl) (new 'process 'joint-mod-rotate-local obj 4 #t))
  (set! (-> obj fin2-fr) (new 'process 'joint-mod-rotate-local obj 5 #t))
  (set! (-> obj rudder) (new 'process 'joint-mod-rotate-local obj 8 #t))
  (set! (-> obj brake-l) (new 'process 'joint-mod-rotate-local obj 11 #t))
  (set! (-> obj brake-r) (new 'process 'joint-mod-rotate-local obj 12 #t))
  (set! (-> obj spoiler-l) (new 'process 'joint-mod-rotate-local obj 13 #t))
  (set! (-> obj spoiler-r) (new 'process 'joint-mod-rotate-local obj 14 #t))
  0
  (none)
  )

(define *guard-bike-turret-control-info* (new 'static 'turret-control-info
                                           :joint-index 4
                                           :barrel-count 1
                                           :shot-speed 819200.0
                                           :attack-range 286720.0
                                           :rot-min (new 'static 'array float 2 -16384.0 -21845.334)
                                           :rot-max (new 'static 'array float 2 0.0 21845.334)
                                           :local-pos (new 'static 'vector :y -1433.6 :z 4096.0 :w 1.0)
                                           :local-dir (new 'static 'vector :z 1.0 :w 1.0)
                                           :barrel-array (new 'static 'inline-array turret-barrel-info 4
                                             (new 'static 'turret-barrel-info
                                               :local-pos (new 'static 'vector :y -1433.6 :z 4096.0 :w 1.0)
                                               :local-dir (new 'static 'vector :z 1.0 :w 1.0)
                                               )
                                             (new 'static 'turret-barrel-info)
                                             (new 'static 'turret-barrel-info)
                                             (new 'static 'turret-barrel-info)
                                             )
                                           )
        )

(deftype guard-bike (vehicle-guard)
  ((turret-jm joint-mod-rotate-local  :offset-assert 1076)
   )
  :heap-base #x3c0
  :method-count-assert 159
  :size-assert         #x438
  :flag-assert         #x9f03c00438
  )


(defmethod relocate guard-bike ((obj guard-bike) (arg0 int))
  (if (nonzero? (-> obj turret-jm))
      (&+! (-> obj turret-jm) arg0)
      )
  ((the-as (function object int guard-bike) (find-parent-method guard-bike 7)) obj arg0)
  )

(defmethod start-jump guard-bike ((obj guard-bike))
  (when (not (logtest? (rigid-body-object-flag jump-sound) (-> obj flags)))
    (set! (-> obj flags) (logior (rigid-body-object-flag jump-sound) (-> obj flags)))
    (sound-play "bike-hop")
    )
  (set! (-> obj flags) (logior (rigid-body-object-flag jump) (-> obj flags)))
  0
  (none)
  )

(defmethod allocate-and-init-cshape guard-bike ((obj guard-bike))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 13312.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 0.0 0.0 4505.6 4300.8)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-13 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 -3686.4 4096.0)
      (set! (-> v1-13 nav-radius) 7168.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 96))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 204.8 3276.8 1228.8 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-17 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 9011.2 3686.4)
      (set! (-> v1-17 nav-radius) 7168.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 -1638.4 -8192.0 3686.4)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods guard-bike ((obj guard-bike))
  (update-joint-mod (-> obj turret) (-> obj turret-jm))
  0
  (none)
  )

(defmethod init-skel-and-rigid-body guard-bike ((obj guard-bike))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-guard-bike" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control obj *guard-bike-constants*)
  (set-info (-> obj turret) *guard-bike-turret-control-info*)
  (set! (-> obj turret-jm) (new 'process 'joint-mod-rotate-local obj (-> obj turret info joint-index) #t))
  0
  (none)
  )
