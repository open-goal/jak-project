;;-*-Lisp-*-
(in-package goal)

;; name: vehicle-physics.gc
;; name in dgo: vehicle-physics
;; dgos: CWI

;; DECOMP BEGINS

(defmethod vehicle-method-99 vehicle ((obj vehicle) (arg0 float))
  (let ((s4-0 (new 'stack-no-clear 'vehicle-grab-rail-info))
        (s3-0 (-> obj root-override-2 root-prim))
        (s2-0 1)
        )
    (when (< (-> obj rbody state position y) (+ (-> obj water-height) (-> s3-0 local-sphere w)))
      (when (= (-> s3-0 prim-core prim-type) (prim-type group))
        (let ((v1-5 (the-as collide-shape-prim-group s3-0)))
          (set! s3-0 (-> v1-5 child 0))
          (set! s2-0 (the-as int (-> v1-5 num-children)))
          )
        )
      (countdown (s1-0 s2-0)
        (when (= (-> s3-0 prim-core prim-type) (prim-type sphere))
          (let* ((s0-0 (-> s3-0 prim-core))
                 (f0-2 (- (-> s0-0 world-sphere y) (-> s0-0 world-sphere w)))
                 )
            (when (< f0-2 (-> obj water-height))
              (set! (-> s4-0 local-pos 0 quad) (-> s0-0 world-sphere quad))
              (let ((f1-5 (fmin (-> obj water-height) (+ (-> s0-0 world-sphere y) (-> s0-0 world-sphere w)))))
                0.0
                (let* ((f2-5 (fmax -1.0 (fmin 1.0 (/ (- (-> obj water-height) (-> s0-0 world-sphere y)) (-> s0-0 world-sphere w)))))
                       (f30-0 (+ 0.5 (* -0.25 f2-5 f2-5 f2-5) (* 0.75 f2-5)))
                       )
                  (set! (-> s4-0 local-pos 0 y) (* 0.5 (+ f0-2 f1-5)))
                  (let ((v1-18 (-> obj rbody))
                        (a1-1 (-> s4-0 local-pos))
                        (a2-0 (-> s4-0 normal))
                        )
                    (rigid-body-method-22 (-> v1-18 state) (the-as vector a1-1) a2-0)
                    )
                  (let* ((f0-7 (* 0.062831804 (fmin 200.0 (vector-length (-> s4-0 normal))) f30-0))
                         (f1-8 (-> s0-0 world-sphere w))
                         (f0-8 (* f0-7 (* f1-8 f1-8)))
                         (f1-11 4096.0)
                         (f1-13 (* f1-11 f1-11))
                         (f0-10 (fmin (* f0-8 (/ 1.0 f1-13)) (/ (-> obj info-override info mass) (* 2.0 arg0 (the float s2-0)))))
                         )
                    (vector-float*! (-> s4-0 local-pos 1) (-> s4-0 normal) (* -1.0 f0-10))
                    )
                  (let ((v1-34 (-> obj rbody))
                        (a1-3 (-> s4-0 local-pos))
                        (a2-1 (-> s4-0 local-pos 1))
                        )
                    (rigid-body-method-18 (-> v1-34 state) (the-as vector a1-3) a2-1)
                    )
                  (vector-reset! (-> s4-0 local-pos 1))
                  (let* ((f0-12 549018.94)
                         (f1-19 4096.0)
                         (f2-13 4096.0)
                         (f1-20 (* f1-19 (* f2-13 f2-13)))
                         (f0-16 (* f0-12 (/ 1.0 f1-20) (-> obj info-override buoyancy-factor) f30-0 (-> s0-0 world-sphere w)))
                         (f1-25 (-> s0-0 world-sphere w))
                         )
                    (set! (-> s4-0 local-pos 1 y) (* f0-16 (* f1-25 f1-25)))
                    )
                  )
                )
              (let ((v1-46 (-> obj rbody))
                    (a1-4 (-> s4-0 local-pos))
                    (a2-2 (-> s4-0 local-pos 1))
                    )
                (rigid-body-method-18 (-> v1-46 state) (the-as vector a1-4) a2-2)
                )
              )
            )
          )
        (&+! s3-0 80)
        )
      )
    )
  0
  (none)
  )

(deftype vehicle-probe-work (structure)
  ((local-pos     vector :inline :offset-assert   0)
   (local-normal  vector :inline :offset-assert  16)
   (world-pos     vector :inline :offset-assert  32)
   (world-normal  vector :inline :offset-assert  48)
   (probe-pos     vector :inline :offset-assert  64)
   (ground-pos    vector :inline :offset-assert  80)
   (ground-normal vector :inline :offset-assert  96)
   (velocity      vector :inline :offset-assert 112)
   (tire-force    vector :inline :offset-assert 128)
   (wheel-axis    vector :inline :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )


(deftype vehicle-physics-work (structure)
  ((mat              matrix             :inline   :offset-assert   0)
   (force            vector             :inline   :offset-assert  64)
   (velocity         vector             :inline   :offset-assert  80)
   (world-pos        vector             :inline   :offset-assert  96)
   (world-normal     vector             :inline   :offset-assert 112)
   (local-pos        vector             :inline   :offset-assert 128)
   (steering-axis    vector             :inline   :offset-assert 144)
   (lift-dir         vector             :inline   :offset-assert 160)
   (normal           vector             :inline   :offset-assert 176)
   (tmp              vector             :inline   :offset-assert 192)
   (p-body           vector             :inline   :offset-assert 208)
   (axis             vector             :inline   :offset-assert 224)
   (dir              vector             :inline   :offset-assert 240)
   (ground-normal    vector             :inline   :offset-assert 256)
   (impulse          float                        :offset-assert 272)
   (vel-dot-norm     float                        :offset-assert 276)
   (friction-coef    float                        :offset-assert 280)
   (speed-factor     float                        :offset-assert 284)
   (probe-work-array vehicle-probe-work 2 :inline :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x260
  :flag-assert         #x900000260
  )


(defmethod vehicle-method-100 vehicle ((obj vehicle) (arg0 float) (arg1 vehicle-physics-work))
  (local-vars (v1-81 float) (v1-184 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (+! (-> obj physics-counter) 1)
    (let ((s3-0 (-> obj rbody)))
      (mem-copy! (the-as pointer (-> arg1 mat)) (the-as pointer (-> s3-0 state matrix)) 64)
      (let* ((f28-0 (* -1.0 (-> obj controls steering) (-> obj info-override tire-steering-angle)))
             (f30-0 (cos f28-0))
             (f0-2 (sin f28-0))
             )
        (set! (-> arg1 steering-axis x) f30-0)
        (set! (-> arg1 steering-axis y) 0.0)
        (set! (-> arg1 steering-axis z) f0-2)
        )
      (vector-rotate*! (-> arg1 steering-axis) (-> arg1 steering-axis) (-> arg1 mat))
      (logior! (-> obj flags) (rigid-body-object-flag in-air))
      (logclear! (-> obj flags) (rigid-body-object-flag on-ground on-flight-level))
      (vector-reset! (-> arg1 ground-normal))
      (set! (-> arg1 ground-normal y) 1.0)
      (let ((f30-1 (-> obj info-override ground-probe-distance)))
        (let ((s2-0 (new 'stack-no-clear 'collide-query)))
          (vector-reset! (-> arg1 lift-dir))
          (set! (-> arg1 lift-dir y) -1.0)
          (set! (-> arg1 speed-factor)
                (fmax 0.0 (fmin 0.9 (* 0.000008138021 (+ -40960.0 (vector-length (-> s3-0 state lin-velocity))))))
                )
          (when (logtest? (-> obj info-override flags) 1)
            (vector-float*! (-> arg1 tmp) (-> arg1 mat vector 1) -1.0)
            (let ((t9-4 vector-lerp!)
                  (a0-7 (-> arg1 lift-dir))
                  (a1-4 (-> arg1 lift-dir))
                  (a2-3 (-> arg1 tmp))
                  (f0-8 (-> arg1 speed-factor))
                  )
              (t9-4 a0-7 a1-4 a2-3 (* f0-8 f0-8))
              )
            (vector-normalize! (-> arg1 lift-dir) 1.0)
            )
          (vector-float*! (-> s2-0 move-dist) (-> arg1 lift-dir) (the-as float f30-1))
          (let ((v1-28 s2-0))
            (set! (-> v1-28 radius) 409.6)
            (set! (-> v1-28 collide-with) (collide-spec
                                            backgnd
                                            obstacle
                                            hit-by-player-list
                                            hit-by-others-list
                                            water
                                            collectable
                                            blocking-plane
                                            pusher
                                            vehicle-mesh-probeable
                                            )
                  )
            (set! (-> v1-28 ignore-process0) #f)
            (set! (-> v1-28 ignore-process1) #f)
            (set! (-> v1-28 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nopilot #x1))
            (set! (-> v1-28 action-mask) (collide-action solid))
            )
          (dotimes (s1-0 (-> obj info-override lift-thruster-count))
            (let ((v1-31 (-> obj info-override lift-thruster-array s1-0))
                  (s0-0 (-> arg1 probe-work-array s1-0))
                  )
              (vector-reset! (-> s0-0 tire-force))
              (set! (-> s0-0 local-pos quad) (-> v1-31 local-pos quad))
              (set! (-> s0-0 local-normal quad) (-> v1-31 normal quad))
              (vector-matrix*! (-> s0-0 world-pos) (-> s0-0 local-pos) (-> arg1 mat))
              (let ((a1-9 (-> s0-0 probe-pos)))
                (let ((v1-34 (-> s0-0 world-pos)))
                  (let ((a0-22 (-> arg1 mat vector 1)))
                    (let ((a2-6 (-> obj info-override ground-probe-offset)))
                      (.mov vf7 a2-6)
                      )
                    (.lvf vf5 (&-> a0-22 quad))
                    )
                  (.lvf vf4 (&-> v1-34 quad))
                  )
                (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf5 vf7 :mask #b111)
                (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                (.svf (&-> a1-9 quad) vf6)
                )
              (let ((v1-35 s3-0)
                    (a1-10 (-> s0-0 probe-pos))
                    (a2-7 (-> s0-0 velocity))
                    )
                (rigid-body-method-22 (-> v1-35 state) a1-10 a2-7)
                )
              (set! (-> s0-0 wheel-axis quad) (-> (the-as vector (if (< 0.0 (-> s0-0 local-pos z))
                                                                     (-> arg1 steering-axis)
                                                                     (the-as vector (-> arg1 mat))
                                                                     )
                                                          )
                                                  quad
                                                  )
                    )
              (set! (-> s0-0 ground-pos quad) (-> s0-0 probe-pos quad))
              (set! (-> s0-0 ground-pos y) 0.0)
              (vector-reset! (-> s0-0 ground-normal))
              (when (logtest? (-> obj flags) (rigid-body-object-flag enable-collision))
                (set! (-> s2-0 start-pos quad) (-> s0-0 probe-pos quad))
                (let ((f0-15 (probe-using-line-sphere *collide-cache* s2-0)))
                  (cond
                    ((and (>= f0-15 0.0) (!= (-> s2-0 best-other-tri pat mode) 1))
                     (logclear! (-> obj flags) (rigid-body-object-flag in-air))
                     (logior! (-> obj flags) (rigid-body-object-flag on-ground))
                     (set! (-> s0-0 ground-pos y) (- (-> s0-0 probe-pos y) (* f0-15 f30-1)))
                     (set! (-> s0-0 ground-normal quad) (-> s2-0 best-other-tri normal quad))
                     (set! (-> arg1 ground-normal quad) (-> s0-0 ground-normal quad))
                     )
                    (else
                      (set! (-> s0-0 ground-pos y) (+ -81920.0 (-> s3-0 state position y)))
                      )
                    )
                  )
                0
                )
              )
            )
          )
        (set! (-> obj lift-thrust 0) 0.0)
        (set! (-> obj lift-thrust 1) 0.0)
        (set! (-> obj roll-thrust 0) 0.0)
        (set! (-> obj roll-thrust 1) 0.0)
        (set! (-> obj roll-thrust 0) 0.0)
        (set! (-> obj roll-thrust 1) 0.0)
        (when (>= 1 (-> obj force-level))
          (dotimes (s2-1 (-> obj info-override lift-thruster-count))
            (let ((s1-1 (-> arg1 probe-work-array s2-1)))
              (set! (-> arg1 world-pos quad) (-> s1-1 world-pos quad))
              (set! (-> arg1 velocity quad) (-> s1-1 velocity quad))
              (let ((f28-1 (-> s1-1 probe-pos y)))
                (when (> (-> obj flight-level-index) 0)
                  (set! f28-1 (- f28-1 (+ 6144.0 (-> obj flight-level))))
                  (when (>= 0.0 f28-1)
                    (logclear! (-> obj flags) (rigid-body-object-flag in-air))
                    (logior! (-> obj flags) (rigid-body-object-flag on-flight-level))
                    (.lvf vf1 (&-> (-> s1-1 ground-normal) quad))
                    (.add.w.vf vf2 vf0 vf0 :mask #b1)
                    (.mul.vf vf1 vf1 vf1)
                    (.mul.x.vf acc vf2 vf1 :mask #b1)
                    (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                    (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                    (.mov v1-81 vf1)
                    (if (= v1-81 0.0)
                        (set! (-> s1-1 ground-normal y) 1.0)
                        )
                    )
                  )
                (when (or (logtest? (rigid-body-object-flag flight-level-transition) (-> obj flags))
                          (and (> (-> obj flight-level-index) 0) (< f28-1 0.0))
                          )
                  (if (zero? (-> obj flight-level-index))
                      (set! f28-1 40960.0)
                      )
                  (let* ((f0-37 (* -1.0
                                   (-> obj force-scale)
                                   (-> obj info-override inv-lift-thruster-count)
                                   (-> obj info-override info mass)
                                   (-> obj info-override extra gravity)
                                   (+ 1.0 (* 2.0 (the float (-> obj flight-level-index))))
                                   )
                                )
                         (f1-17 -1.0)
                         (f2-4 1.0)
                         (f3-4 16384.0)
                         (f3-7 (* f28-1 (/ 1.0 f3-4)))
                         (f4-2 0.5)
                         (f5-0 81920.0)
                         (f0-38 (* f0-37 (fmax f1-17 (fmin f2-4 (+ f3-7 (* f4-2 (/ 1.0 f5-0) (-> arg1 velocity y)))))))
                         )
                    (let ((f1-20 (fmax 0.0 f0-38)))
                      (+! (-> obj lift-thrust s2-1) f1-20)
                      (when (logtest? (rigid-body-object-flag flight-level-transition) (-> obj flags))
                        (+! (-> obj roll-thrust 0) (* 0.05 f1-20))
                        (+! (-> obj roll-thrust 1) (* 0.05 f1-20))
                        )
                      )
                    (vector-reset! (-> arg1 force))
                    (set! (-> arg1 force y) f0-38)
                    )
                  (let ((v1-122 s3-0)
                        (a1-12 (-> arg1 world-pos))
                        (a2-8 (-> arg1 force))
                        )
                    (rigid-body-method-18 (-> v1-122 state) a1-12 a2-8)
                    )
                  (vector+! (-> s1-1 tire-force) (-> s1-1 tire-force) (-> arg1 force))
                  )
                (let ((f0-40 (+ 4096.0 f28-1)))
                  (when (or (and (logtest? (rigid-body-object-flag flight-level-transition) (-> obj flags))
                                 (< 0.0 f0-40)
                                 (< 0.0 (-> arg1 velocity y))
                                 )
                            (and (> (-> obj flight-level-index) 0) (< f0-40 0.0) (< (-> arg1 velocity y) 0.0))
                            )
                    (vector-reset! (-> arg1 force))
                    (let ((f0-43 (* -0.25 (-> obj info-override inv-lift-thruster-count)))
                          (f1-28 arg0)
                          )
                      (set! (-> arg1 force y) (* f0-43 (/ 1.0 f1-28) (-> obj info-override info mass) (-> arg1 velocity y)))
                      )
                    (let ((v1-140 s3-0)
                          (a1-16 (-> arg1 world-pos))
                          (a2-9 (-> arg1 force))
                          )
                      (rigid-body-method-18 (-> v1-140 state) a1-16 a2-9)
                      )
                    (vector+! (-> s1-1 tire-force) (-> s1-1 tire-force) (-> arg1 force))
                    )
                  )
                )
              (let* ((f1-36 (fmax 4096.0 (fmin (- (-> s1-1 probe-pos y) (-> s1-1 ground-pos y)) f30-1)))
                     (f28-2 (- 1.0 (/ (+ -4096.0 f1-36) (+ -4096.0 f30-1))))
                     )
                (if (>= (-> obj info-override cos-ground-effect-angle)
                        (vector-dot (-> s1-1 ground-normal) (-> arg1 mat vector 1))
                        )
                    (set! f28-2 0.0)
                    )
                (set! (-> arg1 tmp y) 0.0)
                (set! (-> arg1 tmp x) (-> arg1 velocity z))
                (set! (-> arg1 tmp z) (- (-> arg1 velocity x)))
                (vector-normalize! (-> arg1 tmp) 1.0)
                (vector+float*!
                  (-> arg1 normal)
                  (-> s1-1 ground-normal)
                  (-> arg1 tmp)
                  (- (vector-dot (-> s1-1 ground-normal) (-> arg1 tmp)))
                  )
                (let ((v1-155 (-> arg1 force))
                      (a0-55 (-> arg1 normal))
                      (f0-58 (* 2.0 f28-2))
                      (f1-41 arg0)
                      )
                  (vector-float*! v1-155 a0-55 (* f0-58
                                                  (/ 1.0 f1-41)
                                                  (-> obj info-override inv-lift-thruster-count)
                                                  (-> obj info-override info mass)
                                                  (fmax 0.0 (- (vector-dot (-> arg1 velocity) (-> arg1 normal))))
                                                  )
                                  )
                  )
                (let ((v1-157 s3-0)
                      (a1-28 (-> arg1 world-pos))
                      (a2-13 (-> arg1 force))
                      )
                  (rigid-body-method-18 (-> v1-157 state) a1-28 a2-13)
                  )
                (vector+! (-> s1-1 tire-force) (-> s1-1 tire-force) (-> arg1 force))
                (let ((f0-72 (* 8.0
                                (-> obj info-override info mass)
                                (-> obj info-override extra gravity)
                                (-> obj info-override inv-lift-thruster-count)
                                (+ (* (-> obj info-override spring-lift-factor) f28-2)
                                   (* 0.75 (-> obj jump-thrust) (-> obj info-override jump-thrust-factor))
                                   )
                                (- (+ 1.0 (* 2.0 (rand-vu) (-> obj power-fluctuation-factor))) (-> obj power-fluctuation-factor))
                                )
                             )
                      )
                  (+! (-> obj lift-thrust s2-1) f0-72)
                  (vector-float*! (-> arg1 force) (-> arg1 lift-dir) (* -1.0 f0-72))
                  )
                )
              (let ((v1-176 s3-0)
                    (a1-32 (-> arg1 world-pos))
                    (a2-14 (-> arg1 force))
                    )
                (rigid-body-method-18 (-> v1-176 state) a1-32 a2-14)
                )
              (vector+! (-> s1-1 tire-force) (-> s1-1 tire-force) (-> arg1 force))
              (when (and (< 0.0 (-> obj info-override tire-friction-factor)) (let ((f0-75 0.0))
                                                                               (.lvf vf1 (&-> (-> s1-1 ground-normal) quad))
                                                                               (.add.w.vf vf2 vf0 vf0 :mask #b1)
                                                                               (.mul.vf vf1 vf1 vf1)
                                                                               (.mul.x.vf acc vf2 vf1 :mask #b1)
                                                                               (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                                                                               (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                                                                               (.mov v1-184 vf1)
                                                                               (< f0-75 v1-184)
                                                                               )
                         )
                (vector+float*!
                  (-> arg1 normal)
                  (-> s1-1 wheel-axis)
                  (-> s1-1 ground-normal)
                  (- (vector-dot (-> s1-1 wheel-axis) (-> s1-1 ground-normal)))
                  )
                (vector-normalize! (-> arg1 normal) 1.0)
                (set! (-> arg1 world-pos quad) (-> s3-0 state position quad))
                (set! (-> arg1 velocity quad) (-> s3-0 state lin-velocity quad))
                (vector-! (-> arg1 p-body) (-> arg1 world-pos) (-> s3-0 state position))
                (vector-cross! (-> arg1 tmp) (-> arg1 p-body) (-> arg1 normal))
                (vector-rotate*! (-> arg1 tmp) (-> arg1 tmp) (-> s3-0 state inv-i-world))
                (vector-cross! (-> arg1 tmp) (-> arg1 tmp) (-> arg1 p-body))
                (set! (-> arg1 vel-dot-norm) (vector-dot (-> arg1 velocity) (-> arg1 normal)))
                (let ((f0-82 (fabs (-> arg1 vel-dot-norm))))
                  (set! (-> arg1 friction-coef)
                        (smooth-interp
                          (-> obj info-override tire-static-friction)
                          (-> obj info-override tire-dynamic-friction)
                          f0-82
                          (-> obj info-override tire-static-friction-speed)
                          (-> obj info-override tire-dynamic-friction-speed)
                          )
                        )
                  )
                (set! (-> arg1 friction-coef)
                      (* (-> arg1 friction-coef) (+ 1.0 (* -0.75 (fmax 0.0 (fmin 1.0 (-> obj engine-thrust))))))
                      )
                (let ((f0-90
                        (* (-> arg1 friction-coef)
                           (-> obj info-override tire-friction-factor)
                           (fmax 0.0 (vector-dot (-> s1-1 ground-normal) (-> s1-1 tire-force)))
                           )
                        )
                      )
                  (set! (-> arg1 impulse)
                        (/ (* -1.0 (-> arg1 vel-dot-norm))
                           (* arg0 (+ (-> s3-0 state info inv-mass) (vector-dot (-> arg1 normal) (-> arg1 tmp))))
                           )
                        )
                  (set! (-> arg1 impulse) (fmax (fmin (-> arg1 impulse) f0-90) (- f0-90)))
                  )
                (vector-float*! (-> arg1 force) (-> arg1 normal) (-> arg1 impulse))
                (let ((v1-213 s3-0)
                      (a1-45 (-> arg1 world-pos))
                      (a2-19 (-> arg1 force))
                      )
                  (rigid-body-method-18 (-> v1-213 state) a1-45 a2-19)
                  )
                )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod rigid-body-object-method-29 vehicle ((obj vehicle) (arg0 float))
  (local-vars (sv-624 float) (sv-720 float) (sv-724 float))
  (rlet ((vf0 :class vf))
    (init-vf0-vector)
    (let ((gp-0 (new 'stack-no-clear 'inline-array 'matrix 9))
          (s5-0 (-> obj rbody))
          (s4-0 (-> obj info-override))
          )
      (mem-copy! (the-as pointer (-> gp-0 0)) (the-as pointer (-> s5-0 state matrix)) 64)
      (when (not (logtest? (-> obj flags) (rigid-body-object-flag dead)))
        (vehicle-method-100 obj arg0 (the-as vehicle-physics-work gp-0))
        (when (>= 1 (-> obj force-level))
          (set! sv-624 (* (-> s4-0 info mass) (-> s4-0 extra gravity)))
          (when (!= (-> s4-0 pitch-control-factor) 0.0)
            (set! (-> gp-0 3 vector 2 quad) (-> gp-0 0 quad 0))
            (set! (-> gp-0 3 vector 2 y) 0.0)
            (let ((f30-0 (vector-dot (-> gp-0 3 vector 2) (-> s5-0 state ang-velocity))))
              (dotimes (s1-0 (-> s4-0 lift-thruster-count))
                (let ((s0-0 (-> s4-0 lift-thruster-array s1-0)))
                  (vector-matrix*! (-> gp-0 1 vector 2) (-> s0-0 local-pos) (-> gp-0 0))
                  (vector-rotate*! (-> gp-0 1 trans) (-> s0-0 normal) (-> gp-0 0))
                  (let* ((f0-5 -1.0)
                         (f1-2 1.0)
                         (f2-0 0.2)
                         (a0-9 (the-as number (-> s0-0 local-pos z)))
                         (a1-5 #xffffffff80000000)
                         (v1-16 #x3f800000)
                         (f0-7
                           (* (fmax
                                f0-5
                                (fmin
                                  f1-2
                                  (* f2-0 (the-as float (logior (logand (the-as uint a0-9) a1-5) v1-16)) (-> s4-0 pitch-control-factor) f30-0)
                                  )
                                )
                              sv-624
                              )
                           )
                         )
                    (vector-float*! (the-as vector (-> gp-0 1)) (-> gp-0 1 trans) (* -1.0 f0-7))
                    )
                  )
                (let ((v1-21 s5-0)
                      (a1-7 (-> gp-0 1 vector 2))
                      (a2-4 (-> gp-0 1))
                      )
                  (rigid-body-method-18 (-> v1-21 state) a1-7 (the-as vector a2-4))
                  )
                )
              )
            )
          (let ((s1-1 (new 'stack-no-clear 'inline-array 'vector 5)))
            (let ((f0-12 (* -1.0 (-> obj controls steering) (-> gp-0 4 vector 1 w) (-> s4-0 roll-angle))))
              (if (logtest? (-> obj flags) (rigid-body-object-flag in-air))
                  (set! f0-12 0.0)
                  )
              (quaternion-vector-angle! (the-as quaternion (-> s1-1 0)) (-> gp-0 0 vector 2) f0-12)
              )
            (quaternion->matrix (the-as matrix (-> s1-1 1)) (the-as quaternion (-> s1-1 0)))
            (set! (-> gp-0 3 trans quad) (-> s1-1 2 quad))
            )
          (let ((f0-14 (vector-dot (the-as vector (-> gp-0 0)) (-> gp-0 3 trans))))
            (set! sv-720 (* (-> s4-0 info mass) (-> s4-0 extra gravity)))
            (let ((f1-11 f0-14))
              (set! sv-724
                    (+ (* f1-11 f1-11 f0-14) (* 0.075 (vector-dot (-> gp-0 0 vector 2) (-> s5-0 state ang-velocity))))
                    )
              )
            )
          (dotimes (s1-2 (-> s4-0 roll-thruster-count))
            (let* ((s0-1 (-> s4-0 roll-thruster-array s1-2))
                   (f0-17 0.0)
                   (f1-16 1.0)
                   (f2-7 -1.0)
                   (a0-19 (the-as number (-> s0-1 local-pos x)))
                   (a1-10 #xffffffff80000000)
                   (v1-44 #x3f800000)
                   (f30-1
                     (fmax f0-17 (fmin f1-16 (* f2-7 (the-as float (logior (logand (the-as uint a0-19) a1-10) v1-44)) sv-724)))
                     )
                   )
              (when (< 0.0 f30-1)
                (let ((f30-2
                        (* (+ f30-1 (+ (- (-> obj power-fluctuation-factor)) (* 2.0 (rand-vu) (-> obj power-fluctuation-factor))))
                           (-> s4-0 roll-control-factor)
                           sv-720
                           )
                        )
                      )
                  (+! (-> obj roll-thrust s1-2) (fmax 0.0 f30-2))
                  (vector-matrix*! (-> gp-0 1 vector 2) (-> s0-1 local-pos) (-> gp-0 0))
                  (vector-rotate*! (-> gp-0 1 trans) (-> s0-1 normal) (-> gp-0 0))
                  (vector-float*! (the-as vector (-> gp-0 1)) (-> gp-0 1 trans) (* -1.0 f30-2))
                  )
                (let ((v1-56 s5-0)
                      (a1-14 (-> gp-0 1 vector 2))
                      (a2-8 (-> gp-0 1))
                      )
                  (rigid-body-method-18 (-> v1-56 state) a1-14 (the-as vector a2-8))
                  )
                0
                )
              )
            )
          )
        (when #t
          (let* ((f0-30 (-> obj controls steering))
                 (f1-23 (-> s4-0 steering-thruster-half-gain-speed))
                 (f2-10 (-> s4-0 steering-thruster-half-gain-speed))
                 (v1-65 (-> s5-0 state lin-velocity))
                 (f2-12 (/ f1-23 (+ f2-10 (sqrtf (+ (* (-> v1-65 x) (-> v1-65 x)) (* (-> v1-65 z) (-> v1-65 z)))))))
                 )
            (if (< (-> obj controls throttle) 0.0)
                (set! f0-30 (* -1.0 f0-30))
                )
            (set! (-> gp-0 3 vector 2 quad) (-> gp-0 0 vector 1 quad))
            (let ((f30-3 (* 8192.0
                            (-> s4-0 info mass)
                            (-> obj power-level)
                            (- (* f0-30 f2-12 (-> s4-0 steering-thruster-max-gain))
                               (vector-dot (-> gp-0 3 vector 2) (-> s5-0 state ang-velocity))
                               )
                            (-> s4-0 steering-thruster-factor)
                            )
                         )
                  )
              (if (logtest? (-> obj flags) (rigid-body-object-flag in-air))
                  (set! f30-3 (* f30-3 (-> s4-0 air-steering-factor)))
                  )
              (let ((s1-3 (the-as object (-> s4-0 steering-thruster-array))))
                (countdown (s0-2 (-> s4-0 steering-thruster-count))
                  (vector-matrix*! (-> gp-0 1 vector 2) (-> (the-as vehicle-control-point s1-3) local-pos) (-> gp-0 0))
                  (vector-rotate*!
                    (-> gp-0 1 trans)
                    (-> (the-as (inline-array vehicle-control-point) s1-3) 0 normal)
                    (-> gp-0 0)
                    )
                  (vector-float*! (the-as vector (-> gp-0 1)) (-> gp-0 1 trans) f30-3)
                  (let ((v1-80 s5-0)
                        (a1-17 (-> gp-0 1 vector 2))
                        (a2-11 (-> gp-0 1))
                        )
                    (rigid-body-method-18 (-> v1-80 state) a1-17 (the-as vector a2-11))
                    )
                  (set! s1-3 (-> (the-as (inline-array vehicle-control-point) s1-3) 1))
                  )
                )
              )
            )
          )
        (seek! (-> obj jump-thrust) 0.0 (* 6.0 arg0))
        (when (logtest? (rigid-body-object-flag ignition) (-> obj flags))
          (vector-matrix*! (-> gp-0 1 vector 2) (-> s4-0 engine-thrust-local-pos) (-> gp-0 0))
          (set! (-> gp-0 3 trans quad) (-> gp-0 0 vector 2 quad))
          (let ((f0-45 (* (-> obj engine-thrust)
                          (-> s4-0 max-engine-thrust)
                          (-> s4-0 info mass)
                          (-> obj power-level)
                          (-> obj force-scale)
                          )
                       )
                )
            (vector-float*! (the-as vector (-> gp-0 1)) (-> gp-0 3 trans) f0-45)
            )
          (when #t
            (let ((v1-94 s5-0)
                  (a1-20 (-> gp-0 1 vector 2))
                  (a2-14 (-> gp-0 1))
                  )
              (rigid-body-method-18 (-> v1-94 state) a1-20 (the-as vector a2-14))
              )
            )
          )
        (let ((f30-4 (-> obj controls brake)))
          (when (< 0.0 f30-4)
            (vector-matrix*! (-> gp-0 1 vector 2) (-> s4-0 brake-local-pos) (-> gp-0 0))
            (let ((v1-98 s5-0)
                  (a1-22 (-> gp-0 1 vector 2))
                  (a2-16 (-> gp-0 1 vector 1))
                  )
              (rigid-body-method-22 (-> v1-98 state) a1-22 a2-16)
              )
            (let* ((v1-101 (-> gp-0 1 vector 1))
                   (f1-38 (sqrtf (+ (* (-> v1-101 x) (-> v1-101 x)) (* (-> v1-101 z) (-> v1-101 z)))))
                   (f0-53 (* -98304.0 (-> s4-0 brake-factor) (-> s4-0 info mass)))
                   (f1-39 (fmax 16384.0 f1-38))
                   (f0-55 (* f0-53 (/ 1.0 f1-39) f30-4))
                   )
              (vector-float*! (the-as vector (-> gp-0 1)) (-> gp-0 1 vector 1) f0-55)
              )
            (let ((v1-109 s5-0)
                  (a1-23 (-> gp-0 1 vector 2))
                  (a2-17 (-> gp-0 1))
                  )
              (rigid-body-method-18 (-> v1-109 state) a1-23 (the-as vector a2-17))
              )
            )
          )
        )
      (let ((s1-4 (new 'stack-no-clear 'inline-array 'vehicle-control-point 24)))
        (quad-copy!
          (the-as pointer s1-4)
          (the-as pointer (-> s4-0 stabilizer-array))
          (* (-> s4-0 stabilizer-count) 2)
          )
        (let ((s0-3 (-> s1-4 3 normal)))
          (let ((f0-57 (* -3640.889 (-> obj controls lean-z))))
            (vector-rotate-around-x! s0-3 s0-3 f0-57)
            )
          (if (logtest? (-> obj flags) (rigid-body-object-flag in-air))
              (set! (-> s0-3 w) (* 10.0 (-> s0-3 w)))
              )
          (if (logtest? (rigid-body-object-flag flight-level-transition) (-> obj flags))
              (set! (-> s0-3 w) 0.0)
              )
          )
        (let ((f30-5 (* -0.0000006103516 (-> obj force-scale) (-> s4-0 info mass) (-> s4-0 drag-force-factor))))
          (if (logtest? (-> obj flags) (rigid-body-object-flag in-air))
              (set! f30-5 (* f30-5 (-> s4-0 air-drag-factor)))
              )
          (let ((s1-5 (-> s1-4 0)))
            (countdown (s0-4 (-> s4-0 stabilizer-count))
              (vector-matrix*! (-> gp-0 1 vector 2) (-> s1-5 local-pos) (-> gp-0 0))
              (vector-rotate*! (-> gp-0 1 trans) (-> s1-5 normal) (-> gp-0 0))
              (let ((v1-128 s5-0)
                    (a1-28 (-> gp-0 1 vector 2))
                    (a2-22 (-> gp-0 1 vector 1))
                    )
                (rigid-body-method-22 (-> v1-128 state) a1-28 a2-22)
                )
              (let ((f0-70
                      (* -0.06125
                         (vector-dot (-> gp-0 1 trans) (-> gp-0 1 vector 1))
                         (-> s1-5 normal w)
                         (-> obj force-scale)
                         (-> s4-0 info mass)
                         (-> s4-0 airfoil-factor)
                         )
                      )
                    )
                (vector-float*! (the-as vector (-> gp-0 1)) (-> gp-0 1 trans) f0-70)
                )
              (when (<= (-> obj force-level) 0)
                (let ((v1-138 s5-0)
                      (a1-29 (-> gp-0 1 vector 2))
                      (a2-23 (-> gp-0 1))
                      )
                  (rigid-body-method-18 (-> v1-138 state) a1-29 (the-as vector a2-23))
                  )
                )
              (vector-float*!
                (the-as vector (-> gp-0 1))
                (-> gp-0 1 vector 1)
                (* f30-5
                   (-> s1-5 normal w)
                   (+ (* 0.15 (vector-length (-> gp-0 1 vector 1))) (fabs (vector-dot (-> gp-0 1 trans) (-> gp-0 1 vector 1))))
                   )
                )
              (when (<= (-> obj force-level) 0)
                (let ((v1-145 s5-0)
                      (a1-35 (-> gp-0 1 vector 2))
                      (a2-25 (-> gp-0 1))
                      )
                  (rigid-body-method-18 (-> v1-145 state) a1-35 (the-as vector a2-25))
                  )
                )
              (&+! s1-5 32)
              )
            )
          )
        )
      (.svf (&-> (-> gp-0 1) quad 0) vf0)
      (set! (-> gp-0 1 vector 0 y) (* -1.0
                                      (-> s4-0 extra gravity)
                                      (if (< 1 (-> obj force-level))
                                          2.0
                                          1.0
                                          )
                                      (-> s4-0 info mass)
                                      )
            )
      (let ((v1-154 s5-0)
            (a1-36 (-> gp-0 1))
            )
        (rigid-body-method-20 (-> v1-154 state) (the-as vector a1-36))
        )
      (when (logtest? (-> obj flags) (rigid-body-object-flag riding))
        (set! (-> gp-0 2 quad 0) (-> s4-0 info cm-offset-joint quad))
        (+! (-> gp-0 2 vector 0 x) (* (-> obj controls steering) (-> s4-0 player-shift-x)))
        (+! (-> gp-0 2 vector 0 z) (* (-> obj controls lean-z) (-> s4-0 player-shift-z)))
        (vector-matrix*! (-> gp-0 1 vector 2) (the-as vector (-> gp-0 2)) (-> gp-0 0))
        (.svf (&-> (-> gp-0 1) quad 0) vf0)
        (set! (-> gp-0 1 vector 0 y) (- (-> s4-0 player-weight)))
        (let ((v1-162 s5-0)
              (a1-38 (-> gp-0 1 vector 2))
              (a2-27 (-> gp-0 1))
              )
          (rigid-body-method-18 (-> v1-162 state) a1-38 (the-as vector a2-27))
          )
        0
        )
      (rigid-body-object-method-50 obj arg0)
      (vehicle-method-99 obj arg0)
      (when (not (logtest? (-> obj flags) (rigid-body-object-flag dead)))
        (set! (-> gp-0 1 trans quad) (-> s5-0 state lin-momentum quad))
        (set! (-> gp-0 1 trans y) 0.0)
        (vector-normalize! (-> gp-0 1 trans) 1.0)
        (let* ((v1-174 (-> s5-0 state lin-velocity))
               (f0-90 (/ (sqrtf (+ (* (-> v1-174 x) (-> v1-174 x)) (* (-> v1-174 z) (-> v1-174 z)))) (-> s4-0 max-xz-speed)))
               (v1-176 (-> gp-0 1))
               (a0-65 (-> gp-0 1 trans))
               (f1-67 -1.0)
               (f2-29 (* (-> s4-0 speed-limiting-drag) (vector-dot (-> s5-0 state force) (-> gp-0 1 trans))))
               (f3-19
                 (* (fabs (-> obj engine-thrust)) (-> s4-0 speed-scrubbing-drag) (vector-length (-> s5-0 state lin-momentum)))
                 )
               (f4-6 (- 1.0 (fabs (vector-dot (-> s5-0 state matrix vector 2) (-> gp-0 1 trans)))))
               )
          (vector-float*! (the-as vector v1-176) a0-65 (* f1-67 (+ f2-29 (* f3-19 (* f4-6 f4-6))) (sqrtf f0-90)))
          )
        (let ((a1-51 (-> gp-0 1)))
          (rigid-body-method-20 (-> s5-0 state) (the-as vector a1-51))
          )
        )
      )
    0
    (none)
    )
  )

(defmethod vehicle-method-125 vehicle ((obj vehicle) (arg0 float))
  (rigid-body-object-method-29 obj arg0)
  (none)
  )

(defmethod vehicle-method-126 vehicle ((obj vehicle) (arg0 float))
  (rigid-body-object-method-29 obj arg0)
  (none)
  )
