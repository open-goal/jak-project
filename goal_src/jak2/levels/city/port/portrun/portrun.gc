;;-*-Lisp-*-
(in-package goal)

;; name: portrun.gc
;; name in dgo: portrun
;; dgos: LPORTRUN

;; DECOMP BEGINS

(defpartgroup group-cargo-explosion
  :id 1057
  :duration (seconds 0.067)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 4595 :flags (bit7) :period (seconds 0.5) :length (seconds 0.1))
    (sp-item 4596 :flags (is-3d bit7) :period (seconds 0.5) :length (seconds 0.05))
    (sp-item 4597 :flags (is-3d bit7) :period (seconds 0.5) :length (seconds 0.05))
    (sp-item 4598 :flags (bit7) :period (seconds 0.5) :length (seconds 0.05))
    (sp-item 784 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 785 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 786 :period (seconds 3) :length (seconds 0.05))
    (sp-item 787 :fade-after (meters 60) :period (seconds 3) :length (seconds 0.035) :offset 10)
    )
  )

(defpart 4595
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 12.0)
    (:x (meters 0) (meters 1))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1.5) (meters 2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g :copy r)
    (:b :copy g)
    (:a 16.0 16.0)
    (:vel-y (meters 0.053333335) (meters 0.01))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters -0.00033333333))
    (:friction 0.85 0.1)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4596
  :init-specs ((:texture (new 'static 'texture-id :index #x2b :page #x52d))
    (:birth-func 'birth-func-texture-group)
    (:num 8.0)
    (:x (meters 0) (meters 1))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 0.1) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 32.0 16.0)
    (:b 48.0 16.0)
    (:a 128.0)
    (:vel-y (meters 0.053333335) (meters 0.04))
    (:rotvel-x (degrees -4.8) (degrees 9.6))
    (:rotvel-y (degrees -4.8) (degrees 9.6))
    (:rotvel-z (degrees -4.8) (degrees 9.6))
    (:fade-a -0.21333334)
    (:accel-y (meters -0.0033333334) (meters 0.0016666667))
    (:friction 0.94 0.04)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x52d02b00 #x52d02a00 #xb09b00))
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 4599)
    (:conerot-x (degrees 40) (degrees 40))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0) (meters 0.1))
    )
  )

(defpart 4597
  :init-specs ((:texture (new 'static 'texture-id :index #x9b :page #xb))
    (:birth-func 'birth-func-texture-group)
    (:num 16.0)
    (:x (meters 0) (meters 1))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 0.1) (meters 0.4))
    (:scale-y (meters 0.1) (meters 0.4))
    (:r 16.0 8.0)
    (:g :copy r)
    (:b 24.0 8.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:rotvel-x (degrees -4.8) (degrees 9.6))
    (:rotvel-y (degrees -4.8) (degrees 9.6))
    (:rotvel-z (degrees -4.8) (degrees 9.6))
    (:accel-y (meters -0.0033333334) (meters 0.0016666667))
    (:friction 0.92 0.04)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:func 'check-cargo-piece-ground)
    (:next-time (seconds 0.4))
    (:next-launcher 4600)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-z (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0) (meters 0.1))
    )
  )

;; WARN: Return type mismatch number vs none.
(defun check-cargo-piece-ground ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (if (and (>= 0.0 (-> arg2 vector 0 y)) (>= 0.0 (-> arg1 vel-sxvel y)))
      (set! (-> arg2 vector 0 y) 0.0)
      (set! (-> arg1 next-time)
            (the-as uint (* (max 1 (the-as int (-> *display* clock (-> arg1 clock-index) sparticle-data x))) 2))
            )
      )
  (none)
  )

(defpart 4600
  :init-specs ((:rot-x (degrees 0))
    (:rot-y (degrees 0) (degrees 3600))
    (:rot-z (degrees 0))
    (:vel-y (meters 0))
    (:rotvel-x (degrees 0))
    (:rotvel-y (degrees 0))
    (:rotvel-z (degrees 0))
    (:accel-y (meters 0))
    (:friction 0.8 0.1)
    (:timer (seconds 4))
    (:next-time (seconds 1) (seconds 0.997))
    (:next-launcher 4601)
    )
  )

(defpart 4601
  :init-specs ((:fade-a -0.21333334) (:flags (sp-cpuinfo-flag-2 left-multiply-quat)))
  )

(defpart 4598
  :init-specs ((:texture (new 'static 'texture-id :index #x2c :page #x52d))
    (:num 8.0)
    (:x (meters 0) (meters 1))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 0.05) (meters 0.05))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:omega (degrees 0.0225) (degrees 0.01125))
    (:vel-y (meters 0.10666667) (meters 0.053333335))
    (:fade-a -0.21333334)
    (:accel-y (meters -0.0033333334) (meters 0.0016666667))
    (:friction 0.94 0.04)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 4599)
    (:conerot-x (degrees 40) (degrees 40))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0) (meters 0.1))
    )
  )

(defpart 4599
  :init-specs ((:r 64.0 32.0)
    (:g 96.0 32.0)
    (:b 128.0)
    (:vel-y (meters 0.0033333334) (meters 0.013333334))
    (:next-time (seconds 0.017) (seconds 0.047))
    (:next-launcher 4602)
    )
  )

(defpart 4602
  :init-specs ((:r 32.0) (:g 32.0 16.0) (:b 48.0 16.0))
  )

(defmethod draw hud-cargo ((this hud-cargo))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 457.0 (* 130.0 (-> this offset))))
    205
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -19 27)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-cargo ((this hud-cargo))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-cargo ((this hud-cargo))
  (set! (-> this level) (level-get *level* 'ctywide))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #x679)))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 scale-y) 1.2)
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.6)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-introduction)
  TASK_MANAGER_CODE_HOOK
  (lambda :behavior task-manager
    ()
    (set-time! (-> self state-time))
    (while (or (not (time-elapsed? (-> self state-time) (seconds 30)))
               (let ((a0-3 (level-get-target-inside *level*)))
                 (when (not (and a0-3 (logtest? (-> a0-3 info level-flags) 1)))
                   (set-time! (-> self state-time))
                   #t
                   )
                 )
               )
      (suspend)
      )
    (talker-spawn-func (-> *talker-speech* 93) *entity-pool* (target-pos 0) (the-as region #f))
    (send-event self 'complete)
    (none)
    )
  )

(deftype city-port-run-mine-info (structure)
  ((handle   handle  :offset-assert   0)
   (pos1-x   float   :offset-assert   8)
   (pos1-y   float   :offset-assert  12)
   (pos1-z   float   :offset-assert  16)
   (type     uint32  :offset-assert  20)
   (pos2-x   float   :offset-assert  24)
   (pos2-y   float   :offset-assert  28)
   (pos2-z   float   :offset-assert  32)
   (speed    float   :offset-assert  36)
   (offset   float   :offset-assert  40)
   (center-x float   :offset          8)
   (center-y float   :offset         12)
   (center-z float   :offset         16)
   (radius   float   :offset         24)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )


(define *city-port-run-mine-info*
  (new 'static 'boxed-array :type city-port-run-mine-info
    (new 'static 'city-port-run-mine-info
      :pos1-x 20480.0
      :pos1-y 8192.0
      :pos1-z 6082560.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 20480.0
      :pos1-y 8192.0
      :pos1-z 6082560.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 914145.25
      :pos1-y 8192.0
      :pos1-z 6415237.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 914145.25
      :pos1-y 8192.0
      :pos1-z 6415237.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      :offset 0.1
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 914145.25
      :pos1-y 8192.0
      :pos1-z 6415237.0
      :type #x1
      :pos2-x 32768.0
      :speed -60.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 914145.25
      :pos1-y 8192.0
      :pos1-z 6415237.0
      :type #x1
      :pos2-x 32768.0
      :speed -60.0
      :offset 0.6
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 290611.2
      :pos1-y 8192.0
      :pos1-z 6656123.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 290611.2
      :pos1-y 8192.0
      :pos1-z 6656123.0
      :type #x1
      :pos2-x 32768.0
      :speed -60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.0666
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.13333
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.2
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.5666
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.6333
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 957644.8
      :pos1-y 8192.0
      :pos1-z 7131013.0
      :type #x1
      :pos2-x 28672.0
      :speed 60.0
      :offset 0.7
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 638976.0
      :pos1-y 8192.0
      :pos1-z 7199539.0
      :pos2-x 565248.0
      :pos2-y 8192.0
      :pos2-z 7199539.0
      :speed 3.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 638976.0
      :pos1-y 8192.0
      :pos1-z 7179059.0
      :pos2-x 565248.0
      :pos2-y 8192.0
      :pos2-z 7179059.0
      :speed 3.0
      :offset 0.25
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 638976.0
      :pos1-y 8192.0
      :pos1-z 7138099.0
      :pos2-x 565248.0
      :pos2-y 8192.0
      :pos2-z 7138099.0
      :speed 3.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 638976.0
      :pos1-y 8192.0
      :pos1-z 7117619.0
      :pos2-x 565248.0
      :pos2-y 8192.0
      :pos2-z 7117619.0
      :speed 3.0
      :offset 0.75
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -675840.0
      :pos1-y 8192.0
      :pos1-z 6148096.0
      :pos2-x -634880.0
      :pos2-y 8192.0
      :pos2-z 6184960.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -659456.0
      :pos1-y 8192.0
      :pos1-z 6193152.0
      :pos2-x -704512.0
      :pos2-y 8192.0
      :pos2-z 6180864.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -496640.0
      :pos1-y 8192.0
      :pos1-z 6527836.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -496640.0
      :pos1-y 8192.0
      :pos1-z 6527836.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info :pos1-x -904806.4 :pos1-y 8192.0 :pos1-z 7407862.0 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -850124.8 :pos1-y 8192.0 :pos1-z 7420231.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -862330.9 :pos1-y 8192.0 :pos1-z 7395492.0 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -858193.94 :pos1-y 8192.0 :pos1-z 7370055.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -874618.9 :pos1-y 8192.0 :pos1-z 7351255.0 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -890634.25 :pos1-y 8192.0 :pos1-z 7317954.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -888340.5 :pos1-y 8192.0 :pos1-z 7338475.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -941260.8 :pos1-y 8192.0 :pos1-z 7326597.0 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -937369.6 :pos1-y 8192.0 :pos1-z 7359037.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -914432.0 :pos1-y 8192.0 :pos1-z 7380254.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -904601.6 :pos1-y 8192.0 :pos1-z 7444848.5 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -841850.9 :pos1-y 8192.0 :pos1-z 7431291.0 :type #x1)
    (new 'static 'city-port-run-mine-info :pos1-x -815595.5 :pos1-y 8192.0 :pos1-z 7410524.0 :type #x1)
    (new 'static 'city-port-run-mine-info
      :pos1-x -252436.48
      :pos1-y 8192.0
      :pos1-z 7127122.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -252436.48
      :pos1-y 8192.0
      :pos1-z 7127122.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      :offset 0.25
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -252436.48
      :pos1-y 8192.0
      :pos1-z 7127122.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x -252436.48
      :pos1-y 8192.0
      :pos1-z 7127122.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      :offset 0.75
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1124556.8
      :pos1-y 8192.0
      :pos1-z 7651123.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1124556.8
      :pos1-y 8192.0
      :pos1-z 7651123.0
      :type #x1
      :pos2-x 36864.0
      :speed 90.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1124556.8
      :pos1-y 8192.0
      :pos1-z 7651123.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      :offset 0.33
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1124556.8
      :pos1-y 8192.0
      :pos1-z 7651123.0
      :type #x1
      :pos2-x 36864.0
      :speed 90.0
      :offset 0.33
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1124556.8
      :pos1-y 8192.0
      :pos1-z 7651123.0
      :type #x1
      :pos2-x 24576.0
      :speed 90.0
      :offset 0.66
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1124556.8
      :pos1-y 8192.0
      :pos1-z 7651123.0
      :type #x1
      :pos2-x 36864.0
      :speed 90.0
      :offset 0.66
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1269760.0
      :pos1-y 8192.0
      :pos1-z 6209536.0
      :pos2-x 1269760.0
      :pos2-y 8192.0
      :pos2-z 6225920.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1269760.0
      :pos1-y 8192.0
      :pos1-z 6221824.0
      :pos2-x 1269760.0
      :pos2-y 8192.0
      :pos2-z 6238208.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1269760.0
      :pos1-y 8192.0
      :pos1-z 6234112.0
      :pos2-x 1269760.0
      :pos2-y 8192.0
      :pos2-z 6250496.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1269760.0
      :pos1-y 8192.0
      :pos1-z 6393856.0
      :pos2-x 1269760.0
      :pos2-y 8192.0
      :pos2-z 6410240.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1269760.0
      :pos1-y 8192.0
      :pos1-z 6406144.0
      :pos2-x 1269760.0
      :pos2-y 8192.0
      :pos2-z 6422528.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1269760.0
      :pos1-y 8192.0
      :pos1-z 6418432.0
      :pos2-x 1269760.0
      :pos2-y 8192.0
      :pos2-z 6434816.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1302528.0
      :pos1-y 8192.0
      :pos1-z 6209536.0
      :pos2-x 1302528.0
      :pos2-y 8192.0
      :pos2-z 6225920.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1302528.0
      :pos1-y 8192.0
      :pos1-z 6221824.0
      :pos2-x 1302528.0
      :pos2-y 8192.0
      :pos2-z 6238208.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1302528.0
      :pos1-y 8192.0
      :pos1-z 6234112.0
      :pos2-x 1302528.0
      :pos2-y 8192.0
      :pos2-z 6250496.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1302528.0
      :pos1-y 8192.0
      :pos1-z 6393856.0
      :pos2-x 1302528.0
      :pos2-y 8192.0
      :pos2-z 6410240.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1302528.0
      :pos1-y 8192.0
      :pos1-z 6406144.0
      :pos2-x 1302528.0
      :pos2-y 8192.0
      :pos2-z 6422528.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1302528.0
      :pos1-y 8192.0
      :pos1-z 6418432.0
      :pos2-x 1302528.0
      :pos2-y 8192.0
      :pos2-z 6434816.0
      :speed 2.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1286144.0
      :pos1-y 8192.0
      :pos1-z 6332416.0
      :type #x1
      :pos2-x 20480.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1207746.5
      :pos1-y 8192.0
      :pos1-z 5807309.0
      :type #x1
      :pos2-x 32768.0
      :speed 60.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1207746.5
      :pos1-y 8192.0
      :pos1-z 5807309.0
      :type #x1
      :pos2-x 32768.0
      :speed 60.0
      :offset 0.25
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1207746.5
      :pos1-y 8192.0
      :pos1-z 5807309.0
      :type #x1
      :pos2-x 32768.0
      :speed 60.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1207746.5
      :pos1-y 8192.0
      :pos1-z 5807309.0
      :type #x1
      :pos2-x 32768.0
      :speed 60.0
      :offset 0.75
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1573314.5
      :pos1-y 8192.0
      :pos1-z 5622292.5
      :type #x1
      :pos2-x 32768.0
      :speed 120.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1573314.5
      :pos1-y 8192.0
      :pos1-z 5622292.5
      :type #x1
      :pos2-x 32768.0
      :speed 120.0
      :offset 0.1
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1573314.5
      :pos1-y 8192.0
      :pos1-z 5622292.5
      :type #x1
      :pos2-x 32768.0
      :speed 120.0
      :offset 0.2
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 32768.0
      :speed 90.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 32768.0
      :speed 90.0
      :offset 0.25
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 32768.0
      :speed 90.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 32768.0
      :speed 90.0
      :offset 0.75
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 45056.0
      :speed 90.0
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 45056.0
      :speed 90.0
      :offset 0.25
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 45056.0
      :speed 90.0
      :offset 0.5
      )
    (new 'static 'city-port-run-mine-info
      :pos1-x 1822064.6
      :pos1-y 8192.0
      :pos1-z 6100050.0
      :type #x1
      :pos2-x 45056.0
      :speed 90.0
      :offset 0.75
      )
    )
  )

(defskelgroup skel-ctyport-mine ctyport-mine ctyport-mine-lod0-jg ctyport-mine-idle-ja
              ((ctyport-mine-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2.5)
              )

(deftype ctyport-mine (process-drawable)
  ((root        collide-shape-moving            :override)
   (info        city-port-run-mine-info         :offset-assert 200)
   (base-height float                           :offset-assert 204)
   (center      vector                  :inline :offset-assert 208)
   (time-skew   uint64                          :offset-assert 224)
   (period      float                           :offset-assert 232)
   (trans-y     float                           :offset-assert 236)
   (speed-y     float                           :offset-assert 240)
   (acc-y       float                           :offset-assert 244)
   (beep        basic                           :offset-assert 248)
   (beep-time   time-frame                      :offset-assert 256)
   (beep-color  vector                  :inline :offset-assert 272)
   )
  :heap-base #xa0
  :method-count-assert 24
  :size-assert         #x120
  :flag-assert         #x1800a00120
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (fall () _type_ :state 22)
    (ctyport-mine-method-23 (_type_) none 23)
    )
  )


;; WARN: Return type mismatch float vs none.
(defmethod ctyport-mine-method-23 ctyport-mine ((this ctyport-mine))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (get-base-height *ocean-map-city*)
    (let ((f0-1 (-> this period))
          (t9-1 sin-rad)
          (f1-0 -3.1415925)
          (f2-0 6.283185)
          (f3-1 (the float (+ (current-time) (the-as time-frame (-> this time-skew)))))
          )
      (t9-1 (+ f1-0 (* f2-0 (/ (- f3-1 (* (the float (the int (/ f3-1 f0-1))) f0-1)) f0-1))))
      )
    (let ((s5-0 (-> this info)))
      (cond
        ((zero? (-> this info type))
         (let* ((f0-8 (+ (* 2.0 (-> s5-0 offset)) (/ (* 0.0033333334 (the float (current-time))) (-> s5-0 speed))))
                (f0-9 (- f0-8 (* (the float (the int (/ f0-8 2.0))) 2.0)))
                )
           (if (< 1.0 f0-9)
               (set! f0-9 (- 2.0 f0-9))
               )
           (let ((f0-13 (* 0.5 (- 1.0 (cos (* 32768.0 f0-9))))))
             (let ((v1-23 (-> this root trans))
                   (a0-5 (new 'stack-no-clear 'vector))
                   )
               (set! (-> a0-5 x) (-> s5-0 pos1-x))
               (set! (-> a0-5 y) (-> s5-0 pos1-y))
               (set! (-> a0-5 z) (-> s5-0 pos1-z))
               (set! (-> a0-5 w) 1.0)
               (vector-float*! v1-23 a0-5 f0-13)
               )
             (let ((s4-0 (-> this root trans)))
               (let ((v1-27 (-> this root trans)))
                 (let ((a0-6 (new 'stack-no-clear 'vector)))
                   (set! (-> a0-6 x) (-> s5-0 pos2-x))
                   (set! (-> a0-6 y) (-> s5-0 pos2-y))
                   (set! (-> a0-6 z) (-> s5-0 pos2-z))
                   (set! (-> a0-6 w) 1.0)
                   (let ((a1-3 (- 1.0 f0-13)))
                     (.mov vf7 a1-3)
                     )
                   (.lvf vf5 (&-> a0-6 quad))
                   )
                 (.lvf vf4 (&-> v1-27 quad))
                 )
               (.add.x.vf vf6 vf0 vf0 :mask #b1000)
               (.mul.x.vf acc vf5 vf7 :mask #b111)
               (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
               (.svf (&-> s4-0 quad) vf6)
               )
             )
           )
         )
        (else
          (let ((s4-1 (-> this root trans)))
            (let ((s3-0 (new 'stack-no-clear 'vector)))
              (set! (-> s3-0 x) (-> s5-0 pos1-x))
              (set! (-> s3-0 y) (-> s5-0 pos1-y))
              (set! (-> s3-0 z) (-> s5-0 pos1-z))
              (set! (-> s3-0 w) 1.0)
              (let ((v1-35
                      (vector-rotate-around-y!
                        (new 'stack-no-clear 'vector)
                        *x-vector*
                        (+ (* 182.04445 (* 360.0 (-> s5-0 offset))) (* 0.60681486 (-> s5-0 speed) (the float (current-time))))
                        )
                      )
                    )
                (let ((a0-8 (-> s5-0 pos2-x)))
                  (.mov vf7 a0-8)
                  )
                (.lvf vf5 (&-> v1-35 quad))
                )
              (.lvf vf4 (&-> s3-0 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> s4-1 quad) vf6)
            )
          )
        )
      )
    (+! (-> this speed-y)
        (* 10.0 (seconds-per-frame) (- (get-height *ocean* (-> this root trans) #t) (-> this trans-y)))
        )
    (set! (-> this speed-y) (- (-> this speed-y) (* (-> this speed-y) (seconds-per-frame))))
    (set! (-> this speed-y) (- (-> this speed-y) (* 4096.0 (seconds-per-frame))))
    (+! (-> this trans-y) (* (-> this speed-y) (seconds-per-frame)))
    (set! (-> this root trans y) (+ 2048.0 (-> this trans-y)))
    (none)
    )
  )

(defstate die (ctyport-mine)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self beep-time) 0)
    0
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 3))
        (suspend)
        )
      )
    (cleanup-for-death self)
    )
  :post (behavior ()
    (cond
      ((and (-> self beep) (not (time-elapsed? (-> self state-time) (seconds 1))))
       (vector-seek! (-> self beep-color) *null-vector* (* 4.0 (seconds-per-frame)))
       (when (< (-> self beep-time) (current-time))
         (sound-play "cargo-beep")
         (set-vector! (-> self beep-color) 1.0 1.0 1.0 1.0)
         (set! (-> self beep-time)
               (+ (current-time) (the int (* 0.2 (the float (- (seconds 1) (- (current-time) (-> self state-time)))))))
               )
         )
       (set! (-> self draw color-emissive quad) (-> self beep-color quad))
       )
      ((not (logtest? (-> self draw status) (draw-control-status no-draw)))
       (send-event (ppointer->process (-> self parent)) 'mine-dead)
       (let ((v1-27 (-> self root root-prim)))
         (set! (-> v1-27 prim-core collide-as) (collide-spec))
         (set! (-> v1-27 prim-core collide-with) (collide-spec))
         )
       0
       (logior! (-> self draw status) (draw-control-status no-draw))
       (sound-play "port-cargo-mine")
       (cond
         ((-> self beep)
          (let ((gp-2 (new 'stack-no-clear 'explosion-init-params)))
            (set! (-> gp-2 spawn-point quad) (-> self root trans quad))
            (quaternion-copy! (-> gp-2 spawn-quat) (-> self root quat))
            (set! (-> gp-2 radius) 32768.0)
            (set! (-> gp-2 group) (-> *part-group-id-table* 161))
            (set! (-> gp-2 collide-with) (collide-spec jak crate hit-by-others-list player-list))
            (set! (-> gp-2 penetrate-using) (penetrate explode))
            (explosion-spawn self explosion gp-2)
            )
          )
         (else
           (process-spawn touch-tracker :init touch-tracker-init (-> self root trans) #x46400000 30 :to self)
           (let ((gp-4 (get-process *default-dead-pool* part-tracker #x4000)))
             (when gp-4
               (let ((t9-12 (method-of-type part-tracker activate)))
                 (t9-12 (the-as part-tracker gp-4) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
                 )
               (let ((t9-13 run-function-in-process)
                     (a0-31 gp-4)
                     (a1-14 part-tracker-init)
                     (a2-14 (-> *part-group-id-table* 161))
                     (a3-5 0)
                     (t0-3 #f)
                     (t1-2 #f)
                     (t2-2 #f)
                     (t3-0 *launch-matrix*)
                     )
                 (set! (-> t3-0 trans quad) (-> self root trans quad))
                 ((the-as (function object object object object object object object object none) t9-13)
                  a0-31
                  a1-14
                  a2-14
                  a3-5
                  t0-3
                  t1-2
                  t2-2
                  t3-0
                  )
                 )
               (-> gp-4 ppointer)
               )
             )
           )
         )
       )
      )
    (ctyport-mine-method-23 self)
    (transform-post)
    )
  )

(defstate fall (ctyport-mine)
  :virtual #t
  :enter (behavior ()
    (set! (-> self acc-y) (* 4096.0 (+ 8.0 (* 8.0 (rand-vu)))))
    )
  :code (behavior ()
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (until #f
      (suspend)
      (when (< (-> self trans-y) -163840.0)
        #t
        (goto cfg-5)
        )
      )
    #f
    (label cfg-5)
    (deactivate self)
    )
  :post (behavior ()
    (set! (-> self speed-y) (- (-> self speed-y) (* (-> self speed-y) (seconds-per-frame))))
    (set! (-> self speed-y) (- (-> self speed-y) (* (-> self acc-y) (seconds-per-frame))))
    (+! (-> self trans-y) (* (-> self speed-y) (seconds-per-frame)))
    (set! (-> self root trans y) (+ 2048.0 (-> self trans-y)))
    (transform-post)
    )
  )

(defstate idle (ctyport-mine)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched 'touch 'attack)
       (cond
         ((logtest? (process-mask projectile vehicle) (-> proc mask))
          (send-event proc 'attack (-> block param 0) (static-attack-info ((id (new-attack-id)) (mode 'mine))))
          (set! (-> self beep) #f)
          )
         (else
           (set! (-> self beep) (the-as basic #t))
           )
         )
       (go-virtual die)
       )
      (('fall)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go-virtual fall)
       )
      )
    )
  :code transform-and-sleep-code
  :post (behavior ()
    (ctyport-mine-method-23 self)
    (transform-post)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior ctyport-mine-init-by-other ctyport-mine ((arg0 city-port-run-mine-info))
  (stack-size-set! (-> self main-thread) 32)
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec crate))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak vehicle-sphere hit-by-others-list player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid deadly))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 8192.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> self root) s5-0)
    )
  (set! (-> self info) arg0)
  (set! (-> arg0 handle) (process->handle self))
  (logior! (-> self mask) (process-mask actor-pause))
  (logior! (-> self mask) (process-mask crate))
  (set-vector! (-> self root trans) (-> arg0 pos1-x) (-> arg0 pos1-y) (-> arg0 pos1-z) 1.0)
  (quaternion-copy! (-> self root quat) *unity-quaternion*)
  (vector-identity! (-> self root scale))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ctyport-mine" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> self base-height) 0.0)
  (set! (-> self time-skew) (the-as uint (the int (* 300.0 (rand-vu-float-range 0.1 1.4)))))
  (set! (-> self period) (* 300.0 (rand-vu-float-range 1.2 1.8)))
  (set! (-> self center quad) (-> self root trans quad))
  (set! (-> self root pause-adjust-distance) 532480.0)
  (set! (-> self trans-y) (-> self root trans y))
  (go-virtual idle)
  (none)
  )

(defun ctyport-mine-spawn ((arg0 task-manager) (arg1 city-port-run-mine-info))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn ctyport-mine arg1 :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    gp-0
    )
  )

(deftype ctyport-spy (process-drawable)
  ((trans-y float  :offset-assert 200)
   )
  :heap-base #x50
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (idle () _type_ :state 20)
    )
  )


(defskelgroup skel-ctyport-spy ctyport-spy ctyport-spy-lod0-jg ctyport-spy-idle-ja
              ((ctyport-spy-lod0-mg (meters 20)) (ctyport-spy-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defstate idle (ctyport-spy)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (seconds 0.3))
      (+! (-> self trans-y) (* (-> self root transv y) (seconds-per-frame)))
      (+! (-> self root transv y) (* -8.0 (seconds-per-frame) (-> self root transv y)))
      (set! (-> self root trans y)
            (+ (-> self trans-y)
               (* 1024.0 (+ (sin (* 182.04445 (* 50.0 (+ 10.0 (* 0.0033333334 (the float (current-time)))))))
                            (cos (* 182.04445 (* -80.0 (- 40.0 (* 0.0033333334 (the float (current-time)))))))
                            )
                  )
               )
            )
      (let ((gp-0 (new 'stack-no-clear 'quaternion)))
        (let ((s5-0 quaternion-zxy!)
              (s4-0 gp-0)
              (s3-0 (new 'stack-no-clear 'vector))
              )
          (set! (-> s3-0 x) (* 182.04445 (* 5.0 (sin (* 182.04445 (* 0.33333334 (the float (current-time))))))))
          (set! (-> s3-0 y)
                (* 182.04445 (* 5.0 (sin (* 182.04445 (* 50.0 (+ 10.0 (* 0.0033333334 (the float (current-time)))))))))
                )
          (set! (-> s3-0 z) 0.0)
          (set! (-> s3-0 w) 1.0)
          (s5-0 s4-0 s3-0)
          )
        (quaternion-slerp! (-> self root quat) (-> self root quat) gp-0 0.1)
        )
      )
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; WARN: Return type mismatch object vs none.
(defbehavior ctyport-spy-init-by-other ctyport-spy ((arg0 vector))
  (stack-size-set! (-> self main-thread) 32)
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
  (logior! (-> self mask) (process-mask crate))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ctyport-spy" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> self trans-y) (-> self root trans y))
  (set-vector! (-> self root transv) 0.0 81920.0 0.0 1.0)
  (go-virtual idle)
  (none)
  )

(defun ctyport-spy-spawn ((arg0 process) (arg1 vector) (arg2 vector) (arg3 float))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn ctyport-spy arg1 :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    gp-0
    )
  )

(deftype ctyport-cargo (process-focusable)
  ((minimap connection-minimap  :offset-assert 204)
   (trans-y float               :offset-assert 208)
   (speed-y float               :offset-assert 212)
   )
  :heap-base #x60
  :method-count-assert 31
  :size-assert         #xd8
  :flag-assert         #x1f006000d8
  (:methods
    (idle () _type_ :state 27)
    (focus-camera () _type_ :state 28)
    (die () _type_ :state 29)
    (ctyport-cargo-method-30 (_type_) none 30)
    )
  )


(define *city-port-position* (new 'static 'vector :x 413696.0 :y 32768.0 :z 6676480.0 :w 1.0))

(defskelgroup skel-ctyport-cargo ctyport-cargo ctyport-cargo-lod0-jg ctyport-cargo-idle-ja
              ((ctyport-cargo-lod0-mg (meters 20)) (ctyport-cargo-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-ctyport-cargo-explode ctyport-cargo ctyport-cargo-explode-lod0-jg ctyport-cargo-explode-idle-ja
              ((ctyport-cargo-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 80)
              )

(define *ctyport-cargo-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      )
    :collide-spec #x1
    )
  )

(defstate idle (ctyport-cargo)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (case message
        (('attack)
         (let ((gp-0 (new 'stack 'joint-exploder-tuning (the-as uint 1))))
           (set! (-> gp-0 fountain-rand-transv-lo quad) (-> (target-pos 0) quad))
           (set! (-> gp-0 fountain-rand-transv-hi x) 40960.0)
           (set! (-> gp-0 fountain-rand-transv-hi y) 122880.0)
           (set! (-> self draw bounds w) 163840.0)
           (let ((v1-9 (-> self root root-prim)))
             (set! (-> v1-9 prim-core collide-as) (collide-spec))
             (set! (-> v1-9 prim-core collide-with) (collide-spec))
             )
           0
           (logior! (-> self draw status) (draw-control-status no-draw))
           (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
             (when s5-1
               (let ((t9-3 (method-of-type part-tracker activate)))
                 (t9-3
                   (the-as part-tracker s5-1)
                   *entity-pool*
                   (symbol->string (-> part-tracker symbol))
                   (the-as pointer #x70004000)
                   )
                 )
               (let ((t9-4 run-function-in-process)
                     (a0-8 s5-1)
                     (a1-4 part-tracker-init)
                     (a2-6 (-> *part-group-id-table* 1057))
                     (a3-2 0)
                     (t0-0 #f)
                     (t1-0 #f)
                     (t2-0 #f)
                     (t3-0 *launch-matrix*)
                     )
                 (set! (-> t3-0 trans quad) (-> self root trans quad))
                 ((the-as (function object object object object object object object object none) t9-4)
                  a0-8
                  a1-4
                  a2-6
                  a3-2
                  t0-0
                  t1-0
                  t2-0
                  t3-0
                  )
                 )
               (-> s5-1 ppointer)
               )
             )
           (process-spawn
             joint-exploder
             (art-group-get-by-name *level* "skel-ctyport-cargo-explode" (the-as (pointer uint32) #f))
             6
             gp-0
             *ctyport-cargo-exploder-params*
             :to self
             )
           )
         (sound-play "cargo-explode")
         (go-virtual die)
         )
        (('spy)
         (let ((t9-12 ctyport-spy-spawn)
               (a0-17 self)
               (a1-10 (new 'stack-no-clear 'vector))
               (v1-33 (-> self root trans))
               (a2-14 *up-vector*)
               (a3-7 4096.0)
               )
           (.mov vf7 a3-7)
           (.lvf vf5 (&-> a2-14 quad))
           (.lvf vf4 (&-> v1-33 quad))
           (.add.x.vf vf6 vf0 vf0 :mask #b1000)
           (.mul.x.vf acc vf5 vf7 :mask #b111)
           (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
           (.svf (&-> a1-10 quad) vf6)
           (t9-12 a0-17 a1-10 a2-14 a3-7)
           )
         )
        (('focus-camera)
         (go-virtual focus-camera)
         )
        )
      )
    )
  :trans (behavior ()
    (+! (-> self speed-y)
        (* 10.0 (seconds-per-frame) (- (get-height *ocean* (-> self root trans) #t) (-> self trans-y)))
        )
    (set! (-> self speed-y) (- (-> self speed-y) (* (-> self speed-y) (seconds-per-frame))))
    (set! (-> self speed-y) (- (-> self speed-y) (* 409.6 (seconds-per-frame))))
    (+! (-> self trans-y) (* (-> self speed-y) (seconds-per-frame)))
    (set! (-> self root trans y) (-> self trans-y))
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek! 0.0) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 0.0))
        )
      )
    #f
    )
  :post transform-post
  )

(defmethod ctyport-cargo-method-30 ctyport-cargo ((this ctyport-cargo))
  (send-event *camera* 'change-target this)
  (let ((gp-0 (new 'stack 'transformq)))
    (vector+! (-> gp-0 trans) (-> this root trans) (new 'static 'vector :y 16384.0 :z 28672.0 :w 1.0))
    (set-vector! (-> gp-0 scale) 1.0 1.0 1.0 1.0)
    (quaternion-zxy! (-> gp-0 quat) (new 'static 'vector :x 1820.4445 :y 32768.0 :w 1.0))
    (send-event *camera* 'teleport-to-transformq gp-0)
    )
  0
  (none)
  )

(defstate focus-camera (ctyport-cargo)
  :virtual #t
  :exit (behavior ()
    (persist-with-delay *setting-control* 'interp-time (seconds 0.05) 'interp-time 'abs 0.0 0)
    (remove-setting! 'interp-time)
    (remove-setting! 'mode-name)
    )
  :trans (behavior ()
    (set! (-> self root trans y)
          (+ (-> self trans-y)
             (* 1024.0 (+ (sin (* 182.04445 (* 150.0 (+ 10.0 (* 0.0033333334 (the float (current-time)))))))
                          (cos (* 182.04445 (* -80.0 (- 40.0 (* 0.0033333334 (the float (current-time)))))))
                          )
                )
             )
          )
    )
  :code (behavior ()
    (set-setting! 'interp-time 'abs 0.0 0)
    (set-setting! 'mode-name 'cam-fixed 0.0 0)
    (suspend)
    (ctyport-cargo-method-30 self)
    (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (until #f
      (suspend)
      )
    #f
    )
  :post ja-post
  )

(defstate die (ctyport-cargo)
  :virtual #t
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 1))
        (suspend)
        )
      )
    (cleanup-for-death self)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior ctyport-cargo-init-by-other ctyport-cargo ((arg0 vector) (arg1 nav-mesh))
  (stack-size-set! (-> self main-thread) 32)
  (let ((s4-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) cshape-reaction-default)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak vehicle-sphere hit-by-others-list player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid rideable))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 4096.0 0.0 6144.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-8)
      )
    (set! (-> s4-0 nav-radius) 40960.0)
    (let ((v1-10 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-10 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-10 prim-core collide-with))
      )
    (set! (-> s4-0 penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            vehicle
            flut-attack
            board
            mech-punch
            dark-punch
            dark-giant
            knocked
            )
          )
    (set! (-> self root) s4-0)
    )
  (add-process-drawable-to-navmesh arg1 self #t)
  (set! (-> self root trans quad) (-> arg0 quad))
  (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
  (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 16) (the-as int #f) (the-as vector #t) 0))
  (logior! (-> self mask) (process-mask crate))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ctyport-cargo" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> self trans-y) (-> self root trans y))
  (go-virtual idle)
  (none)
  )

(defun ctyport-cargo-spawn ((arg0 task-manager) (arg1 vector) (arg2 nav-mesh))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn ctyport-cargo arg1 arg2 :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    gp-0
    )
  )

(deftype city-port-run-cargo-info (structure)
  ((pos vector :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(define *city-port-run-cargo-info*
  (new 'static 'boxed-array :type city-port-run-cargo-info
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 20480.0 :y 8192.0 :z 6082560.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 290611.2 :y 8192.0 :z 6656123.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 957644.8 :y 8192.0 :z 7131013.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 611450.9 :y 8192.0 :z 7158579.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x -496640.0 :y 8192.0 :z 6527836.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1207746.5 :y 8192.0 :z 5807309.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1822064.6 :y 8192.0 :z 6100050.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1286144.0 :y 8192.0 :z 6332416.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1286144.0 :y 8192.0 :z 6415769.5 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1286144.0 :y 8192.0 :z 6229811.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 914145.25 :y 8192.0 :z 6415237.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1124556.8 :y 8192.0 :z 7651123.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x -252436.48 :y 8192.0 :z 7127122.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x -898539.5 :y 8192.0 :z 7363748.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x -674406.4 :y 8192.0 :z 6178652.0 :w 1.0))
    (new 'static 'city-port-run-cargo-info :pos (new 'static 'vector :x 1573314.5 :y 8192.0 :z 5622292.5 :w 1.0))
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager
    ()
    (if (task-node-closed? (game-task-node city-port-run-resolution))
        (go-virtual complete)
        )
    (set! (-> self begin-pos quad) (-> (new 'static 'vector :x -282624.0 :y 45056.0 :z 5464064.0 :w 1.0) quad))
    (let ((gp-0 *traffic-manager*)
          (s5-0 (new 'stack 'traffic-object-spawn-params))
          )
      (set! (-> s5-0 position quad) (-> self begin-pos quad))
      (quaternion-axis-angle! (-> s5-0 rotation) 0.0 1.0 0.0 0.0)
      (set! (-> s5-0 object-type) (traffic-type bikec))
      (set! (-> s5-0 behavior) (the-as uint 0))
      (set! (-> s5-0 id) (the-as uint 0))
      (set! (-> s5-0 proc) #f)
      (send-event gp-0 'spawn-object s5-0)
      )
    (set! (-> self max-count) (-> *city-port-run-cargo-info* length))
    (set! (-> self count) (-> self max-count))
    (set! (-> *game-info* counter) (the float (-> self max-count)))
    (dotimes (v1-17 (-> *city-port-run-mine-info* length))
      (set! (-> *city-port-run-mine-info* v1-17 handle) (the-as handle #f))
      )
    (set! (-> self minimap 0) #f)
    (dotimes (v1-20 (-> self max-count))
      (set! (-> self data-int32 v1-20) 0)
      (set! (-> self slave v1-20) (the-as handle #f))
      )
    (set! (-> self data-int32 20) 0)
    (set! (-> self data-int32 21) 0)
    (set! (-> self data-int32 22) 0)
    0
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_CLEANUP_HOOK
  (lambda :behavior task-manager
    ()
    (send-event *traffic-manager* 'restore-default-settings)
    (dotimes (v1-3 (-> *city-port-run-mine-info* length))
      (set! (-> *city-port-run-mine-info* v1-3 handle) (the-as handle #f))
      )
    (set! (-> self minimap 0) #f)
    (dotimes (v1-6 (-> self max-count))
      (set! (-> self data-int32 v1-6) 0)
      (set! (-> self slave v1-6) (the-as handle #f))
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_UPDATE_HOOK
  (lambda :behavior task-manager
    ()
    (when (task-node-open? (game-task-node city-port-run-resolution))
      (check-time self)
      (cond
        ((= (level-status *level* 'ctyport) 'active)
         (when (zero? (-> self data-int32 21))
           (set! (-> self data-int32 21) 1)
           (dotimes (gp-1 (-> *city-port-run-mine-info* length))
             (let ((a1-1 (-> *city-port-run-mine-info* gp-1)))
               (if (or (zero? (-> a1-1 handle)) (not (handle->process (-> a1-1 handle))))
                   (ctyport-mine-spawn self a1-1)
                   )
               )
             )
           )
         )
        (else
          (dotimes (gp-2 (-> *city-port-run-mine-info* length))
            (let ((s5-0 (-> *city-port-run-mine-info* gp-2)))
              (when (and (nonzero? (-> s5-0 handle)) (handle->process (-> s5-0 handle)))
                (deactivate (-> s5-0 handle process 0))
                (set! (-> s5-0 handle) (the-as handle #f))
                )
              )
            )
          )
        )
      (cond
        ((zero? (-> self data-int32 20))
         (cond
           ((= (level-status *level* 'ctyport) 'active)
            (let ((gp-4 (get-nav-mesh (the-as actor-id #x65e1))))
              (dotimes (s5-1 (-> self max-count))
                (cond
                  ((zero? (-> self data-int32 s5-1))
                   (when (not (-> self slave s5-1))
                     (let ((a0-18 (ctyport-cargo-spawn self (-> *city-port-run-cargo-info* s5-1 pos) gp-4)))
                       (if a0-18
                           (set! (-> self slave s5-1) (process->handle a0-18))
                           )
                       )
                     )
                   )
                  (else
                    (set! (-> self slave s5-1) (the-as handle #f))
                    )
                  )
                )
              )
            (set! (-> self count) 0)
            (dotimes (v1-61 (-> self max-count))
              (if (or (not (-> self slave v1-61)) (handle->process (-> self slave v1-61)))
                  (+! (-> self count) 1)
                  (set! (-> self data-int32 v1-61) 1)
                  )
              )
            (when (-> self minimap 0)
              (logior! (-> self minimap 0 flags) (minimap-flag fade-out))
              (set! (-> self minimap 0) #f)
              )
            )
           (else
             (dotimes (gp-5 (-> self max-count))
               (when (-> self slave gp-5)
                 (deactivate (-> self slave gp-5 process 0))
                 (set! (-> self slave gp-5) (the-as handle #f))
                 )
               )
             (set! (-> self data-int32 21) 0)
             (if (not (-> self minimap 0))
                 (set! (-> self minimap 0) (add-icon! *minimap* self (the-as uint 15) (the-as int #f) *city-port-position* 0))
                 )
             )
           )
         )
        (else
          (set! (-> self count) 0)
          (dotimes (v1-90 (-> self max-count))
            (if (handle->process (-> self slave v1-90))
                (+! (-> self count) 1)
                (set! (-> self data-int32 v1-90) 1)
                )
            )
          )
        )
      (let ((v1-93 0))
        (dotimes (a0-48 (-> *city-port-run-mine-info* length))
          (let ((a1-21 (-> *city-port-run-mine-info* a0-48)))
            (if (and (nonzero? (-> a1-21 handle)) (handle->process (-> a1-21 handle)))
                (+! v1-93 1)
                )
            )
          )
        )
      (cond
        ((and (= (-> self count) (-> self max-count)) (zero? (-> self data-int32 22)))
         (set-time! (-> self state-time))
         )
        ((and (or (and (zero? (-> self data-int32 20)) (= (-> self count) (+ (-> self max-count) -1)))
                  (= (-> self data-int32 22) 1)
                  )
              (task-node-open? (game-task-node city-port-run-resolution))
              )
         (set-setting! 'exclusive-task #f 0.0 (-> self node-info task))
         (set! (-> self data-int32 20) 1)
         (+! (-> self data-int32 22) 1)
         (set! (-> self time-limit) (seconds 135))
         (set-time! (-> self start-time))
         (set! (-> self hud-counter) (ppointer->handle (process-spawn hud-cargo :init hud-init-by-other :to self)))
         )
        )
      (set! (-> *game-info* counter) (the float (-> self count)))
      (when (= (-> self data-int32 20) 1)
        (let ((v1-130 (level-get *level* 'ctyport)))
          (when (or (not v1-130) (!= (-> v1-130 display?) 'display))
            (backup-load-state-and-set-cmds *load-state* '())
            (script-eval '(want-display 'ctyport 'display))
            (restore-load-state-and-cleanup *load-state*)
            (go-virtual fail)
            )
          )
        )
      )
    (when (zero? (-> self count))
      (cond
        ((not (task-node-closed? (game-task-node city-port-run-resolution)))
         (talker-spawn-func (-> *talker-speech* 94) *entity-pool* (target-pos 0) (the-as region #f))
         (task-node-close! (game-task-node city-port-run-resolution))
         (send-event (handle->process (-> self hud-timer)) 'hide-and-die)
         (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
         (set! (-> self fail-on-death?) #f)
         (dotimes (gp-8 (-> *city-port-run-mine-info* length))
           (let ((v1-161 (-> *city-port-run-mine-info* gp-8)))
             (if (handle->process (-> v1-161 handle))
                 (send-event (handle->process (-> v1-161 handle)) 'fall)
                 )
             )
           )
         )
        (else
          (let ((v1-168 0))
            (dotimes (a0-96 (-> *city-port-run-mine-info* length))
              (if (handle->process (-> *city-port-run-mine-info* a0-96 handle))
                  (+! v1-168 1)
                  )
              )
            (if (zero? v1-168)
                (go-virtual complete)
                )
            )
          )
        )
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_EVENT_HOOK
  (lambda :behavior task-manager
    ((arg0 object) (arg1 object) (arg2 symbol))
    (case arg2
      (('mine-dead)
       (format #t "mine-dead~%")
       (+! (-> self data-int32 22) 1)
       )
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_CODE_HOOK
  (lambda :behavior task-manager
    ()
    (send-event *traffic-manager* 'set-target-level 1.0)
    (set-time! (-> self state-time))
    (while (not (time-elapsed? (-> self state-time) (seconds 5)))
      (suspend)
      )
    (send-event *traffic-manager* 'set-alert-level 1)
    (send-event *traffic-manager* 'set-alert-duration (seconds 36000))
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_FAIL_HOOK
  (lambda :behavior task-manager
    ()
    (when (< (- (-> self time-limit) (- (current-time) (-> self start-time))) 0)
      (let ((gp-0 #f))
        (dotimes (s5-0 (-> self max-count))
          (when (zero? (-> self data-int32 s5-0))
            (when (-> self slave s5-0)
              (let* ((s3-0 (handle->process (-> self slave s5-0)))
                     (s4-0 (if (type? s3-0 process-focusable)
                               s3-0
                               )
                           )
                     )
                (when (not gp-0)
                  (set! gp-0 #t)
                  (send-event s4-0 'focus-camera)
                  )
                (send-event s4-0 'spy)
                )
              )
            )
          )
        )
      (let ((gp-1 (current-time)))
        (until (time-elapsed? gp-1 (seconds 2))
          (suspend)
          )
        )
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-port-run-resolution)
  TASK_MANAGER_COMPLETE_HOOK
  (lambda :behavior task-manager
    ()
    (set-time! (-> self state-time))
    (while (not (time-elapsed? (-> self state-time) (seconds 1)))
      (suspend)
      )
    (task-node-close! (game-task-node city-port-run-post-win))
    (none)
    )
  )
