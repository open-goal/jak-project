;;-*-Lisp-*-
(in-package goal)

;; name: errol-chal.gc
;; name in dgo: errol-chal
;; dgos: LERLCHAL, LPRTRACE

;; DECOMP BEGINS

(define *race-bike-a-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 2.0
      :inv-mass 0.5
      :linear-damping 0.995
      :angular-damping 0.995
      :friction-factor 0.516
      :cm-offset-joint (new 'static 'vector :z 2457.6 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 1.5) (meters 2) (meters 5))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*race-bike-a-constants*
    :flags #x311
    :object-type #xd
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 32.0
    :engine-intake-factor 1.0
    :brake-factor 2.0
    :turbo-boost-factor 0.5
    :max-xz-speed (meters 100)
    :ground-probe-distance (meters 5)
    :ground-probe-offset (meters 0.5)
    :cos-ground-effect-angle -0.00000004371139
    :spring-lift-factor 0.35
    :air-drag-factor 1.2
    :steering-fin-angle 1820.4445
    :steering-thruster-factor 6.0
    :steering-thruster-max-gain 2.0
    :steering-thruster-half-gain-speed (meters 80)
    :tire-steering-angle 1274.3112
    :tire-static-friction 0.5
    :tire-static-friction-speed (meters 1)
    :tire-dynamic-friction 0.25
    :tire-dynamic-friction-speed (meters 3)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 8.0
    :drag-force-factor 1.0
    :speed-limiting-drag 0.75
    :pitch-control-factor 0.5
    :roll-control-factor 1.0
    :roll-angle 7281.778
    :jump-thrust-factor 0.625
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 0.125)
    :target-speed-offset (meters 4)
    :turning-accel (meters 20)
    :toughness-factor 2.0
    :damage-factor 4.0
    :camera-string-min-height (meters 2.5)
    :camera-string-max-height (meters 2.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 5.5)
    :camera-min-fov 16384.0
    :camera-max-fov 18204.445
    :camera-head-offset 4096.0
    :camera-foot-offset -4096.0
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 1
    :section-count 2
    :grab-rail-array #f
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info :position (new 'static 'vector :w (the-as float #x10000)))
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x10 #x8 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x20 #x4 #x0)
      :damage-seg-count 2
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-offset -0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound-select 2
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "bike-scrape-stn")
    :glance-sound (static-sound-name "bike-glance-stn")
    :impact-sound (static-sound-name "bike-impact-stn")
    :extra-sound (static-sound-name "car-by-1")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 1
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :z -3276.8 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :y 204.8 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :y 204.8 :z -3276.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      (new 'static 'vector :x -1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :y -819.2 :z 10240.0 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :y 1433.6 :z -10240.0 :w 1.0) (new 'static 'vector))
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7372.8003 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -2457.6 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5324.8 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10649.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.25)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.75)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 0.25)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :color-option-count 1
    :color-option-array (new 'static 'inline-array vector 1 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))
    )
  )

(define *race-bike-b-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 2.0
      :inv-mass 0.5
      :linear-damping 0.995
      :angular-damping 0.995
      :friction-factor 0.516
      :cm-offset-joint (new 'static 'vector :z 2457.6 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 1.5) (meters 2) (meters 5))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*race-bike-b-constants*
    :flags #x311
    :object-type #xd
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 32.0
    :engine-intake-factor 1.0
    :brake-factor 2.0
    :turbo-boost-factor 0.5
    :max-xz-speed (meters 100)
    :ground-probe-distance (meters 5)
    :ground-probe-offset (meters 0.5)
    :cos-ground-effect-angle -0.00000004371139
    :spring-lift-factor 0.35
    :air-drag-factor 1.2
    :steering-fin-angle 1820.4445
    :steering-thruster-factor 6.0
    :steering-thruster-max-gain 2.0
    :steering-thruster-half-gain-speed (meters 80)
    :tire-steering-angle 1274.3112
    :tire-static-friction 0.5
    :tire-static-friction-speed (meters 1)
    :tire-dynamic-friction 0.25
    :tire-dynamic-friction-speed (meters 3)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 8.0
    :drag-force-factor 1.0
    :speed-limiting-drag 0.75
    :pitch-control-factor 0.5
    :roll-control-factor 1.0
    :roll-angle 7281.778
    :jump-thrust-factor 0.625
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 0.125)
    :target-speed-offset (meters 4)
    :turning-accel (meters 20)
    :toughness-factor 2.0
    :damage-factor 4.0
    :camera-string-min-height (meters 2.5)
    :camera-string-max-height (meters 2.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 5.5)
    :camera-min-fov 16384.0
    :camera-max-fov 18204.445
    :camera-head-offset 4096.0
    :camera-foot-offset -4096.0
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 2
    :section-count 2
    :grab-rail-array #f
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 757.76 :z 1175.552 :w (the-as float #x10000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 2048.0 :z -4096.0 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x20 #x8 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x40 #x10 #x4)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-offset -0.25
    :engine-pitch-mod-amp 0.05
    :engine-sound-select 2
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "bike-scrape-stn")
    :glance-sound (static-sound-name "bike-glance-stn")
    :impact-sound (static-sound-name "bike-impact-stn")
    :extra-sound (static-sound-name "car-by-1")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 1
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :z -3276.8 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1024.0 :y 204.8 :z -3276.8 :w 1.0)
      (new 'static 'vector :x -1024.0 :y 204.8 :z -3276.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      (new 'static 'vector :x -1638.4 :y -2048.0 :z 7372.8 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2 (new 'static 'vector :w 1.0) (new 'static 'vector :w 1.0))
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :z 11059.2 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2 (new 'static 'vector :y 1433.6 :z -8192.0 :w 1.0) (new 'static 'vector))
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7372.8003 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -2457.6 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5324.8 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 10649.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.25)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 2457.6 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.75)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -5734.4 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 0.25)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -3276.7998 :w 1.0)
    :color-option-count 1
    :color-option-array (new 'static 'inline-array vector 1 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))
    )
  )

(set! (-> *race-bike-a-constants* explosion) *bike-explosion-info*)

(set! (-> *race-bike-b-constants* explosion) *bike-explosion-info*)

(deftype errol-racer (vehicle-rider)
  ((minimap connection-minimap  :offset-assert 224)
   )
  :heap-base #x70
  :method-count-assert 36
  :size-assert         #xe4
  :flag-assert         #x24007000e4
  )


(defskelgroup skel-errol-racer errol-racer errol-racer-lod0-jg errol-racer-idle-ja
              ((errol-racer-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 2 0 3)
              )

(defmethod initialize-collision errol-racer ((obj errol-racer))
  (set! (-> obj level) (level-get *level* 'lerlchal))
  (stack-size-set! (-> obj main-thread) 256)
  (when (not (-> obj level))
    (format 0 "errol-racer::initialize-collision: ERROR, no lerlchal level~%")
    (go process-drawable-art-error "no lerlchal level")
    )
  (set! (-> obj root-override) (the-as collide-shape (new 'process 'trsqv)))
  0
  (none)
  )

(defmethod vehicle-rider-method-32 errol-racer ((obj errol-racer) (arg0 traffic-object-spawn-params))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-errol-racer" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (logior! (-> obj flags) 1)
  (set! (-> obj draw lod-set lod 0 dist) 286720.0)
  (vehicle-rider-method-33 obj)
  (set! (-> obj minimap) (add-icon! *minimap* obj (the-as uint 38) (the-as int #f) (the-as vector #t) 0))
  (set! (-> obj riding-anim) 4)
  0
  (none)
  )

(defstate got-passed (errol-rider)
  :virtual #t
  :enter (behavior ()
    (format #t "errol-rider::got-passed~%")
    (speech-control-method-12
      *speech-control*
      self
      (speech-type speech-type-1 speech-type-2 speech-type-4 speech-type-5)
      )
    (none)
    )
  )

(defstate taunt (errol-racer)
  :virtual #t
  :event (the-as
    (function process int symbol event-message-block object :behavior errol-racer)
    vehicle-rider-event-handler
    )
  :enter (behavior ()
    (format #t "errol-rider::taunt race-errol-pass~%")
    (speech-control-method-12
      *speech-control*
      self
      (speech-type speech-type-0 speech-type-2 speech-type-4 speech-type-5)
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.05))
    (cond
      ((zero? (rand-vu-int-count 2))
       (ja-no-eval :group! (-> self draw art-group data 5)
                   :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 5)) frames num-frames) -1)))
                   :frame-num 0.0
                   )
       (until (ja-done? 0)
         (suspend)
         (ja :num! (seek!))
         )
       )
      (else
        (ja-no-eval :group! (-> self draw art-group data 6)
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 6)) frames num-frames) -1)))
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    (go-virtual active)
    (none)
    )
  :post (behavior ()
    (let* ((v1-0 (-> self parent-override))
           (gp-0 (if v1-0
                     (-> v1-0 0 self-override)
                     )
                 )
           )
      (when gp-0
        (compute-seat-position gp-0 (-> self root-override trans) 0)
        (quaternion-copy! (-> self root-override quat) (-> gp-0 root-override-2 quat))
        )
      )
    (ja-post)
    (none)
    )
  )

(deftype vehicle-city-racer (vehicle-racer)
  ()
  :heap-base #x380
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  )


(defmethod vehicle-method-117 vehicle-city-racer ((obj vehicle-city-racer) (arg0 vector) (arg1 int) (arg2 int))
  ((method-of-type vehicle vehicle-method-117) obj arg0 arg1 arg2)
  0
  (none)
  )

(defmethod vehicle-method-137 vehicle-city-racer ((obj vehicle-city-racer) (arg0 traffic-object-spawn-params))
  (let ((t9-0 vehicle-rider-spawn)
        (v1-0 (-> arg0 user-data))
        )
    (t9-0
      obj
      (if (= v1-0 2)
          errol-racer
          citizen-norm-rider
          )
      arg0
      )
    )
  0
  (none)
  )

(defmethod vehicle-racer-method-154 vehicle-city-racer ((obj vehicle-city-racer))
  (cond
    ((logtest? (-> obj rbody state flags) (rigid-body-flag enable-physics))
     (let ((f0-0 368640.0))
       (if (or (< (* f0-0 f0-0) (-> obj player-dist2))
               (let ((f0-3 102400.0))
                 (and (< (* f0-3 f0-3) (-> obj player-dist2))
                      (not (logtest? (-> obj draw status) (draw-control-status on-screen)))
                      )
                 )
               )
           (rigid-body-object-method-39 obj)
           )
       )
     )
    (else
      (let ((f0-6 (-> obj player-dist2))
            (f1-2 348160.0)
            )
        (if (and (< f0-6 (* f1-2 f1-2))
                 (let ((f0-7 (-> obj player-dist2))
                       (f1-5 81920.0)
                       )
                   (or (< f0-7 (* f1-5 f1-5)) (logtest? (-> obj draw status) (draw-control-status on-screen)))
                   )
                 )
            (rigid-body-object-method-38 obj)
            )
        )
      )
    )
  0
  (none)
  )

(deftype race-bike-a (vehicle-city-racer)
  ()
  :heap-base #x380
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  )


;; WARN: Return type mismatch vehicle-city-racer vs race-bike-a.
(defmethod relocate race-bike-a ((obj race-bike-a) (arg0 int))
  (the-as race-bike-a ((method-of-type vehicle-city-racer relocate) obj arg0))
  )

(defmethod allocate-and-init-cshape race-bike-a ((obj race-bike-a))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 11264.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 0.0 -819.2 4505.6 3686.4)
      (set! (-> v1-11 nav-radius) 6144.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-13 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 -3686.4 4096.0)
      (set! (-> v1-13 nav-radius) 6144.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 96))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 204.8 3276.8 1228.8 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 -819.2 9011.2 1638.4)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 1228.8 -8601.6 2048.0)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body race-bike-a ((obj race-bike-a))
  (lwide-entity-hack)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bikea" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj rider-hand-joint) 0)
  (alloc-and-init-rigid-body-control obj *race-bike-a-constants*)
  0
  (none)
  )

(deftype race-bike-b (vehicle-city-racer)
  ()
  :heap-base #x380
  :method-count-assert 156
  :size-assert         #x3f8
  :flag-assert         #x9c038003f8
  )


;; WARN: Return type mismatch vehicle-racer vs race-bike-b.
(defmethod relocate race-bike-b ((obj race-bike-b) (arg0 int))
  (the-as race-bike-b ((method-of-type vehicle-racer relocate) obj arg0))
  )

(defmethod allocate-and-init-cshape race-bike-b ((obj race-bike-b))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 11264.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 0.0 -409.6 4505.6 4300.8)
      (set! (-> v1-11 nav-radius) 6144.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-13 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 -3686.4 4096.0)
      (set! (-> v1-13 nav-radius) 6144.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 96))))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 204.8 3276.8 1228.8 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 -819.2 9011.2 1638.4)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 1228.8 -8601.6 2048.0)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> obj root-override-2) s5-0)
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body race-bike-b ((obj race-bike-b))
  (lwide-entity-hack)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-bikeb" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj rider-hand-joint) 0)
  (alloc-and-init-rigid-body-control obj *race-bike-b-constants*)
  0
  (none)
  )

(deftype turbo-ring (process-drawable)
  ((root-override collide-shape              :offset        128)
   (touch-time    time-frame                 :offset-assert 200)
   (minimap       connection-minimap         :offset-assert 208)
   (player-got    symbol                     :offset-assert 212)
   (persistent    symbol                     :offset-assert 216)
   (id            int8                       :offset-assert 220)
   (boost         float                      :offset-assert 224)
   (plane         vector             :inline :offset-assert 240)
   (part-track    handle                     :offset-assert 256)
   (mat           matrix             :inline :offset-assert 272)
   )
  :heap-base #xd0
  :method-count-assert 25
  :size-assert         #x150
  :flag-assert         #x1900d00150
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (turbo-ring-method-22 (_type_) none 22)
    (turbo-ring-method-23 (_type_) none 23)
    (turbo-ring-method-24 (_type_) none 24)
    )
  )


(defstate idle (turbo-ring)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as
      object
      (case event-type
        (('touched)
         (let* ((s4-0 (-> (the-as vehicle proc) root-override-2))
                (gp-0 (if (type? s4-0 collide-shape-moving)
                          s4-0
                          )
                      )
                )
           (when gp-0
             (let ((s4-1 (new 'stack-no-clear 'vehicle-control-point)))
               (set! (-> s4-1 local-pos quad) (-> gp-0 trans quad))
               (set! (-> s4-1 normal quad) (-> gp-0 trans-old-old quad))
               (set! (-> s4-1 local-pos w) 1.0)
               (set! (-> s4-1 normal w) 1.0)
               (let ((f30-0 (vector4-dot (-> self plane) (-> s4-1 local-pos)))
                     (f28-0 (vector4-dot (-> self plane) (-> s4-1 normal)))
                     (f0-5 (fmax
                             (vector-vector-distance-squared (-> self root-override trans) (-> s4-1 local-pos))
                             (vector-vector-distance-squared (-> self root-override trans) (-> s4-1 normal))
                             )
                           )
                     (f1-0 40960.0)
                     )
                 (when (< f0-5 (* f1-0 f1-0))
                   (when (or (and (< f30-0 0.0) (>= f28-0 0.0)) (and (< f28-0 0.0) (>= f30-0 0.0)))
                     (send-event proc 'turbo-ring (-> self boost))
                     (set! (-> self touch-time) (current-time))
                     (process-spawn
                       part-tracker
                       :init part-tracker-init
                       (-> *part-group-id-table* 1059)
                       0
                       #f
                       #f
                       #f
                       (-> self mat)
                       :to *entity-pool*
                       )
                     (when (logtest? (-> gp-0 root-prim prim-core collide-as) (collide-spec jak))
                       (set! (-> self player-got) #t)
                       (send-event (ppointer->process (-> self parent)) 'turbo-ring-pickup (-> self id))
                       (if (not (-> self persistent))
                           (the-as symbol (kill-callback (-> *minimap* engine) (-> self minimap)))
                           )
                       )
                     )
                   )
                 )
               )
             )
           )
         )
        )
      )
    )
  :code (the-as (function none :behavior turbo-ring) sleep-code)
  :post (behavior ()
    (if (and (-> self player-got)
             (>= (- (current-time) (-> self touch-time)) (seconds 3))
             (or (not *target*)
                 (or (< 204800.0 (vector-vector-distance (-> self root-override trans) (-> *target* control trans)))
                     (focus-test? *target* teleporting)
                     )
                 )
             (not (-> self persistent))
             )
        (go-virtual die)
        )
    (spawn-with-matrix (-> self part) (-> self mat))
    0
    (none)
    )
  )

(defstate die (turbo-ring)
  :virtual #t
  :code (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-3 (-> self root-override root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (until (>= (- (current-time) (-> self state-time)) (seconds 2))
      (suspend)
      )
    (none)
    )
  )

(defmethod turbo-ring-method-22 turbo-ring ((obj turbo-ring))
  (let ((s5-0 (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 penetrate-using) (the-as penetrate -1))
    (set! (-> s5-0 penetrated-by) (the-as penetrate -1))
    (let ((v1-4 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-4 prim-core collide-as) (collide-spec obstacle))
      (set-vector! (-> v1-4 local-sphere) 0.0 0.0 0.0 22528.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-4)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-7 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-7 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-7 prim-core collide-with))
      )
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root-override) s5-0)
    )
  0
  (none)
  )

(defmethod turbo-ring-method-23 turbo-ring ((obj turbo-ring))
  (let ((s5-0 (-> obj mat)))
    (let ((s4-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-rotate-local-y! s4-0 (-> obj root-override quat) 16384.0)
      (quaternion->matrix s5-0 s4-0)
      )
    (set! (-> s5-0 trans quad) (-> obj root-override trans quad))
    (set! (-> obj plane quad) (-> s5-0 vector 0 quad))
    )
  (set! (-> obj plane w) (- (vector-dot (-> obj plane) (-> obj root-override trans))))
  (update-transforms (-> obj root-override))
  (set! (-> obj player-got) #f)
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 1058) obj))
  (if (not (-> obj persistent))
      (set! (-> obj minimap) (add-icon! *minimap* obj (the-as uint 15) (the-as int #f) (the-as vector #t) 0))
      )
  (set! (-> obj touch-time) (current-time))
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defbehavior turbo-ring-init-by-other turbo-ring ((arg0 city-race-ring-info) (arg1 int) (arg2 symbol))
  (turbo-ring-method-22 self)
  (set! (-> self root-override trans quad) (-> arg0 pos quad))
  (set! (-> self root-override trans y) (+ 10240.0 (-> self root-override trans y)))
  (quaternion-axis-angle! (-> self root-override quat) 0.0 1.0 0.0 (-> arg0 pos w))
  (set! (-> self boost) (-> arg0 boost))
  (set! (-> self id) arg1)
  (set! (-> self persistent) arg2)
  (turbo-ring-method-23 self)
  (go-virtual idle)
  (none)
  )

;; WARN: Return type mismatch process vs turbo-ring.
(defun turbo-ring-spawn ((arg0 task-manager) (arg1 city-race-ring-info) (arg2 int) (arg3 symbol))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn turbo-ring arg1 arg2 arg3 :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as turbo-ring gp-0)
    )
  )

(define *city-errol-challenge-rings*
  (new 'static 'boxed-array :type city-race-ring-info
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -501267.66 :y 45521.715 :z 5746707.5 :w -10478.551)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1228800.0 :y 42188.8 :z 5879808.0 :w -23301.69)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1477360.9 :y 29575.986 :z 5499939.0 :w -31020.3)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1564742.9 :y 39918.387 :z 4562023.5 :w -30155.426)
      :boost 1.0
      :dist 1228800.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1316062.0 :y 43584.72 :z 3987215.2 :w 17430.592)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -977305.6 :y 43778.457 :z 4550656.0 :w 9357.085)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -286720.0 :y 43008.0 :z 4481024.0 :w 28599.184)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -627501.44 :y 43474.125 :z 3367819.8 :w -22064.916)
      :boost 1.0
      :dist 1433600.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1121484.8 :y 42598.4 :z 3148595.2 :w -25395.2)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1216512.0 :y 42598.4 :z 2364620.8 :w 24903.68)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -502169.6 :y 42598.4 :z 2482176.0 :w 7281.778)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 43008.0 :y 75776.0 :z 2939699.2 :w 3895.751)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 121241.6 :y 75776.0 :z 3137536.0 :w 11141.12)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 668467.2 :y 42926.08 :z 3215769.5 :w 5734.4)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 593276.5 :y 42948.61 :z 3583451.2 :w -11135.367)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 394001.62 :y 42757.734 :z 4304348.0 :w 2242.6238)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1143199.4 :y 43119.0 :z 4350973.0 :w 29214.02)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1132719.2 :y 43012.098 :z 3730843.8 :w -23207.373)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 889651.2 :y 43130.47 :z 3519283.2 :w -28053.05)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1098956.8 :y 79407.92 :z 3152171.8 :w 15883.359)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1462272.0 :y 75776.0 :z 3139584.0 :w 26396.445)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1469836.5 :y 75548.266 :z 2407241.8 :w 32354.158)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1473249.2 :y 75912.4 :z 1783800.2 :w -23723.45)
      :boost 1.0
      :dist 1433600.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 924123.56 :y 76269.57 :z 1767255.2 :w -24209.729)
      :boost 0.5
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 923115.5 :y 60855.5 :z 1340197.2 :w 25778.986)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1125048.4 :y 11059.2 :z 890880.0 :w -30947.555)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1073152.0 :y 11059.2 :z 443596.8 :w -27306.666)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 400853.8 :y 44764.363 :z 358071.1 :w -16960.117)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 13721.6 :y 43203.79 :z 118620.16 :w -20024.889)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -490209.28 :y 43203.79 :z 103424.0 :w -16384.0)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -953139.2 :y 43366.81 :z 48291.84 :w -26099.95)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -752844.8 :y 43361.074 :z -201523.2 :w 23619.176)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -762741.1 :y 43008.0 :z -404684.8 :w -19180.986)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -1064960.0 :y 43008.0 :z -496435.2 :w -27045.65)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -882273.06 :y 55597.465 :z -725249.6 :w 20593.486)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -169574.4 :y 10721.689 :z -826982.4 :w 25912.205)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -253296.64 :y 10721.689 :z -1131315.2 :w -29655.04)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x -306380.8 :y 10564.403 :z -1419673.6 :w 21044.338)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 154887.38 :y 10681.14 :z -1433848.2 :w 9148.079)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 341606.4 :y 10649.6 :z -1017446.4 :w 16384.0)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 840908.8 :y 10240.0 :z -1014169.6 :w 16384.0)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1126400.0 :y 10240.0 :z -1013760.0 :w 16384.0)
      :boost 1.0
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1460224.0 :y 44236.8 :z -1370521.6 :w -30419.627)
      :dist 819200.0
      )
    (new 'static 'city-race-ring-info
      :pos (new 'static 'vector :x 1461862.4 :y 43499.52 :z -1816985.6 :w -25991.395)
      :boost 1.0
      :dist 819200.0
      )
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager
    ()
    (set-setting! 'minimap 'clear 0.0 (minimap-flag task-graph))
    (set-setting! 'exclusive-task #f 0.0 (-> self node-info task))
    (let ((gp-0 *traffic-manager*))
      (send-event gp-0 'set-target-level #x3e800000)
      (send-event gp-0 'set-guard-target-count-range 0 0 0)
      (send-event gp-0 'set-guard-target-count-range 1 0 0)
      (send-event gp-0 'set-guard-target-count-range 2 0 0)
      (send-event gp-0 'set-guard-target-count-range 3 0 0)
      (send-event gp-0 'set-guard-target-count-range 4 0 1)
      (send-event gp-0 'set-guard-target-count-range 5 0 0)
      )
    (until (= (level-status *level* 'ctyport) 'active)
      (suspend)
      )
    (let ((v1-43 (entity-by-name "parking-spot-20")))
      (if v1-43
          (logior! (-> v1-43 extra perm status) (entity-perm-status bit-9))
          )
      )
    (set! (-> self start-time) 0)
    (set! (-> self sub-state) (the-as uint 0))
    (set! (-> self count) 0)
    (set! (-> self max-count) -1)
    (race-start (-> self info index) (the-as symbol self) #f)
    (set! (-> self begin-pos quad)
          (-> (new 'static 'vector :x -326041.6 :y 36454.4 :z 5391565.0 :w 266240.0) quad)
          )
    (set-setting! 'attack #f 0.0 0)
    (set-setting! 'board #f 0.0 0)
    (set-setting! 'gun #f 0.0 0)
    (set-setting! 'vehicle-hijacking #f 0.0 0)
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_CLEANUP_HOOK
  (lambda :behavior task-manager () (send-event *traffic-manager* 'restore-default-settings) (none))
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_EVENT_HOOK
  (lambda :behavior task-manager
    ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (case arg2
      (('turbo-ring-pickup)
       (let ((gp-0 (-> arg3 param 0)))
         (format #t "player collected ring ~d~%" gp-0)
         (cond
           ((= gp-0 (-> self sub-state))
            (let ((v0-0 (the-as object (+ (-> self sub-state) 1))))
              (set! (-> self sub-state) (the-as uint v0-0))
              v0-0
              )
            )
           ((< (the-as int gp-0) (the-as int (-> self sub-state)))
            (format #t "player re-collecting an earlier ring (~d)~%" gp-0)
            )
           (else
             (format #t "missed a ring (ring-id ~d, sub-state ~d)~%" gp-0 (-> self sub-state))
             (go-virtual fail)
             )
           )
         )
       )
      )
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_UPDATE_HOOK
  (lambda :behavior task-manager
    ()
    (let ((gp-0 (new 'stack-no-clear 'inline-array 'vector 1))
          (s5-0 *city-errol-challenge-rings*)
          )
      (if (= (-> self max-count) -1)
          (set! (-> self max-count) (-> s5-0 length))
          )
      (set! (-> gp-0 0 quad) (-> (target-pos 0) quad))
      (let* ((s4-1 (new 'static 'vector :x 1305804.8 :y 102400.0 :z 3180544.0 :w 163840.0))
             (f0-0 (vector-vector-distance-squared s4-1 (-> gp-0 0)))
             (f1-0 (-> s4-1 w))
             )
        (when (< f0-0 (* f1-0 f1-0))
          (if (< (-> self count) 18)
              (go-virtual fail)
              )
          )
        )
      (while (< (-> self count) (-> self max-count))
        (let ((s4-2 (-> s5-0 (-> self count))))
          (let ((f0-1 (-> s4-2 dist)))
            (b! (< (* f0-1 f0-1) (vector-vector-distance-squared (-> gp-0 0) (-> s4-2 pos))) cfg-11)
            )
          (if (turbo-ring-spawn self s4-2 (-> self count) #f)
              (+! (-> self count) 1)
              )
          )
        )
      )
    (label cfg-11)
    0
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_CODE_HOOK
  (lambda :behavior task-manager
    ()
    (set! (-> self state-time) (current-time))
    (while (not (logtest? (-> *race-state* flags) 1))
      (let ((f0-0 (-> self begin-pos w)))
        (if (< (* f0-0 f0-0) (vector-vector-distance-squared (-> self begin-pos) (target-pos 0)))
            (go-virtual fail)
            )
        )
      (suspend)
      )
    (set-setting! 'exclusive-load 'lerlchal 0.0 0)
    (set-setting! 'airlock #f 0.0 0)
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_FAIL_HOOK
  (lambda :behavior task-manager () (none))
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-errol-challenge-race)
  TASK_MANAGER_COMPLETE_HOOK
  (lambda :behavior task-manager () (send-event *traffic-manager* 'decrease-alert-level 0) (none))
  )

(copy-hooks!
  (-> *game-info* sub-task-list (game-task-node city-burning-bush-race-errol-resolution))
  (-> *game-info* sub-task-list (game-task-node city-errol-challenge-race))
  )

(define *city-bush-port-rings* (new 'static 'boxed-array :type city-race-ring-info
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 2232320.0 :y 44646.4 :z 6668697.5 :w -12524.658)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 1606451.2 :y 44646.4 :z 6968525.0 :w -13871.786)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 1113702.4 :y 45875.2 :z 7122944.0 :w -13926.4)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 764313.6 :y 80691.2 :z 7154073.5 :w -16511.43)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 292454.4 :y 41779.2 :z 7047987.0 :w -20807.68)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x -140083.2 :y 45056.0 :z 6921421.0 :w -22646.33)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x -908492.8 :y 44646.4 :z 6564659.0 :w -27270.258)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x -838041.6 :y 40550.4 :z 6183731.0 :w 26578.488)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x -681984.0 :y 65126.4 :z 5944934.5 :w 26396.445)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x -327270.4 :y 45465.6 :z 5598003.0 :w 22974.008)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 185139.2 :y 44236.8 :z 5402214.5 :w 11487.004)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 785203.2 :y 43417.6 :z 5620531.0 :w 16019.911)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 1370112.0 :y 42188.8 :z 5401805.0 :w 19478.756)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 1925939.2 :y 46694.4 :z 5620941.0 :w 10012.444)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 (new 'static 'city-race-ring-info
                                   :pos (new 'static 'vector :x 2256896.0 :y 65126.4 :z 5926502.5 :w 7645.8667)
                                   :boost 1.0
                                   :dist 819200.0
                                   )
                                 )
        )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager
    ()
    (set-setting! 'minimap 'clear 0.0 (minimap-flag task-graph))
    (set-setting! 'exclusive-task #f 0.0 (-> self node-info task))
    (set-setting! 'exclusive-load 'lprtrace 0.0 0)
    (set-setting! 'airlock #f 0.0 0)
    (let ((gp-0 *traffic-manager*))
      (send-event gp-0 'set-target-level #x3e800000)
      (send-event gp-0 'set-guard-target-count-range 0 0 0)
      (send-event gp-0 'set-guard-target-count-range 1 0 0)
      (send-event gp-0 'set-guard-target-count-range 2 0 0)
      (send-event gp-0 'set-guard-target-count-range 3 0 0)
      (send-event gp-0 'set-guard-target-count-range 4 0 1)
      (send-event gp-0 'set-guard-target-count-range 5 0 0)
      )
    (until (= (level-status *level* 'ctyport) 'active)
      (suspend)
      )
    (let ((v1-47 (entity-by-name "parking-spot-22")))
      (if v1-47
          (logior! (-> v1-47 extra perm status) (entity-perm-status bit-9))
          )
      )
    (let ((v1-49 (entity-by-name "parking-spot-23")))
      (if v1-49
          (logior! (-> v1-49 extra perm status) (entity-perm-status bit-9))
          )
      )
    (set! (-> self start-time) 0)
    (set! (-> self sub-state) (the-as uint 0))
    (set! (-> self count) 0)
    (let ((gp-2 *city-bush-port-rings*))
      (set! (-> self max-count) (-> gp-2 length))
      (dotimes (s5-0 (-> self max-count))
        (let ((a1-12 (-> gp-2 s5-0)))
          (if (turbo-ring-spawn self a1-12 s5-0 #t)
              (+! (-> self count) 1)
              )
          )
        )
      )
    (race-start (-> self info index) (the-as symbol self) #f)
    (set! (-> self begin-pos quad)
          (-> (new 'static 'vector :x 2519040.0 :y 40960.0 :z 6545408.0 :w 184320.0) quad)
          )
    (set-setting! 'attack #f 0.0 0)
    (set-setting! 'board #f 0.0 0)
    (set-setting! 'gun #f 0.0 0)
    (set-setting! 'vehicle-hijacking #f 0.0 0)
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_CLEANUP_HOOK
  (lambda :behavior task-manager () (send-event *traffic-manager* 'restore-default-settings) (none))
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_EVENT_HOOK
  (lambda :behavior task-manager
    ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (the-as object (case arg2
                     (('race-win 'race-lose)
                      (let ((v0-0 1))
                        (set! (-> self sub-state) (the-as uint v0-0))
                        v0-0
                        )
                      )
                     )
            )
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_CODE_HOOK
  (lambda :behavior task-manager
    ()
    (set! (-> self state-time) (current-time))
    (while (not (logtest? (-> *race-state* flags) 1))
      (let ((f0-0 (-> self begin-pos w)))
        (if (< (* f0-0 f0-0) (vector-vector-distance-squared (-> self begin-pos) (target-pos 0)))
            (go-virtual fail)
            )
        )
      (suspend)
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_UPDATE_HOOK
  (lambda :behavior task-manager
    ()
    (when (zero? (-> self sub-state))
      (let ((v1-2 (-> *target* pilot)))
        (when (nonzero? v1-2)
          (let ((v1-4 (handle->process (-> v1-2 vehicle))))
            (when v1-4
              (if (< (-> (the-as process-drawable v1-4) root trans y) 16384.0)
                  (go-virtual fail)
                  )
              )
            )
          )
        )
      )
    (none)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_FAIL_HOOK
  (lambda :behavior task-manager () (none))
  )

(set-subtask-hook!
  *game-info*
  (game-task-node city-burning-bush-race-port-resolution)
  TASK_MANAGER_COMPLETE_HOOK
  (lambda :behavior task-manager () (send-event *traffic-manager* 'decrease-alert-level 0) (none))
  )
