;;-*-Lisp-*-
(in-package goal)

;; name: kor-states.gc
;; name in dgo: kor-states
;; dgos: CTYKORA

;; DECOMP BEGINS

(defstate waiting-idle (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (b!
      (not (and (-> self focus-info fproc) (>= (fabs (-> self focus-info ry-diff)) 9102.223)))
      cfg-6
      :delay (empty-form)
      )
    (kor-method-233 self)
    (b! #t cfg-15 :delay (nop!))
    (label cfg-6)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (if (if (type? gp-0 process-focusable)
              gp-0
              )
          (go-virtual arrested)
          )
      )
    (label cfg-15)
    (when (not (focus-test? self grabbed))
      (if (not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
          (go-virtual traveling)
          )
      )
    (none)
    )
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (cond
        ((and v1-2 (= v1-2 (-> self draw art-group data 3)))
         (ja-no-eval :num! (seek!))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.2))
          )
        )
      )
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 3)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kor) nav-enemy-simple-post)
  )

(defstate waiting-turn (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (when (not (focus-test? self grabbed))
      (if (and (not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
               (let ((gp-0 (handle->process (-> self arrestor-handle))))
                 (not (if (type? gp-0 process-focusable)
                          gp-0
                          )
                      )
                 )
               )
          (go-virtual traveling)
          )
      )
    (none)
    )
  :code (behavior ()
    (local-vars (s4-1 art-element) (f0-9 float))
    (let ((gp-0 (new 'stack-no-clear 'bot-turn-info)))
      (let ((s5-0 (-> self focus-info fproc)))
        (if (not s5-0)
            (kor-method-232 self)
            )
        (turn-to-target self gp-0 s5-0 1.867)
        )
      (let ((s4-0 (>= (-> gp-0 predicted-ry-diff) 0.0)))
        (let ((s5-1 (-> self draw art-group data (if s4-0
                                                     7
                                                     11
                                                     )
                        )
                    )
              )
          (ja-channel-push! 1 (seconds 0.2))
          (ja-no-eval :group! s5-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s5-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        (let ((a2-3 (-> self focus-info fproc)))
          (if a2-3
              (turn-to-target self gp-0 a2-3 1.6)
              )
          )
        (let ((s5-2 (new 'stack-no-clear 'quaternion))
              (f0-8 (-> gp-0 predicted-ry-diff))
              (f30-0 4.0)
              (f28-0 5.0)
              )
          (set! f28-0 (cond
                        (s4-0
                          (if (< f0-8 0.0)
                              (set! f0-8 (+ 65536.0 f0-8))
                              )
                          (cond
                            ((< f0-8 18204.445)
                             (set! f0-9 9102.223)
                             (set! s4-1 (-> self draw art-group data 8))
                             (set! f30-0 5.0)
                             14.0
                             )
                            ((< f0-8 27306.666)
                             (set! f0-9 18204.445)
                             (set! s4-1 (-> self draw art-group data 9))
                             (set! f30-0 5.0)
                             23.0
                             )
                            (else
                              (set! f0-9 27306.666)
                              (set! s4-1 (-> self draw art-group data 10))
                              (set! f30-0 5.0)
                              23.0
                              )
                            )
                          )
                        (else
                          (if (>= f0-8 0.0)
                              (set! f0-8 (+ -65536.0 f0-8))
                              )
                          (cond
                            ((< -18204.445 f0-8)
                             (set! f0-9 -9102.223)
                             (set! s4-1 (-> self draw art-group data 12))
                             )
                            ((< -27306.666 f0-8)
                             (set! f0-9 -18204.445)
                             (set! s4-1 (-> self draw art-group data 13))
                             (set! f30-0 5.0)
                             (set! f28-0 23.0)
                             )
                            (else
                              (set! f0-9 -27306.666)
                              (set! s4-1 (-> self draw art-group data 14))
                              (set! f30-0 5.0)
                              (set! f28-0 23.0)
                              )
                            )
                          f28-0
                          )
                        )
                )
          (quaternion-rotate-y! s5-2 (-> gp-0 src-quat) f0-9)
          (ja-no-eval :group! s4-1
                      :num! (seek! (the float (+ (-> (the-as art-joint-anim s4-1) frames num-frames) -1)))
                      :frame-num 0.0
                      )
          (until (ja-done? 0)
            (let ((f0-14 (ja-aframe-num 0)))
              (cond
                ((< f0-14 f28-0)
                 (if (>= f0-14 f30-0)
                     (quaternion-slerp! (-> self root-override2 quat) (-> gp-0 src-quat) s5-2 (/ (- f0-14 f30-0) (- f28-0 f30-0)))
                     )
                 )
                (else
                  (quaternion-copy! (-> self root-override2 quat) s5-2)
                  )
                )
              )
            (suspend)
            (ja :num! (seek!))
            )
          )
        )
      )
    (kor-method-232 self)
    (none)
    )
  :post (the-as (function none :behavior kor) nav-enemy-simple-post)
  )

(defstate waiting-with-kid (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (-> (method-of-type kor waiting-idle) enter)
  :exit (-> (method-of-type kor waiting-idle) exit)
  :trans (behavior ()
    (bot-method-223 self #f)
    (when (not (focus-test? self grabbed))
      (if (not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
          (go-virtual traveling)
          )
      )
    (none)
    )
  :code (-> (method-of-type kor waiting-idle) code)
  :post (-> (method-of-type kor waiting-idle) post)
  )

(defstate scared-idle (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (b!
      (not (and (-> self focus-info fproc) (>= (fabs (-> self focus-info ry-diff)) 9102.223)))
      cfg-6
      :delay (empty-form)
      )
    (kor-method-233 self)
    (b! #t cfg-15 :delay (nop!))
    (label cfg-6)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (if (if (type? gp-0 process-focusable)
              gp-0
              )
          (go-virtual arrested)
          )
      )
    (label cfg-15)
    (when (not (focus-test? self grabbed))
      (if (not (outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #f))
          (go-virtual traveling)
          )
      )
    (none)
    )
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (cond
        ((and v1-2 (= v1-2 (-> self draw art-group data 4)))
         (ja-no-eval :num! (seek!))
         (while (not (ja-done? 0))
           (suspend)
           (ja-eval)
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.2))
          )
        )
      )
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 4)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 4)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kor) nav-enemy-simple-post)
  )

(defstate traveling (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-2 enemy-flags)))
          (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-2 enemy-flags))))
          )
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-2 enemy-flags))))
      (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info-override callback-info))
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (stop-looking-at-target! self)
    (nav-enemy-method-166 self)
    (set! (-> self player-blocking) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (cond
        ((if (type? gp-0 process-focusable)
             gp-0
             )
         (go-virtual arrested)
         )
        ((outside-spot-radius? self (the-as bot-spot #f) (the-as vector #f) #t)
         (kor-method-232 self)
         )
        ((and (>= (- (current-time) (-> self state-time)) (seconds 0.5)) (bot-method-208 self))
         (go-virtual traveling-blocked)
         )
        ((and (nav-enemy-method-163 self) (>= (- (current-time) (-> self state-time)) (-> self reaction-time)))
         (go-stare2 self)
         )
        )
      )
    0
    (none)
    )
  :code (behavior ()
    (until #f
      (kor-method-234 self)
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (let ((a0-0 (-> self nav state))
          (v1-1 (-> self spot))
          )
      (logclear! (-> a0-0 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-0 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-0 target-post quad) (-> v1-1 center quad))
      )
    0
    (nav-enemy-travel-post)
    (none)
    )
  )

(defstate traveling-blocked (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (look-at-target! self (enemy-flag lock-focus))
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (cond
        ((if (type? gp-0 process-focusable)
             gp-0
             )
         (go-virtual arrested)
         )
        ((and (>= (- (current-time) (-> self state-time)) (seconds 1)) (not (bot-method-208 self)))
         (go-virtual traveling)
         )
        )
      )
    (none)
    )
  :code (-> (method-of-type kor waiting-idle) code)
  :post (the-as (function none :behavior kor) nav-enemy-simple-post)
  )

(defstate stare (kor)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot stare) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logclear (-> v1-4 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :trans (behavior ()
    (bot-method-223 self #f)
    (let ((gp-0 (handle->process (-> self arrestor-handle))))
      (if (if (type? gp-0 process-focusable)
              gp-0
              )
          (go-virtual arrested)
          )
      )
    (when (>= (- (current-time) (-> self state-time)) (seconds 0.1))
      (if (not (nav-enemy-method-163 self))
          (go-virtual traveling)
          )
      )
    (none)
    )
  :code (-> (method-of-type kor waiting-idle) code)
  )

(defstate hit (kor)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot hit) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  :code (behavior ()
    (local-vars (v1-31 enemy-flag) (v1-39 enemy-flag))
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 3)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-30 (-> self enemy-flags)))
      (if (logtest? v1-30 (enemy-flag checking-water))
          (set! v1-31 (logior v1-30 (enemy-flag enable-on-active)))
          (set! v1-31 (logclear v1-30 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-31)
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-move-dest))
        (set! (-> self mask) (logior (process-mask collectable) (-> self mask)))
        (logclear! (-> self mask) (process-mask collectable))
        )
    (let ((v1-38 (-> self enemy-flags)))
      (if (logtest? (enemy-flag no-initial-move-to-ground) v1-38)
          (set! v1-39 (logior (enemy-flag check-water-backup) v1-38))
          (set! v1-39 (logclear v1-38 (enemy-flag check-water-backup)))
          )
      )
    (set! (-> self enemy-flags) v1-39)
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (logclear! (-> self focus-status) (focus-status hit))
    (react-to-focus self)
    (none)
    )
  )

(defstate knocked (kor)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type bot knocked) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self travel-anim-interp) 0.0)
    (none)
    )
  )

(defstate arrested (kor)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior kor) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (nav-enemy-method-167 self)
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (vector-reset! (-> self root-override2 transv))
    (stop-looking-at-target! self)
    (set! (-> self travel-anim-interp) 0.0)
    (if (logtest? (bot-flags bf20) (-> self bot-flags))
        (logclear! (-> self enemy-flags) (enemy-flag enable-on-active checking-water))
        )
    (none)
    )
  :trans (behavior ()
    (cond
      ((logtest? (-> self bot-flags) (bot-flags bf09))
       (fail-falling self)
       )
      (else
        (bot-method-223 self #f)
        (when (not (logtest? (bot-flags bf20) (-> self bot-flags)))
          (if (and (-> self focus-info fproc) (>= (fabs (-> self focus-info ry-diff)) 9102.223))
              (kor-method-233 self)
              )
          (when (not (focus-test? self grabbed))
            (let ((gp-0 (handle->process (-> self arrestor-handle))))
              (if (not (if (type? gp-0 process-focusable)
                           gp-0
                           )
                       )
                  (react-to-focus self)
                  )
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.25))
    (cond
      ((and (not (logtest? (bot-flags bf20) (-> self bot-flags)))
            (< (- (current-time) (-> self arrest-attempt-time)) (seconds 0.8))
            )
       (ja-no-eval :group! (-> self draw art-group data 4)
                   :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 4)) frames num-frames) -1)))
                   :frame-num 0.0
                   )
       (until (ja-done? 0)
         (suspend)
         (ja :num! (seek!))
         )
       )
      (else
        (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek! (ja-aframe 8.0 0)) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! (ja-aframe 8.0 0)))
          )
        )
      )
    (fail-mission! self)
    (let* ((gp-2 (handle->process (-> self arrestor-handle)))
           (v1-49 (if (type? gp-2 process-focusable)
                      gp-2
                      )
                  )
           )
      (if v1-49
          (logclear! (-> (the-as crimson-guard v1-49) enemy-flags) (enemy-flag enable-on-active checking-water))
          )
      )
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 17)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 17)) frames num-frames) -1)))
                :frame-num (ja-aframe 4.0 0)
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set! (-> self state-time) (current-time))
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 18)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 18)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (if (and (logtest? (-> self bot-flags) (bot-flags failed))
                 (>= (- (current-time) (-> self state-time)) (seconds 3))
                 (reset? *fail-mission-control*)
                 )
            (reset! *fail-mission-control*)
            )
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior kor) nav-enemy-simple-post)
  )

(defstate failed (kor)
  :virtual #t
  :enter (behavior ()
    (set! (-> self bot-flags) (logior (bot-flags bf20) (-> self bot-flags)))
    ((-> (method-of-type kor arrested) enter))
    (none)
    )
  :trans (-> (method-of-type kor arrested) trans)
  :code (-> (method-of-type kor arrested) code)
  :post (-> (method-of-type kor arrested) post)
  )

(defstate die-falling (kor)
  :virtual #t
  :enter (-> (method-of-type kor failed) enter)
  :trans (-> (method-of-type kor failed) trans)
  :code (-> (method-of-type kor failed) code)
  )
