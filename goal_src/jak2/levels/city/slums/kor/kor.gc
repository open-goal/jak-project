;;-*-Lisp-*-
(in-package goal)

;; name: kor.gc
;; name in dgo: kor
;; dgos: CTYKORA

;; DECOMP BEGINS

(deftype kor-anim-info (structure)
  ((anim-index int32  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(define *kor-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 2
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x3 :param0 #x1 :param1 #x1)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 3
    :notice-anim 3
    :hostile-anim -1
    :hit-anim 3
    :knocked-anim 15
    :knocked-land-anim 16
    :die-anim 3
    :die-falling-anim 3
    :victory-anim -1
    :jump-wind-up-anim 3
    :jump-in-air-anim 3
    :jump-land-anim 3
    :neck-joint 6
    :look-at-joint 6
    :bullseye-joint 4
    :notice-distance (meters 30)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 30)
    :default-hit-points 100
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak civilian enemy vehicle-sphere hit-by-others-list player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :movement-gravity (meters -100)
    :friction 0.7
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 43008.0
    :knocked-soft-vxz-hi 43008.0
    :knocked-soft-vy-lo 79872.0
    :knocked-soft-vy-hi 79872.0
    :knocked-medium-vxz-lo 43008.0
    :knocked-medium-vxz-hi 43008.0
    :knocked-medium-vy-lo 79872.0
    :knocked-medium-vy-hi 79872.0
    :knocked-hard-vxz-lo 43008.0
    :knocked-hard-vxz-hi 43008.0
    :knocked-hard-vy-lo 79872.0
    :knocked-hard-vy-hi 79872.0
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 43008.0
    :knocked-yellow-vxz-hi 43008.0
    :knocked-yellow-vy-lo 79872.0
    :knocked-yellow-vy-hi 79872.0
    :knocked-red-vxz-lo 43008.0
    :knocked-red-vxz-hi 43008.0
    :knocked-red-vy-lo 79872.0
    :knocked-red-vy-hi 79872.0
    :knocked-blue-vxz-lo 43008.0
    :knocked-blue-vxz-hi 43008.0
    :knocked-blue-vy-lo 79872.0
    :knocked-blue-vy-hi 79872.0
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 3
    :turn-anim -1
    :run-anim 3
    :taunt-anim -1
    :run-travel-speed (meters 5.1)
    :run-acceleration (meters 5)
    :run-turning-acceleration (meters 6)
    :walk-travel-speed (meters 1.5)
    :walk-acceleration (meters 5)
    :walk-turning-acceleration (meters 6)
    :maximum-rotation-rate (degrees 180.0)
    :notice-nav-radius (meters 1)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *kor-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod general-event-handler kor ((obj kor) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('arrest)
     (let* ((s4-0 (handle->process (-> obj arrestor-handle)))
            (v1-4 (if (type? s4-0 process-focusable)
                      s4-0
                      )
                  )
            )
       (when (or (not v1-4)
                 (= v1-4 arg0)
                 (and (!= v1-4 arg0) (>= (- (current-time) (-> obj arrest-attempt-time)) (seconds 0.1)))
                 )
         (set! (-> obj arrestor-handle) (process->handle arg0))
         (set! (-> obj arrest-attempt-time) (current-time))
         0
         )
       )
     #t
     )
    (('instant-arrest)
     (set! (-> obj bot-flags) (logior (bot-flags bf20) (-> obj bot-flags)))
     (let ((v1-18 (the-as object (-> arg3 param 0))))
       (set! (-> obj arrestor-handle) (process->handle (the-as process v1-18)))
       (set! (-> obj arrest-attempt-time) (current-time))
       (let ((a1-8 (new 'stack-no-clear 'vector)))
         (vector-! a1-8 (-> (the-as process-drawable v1-18) root trans) (-> obj root-override2 trans))
         (set! (-> a1-8 y) 0.0)
         (forward-up->quaternion (-> obj root-override2 quat) a1-8 *up-vector*)
         )
       )
     (logclear! (-> obj enemy-flags) (enemy-flag enable-on-active checking-water))
     (logclear! (-> obj mask) (process-mask collectable))
     (logclear! (-> obj enemy-flags) (enemy-flag look-at-move-dest))
     (logclear! (-> obj mask) (process-mask actor-pause))
     (logclear! (-> obj enemy-flags) (enemy-flag notice))
     (go (method-of-object obj arrested))
     )
    (else
      ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
      )
    )
  )

(defmethod enemy-method-97 kor ((obj kor))
  (let* ((s4-0 (handle->process (-> obj attacker-handle)))
         (s5-0 (if (type? s4-0 process-focusable)
                   s4-0
                   )
               )
         (s3-0 (handle->process (-> obj arrestor-handle)))
         (s4-1 (if (type? s3-0 process-focusable)
                   s3-0
                   )
               )
         )
    (when s5-0
      (cond
        ((= (-> s5-0 type) target)
         (when (or (not (logtest? (-> obj bot-flags) (bot-flags attacked)))
                   (>= (- (current-time) (-> obj attacker-time)) (seconds 1.5))
                   )
           (if (logtest? (-> obj bot-flags) (bot-flags attacked))
               (reset-attacker! obj)
               )
           (set! s5-0 (the-as process #f))
           (set! (-> obj attacker-handle) (the-as handle #f))
           )
         )
        (else
          (when (>= (- (current-time) (-> obj attacker-time)) (seconds 6))
            (set! s5-0 (the-as process #f))
            (set! (-> obj attacker-handle) (the-as handle #f))
            )
          )
        )
      )
    (when s4-1
      (when (or (>= (- (current-time) (-> obj arrest-attempt-time)) (seconds 0.5))
                (focus-test? (the-as process-focusable s4-1) dead hit)
                )
        (set! s4-1 (the-as process #f))
        (set! (-> obj arrestor-handle) (the-as handle #f))
        )
      )
    (let ((v1-34 (-> obj focus-mode))
          (s3-1 (the-as process #f))
          )
      (cond
        ((zero? v1-34)
         (cond
           (s4-1
             (set! s3-1 s4-1)
             )
           (s5-0
             (set! s3-1 s5-0)
             )
           ((begin (set! s3-1 (select-focus! obj)) s3-1)
            (empty)
            )
           (else
             (let ((s5-1 (handle->process (-> obj poi-handle))))
               (set! s3-1 (if (type? s5-1 process-focusable)
                              s5-1
                              )
                     )
               )
             (if s3-1
                 (empty)
                 (set! s3-1 *target*)
                 )
             )
           )
         )
        ((= v1-34 1)
         (cond
           (s4-1
             (set! s3-1 s4-1)
             )
           (s5-0
             (set! s3-1 s5-0)
             )
           (else
             (let ((s5-2 (handle->process (-> obj poi-handle))))
               (set! s3-1 (if (type? s5-2 process-focusable)
                              s5-2
                              )
                     )
               )
             (cond
               (s3-1
                 (empty)
                 )
               ((begin (set! s3-1 (select-focus! obj)) s3-1)
                (empty)
                )
               (else
                 (set! s3-1 *target*)
                 )
               )
             )
           )
         )
        )
      (cond
        (s3-1
          (try-update-focus (-> obj focus) (the-as process-focusable s3-1) obj)
          (if (and (logtest? (-> obj bot-flags) (bot-flags attacked)) (!= (-> s3-1 type) target))
              (logclear! (-> obj bot-flags) (bot-flags attacked))
              )
          )
        (else
          (clear-focused (-> obj focus))
          (logclear! (-> obj bot-flags) (bot-flags attacked))
          )
        )
      s3-1
      )
    )
  )

(defmethod alive? kor ((obj kor))
  (let ((t9-0 (method-of-type bot alive?)))
    (and (t9-0 obj)
         (not (and (-> obj next-state) (let ((v1-4 (-> obj next-state name)))
                                         (or (= v1-4 'arrested) (= v1-4 'die) (= v1-4 'die-falling))
                                         )
                   )
              )
         (not (logtest? (bot-flags bf20) (-> obj bot-flags)))
         )
    )
  )

(defmethod init-enemy-collision! kor ((obj kor))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 3) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 4))
      (set! (-> s4-0 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid can-ride no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 4505.6 0.0 7372.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid can-ride))
      (set-vector! (-> v1-13 local-sphere) 0.0 2867.2 0.0 2867.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 5529.6 0.0 2867.2)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec bot bot-targetable))
      (set! (-> v1-17 prim-core collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-17 local-sphere) 0.0 8192.0 0.0 2867.2)
      )
    (set! (-> s5-0 nav-radius) 4096.0)
    (let ((v1-19 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-19 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-19 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> s5-0 event-priority) (the-as uint 2))
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

(defmethod init! kor ((obj kor))
  "Set defaults for various fields."
  (let ((t9-0 (method-of-type bot init!)))
    (t9-0 obj)
    )
  (set! (-> obj min-speed) 6144.0)
  (set! (-> obj max-speed) 20889.6)
  (set! (-> obj channel) (the-as uint 27))
  (set! (-> obj notice-enemy-dist) 122880.0)
  (set! (-> obj travel-anim-interp) 0.0)
  (set! (-> obj focus-info max-los-dist) 0.0)
  (set-vector! (-> obj root-override2 scale) 1.2 1.2 1.2 1.0)
  (set! (-> obj spot-color) (the-as uint #x508f2f00))
  (set! (-> obj arrestor-handle) (the-as handle #f))
  0
  (none)
  )

(defmethod init-enemy! kor ((obj kor))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (init! obj)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-kor" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (init-enemy-behaviour-and-stats! obj *kor-nav-enemy-info*)
  (let ((v1-7 (-> obj neck)))
    (set! (-> v1-7 up) (the-as uint 1))
    (set! (-> v1-7 nose) (the-as uint 2))
    (set! (-> v1-7 ear) (the-as uint 0))
    (set-vector! (-> v1-7 twist-max) 11832.889 11832.889 0.0 1.0)
    (set! (-> v1-7 ignore-angle) 30947.555)
    )
  (let ((t9-4 (method-of-type bot init-enemy!)))
    (t9-4 obj)
    )
  (set! (-> obj my-simple-focus) (process-spawn simple-focus :to obj))
  0
  (none)
  )

(defmethod bot-method-214 kor ((obj kor))
  #f
  )

(defmethod go-hostile kor ((obj kor))
  (kor-method-232 obj)
  (none)
  )

(defmethod react-to-focus kor ((obj kor))
  "@TODO - flesh out docs"
  (kor-method-232 obj)
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod kor-method-233 kor ((obj kor))
  (go (method-of-object obj waiting-turn))
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod kor-method-232 kor ((obj kor))
  (let ((s5-0 (handle->process (-> obj arrestor-handle))))
    (cond
      ((if (type? s5-0 process-focusable)
           s5-0
           )
       (go (method-of-object obj arrested))
       )
      ((logtest? (bot-flags bf19) (-> obj bot-flags))
       (go (method-of-object obj scared-idle))
       )
      (else
        (go (method-of-object obj waiting-idle))
        )
      )
    )
  (none)
  )

(defmethod kor-method-234 kor ((obj kor))
  (with-pp
    (let ((f30-0 (-> obj nav state speed)))
      (let ((f0-1 (lerp-scale 0.0 1.0 f30-0 6144.0 20889.6)))
        (seek! (-> obj travel-anim-interp) f0-1 (* 4.0 (-> pp clock seconds-per-frame)))
        )
      (let ((f28-0 (-> obj travel-anim-interp))
            (v1-7 (if (> (-> obj skel active-channels) 0)
                      (-> obj skel root-channel 0 frame-group)
                      )
                  )
            )
        (cond
          ((and v1-7 (= v1-7 (-> obj draw art-group data 5)))
           (let ((v1-12 (-> obj skel root-channel 1)))
             (set! (-> v1-12 frame-interp 1) f28-0)
             (set! (-> v1-12 frame-interp 0) f28-0)
             )
           (let* ((f28-1 (current-cycle-distance (-> obj skel)))
                  (f0-5 (quaternion-y-angle (-> obj root-override2 quat)))
                  (f0-7 (deg- f0-5 (-> obj travel-prev-ry)))
                  (f0-10 (fmin 20889.6 (* 0.35342914 (-> pp clock frames-per-second) (fabs f0-7))))
                  (f0-13 (/ (* 24.0 (fmax f30-0 f0-10)) (* 15.0 f28-1)))
                  (a0-10 (-> obj skel root-channel 0))
                  )
             (set! (-> a0-10 param 0) f0-13)
             (joint-control-channel-group-eval! a0-10 (the-as art-joint-anim #f) num-func-loop!)
             )
           (let ((a0-11 (-> obj skel root-channel 1)))
             (set! (-> a0-11 param 0) 0.0)
             (joint-control-channel-group-eval! a0-11 (the-as art-joint-anim #f) num-func-chan)
             )
           )
          (else
            (ja-channel-push! 2 (seconds 0.3))
            (let ((a0-13 (-> obj skel root-channel 0)))
              (set! (-> a0-13 dist) 9830.4)
              (set! (-> a0-13 frame-group) (the-as art-joint-anim (-> obj draw art-group data 5)))
              (set! (-> a0-13 param 0) 1.0)
              (joint-control-channel-group! a0-13 (the-as art-joint-anim (-> obj draw art-group data 5)) num-func-loop!)
              )
            (let ((a0-14 (-> obj skel root-channel 1)))
              (set! (-> a0-14 frame-interp 1) f28-0)
              (set! (-> a0-14 frame-interp 0) f28-0)
              (set! (-> a0-14 dist) 19660.8)
              (set! (-> a0-14 frame-group) (the-as art-joint-anim (-> obj draw art-group data 6)))
              (set! (-> a0-14 param 0) 0.0)
              (joint-control-channel-group! a0-14 (the-as art-joint-anim (-> obj draw art-group data 6)) num-func-chan)
              )
            )
          )
        )
      )
    (none)
    )
  )

(defmethod damage-amount-from-attack kor ((obj kor) (arg0 process) (arg1 event-message-block))
  "@returns the amount of damage taken from an attack.  This can come straight off the [[attack-info]] or via [[penetrate-using->damage]]"
  0
  )

(defmethod bot-method-190 kor ((obj kor))
  #t
  )

(defmethod enemy-method-78 kor ((obj kor) (arg0 (pointer float)))
  (ja-channel-push! 1 (seconds 0.1))
  (let ((a1-2 (-> obj draw art-group data (-> obj enemy-info-override knocked-land-anim)))
        (a0-4 (-> obj skel root-channel 0))
        )
    (set! (-> a0-4 frame-group) (the-as art-joint-anim a1-2))
    (set! (-> a0-4 param 0) (the float (+ (-> (the-as art-joint-anim a1-2) frames num-frames) -1)))
    (set! (-> a0-4 param 1) (-> arg0 0))
    (set! (-> a0-4 frame-num) 0.0)
    (joint-control-channel-group! a0-4 (the-as art-joint-anim a1-2) num-func-seek!)
    )
  #t
  )

;; WARN: Return type mismatch float vs meters.
(defmethod set-cam-height! kor ((obj kor) (arg0 vector))
  (the-as
    meters
    (cond
      ((and (-> obj next-state) (= (-> obj next-state name) 'arrested))
       (set-vector! arg0 49152.0 12288.0 49152.0 1.0)
       (vector<-cspace+vector! arg0 (-> obj node-list data 2) arg0)
       (if (focus-test? obj under-water)
           (set! (-> arg0 y) (+ (get-water-height obj) (-> *setting-control* cam-current target-height)))
           )
       )
      (else
        ((method-of-type bot set-cam-height!) obj arg0)
        )
      )
    )
  )

(defmethod enemy-method-102 kor ((obj kor))
  (if (logtest? (bot-flags bf20) (-> obj bot-flags))
      #f
      ((method-of-type bot enemy-method-102) obj)
      )
  )

;; WARN: Return type mismatch object vs none.
(defmethod go-idle kor ((obj kor))
  (cond
    ((= (-> obj course course-id) 8)
     (cond
       ((task-node-closed? (game-task-node city-help-kid-resolution))
        (cleanup-for-death obj)
        (go (method-of-object obj die-fast))
        )
       (else
         (go (method-of-object obj waiting-with-kid))
         )
       )
     )
    (else
      (go (method-of-object obj waiting-idle))
      )
    )
  (none)
  )
