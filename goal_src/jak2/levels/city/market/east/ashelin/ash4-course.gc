;;-*-Lisp-*-
(in-package goal)

;; name: ash4-course.gc
;; name in dgo: ash4-course
;; dgos: CTYASHA

;; DECOMP BEGINS

(deftype ashelin-tanker (ashelin)
  ((suppress traffic-suppression-params :inline :offset-assert 1040)
   )
  :heap-base #x3c0
  :method-count-assert 252
  :size-assert         #x439
  :flag-assert         #xfc03c00439
  (:methods
    (suppress-traffic (_type_) none 251)
    )
  )


;; WARN: Return type mismatch object vs none.
(defmethod go-idle ashelin-tanker ((obj ashelin-tanker))
  (cond
    ((task-node-closed? (game-task-node city-intercept-tanker-resolution))
     (cleanup-for-death obj)
     (go (method-of-object obj die-fast))
     )
    (else
      (go (method-of-object obj hidden))
      )
    )
  (none)
  )

;; WARN: Return type mismatch vector vs none.
(defmethod init! ashelin-tanker ((obj ashelin-tanker))
  "Set defaults for various fields."
  (let ((t9-0 (method-of-type ashelin init!)))
    (t9-0 obj)
    )
  (let ((v1-1 (-> obj suppress)))
    (set! (-> v1-1 duration) (seconds 1))
    (set! (-> v1-1 id) -1)
    (let ((a0-4 (-> v1-1 bbox)))
      (set! (-> a0-4 min x) 1634304.0)
      (set! (-> a0-4 min y) 28672.0)
      (set! (-> a0-4 min z) 1708032.0)
      (set! (-> a0-4 min w) 1.0)
      )
    (set-vector! (-> v1-1 bbox max) 2048000.0 40960.0 2023424.0 1.0)
    )
  (none)
  )

(defmethod suppress-traffic ashelin-tanker ((obj ashelin-tanker))
  (when *traffic-manager*
    (let ((a1-0 (new 'stack-no-clear 'traffic-danger-info)))
      (set! (-> a1-0 sphere quad) (-> (new 'static 'vector :x 1837465.6 :y 34406.4 :z 1868103.6 :w 225280.0) quad))
      (set! (-> a1-0 velocity quad) (the-as uint128 0))
      (set! (-> a1-0 notify-radius) 286720.0)
      (set! (-> a1-0 danger-level) 1.0)
      (set! (-> a1-0 decay-rate) 0.0)
      (set! (-> a1-0 flags) (traffic-danger-flags tdf0))
      (set! (-> a1-0 danger-type) (traffic-danger-type tdt4))
      (add-danger (-> (the-as traffic-manager *traffic-manager*) traffic-engine) a1-0)
      )
    )
  (none)
  )

(define *ash4-course*
  (new 'static 'ashelin-course
    :course-id #x9
    :speech-count #x2d
    :spot-count #x1
    :attack-player-speeches (new 'static 'bot-speech-list-shuffle
      :flags #xe
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 11 7 8 9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)
      )
    :default-check-too-far #f
    :waypoints (new 'static 'boxed-array :type bot-waypoint
      (new 'static 'bot-waypoint
        :waypoint-id 1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (clear-speech-flags! arg0)
          (move-to-point! (-> arg0 root-override2) (the-as vector (-> arg0 ash-course spots 0)))
          (let ((v1-7 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-7 bytes 5) 1)
            (set! (-> v1-7 bytes 6) 0)
            (set! (-> v1-7 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-7) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker)) (let ((v1-0 *traffic-manager*))
                                                                    (cond
                                                                      ((not (logtest? (-> arg1 waypoint-bits) 1))
                                                                       (if v1-0
                                                                           (logior! (-> arg1 waypoint-bits) 1)
                                                                           )
                                                                       #f
                                                                       )
                                                                      ((not (logtest? (-> arg1 waypoint-bits) 2))
                                                                       (logior! (-> arg1 waypoint-bits) 2)
                                                                       #f
                                                                       )
                                                                      ((not (logtest? (-> arg1 waypoint-bits) 4))
                                                                       (logior! (-> arg1 waypoint-bits) 4)
                                                                       #f
                                                                       )
                                                                      (else
                                                                        (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                        (go-to-waypoint! arg1 2 #f)
                                                                        (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                        #t
                                                                        )
                                                                      )
                                                                    )
                            )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 2
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (let ((v1-1 (get-current-task-event (-> arg0 task))))
            (if (= (-> v1-1 action) (game-task-action say))
                (add-process
                  *gui-control*
                  arg0
                  (gui-channel art-load)
                  (gui-action queue)
                  (the-as string (-> v1-1 scene))
                  -99.0
                  0
                  )
                )
            )
          (let ((v1-3 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-3 bytes 5) 1)
            (set! (-> v1-3 bytes 6) 0)
            (set! (-> v1-3 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-3) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker))
                      (let ((a0-1 *target*))
                        (when a0-1
                          (let ((v1-2 (get-trans a0-1 0)))
                            (if (and (>= (-> v1-2 x) 1638400.0)
                                     (>= 2031616.0 (-> v1-2 x))
                                     (>= (-> v1-2 z) 1703936.0)
                                     (>= 2027520.0 (-> v1-2 z))
                                     )
                                (logior! (-> arg1 bot-task-bits) 1)
                                )
                            )
                          )
                        )
                      (let ((v1-8 (get-current-task-event (-> arg1 task))))
                        (when (and (logtest? (-> arg1 bot-task-bits) 1) (= (-> v1-8 action) (game-task-action say)))
                          (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                          (go-to-waypoint! arg1 3 #f)
                          (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                          #t
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 3
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (set-setting! 'calm #t 0.0 0)
          (set-setting! 'exclusive-task #f 0.0 (game-task city-intercept-tanker))
          (let ((v1-5 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-5 bytes 5) 1)
            (set! (-> v1-5 bytes 6) 0)
            (set! (-> v1-5 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-5) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker)) (let ((v1-1 (get-current-task-event (-> arg1 task))))
                                                                    (when (scene-play arg1 (the-as string (-> v1-1 scene)) #f)
                                                                      (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                      (go-to-waypoint! arg1 4 #f)
                                                                      (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                      #t
                                                                      )
                                                                    )
                            )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 4
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 0)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-1) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker)) (when (scene-release? arg1)
                                                                    (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                    (go-to-waypoint! arg1 5 #f)
                                                                    (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                    #t
                                                                    )
                            )
                    )
                  )
            )
          (none)
          )
        :on-update #f
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 5
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (with-pp
            (send-event arg0 'hide #f)
            (remove-setting! 'calm)
            (set-setting! 'music 'danger9 0.0 0)
            (set! (-> arg0 notice-enemy-dist) 245760.0)
            (logior! (-> arg0 bot-flags) (bot-flags bf06))
            (set! (-> arg0 bot-task-bits) (logand -3 (-> arg0 bot-task-bits)))
            (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-3 from) (process->ppointer pp))
              (set! (-> a1-3 num-params) 0)
              (set! (-> a1-3 message) 'trigger)
              (let ((t9-3 send-event-function)
                    (v1-18 (-> arg0 actor-group 0 data 0 actor))
                    )
                (t9-3
                  (if v1-18
                      (-> v1-18 extra process)
                      )
                  a1-3
                  )
                )
              )
            (ashelin-method-250 arg0 #t)
            (add-process *gui-control* arg0 (gui-channel art-load) (gui-action queue) "city-intercept-tanker-res" -99.0 0)
            (let ((v1-26 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
              (set! (-> v1-26 bytes 5) 1)
              (set! (-> v1-26 bytes 6) 0)
              (set! (-> v1-26 bytes 4) -1)
              (set! (-> (the-as asht-wait-spot v1-26) check-done)
                    (the-as
                      (function asht-wait-spot ashelin symbol)
                      (lambda ((arg0 object) (arg1 ashelin-tanker)) (with-pp
                                                                      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
                                                                        (set! (-> a1-1 from) (process->ppointer pp))
                                                                        (set! (-> a1-1 num-params) 1)
                                                                        (set! (-> a1-1 message) 'query)
                                                                        (set! (-> a1-1 param 0) (the-as uint 'beaten))
                                                                        (let ((t9-0 send-event-function)
                                                                              (v1-7 (-> arg1 actor-group 0 data 0 actor))
                                                                              )
                                                                          (when (t9-0
                                                                                  (if v1-7
                                                                                      (-> v1-7 extra process)
                                                                                      )
                                                                                  a1-1
                                                                                  )
                                                                            (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                            (go-to-waypoint! arg1 6 #f)
                                                                            (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                            #t
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                              )
                      )
                    )
              )
            (none)
            )
          )
        :on-update (lambda ((arg0 ashelin-tanker))
          (suppress-traffic arg0)
          (when (logtest? (-> arg0 bot-task-bits) 2)
            (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
            (go-to-waypoint! arg0 9 #f)
            )
          (none)
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 6
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (set! (-> arg0 waypoint-time0) (current-time))
          (ashelin-method-250 arg0 #f)
          (task-node-close! (game-task-node city-intercept-tanker-battle))
          (remove-setting! 'sound-mode)
          (remove-setting! 'music)
          (when (not (channel-active? arg0 (the-as uint 0)))
            (let ((v1-12 (get-rand-int arg0 3)))
              (cond
                ((zero? v1-12)
                 (play-speech arg0 42)
                 )
                ((= v1-12 1)
                 (play-speech arg0 43)
                 )
                (else
                  (play-speech arg0 44)
                  )
                )
              )
            )
          (let ((v1-20 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-20 bytes 5) 1)
            (set! (-> v1-20 bytes 6) 0)
            (set! (-> v1-20 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-20) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker))
                      (let ((s5-0 (get-current-task-event (-> arg1 task))))
                        (when (and (= (-> s5-0 action) (game-task-action say))
                                   (not (channel-active? arg1 (the-as uint 0)))
                                   (scene-play arg1 (the-as string (-> s5-0 scene)) #f)
                                   )
                          (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                          (go-to-waypoint! arg1 7 #f)
                          (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                          #t
                          )
                        )
                      )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 ashelin-tanker))
          (suppress-traffic arg0)
          (when (logtest? (-> arg0 bot-task-bits) 2)
            (ai-task-control-method-12 (-> arg0 ai-ctrl) arg0)
            (go-to-waypoint! arg0 9 #f)
            )
          (none)
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 7
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (logclear! (-> arg0 bot-flags) (bot-flags bf06))
          (bot-method-196 arg0)
          (let ((v1-5 (-> arg0 root-override2 root-prim)))
            (set! (-> v1-5 prim-core collide-as) (collide-spec))
            (set! (-> v1-5 prim-core collide-with) (collide-spec))
            )
          (set! (-> arg0 root-override2 backup-collide-as) (collide-spec))
          (set! (-> arg0 root-override2 backup-collide-with) (collide-spec))
          0
          (send-event arg0 'hide #t)
          (let ((v1-15 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-15 bytes 5) 1)
            (set! (-> v1-15 bytes 6) 0)
            (set! (-> v1-15 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-15) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker)) (when (scene-release? arg1)
                                                                    (ai-task-control-method-12 (-> arg1 ai-ctrl) arg1)
                                                                    (go-to-waypoint! arg1 8 #f)
                                                                    (ai-task-control-method-10 (-> arg1 ai-ctrl) arg1)
                                                                    #t
                                                                    )
                            )
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 ashelin-tanker)) (create-or-update-suppression-box (-> arg0 suppress)) (none))
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 8
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (remove-setting! 'exclusive-task)
          (process-entity-status! arg0 (entity-perm-status bit-4) #f)
          (process-entity-status! arg0 (entity-perm-status no-kill) #f)
          (let ((v1-3 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-3 bytes 5) 1)
            (set! (-> v1-3 bytes 6) 0)
            (set! (-> v1-3 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-3) check-done)
                  (the-as (function asht-wait-spot ashelin symbol) (lambda ((arg0 ashelin-tanker)) #f))
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 ashelin-tanker)) (create-or-update-suppression-box (-> arg0 suppress)) (none))
        :on-skipping-here #f
        :check-too-far #f
        )
      (new 'static 'bot-waypoint
        :waypoint-id 9
        :nav-mesh-index -1
        :skip-to -1
        :on-set (lambda ((arg0 ashelin-tanker))
          (let ((v1-1 (get-task-by-type (-> arg0 ai-ctrl) asht-wait-spot arg0)))
            (set! (-> v1-1 bytes 5) 1)
            (set! (-> v1-1 bytes 6) 0)
            (set! (-> v1-1 bytes 4) -1)
            (set! (-> (the-as asht-wait-spot v1-1) check-done)
                  (the-as
                    (function asht-wait-spot ashelin symbol)
                    (lambda ((arg0 object) (arg1 ashelin-tanker)) (send-event arg1 'instant-death) (none))
                    )
                  )
            )
          (none)
          )
        :on-update (lambda ((arg0 ashelin-tanker))
          (suppress-traffic arg0)
          (create-or-update-suppression-box (-> arg0 suppress))
          (none)
          )
        :on-skipping-here #f
        :check-too-far #f
        )
      )
    :speeches (new 'static 'inline-array bot-speech-info 45
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha001")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha008")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha009")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha010")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha011")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha012")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha013")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha002")
      (new 'static 'bot-speech-info :flags (speech-flags sf10) :hold-time #x5a :slave-id -1 :name "asha003")
      (new 'static 'bot-speech-info :flags (speech-flags sf06) :hold-time #x5a :slave-id -1 :name "asha004")
      (new 'static 'bot-speech-info :flags (speech-flags sf06) :hold-time #x5a :slave-id -1 :name "asha005")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha006")
      (new 'static 'bot-speech-info :flags (speech-flags sf08) :hold-time #x5a :slave-id -1 :name "asha007")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha018")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha019")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha020")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha021")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha022")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha023")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha024")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha025")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha026")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha027")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha028")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha029")
      (new 'static 'bot-speech-info :flags (speech-flags sf10) :hold-time #x5a :slave-id -1 :name "asha030")
      (new 'static 'bot-speech-info :flags (speech-flags sf09) :hold-time #x5a :slave-id -1 :name "asha031")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha035")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha036")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha039")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha041")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha050")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha051")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha052")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha054")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha014")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha015")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha016")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha017")
      (new 'static 'bot-speech-info :flags (speech-flags sf11) :hold-time #x5a :slave-id -1 :name "asha038")
      (new 'static 'bot-speech-info :flags (speech-flags sf11) :hold-time #x5a :slave-id -1 :name "asha044")
      (new 'static 'bot-speech-info :flags (speech-flags sf11) :hold-time #x5a :slave-id -1 :name "asha049")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha032")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha033")
      (new 'static 'bot-speech-info :hold-time #x5a :slave-id -1 :name "asha034")
      )
    :speech-tunings (new 'static 'inline-array bot-speech-tuning 1
      (new 'static 'bot-speech-tuning :fo-min 20 :fo-max 100 :fo-curve #xb :trans? #t)
      )
    :spots (new 'static 'inline-array bot-spot 1
      (new 'static 'bot-spot :center (new 'static 'vector :x 1902510.1 :y 33587.2 :z 1786101.8 :w 61440.0))
      )
    :ouch-speeches (new 'static 'bot-speech-list-shuffle
      :flags #xe
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 35 36 37 38 39 40 41)
      )
    :victory-speeches (new 'static 'bot-speech-list-shuffle
      :flags #xe
      :last-local-index -1
      :speech-indexes (new 'static 'boxed-array :type int16 0 1 2 3 4 5 6 27 28 29 30 31 32 33 34)
      )
    )
  )

(set! (-> *bot-course-table* course 9) *ash4-course*)
