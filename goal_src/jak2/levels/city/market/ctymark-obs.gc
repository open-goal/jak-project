;;-*-Lisp-*-
(in-package goal)

;; name: ctymark-obs.gc
;; name in dgo: ctymark-obs
;; dgos: CMA, CMB

;; DECOMP BEGINS

(defpartgroup group-mcrate-explode
  :id 1006
  :duration (seconds 3.335)
  :flags (use-local-clock unk-6)
  :bounds (static-bspherem 0 0 0 12)
  :rotate ((degrees 0) (degrees 4) (degrees 0))
  :parts ((sp-item 4354 :fade-after (meters 40) :falloff-to (meters 80) :flags (is-3d bit7) :period 1200 :length 10)
    (sp-item 4355 :fade-after (meters 100) :falloff-to (meters 120) :flags (is-3d bit7) :period 1200 :length 15)
    (sp-item 4356 :fade-after (meters 90) :falloff-to (meters 110) :flags (bit7) :period 1200 :length 40)
    (sp-item 4357 :fade-after (meters 60) :falloff-to (meters 90) :flags (bit7) :period 1200 :length 15)
    (sp-item 4358 :fade-after (meters 50) :period 1200 :length 5)
    )
  )

(defpart 4356
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 16.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-flt spt-r 128.0)
    (sp-rnd-flt spt-g 64.0 32.0 1.0)
    (sp-rnd-flt spt-b 0.0 32.0 1.0)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4357
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 8.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 0.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.05) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4358
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xca :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 1))
    (sp-flt spt-scale-x (meters 4))
    (sp-flt spt-rot-x 122.88)
    (sp-flt spt-scale-y (meters 6))
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 196.0)
    (sp-flt spt-b 128.0)
    (sp-flt spt-a 64.0)
    (sp-flt spt-omega 206848.0)
    (sp-flt spt-scalevel-x (meters 0.2))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -2.56)
    (sp-int spt-timer 25)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 1024.0)
    )
  )

(defpart 4355
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1f :page #x64f))
    (sp-rnd-flt spt-num 12.0 6.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 2) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.1) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.083333336) (meters 0.05) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00022222222))
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-flt spt-scalevel-y (meters -0.00022222222))
    (sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 1200)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4354
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1f :page #x64f))
    (sp-rnd-flt spt-num 6.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 2) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.3) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.3) (meters 0.6) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.1) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 120)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 15.0) (degrees 150.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpartgroup group-mbasket-a-explode
  :id 1007
  :duration (seconds 3.335)
  :flags (use-local-clock unk-6)
  :bounds (static-bspherem 0 0 0 12)
  :rotate ((degrees 0) (degrees 4) (degrees 0))
  :parts ((sp-item 4360 :fade-after (meters 40) :falloff-to (meters 80) :flags (is-3d bit7) :period 1200 :length 10)
    (sp-item 4361 :fade-after (meters 100) :falloff-to (meters 120) :flags (is-3d bit7) :period 1200 :length 15)
    (sp-item 4362 :fade-after (meters 40) :falloff-to (meters 60) :flags (bit7) :period 1200 :length 15)
    (sp-item 4363 :fade-after (meters 100) :falloff-to (meters 120) :flags (bit7) :period 1200 :length 30)
    (sp-item 4364 :fade-after (meters 90) :falloff-to (meters 110) :flags (bit7) :period 1200 :length 40)
    (sp-item 4365 :fade-after (meters 60) :falloff-to (meters 90) :flags (bit7) :period 1200 :length 15)
    (sp-item 4366 :fade-after (meters 50) :period 1200 :length 5)
    )
  )

(defpart 4363
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x32 :page #xc))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 64.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 92.0 32.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.033333335) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-fade-a -0.16 -0.16 1.0)
    (sp-rnd-flt spt-accel-y -6.826667 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.95 0.03 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4362
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x21 :page #xc))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 1) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.05) 1.0)
    (sp-int spt-rot-x 4)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 32.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-omega 2.8672 1.6384 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.033333335) (meters 0.083333336) 1.0)
    (sp-rnd-flt spt-accel-y -12.288 -2.7306666 1.0)
    (sp-rnd-flt spt-friction 0.96 0.02 1.0)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-21)
    (sp-flt spt-userdata 30720.0)
    (sp-func spt-func 'check-water-level-drop-motion)
    (sp-int-plain-rnd spt-next-time 0 174 1)
    (sp-launcher-by-id spt-next-launcher 63)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 85.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 1) 1.0)
    )
  )

(defpart 4364
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 6.0 2.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 2) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 64.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 128.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -3.4133334 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4365
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 4.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 4) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 0.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.05) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4366
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xca :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 2))
    (sp-flt spt-scale-x (meters 7))
    (sp-flt spt-rot-x 122.88)
    (sp-flt spt-scale-y (meters 5))
    (sp-flt spt-r 64.0)
    (sp-flt spt-g 196.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 64.0)
    (sp-flt spt-omega 206848.0)
    (sp-flt spt-scalevel-x (meters 0.2))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -2.56)
    (sp-int spt-timer 25)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 1024.0)
    )
  )

(defpart 4361
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1c :page #x64f))
    (sp-func spt-birth-func 'birth-func-texture-group)
    (sp-rnd-flt spt-num 12.0 6.0 1.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 4) 1.0)
    (sp-rnd-int-flt spt-z (meters -1.5) 1 12288.0)
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.3) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.2) (meters 0.3) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.083333336) (meters 0.05) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00022222222))
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-flt spt-scalevel-y (meters -0.00022222222))
    (sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 5 0 0 #x64f01c00 #x64f01d00)
      )
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 1200)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4360
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1c :page #x64f))
    (sp-func spt-birth-func 'birth-func-texture-group)
    (sp-rnd-flt spt-num 6.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 4) 1.0)
    (sp-rnd-int-flt spt-z (meters -1.5) 1 12288.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.1) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 5 0 0 #x64f01c00 #x64f01d00)
      )
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 120)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 15.0) (degrees 150.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpartgroup group-mbasket-b-explode
  :id 1008
  :duration (seconds 3.335)
  :flags (use-local-clock unk-6)
  :bounds (static-bspherem 0 0 0 12)
  :rotate ((degrees 0) (degrees 4) (degrees 0))
  :parts ((sp-item 4367 :fade-after (meters 40) :falloff-to (meters 80) :flags (is-3d bit7) :period 1200 :length 10)
    (sp-item 4368 :fade-after (meters 100) :falloff-to (meters 120) :flags (is-3d bit7) :period 1200 :length 15)
    (sp-item 4369 :fade-after (meters 60) :falloff-to (meters 90) :flags (bit7) :period 1200 :length 15)
    (sp-item 4370 :fade-after (meters 60) :falloff-to (meters 90) :flags (bit7) :period 1200 :length 15)
    (sp-item 4371 :fade-after (meters 100) :falloff-to (meters 120) :flags (bit7) :period 1200 :length 30)
    (sp-item 4372 :fade-after (meters 30) :falloff-to (meters 40) :flags (is-3d) :period 1200 :length 100)
    (sp-item 4373 :fade-after (meters 50) :period 1200 :length 5)
    )
  )

(defpart 4371
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x32 :page #xc))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1) (meters 1) 1.0)
    (sp-flt spt-r 255.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 92.0 32.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.033333335) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-fade-a -0.16 -0.16 1.0)
    (sp-rnd-flt spt-accel-y -6.826667 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.95 0.03 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4372
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x32 :page #xc))
    (sp-flt spt-num 2.0)
    (sp-rnd-flt spt-x (meters -3) (meters 6) 1.0)
    (sp-flt spt-y (meters 0.05))
    (sp-rnd-flt spt-z (meters -3) (meters 6) 1.0)
    (sp-rnd-flt spt-scale-x (meters 1.5) (meters 1) 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1.5) (meters 1) 1.0)
    (sp-flt spt-r 255.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 0.0)
    (sp-flt spt-fade-a 3.2)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12 left-multiply-quat)
    (sp-int spt-next-time 40)
    (sp-launcher-by-id spt-next-launcher 4374)
    )
  )

(defpart 4374
  :init-specs ((sp-flt spt-fade-a 0.0)
    (sp-int-plain-rnd spt-next-time 300 299 1)
    (sp-launcher-by-id spt-next-launcher 4375)
    )
  )

(defpart 4375
  :init-specs ((sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0))
  )

(defpart 4369
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 6.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4370
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 12.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 0.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.05) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4373
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xca :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 0.5))
    (sp-flt spt-scale-x (meters 3))
    (sp-flt spt-rot-x 122.88)
    (sp-flt spt-scale-y (meters 7))
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 64.0)
    (sp-flt spt-omega 206848.0)
    (sp-flt spt-scalevel-x (meters 0.2))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -2.56)
    (sp-int spt-timer 25)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 1024.0)
    )
  )

(defpart 4368
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x21 :page #x64f))
    (sp-rnd-flt spt-num 6.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-int-flt spt-z (meters -1.5) 1 12288.0)
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.3) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.2) (meters 0.3) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.083333336) (meters 0.05) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00022222222))
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-flt spt-scalevel-y (meters -0.00022222222))
    (sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 1200)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4367
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x21 :page #x64f))
    (sp-rnd-flt spt-num 4.0 2.0 1.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-int-flt spt-z (meters -1.5) 1 12288.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.1) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 120)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 15.0) (degrees 150.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

;; WARN: Return type mismatch number vs none.
(defun check-market-piece-ground ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  "TODO"
  (if (and (>= 35225.6 (-> arg2 launchrot y)) (>= 0.0 (-> arg1 vel-sxvel y)))
      (set! (-> arg2 launchrot y) 35225.6)
      (set! (-> arg1 next-time)
            (the-as uint (* (max 1 (the-as int (-> *display* clock (-> arg1 clock-index) sparticle-data x))) 2))
            )
      )
  (none)
  )

(defpart 4359
  :init-specs ((sp-flt spt-rot-x 0.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-flt spt-rot-z (degrees 0.0))
    (sp-flt spt-vel-y (meters 0))
    (sp-flt spt-rotvel-x (degrees 0.0))
    (sp-flt spt-rotvel-y (degrees 0.0))
    (sp-flt spt-rotvel-z (degrees 0.0))
    (sp-flt spt-accel-y 0.0)
    (sp-rnd-flt spt-friction 0.8 0.1 1.0)
    (sp-int spt-timer 1200)
    (sp-int-plain-rnd spt-next-time 150 299 1)
    (sp-launcher-by-id spt-next-launcher 4376)
    )
  )

(defpart 4376
  :init-specs ((sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0) (sp-cpuinfo-flags sp-cpuinfo-flag-2 left-multiply-quat))
  )

(defpartgroup group-msack-a-explode
  :id 1009
  :duration (seconds 3.335)
  :flags (use-local-clock unk-6)
  :bounds (static-bspherem 0 0 0 12)
  :rotate ((degrees 0) (degrees 4) (degrees 0))
  :parts ((sp-item 4377 :fade-after (meters 40) :falloff-to (meters 80) :flags (is-3d bit7) :period 1200 :length 10)
    (sp-item 4378 :fade-after (meters 100) :falloff-to (meters 120) :flags (is-3d bit7) :period 1200 :length 15)
    (sp-item 4379 :fade-after (meters 100) :falloff-to (meters 120) :flags (bit7) :period 1200 :length 30)
    (sp-item 4380 :fade-after (meters 30) :falloff-to (meters 40) :flags (is-3d) :period 1200 :length 100)
    (sp-item 4381 :fade-after (meters 90) :falloff-to (meters 110) :flags (bit7) :period 1200 :length 40)
    (sp-item 4382 :fade-after (meters 60) :falloff-to (meters 90) :flags (bit7) :period 1200 :length 15)
    (sp-item 4383 :fade-after (meters 50) :period 1200 :length 5)
    )
  )

(defpart 4379
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xe :page #x64f))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.05) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.3) (meters 0.6) 1.0)
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 96.0 32.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.033333335) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -1.2) (degrees 2.4) 1.0)
    (sp-flt spt-scalevel-y (meters 0.00033333333))
    (sp-rnd-flt spt-fade-a -0.16 -0.16 1.0)
    (sp-rnd-flt spt-accel-y -6.826667 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.95 0.03 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4380
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x64f))
    (sp-rnd-flt spt-num 1.0 1.0 1.0)
    (sp-rnd-flt spt-x (meters -3) (meters 6) 1.0)
    (sp-flt spt-y (meters 0.05))
    (sp-rnd-flt spt-z (meters -3) (meters 6) 1.0)
    (sp-rnd-flt spt-scale-x (meters 1.5) (meters 1.5) 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1.5) (meters 1.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 0.0)
    (sp-flt spt-fade-a 1.6)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12 left-multiply-quat)
    (sp-int-plain-rnd spt-next-time 60 19 1)
    (sp-launcher-by-id spt-next-launcher 4374)
    )
  )

(defpart 4381
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 8.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 150.0 60.0 1.0)
    (sp-rnd-flt spt-g 96.0 64.0 1.0)
    (sp-rnd-flt spt-b 0.0 32.0 1.0)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4382
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 6.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 2) (meters 2) 1.0)
    (sp-rnd-flt spt-r 0.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.05) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4383
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xca :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 1))
    (sp-flt spt-scale-x (meters 5))
    (sp-flt spt-rot-x 122.88)
    (sp-flt spt-scale-y (meters 4.5))
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 32.0)
    (sp-flt spt-a 64.0)
    (sp-flt spt-omega 206848.0)
    (sp-flt spt-scalevel-x (meters 0.2))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -2.56)
    (sp-int spt-timer 25)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 1024.0)
    )
  )

(defpart 4378
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1e :page #x64f))
    (sp-rnd-flt spt-num 8.0 3.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.3) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.2) (meters 0.3) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.083333336) (meters 0.05) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00022222222))
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-flt spt-scalevel-y (meters -0.00022222222))
    (sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 1200)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4377
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1e :page #x64f))
    (sp-rnd-flt spt-num 4.0 2.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.1) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 120)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 15.0) (degrees 150.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpartgroup group-msack-b-explode
  :id 1010
  :duration (seconds 3.335)
  :flags (use-local-clock unk-6)
  :bounds (static-bspherem 0 0 0 12)
  :rotate ((degrees 0) (degrees 4) (degrees 0))
  :parts ((sp-item 4384 :fade-after (meters 100) :falloff-to (meters 120) :flags (is-3d bit7) :period 1200 :length 15)
    (sp-item 4385 :fade-after (meters 100) :falloff-to (meters 120) :flags (bit7) :period 1200 :length 30)
    (sp-item 4386 :fade-after (meters 90) :falloff-to (meters 110) :flags (bit7) :period 1200 :length 40)
    (sp-item 4387 :fade-after (meters 60) :falloff-to (meters 90) :flags (bit7) :period 1200 :length 15)
    (sp-item 4388 :fade-after (meters 50) :period 1200 :length 5)
    )
  )

(defpart 4385
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1 :page #x64f))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -0.5) (meters 1) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.1) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.06666667) (meters 0.06666667) 1.0)
    (sp-rnd-flt spt-fade-a -0.16 -0.16 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.95 0.03 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 1000)
    (sp-launcher-by-id spt-next-launcher 4389)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4389
  :init-specs ((sp-flt spt-vel-y (meters 0))
    (sp-flt spt-rotvel-z (degrees 0.0))
    (sp-flt spt-accel-y 0.0)
    (sp-rnd-flt spt-friction 0.8 0.1 1.0)
    (sp-int spt-timer 1700)
    (sp-int-plain-rnd spt-next-time 450 299 1)
    (sp-launcher-by-id spt-next-launcher 4376)
    )
  )

(defpart 4386
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 6.0 2.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -0.5) (meters 1) 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1) (meters 1) 1.0)
    (sp-rnd-flt spt-r 150.0 60.0 1.0)
    (sp-rnd-flt spt-g 0.0 64.0 1.0)
    (sp-flt spt-b 0.0)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.033333335) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4387
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 5.0 2.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 1) 1.0)
    (sp-rnd-flt spt-z (meters -0.5) (meters 1) 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 1) (meters 1) 1.0)
    (sp-rnd-flt spt-r 0.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-rnd-flt spt-a 16.0 8.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.033333335) (meters 0.033333335) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-rnd-flt spt-scalevel-y (meters 0) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-fade-a -0.02 -0.02 1.0)
    (sp-rnd-flt spt-accel-y -1.3653333 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.82 0.07 1.0)
    (sp-int spt-timer 1200)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 50.000004) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4388
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xca :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 1))
    (sp-flt spt-scale-x (meters 3))
    (sp-flt spt-rot-x 122.88)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 64.0)
    (sp-flt spt-b 64.0)
    (sp-flt spt-a 64.0)
    (sp-flt spt-omega 206848.0)
    (sp-flt spt-scalevel-x (meters 0.2))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -2.56)
    (sp-int spt-timer 25)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 1024.0)
    )
  )

(defpart 4384
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x1e :page #x64f))
    (sp-rnd-flt spt-num 6.0 2.0 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-z (meters -1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.2) 1.0)
    (sp-rnd-flt spt-rot-x 0.0 655360.0 1.0)
    (sp-rnd-flt spt-rot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.1) (meters 0.2) 1.0)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.083333336) (meters 0.05) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00022222222))
    (sp-rnd-flt spt-rotvel-x (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-y (degrees -4.8) (degrees 9.6) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -4.8) (degrees 9.6) 1.0)
    (sp-flt spt-scalevel-y (meters -0.00022222222))
    (sp-rnd-flt spt-fade-a -0.21333334 -0.21333334 1.0)
    (sp-rnd-flt spt-accel-y -13.653334 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.92 0.07 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-12)
    (sp-func spt-func 'check-market-piece-ground)
    (sp-int spt-next-time 1200)
    (sp-launcher-by-id spt-next-launcher 4359)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 110.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(deftype market-object (process-focusable)
  ((part-explode   basic          :offset-assert 204)
   (explode-matrix matrix :inline :offset-assert 208)
   )
  :heap-base #x90
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  (:methods
    (idle () _type_ :state 27)
    (die () _type_ :state 28)
    )
  )


(defstate idle (market-object)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('attack)
       (let ((attack-info (-> event param 1)))
         (when proc
           (let ((attacking-proc (find-offending-process-focusable proc (the-as attack-info attack-info))))
             (when attacking-proc
               (forward-up-nopitch->inv-matrix
                 (-> self explode-matrix)
                 (vector-! (new 'stack-no-clear 'vector) (-> attacking-proc root-override trans) (-> self root-override trans))
                 *up-vector*
                 )
               (set! (-> self explode-matrix trans quad) (-> self root-override trans quad))
               )
             )
           )
         )
       (go-virtual die)
       )
      )
    )
  :enter (the-as (function none :behavior market-object) #f)
  :exit (the-as (function none :behavior market-object) #f)
  :trans (the-as (function none :behavior market-object) #f)
  :code (the-as (function none :behavior market-object) sleep-code)
  :post (the-as (function none :behavior market-object) #f)
  )

(defstate die (market-object)
  :virtual #t
  :code (behavior ()
    (logior! (-> self focus-status) (focus-status dead))
    (let ((root-prim (-> self root-override root-prim)))
      (set! (-> root-prim prim-core collide-as) (collide-spec))
      (set! (-> root-prim prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> self part-explode)
      0
      #f
      #f
      #f
      (-> self explode-matrix)
      :to self
      )
    (process-entity-status! self (entity-perm-status dead) #t)
    (let ((frame (-> self clock frame-counter)))
      (until (>= (- (-> self clock frame-counter) frame) (seconds 5))
        (suspend)
        )
      )
    (none)
    )
  )

(defskelgroup skel-market-basket-a market-basket-a market-basket-a-lod0-jg market-basket-a-idle-ja
              ((market-basket-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 2 0 2.5)
              )

(deftype market-basket-a (market-object)
  ()
  :heap-base #x90
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  )


(defstate die (market-basket-a)
  :virtual #t
  :enter (behavior ()
    (sound-play "break-vase")
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! market-basket-a ((obj market-basket-a) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((cshape (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((prim-mesh (new 'process 'collide-shape-prim-mesh cshape (the-as uint 0) (the-as uint 0))))
      (set! (-> prim-mesh prim-core collide-as) (collide-spec crate))
      (set! (-> prim-mesh prim-core action) (collide-action solid))
      (set! (-> prim-mesh transform-index) 3)
      (set-vector! (-> prim-mesh local-sphere) 0.0 7372.8 0.0 8192.0)
      (set! (-> cshape total-prims) (the-as uint 1))
      (set! (-> cshape root-prim) prim-mesh)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (let ((root-prim (-> cshape root-prim)))
      (set! (-> cshape backup-collide-as) (-> root-prim prim-core collide-as))
      (set! (-> cshape backup-collide-with) (-> root-prim prim-core collide-with))
      )
    (set! (-> cshape penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            vehicle
            flut-attack
            board
            mech-punch
            dark-punch
            dark-giant
            knocked
            )
          )
    (set! (-> obj root-override) cshape)
    )
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj mask) (logior (process-mask crate) (-> obj mask)))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-market-basket-a" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part-explode) (-> *part-group-id-table* 1007))
  (set! (-> obj draw light-index) (the-as uint 10))
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(defskelgroup skel-market-basket-b market-basket-b market-basket-b-lod0-jg market-basket-b-idle-ja
              ((market-basket-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2)
              )

(deftype market-basket-b (market-object)
  ()
  :heap-base #x90
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  )


(defstate die (market-basket-b)
  :virtual #t
  :enter (behavior ()
    (sound-play "break-flour")
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! market-basket-b ((obj market-basket-b) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((cshape (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((prim-mesh (new 'process 'collide-shape-prim-mesh cshape (the-as uint 0) (the-as uint 0))))
      (set! (-> prim-mesh prim-core collide-as) (collide-spec crate))
      (set! (-> prim-mesh prim-core action) (collide-action solid))
      (set! (-> prim-mesh transform-index) 3)
      (set-vector! (-> prim-mesh local-sphere) 0.0 7372.8 0.0 8192.0)
      (set! (-> cshape total-prims) (the-as uint 1))
      (set! (-> cshape root-prim) prim-mesh)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (let ((root-prim (-> cshape root-prim)))
      (set! (-> cshape backup-collide-as) (-> root-prim prim-core collide-as))
      (set! (-> cshape backup-collide-with) (-> root-prim prim-core collide-with))
      )
    (set! (-> cshape penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            vehicle
            flut-attack
            board
            mech-punch
            dark-punch
            dark-giant
            knocked
            )
          )
    (set! (-> obj root-override) cshape)
    )
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj mask) (logior (process-mask crate) (-> obj mask)))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-market-basket-b" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part-explode) (-> *part-group-id-table* 1008))
  (set! (-> obj draw light-index) (the-as uint 10))
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(defskelgroup skel-market-crate market-crate market-crate-lod0-jg market-crate-idle-ja
              ((market-crate-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2)
              )

(deftype market-crate (market-object)
  ()
  :heap-base #x90
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  )


(defstate die (market-crate)
  :virtual #t
  :enter (behavior ()
    (sound-play "break-veg-wood")
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! market-crate ((obj market-crate) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((cshape (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((prim-mesh (new 'process 'collide-shape-prim-mesh cshape (the-as uint 0) (the-as uint 0))))
      (set! (-> prim-mesh prim-core collide-as) (collide-spec crate))
      (set! (-> prim-mesh prim-core action) (collide-action solid))
      (set! (-> prim-mesh transform-index) 3)
      (set-vector! (-> prim-mesh local-sphere) 0.0 7372.8 0.0 8192.0)
      (set! (-> cshape total-prims) (the-as uint 1))
      (set! (-> cshape root-prim) prim-mesh)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (let ((root-prim (-> cshape root-prim)))
      (set! (-> cshape backup-collide-as) (-> root-prim prim-core collide-as))
      (set! (-> cshape backup-collide-with) (-> root-prim prim-core collide-with))
      )
    (set! (-> cshape penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            vehicle
            flut-attack
            board
            mech-punch
            dark-punch
            dark-giant
            knocked
            )
          )
    (set! (-> obj root-override) cshape)
    )
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj mask) (logior (process-mask crate) (-> obj mask)))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-market-crate" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part-explode) (-> *part-group-id-table* 1006))
  (set! (-> obj draw light-index) (the-as uint 10))
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(defskelgroup skel-market-sack-a market-sack-a market-sack-a-lod0-jg market-sack-a-idle-ja
              ((market-sack-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 2)
              )

(deftype market-sack-a (market-object)
  ()
  :heap-base #x90
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  )


(defstate die (market-sack-a)
  :virtual #t
  :enter (behavior ()
    (sound-play "break-crate")
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! market-sack-a ((obj market-sack-a) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((cshape (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((prim-mesh (new 'process 'collide-shape-prim-mesh cshape (the-as uint 0) (the-as uint 0))))
      (set! (-> prim-mesh prim-core collide-as) (collide-spec crate))
      (set! (-> prim-mesh prim-core action) (collide-action solid))
      (set! (-> prim-mesh transform-index) 3)
      (set-vector! (-> prim-mesh local-sphere) 0.0 7372.8 0.0 8192.0)
      (set! (-> cshape total-prims) (the-as uint 1))
      (set! (-> cshape root-prim) prim-mesh)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (let ((root-prim (-> cshape root-prim)))
      (set! (-> cshape backup-collide-as) (-> root-prim prim-core collide-as))
      (set! (-> cshape backup-collide-with) (-> root-prim prim-core collide-with))
      )
    (set! (-> cshape penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            vehicle
            flut-attack
            board
            mech-punch
            dark-punch
            dark-giant
            knocked
            )
          )
    (set! (-> obj root-override) cshape)
    )
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj mask) (logior (process-mask crate) (-> obj mask)))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-market-sack-a" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part-explode) (-> *part-group-id-table* 1009))
  (set! (-> obj draw light-index) (the-as uint 10))
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(defskelgroup skel-market-sack-b market-sack-b market-sack-b-lod0-jg market-sack-b-idle-ja
              ((market-sack-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 2)
              )

(deftype market-sack-b (market-object)
  ()
  :heap-base #x90
  :method-count-assert 29
  :size-assert         #x110
  :flag-assert         #x1d00900110
  )


(defstate die (market-sack-b)
  :virtual #t
  :enter (behavior ()
    (sound-play "break-veg-straw")
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! market-sack-b ((obj market-sack-b) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((cshape (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((prim-mesh (new 'process 'collide-shape-prim-mesh cshape (the-as uint 0) (the-as uint 0))))
      (set! (-> prim-mesh prim-core collide-as) (collide-spec crate))
      (set! (-> prim-mesh prim-core action) (collide-action solid))
      (set! (-> prim-mesh transform-index) 3)
      (set-vector! (-> prim-mesh local-sphere) 0.0 7372.8 0.0 8192.0)
      (set! (-> cshape total-prims) (the-as uint 1))
      (set! (-> cshape root-prim) prim-mesh)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (let ((root-prim (-> cshape root-prim)))
      (set! (-> cshape backup-collide-as) (-> root-prim prim-core collide-as))
      (set! (-> cshape backup-collide-with) (-> root-prim prim-core collide-with))
      )
    (set! (-> cshape penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            vehicle
            flut-attack
            board
            mech-punch
            dark-punch
            dark-giant
            knocked
            )
          )
    (set! (-> obj root-override) cshape)
    )
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj mask) (logior (process-mask crate) (-> obj mask)))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-market-sack-b" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part-explode) (-> *part-group-id-table* 1010))
  (set! (-> obj draw light-index) (the-as uint 10))
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(defun market-activate ((arg0 level))
  (let* ((name (-> arg0 name))
         (int-arr (cond
                    ((= name 'ctymarka)
                     (new 'static 'boxed-array :type int32 5 0 0 #x64f01c00 #x64f01d00)
                     )
                    ((= name 'ctymarkb)
                     (new 'static 'boxed-array :type int32 5 0 0 #x65001c00 #x65001d00)
                     )
                    )
                  )
         )
    (set! (-> (get-field-spec-by-id (-> *part-id-table* 4361) (sp-field-id spt-userdata)) initial-valuef)
          (the-as float int-arr)
          )
    (set! (-> (get-field-spec-by-id (-> *part-id-table* 4360) (sp-field-id spt-userdata)) initial-valuef)
          (the-as float int-arr)
          )
    )
  (setup-user-array (-> *part-id-table* 4355) "wood-plain-debris")
  (setup-user-array (-> *part-id-table* 4354) "wood-plain-debris")
  (setup-user-array (-> *part-id-table* 4361) "clay-pot-debris-01")
  (setup-user-array (-> *part-id-table* 4360) "clay-pot-debris-01")
  (setup-user-array (-> *part-id-table* 4368) "basket-debris-01")
  (setup-user-array (-> *part-id-table* 4367) "basket-debris-01")
  (setup-user-array (-> *part-id-table* 4378) "cotton-wrap-debris")
  (setup-user-array (-> *part-id-table* 4377) "cotton-wrap-debris")
  (setup-user-array (-> *part-id-table* 4384) "basket-debris-01")
  (setup-user-array (-> *part-id-table* 4379) "straw-bit")
  (setup-user-array (-> *part-id-table* 4380) "straw-ground")
  (setup-user-array (-> *part-id-table* 4385) "cherry")
  0
  (none)
  )
