;;-*-Lisp-*-
(in-package goal)

;; name: ruf.gc
;; name in dgo: ruf
;; dgos: SEB, SWB, UNB

;; DECOMP BEGINS

(defmethod general-event-handler ruffian ((obj ruffian) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('hit-knocked)
     (send-event
       (handle->process (-> obj master-handle))
       'notify
       'hit-by
       (handle->process (-> obj incoming attacker-handle))
       )
     ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
     )
    (('request)
     (case (-> arg3 param 0)
       (('too-far-fail)
        (cond
          ((logtest? (bot-flags bf19) (-> obj bot-flags))
           (send-event obj 'instant-death)
           #t
           )
          (else
            (let ((v1-20 (-> obj ruf-course too-far-fail-speeches)))
              ;; changed
              ;; (set! v1-20 (and (nonzero? v1-20) v1-20))
              (if (and v1-20 (nonzero? v1-20))
                  ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
                  )
              )
            )
          )
        )
       (('bomb-recoil)
        (if (and (and (-> obj next-state) (let ((v1-25 (-> obj next-state name)))
                                            (or (= v1-25 'alert-idle) (= v1-25 'waiting-idle) (= v1-25 'scared-idle))
                                            )
                      )
                 (zero? (logand (-> obj focus-status) (focus-status grabbed)))
                 )
            (go (method-of-object obj bomb-recoil))
            )
        )
       (else
         ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
         )
       )
     )
    (else
      ((method-of-type bot general-event-handler) obj arg0 arg1 arg2 arg3)
      )
    )
  )

;; WARN: Return type mismatch object vs symbol.
(defmethod attacked-by-player? ruffian ((obj ruffian) (arg0 process-focusable))
  "Were we attacked by the player?"
  (the-as
    symbol
    (and (and arg0 (zero? (logand (-> arg0 focus-status) (focus-status disable dead ignore grabbed))))
         (or (and (logtest? (process-mask enemy) (-> arg0 mask))
                  (>= 40960.0 (vector-vector-xz-distance (-> obj root-override2 trans) (get-trans arg0 3)))
                  )
             (and (logtest? (-> arg0 mask) (process-mask target)) (logtest? (-> obj bot-flags) (bot-flags attacked)))
             )
         )
    )
  )

(defmethod ruffian-method-245 ruffian ((obj ruffian))
  (-> obj root-override2)
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (vector-! s5-0 (target-pos 0) (-> obj root-override2 trans))
    (let* ((f0-1 (vector-dot (-> obj follow-dir) s5-0))
           (f0-2 (- (- (-> obj follow-offset)) f0-1))
           )
      0.0
      (let ((f0-5 (if (>= f0-2 0.0)
                      (- 1.0 (* 0.000048828126 (fmin 20480.0 f0-2)))
                      (* -0.000048828126 (fmax -20480.0 f0-2))
                      )
                  )
            (s5-1 (-> obj nav))
            )
        (set! (-> s5-1 target-speed) (lerp (-> obj min-speed) (-> obj max-speed) f0-5))
        )
      )
    )
  0
  (none)
  )

(defmethod enemy-method-97 ruffian ((obj ruffian))
  (with-pp
    (let* ((s5-0 (handle->process (-> obj attacker-handle)))
           (v1-3 (if (type? s5-0 process-focusable)
                     s5-0
                     )
                 )
           )
      (when v1-3
        (cond
          ((= (-> v1-3 type) target)
           (when (or (not (logtest? (-> obj bot-flags) (bot-flags attacked)))
                     (>= (- (-> pp clock frame-counter) (-> obj attacker-time)) (seconds 1.5))
                     )
             (if (logtest? (-> obj bot-flags) (bot-flags attacked))
                 (reset-attacker! obj)
                 )
             (set! v1-3 (the-as process #f))
             (set! (-> obj attacker-handle) (the-as handle #f))
             )
           )
          (else
            (when (>= (- (-> pp clock frame-counter) (-> obj attacker-time)) (seconds 6))
              (set! v1-3 (the-as process #f))
              (set! (-> obj attacker-handle) (the-as handle #f))
              )
            )
          )
        )
      (let ((a0-21 (-> obj focus-mode))
            (s5-1 (the-as process #f))
            )
        (cond
          ((zero? a0-21)
           (cond
             (v1-3
               (set! s5-1 v1-3)
               )
             ((begin (set! s5-1 (select-focus! obj)) s5-1)
              (empty)
              )
             (else
               (let ((s4-0 (handle->process (-> obj poi-handle))))
                 (set! s5-1 (if (type? s4-0 process-focusable)
                                s4-0
                                )
                       )
                 )
               (if s5-1
                   (empty)
                   (set! s5-1 *target*)
                   )
               )
             )
           )
          ((= a0-21 1)
           (cond
             (v1-3
               (set! s5-1 v1-3)
               )
             (else
               (let ((s4-1 (handle->process (-> obj poi-handle))))
                 (set! s5-1 (if (type? s4-1 process-focusable)
                                s4-1
                                )
                       )
                 )
               (cond
                 (s5-1
                   (empty)
                   )
                 ((begin (set! s5-1 (select-focus! obj)) s5-1)
                  (empty)
                  )
                 (else
                   (set! s5-1 *target*)
                   )
                 )
               )
             )
           )
          )
        (cond
          (s5-1
            (try-update-focus (-> obj focus) (the-as process-focusable s5-1) obj)
            (if (and (logtest? (-> obj bot-flags) (bot-flags attacked)) (!= (-> s5-1 type) target))
                (logclear! (-> obj bot-flags) (bot-flags attacked))
                )
            )
          (else
            (clear-focused (-> obj focus))
            (logclear! (-> obj bot-flags) (bot-flags attacked))
            )
          )
        s5-1
        )
      )
    )
  )

;; WARN: Return type mismatch bot-flags vs none.
(defmethod enemy-method-106 ruffian ((obj ruffian) (arg0 process) (arg1 object) (arg2 int) (arg3 attack-info))
  (let ((t9-0 (method-of-type bot enemy-method-106)))
    (t9-0 obj arg0 arg1 arg2 arg3)
    )
  (if (= (-> arg3 mode) 'beam)
      (set! (-> obj bot-flags) (logior (bot-flags bf25) (-> obj bot-flags)))
      (logclear! (-> obj bot-flags) (bot-flags bf25))
      )
  (none)
  )

(defmethod ruffian-method-242 ruffian ((obj ruffian))
  (local-vars (a3-0 int))
  (when (not (channel-active? obj (the-as uint 0)))
    (let ((v1-2 0))
      (if (logtest? (bot-flags bf25) (-> obj bot-flags))
          (set! a3-0 (logior v1-2 128))
          (set! a3-0 (logior v1-2 64))
          )
      )
    (let ((a1-3 (bot-speech-list-method-9
                  (-> obj ruf-course ouch-speeches)
                  obj
                  (-> obj ruf-course speeches)
                  (the-as speech-flags a3-0)
                  )
                )
          )
      (if (>= a1-3 0)
          (play-speech obj a1-3)
          )
      )
    )
  (none)
  )

(defmethod play-attacked-speech ruffian ((obj ruffian))
  (local-vars (a3-0 int))
  (when (not (channel-active? obj (the-as uint 0)))
    (let ((v1-2 0))
      (if (logtest? #x3c00000 (-> obj incoming penetrate-using))
          (set! a3-0 (logior v1-2 128))
          (set! a3-0 (logior v1-2 64))
          )
      )
    (let ((a1-3 (bot-speech-list-method-9
                  (-> obj ruf-course attack-player-speeches)
                  obj
                  (-> obj ruf-course speeches)
                  (the-as speech-flags a3-0)
                  )
                )
          )
      (if (>= a1-3 0)
          (play-speech obj a1-3)
          )
      )
    )
  (none)
  )

;; WARN: Return type mismatch object vs symbol.
(defmethod alive? ruffian ((obj ruffian))
  (let ((t9-0 (method-of-type bot alive?)))
    (the-as
      symbol
      (and (t9-0 obj)
           (-> obj next-state)
           (let ((v1-3 (-> obj next-state name)))
             (or (= v1-3 'waiting-idle) (= v1-3 'waiting-turn) (= v1-3 'scared-idle) (= v1-3 'scared-turn))
             )
           )
      )
    )
  )

(defmethod ruffian-method-238 ruffian ((obj ruffian))
  (and (!= (-> obj focus-info fproc type) target) (>= 16384.0 (-> obj focus-info bullseye-xz-dist)))
  )

(defmethod ruffian-method-237 ruffian ((obj ruffian))
  (with-pp
    (or (and (logtest? (-> obj bot-flags) (bot-flags attacked)) (= (-> obj focus-info fproc type) target))
        (and (>= 40960.0 (-> obj focus-info bullseye-xz-dist))
             (= (-> obj focus-info los) 1)
             (>= (-> pp clock frame-counter) (-> obj next-fire-time))
             )
        )
    )
  )

(defmethod ruffian-method-243 ruffian ((obj ruffian))
  (let ((v1-0 (-> obj bot-flags)))
    (and (logtest? (bot-flags bf20) v1-0) (zero? (logand (bot-flags bf21) v1-0)))
    )
  )

(defmethod bot-method-190 ruffian ((obj ruffian))
  (if (logtest? (bot-flags bf19) (-> obj bot-flags))
      #t
      ((method-of-type bot bot-method-190) obj)
      )
  )

(defmethod go-hostile ruffian ((obj ruffian))
  (bot-method-223 obj #t)
  (cond
    ((not (bot-method-214 obj))
     (react-to-focus obj)
     )
    ((ruffian-method-238 obj)
     (go (method-of-object obj kick))
     )
    ((ruffian-method-237 obj)
     (go (method-of-object obj blast))
     )
    (else
      (go (method-of-object obj alert-idle))
      )
    )
  (none)
  )

(defmethod react-to-focus ruffian ((obj ruffian))
  "@TODO - flesh out docs"
  (cond
    ((bot-method-214 obj)
     (go-hostile obj)
     )
    ((ruffian-method-243 obj)
     (go (method-of-object obj plant-bomb))
     )
    (else
      (ruffian-method-240 obj)
      )
    )
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod ruffian-method-241 ruffian ((obj ruffian))
  (cond
    ((bot-method-214 obj)
     (go (method-of-object obj alert-turn))
     )
    ((logtest? (bot-flags bf19) (-> obj bot-flags))
     (go (method-of-object obj scared-turn))
     )
    (else
      (go (method-of-object obj waiting-turn))
      )
    )
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod ruffian-method-240 ruffian ((obj ruffian))
  (cond
    ((bot-method-214 obj)
     (go (method-of-object obj alert-idle))
     )
    ((ruffian-method-243 obj)
     (go (method-of-object obj plant-bomb))
     )
    ((logtest? (bot-flags bf19) (-> obj bot-flags))
     (go (method-of-object obj scared-idle))
     )
    (else
      (go (method-of-object obj waiting-idle))
      )
    )
  (none)
  )

(defmethod go-idle ruffian ((obj ruffian))
  (ruffian-method-240 obj)
  (none)
  )
