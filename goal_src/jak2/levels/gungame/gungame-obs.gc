;;-*-Lisp-*-
(in-package goal)

;; name: gungame-obs.gc
;; name in dgo: gungame-obs
;; dgos: GGA

;; DECOMP BEGINS

(deftype training-path (process-drawable)
  ((num uint32  :offset-assert 200)
   )
  :heap-base #x50
  :method-count-assert 21
  :size-assert         #xcc
  :flag-assert         #x15005000cc
  (:methods
    (idle () _type_ :state 20)
    )
  )


(deftype training-manager (process)
  ((actor-group            (pointer actor-group)    :offset-assert 128)
   (actor-group-count      int32                    :offset-assert 132)
   (start-time             time-frame               :offset-assert 136)
   (score                  int32                    :offset-assert 144)
   (first-enemy-shown?     symbol                   :offset-assert 148)
   (first-citizen-shown?   symbol                   :offset-assert 152)
   (open-end?              symbol                   :offset-assert 156)
   (entrance-crates        handle                32 :offset-assert 160)
   (course-crates          handle                32 :offset-assert 416)
   (course                 (array tpath-info)       :offset-assert 672)
   (end-door               uint32                   :offset-assert 676)
   (total-target           uint32                   :offset-assert 680)
   (total-target-destroyed uint32                   :offset-assert 684)
   (total-bonus            uint32                   :offset-assert 688)
   (total-bonus-destroyed  uint32                   :offset-assert 692)
   (total-civilian         uint32                   :offset-assert 696)
   (hud-score              handle                   :offset-assert 704)
   (hud-goal               handle                   :offset-assert 712)
   (in-out                 uint32                   :offset-assert 720)
   (combo-done?            symbol                   :offset-assert 724)
   (voicebox               handle                   :offset-assert 728)
   (last-sound-id          sound-id                 :offset-assert 736)
   (dummies                handle                2  :offset-assert 744)
   (task-gold              uint16                   :offset-assert 760)
   (task-silver            uint16                   :offset-assert 762)
   (task-bronze            uint16                   :offset-assert 764)
   (game-score             uint8                    :offset-assert 766)
   (training-goal          float                    :offset-assert 768)
   (training?              symbol                   :offset-assert 772)
   (egg-count              int32                    :offset-assert 776)
   (medal                  int32                    :offset-assert 780)
   (gui-id                 sound-id                 :offset-assert 784)
   )
  :heap-base #x2a0
  :method-count-assert 33
  :size-assert         #x314
  :flag-assert         #x2102a00314
  (:methods
    (wait () _type_ :state 14)
    (course () _type_ :state 15)
    (end-course () _type_ :state 16)
    (red-training-intro () _type_ :state 17)
    (red-training () _type_ :state 18)
    (red-yellow-training () _type_ :state 19)
    (yellow-training-intro () _type_ :state 20)
    (training-manager-method-21 (_type_ handle) entity 21)
    (training-manager-method-22 (_type_ symbol) symbol 22)
    (training-manager-method-23 (_type_ (array gungame-crate)) symbol 23)
    (training-manager-method-24 (_type_) symbol 24)
    (training-manager-method-25 (_type_) symbol 25)
    (training-manager-method-26 (_type_) int 26)
    (training-manager-method-27 (_type_ (array tpath-info)) symbol 27)
    (training-manager-method-28 (_type_) none 28)
    (training-manager-method-29 (_type_ vector) vector 29)
    (render-text (_type_ text-id) float 30)
    (training-manager-method-31 (_type_) none 31)
    (training-manager-method-32 (_type_) none 32)
    )
  (:states
    yellow-training
    )
  )


(defmethod training-manager-method-32 training-manager ((obj training-manager))
  (when (handle->process (-> obj voicebox))
    (if (= (get-status *gui-control* (-> obj last-sound-id)) (gui-status unknown))
        (send-event (handle->process (-> obj voicebox)) 'speak-effect #f)
        (send-event (handle->process (-> obj voicebox)) 'speak-effect #t)
        )
    )
  (cond
    ((= (-> (level-get-target-inside *level*) name) 'gungame)
     (if (zero? (-> obj gui-id))
         (set! (-> obj gui-id)
               (add-process *gui-control* obj (gui-channel message) (gui-action play) (-> obj name) 81920.0 0)
               )
         )
     )
    (else
      (when (nonzero? (-> obj gui-id))
        (set-action!
          *gui-control*
          (gui-action stop)
          (-> obj gui-id)
          (gui-channel none)
          (gui-action none)
          (the-as string #f)
          (the-as (function gui-connection symbol) #f)
          (the-as process #f)
          )
        (set! (-> obj gui-id) (new 'static 'sound-id))
        0
        )
      )
    )
  (none)
  )

(defstate idle (training-path)
  :virtual #t
  :code (the-as (function none :behavior training-path) sleep-code)
  :post (behavior ()
    (when *display-path-marks*
      (let ((gp-0 add-debug-text-3d)
            (s5-0 #t)
            (s4-0 324)
            )
        (format (clear *temp-string*) "path-~D" (-> self num))
        (gp-0
          s5-0
          (the-as bucket-id s4-0)
          *temp-string*
          (get-point-in-path! (-> self path) (new 'stack-no-clear 'vector) 0.0 'interp)
          (font-color green)
          (the-as vector2h #f)
          )
        )
      )
    (none)
    )
  )

(defmethod deactivate training-manager ((obj training-manager))
  (if (handle->process (-> obj voicebox))
      (send-event (handle->process (-> obj voicebox)) 'die)
      )
  (training-manager-method-24 obj)
  (training-manager-method-25 obj)
  ((the-as (function process none) (find-parent-method training-manager 10)) obj)
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! training-path ((obj training-path) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((s5-0 (length "training-path-"))
        (a0-3 (length (-> obj name)))
        (v1-2 0)
        )
    (cond
      ((= a0-3 (+ s5-0 1))
       (set! v1-2 (the-as int (+ (-> obj name data 14) -48 v1-2)))
       )
      ((= a0-3 (+ s5-0 2))
       (let ((v1-3 (+ v1-2 (* (the-as uint 10) (+ (-> obj name data 14) -48)))))
         (set! v1-2 (the-as int (+ (-> obj name data 15) -48 v1-3)))
         )
       )
      ((= a0-3 (+ s5-0 3))
       (let ((v1-5 (+ v1-2
                      (* (the-as uint 100) (+ (-> obj name data 14) -48))
                      (* (the-as uint 10) (+ (-> obj name data 15) -48))
                      )
                   )
             )
         (set! v1-2 (the-as int (+ (-> obj name data 16) -48 v1-5)))
         )
       )
      )
    (set! (-> obj num) (the-as uint (+ v1-2 -76)))
    )
  (let ((v1-8 (new 'process 'path-control obj 'path 0.0 (the-as entity #f) #t)))
    (when (nonzero? v1-8)
      (set! (-> obj path) v1-8)
      (logior! (-> v1-8 flags) (path-control-flag display draw-line draw-point draw-text))
      )
    )
  (go (method-of-object obj idle))
  (none)
  )

(defmethod training-manager-method-31 training-manager ((obj training-manager))
  (cond
    ((= (-> (level-get-target-inside *level*) name) 'gungame)
     (when (or (zero? (-> obj in-out)) (= (-> obj in-out) 1))
       (set-setting! 'minimap 'clear 0.0 (minimap-flag minimap))
       (set! (-> obj in-out) (the-as uint 2))
       )
     )
    (else
      (when (or (zero? (-> obj in-out)) (= (-> obj in-out) 2))
        (when (handle->process (-> obj voicebox))
          (send-event (handle->process (-> obj voicebox)) 'die)
          (set! (-> obj voicebox) (the-as handle #f))
          )
        (remove-setting! 'minimap)
        (set! (-> obj in-out) (the-as uint 1))
        )
      )
    )
  (none)
  )

(defmethod render-text training-manager ((obj training-manager) (arg0 text-id))
  (when (= (get-status *gui-control* (-> obj gui-id)) (gui-status active))
    (let ((s5-1
            (new 'stack 'font-context *font-default-matrix* 32 290 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (set! (-> s5-1 flags) (font-flags shadow kerning left large))
      (let ((v1-4 s5-1))
        (set! (-> v1-4 width) (the float 440))
        )
      (let ((v1-5 s5-1))
        (set! (-> v1-5 height) (the float 80))
        )
      (let ((v1-6 s5-1))
        (set! (-> v1-6 scale) 0.7)
        )
      (let ((s4-0 print-game-text))
        (format (clear *temp-string*) (lookup-text! *common-text* arg0 #f))
        (s4-0 *temp-string* s5-1 #f 44 (bucket-id progress))
        )
      )
    )
  )

(defstate red-training-intro (training-manager)
  :virtual #t
  :enter (behavior ()
    (set! (-> self start-time) 0)
    0
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :code (behavior ()
    (until #f
      (if (= (-> (level-get-target-inside *level*) name) 'gungame)
          (goto cfg-4)
          )
      (suspend)
      )
    #f
    (label cfg-4)
    (if (not (handle->process (-> self voicebox)))
        (set! (-> self voicebox) (ppointer->handle (voicebox-spawn *target* (target-pos 0))))
        )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc001" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc002" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc003" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (until (cpad-pressed? 0 r1)
      (render-text self (text-id gungame-tutorial-fire-button))
      (suspend)
      )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc004" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc005" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc006" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc007" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (when *target*
      (while (focus-test? *target* gun)
        (render-text self (text-id gungame-tutorial-put-red-away))
        (suspend)
        )
      )
    (set! (-> self last-sound-id)
          (add-process *gui-control* *target* (gui-channel sig) (gui-action play) "sigc008" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc009" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (while (or (not *target*) (not (logtest? (focus-status gun) (-> *target* focus-status))))
      (render-text self (text-id gungame-tutorial-take-red-out))
      (suspend)
      )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc010" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc011" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (when (nonzero? (training-manager-method-26 self))
      (set! (-> self last-sound-id)
            (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc012" -99.0 0)
            )
      (let ((gp-2 (training-manager-method-26 self)))
        (while (= (training-manager-method-26 self) gp-2)
          (render-text self (text-id gungame-tutorial-shoot-the-crates))
          (suspend)
          )
        )
      (set! (-> self last-sound-id)
            (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc013" -99.0 0)
            )
      )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc014" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (task-node-close! (game-task-node city-red-gun-training-introduction))
    (go-virtual red-training)
    (none)
    )
  :post (behavior ()
    (training-manager-method-32 self)
    (training-manager-method-31 self)
    (none)
    )
  )

(defstate red-training (training-manager)
  :virtual #t
  :enter (behavior ()
    (set! (-> self start-time) 0)
    0
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :trans (behavior ()
    (when (and (zero? (-> self start-time))
               (or (and (logtest? (pad-buttons confirm) (-> *cpad-list* cpads 0 button0-rel 0))
                        (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                          (set! (-> a1-0 from) (process->ppointer self))
                          (set! (-> a1-0 num-params) 1)
                          (set! (-> a1-0 message) 'player-in-open-area?)
                          (set! (-> a1-0 param 0) (the-as uint #f))
                          (let ((t9-0 send-event-function)
                                (v1-11 (-> self actor-group 1 data 0 actor))
                                )
                            (t9-0
                              (if v1-11
                                  (-> v1-11 extra process)
                                  )
                              a1-0
                              )
                            )
                          )
                        )
                   (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-1 from) (process->ppointer self))
                     (set! (-> a1-1 num-params) 1)
                     (set! (-> a1-1 message) 'player-in-open-area?)
                     (set! (-> a1-1 param 0) (the-as uint #t))
                     (let ((t9-1 send-event-function)
                           (v1-20 (-> self actor-group 1 data 0 actor))
                           )
                       (t9-1
                         (if v1-20
                             (-> v1-20 extra process)
                             )
                         a1-1
                         )
                       )
                     )
                   )
               )
      (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-2 from) (process->ppointer self))
        (set! (-> a1-2 num-params) 1)
        (set! (-> a1-2 message) 'player-in-open-area?)
        (set! (-> a1-2 param 0) (the-as uint #f))
        (let ((t9-2 send-event-function)
              (v1-29 (-> self actor-group 1 data 0 actor))
              )
          (t9-2
            (if v1-29
                (-> v1-29 extra process)
                )
            a1-2
            )
          )
        )
      (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons circle x confirm))
      (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons circle x confirm))
      (set! (-> self end-door) (the-as uint 1))
      (set! (-> self course) *red-training-path-global-info*)
      (training-manager-method-24 self)
      (training-manager-method-23 self *gungame-red-crates-pos*)
      (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons circle x confirm))
      (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons circle x confirm))
      (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-4 from) (process->ppointer self))
        (set! (-> a1-4 num-params) 1)
        (set! (-> a1-4 message) 'open)
        (set! (-> a1-4 param 0) (the-as uint #f))
        (let ((t9-5 send-event-function)
              (v1-52 (-> self actor-group 1 data 0 actor))
              )
          (t9-5
            (if v1-52
                (-> v1-52 extra process)
                )
            a1-4
            )
          )
        )
      (set! (-> self start-time) (+ (current-time) (seconds 1)))
      )
    (if (task-node-open? (game-task-node city-yellow-gun-training-introduction))
        (go-virtual yellow-training-intro)
        )
    (none)
    )
  :code (behavior ()
    (suspend)
    (when (task-node-open? (game-task-node city-red-gun-training-try-once))
      (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-0 from) (process->ppointer self))
        (set! (-> a1-0 num-params) 1)
        (set! (-> a1-0 message) 'open)
        (set! (-> a1-0 param 0) (the-as uint #f))
        (let ((t9-1 send-event-function)
              (v1-7 (-> self actor-group 1 data 0 actor))
              )
          (t9-1
            (if v1-7
                (-> v1-7 extra process)
                )
            a1-0
            )
          )
        )
      )
    (until #f
      (cond
        ((zero? (-> self start-time))
         (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-1 from) (process->ppointer self))
           (set! (-> a1-1 num-params) 1)
           (set! (-> a1-1 message) 'player-in-open-area?)
           (set! (-> a1-1 param 0) (the-as uint #f))
           (let ((t9-2 send-event-function)
                 (v1-17 (-> self actor-group 1 data 0 actor))
                 )
             (if (t9-2
                   (if v1-17
                       (-> v1-17 extra process)
                       )
                   a1-1
                   )
                 (render-text self (text-id gungame-prompt-red))
                 )
             )
           )
         )
        (else
          (when (< (-> self start-time) (current-time))
            (set! (-> self course) *red-training-path-global-info*)
            (set! (-> self end-door) (the-as uint 1))
            (training-manager-method-24 self)
            (training-manager-method-23 self *gungame-red-crates-pos*)
            (go-virtual course)
            )
          )
        )
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (training-manager-method-32 self)
    (training-manager-method-31 self)
    (none)
    )
  )

(defstate yellow-training (training-manager)
  :enter (behavior ()
    (set! (-> self start-time) 0)
    0
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :trans (behavior ()
    (when (and (zero? (-> self start-time)) (logtest? (pad-buttons confirm) (-> *cpad-list* cpads 0 button0-rel 0)))
      (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-3 from) (process->ppointer self))
        (set! (-> a1-3 num-params) 1)
        (set! (-> a1-3 message) 'player-in-open-area?)
        (set! (-> a1-3 param 0) (the-as uint #f))
        (let ((t9-0 send-event-function)
              (v1-9 (-> self actor-group 1 data 1 actor))
              )
          (when (t9-0
                  (if v1-9
                      (-> v1-9 extra process)
                      )
                  a1-3
                  )
            (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons circle x confirm))
            (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons circle x confirm))
            (set! (-> self end-door) (the-as uint 0))
            (set! (-> self course) *yellow-training-path-global-info*)
            (training-manager-method-24 self)
            (training-manager-method-23 self *gungame-yellow-crates-pos*)
            (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-5 from) (process->ppointer self))
              (set! (-> a1-5 num-params) 1)
              (set! (-> a1-5 message) 'open)
              (set! (-> a1-5 param 0) (the-as uint #f))
              (let ((t9-3 send-event-function)
                    (v1-27 (-> self actor-group 1 data 1 actor))
                    )
                (t9-3
                  (if v1-27
                      (-> v1-27 extra process)
                      )
                  a1-5
                  )
                )
              )
            (set! (-> self start-time) (+ (current-time) (seconds 1)))
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (training-manager-method-24 self)
    (training-manager-method-23 self *gungame-yellow-crates-pos*)
    (suspend)
    (when (task-node-open? (game-task-node city-yellow-gun-training-introduction))
      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-1 from) (process->ppointer self))
        (set! (-> a1-1 num-params) 1)
        (set! (-> a1-1 message) 'open)
        (set! (-> a1-1 param 0) (the-as uint #f))
        (let ((t9-3 send-event-function)
              (v1-11 (-> self actor-group 1 data 1 actor))
              )
          (t9-3
            (if v1-11
                (-> v1-11 extra process)
                )
            a1-1
            )
          )
        )
      )
    (until #f
      (cond
        ((zero? (-> self start-time))
         (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-2 from) (process->ppointer self))
           (set! (-> a1-2 num-params) 1)
           (set! (-> a1-2 message) 'player-in-open-area?)
           (set! (-> a1-2 param 0) (the-as uint #f))
           (let ((t9-4 send-event-function)
                 (v1-21 (-> self actor-group 1 data 1 actor))
                 )
             (if (t9-4
                   (if v1-21
                       (-> v1-21 extra process)
                       )
                   a1-2
                   )
                 (render-text self (text-id gungame-prompt-yellow))
                 )
             )
           )
         )
        (else
          (when (< (-> self start-time) (current-time))
            (set! (-> self end-door) (the-as uint 0))
            (set! (-> self course) *yellow-training-path-global-info*)
            (training-manager-method-24 self)
            (training-manager-method-23 self *gungame-yellow-crates-pos*)
            (go-virtual course)
            )
          )
        )
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (training-manager-method-32 self)
    (training-manager-method-31 self)
    (none)
    )
  )

(defstate red-yellow-training (training-manager)
  :virtual #t
  :enter (behavior ()
    (set! (-> self start-time) 0)
    0
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :trans (behavior ()
    (if (task-node-open? (game-task-node city-yellow-gun-training-introduction))
        (go-virtual yellow-training-intro)
        )
    (when (and (zero? (-> self start-time)) (logtest? (pad-buttons confirm) (-> *cpad-list* cpads 0 button0-rel 0)))
      (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-3 from) (process->ppointer self))
        (set! (-> a1-3 num-params) 1)
        (set! (-> a1-3 message) 'player-in-open-area?)
        (set! (-> a1-3 param 0) (the-as uint #f))
        (let ((t9-2 send-event-function)
              (v1-14 (-> self actor-group 1 data 0 actor))
              )
          (cond
            ((and (t9-2
                    (if v1-14
                        (-> v1-14 extra process)
                        )
                    a1-3
                    )
                  (task-node-closed? (game-task-node city-red-gun-training-resolution))
                  )
             (set! (-> self end-door) (the-as uint 1))
             (set! (-> self course) *red-training-path-global-info*)
             (training-manager-method-24 self)
             (training-manager-method-23 self *gungame-red-crates-pos*)
             (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons circle x confirm))
             (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons circle x confirm))
             (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
               (set! (-> a1-5 from) (process->ppointer self))
               (set! (-> a1-5 num-params) 1)
               (set! (-> a1-5 message) 'open)
               (set! (-> a1-5 param 0) (the-as uint #f))
               (let ((t9-6 send-event-function)
                     (v1-35 (-> self actor-group 1 data 0 actor))
                     )
                 (t9-6
                   (if v1-35
                       (-> v1-35 extra process)
                       )
                   a1-5
                   )
                 )
               )
             (set! (-> self start-time) (+ (current-time) (seconds 1)))
             )
            ((let ((a1-6 (new 'stack-no-clear 'event-message-block)))
               (set! (-> a1-6 from) (process->ppointer self))
               (set! (-> a1-6 num-params) 1)
               (set! (-> a1-6 message) 'player-in-open-area?)
               (set! (-> a1-6 param 0) (the-as uint #f))
               (let ((t9-7 send-event-function)
                     (v1-47 (-> self actor-group 1 data 1 actor))
                     )
                 (and (t9-7
                        (if v1-47
                            (-> v1-47 extra process)
                            )
                        a1-6
                        )
                      (task-node-closed? (game-task-node city-yellow-gun-training-resolution))
                      )
                 )
               )
             (set! (-> self end-door) (the-as uint 0))
             (set! (-> self course) *yellow-training-path-global-info*)
             (training-manager-method-24 self)
             (training-manager-method-23 self *gungame-yellow-crates-pos*)
             (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons circle x confirm))
             (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons circle x confirm))
             (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
               (set! (-> a1-8 from) (process->ppointer self))
               (set! (-> a1-8 num-params) 1)
               (set! (-> a1-8 message) 'open)
               (set! (-> a1-8 param 0) (the-as uint #f))
               (let ((t9-11 send-event-function)
                     (v1-67 (-> self actor-group 1 data 1 actor))
                     )
                 (t9-11
                   (if v1-67
                       (-> v1-67 extra process)
                       )
                   a1-8
                   )
                 )
               )
             (set! (-> self start-time) (+ (current-time) (seconds 1)))
             )
            )
          )
        )
      )
    (when (and (zero? (-> self start-time)) (cpad-pressed? 0 square))
      (cond
        ((and (logtest? (-> *game-info* secrets) (game-secrets gungame-blue))
              (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
                (set! (-> a1-9 from) (process->ppointer self))
                (set! (-> a1-9 num-params) 1)
                (set! (-> a1-9 message) 'player-in-open-area?)
                (set! (-> a1-9 param 0) (the-as uint #f))
                (let ((t9-12 send-event-function)
                      (v1-86 (-> self actor-group 1 data 0 actor))
                      )
                  (t9-12
                    (if v1-86
                        (-> v1-86 extra process)
                        )
                    a1-9
                    )
                  )
                )
              )
         (set! (-> self end-door) (the-as uint 1))
         (set! (-> self course) *blue-training-path-global-info*)
         (training-manager-method-24 self)
         (training-manager-method-23 self *gungame-blue-crates-pos*)
         (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons square))
         (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons square))
         (let ((a1-11 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-11 from) (process->ppointer self))
           (set! (-> a1-11 num-params) 1)
           (set! (-> a1-11 message) 'open)
           (set! (-> a1-11 param 0) (the-as uint #f))
           (let ((t9-15 send-event-function)
                 (v1-105 (-> self actor-group 1 data 0 actor))
                 )
             (t9-15
               (if v1-105
                   (-> v1-105 extra process)
                   )
               a1-11
               )
             )
           )
         (set! (-> self start-time) (+ (current-time) (seconds 1)))
         )
        ((and (logtest? (-> *game-info* secrets) (game-secrets gungame-dark))
              (let ((a1-12 (new 'stack-no-clear 'event-message-block)))
                (set! (-> a1-12 from) (process->ppointer self))
                (set! (-> a1-12 num-params) 1)
                (set! (-> a1-12 message) 'player-in-open-area?)
                (set! (-> a1-12 param 0) (the-as uint #f))
                (let ((t9-16 send-event-function)
                      (v1-120 (-> self actor-group 1 data 1 actor))
                      )
                  (t9-16
                    (if v1-120
                        (-> v1-120 extra process)
                        )
                    a1-12
                    )
                  )
                )
              )
         (set! (-> self end-door) (the-as uint 0))
         (set! (-> self course) *peace-training-path-global-info*)
         (training-manager-method-24 self)
         (training-manager-method-23 self *gungame-peace-crates-pos*)
         (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons square))
         (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons square))
         (let ((a1-14 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-14 from) (process->ppointer self))
           (set! (-> a1-14 num-params) 1)
           (set! (-> a1-14 message) 'open)
           (set! (-> a1-14 param 0) (the-as uint #f))
           (let ((t9-19 send-event-function)
                 (v1-137 (-> self actor-group 1 data 1 actor))
                 )
             (t9-19
               (if v1-137
                   (-> v1-137 extra process)
                   )
               a1-14
               )
             )
           )
         (set! (-> self start-time) (+ (current-time) (seconds 1)))
         )
        )
      )
    (none)
    )
  :code (behavior ()
    (local-vars (a0-3 object) (a0-7 object))
    (until #f
      (let ((gp-0 'gungame))
        (b! (!= (-> (level-get-target-inside *level*) name) gp-0) cfg-3 :delay (empty-form))
        )
      (b! #t cfg-4 :delay (nop!))
      (the-as none 0)
      (label cfg-3)
      (suspend)
      )
    #f
    (label cfg-4)
    (set! (-> self egg-count) 0)
    (if (not (task-node-open? (game-task-node sewer-enemy-resolution)))
        (set! (-> self last-sound-id)
              (add-process *gui-control* self (gui-channel sig) (gui-action play) "cityv178" -99.0 0)
              )
        )
    (until #f
      (b! (nonzero? (-> self start-time)) cfg-31 :delay (nop!))
      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-1 from) (process->ppointer self))
        (set! (-> a1-1 num-params) 1)
        (set! (-> a1-1 message) 'player-in-open-area?)
        (set! (-> a1-1 param 0) (the-as uint #f))
        (let ((t9-3 send-event-function))
          (let ((v1-17 (-> self actor-group 1 data 0 actor)))
            (b! (not v1-17) cfg-11 :delay (set! a0-3 #f))
            (set! a0-3 (-> v1-17 extra process))
            )
          (label cfg-11)
          (b!
            (not (and (t9-3 (the-as process-tree a0-3) a1-1)
                      (task-node-closed? (game-task-node city-red-gun-training-resolution))
                      )
                 )
            cfg-19
            :delay (empty-form)
            )
          )
        )
      (if (logtest? (-> *game-info* secrets) (game-secrets gungame-blue))
          (render-text self (text-id gungame-prompt-red-or-blue))
          (render-text self (text-id gungame-prompt-red))
          )
      (b! #t cfg-30 :delay (nop!))
      (label cfg-19)
      (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-4 from) (process->ppointer self))
        (set! (-> a1-4 num-params) 1)
        (set! (-> a1-4 message) 'player-in-open-area?)
        (set! (-> a1-4 param 0) (the-as uint #f))
        (let ((t9-7 send-event-function))
          (let ((v1-35 (-> self actor-group 1 data 1 actor)))
            (b! (not v1-35) cfg-23 :delay (set! a0-7 #f))
            (set! a0-7 (-> v1-35 extra process))
            )
          (label cfg-23)
          (when (and (t9-7 (the-as process-tree a0-7) a1-4)
                     (task-node-closed? (game-task-node city-yellow-gun-training-resolution))
                     )
            (if (logtest? (-> *game-info* secrets) (game-secrets gungame-dark))
                (render-text self (text-id gungame-prompt-yellow-or-purple))
                (render-text self (text-id gungame-prompt-yellow))
                )
            )
          )
        )
      (label cfg-30)
      (b! #t cfg-33 :delay (nop!))
      (label cfg-31)
      (if (< (-> self start-time) (current-time))
          (go-virtual course)
          )
      (label cfg-33)
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (training-manager-method-32 self)
    (training-manager-method-31 self)
    (none)
    )
  )

(define *yellow-training-path-combo-info*
  (new 'static 'boxed-array :type tpath-info
    (new 'static 'tpath-info
      :ref-time-num -1
      :anim1 (new 'static 'inline-array tpath-control-frame 4
        (new 'static 'tpath-control-frame :path-num #x23)
        (new 'static 'tpath-control-frame :time 0.3 :command (tpath-command arise))
        (new 'static 'tpath-control-frame :time -1.0 :command (tpath-command wait))
        (new 'static 'tpath-control-frame :command (tpath-command end))
        )
      )
    (new 'static 'tpath-info
      :ref-time-num -1
      :anim1 (new 'static 'inline-array tpath-control-frame 4
        (new 'static 'tpath-control-frame :path-num #x23)
        (new 'static 'tpath-control-frame :time 0.3 :path-pos #x7f :command (tpath-command arise))
        (new 'static 'tpath-control-frame :time -1.0 :command (tpath-command wait))
        (new 'static 'tpath-control-frame :command (tpath-command end))
        )
      )
    )
  )

(defstate yellow-training-intro (training-manager)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('path)
       (let ((v1-2 (training-manager-method-21 self (the-as handle (-> event param 0)))))
         (if v1-2
             (-> (the-as process-drawable (if v1-2
                                              (the-as process-drawable (-> v1-2 extra process))
                                              )
                         )
                 path
                 )
             #f
             )
         )
       )
      (('combo)
       (when (or (not (handle->process (-> self dummies 0))) (not (handle->process (-> self dummies 1))))
         (let ((v0-1 (the-as object #t)))
           (set! (-> self combo-done?) (the-as symbol v0-1))
           v0-1
           )
         )
       )
      )
    )
  :enter (behavior ()
    (set! (-> self start-time) 0)
    (training-manager-method-27 self *yellow-training-path-combo-info*)
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  :code (behavior ()
    (until #f
      (if (= (-> (level-get-target-inside *level*) name) 'gungame)
          (goto cfg-4)
          )
      (suspend)
      )
    #f
    (label cfg-4)
    (if (not (handle->process (-> self voicebox)))
        (set! (-> self voicebox) (ppointer->handle (voicebox-spawn *target* (target-pos 0))))
        )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc015" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc016" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc017" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (let ((gp-2 (-> *game-info* gun-type)))
      (until (!= gp-2 (-> *game-info* gun-type))
        (render-text self (text-id gungame-tutorial-switch-to-yellow))
        (suspend)
        )
      )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc073" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc075" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (set! (-> self combo-done?) #f)
    (until #f
      (let ((gp-3 *yellow-training-path-combo-info*))
        (dotimes (s5-1 (length gp-3))
          (let ((s4-0 (-> gp-3 s5-1)))
            (set! (-> self dummies s5-1) (ppointer->handle (process-spawn gun-dummy-a self s4-0 :to self)))
            )
          )
        )
      (until #f
        (render-text self (text-id gungame-tutorial-kick-combo))
        (suspend)
        (when (and (not (handle->process (-> self dummies 0))) (not (handle->process (-> self dummies 1))))
          #t
          (goto cfg-50)
          )
        )
      #f
      (label cfg-50)
      (cond
        ((-> self combo-done?)
         (set! (-> self last-sound-id)
               (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc080" -99.0 0)
               )
         (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
           (suspend)
           )
         #t
         (goto cfg-61)
         )
        (else
          (set! (-> self last-sound-id)
                (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc077" -99.0 0)
                )
          (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
            (suspend)
            )
          )
        )
      )
    #f
    (label cfg-61)
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc018" -99.0 0)
          )
    (set! (-> self last-sound-id)
          (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc022" -99.0 0)
          )
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (task-node-close! (game-task-node city-yellow-gun-training-introduction))
    (go yellow-training)
    (none)
    )
  :post (behavior ()
    (training-manager-method-32 self)
    (if (= (-> *game-info* gun-ammo 0) 0.0)
        (training-manager-method-22 self #t)
        )
    (training-manager-method-31 self)
    (none)
    )
  )

(defstate course (training-manager)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (local-vars (v0-0 object))
    (case event-type
      (('score)
       (let ((a1-3 (-> event param 0))
             (v1-1 (the-as process-taskable proc))
             )
         (+! (-> self score) a1-3)
         (cond
           ((logtest? (-> v1-1 ambient last-ambient data 6) 8)
            (set! v0-0 (+ (-> self total-bonus-destroyed) 1))
            (set! (-> self total-bonus-destroyed) (the-as uint v0-0))
            )
           ((logtest? (-> v1-1 ambient last-ambient data 6) 4)
            (set! v0-0 (+ (-> self total-civilian) 1))
            (set! (-> self total-civilian) (the-as uint v0-0))
            )
           (else
             (set! v0-0 (+ (-> self total-target-destroyed) 1))
             (set! (-> self total-target-destroyed) (the-as uint v0-0))
             )
           )
         )
       v0-0
       )
      (('path)
       (let ((v1-9 (training-manager-method-21 self (the-as handle (-> event param 0)))))
         (if v1-9
             (-> (the-as process-drawable (if v1-9
                                              (the-as process-drawable (-> v1-9 extra process))
                                              )
                         )
                 path
                 )
             #f
             )
         )
       )
      (('can-close-door?)
       #t
       )
      )
    )
  :enter (behavior ()
    (set! (-> self hud-score) (ppointer->handle (process-spawn hud-big-score :init hud-init-by-other :to self)))
    (set! (-> self hud-goal) (ppointer->handle (process-spawn hud-goal :init hud-init-by-other :to self)))
    (set! (-> self start-time) (+ (current-time) (seconds 2)))
    (set! (-> self first-enemy-shown?) #f)
    (set! (-> self first-citizen-shown?) #f)
    (set! (-> self open-end?) #t)
    (set! (-> self total-target) (the-as uint 0))
    (set! (-> self total-target-destroyed) (the-as uint 0))
    (set! (-> self total-bonus) (the-as uint 0))
    (set! (-> self total-bonus-destroyed) (the-as uint 0))
    (set! (-> self total-civilian) (the-as uint 0))
    (set! (-> self score) 0)
    (dotimes (gp-2 (length (-> self course)))
      (let ((v1-20 (-> self course gp-2)))
        0
        (logior! (-> v1-20 flags) (tpath-flags need-to-spawn))
        (logclear! (-> v1-20 flags) (tpath-flags broken))
        (cond
          ((logtest? (-> v1-20 flags) (tpath-flags bonus))
           (+! (-> self total-bonus) 1)
           )
          ((not (logtest? (-> v1-20 flags) (tpath-flags citizen)))
           (+! (-> self total-target) 1)
           )
          )
        )
      )
    (set! (-> self training?) #f)
    (cond
      ((= (-> self course) *yellow-training-path-global-info*)
       (set! (-> self game-score) (the-as uint 5))
       (set! (-> self task-gold) (the-as uint 79))
       (set! (-> self task-silver) (the-as uint 78))
       (set! (-> self task-bronze) (the-as uint 77))
       (when (not (task-node-closed? (game-task-node city-yellow-gun-training-resolution)))
         (set! (-> self training-goal) 4000.0)
         (set! (-> self training?) #t)
         )
       (set-setting! 'features 'clear 0.0 (game-feature gun-red gun-blue gun-dark))
       (if (!= (-> *game-info* gun-type) 1)
           (send-event *target* 'change-mode 'gun #f 1)
           )
       )
      ((= (-> self course) *red-training-path-global-info*)
       (set! (-> self game-score) (the-as uint 4))
       (set! (-> self task-gold) (the-as uint 31))
       (set! (-> self task-silver) (the-as uint 30))
       (set! (-> self task-bronze) (the-as uint 29))
       (when (or (task-node-open? (game-task-node city-red-gun-training-resolution))
                 (task-node-open? (game-task-node city-red-gun-training-try-once))
                 )
         (set! (-> self training-goal) 3000.0)
         (set! (-> self training?) #t)
         )
       (set-setting! 'features 'clear 0.0 (game-feature gun-yellow gun-blue gun-dark))
       (if (!= (-> *game-info* gun-type) 2)
           (send-event *target* 'change-mode 'gun #f 2)
           )
       )
      ((= (-> self course) *blue-training-path-global-info*)
       (set! (-> self game-score) (the-as uint 6))
       (set! (-> self task-gold) (the-as uint 102))
       (set! (-> self task-silver) (the-as uint 101))
       (set! (-> self task-bronze) (the-as uint 100))
       (set! (-> *game-info* goal) 4000.0)
       (set-setting! 'features 'clear 0.0 (game-feature gun-yellow gun-red gun-dark))
       (if (!= (-> *game-info* gun-type) 3)
           (send-event *target* 'change-mode 'gun #f 3)
           )
       )
      ((= (-> self course) *peace-training-path-global-info*)
       (set! (-> self game-score) (the-as uint 7))
       (set! (-> self task-gold) (the-as uint 180))
       (set! (-> self task-silver) (the-as uint 179))
       (set! (-> self task-bronze) (the-as uint 178))
       (set! (-> *game-info* goal) 4000.0)
       )
      )
    (if (not (handle->process (-> self voicebox)))
        (set! (-> self voicebox) (ppointer->handle (voicebox-spawn *target* (target-pos 0))))
        )
    (cond
      ((-> self training?)
       (let ((v1-106 (rand-vu-int-count 2)))
         (cond
           ((zero? v1-106)
            (set! (-> self last-sound-id)
                  (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc026" -99.0 0)
                  )
            )
           ((= v1-106 1)
            (set! (-> self last-sound-id)
                  (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc027" -99.0 0)
                  )
            )
           )
         )
       )
      (else
        (sound-play "course-clear")
        )
      )
    (none)
    )
  :exit (behavior ()
    (cond
      ((= (-> self course) *yellow-training-path-global-info*)
       )
      ((= (-> self course) *red-training-path-global-info*)
       )
      ((= (-> self course) *blue-training-path-global-info*)
       )
      ((= (-> self course) *peace-training-path-global-info*)
       )
      )
    (none)
    )
  :trans (behavior ()
    (set! (-> *game-info* score) (the float (-> self score)))
    (let ((s5-0 (get-game-score-ref *game-info* (the-as int (-> self game-score))))
          (gp-0 (handle->process (-> self hud-goal)))
          )
      (cond
        ((task-node-open? (the-as game-task-node (-> self task-bronze)))
         (cond
           ((>= (-> *game-info* score) (-> s5-0 0))
            (set! (-> *game-info* goal) (-> *game-info* score))
            (let ((s5-1 format)
                  (gp-1 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                  (s4-0 "~S")
                  )
              (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
              (s5-1 gp-1 s4-0 *temp-string*)
              )
            )
           ((>= (-> *game-info* score) (-> s5-0 1))
            (set! (-> *game-info* goal) (-> s5-0 0))
            (let ((s5-2 format)
                  (gp-2 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                  (s4-1 "~S")
                  )
              (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
              (s5-2 gp-2 s4-1 *temp-string*)
              )
            )
           ((>= (-> *game-info* score) (-> s5-0 2))
            (set! (-> *game-info* goal) (-> s5-0 1))
            (let ((s5-3 format)
                  (gp-3 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                  (s4-2 "~S")
                  )
              (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-silver) #f))
              (s5-3 gp-3 s4-2 *temp-string*)
              )
            )
           (else
             (set! (-> *game-info* goal) (-> s5-0 2))
             (let ((s5-4 format)
                   (gp-4 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                   (s4-3 "~S")
                   )
               (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-bronze) #f))
               (s5-4 gp-4 s4-3 *temp-string*)
               )
             )
           )
         )
        ((task-node-open? (the-as game-task-node (-> self task-silver)))
         (cond
           ((>= (-> *game-info* score) (-> s5-0 0))
            (set! (-> *game-info* goal) (-> *game-info* score))
            (let ((s5-5 format)
                  (gp-5 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                  (s4-4 "~S")
                  )
              (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
              (s5-5 gp-5 s4-4 *temp-string*)
              )
            )
           ((>= (-> *game-info* score) (-> s5-0 1))
            (set! (-> *game-info* goal) (-> s5-0 0))
            (let ((s5-6 format)
                  (gp-6 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                  (s4-5 "~S")
                  )
              (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-silver) #f))
              (s5-6 gp-6 s4-5 *temp-string*)
              )
            )
           (else
             (set! (-> *game-info* goal) (-> s5-0 1))
             (let ((s5-7 format)
                   (gp-7 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                   (s4-6 "~S")
                   )
               (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-silver) #f))
               (s5-7 gp-7 s4-6 *temp-string*)
               )
             )
           )
         )
        ((or (task-node-open? (the-as game-task-node (-> self task-gold)))
             (task-node-closed? (the-as game-task-node (-> self task-gold)))
             )
         (cond
           ((>= (-> *game-info* score) (-> s5-0 0))
            (set! (-> *game-info* goal) (-> *game-info* score))
            (let ((s5-8 format)
                  (gp-8 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                  (s4-7 "~S")
                  )
              (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
              (s5-8 gp-8 s4-7 *temp-string*)
              )
            )
           (else
             (set! (-> *game-info* goal) (-> s5-0 0))
             (let ((s5-9 format)
                   (gp-9 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
                   (s4-8 "~S")
                   )
               (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
               (s5-9 gp-9 s4-8 *temp-string*)
               )
             )
           )
         )
        ((>= (-> *game-info* score) (-> s5-0 0))
         (set! (-> *game-info* goal) (-> *game-info* score))
         (let ((s5-10 format)
               (gp-10 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
               (s4-9 "~S")
               )
           (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
           (s5-10 gp-10 s4-9 *temp-string*)
           )
         )
        ((>= (-> *game-info* score) (-> s5-0 1))
         (set! (-> *game-info* goal) (-> s5-0 0))
         (let ((s5-11 format)
               (gp-11 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
               (s4-10 "~S")
               )
           (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-gold) #f))
           (s5-11 gp-11 s4-10 *temp-string*)
           )
         )
        ((>= (-> *game-info* score) (-> s5-0 2))
         (set! (-> *game-info* goal) (-> s5-0 1))
         (let ((s5-12 format)
               (gp-12 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
               (s4-11 "~S")
               )
           (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-silver) #f))
           (s5-12 gp-12 s4-11 *temp-string*)
           )
         )
        ((>= (-> *game-info* score) (-> self training-goal))
         (set! (-> *game-info* goal) (-> s5-0 2))
         (let ((s5-13 format)
               (gp-13 (the-as hud (clear (-> (the-as hud gp-0) strings 1 text))))
               (s4-12 "~S")
               )
           (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-bronze) #f))
           (s5-13 gp-13 s4-12 *temp-string*)
           )
         )
        (else
          (set! (-> *game-info* goal) (-> self training-goal))
          (let ((s5-14 format)
                (gp-14 (clear (-> (the-as hud gp-0) strings 1 text)))
                (s4-13 "~S")
                )
            (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-goal) #f))
            (s5-14 gp-14 s4-13 *temp-string*)
            )
          )
        )
      )
    (cond
      ((= (-> self course) *yellow-training-path-global-info*)
       )
      ((= (-> self course) *red-training-path-global-info*)
       )
      ((= (-> self course) *blue-training-path-global-info*)
       )
      ((= (-> self course) *peace-training-path-global-info*)
       )
      )
    (none)
    )
  :code (the-as (function none :behavior training-manager) sleep-code)
  :post (behavior ()
    (send-event (handle->process (-> self hud-score)) 'force-show)
    (send-event (handle->process (-> self hud-goal)) 'force-show)
    (training-manager-method-32 self)
    (training-manager-method-31 self)
    (when (-> self open-end?)
      (let ((f30-0 (* 0.0033333334 (the float (- (current-time) (-> self start-time))))))
        (when (and (handle->process (-> self voicebox))
                   (or (and (task-node-closed? (game-task-node city-red-gun-training-try-once)) (< 1.0 f30-0))
                       (and (task-node-open? (game-task-node city-red-gun-training-try-once)) (< 15.0 f30-0))
                       )
                   )
          (send-event (handle->process (-> self voicebox)) 'die)
          (set! (-> self voicebox) (the-as handle #f))
          )
        (dotimes (gp-0 (length (-> self course)))
          (let ((s5-0 (-> self course gp-0)))
            (when (and (logtest? (-> s5-0 flags) (tpath-flags need-to-spawn)) (>= f30-0 (-> s5-0 s-time)))
              (cond
                ((logtest? (-> s5-0 flags) (tpath-flags bonus))
                 (let ((s4-0 #t))
                   (dotimes (s3-0 (length (-> self course)))
                     (let ((s2-0 (-> self course s3-0)))
                       (when (not (logtest? (-> s2-0 flags) (tpath-flags broken)))
                         (dotimes (s1-0 (length (-> s5-0 list)))
                           (if (= (-> s5-0 list s1-0) (-> s2-0 num))
                               (set! s4-0 #f)
                               )
                           )
                         )
                       )
                     )
                   (when s4-0
                     (process-spawn gun-dummy-gold self s5-0 :to self)
                     (logclear! (-> s5-0 flags) (tpath-flags need-to-spawn))
                     )
                   )
                 (if (>= f30-0 (+ (-> s5-0 bonus-time) (-> s5-0 s-time)))
                     (logclear! (-> s5-0 flags) (tpath-flags need-to-spawn))
                     )
                 )
                (else
                  (when (and (not (logtest? (-> s5-0 flags) (tpath-flags citizen))) (not (-> self first-enemy-shown?)))
                    (if (task-node-open? (game-task-node city-red-gun-training-try-once))
                        (set! (-> self last-sound-id)
                              (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc024" -99.0 0)
                              )
                        )
                    (set! (-> self first-enemy-shown?) #t)
                    )
                  (when (and (logtest? (-> s5-0 flags) (tpath-flags citizen)) (not (-> self first-citizen-shown?)))
                    (if (task-node-open? (game-task-node city-red-gun-training-try-once))
                        (set! (-> self last-sound-id)
                              (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc025" -99.0 0)
                              )
                        )
                    (set! (-> self first-citizen-shown?) #t)
                    )
                  (cond
                    ((logtest? (-> s5-0 flags) (tpath-flags citizen))
                     (let ((v1-93 (rand-vu-int-count 4)))
                       (cond
                         ((zero? v1-93)
                          (process-spawn gun-cit-a self s5-0 :to self)
                          )
                         ((= v1-93 1)
                          (process-spawn gun-cit-b self s5-0 :to self)
                          )
                         ((= v1-93 2)
                          (process-spawn gun-cit-c self s5-0 :to self)
                          )
                         ((= v1-93 3)
                          (process-spawn gun-cit-d self s5-0 :to self)
                          )
                         )
                       )
                     )
                    ((logtest? (-> s5-0 flags) (tpath-flags big))
                     (process-spawn gun-dummy-big self s5-0 :to self)
                     )
                    ((logtest? (-> s5-0 flags) (tpath-flags peace))
                     (process-spawn gun-dummy-peace self s5-0 :to self)
                     )
                    (else
                      (let ((v1-135 (rand-vu-int-count 3)))
                        (cond
                          ((zero? v1-135)
                           (process-spawn gun-dummy-a self s5-0 :to self)
                           )
                          ((= v1-135 1)
                           (process-spawn gun-dummy-b self s5-0 :to self)
                           )
                          ((= v1-135 2)
                           (process-spawn gun-dummy-c self s5-0 :to self)
                           )
                          )
                        )
                      )
                    )
                  (logclear! (-> s5-0 flags) (tpath-flags need-to-spawn))
                  )
                )
              )
            )
          )
        )
      )
    (let ((gp-1 (-> self course (+ (length (-> self course)) -1))))
      (when (and (-> self open-end?) (let ((a1-37 (new 'stack-no-clear 'event-message-block)))
                                       (set! (-> a1-37 from) (process->ppointer self))
                                       (set! (-> a1-37 num-params) 1)
                                       (set! (-> a1-37 message) 'player-in-open-area?)
                                       (set! (-> a1-37 param 0) (the-as uint #t))
                                       (let ((t9-47 send-event-function)
                                             (v1-176 (-> self actor-group 1 data (-> self end-door) actor))
                                             )
                                         (or (t9-47
                                               (if v1-176
                                                   (-> v1-176 extra process)
                                                   )
                                               a1-37
                                               )
                                             (logtest? (-> gp-1 flags) (tpath-flags broken))
                                             )
                                         )
                                       )
                 )
        (sound-play "course-clear")
        (let ((a1-39 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-39 from) (process->ppointer self))
          (set! (-> a1-39 num-params) 1)
          (set! (-> a1-39 message) 'open)
          (set! (-> a1-39 param 0) (the-as uint #t))
          (let ((t9-50 send-event-function)
                (v1-190 (-> self actor-group 1 data (-> self end-door) actor))
                )
            (t9-50
              (if v1-190
                  (-> v1-190 extra process)
                  )
              a1-39
              )
            )
          )
        (set! (-> self open-end?) #f)
        (training-manager-method-22 self #f)
        (set! (-> self egg-count) 0)
        (set! (-> self medal) 0)
        (let ((gp-3 (get-game-score-ref *game-info* (the-as int (-> self game-score)))))
          (game-info-method-28 *game-info* (the-as game-score (-> self game-score)) (the float (-> self score)))
          (when (or (-> self training?) (task-node-open? (the-as game-task-node (-> self task-bronze))))
            (when (>= (-> *game-info* score) (-> gp-3 2))
              (task-node-close! (the-as game-task-node (-> self task-bronze)))
              (+! (-> self egg-count) 1)
              (set! (-> self medal) 2)
              )
            )
          (when (task-node-open? (the-as game-task-node (-> self task-silver)))
            (when (>= (-> *game-info* score) (-> gp-3 1))
              (task-node-close! (the-as game-task-node (-> self task-silver)))
              (+! (-> self egg-count) 1)
              (set! (-> self medal) 1)
              )
            )
          (when (task-node-open? (the-as game-task-node (-> self task-gold)))
            (when (>= (-> *game-info* score) (-> gp-3 0))
              (task-node-close! (the-as game-task-node (-> self task-gold)))
              (+! (-> self egg-count) 1)
              (set! (-> self medal) 0)
              0
              )
            )
          )
        ;; pc port note : give skill directly
        (#when PC_PORT
          (send-event *target* 'get-pickup (pickup-type skill) (* (the float (-> self egg-count)) (-> *FACT-bank* super-skill-inc))))
        (go-virtual end-course)
        )
      )
    (cond
      ((and (not (-> self open-end?)) (let ((a1-43 (new 'stack-no-clear 'event-message-block)))
                                        (set! (-> a1-43 from) (process->ppointer self))
                                        (set! (-> a1-43 num-params) 0)
                                        (set! (-> a1-43 message) 'closed?)
                                        (let ((t9-61 send-event-function)
                                              (v1-230 (-> self actor-group 1 data (-> self end-door) actor))
                                              )
                                          (t9-61
                                            (if v1-230
                                                (-> v1-230 extra process)
                                                )
                                            a1-43
                                            )
                                          )
                                        )
            )
       (training-manager-method-28 self)
       )
      (else
        )
      )
    (let ((gp-5 (vector-!
                  (new 'stack-no-clear 'vector)
                  (target-pos 0)
                  (new 'static 'vector :x 1667072.0 :y 40960.0 :z 5025792.0 :w 1.0)
                  )
                )
          )
      (vector-rotate-around-y! gp-5 gp-5 4460.999)
      )
    (none)
    )
  )

(defstate end-course (training-manager)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('path)
       (let ((v1-2 (training-manager-method-21 self (the-as handle (-> event param 0)))))
         (if v1-2
             (-> (the-as process-drawable (if v1-2
                                              (the-as process-drawable (-> v1-2 extra process))
                                              )
                         )
                 path
                 )
             #f
             )
         )
       )
      (('can-close-door?)
       #t
       )
      )
    )
  :enter (behavior ()
    (if (not (handle->process (-> self voicebox)))
        (set! (-> self voicebox) (ppointer->handle (voicebox-spawn *target* (target-pos 0))))
        )
    (cond
      ((> (-> self egg-count) 0)
       0
       (let ((v1-10 (-> self medal)))
         (cond
           ((zero? v1-10)
            (set! (-> self last-sound-id)
                  (add-process *gui-control* self (gui-channel sig) (gui-action play) "cityv179" -99.0 0)
                  )
            )
           ((= v1-10 1)
            (set! (-> self last-sound-id)
                  (add-process *gui-control* self (gui-channel sig) (gui-action play) "cityv180" -99.0 0)
                  )
            )
           ((= v1-10 2)
            (set! (-> self last-sound-id)
                  (add-process *gui-control* self (gui-channel sig) (gui-action play) "cityv181" -99.0 0)
                  )
            )
           )
         )
       )
      ((= (-> self course) *yellow-training-path-global-info*)
       (when (not (task-node-closed? (game-task-node city-yellow-gun-training-resolution)))
         (cond
           ((>= (-> self score) (the int (-> self training-goal)))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (let ((v1-17 (rand-vu-int-count 4)))
              (cond
                ((zero? v1-17)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc028" -99.0 0)
                       )
                 )
                ((= v1-17 1)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc029" -99.0 0)
                       )
                 )
                ((= v1-17 2)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc030" -99.0 0)
                       )
                 )
                ((= v1-17 3)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc031" -99.0 0)
                       )
                 )
                )
              )
            )
           (else
             (set! (-> *game-info* sub-task-list (game-task-node city-yellow-gun-training-resolution) death-count)
                   (the-as
                     uint
                     (seekl
                       (the-as int (-> *game-info* sub-task-list (game-task-node city-yellow-gun-training-resolution) death-count))
                       #xffff
                       1
                       )
                     )
                   )
             (let ((v1-28 (rand-vu-int-count 4)))
               (cond
                 ((zero? v1-28)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc032" -99.0 0)
                        )
                  )
                 ((= v1-28 1)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc033" -99.0 0)
                        )
                  )
                 ((= v1-28 2)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc034" -99.0 0)
                        )
                  )
                 ((= v1-28 3)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc035" -99.0 0)
                        )
                  )
                 )
               )
             )
           )
         )
       )
      ((= (-> self course) *red-training-path-global-info*)
       (when (not (task-node-closed? (game-task-node city-red-gun-training-resolution)))
         (task-node-close! (game-task-node city-red-gun-training-try-once))
         (cond
           ((>= (-> self score) (the int (-> self training-goal)))
            (task-node-close! (game-task-node city-red-gun-training-resolution))
            (let ((v1-35 (rand-vu-int-count 4)))
              (cond
                ((zero? v1-35)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc028" -99.0 0)
                       )
                 )
                ((= v1-35 1)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc029" -99.0 0)
                       )
                 )
                ((= v1-35 2)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc030" -99.0 0)
                       )
                 )
                ((= v1-35 3)
                 (set! (-> self last-sound-id)
                       (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc031" -99.0 0)
                       )
                 )
                )
              )
            )
           (else
             (set! (-> *game-info* sub-task-list (game-task-node city-red-gun-training-resolution) death-count)
                   (the-as
                     uint
                     (seekl
                       (the-as int (-> *game-info* sub-task-list (game-task-node city-red-gun-training-resolution) death-count))
                       #xffff
                       1
                       )
                     )
                   )
             (let ((v1-46 (rand-vu-int-count 4)))
               (cond
                 ((zero? v1-46)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc032" -99.0 0)
                        )
                  )
                 ((= v1-46 1)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc033" -99.0 0)
                        )
                  )
                 ((= v1-46 2)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc034" -99.0 0)
                        )
                  )
                 ((= v1-46 3)
                  (set! (-> self last-sound-id)
                        (add-process *gui-control* self (gui-channel sig) (gui-action play) "sigc035" -99.0 0)
                        )
                  )
                 )
               )
             )
           )
         )
       )
      )
    (none)
    )
  :exit (behavior ()
    (set! (-> self egg-count) 0)
    (remove-setting! 'features)
    (send-event (handle->process (-> self hud-score)) 'hide-and-die)
    (send-event (handle->process (-> self hud-goal)) 'hide-and-die)
    (none)
    )
  :trans (behavior ()
    '()
    (none)
    )
  :code (behavior ()
    (while (nonzero? (get-status *gui-control* (-> self last-sound-id)))
      (suspend)
      )
    (when (> (-> self egg-count) 0)
      ;; pc port note : skill is given earlier
      (#unless PC_PORT
        (let* ((gp-0 (handle->process (-> self voicebox)))
              (v1-8 (if (type? gp-0 process-drawable)
                        (the-as process-drawable gp-0)
                        )
                    )
              (t1-0 (new 'static 'fact-info))
              )
          (set! (-> t1-0 options) (actor-option))
          (logior! (-> t1-0 options) (actor-option suck-in))
          (birth-pickup-at-point
            (-> v1-8 root trans)
            (pickup-type skill)
            (* (the float (-> self egg-count)) (-> *FACT-bank* super-skill-inc))
            #t
            *entity-pool*
            t1-0
            )
          )
        )
      (let ((gp-1 (current-time)))
        (until (>= (- (current-time) gp-1) (seconds 1))
          (suspend)
          )
        )
      (auto-save-user)
      )
    (while (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
             (set! (-> a1-4 from) (process->ppointer self))
             (set! (-> a1-4 num-params) 0)
             (set! (-> a1-4 message) 'closed?)
             (let ((t9-4 send-event-function)
                   (v1-25 (-> self actor-group 1 data (-> self end-door) actor))
                   )
               (not (t9-4
                      (if v1-25
                          (-> v1-25 extra process)
                          )
                      a1-4
                      )
                    )
               )
             )
      (suspend)
      )
    (training-manager-method-28 self)
    (none)
    )
  :post (behavior ()
    '()
    (none)
    )
  )

(defmethod training-manager-method-21 training-manager ((obj training-manager) (arg0 handle))
  (let ((s4-0 0)
        (v1-3 (+ (length (-> obj actor-group 0)) -1))
        )
    0
    (while (>= v1-3 s4-0)
      (let* ((a0-4 (/ (+ s4-0 v1-3) 2))
             (a2-2 (-> obj actor-group 0 data a0-4 actor))
             (a1-4 (if a2-2
                       (the-as process-focusable (-> a2-2 extra process))
                       )
                   )
             )
        (cond
          ((= arg0 (-> a1-4 focus-status))
           (return (-> obj actor-group 0 data a0-4 actor))
           )
          ((< (the-as uint (-> a1-4 focus-status)) (the-as uint arg0))
           (set! s4-0 (+ a0-4 1))
           )
          (else
            (set! v1-3 (+ a0-4 -1))
            )
          )
        )
      )
    )
  (the-as entity #f)
  )

(defmethod training-manager-method-26 training-manager ((obj training-manager))
  (local-vars (s3-0 object))
  (let ((gp-0 0))
    (dotimes (s4-0 (-> *entrance-gungame-crates-pos* length))
      (if (and (handle->process (-> obj entrance-crates s4-0))
               (begin
                 (let* ((s3-1 #t)
                        (s2-0 (-> obj entrance-crates s4-0 process 0))
                        (v1-11 (the-as focus-status (logand (-> (if (type? s2-0 process-focusable)
                                                                    (the-as process-focusable s2-0)
                                                                    )
                                                                focus-status
                                                                )
                                                            (focus-status dead)
                                                            )
                                       )
                               )
                        )
                   (cmove-#f-nonzero s3-0 v1-11 s3-1)
                   )
                 s3-0
                 )
               )
          (+! gp-0 1)
          )
      )
    gp-0
    )
  )

(defmethod training-manager-method-29 training-manager ((obj training-manager) (arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack-no-clear 'collide-query)))
      (set! (-> s5-0 start-pos quad) (-> arg0 quad))
      (set-vector! (-> s5-0 move-dist) 0.0 -8192.0 0.0 1.0)
      (let ((v1-2 s5-0))
        (set! (-> v1-2 radius) 40.96)
        (set! (-> v1-2 collide-with) (collide-spec backgnd))
        (set! (-> v1-2 ignore-process0) #f)
        (set! (-> v1-2 ignore-process1) #f)
        (set! (-> v1-2 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
        (set! (-> v1-2 action-mask) (collide-action solid))
        )
      (let ((f0-5 (fill-and-probe-using-line-sphere *collide-cache* s5-0)))
        (when (< 0.0 f0-5)
          (let ((v0-1 arg0))
            (let ((v1-5 (-> s5-0 move-dist)))
              (let ((a0-10 f0-5))
                (.mov vf7 a0-10)
                )
              (.lvf vf5 (&-> v1-5 quad))
              )
            (.lvf vf4 (&-> arg0 quad))
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> v0-1 quad) vf6)
            v0-1
            )
          )
        )
      )
    )
  )

(defmethod training-manager-method-22 training-manager ((obj training-manager) (arg0 symbol))
  (local-vars (v1-28 symbol) (a0-18 symbol) (sv-48 process) (sv-64 process-tree) (sv-80 process-tree))
  (let ((s4-0 (new 'static 'fact-info :pickup-type (pickup-type ammo-red) :pickup-spawn-amount 20.0))
        (s3-0 (new 'stack-no-clear 'vector))
        (s2-0 (new 'stack-no-clear 'sphere))
        (s1-0 #t)
        )
    (dotimes (s0-0 (-> *entrance-gungame-crates-pos* length))
      (set! (-> s4-0 pickup-type) (pickup-type ammo-random))
      (set! (-> s3-0 quad) (-> *entrance-gungame-crates-pos* s0-0 pos quad))
      (set! (-> s3-0 w) 1.0)
      (vector-rotate-around-y! s3-0 s3-0 -4460.999)
      (set! (-> s3-0 x) (+ 1667072.0 (-> s3-0 x)))
      (set! (-> s3-0 y) (+ 40960.0 (-> s3-0 y)))
      (set! (-> s3-0 z) (+ 5025792.0 (-> s3-0 z)))
      (training-manager-method-29 obj s3-0)
      (when arg0
        (set! (-> s2-0 quad) (-> s3-0 quad))
        (set! (-> s2-0 r) 8192.0)
        (if (sphere-in-view-frustum? s2-0)
            (set! s1-0 #f)
            )
        )
      (when (and s1-0 (not (handle->process (-> obj entrance-crates s0-0))))
        (set! sv-48 (get-process *default-dead-pool* crate #x4000))
        (let ((v1-21
                (when sv-48
                  (let ((t9-4 (method-of-type crate activate)))
                    (t9-4 (the-as crate sv-48) *entity-pool* (symbol->string (-> crate symbol)) (the-as pointer #x70004000))
                    )
                  (run-now-in-process sv-48 crate-init-by-other #f s3-0 'wood s4-0)
                  (-> sv-48 ppointer)
                  )
                )
              )
          (set! a0-18 (when v1-21
                        (set! sv-64 (the-as process-tree a0-18))
                        (set! sv-64 (-> v1-21 0 self))
                        a0-18
                        )
                )
          )
        (set! v1-28 (when (type? sv-64 process-focusable)
                      (set! sv-80 (the-as process-tree v1-28))
                      (set! sv-80 sv-64)
                      v1-28
                      )
              )
        (quaternion-vector-angle!
          (-> (the-as process-focusable sv-80) root-override quat)
          *up-vector*
          (+ -4551.1113 (-> *entrance-gungame-crates-pos* s0-0 pos w))
          )
        (set! (-> obj entrance-crates s0-0) (ppointer->handle (if sv-80
                                                                  (-> sv-80 ppointer)
                                                                  )
                                                              )
              )
        )
      )
    )
  #f
  )

(defmethod training-manager-method-25 training-manager ((obj training-manager))
  (dotimes (s5-0 (-> *entrance-gungame-crates-pos* length))
    (when (handle->process (-> obj entrance-crates s5-0))
      (deactivate (-> obj entrance-crates s5-0 process 0))
      (set! (-> obj entrance-crates s5-0) (the-as handle #f))
      )
    )
  #f
  )

(defmethod training-manager-method-24 training-manager ((obj training-manager))
  (dotimes (s5-0 32)
    (when (handle->process (-> obj course-crates s5-0))
      (deactivate (-> obj course-crates s5-0 process 0))
      (set! (-> obj course-crates s5-0) (the-as handle #f))
      )
    )
  #f
  )

(defmethod training-manager-method-23 training-manager ((obj training-manager) (arg0 (array gungame-crate)))
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (s3-0 (new 'static 'fact-info))
        )
    (dotimes (s2-0 (-> arg0 length))
      (when (not (handle->process (-> obj course-crates s2-0)))
        (set! (-> s4-0 quad) (-> arg0 s2-0 pos quad))
        (set! (-> s4-0 w) 1.0)
        (vector-rotate-around-y! s4-0 s4-0 -4460.999)
        (set! (-> s4-0 x) (+ 1667072.0 (-> s4-0 x)))
        (set! (-> s4-0 y) (+ 40960.0 (-> s4-0 y)))
        (set! (-> s4-0 z) (+ 5025792.0 (-> s4-0 z)))
        (training-manager-method-29 obj s4-0)
        (set! (-> s3-0 pickup-type) (-> arg0 s2-0 ammo))
        (set! (-> s3-0 pickup-spawn-amount) (the float (-> arg0 s2-0 num)))
        (let* ((s0-0 (ppointer->process (process-spawn crate #f s4-0 'wood s3-0 :to *entity-pool*)))
               (s1-1 (if (type? s0-0 process-focusable)
                         (the-as process-focusable s0-0)
                         )
                     )
               )
          (quaternion-vector-angle! (-> s1-1 root-override quat) *up-vector* (+ -4551.1113 (-> arg0 s2-0 pos w)))
          (set! (-> obj course-crates s2-0) (process->handle s1-1))
          )
        )
      )
    )
  #f
  )

(defmethod training-manager-method-27 training-manager ((obj training-manager) (arg0 (array tpath-info)))
  (dotimes (s5-0 (length arg0))
    (let ((v1-2 (-> arg0 s5-0)))
      0
      (logior! (-> v1-2 flags) (tpath-flags need-to-spawn))
      (logclear! (-> v1-2 flags) (tpath-flags broken))
      (let ((a0-6 (-> v1-2 ref-time-num)))
        (set! (-> v1-2 ref-time-num) -1)
        (dotimes (a1-3 s5-0)
          (let ((a2-5 (-> arg0 (+ (- -1 a1-3) s5-0))))
            (if (= a0-6 (-> a2-5 num))
                (+! (-> v1-2 s-time) (-> a2-5 s-time))
                )
            )
          )
        )
      (set! (-> v1-2 num-anims) (the-as uint 0))
      (dotimes (a0-9 3)
        (when (nonzero? (-> v1-2 anims a0-9))
          (let ((a1-10 (-> v1-2 anims a0-9)))
            (set! (-> v1-2 anims a0-9) (the-as (inline-array tpath-control-frame) 0))
            (set! (-> v1-2 anims (-> v1-2 num-anims)) a1-10)
            )
          (+! (-> v1-2 num-anims) 1)
          )
        )
      )
    )
  #f
  )

(defstate wait (training-manager)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object (case event-type
                     (('start)
                      (the-as symbol (training-manager-method-28 self))
                      )
                     )
            )
    )
  :code (the-as (function none :behavior training-manager) sleep-code)
  )

;; WARN: Return type mismatch object vs none.
(defmethod training-manager-method-28 training-manager ((obj training-manager))
  (cond
    ((task-node-open? (game-task-node city-red-gun-training-introduction))
     (go (method-of-object obj red-training-intro))
     )
    ((or (task-node-open? (game-task-node city-red-gun-training-try-once))
         (task-node-open? (game-task-node city-red-gun-training-resolution))
         )
     (go (method-of-object obj red-training))
     )
    ((task-node-open? (game-task-node city-yellow-gun-training-introduction))
     (go (method-of-object obj yellow-training-intro))
     )
    ((task-node-open? (game-task-node city-yellow-gun-training-resolution))
     (go yellow-training)
     )
    (else
      (go (method-of-object obj red-yellow-training))
      )
    )
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! training-manager ((obj training-manager) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (local-vars (sv-16 res-tag))
  (set-setting! 'darkjak #f 0.0 0)
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-3 (res-lump-data (-> obj entity) 'actor-groups pointer :tag-ptr (& sv-16))))
    (cond
      ((and v1-3 (nonzero? (-> sv-16 elt-count)))
       (set! (-> obj actor-group) (the-as (pointer actor-group) v1-3))
       (set! (-> obj actor-group-count) (the-as int (-> sv-16 elt-count)))
       )
      (else
        (set! (-> obj actor-group) (the-as (pointer actor-group) #f))
        (set! (-> obj actor-group-count) 0)
        (go process-drawable-art-error "actor-group training-manager")
        )
      )
    )
  (set! (-> obj score) 0)
  (set! (-> obj in-out) (the-as uint 0))
  (set! (-> obj egg-count) 0)
  (set! (-> obj medal) 0)
  (set! (-> obj voicebox) (the-as handle #f))
  (set! (-> obj gui-id) (new 'static 'sound-id))
  (dotimes (v1-10 32)
    (set! (-> obj entrance-crates v1-10) (the-as handle #f))
    )
  (dotimes (v1-13 32)
    (set! (-> obj course-crates v1-13) (the-as handle #f))
    )
  (training-manager-method-27 obj *red-training-path-global-info*)
  (training-manager-method-27 obj *yellow-training-path-global-info*)
  (training-manager-method-27 obj *blue-training-path-global-info*)
  (training-manager-method-27 obj *peace-training-path-global-info*)
  (training-manager-method-22 obj #f)
  (set-setting! 'speech-control #f 0.0 0)
  (go (method-of-object obj wait))
  (none)
  )

(deftype gungame-door (process-drawable)
  ((open-side        symbol    :offset-assert 200)
   (close-sound      sound-id  :offset-assert 204)
   (train            handle    :offset-assert 208)
   (last-player-dist float     :offset-assert 216)
   (last-camera-dist float     :offset-assert 220)
   (close-state      uint32    :offset-assert 224)
   )
  :heap-base #x70
  :method-count-assert 25
  :size-assert         #xe4
  :flag-assert         #x19007000e4
  (:methods
    (idle () _type_ :state 20)
    (open () _type_ :state 21)
    (close () _type_ :state 22)
    (gungame-door-method-23 (_type_) symbol 23)
    (gungame-door-method-24 (_type_) symbol 24)
    )
  )


(defskelgroup skel-gungame-door fort-entry-gate fort-entry-gate-lod0-jg fort-entry-gate-idle-ja
              ((fort-entry-gate-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 3 0 10)
              )

(defstate idle (gungame-door)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('open)
       (set! (-> self train) (process->handle proc))
       (set! (-> self open-side) (the-as symbol (-> event param 0)))
       (go-virtual open)
       )
      (('player-in-open-area?)
       (set! (-> self open-side) (the-as symbol (-> event param 0)))
       (gungame-door-method-24 self)
       )
      (('closed?)
       (and (-> self next-state) (= (-> self next-state name) 'idle))
       )
      )
    )
  :code (the-as (function none :behavior gungame-door) sleep-code)
  :post (the-as (function none :behavior gungame-door) transform-post)
  )

(defstate open (gungame-door)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object (case event-type
                     (('closed?)
                      #f
                      )
                     (('player-in-open-area?)
                      (set! (-> self open-side) (the-as symbol (-> event param 0)))
                      (gungame-door-method-24 self)
                      )
                     )
            )
    )
  :enter (behavior ()
    (set! (-> self last-player-dist)
          (vector-dot
            (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat))
            (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> self root trans))
            )
          )
    (set! (-> self last-camera-dist) (vector-dot
                                       (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat))
                                       (vector-! (new 'stack-no-clear 'vector) (camera-pos) (-> self root trans))
                                       )
          )
    (set! (-> self close-state) (the-as uint 0))
    0
    (none)
    )
  :trans (behavior ()
    (gungame-door-method-23 self)
    (none)
    )
  :code (behavior ()
    (sound-play "gungame-door")
    (let ((gp-1 (current-time)))
      (until (>= (- (current-time) gp-1) (seconds 0.2))
        (suspend)
        (suspend)
        )
      )
    (ja-no-eval :group! (-> self draw art-group data 2)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 2)) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (until #f
      (if (send-event (handle->process (-> self train)) 'can-close-door?)
          (go-virtual close)
          )
      (suspend)
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior gungame-door) transform-post)
  )

(defmethod gungame-door-method-23 gungame-door ((obj gungame-door))
  (let* ((s5-1 (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> obj root trans)))
         (f26-0 (vector-dot (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> obj root quat)) s5-1))
         (f30-0 (vector-dot (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root quat)) s5-1))
         (f28-0 (vector-dot
                  (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> obj root quat))
                  (vector-! (new 'stack-no-clear 'vector) (camera-pos) (-> obj root trans))
                  )
                )
         (f0-4 (vector-dot
                 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root quat))
                 (vector-! (new 'stack-no-clear 'vector) (camera-pos) (-> obj root trans))
                 )
               )
         )
    (cond
      ((-> obj open-side)
       (when (< (fabs f26-0) 16384.0)
         (if (and (>= (-> obj last-player-dist) 8192.0) (< f30-0 8192.0))
             (+! (-> obj close-state) -1)
             )
         (if (and (< (-> obj last-player-dist) 8192.0) (>= f30-0 8192.0))
             (+! (-> obj close-state) 1)
             )
         )
       (when (< (fabs f28-0) 16384.0)
         (if (and (>= (-> obj last-camera-dist) 8192.0) (< f0-4 8192.0))
             (+! (-> obj close-state) -1)
             )
         (if (and (< (-> obj last-camera-dist) 8192.0) (>= f0-4 8192.0))
             (+! (-> obj close-state) 1)
             )
         )
       )
      (else
        (when (< (fabs f26-0) 16384.0)
          (if (and (>= (-> obj last-player-dist) -8192.0) (< f30-0 -8192.0))
              (+! (-> obj close-state) 1)
              )
          (if (and (< (-> obj last-player-dist) -8192.0) (>= f30-0 -8192.0))
              (+! (-> obj close-state) -1)
              )
          )
        (when (< (fabs f28-0) 16384.0)
          (if (and (>= (-> obj last-camera-dist) -8192.0) (< f0-4 -8192.0))
              (+! (-> obj close-state) 1)
              )
          (if (and (< (-> obj last-camera-dist) -8192.0) (>= f0-4 -8192.0))
              (+! (-> obj close-state) -1)
              )
          )
        )
      )
    (set! (-> obj last-player-dist) f30-0)
    (set! (-> obj last-camera-dist) f0-4)
    )
  (!= (-> obj close-state) 2)
  )

;; WARN: disable def twice: 41. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod gungame-door-method-24 gungame-door ((obj gungame-door))
  (let* ((s5-1 (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> obj root trans)))
         (f30-0 (vector-dot (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> obj root quat)) s5-1))
         (f0-2 (vector-dot (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root quat)) s5-1))
         )
    (and (< (fabs f30-0) 16384.0) (if (-> obj open-side)
                                      (and (< f0-2 0.0) (< -32768.0 f0-2))
                                      (and (< 0.0 f0-2) (< f0-2 32768.0))
                                      )
         )
    )
  )

(defstate close (gungame-door)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object (case event-type
                     (('closed?)
                      #f
                      )
                     (('player-in-open-area?)
                      (set! (-> self open-side) (the-as symbol (-> event param 0)))
                      (gungame-door-method-24 self)
                      )
                     )
            )
    )
  :enter (behavior ()
    (set! (-> self close-sound) (sound-play "door-close-all"))
    (none)
    )
  :code (behavior ()
    (let ((gp-0 #t))
      (until #f
        (cond
          ((gungame-door-method-23 self)
           (if gp-0
               (sound-play "door-stopped")
               )
           (sound-pause (-> self close-sound))
           (set! gp-0 #f)
           )
          (else
            (if (not gp-0)
                (sound-continue (-> self close-sound))
                )
            (set! gp-0 #t)
            (ja :num! (seek! 0.0))
            )
          )
        (suspend)
        (when (>= 0.0 (ja-frame-num 0))
          (ja-no-eval :num! zero)
          (goto cfg-12)
          )
        )
      )
    #f
    (label cfg-12)
    (go-virtual idle)
    (none)
    )
  :post (the-as (function none :behavior gungame-door) transform-post)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! gungame-door ((obj gungame-door) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((s4-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) cshape-reaction-default)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s4-0 penetrated-by) (penetrate))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 3))
      (set! (-> s3-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s3-0 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set-vector! (-> s3-0 local-sphere) 0.0 12288.0 0.0 40960.0)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-12 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-12 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-12 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-12 prim-core action) (collide-action solid))
      (set! (-> v1-12 transform-index) 4)
      (set-vector! (-> v1-12 local-sphere) 8192.0 16384.0 0.0 20480.0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set! (-> v1-14 transform-index) 5)
      (set-vector! (-> v1-14 local-sphere) -8192.0 16384.0 0.0 20480.0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-17 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> obj root) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-gungame-door" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (ja-channel-push! 1 0)
  (let ((a0-23 (-> obj skel root-channel 0)))
    (set! (-> a0-23 frame-group) (the-as art-joint-anim (-> obj draw art-group data 2)))
    (set! (-> a0-23 frame-num) 0.0)
    (joint-control-channel-group! a0-23 (the-as art-joint-anim (-> obj draw art-group data 2)) num-func-identity)
    )
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(set-subtask-hook!
  *game-info*
  (game-task-node sewer-enemy-resolution)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager
    ()
    (let ((s5-0 (new 'static 'fact-info :pickup-type (pickup-type gun-yellow) :pickup-spawn-amount 1.0))
          (s4-0 (-> *minimap-class-list* 11))
          (gp-0 (the-as process #f))
          )
      (let ((v1-2 (process-spawn crate (-> self entity) s4-0 'wood s5-0 :to self)))
        (if v1-2
            (set! gp-0 (-> v1-2 0))
            )
        )
      (when gp-0
        (set! (-> self slave 0) (process->handle gp-0))
        (let ((s5-1 (new 'stack-no-clear 'task-arrow-params)))
          (set! (-> s5-1 pos quad) (-> (the-as process-drawable gp-0) root trans quad))
          (quaternion-identity! (-> s5-1 quat))
          (set! (-> s5-1 flags) (task-arrow-flags))
          (set! (-> s5-1 map-icon) (the-as uint 15))
          (set! (-> self arrow) (process->handle (task-arrow-spawn s5-1 (the-as task-arrow gp-0))))
          )
        )
      )
    (the-as object 0)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node sewer-enemy-resolution)
  TASK_MANAGER_UPDATE_HOOK
  (lambda :behavior task-manager () (the-as object (gui-control-method-12
                                                     *gui-control*
                                                     self
                                                     (gui-channel art-load)
                                                     (gui-action queue)
                                                     (-> self info resolution-scene)
                                                     0
                                                     -99.0
                                                     (new 'static 'sound-id)
                                                     )
                                            )
                                 )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node sewer-escort-get-gun)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager
    ()
    (let ((s5-0 (new 'static 'fact-info :pickup-type (pickup-type gun-dark) :pickup-spawn-amount 1.0))
          (s4-0 (-> *minimap-class-list* 34))
          (gp-0 (the-as process #f))
          )
      (let ((v1-2 (process-spawn crate (-> self entity) s4-0 'wood s5-0 :to self)))
        (if v1-2
            (set! gp-0 (-> v1-2 0))
            )
        )
      (when gp-0
        (set! (-> self slave 0) (process->handle gp-0))
        (let ((s5-1 (new 'stack-no-clear 'task-arrow-params)))
          (set! (-> s5-1 pos quad) (-> (the-as process-drawable gp-0) root trans quad))
          (quaternion-identity! (-> s5-1 quat))
          (set! (-> s5-1 flags) (task-arrow-flags))
          (set! (-> s5-1 map-icon) (the-as uint 15))
          (set! (-> self arrow) (process->handle (task-arrow-spawn s5-1 (the-as task-arrow gp-0))))
          )
        )
      )
    (the-as object 0)
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node sewer-escort-get-gun)
  TASK_MANAGER_UPDATE_HOOK
  (lambda :behavior task-manager () (the-as object (gui-control-method-12
                                                     *gui-control*
                                                     self
                                                     (gui-channel art-load)
                                                     (gui-action queue)
                                                     (-> self info resolution-scene)
                                                     0
                                                     -99.0
                                                     (new 'static 'sound-id)
                                                     )
                                            )
                                 )
  )

(defpartgroup group-gungame-laser-beam
  :id 530
  :flags (unk-4)
  :bounds (static-bspherem 0 0 0 1)
  :parts ((sp-item 2329 :flags (bit6 bit7)) (sp-item 2330 :flags (bit6 bit7)) (sp-item 2331 :flags (is-3d bit6 bit7)))
  )

(defpart 2330
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 1.125))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0 8.0)
    (:b :copy g)
    (:a 48.0 16.0)
    (:rotvel-z (degrees 0.3))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 1.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 2329
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.1) (meters 0.05))
    (:rot-x (degrees 1.125))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b :copy g)
    (:a 64.0 32.0)
    (:rotvel-z (degrees 0.3))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 glow))
    (:userdata 1.0)
    (:rotate-y (degrees 0))
    )
  )

(defpart 2331
  :init-specs ((:texture (new 'static 'texture-id :index #x4c :page #xc))
    (:num 3.0)
    (:z (meters 8))
    (:scale-x (meters 0.025) (meters 0.005))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 20))
    (:r 255.0)
    (:g :copy r)
    (:b :copy g)
    (:a 20.0 8.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32
                       10
                       1
                       0
                       #xc04c00
                       #xc04d00
                       #xc04e00
                       #xc04f00
                       #xc05000
                       #xc05100
                       #xc05200
                       #xc05300
                       #xc05400
                       #xc05500
                       #xc05600
                       #xc05700
                       #xc05800
                       #xc05900
                       #xc05a00
                       #xc05b00
                       #xc05c00
                       #xc05d00
                       #xc05e00
                       #xc05f00
                       #xc06000
                       #xc06100
                       #xc06200
                       #xc06300
                       #xc06400
                       #xc06500
                       #xc06600
                       #xc06700
                       #xc06800
                       #xc06900
                       #xc06a00
                       #xc06b00
                       )
               )
    (:func 'sparticle-texture-animate)
    (:rotate-y (degrees 0))
    )
  )

(scene-method-16
  (new 'static 'scene
    :name "city-get-yellow-gun"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-52"
    :art-group "scenecamera"
    :anim "city-get-yellow-gun"
    :parts 3
    :command-list '((0 (fadein (frame-time (new 'static 'bfloat :data 10.0))))
      (160
        (part-tracker "group-gungame-laser-beam" entity "gun" joint "laser" track #t duration (frame-range (160 245)))
        )
      (10000
        (unless (task-closed? "sewer-enemy-resolution") (talker-spawn "miss012"))
        (task-close! "sewer-enemy-resolution")
        (send-event *target* 'change-mode 'gun #f (unbox 1))
        )
      )
    :cut-list '(49)
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'gungame
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'gungame
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "gun-yellow-up"
        :level 'gungame
        :art-group "skel-gun-yellow-up"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "gun"
        :level #f
        :art-group "skel-gun"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x6e
        )
      )
    :load-point-obj "gungame-movie"
    :end-point-obj #f
    :borrow '()
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :music-delay 1500.0
    :save #t
    )
  )

(scene-method-16 (new 'static 'scene
                   :name "city-get-dark-gun"
                   :extra #f
                   :info #f
                   :mask-to-clear (process-mask movie enemy platform projectile)
                   :entity "scene-stage-52"
                   :art-group "scenecamera"
                   :anim "city-get-dark-gun"
                   :parts 4
                   :command-list '((0 (fadein (frame-time (new 'static 'bfloat :data 10.0))))
                     (10000
                       (unless (task-closed? "sewer-escort-get-gun") (talker-spawn "miss014"))
                       (task-close! "sewer-escort-get-gun")
                       (send-event *target* 'change-mode 'gun #f (unbox 4))
                       )
                     )
                   :cut-list '(345)
                   :wait-ground-time (seconds 1)
                   :draw-target #f
                   :abort #t
                   :actor (new 'static 'boxed-array :type scene-actor
                     (new 'static 'scene-actor
                       :name "scenecamera"
                       :level #f
                       :art-group "skel-scenecamera"
                       :prefix ""
                       :draw-frames '((min max))
                       :scissor-frames '()
                       :camera 4
                       :shadow-flags -1
                       :shadow-volume-joint #f
                       )
                     (new 'static 'scene-actor
                       :name "sidekick-highres"
                       :level 'gungame
                       :art-group "skel-sidekick-highres"
                       :prefix ""
                       :draw-frames '((min max))
                       :scissor-frames '()
                       :flags #x1
                       :shadow-flags -1
                       :shadow-volume-joint #f
                       )
                     (new 'static 'scene-actor
                       :name "jak-highres"
                       :level 'gungame
                       :art-group "skel-jak-highres"
                       :prefix ""
                       :draw-frames '((min max))
                       :scissor-frames '()
                       :flags #x1
                       :shadow-flags -1
                       :shadow-volume-joint #f
                       )
                     (new 'static 'scene-actor
                       :name "gun"
                       :level #f
                       :art-group "skel-gun"
                       :prefix ""
                       :draw-frames '((min max))
                       :scissor-frames '()
                       :flags #x1
                       :shadow-flags -1
                       :shadow-volume-joint #f
                       )
                     )
                   :load-point-obj "gungame-movie"
                   :end-point-obj #f
                   :borrow '()
                   :sfx-volume -1.0
                   :ambient-volume -1.0
                   :music-volume -1.0
                   :blackout-end #t
                   :peaceful #t
                   :music-delay 1500.0
                   :save #t
                   )
                 )
