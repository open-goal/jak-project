;;-*-Lisp-*-
(in-package goal)

;; name: race-h.gc
;; name in dgo: race-h
;; dgos: STD, STC, LERLCHAL, STB, LPRTRACE

(declare-type race-state structure)


(defenum racer-info-flags
  :bitfield #t
  :type uint8
  (hide-in-scene)
  )

(defenum race-info-flags
  :bitfield #t
  :type uint8
  (city-race)
  (pidax)
  (complete-immediately)
  (retryable)
  (borrow)
  (bbush)
  (show-tutorial)
  )

(defenum race-flags
  :bitfield #t
  :type uint8
  (begun)
  (pidax) ;; verify
  (ready)
  (sleep)
  )

(defenum racer-flags
  :bitfield #t
  :type uint8
  (in-race)
  (finished)
  (dead)
  (racerflag-3)
  (racerflag-4)
  (saved-score)
  (on-track)
  (unknown)
  )

(defenum race-state-enum
  :type uint8
  (idle)
  (player-get-on)
  (player-set-pos)
  (countdown-scene-start)
  (countdown-scene)
  (countdown-start)
  (countdown)
  (active)
  (all-dead)
  )

(deftype mystery-race-manager-type (structure)
  "stack slot 16 in race-state::initialize"
  ((mat  matrix :inline)
   (vec0 vector :inline)
   (vec1 vector :inline)
   (word int32)
   )
  )

;; DECOMP BEGINS

(deftype race-turbo-pad (structure)
  ((position  vector  :inline)
   (handle    handle)
   )
  )


(deftype race-decision-point (structure)
  ((pos            float)
   (decision-type  uint8)
   (shortcuts      uint8)
   (safe-paths     uint8)
   )
  )


(deftype race-racer-info (structure)
  ((rider        uint8)
   (vehicle      uint8)
   (flags        racer-info-flags)
   (seek-offset  int8)
   )
  )


(deftype race-info (basic)
  ((race-mesh-name            string)
   (path-group-name           string)
   (task-node                 game-task-node)
   (mesh                      race-mesh)
   (ai-min-speed-factor       float)
   (ai-max-speed-factor       float)
   (ai-spread-factor          float)
   (start-sphere              sphere  :inline)
   (start-dir                 vector  :inline)
   (finish-sphere             sphere  :inline)
   (finish-dir                vector  :inline)
   (player-intro-pos          vector  :inline)
   (flags                     race-info-flags)
   (score                     uint8)
   (lap-count                 int8)
   (racer-count               int8)
   (turbo-pad-count           int8)
   (map-index                 int8)
   (decision-point-count      int8)
   (safe-paths                uint8)
   (turbo-pad-array           (inline-array race-turbo-pad))
   (racer-array               (inline-array race-racer-info))
   (decision-point-array      (inline-array race-decision-point))
   (level                     symbol)
   (borrow-level              symbol)
   (borrow                    pair)
   (manager                   handle)
   (manager-handle-init-hack  basic   :overlay-at manager)
   (hatch-actor-name          string)
   (countdown-scene           string)
   (complete-continue         string)
   (start-camera              string)
   (go-speech                 uint16)
   )
  (:methods
    (initialize-mesh (_type_) none)
    )
  )


(deftype racer-state (structure)
  ((position           vector  :inline)
   (racer              handle)
   (flags              racer-flags)
   (rank               int8)
   (finish-count       int8)
   (lap-count          int8)
   (lap-quadrant       int8)
   (rider              uint8)
   (lap-distance       float)
   (lap-distance-prev  float)
   (pos                float)
   (target-pos-offset  float)
   (speed-factor       float)
   (finish-time        uint32)
   (lap-start          uint32)
   (best-lap-time      uint32)
   (lap-time-array     float   5)
   (start-position     vector  :inline)
   )
  (:methods
    (update-lap-distance (_type_ race-state) none)
    (begin-lap (_type_ race-state) none)
    (end-lap (_type_ race-state) none)
    (print-laps (_type_ race-state string) none)
    (init-racer! (_type_ process-drawable) none)
    )
  )


(deftype race-state (structure)
  ((info                  race-info)
   (flags                 race-flags)
   (state                 race-state-enum)
   (racer-count           int8)
   (finished-count        int8)
   (i-player              int8)
   (i-countdown           int8)
   (manager               handle)
   (scene-player          handle)
   (race-signal           handle)
   (arrow                 handle)
   (hud-timer             handle)
   (hud-lap-counter       handle)
   (hud-turbo-counter     handle)
   (hud-position          handle)
   (current-time          uint32)
   (countdown-start-time  uint32)
   (race-start-time       uint32)
   (rankings              int8         10)
   (target-pos            float)
   (suck-factor           float)
   (racer-array           racer-state  10 :inline)
   (player-intro-curve    cubic-curve  :inline)
   )
  (:methods
    (init-racers! (_type_ process-drawable) none)
    (begin-race (_type_) none)
    (update (_type_) none)
    (update-rankings (_type_) none)
    (debug-print-rankings (_type_) none)
    (update-racers (_type_) none)
    (spawn-race-signal (_type_) none)
    (initialize (_type_ process race-info) none)
    (set-speech-tables! (_type_) none)
    (setup-race (_type_) none)
    )
  )


(deftype race-manager (process)
  ((race-state            race-state)
   (state-time            time-frame)
   (player-on-track-time  time-frame)
   (message-id            sound-id)
   (finish-sound-id       sound-id)
   )
  (:state-methods
    idle
    active
    fail
    win
    lose
    die
    )
  (:methods
    (update (_type_) int)
    (initialize-state (_type_) none)
    (race-manager-method-22 (_type_) none)
    (initialize-race-state (_type_) none)
    (draw-message-continue (_type_) none)
    (draw-message-retry (_type_) none)
    (save-score (_type_ float) none)
    (stop-speech (_type_) none)
    )
  )