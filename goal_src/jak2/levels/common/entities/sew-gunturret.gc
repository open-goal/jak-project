;;-*-Lisp-*-
(in-package goal)

;; name: sew-gunturret.gc
;; name in dgo: sew-gunturret
;; dgos: SEB, SWB, PAE, PAC

;; DECOMP BEGINS

(defpartgroup group-sew-gunturret-hit
  :id 1126
  :duration (seconds 0.5)
  :linger-duration (seconds 1)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 4867 :period 1500 :length 25 :offset -10)
    (sp-item 4868 :fade-after (meters 60) :period 1500 :length 30)
    (sp-item 4869 :fade-after (meters 60) :falloff-to (meters 60) :period 1500 :length 100)
    (sp-item 4870 :fade-after (meters 200) :falloff-to (meters 200) :period 1500 :length 50)
    (sp-item 4871 :period 1500 :length 5 :offset -10)
    (sp-item 4872 :fade-after (meters 150) :falloff-to (meters 150) :period 1500 :length 50)
    )
  )

(defpart 4870
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x34 :page #xc))
    (sp-rnd-flt spt-num 1.0 1.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 1) 1.0)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-rot-z)
      :flags (sp-flag spflag7)
      :random-rangef 65536.0
      :random-multf 1.0
      )
    (sp-rnd-flt spt-scale-y (meters 0.8) (meters 0.2) 1.0)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.02) (meters 0.01) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.01) (meters 0.13333334) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -0.36)
    (sp-flt spt-fade-b -4.24)
    (sp-flt spt-fade-a -0.22068965)
    (sp-flt spt-friction 0.95)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int-plain-rnd spt-next-time 25 4 1)
    (sp-launcher-by-id spt-next-launcher 4873)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-conerot-x)
      :flags (sp-flag from-pointer)
      :func '*sp-temp*
      )
    )
  )

(defpart 4872
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x33 :page #xc))
    (sp-rnd-flt spt-num 1.0 1.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 1) 1.0)
    (sp-flt spt-rot-z (degrees 0.0))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.02) (meters 0.01) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.01) (meters 0.13333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -0.36)
    (sp-flt spt-fade-b -4.24)
    (sp-flt spt-fade-a 0.22068965)
    (sp-flt spt-friction 0.95)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (sp-int-plain-rnd spt-next-time 25 4 1)
    (sp-launcher-by-id spt-next-launcher 4873)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 4873
  :init-specs ((sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g 0.0)
    (sp-flt spt-fade-b 0.0)
    (sp-int-plain-rnd spt-next-time 5 19 1)
    (sp-launcher-by-id spt-next-launcher 4874)
    )
  )

(defpart 4874
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.016666668) (meters 0.016666668) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.44)
    (sp-flt spt-fade-g -2.36)
    (sp-flt spt-fade-b -2.64)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 4875)
    )
  )

(defpart 4875
  :init-specs ((sp-rnd-flt spt-scalevel-x (meters 0.008333334) (meters 0.008333334) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -1.2944444)
    (sp-flt spt-fade-g -0.7111111)
    (sp-flt spt-fade-b -0.094444446)
    (sp-rnd-flt spt-fade-a -0.06545454 -0.06545454 1.0)
    (sp-int-plain-rnd spt-next-time 150 29 1)
    (sp-launcher-by-id spt-next-launcher 4876)
    )
  )

(defpart 4876
  :init-specs ((sp-flt spt-fade-r 0.0) (sp-flt spt-fade-g 0.0) (sp-flt spt-fade-b 0.0))
  )

(defpart 4871
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x47 :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-scale-x (meters 5))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 96.0)
    (sp-flt spt-scalevel-x (meters 0.5))
    (sp-flt spt-rotvel-z (degrees 0.3))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -1.28)
    (sp-flt spt-fade-b -5.1)
    (sp-flt spt-fade-a 0.0)
    (sp-int spt-timer 100)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-int spt-next-time 50)
    (sp-launcher-by-id spt-next-launcher 4877)
    )
  )

(defpart 4877
  :init-specs ((sp-flt spt-scalevel-x (meters -0.2))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -2.56)
    (sp-flt spt-fade-b 0.0)
    (sp-flt spt-fade-a -1.92)
    )
  )

(defpart 4869
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x32 :page #xc))
    (sp-rnd-flt spt-num 5.0 3.0 1.0)
    (sp-flt spt-x (meters 0.25))
    (sp-rnd-flt spt-scale-x (meters 1) (meters 0.25) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 16.0 48.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.083333336) (meters 0.083333336) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.006666667) (meters 0.0016666667) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -0.18)
    (sp-flt spt-fade-b -2.12)
    (sp-rnd-flt spt-accel-y -0.68266666 -1.3653333 1.0)
    (sp-flt spt-friction 0.87)
    (sp-int spt-timer 1000)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 4878)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 4878
  :init-specs ((sp-flt spt-scalevel-x (meters 0.0016666667))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g 0.02)
    (sp-flt spt-fade-b 0.23555556)
    (sp-int-plain-rnd spt-next-time 45 14 1)
    (sp-launcher-by-id spt-next-launcher 4879)
    )
  )

(defpart 4879
  :init-specs ((sp-flt spt-fade-r -0.5543478) (sp-flt spt-fade-g -0.5543478) (sp-flt spt-fade-a -0.13913043))
  )

(defpart 4867
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-rnd-flt spt-num 3.0 1.0 1.0)
    (sp-rnd-flt spt-x (meters 0) (meters 0.6) 1.0)
    (sp-rnd-flt spt-scale-x (meters 2) (meters 1.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 70.0 20.0 1.0)
    (sp-rnd-flt spt-g 70.0 20.0 1.0)
    (sp-rnd-flt spt-b 70.0 20.0 1.0)
    (sp-rnd-flt spt-a 0.0 40.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0) (meters 0.1) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.033333335) (meters 0.016666668) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.12) (degrees 0.24) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r 3.3)
    (sp-flt spt-fade-g 3.12)
    (sp-flt spt-fade-b 1.18)
    (sp-flt spt-fade-a 1.76)
    (sp-flt spt-friction 0.88)
    (sp-int spt-timer 710)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-int-plain-rnd spt-next-time 35 14 1)
    (sp-launcher-by-id spt-next-launcher 4880)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 4880
  :init-specs ((sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.53333336)
    (sp-flt spt-fade-g -1.9666667)
    (sp-flt spt-fade-b -2.2)
    (sp-flt spt-fade-a -0.41666666)
    (sp-int-plain-rnd spt-next-time 45 14 1)
    (sp-launcher-by-id spt-next-launcher 4881)
    )
  )

(defpart 4881
  :init-specs ((sp-flt spt-scalevel-x (meters 0))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.38833332)
    (sp-flt spt-fade-g -0.21333334)
    (sp-flt spt-fade-b -0.028333334)
    (sp-flt spt-fade-a -0.38833332)
    )
  )

(defpart 4868
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x31 :page #xc))
    (sp-rnd-flt spt-num 4.0 2.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.25) 1.0)
    (sp-int spt-rot-x 4)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 0.2) (meters 0.1) 1.0)
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-flt spt-g 96.0)
    (sp-flt spt-b 64.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.13333334) (meters 0.02) 1.0)
    (sp-flt spt-fade-g 1.6)
    (sp-flt spt-fade-b 3.2)
    (sp-flt spt-fade-a -1.6)
    (sp-int spt-timer 80)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    )
  )

(defpartgroup group-sew-gunturret-smoke
  :id 1127
  :duration (seconds 0.017)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 4882 :flags (bit7)))
  )

(defpart 4882
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.25) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 64.0 1.0)
    (sp-copy-from-other spt-g -1)
    (sp-copy-from-other spt-b -1)
    (sp-flt spt-a 16.0)
    (sp-rnd-flt spt-vel-z (meters 0.006666667) (meters 0.006666667) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.0033333334) (meters 0.004) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.3) (degrees 0.6) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a -0.026666667 -0.10666667 1.0)
    (sp-rnd-flt spt-accel-y 0.4096 0.13653333 1.0)
    (sp-flt spt-friction 0.98)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc00000 #xc03300)
      )
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpartgroup group-sew-gunturret-casing
  :id 1128
  :duration (seconds 0.017)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 4883 :fade-after (meters 80) :falloff-to (meters 100) :flags (bit7))
    (sp-item 4884 :fade-after (meters 80) :falloff-to (meters 100) :flags (bit7))
    )
  )

(defpart 4884
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #xc))
    (sp-flt spt-num 3.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.25) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 0.0)
    (sp-flt spt-a 32.0)
    (sp-rnd-flt spt-vel-z (meters 0.006666667) (meters 0.006666667) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.0033333334) (meters 0.004) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.3) (degrees 0.6) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -2.56)
    (sp-flt spt-fade-g -2.56)
    (sp-flt spt-fade-b 2.56)
    (sp-flt spt-fade-a -0.32)
    (sp-rnd-flt spt-accel-y 0.4096 0.13653333 1.0)
    (sp-flt spt-friction 0.98)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2)
    (new 'static 'sp-field-init-spec
      :field (sp-field-id spt-userdata)
      :flags (sp-flag plain-v2)
      :object (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc00000 #xc03300)
      )
    (sp-int spt-next-time 50)
    (sp-launcher-by-id spt-next-launcher 4885)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4885
  :init-specs ((sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g 0.0)
    (sp-flt spt-fade-b 0.0)
    (sp-rnd-flt spt-fade-a -0.026666667 -0.10666667 1.0)
    )
  )

(defpart 4883
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x92 :page #xc))
    (sp-flt spt-num 1.0)
    (sp-flt spt-z (meters -0.4))
    (sp-flt spt-scale-x (meters 2.5))
    (sp-int spt-rot-x 4)
    (sp-rnd-flt spt-scale-y (meters 0.15) (meters 0.02) 1.0)
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 255.0)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-flt spt-omega 6.144)
    (sp-rnd-flt spt-vel-z (meters 0.033333335) (meters 0.06666667) 1.0)
    (sp-flt spt-fade-b -8.0)
    (sp-rnd-flt spt-accel-y -6.826667 -6.826667 1.0)
    (sp-rnd-flt spt-friction 0.9 0.04 1.0)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3)
    (sp-func spt-func 'sparticle-motion-blur)
    (sp-int spt-next-time 15)
    (sp-launcher-by-id spt-next-launcher 4886)
    (sp-rnd-flt spt-conerot-x (degrees -20.0) (degrees 40.0) 1.0)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-flt spt-rotate-y (degrees 0.0))
    )
  )

(defpart 4886
  :init-specs ((sp-flt spt-r 255.0)
    (sp-flt spt-g 255.0)
    (sp-flt spt-b 0.0)
    (sp-flt spt-fade-r 0.0)
    (sp-flt spt-fade-g -2.45)
    (sp-rnd-flt spt-fade-a -0.384 -0.96 1.0)
    )
  )

(defskelgroup skel-sew-gunturret sew-gunturret sew-gunturret-lod0-jg sew-gunturret-idle-ja
              ((sew-gunturret-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              )

(defskelgroup skel-sew-gunturret-explode sew-gunturret sew-gunturret-explode-lod0-jg sew-gunturret-explode-idle-ja
              ((sew-gunturret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 15)
              )

(define *sew-gunturret-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 20 :parent-joint-index -1)
      )
    :collide-spec #x1
    )
  )

(deftype gun-turret-params (structure)
  ((normal-sg    skeleton-group   :offset-assert   0)
   (explode-sg   skeleton-group   :offset-assert   4)
   (enemy-info   enemy-info       :offset-assert   8)
   (idle-anim    int32            :offset-assert  12)
   (shoot-anim   int32            :offset-assert  16)
   (track-joint  int32            :offset-assert  20)
   (barrel-joint int32            :offset-assert  24)
   (gun-joint    int32            :offset-assert  28)
   (hole-joints  int32          8 :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )


(deftype sew-gunturret (enemy)
  ((gun-tilt-jm       joint-mod                        :offset-assert 532)
   (params            gun-turret-params                :offset-assert 536)
   (aim-pos           vector                   :inline :offset-assert 544)
   (gun-twist         float                            :offset-assert 560)
   (gun-tilt          float                            :offset-assert 564)
   (desired-twist     float                            :offset-assert 568)
   (desired-tilt      float                            :offset-assert 572)
   (los-clear         basic                            :offset-assert 576)
   (smoke-part        sparticle-launch-control         :offset-assert 580)
   (casing-part       sparticle-launch-control         :offset-assert 584)
   (flash-state       basic                            :offset-assert 588)
   (can-shoot         symbol                           :offset-assert 592)
   (last-hit-time     time-frame                       :offset-assert 600)
   (init-mat          matrix                   :inline :offset-assert 608)
   (activate-distance float                            :offset-assert 672)
   )
  :heap-base #x230
  :method-count-assert 142
  :size-assert         #x2a4
  :flag-assert         #x8e023002a4
  (:methods
    (sew-gunturret-method-137 (_type_ symbol) none 137)
    (sew-gunturret-method-138 (_type_) none 138)
    (sew-gunturret-method-139 (_type_) none 139)
    (sew-gunturret-method-140 (_type_ symbol) none 140)
    (sew-gunturret-method-141 (_type_) none 141)
    )
  )


(define *sew-gunturret-enemy-info*
  (new 'static 'enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x2 :param0 #x1 :param1 #x1)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 2
    :notice-anim 2
    :hostile-anim 2
    :hit-anim 2
    :knocked-anim -1
    :knocked-land-anim -1
    :die-anim 2
    :die-falling-anim -1
    :victory-anim -1
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint -1
    :notice-distance (meters 150)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 150)
    :default-hit-points 1
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    )
  )

(set! (-> *sew-gunturret-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod sew-gunturret-method-137 sew-gunturret ((obj sew-gunturret) (arg0 symbol))
  (cond
    ((and arg0 (-> obj los-clear))
     (let ((a0-2 (handle->process (-> obj focus handle))))
       (if a0-2
           (set! (-> obj aim-pos quad) (-> (get-trans (the-as process-focusable a0-2) 3) quad))
           )
       )
     )
    (else
      (sew-gunturret-method-139 obj)
      )
    )
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (s5-2 (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj node-list data (-> obj params track-joint))))
        )
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> obj aim-pos) (-> obj root-override2 trans))
      (vector-flatten! s4-0 s4-0 (-> obj init-mat vector 1))
      (vector-normalize! s4-0 1.0)
      (set! (-> obj desired-twist) (asin (vector-dot (the-as vector (-> obj init-mat)) s4-0)))
      (set! (-> obj desired-twist) (fmin 5461.3335 (fmax -5461.3335 (-> obj desired-twist))))
      (cond
        ((< 0.0 (vector-dot (-> obj init-mat vector 2) s4-0))
         )
        ((< (-> obj desired-twist) 0.0)
         (set! (-> obj desired-twist) -5461.3335)
         )
        (else
          (set! (-> obj desired-twist) 5461.3335)
          )
        )
      (cond
        ((and (!= (-> obj activate-distance) 0.0) (< (fabs (-> obj desired-twist)) 5461.3335))
         (vector-normalize-copy! s3-0 (-> obj node-list data (-> obj params track-joint) bone transform vector 1) 1.0)
         (vector-! s4-0 (-> obj aim-pos) s5-2)
         (vector-normalize! s4-0 1.0)
         (set! (-> obj desired-tilt) (- (asin (vector-dot s3-0 s4-0))))
         (set! (-> obj desired-tilt) (fmin 5461.3335 (fmax 0.0 (-> obj desired-tilt))))
         )
        (else
          (set! (-> obj desired-tilt) 0.0)
          )
        )
      )
    (vector-normalize-copy!
      (-> obj aim-pos)
      (-> obj node-list data (-> obj params barrel-joint) bone transform vector 2)
      (vector-vector-distance s5-2 (-> obj aim-pos))
      )
    )
  (vector+!
    (-> obj aim-pos)
    (-> obj aim-pos)
    (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj node-list data (-> obj params gun-joint)))
    )
  (let ((s5-4 (new 'stack-no-clear 'matrix)))
    (+! (-> obj gun-twist) (fmax -364.0889 (fmin 364.0889 (* 0.3 (- (-> obj desired-twist) (-> obj gun-twist))))))
    (matrix-rotate-y! s5-4 (-> obj gun-twist))
    (matrix*! s5-4 s5-4 (-> obj init-mat))
    (matrix->quaternion (-> obj root-override2 quat) s5-4)
    )
  (+! (-> obj gun-tilt) (fmax -364.0889 (fmin 364.0889 (* 0.3 (- (-> obj desired-tilt) (-> obj gun-tilt))))))
  (quaternion-axis-angle! (-> obj gun-tilt-jm quat) 1.0 0.0 0.0 (-> obj gun-tilt))
  0
  (none)
  )

(defmethod sew-gunturret-method-138 sew-gunturret ((obj sew-gunturret))
  (let ((a0-2 (handle->process (-> obj focus handle))))
    (if a0-2
        (set! (-> obj aim-pos quad) (-> (get-trans (the-as process-focusable a0-2) 3) quad))
        )
    )
  (let* ((s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj node-list data (-> obj params gun-joint))))
         (s5-3 (vector-! (new 'stack-no-clear 'vector) (-> obj aim-pos) s4-0))
         )
    (when (< (vector-dot (vector-normalize-copy! (new 'stack-no-clear 'vector) s5-3 1.0) (-> obj init-mat vector 2))
             (cos 364.0889)
             )
      (let ((a1-5 (new 'stack-no-clear 'collide-query)))
        (set! (-> a1-5 start-pos quad) (-> s4-0 quad))
        (set! (-> a1-5 move-dist quad) (-> s5-3 quad))
        (let ((v1-17 a1-5))
          (set! (-> v1-17 radius) 409.6)
          (set! (-> v1-17 collide-with)
                (collide-spec backgnd crate obstacle hit-by-player-list hit-by-others-list pusher)
                )
          (set! (-> v1-17 ignore-process0) obj)
          (set! (-> v1-17 ignore-process1) #f)
          (set! (-> v1-17 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
          (set! (-> v1-17 action-mask) (collide-action solid))
          )
        (if (>= (fill-and-probe-using-line-sphere *collide-cache* a1-5) 0.0)
            (set! (-> obj los-clear) #f)
            (set! (-> obj los-clear) (the-as basic #t))
            )
        )
      )
    )
  0
  (none)
  )

(defmethod sew-gunturret-method-139 sew-gunturret ((obj sew-gunturret))
  (vector+float*! (-> obj aim-pos) (-> obj root-override2 trans) (-> obj init-mat vector 2) 163840.0)
  0
  (none)
  )

(defmethod sew-gunturret-method-140 sew-gunturret ((obj sew-gunturret) (arg0 symbol))
  (let ((v1-4 (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj node-list data (-> obj params gun-joint))))
        (s4-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (let* ((s2-1 (vector-! (new 'stack-no-clear 'vector) (-> obj aim-pos) v1-4))
           (f30-0 (/ 2013265900.0 (vector-length s2-1)))
           (s3-0 (new 'stack-no-clear 'vector))
           )
      (set! (-> s4-0 ent) (-> obj entity))
      (set! (-> s4-0 charge) 1.0)
      (set! (-> s4-0 options) (projectile-options))
      (set! (-> s4-0 pos quad) (-> v1-4 quad))
      (set! (-> s4-0 notify-handle) (process->handle obj))
      (set! (-> s4-0 owner-handle) (the-as handle #f))
      (set! (-> s4-0 ignore-handle) (process->handle obj))
      (let* ((v1-12 *game-info*)
             (a0-18 (+ (-> v1-12 attack-id) 1))
             )
        (set! (-> v1-12 attack-id) a0-18)
        (set! (-> s4-0 attack-id) a0-18)
        )
      (set! (-> s4-0 timeout) (new 'static 'handle :process #x4b0 :u64 #x4b0))
      (vector-normalize-copy! (-> s4-0 vel) s2-1 491520.0)
      (let ((f30-1 (fmin 16384.0 f30-0)))
        (set-vector! s3-0 (-> s2-1 z) (-> s2-1 y) (- (-> s2-1 x)) 1.0)
        (vector-normalize! s3-0 (rand-vu-float-range (- f30-1) f30-1))
        (vector+! (-> s4-0 vel) (-> s4-0 vel) s3-0)
        (vector-cross! s3-0 s3-0 (-> s4-0 vel))
        (vector-normalize! s3-0 (rand-vu-float-range (- f30-1) f30-1))
        )
      (vector+! (-> s4-0 vel) (-> s4-0 vel) s3-0)
      )
    (spawn-projectile guard-shot s4-0 obj *default-dead-pool*)
    )
  (if arg0
      (sound-play "gtur-shot-fire")
      )
  (set! (-> obj flash-state) (the-as basic #t))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 0)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 1)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 2)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 3)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 4)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 5)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 6)))
  (spawn-with-cspace (-> obj casing-part) (-> obj node-list data (-> obj params hole-joints 7)))
  (none)
  )

(defstate hostile (sew-gunturret)
  :virtual #t
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type enemy hostile) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (ja :group! (-> self draw art-group data (-> self params idle-anim)))
    (set! (-> self flash-state) #f)
    (none)
    )
  :trans (behavior ()
    (if (and (logtest? (-> self enemy-flags) (enemy-flag look-at-focus)) (-> self enemy-info use-victory))
        (go-virtual victory)
        )
    (when (>= (- (-> self clock frame-counter) (-> self state-time)) (the-as time-frame (-> self reaction-time)))
      (if (>= 2 (the-as int (-> self focus aware)))
          (go-stare self)
          )
      )
    (set! (-> self root-override2 penetrated-by) (enemy-method-59 self))
    (none)
    )
  :code (behavior ()
    (sew-gunturret-method-139 self)
    (until #f
      (-> self clock frame-counter)
      (until (>= (- (-> self clock frame-counter) (-> self last-hit-time)) (seconds 2))
        (suspend)
        )
      (sew-gunturret-method-138 self)
      (sound-play "sew-gun-lock")
      (let ((gp-1 (-> self clock frame-counter)))
        (until (>= (- (-> self clock frame-counter) gp-1) (seconds 0.75))
          (sew-gunturret-method-137 self #t)
          (suspend)
          )
        )
      (ja :group! (-> self draw art-group data (-> self params shoot-anim)))
      (let ((s5-1 0)
            (gp-2 #t)
            )
        (sound-play "gturret")
        (let ((s4-1 (-> self clock frame-counter)))
          (until (>= (- (-> self clock frame-counter) s4-1) (seconds 0.125))
            (cond
              ((not (-> self can-shoot))
               )
              ((>= (- (-> self clock frame-counter) (the-as time-frame s5-1)) (seconds 0.05))
               (sew-gunturret-method-140 self gp-2)
               (set! s5-1 (the-as int (-> self clock frame-counter)))
               (set! gp-2 (not gp-2))
               )
              (else
                (set! (-> self flash-state) #f)
                )
              )
            (ja :num! (loop!))
            (suspend)
            )
          )
        )
      (set! (-> self flash-state) #f)
      (ja-channel-push! 1 (seconds 0.2))
      (ja :group! (-> self draw art-group data (-> self params idle-anim)))
      (let ((gp-3 (-> self clock frame-counter)))
        (until (>= (- (-> self clock frame-counter) gp-3) (seconds 0.5))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 0)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 1)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 2)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 3)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 4)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 5)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 6)))
          (spawn-with-cspace (-> self smoke-part) (-> self node-list data (-> self params hole-joints 7)))
          (suspend)
          )
        )
      )
    #f
    (none)
    )
  )

(defstate stare (sew-gunturret)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type enemy stare) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (!= (-> self activate-distance) 0.0)
        (sew-gunturret-method-137 self #f)
        )
    (none)
    )
  )

(defmethod enemy-method-74 sew-gunturret ((obj sew-gunturret) (arg0 process) (arg1 object) (arg2 symbol) (arg3 event-message-block))
  (with-pp
    (if (and (= arg2 'notify) (< 1 (the-as int arg1)) (= (-> arg3 param 0) 'attack) (= (-> arg3 param 1) *target*))
        (set! (-> obj last-hit-time) (-> pp clock frame-counter))
        )
    (case arg2
      (('start)
       (let ((v0-0 (the-as object #t)))
         (set! (-> obj can-shoot) (the-as symbol v0-0))
         v0-0
         )
       )
      (('stop)
       (set! (-> obj can-shoot) #f)
       #f
       )
      (('bonk)
       (send-event arg0 'target-mech-get-off 90)
       (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-10 from) (process->ppointer pp))
         (set! (-> a1-10 num-params) 2)
         (set! (-> a1-10 message) 'shove)
         (set! (-> a1-10 param 0) (the-as uint #f))
         (let ((v1-17 (new 'static 'attack-info :mask (attack-info-mask shove-back shove-up id))))
           (let* ((a0-4 *game-info*)
                  (a2-2 (+ (-> a0-4 attack-id) 1))
                  )
             (set! (-> a0-4 attack-id) a2-2)
             (set! (-> v1-17 id) a2-2)
             )
           (set! (-> v1-17 shove-back) 8192.0)
           (set! (-> v1-17 shove-up) 2048.0)
           (set! (-> a1-10 param 1) (the-as uint v1-17))
           )
         (send-event-function arg0 a1-10)
         )
       #f
       )
      (('flash-state)
       (-> obj flash-state)
       )
      (else
        ((method-of-type enemy enemy-method-74) obj arg0 arg1 arg2 arg3)
        )
      )
    )
  )

(defstate die (sew-gunturret)
  :virtual #t
  :enter (behavior ()
    (enemy-method-132 self)
    (let ((v1-3 (-> self root-override2 root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (set! (-> self hit-points) 0)
    (talker-speech-class-method-10 (-> *talker-speech* 53))
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (process-spawn joint-exploder (-> self params explode-sg) 6 gp-0 *sew-gunturret-exploder-params* :to self)
      )
    (activate! *camera-smush-control* 819.2 37 210 1.0 0.995 (-> self clock))
    (sound-play "turret-explode")
    (suspend)
    (cleanup-for-death self)
    (ja-channel-set! 0)
    (let ((gp-2 (new 'stack-no-clear 'vector)))
      (set! (-> gp-2 quad) (-> self root-override2 trans quad))
      (set! (-> gp-2 y) (+ 10240.0 (-> gp-2 y)))
      (let ((s5-2 (-> self clock frame-counter)))
        (until (>= (- (-> self clock frame-counter) s5-2) (seconds 2))
          (spawn (-> self part) gp-2)
          (suspend)
          )
        )
      )
    (let ((gp-3 (-> self clock frame-counter)))
      (until (>= (- (-> self clock frame-counter) gp-3) (seconds 1))
        (suspend)
        )
      )
    (send-event self 'death-end)
    (while (-> self child)
      (suspend)
      )
    (none)
    )
  :post (behavior ()
    (enemy-method-55 self)
    (none)
    )
  )

(defmethod enemy-method-114 sew-gunturret ((obj sew-gunturret))
  "@abstract"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) 0.0 9216.0 4096.0 18432.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-14 transform-index) 3)
      (set-vector! (-> v1-14 local-sphere) 0.0 6144.0 0.0 11264.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-16 transform-index) 5)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 -5120.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-19 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-19 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-19 prim-core collide-with))
      )
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

(defmethod enemy-method-98 sew-gunturret ((obj sew-gunturret) (arg0 process-focusable) (arg1 vector))
  (cond
    ((= (-> obj activate-distance) 0.0)
     (return #t)
     )
    (else
      (let ((f0-2 (vector-dot
                    (vector-! (new 'stack-no-clear 'vector) (get-trans arg0 3) (-> obj root-override2 trans))
                    (-> obj init-mat vector 2)
                    )
                  )
            )
        (return (and (< 0.0 f0-2) (< f0-2 (-> obj activate-distance))))
        )
      )
    )
  (the-as symbol 0)
  )

(defmethod deactivate sew-gunturret ((obj sew-gunturret))
  (if (nonzero? (-> obj smoke-part))
      (kill-and-free-particles (-> obj smoke-part))
      )
  (if (nonzero? (-> obj casing-part))
      (kill-and-free-particles (-> obj casing-part))
      )
  ((method-of-type enemy deactivate) obj)
  (none)
  )

(defmethod coin-flip? sew-gunturret ((obj sew-gunturret))
  "@returns The result of a 50/50 RNG roll"
  #f
  )

;; WARN: Return type mismatch enemy vs sew-gunturret.
(defmethod relocate sew-gunturret ((obj sew-gunturret) (arg0 int))
  (if (nonzero? (-> obj gun-tilt-jm))
      (&+! (-> obj gun-tilt-jm) arg0)
      )
  (if (nonzero? (-> obj smoke-part))
      (&+! (-> obj smoke-part) arg0)
      )
  (if (nonzero? (-> obj casing-part))
      (&+! (-> obj casing-part) arg0)
      )
  (the-as sew-gunturret ((method-of-type enemy relocate) obj arg0))
  )

(defmethod sew-gunturret-method-141 sew-gunturret ((obj sew-gunturret))
  (let ((s5-0
          (new 'static 'gun-turret-params
            :idle-anim 2
            :shoot-anim 3
            :track-joint 6
            :barrel-joint 4
            :gun-joint 5
            :hole-joints (new 'static 'array int32 8 7 8 9 10 11 12 13 14)
            )
          )
        )
    (set! (-> s5-0 normal-sg)
          (the-as skeleton-group (art-group-get-by-name *level* "skel-sew-gunturret" (the-as (pointer uint32) #f)))
          )
    (set! (-> s5-0 explode-sg)
          (the-as
            skeleton-group
            (art-group-get-by-name *level* "skel-sew-gunturret-explode" (the-as (pointer uint32) #f))
            )
          )
    (set! (-> s5-0 enemy-info) *sew-gunturret-enemy-info*)
    (set! (-> obj params) s5-0)
    )
  0
  (none)
  )

(defmethod enemy-method-115 sew-gunturret ((obj sew-gunturret))
  "@abstract"
  (sew-gunturret-method-141 obj)
  (initialize-skeleton obj (-> obj params normal-sg) (the-as pair 0))
  (enemy-method-113 obj (-> obj params enemy-info))
  (logclear! (-> obj mask) (process-mask actor-pause))
  (logclear! (-> obj enemy-flags) (enemy-flag notice))
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 1126) obj))
  (set! (-> obj smoke-part) (create-launch-control (-> *part-group-id-table* 1127) obj))
  (set! (-> obj casing-part) (create-launch-control (-> *part-group-id-table* 1128) obj))
  (set! (-> obj gun-tilt-jm)
        (new 'process 'joint-mod (joint-mod-mode joint-set*) obj (-> obj params barrel-joint))
        )
  (set! (-> obj los-clear) #f)
  (set! (-> obj gun-twist) 0.0)
  (set! (-> obj gun-tilt) 0.0)
  (set! (-> obj desired-twist) 0.0)
  (set! (-> obj desired-tilt) 0.0)
  (set! (-> obj flash-state) #f)
  (set! (-> obj can-shoot) #t)
  (set! (-> obj last-hit-time) 0)
  (quaternion->matrix (-> obj init-mat) (-> obj root-override2 quat))
  (set! (-> obj activate-distance) (res-lump-float (-> obj entity) 'distance))
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod go-idle sew-gunturret ((obj sew-gunturret))
  (cond
    ((task-node-closed? (game-task-node sewer-enemy-blow-up-turrets))
     (cleanup-for-death obj)
     (go (method-of-object obj die-fast))
     )
    (else
      (go (method-of-object obj idle))
      )
    )
  (none)
  )

(defskelgroup skel-pal-gun-turret pal-gun-turret pal-gun-turret-lod0-jg pal-gun-turret-idle-ja
              ((pal-gun-turret-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-pal-gun-turret-explode pal-gun-turret pal-gun-turret-explode-lod0-jg pal-gun-turret-explode-idle-ja
              ((pal-gun-turret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 15)
              )

(define *pal-gun-turret-enemy-info*
  (new 'static 'enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x2 :param0 #x2 :param1 #x2)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 2
    :notice-anim 2
    :hostile-anim 2
    :hit-anim 2
    :knocked-anim -1
    :knocked-land-anim -1
    :die-anim 2
    :die-falling-anim -1
    :victory-anim -1
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint -1
    :notice-distance (meters 150)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 150)
    :default-hit-points 1
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    )
  )

(set! (-> *pal-gun-turret-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(deftype pal-gun-turret (sew-gunturret)
  ()
  :heap-base #x230
  :method-count-assert 142
  :size-assert         #x2a4
  :flag-assert         #x8e023002a4
  (:methods
    (pal-gun-turret-method-140 (_type_ symbol) float :replace 140)
    )
  )


(defmethod pal-gun-turret-method-140 pal-gun-turret ((obj pal-gun-turret) (arg0 symbol))
  ((the-as (function sew-gunturret symbol none) (find-parent-method pal-gun-turret 140)) obj arg0)
  (set-palcab-turret-flash! 1.0)
  )

;; WARN: Return type mismatch object vs none.
(defmethod go-idle pal-gun-turret ((obj pal-gun-turret))
  (go (method-of-object obj idle))
  (none)
  )

(defmethod sew-gunturret-method-141 pal-gun-turret ((obj pal-gun-turret))
  (let ((s5-0
          (new 'static 'gun-turret-params
            :idle-anim 2
            :shoot-anim 3
            :track-joint 6
            :barrel-joint 4
            :gun-joint 5
            :hole-joints (new 'static 'array int32 8 7 8 9 10 11 12 13 14)
            )
          )
        )
    (set! (-> s5-0 normal-sg)
          (the-as skeleton-group (art-group-get-by-name *level* "skel-pal-gun-turret" (the-as (pointer uint32) #f)))
          )
    (set! (-> s5-0 explode-sg)
          (the-as
            skeleton-group
            (art-group-get-by-name *level* "skel-pal-gun-turret-explode" (the-as (pointer uint32) #f))
            )
          )
    (set! (-> s5-0 enemy-info) *pal-gun-turret-enemy-info*)
    (set! (-> obj params) s5-0)
    )
  0
  (none)
  )
