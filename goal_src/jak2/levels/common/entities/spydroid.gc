;;-*-Lisp-*-
(in-package goal)

;; name: spydroid.gc
;; name in dgo: spydroid
;; dgos: FRB, TOA

;; DECOMP BEGINS

(defpartgroup group-spydroid-trail
  :id 709
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 3162 :fade-after (meters 120) :falloff-to (meters 160))
    (sp-item 3163 :flags (bit6))
    (sp-item 3164 :fade-after (meters 120) :falloff-to (meters 160))
    )
  )

(defpart 3163
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:y (meters 0.5))
    (:scale-x (meters 1.7) (meters 1))
    (:rot-x (degrees 11.25))
    (:rot-z (degrees -17) (degrees 17))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 192.0 64.0)
    (:b 255.0)
    (:a 16.0)
    (:omega (degrees 6761.25))
    (:fade-a -1.0666667)
    (:timer (seconds 0.035))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 3072.0)
    )
  )

(defpart 3164
  :init-specs ((:texture (new 'static 'texture-id :index #x92 :page #xc))
    (:num 2.0 2.0)
    (:scale-x (meters 2.5))
    (:rot-x 4)
    (:scale-y (meters 0.033))
    (:r 128.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.03375))
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:fade-r -8.0)
    (:fade-g -0.85 -0.85)
    (:fade-a -0.10666667 -0.42666668)
    (:accel-y (meters -0.0016666667) (meters -0.00066666666))
    (:friction 0.96)
    (:timer (seconds 1) (seconds 0.997))
    (:flags (sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 135) (degrees 90))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters -0.5))
    )
  )

(defpart 3162
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 2.5 1.0)
    (:scale-x (meters 1.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0)
    (:b 255.0)
    (:a 64.0 8.0)
    (:vel-x (meters -0.0033333334) (meters 0.006666667))
    (:vel-y (meters -0.006666667) (meters -0.006666667))
    (:vel-z (meters -0.0033333334) (meters 0.006666667))
    (:scalevel-x (meters 0.006666667) (meters 0.008333334))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 3.2)
    (:fade-g 0.0)
    (:fade-b -3.2)
    (:fade-a -0.8)
    (:accel-y (meters 0.0001) (meters 0.000033333334))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc00000 #xc03300))
    (:next-time (seconds 0.135))
    (:next-launcher 3165)
    )
  )

(defpart 3165
  :init-specs ((:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b 0.0)
    (:fade-a -0.10666667 -0.21333334)
    (:func 'nothing)
    )
  )

(defpartgroup group-spydroid-explode
  :id 710
  :duration (seconds 3)
  :linger-duration (seconds 1)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 3166 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 3167 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 3168 :period (seconds 3) :length (seconds 0.05))
    (sp-item 3169 :fade-after (meters 60) :period (seconds 3) :length (seconds 0.035) :offset 10)
    (sp-item 3170 :fade-after (meters 60) :falloff-to (meters 60) :period (seconds 3) :length (seconds 0.167) :offset 20)
    (sp-item 3171 :fade-after (meters 200) :falloff-to (meters 200) :period (seconds 3) :length (seconds 0.085) :offset 20)
    (sp-item 3172 :fade-after (meters 150) :falloff-to (meters 150) :period (seconds 3) :length (seconds 0.067) :offset 30)
    )
  )

(defpart 3167
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 2))
    (:rot-x (degrees 11.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 24.0)
    (:scalevel-x (meters 0.10666667))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -4.266667)
    (:fade-b -8.5)
    (:fade-a 0.0)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:next-time (seconds 0.25))
    (:next-launcher 3173)
    )
  )

(defpart 3173
  :init-specs ((:scalevel-x (meters 0))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.85333335)
    (:fade-g -1.7066667)
    (:fade-b -1.7066667)
    (:fade-a -0.64)
    )
  )

(defpart 3172
  :init-specs ((:texture (new 'static 'texture-id :index #x34 :page #xc))
    (:num 2.0 0.2)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 3600) :store)
    (:scale-y (meters 0.8) (meters 0.2))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0 32.0)
    (:scalevel-x (meters 0.01) (meters 0.13333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.36)
    (:fade-b -4.24)
    (:fade-a -0.22068965)
    (:friction 0.95)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.085))
    (:next-launcher 3174)
    (:conerot-x '*sp-temp*)
    )
  )

(defpart 3171
  :init-specs ((:texture (new 'static 'texture-id :index #x33 :page #xc))
    (:num 1.0 0.2)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.02) (meters 0.01))
    (:scalevel-x (meters 0.01) (meters 0.13333334))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.36)
    (:fade-b -4.24)
    (:fade-a -0.22068965)
    (:friction 0.95)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.085))
    (:next-launcher 3174)
    (:conerot-x (degrees 0) (degrees 360))
    )
  )

(defpart 3174
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:next-time (seconds 0.017) (seconds 0.065)) (:next-launcher 3175))
  )

(defpart 3175
  :init-specs ((:scalevel-x (meters 0.016666668) (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.44)
    (:fade-g -2.36)
    (:fade-b -2.64)
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 3176)
    )
  )

(defpart 3176
  :init-specs ((:scalevel-x (meters 0.008333334) (meters 0.008333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.2944444)
    (:fade-g -0.7111111)
    (:fade-b -0.094444446)
    (:fade-a -0.06545454 -0.06545454)
    (:next-time (seconds 0.5) (seconds 0.097))
    (:next-launcher 3177)
    )
  )

(defpart 3177
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.1125))
  )

(defpart 3166
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-x (degrees 11.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 96.0)
    (:scalevel-x (meters 0.5))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -1.28)
    (:fade-b -5.1)
    (:fade-a 0.0)
    (:timer (seconds 0.217))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:next-time (seconds 0.1))
    (:next-launcher 3178)
    )
  )

(defpart 3178
  :init-specs ((:scalevel-x (meters -0.2857143))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -3.6571429)
    (:fade-b 0.0)
    (:fade-a -2.7428572)
    )
  )

(defpart 3170
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #xc))
    (:num 8.0 2.0)
    (:x (meters 0.25))
    (:scale-x (meters 1) (meters 0.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 16.0 48.0)
    (:vel-y (meters 0.083333336) (meters 0.083333336))
    (:scalevel-x (meters 0.006666667) (meters 0.0016666667))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.18)
    (:fade-b -2.12)
    (:accel-y (meters -0.00016666666) (meters -0.00033333333))
    (:friction 0.87)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 3179)
    (:conerot-x (degrees 0) (degrees 360))
    )
  )

(defpart 3179
  :init-specs ((:scalevel-x (meters 0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g 0.02)
    (:fade-b 0.23555556)
    (:next-time (seconds 0.15) (seconds 0.047))
    (:next-launcher 3180)
    )
  )

(defpart 3180
  :init-specs ((:fade-r -0.5543478) (:fade-g -0.5543478) (:fade-a -0.13913043))
  )

(defpart 3168
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 2.0 1.0)
    (:x (meters 0) (meters 0.6))
    (:scale-x (meters 2.5) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 70.0 20.0)
    (:g 70.0 20.0)
    (:b 70.0 20.0)
    (:a 0.0 40.0)
    (:vel-y (meters 0) (meters 0.1))
    (:scalevel-x (meters 0.033333335) (meters 0.02))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 3.3)
    (:fade-g 3.12)
    (:fade-b 1.18)
    (:fade-a 1.76)
    (:friction 0.88)
    (:timer (seconds 2.367))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 3181)
    (:conerot-x (degrees -1440) (degrees 2880))
    )
  )

(defpart 3181
  :init-specs ((:scalevel-x (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.53333336)
    (:fade-g -1.9666667)
    (:fade-b -2.2)
    (:fade-a -0.41666666)
    (:next-time (seconds 0.15) (seconds 0.047))
    (:next-launcher 3182)
    )
  )

(defpart 3182
  :init-specs ((:scalevel-x (meters 0))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.38833332)
    (:fade-g -0.21333334)
    (:fade-b -0.028333334)
    (:fade-a -0.38833332)
    )
  )

(defpart 3169
  :init-specs ((:texture (new 'static 'texture-id :index #x31 :page #xc))
    (:num 4.0 2.0)
    (:scale-x (meters 0.2) (meters 0.5))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.2) (meters 0.1))
    (:r 128.0 128.0)
    (:g 96.0)
    (:b 64.0)
    (:a 64.0 64.0)
    (:scalevel-x (meters 0.13333334) (meters 0.02))
    (:fade-g 1.6)
    (:fade-b 3.2)
    (:fade-a -1.6)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2))
    )
  )

(defpart 3183
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.75))
    (:rot-x (degrees 1.125))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 0.0)
    (:a 16.0)
    (:omega (degrees 1361.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 409.6)
    )
  )

(defpart 3184
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.5))
    (:rot-x (degrees 1.125))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 64.0)
    (:b 255.0)
    (:a 16.0 4.0)
    (:omega (degrees 1361.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 409.6)
    )
  )

(defpart 3185
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 2) (meters 0.2))
    (:rot-x (degrees 1.125))
    (:rot-z (degrees -2) (degrees 4))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 64.0)
    (:b 255.0)
    (:a 6.0 2.0)
    (:omega (degrees 1811.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 409.6)
    )
  )

(defpart 3186
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.75) (meters 0.1))
    (:rot-x (degrees 1.125))
    (:rot-z (degrees -2) (degrees 4))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 128.0 64.0)
    (:b 255.0)
    (:a 32.0 4.0)
    (:omega (degrees 1811.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 409.6)
    )
  )

(defskelgroup skel-spydroid spydroid spydroid-lod0-jg spydroid-idle-ja
              ((spydroid-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :shadow spydroid-shadow-mg
              )

(defskelgroup skel-spydroid-exploding spydroid spydroid-exploding-lod0-jg spydroid-exploding-idle-ja
              ((spydroid-exploding-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 12)
              )

(define *spydroid-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 21 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 22 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 25 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 26 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 27 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 23 :parent-joint-index -1)
      )
    :collide-spec #x241
    )
  )

(deftype spydroid (nav-enemy)
  ((old-y-deg    float                      :offset-assert 604)
   (diff-angle   float                      :offset-assert 608)
   (desire-turn  symbol                     :offset-assert 612)
   (hit-target   basic                      :offset-assert 616)
   (lightning    lightning-control        4 :offset-assert 620)
   (floor        float                      :offset-assert 636)
   (explode-part sparticle-launch-control   :offset-assert 640)
   )
  :heap-base #x210
  :method-count-assert 179
  :size-assert         #x284
  :flag-assert         #xb302100284
  (:methods
    (attack () _type_ :state 178)
    )
  )


(define *spydroid-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd push) :param0 #x1e)
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x3 :param0 #x64 :param1 #x64)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 3
    :notice-anim 3
    :hostile-anim 5
    :hit-anim 15
    :knocked-anim 11
    :knocked-land-anim 12
    :die-anim 15
    :die-falling-anim 15
    :victory-anim -1
    :jump-wind-up-anim 8
    :jump-in-air-anim 9
    :jump-land-anim 10
    :neck-joint 4
    :look-at-joint 4
    :bullseye-joint 4
    :sound-hit (static-sound-name "spydroid-hit")
    :sound-die (static-sound-name "spydroid-die")
    :notice-distance (meters 200)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 20)
    :default-hit-points 1
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3.5)
    :attack-shove-up (meters 2)
    :attack-mode 'shock
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #t
    :use-pacing #t
    :walk-anim 4
    :turn-anim -1
    :run-anim 5
    :taunt-anim -1
    :run-travel-speed (meters 8)
    :run-acceleration (meters 32)
    :run-turning-acceleration (meters 40)
    :walk-travel-speed (meters 4)
    :walk-acceleration (meters 16)
    :walk-turning-acceleration (meters 40)
    :maximum-rotation-rate (degrees 360.0)
    :notice-nav-radius (meters 2)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *spydroid-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod track-target! spydroid ((obj spydroid))
  "Does a lot of various things relating to interacting with the target
- tracks when the enemy was last drawn
- looks at the target and handles attacking
@TODO Not extremely well understood yet"
  (let ((t9-0 (method-of-type nav-enemy track-target!)))
    (t9-0 obj)
    )
  (when (< (-> obj root-override2 scale x) 1.0)
    (let ((f0-2 (fmin 1.0 (+ 0.025 (-> obj root-override2 scale x)))))
      (set-vector! (-> obj root-override2 scale) f0-2 f0-2 f0-2 1.0)
      )
    )
  (let ((s5-0 (new 'stack-no-clear 'vector))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (vector<-cspace! s5-0 (-> obj node-list data 12))
    (dotimes (s3-0 4)
      (let ((a0-4 (-> obj lightning s3-0))
            (v1-12 s5-0)
            )
        (set! (-> a0-4 state meet data 0 quad) (-> v1-12 quad))
        )
      (let ((v1-14 s3-0))
        (cond
          ((zero? v1-14)
           (vector<-cspace! s4-0 (-> obj node-list data 16))
           )
          ((= v1-14 1)
           (vector<-cspace! s4-0 (-> obj node-list data 20))
           )
          ((= v1-14 2)
           (vector<-cspace! s4-0 (-> obj node-list data 28))
           )
          (else
            (vector<-cspace! s4-0 (-> obj node-list data 24))
            )
          )
        )
      (let ((a0-13 (-> obj lightning s3-0))
            (v1-25 s4-0)
            )
        (set! (-> a0-13 state meet data (+ (-> a0-13 state points-to-draw) -1) quad) (-> v1-25 quad))
        )
      (when (not (and (-> obj next-state) (= (-> obj next-state name) 'die-falling)))
        (case (-> obj lightning s3-0 state mode)
          (((lightning-mode lm0) (lightning-mode lm3))
           (let ((v1-39 (-> obj lightning s3-0))
                 (a0-19 1)
                 )
             (let ((a1-10 (!= a0-19 (-> v1-39 state mode))))
               (case a0-19
                 ((3)
                  (if a1-10
                      (set! (-> v1-39 state counter) 0.0)
                      )
                  )
                 ((1)
                  (set! (-> v1-39 state start-color) (-> v1-39 spec start-color))
                  (set! (-> v1-39 state end-color) (-> v1-39 spec end-color))
                  )
                 )
               )
             (set! (-> v1-39 state mode) (the-as lightning-mode a0-19))
             )
           )
          )
        )
      )
    )
  (let ((f0-5 (quaternion-y-angle (-> obj root-override2 quat))))
    (set! (-> obj diff-angle) (- (-> obj old-y-deg) f0-5))
    (cond
      ((< 32768.0 (-> obj diff-angle))
       (set! (-> obj diff-angle) (+ -65536.0 (-> obj diff-angle)))
       )
      ((< (-> obj diff-angle) -32768.0)
       (set! (-> obj diff-angle) (+ 65536.0 (-> obj diff-angle)))
       )
      )
    (set! (-> obj old-y-deg) f0-5)
    )
  (set! (-> obj desire-turn)
        (< (+ 0.5 (* 0.00024414062 (-> obj nav state speed))) (* 0.005493164 (fabs (-> obj diff-angle))))
        )
  (if (and (< (-> obj root-override2 trans y) (+ -122880.0 (-> obj floor)))
           (-> obj next-state)
           (= (-> obj next-state name) 'jump)
           )
      (deactivate obj)
      )
  (if (and (-> obj next-state) (= (-> obj next-state name) 'jump))
      (spawn (-> obj part) (-> obj root-override2 trans))
      )
  0
  (none)
  )

(defmethod general-event-handler spydroid ((obj spydroid) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (local-vars (v1-6 vector) (sv-144 vector))
  (with-pp
    (rlet ((vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           )
      (init-vf0-vector)
      (case arg2
        (('touch 'bonk 'attack)
         (set! sv-144 (the-as vector (send-event (ppointer->process (-> obj parent)) 'widow-get-center)))
         (let* ((s1-0 arg0)
                (s0-0 (if (type? s1-0 process-drawable)
                          s1-0
                          )
                      )
                )
           (let ((v1-5 sv-144))
             (b! (not v1-5) cfg-15 :likely-delay (set! v1-6 sv-144))
             )
           (set! v1-6 (the-as vector s0-0))
           (label cfg-15)
           (cond
             (v1-6
               (let ((v1-9 (vector-! (new 'stack-no-clear 'vector) (-> obj root-override2 trans) sv-144))
                     (s1-1 (new 'stack-no-clear 'vector))
                     )
                 (set! (-> s1-1 x) (- (-> v1-9 z)))
                 (set! (-> s1-1 y) 0.0)
                 (set! (-> s1-1 z) (-> v1-9 x))
                 (set! (-> s1-1 w) 1.0)
                 (let ((v1-12 (vector-!
                                (new 'stack-no-clear 'vector)
                                (-> (the-as process-drawable s0-0) root trans)
                                (-> obj root-override2 trans)
                                )
                              )
                       )
                   (set! (-> s1-1 y) 0.0)
                   (set! (-> v1-12 y) 0.0)
                   (if (< (vector-dot v1-12 s1-1) 0.0)
                       (vector-negate! s1-1 s1-1)
                       )
                   )
                 (vector-normalize! s1-1 16384.0)
                 (vector+! s1-1 s1-1 (-> (the-as process-drawable s0-0) root trans))
                 (vector-! s1-1 s1-1 sv-144)
                 (set! (-> s1-1 y) 0.0)
                 (vector-normalize! s1-1 204800.0)
                 (let ((v1-17 s1-1))
                   (let ((a0-19 s1-1))
                     (.mov.vf vf6 vf0 :mask #b1000)
                     (.lvf vf4 (&-> a0-19 quad))
                     )
                   (.lvf vf5 (&-> (the-as vector sv-144) quad))
                   (.add.vf vf6 vf4 vf5 :mask #b111)
                   (.svf (&-> v1-17 quad) vf6)
                   )
                 (vector-! s1-1 s1-1 (-> (the-as process-drawable s0-0) root trans))
                 (set! (-> s1-1 y) 8192.0)
                 (let ((a1-17 (new 'stack-no-clear 'event-message-block)))
                   (set! (-> a1-17 from) (process->ppointer pp))
                   (set! (-> a1-17 num-params) 2)
                   (set! (-> a1-17 message) 'attack)
                   (set! (-> a1-17 param 0) (the-as uint #f))
                   (let ((v1-23 (new 'static 'attack-info :mask (attack-info-mask vector mode id))))
                     (let* ((a0-24 *game-info*)
                            (a2-2 (+ (-> a0-24 attack-id) 1))
                            )
                       (set! (-> a0-24 attack-id) a2-2)
                       (set! (-> v1-23 id) a2-2)
                       )
                     (set! (-> v1-23 mode) 'shock)
                     (set! (-> v1-23 vector quad) (-> s1-1 quad))
                     (set! (-> a1-17 param 1) (the-as uint v1-23))
                     )
                   (send-event-function arg0 a1-17)
                   )
                 )
               )
             (else
               (let ((a1-18 (new 'stack-no-clear 'event-message-block)))
                 (set! (-> a1-18 from) (process->ppointer pp))
                 (set! (-> a1-18 num-params) 2)
                 (set! (-> a1-18 message) 'attack)
                 (set! (-> a1-18 param 0) (the-as uint #f))
                 (let ((v1-28 (new 'static 'attack-info :mask (attack-info-mask mode shove-back shove-up id))))
                   (let* ((a0-29 *game-info*)
                          (a2-4 (+ (-> a0-29 attack-id) 1))
                          )
                     (set! (-> a0-29 attack-id) a2-4)
                     (set! (-> v1-28 id) a2-4)
                     )
                   (set! (-> v1-28 mode) 'shock)
                   (set! (-> v1-28 shove-up) 8192.0)
                   (set! (-> v1-28 shove-back) 16384.0)
                   (set! (-> a1-18 param 1) (the-as uint v1-28))
                   )
                 (send-event-function arg0 a1-18)
                 )
               )
             )
           )
         (let ((v1-30 (the-as object (-> arg3 param 1))))
           (if (or (!= arg0 *target*)
                   (and (= arg2 'attack)
                        (logtest? (attack-info-mask penetrate-using) (-> (the-as attack-info v1-30) mask))
                        (logtest? (penetrate dark-bomb) (-> (the-as attack-info v1-30) penetrate-using))
                        )
                   )
               ((method-of-type nav-enemy general-event-handler) obj arg0 arg1 arg2 arg3)
               )
           )
         )
        (('jump)
         (set! (-> obj floor) (-> (the-as vector (-> arg3 param 1)) y))
         ((method-of-type nav-enemy general-event-handler) obj arg0 arg1 arg2 arg3)
         )
        (else
          ((method-of-type nav-enemy general-event-handler) obj arg0 arg1 arg2 arg3)
          )
        )
      )
    )
  )

(defstate die-falling (spydroid)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy die-falling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self state-time) (current-time))
    (none)
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy die-falling) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (< (- (current-time) (-> self state-time)) (seconds 2))
        (spawn (-> self explode-part) (-> self root-override2 trans))
        )
    (none)
    )
  :code (behavior ()
    (dotimes (v1-0 4)
      (let ((a0-2 (-> self lightning v1-0))
            (a1-0 3)
            )
        (let ((a2-1 (!= a1-0 (-> a0-2 state mode))))
          (case a1-0
            ((3)
             (if a2-1
                 (set! (-> a0-2 state counter) 0.0)
                 )
             )
            ((1)
             (set! (-> a0-2 state start-color) (-> a0-2 spec start-color))
             (set! (-> a0-2 state end-color) (-> a0-2 spec end-color))
             )
            )
          )
        (set! (-> a0-2 state mode) (the-as lightning-mode a1-0))
        )
      )
    ((lambda :behavior spydroid
       ()
       (let ((gp-0 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
         (process-spawn
           joint-exploder
           (art-group-get-by-name *level* "skel-spydroid-exploding" (the-as (pointer uint32) #f))
           20
           gp-0
           *spydroid-exploder-params*
           :to self
           )
         )
       )
     )
    (suspend)
    (ja-channel-set! 0)
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 1))
        (suspend)
        )
      )
    (send-event self 'death-end)
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    (none)
    )
  )

(defstate attack (spydroid)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior spydroid) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self hit-target) #f)
    (set! (-> self enemy-flags) (logior (enemy-flag actor-pause-backup) (-> self enemy-flags)))
    (let ((v1-2 (-> self nav)))
      (set! (-> v1-2 target-speed) (+ 8192.0 (-> self enemy-info-override run-travel-speed)))
      )
    0
    (let ((v1-5 (-> self nav state)))
      (set! (-> v1-5 speed) (+ 8192.0 (-> self enemy-info-override run-travel-speed)))
      )
    0
    (let ((v1-7 (-> self nav)))
      (set! (-> v1-7 turning-acceleration) (* 4.0 (-> self enemy-info-override run-turning-acceleration)))
      )
    0
    (set! (-> self root-override2 penetrate-using) (penetrate generic-attack lunge))
    (enemy-method-49 self)
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-14 *game-info*)
           (a0-10 (+ (-> v1-14 attack-id) 1))
           )
      (set! (-> v1-14 attack-id) a0-10)
      (set! (-> self attack-id) a0-10)
      )
    (ja-channel-push! 1 (seconds 0.1))
    (ja :group! spydroid-attack-jump-ja :num! min)
    (none)
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (nav-enemy-method-168 self)
    (let ((v1-4 (-> self nav)))
      (set! (-> v1-4 target-speed) (-> self enemy-info-override run-travel-speed))
      )
    0
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (none)
    )
  :trans (behavior ()
    (enemy-method-49 self)
    nav-state
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-focus))
        (set! (-> self hit-target) (the-as basic #t))
        )
    (let ((v1-9 (ja-group)))
      (cond
        ((and v1-9 (= v1-9 spydroid-attack-jump-ja))
         (ja :num! (seek!))
         (when (ja-done? 0)
           (let ((v1-20 (-> self nav)))
             (set! (-> v1-20 target-speed) 0.0)
             )
           0
           (let ((v1-22 (-> self nav)))
             (set! (-> v1-22 acceleration) 262144.0)
             )
           0
           (let ((v1-24 (-> self nav)))
             (set! (-> v1-24 turning-acceleration) 0.0)
             )
           0
           (ja :group! spydroid-attack-land-ja :num! min)
           )
         )
        ((let ((v1-32 (ja-group)))
           (and v1-32 (= v1-32 spydroid-attack-land-ja))
           )
         (ja :num! (seek!))
         (cond
           ((ja-done? 0)
            (if (-> self hit-target)
                (go-virtual victory)
                (go-hostile self)
                )
            )
           ((not (-> self desire-turn))
            )
           ((< 0.0 (-> self diff-angle))
            (ja-channel-push! 1 (seconds 0.1))
            (ja :group! spydroid-turn-left-ja :num! min)
            )
           (else
             (ja-channel-push! 1 (seconds 0.1))
             (ja :group! spydroid-turn-right-ja :num! min)
             )
           )
         )
        ((let ((v1-58 (ja-group)))
           (and (and v1-58 (= v1-58 spydroid-turn-left-ja)) (and (-> self desire-turn) (< 0.0 (-> self diff-angle))))
           )
         (ja :num! (loop! (* 0.0019975142 (-> self diff-angle))))
         )
        (else
          (let ((v1-68 (ja-group)))
            (cond
              ((and (and v1-68 (= v1-68 spydroid-turn-right-ja)) (and (-> self desire-turn) (< (-> self diff-angle) 0.0)))
               (ja :num! (loop! (* -0.0019975142 (-> self diff-angle))))
               )
              ((-> self hit-target)
               (go-virtual victory)
               )
              (else
                (go-hostile self)
                )
              )
            )
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior spydroid) sleep-code)
  :post (the-as (function none :behavior spydroid) nav-enemy-chase-post)
  )

(defstate notice (spydroid)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy notice) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (react-to-focus self)
    (none)
    )
  )

(defstate hostile (spydroid)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((a0-1 (handle->process (-> self focus handle))))
      (if (and (>= (- (current-time) (-> self state-time)) (-> self reaction-time))
               (and a0-1 (let ((f0-0 (vector-vector-xz-distance-squared
                                       (get-trans (the-as process-focusable a0-1) 0)
                                       (-> self root-override2 trans)
                                       )
                                     )
                               (f1-0 16384.0)
                               )
                           (< f0-0 (* f1-0 f1-0))
                           )
                    )
               )
          (go-virtual attack)
          )
      )
    (cond
      ((not (-> self desire-turn))
       (let ((v1-23 (ja-group)))
         (when (not (and v1-23 (= v1-23 (-> self draw art-group data (-> self enemy-info-override hostile-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info-override hostile-anim)) :num! min)
           )
         )
       (ja :num! (loop! (/ (-> self nav state speed) (* 0.5 (-> self enemy-info-override run-travel-speed)))))
       )
      ((< 0.0 (-> self diff-angle))
       (let ((v1-43 (ja-group)))
         (cond
           ((not (and v1-43 (= v1-43 spydroid-turn-left-ja)))
            (ja-channel-push! 1 (seconds 0.1))
            (ja :group! spydroid-turn-left-ja :num! min)
            )
           (else
             (ja :num! (loop! (* 0.0019975142 (-> self diff-angle))))
             )
           )
         )
       )
      (else
        (let ((v1-55 (ja-group)))
          (cond
            ((not (and v1-55 (= v1-55 spydroid-turn-right-ja)))
             (ja-channel-push! 1 (seconds 0.1))
             (ja :group! spydroid-turn-right-ja :num! min)
             )
            (else
              (ja :num! (loop! (* -0.0019975142 (-> self diff-angle))))
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    (none)
    )
  )

(defstate circling (spydroid)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy circling) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (cond
      ((not (-> self desire-turn))
       (let ((v1-7 (ja-group)))
         (when (not (and v1-7 (= v1-7 (-> self draw art-group data (-> self enemy-info-override walk-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info-override walk-anim)) :num! min)
           )
         )
       (ja :num! (loop! (/ (-> self nav state speed) (* 0.5 (-> self enemy-info-override run-travel-speed)))))
       )
      ((< 0.0 (-> self diff-angle))
       (let ((v1-27 (ja-group)))
         (cond
           ((not (and v1-27 (= v1-27 spydroid-turn-left-ja)))
            (ja-channel-push! 1 (seconds 0.1))
            (ja :group! spydroid-turn-left-ja :num! min)
            )
           (else
             (ja :num! (loop! (* 0.0019975142 (-> self diff-angle))))
             )
           )
         )
       )
      (else
        (let ((v1-39 (ja-group)))
          (cond
            ((not (and v1-39 (= v1-39 spydroid-turn-right-ja)))
             (ja-channel-push! 1 (seconds 0.1))
             (ja :group! spydroid-turn-right-ja :num! min)
             )
            (else
              (ja :num! (loop! (* -0.0019975142 (-> self diff-angle))))
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (nav-enemy-method-165 self)
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    (none)
    )
  )

(defstate pacing (spydroid)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy pacing) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (cond
      ((not (-> self desire-turn))
       (let ((v1-7 (ja-group)))
         (when (not (and v1-7 (= v1-7 (-> self draw art-group data (-> self enemy-info-override walk-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info-override walk-anim)) :num! min)
           )
         )
       (ja :num! (loop! (/ (-> self nav state speed) (* 0.5 (-> self enemy-info-override run-travel-speed)))))
       )
      ((< 0.0 (-> self diff-angle))
       (let ((v1-27 (ja-group)))
         (cond
           ((not (and v1-27 (= v1-27 spydroid-turn-left-ja)))
            (ja-channel-push! 1 (seconds 0.1))
            (ja :group! spydroid-turn-left-ja :num! min)
            )
           (else
             (ja :num! (loop! (* 0.0019975142 (-> self diff-angle))))
             )
           )
         )
       )
      (else
        (let ((v1-39 (ja-group)))
          (cond
            ((not (and v1-39 (= v1-39 spydroid-turn-right-ja)))
             (ja-channel-push! 1 (seconds 0.1))
             (ja :group! spydroid-turn-right-ja :num! min)
             )
            (else
              (ja :num! (loop! (* -0.0019975142 (-> self diff-angle))))
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    (none)
    )
  )

(defstate stare (spydroid)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy stare) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (cond
      ((not (-> self desire-turn))
       (let ((v1-7 (ja-group)))
         (when (not (and v1-7 (= v1-7 (-> self draw art-group data (-> self enemy-info-override idle-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info-override idle-anim)) :num! min)
           )
         )
       (ja :num! (loop!))
       )
      ((< 0.0 (-> self diff-angle))
       (let ((v1-23 (ja-group)))
         (cond
           ((not (and v1-23 (= v1-23 spydroid-turn-left-ja)))
            (ja-channel-push! 1 (seconds 0.1))
            (ja :group! spydroid-turn-left-ja :num! min)
            )
           (else
             (ja :num! (loop! (* 0.0019975142 (-> self diff-angle))))
             )
           )
         )
       )
      (else
        (let ((v1-35 (ja-group)))
          (cond
            ((not (and v1-35 (= v1-35 spydroid-turn-right-ja)))
             (ja-channel-push! 1 (seconds 0.1))
             (ja :group! spydroid-turn-right-ja :num! min)
             )
            (else
              (ja :num! (loop! (* -0.0019975142 (-> self diff-angle))))
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    (none)
    )
  )

(defmethod init-enemy-collision! spydroid ((obj spydroid))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((v1-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-7 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-7 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-7 prim-core action) (collide-action deadly))
      (set! (-> v1-7 transform-index) 3)
      (set-vector! (-> v1-7 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-7)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

(defmethod coin-flip? spydroid ((obj spydroid))
  "@returns The result of a 50/50 RNG roll"
  #f
  )

(defmethod deactivate spydroid ((obj spydroid))
  (if (nonzero? (-> obj explode-part))
      (kill-and-free-particles (-> obj explode-part))
      )
  ((the-as (function process-focusable none) (find-parent-method spydroid 10)) obj)
  (none)
  )

;; WARN: Return type mismatch nav-enemy vs spydroid.
(defmethod relocate spydroid ((obj spydroid) (arg0 int))
  (dotimes (v1-0 4)
    (if (nonzero? (-> obj lightning v1-0))
        (&+! (-> obj lightning v1-0) arg0)
        )
    )
  (when (nonzero? (-> obj explode-part))
    (if (nonzero? (-> obj explode-part))
        (&+! (-> obj explode-part) arg0)
        )
    )
  (the-as spydroid ((method-of-type nav-enemy relocate) obj arg0))
  )

(defmethod init-enemy! spydroid ((obj spydroid))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-spydroid" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (init-enemy-behaviour-and-stats! obj *spydroid-nav-enemy-info*)
  (dotimes (s5-1 4)
    (set! (-> obj lightning s5-1)
          (new
            'process
            'lightning-control
            (new 'static 'lightning-spec
              :name #f
              :flags (lightning-spec-flags lsf0)
              :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
              :end-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
              :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
              :fade-start-factor 0.2
              :fade-time 120.0
              :texture (new 'static 'texture-id :index #x83 :page #xc)
              :reduction 0.42
              :num-points 8
              :box-size 8192.0
              :merge-factor 0.5
              :merge-count 2
              :radius 512.0
              :duration -1.0
              :sound #f
              )
            obj
            0.0
            )
          )
    (let ((v1-10 (-> obj lightning s5-1))
          (a0-5 0)
          )
      (let ((a1-5 (!= a0-5 (-> v1-10 state mode))))
        (case a0-5
          ((3)
           (if a1-5
               (set! (-> v1-10 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-10 state start-color) (-> v1-10 spec start-color))
           (set! (-> v1-10 state end-color) (-> v1-10 spec end-color))
           )
          )
        )
      (set! (-> v1-10 state mode) (the-as lightning-mode a0-5))
      )
    )
  (let ((v1-13 (-> obj neck)))
    (set! (-> v1-13 up) (the-as uint 1))
    (set! (-> v1-13 nose) (the-as uint 2))
    (set! (-> v1-13 ear) (the-as uint 0))
    (set-vector! (-> v1-13 twist-max) 3640.889 11832.889 0.0 1.0)
    (set! (-> v1-13 ignore-angle) 15473.777)
    )
  (set-vector! (-> obj root-override2 scale) 0.5 0.5 0.5 1.0)
  (let ((v1-17 (-> obj nav)))
    (set! (-> v1-17 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> obj root-override2 dynam) 573440.0)
  (logior! (-> obj nav flags) (nav-control-flag momentum-ignore-heading))
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 709) obj))
  (set! (-> obj explode-part) (create-launch-control (-> *part-group-id-table* 710) obj))
  (add-connection *part-engine* obj 8 obj 3183 (new 'static 'vector :x -204.8 :y 122.88 :z 1720.32 :w 163840.0))
  (add-connection
    *part-engine*
    obj
    10
    obj
    3183
    (new 'static 'vector :x -245.76 :y -122.88 :z 901.12 :w 163840.0)
    )
  (add-connection *part-engine* obj 4 obj 3184 (new 'static 'vector :x 819.2 :y -122.88 :z 3358.72 :w 163840.0))
  (add-connection *part-engine* obj 6 obj 3185 (new 'static 'vector :w 163840.0))
  (add-connection *part-engine* obj 6 obj 3186 (new 'static 'vector :w 163840.0))
  (logclear! (-> obj mask) (process-mask actor-pause))
  (logclear! (-> obj enemy-flags) (enemy-flag notice))
  0
  (none)
  )
