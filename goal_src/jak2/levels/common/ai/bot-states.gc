;;-*-Lisp-*-
(in-package goal)

;; name: bot-states.gc
;; name in dgo: bot-states
;; dgos: ATE, SEB, SWB, LKIDDOGE, UNB, CTYKORA, CTYASHA

;; DECOMP BEGINS

(defstate hit (bot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hit) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (stop-speech self (the-as uint 0) #t)
    (bot-method-191 self)
    (logclear! (-> self bot-flags) (bot-flags bf11))
    (none)
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hit) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (logior! (-> self bot-flags) (bot-flags bf11))
    (none)
    )
  :code (behavior ()
    (local-vars (v1-37 enemy-flag) (v1-45 enemy-flag))
    (ja-channel-push! 1 (seconds 0.2))
    (let ((f30-0 (get-rand-float-range self 0.9 1.1)))
      (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info-override hit-anim))
                  :num! (seek!
                    (the float
                         (+ (-> (the-as art-joint-anim (-> self draw art-group data (-> self enemy-info-override hit-anim)))
                                frames
                                num-frames
                                )
                            -1
                            )
                         )
                    f30-0
                    )
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-36 (-> self enemy-flags)))
      (if (logtest? v1-36 (enemy-flag checking-water))
          (set! v1-37 (logior v1-36 (enemy-flag enable-on-active)))
          (set! v1-37 (logclear v1-36 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-37)
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-move-dest))
        (set! (-> self mask) (logior (process-mask collectable) (-> self mask)))
        (logclear! (-> self mask) (process-mask collectable))
        )
    (let ((v1-44 (-> self enemy-flags)))
      (if (logtest? (enemy-flag no-initial-move-to-ground) v1-44)
          (set! v1-45 (logior (enemy-flag check-water-backup) v1-44))
          (set! v1-45 (logclear v1-44 (enemy-flag check-water-backup)))
          )
      )
    (set! (-> self enemy-flags) v1-45)
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (logclear! (-> self focus-status) (focus-status hit))
    (react-to-focus self)
    (none)
    )
  )

(defstate knocked (bot)
  :virtual #t
  :enter (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag look-at-focus))
    (stop-speech self (the-as uint 0) #t)
    (if (and (logtest? (-> self bot-flags) (bot-flags attacked))
             (nonzero? (-> self hit-points))
             (zero? (-> self fated-time))
             )
        (logior! (-> self bot-flags) (bot-flags bf12))
        )
    (bot-method-191 self)
    (when (zero? (-> self hit-points))
      (set! (-> self hit-points) 1)
      (set! (-> self fated-time) (current-time))
      )
    (logclear! (-> self bot-flags) (bot-flags bf11))
    (let ((t9-2 (-> (method-of-type nav-enemy knocked) enter)))
      (if t9-2
          (t9-2)
          )
      )
    (none)
    )
  :exit (behavior ()
    (let ((gp-0 (-> self incoming attack-id)))
      (let ((t9-0 (-> (method-of-type nav-enemy knocked) exit)))
        (if t9-0
            (t9-0)
            )
        )
      (set! (-> self incoming attack-id) gp-0)
      )
    (logior! (-> self bot-flags) (bot-flags bf11))
    (logclear! (-> self bot-flags) (bot-flags bf12))
    (none)
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy knocked) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (when (and (logtest? (-> self bot-flags) (bot-flags bf12)) (!= (-> self state-time) (current-time)))
      (logclear! (-> self bot-flags) (bot-flags bf12))
      (play-attacked-speech self)
      )
    (none)
    )
  )

(defstate die-falling (bot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy die-falling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (kill-nearby-enemies (-> self root-override2 trans) 61440.0)
    (stop-speech self (the-as uint 0) #f)
    (logclear! (-> self bot-flags) (bot-flags bf06 bf11))
    (set! (-> self delay-too-far-check) -1)
    (logior! (-> self root-override2 nav-flags) (nav-flags has-root-sphere))
    (fail-mission! self)
    (none)
    )
  :exit (behavior ()
    (logior! (-> self bot-flags) (bot-flags bf11))
    (logclear! (-> self bot-flags) (bot-flags bf13 bf14))
    (let ((t9-0 (-> (method-of-type nav-enemy die-falling) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (none)
    )
  :trans (behavior ()
    (fail-falling self)
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (let ((gp-0 (-> self draw art-group data (if (enemy-method-133 self)
                                                 (-> self enemy-info-override die-falling-anim)
                                                 (-> self enemy-info-override die-anim)
                                                 )
                    )
                )
          (f30-0 (get-rand-float-range self 0.8 1.2))
          )
      (ja-no-eval :group! gp-0
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim gp-0) frames num-frames) -1)) f30-0)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (until (not (channel-active? self (the-as uint 0)))
      (suspend)
      )
    (until #f
      (if (and (logtest? (-> self bot-flags) (bot-flags failed)) (reset? *fail-mission-control*))
          (reset! *fail-mission-control*)
          )
      (suspend)
      )
    #f
    (none)
    )
  )

(defstate failed (bot)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior bot) enemy-event-handler)
  :enter (behavior ()
    ((-> (method-of-type bot die-falling) enter))
    (logclear! (-> self bot-flags) (bot-flags bf11))
    (when (logtest? (-> self bot-flags) (bot-flags failed))
      (let ((a0-1 (-> self course too-far-fail-speeches)))
        (when (and (nonzero? a0-1) a0-1)
          (let ((a1-1 (bot-speech-list-method-9 a0-1 self (-> self course speeches) (speech-flags))))
            (if (>= a1-1 0)
                (play-speech self a1-1)
                )
            )
          )
        )
      )
    (none)
    )
  :exit (behavior ()
    (logior! (-> self bot-flags) (bot-flags bf11))
    (none)
    )
  :trans (behavior ()
    ((-> (method-of-type bot die-falling) trans))
    (if (channel-active? self (the-as uint 0))
        (set! (-> self state-time) (current-time))
        )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (let ((f30-0 (get-rand-float-range self 0.9 1.1))
          (gp-0 (-> self draw art-group data (-> self enemy-info-override idle-anim)))
          )
      (until #f
        (ja-no-eval :group! gp-0
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim gp-0) frames num-frames) -1)) f30-0)
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (when (and (logtest? (-> self bot-flags) (bot-flags failed))
                     (>= (- (current-time) (-> self state-time)) (seconds 0.5))
                     (reset? *fail-mission-control*)
                     )
            (cleanup-for-death self)
            (process-entity-status! self (entity-perm-status no-kill) #f)
            (reset! *fail-mission-control*)
            )
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior bot) nav-enemy-die-falling-post)
  )

(defstate hidden (bot)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior bot) enemy-event-handler)
  :enter (behavior ()
    (logior! (-> self focus-status) (focus-status disable))
    (let ((v1-3 (-> self root-override2 root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (set! (-> self notice-enemy-dist) 0.0)
    (logclear! (-> self enemy-flags) (enemy-flag trackable-backup))
    (none)
    )
  :exit (behavior ()
    (local-vars (v0-0 enemy-flag))
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-5 (-> self root-override2 root-prim)))
      (set! (-> v1-5 prim-core collide-as) (-> self root-override2 backup-collide-as))
      (set! (-> v1-5 prim-core collide-with) (-> self root-override2 backup-collide-with))
      )
    (let ((v1-6 (-> self enemy-flags)))
      (if (logtest? (enemy-flag enable-on-hostile) v1-6)
          (set! v0-0 (logior (enemy-flag trackable-backup) v1-6))
          (set! v0-0 (logclear v1-6 (enemy-flag trackable-backup)))
          )
      )
    (set! (-> self enemy-flags) v0-0)
    (none)
    )
  :code (the-as (function none :behavior bot) sleep-code)
  :post (the-as (function none :behavior bot) nav-enemy-simple-post)
  )
