;;-*-Lisp-*-
(in-package goal)

;; name: transport-level.gc
;; name in dgo: transport-level
;; dgos: FOR, DG1, FRA, CAS, PAE, FEA, FDB

;; DECOMP BEGINS

(deftype transport-level (process-focusable)
  ((y-dest                float        :offset-assert 204)
   (last-guard-spawn-time time-frame   :offset-assert 208)
   (nav-mesh              nav-mesh     :offset-assert 216)
   (spawn-side            uint32       :offset-assert 220)
   (spawn?                symbol       :offset-assert 224)
   (leave-time            time-frame   :offset-assert 232)
   (max-guard             uint32       :offset-assert 240)
   (count-guard           uint32       :offset-assert 244)
   (max-time              float        :offset-assert 248)
   (spawn-time            time-frame   :offset-assert 256)
   (ambient-sound-id      sound-id     :offset-assert 264)
   (num-wanted-guards     uint32       :offset-assert 268)
   (guards                handle     8 :offset-assert 272)
   )
  :heap-base #xd0
  :method-count-assert 35
  :size-assert         #x150
  :flag-assert         #x2300d00150
  (:methods
    (come-down () _type_ :state 27)
    (idle () _type_ :state 28)
    (leave () _type_ :state 29)
    (die-fast () _type_ :state 30)
    (transport-level-method-31 (_type_) none 31)
    (transport-level-method-32 (_type_) none 32)
    (transport-level-method-33 (_type_) uint 33)
    (transport-level-method-34 (_type_) none 34)
    )
  )


(defskelgroup skel-transport-level transport transport-lod0-jg transport-idle-ja
              ((transport-lod0-mg (meters 20)) (transport-lod1-mg (meters 40)) (transport-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 5 0 17)
              )

;; WARN: Return type mismatch object vs transport-level.
(defbehavior transport-level-event-handler transport-level ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (the-as transport-level (case arg2
                            (('die-fast)
                             (go-virtual die-fast)
                             )
                            (('leave)
                             (if (not (and (-> self next-state) (let ((v1-6 (-> self next-state name)))
                                                                  (or (= v1-6 'leave) (= v1-6 'die-fast))
                                                                  )
                                           )
                                      )
                                 (go-virtual leave)
                                 )
                             )
                            (('guards-left)
                             (- (-> self max-guard) (-> self count-guard))
                             )
                            (('guards-alive)
                             (set! v0-0 (-> arg3 param 0))
                             (set! (-> self num-wanted-guards) (the-as uint v0-0))
                             v0-0
                             )
                            (('guards-alive-count)
                             (set! v0-0 0)
                             (dotimes (v1-10 (the-as int (-> self num-wanted-guards)))
                               (if (handle->process (-> self guards v1-10))
                                   (set! v0-0 (+ (the-as int v0-0) 1))
                                   )
                               )
                             v0-0
                             )
                            (('spawn-time)
                             (set! v0-0 (-> arg3 param 0))
                             (set! (-> self spawn-time) (the-as time-frame v0-0))
                             v0-0
                             )
                            (('stop-spawning)
                             (set! (-> self spawn?) #f)
                             #f
                             )
                            )
          )
  )

(defmethod transport-level-method-34 transport-level ((this transport-level))
  (let ((f30-0 (lerp-scale 0.0 2.0 (fabs (-> this root transv y)) 0.0 122880.0))
        (f0-4 (lerp-scale 0.0 1.0 (- (-> this root trans y) (-> this y-dest)) 143360.0 20480.0))
        (a0-3 (static-sound-spec "transport" :volume 0.0 :mask (pitch reg0)))
        )
    (set! (-> a0-3 volume) (the int (* 1024.0 f0-4)))
    (set! (-> a0-3 pitch-mod) (the int (* 1524.0 f30-0)))
    (sound-play-by-spec a0-3 (-> this ambient-sound-id) (-> this root trans))
    )
  0
  (none)
  )

(defstate come-down (transport-level)
  :virtual #t
  :event transport-level-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-time! (-> self last-guard-spawn-time))
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (sleep-code)
    )
  :post (behavior ()
    (set! (-> self root transv y) (* 2.0 (- (-> self y-dest) (-> self root trans y))))
    (set! (-> self root transv y) (fmax -122880.0 (fmin 122880.0 (-> self root transv y))))
    (+! (-> self root trans y) (* (-> self root transv y) (seconds-per-frame)))
    (if (< (fabs (- (-> self root trans y) (-> self y-dest))) 409.6)
        (go-virtual idle)
        )
    (transport-level-method-34 self)
    (transform-post)
    )
  )

(defstate idle (transport-level)
  :virtual #t
  :event transport-level-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self root transv y) 0.0)
    (set! (-> self last-guard-spawn-time) 0)
    0
    )
  :exit (behavior ()
    '()
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (sound-play "tran-door-open")
    (ja-no-eval :group! (-> self draw art-group data 5) :num! (seek! max 0.5) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (sleep-code)
    )
  :post (behavior ()
    (local-vars (gp-0 symbol))
    (if (-> self spawn?)
        (transport-level-method-33 self)
        )
    (if (and (zero? (-> self leave-time))
             (begin
               (let ((gp-1 #t)
                     (a1-0 (new 'stack-no-clear 'event-message-block))
                     )
                 (set! (-> a1-0 from) (process->ppointer self))
                 (set! (-> a1-0 num-params) 1)
                 (set! (-> a1-0 message) 'get-object-reserve-count)
                 (set! (-> a1-0 param 0) (the-as uint 6))
                 (let ((v1-9 (the-as object (send-event-function *traffic-manager* a1-0))))
                   (cmove-#f-nonzero gp-0 v1-9 gp-1)
                   )
                 )
               gp-0
               )
             )
        (set! (-> self leave-time) (+ (current-time) (seconds 3)))
        )
    (if (and (nonzero? (-> self leave-time)) (< (-> self leave-time) (current-time)))
        (go-virtual leave)
        )
    (when (and (zero? (-> self leave-time))
               (nonzero? (-> self max-guard))
               (>= (-> self count-guard) (-> self max-guard))
               )
      (set! (-> self leave-time) (+ (current-time) (seconds 3)))
      (send-event self 'stop-spawning)
      )
    (transport-level-method-34 self)
    (transform-post)
    )
  )

(defstate die-fast (transport-level)
  :virtual #t
  :code (behavior ()
    (sound-stop (-> self ambient-sound-id))
    (cleanup-for-death self)
    )
  )

(defstate leave (transport-level)
  :virtual #t
  :event transport-level-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self root transv y) 0.0)
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (sound-play "tran-thrust")
    (sound-play "tran-door-close")
    (ja-no-eval :group! (-> self draw art-group data 6) :num! (seek! max 0.2) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.2))
      )
    (sleep-code)
    )
  :post (behavior ()
    (transport-level-method-34 self)
    (+! (-> self root transv y) (* 40960.0 (seconds-per-frame)))
    (set! (-> self root transv y) (fmax -122880.0 (fmin 122880.0 (-> self root transv y))))
    (+! (-> self root trans y) (* (-> self root transv y) (seconds-per-frame)))
    (if (and (not (logtest? (-> self draw status) (draw-control-status on-screen)))
             (< 163840.0 (- (-> self root trans y) (-> self y-dest)))
             )
        (go-virtual die-fast)
        )
    (transform-post)
    )
  )

(defmethod transport-level-method-33 transport-level ((this transport-level))
  (let ((v1-0 0))
    (dotimes (a0-1 8)
      (if (handle->process (-> this guards a0-1))
          (+! v1-0 1)
          )
      )
    (when (zero? (-> this count-guard))
      (set! (-> this last-guard-spawn-time) 0)
      0
      )
    (when (and (time-elapsed? (-> this last-guard-spawn-time) (-> this spawn-time))
               (< v1-0 (the-as int (-> this num-wanted-guards)))
               )
      (let ((s5-0 (new 'stack-no-clear 'crimson-guard-level-params)))
        (set! (-> s5-0 transport-side) (-> this spawn-side))
        (set! (-> s5-0 nav-mesh) (-> this nav-mesh))
        (set! (-> s5-0 pos quad) (-> this root trans quad))
        (+! (-> s5-0 pos y) 8192.0)
        (quaternion-rotate-local-y! (-> s5-0 quat) (-> this root quat) 32768.0)
        (set! (-> s5-0 handle) (the-as uint (process->handle this)))
        (set! (-> s5-0 weapon) 1)
        (dotimes (s4-0 (the-as int (-> this num-wanted-guards)))
          (when (not (handle->process (-> this guards s4-0)))
            (set! (-> this guards s4-0) (ppointer->handle (process-spawn crimson-guard-level s5-0 :to this)))
            #t
            (goto cfg-38)
            )
          )
        (label cfg-38)
        (when (-> s5-0 proc)
          (set! (-> this spawn-side) (- 1 (the-as int (-> this spawn-side))))
          (set-time! (-> this last-guard-spawn-time))
          (let ((v0-0 (+ (-> this count-guard) 1)))
            (set! (-> this count-guard) v0-0)
            v0-0
            )
          )
        )
      )
    )
  )

(defmethod transport-level-method-31 transport-level ((this transport-level))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 20480.0 0.0 69632.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-12 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-12 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-12 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-12 prim-core action) (collide-action solid))
      (set! (-> v1-12 transform-index) 4)
      (set-vector! (-> v1-12 local-sphere) 0.0 0.0 0.0 40960.0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set! (-> v1-14 transform-index) 3)
      (set-vector! (-> v1-14 local-sphere) 0.0 20480.0 0.0 69632.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-17 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod transport-level-method-32 transport-level ((this transport-level))
  (set! (-> this spawn-side) (the-as uint 0))
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! transport-level ((this transport-level) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (transport-level-method-31 this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-transport-level" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (transport-level-method-32 this)
  (logclear! (-> this mask) (process-mask actor-pause))
  (process-entity-status! this (entity-perm-status no-kill) #t)
  (set! (-> this spawn?) #t)
  (set! (-> this nav-mesh) (nav-mesh-from-res-tag arg0 'nav-mesh-actor 0))
  (set! (-> this num-wanted-guards) (the-as uint 4))
  (dotimes (v1-11 8)
    (set! (-> this guards v1-11) (the-as handle #f))
    )
  (set! (-> this spawn-time) (seconds 4))
  (+! (-> this root trans y) 40960.0)
  (set! (-> this y-dest) (-> this root trans y))
  (+! (-> this root trans y) 163840.0)
  (go (method-of-object this come-down))
  (none)
  )
