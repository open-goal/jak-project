;;-*-Lisp-*-
(in-package goal)

;; name: crimson-guard-hover.gc
;; name in dgo: crimson-guard-hover
;; dgos: FOR, DMI, FRA, STR, NEB, D3A, UNB

;; DECOMP BEGINS

(defpartgroup group-crimson-guard-hover-explosion
  :id 158
  :duration (seconds 2)
  :linger-duration (seconds 1)
  :flags (use-local-clock unk-5 unk-6 unk-7)
  :bounds (static-bspherem 0 0 0 15)
  :rotate ((degrees 0) (degrees 90) (degrees 0))
  :scale (0.75 0.75 0.75)
  :parts ((sp-item 744 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 745 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 746 :period (seconds 3) :length (seconds 0.05))
    (sp-item 747 :fade-after (meters 60) :period (seconds 3) :length (seconds 0.035) :offset 10)
    (sp-item 748 :fade-after (meters 60) :falloff-to (meters 60) :period (seconds 3) :length (seconds 0.167) :offset 20)
    (sp-item 749 :fade-after (meters 200) :falloff-to (meters 200) :period (seconds 3) :length (seconds 0.085) :offset 20)
    (sp-item 750 :fade-after (meters 150) :falloff-to (meters 150) :period (seconds 3) :length (seconds 0.067) :offset 30)
    )
  )

(defpartgroup group-crimson-guard-hover-jet-explosion
  :id 159
  :duration (seconds 2)
  :linger-duration (seconds 1)
  :flags (use-local-clock unk-5 unk-6 unk-7)
  :bounds (static-bspherem 0 0 0 15)
  :rotate ((degrees 0) (degrees 90) (degrees 0))
  :scale (0.3 0.3 0.3)
  :parts ((sp-item 744 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 745 :flags (bit6) :period (seconds 3) :length (seconds 0.017))
    (sp-item 746 :period (seconds 3) :length (seconds 0.05))
    (sp-item 747 :fade-after (meters 60) :period (seconds 3) :length (seconds 0.035) :offset 10)
    (sp-item 748 :fade-after (meters 60) :falloff-to (meters 60) :period (seconds 3) :length (seconds 0.167) :offset 20)
    (sp-item 749 :fade-after (meters 200) :falloff-to (meters 200) :period (seconds 3) :length (seconds 0.085) :offset 20)
    (sp-item 750 :fade-after (meters 150) :falloff-to (meters 150) :period (seconds 3) :length (seconds 0.067) :offset 30)
    )
  )

(defpart 745
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 2))
    (:rot-x (degrees 11.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 24.0)
    (:scalevel-x (meters 0.10666667))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -4.266667)
    (:fade-b -4.266667)
    (:fade-a 0.0)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:next-time (seconds 0.25))
    (:next-launcher 751)
    )
  )

(defpart 751
  :init-specs ((:scalevel-x (meters 0))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.85333335)
    (:fade-g -1.7066667)
    (:fade-b -1.7066667)
    (:fade-a -0.64)
    )
  )

(defpart 750
  :init-specs ((:texture (new 'static 'texture-id :index #x34 :page #xc))
    (:num 2.0 0.2)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 3600) :store)
    (:scale-y (meters 0.8) (meters 0.2))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0 32.0)
    (:scalevel-x (meters 0.01) (meters 0.13333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.36)
    (:fade-b -4.24)
    (:fade-a -0.22068965)
    (:friction 0.95)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.085))
    (:next-launcher 752)
    (:conerot-x '*sp-temp*)
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

(defpart 749
  :init-specs ((:texture (new 'static 'texture-id :index #x33 :page #xc))
    (:birth-func 'birth-func-texture-group)
    (:num 3.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.02) (meters 0.01))
    (:scalevel-x (meters 0.01) (meters 0.13333334))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.36)
    (:fade-b -4.24)
    (:fade-a -0.22068965)
    (:friction 0.95)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc03300))
    (:next-time (seconds 0.085))
    (:next-launcher 752)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

(defpart 752
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:next-time (seconds 0.017) (seconds 0.065)) (:next-launcher 753))
  )

(defpart 753
  :init-specs ((:scalevel-x (meters 0.016666668) (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.44)
    (:fade-g -2.36)
    (:fade-b -2.64)
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 754)
    )
  )

(defpart 754
  :init-specs ((:scalevel-x (meters 0.008333334) (meters 0.008333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.2944444)
    (:fade-g -0.7111111)
    (:fade-b -0.094444446)
    (:fade-a -0.06545454 -0.06545454)
    (:next-time (seconds 0.5) (seconds 0.097))
    (:next-launcher 755)
    )
  )

(defpart 755
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.1125))
  )

(defpart 744
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-x (degrees 11.25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 96.0)
    (:scalevel-x (meters 0.5))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -1.28)
    (:fade-b -5.1)
    (:fade-a 0.0)
    (:timer (seconds 0.217))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:next-time (seconds 0.1))
    (:next-launcher 756)
    )
  )

(defpart 756
  :init-specs ((:scalevel-x (meters -0.2857143))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -3.6571429)
    (:fade-b 0.0)
    (:fade-a -2.7428572)
    )
  )

(defpart 748
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #xc))
    (:num 8.0 2.0)
    (:x (meters 0.25))
    (:scale-x (meters 1) (meters 0.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 16.0 48.0)
    (:vel-y (meters 0.083333336) (meters 0.083333336))
    (:scalevel-x (meters 0.006666667) (meters 0.0016666667))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -0.18)
    (:fade-b -2.12)
    (:accel-y (meters -0.00016666666) (meters -0.00033333333))
    (:friction 0.87)
    (:timer (seconds 3.335))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 757)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

(defpart 757
  :init-specs ((:scalevel-x (meters 0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g 0.02)
    (:fade-b 0.23555556)
    (:next-time (seconds 0.15) (seconds 0.047))
    (:next-launcher 758)
    )
  )

(defpart 758
  :init-specs ((:fade-r -0.5543478) (:fade-g -0.5543478) (:fade-a -0.13913043))
  )

(defpart 746
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 8.0 1.0)
    (:x (meters 0) (meters 0.6))
    (:scale-x (meters 2.5) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 70.0 20.0)
    (:g 70.0 20.0)
    (:b 70.0 20.0)
    (:a 0.0 40.0)
    (:vel-y (meters 0) (meters 0.1))
    (:scalevel-x (meters 0.033333335) (meters 0.02))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 3.3)
    (:fade-g 3.12)
    (:fade-b 1.18)
    (:fade-a 1.76)
    (:friction 0.88)
    (:timer (seconds 2.367))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.117) (seconds 0.047))
    (:next-launcher 759)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

(defpart 759
  :init-specs ((:scalevel-x (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.53333336)
    (:fade-g -1.9666667)
    (:fade-b -2.2)
    (:fade-a -0.41666666)
    (:next-time (seconds 0.15) (seconds 0.047))
    (:next-launcher 760)
    )
  )

(defpart 760
  :init-specs ((:scalevel-x (meters 0))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.38833332)
    (:fade-g -0.21333334)
    (:fade-b -0.028333334)
    (:fade-a -0.38833332)
    )
  )

(defpart 747
  :init-specs ((:texture (new 'static 'texture-id :index #x31 :page #xc))
    (:num 4.0 2.0)
    (:scale-x (meters 0.2) (meters 0.5))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.2) (meters 0.1))
    (:r 128.0 128.0)
    (:g 96.0)
    (:b 64.0)
    (:a 64.0 64.0)
    (:scalevel-x (meters 0.13333334) (meters 0.02))
    (:fade-g 1.6)
    (:fade-b 3.2)
    (:fade-a -1.6)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2))
    )
  )

(defpart 761
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 16.0)
    (:y (meters 0.5) (meters 1))
    (:scale-x (meters 1.5) (meters 1.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 128.0 32.0)
    (:b 128.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.016666668) (meters 0.033333335))
    (:rotvel-z (degrees -1.2) (degrees 1.2))
    (:accel-y (meters 0.00066666666))
    (:timer (seconds 0.4))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12 sp-cpuinfo-flag-14 sp-cpuinfo-flag-21))
    (:next-time (seconds 0.1) (seconds 0.197))
    (:next-launcher 762)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 762
  :init-specs ((:fade-a -1.0666667))
  )

(defpart 763
  :init-specs ((:texture (new 'static 'texture-id :index #x92 :page #xc))
    (:num 4.0)
    (:y (meters 0.75))
    (:scale-x (meters 6))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.3) (meters 1))
    (:r 192.0)
    (:g 192.0)
    (:b 64.0 128.0)
    (:a 0.0)
    (:scalevel-x (meters 0.009765625))
    (:rotvel-z (degrees -0.15) (degrees 0.3))
    (:scalevel-y (meters 0.009765625))
    (:fade-a 2.1333334)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 sp-cpuinfo-flag-21))
    (:next-time (seconds 0.05))
    (:next-launcher 764)
    (:rotate-y (degrees 0))
    )
  )

(defpart 764
  :init-specs ((:fade-a -2.1333334))
  )

(defpart 765
  :init-specs ((:texture (new 'static 'texture-id :index #x29 :page #xc))
    (:num 1.0)
    (:y (meters 1))
    (:scale-x (meters 8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 196.0)
    (:g 196.0)
    (:b 196.0)
    (:a 28.0)
    (:timer (seconds 0.035))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 sp-cpuinfo-flag-21))
    )
  )

(defpart 766
  :init-specs ((:texture (new 'static 'texture-id :index #xb :page #xc))
    (:num 4.5)
    (:x (meters -0.5) (meters 1))
    (:y (meters 0.25) (meters 1.5))
    (:z (meters -0.5) (meters 1))
    (:scale-x (meters 0.3) 1 (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.3))
    (:r 100.0)
    (:g 100.0)
    (:b 100.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:rotvel-x (degrees 1.2))
    (:rotvel-y (degrees 2.4))
    (:rotvel-z (degrees 0) 3 (degrees 2.4))
    (:accel-y (meters -0.0033333334))
    (:friction 0.97)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12 sp-cpuinfo-flag-14 sp-cpuinfo-flag-21))
    (:next-time (seconds 0.25))
    (:next-launcher 767)
    (:conerot-x (degrees 40) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpartgroup group-crimson-guard-hover-explode
  :id 160
  :duration (seconds 0.017)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 761) (sp-item 763) (sp-item 765) (sp-item 766) (sp-item 766) (sp-item 766))
  )

(deftype crimson-guard-hover-shot (guard-shot)
  ()
  :heap-base #x170
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  )


(defmethod play-impact-sound crimson-guard-hover-shot ((obj crimson-guard-hover-shot) (arg0 projectile-options))
  (cond
    ((zero? arg0)
     )
    (else
      ((method-of-type guard-shot play-impact-sound) obj arg0)
      )
    )
  0
  (none)
  )

(deftype crimson-guard-hover (hover-enemy)
  ((gun-jmod              joint-mod                        :offset-assert 784)
   (hips-jmod             joint-mod                        :offset-assert 788)
   (entity-group          actor-group                      :offset-assert 792)
   (los                   los-control              :inline :offset-assert 800)
   (smoke-part            sparticle-launch-control         :offset-assert 948)
   (engine-part           sparticle-launch-control         :offset-assert 952)
   (last-fire-time        time-frame                       :offset-assert 960)
   (gun-x-angle           float                            :offset-assert 968)
   (gun-x-angle-final     float                            :offset-assert 972)
   (path-u                float                            :offset-assert 976)
   (path-du               float                            :offset-assert 980)
   (path-du-final         float                            :offset-assert 984)
   (path-dest             float                            :offset-assert 988)
   (sound-id              sound-id                         :offset-assert 992)
   (knocked-recover-anim  int32                            :offset-assert 996)
   (attack-wait-min       float                            :offset-assert 1000)
   (attack-wait-max       float                            :offset-assert 1004)
   (attack-miss-dist-min  float                            :offset-assert 1008)
   (attack-miss-dist-max  float                            :offset-assert 1012)
   (attack-miss-dist-curr float                            :offset-assert 1016)
   (shots-fired           int32                            :offset-assert 1020)
   )
  :heap-base #x380
  :method-count-assert 163
  :size-assert         #x400
  :flag-assert         #xa303800400
  (:methods
    (ambush-fly () _type_ :state 156)
    (ambush-attack () _type_ :state 157)
    (kick-attack () _type_ :state 158)
    (attack () _type_ :state 159)
    (die-now () _type_ :state 160)
    (shoot (_type_ vector projectile-init-by-other-params int int float) none 161)
    (crimson-guard-hover-method-162 (_type_ process-focusable) symbol 162)
    )
  )


(define *crimson-guard-hover-enemy-info*
  (new 'static 'enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #f
    :idle-anim-script #f
    :idle-anim 4
    :notice-anim 4
    :hostile-anim 4
    :hit-anim 12
    :knocked-anim 10
    :knocked-land-anim 19
    :die-anim -1
    :die-falling-anim -1
    :victory-anim 4
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint 26
    :look-at-joint 26
    :bullseye-joint 4
    :sound-hit (static-sound-name "crimson-guard-h")
    :sound-die (static-sound-name "crimson-guard-h")
    :notice-distance (meters 70)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 55)
    :default-hit-points 4
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 32768.0
    :knocked-hard-vxz-hi 77004.8
    :knocked-hard-vy-lo 60620.8
    :knocked-hard-vy-hi 95027.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 2)
    :shadow-max-y (meters 10)
    :shadow-min-y (meters -20)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    )
  )

(set! (-> *crimson-guard-hover-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defskelgroup skel-crimson-guard-hover-explode crimson-guard-hover crimson-guard-hover-explode-lod0-jg crimson-guard-hover-explode-idle-ja
              ((crimson-guard-hover-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7.5)
              :origin-joint-index 3
              )

(define *crimson-guard-hover-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      )
    :collide-spec #x1
    )
  )

;; WARN: Return type mismatch int vs sound-id.
(defmethod enemy-method-135 crimson-guard-hover ((obj crimson-guard-hover) (arg0 int))
  (if (and (zero? arg0) (logtest? #x4000000 (-> obj incoming penetrate-using)))
      (sound-play "hover-take-hit")
      ((the-as (function enemy int sound-id) (find-parent-method crimson-guard-hover 135)) obj arg0)
      )
  (the-as sound-id 0)
  )

(defstate ambush (crimson-guard-hover)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy ambush) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self last-fire-time) (+ (current-time) (the int (* 300.0 (get-rand-float-range self 2.0 3.0)))))
    (go-virtual ambush-fly)
    (none)
    )
  :exit (behavior ()
    '()
    (none)
    )
  )

(defstate ambush-fly (crimson-guard-hover)
  :virtual #t
  :event (the-as
    (function process int symbol event-message-block object :behavior crimson-guard-hover)
    enemy-event-handler
    )
  :trans (behavior ()
    (when (hover-nav-control-method-23 (-> self hover))
      (hover-enemy-method-153 self)
      (if (not (logtest? (-> self fact-info-override enemy-options) (enemy-option user0)))
          (hover-enemy-method-141 self 1.0)
          )
      ((-> (method-of-type hover-enemy ambush) exit))
      (go-virtual hostile)
      )
    (let ((gp-0 (handle->process (-> self focus handle))))
      (when gp-0
        (if (< (vector-vector-distance (-> self root-override2 trans) (get-trans (the-as process-focusable gp-0) 0))
               450560.0
               )
            (speech-control-method-15 *speech-control* self)
            )
        (if (crimson-guard-hover-method-162 self (the-as process-focusable gp-0))
            (go-virtual ambush-attack)
            )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior crimson-guard-hover) hover-enemy-fly-code)
  :post (-> (method-of-type hover-enemy ambush) post)
  )

(defstate ambush-attack (crimson-guard-hover)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('event-attack)
       (when (< (-> self shots-fired) 2)
         (let ((s5-0 (new 'stack-no-clear 'projectile-init-by-other-params))
               (gp-0 (-> self focus-pos))
               )
           (set! (-> s5-0 ent) (-> self entity))
           (set! (-> s5-0 charge) 1.0)
           (set! (-> s5-0 options) (projectile-options))
           (set! (-> s5-0 notify-handle) (the-as handle #f))
           (set! (-> s5-0 owner-handle) (the-as handle #f))
           (set! (-> s5-0 ignore-handle) (process->handle self))
           (let* ((v1-7 *game-info*)
                  (a0-6 (+ (-> v1-7 attack-id) 1))
                  )
             (set! (-> v1-7 attack-id) a0-6)
             (set! (-> s5-0 attack-id) a0-6)
             )
           (set! (-> s5-0 timeout) (seconds 4))
           (shoot self gp-0 s5-0 9 12 1.0)
           (shoot self gp-0 s5-0 11 12 -1.0)
           )
         (sound-play "hover-fire")
         (let ((v0-0 (the-as object (+ (-> self shots-fired) 1))))
           (set! (-> self shots-fired) (the-as int v0-0))
           v0-0
           )
         )
       )
      (else
        (enemy-event-handler proc arg1 event-type event)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (set! (-> self attack-miss-dist-curr) (-> self attack-miss-dist-min))
    (let ((f0-1 (vector-vector-distance-squared (-> self root-override2 trans) (-> self focus-pos)))
          (f1-0 122880.0)
          )
      (if (< f0-1 (* f1-0 f1-0))
          (speech-control-method-12 *speech-control* self (speech-type speech-type-0 speech-type-3))
          )
      )
    (set! (-> self shots-fired) 0)
    0
    (none)
    )
  :exit (behavior ()
    (set! (-> self last-fire-time) (current-time))
    (set! (-> self restart-fly-anims) #t)
    (none)
    )
  :trans (behavior ()
    ((-> (method-of-type crimson-guard-hover ambush) trans))
    (if (or (skip-check-los? (-> self los) 60) (not (enemy-method-95 self (-> self focus-pos) 9102.223)))
        (go-virtual ambush-fly)
        )
    (none)
    )
  :code (behavior ()
    (sound-play "hover-warn")
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! (-> self draw art-group data (-> self hover-info shoot-anim))
                :num! (seek!
                  (the float
                       (+ (-> (the-as art-joint-anim (-> self draw art-group data (-> self hover-info shoot-anim))) frames num-frames)
                          -1
                          )
                       )
                  )
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-virtual ambush-fly)
    (none)
    )
  :post (behavior ()
    (let* ((a1-0 (-> self node-list data (-> self hover-info gun-base)))
           (a0-2 (vector<-cspace! (new 'stack-no-clear 'vector) a1-0))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-4 (new 'stack-no-clear 'vector)))
        (set! (-> v1-4 quad) (-> self focus-pos quad))
        (+! (-> v1-4 y) (-> self attack-miss-dist-curr))
        (vector-! gp-0 v1-4 a0-2)
        )
      (vector-normalize! gp-0 1.0)
      (set! (-> self gun-x-angle-final) (fmax -5461.3335 (fmin 8192.0 (- (vector-x-angle gp-0)))))
      )
    (quaternion-vector-angle! (the-as quaternion (-> self gun-jmod target)) *x-vector* (-> self gun-x-angle))
    (seek!
      (-> self attack-miss-dist-curr)
      (-> self attack-miss-dist-max)
      (* 0.5 (-> self clock seconds-per-frame) (- (-> self attack-miss-dist-max) (-> self attack-miss-dist-min)))
      )
    ((the-as (function none) (-> (method-of-type crimson-guard-hover ambush) post)))
    (none)
    )
  )

(defstate notice (crimson-guard-hover)
  :virtual #t
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy notice) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (talker-spawn-func (-> *talker-speech* 10) *entity-pool* (target-pos 0) (the-as region #f))
    (set! (-> self last-fire-time) (+ (current-time) (seconds -1.5)))
    (none)
    )
  )

(defstate hostile (crimson-guard-hover)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((gp-0 (handle->process (-> self focus handle))))
      (when gp-0
        (if (< (vector-vector-distance (-> self root-override2 trans) (get-trans (the-as process-focusable gp-0) 0))
               450560.0
               )
            (speech-control-method-15 *speech-control* self)
            )
        (if (crimson-guard-hover-method-162 self (the-as process-focusable gp-0))
            (go-virtual attack)
            )
        )
      )
    (none)
    )
  )

(defstate kick-attack (crimson-guard-hover)
  :virtual #t
  :event (the-as
    (function process int symbol event-message-block object :behavior crimson-guard-hover)
    enemy-event-handler
    )
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (none)
    )
  :trans (behavior ()
    (if (>= (- (current-time) (-> self state-time)) (seconds 4))
        (go-hostile self)
        )
    (none)
    )
  :code (the-as (function none :behavior crimson-guard-hover) hover-enemy-fly-code)
  :post (behavior ()
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer self))
      (set! (-> a1-0 num-params) 0)
      (set! (-> a1-0 message) 'get-formation)
      (let ((t9-0 send-event-function)
            (v1-2 (-> self formation-entity))
            )
        (t9-0
          (if v1-2
              (-> v1-2 extra process)
              )
          a1-0
          )
        )
      )
    (let ((gp-0 (-> self dest-pos)))
      (let* ((s5-0 (handle->process (-> self focus handle)))
             (a0-6 (if (type? s5-0 process-focusable)
                       s5-0
                       )
                   )
             )
        (set! (-> gp-0 quad) (-> (get-trans (the-as process-focusable a0-6) 0) quad))
        )
      (set! (-> gp-0 y) (+ -20480.0 (-> gp-0 y)))
      (hover-nav-control-method-11 (-> self hover) gp-0)
      )
    (hover-enemy-dest-post)
    (none)
    )
  )

(defstate attack (crimson-guard-hover)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('event-attack)
       (when (< (-> self shots-fired) 2)
         (let ((s5-0 (new 'stack-no-clear 'projectile-init-by-other-params))
               (gp-0 (-> self focus-pos))
               )
           (set! (-> s5-0 ent) (-> self entity))
           (set! (-> s5-0 charge) 1.0)
           (set! (-> s5-0 options) (projectile-options))
           (set! (-> s5-0 notify-handle) (the-as handle #f))
           (set! (-> s5-0 owner-handle) (the-as handle #f))
           (set! (-> s5-0 ignore-handle) (process->handle self))
           (let* ((v1-7 *game-info*)
                  (a0-6 (+ (-> v1-7 attack-id) 1))
                  )
             (set! (-> v1-7 attack-id) a0-6)
             (set! (-> s5-0 attack-id) a0-6)
             )
           (set! (-> s5-0 timeout) (seconds 4))
           (shoot self gp-0 s5-0 9 12 1.0)
           (shoot self gp-0 s5-0 11 12 -1.0)
           )
         (sound-play "hover-fire")
         (let ((v0-0 (the-as object (+ (-> self shots-fired) 1))))
           (set! (-> self shots-fired) (the-as int v0-0))
           v0-0
           )
         )
       )
      (else
        (enemy-event-handler proc arg1 event-type event)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (set! (-> self attack-miss-dist-curr) (-> self attack-miss-dist-min))
    (set! (-> self shots-fired) 0)
    0
    (none)
    )
  :exit (behavior ()
    (set! (-> self last-fire-time) (current-time))
    (set! (-> self restart-fly-anims) #t)
    (none)
    )
  :trans (behavior ()
    (if (or (skip-check-los? (-> self los) 60) (not (enemy-method-95 self (-> self focus-pos) 9102.223)))
        (go-hostile self)
        )
    (none)
    )
  :code (behavior ()
    (sound-play "hover-warn")
    (let ((f0-0 (vector-vector-distance-squared (-> self root-override2 trans) (-> self focus-pos)))
          (f1-0 122880.0)
          )
      (if (< f0-0 (* f1-0 f1-0))
          (speech-control-method-12 *speech-control* self (speech-type speech-type-0 speech-type-3))
          )
      )
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! (-> self draw art-group data (-> self hover-info shoot-anim))
                :num! (seek!
                  (the float
                       (+ (-> (the-as art-joint-anim (-> self draw art-group data (-> self hover-info shoot-anim))) frames num-frames)
                          -1
                          )
                       )
                  )
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-hostile self)
    (none)
    )
  :post (behavior ()
    (let* ((a1-0 (-> self node-list data (-> self hover-info gun-base)))
           (a0-2 (vector<-cspace! (new 'stack-no-clear 'vector) a1-0))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-4 (new 'stack-no-clear 'vector)))
        (set! (-> v1-4 quad) (-> self focus-pos quad))
        (+! (-> v1-4 y) (-> self attack-miss-dist-curr))
        (vector-! gp-0 v1-4 a0-2)
        )
      (vector-normalize! gp-0 1.0)
      (set! (-> self gun-x-angle-final) (fmax -5461.3335 (fmin 8192.0 (- (vector-x-angle gp-0)))))
      )
    (quaternion-vector-angle! (the-as quaternion (-> self gun-jmod target)) *x-vector* (-> self gun-x-angle))
    (seek!
      (-> self attack-miss-dist-curr)
      (-> self attack-miss-dist-max)
      (* 0.5 (-> self clock seconds-per-frame) (- (-> self attack-miss-dist-max) (-> self attack-miss-dist-min)))
      )
    (hover-enemy-hostile-post)
    (none)
    )
  )

(defstate knocked (crimson-guard-hover)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (the-as (state hover-enemy) (find-parent-method crimson-guard-hover 30)) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (none)
    )
  )

(defstate knocked-recover (crimson-guard-hover)
  :virtual #t
  :code (behavior ()
    (local-vars (v1-35 enemy-flag) (v1-43 enemy-flag))
    (ja-channel-push! 1 (seconds 0.5))
    (ja-no-eval :group! (-> self draw art-group data (-> self knocked-recover-anim))
                :num! (seek!
                  (the float
                       (+ (-> (the-as art-joint-anim (-> self draw art-group data (-> self knocked-recover-anim))) frames num-frames)
                          -1
                          )
                       )
                  )
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set! (-> self restart-fly-anims) #t)
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-34 (-> self enemy-flags)))
      (if (logtest? v1-34 (enemy-flag checking-water))
          (set! v1-35 (logior v1-34 (enemy-flag enable-on-active)))
          (set! v1-35 (logclear v1-34 (enemy-flag enable-on-active)))
          )
      )
    (set! (-> self enemy-flags) v1-35)
    (if (logtest? (-> self enemy-flags) (enemy-flag look-at-move-dest))
        (set! (-> self mask) (logior (process-mask collectable) (-> self mask)))
        (logclear! (-> self mask) (process-mask collectable))
        )
    (let ((v1-42 (-> self enemy-flags)))
      (if (logtest? (enemy-flag no-initial-move-to-ground) v1-42)
          (set! v1-43 (logior (enemy-flag check-water-backup) v1-42))
          (set! v1-43 (logclear v1-42 (enemy-flag check-water-backup)))
          )
      )
    (set! (-> self enemy-flags) v1-43)
    (logclear! (-> self enemy-flags) (enemy-flag actor-pause-backup))
    (logclear! (-> self focus-status) (focus-status hit))
    (hover-nav-control-method-21 (-> self hover))
    (go-hostile self)
    (none)
    )
  )

(defstate die-now (crimson-guard-hover)
  :virtual #t
  :event (the-as
    (function process int symbol event-message-block object :behavior crimson-guard-hover)
    enemy-event-handler
    )
  :code (behavior ()
    (dispose! self)
    (let ((v1-3 (-> self root-override2 root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (set! (-> self hit-points) 0)
    (do-effect (-> self skel effect) 'death-default 0.0 -1)
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 1))
        (suspend)
        )
      )
    (send-event self 'death-end)
    (cleanup-for-death self)
    (none)
    )
  :post (the-as (function none :behavior crimson-guard-hover) transform-post)
  )

(defstate flying-death (crimson-guard-hover)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (the-as (state hover-enemy) (find-parent-method crimson-guard-hover 138)) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
      (when gp-0
        (let ((t9-3 (method-of-type part-tracker activate)))
          (t9-3 (the-as part-tracker gp-0) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
          )
        (let ((t9-4 run-function-in-process)
              (a0-3 gp-0)
              (a1-3 part-tracker-init)
              (a2-4 (-> *part-group-id-table* 159))
              (a3-1 0)
              (t0-0 #f)
              (t1-0 #f)
              (t2-0 #f)
              (t3-0 *launch-matrix*)
              )
          (set! (-> t3-0 trans quad) (-> self root-override2 trans quad))
          ((the-as (function object object object object object object object object none) t9-4)
           a0-3
           a1-3
           a2-4
           a3-1
           t0-0
           t1-0
           t2-0
           t3-0
           )
          )
        (-> gp-0 ppointer)
        )
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (cond
      ((< (-> self flying-death-spin-dest) 0.0)
       (ja-no-eval :group! crimson-guard-hover-death-left-ja
                   :num! (seek! (the float (+ (-> (the-as art-joint-anim crimson-guard-hover-death-left-ja) frames num-frames) -1)))
                   :frame-num 0.0
                   )
       (until (ja-done? 0)
         (suspend)
         (ja :num! (seek!))
         )
       )
      (else
        (ja-no-eval :group! crimson-guard-hover-death-right-ja
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim crimson-guard-hover-death-right-ja) frames num-frames) -1)))
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    (sleep-code)
    (none)
    )
  )

(defstate flying-death-explode (crimson-guard-hover)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (the-as (state hover-enemy) (find-parent-method crimson-guard-hover 139)) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (sound-play "hover-explode")
    (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
      (when gp-1
        (let ((t9-5 (method-of-type part-tracker activate)))
          (t9-5 (the-as part-tracker gp-1) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
          )
        (let ((t9-6 run-function-in-process)
              (a0-5 gp-1)
              (a1-4 part-tracker-init)
              (a2-5 (-> *part-group-id-table* 158))
              (a3-2 0)
              (t0-1 #f)
              (t1-1 #f)
              (t2-1 #f)
              (t3-0 *launch-matrix*)
              )
          (set! (-> t3-0 trans quad) (-> self root-override2 trans quad))
          ((the-as (function object object object object object object object object none) t9-6)
           a0-5
           a1-4
           a2-5
           a3-2
           t0-1
           t1-1
           t2-1
           t3-0
           )
          )
        (-> gp-1 ppointer)
        )
      )
    (let ((gp-2 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (process-spawn
        joint-exploder
        (art-group-get-by-name *level* "skel-crimson-guard-hover-explode" (the-as (pointer uint32) #f))
        25
        gp-2
        *crimson-guard-hover-exploder-params*
        :to self
        )
      )
    (sound-stop (-> self sound-id))
    (none)
    )
  )

(defmethod general-event-handler crimson-guard-hover ((obj crimson-guard-hover) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (local-vars (v1-15 enemy-flag))
  (case arg2
    (('attack-invinc)
     (case (-> (the-as attack-info (-> arg3 param 1)) mode)
       (('endlessfall)
        #f
        )
       )
     )
    (('hit 'hit-flinch 'hit-knocked)
     (speech-control-method-13 *speech-control* (the-as handle obj))
     (when (and (-> obj next-state) (let ((v1-8 (-> obj next-state name)))
                                      (or (= v1-8 'ambush-fly) (= v1-8 'ambush-attack))
                                      )
                )
       (hover-nav-control-method-20 (-> obj hover))
       (hover-enemy-method-140 obj #t)
       (let ((v1-14 (-> obj enemy-flags)))
         (if (logtest? v1-14 (enemy-flag checking-water))
             (set! v1-15 (logior v1-14 (enemy-flag enable-on-active)))
             (set! v1-15 (logclear v1-14 (enemy-flag enable-on-active)))
             )
         )
       (set! (-> obj enemy-flags) v1-15)
       (hover-enemy-method-153 obj)
       )
     (when (> (-> obj hit-points) 0)
       (let* ((s1-0 (handle->process (-> obj incoming attacker-handle)))
              (v1-23 (if (type? s1-0 process-focusable)
                         s1-0
                         )
                     )
              )
         (if (and *target*
                  v1-23
                  (let ((f0-0 (vector-vector-distance-squared (-> obj root-override2 trans) (-> obj focus-pos)))
                        (f1-0 122880.0)
                        )
                    (< f0-0 (* f1-0 f1-0))
                    )
                  )
             (speech-control-method-12 *speech-control* obj (speech-type speech-type-0 speech-type-1 speech-type-3))
             )
         )
       )
     ((the-as
        (function enemy process int symbol event-message-block object)
        (find-parent-method crimson-guard-hover 74)
        )
      obj
      arg0
      arg1
      arg2
      arg3
      )
     )
    (('notify)
     (let ((a0-27 (the-as object (-> arg3 param 0)))
           (v1-31 (the-as object (-> arg3 param 1)))
           )
       (when (= (the-as symbol a0-27) 'attack)
         (when (logtest? (-> (the-as process-focusable v1-31) mask) (process-mask target))
           (if (and (focus-test? (the-as process-focusable v1-31) dead)
                    (let ((f0-1 (vector-vector-distance-squared (-> obj root-override2 trans) (-> obj focus-pos)))
                          (f1-3 122880.0)
                          )
                      (< f0-1 (* f1-3 f1-3))
                      )
                    )
               (speech-control-method-12 *speech-control* obj (speech-type speech-type-1 speech-type-3))
               )
           )
         )
       )
     ((the-as
        (function enemy process int symbol event-message-block object)
        (find-parent-method crimson-guard-hover 74)
        )
      obj
      arg0
      arg1
      arg2
      arg3
      )
     )
    (else
      ((the-as
         (function enemy process int symbol event-message-block object)
         (find-parent-method crimson-guard-hover 74)
         )
       obj
       arg0
       arg1
       arg2
       arg3
       )
      )
    )
  )

;; WARN: Return type mismatch object vs symbol.
(defmethod crimson-guard-hover-method-162 crimson-guard-hover ((obj crimson-guard-hover) (arg0 process-focusable))
  (let* ((v1-1 (vector+! (new 'stack-no-clear 'vector) (-> obj root-override2 trans) (-> obj root-override2 transv)))
         (s5-1 (vector-! (new 'stack-no-clear 'vector) v1-1 (-> obj focus-pos)))
         (f30-0 (vector-length s5-1))
         (a0-4 (if arg0
                   arg0
                   (handle->process (-> obj focus handle))
                   )
               )
         )
    (the-as
      symbol
      (when a0-4
        (let ((s4-1 (vector-z-quaternion! (new 'stack-no-clear 'vector) (get-quat (the-as process-focusable a0-4) 0)))
              (s5-2 (vector-normalize-copy! (new 'stack-no-clear 'vector) s5-1 1.0))
              )
          (and (< 0.0 (vector-dot s4-1 s5-2))
               (and (>= (- (current-time) (-> obj last-fire-time))
                        (the int (* 300.0 (rand-vu-float-range (-> obj attack-wait-min) (-> obj attack-wait-max))))
                        )
                    (get-enemy-target obj)
                    (< f30-0 225280.0)
                    (and (< (fabs (vector-x-angle s5-2)) 3640.889)
                         (enemy-method-95 obj (-> obj focus-pos) 5461.3335)
                         (check-los? (-> obj los) (seconds 0.4))
                         )
                    )
               )
          )
        )
      )
    )
  )

(defmethod hover-enemy-method-145 crimson-guard-hover ((obj crimson-guard-hover) (arg0 int) (arg1 float) (arg2 int) (arg3 int))
  (local-vars (v1-1 int))
  0
  (if (< 0.0 arg1)
      (set! v1-1 arg2)
      (set! v1-1 arg3)
      )
  (let* ((f0-2 (- 1.0 arg1))
         (a2-2 (- 1.0 (* f0-2 f0-2 f0-2)))
         (a3-7 (-> obj skel root-channel arg0))
         )
    (let ((f0-6 (fabs a2-2)))
      (set! (-> a3-7 frame-interp 1) f0-6)
      (set! (-> a3-7 frame-interp 0) f0-6)
      )
    (set! (-> a3-7 frame-group) (the-as art-joint-anim (-> obj draw art-group data v1-1)))
    (set! (-> a3-7 param 0) 0.0)
    (set! (-> a3-7 frame-num) (-> obj skel root-channel 0 frame-num))
    (joint-control-channel-group! a3-7 (the-as art-joint-anim (-> obj draw art-group data v1-1)) num-func-chan)
    )
  (none)
  )

(defmethod enemy-method-52 crimson-guard-hover ((obj crimson-guard-hover) (arg0 vector))
  (let ((s4-0 (-> obj root-override2)))
    (case (-> obj incoming knocked-type)
      (((knocked-type knocked-type-2))
       (let ((gp-1 (-> obj root-override2 transv)))
         (let ((a1-1 (handle->process (-> obj incoming attacker-handle))))
           (if a1-1
               (vector-! gp-1 (-> (the-as process-focusable a1-1) root-override trans) (-> obj root-override2 trans))
               (vector-! gp-1 (-> obj incoming attacker-pos) (-> obj root-override2 trans))
               )
           )
         (set! (-> gp-1 y) 0.0)
         (vector-normalize! gp-1 1.0)
         (vector-rotate90-around-y! gp-1 gp-1)
         (if (< 0.0 (vector-dot
                      (vector-! (new 'stack-no-clear 'vector) (-> obj incoming attacker-pos) (-> s4-0 trans))
                      (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> s4-0 quat))
                      )
                )
             (vector-negate! gp-1 gp-1)
             )
         (let ((f30-1 (get-rand-float-range obj 0.0 1.0))
               (s5-1 (-> obj enemy-info))
               )
           (vector-float*! gp-1 gp-1 (lerp (-> s5-1 knocked-hard-vxz-lo) (-> s5-1 knocked-hard-vxz-hi) f30-1))
           (set! (-> gp-1 y) (lerp (-> s5-1 knocked-hard-vy-lo) (-> s5-1 knocked-hard-vy-hi) f30-1))
           )
         )
       )
      (else
        ((the-as (function hover-enemy vector none) (find-parent-method crimson-guard-hover 52)) obj arg0)
        )
      )
    )
  (none)
  )

(defmethod enemy-method-77 crimson-guard-hover ((obj crimson-guard-hover) (arg0 (pointer float)))
  (ja-channel-push! 1 0)
  (case (-> obj incoming knocked-type)
    (((knocked-type knocked-type-5))
     (let ((a0-3 (-> obj skel root-channel 0)))
       (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 12)))
       (set! (-> a0-3 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 12)) frames num-frames) -1))
             )
       (set! (-> a0-3 param 1) (-> arg0 0))
       (set! (-> a0-3 frame-num) 0.0)
       (joint-control-channel-group! a0-3 (the-as art-joint-anim (-> obj draw art-group data 12)) num-func-seek!)
       )
     (set! (-> obj knocked-recover-anim) 13)
     )
    (else
      (let ((a0-4 (-> obj skel root-channel 0)))
        (set! (-> a0-4 frame-group) (the-as art-joint-anim (-> obj draw art-group data 10)))
        (set! (-> a0-4 param 0)
              (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 10)) frames num-frames) -1))
              )
        (set! (-> a0-4 param 1) (-> arg0 0))
        (set! (-> a0-4 frame-num) 0.0)
        (joint-control-channel-group! a0-4 (the-as art-joint-anim (-> obj draw art-group data 10)) num-func-seek!)
        )
      (set! (-> obj knocked-recover-anim) 11)
      )
    )
  #t
  )

(defmethod enemy-method-78 crimson-guard-hover ((obj crimson-guard-hover) (arg0 (pointer float)))
  (cond
    ((zero? (-> obj hit-points))
     (ja-channel-push! 1 (seconds 0.4))
     (let ((a0-2 (-> obj skel root-channel 0)))
       (set! (-> a0-2 frame-group) (the-as art-joint-anim (-> obj draw art-group data 19)))
       (set! (-> a0-2 param 0)
             (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 19)) frames num-frames) -1))
             )
       (set! (-> a0-2 param 1) (-> arg0 0))
       (set! (-> a0-2 frame-num) 0.0)
       (joint-control-channel-group! a0-2 (the-as art-joint-anim (-> obj draw art-group data 19)) num-func-seek!)
       )
     #t
     )
    (else
      #f
      )
    )
  )

(defmethod track-target! crimson-guard-hover ((obj crimson-guard-hover))
  "Does a lot of various things relating to interacting with the target
- tracks when the enemy was last drawn
- looks at the target and handles attacking
@TODO Not extremely well understood yet"
  (with-pp
    (seek! (-> obj gun-x-angle) (-> obj gun-x-angle-final) (* 21845.334 (-> pp clock seconds-per-frame)))
    (let* ((s5-0 (hover-nav-control-method-16 (-> obj hover) (new 'stack-no-clear 'vector)))
           (s4-0
             (quaternion-vector-angle!
               (new 'stack-no-clear 'quaternion)
               *x-vector*
               (fmax -8192.0 (fmin 8192.0 (* 14563.556 (-> s5-0 z))))
               )
             )
           (a1-4
             (quaternion-vector-angle!
               (new 'stack-no-clear 'quaternion)
               *z-vector*
               (fmax -8192.0 (fmin 8192.0 (* 14563.556 (-> s5-0 x))))
               )
             )
           (s5-1 (new 'stack-no-clear 'quaternion))
           )
      (quaternion*! s5-1 a1-4 s4-0)
      (quaternion-slerp!
        (the-as quaternion (-> obj hips-jmod target))
        (the-as quaternion (-> obj hips-jmod target))
        s5-1
        (* 2.0 (-> pp clock seconds-per-frame))
        )
      )
    (let ((t9-6 (method-of-type hover-enemy track-target!)))
      (t9-6 obj)
      )
    (los-control-method-9 (-> obj los) (the-as process-focusable #f) (the-as vector #f) 2048.0)
    0
    (none)
    )
  )

(defmethod hover-enemy-method-142 crimson-guard-hover ((obj crimson-guard-hover))
  (let ((s5-0 (-> obj main-joint-acc))
        (s4-0 (-> obj main-joint-vel))
        (gp-0
          (lambda ((arg0 crimson-guard-hover) (arg1 cspace) (arg2 float) (arg3 float) (arg4 vector) (arg5 vector) (arg6 int))
            (local-vars (sv-192 float) (sv-208 quaternion) (sv-224 vector))
            (with-pp
              (set! sv-192 arg2)
              (let ((s0-0 arg3))
                (set! sv-224 arg4)
                (let ((s1-0 arg5)
                      (s3-0 arg6)
                      (s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) arg1))
                      (s5-0 (new 'stack-no-clear 'matrix))
                      (a1-3 (matrix-with-scale->quaternion (new 'stack-no-clear 'quaternion) (-> arg1 bone transform)))
                      )
                  (set! sv-208 (new 'stack-no-clear 'quaternion))
                  (let ((s2-1 (new 'stack-no-clear 'vector)))
                    (-> arg0 scale)
                    (quaternion-rotate-local-z! sv-208 a1-3 sv-192)
                    (quaternion->matrix s5-0 sv-208)
                    (set! (-> s2-1 quad) (-> arg0 root-override2 scale quad))
                    (scale-matrix! s5-0 s2-1 s5-0)
                    (let* ((s1-1 (vector-inv-orient-by-quat! (new 'stack-no-clear 'vector) s1-0 (-> arg0 root-override2 quat)))
                           (t9-6 vector-inv-orient-by-quat!)
                           (a0-10 (new 'stack-no-clear 'vector))
                           (a2-4 (-> arg0 root-override2 quat))
                           (v0-6 (t9-6 a0-10 sv-224 a2-4))
                           (f30-0 (* 2867200.0 (-> pp clock seconds-per-frame)))
                           (f28-0
                             (seek
                               (-> arg0 thrust s3-0)
                               (+ (* 0.4 (fmax 0.0 (* (-> v0-6 x) s0-0)))
                                  (fmax 0.0 (-> v0-6 y))
                                  (fabs (* 0.2 (-> v0-6 z)))
                                  (fmax 0.0 (-> s1-1 y))
                                  )
                               (* 0.2 f30-0)
                               )
                             )
                           )
                      (let ((f20-0 (lerp-scale 819.2 4096.0 f28-0 1638.4 f30-0))
                            (f26-0 (lerp-scale 4915.2 11468.8 f28-0 1638.4 f30-0))
                            (f22-0 (lerp-scale 0.5 1.5 f28-0 1638.4 f30-0))
                            (f24-0 (lerp-scale 0.1 1.0 f28-0 1638.4 f30-0))
                            )
                        (lerp-scale 0.1 1.0 f28-0 1638.4 f30-0)
                        (let ((f1-10 (lerp-scale 0.02 0.6 f28-0 1638.4 f30-0))
                              (f2-6 (fmin 1.0 (-> s2-1 x)))
                              (f0-14 (fmin 1.0 (-> s2-1 y)))
                              )
                          (set! (-> *part-id-table* 718 init-specs 4 initial-valuef) (* f20-0 f2-6))
                          (set! (-> *part-id-table* 718 init-specs 5 initial-valuef) (* f26-0 f0-14))
                          (set! (-> *part-id-table* 722 init-specs 3 initial-valuef) (* f22-0 f2-6))
                          (set! (-> *part-id-table* 719 init-specs 1 initial-valuef) (* f24-0 f0-14))
                          (set! (-> *part-id-table* 720 init-specs 1 initial-valuef) (* f1-10 f0-14))
                          (set! (-> *part-id-table* 721 init-specs 0 initial-valuef) (* f24-0 f0-14))
                          (set! (-> arg0 thrust s3-0) f28-0)
                          (let ((f0-15 (* f26-0 f0-14)))
                            (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-0 vector 1) (* -0.5 f0-15))
                            )
                          )
                        )
                      (set! (-> s5-0 trans quad) (-> s4-0 quad))
                      (spawn-with-matrix (-> arg0 engine-part) s5-0)
                      (let ((f0-17 (lerp-scale 0.4 1.0 f28-0 1638.4 f30-0)))
                        (sound-play-by-name
                          (static-sound-name "hover-jets")
                          (-> arg0 sound-id)
                          (the int (* 1024.0 f0-17))
                          0
                          0
                          (sound-group sfx)
                          #t
                          )
                        )
                      )
                    )
                  )
                )
              0
              (none)
              )
            )
          )
        )
    (gp-0
      obj
      (-> obj node-list data (-> obj hover-info engine-left))
      (-> obj hover-info thrust-rotate-left)
      -1.0
      s5-0
      s4-0
      0
      )
    (gp-0
      obj
      (-> obj node-list data (-> obj hover-info engine-right))
      (-> obj hover-info thrust-rotate-right)
      1.0
      s5-0
      s4-0
      1
      )
    )
  0
  (none)
  )

(defmethod hover-enemy-method-143 crimson-guard-hover ((obj crimson-guard-hover) (arg0 int) (arg1 float))
  (let* ((s2-0 (-> obj node-list data arg0))
         (s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) s2-0))
         (s5-0 (new 'stack-no-clear 'matrix))
         )
    (let ((a1-3 (matrix-with-scale->quaternion (new 'stack-no-clear 'quaternion) (-> s2-0 bone transform)))
          (s2-1 (new 'stack-no-clear 'quaternion))
          )
      (quaternion-rotate-local-z! s2-1 a1-3 arg1)
      (quaternion->matrix s5-0 s2-1)
      )
    (let ((f4-0 6144.0)
          (f0-0 17203.2)
          )
      (let ((f3-0 2.0)
            (f1-0 1.5)
            )
        1.5
        (let ((f2-1 1.0))
          (set! (-> *part-id-table* 718 init-specs 4 initial-valuef) f4-0)
          (set! (-> *part-id-table* 718 init-specs 5 initial-valuef) f0-0)
          (set! (-> *part-id-table* 722 init-specs 3 initial-valuef) f3-0)
          (set! (-> *part-id-table* 719 init-specs 1 initial-valuef) f1-0)
          (set! (-> *part-id-table* 720 init-specs 1 initial-valuef) f2-1)
          )
        (set! (-> *part-id-table* 721 init-specs 0 initial-valuef) f1-0)
        )
      (let ((v1-29 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-0 vector 1) (* -0.5 f0-0))))
        (vector+! (-> s5-0 trans) s4-0 v1-29)
        )
      )
    (spawn-with-matrix (-> obj engine-part) s5-0)
    )
  (sound-play "hover-jets" :id (-> obj sound-id))
  0
  (none)
  )

(defmethod shoot crimson-guard-hover ((obj crimson-guard-hover)
                                    (arg0 vector)
                                    (arg1 projectile-init-by-other-params)
                                    (arg2 int)
                                    (arg3 int)
                                    (arg4 float)
                                    )
  (vector<-cspace! (-> arg1 pos) (-> obj node-list data arg2))
  (let ((s2-1 (quaternion-vector-angle!
                (new 'stack-no-clear 'quaternion)
                (vector-normalize-copy!
                  (new 'stack-no-clear 'vector)
                  (-> obj node-list data arg2 bone transform vector 1)
                  1.0
                  )
                (* 273.06668 arg4)
                )
              )
        (a1-8 (vector-normalize-copy!
                (new 'stack-no-clear 'vector)
                (-> obj node-list data arg2 bone transform vector 2)
                1.0
                )
              )
        )
    (vector-orient-by-quat! (-> arg1 vel) a1-8 s2-1)
    )
  (vector-normalize! (-> arg1 vel) (* 819200.0 arg4))
  (spawn-projectile crimson-guard-hover-shot arg1 obj *default-dead-pool*)
  0
  (none)
  )

(defmethod kill-prefer-falling crimson-guard-hover ((obj crimson-guard-hover))
  "If available in `enemy-info`, [[go]] to the [[die-falling]] state, if not, [[die]]"
  (cond
    ((and (-> obj next-state) (= (-> obj next-state name) 'knocked))
     (go (method-of-object obj die-now))
     )
    ((-> obj enemy-info use-die-falling)
     (go (method-of-object obj die-falling))
     )
    (else
      (go (method-of-object obj die))
      )
    )
  )

;; WARN: Return type mismatch none vs symbol.
(defmethod enemy-method-63 crimson-guard-hover ((obj crimson-guard-hover) (arg0 process-focusable) (arg1 enemy-aware))
  (let ((t9-0 (method-of-type nav-enemy enemy-method-63)))
    (the-as symbol (if (t9-0 (the-as nav-enemy obj) arg0 arg1)
                       (set-dst-proc! (-> obj los) (-> obj focus handle))
                       )
            )
    )
  )

(defmethod hover-enemy-method-149 crimson-guard-hover ((obj crimson-guard-hover))
  (initialize-skeleton
    obj
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-crimson-guard-hover" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  0
  (none)
  )

(defmethod init-enemy-collision! crimson-guard-hover ((obj crimson-guard-hover))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 8) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 9))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd))
      (set! (-> s4-0 prim-core action) (collide-action solid semi-solid deadly))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) 0.0 -5734.4 0.0 16384.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec backgnd))
      (set! (-> v1-14 prim-core action) (collide-action solid deadly))
      (set! (-> v1-14 transform-index) 0)
      (set-vector! (-> v1-14 local-sphere) 0.0 10240.0 -2048.0 6144.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec backgnd))
      (set! (-> v1-16 prim-core action) (collide-action solid deadly))
      (set! (-> v1-16 transform-index) 0)
      (set-vector! (-> v1-16 local-sphere) 0.0 8192.0 -2048.0 4915.2)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec backgnd))
      (set! (-> v1-18 prim-core action) (collide-action solid deadly))
      (set! (-> v1-18 transform-index) 0)
      (set-vector! (-> v1-18 local-sphere) 0.0 12288.0 -2048.0 4915.2)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-20 prim-core action) (collide-action semi-solid deadly))
      (set! (-> v1-20 transform-index) 21)
      (set-vector! (-> v1-20 local-sphere) 0.0 0.0 0.0 3276.8)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-22 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-22 prim-core action) (collide-action semi-solid deadly))
      (set! (-> v1-22 transform-index) 24)
      (set-vector! (-> v1-22 local-sphere) 0.0 0.0 0.0 3276.8)
      )
    (let ((v1-24 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-24 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-24 prim-core action) (collide-action semi-solid))
      (set! (-> v1-24 transform-index) 8)
      (set-vector! (-> v1-24 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (let ((v1-26 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-26 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-26 prim-core action) (collide-action semi-solid))
      (set! (-> v1-26 transform-index) 10)
      (set-vector! (-> v1-26 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (let ((v1-28 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-28 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-28 prim-core action) (collide-action semi-solid))
      (set! (-> v1-28 transform-index) 7)
      (set-vector! (-> v1-28 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-31 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-31 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-31 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

(defmethod hover-enemy-method-150 crimson-guard-hover ((obj crimson-guard-hover))
  *crimson-guard-hover-enemy-info*
  )

(defmethod hover-enemy-method-151 crimson-guard-hover ((obj crimson-guard-hover))
  (new 'static 'hover-enemy-info
    :fly-forward-anim 7
    :fly-backward-anim 8
    :fly-left-anim 6
    :fly-right-anim 5
    :shoot-anim 9
    :main-joint 3
    :gun-base 7
    :engine-left 15
    :engine-right 17
    :thrust-rotate-left 32768.0
    :thrust-rotate-right -32768.0
    )
  )

(defmethod hover-enemy-method-152 crimson-guard-hover ((obj crimson-guard-hover))
  (new 'static 'hover-nav-params :max-speed 102400.0 :max-acceleration 143360.0 :friction 0.05)
  )

;; WARN: Return type mismatch hover-enemy vs crimson-guard-hover.
(defmethod relocate crimson-guard-hover ((obj crimson-guard-hover) (arg0 int))
  (if (nonzero? (-> obj gun-jmod))
      (&+! (-> obj gun-jmod) arg0)
      )
  (if (nonzero? (-> obj hips-jmod))
      (&+! (-> obj hips-jmod) arg0)
      )
  (if (nonzero? (-> obj smoke-part))
      (&+! (-> obj smoke-part) arg0)
      )
  (if (nonzero? (-> obj engine-part))
      (&+! (-> obj engine-part) arg0)
      )
  (the-as crimson-guard-hover ((method-of-type hover-enemy relocate) obj arg0))
  )

(defmethod deactivate crimson-guard-hover ((obj crimson-guard-hover))
  (if (nonzero? (-> obj smoke-part))
      (kill-and-free-particles (-> obj smoke-part))
      )
  (if (nonzero? (-> obj engine-part))
      (kill-and-free-particles (-> obj engine-part))
      )
  (sound-stop (-> obj sound-id))
  ((method-of-type hover-enemy deactivate) obj)
  (none)
  )

(defmethod init-enemy! crimson-guard-hover ((obj crimson-guard-hover))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (local-vars (sv-16 res-tag) (sv-32 res-tag) (sv-48 res-tag) (sv-64 res-tag))
  (hover-enemy-method-149 obj)
  (init-enemy-behaviour-and-stats! obj (hover-enemy-method-150 obj))
  (hover-enemy-method-155 obj)
  (new-source! (-> obj los) obj (seconds 2) (collide-spec backgnd enemy obstacle))
  (set! (-> obj neck up) (the-as uint 1))
  (set! (-> obj neck nose) (the-as uint 2))
  (set! (-> obj neck ear) (the-as uint 0))
  (set! (-> obj scale) 1.2)
  (set! (-> obj sound-id) (new-sound-id))
  (set! (-> obj root-override2 dynam gravity y) 327680.0)
  (set! (-> obj root-override2 dynam gravity-length) 327680.0)
  (set! (-> obj root-override2 dynam gravity-max) 327680.0)
  (set! (-> obj gun-jmod)
        (the-as joint-mod (new 'process 'joint-mod-rotate-local obj (-> obj hover-info gun-base) #t))
        )
  (set! (-> obj gun-x-angle) 0.0)
  (set! (-> obj gun-x-angle-final) 0.0)
  (set! (-> obj hips-jmod) (the-as joint-mod (new 'process 'joint-mod-rotate-local obj 18 #t)))
  (logclear! (-> obj mask) (process-mask actor-pause))
  (logclear! (-> obj enemy-flags) (enemy-flag notice))
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-30 (res-lump-data (-> obj entity) 'actor-groups (pointer actor-group) :tag-ptr (& sv-16))))
    (if (and v1-30 (= (-> sv-16 elt-count) 1))
        (set! (-> obj entity-group) (-> v1-30 0))
        (set! (-> obj entity-group) #f)
        )
    )
  (set! sv-32 (new 'static 'res-tag))
  (let ((v1-34 (res-lump-data (-> obj entity) 'timeout (pointer float) :tag-ptr (& sv-32))))
    (cond
      ((and v1-34 (= (-> sv-32 elt-count) 2))
       (set! (-> obj attack-wait-min) (-> v1-34 0))
       (set! (-> obj attack-wait-max) (-> v1-34 1))
       )
      (else
        (set! (-> obj attack-wait-min) 1.0)
        (set! (-> obj attack-wait-max) 3.0)
        )
      )
    )
  (set! sv-48 (new 'static 'res-tag))
  (let ((v1-40 (res-lump-data (-> obj entity) 'min-max (pointer float) :tag-ptr (& sv-48))))
    (set! (-> obj attack-miss-dist-min) (if (and v1-40 (> (the-as int (-> sv-48 elt-count)) 0))
                                            (-> v1-40 0)
                                            -40960.0
                                            )
          )
    )
  (set! sv-64 (new 'static 'res-tag))
  (let ((v1-43 (res-lump-data (-> obj entity) 'min-max (pointer float) :tag-ptr (& sv-64))))
    (set! (-> obj attack-miss-dist-max) (if (and v1-43 (< 1 (the-as int (-> sv-64 elt-count))))
                                            (-> v1-43 1)
                                            40960.0
                                            )
          )
    )
  (set! (-> obj attack-miss-dist-curr) 0.0)
  (set! (-> obj path) (new 'process 'path-control obj 'intro 0.0 (-> obj entity) #f))
  (set! (-> obj path-u) 0.0)
  (logior! (-> obj path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> obj smoke-part) (create-launch-control (-> *part-group-id-table* 154) obj))
  (set! (-> obj engine-part) (create-launch-control (-> *part-group-id-table* 156) obj))
  (add-connection
    *part-engine*
    obj
    26
    obj
    318
    (new 'static 'vector :x 1187.84 :y -3112.96 :z 1392.64 :w 163840.0)
    )
  (add-connection
    *part-engine*
    obj
    26
    obj
    318
    (new 'static 'vector :x -1187.84 :y -3112.96 :z 1392.64 :w 163840.0)
    )
  (add-connection *part-engine* obj 26 obj 743 (new 'static 'vector :y 1433.6 :z 1228.8 :w 163840.0))
  0
  (none)
  )
