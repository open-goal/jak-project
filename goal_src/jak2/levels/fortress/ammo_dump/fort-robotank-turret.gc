;;-*-Lisp-*-
(in-package goal)

;; name: fort-robotank-turret.gc
;; name in dgo: fort-robotank-turret
;; dgos: FORDUMPC, FDA

;; og:ignore-form:draw-2d-hud

;; DECOMP BEGINS

(deftype fort-robotank-turret (process-focusable)
  ((los                 los-control         :inline   :offset-assert 208)
   (reticle             handle                        :offset-assert 360)
   (screen              handle                        :offset-assert 368)
   (tank-quat           quaternion          :inline   :offset-assert 384)
   (tank-quat-vibe-only quaternion          :inline   :offset-assert 400)
   (rotate-quat         quaternion          :inline   :offset-assert 416)
   (rotate-rate         float                         :offset-assert 432)
   (rotate-mult         float                         :offset-assert 436)
   (shot-range          float                         :offset-assert 440)
   (fov-mult            float                         :offset-assert 444)
   (offset              vector              :inline   :offset-assert 448)
   (sight-pos           vector              :inline   :offset-assert 464)
   (firing-sight-pos    vector              :inline   :offset-assert 480)
   (aim-pos             vector              3 :inline :offset-assert 496)
   (aim-pos-2           vector              :inline   :offset        512)
   (aim-pos-1           vector              :inline   :offset        528)
   (gun-timer           time-frame                    :offset-assert 544)
   (gun-elev-jmod       joint-mod-set-local           :offset-assert 552)
   (gun-elev            float                         :offset-assert 556)
   (gun-elev-cam        float                         :offset-assert 560)
   (gun-joint-l         int32               2         :offset-assert 564)
   (gun-joint-r         int32               2         :offset-assert 572)
   (gun-spread          float                         :offset-assert 580)
   (gun-index           int32                         :offset-assert 584)
   (flags               uint16                        :offset-assert 588)
   (turn-sound-id       sound-id                      :offset-assert 592)
   )
  :heap-base #x1e0
  :method-count-assert 35
  :size-assert         #x254
  :flag-assert         #x2301e00254
  (:methods
    (idle () _type_ :state 27)
    (ready () _type_ :state 28)
    (fire () _type_ :state 29)
    (die () _type_ :state 30)
    (fort-robotank-turret-method-31 (_type_ vector vector) none 31)
    (fort-robotank-turret-method-32 (_type_ (inline-array vector)) (pointer process) 32)
    (fort-robotank-turret-method-33 (_type_) none 33)
    (fort-robotank-turret-method-34 (_type_ vector float) symbol 34)
    )
  )


(deftype fort-robotank-reticle (process-drawable)
  ((shadow-jmod  joint-mod          :offset-assert 200)
   (sight-jmod   joint-mod          :offset-assert 204)
   (ring-jmod    joint-mod  3       :offset-assert 208)
   (ring-timer   time-frame         :offset-assert 224)
   (sight-scale  vector     :inline :offset-assert 240)
   (collide-dist float              :offset-assert 256)
   )
  :heap-base #x90
  :method-count-assert 22
  :size-assert         #x104
  :flag-assert         #x1600900104
  (:methods
    (idle () _type_ :state 20)
    (lock () _type_ :state 21)
    )
  )


(deftype fort-roboscreen (process-drawable)
  ((anim-frame float     :offset-assert 200)
   (transition float     :offset-assert 204)
   (gui-id-1   sound-id  :offset-assert 208)
   (gui-id-2   sound-id  :offset-assert 212)
   )
  :heap-base #x60
  :method-count-assert 25
  :size-assert         #xd8
  :flag-assert         #x19006000d8
  (:methods
    (idle () _type_ :state 20)
    (active () _type_ :state 21)
    (deactive () _type_ :state 22)
    (die () _type_ :state 23)
    (fort-roboscreen-method-24 (_type_) none 24)
    )
  )


(defskelgroup skel-fort-roboscreen fort-roboscreen fort-roboscreen-lod0-jg fort-roboscreen-idle-ja
              ((fort-roboscreen-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

(defstate idle (fort-roboscreen)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('trigger)
       (set! (-> self state-time) (current-time))
       (go-virtual active)
       )
      (('die)
       (go-virtual die)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    (set! (-> self transition) 0.0)
    (none)
    )
  :code (the-as (function none :behavior fort-roboscreen) sleep-code)
  )

(defstate active (fort-roboscreen)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('untrigger)
       (go-virtual deactive)
       )
      (('die)
       (go-virtual die)
       )
      )
    )
  :enter (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (set-action!
      *gui-control*
      (gui-action play)
      (-> self gui-id-1)
      (gui-channel none)
      (gui-action none)
      (the-as string #f)
      (the-as (function gui-connection symbol) #f)
      (the-as process #f)
      )
    (set-action!
      *gui-control*
      (gui-action play)
      (-> self gui-id-2)
      (gui-channel none)
      (gui-action none)
      (the-as string #f)
      (the-as (function gui-connection symbol) #f)
      (the-as process #f)
      )
    (none)
    )
  :exit (behavior ()
    (set-action!
      *gui-control*
      (gui-action hidden)
      (-> self gui-id-1)
      (gui-channel none)
      (gui-action none)
      (the-as string #f)
      (the-as (function gui-connection symbol) #f)
      (the-as process #f)
      )
    (set-action!
      *gui-control*
      (gui-action hidden)
      (-> self gui-id-2)
      (gui-channel none)
      (gui-action none)
      (the-as string #f)
      (the-as (function gui-connection symbol) #f)
      (the-as process #f)
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (and (not (paused?)) (>= (- (current-time) (-> self state-time)) (seconds 1)))
        (seek! (-> self anim-frame) 0.0 (* 0.2 (-> self clock time-adjust-ratio)))
        (seek! (-> self transition) 1.0 (* 0.01 (-> self clock time-adjust-ratio)))
        )
      (set-roboscreen-alpha! (-> self transition))
      (ja :num-func num-func-identity :frame-num (-> self anim-frame))
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (fort-roboscreen-method-24 self)
    (ja-post)
    (none)
    )
  )

(defstate deactive (fort-roboscreen)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('die)
       (go-virtual die)
       )
      )
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (seek! (-> self anim-frame) 15.0 (* 0.2 (-> self clock time-adjust-ratio)))
        (seek! (-> self transition) 0.0 (* 0.015 (-> self clock time-adjust-ratio)))
        )
      (set-roboscreen-alpha! (-> self transition))
      (when (= (-> self anim-frame) 15.0)
        (set-roboscreen-alpha! 0.0)
        (go-virtual idle)
        )
      (ja :num-func num-func-identity :frame-num (-> self anim-frame))
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (fort-roboscreen-method-24 self)
    (ja-post)
    (none)
    )
  )

(defstate die (fort-roboscreen)
  :virtual #t
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 1))
        (seek! (-> self transition) 0.0 (-> self clock seconds-per-frame))
        (set-roboscreen-alpha! (-> self transition))
        (suspend)
        )
      )
    (none)
    )
  )

(defmethod fort-roboscreen-method-24 fort-roboscreen ((obj fort-roboscreen))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-0 (camera-matrix))
          (s5-0 (new 'stack-no-clear 'vector))
          (gp-0 (new 'stack-no-clear 'vector))
          (f30-0 4096.0)
          )
      ;; changed for PC port: stretch effect based on aspect ratio
      (let ((f0-4 (* 0.00013563369 (tan (* 0.5 (-> *math-camera* fov))) f30-0)))
        (set-vector! (-> obj root scale) (* f0-4 (if (-> *pc-settings* use-vis?) 1.0 (-> *pc-settings* aspect-ratio-scale))) f0-4 f0-4 1.0)
        )
      (set! (-> gp-0 quad) (-> (camera-pos) quad))
      (vector-normalize-copy! s5-0 (-> s3-0 vector 2) 1.0)
      (matrix->quaternion (-> obj root quat) s3-0)
      (let ((v1-10 (-> obj root trans)))
        (let ((a0-5 f30-0))
          (.mov vf7 a0-5)
          )
        (.lvf vf5 (&-> s5-0 quad))
        (.lvf vf4 (&-> gp-0 quad))
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> v1-10 quad) vf6)
        )
      )
    0
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior fort-roboscreen-init-by-other fort-roboscreen ((arg0 vector) (arg1 quaternion) (arg2 entity-actor))
  (process-entity-set! self arg2)
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-copy! (-> self root quat) arg1)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fort-roboscreen" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> self anim-frame) 15.0)
  (set! (-> self transition) 0.0)
  (set! (-> self gui-id-1)
        (add-process *gui-control* self (gui-channel hud-center-left) (gui-action hidden) (-> self name) 81920.0 0)
        )
  (set! (-> self gui-id-2)
        (add-process *gui-control* self (gui-channel hud-middle-left) (gui-action hidden) (-> self name) 81920.0 0)
        )
  (set-vector! (-> self draw color-emissive) 0.0 0.0 0.0 0.0)
  (set-vector! (-> self draw color-emissive) 0.0 0.0 0.0 0.0)
  (logior! (-> self skel status) (joint-control-status blend-shape))
  (ja :group! (-> self draw art-group data 3))
  (go-virtual idle)
  (none)
  )

(defmethod deactivate fort-roboscreen ((obj fort-roboscreen))
  (disable *screen-filter*)
  (set-roboscreen-alpha! 0.0)
  ((the-as (function process-drawable none) (find-parent-method fort-roboscreen 10)) obj)
  (none)
  )

(defpartgroup group-robotank-steamescape
  :id 561
  :bounds (static-bspherem 0 0 0 6)
  :parts ((sp-item 2471 :fade-after (meters 100) :falloff-to (meters 100) :flags (bit7)))
  )

(defpart 2471
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 0.5 1.0)
    (:x (meters -3) (meters 5))
    (:y (meters -0.1) (meters 0.3))
    (:z (meters 0.2) (meters 0.2))
    (:scale-x (meters 0.5) (meters 0.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g :copy r)
    (:b :copy g)
    (:a 0.0)
    (:vel-z (meters 0.005) (meters 0.0025))
    (:scalevel-x (meters 0.0016666667) (meters 0.0033333334))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.64)
    (:accel-y (meters 0.00016666666) (meters 0.00016666666))
    (:friction 0.99)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:next-time (seconds 0.085) (seconds 0.08))
    (:next-launcher 2472)
    (:launchrot-x (degrees -5) (degrees 10))
    (:launchrot-y (degrees -5) (degrees 10))
    (:rotate-y (degrees 0))
    )
  )

(defpart 2472
  :init-specs ((:fade-a -0.064 -0.064))
  )

(defskelgroup skel-fort-robotank-reticle fort-robotank-sight fort-robotank-sight-lod0-jg fort-robotank-sight-idle-ja
              ((fort-robotank-sight-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0.5 84)
              :longest-edge (meters 80)
              :shadow fort-robotank-sight-shadow-mg
              :origin-joint-index 5
              )

(defbehavior fort-robotank-reticle-post fort-robotank-reticle ()
  (let ((s5-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat)))
        (s1-0 (new 'stack-no-clear 'vector))
        (s3-0 (camera-pos))
        (s4-0 (-> self draw shadow-ctrl settings shadow-dir))
        (gp-0 (-> self draw shadow-ctrl settings bot-plane))
        (s2-0 (-> self draw shadow-ctrl settings top-plane))
        )
    (-> self draw shadow-ctrl settings)
    (vector-normalize! s5-0 1.0)
    (vector-negate! s1-0 s5-0)
    (set! (-> s4-0 x) (-> s5-0 x))
    (set! (-> s4-0 y) (-> s5-0 y))
    (set! (-> s4-0 z) (-> s5-0 z))
    (set! (-> s4-0 w) -16384.0)
    (set! (-> s2-0 quad) (-> s5-0 quad))
    (set! (-> gp-0 quad) (-> s5-0 quad))
    (let ((s4-1 (new 'stack-no-clear 'vector)))
      (vector+float*! s4-1 (-> self root trans) s5-0 -4096.0)
      (set! (-> s2-0 w) (- (vector-dot s4-1 s5-0)))
      (vector+float*! s4-1 (-> self root trans) s5-0 (-> self collide-dist))
      (let* ((a1-6 (vector-! (new 'stack-no-clear 'vector) s3-0 s4-1))
             (f1-0 (vector-length a1-6))
             (a2-2
               (vector-normalize-copy! (new 'stack-no-clear 'vector) a1-6 (fmax -20480.0 (fmin 20480.0 (* 0.75 f1-0))))
               )
             (v1-26 (vector-float*! (new 'stack-no-clear 'vector) s5-0 (- (vector-dot a2-2 s5-0))))
             )
        (vector+! s4-1 s4-1 v1-26)
        )
      (set! (-> gp-0 w) (- (vector-dot s4-1 s5-0)))
      )
    )
  0
  (vector-seek! (-> self sight-jmod twist-max) (-> self sight-scale) (* 6.0 (-> self clock seconds-per-frame)))
  (ja-post)
  (none)
  )

(defbehavior fort-robotank-reticle-handler fort-robotank-reticle ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (case arg2
    (('update-trans-only)
     (set! v0-0 (-> self root trans))
     (set! (-> (the-as vector v0-0) quad) (-> (the-as vector (-> arg3 param 0)) quad))
     v0-0
     )
    (('update)
     (let ((s5-0 (the-as object (-> arg3 param 0)))
           (gp-0 (-> arg3 param 1))
           )
       (let ((a1-3 (vector-normalize-copy!
                     (new 'stack-no-clear 'vector)
                     (vector-! (new 'stack-no-clear 'vector) (the-as vector gp-0) (the-as vector s5-0))
                     1.0
                     )
                   )
             )
         (set! (-> self root trans quad) (-> (the-as vector s5-0) quad))
         (forward-up->quaternion (-> self root quat) a1-3 *up-vector*)
         )
       (let ((f0-0 (vector-length (vector-! (new 'stack-no-clear 'vector) (the-as vector gp-0) (the-as vector s5-0))))
             (gp-1 (-> self sight-scale))
             )
         (set! (-> gp-1 z) (* 0.000024414063 f0-0))
         (let ((f0-1 (lerp-scale 0.1 6.0 f0-0 61440.0 163840.0)))
           (set! (-> gp-1 x) f0-1)
           (set! (-> gp-1 y) f0-1)
           f0-1
           )
         )
       )
     )
    (('collide-dist)
     (set! (-> self collide-dist) (the-as float (-> arg3 param 0)))
     )
    (('on)
     (let ((v1-14 (-> self draw shadow-ctrl)))
       (logclear! (-> v1-14 settings flags) (shadow-flags disable-draw))
       )
     0
     (set! v0-0 (logclear (-> self draw status) (draw-control-status no-draw)))
     (set! (-> self draw status) (the-as draw-control-status v0-0))
     v0-0
     )
    (('off)
     (let ((v1-19 (-> self draw shadow-ctrl)))
       (logior! (-> v1-19 settings flags) (shadow-flags disable-draw))
       )
     0
     (set! v0-0 (logior (-> self draw status) (draw-control-status no-draw)))
     (set! (-> self draw status) (the-as draw-control-status v0-0))
     v0-0
     )
    (('spotlight-on)
     (let ((v1-25 (-> self draw shadow-ctrl)))
       (logclear! (-> v1-25 settings flags) (shadow-flags disable-draw))
       )
     0
     )
    (('spotlight-off)
     (let ((v1-27 (-> self draw shadow-ctrl)))
       (logior! (-> v1-27 settings flags) (shadow-flags disable-draw))
       )
     0
     )
    (('lock)
     (go-virtual lock)
     )
    (('unlock)
     (go-virtual idle)
     )
    (('die)
     (go empty-state)
     )
    )
  )

(defstate idle (fort-robotank-reticle)
  :virtual #t
  :event fort-robotank-reticle-handler
  :enter (behavior ()
    (set! (-> self ring-timer) 0)
    (dotimes (v1-0 3)
      (set! (-> self ring-jmod v1-0 twist z) (the-as float #t))
      )
    (none)
    )
  :code (behavior ()
    (ja-no-eval :group! (-> self draw art-group data 3) :num! zero)
    (sleep-code)
    (none)
    )
  :post (behavior ()
    (when (< (-> self ring-timer) (current-time))
      (let ((v1-2 (rand-vu-int-range 0 7)))
        (dotimes (a0-3 3)
          (if (logand (ash 1 a0-3) v1-2)
              (set! (-> self ring-jmod a0-3 twist y) (* -1.0 (-> self ring-jmod a0-3 twist y)))
              )
          )
        )
      (set! (-> self ring-timer) (+ (current-time) (the int (* 300.0 (rand-vu-float-range 0.6 1.8)))))
      )
    (fort-robotank-reticle-post)
    (none)
    )
  )

(defstate lock (fort-robotank-reticle)
  :virtual #t
  :event fort-robotank-reticle-handler
  :enter (behavior ()
    (dotimes (v1-0 3)
      (set! (-> self ring-jmod v1-0 twist z) (the-as float #f))
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.04))
    (ja-no-eval :group! (-> self draw art-group data 4)
                :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 4)) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (sleep-code)
    (none)
    )
  :post fort-robotank-reticle-post
  )

;; WARN: Return type mismatch process-drawable vs fort-robotank-reticle.
(defmethod relocate fort-robotank-reticle ((obj fort-robotank-reticle) (arg0 int))
  (if (nonzero? (-> obj shadow-jmod))
      (&+! (-> obj shadow-jmod) arg0)
      )
  (if (nonzero? (-> obj sight-jmod))
      (&+! (-> obj sight-jmod) arg0)
      )
  (dotimes (v1-8 3)
    (if (nonzero? (-> obj ring-jmod v1-8))
        (&+! (-> obj ring-jmod v1-8) arg0)
        )
    )
  (the-as fort-robotank-reticle ((method-of-type process-drawable relocate) obj arg0))
  )

;; WARN: Return type mismatch object vs none.
(defbehavior fort-robotank-reticle-init-by-other fort-robotank-reticle ((arg0 vector))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-fort-robotank-reticle" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  (set-vector! (-> self root scale) 0.6 0.6 1.0 1.0)
  (set! (-> self collide-dist) 491520.0)
  (set! (-> self shadow-jmod) (the-as joint-mod (new 'process 'joint-mod-set-local self 4 #f #f #t)))
  (set-vector! (-> self shadow-jmod twist-max) 0.3 0.3 1.0 1.0)
  (set! (-> self sight-jmod) (the-as joint-mod (new 'process 'joint-mod-set-local self 5 #f #f #t)))
  (set-vector! (-> self sight-jmod twist-max) 1.0 1.0 1.0 1.0)
  (set! (-> self sight-scale quad) (-> self sight-jmod twist-max quad))
  (set! (-> self ring-jmod 0) (the-as joint-mod (new 'process 'joint-mod-spinner self 6 *z-vector* 49152.0)))
  (set! (-> self ring-jmod 1) (the-as joint-mod (new 'process 'joint-mod-spinner self 7 *z-vector* -32768.0)))
  (set! (-> self ring-jmod 2) (the-as joint-mod (new 'process 'joint-mod-spinner self 8 *z-vector* 8192.0)))
  (let ((v1-20 (new
                 'process
                 'shadow-control
                 0.0
                 0.0
                 614400.0
                 (shadow-flags disable-fade shdf02 shdf03 shdf04 shdf07)
                 491520.0
                 )
               )
        )
    (set! (-> v1-20 settings shadow-type) 1)
    (set! (-> self draw shadow-ctrl) v1-20)
    )
  (ja-no-eval :group! (-> self draw art-group data 3) :num! zero)
  (ja-post)
  (set-setting! 'spotlight-color #f 0.0 (the-as uint #x80a0a0ff))
  (go-virtual idle)
  (none)
  )

(deftype fort-robotank-shot (guard-shot)
  ()
  :heap-base #x170
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  )


(defmethod play-impact-sound fort-robotank-shot ((obj fort-robotank-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "robotank-shot")
       )
      ((= v1-0 (projectile-options lose-altitude))
       (sound-play "fort-robotank-s")
       )
      )
    )
  0
  (none)
  )

(defmethod init-proj-collision! fort-robotank-shot ((obj fort-robotank-shot))
  "Init the [[projectile]]'s [[collide-shape]]"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak bot crate hit-by-others-list player-list))
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root-override) s5-0)
    )
  (set! (-> obj root-override pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! fort-robotank-shot ((obj fort-robotank-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (set! (-> obj tail-pos quad) (-> obj root-override trans quad))
  (set! (-> obj attack-mode) 'fort-robotank-shot)
  (set! (-> obj max-speed) 819200.0)
  (set! (-> obj move) guard-shot-move)
  (set! (-> obj update-velocity) projectile-update-velocity-space-wars)
  (set! (-> obj timeout) (seconds 0.5))
  (logior! (-> obj options) (projectile-options account-for-target-velocity))
  (set-gravity-length (-> obj root-override dynam) 573440.0)
  0
  (none)
  )

(defskelgroup skel-fort-robotank-turret fort-robotank-top fort-robotank-top-lod0-jg fort-robotank-top-idle-ja
              ((fort-robotank-top-lod0-mg (meters 20)) (fort-robotank-top-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :origin-joint-index 3
              )

(defpart 2473
  :init-specs ((:texture (new 'static 'texture-id :index #xbc :page #xc))
    (:num 1.0)
    (:scale-x (meters 1.5) (meters 0.1))
    (:rot-x (degrees 1.125))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 0.0)
    (:b :copy g)
    (:a 96.0 64.0)
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 glow))
    (:userdata 1.0)
    )
  )

;; WARN: Return type mismatch pointer vs symbol.
;; ERROR: Failed load: (set! t0-6 (l.d (+ a0-28 8))) at op 170

(defmethod fort-robotank-turret-method-32 fort-robotank-turret ((obj fort-robotank-turret) (arg0 (inline-array vector)))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-0 (-> arg0 0))
          (a0-1 (-> arg0 1))
          )
      (set! (-> gp-0 ent) (-> obj entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (set! (-> gp-0 pos quad) (-> v1-0 quad))
      (set! (-> gp-0 notify-handle) (process->handle obj))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 ignore-handle) (process->handle obj))
      (let* ((a1-10 *game-info*)
             (a2-11 (+ (-> a1-10 attack-id) 1))
             )
        (set! (-> a1-10 attack-id) a2-11)
        (set! (-> gp-0 attack-id) a2-11)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (vector-! (-> gp-0 vel) a0-1 v1-0)
      )
    (vector-normalize! (-> gp-0 vel) 512000.0)
    (spawn-projectile fort-robotank-shot gp-0 obj *default-dead-pool*)
    )
  )

;; WARN: Return type mismatch (pointer process) vs none.
(defmethod fort-robotank-turret-method-33 fort-robotank-turret ((obj fort-robotank-turret))
  (local-vars (sv-144 vector) (sv-160 vector))
  (let ((s3-0 (new 'stack-no-clear 'inline-array 'vector 2))
        (s5-0 (new 'stack-no-clear 'inline-array 'vector 4))
        )
    (-> obj node-list data 11)
    (let ((s4-0 (new 'stack-no-clear 'vector))
          (s1-0 (-> obj sight-pos))
          (s2-0 (-> obj gun-index))
          )
      0.0
      0.0
      (vector<-cspace! (-> s3-0 0) (-> obj node-list data (-> obj gun-joint-l s2-0)))
      (vector<-cspace! (-> s3-0 1) (-> obj node-list data (-> obj gun-joint-r s2-0)))
      (let ((f30-0 (* 0.5 (vector-length (vector-! (new 'stack-no-clear 'vector) (-> s3-0 1) (-> s3-0 0))))))
        (let ((f28-0 (fmax 81920.0 (+ 12288.0 (vector-length (vector-! (new 'stack-no-clear 'vector) s1-0 (-> s3-0 0)))))))
          (vector-normalize-copy! s4-0 (-> obj node-list data (-> obj gun-joint-l s2-0) bone transform vector 2) 1.0)
          (let ((s0-0 vector-rotate-y!))
            (set! sv-144 s4-0)
            (set! sv-160 s4-0)
            (let ((a2-1 (- 16384.0 (acos (/ f30-0 f28-0)))))
              (s0-0 sv-144 sv-160 a2-1)
              )
            )
          (set! (-> s5-0 0 quad) (-> s3-0 0 quad))
          (vector+float*! (-> s5-0 1) (-> s5-0 0) s4-0 512000.0)
          (set! (-> obj shot-range) (fmin 204800.0 f28-0))
          )
        (fort-robotank-turret-method-32 obj s5-0)
        (let ((f28-1 (fmax 81920.0 (+ 12288.0 (vector-length (vector-! (new 'stack-no-clear 'vector) s1-0 (-> s3-0 1)))))))
          (vector-normalize-copy! s4-0 (-> obj node-list data (-> obj gun-joint-r s2-0) bone transform vector 2) 1.0)
          (vector-rotate-y! s4-0 s4-0 (- (- 16384.0 (acos (/ f30-0 f28-1)))))
          (set! (-> s5-0 0 quad) (-> s3-0 1 quad))
          (vector+float*! (-> s5-0 1) (-> s5-0 0) s4-0 512000.0)
          (set! (-> obj shot-range) (fmin 204800.0 f28-1))
          )
        )
      )
    (fort-robotank-turret-method-32 obj s5-0)
    )
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod fort-robotank-turret-method-31 fort-robotank-turret ((obj fort-robotank-turret) (arg0 vector) (arg1 vector))
  (let ((s3-0 (new 'stack-no-clear 'collide-query))
        (f30-0 307200.0)
        )
    (set! (-> s3-0 start-pos quad) (-> arg0 quad))
    (vector-float*! (-> s3-0 move-dist) arg1 f30-0)
    (let ((v1-4 s3-0))
      (set! (-> v1-4 radius) 4096.0)
      (set! (-> v1-4 collide-with) (collide-spec backgnd jak bot enemy obstacle hit-by-others-list player-list))
      (set! (-> v1-4 ignore-process0) (ppointer->process (-> obj parent)))
      (set! (-> v1-4 ignore-process1) obj)
      (set! (-> v1-4 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
      (set! (-> v1-4 action-mask) (collide-action solid semi-solid))
      )
    (let ((f28-0 (fill-and-probe-using-line-sphere *collide-cache* s3-0))
          (s4-0 (-> obj sight-pos))
          )
      (cond
        ((>= f28-0 0.0)
         (let ((f0-3 (vector-length (-> s3-0 move-dist))))
           (if (>= 20480.0 (* f0-3 f28-0))
               (set! f28-0 (/ 20480.0 f0-3))
               )
           )
         (vector+float*! s4-0 (-> s3-0 start-pos) (-> s3-0 move-dist) f28-0)
         (let* ((s3-1 (-> s3-0 best-other-tri collide-ptr))
                (s2-0 (if (type? s3-1 collide-shape-prim)
                          (the-as collide-shape-prim s3-1)
                          )
                      )
                (s3-2 (new 'stack-no-clear 'vector))
                )
           (set! (-> s3-2 quad) (-> s4-0 quad))
           (vector+float*! s3-2 s3-2 (-> (math-camera-matrix) vector 2) -2048.0)
           (cond
             ((and s2-0
                   (logtest? (process-mask target enemy) (-> s2-0 cshape process mask))
                   (>= 307200.0 (vector-vector-distance s3-2 arg0))
                   )
              )
             (else
               (set! f30-0 (+ 12288.0 (* f30-0 f28-0)))
               )
             )
           )
         )
        (else
          (vector+! s4-0 (-> s3-0 start-pos) (-> s3-0 move-dist))
          )
        )
      (send-event (handle->process (-> obj reticle)) 'update arg0 s4-0)
      )
    (send-event (handle->process (-> obj reticle)) 'collide-dist f30-0)
    )
  (none)
  )

;; WARN: Return type mismatch collide-prim-core vs vector.
(defmethod get-trans fort-robotank-turret ((obj fort-robotank-turret) (arg0 int))
  "@returns the `trans` [[vector]] from the process's `root` (typically either a [[trsqv]] or a [[collide-shape]])"
  (the-as vector (-> obj root-override root-prim prim-core))
  )

(defbehavior turret-post fort-robotank-turret ()
  (let* ((s5-0 *target*)
         (gp-0 (if (type? s5-0 process-focusable)
                   s5-0
                   )
               )
         )
    (cond
      ((and (logtest? (-> self flags) 1) gp-0)
       (send-event (handle->process (-> self reticle)) 'on)
       (if (logtest? (-> self flags) 512)
           (los-control-method-9 (-> self los) gp-0 (the-as vector #f) 1638.4)
           )
       (target-look-at-me! :trans (the-as vector (-> self root-override root-prim prim-core)) :message 'attacking)
       (set! (-> self aim-pos 0 quad) (-> self aim-pos-2 quad))
       (set! (-> self aim-pos-2 quad) (-> (get-trans gp-0 0) quad))
       (let ((s5-2 (-> self aim-pos-1))
             (s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data (-> self gun-joint-l 0))))
             )
         (let ((v1-31 (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data (-> self gun-joint-r 0)))))
           (vector-! s5-2 (-> self aim-pos-2) (the-as vector (-> self aim-pos)))
           (vector-float*! s5-2 s5-2 (* 0.8 (-> self clock frames-per-second)))
           (set! (-> s5-2 y) 0.0)
           (vector+! s5-2 (-> self aim-pos-2) s5-2)
           (set! (-> s5-2 y) (+ 8192.0 (-> s5-2 y)))
           (vector+! s4-0 s4-0 v1-31)
           )
         (vector-float*! s4-0 s4-0 0.5)
         (let ((gp-2 (vector-! (new 'stack-no-clear 'vector) s5-2 s4-0))
               (s3-1 (vector-! (new 'stack-no-clear 'vector) (-> self firing-sight-pos) s4-0))
               (s5-3 (new 'stack-no-clear 'vector))
               )
           (let ((f30-0 (vector-length gp-2)))
             (vector-normalize! gp-2 1.0)
             (vector-normalize! s3-1 1.0)
             (if (logtest? (-> self flags) 8)
                 (set! (-> s5-3 quad) (-> s3-1 quad))
                 (set! (-> s5-3 quad) (-> gp-2 quad))
                 )
             (when (logtest? (-> self flags) 128)
               (let ((f0-6 (lerp-scale 1.0 0.2 f30-0 8192.0 327680.0)))
                 (seek! (-> self fov-mult) f0-6 (* 2.0 (-> self clock seconds-per-frame)))
                 )
               (set-setting! 'fov 'rel (-> self fov-mult) 0)
               (send-event (handle->process (-> self screen)) 'set-fov-mult (-> self fov-mult))
               )
             )
           (let* ((f30-1 (vector-y-angle s5-3))
                  (f0-12 (quaternion-y-angle (-> self rotate-quat)))
                  (f0-13 (deg-diff f0-12 f30-1))
                  )
             (* (-> self rotate-mult) f0-13)
             (let ((f1-6 12743.111))
               (set! (-> self rotate-rate) (fmax (fmin (* 4.0 f0-13) f1-6) (- f1-6)))
               )
             )
           (let ((f30-3 (fmax -4551.1113 (fmin 4551.1113 (- 16384.0 (acos (- (vector-dot s5-3 *y-vector*))))))))
             (let* ((f0-29 (fmax -4551.1113 (fmin 4551.1113 (- 16384.0 (acos (- (vector-dot gp-2 *y-vector*)))))))
                    (f2-1 (- (-> self gun-elev-cam) f0-29))
                    (f1-12 (if (< f2-1 0.0)
                               (fmin 3640.889 (* (fabs (* 0.1 f2-1)) (-> self clock frames-per-second)))
                               910.2222
                               )
                           )
                    )
               (seek! (-> self gun-elev-cam) f0-29 (* f1-12 (-> self clock seconds-per-frame)))
               )
             (let* ((f28-2 (quaternion-y-angle (-> self rotate-quat)))
                    (f0-33 (quaternion-y-angle (-> self tank-quat)))
                    (f0-35 (* 2.0 (deg-diff f0-33 f28-2)))
                    (f0-36 (cos f0-35))
                    )
               0.0
               (let ((f0-41 (fmin f30-3 (if (< 0.0 f0-36)
                                            (* 182.04445 (lerp 4.0 14.0 f0-36))
                                            (* 182.04445 (lerp 4.0 18.0 (- f0-36)))
                                            )
                                  )
                            )
                     )
                 (seek! (-> self gun-elev) f0-41 (* 2730.6667 (-> self clock seconds-per-frame)))
                 )
               )
             )
           )
         )
       (when (logtest? (-> self flags) 1024)
         (cond
           ((< -1456.3556 (-> self gun-elev))
            (send-event (handle->process (-> self reticle)) 'spotlight-on)
            )
           ((< (-> self gun-elev) -2184.5334)
            (send-event (handle->process (-> self reticle)) 'spotlight-off)
            )
           )
         )
       (quaternion-axis-angle! (-> self gun-elev-jmod transform quat) 1.0 0.0 0.0 (-> self gun-elev))
       )
      (else
        (send-event (handle->process (-> self reticle)) 'off)
        (send-event (handle->process (-> self reticle)) 'update-trans-only (-> self root-override trans))
        )
      )
    )
  (when (and (logtest? (-> self flags) 1) (not (logtest? (-> self flags) 8)))
    (let* ((a1-32 (-> self node-list data (-> self gun-joint-l 0)))
           (s4-1 (-> self node-list data (-> self gun-joint-r 0)))
           (gp-4
             (vector+!
               (new 'stack-no-clear 'vector)
               (vector<-cspace! (new 'stack-no-clear 'vector) a1-32)
               (vector<-cspace! (new 'stack-no-clear 'vector) s4-1)
               )
             )
           (a2-23
             (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> self node-list data 11 bone transform vector 2) 1.0)
             )
           )
      (vector-float*! gp-4 gp-4 0.5)
      (fort-robotank-turret-method-31 self gp-4 a2-23)
      )
    )
  (cond
    ((logtest? (-> self flags) 64)
     (sound-play "robotank-turret" :id (-> self turn-sound-id) :position (-> self root-override trans))
     (when (< (fabs (-> self rotate-rate)) 728.1778)
       (set! (-> self flags) (logand -65 (-> self flags)))
       (sound-stop (-> self turn-sound-id))
       (sound-play "robo-turret-end")
       )
     )
    (else
      (if (< 2184.5334 (fabs (-> self rotate-rate)))
          (logior! (-> self flags) 64)
          )
      )
    )
  (quaternion-rotate-y!
    (-> self rotate-quat)
    (-> self rotate-quat)
    (* (-> self rotate-rate) (-> self clock seconds-per-frame))
    )
  (quaternion*! (-> self root-override quat) (-> self rotate-quat) (-> self tank-quat-vibe-only))
  (quaternion-normalize! (-> self root-override quat))
  (transform-post)
  (none)
  )

(defbehavior robotank-turret-handler fort-robotank-turret ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (case arg2
    (('trigger)
     (when (and (-> self next-state) (= (-> self next-state name) 'idle))
       (logior! (-> self flags) 1)
       (go-virtual ready)
       )
     )
    (('fire-suppress)
     (cond
       ((-> arg3 param 0)
        (set! v0-0 (logior (-> self flags) 16))
        (set! (-> self flags) (the-as uint v0-0))
        )
       (else
         (set! v0-0 (logand -17 (-> self flags)))
         (set! (-> self flags) (the-as uint v0-0))
         )
       )
     v0-0
     )
    (('set-spread)
     (set! (-> self gun-spread) (the-as float (-> arg3 param 0)))
     )
    (('use-los)
     (cond
       ((-> arg3 param 0)
        (set! v0-0 (logior (-> self flags) 512))
        (set! (-> self flags) (the-as uint v0-0))
        )
       (else
         (set! v0-0 (logand -513 (-> self flags)))
         (set! (-> self flags) (the-as uint v0-0))
         )
       )
     v0-0
     )
    (('limit-reticle-elev)
     (cond
       ((-> arg3 param 0)
        (set! v0-0 (logior (-> self flags) 1024))
        (set! (-> self flags) (the-as uint v0-0))
        )
       (else
         (set! v0-0 (logand -1025 (-> self flags)))
         (set! (-> self flags) (the-as uint v0-0))
         )
       )
     v0-0
     )
    (('pov-cam-on)
     (let ((v1-22 (-> (the-as collide-shape-prim-group (-> self root-override root-prim)) child 3)))
       (set! (-> v1-22 prim-core collide-as) (collide-spec obstacle pusher))
       (set! (-> v1-22 prim-core collide-with) (collide-spec jak player-list))
       )
     (logior! (-> self flags) 128)
     (send-event (handle->process (-> self screen)) 'trigger)
     )
    (('pov-cam-off)
     (let ((v1-33 (-> (the-as collide-shape-prim-group (-> self root-override root-prim)) child 3)))
       (set! (-> v1-33 prim-core collide-as) (collide-spec))
       (set! (-> v1-33 prim-core collide-with) (collide-spec))
       )
     0
     (set! (-> self flags) (logand -129 (-> self flags)))
     (remove-setting! 'fov)
     (send-event (handle->process (-> self screen)) 'untrigger)
     )
    (('get-rotate-quat)
     (-> self rotate-quat)
     )
    (('get-gun-elevation-cam)
     (-> self gun-elev-cam)
     )
    (('update)
     (-> arg3 param 1)
     (new 'stack-no-clear 'vector)
     (let ((s5-0 (new 'stack-no-clear 'quaternion)))
       (let ((s4-0 (the-as object (-> arg3 param 2))))
         (vector<-cspace+vector! (-> self root-override trans) (the-as cspace s4-0) (-> self offset))
         (matrix->quaternion s5-0 (-> (the-as cspace s4-0) bone transform))
         )
       (quaternion-copy! (-> self tank-quat) s5-0)
       )
     (quaternion-copy! (-> self tank-quat-vibe-only) (the-as quaternion (-> arg3 param 3)))
     )
    (('die)
     (go-virtual die)
     )
    )
  )

(defmethod fort-robotank-turret-method-34 fort-robotank-turret ((obj fort-robotank-turret) (arg0 vector) (arg1 float))
  (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) arg0 (-> obj root-override trans)))
        (s3-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> obj root-override quat)))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s5-0 quad) (-> s4-1 quad))
    (set! (-> s3-0 y) 0.0)
    (vector-normalize! s3-0 1.0)
    (set! (-> s5-0 y) 0.0)
    (vector-normalize! s5-0 1.0)
    (>= (vector-dot s3-0 s5-0) (cos arg1))
    )
  )

(defstate idle (fort-robotank-turret)
  :virtual #t
  :event robotank-turret-handler
  :code (the-as (function none :behavior fort-robotank-turret) sleep-code)
  :post turret-post
  )

(defstate ready (fort-robotank-turret)
  :virtual #t
  :event robotank-turret-handler
  :enter (behavior ()
    (set! (-> self gun-timer) (current-time))
    (none)
    )
  :trans (behavior ()
    (if (logtest? (-> self flags) 16)
        (set! (-> self gun-timer) (current-time))
        )
    (let ((gp-0 *target*))
      (if (and (if (type? gp-0 process-focusable)
                   gp-0
                   )
               (or (not (logtest? (-> self flags) 512)) (check-los? (-> self los) 0))
               (>= (- (current-time) (-> self gun-timer)) (seconds 1))
               )
          (go-virtual fire)
          )
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 3)
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 3)) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  :post turret-post
  )

(defstate fire (fort-robotank-turret)
  :virtual #t
  :event robotank-turret-handler
  :enter (behavior ()
    (logior! (-> self flags) 256)
    (let* ((gp-0 *target*)
           (a0-1 (if (type? gp-0 process-focusable)
                     gp-0
                     )
                 )
           )
      (when a0-1
        (set! (-> self aim-pos 0 quad) (-> (get-trans a0-1 0) quad))
        (set! (-> self aim-pos-2 quad) (-> self aim-pos 0 quad))
        (set! (-> self aim-pos-1 quad) (-> self aim-pos 0 quad))
        )
      )
    (none)
    )
  :trans (behavior ()
    (let ((gp-0 *target*))
      (when (or (not (if (type? gp-0 process-focusable)
                         gp-0
                         )
                     )
                (and (logtest? (-> self flags) 512) (not (logtest? (-> self flags) 8)) (skip-check-los? (-> self los) 0))
                (logtest? (-> self flags) 16)
                )
        (set! (-> self flags) (logand -257 (-> self flags)))
        (go-virtual ready)
        )
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (until (fort-robotank-turret-method-34 self (-> self aim-pos-1) 2730.6667)
        (suspend)
        )
      (logior! (-> self flags) 8)
      (set! (-> self firing-sight-pos quad) (-> self sight-pos quad))
      (send-event (handle->process (-> self reticle)) 'lock)
      (let ((gp-0 (current-time)))
        (until (>= (- (current-time) gp-0) (seconds 0.5))
          (suspend)
          )
        )
      (let ((gp-2 (max 2 (min 3 (rand-vu-int-range 0 3)))))
        0
        (dotimes (s5-2 gp-2)
          (let ((s4-1 (max 2 (min 4 (rand-vu-int-range 1 8)))))
            (dotimes (s3-2 s4-1)
              (ja-no-eval :group! (-> self draw art-group data 4)
                          :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 4)) frames num-frames) -1)))
                          :frame-num 0.0
                          )
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              (fort-robotank-turret-method-33 self)
              (ja-no-eval :group! (-> self draw art-group data 5)
                          :num! (seek! (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 5)) frames num-frames) -1)))
                          :frame-num 0.0
                          )
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              (set! (-> self gun-index) (- 1 (-> self gun-index)))
              (suspend)
              (if (< (vector-length
                       (vector-! (new 'stack-no-clear 'vector) (-> self firing-sight-pos) (-> self root-override trans))
                       )
                     73728.0
                     )
                  (goto cfg-26)
                  )
              )
            )
          (let ((f30-0 (rand-vu-float-range 0.05 0.43))
                (s4-2 (current-time))
                )
            (until (>= (- (current-time) s4-2) (the int (* 300.0 f30-0)))
              (suspend)
              )
            )
          )
        )
      (label cfg-26)
      (set! (-> self flags) (logand -9 (-> self flags)))
      (send-event (handle->process (-> self reticle)) 'unlock)
      (until (fort-robotank-turret-method-34 self (-> self aim-pos-1) 2730.6667)
        (suspend)
        )
      (let ((f30-1 (rand-vu-float-range
                     (if (< 2730.6667 (-> self rotate-rate))
                         1.2
                         0.32
                         )
                     2.11
                     )
                   )
            (gp-3 (current-time))
            )
        (until (>= (- (current-time) gp-3) (the int (* 300.0 f30-1)))
          (suspend)
          )
        )
      )
    #f
    (none)
    )
  :post turret-post
  )

(defstate die (fort-robotank-turret)
  :virtual #t
  :code (behavior ()
    (send-event (handle->process (-> self reticle)) 'die)
    (send-event (handle->process (-> self screen)) 'die)
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 1))
        (suspend)
        )
      )
    (while (-> self child)
      (suspend)
      )
    (none)
    )
  )

(defmethod deactivate fort-robotank-turret ((obj fort-robotank-turret))
  (set! (-> obj flags) (logand -65 (-> obj flags)))
  (sound-stop (-> obj turn-sound-id))
  (let ((a0-4 (handle->process (-> obj screen))))
    (if a0-4
        (deactivate a0-4)
        )
    )
  ((method-of-type process-focusable deactivate) obj)
  (none)
  )

;; WARN: Return type mismatch process-focusable vs fort-robotank-turret.
(defmethod relocate fort-robotank-turret ((obj fort-robotank-turret) (arg0 int))
  (if (nonzero? (-> obj gun-elev-jmod))
      (&+! (-> obj gun-elev-jmod) arg0)
      )
  (the-as fort-robotank-turret ((method-of-type process-focusable relocate) obj arg0))
  )

;; WARN: Return type mismatch object vs none.
(defbehavior fort-robotank-turret-init-by-other fort-robotank-turret ((arg0 vector) (arg1 quaternion) (arg2 vector) (arg3 float))
  (let ((s2-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s2-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s2-0 reaction) cshape-reaction-default)
    (set! (-> s2-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s1-0 (new 'process 'collide-shape-prim-group s2-0 (the-as uint 4) 0)))
      (set! (-> s2-0 total-prims) (the-as uint 5))
      (set! (-> s1-0 prim-core collide-as) (collide-spec obstacle camera-blocker pusher))
      (set! (-> s1-0 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> s1-0 prim-core action) (collide-action solid))
      (set-vector! (-> s1-0 local-sphere) 0.0 0.0 0.0 36864.0)
      (set! (-> s2-0 root-prim) s1-0)
      )
    (pusher-init s2-0)
    (let ((v1-14 (new 'process 'collide-shape-prim-mesh s2-0 (the-as uint 2) (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set! (-> v1-14 transform-index) 3)
      (set-vector! (-> v1-14 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-mesh s2-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid))
      (set! (-> v1-16 transform-index) 8)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 4096.0 6553.6)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-mesh s2-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid))
      (set! (-> v1-18 transform-index) 5)
      (set-vector! (-> v1-18 local-sphere) 0.0 0.0 4096.0 6553.6)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-mesh s2-0 (the-as uint 3) (the-as uint 0))))
      (set! (-> v1-20 prim-core action) (collide-action solid))
      (set! (-> v1-20 transform-index) 3)
      (set-vector! (-> v1-20 local-sphere) 0.0 20480.0 4096.0 31129.6)
      )
    (set! (-> s2-0 nav-radius) (* 0.75 (-> s2-0 root-prim local-sphere w)))
    (let ((v1-23 (-> s2-0 root-prim)))
      (set! (-> s2-0 backup-collide-as) (-> v1-23 prim-core collide-as))
      (set! (-> s2-0 backup-collide-with) (-> v1-23 prim-core collide-with))
      )
    (set! (-> self root-override) s2-0)
    )
  (set! (-> self root-override trans quad) (-> arg0 quad))
  (quaternion-copy! (-> self root-override quat) arg1)
  (set! (-> self offset quad) (-> arg2 quad))
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-fort-robotank-turret" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  (logclear! (-> self mask) (process-mask actor-pause))
  (new-source! (-> self los) self (seconds 1) (collide-spec backgnd))
  (set! (-> self gun-elev-jmod) (new 'process 'joint-mod-set-local self 4 #f #f #f))
  (set! (-> self gun-elev-jmod set-rotation) #t)
  (set! (-> self gun-elev) 0.0)
  (set! (-> self gun-elev-cam) 0.0)
  (set! (-> self gun-spread) 728.1778)
  (quaternion-axis-angle! (-> self gun-elev-jmod transform quat) 1.0 0.0 0.0 (-> self gun-elev))
  (quaternion-zero! (-> self tank-quat))
  (quaternion-copy! (-> self rotate-quat) arg1)
  (set! (-> self rotate-rate) 0.0)
  (set! (-> self rotate-mult) arg3)
  (set! (-> self aim-pos 0 quad) (-> self root-override trans quad))
  (set! (-> self aim-pos-2 quad) (-> self root-override trans quad))
  (set! (-> self aim-pos-1 quad) (-> self root-override trans quad))
  (set! (-> self gun-timer) (current-time))
  (set! (-> self flags) (the-as uint 0))
  (set! (-> self fov-mult) 1.0)
  (set! (-> self shot-range) 204800.0)
  (set! (-> self gun-joint-l 0) 10)
  (set! (-> self gun-joint-r 0) 7)
  (set! (-> self gun-joint-l 1) 9)
  (set! (-> self gun-joint-r 1) 6)
  (set! (-> self gun-index) 0)
  (let ((gp-1 (new 'stack-no-clear 'vector)))
    (set! (-> gp-1 quad) (-> self root-override trans quad))
    (set! (-> gp-1 z) (+ 40960.0 (-> gp-1 z)))
    (set! (-> gp-1 y) (+ 32768.0 (-> gp-1 y)))
    (set! (-> self reticle) (ppointer->handle (process-spawn fort-robotank-reticle gp-1 :to self)))
    )
  (let ((gp-2 (new 'stack-no-clear 'vector))
        (s4-2 (new 'stack-no-clear 'vector))
        )
    (set! (-> s4-2 x) 0.0)
    (set! (-> s4-2 y) 32768.0)
    (set! (-> s4-2 z) 12288.0)
    (set! (-> s4-2 w) 0.0)
    (let ((s5-2 (-> self root-override quat)))
      (vector-orient-by-quat! s4-2 s4-2 s5-2)
      (vector+! gp-2 (-> self root-override trans) s4-2)
      (set! (-> self screen)
            (ppointer->handle (process-spawn fort-roboscreen gp-2 s5-2 (-> self entity) :to *display-pool*))
            )
      )
    )
  (ja-no-eval :group! (-> self draw art-group data 3) :num! zero)
  (transform-post)
  (set! (-> self turn-sound-id) (new-sound-id))
  (go-virtual idle)
  (none)
  )
