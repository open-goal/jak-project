;;-*-Lisp-*-
(in-package goal)

;; name: fordumpc-obs.gc
;; name in dgo: fordumpc-obs
;; dgos: FORDUMPC

;; DECOMP BEGINS

(defmethod draw hud-rocketsensor ((obj hud-rocketsensor))
  (set-hud-piece-position!
    (the-as hud-sprite (-> obj sprites))
    (the int (+ 457.0 (* 130.0 (-> obj offset))))
    210
    )
  (format (clear (-> obj strings 0 text)) "~D" (-> obj values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> obj strings 0 pos)) (the-as vector4w (-> obj sprites)) -17 25)
  ((method-of-type hud draw) obj)
  0
  (none)
  )

(defmethod update-values hud-rocketsensor ((obj hud-rocketsensor))
  (set! (-> obj values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) obj)
  0
  (none)
  )

(defmethod init-callback hud-rocketsensor ((obj hud-rocketsensor))
  (set! (-> obj level) (level-get *level* 'fordumpc))
  (set! (-> obj gui-id)
        (add-process *gui-control* obj (gui-channel hud-middle-right) (gui-action hidden) (-> obj name) 81920.0 0)
        )
  (logior! (-> obj flags) (hud-flags show))
  (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :page #xb1f)))
  (set! (-> obj sprites 0 flags) (the-as uint 4))
  (set! (-> obj sprites 0 scale-x) 1.2)
  (set! (-> obj sprites 0 scale-y) 1.2)
  (alloc-string-if-needed obj 0)
  (set! (-> obj strings 0 scale) 0.6)
  (set! (-> obj strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(deftype fort-dump-bomb-a (process-drawable)
  ((root-override collide-shape  :offset 128)
   )
  :heap-base #x50
  :method-count-assert 22
  :size-assert         #xc8
  :flag-assert         #x16005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )


(defskelgroup skel-fort-dump-bomb-a fort-dump-bomb-a fort-dump-bomb-a-lod0-jg fort-dump-bomb-a-idle-ja
              ((fort-dump-bomb-a-lod0-mg (meters 20)) (fort-dump-bomb-a-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 2.5 0 3.3)
              )

(defstate idle (fort-dump-bomb-a)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('attack)
       (let* ((s5-0 (-> event param 0))
              (gp-0 (the-as attack-info (-> event param 1)))
              (s4-0 proc)
              (v1-1 (if (type? s4-0 process-drawable)
                        (the-as process-drawable s4-0)
                        )
                    )
              )
         (if (and s5-0 v1-1 (or (= (-> gp-0 mode) 'fort-robotank-shot) (= (-> gp-0 mode) 'explode)))
             (go-virtual die)
             )
         )
       )
      )
    )
  :code (the-as (function none :behavior fort-dump-bomb-a) sleep-code)
  :post (behavior ()
    (spawn (-> self part) (-> self root-override trans))
    (none)
    )
  )

(defstate die (fort-dump-bomb-a)
  :virtual #t
  :code (behavior ()
    (let ((v1-1 (-> self root-override root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (sound-play "fort-bomb")
    (let ((gp-1 (new 'stack-no-clear 'matrix)))
      (set! (-> gp-1 quad 0) (-> self root-override trans quad))
      (set! (-> gp-1 vector 0 y) (+ 8192.0 (-> gp-1 vector 0 y)))
      (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
        (when s5-1
          (let ((t9-3 (method-of-type part-tracker activate)))
            (t9-3
              (the-as part-tracker s5-1)
              *entity-pool*
              (symbol->string (-> part-tracker symbol))
              (the-as pointer #x70004000)
              )
            )
          (let ((t9-4 run-function-in-process)
                (a0-8 s5-1)
                (a1-3 part-tracker-init)
                (a2-5 (-> *part-group-id-table* 572))
                (a3-2 0)
                (t0-1 #f)
                (t1-1 #f)
                (t2-1 #f)
                (t3-0 *launch-matrix*)
                )
            (set! (-> t3-0 trans quad) (-> gp-1 quad 0))
            ((the-as (function object object object object object object object object none) t9-4)
             a0-8
             a1-3
             a2-5
             a3-2
             t0-1
             t1-1
             t2-1
             t3-0
             )
            )
          (-> s5-1 ppointer)
          )
        )
      )
    (let ((gp-2 (current-time)))
      (until (>= (- (current-time) gp-2) (seconds 0.5))
        (suspend)
        )
      )
    (cleanup-for-death self)
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! fort-dump-bomb-a ((obj fort-dump-bomb-a) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((s4-0 (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((v1-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec bot))
      (set! (-> v1-2 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-2 prim-core action) (collide-action solid))
      (set! (-> v1-2 transform-index) 0)
      (set-vector! (-> v1-2 local-sphere) 0.0 10240.0 0.0 13516.8)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-2)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-5 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-5 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-5 prim-core collide-with))
      )
    (set! (-> obj root-override) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fort-dump-bomb-a" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 573) obj))
  (let ((a0-13 (-> obj skel root-channel 0)))
    (set! (-> a0-13 frame-group) (the-as art-joint-anim (-> obj draw art-group data 3)))
    (set! (-> a0-13 frame-num) 0.0)
    (joint-control-channel-group! a0-13 (the-as art-joint-anim (-> obj draw art-group data 3)) num-func-identity)
    )
  (transform-post)
  (go (method-of-object obj idle))
  (none)
  )

(deftype fort-missile-target (process-drawable)
  ((root-override collide-shape-moving           :offset        128)
   (part-mat      matrix               2 :inline :offset-assert 208)
   (sound-id      uint32                         :offset-assert 336)
   )
  :heap-base #xe0
  :method-count-assert 22
  :size-assert         #x154
  :flag-assert         #x1600e00154
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )


(defskelgroup skel-fort-missile-target fort-missile-target fort-missile-target-lod0-jg fort-missile-target-idle-ja
              ((fort-missile-target-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -0.5 -0.5 3.4)
              )

(defskelgroup skel-fort-missile-target-explode fort-missile-target fort-missile-target-explode-lod0-jg fort-missile-target-explode-idle-ja
              ((fort-missile-target-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -0.5 -0.5 3.4)
              )

(define *fort-missile-target-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      )
    :collide-spec #x1
    :art-level #f
    )
  )

(defstate idle (fort-missile-target)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('attack 'touch)
       (let* ((gp-0 (-> event param 0))
              (s5-0 (the-as attack-info (-> event param 1)))
              (s4-0 proc)
              (v1-1 (if (type? s4-0 projectile)
                        (the-as projectile s4-0)
                        )
                    )
              )
         (if (and gp-0 v1-1 (= (-> s5-0 mode) 'fort-robotank-shot))
             (go-virtual die)
             )
         )
       )
      (('trigger)
       (go-virtual die)
       )
      )
    )
  :code (the-as (function none :behavior fort-missile-target) sleep-code)
  )

(defstate die (fort-missile-target)
  :virtual #t
  :enter (behavior ()
    (let ((v1-1 (the-as collide-shape-prim-group (-> self root-override root-prim))))
      (set! (-> v1-1 child 0 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 child 0 prim-core collide-with) (collide-spec))
      )
    0
    (setup-masks (-> self draw) 2 0)
    (setup-masks (-> self draw) 0 1)
    (let ((s5-0 (-> self root-override trans))
          (s1-0 (-> self root-override quat))
          (s3-0 (new 'stack-no-clear 'vector))
          (gp-0 (new 'stack-no-clear 'vector))
          )
      (set! (-> gp-0 x) 0.0)
      (set! (-> gp-0 y) 2048.0)
      (set! (-> gp-0 z) -8192.0)
      (set! (-> gp-0 w) 0.0)
      (let ((s2-0 (new 'stack-no-clear 'vector))
            (s4-0 (new 'stack-no-clear 'vector))
            )
        (vector-orient-by-quat! gp-0 gp-0 (-> self root-override quat))
        (vector+! gp-0 (-> self root-override trans) gp-0)
        (let ((t9-3 vector-orient-by-quat!)
              (a0-6 s3-0)
              (a1-4 s3-0)
              )
          (set! (-> a1-4 x) 0.0)
          (set! (-> a1-4 y) 2048.0)
          (set! (-> a1-4 z) 5734.4)
          (set! (-> a1-4 w) 0.0)
          (t9-3 a0-6 a1-4 s1-0)
          )
        (vector+! s2-0 s5-0 s3-0)
        (let ((t9-4 vector-orient-by-quat!)
              (a0-8 s3-0)
              (a1-7 s3-0)
              )
          (set! (-> a1-7 x) 0.0)
          (set! (-> a1-7 y) -10649.6)
          (set! (-> a1-7 z) -819.2)
          (set! (-> a1-7 w) 0.0)
          (t9-4 a0-8 a1-7 s1-0)
          )
        (vector+! s4-0 s5-0 s3-0)
        (let ((s5-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) gp-0 s2-0) 1.0))
              (gp-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) gp-0 s4-0) 1.0))
              )
          (forward-up->inv-matrix (the-as matrix (-> self part-mat)) s5-1 *up-vector*)
          (set! (-> self part-mat 0 trans quad) (-> s2-0 quad))
          (forward-up->inv-matrix (-> self part-mat 1) gp-1 *up-vector*)
          )
        (set! (-> self part-mat 1 trans quad) (-> s4-0 quad))
        )
      )
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (process-spawn
        joint-exploder
        (art-group-get-by-name *level* "skel-fort-missile-target-explode" (the-as (pointer uint32) #f))
        5
        gp-0
        *fort-missile-target-exploder-params*
        :to self
        )
      )
    (activate! *camera-smush-control* 819.2 37 210 1.0 0.995 (-> self clock))
    (sound-play "fort-target")
    (suspend)
    (let ((gp-2 (get-process *default-dead-pool* part-tracker #x4000)))
      (when gp-2
        (let ((t9-9 (method-of-type part-tracker activate)))
          (t9-9
            (the-as part-tracker gp-2)
            *entity-pool*
            (symbol->string (-> part-tracker symbol))
            (the-as pointer #x70004000)
            )
          )
        (let ((t9-10 run-function-in-process)
              (a0-10 gp-2)
              (a1-9 part-tracker-init)
              (a2-13 (-> *part-group-id-table* 581))
              (a3-5 0)
              (t0-3 #f)
              (t1-3 #f)
              (t2-2 #f)
              (t3-0 *launch-matrix*)
              )
          (set! (-> t3-0 trans quad) (-> self root-override trans quad))
          ((the-as (function object object object object object object object object none) t9-10)
           a0-10
           a1-9
           a2-13
           a3-5
           t0-3
           t1-3
           t2-2
           t3-0
           )
          )
        (-> gp-2 ppointer)
        )
      )
    (let ((gp-3 (current-time)))
      (until (>= (- (current-time) gp-3) (seconds 1))
        (suspend)
        )
      )
    (send-event (ppointer->process (-> self parent)) 'died)
    (sleep-code)
    (none)
    )
  :post (behavior ()
    (sound-play "missile-steam" :id (the-as sound-id (-> self sound-id)))
    (spawn-with-matrix (-> self part) (the-as matrix (-> self part-mat)))
    (spawn-with-matrix (-> self part) (-> self part-mat 1))
    (none)
    )
  )

(defmethod deactivate fort-missile-target ((obj fort-missile-target))
  (sound-stop (the-as sound-id (-> obj sound-id)))
  ((the-as (function process-drawable none) (find-parent-method fort-missile-target 10)) obj)
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defbehavior fort-missile-target-init-by-other fort-missile-target ((arg0 vector) (arg1 vector))
  (stack-size-set! (-> self main-thread) 512)
  (let ((s4-0 (new 'process 'collide-shape self (collide-list-enum usually-hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 4) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 5))
      (set! (-> s3-0 prim-core collide-as) (collide-spec obstacle camera-blocker))
      (set! (-> s3-0 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 -2048.0 -2048.0 14745.6)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-11 prim-core collide-as) (collide-spec obstacle camera-blocker))
      (set! (-> v1-11 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 3)
      (set-vector! (-> v1-11 local-sphere) 0.0 -2048.0 -2048.0 13926.4)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec obstacle camera-blocker))
      (set! (-> v1-13 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 3)
      (set-vector! (-> v1-13 local-sphere) 0.0 2048.0 4915.2 4915.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 2) (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec obstacle camera-blocker))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set! (-> v1-15 transform-index) 3)
      (set-vector! (-> v1-15 local-sphere) 0.0 -10649.6 -819.2 5734.4)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec obstacle camera-blocker))
      (set! (-> v1-17 prim-core action) (collide-action semi-solid))
      (set! (-> v1-17 transform-index) 3)
      (set-vector! (-> v1-17 local-sphere) 0.0 -2048.0 -2048.0 13107.2)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-20 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-20 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-20 prim-core collide-with))
      )
    (set! (-> self root-override) (the-as collide-shape-moving s4-0))
    )
  (set! (-> self root-override trans quad) (-> arg0 quad))
  (forward-up-nopitch->quaternion (-> self root-override quat) arg1 *y-vector*)
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-fort-missile-target" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  (set! (-> self draw light-index) (the-as uint 17))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 582) self))
  (setup-masks (-> self draw) -1 0)
  (ja-no-eval :group! (-> self draw art-group data 2) :num! zero)
  (transform-post)
  (set! (-> self sound-id) (the-as uint (new-sound-id)))
  (go-virtual idle)
  (none)
  )

(deftype fort-missile (process-drawable)
  ((root-override      collide-shape              :offset        128)
   (part-doom          sparticle-launch-control   :offset-assert 200)
   (hud                handle                     :offset-assert 208)
   (door-actor         entity-actor             2 :offset-assert 216)
   (tank-actor         entity-actor               :offset-assert 224)
   (bomb               handle                   4 :offset-assert 232)
   (bomb-count         uint32                     :offset-assert 264)
   (attack-id          uint32                     :offset-assert 268)
   (explosion-sound-id sound-id                   :offset-assert 272)
   (alarm-sound-id     sound-id                   :offset-assert 276)
   )
  :heap-base #xa0
  :method-count-assert 25
  :size-assert         #x118
  :flag-assert         #x1900a00118
  (:methods
    (idle () _type_ :state 20)
    (targets-active () _type_ :state 21)
    (missile-countdown () _type_ :state 22)
    (die () _type_ :state 23)
    (dormant () _type_ :state 24)
    )
  )


(defskelgroup skel-fort-missile fort-missile fort-missile-lod0-jg fort-missile-idle-ja
              ((fort-missile-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -11 0 29)
              )

(defstate idle (fort-missile)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('die)
       (go-virtual die)
       )
      )
    )
  :trans (behavior ()
    (if (and (task-node-closed? (game-task-node fortress-dump-deal)) *target*)
        (go-virtual targets-active)
        )
    (none)
    )
  :code (the-as (function none :behavior fort-missile) sleep-code)
  )

(defstate targets-active (fort-missile)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('die)
       (go-virtual die)
       )
      (('died)
       (+! (-> self bomb-count) -1)
       (let ((v1-5 (-> self bomb-count)))
         (cond
           ((= v1-5 3)
            (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv079" -99.0 0)
            )
           ((= v1-5 2)
            (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv080" -99.0 0)
            )
           ((= v1-5 1)
            (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv081" -99.0 0)
            )
           ((zero? v1-5)
            (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv082" -99.0 0)
            )
           )
         )
       )
      )
    )
  :enter (behavior ()
    (if *target*
        (set! (-> self hud) (ppointer->handle (process-spawn hud-rocketsensor :init hud-init-by-other :to *target*)))
        )
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 8))
        (suspend)
        )
      )
    (until (logtest? (-> self draw status) (draw-control-status on-screen))
      (suspend)
      )
    (when (= (-> self bomb-count) 4)
      (let ((gp-1 (current-time)))
        (until (>= (- (current-time) gp-1) (seconds 0.4))
          (suspend)
          )
        )
      (add-process *gui-control* self (gui-channel daxter) (gui-action play) "ds017" -99.0 0)
      )
    (let ((gp-2 (current-time)))
      (until (>= (- (current-time) gp-2) (seconds 20))
        (suspend)
        )
      )
    (if (= (-> self bomb-count) 4)
        (add-process *gui-control* self (gui-channel daxter) (gui-action play) "ds018" -99.0 0)
        )
    (while (> (-> self bomb-count) 0)
      (let ((gp-3 (current-time)))
        (until (>= (- (current-time) gp-3) (seconds 0.2))
          (suspend)
          )
        )
      )
    (let ((gp-4 (current-time)))
      (until (>= (- (current-time) gp-4) (seconds 0.8))
        (suspend)
        )
      )
    (go-virtual missile-countdown)
    (none)
    )
  :post (behavior ()
    (set! (-> *game-info* counter) (the float (-> self bomb-count)))
    (none)
    )
  )

(defstate missile-countdown (fort-missile)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('halt)
       (go-virtual dormant)
       )
      (('die)
       (go-virtual die)
       )
      )
    )
  :exit (behavior ()
    (set-fordumpc-light-flag! #f)
    (send-event (handle->process (-> self hud)) 'hide-and-die)
    (sound-stop (-> self alarm-sound-id))
    (none)
    )
  :code (behavior ()
    (send-event (handle->process (-> self hud)) 'hide-and-die)
    (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-1 from) (process->ppointer self))
      (set! (-> a1-1 num-params) 0)
      (set! (-> a1-1 message) 'fire-suppress-on)
      (let ((t9-1 send-event-function)
            (v1-8 (-> self tank-actor))
            )
        (t9-1
          (if v1-8
              (-> v1-8 extra process)
              )
          a1-1
          )
        )
      )
    (set-fordumpc-light-flag! #t)
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 0.2))
        (suspend)
        )
      )
    (while (not (process-grab? *target* #f))
      (suspend)
      )
    (set-setting! 'entity-name "camera-182" 0.0 0)
    (set-setting! 'process-mask 'set 0.0 (process-mask movie enemy))
    (task-node-close! (game-task-node fortress-dump-missile))
    (let ((gp-1 (current-time)))
      (until (>= (- (current-time) gp-1) (seconds 0.75))
        (suspend)
        )
      )
    (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-5 from) (process->ppointer self))
      (set! (-> a1-5 num-params) 0)
      (set! (-> a1-5 message) 'open)
      (let ((t9-7 send-event-function)
            (v1-28 (-> self door-actor 0))
            )
        (t9-7
          (if v1-28
              (-> v1-28 extra process)
              )
          a1-5
          )
        )
      )
    (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-6 from) (process->ppointer self))
      (set! (-> a1-6 num-params) 0)
      (set! (-> a1-6 message) 'open)
      (let ((t9-8 send-event-function)
            (v1-33 (-> self door-actor 1))
            )
        (t9-8
          (if v1-33
              (-> v1-33 extra process)
              )
          a1-6
          )
        )
      )
    (let ((gp-2 (current-time)))
      (until (>= (- (current-time) gp-2) (seconds 1.5))
        (suspend)
        )
      )
    (remove-setting! 'entity-name)
    (remove-setting! 'process-mask)
    (process-release? *target*)
    (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-9 from) (process->ppointer self))
      (set! (-> a1-9 num-params) 0)
      (set! (-> a1-9 message) 'fire-suppress-off)
      (let ((t9-12 send-event-function)
            (v1-47 (-> self tank-actor))
            )
        (t9-12
          (if v1-47
              (-> v1-47 extra process)
              )
          a1-9
          )
        )
      )
    (when *target*
      (set! (-> *game-info* timer) 0)
      (set! (-> self hud) (ppointer->handle (process-spawn hud-timer :init hud-init-by-other :to *target*)))
      )
    (let ((gp-4 (current-time)))
      (until (>= (- (current-time) gp-4) (seconds 0.4))
        (suspend)
        )
      )
    (set! (-> self explosion-sound-id)
          (add-process *gui-control* self (gui-channel background) (gui-action queue) "big-xplo" -99.0 0)
          )
    (dotimes (gp-5 10)
      (set! (-> *game-info* timer) (the-as time-frame (- 3000 (the int (* 300.0 (the float gp-5))))))
      (let ((s5-0 (current-time)))
        (until (>= (- (current-time) s5-0) (seconds 1))
          (suspend)
          )
        )
      )
    (go-virtual die)
    (none)
    )
  :post (behavior ()
    (sound-play "fort-alarm" :id (-> self alarm-sound-id))
    (none)
    )
  )

(defstate die (fort-missile)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('halt)
       (go-virtual dormant)
       )
      (('touched)
       (let ((s4-0 proc))
         (when (if (type? s4-0 process-drawable)
                   s4-0
                   )
           (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
             (set! (-> a1-2 from) (process->ppointer self))
             (set! (-> a1-2 num-params) 2)
             (set! (-> a1-2 message) 'attack)
             (set! (-> a1-2 param 0) (-> event param 0))
             (let ((v1-8 (new 'static 'attack-info :mask (attack-info-mask mode id))))
               (set! (-> v1-8 id) (-> self attack-id))
               (set! (-> v1-8 mode) 'explode)
               (set! (-> a1-2 param 1) (the-as uint v1-8))
               )
             (send-event-function proc a1-2)
             )
           )
         )
       )
      )
    )
  :enter (behavior ()
    (set-setting! 'allow-pause #f 0.0 0)
    (set-setting! 'allow-progress #f 0.0 0)
    (none)
    )
  :exit (behavior ()
    (remove-setting! 'allow-pause)
    (remove-setting! 'allow-progress)
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (>= (- (current-time) gp-0) (seconds 0.4))
        (suspend)
        )
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (when *scene-player*
      (cleanup-for-death self)
      (deactivate self)
      )
    (let ((gp-1 (new 'stack-no-clear 'matrix)))
      (set! (-> gp-1 quad 0) (-> self root-override trans quad))
      (let ((s5-0 (get-process *default-dead-pool* part-tracker #x4000)))
        (when s5-0
          (let ((t9-3 (method-of-type part-tracker activate)))
            (t9-3
              (the-as part-tracker s5-0)
              *entity-pool*
              (symbol->string (-> part-tracker symbol))
              (the-as pointer #x70004000)
              )
            )
          (let ((t9-4 run-function-in-process)
                (a0-8 s5-0)
                (a1-2 part-tracker-init)
                (a2-4 (-> *part-group-id-table* 125))
                (a3-1 0)
                (t0-0 #f)
                (t1-0 #f)
                (t2-0 #f)
                (t3-0 *launch-matrix*)
                )
            (set! (-> t3-0 trans quad) (-> gp-1 quad 0))
            ((the-as (function object object object object object object object object none) t9-4)
             a0-8
             a1-2
             a2-4
             a3-1
             t0-0
             t1-0
             t2-0
             t3-0
             )
            )
          (-> s5-0 ppointer)
          )
        )
      )
    (let ((gp-2 (new 'stack-no-clear 'vector))
          (v1-24 (-> self root-override trans))
          (a0-9 (new 'stack-no-clear 'vector))
          )
      (set! (-> a0-9 x) 0.0)
      (set! (-> a0-9 y) -87244.8)
      (set! (-> a0-9 z) 0.0)
      (set! (-> a0-9 w) 0.0)
      (let* ((gp-3 (vector+! gp-2 v1-24 a0-9))
             (s4-0 (get-process *default-dead-pool* manipy #x4000))
             (s5-1 (when s4-0
                     (let ((t9-6 (method-of-type manipy activate)))
                       (t9-6 (the-as manipy s4-0) self (symbol->string (-> manipy symbol)) (the-as pointer #x70004000))
                       )
                     (run-now-in-process
                       s4-0
                       manipy-init
                       gp-3
                       (-> self entity)
                       (art-group-get-by-name *level* "skel-bomb-blast" (the-as (pointer uint32) #f))
                       #f
                       0
                       )
                     (-> s4-0 ppointer)
                     )
                   )
             (f30-0 1.4)
             )
        (when s5-1
          (send-event (ppointer->process s5-1) 'anim-mode 'play1)
          (send-event (ppointer->process s5-1) 'anim "idle")
          (set-vector! (-> (the-as process-drawable (-> s5-1 0)) root scale) f30-0 1.0 f30-0 1.0)
          )
        )
      )
    (when *target*
      (set-action!
        *gui-control*
        (gui-action play)
        (-> self explosion-sound-id)
        (gui-channel none)
        (gui-action none)
        (the-as string #f)
        (the-as (function gui-connection symbol) #f)
        (the-as process #f)
        )
      (while (let ((a1-13 (new 'stack-no-clear 'event-message-block)))
               (set! (-> a1-13 from) (process->ppointer self))
               (set! (-> a1-13 num-params) 2)
               (set! (-> a1-13 message) 'attack-invinc)
               (set! (-> a1-13 param 0) (the-as uint #f))
               (let ((v1-56 (new 'static 'attack-info :mask (attack-info-mask mode id))))
                 (let* ((a0-19 *game-info*)
                        (a2-11 (+ (-> a0-19 attack-id) 1))
                        )
                   (set! (-> a0-19 attack-id) a2-11)
                   (set! (-> v1-56 id) a2-11)
                   )
                 (set! (-> v1-56 mode) 'big-explosion)
                 (set! (-> a1-13 param 1) (the-as uint v1-56))
                 )
               (not (send-event-function *target* a1-13))
               )
        (suspend)
        )
      (setup
        *screen-filter*
        (new 'static 'vector :x 255.0 :y 255.0 :z 255.0)
        (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
        (* 0.3 (-> self clock seconds-per-frame))
        (bucket-id tex-all-map)
        )
      )
    (let* ((v1-63 *game-info*)
           (a0-24 (+ (-> v1-63 attack-id) 1))
           )
      (set! (-> v1-63 attack-id) a0-24)
      (set! (-> self attack-id) a0-24)
      )
    (let ((v1-65 (-> self root-override root-prim)))
      (let ((a1-15 (-> (the-as collide-shape-prim-group v1-65) child 2))
            (a0-27 (-> (the-as collide-shape-prim-group v1-65) child 1))
            )
        (set! (-> a1-15 prim-core action) (collide-action))
        (set! (-> a1-15 prim-core collide-with) (collide-spec))
        (set! (-> a0-27 prim-core action) (collide-action deadly))
        (set! (-> a0-27 prim-core collide-as) (collide-spec obstacle))
        (set! (-> a0-27 prim-core collide-with) (collide-spec jak bot obstacle hit-by-others-list player-list))
        (set! (-> a0-27 local-sphere w) 131072.0)
        (set! (-> a0-27 prim-core world-sphere w) 131072.0)
        )
      (set! (-> v1-65 local-sphere w) 155648.0)
      (set! (-> v1-65 prim-core world-sphere w) 155648.0)
      )
    (update-transforms (-> self root-override))
    (let ((a1-21 (new 'stack-no-clear 'overlaps-others-params)))
      (set! (-> a1-21 options) (overlaps-others-options))
      (set! (-> a1-21 collide-with-filter) (the-as collide-spec -1))
      (set! (-> a1-21 tlist) *touching-list*)
      (find-overlapping-shapes (-> self root-override) a1-21)
      )
    (suspend)
    0
    (let ((v1-74 (-> self root-override root-prim)))
      (set! (-> v1-74 prim-core collide-as) (collide-spec))
      (set! (-> v1-74 prim-core collide-with) (collide-spec))
      )
    0
    (countdown (gp-4 5)
      (let ((s5-3 (new 'stack-no-clear 'matrix)))
        (position-in-front-of-camera! (-> s5-3 trans) (+ 28672.0 (* 20480.0 (the float gp-4))) 0.0)
        (position-in-front-of-camera! (-> s5-3 vector 2) 4096.0 0.0)
        (vector-! (-> s5-3 vector 2) (-> s5-3 vector 2) (-> s5-3 trans))
        (vector-normalize! (-> s5-3 vector 2) 1.0)
        (vector-cross! (the-as vector (-> s5-3 vector)) *up-vector* (-> s5-3 vector 2))
        (vector-normalize! (the-as vector (-> s5-3 vector)) 1.0)
        (vector-cross! (-> s5-3 vector 1) (-> s5-3 vector 2) (the-as vector (-> s5-3 vector)))
        (vector-normalize! (-> s5-3 vector 1) 1.0)
        (set! (-> s5-3 vector 0 w) 0.0)
        (set! (-> s5-3 vector 1 w) 0.0)
        (set! (-> s5-3 vector 2 w) 0.0)
        (set! (-> s5-3 trans w) 1.0)
        (spawn-with-matrix (-> self part-doom) s5-3)
        )
      (set! (-> self state-time) (current-time))
      (until (>= (- (current-time) (-> self state-time)) (seconds 0.2))
        (suspend)
        )
      )
    (let ((gp-5 (current-time)))
      (until (>= (- (current-time) gp-5) (seconds 10))
        (suspend)
        )
      )
    (cleanup-for-death self)
    (none)
    )
  )

(defstate dormant (fort-missile)
  :virtual #t
  :code (the-as (function none :behavior fort-missile) sleep-code)
  )

(defmethod deactivate fort-missile ((obj fort-missile))
  (set-fordumpc-light-flag! #f)
  (send-event (handle->process (-> obj hud)) 'hide-and-die)
  (if (nonzero? (-> obj part-doom))
      (kill-and-free-particles (-> obj part-doom))
      )
  (sound-stop (-> obj alarm-sound-id))
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

;; WARN: Return type mismatch process-drawable vs fort-missile.
(defmethod relocate fort-missile ((obj fort-missile) (arg0 int))
  (if (nonzero? (-> obj part-doom))
      (&+! (-> obj part-doom) arg0)
      )
  (the-as
    fort-missile
    ((the-as (function process-drawable int process-drawable) (find-parent-method fort-missile 7)) obj arg0)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! fort-missile ((obj fort-missile) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (stack-size-set! (-> obj main-thread) 512)
  (let ((s4-0 (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 3))
      (set! (-> s3-0 prim-core collide-as) (collide-spec obstacle camera-blocker))
      (set! (-> s3-0 prim-core collide-with) (collide-spec jak bot obstacle hit-by-others-list player-list))
      (set! (-> s3-0 prim-core action) (collide-action solid deadly))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 -45056.0 0.0 118784.0)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-11 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-11 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 3)
      (set-vector! (-> v1-11 local-sphere) 0.0 -45056.0 0.0 118784.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-13 transform-index) 3)
      (set-vector! (-> v1-13 local-sphere) 0.0 -81920.0 0.0 32768.0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-16 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-16 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-16 prim-core collide-with))
      )
    (set! (-> s4-0 event-self) 'touched)
    (set! (-> obj root-override) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fort-missile" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj door-actor 0) (entity-actor-lookup arg0 'alt-actor 0))
  (set! (-> obj door-actor 1) (entity-actor-lookup arg0 'alt-actor 1))
  (set! (-> obj tank-actor) (entity-actor-lookup arg0 'alt-actor 2))
  (let ((s5-1 (new 'stack-no-clear 'vector)))
    (set! (-> s5-1 x) 0.0)
    (set! (-> s5-1 y) -36864.0)
    (set! (-> s5-1 z) 34406.4)
    (set! (-> s5-1 w) 1.0)
    (let ((s4-2 (new 'stack-no-clear 'vector)))
      (dotimes (s3-2 4)
        (let ((s2-1 (vector+! (new 'stack-no-clear 'vector) (-> obj root-override trans) s5-1))
              (s1-0 (new 'stack-no-clear 'vector))
              )
          (vector-normalize! (vector-! s4-2 s2-1 (-> obj root-override trans)) 1.0)
          (vector-float*! s1-0 s4-2 -1.0)
          (set! (-> obj bomb s3-2) (ppointer->handle (process-spawn fort-missile-target s2-1 s1-0 :to obj)))
          )
        (vector-rotate-y! s5-1 s5-1 16384.0)
        )
      )
    )
  (set! (-> obj bomb-count) (the-as uint 4))
  (set! (-> obj hud) (the-as handle #f))
  (set! (-> obj part-doom) (create-launch-control (-> *part-group-id-table* 583) obj))
  (set! (-> obj alarm-sound-id) (new-sound-id))
  (let ((a0-36 (-> obj skel root-channel 0)))
    (set! (-> a0-36 frame-group) (the-as art-joint-anim (-> obj draw art-group data 2)))
    (set! (-> a0-36 frame-num) 0.0)
    (joint-control-channel-group! a0-36 (the-as art-joint-anim (-> obj draw art-group data 2)) num-func-identity)
    )
  (ja-post)
  (go (method-of-object obj idle))
  (none)
  )
