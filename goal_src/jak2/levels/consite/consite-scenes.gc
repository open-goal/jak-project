;;-*-Lisp-*-
(in-package goal)

;; name: consite-scenes.gc
;; name in dgo: consite-scenes
;; dgos: COA

;; DECOMP BEGINS

(defskelgroup skel-consite-break-scaffold-a-break consite-break-scaffold-a consite-break-scaffold-a-break-lod0-jg -1
              ((consite-break-scaffold-a-break-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 90)
              :origin-joint-index 8
              )

(defskelgroup skel-consite-break-scaffold-a-break-a consite-break-scaffold-a consite-break-scaffold-a-break-a-lod0-jg -1
              ((consite-break-scaffold-a-break-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 -20 70)
              :origin-joint-index 3
              )

(defskelgroup skel-consite-break-scaffold-a-break-b consite-break-scaffold-a consite-break-scaffold-a-break-b-lod0-jg -1
              ((consite-break-scaffold-a-break-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 -20 60)
              :origin-joint-index 3
              )

(defskelgroup skel-consite-break-scaffold-a-break-c consite-break-scaffold-a consite-break-scaffold-a-break-c-lod0-jg -1
              ((consite-break-scaffold-a-break-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 -20 140)
              :origin-joint-index 3
              )

(defskelgroup skel-bomb-trigger bomb-trigger bomb-trigger-lod0-jg -1
              ((bomb-trigger-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :origin-joint-index 3
              )

(defskelgroup skel-kor-break kor-break kor-break-lod0-jg -1
              ((kor-break-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 80)
              :origin-joint-index 3
              )

(defskelgroup skel-kor-break-ray kor-break-ray kor-break-ray-lod0-jg -1
              ((kor-break-ray-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1000)
              :origin-joint-index 3
              )

(defpartgroup group-consite-scaffold-break-explosion
  :id 1175
  :linger-duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 5088) (sp-item 5089) (sp-item 5090) (sp-item 5091))
  )

(defpart 5091
  :init-specs ((:texture (new 'static 'texture-id :index #x34 :page #xc))
    (:num 10.0 20.0)
    (:y (meters 4))
    (:scale-x (meters 6) (meters 3))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360) :store)
    (:scale-y (meters 8) (meters 3.5))
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.05) (meters 0.1))
    (:scalevel-x (meters 0.033333335) (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.13333334)
    (:friction 0.92 0.02)
    (:timer (seconds 6.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.167))
    (:next-launcher 5092)
    (:conerot-x '*sp-temp*)
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters -5))
    )
  )

(defpart 5092
  :init-specs ((:scalevel-x (meters 0.033333335) (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:next-time (seconds 0.2) (seconds 0.065))
    (:next-launcher 5093)
    )
  )

(defpart 5093
  :init-specs ((:scalevel-x (meters 0.016666668) (meters 0.016666668)) (:scalevel-y :copy scalevel-x) (:fade-a -0.18 -0.12))
  )

(defpart 5090
  :init-specs ((:birth-func 'birth-func-texture-group)
    (:num 10.0 20.0)
    (:y (meters 4))
    (:scale-x (meters 6) (meters 3))
    (:rot-z (degrees 0) (degrees 3600) :store)
    (:scale-y (meters 8) (meters 3.5))
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.05) (meters 0.1))
    (:scalevel-x (meters 0.033333335) (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.13333334)
    (:friction 0.92 0.02)
    (:timer (seconds 6.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:userdata :data (new 'static 'boxed-array :type int32 80 1 0 #xc00000 #xc03300))
    (:next-time (seconds 0.167))
    (:next-launcher 5092)
    (:conerot-x '*sp-temp*)
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters 2))
    )
  )

(defpart 5089
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #xc))
    (:num 10.0 20.0)
    (:x (meters 0.25))
    (:y (meters 4))
    (:scale-x (meters 1) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0) (meters 0.13333334))
    (:scalevel-x (meters 0.006666667) (meters 0.0033333334))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00016666666) (meters -0.00066666666))
    (:friction 0.88 0.02)
    (:timer (seconds 20))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:next-time (seconds 0.235) (seconds 0.097))
    (:next-launcher 5094)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters 3))
    )
  )

(defpart 5094
  :init-specs ((:scalevel-x (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:next-time (seconds 0.3) (seconds 0.097))
    (:next-launcher 5095)
    )
  )

(defpart 5095
  :init-specs ((:scalevel-x (meters 0.0033333334)) (:scalevel-y :copy scalevel-x) (:fade-a -0.053333335 -0.053333335))
  )

(defpart 5088
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 10.0)
    (:x (meters 0) (meters 0.6))
    (:y (meters 4))
    (:scale-x (meters 9) (meters 5))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.033333335) (meters 0.04))
    (:scalevel-x (meters 0.016666668) (meters 0.016666668))
    (:rotvel-z (degrees -0.12) (degrees 0.24))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.32 0.32)
    (:friction 0.94 0.04)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:next-time (seconds 0.235) (seconds 0.097))
    (:next-launcher 5096)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0))
    )
  )

(defpart 5096
  :init-specs ((:scalevel-x (meters 0.008333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.0)
    (:next-time (seconds 0.335) (seconds 0.497))
    (:next-launcher 5097)
    )
  )

(defpart 5097
  :init-specs ((:scalevel-x (meters 0.0033333334)) (:scalevel-y :copy scalevel-x) (:fade-a -0.21333334 -0.10666667))
  )

(defpartgroup group-consite-scaffold-break-trailer
  :id 1176
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 5098))
  )

(defpart 5098
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 1.0)
    (:x (meters -0.25) (meters 1))
    (:scale-x (meters 1) (meters 2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 1) (meters 2))
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.013333334) (meters -0.013333334))
    (:scalevel-x (meters 0.006666667) (meters 0.006666667))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.08 -0.08)
    (:friction 0.95 0.03)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-consite-scaffold-dust-plume
  :id 1177
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 5099))
  )

(defpart 5099
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 1.0 0.5)
    (:x (meters -6) (meters 12))
    (:scale-x (meters 1) (meters 2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 1) (meters 2))
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-x (meters 0.02) (meters 0.02))
    (:scalevel-x (meters 0.033333335) (meters 0.006666667))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.04 -0.08)
    (:accel-y (meters 0.00066666666))
    (:friction 0.95 0.03)
    (:timer (seconds 4.335))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpartgroup group-consite-land-sand
  :id 1178
  :duration (seconds 0.017)
  :linger-duration (seconds 1.5)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 5100) (sp-item 5101))
  )

(defpart 5100
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 16.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.02) (meters 0.01))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters -0.00033333333))
    (:friction 0.95)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:conerot-x (degrees 60) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 5101
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 12.0)
    (:scale-x (meters 0.5) (meters 0.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 96.0 32.0)
    (:b 64.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.053333335) (meters 0.02))
    (:scalevel-x (meters 0.0016666667))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:accel-y (meters -0.00033333333))
    (:friction 0.95)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-12))
    (:conerot-x (degrees 60) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpartgroup group-consite-baron-sword
  :id 1179
  :flags (unk-4)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 5102 :flags (bit6 bit7)))
  )

(defpart 5102
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 40.0)
    (:x (meters -0.2) (meters 0.4))
    (:y (meters 0.5) (meters 9))
    (:scale-x (meters 0.4) (meters 0.4))
    (:rot-z (degrees 0) (degrees 12.000001))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 96.0 128.0)
    (:b 16.0 16.0)
    (:a 2.0 4.0)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:rotate-x (degrees -2))
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-consite-kor-energy
  :id 1180
  :bounds (static-bspherem 0 0 0 160)
  :parts ((sp-item 5103) (sp-item 5104 :flags (bit6)))
  )

(defpart 5103
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 2.0)
    (:scale-x (meters 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:vel-y (meters -0.03))
    (:scalevel-x (meters 0.005) (meters 0.005))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.98)
    (:fade-g -0.98)
    (:fade-a 0.19393939)
    (:timer (seconds 0.835))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.55))
    (:next-launcher 5105)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 5))
    )
  )

(defpart 5105
  :init-specs ((:fade-a -0.7529412) (:friction 0.1))
  )

(defpart 5104
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 6))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 0.0 64.0)
    (:g 128.0)
    (:b 255.0)
    (:a 32.0 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    )
  )

(defpartgroup group-kor-break-trailer
  :id 1181
  :linger-duration (seconds 3)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 5106) (sp-item 5107))
  )

(defpart 5106
  :init-specs ((:texture (new 'static 'texture-id :index #xbb :page #xc))
    (:num 0.0 1.0)
    (:scale-x (meters 0.2) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:scalevel-x (meters -0.00013333333))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.42666668)
    (:fade-g -0.42666668)
    (:fade-a 0.0)
    (:accel-y (meters 0) (meters -0.000016666667))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpart 5107
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.5) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 64.0)
    (:b 255.0)
    (:a 16.0 16.0)
    (:scalevel-x (meters 0.00033333333))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.053333335 -0.053333335)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpartgroup group-consite-precursor-stone-glow
  :id 1182
  :bounds (static-bspherem 0 0 0 3)
  :parts ((sp-item 5108 :flags (bit6)))
  )

(defpart 5108
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 3.5))
    (:rot-x (degrees 45))
    (:scale-y :copy scale-x)
    (:r 16.0)
    (:g 192.0)
    (:b 16.0)
    (:a 24.0)
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 4096.0)
    )
  )

(defun consite-crimson-guard-shot ((arg0 sparticle-launcher) (arg1 vector) (arg2 sparticle-launch-state))
  "The guards briefly shoot at Kor before being rekt"
  (draw-beam (-> *part-id-table* 606) arg1 (-> arg2 sprite rot-syvel) #f #t)
  (draw-beam (-> *part-id-table* 610) arg1 (-> arg2 sprite rot-syvel) #f #t)
  0
  (none)
  )

(defpartgroup group-consite-metalkor-shot-anticipate
  :id 1183
  :bounds (static-bspherem 0 0 0 160)
  :parts ((sp-item 5109 :fade-after (meters 80) :falloff-to (meters 80))
    (sp-item 5110 :fade-after (meters 220) :flags (bit6))
    )
  )

(defpart 5109
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 8.0)
    (:scale-x (meters 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:vel-y (meters -0.02))
    (:scalevel-x (meters 0.005) (meters 0.005))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.98)
    (:fade-g -0.98)
    (:fade-a 0.19393939)
    (:timer (seconds 0.835))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.55))
    (:next-launcher 5111)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 4))
    )
  )

(defpart 5111
  :init-specs ((:fade-a -0.7529412) (:friction 0.1))
  )

(defpart 5110
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 8))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 128.0 16.0)
    (:g 146.0 16.0)
    (:b 128.0 16.0)
    (:a 32.0)
    (:omega (degrees 4518))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    )
  )

(defun movie-consite-metalkor-shot-draw-fire ((arg0 vector) (arg1 vector))
  "TODO - cutscenes/docs"
  (let ((displacement (vector-! (new 'stack-no-clear 'vector) arg1 arg0)))
    (draw-beam (-> *part-id-table* 624) arg0 displacement #f #t)
    (let* ((a0-4 (vector-normalize-copy! (new 'stack-no-clear 'vector) displacement 8192.0))
           (v1-3 (vector+! (new 'stack-no-clear 'vector) arg0 a0-4))
           (t9-2 sp-launch-particles-var)
           (a0-5 *sp-particle-system-2d*)
           (a1-4 (-> *part-id-table* 625))
           (a2-2 *launch-matrix*)
           )
      (set! (-> a2-2 trans quad) (-> v1-3 quad))
      (t9-2 a0-5 a1-4 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
      )
    )
  0
  (none)
  )

(defun movie-consite-metalkor-shot-draw-moving ((arg0 vector) (arg1 vector) (arg2 float))
  "TODO - cutscenes/docs"
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (set! (-> s4-0 quad) (-> arg0 quad))
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (set! (-> gp-0 quad) (-> arg1 quad))
        (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) gp-0 s4-0)))
          (let ((s1-0 s4-0))
            (let ((s3-0 s4-0))
              (let ((s2-0 s5-1))
                (let ((v1-5 (lerp-scale -0.5 0.5 arg2 1490.0 1495.0)))
                  (.mov vf7 v1-5)
                  )
                (.lvf vf5 (&-> s2-0 quad))
                )
              (.lvf vf4 (&-> s3-0 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> s1-0 quad) vf6)
            )
          (vector+! gp-0 s4-0 (vector-normalize-copy! (new 'stack-no-clear 'vector) s5-1 49152.0))
          (vector-! s5-1 gp-0 s4-0)
          (let ((f30-0 (vector-length s5-1)))
            (let ((s3-2 (new 'stack-no-clear 'vector)))
              (let ((v1-10 s4-0))
                (let ((a0-5 s5-1))
                  (let ((a1-6 0.8))
                    (.mov vf7 a1-6)
                    )
                  (.lvf vf5 (&-> a0-5 quad))
                  )
                (.lvf vf4 (&-> v1-10 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> s3-2 quad) vf6)
              (let ((f28-0 (-> *part-id-table* 621 init-specs 4 initial-valuef)))
                (set! (-> *part-id-table* 621 init-specs 4 initial-valuef) (fmin f28-0 f30-0))
                (draw-beam (-> *part-id-table* 621) s4-0 s5-1 #f #t)
                (set! (-> *part-id-table* 621 init-specs 4 initial-valuef) f28-0)
                )
              (vector-normalize! s5-1 1.0)
              (let ((t9-4 sp-launch-particles-var)
                    (a0-8 *sp-particle-system-2d*)
                    (a1-9 (-> *part-id-table* 622))
                    (a2-3 *launch-matrix*)
                    )
                (set! (-> a2-3 trans quad) (-> s3-2 quad))
                (t9-4 a0-8 a1-9 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                )
              )
            (let ((s4-1 (new 'stack-no-clear 'matrix))
                  (f26-0 (* 0.000020345053 f30-0))
                  (f30-1 (-> *part-id-table* 623 init-specs 3 initial-valuef))
                  (f28-1 (-> *part-id-table* 623 init-specs 5 initial-valuef))
                  )
              (forward-up->inv-matrix s4-1 s5-1 *up-vector*)
              (set! (-> s4-1 trans quad) (-> gp-0 quad))
              (set! (-> *part-id-table* 623 init-specs 3 initial-valuef) (* f26-0 f30-1))
              (set! (-> *part-id-table* 623 init-specs 5 initial-valuef) (* f26-0 f28-1))
              (sp-launch-particles-var
                *sp-particle-system-2d*
                (-> *part-id-table* 623)
                s4-1
                (the-as sparticle-launch-state #f)
                (the-as sparticle-launch-control #f)
                1.0
                )
              (set! (-> *part-id-table* 623 init-specs 3 initial-valuef) f30-1)
              (set! (-> *part-id-table* 623 init-specs 5 initial-valuef) f28-1)
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

(defun movie-consite-metalkor-shot-draw-impact ((arg0 scene-player) (arg1 vector) (arg2 vector))
  "TODO - cutscenes/docs"
  (local-vars
    (sv-240 (function vector entity-actor skeleton-group vector object none :behavior manipy))
    (sv-256 vector)
    (sv-272 entity-actor)
    )
  (let ((v0-0 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) arg2 arg1) 2048.0))
        (gp-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> gp-0 quad) (-> arg1 quad))
    (vector+! gp-0 gp-0 v0-0)
    (let ((s4-0 (get-process *default-dead-pool* part-tracker #x4000)))
      (when s4-0
        (let ((t9-2 (method-of-type part-tracker activate)))
          (t9-2
            (the-as part-tracker s4-0)
            *entity-pool*
            (symbol->string (-> part-tracker symbol))
            (the-as pointer #x70004000)
            )
          )
        (let ((t9-3 run-function-in-process)
              (a0-7 s4-0)
              (a1-6 part-tracker-init)
              (a2-5 (-> *part-group-id-table* 141))
              (a3-1 0)
              (t0-0 #f)
              (t1-0 #f)
              (t2-0 #f)
              (t3-0 *launch-matrix*)
              )
          (set! (-> t3-0 trans quad) (-> gp-0 quad))
          ((the-as (function object object object object object object object object none) t9-3)
           a0-7
           a1-6
           a2-5
           a3-1
           t0-0
           t1-0
           t2-0
           t3-0
           )
          )
        (-> s4-0 ppointer)
        )
      )
    )
  (let ((s4-1 (new 'stack-no-clear 'vector)))
    (set! (-> s4-1 quad) (-> arg1 quad))
    (let ((gp-1 (new 'stack-no-clear 'quaternion)))
      (let ((s3-0 (lambda :behavior scene-player
                    ()
                    (set-vector! (-> self draw color-mult) 0.0 0.0 0.0 1.0)
                    (cond
                      ((>= 10.0 (ja-aframe-num 0))
                       (let ((v0-1 (the-as vector (-> self draw color-emissive))))
                         (set! (-> (the-as rgbaf v0-1) x) 1.0)
                         (set! (-> (the-as rgbaf v0-1) y) 1.0)
                         (set! (-> (the-as rgbaf v0-1) z) 1.0)
                         (set! (-> (the-as rgbaf v0-1) w) 1.0)
                         v0-1
                         )
                       )
                      ((>= 20.0 (ja-aframe-num 0))
                       (vector-lerp!
                         (-> self draw color-emissive)
                         (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                         (new 'static 'vector :x 0.5 :z 0.5 :w 1.0)
                         (lerp-scale 0.0 1.0 (ja-aframe-num 0) 10.0 20.0)
                         )
                       )
                      (else
                        (vector-lerp!
                          (-> self draw color-emissive)
                          (new 'static 'vector :x 0.5 :z 0.5 :w 1.0)
                          (new 'static 'vector :w 1.0)
                          (lerp-scale 0.0 1.0 (ja-aframe-num 0) 20.0 30.0)
                          )
                        )
                      )
                    )
                  )
            )
        (let ((s2-0 (new 'stack-no-clear 'matrix)))
          (vector-normalize-copy! (-> s2-0 vector 1) (vector-! (new 'stack-no-clear 'vector) arg2 arg1) -1.0)
          (cond
            ((and (< (fabs (-> s2-0 vector 1 y)) (fabs (-> s2-0 vector 1 x)))
                  (< (fabs (-> s2-0 vector 1 y)) (fabs (-> s2-0 vector 1 z)))
                  )
             (set-vector! (-> s2-0 vector 2) (-> s2-0 vector 1 z) 0.0 (- (-> s2-0 vector 1 x)) 1.0)
             )
            ((< (fabs (-> s2-0 vector 1 z)) (fabs (-> s2-0 vector 1 x)))
             (set-vector! (-> s2-0 vector 2) (-> s2-0 vector 1 y) (- (-> s2-0 vector 1 x)) 0.0 1.0)
             )
            (else
              (set-vector! (-> s2-0 vector 2) 0.0 (-> s2-0 vector 1 z) (- (-> s2-0 vector 1 y)) 0.0)
              )
            )
          (vector-normalize! (-> s2-0 vector 2) 1.0)
          (vector-cross! (the-as vector (-> s2-0 vector)) (-> s2-0 vector 1) (-> s2-0 vector 2))
          (matrix->quaternion gp-1 s2-0)
          )
        (sound-play "nboss-shoot-hit")
        (let* ((s1-2 (get-process *default-dead-pool* manipy #x4000))
               (s2-2 (when s1-2
                       (let ((t9-10 (method-of-type manipy activate)))
                         (t9-10 (the-as manipy s1-2) arg0 (symbol->string (-> manipy symbol)) (the-as pointer #x70004000))
                         )
                       (let ((s2-3 run-function-in-process)
                             (s0-1 s1-2)
                             )
                         (set! sv-240 manipy-init)
                         (set! sv-256 s4-1)
                         (set! sv-272 (-> arg0 entity))
                         (let ((t0-2 (art-group-get-by-name *level* "skel-bomb-blast" (the-as (pointer uint32) #f)))
                               (t1-2 #f)
                               (t2-2 0)
                               )
                           ((the-as (function object object object object object object object none) s2-3)
                            s0-1
                            sv-240
                            sv-256
                            sv-272
                            t0-2
                            t1-2
                            t2-2
                            )
                           )
                         )
                       (-> s1-2 ppointer)
                       )
                     )
               )
          (when s2-2
            (send-event (ppointer->process s2-2) 'anim-mode 'play1)
            (send-event (ppointer->process s2-2) 'anim "idle")
            (set-vector! (-> (the-as process-drawable (-> s2-2 0)) root scale) 1.0 1.0 1.0 1.0)
            (send-event (ppointer->process s2-2) 'trans-hook s3-0)
            (send-event (ppointer->process s2-2) 'rot-quat gp-1)
            )
          )
        )
      (let ((s3-1 (process-spawn
                    manipy
                    :init manipy-init
                    s4-1
                    (-> arg0 entity)
                    (art-group-get-by-name *level* "skel-generic-blast" (the-as (pointer uint32) #f))
                    #f
                    0
                    :to arg0
                    )
                  )
            )
        (when s3-1
          (send-event (ppointer->process s3-1) 'anim-mode 'play1)
          (send-event (ppointer->process s3-1) 'anim "idle")
          (set-vector! (-> (the-as process-drawable (-> s3-1 0)) root scale) 1.0 1.0 1.0 1.0)
          (send-event (ppointer->process s3-1) 'rot-quat gp-1)
          )
        )
      )
    )
  0
  (none)
  )

(scene-method-16
  (new 'static 'scene
    :name "consite-find-baron-res"
    :extra #f
    :info #f
    :mask-to-clear (process-mask movie enemy platform projectile)
    :entity "scene-stage-80"
    :art-group "scenecamera"
    :anim "consite-find-baron-res"
    :parts 73
    :command-list '((0
        (kill "consite-bomb-elevator-1")
        (kill "consite-silo-doors-1")
        (apply
          ,(lambda :behavior scene-player
             ()
             (update-mood-weather! *mood-control* 1.0 1.0 30.0 30.0)
             (set-time-for-random-weather! *mood-control* -99.0 -99.0)
             (none)
             )
          )
        )
      (60
        (part-tracker
          "group-run-poof-wod"
          entity
          "jak-highres"
          joint
          "Rball"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (71
        (part-tracker
          "group-run-poof-wod"
          entity
          "jak-highres"
          joint
          "Lball"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (79
        (part-tracker
          "group-run-poof-wod"
          entity
          "jak-highres"
          joint
          "Rball"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        (part-tracker
          "group-consite-land-sand"
          entity
          "kor-transform"
          joint
          "Lball"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        (part-tracker
          "group-consite-land-sand"
          entity
          "kor-transform"
          joint
          "Rball"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (89
        (part-tracker
          "group-run-poof-wod"
          entity
          "jak-highres"
          joint
          "Lball"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (100
        (part-tracker
          "group-slide-poof-san"
          entity
          "jak-highres"
          joint
          "RbigToe"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        (part-tracker
          "group-slide-poof-san"
          entity
          "jak-highres"
          joint
          "LbigToe"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (840
        (part-tracker
          "group-consite-kor-energy"
          entity
          "kor-transform"
          joint
          "head"
          track
          #t
          duration
          (frame-range 840 859)
          )
        )
      (859
        (part-tracker
          "group-consite-kor-energy"
          entity
          "kor-break"
          joint
          "main"
          track
          #t
          duration
          (frame-range 859 919)
          )
        )
      (891
        (setting-reset gem mode #t)
        (send-event "metalkor-highres-wings" 'no-fog)
        (send-event
          "metalkor-highres-wings"
          'trans-hook
          ,(lambda :behavior scene-player () (let ((f0-0 (calc-fade-from-fog (-> self draw origin)))
                                                   (v0-1 (-> self draw color-mult))
                                                   )
                                               (set! (-> v0-1 x) f0-0)
                                               (set! (-> v0-1 y) f0-0)
                                               (set! (-> v0-1 z) f0-0)
                                               (set! (-> v0-1 w) 1.0)
                                               v0-1
                                               )
                                          )
          )
        )
      (905 (apply ,(lambda :behavior scene-player () (if (not (-> self aborted?))
                                                         (set-consite-flash!)
                                                         )
                                                  )
                  )
           )
      (919
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "aa" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ad" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ae" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "af" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ag" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ah" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ak" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "al" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "am" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "an" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ao" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ap" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "aq" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ar" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "au" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "aw" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ax" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ay" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "az" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "ba" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bd" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "be" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bf" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bg" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bh" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bi" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bl" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bm" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bn" track #t duration (frame-range 919 936))
        (part-tracker "group-kor-break-trailer" entity "kor-break" joint "bo" track #t duration (frame-range 919 936))
        )
      (950
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "metalkor-highres-legs"
          joint
          "LfrontD"
          track
          #t
          duration
          (frame-range 950 960)
          )
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "metalkor-highres-legs"
          joint
          "LmidD"
          track
          #t
          duration
          (frame-range 950 960)
          )
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "metalkor-highres-legs"
          joint
          "LbackD"
          track
          #t
          duration
          (frame-range 950 960)
          )
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "metalkor-highres-legs"
          joint
          "RfrontD"
          track
          #t
          duration
          (frame-range 950 960)
          )
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "metalkor-highres-legs"
          joint
          "RmidD"
          track
          #t
          duration
          (frame-range 950 960)
          )
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "metalkor-highres-legs"
          joint
          "RbackD"
          track
          #t
          duration
          (frame-range 950 960)
          )
        )
      (1074
        (part-tracker
          "group-consite-baron-sword"
          entity
          "baron-highres"
          joint
          "swordnode"
          track
          #t
          duration
          (frame-range 1074 1514)
          )
        )
      (1140
        (part-tracker
          "group-consite-land-sand"
          entity
          "metalkor-highres-legs"
          joint
          "LfrontD"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (1145
        (part-tracker
          "group-consite-land-sand"
          entity
          "metalkor-highres-legs"
          joint
          "RmidD"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (1151
        (part-tracker
          "group-consite-land-sand"
          entity
          "metalkor-highres-legs"
          joint
          "LmidD"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (1155
        (part-tracker
          "group-consite-land-sand"
          entity
          "metalkor-highres-legs"
          joint
          "RfrontD"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (1173
        (part-tracker
          "group-consite-land-sand"
          entity
          "metalkor-highres-legs"
          joint
          "LmidD"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (1187
        (part-tracker
          "group-consite-land-sand"
          entity
          "metalkor-highres-legs"
          joint
          "RfrontD"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 1.0))
          )
        )
      (1359 (setting-reset gem mode #f))
      (1460 (setting-reset gem mode #t))
      (1460
        (part-tracker
          "group-consite-metalkor-shot-anticipate"
          entity
          "metalkor-highres"
          joint
          "head"
          track
          #t
          duration
          (frame-range 1460 1488)
          )
        )
      (1488
        (send-event
          "metalkor-highres"
          'trans-hook
          ,(lambda :behavior scene-player
             ()
             (let ((f30-0 (ja-aframe-num 0))
                   (gp-0 (the-as target (command-get-process "metalkor-highres" *target*)))
                   (v1-0 (the-as target (command-get-process "baron-highres" *target*)))
                   )
               (when (and gp-0 v1-0)
                 (let ((a0-6 (-> gp-0 node-list data 6 bone transform trans))
                       (a1-2 (-> v1-0 node-list data 61 bone transform trans))
                       )
                   (if (and (>= f30-0 1488.0) (< f30-0 1494.0))
                       (movie-consite-metalkor-shot-draw-moving a0-6 a1-2 f30-0)
                       )
                   )
                 )
               )
             (none)
             )
          )
        )
      (1489 (joint-eval consite-crimson-guard-shot entity "crimson-guard-highres" joint "blast"))
      (1492 (joint-eval consite-crimson-guard-shot entity "crimson-guard-highres" joint "blast"))
      (1494
        (part-tracker
          "group-target-hit"
          entity
          "baron-highres"
          joint
          "Lball"
          track
          #f
          duration
          (frame-range 1494 1509)
          )
        (send-event
          "baron-highres"
          'eval
          ,(lambda :behavior scene-player
             ()
             (ja-aframe-num 0)
             (let ((gp-0 (the-as target (command-get-process "metalkor-highres" *target*)))
                   (v1-0 (the-as target (command-get-process "baron-highres" *target*)))
                   )
               (when (and gp-0 v1-0)
                 (let ((a2-0 (-> gp-0 node-list data 6 bone transform trans))
                       (a1-2 (-> v1-0 node-list data 61 bone transform trans))
                       )
                   (movie-consite-metalkor-shot-draw-impact self a1-2 a2-0)
                   )
                 )
               )
             (none)
             )
          )
        )
      (1494
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "baron-highres"
          joint
          "main"
          track
          #t
          duration
          (frame-range 1494 1512)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "crimson-guard-highres"
          joint
          "main"
          track
          #t
          duration
          (frame-range 1494 1512)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "crimson-guard-lowres"
          joint
          "main"
          track
          #t
          duration
          (frame-range 1494 1512)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "crimson-guard-lowres-b"
          joint
          "main"
          track
          #t
          duration
          (frame-range 1494 1512)
          )
        )
      (1495
        (joint-eval consite-crimson-guard-shot entity "crimson-guard-highres" joint "blast")
        (apply ,(lambda :behavior scene-player () (if (not (-> self aborted?))
                                                      (set-consite-flash!)
                                                      )
                                               )
               )
        )
      (1497 (joint-eval consite-crimson-guard-shot entity "crimson-guard-highres" joint "blast"))
      (1508
        (part-tracker
          "group-consite-land-sand"
          entity
          "baron-highres"
          joint
          "head"
          track
          #t
          duration
          (frame-time (new 'static 'bfloat :data 3.0))
          )
        )
      (1509
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "dv"
          track
          #t
          duration
          (frame-range 1509 1556)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "dz"
          track
          #t
          duration
          (frame-range 1509 1545)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "eu"
          track
          #t
          duration
          (frame-range 1509 1568)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "eg"
          track
          #t
          duration
          (frame-range 1509 1556)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "em"
          track
          #t
          duration
          (frame-range 1509 1546)
          )
        )
      (1513
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-b"
          joint
          "cw"
          track
          #t
          duration
          (frame-range 1513 1592)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-b"
          joint
          "cp"
          track
          #t
          duration
          (frame-range 1513 1617)
          )
        )
      (1517
        (part-tracker
          "group-consite-scaffold-break-explosion"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "du"
          track
          #t
          duration
          (frame-range 1517 1518)
          )
        )
      (1521
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "ef"
          track
          #t
          duration
          (frame-range 1521 1579)
          )
        )
      (1529
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-b"
          joint
          "cm"
          track
          #t
          duration
          (frame-range 1529 1551)
          )
        )
      (1530
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-b"
          joint
          "cg"
          track
          #t
          duration
          (frame-range 1530 1581)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-b"
          joint
          "cl"
          track
          #t
          duration
          (frame-range 1530 1650)
          )
        )
      (1531
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-c"
          joint
          "eo"
          track
          #t
          duration
          (frame-range 1531 1597)
          )
        )
      (1538
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "be"
          track
          #t
          duration
          (frame-range 1538 1598)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "aq"
          track
          #t
          duration
          (frame-range 1538 1612)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "ay"
          track
          #t
          duration
          (frame-range 1538 1596)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "b"
          track
          #t
          duration
          (frame-range 1538 1616)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "i"
          track
          #t
          duration
          (frame-range 1538 1586)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "f"
          track
          #t
          duration
          (frame-range 1538 1612)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "zz"
          track
          #t
          duration
          (frame-range 1538 1616)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "aj"
          track
          #t
          duration
          (frame-range 1538 1570)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "az"
          track
          #t
          duration
          (frame-range 1538 1610)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "ao"
          track
          #t
          duration
          (frame-range 1538 1612)
          )
        )
      (1550
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "consite-break-scaffold-a-break-b"
          joint
          "cm"
          track
          #t
          duration
          (frame-range 1550 1580)
          )
        )
      (1554
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "z"
          track
          #t
          duration
          (frame-range 1538 1616)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "g"
          track
          #t
          duration
          (frame-range 1540 1582)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "s"
          track
          #t
          duration
          (frame-range 1576 1617)
          )
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "k"
          track
          #t
          duration
          (frame-range 1548 1612)
          )
        )
      (1560
        (part-tracker
          "group-consite-scaffold-break-trailer"
          entity
          "consite-break-scaffold-a-break"
          joint
          "ab"
          track
          #t
          duration
          (frame-range 1560 1601)
          )
        )
      (1571
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "aj"
          track
          #t
          duration
          (frame-range 1571 1590)
          )
        )
      (1599
        (part-tracker
          "group-consite-scaffold-dust-plume"
          entity
          "consite-break-scaffold-a-break-a"
          joint
          "be"
          track
          #t
          duration
          (frame-range 1599 1610)
          )
        )
      (1825 (setting-reset gem mode #f))
      (2175
        (part-tracker
          "group-consite-precursor-stone-glow"
          entity
          "precursor-stone"
          joint
          "main"
          track
          #t
          duration
          (frame-range 2175 3210)
          )
        )
      (3260 (fadeout (frame-time-30 10)))
      (10000
        (task-close! "consite-find-baron-resolution")
        (kill "consite-break-scaffold-1")
        (apply ,(lambda :behavior scene-player () (set-time-for-random-weather! *mood-control* 0.0 0.0) (none)))
        )
      )
    :cut-list '(60
       161
       256
       452
       556
       693
       859
       874
       891
       947
       1052
       1130
       1276
       1359
       1403
       1460
       1539
       1651
       1827
       1928
       2057
       2176
       2322
       2420
       2510
       2581
       2681
       2760
       2831
       2962
       3000
       3138
       )
    :wait-ground-time (seconds 1)
    :draw-target #f
    :abort #t
    :actor (new 'static 'boxed-array :type scene-actor
      (new 'static 'scene-actor
        :name "scenecamera"
        :level #f
        :art-group "skel-scenecamera"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :camera 4
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "sidekick-highres"
        :level 'consite
        :art-group "skel-sidekick-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "jak-highres"
        :level 'consite
        :art-group "skel-jak-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "baron-highres"
        :level 'consite
        :art-group "skel-baron-highres"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-highres"
        :level 'consite
        :art-group "skel-crimson-guard-highres"
        :prefix ""
        :draw-frames '((min 1539))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "crimson-guard-lowres"
        :level 'consite
        :art-group "skel-crimson-guard-lowres"
        :prefix ""
        :draw-frames '((min 1539))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x4
        )
      (new 'static 'scene-actor
        :name "crimson-guard-lowres-b"
        :level 'consite
        :art-group "skel-crimson-guard-lowres"
        :prefix "b-"
        :draw-frames '((min 1539))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        :no-draw-seg #x4
        )
      (new 'static 'scene-actor
        :name "kor-break"
        :level 'consiteb
        :art-group "skel-kor-break"
        :prefix ""
        :draw-frames '((857 946))
        :scissor-frames '()
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "kor-break-ray"
        :level 'consiteb
        :art-group "skel-kor-break-ray"
        :prefix ""
        :draw-frames '((859 946))
        :scissor-frames '()
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "kor-transform"
        :level 'consiteb
        :art-group "skel-kor-transform"
        :prefix ""
        :draw-frames '((min 859))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "kor-transform-monsterparts"
        :level 'consiteb
        :art-group "skel-kor-transform-monsterparts"
        :prefix "monsterparts-"
        :draw-frames '((min 859))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "metalkor-highres"
        :level 'consiteb
        :art-group "skel-metalkor-highres"
        :prefix ""
        :draw-frames '((890 1827))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "metalkor-highres-lowtorso"
        :level 'consiteb
        :art-group "skel-metalkor-highres-lowtorso"
        :prefix "lowtorso-"
        :draw-frames '((890 1827))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "metalkor-highres-legs"
        :level 'consiteb
        :art-group "skel-metalkor-highres-legs"
        :prefix "legs-"
        :draw-frames '((890 1525) (1539 1827))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "metalkor-highres-wings"
        :level 'consiteb
        :art-group "skel-metalkor-highres-wings"
        :prefix "wings-"
        :draw-frames '((890 1827))
        :scissor-frames '()
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "precursor-stone"
        :level 'consite
        :art-group "skel-precursor-stone"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-mask #x12
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-bomb-elevator"
        :level 'consite
        :art-group "skel-consite-bomb-elevator"
        :prefix ""
        :draw-frames '((2175 max))
        :scissor-frames '((2760 2831))
        :shadow-mask #x12
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-bomb-elevator-hinges"
        :level 'consite
        :art-group "skel-consite-bomb-elevator-hinges"
        :prefix "hinges-"
        :draw-frames '((2175 max))
        :scissor-frames '((2760 2831))
        :shadow-mask #x12
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-silo-doors"
        :level 'consite
        :art-group "skel-consite-silo-doors"
        :prefix ""
        :draw-frames '((min 1650) (2057 max))
        :scissor-frames '()
        :shadow-mask #x12
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "bomb-trigger"
        :level 'consite
        :art-group "skel-bomb-trigger"
        :prefix ""
        :draw-frames '((min max))
        :scissor-frames '()
        :shadow-mask #x12
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-break-scaffold-a-break"
        :level 'consite
        :art-group "skel-consite-break-scaffold-a-break"
        :prefix "break-"
        :draw-frames '((min 60) (1460 1651) (1827 2176) (2322 2420) (3138 max))
        :scissor-frames '((1928 2057) (3138 max))
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-break-scaffold-a-break-a"
        :level 'consite
        :art-group "skel-consite-break-scaffold-a-break-a"
        :prefix "break-a-"
        :draw-frames '((min 60) (1460 1651) (1827 2420) (3138 max))
        :scissor-frames '((2176 2322))
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-break-scaffold-a-break-b"
        :level 'consite
        :art-group "skel-consite-break-scaffold-a-break-b"
        :prefix "break-b-"
        :draw-frames '((min 60) (1403 1651) (1827 2176) (3138 max))
        :scissor-frames '()
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      (new 'static 'scene-actor
        :name "consite-break-scaffold-a-break-c"
        :level 'consite
        :art-group "skel-consite-break-scaffold-a-break-c"
        :prefix "break-c-"
        :draw-frames '((min 60) (161 556) (1052 1651) (1827 2057) (3138 max))
        :scissor-frames '((1928 2057) (3138 max))
        :shadow-mask #x1e
        :shadow-values #x22220
        :flags #x1
        :shadow-flags -1
        :shadow-volume-joint #f
        )
      )
    :load-point-obj "consite-start"
    :end-point-obj "consite-runway"
    :borrow '()
    :sfx-volume -1.0
    :ambient-volume -1.0
    :music-volume -1.0
    :blackout-end #t
    :peaceful #t
    :music-delay 1500.0
    :save #t
    )
  )
