;;-*-Lisp-*-
(in-package goal)

;; name: castle-texture.gc
;; name in dgo: castle-texture
;; dgos: CAS

;; DECOMP BEGINS

(define *slime-clut* (new 'static 'clut16x16 :clut (new 'static 'array rgba 256
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x53 :g #x55 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x55 :g #x58 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x57 :g #x5c :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x59 :g #x5f :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x5b :g #x63 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x5c :g #x66 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x5e :g #x69 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x60 :g #x6d :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x60 :g #x6d :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x5e :g #x69 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x5c :g #x66 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x5a :g #x62 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x59 :g #x5f :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x57 :g #x5c :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x55 :g #x58 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x52 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x52 :g #x53 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x53 :g #x54 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x54 :g #x55 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x55 :g #x56 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x55 :g #x58 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x56 :g #x59 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x57 :g #x5a :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x58 :g #x5b :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x58 :g #x5c :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x59 :g #x5e :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5a :g #x5f :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5b :g #x60 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5c :g #x61 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5c :g #x62 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5d :g #x64 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5e :g #x65 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5f :g #x66 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x5f :g #x67 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x60 :g #x68 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x61 :g #x6a :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x62 :g #x6b :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x63 :g #x6c :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x63 :g #x6d :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x64 :g #x6e :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x65 :g #x70 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x66 :g #x71 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x66 :g #x72 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x67 :g #x73 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x68 :g #x74 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x69 :g #x76 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x69 :g #x77 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x6c :g #x7c :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x73 :g #x86 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7a :g #x91 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x81 :g #x9c :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x88 :g #xa6 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x8f :g #xb1 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x96 :g #xbc :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9e :g #xc7 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9e :g #xc7 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x99 :g #xc0 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x94 :g #xb9 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb2 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x8b :g #xab :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x87 :g #xa4 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x82 :g #x9d :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x79 :g #x8f :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x77 :g #x8b :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x77 :g #x8d :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x78 :g #x8e :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x79 :g #x8f :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7a :g #x90 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7a :g #x91 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7b :g #x93 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7c :g #x94 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7d :g #x95 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7e :g #x96 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7e :g #x97 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x7f :g #x99 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x80 :g #x9a :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x81 :g #x9b :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x81 :g #x9c :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x82 :g #x9d :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x83 :g #x9f :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x84 :g #xa0 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x85 :g #xa1 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x85 :g #xa2 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x86 :g #xa3 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x87 :g #xa5 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x88 :g #xa6 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x88 :g #xa7 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x89 :g #xa8 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8a :g #xa9 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8b :g #xab :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8b :g #xac :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8c :g #xad :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8d :g #xae :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8e :g #xaf :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8f :g #xb1 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8f :g #xb2 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x92 :g #xb5 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x94 :g #xb9 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x96 :g #xbc :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x99 :g #xbf :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9b :g #xc3 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9d :g #xc6 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa0 :g #xca :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa0 :g #xca :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9e :g #xc7 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9c :g #xc4 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9a :g #xc2 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x98 :g #xbf :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x96 :g #xbd :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x94 :g #xba :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8f :g #xb4 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8e :g #xb3 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8d :g #xb2 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8d :g #xb1 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8c :g #xb0 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8b :g #xaf :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8a :g #xae :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8a :g #xae :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x89 :g #xad :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x88 :g #xac :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x87 :g #xab :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x87 :g #xaa :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x86 :g #xa9 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x85 :g #xa8 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x84 :g #xa7 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x84 :g #xa7 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x83 :g #xa6 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x82 :g #xa5 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x81 :g #xa4 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x81 :g #xa3 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x80 :g #xa2 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7f :g #xa1 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7e :g #xa0 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7e :g #xa0 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7d :g #x9f :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7c :g #x9e :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7b :g #x9d :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7b :g #x9c :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7a :g #x9b :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x79 :g #x9a :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x79 :g #x9a :b #x15 :a #x80)
                                                     (new 'static 'rgba :r #x79 :g #x9a :b #x15 :a #x80)
                                                     (new 'static 'rgba :r #x7c :g #x9d :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x7f :g #xa1 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x82 :g #xa5 :b #x14 :a #x80)
                                                     (new 'static 'rgba :r #x85 :g #xa8 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x88 :g #xac :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8b :g #xb0 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8e :g #xb3 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x91 :g #xb7 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x94 :g #xbb :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x97 :g #xbf :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x9a :g #xc2 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9d :g #xc6 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa0 :g #xca :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa3 :g #xcd :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa6 :g #xd1 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xac :g #xd9 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xab :g #xd8 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xaa :g #xd7 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa9 :g #xd6 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa8 :g #xd5 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa8 :g #xd4 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa7 :g #xd3 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa6 :g #xd2 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa5 :g #xd1 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa4 :g #xd0 :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa4 :g #xcf :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa3 :g #xce :b #x10 :a #x80)
                                                     (new 'static 'rgba :r #xa2 :g #xcd :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa1 :g #xcc :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa0 :g #xcb :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa0 :g #xca :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9f :g #xc9 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9e :g #xc8 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9d :g #xc7 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9d :g #xc6 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9c :g #xc5 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9b :g #xc4 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9a :g #xc3 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x99 :g #xc2 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x99 :g #xc1 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x98 :g #xc0 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x97 :g #xbf :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x96 :g #xbe :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x95 :g #xbd :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x95 :g #xbc :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x94 :g #xbb :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x93 :g #xba :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x92 :g #xb9 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x91 :g #xb8 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x91 :g #xb7 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb6 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8f :g #xb5 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8e :g #xb4 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x8e :g #xb3 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8c :g #xb1 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x8c :g #xb1 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb6 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x94 :g #xba :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x97 :g #xbf :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x9b :g #xc3 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9e :g #xc8 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa2 :g #xcc :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa6 :g #xd1 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa6 :g #xd1 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa3 :g #xcd :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #xa0 :g #xca :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9d :g #xc6 :b #x11 :a #x80)
                                                     (new 'static 'rgba :r #x9b :g #xc3 :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x98 :g #xbf :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x95 :g #xbc :b #x12 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     (new 'static 'rgba :r #x90 :g #xb5 :b #x13 :a #x80)
                                                     )
                                             )
        )

(define *toxic-slime-texture-anim-array*
  (the-as (texture-anim-array texture-anim)
    (new 'static 'texture-anim-array :type texture-anim
      (new 'static 'texture-anim
        :func-id 'texture-anim-alpha-ramp-clut-upload
        :init-func-id 'texture-anim-alpha-ramp-clut-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 28.0)
        :color (new 'static 'rgba :a #x80)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2)
        )
      (new 'static 'texture-anim
        :num-layers #x2
        :func-id 'cloud-texture-anim-func
        :init-func-id 'dest-texture-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 16.0 :y 8.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 300.0
        :frame-mod 600.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 16.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 600.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 16.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 600.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x2
        :func-id 'cloud-texture-anim-func
        :init-func-id 'dest-texture-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 32.0 :y 9.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 300.0
        :frame-mod 300.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 32.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 32.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x2
        :func-id 'cloud-texture-anim-func
        :init-func-id 'dest-texture-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 64.0 :y 10.0)
        :color (new 'static 'rgba :a #x80)
        :frame-time 99.0
        :frame-delta 300.0
        :frame-mod 150.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 64.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 150.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 64.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 150.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x2
        :func-id 'cloud-texture-anim-func
        :init-func-id 'dest-texture-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 128.0 :y 12.0)
        :color (new 'static 'rgba :a #x80)
        :frame-time 199.0
        :frame-delta 300.0
        :frame-mod 75.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 128.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 75.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 128.0 :y 20.0 :z 28.0)
            :func-id 'cloud-texture-anim-layer-func
            :init-func-id 'noise-texture-init
            :tex #f
            :end-time 75.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x4
        :func #f
        :init-func-id 'dest-texture-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 128.0 :y 20.0)
        :color (new 'static 'rgba :a #x80)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 6
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 16.0 :y 8.0)
            :func-id 'default-texture-anim-layer-func
            :init-func-id 'src-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 0.55)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 32.0 :y 9.0)
            :func-id 'default-texture-anim-layer-func
            :init-func-id 'src-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 0.6)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 64.0 :y 10.0)
            :func-id 'default-texture-anim-layer-func
            :init-func-id 'src-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 0.3)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 128.0 :y 12.0)
            :func-id 'default-texture-anim-layer-func
            :init-func-id 'src-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 0.1)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x1
        :func #f
        :init-func-id 'texture-anim-change-mt8h-init
        :tex #f
        :tex-name "cas-toxic-slime-dest"
        :extra (new 'static 'vector :x 28.0 :y 12.0 :z 128.0 :w 128.0)
        :color (new 'static 'rgba :a #x80)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :extra (new 'static 'vector :x 128.0 :y 20.0)
            :func-id 'move-rg-to-ba-texture-anim-layer-func
            :init-func-id 'src-texture-init
            :tex #f
            :end-time 300.0
            :tex-name #f
            :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :func-id 'texture-anim-slime-clut-upload
        :init-func-id 'texture-anim-slime-clut-init
        :tex #f
        :tex-name #f
        :extra (new 'static 'vector :x 28.0)
        :color (new 'static 'rgba :a #x80)
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2)
        )
      (new 'static 'texture-anim
        :num-layers #x1
        :func #f
        :init-func-id 'texture-anim-overide-size-init
        :tex #f
        :tex-name "cas-toxic-slime-scroll-dest"
        :extra (new 'static 'vector :x 64.0 :y 64.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 300.0
        :frame-mod 1200.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :func-id 'default-texture-anim-layer-func
            :init-func #f
            :tex #f
            :end-time 1200.0
            :tex-name "cas-toxic-slime-dest"
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.0))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 1.0))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      )
    )
  )

(defun set-slime-alphas ((arg0 float) (arg1 float) (arg2 float) (arg3 float))
  (set! (-> *toxic-slime-texture-anim-array* array-data 5 data 0 start-color w) arg0)
  (set! (-> *toxic-slime-texture-anim-array* array-data 5 data 1 start-color w) arg1)
  (set! (-> *toxic-slime-texture-anim-array* array-data 5 data 2 start-color w) arg2)
  (set! (-> *toxic-slime-texture-anim-array* array-data 5 data 3 start-color w) arg3)
  )

;; WARN: Return type mismatch object vs none.
(defun get-slime-alphas ()
  (format
    0
    "~f ~f ~f ~f~%"
    (-> *toxic-slime-texture-anim-array* array-data 5 data 0 start-color w)
    (-> *toxic-slime-texture-anim-array* array-data 5 data 1 start-color w)
    (-> *toxic-slime-texture-anim-array* array-data 5 data 2 start-color w)
    (-> *toxic-slime-texture-anim-array* array-data 5 data 3 start-color w)
    )
  (none)
  )

(defun set-slime-speed ((arg0 float))
  (let ((v1-0 *toxic-slime-texture-anim-array*)
        (f0-3 (the float (the int (* 300.0 arg0))))
        )
    (dotimes (a0-1 4)
      (let ((a1-4 (-> v1-0 array-data (+ a0-1 1))))
        (set! (-> a1-4 frame-mod) f0-3)
        (set! (-> a1-4 data 0 end-time) f0-3)
        (set! (-> a1-4 data 1 end-time) f0-3)
        )
      (set! f0-3 (* 0.5 f0-3))
      )
    )
  #f
  )

(define *cas-conveyor-texture-anim-array*
  (the-as (texture-anim-array texture-anim)
    (new 'static 'texture-anim-array :type texture-anim
      (new 'static 'texture-anim
        :num-layers #x1
        :func #f
        :init-func-id 'texture-anim-overide-size-init
        :tex #f
        :tex-name "cas-conveyor-dest"
        :extra (new 'static 'vector :x 64.0 :y 32.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 555.0
        :frame-mod 300.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :func-id 'default-texture-anim-layer-func
            :init-func #f
            :tex #f
            :end-time 300.0
            :tex-name "cas-conveyor"
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.0))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 1.0))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x1
        :func #f
        :init-func-id 'texture-anim-overide-size-init
        :tex #f
        :tex-name "cas-conveyor-dest-01"
        :extra (new 'static 'vector :x 64.0 :y 32.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 555.0
        :frame-mod 300.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :func-id 'default-texture-anim-layer-func
            :init-func #f
            :tex #f
            :end-time 300.0
            :tex-name "cas-conveyor"
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.0))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 1.0))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x1
        :func #f
        :init-func-id 'texture-anim-overide-size-init
        :tex #f
        :tex-name "cas-conveyor-dest-02"
        :extra (new 'static 'vector :x 64.0 :y 32.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 555.0
        :frame-mod 300.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :func-id 'default-texture-anim-layer-func
            :init-func #f
            :tex #f
            :end-time 300.0
            :tex-name "cas-conveyor"
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.0))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 1.0))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      (new 'static 'texture-anim
        :num-layers #x1
        :func #f
        :init-func-id 'texture-anim-overide-size-init
        :tex #f
        :tex-name "cas-conveyor-dest-03"
        :extra (new 'static 'vector :x 64.0 :y 32.0)
        :color (new 'static 'rgba :a #x80)
        :frame-delta 555.0
        :frame-mod 300.0
        :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
        :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
        :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
        :data (new 'static 'array texture-anim-layer 2
          (new 'static 'texture-anim-layer
            :func-id 'default-texture-anim-layer-func
            :init-func #f
            :tex #f
            :end-time 300.0
            :tex-name "cas-conveyor"
            :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
            :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
            :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.0))
            :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
            :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
            :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 1.0))
            :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
            )
          )
        )
      )
    )
  )

(defun set-conveyor-speed! ((arg0 int) (arg1 float))
  (set! (-> *cas-conveyor-texture-anim-array* array-data arg0 frame-delta) (* 0.018066408 arg1))
  0
  (none)
  )
