;;-*-Lisp-*-
(in-package goal)

;; name: casboss-texture.gc
;; name in dgo: casboss-texture
;; dgos: CAB

;; DECOMP BEGINS

(define *krew-holo-texture-anim-array*
  (new 'static 'texture-anim-array :type texture-anim
    (new 'static 'texture-anim
      :num-layers #x5
      :func 'krew-texture-anim-func
      :init-func #f
      :tex #f
      :tex-name "krew-holo-dest"
      :color (new 'static 'rgba :a #x80)
      :frame-delta 300.0
      :frame-mod 1200.0
      :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
      :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
      :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
      )
    )
  )

(defun krew-texture-anim-func ()
  (with-pp
    (let ((gp-0 *krew-holo-texture-anim-array*))
      (when (not (paused?))
        (let ((s5-0 (-> gp-0 array-data 0 data 0)))
          (cond
            ((= (-> s5-0 extra x) 0.0)
             (cond
               ((>= 0.0 (-> s5-0 extra y))
                (set! (-> s5-0 extra y) (rand-vu-float-range 150.0 300.0))
                (set! (-> s5-0 extra z) (-> s5-0 extra y))
                (set! (-> s5-0 extra w) (rand-vu-float-range 0.1 0.5))
                (set! (-> s5-0 extra x) 1.0)
                )
               (else
                 (set! (-> s5-0 extra y) (- (-> s5-0 extra y) (* 300.0 (-> pp clock seconds-per-frame))))
                 )
               )
             )
            ((= (-> s5-0 extra x) 1.0)
             (cond
               ((>= 0.0 (-> s5-0 extra y))
                (set! (-> s5-0 extra y) (rand-vu-float-range 300.0 600.0))
                (set! (-> s5-0 extra x) 0.0)
                )
               (else
                 (let ((f0-16 (+ 0.1 (* (-> s5-0 extra w) (sin (* 32768.0 (/ (-> s5-0 extra y) (-> s5-0 extra z))))))))
                   (set-vector! (-> s5-0 start-color) (* 0.5 f0-16) (* 0.7 f0-16) f0-16 1.0)
                   (set-vector! (-> s5-0 end-color) (* 0.5 f0-16) (* 0.7 f0-16) f0-16 1.0)
                   )
                 (set! (-> s5-0 extra y) (- (-> s5-0 extra y) (* 300.0 (-> pp clock seconds-per-frame))))
                 )
               )
             )
            )
          )
        (let ((gp-1 (-> gp-0 array-data 0 data 1)))
          (cond
            ((= (-> gp-1 extra x) 0.0)
             (cond
               ((>= 0.0 (-> gp-1 extra y))
                (set! (-> gp-1 extra y) (rand-vu-float-range 75.0 150.0))
                (set! (-> gp-1 extra z) (-> gp-1 extra y))
                (set! (-> gp-1 extra x) 1.0)
                )
               (else
                 (set! (-> gp-1 start-st-offset y) 0.0)
                 (set! (-> gp-1 end-st-offset y) 0.0)
                 (set! (-> gp-1 extra y) (- (-> gp-1 extra y) (* 300.0 (-> pp clock seconds-per-frame))))
                 )
               )
             )
            ((= (-> gp-1 extra x) 1.0)
             (cond
               ((>= 0.0 (-> gp-1 extra y))
                (set! (-> gp-1 extra y) (rand-vu-float-range 300.0 600.0))
                (set! (-> gp-1 extra x) 0.0)
                )
               (else
                 (let ((f0-34 (- 1.0 (/ (-> gp-1 extra y) (-> gp-1 extra z)))))
                   (set! (-> gp-1 start-st-offset y) f0-34)
                   (set! (-> gp-1 end-st-offset y) f0-34)
                   )
                 (set! (-> gp-1 extra y) (- (-> gp-1 extra y) (* 300.0 (-> pp clock seconds-per-frame))))
                 )
               )
             )
            )
          )
        )
      )
    0
    (none)
    )
  )
