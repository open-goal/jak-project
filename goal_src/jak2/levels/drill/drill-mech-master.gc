;;-*-Lisp-*-
(in-package goal)

;; name: drill-mech-master.gc
;; name in dgo: drill-mech-master
;; dgos: DMI

(declare-type drill-control-panel process-focusable)

;; DECOMP BEGINS

(defmethod draw hud-cpanel ((obj hud-cpanel))
  (set-hud-piece-position!
    (the-as hud-sprite (-> obj sprites))
    (the int (+ 502.0 (* 130.0 (-> obj offset))))
    200
    )
  (format (clear (-> obj strings 0 text)) "~D" (-> obj values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> obj strings 0 pos)) (the-as vector4w (-> obj sprites)) -28 55)
  ((method-of-type hud draw) obj)
  0
  (none)
  )

(defmethod update-values hud-cpanel ((obj hud-cpanel))
  (set! (-> obj values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) obj)
  0
  (none)
  )

(defmethod init-callback hud-cpanel ((obj hud-cpanel))
  (set! (-> obj level) (level-get *level* 'drillmid))
  (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x10 :page #xb1e)))
  (set! (-> obj gui-id)
        (add-process *gui-control* obj (gui-channel hud-middle-right) (gui-action hidden) (-> obj name) 81920.0 0)
        )
  (logior! (-> obj flags) (hud-flags show))
  (set! (-> obj sprites 0 flags) (the-as uint 4))
  (set! (-> obj sprites 0 scale-x) 1.0)
  (set! (-> obj sprites 0 scale-y) 1.0)
  (alloc-string-if-needed obj 0)
  (set! (-> obj strings 0 scale) 0.6)
  (set! (-> obj strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(deftype drill-mech-master (process)
  ((cpanel-count         int8                      :offset-assert 128)
   (alarm-sound-id       sound-id                  :offset-assert 132)
   (explosion-sound-id   sound-id                  :offset-assert 136)
   (exited?              symbol                    :offset-assert 140)
   (killed-jak?          symbol                    :offset-assert 144)
   (part-doom            sparticle-launch-control  :offset-assert 148)
   (hud-cpanel           handle                    :offset-assert 152)
   (hud-timer            handle                    :offset-assert 160)
   (scene-player-handle  handle                    :offset-assert 168)
   (state-time           time-frame                :offset-assert 176)
   (next-warn-time       time-frame                :offset-assert 184)
   (total-countdown-time time-frame                :offset-assert 192)
   (started-timer-time   time-frame                :offset-assert 200)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14005000d0
  (:methods
    (idle () _type_ :state 14)
    (active () _type_ :state 15)
    (hostile () _type_ :state 16)
    (failed () _type_ :state 17)
    (victory () _type_ :state 18)
    (spawn-hud-panel (_type_ symbol) none 19)
    )
  )


(define *drill-mech-master* (the-as (pointer drill-mech-master) #f))

(defmethod deactivate drill-mech-master ((obj drill-mech-master))
  (set! *drill-mech-master* (the-as (pointer drill-mech-master) #f))
  (if (nonzero? (-> obj alarm-sound-id))
      (sound-stop (-> obj alarm-sound-id))
      )
  (if (nonzero? (-> obj part-doom))
      (kill-and-free-particles (-> obj part-doom))
      )
  ((method-of-type process deactivate) obj)
  (none)
  )

;; WARN: Return type mismatch process vs drill-mech-master.
(defmethod relocate drill-mech-master ((obj drill-mech-master) (arg0 int))
  (if (nonzero? (-> obj part-doom))
      (&+! (-> obj part-doom) arg0)
      )
  (the-as drill-mech-master ((method-of-type process relocate) obj arg0))
  )

(defbehavior drill-mech-master-event-handler drill-mech-master ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('hud-cpanel)
     (let ((gp-0 (-> arg3 param 0)))
       (set! (-> *game-info* counter) (the float (-> self cpanel-count)))
       (spawn-hud-panel self (the-as symbol gp-0))
       (set-setting! 'music #f 0.0 0)
       (if (not gp-0)
           (set! (-> self exited?) #t)
           )
       )
     #t
     )
    (('drill-control-panel)
     (set! (-> self cpanel-count) (max 0 (+ (-> self cpanel-count) -1)))
     (set! (-> *game-info* counter) (the float (-> self cpanel-count)))
     (spawn-hud-panel self #t)
     (when (= (-> self cpanel-count) 9)
       (set! (-> self next-warn-time) (+ (current-time) (seconds 3)))
       (task-node-close! (game-task-node drill-mech-started-smashing))
       )
     (if (and (zero? (-> self cpanel-count)) (-> self next-state) (= (-> self next-state name) 'idle))
         (go-virtual active)
         )
     )
    )
  )

(defmethod spawn-hud-panel drill-mech-master ((obj drill-mech-master) (arg0 symbol))
  "Spawn the hud panel for the drill-mech mission."
  (cond
    ((and arg0 (nonzero? (-> obj cpanel-count)))
     (if (not (handle->process (-> obj hud-cpanel)))
         (set! (-> obj hud-cpanel) (ppointer->handle (process-spawn hud-cpanel :init hud-init-by-other :to obj)))
         )
     )
    (else
      (send-event (handle->process (-> obj hud-cpanel)) 'hide-and-die)
      (set! (-> obj hud-cpanel) (the-as handle #f))
      )
    )
  (none)
  )

(defstate idle (drill-mech-master)
  :virtual #t
  :event drill-mech-master-event-handler
  :trans (behavior ()
    (when (and (< (-> self cpanel-count) 10) (< 1 (-> self cpanel-count)) (>= (current-time) (-> self next-warn-time)))
      (set! (-> self next-warn-time) (+ (current-time) (seconds 10)))
      (talker-spawn-func (-> *talker-speech* 182) *entity-pool* (target-pos 0) (the-as region #f))
      )
    (none)
    )
  :code (the-as (function none :behavior drill-mech-master) sleep-code)
  )

(defstate active (drill-mech-master)
  :virtual #t
  :event drill-mech-master-event-handler
  :code (behavior ()
    (set! (-> self state-time) (current-time))
    (until (>= (- (current-time) (-> self state-time)) (seconds 2))
      (suspend)
      )
    (task-node-close! (game-task-node drill-mech-smash-consoles))
    (set! (-> self alarm-sound-id) (sound-play "drill-alarm"))
    (persist-with-delay *setting-control* 'ignore-target (seconds 8) 'ignore-target #t 0.0 0)
    (set-setting! 'music 'danger10 0.0 0)
    (set! (-> self state-time) (current-time))
    (until (>= (- (current-time) (-> self state-time)) (seconds 1))
      (suspend)
      )
    (talker-spawn-func (-> *talker-speech* 183) *entity-pool* (target-pos 0) (the-as region #f))
    (set-setting! 'pilot #f 0.0 0)
    (let ((v1-20 *target*))
      (if v1-20
          (send-event (handle->process (-> v1-20 mech hud 0)) 'hide-and-die)
          )
      )
    (go-virtual hostile)
    (none)
    )
  )

(defstate hostile (drill-mech-master)
  :virtual #t
  :event drill-mech-master-event-handler
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (set-continue! *game-info* "drill-escape" #f)
    (set! (-> self next-warn-time) (+ (current-time) (seconds 1)))
    (set! (-> self started-timer-time) (current-time))
    (set! (-> self exited?) #f)
    (none)
    )
  :trans (behavior ()
    (if (and (-> self exited?) (process-grab? *target* #f))
        (go-virtual victory)
        )
    (let ((gp-0 (the-as int (- (-> self total-countdown-time) (- (current-time) (-> self started-timer-time))))))
      (if (< (the-as time-frame gp-0) 0)
          (set! gp-0 0)
          )
      (set! (-> *game-info* timer) (the-as time-frame gp-0))
      (if (and (>= 3000 gp-0) (zero? (-> self explosion-sound-id)))
          (set! (-> self explosion-sound-id)
                (add-process *gui-control* self (gui-channel background) (gui-action queue) "big-xplo" -99.0 0)
                )
          )
      (if (zero? gp-0)
          (go-virtual failed)
          )
      (when (>= (current-time) (-> self next-warn-time))
        (set! (-> self next-warn-time) (+ (current-time) (seconds 25)))
        (cond
          ((>= 9000 gp-0)
           (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv029" -99.0 0)
           )
          ((>= #x4650 gp-0)
           (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv043" -99.0 0)
           )
          (else
            (add-process *gui-control* self (gui-channel alert) (gui-action play) "cityv027" -99.0 0)
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (set! (-> self hud-timer) (ppointer->handle (process-spawn hud-timer :init hud-init-by-other :to self)))
    (sleep-code)
    (none)
    )
  )

(defstate failed (drill-mech-master)
  :virtual #t
  :event drill-mech-master-event-handler
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (set-setting! 'allow-pause #f 0.0 0)
    (set-setting! 'allow-progress #f 0.0 0)
    (none)
    )
  :exit (behavior ()
    (disable *screen-filter*)
    (remove-setting! 'allow-pause)
    (remove-setting! 'allow-progress)
    (none)
    )
  :trans (behavior ()
    (when (and (not (-> self killed-jak?))
               (>= (- (current-time) (-> self state-time)) (seconds 0.225))
               (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                 (set! (-> a1-0 from) (process->ppointer self))
                 (set! (-> a1-0 num-params) 2)
                 (set! (-> a1-0 message) 'attack-invinc)
                 (set! (-> a1-0 param 0) (the-as uint #f))
                 (let ((v1-8 (new 'static 'attack-info :mask (attack-info-mask mode id))))
                   (let* ((a0-3 *game-info*)
                          (a2-1 (+ (-> a0-3 attack-id) 1))
                          )
                     (set! (-> a0-3 attack-id) a2-1)
                     (set! (-> v1-8 id) a2-1)
                     )
                   (set! (-> v1-8 mode) 'big-explosion)
                   (set! (-> a1-0 param 1) (the-as uint v1-8))
                   )
                 (send-event-function *target* a1-0)
                 )
               )
      (set! (-> self killed-jak?) #t)
      (setup
        *screen-filter*
        (new 'static 'vector :x 255.0 :y 255.0 :z 255.0)
        (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
        (* 5.0 (-> self clock seconds-per-frame))
        (bucket-id tex-all-map)
        )
      )
    (none)
    )
  :code (behavior ()
    (remove-setting! 'music)
    (send-event (handle->process (-> self hud-timer)) 'hide-and-die)
    (sound-stop (-> self alarm-sound-id))
    (sound-play "explo-flash")
    (let ((gp-1 #f))
      (countdown (s5-1 5)
        (let ((s4-0 (new 'stack-no-clear 'matrix)))
          (position-in-front-of-camera! (-> s4-0 trans) (+ 28672.0 (* 20480.0 (the float s5-1))) 0.0)
          (position-in-front-of-camera! (-> s4-0 vector 2) 4096.0 0.0)
          (vector-! (-> s4-0 vector 2) (-> s4-0 vector 2) (-> s4-0 trans))
          (vector-normalize! (-> s4-0 vector 2) 1.0)
          (vector-cross! (the-as vector (-> s4-0 vector)) *up-vector* (-> s4-0 vector 2))
          (vector-normalize! (the-as vector (-> s4-0 vector)) 1.0)
          (vector-cross! (-> s4-0 vector 1) (-> s4-0 vector 2) (the-as vector (-> s4-0 vector)))
          (vector-normalize! (-> s4-0 vector 1) 1.0)
          (set! (-> s4-0 vector 0 w) 0.0)
          (set! (-> s4-0 vector 1 w) 0.0)
          (set! (-> s4-0 vector 2 w) 0.0)
          (set! (-> s4-0 trans w) 1.0)
          (spawn-with-matrix (-> self part-doom) s4-0)
          )
        (set! (-> self state-time) (current-time))
        (until (>= (- (current-time) (-> self state-time)) (seconds 0.2))
          (when (and (not gp-1) (>= 2 s5-1) (= (get-status *gui-control* (-> self explosion-sound-id)) (gui-status ready)))
            (set! gp-1 #t)
            (set-action!
              *gui-control*
              (gui-action play)
              (-> self explosion-sound-id)
              (gui-channel none)
              (gui-action none)
              (the-as string #f)
              (the-as (function gui-connection symbol) #f)
              (the-as process #f)
              )
            )
          (suspend)
          )
        )
      )
    (sleep-code)
    (none)
    )
  )

(defstate victory (drill-mech-master)
  :virtual #t
  :event drill-mech-master-event-handler
  :code (behavior ()
    (local-vars (v1-16 process))
    (remove-setting! 'music)
    (send-event (handle->process (-> self hud-timer)) 'hide-and-die)
    (sound-stop (-> self alarm-sound-id))
    (set! (-> self scene-player-handle)
          (ppointer->handle (process-spawn scene-player :init scene-player-init "drill-top-explode" #t #f))
          )
    (until (not v1-16)
      (suspend)
      (set! v1-16 (handle->process (-> self scene-player-handle)))
      )
    (process-release? *target*)
    (sleep-code)
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior drill-mech-master-init-by-other drill-mech-master ()
  (set! *drill-mech-master* (the-as (pointer drill-mech-master) (process->ppointer self)))
  (set! (-> self exited?) #f)
  (set! (-> self killed-jak?) #f)
  (set! (-> self cpanel-count) 10)
  (set! (-> self hud-cpanel) (the-as handle #f))
  (set! (-> self hud-timer) (the-as handle #f))
  (set! (-> self scene-player-handle) (the-as handle #f))
  (set! (-> self alarm-sound-id) (new 'static 'sound-id))
  (set! (-> self explosion-sound-id) (new 'static 'sound-id))
  (set! (-> self total-countdown-time) (seconds 95))
  (set! (-> self part-doom) (create-launch-control (-> *part-group-id-table* 443) self))
  (dotimes (gp-0 (-> *level* length))
    (let ((v1-9 (-> *level* level gp-0)))
      (when (= (-> v1-9 status) 'active)
        (let ((s5-0 (-> v1-9 bsp actors)))
          (when (nonzero? s5-0)
            (dotimes (s4-0 (-> s5-0 length))
              (let ((s3-0 (-> s5-0 data s4-0 actor)))
                (if (and (type-type? (-> s3-0 etype) drill-control-panel) (logtest? (-> s3-0 kill-mask) (task-mask task6)))
                    (add-icon! *minimap* self (the-as uint 16) (the-as int #f) (the-as vector s3-0) 0)
                    )
                )
              )
            )
          )
        )
      )
    )
  (cond
    ((string= (-> *game-info* last-continue name) "drill-escape")
     (set! (-> self cpanel-count) 0)
     (set! (-> self total-countdown-time) (seconds 75))
     (task-node-close! (game-task-node drill-mech-smash-consoles))
     (set! (-> self alarm-sound-id) (sound-play "drill-alarm"))
     (set-setting! 'music 'danger10 0.0 0)
     (go-virtual hostile)
     )
    (else
      (go-virtual idle)
      )
    )
  (none)
  )

(set-subtask-hook!
  *game-info*
  (game-task-node drill-mech-started-smashing)
  TASK_MANAGER_EVENT_HOOK
  (lambda :behavior task-manager
    ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (case arg2
      (('hud-cpanel)
       (let ((v1-1 (new 'stack-no-clear 'event-message-block)))
         (set! (-> v1-1 from) (process->ppointer arg0))
         (set! (-> v1-1 num-params) arg1)
         (set! (-> v1-1 message) arg2)
         (set! (-> v1-1 param 0) (-> arg3 param 0))
         (set! (-> v1-1 param 1) (-> arg3 param 1))
         (set! (-> v1-1 param 2) (-> arg3 param 2))
         (set! (-> v1-1 param 3) (-> arg3 param 3))
         (set! (-> v1-1 param 4) (-> arg3 param 4))
         (set! (-> v1-1 param 5) (-> arg3 param 5))
         (send-event-function (handle->process (-> self slave 0)) v1-1)
         )
       )
      )
    )
  )

(set-subtask-hook!
  *game-info*
  (game-task-node drill-mech-started-smashing)
  TASK_MANAGER_INIT_HOOK
  (lambda :behavior task-manager () (let ((v0-3 (ppointer->handle (process-spawn drill-mech-master :to self))))
                                      (set! (-> self slave 0) (the-as handle v0-3))
                                      (the-as object v0-3)
                                      )
                                 )
  )
