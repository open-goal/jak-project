;;-*-Lisp-*-
(in-package goal)

;; name: squid-states.gc
;; name in dgo: squid-states
;; dgos: PALBOSS

;; DECOMP BEGINS

(defbehavior squid-talker squid ((arg0 symbol))
  (case arg0
    (('damaged)
     (let* ((f30-0 0.2)
            (v1-3 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-4 (the-as number (logior #x3f800000 v1-3)))
            )
       (if (< f30-0 (+ -1.0 (the-as float v1-4)))
           (return (the-as int #f))
           )
       )
     (let ((v1-8 (rand-vu-int-count 4)))
       (if (>= v1-8 (-> self last-damaged-talker))
           (+! v1-8 1)
           )
       (set! (-> self last-damaged-talker) v1-8)
       (cond
         ((zero? v1-8)
          (talker-spawn-func (-> *talker-speech* 229) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-8 1)
          (talker-spawn-func (-> *talker-speech* 230) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-8 2)
          (talker-spawn-func (-> *talker-speech* 231) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-8 3)
          (talker-spawn-func (-> *talker-speech* 233) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-8 4)
          (talker-spawn-func (-> *talker-speech* 238) *entity-pool* (target-pos 0) (the-as region #f))
          )
         )
       )
     )
    (('shield-hit)
     (let* ((f30-1 0.15)
            (v1-22 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-23 (the-as number (logior #x3f800000 v1-22)))
            )
       (if (< f30-1 (+ -1.0 (the-as float v1-23)))
           (return (the-as int #f))
           )
       )
     (let ((v1-27 (rand-vu-int-count 3)))
       (if (>= v1-27 (-> self last-shield-hit-talker))
           (+! v1-27 1)
           )
       (set! (-> self last-shield-hit-talker) v1-27)
       (cond
         ((zero? v1-27)
          (talker-spawn-func (-> *talker-speech* 209) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-27 1)
          (talker-spawn-func (-> *talker-speech* 205) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-27 2)
          (talker-spawn-func (-> *talker-speech* 207) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-27 3)
          (talker-spawn-func (-> *talker-speech* 208) *entity-pool* (target-pos 0) (the-as region #f))
          )
         )
       )
     )
    (('start-recharging)
     (let* ((f30-2 0.05)
            (v1-39 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-40 (the-as number (logior #x3f800000 v1-39)))
            )
       (if (and (< f30-2 (+ -1.0 (the-as float v1-40))) (!= (-> self last-start-recharging-talker) -1))
           (return (the-as int #f))
           )
       )
     (set! (-> self last-start-recharging-talker) 0)
     (talker-spawn-func (-> *talker-speech* 228) *entity-pool* (target-pos 0) (the-as region #f))
     )
    (('done-recharging)
     (let* ((f30-3 0.05)
            (v1-51 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-52 (the-as number (logior #x3f800000 v1-51)))
            )
       (when (or (< f30-3 (+ -1.0 (the-as float v1-52))) (= (-> self last-done-recharging-talker) -1))
         (set! (-> self last-done-recharging-talker) 0)
         (return (the-as int #f))
         )
       )
     (talker-spawn-func (-> *talker-speech* 224) *entity-pool* (target-pos 0) (the-as region #f))
     )
    (('shooting)
     (let* ((f30-4 0.1)
            (v1-63 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-64 (the-as number (logior #x3f800000 v1-63)))
            )
       (if (< f30-4 (+ -1.0 (the-as float v1-64)))
           (return (the-as int #f))
           )
       )
     (let ((v1-68 (rand-vu-int-count 4)))
       (if (>= v1-68 (-> self last-shooting-talker))
           (+! v1-68 1)
           )
       (set! (-> self last-shooting-talker) v1-68)
       (cond
         ((zero? v1-68)
          (talker-spawn-func (-> *talker-speech* 225) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-68 1)
          (talker-spawn-func (-> *talker-speech* 215) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-68 2)
          (talker-spawn-func (-> *talker-speech* 218) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-68 3)
          (talker-spawn-func (-> *talker-speech* 232) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-68 4)
          (talker-spawn-func (-> *talker-speech* 240) *entity-pool* (target-pos 0) (the-as region #f))
          )
         )
       )
     )
    (('headbutting)
     (let* ((f30-5 0.2)
            (v1-82 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-83 (the-as number (logior #x3f800000 v1-82)))
            )
       (if (< f30-5 (+ -1.0 (the-as float v1-83)))
           (return (the-as int #f))
           )
       )
     (let ((v1-87 (rand-vu-int-count 9)))
       (if (>= v1-87 (-> self last-headbutting-talker))
           (+! v1-87 1)
           )
       (set! (-> self last-headbutting-talker) v1-87)
       (cond
         ((zero? v1-87)
          (talker-spawn-func (-> *talker-speech* 212) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 1)
          (talker-spawn-func (-> *talker-speech* 214) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 2)
          (talker-spawn-func (-> *talker-speech* 217) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 3)
          (talker-spawn-func (-> *talker-speech* 219) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 4)
          (talker-spawn-func (-> *talker-speech* 223) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 5)
          (talker-spawn-func (-> *talker-speech* 216) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 6)
          (talker-spawn-func (-> *talker-speech* 227) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 7)
          (talker-spawn-func (-> *talker-speech* 232) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 8)
          (talker-spawn-func (-> *talker-speech* 240) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-87 9)
          (talker-spawn-func (-> *talker-speech* 237) *entity-pool* (target-pos 0) (the-as region #f))
          )
         )
       )
     )
    (('general)
     (let* ((f30-6 0.0002)
            (v1-112 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
            (v1-113 (the-as number (logior #x3f800000 v1-112)))
            )
       (if (< f30-6 (+ -1.0 (the-as float v1-113)))
           (return (the-as int #f))
           )
       )
     (let ((v1-117 (rand-vu-int-count 7)))
       (if (>= v1-117 (-> self last-general-talker))
           (+! v1-117 1)
           )
       (set! (-> self last-general-talker) v1-117)
       (cond
         ((zero? v1-117)
          (talker-spawn-func (-> *talker-speech* 210) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 1)
          (talker-spawn-func (-> *talker-speech* 211) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 2)
          (talker-spawn-func (-> *talker-speech* 213) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 3)
          (talker-spawn-func (-> *talker-speech* 220) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 4)
          (talker-spawn-func (-> *talker-speech* 222) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 5)
          (talker-spawn-func (-> *talker-speech* 226) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 6)
          (talker-spawn-func (-> *talker-speech* 235) *entity-pool* (target-pos 0) (the-as region #f))
          )
         ((= v1-117 7)
          (talker-spawn-func (-> *talker-speech* 239) *entity-pool* (target-pos 0) (the-as region #f))
          )
         )
       )
     )
    )
  0
  )

(defstate test (squid)
  :virtual #t
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (none)
    )
  :trans (behavior ()
    (ja :num! (loop!))
    (when (>= (- (current-time) (-> self state-time)) (seconds 2))
      (set! (-> self driver-blend target) (- 1.0 (-> self driver-blend target)))
      (set! (-> self state-time) (current-time))
      )
    (debug-draw (-> self first-path))
    (debug-draw (-> self second-path))
    (debug-draw (-> self third-path))
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(define *squid-first-pole* (new 'static 'vector :x 1087078.4 :y 1725235.2 :z 2165145.5))

(define *squid-second-pole* (new 'static 'vector :x 1257472.0 :y 1725644.8 :z 2468249.5))

;; WARN: Check prologue - tricky store of r0
;; WARN: Return type mismatch symbol vs none.
(defbehavior go-through-wall squid ()
  (local-vars (sv-16 res-tag))
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-1 (res-lump-data (-> self entity) 'actor-groups (pointer actor-group) :tag-ptr (& sv-16))))
    (when (and v1-1 (< (the-as uint (-> self stage)) (-> sv-16 elt-count)))
      (let ((gp-0 (-> v1-1 (-> self stage))))
        (dotimes (s5-0 (-> gp-0 length))
          (let ((v1-3 s5-0))
            (cond
              ((zero? v1-3)
               (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
                 (set! (-> a1-5 from) (process->ppointer self))
                 (set! (-> a1-5 num-params) 0)
                 (set! (-> a1-5 message) 'shutdown)
                 (let ((t9-1 send-event-function)
                       (v1-8 (-> gp-0 data s5-0 actor))
                       )
                   (t9-1
                     (if v1-8
                         (-> v1-8 extra process)
                         )
                     a1-5
                     )
                   )
                 )
               )
              ((= v1-3 3)
               (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
                 (set! (-> a1-6 from) (process->ppointer self))
                 (set! (-> a1-6 num-params) 0)
                 (set! (-> a1-6 message) 'trigger)
                 (let ((t9-2 send-event-function)
                       (v1-15 (-> gp-0 data s5-0 actor))
                       )
                   (t9-2
                     (if v1-15
                         (-> v1-15 extra process)
                         )
                     a1-6
                     )
                   )
                 )
               )
              (else
                (let ((a1-7 (new 'stack-no-clear 'event-message-block)))
                  (set! (-> a1-7 from) (process->ppointer self))
                  (set! (-> a1-7 num-params) 0)
                  (set! (-> a1-7 message) 'stop)
                  (let ((t9-3 send-event-function)
                        (v1-22 (-> gp-0 data s5-0 actor))
                        )
                    (t9-3
                      (if v1-22
                          (-> v1-22 extra process)
                          )
                      a1-7
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  (set! (-> self gate-intact) #f)
  (none)
  )

(defstate beaten (squid)
  :virtual #t
  :enter (behavior ()
    (ja-channel-set! 0)
    (ja-post)
    (dotimes (gp-0 6)
      (let ((a0-2 (handle->process (-> self tentacles gp-0))))
        (if a0-2
            (deactivate a0-2)
            )
        )
      )
    (dotimes (gp-1 3)
      (set! (-> self stage) gp-1)
      (go-through-wall)
      )
    (send-event (handle->process (-> self hud)) 'hide-and-die)
    (set! (-> self hud) (the-as handle #f))
    (when (-> self jet-sound-playing)
      (sound-stop (-> self jet-sound))
      (set! (-> self jet-sound-playing) #f)
      )
    (when (-> self tentacle-sound-playing)
      (sound-stop (-> self tentacle-sound))
      (set! (-> self tentacle-sound-playing) #f)
      )
    (remove-setting! 'point-of-interest)
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  )

(defstate wait-around-corner (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (remove-setting! 'point-of-interest)
    (none)
    )
  :trans (behavior ()
    (let ((v1-1 (squid-method-42 self (new 'stack-no-clear 'vector))))
      (when (< 2560000.0 (-> v1-1 z))
        (vector-reset! (-> self residual-velocity))
        (set! (-> self stage-2-go-status) 2)
        (go-virtual fire-whirlwind)
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  )

(defstate wait-beside-building (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (remove-setting! 'point-of-interest)
    (none)
    )
  :trans (behavior ()
    (vector-reset! (-> self residual-velocity))
    (if (>= (-> self max-plane) 8)
        (go-virtual fly-to-post)
        )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  )

(defstate flee (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (set! (-> self can-play-squid-boost) #f)
    (set! (-> self invincible-timer) 0)
    (let ((v1-0 (-> self stage)))
      (cond
        ((zero? v1-0)
         (let ((gp-1 (vector+!
                       (new 'stack-no-clear 'vector)
                       (-> self entity trans)
                       (new 'static 'vector :x 131072.0 :y -3235.84 :z 225280.0)
                       )
                     )
               )
           (deactivate (-> self collision-actor 0))
           (set! (-> self collision-actor) (process-spawn squid-collision gp-1 1 :to self))
           )
         )
        ((= v1-0 1)
         (let ((gp-3 (vector+!
                       (new 'stack-no-clear 'vector)
                       (-> self entity trans)
                       (new 'static 'vector :x 135168.0 :y -655.36 :z 217088.0)
                       )
                     )
               )
           (deactivate (-> self collision-actor 0))
           (set! (-> self collision-actor) (process-spawn squid-collision gp-3 2 :to self))
           )
         )
        (else
          (process-spawn scene-player :init scene-player-init "palace-boss-res" #t #f)
          (remove-setting! 'music)
          (go-virtual beaten)
          )
        )
      )
    (let ((a3-6 (new 'stack-no-clear 'vector)))
      (set! (-> a3-6 quad) (-> self nav state mesh bounds quad))
      (set! (-> a3-6 y) (+ 16384.0 (-> a3-6 y)))
      (set-traj-towards-vec self (-> self trans) (-> self trans) a3-6)
      )
    (set! (-> self gate-intact) #t)
    (set! (-> self force-onto-mesh) #f)
    (none)
    )
  :exit (behavior ()
    (set! (-> self hit-points) 10)
    (set! (-> self stage) (min 2 (+ (-> self stage) 1)))
    (change-to (nav-mesh-from-res-tag (-> self entity) 'nav-mesh-actor (-> self stage)) self)
    (set! (-> self current-nav-poly) #f)
    (none)
    )
  :trans (behavior ()
    (ja :num! (loop!))
    (let* ((f0-1 (squid-method-48 self))
           (f30-0 (float-sin-clamp self f0-1))
           )
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (let ((v1-8 (-> self stage)))
          (cond
            ((zero? v1-8)
             (get-point-at-percent-along-path! (-> self first-path) gp-0 f30-0 'interp)
             (if (and (-> self gate-intact)
                      (< (+ -2895.872 (-> *squid-first-pole* x)) (-> self root-override trans x))
                      (< (+ -2895.872 (-> *squid-first-pole* z)) (-> self root-override trans z))
                      )
                 (go-through-wall)
                 )
             )
            ((= v1-8 1)
             (get-point-at-percent-along-path! (-> self second-path) gp-0 f30-0 'interp)
             (if (and (-> self gate-intact) (< (+ -4096.0 (-> *squid-second-pole* z)) (-> self root-override trans z)))
                 (go-through-wall)
                 )
             )
            (else
              (get-point-at-percent-along-path! (-> self first-path) gp-0 f30-0 'interp)
              )
            )
          )
        (set! (-> self trans quad) (-> gp-0 quad))
        )
      (when (>= f30-0 1.0)
        (let ((v1-35 (-> self stage)))
          (cond
            ((zero? v1-35)
             (go-virtual wait-beside-building)
             )
            ((= v1-35 1)
             (go-virtual wait-around-corner)
             )
            (else
              (vector-reset! (-> self residual-velocity))
              (go-virtual fly-to-shoot-spot)
              )
            )
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate pre-flee (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (set! (-> self traj-timer) (+ (current-time) (the int (* 300.0 (rand-vu-float-range 0.25 0.5)))))
    (set! (-> self traj initial-position quad) (-> self trans quad))
    (let ((v1-7 (-> self stage)))
      (cond
        ((zero? v1-7)
         (get-point-at-percent-along-path! (-> self first-path) (-> self traj-dest) 0.0 'interp)
         )
        ((= v1-7 1)
         (get-point-at-percent-along-path! (-> self second-path) (-> self traj-dest) 0.0 'interp)
         )
        (else
          (set-setting! 'music #f 0.0 0)
          (process-grab? *target* #f)
          (get-point-at-percent-along-path! (-> self third-path) (-> self traj-dest) 0.0 'interp)
          (send-event (handle->process (-> self hud)) 'hide-and-die)
          )
        )
      )
    (set! (-> self tentacle-base-rotation-speed target) 1.0)
    (ja-channel-push! 1 (seconds 0.2))
    (ja :group! (-> self draw art-group data 36) :num! min)
    (none)
    )
  :exit (behavior ()
    (process-release? *target*)
    (set! (-> self tentacle-base-rotation-speed target) 0.0)
    (when (-> self spin-sound-playing)
      (sound-stop (-> self spin-sound))
      (set! (-> self spin-sound-playing) #f)
      )
    (none)
    )
  :trans (behavior ()
    (local-vars
      (sv-80 symbol)
      (sv-96 symbol)
      (sv-112 vector)
      (sv-128 matrix)
      (sv-144 symbol)
      (sv-160 symbol)
      (sv-176 vector)
      (sv-192 matrix)
      (sv-208 symbol)
      (sv-224 symbol)
      (sv-240 vector)
      (sv-256 matrix)
      )
    (quaternion-rotate-y! (-> self quat) (-> self quat) 5461.3335)
    (vector-lerp!
      (-> self trans)
      (the-as vector (-> self traj))
      (-> self traj-dest)
      (parameter-ease-sqr-clamp (* 0.0011111111 (the float (- (current-time) (-> self state-time)))))
      )
    (if (>= (- (current-time) (-> self state-time)) (seconds 3))
        (go-virtual flee)
        )
    (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 55)))
    (when (>= (- (current-time) (-> self traj-timer)) 0)
      (sound-play "squid-explosion")
      (set! (-> self traj-timer) (+ (current-time) (the int (* 300.0 (rand-vu-float-range 0.25 0.5)))))
      (cond
        ((zero? (-> self stage))
         (setup-masks (-> self draw) 320 160)
         (let ((gp-4 (get-process *default-dead-pool* part-tracker #x4000)))
           (when gp-4
             (let ((t9-11 (method-of-type part-tracker activate)))
               (t9-11 (the-as part-tracker gp-4) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
               )
             (let ((s5-3 run-function-in-process)
                   (s4-1 gp-4)
                   (s3-1 part-tracker-init)
                   (s2-0 (-> *part-group-id-table* 1123))
                   (s1-0 0)
                   (s0-0 #f)
                   )
               (set! sv-80 (the-as symbol #f))
               (set! sv-96 (the-as symbol #f))
               (set! sv-128 *launch-matrix*)
               (set! sv-112 (-> sv-128 trans))
               (let ((v1-33 (-> (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 43)) quad)))
                 (set! (-> sv-112 quad) v1-33)
                 )
               ((the-as (function object object object object object object object object none) s5-3)
                s4-1
                s3-1
                s2-0
                s1-0
                s0-0
                sv-80
                sv-96
                sv-128
                )
               )
             (-> gp-4 ppointer)
             )
           )
         )
        ((= (-> self stage) 1)
         (setup-masks (-> self draw) 5120 2590)
         (let ((gp-5 (get-process *default-dead-pool* part-tracker #x4000)))
           (when gp-5
             (let ((t9-16 (method-of-type part-tracker activate)))
               (t9-16 (the-as part-tracker gp-5) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
               )
             (let ((s5-4 run-function-in-process)
                   (s4-2 gp-5)
                   (s3-2 part-tracker-init)
                   (s2-1 (-> *part-group-id-table* 1123))
                   (s1-1 0)
                   (s0-1 #f)
                   )
               (set! sv-144 (the-as symbol #f))
               (set! sv-160 (the-as symbol #f))
               (set! sv-192 *launch-matrix*)
               (set! sv-176 (-> sv-192 trans))
               (let ((v1-47 (-> (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 55)) quad)))
                 (set! (-> sv-176 quad) v1-47)
                 )
               ((the-as (function object object object object object object object object none) s5-4)
                s4-2
                s3-2
                s2-1
                s1-1
                s0-1
                sv-144
                sv-160
                sv-192
                )
               )
             (-> gp-5 ppointer)
             )
           )
         )
        (else
          (let ((gp-6 (get-process *default-dead-pool* part-tracker #x4000)))
            (when gp-6
              (let ((t9-20 (method-of-type part-tracker activate)))
                (t9-20 (the-as part-tracker gp-6) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
                )
              (let ((s5-5 run-function-in-process)
                    (s4-3 gp-6)
                    (s3-3 part-tracker-init)
                    (s2-2 (-> *part-group-id-table* 1123))
                    (s1-2 0)
                    (s0-2 #f)
                    )
                (set! sv-208 (the-as symbol #f))
                (set! sv-224 (the-as symbol #f))
                (set! sv-256 *launch-matrix*)
                (set! sv-240 (-> sv-256 trans))
                (let ((v1-59 (-> (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 55)) quad)))
                  (set! (-> sv-240 quad) v1-59)
                  )
                ((the-as (function object object object object object object object object none) s5-5)
                 s4-3
                 s3-3
                 s2-2
                 s1-2
                 s0-2
                 sv-208
                 sv-224
                 sv-256
                 )
                )
              (-> gp-6 ppointer)
              )
            )
          )
        )
      )
    (sound-play "squid-spin" :id (-> self spin-sound) :position (-> self root-override trans))
    (set! (-> self spin-sound-playing) #t)
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate recharge (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (squid-talker 'start-recharging)
    (set! (-> self state-time) (current-time))
    (set! (-> self invincible-timer) 0)
    (setup-masks (-> self draw) 8192 0)
    (logior! (-> self draw status) (draw-control-status warp-cross-fade))
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-anim 47)
      )
    (set! (-> self driver-blend target) 0.0)
    (ja-channel-push! 1 (seconds 0.5))
    (ja :group! (-> self draw art-group data 33) :num! min)
    (none)
    )
  :exit (behavior ()
    (squid-talker 'done-recharging)
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-anim 45)
      )
    (none)
    )
  :trans (behavior ()
    (if (and (zero? (-> self hit-points))
             (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
             )
        (go-virtual pre-flee)
        )
    (let ((v1-10 (ja-group)))
      (cond
        ((and v1-10 (= v1-10 (-> self draw art-group data 34)))
         (ja :num! (seek!))
         (when (ja-done? 0)
           (vector-reset! (-> self residual-velocity))
           (go-virtual fly-to-shoot-spot)
           )
         )
        ((>= (- (current-time) (-> self state-time)) (seconds 2))
         (set! (-> self driver-blend target) 1.0)
         (ja-channel-push! 1 (seconds 0.1))
         (ja :group! (-> self draw art-group data 34) :num! min)
         )
        ((let ((v1-37 (ja-group)))
           (and v1-37 (= v1-37 (-> self draw art-group data 35)))
           )
         (ja :num! (seek!))
         (when (ja-done? 0)
           (ja-channel-push! 1 (seconds 0.25))
           (ja :group! (-> self draw art-group data 35) :num! min)
           )
         )
        (else
          (ja :num! (seek!))
          (if (ja-done? 0)
              (ja :group! (-> self draw art-group data 35) :num! min)
              )
          )
        )
      )
    (set! (-> self shield-hit-points) 1.0)
    (let ((v1-70 (handle->process (-> self hud))))
      (if v1-70
          (set! (-> (the-as hud-squid v1-70) values 2 target)
                (min 100 (/ (* 100 (- (current-time) (-> self state-time))) 600))
                )
          )
      )
    (let ((gp-3 (new 'stack-no-clear 'vector)))
      (let ((f30-0 (* 16384.0 (fmin 1.0 (* 0.0016666667 (the float (- (current-time) (-> self state-time))))))))
        (let* ((f0-16 (* 164.25063 (the float (- (current-time) (-> self state-time)))))
               (f0-19 (lerp-scale 70.0 120.0 (fabs (cos f0-16)) 1.0 0.0))
               )
          (set! (-> self draw force-fade)
                (the-as uint (the int (lerp-scale 128.0 f0-19 (the float (- (current-time) (-> self state-time))) 0.0 37.5)))
                )
          )
        (set! (-> self shield-timer)
              (- (current-time)
                 (the-as time-frame (the int (lerp-scale 0.0 600.0 (the float (-> self draw force-fade)) 0.0 128.0)))
                 )
              )
        (set! (-> gp-3 x) (fabs (cos f30-0)))
        (set! (-> gp-3 y) (fabs (sin f30-0)))
        )
      (set! (-> gp-3 z) 0.0)
      (set! (-> gp-3 w) 1.0)
      (set-shield-color! gp-3)
      (set! (-> self shield-color quad) (-> gp-3 quad))
      (vector-float*! gp-3 gp-3 0.5)
      (set-shield-flash! gp-3)
      (set! (-> gp-3 w) 1.0)
      )
    (dotimes (gp-4 6)
      (send-event (handle->process (-> self tentacles gp-4)) 'set-fade (-> self draw force-fade))
      (when (< (- (current-time) (-> self state-time)) (seconds 2))
        (case (-> self stage)
          ((1)
           (send-event (handle->process (-> self tentacles gp-4)) 'wrap *squid-second-pole*)
           )
          (else
            (send-event (handle->process (-> self tentacles gp-4)) 'wrap *squid-first-pole*)
            )
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

;; WARN: Return type mismatch number vs none.
(defbehavior squid-adjust-fly-anim squid ()
  (let ((v1-2 (ja-group)))
    (cond
      ((and v1-2 (= v1-2 (-> self draw art-group data 21)))
       (ja :num! (seek!))
       (if (>= 5.0 (ja-frame-num 0))
           (set! (-> self allowed-rotate-to-vector-angle) 0.0)
           )
       (when (or (ja-done? 0) (< -364.0889 (-> self desired-rotate-to-vector-angle)))
         (ja-channel-push! 1 (seconds 0.1))
         (ja :group! (-> self draw art-group data 23)
             :num! (identity (the float (max 0 (- 20 (the int (ja-aframe-num 0))))))
             )
         )
       )
      ((let ((v1-26 (ja-group)))
         (and (and v1-26 (= v1-26 (-> self draw art-group data 23))) (< (-> self desired-rotate-to-vector-angle) 0.0))
         )
       (ja :num! (seek!))
       (if (ja-done? 0)
           (ja :group! (-> self draw art-group data 3) :num! min)
           )
       )
      ((let ((v1-44 (ja-group)))
         (and v1-44 (= v1-44 (-> self draw art-group data 24)))
         )
       (ja :num! (seek!))
       (if (>= 5.0 (ja-frame-num 0))
           (set! (-> self allowed-rotate-to-vector-angle) 0.0)
           )
       (when (or (ja-done? 0) (< (-> self desired-rotate-to-vector-angle) 364.0889))
         (ja-channel-push! 1 (seconds 0.1))
         (ja :group! (-> self draw art-group data 26)
             :num! (identity (the float (max 0 (- 105 (the int (ja-aframe-num 0))))))
             )
         )
       )
      (else
        (let ((v1-68 (ja-group)))
          (cond
            ((and (and v1-68 (= v1-68 (-> self draw art-group data 26))) (< 0.0 (-> self desired-rotate-to-vector-angle)))
             (ja :num! (seek!))
             (if (ja-done? 0)
                 (ja :group! (-> self draw art-group data 3) :num! min)
                 )
             )
            ((< (-> self desired-rotate-to-vector-angle) -910.2222)
             (set! (-> self allowed-rotate-to-vector-angle) 0.0)
             (ja-channel-push! 1 (seconds 0.2))
             (ja :group! (-> self draw art-group data 21) :num! min)
             (set! (-> self jet-volume) (the-as int (current-time)))
             (set! (-> self jet-pitch) (the-as int (current-time)))
             (set! (-> self negate-jet-pitch) #f)
             )
            ((< 910.2222 (-> self desired-rotate-to-vector-angle))
             (set! (-> self allowed-rotate-to-vector-angle) 0.0)
             (ja-channel-push! 1 (seconds 0.2))
             (ja :group! (-> self draw art-group data 24) :num! min)
             (set! (-> self jet-volume) (the-as int (current-time)))
             (set! (-> self jet-pitch) (the-as int (current-time)))
             (set! (-> self negate-jet-pitch) #f)
             )
            ((let ((v1-106 (ja-group)))
               (and v1-106 (= v1-106 (-> self draw art-group data 3)))
               )
             (ja :num! (loop!))
             )
            (else
              (ja :num! (seek!))
              (when (ja-done? 0)
                (ja-channel-push! 1 (seconds 0.2))
                (ja :group! (-> self draw art-group data 3) :num! min)
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

(defstate fly-to-post (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (squid-talker 'no-energy)
    (set! (-> self can-play-squid-boost) #t)
    (case (-> self stage)
      ((1)
       (set-traj-towards-vec self (-> self trans) (-> self trans) *squid-second-pole*)
       )
      (else
        (set-traj-towards-vec self (-> self trans) (-> self trans) *squid-first-pole*)
        )
      )
    (none)
    )
  :trans (behavior ()
    (if (and (zero? (-> self hit-points))
             (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
             )
        (go-virtual pre-flee)
        )
    (squid-adjust-fly-anim)
    (let ((f0-0 (float-sin-clamp self (squid-method-48 self))))
      (if (< 0.5 f0-0)
          (set! (-> self force-onto-mesh) #f)
          )
      (if (>= f0-0 1.0)
          (go-virtual recharge)
          )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate headbut (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (squid-talker 'headbutting)
    (set! (-> self state-time) (current-time))
    (set! (-> self traj-timer) (current-time))
    (vector-reset! (-> self residual-velocity))
    (set! (-> self can-play-squid-boost) #t)
    (none)
    )
  :exit (behavior ()
    (sound-play "squid-rush-end")
    (set! (-> self rush-end-time) (current-time))
    (let ((v1-5 (ja-group)))
      (when (and v1-5 (= v1-5 (-> self draw art-group data 5)))
        (ja-channel-push! 1 (seconds 0.05))
        (ja :group! (-> self draw art-group data 6) :num! min)
        (sound-play "sqd-shield-down")
        (set! (-> self jet-volume) (the-as int (current-time)))
        (set! (-> self jet-pitch) (the-as int (current-time)))
        (set! (-> self negate-jet-pitch) #t)
        )
      )
    (none)
    )
  :trans (behavior ()
    (if (and (zero? (-> self hit-points))
             (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
             )
        (go-virtual pre-flee)
        )
    (if (>= (- (current-time) (-> self state-time)) (seconds 3))
        (go-virtual fly-to-shoot-spot)
        )
    (let ((v1-17 (ja-group)))
      (cond
        ((and v1-17 (= v1-17 (-> self draw art-group data 4)))
         (ja :num! (seek!))
         (when (and (-> self can-play-squid-boost) (< 30.0 (ja-aframe-num 0)))
           (sound-play "squid-boost")
           (set! (-> self can-play-squid-boost) #f)
           (set! (-> self jet-volume) (the-as int (current-time)))
           (set! (-> self jet-pitch) (the-as int (current-time)))
           (set! (-> self negate-jet-pitch) #f)
           (set! (-> self rush-sound-playing) #t)
           (set! (-> self rush-end-time) 0)
           0
           )
         (if (ja-done? 0)
             (ja :group! (-> self draw art-group data 5) :num! min)
             )
         (if (< (ja-aframe-num 0) 20.0)
             (squid-method-42 self (-> self traj-dest))
             )
         (set! (-> self state-time) (current-time))
         )
        (else
          (let ((v1-53 (ja-group)))
            (cond
              ((and v1-53 (= v1-53 (-> self draw art-group data 5)))
               (ja :num! (loop!))
               )
              (else
                (ja-channel-push! 1 (seconds 0.1))
                (ja :group! (-> self draw art-group data 4) :num! min)
                )
              )
            )
          )
        )
      )
    (squid-method-43 self (-> self traj-dest) 22.755556 0.75)
    (let ((gp-3 (new 'stack-no-clear 'vector))
          (s3-0 (new 'stack-no-clear 'vector))
          (s4-0 (new 'stack-no-clear 'vector))
          (s5-1 (new 'stack-no-clear 'vector))
          (s2-0 (new 'stack 'clamp-travel-vector-to-mesh-return-info))
          )
      (if (and (>= (- (current-time) (-> self state-time)) (seconds 0.017))
               (let ((f0-8 (vector-vector-xz-distance-squared (-> self traj-dest) (-> self trans)))
                     (f1-1 8192.0)
                     )
                 (< f0-8 (* f1-1 f1-1))
                 )
               )
          (go-virtual fly-to-shoot-spot)
          )
      (when (and (>= (- (current-time) (-> self state-time)) (seconds 0.017)) (-> self mesh-forced))
        (vector-reset! (-> self residual-velocity))
        (go-virtual fly-to-shoot-spot)
        )
      (let ((v1-89 (ja-group)))
        (when (and v1-89 (or (= v1-89 (-> self draw art-group data 4)) (= v1-89 (-> self draw art-group data 5))))
          (set! (-> gp-3 quad) (-> self traj-dest quad))
          (set! (-> s3-0 quad) (-> self traj-dest quad))
          (clamp-vector-to-mesh-cross-gaps (-> self nav) gp-3 (-> self current-nav-poly) s3-0 409600.0 #f s2-0)
          (set! (-> self residual-velocity quad) (-> self trans quad))
          (let ((f30-1 (lerp-scale 0.01 1.0 (+ -375.0 (the float (- (current-time) (-> self traj-timer)))) 0.0 150.0)))
            (set! (-> gp-3 y) (-> self trans y))
            (vector-seek-3d-smooth! (-> self trans) gp-3 (* 4096.0 f30-1) 0.5)
            (set! (-> gp-3 quad) (-> self trans quad))
            (set! (-> self current-nav-poly)
                  (cloest-point-on-mesh (-> self nav) gp-3 (-> self trans) (-> self current-nav-poly))
                  )
            (let ((s2-1 (-> self nav))
                  (a1-15 (-> self current-nav-poly))
                  (s3-1 s5-1)
                  )
              (let ((v1-105 gp-3))
                (project-point-onto-plane-of-poly-local
                  (-> s2-1 state mesh)
                  a1-15
                  s3-1
                  s4-0
                  (vector-! (new 'stack-no-clear 'vector) v1-105 (-> s2-1 state mesh bounds))
                  )
                )
              (vector+! s3-1 s3-1 (-> s2-1 state mesh bounds))
              )
            0
            (set! (-> s5-1 y) (+ 20480.0 (-> s5-1 y)))
            (set! (-> self trans y) (lerp (-> self trans y) (-> s5-1 y) (* 0.4 f30-1)))
            )
          (set! (-> self trans y) (fmax (-> self trans y) (fmin (-> s5-1 y) (-> gp-3 y))))
          (vector-! (-> self residual-velocity) (-> self trans) (-> self residual-velocity))
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

;; WARN: Return type mismatch int vs time-frame.
(defbehavior squid-whirlwind-time squid ()
  (the-as time-frame (cond
                       ((>= 0.4 (-> self suck))
                        900
                        )
                       ((>= 0.7 (-> self suck))
                        780
                        )
                       (else
                         570
                         )
                       )
          )
  )

(defstate fire-whirlwind (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (squid-talker 'shooting)
    (set! (-> self state-time) (current-time))
    (set! (-> self stop-shooting) #f)
    (set! (-> self traj-timer) 0)
    (set! (-> self tentacle-base-rotation-speed target) 1.0)
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-stretch-vel #x3f428f5c)
      )
    (none)
    )
  :exit (behavior ()
    (set! (-> self tentacle-base-rotation-speed target) 0.0)
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-stretch-vel #x3f333333)
      )
    (none)
    )
  :trans (behavior ()
    (if (and (zero? (-> self hit-points))
             (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
             )
        (go-virtual pre-flee)
        )
    (let ((v1-10 (ja-group)))
      (cond
        ((not (and v1-10 (= v1-10 (-> self draw art-group data 3))))
         (ja-channel-push! 1 (seconds 0.2))
         (ja :group! (-> self draw art-group data 3) :num! min)
         )
        (else
          (ja :num! (loop!))
          )
        )
      )
    (squid-method-43 self (squid-method-42 self (new 'stack-no-clear 'vector)) 9.102222 0.75)
    (when (or (>= (- (current-time) (-> self state-time)) (squid-whirlwind-time)) (-> self stop-shooting))
      (vector-reset! (-> self residual-velocity))
      (go-virtual fly-to-shoot-spot)
      )
    (when (>= (- (current-time) (-> self traj-timer)) (seconds 0.7))
      (spawn-whirlwind self)
      (set! (-> self traj-timer) (current-time))
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defbehavior setup-grenade squid ((arg0 int))
  (let ((s5-0 (squid-method-42 self (new 'stack-no-clear 'vector)))
        (f28-0 (rand-vu-float-range 0.0 3276.8))
        (f30-0 (rand-vu-float-range 8192.0 24576.0))
        (gp-0 (-> self grenade arg0))
        )
    (let ((f28-1 (+ f28-0 (* 6553.6 (the float arg0)))))
      (set! (-> gp-0 target-position quad) (-> s5-0 quad))
      (set-vector! (-> gp-0 target-position) (sin f28-1) 0.0 (cos f28-1) 1.0)
      )
    (vector+float*! s5-0 s5-0 (-> gp-0 target-position) f30-0)
    (set! (-> s5-0 y) (-> self nav state mesh bounds y))
    (set! (-> gp-0 target-position quad) (-> s5-0 quad))
    (let ((a1-5 (cloest-point-on-mesh (-> self nav) s5-0 s5-0 (the-as nav-poly #f)))
          (a3-1 (new 'stack-no-clear 'vector))
          (s3-0 (-> self nav))
          (s4-2 s5-0)
          )
      (let ((v1-13 s5-0))
        (project-point-onto-plane-of-poly-local
          (-> s3-0 state mesh)
          a1-5
          s4-2
          a3-1
          (vector-! (new 'stack-no-clear 'vector) v1-13 (-> s3-0 state mesh bounds))
          )
        )
      (vector+! s4-2 s4-2 (-> s3-0 state mesh bounds))
      )
    0
    (set! (-> s5-0 y) (+ 409.6 (-> s5-0 y)))
    (set! (-> gp-0 target-position y) (-> s5-0 y))
    (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
      (set! (-> gp-0 marker)
            (ppointer->handle
              (when s5-1
                (let ((t9-8 (method-of-type part-tracker activate)))
                  (t9-8 (the-as part-tracker s5-1) self (symbol->string (-> part-tracker symbol)) (the-as pointer #x70004000))
                  )
                (let ((t9-9 run-function-in-process)
                      (a0-17 s5-1)
                      (a1-8 part-tracker-init)
                      (a2-7 (-> *part-group-id-table* 1119))
                      (a3-3 0)
                      (t0-2 #f)
                      (t1-2 #f)
                      (t2-0 #f)
                      (t3-0 *launch-matrix*)
                      )
                  (set! (-> t3-0 trans quad) (-> gp-0 target-position quad))
                  ((the-as (function object object object object object object object object none) t9-9)
                   a0-17
                   a1-8
                   a2-7
                   a3-3
                   t0-2
                   t1-2
                   t2-0
                   t3-0
                   )
                  )
                (-> s5-1 ppointer)
                )
              )
            )
      )
    (set! (-> gp-0 show-it) #t)
    )
  (none)
  )

(defstate fire-grenades (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (squid-talker 'shooting)
    (set! (-> self state-time) 0)
    (set! (-> self stop-shooting) #f)
    (setup-masks (-> self draw) 30 0)
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-stretch-vel #x3f428f5c)
      )
    (none)
    )
  :exit (behavior ()
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-stretch-vel #x3f333333)
      )
    (none)
    )
  :trans (behavior ()
    (if (and (zero? (-> self hit-points))
             (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
             )
        (go-virtual pre-flee)
        )
    (squid-method-43 self (squid-method-42 self (new 'stack-no-clear 'vector)) 22.755556 0.75)
    (let ((v1-13 (ja-group)))
      (cond
        ((and v1-13 (= v1-13 (-> self draw art-group data 7)))
         (ja :num! (seek!))
         (when (ja-done? 0)
           (cond
             ((or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
              (ja :group! (-> self draw art-group data 15) :num! min)
              )
             ((-> self fire-aft)
              (ja :group! (-> self draw art-group data 11) :num! min)
              (set! (-> self fire-aft) #f)
              )
             (else
               (ja :group! (-> self draw art-group data 8) :num! min)
               (set! (-> self fire-aft) #t)
               )
             )
           )
         )
        ((let ((v1-44 (ja-group)))
           (and v1-44 (= v1-44 (-> self draw art-group data 8)))
           )
         (ja :num! (seek!))
         (cond
           ((not (ja-done? 0))
            )
           ((or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
            (ja :group! (-> self draw art-group data 10) :num! min)
            )
           (else
             (ja :group! (-> self draw art-group data 9) :num! min)
             (setup-grenade 0)
             (setup-grenade 5)
             (spawn-grenade self 51 (the-as squid-grenade-holder (-> self grenade)) 2.0)
             (spawn-grenade self 56 (-> self grenade 5) 1.0)
             (setup-masks (-> self draw) 0 2)
             (set! (-> self next-gun) 1)
             )
           )
         )
        ((let ((v1-75 (ja-group)))
           (and v1-75 (= v1-75 (-> self draw art-group data 9)))
           )
         (ja :num! (seek!))
         (cond
           ((or (and (= (-> self next-gun) 5) (not (ja-done? 0)))
                (and (< (-> self next-gun) 5) (< (ja-aframe-num 0) 65.0))
                )
            )
           ((or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
            (set! (-> self next-gun) 0)
            (ja :group! (-> self draw art-group data 10) :num! min)
            )
           ((< (-> self next-gun) (squid-num-grenades-to-shoot))
            (setup-grenade (-> self next-gun))
            (setup-grenade (+ (-> self next-gun) 5))
            (spawn-grenade self 52 (-> self grenade (-> self next-gun)) 2.0)
            (spawn-grenade self 57 (-> self grenade (+ (-> self next-gun) 5)) 1.0)
            (setup-masks (-> self draw) 0 4)
            (+! (-> self next-gun) 1)
            (ja :group! (-> self draw art-group data 9) :num! min)
            )
           (else
             (set! (-> self next-gun) 0)
             (ja :group! (-> self draw art-group data 10) :num! min)
             )
           )
         )
        ((let ((v1-124 (ja-group)))
           (and v1-124 (= v1-124 (-> self draw art-group data 10)))
           )
         (ja :num! (seek!))
         (if (ja-done? 0)
             (ja :group! (-> self draw art-group data 15) :num! min)
             )
         )
        ((let ((v1-141 (ja-group)))
           (and v1-141 (= v1-141 (-> self draw art-group data 11)))
           )
         (ja :num! (seek!))
         (cond
           ((not (ja-done? 0))
            )
           ((or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
            (ja :group! (-> self draw art-group data 13) :num! min)
            )
           (else
             (ja :group! (-> self draw art-group data 12) :num! min)
             (setup-grenade 0)
             (setup-grenade 5)
             (spawn-grenade self 53 (the-as squid-grenade-holder (-> self grenade)) 2.0)
             (spawn-grenade self 58 (-> self grenade 5) 1.0)
             (setup-masks (-> self draw) 0 8)
             (set! (-> self next-gun) 1)
             )
           )
         )
        ((let ((v1-172 (ja-group)))
           (and v1-172 (= v1-172 (-> self draw art-group data 12)))
           )
         (ja :num! (seek!))
         (cond
           ((or (and (= (-> self next-gun) 5) (not (ja-done? 0)))
                (and (< (-> self next-gun) 5) (< (ja-aframe-num 0) 165.0))
                )
            )
           ((or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
            (set! (-> self next-gun) 0)
            (ja :group! (-> self draw art-group data 13) :num! min)
            )
           ((< (-> self next-gun) (squid-num-grenades-to-shoot))
            (setup-grenade (-> self next-gun))
            (setup-grenade (+ (-> self next-gun) 5))
            (spawn-grenade self 54 (-> self grenade (-> self next-gun)) 2.0)
            (spawn-grenade self 59 (-> self grenade (+ (-> self next-gun) 5)) 1.0)
            (setup-masks (-> self draw) 0 16)
            (+! (-> self next-gun) 1)
            (ja :group! (-> self draw art-group data 12) :num! min)
            )
           (else
             (set! (-> self next-gun) 0)
             (ja :group! (-> self draw art-group data 13) :num! min)
             )
           )
         )
        ((let ((v1-221 (ja-group)))
           (and v1-221 (= v1-221 (-> self draw art-group data 13)))
           )
         (ja :num! (seek!))
         (if (ja-done? 0)
             (ja :group! (-> self draw art-group data 15) :num! min)
             )
         )
        ((let ((v1-238 (ja-group)))
           (and v1-238 (= v1-238 (-> self draw art-group data 15)))
           )
         (ja :num! (seek!))
         (when (ja-done? 0)
           (ja-channel-push! 1 (seconds 0.05))
           (ja :group! (-> self draw art-group data 3) :num! min)
           (cond
             ((= (-> self shield-hit-points) 0.0)
              (go-virtual fly-to-post)
              )
             (else
               (vector-reset! (-> self residual-velocity))
               (go-virtual fly-to-shoot-spot)
               )
             )
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.15))
          (ja :group! (-> self draw art-group data 7) :num! min)
          (set! (-> self state-time) (current-time))
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate fire (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (squid-talker 'shooting)
    (set! (-> self state-time) 0)
    (set! (-> self stop-shooting) #f)
    (let ((s4-0 (squid-method-42 self (new 'stack-no-clear 'vector)))
          (gp-0 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'vector))
          )
      (vector-! gp-0 s4-0 (-> self trans))
      (set! (-> gp-0 y) 0.0)
      (if (< (vector-normalize-ret-len! gp-0 49152.0) 49152.0)
          (set! (-> gp-0 quad) (-> s4-0 quad))
          (vector+! gp-0 gp-0 (-> self trans))
          )
      (set! (-> gp-0 y) (+ 8192.0 (-> self nav state mesh bounds y)))
      (set! (-> s5-0 quad) (-> gp-0 quad))
      (set! (-> s5-0 y) (+ -40960.0 (-> s5-0 y)))
      (set! (-> self gun-high-to-low) (squid-method-44 self gp-0 s5-0))
      )
    (dotimes (gp-1 6)
      (send-event (handle->process (-> self tentacles gp-1)) 'set-stretch-vel #x3f428f5c)
      )
    (none)
    )
  :exit (behavior ()
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-stretch-vel #x3f333333)
      )
    (none)
    )
  :trans (behavior ()
    (if (and (zero? (-> self hit-points))
             (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
             )
        (go-virtual pre-flee)
        )
    (let ((s5-0 (squid-method-42 self (new 'stack-no-clear 'vector))))
      (quaternion->matrix (new 'stack-no-clear 'matrix) (-> self quat))
      (let ((gp-0 (new 'stack-no-clear 'vector))
            (f30-0 0.0)
            )
        (vector-! s5-0 s5-0 (-> self trans))
        (squid-method-43
          self
          (squid-method-42 self (new 'stack-no-clear 'vector))
          (lerp-scale 18.204445 9.102222 (-> self suck) 0.0 1.0)
          0.75
          )
        (when #t
          (vector-flatten! gp-0 s5-0 (the-as vector (-> self node-list data 36 bone transform)))
          (vector-normalize-copy! gp-0 gp-0 1.0)
          (let ((f30-1 (- (asin (vector-dot gp-0 (-> self node-list data 36 bone transform vector 2))))))
            (set! f30-0
                  (cond
                    ((and (zero? (-> self state-time)) (not (-> self gun-high-to-low)))
                     (+ 3640.889 f30-1)
                     )
                    ((zero? (-> self state-time))
                     (+ -3640.889 f30-1)
                     )
                    ((-> self gun-high-to-low)
                     (+ f30-1 (lerp-scale -1820.4445 910.2222 (the float (- (current-time) (-> self state-time))) 0.0 900.0))
                     )
                    (else
                      (+ f30-1 (lerp-scale 3640.889 -910.2222 (the float (- (current-time) (-> self state-time))) 0.0 900.0))
                      )
                    )
                  )
            )
          )
        (+! (-> self gun-tilt) (fmin 364.0889 (fmax -364.0889 (* 0.3 f30-0))))
        )
      )
    (set! (-> self gun-tilt) (fmin 8192.0 (fmax -8192.0 (-> self gun-tilt))))
    (let ((f30-2 (* 0.5 (-> self gun-tilt))))
      (quaternion-set! (-> self gun-tilt-left-jm quat) (sin f30-2) 0.0 0.0 (cos f30-2))
      )
    (quaternion-copy! (-> self gun-tilt-right-jm quat) (-> self gun-tilt-left-jm quat))
    (let ((v1-50 (ja-group)))
      (cond
        ((and v1-50 (= v1-50 (-> self draw art-group data 16)))
         (ja :num! (seek!))
         (when (and (= (-> self next-gun) 1) (>= (ja-aframe-num 0) 250.0))
           (squid-method-53 self 39)
           (squid-method-53 self 46)
           (set! (-> self next-gun) 0)
           0
           )
         (if (ja-done? 0)
             (ja :group! (-> self draw art-group data 17) :num! min)
             )
         )
        ((let ((v1-77 (ja-group)))
           (and v1-77 (= v1-77 (-> self draw art-group data 17)))
           )
         (if (or (>= (- (current-time) (-> self state-time)) (seconds 3))
                 (or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
                 )
             (ja :num! (seek!))
             (ja :num! (loop!))
             )
         (cond
           ((and (zero? (-> self next-gun)) (>= (ja-aframe-num 0) 254.0) (< (ja-aframe-num 0) 258.0))
            (squid-method-53 self 42)
            (squid-method-53 self 49)
            (set! (-> self next-gun) 1)
            )
           ((and (= (-> self next-gun) 1) (>= (ja-aframe-num 0) 258.0))
            (squid-method-53 self 39)
            (squid-method-53 self 46)
            (set! (-> self next-gun) 0)
            0
            )
           )
         (if (and (or (>= (- (current-time) (-> self state-time)) (seconds 3))
                      (or (= (-> self shield-hit-points) 0.0) (zero? (-> self hit-points)) (-> self stop-shooting))
                      )
                  (ja-done? 0)
                  )
             (ja :group! (-> self draw art-group data 18) :num! min)
             )
         )
        ((let ((v1-132 (ja-group)))
           (and v1-132 (= v1-132 (-> self draw art-group data 18)))
           )
         (ja :num! (seek!))
         (when (and (zero? (-> self next-gun)) (>= (ja-aframe-num 0) 262.0))
           (squid-method-53 self 42)
           (squid-method-53 self 49)
           (set! (-> self next-gun) 1)
           )
         (if (ja-done? 0)
             (ja :group! (-> self draw art-group data 19) :num! min)
             )
         )
        (else
          (let ((v1-158 (ja-group)))
            (cond
              ((and v1-158 (= v1-158 (-> self draw art-group data 19)))
               (ja :num! (seek!))
               (when (ja-done? 0)
                 (ja-channel-push! 1 (seconds 0.2))
                 (ja :group! (-> self draw art-group data 3) :num! min)
                 (cond
                   ((= (-> self shield-hit-points) 0.0)
                    (go-virtual fly-to-post)
                    )
                   (else
                     (vector-reset! (-> self residual-velocity))
                     (go-virtual fly-to-shoot-spot)
                     )
                   )
                 )
               )
              (else
                (ja-channel-push! 1 (seconds 0.2))
                (ja :group! (-> self draw art-group data 16) :num! min)
                (set! (-> self state-time) (current-time))
                (set! (-> self next-gun) 1)
                )
              )
            )
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate fly-to-shoot-spot (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (set! (-> self can-play-squid-boost) #t)
    (move-to-spot self (-> self trans) #t)
    (dotimes (gp-0 6)
      (send-event (handle->process (-> self tentacles gp-0)) 'set-gravity-slow (new 'static 'vector :y -1.0))
      )
    (set! (-> self reload-played) #f)
    (none)
    )
  :exit (behavior ()
    (set! (-> self force-onto-mesh) #t)
    (none)
    )
  :trans (behavior ()
    (squid-talker 'general)
    (cond
      ((and (zero? (-> self hit-points))
            (or (not *target*) (not (logtest? (-> *target* focus-status) (focus-status dead))))
            )
       (go-virtual pre-flee)
       )
      ((and (= (-> self shield-hit-points) 0.0) (< (-> self stage) 2))
       (go-virtual fly-to-post)
       )
      )
    (squid-adjust-fly-anim)
    (when (and (zero? (-> self stage))
               (not (-> self reload-played))
               (< (- (-> self traj-duration) (the float (- (current-time) (-> self traj-timer)))) -210.0)
               )
      (sound-play "squid-reload")
      (set! (-> self reload-played) #t)
      )
    (when (>= (float-sin-clamp self (squid-method-48 self)) 1.0)
      (dotimes (gp-2 6)
        (send-event (handle->process (-> self tentacles gp-2)) 'set-gravity-slow (new 'static 'vector :y -1.0))
        )
      (case (-> self stage)
        ((2)
         (cond
           ((or (>= (-> self stage-2-go-status) 2) (and (< -2 (-> self stage-2-go-status)) (< (rand-vu) 0.5)))
            (set! (-> self stage-2-go-status) (min -1 (+ (-> self stage-2-go-status) -1)))
            (go-virtual fire-whirlwind)
            )
           (else
             (set! (-> self stage-2-go-status) (max 1 (+ (-> self stage-2-go-status) 1)))
             (go-virtual headbut)
             )
           )
         )
        ((1)
         (go-virtual fire-grenades)
         )
        (else
          (if (not (-> self reload-played))
              (sound-play "squid-reload")
              )
          (go-virtual fire)
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate idle (squid)
  :virtual #t
  :event squid-handler
  :enter (behavior ()
    (set-setting! 'music 'danger4 0.0 0)
    (set! (-> self driver-blend target) 1.0)
    (set! (-> self state-time) (current-time))
    (set! (-> self hud) (ppointer->handle (process-spawn hud-squid :init hud-init-by-other :to self)))
    (vector+! (-> self trans) (-> self trans) (new 'static 'vector :x 101171.2 :y 45056.0 :z 31047.68))
    (let ((v1-14 (squid-method-42 self (new 'stack-no-clear 'vector))))
      (vector-! v1-14 v1-14 (-> self trans))
      (let ((f30-1 (* 0.5 (atan (-> v1-14 x) (-> v1-14 z)))))
        (set! (-> self quat x) 0.0)
        (set! (-> self quat y) (sin f30-1))
        (set! (-> self quat z) 0.0)
        (set! (-> self quat w) (cos f30-1))
        )
      )
    (sound-play "squid-reload")
    (go-virtual fire)
    (none)
    )
  :trans (behavior ()
    (ja :num! (loop!))
    (when (>= (- (current-time) (-> self state-time)) (seconds 3))
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  :post (behavior ()
    (squid-post self)
    (none)
    )
  )

(defstate hidden (squid)
  :virtual #t
  :enter (behavior ()
    (ja-channel-set! 0)
    (ja-post)
    (none)
    )
  :exit (behavior ()
    (ja-channel-push! 1 0)
    (ja :group! (-> self draw art-group data 3) :num! min)
    (none)
    )
  :trans (behavior ()
    (cond
      ((< (fabs (-> (squid-method-42 self (new 'stack-no-clear 'vector)) x)) 4096.0)
       )
      (else
        (when (task-node-closed? (game-task-node palace-boss-introduction))
          (let ((f0-2 (vector-vector-xz-distance-squared (-> self trans) (target-pos 0)))
                (f1-1 217088.0)
                )
            (cond
              ((< f0-2 (* f1-1 f1-1))
               (set! (-> self allowed-rotate-to-vector-angle) 32768.0)
               (squid-method-43 self (squid-method-42 self (new 'stack-no-clear 'vector)) 32585.955 0.999)
               (go-virtual idle)
               )
              ((let ((f1-4 286720.0))
                 (< f0-2 (* f1-4 f1-4))
                 )
               )
              )
            )
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior squid) sleep-code)
  )
