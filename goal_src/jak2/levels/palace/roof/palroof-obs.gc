;;-*-Lisp-*-
(in-package goal)

;; name: palroof-obs.gc
;; name in dgo: palroof-obs
;; dgos: PAR

;; DECOMP BEGINS

(deftype pal-lowrez-throne (med-res-level)
  ()
  :heap-base #x60
  :method-count-assert 21
  :size-assert         #xd4
  :flag-assert         #x15006000d4
  )


(defskelgroup skel-pal-lowrez-throne pal-lowrez-throne pal-lowrez-throne-lod0-jg pal-lowrez-throne-idle-ja
              ((pal-lowrez-throne-lod0-mg (meters 999999)))
              :bounds (static-spherem -5 40 -10 75)
              )

(defpartgroup group-pal-prong-energy
  :id 1111
  :bounds (static-bspherem 0 0 0 160)
  :parts ((sp-item 4762 :fade-after (meters 80) :falloff-to (meters 80))
    (sp-item 4763 :fade-after (meters 220) :flags (bit6))
    )
  )

(defpart 4762
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 2.0)
    (:scale-x (meters 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:vel-y (meters -0.03))
    (:scalevel-x (meters 0.005) (meters 0.005))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.98)
    (:fade-g -0.98)
    (:fade-a 0.19393939)
    (:timer (seconds 0.835))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.55))
    (:next-launcher 4764)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 6))
    )
  )

(defpart 4764
  :init-specs ((:fade-a -0.7529412) (:friction 0.1))
  )

(defpart 4763
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 8))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 0.0 64.0)
    (:g 128.0)
    (:b 255.0)
    (:a 64.0)
    (:omega (degrees 4518))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    )
  )

(deftype pal-prong (process-drawable)
  ((root-override collide-shape  :offset 128)
   )
  :heap-base #x50
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (break-it () _type_ :state 21)
    (broken () _type_ :state 22)
    )
  )


(defskelgroup skel-pal-prong pal-prong pal-prong-lod0-jg pal-prong-idle-ja
              ((pal-prong-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 5 0 5.5)
              :origin-joint-index 3
              )

(defskelgroup skel-pal-prong-explode pal-prong pal-prong-explode-lod0-jg pal-prong-explode-idle-ja
              ((pal-prong-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 15)
              )

(define *pal-prong-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! pal-prong ((obj pal-prong) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((s4-0 (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 3))
      (set! (-> s3-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 20480.0 0.0 22528.0)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-8 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-8 prim-core action) (collide-action solid))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 20480.0 0.0 22528.0)
      )
    (let ((v1-10 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-10 prim-core action) (collide-action solid))
      (set! (-> v1-10 transform-index) 3)
      (set-vector! (-> v1-10 local-sphere) 0.0 0.0 0.0 8192.0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-13 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-13 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-13 prim-core collide-with))
      )
    (set! (-> obj root-override) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-pal-prong" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 1111) obj))
  (if (task-node-closed? (game-task-node palace-boss-resolution))
      (go (method-of-object obj broken))
      (go (method-of-object obj idle))
      )
  (none)
  )

(defbehavior pal-prong-small-collision pal-prong ()
  (let ((v1-3 (-> (the-as collide-shape-prim-group (-> self root-override root-prim)) child 0)))
    (set! (-> v1-3 prim-core collide-as) (collide-spec))
    (set! (-> v1-3 prim-core collide-with) (collide-spec))
    )
  0
  (none)
  )

(defstate broken (pal-prong)
  :virtual #t
  :enter (behavior ()
    (setup-masks (-> self draw) 0 1)
    (pal-prong-small-collision)
    (transform-post)
    (none)
    )
  :code (the-as (function none :behavior pal-prong) sleep-code)
  )

(defstate break-it (pal-prong)
  :virtual #t
  :enter (behavior ()
    (setup-masks (-> self draw) 0 1)
    (pal-prong-small-collision)
    (transform-post)
    (sound-play "sqd-post-break")
    (let ((gp-1 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (process-spawn
        joint-exploder
        (art-group-get-by-name *level* "skel-pal-prong-explode" (the-as (pointer uint32) #f))
        5
        gp-1
        *pal-prong-exploder-params*
        :to self
        )
      )
    (none)
    )
  :trans (behavior ()
    (go-virtual broken)
    (none)
    )
  :code (the-as (function none :behavior pal-prong) sleep-code)
  )

(defstate idle (pal-prong)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('trigger)
       (go-virtual break-it)
       )
      )
    )
  :enter (behavior ()
    (transform-post)
    (none)
    )
  :trans (behavior ()
    (let ((a1-0 (new 'stack-no-clear 'vector)))
      (set! (-> a1-0 quad) (-> self root-override trans quad))
      (set! (-> a1-0 y) (+ 36864.0 (-> a1-0 y)))
      (spawn (-> self part) a1-0)
      )
    (none)
    )
  :code (the-as (function none :behavior pal-prong) sleep-code)
  )
