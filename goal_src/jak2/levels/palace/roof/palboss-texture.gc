;;-*-Lisp-*-
(in-package goal)

;; name: palboss-texture.gc
;; name in dgo: palboss-texture
;; dgos: PAR

;; DECOMP BEGINS

(define *shield-texture-anim-array*
  (new 'static 'texture-anim-array :type texture-anim
    (new 'static 'texture-anim
      :num-layers #x5
      :func #f
      :init-func #f
      :tex #f
      :tex-name "squid-env-rim-dest"
      :color (new 'static 'rgba :a #x80)
      :frame-delta 300.0
      :frame-mod 1200.0
      :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
      :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
      :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
      )
    )
  )

(defun set-shield-color! ((arg0 vector))
  ;; TODO - Underlying color vectors don't seem to set up properly yet!
  ;; (let ((v1-1 (-> *shield-texture-anim-array* array-data 0)))
  ;;   (set! (-> v1-1 data 1 start-color quad) (-> arg0 quad))
  ;;   (set! (-> v1-1 data 1 end-color quad) (-> arg0 quad))
  ;;   (set! (-> v1-1 data 2 start-color quad) (-> arg0 quad))
  ;;   (set! (-> v1-1 data 2 end-color quad) (-> arg0 quad))
  ;;   (set! (-> v1-1 data 3 start-color quad) (-> arg0 quad))
  ;;   (set! (-> v1-1 data 3 end-color quad) (-> arg0 quad))
  ;;   (set! (-> v1-1 data 4 start-color quad) (-> arg0 quad))
  ;;   (let ((v0-0 (-> v1-1 data 4 end-color)))
  ;;     (set! (-> v0-0 quad) (-> arg0 quad))
  ;;     v0-0
  ;;     )
  ;;   )
  arg0
  )

(defun set-shield-flash! ((arg0 vector))
  ;; TODO - Underlying color vectors don't seem to set up properly yet!
  ;; (let ((v1-1 (-> *shield-texture-anim-array* array-data 0)))
  ;;   (set! (-> v1-1 data 0 start-color quad) (-> arg0 quad))
  ;;   (let ((v0-0 (-> v1-1 data 0 end-color)))
  ;;     (set! (-> v0-0 quad) (-> arg0 quad))
  ;;     v0-0
  ;;     )
  ;;   )
  arg0
  )
