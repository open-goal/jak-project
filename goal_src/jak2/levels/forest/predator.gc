;;-*-Lisp-*-
(in-package goal)

;; name: predator.gc
;; name in dgo: predator
;; dgos: FOR

;; DECOMP BEGINS

(defmethod draw hud-predator ((obj hud-predator))
  (set-hud-piece-position! (-> obj sprites 1) (the int (+ 480.0 (* 130.0 (-> obj offset)))) 205)
  (set-as-offset-from! (the-as hud-sprite (-> obj sprites)) (the-as vector4w (-> obj sprites 1)) -44 0)
  (format (clear (-> obj strings 0 text)) "~D" (-> obj values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> obj strings 0 pos)) (the-as vector4w (-> obj sprites 1)) -45 45)
  ((method-of-type hud draw) obj)
  0
  (none)
  )

(defmethod update-values hud-predator ((obj hud-predator))
  (set! (-> obj values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) obj)
  0
  (none)
  )

(defmethod init-callback hud-predator ((obj hud-predator))
  (set! (-> obj level) (level-get *level* 'forest))
  (set! (-> obj gui-id)
        (add-process *gui-control* obj (gui-channel hud-middle-right) (gui-action hidden) (-> obj name) 81920.0 0)
        )
  (logior! (-> obj flags) (hud-flags show))
  (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #xb1d)))
  (set! (-> obj sprites 0 flags) (the-as uint 4))
  (set! (-> obj sprites 0 scale-x) 0.6)
  (set! (-> obj sprites 0 scale-y) 0.6)
  (set! (-> obj sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :page #xb1d)))
  (set! (-> obj sprites 1 flags) (the-as uint 4))
  (set! (-> obj sprites 1 scale-x) 0.6)
  (set! (-> obj sprites 1 scale-y) 0.6)
  (alloc-string-if-needed obj 0)
  (set! (-> obj strings 0 scale) 0.6)
  (set! (-> obj strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(defmethod draw hud-pegasus ((obj hud-pegasus))
  (set-hud-piece-position!
    (the-as hud-sprite (-> obj sprites))
    (the int (+ 472.0 (* 130.0 (-> obj offset))))
    190
    )
  (set! (-> obj sprites 0 flags) (the-as uint 4))
  (format (clear (-> obj strings 0 text)) "~D" (-> obj values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> obj strings 0 pos)) (the-as vector4w (-> obj sprites)) -26 35)
  ((method-of-type hud draw) obj)
  0
  (none)
  )

(defmethod update-values hud-pegasus ((obj hud-pegasus))
  (set! (-> obj values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) obj)
  0
  (none)
  )

(defmethod init-callback hud-pegasus ((obj hud-pegasus))
  (set! (-> obj level) (level-get *level* 'forest))
  (set! (-> obj gui-id)
        (add-process *gui-control* obj (gui-channel hud-middle-right) (gui-action hidden) (-> obj name) 81920.0 0)
        )
  (logior! (-> obj flags) (hud-flags show))
  (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xb1d)))
  (set! (-> obj sprites 0 scale-x) 0.8)
  (set! (-> obj sprites 0 scale-y) 0.8)
  (set! (-> obj sprites 0 flags) (the-as uint 4))
  (alloc-string-if-needed obj 0)
  (set! (-> obj strings 0 scale) 0.6)
  (set! (-> obj strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(defun point-in-line-region? ((arg0 vector) (arg1 vector) (arg2 vector) (arg3 float))
  (let* ((v1-1 (vector-normalize! (vector-! (new-stack-vector0) arg2 arg1) 1.0))
         (s5-1 (vector-! (new-stack-vector0) arg0 arg1))
         (f30-0 (vector-dot v1-1 s5-1))
         (s2-2 (vector-float*! (new-stack-vector0) v1-1 f30-0))
         )
    (if (or (< f30-0 0.0)
            (< (vector-vector-distance arg1 arg2) f30-0)
            (< arg3 (vector-length (vector-! (new-stack-vector0) s5-1 s2-2)))
            )
        (return #f)
        )
    )
  #t
  )

(deftype predator-shot (metalhead-shot)
  ()
  :heap-base #x170
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  )


;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound predator-shot ((obj predator-shot) (arg0 projectile-options))
  (case arg0
    (((projectile-options lose-altitude))
     (sound-play "pred-shot-hit")
     )
    (((projectile-options lose-altitude proj-options-2))
     (let ((f0-0 (doppler-pitch-shift (-> obj root-override trans) (-> obj root-override transv)))
           (a0-7 (static-sound-spec "pred-shot-loop" :volume 0.0 :mask (pitch reg0)))
           )
       (set! (-> a0-7 volume) 1024)
       (set! (-> a0-7 pitch-mod) (the int (* 1524.0 f0-0)))
       (sound-play-by-spec a0-7 (-> obj sound-id) (-> obj root-override trans))
       )
     )
    )
  (none)
  )

(defmethod init-proj-collision! predator-shot ((obj predator-shot))
  "Init the [[projectile]]'s [[collide-shape]]"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec jak bot crate civilian enemy vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root-override) s5-0)
    )
  (set! (-> obj root-override pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1)
        )
  (none)
  )

(defmethod init-proj-settings! predator-shot ((obj predator-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (set! (-> obj tail-pos quad) (-> obj root-override trans quad))
  (set! (-> obj attack-mode) 'predator-shot)
  (set! (-> obj max-speed) 532480.0)
  (set! (-> obj move) metalhead-shot-move)
  (set! (-> obj update-velocity) projectile-update-velocity-space-wars)
  (set! (-> obj timeout) (seconds 0.767))
  (set! (-> obj sound-id) (new-sound-id))
  (set-gravity-length (-> obj root-override dynam) 573440.0)
  (none)
  )

(defskelgroup skel-predator predator predator-lod0-jg predator-idle-ja
              ((predator-lod0-mg (meters 20)) (predator-lod1-mg (meters 40)) (predator-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 4)
              )

(deftype predator (nav-enemy)
  ((los               los-control :inline :offset-assert 608)
   (want-stop         symbol              :offset-assert 756)
   (target-pos        vector      :inline :offset-assert 768)
   (curr-node         int32               :offset-assert 784)
   (hide-pos          vector      :inline :offset-assert 800)
   (next-change       uint64              :offset-assert 816)
   (shoot-angle       float               :offset-assert 824)
   (miss-amount       float               :offset-assert 828)
   (ambient-sound-id  sound-id            :offset-assert 832)
   (shock-effect-time time-frame          :offset-assert 840)
   (shock-effect-end  uint64              :offset-assert 848)
   (fade              float               :offset-assert 856)
   (dest-fade         float               :offset-assert 860)
   )
  :heap-base #x2e0
  :method-count-assert 189
  :size-assert         #x360
  :flag-assert         #xbd02e00360
  (:methods
    (close-attack () _type_ :state 178)
    (fire () _type_ :state 179)
    (hide () _type_ :state 180)
    (hidden () _type_ :state 181)
    (set-dangerous! (_type_ symbol) symbol 182)
    (predator-method-183 (_type_) none 183)
    (predator-method-184 (_type_ int float) none 184)
    (predator-method-185 (_type_) none 185)
    (predator-method-186 (_type_) none 186)
    (predator-method-187 (_type_) symbol 187)
    (predator-method-188 (_type_ vector vector vector) none 188)
    )
  )


(define *predator-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x5 :param0 #x1 :param1 #x1)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 5
    :notice-anim 5
    :hostile-anim 7
    :hit-anim 5
    :knocked-anim 12
    :knocked-land-anim 13
    :die-anim 11
    :die-falling-anim 11
    :victory-anim 5
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint 7
    :look-at-joint 8
    :bullseye-joint 6
    :sound-hit (static-sound-name "predator-hit")
    :sound-die (static-sound-name "predator-die")
    :notice-distance (meters 150)
    :notice-distance-delta (meters 150)
    :proximity-notice-distance (meters 4)
    :default-hit-points 5
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 81920.0
    :knocked-soft-vxz-hi 81920.0
    :knocked-soft-vy-lo 69632.0
    :knocked-soft-vy-hi 69632.0
    :knocked-medium-vxz-lo 81920.0
    :knocked-medium-vxz-hi 81920.0
    :knocked-medium-vy-lo 69632.0
    :knocked-medium-vy-hi 69632.0
    :knocked-hard-vxz-lo 81920.0
    :knocked-hard-vxz-hi 81920.0
    :knocked-hard-vy-lo 69632.0
    :knocked-hard-vy-hi 69632.0
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 53248.0
    :knocked-yellow-vy-lo 40960.0
    :knocked-yellow-vy-hi 53248.0
    :knocked-red-vxz-lo 102400.0
    :knocked-red-vxz-hi 102400.0
    :knocked-red-vy-lo 81920.0
    :knocked-red-vy-hi 81920.0
    :knocked-blue-vxz-lo 32768.0
    :knocked-blue-vxz-hi 65536.0
    :knocked-blue-vy-lo 32768.0
    :knocked-blue-vy-hi 49152.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint 6
    :gem-offset (new 'static 'sphere :y -2252.8 :z -2170.88 :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 6
    :turn-anim -1
    :run-anim 7
    :taunt-anim -1
    :run-travel-speed (meters 8)
    :run-acceleration (meters 6)
    :run-turning-acceleration (meters 30)
    :walk-travel-speed (meters 4)
    :walk-acceleration (meters 3)
    :walk-turning-acceleration (meters 8)
    :maximum-rotation-rate (degrees 720.0)
    :notice-nav-radius (meters 40)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

(set! (-> *predator-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(defmethod general-event-handler predator ((obj predator) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('attack)
     (set! (-> obj shock-effect-end) (the-as uint (+ (current-time) (seconds 1))))
     ((method-of-type nav-enemy general-event-handler) obj arg0 arg1 arg2 arg3)
     )
    (('death-end)
     (when (nonzero? (-> obj ambient-sound-id))
       (sound-stop (-> obj ambient-sound-id))
       (set! (-> obj ambient-sound-id) (new 'static 'sound-id))
       0
       )
     ((method-of-type nav-enemy general-event-handler) obj arg0 arg1 arg2 arg3)
     )
    (else
      ((method-of-type nav-enemy general-event-handler) obj arg0 arg1 arg2 arg3)
      )
    )
  )

(defmethod enemy-method-77 predator ((obj predator) (arg0 (pointer float)))
  (cond
    ((zero? (-> obj hit-points))
     (case (-> obj incoming knocked-type)
       (((knocked-type knocked-type-5))
        (ja-channel-push! 1 (seconds 0.1))
        (let ((a0-3 (-> obj skel root-channel 0)))
          (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 18)))
          (set! (-> a0-3 param 0)
                (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 18)) frames num-frames) -1))
                )
          (set! (-> a0-3 param 1) (-> arg0 0))
          (set! (-> a0-3 frame-num) 0.0)
          (joint-control-channel-group! a0-3 (the-as art-joint-anim (-> obj draw art-group data 18)) num-func-seek!)
          )
        )
       (else
         (ja-channel-push! 1 (seconds 0.1))
         (let ((a0-5 (-> obj skel root-channel 0)))
           (set! (-> a0-5 frame-group) (the-as art-joint-anim (-> obj draw art-group data 14)))
           (set! (-> a0-5 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 14)) frames num-frames) -1))
                 )
           (set! (-> a0-5 param 1) (-> arg0 0))
           (set! (-> a0-5 frame-num) 0.0)
           (joint-control-channel-group! a0-5 (the-as art-joint-anim (-> obj draw art-group data 14)) num-func-seek!)
           )
         )
       )
     #t
     )
    (else
      (case (-> obj incoming knocked-type)
        (((knocked-type knocked-type-6))
         (ja-channel-push! 1 (seconds 0.01))
         (let ((v1-32 (get-rand-int obj 2)))
           (cond
             ((zero? v1-32)
              (let ((a0-10 (-> obj skel root-channel 0)))
                (set! (-> a0-10 frame-group) (the-as art-joint-anim (-> obj draw art-group data 21)))
                (set! (-> a0-10 param 0)
                      (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 21)) frames num-frames) -1))
                      )
                (set! (-> a0-10 param 1) (-> arg0 0))
                (set! (-> a0-10 frame-num) 0.0)
                (joint-control-channel-group! a0-10 (the-as art-joint-anim (-> obj draw art-group data 21)) num-func-seek!)
                )
              )
             ((= v1-32 1)
              (let ((a0-12 (-> obj skel root-channel 0)))
                (set! (-> a0-12 frame-group) (the-as art-joint-anim (-> obj draw art-group data 22)))
                (set! (-> a0-12 param 0)
                      (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 22)) frames num-frames) -1))
                      )
                (set! (-> a0-12 param 1) (-> arg0 0))
                (set! (-> a0-12 frame-num) 0.0)
                (joint-control-channel-group! a0-12 (the-as art-joint-anim (-> obj draw art-group data 22)) num-func-seek!)
                )
              )
             )
           )
         )
        (((knocked-type knocked-type-5))
         (ja-channel-push! 1 (seconds 0.1))
         (let ((a0-15 (-> obj skel root-channel 0)))
           (set! (-> a0-15 frame-group) (the-as art-joint-anim (-> obj draw art-group data 18)))
           (set! (-> a0-15 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 18)) frames num-frames) -1))
                 )
           (set! (-> a0-15 param 1) (-> arg0 0))
           (set! (-> a0-15 frame-num) 0.0)
           (joint-control-channel-group! a0-15 (the-as art-joint-anim (-> obj draw art-group data 18)) num-func-seek!)
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.1))
          (let ((a0-17 (-> obj skel root-channel 0)))
            (set! (-> a0-17 frame-group) (the-as art-joint-anim (-> obj draw art-group data 12)))
            (set! (-> a0-17 param 0)
                  (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 12)) frames num-frames) -1))
                  )
            (set! (-> a0-17 param 1) (-> arg0 0))
            (set! (-> a0-17 frame-num) 0.0)
            (joint-control-channel-group! a0-17 (the-as art-joint-anim (-> obj draw art-group data 12)) num-func-seek!)
            )
          )
        )
      #t
      )
    )
  )

(defmethod enemy-method-78 predator ((obj predator) (arg0 (pointer float)))
  (cond
    ((zero? (-> obj hit-points))
     (case (-> obj incoming knocked-type)
       (((knocked-type knocked-type-5))
        (ja-channel-push! 1 (seconds 0.1))
        (let ((a0-3 (-> obj skel root-channel 0)))
          (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 20)))
          (set! (-> a0-3 param 0)
                (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 20)) frames num-frames) -1))
                )
          (set! (-> a0-3 param 1) (-> arg0 0))
          (set! (-> a0-3 frame-num) 0.0)
          (joint-control-channel-group! a0-3 (the-as art-joint-anim (-> obj draw art-group data 20)) num-func-seek!)
          )
        )
       (else
         (ja-channel-push! 1 (seconds 0.1))
         (let ((a0-5 (-> obj skel root-channel 0)))
           (set! (-> a0-5 frame-group) (the-as art-joint-anim (-> obj draw art-group data 15)))
           (set! (-> a0-5 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 15)) frames num-frames) -1))
                 )
           (set! (-> a0-5 param 1) (-> arg0 0))
           (set! (-> a0-5 frame-num) 0.0)
           (joint-control-channel-group! a0-5 (the-as art-joint-anim (-> obj draw art-group data 15)) num-func-seek!)
           )
         )
       )
     #t
     )
    (else
      (case (-> obj incoming knocked-type)
        (((knocked-type knocked-type-6))
         (ja-channel-push! 1 (seconds 0.01))
         (let ((a0-8 (-> obj skel root-channel 0)))
           (set! (-> a0-8 frame-group) (the-as art-joint-anim (-> obj draw art-group data 23)))
           (set! (-> a0-8 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 23)) frames num-frames) -1))
                 )
           (set! (-> a0-8 param 1) (-> arg0 0))
           (set! (-> a0-8 frame-num) 0.0)
           (joint-control-channel-group! a0-8 (the-as art-joint-anim (-> obj draw art-group data 23)) num-func-seek!)
           )
         )
        (((knocked-type knocked-type-5))
         (ja-channel-push! 1 (seconds 0.1))
         (let ((a0-11 (-> obj skel root-channel 0)))
           (set! (-> a0-11 frame-group) (the-as art-joint-anim (-> obj draw art-group data 19)))
           (set! (-> a0-11 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 19)) frames num-frames) -1))
                 )
           (set! (-> a0-11 param 1) (-> arg0 0))
           (set! (-> a0-11 frame-num) 0.0)
           (joint-control-channel-group! a0-11 (the-as art-joint-anim (-> obj draw art-group data 19)) num-func-seek!)
           )
         )
        (else
          (ja-channel-push! 1 (seconds 0.1))
          (let ((a0-13 (-> obj skel root-channel 0)))
            (set! (-> a0-13 frame-group) (the-as art-joint-anim (-> obj draw art-group data 13)))
            (set! (-> a0-13 param 0)
                  (the float (+ (-> (the-as art-joint-anim (-> obj draw art-group data 13)) frames num-frames) -1))
                  )
            (set! (-> a0-13 param 1) (-> arg0 0))
            (set! (-> a0-13 frame-num) 0.0)
            (joint-control-channel-group! a0-13 (the-as art-joint-anim (-> obj draw art-group data 13)) num-func-seek!)
            )
          )
        )
      #t
      )
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod predator-method-188 predator ((obj predator) (arg0 vector) (arg1 vector) (arg2 vector))
  (let ((s5-0 (new 'stack-no-clear 'collide-query)))
    (let ((f0-0 1228.8)
          (f30-0 6144.0)
          )
      (set! (-> s5-0 start-pos quad) (-> arg0 quad))
      (vector-! (-> s5-0 move-dist) arg1 arg0)
      (let ((v1-4 s5-0))
        (set! (-> v1-4 radius) f0-0)
        (set! (-> v1-4 collide-with) (collide-spec backgnd))
        (set! (-> v1-4 ignore-process0) obj)
        (set! (-> v1-4 ignore-process1) (handle->process (-> obj focus handle)))
        (set! (-> v1-4 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
        (set! (-> v1-4 action-mask) (collide-action solid))
        )
      (let ((f0-1 (fill-and-probe-using-line-sphere *collide-cache* s5-0)))
        (cond
          ((>= f0-1 0.0)
           (vector-float*! (-> s5-0 move-dist) (-> s5-0 move-dist) f0-1)
           (cond
             ((< (vector-dot
                   (-> s5-0 best-other-tri normal)
                   (vector-! (new 'stack-no-clear 'vector) arg2 (the-as vector (-> s5-0 best-other-tri)))
                   )
                 0.0
                 )
              )
             (else
               )
             )
           )
          (else
            (vector-! (-> s5-0 move-dist) arg1 arg0)
            )
          )
        )
      (set! (-> s5-0 start-pos quad) (-> arg0 quad))
      (let ((v1-14 s5-0))
        (set! (-> v1-14 radius) f30-0)
        (set! (-> v1-14 collide-with) (collide-spec enemy hit-by-player-list hit-by-others-list))
        (set! (-> v1-14 ignore-process0) obj)
        (set! (-> v1-14 ignore-process1) (handle->process (-> obj focus handle)))
        (set! (-> v1-14 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
        (set! (-> v1-14 action-mask) (collide-action solid))
        )
      )
    (cond
      ((< (fill-and-probe-using-line-sphere *collide-cache* s5-0) 0.0)
       #t
       )
      (else
        (let ((s4-1 (-> s5-0 best-other-tri collide-ptr)))
          (when (and (if (type? s4-1 collide-shape-prim)
                         s4-1
                         )
                     (< (vector-dot
                          (-> s5-0 best-other-tri normal)
                          (vector-! (new 'stack-no-clear 'vector) arg2 (the-as vector (-> s5-0 best-other-tri)))
                          )
                        0.0
                        )
                     )
            )
          )
        )
      )
    )
  (none)
  )

(defmethod predator-method-184 predator ((obj predator) (arg0 int) (arg1 float))
  (local-vars (sv-224 vector) (sv-240 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((a1-1 (-> obj node-list data arg0))
          (s5-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
      (set! (-> s5-0 ent) (-> obj entity))
      (set! (-> s5-0 charge) 1.0)
      (set! (-> s5-0 options) (projectile-options))
      (set! (-> s5-0 notify-handle) (process->handle obj))
      (set! (-> s5-0 owner-handle) (the-as handle #f))
      (set! (-> s5-0 ignore-handle) (process->handle obj))
      (let* ((v1-10 *game-info*)
             (a0-11 (+ (-> v1-10 attack-id) 1))
             )
        (set! (-> v1-10 attack-id) a0-11)
        (set! (-> s5-0 attack-id) a0-11)
        )
      (set! (-> s5-0 timeout) (seconds 4))
      (vector<-cspace! (-> s5-0 pos) a1-1)
      (let ((s2-0 (handle->process (-> obj focus handle)))
            (s3-0 (new 'stack-no-clear 'vector))
            )
        (when s2-0
          (seek!
            (-> obj miss-amount)
            (* 0.5 (vector-length (-> (the-as process-focusable s2-0) root-override transv)))
            4096.0
            )
          (set! (-> s3-0 quad) (-> (get-trans (the-as process-focusable s2-0) 3) quad))
          (set! sv-224 (new 'stack-no-clear 'vector))
          (let ((v1-24 (-> s5-0 pos))
                (a0-18 s3-0)
                )
            (.lvf vf4 (&-> v1-24 quad))
            (.lvf vf5 (&-> a0-18 quad))
            )
          (.mov.vf vf6 vf0 :mask #b1000)
          (.sub.vf vf6 vf4 vf5 :mask #b111)
          (.svf (&-> sv-224 quad) vf6)
          (let* ((f0-5 (vector-length sv-224))
                 (f0-6 (* 0.0000018780048 f0-5))
                 )
            (set! sv-240 (new 'stack-no-clear 'vector))
            (let ((s0-0 (new 'stack-no-clear 'vector))
                  (s1-1 (new 'stack-no-clear 'vector))
                  )
              (let ((a0-19 s3-0))
                (let ((v1-30 s3-0))
                  (let ((a1-6 (-> (the-as process-focusable s2-0) root-override transv)))
                    (let ((a2-2 f0-6))
                      (.mov vf7 a2-2)
                      )
                    (.lvf vf5 (&-> a1-6 quad))
                    )
                  (.lvf vf4 (&-> v1-30 quad))
                  )
                (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf5 vf7 :mask #b111)
                (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                (.svf (&-> a0-19 quad) vf6)
                )
              (vector-normalize! sv-224 1.0)
              (vector-flatten! sv-240 *up-vector* sv-224)
              (vector-normalize! sv-240 1.0)
              (vector-cross! s0-0 sv-224 sv-240)
              (vector-normalize! s0-0 1.0)
              (let ((a2-5 (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) sv-224 (-> obj shoot-angle))))
                (vector-orient-by-quat! sv-240 sv-240 a2-5)
                )
              (let* ((t9-9 quaternion-vector-angle!)
                     (a0-27 (new 'stack-no-clear 'quaternion))
                     (a2-6 (-> obj shoot-angle))
                     (a2-7 (t9-9 a0-27 sv-224 a2-6))
                     )
                (vector-orient-by-quat! s0-0 s0-0 a2-7)
                )
              (let ((a0-29 s1-1))
                (let ((v1-32 s3-0))
                  (let ((a1-17 (-> obj miss-amount)))
                    (.mov vf7 a1-17)
                    )
                  (.lvf vf5 (&-> sv-240 quad))
                  (.lvf vf4 (&-> v1-32 quad))
                  )
                (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf5 vf7 :mask #b111)
                (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                (.svf (&-> a0-29 quad) vf6)
                )
              (let ((v1-33 s3-0))
                (let ((a0-30 (* arg1 (-> obj miss-amount))))
                  (.mov vf7 a0-30)
                  )
                (.lvf vf5 (&-> s0-0 quad))
                (.lvf vf4 (&-> s1-1 quad))
                (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                (.mul.x.vf acc vf5 vf7 :mask #b111)
                (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                (.svf (&-> v1-33 quad) vf6)
                )
              )
            )
          (vector-! (-> s5-0 vel) s3-0 (-> s5-0 pos))
          (vector-normalize! (-> s5-0 vel) 409600.0)
          (vector-normalize! (-> s5-0 vel) 532480.0)
          (spawn-projectile predator-shot s5-0 obj *default-dead-pool*)
          )
        )
      )
    0
    (none)
    )
  )

(set! (-> *lightning-spec-id-table* 18) (new 'static 'lightning-spec
                                          :name "lightning-predator-shock-skel"
                                          :flags (lightning-spec-flags lsf0)
                                          :rand-func #x2
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 120.0
                                          :texture (new 'static 'texture-id :index #x83 :page #xc)
                                          :reduction 0.8
                                          :num-points 32
                                          :box-size 2048.0
                                          :merge-factor 0.8
                                          :merge-count 2
                                          :radius 2048.0
                                          :duration 30.0
                                          :sound (static-sound-spec "predator-zap")
                                          )
      )

(defmethod predator-method-183 predator ((obj predator))
  (with-pp
    (cond
      ((< (-> obj hit-points) 2)
       (when (!= (-> obj dest-fade) 128.0)
         (sound-play "pred-uncloak")
         (stop! (-> obj sound))
         (set! (-> obj sound) (the-as ambient-sound 0))
         0
         )
       (set! (-> obj dest-fade) 128.0)
       )
      (else
        (set! (-> obj dest-fade) 0.0)
        )
      )
    (seek! (-> obj fade) (-> obj dest-fade) (* 60.0 (-> pp clock seconds-per-frame)))
    (set! (-> obj draw force-fade) (the-as uint (the int (-> obj fade))))
    (cond
      ((zero? (-> obj draw force-fade))
       (setup-masks (-> obj draw) 8 0)
       (setup-masks (-> obj draw) 0 4)
       (logclear! (-> obj draw status) (draw-control-status force-fade warp-cross-fade))
       )
      ((= (-> obj draw force-fade) 128)
       (setup-masks (-> obj draw) 0 8)
       (setup-masks (-> obj draw) 4 0)
       (logclear! (-> obj draw status) (draw-control-status force-fade warp-cross-fade))
       )
      (else
        (setup-masks (-> obj draw) 8 0)
        (setup-masks (-> obj draw) 4 0)
        (logior! (-> obj draw status) (draw-control-status force-fade warp-cross-fade))
        )
      )
    (if (< 245760.0 (vector-vector-distance (-> obj root-override2 trans) (camera-pos)))
        (setup-masks (-> obj draw) 0 8)
        )
    (when (< (current-time) (the-as time-frame (-> obj shock-effect-end)))
      (when (>= (- (current-time) (-> obj shock-effect-time)) (seconds 0.04))
        (set! (-> obj shock-effect-time) (current-time))
        (process-drawable-shock-skel-effect
          obj
          (-> *lightning-spec-id-table* 18)
          lightning-probe-callback
          (-> *part-id-table* 166)
          2048.0
          -1
          -1
          )
        )
      )
    0
    (none)
    )
  )

(defstate active (predator)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (let ((f30-0 (get-rand-float-range self 0.9 1.1)))
      (until #f
        (ja-no-eval :group! predator-idle-ja
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-idle-ja) frames num-frames) -1)) f30-0)
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior predator) nav-enemy-simple-post)
  )

(defstate notice (predator)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior predator) enemy-event-handler)
  :enter (behavior ()
    (go-virtual hostile)
    (none)
    )
  )

(defstate idle (predator)
  :virtual #t
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy idle) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (predator-method-183 self)
    (none)
    )
  )

(defstate fire (predator)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior predator) enemy-event-handler)
  :enter (behavior ()
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-2 *game-info*)
           (v0-0 (+ (-> v1-2 attack-id) 1))
           )
      (set! (-> v1-2 attack-id) v0-0)
      (set! (-> self attack-id) v0-0)
      )
    (none)
    )
  :exit (behavior ()
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (none)
    )
  :trans (behavior ()
    (if (not (handle->process (-> self focus handle)))
        (go-virtual active)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      1.0
      (let ((gp-0 0))
        (set! (-> self shoot-angle) (* 182.04445 (rand-vu-float-range -45.0 45.0)))
        (ja-channel-push! 1 (seconds 0.2))
        (ja-no-eval :group! predator-shoot-guns0-ja
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-shoot-guns0-ja) frames num-frames) -1)))
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (when (and (< 9.0 (ja-frame-num 0)) (zero? gp-0))
            (set! gp-0 1)
            (predator-method-184 self 12 1.0)
            )
          (when (and (< 11.0 (ja-frame-num 0)) (= gp-0 1))
            (set! gp-0 2)
            (predator-method-184 self 16 -1.0)
            )
          (let ((s5-0 (handle->process (-> self focus handle))))
            (when s5-0
              (seek-toward-heading-vec!
                (-> self root-override2)
                (vector-!
                  (new 'stack-no-clear 'vector)
                  (get-trans (the-as process-focusable s5-0) 0)
                  (-> self root-override2 trans)
                  )
                32768.0
                (seconds 0.05)
                )
              (if (< (vector-vector-distance (-> self root-override2 trans) (get-trans (the-as process-focusable s5-0) 0))
                     24576.0
                     )
                  (go-virtual close-attack)
                  )
              )
            )
          (suspend)
          (ja :num! (seek!))
          )
        )
      (b! #t cfg-26 :delay (nop!))
      )
    (the-as none #f)
    (label cfg-26)
    (go-virtual hide)
    (none)
    )
  :post (the-as (function none :behavior predator) enemy-simple-post)
  )

(defstate close-attack (predator)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior predator) enemy-event-handler)
  :enter (behavior ()
    (set-dangerous! self #t)
    (set! (-> self enemy-flags) (logior (enemy-flag actor-pause-backup) (-> self enemy-flags)))
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-6 *game-info*)
           (a0-3 (+ (-> v1-6 attack-id) 1))
           )
      (set! (-> v1-6 attack-id) a0-3)
      (set! (-> self attack-id) a0-3)
      )
    (let ((v1-7 (-> self nav)))
      (set! (-> v1-7 target-speed) 0.0)
      )
    0
    (none)
    )
  :exit (behavior ()
    (set-dangerous! self #f)
    (if (logtest? (-> self enemy-flags) (enemy-flag check-water))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! predator-close-attack-ja
                :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-close-attack-ja) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (let ((v1-25 (-> self nav state)))
      (set! (-> v1-25 speed) 0.0)
      )
    0
    (ja-no-eval :group! predator-close-attack-recover-ja
                :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-close-attack-recover-ja) frames num-frames) -1)))
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (if (zero? (get-rand-int self 3))
        (sound-play "pred-talk")
        )
    (go-virtual hostile)
    (none)
    )
  :post (the-as (function none :behavior predator) nav-enemy-chase-post)
  )

(defstate hidden (predator)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior predator) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (set! (-> self next-change)
          (the-as uint (+ (current-time) (the int (* 300.0 (rand-vu-float-range 2.0 5.0)))))
          )
    (none)
    )
  :trans (behavior ()
    (predator-method-186 self)
    (let ((a0-1 (-> self nav state))
          (v1-3 (-> self hide-pos))
          )
      (logclear! (-> a0-1 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-1 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-1 target-post quad) (-> v1-3 quad))
      )
    0
    (let ((gp-0 (handle->process (-> self focus handle))))
      (if (not gp-0)
          (go-virtual active)
          )
      (when gp-0
        (if (< (vector-vector-xz-distance (get-trans (the-as process-focusable gp-0) 0) (-> self root-override2 trans))
               49152.0
               )
            (go-virtual hostile)
            )
        )
      )
    (if (< (the-as time-frame (-> self next-change)) (current-time))
        (go-virtual hide)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (ja-channel-push! 1 (seconds 0.2))
      (until (logtest? (-> self nav state flags) (nav-state-flag at-target))
        (ja-no-eval :group! predator-run0-ja
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-run0-ja) frames num-frames) -1)))
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        )
      (ja-channel-push! 1 (seconds 0.2))
      (until (not (logtest? (-> self nav state flags) (nav-state-flag at-target)))
        (ja-no-eval :group! predator-idle-ja
                    :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-idle-ja) frames num-frames) -1)))
                    :frame-num 0.0
                    )
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    #f
    (none)
    )
  :post (behavior ()
    (nav-enemy-method-176 self)
    (none)
    )
  )

(defstate hide (predator)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object :behavior predator) enemy-event-handler)
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (nav-enemy-method-166 self)
    (let ((v1-4 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-4 enemy-flags)))
          (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-4 enemy-flags))))
          )
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-4 enemy-flags))))
      (set! (-> v1-4 nav callback-info) (-> v1-4 enemy-info-override callback-info))
      )
    0
    (predator-method-187 self)
    (set! (-> self next-change) (the-as uint 0))
    0
    (none)
    )
  :trans (behavior ()
    (let ((gp-0 (handle->process (-> self focus handle))))
      (if (not gp-0)
          (go-virtual active)
          )
      (when gp-0
        (if (< (vector-vector-xz-distance (get-trans (the-as process-focusable gp-0) 0) (-> self root-override2 trans))
               65536.0
               )
            (go-virtual hostile)
            )
        (if (and (>= (- (current-time) (-> self state-time)) (seconds 0.5))
                 (check-los? (-> self los) 0)
                 (not (logtest? (-> self draw status) (draw-control-status on-screen)))
                 )
            (go-virtual fire)
            )
        )
      )
    (predator-method-186 self)
    (let ((a0-12 (-> self nav state))
          (v1-30 (-> self hide-pos))
          )
      (logclear! (-> a0-12 flags) (nav-state-flag directional-mode))
      (logior! (-> a0-12 flags) (nav-state-flag target-poly-dirty))
      (set! (-> a0-12 target-post quad) (-> v1-30 quad))
      )
    0
    (if (and (>= (- (current-time) (-> self state-time)) (seconds 0.5))
             (logtest? (-> self nav state flags) (nav-state-flag at-target))
             )
        (go-virtual hidden)
        )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (until #f
      (ja-no-eval :group! predator-run0-ja
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-run0-ja) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  :post (behavior ()
    (nav-enemy-method-176 self)
    (none)
    )
  )

(defstate hostile (predator)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self want-stop) #f)
    (set! (-> self state-time) (current-time))
    (set! (-> self next-change)
          (the-as uint (+ (current-time) (the int (* 300.0 (rand-vu-float-range 4.0 8.0)))))
          )
    (if (zero? (get-rand-int self 3))
        (sound-play "pred-talk")
        )
    (none)
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (>= (- (current-time) (-> self state-time)) (seconds 5))
        (go-virtual hide)
        )
    (let ((gp-0 (handle->process (-> self focus handle))))
      (if (not gp-0)
          (go-virtual active)
          )
      (when (get-enemy-target self)
        (when (and gp-0 (>= (- (current-time) (-> self state-time)) (-> self reaction-time)))
          (let ((f0-0
                  (vector-vector-xz-distance (get-trans (the-as process-focusable gp-0) 0) (-> self root-override2 trans))
                  )
                )
            (cond
              ((< f0-0 16384.0)
               (go-virtual close-attack)
               )
              ((< 57344.0 f0-0)
               (go-virtual hide)
               )
              )
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! predator-run0-ja
                :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-run0-ja) frames num-frames) -1)))
                :frame-num 6.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (until #f
      (ja-no-eval :group! predator-run0-ja
                  :num! (seek! (the float (+ (-> (the-as art-joint-anim predator-run0-ja) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod predator-method-186 predator ((obj predator))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((f30-0 0.0)
          (s5-0 -1)
          (s4-0 (-> *predator-graph* node (-> obj curr-node)))
          )
      (dotimes (s3-0 32)
        (when (logtest? (the-as int (-> s4-0 points)) (ash 1 s3-0))
          (let ((s1-0 (new 'stack-no-clear 'vector))
                (s2-0 (new 'stack-no-clear 'vector))
                )
            (vector-rotate-around-y! s1-0 *x-vector* (* 182.04445 (* 11.25 (the float s3-0))))
            (let ((a0-6 s2-0))
              (let ((v1-7 (-> s4-0 position)))
                (let ((a1-3 (-> s4-0 radius)))
                  (.mov vf7 a1-3)
                  )
                (.lvf vf5 (&-> s1-0 quad))
                (.lvf vf4 (&-> v1-7 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> a0-6 quad) vf6)
              )
            (let ((f0-3 (vector-vector-distance (target-pos 0) s2-0)))
              (when (or (= s5-0 -1) (< f30-0 f0-3))
                (set! s5-0 s3-0)
                (set! f30-0 f0-3)
                (set! (-> obj hide-pos quad) (-> s2-0 quad))
                )
              )
            )
          )
        )
      )
    (none)
    )
  )

(defmethod predator-method-185 predator ((obj predator))
  (let ((f30-0 0.0)
        (s5-0 -1)
        )
    -1
    (dotimes (s4-0 (the-as int (-> *predator-graph* node-count)))
      (let* ((s3-0 (-> *predator-graph* node s4-0))
             (f0-0 (vector-vector-distance (-> s3-0 position) (-> obj root-override2 trans)))
             )
        (when (and (not (logtest? (-> s3-0 flags) (predator-node-flag taken))) (or (= s5-0 -1) (< f0-0 f30-0)))
          (set! f30-0 f0-0)
          (set! s5-0 s4-0)
          )
        )
      )
    (set! (-> obj curr-node) s5-0)
    (logior! (-> *predator-graph* node s5-0 flags) (predator-node-flag taken))
    )
  (predator-method-186 obj)
  (none)
  )

(defmethod predator-method-187 predator ((obj predator))
  (let* ((s5-0 (-> *predator-graph* node (-> obj curr-node)))
         (s4-0 (rand-vu-int-count (-> s5-0 edge-count)))
         )
    (dotimes (s3-0 (-> s5-0 edge-count))
      (let* ((s2-0
               (-> (the-as (pointer uint16) (+ (* (+ (-> s5-0 edge-index) (mod (+ s3-0 s4-0) (-> s5-0 edge-count))) 16)
                                               (the-as int (-> *predator-graph* edge))
                                               )
                           )
                   )
               )
             (s1-0 (-> *predator-graph* node s2-0))
             )
        (when (and (not (point-in-line-region? (target-pos 0) (-> s5-0 position) (-> s1-0 position) 61440.0))
                   (not (logtest? (-> s1-0 flags) (predator-node-flag taken)))
                   )
          (logior! (-> s1-0 flags) (predator-node-flag taken))
          (logclear! (-> s5-0 flags) (predator-node-flag taken))
          (set! (-> obj curr-node) (the-as int s2-0))
          (return #t)
          )
        )
      )
    )
  #f
  )

(defmethod track-target! predator ((obj predator))
  "Does a lot of various things relating to interacting with the target
- tracks when the enemy was last drawn
- looks at the target and handles attacking
@TODO Not extremely well understood yet"
  (let ((t9-0 (method-of-type nav-enemy track-target!)))
    (t9-0 obj)
    )
  (predator-method-183 obj)
  (los-control-method-9 (-> obj los) (the-as process-focusable #f) (the-as vector #f) 2048.0)
  (when (nonzero? (-> obj sound))
    (update-trans! (-> obj sound) (-> obj root-override2 trans))
    (update! (-> obj sound))
    )
  (none)
  )

(defmethod set-dangerous! predator ((obj predator) (arg0 symbol))
  (let ((v1-1 (-> obj root-override2 root-prim)))
    (dotimes (a0-1 (the-as int (-> v1-1 specific 0)))
      (let ((a2-1 (-> (the-as collide-shape-prim-group v1-1) child a0-1)))
        (if arg0
            (logior! (-> a2-1 prim-core action) (collide-action deadly))
            (logclear! (-> a2-1 prim-core action) (collide-action deadly))
            )
        )
      )
    )
  #f
  )

(defmethod init-enemy-collision! predator ((obj predator))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 11264.0 0.0 17203.2)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with) (collide-spec jak bot crate hit-by-others-list player-list))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 5120.0 0.0 5120.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-15 transform-index) 16)
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 3276.8)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-17 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-17 transform-index) 12)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 0.0 3276.8)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-19 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-19 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-19 local-sphere) 0.0 9216.0 0.0 5120.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-with) (collide-spec backgnd obstacle hit-by-others-list))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set-vector! (-> v1-21 local-sphere) 0.0 12288.0 0.0 12288.0)
      )
    (set! (-> s5-0 nav-radius) 6144.0)
    (let ((v1-23 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-23 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-23 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> obj root-override2) s5-0)
    )
  0
  (none)
  )

;; WARN: Return type mismatch process-focusable vs predator.
(defmethod relocate predator ((obj predator) (arg0 int))
  (the-as
    predator
    ((the-as (function process-focusable int process-focusable) (find-parent-method predator 7)) obj arg0)
    )
  )

(defmethod nav-enemy-method-167 predator ((obj predator))
  (let ((v1-0 (-> obj nav)))
    (set! (-> v1-0 target-speed) 0.0)
    )
  0
  (let ((v1-2 (-> obj nav)))
    (set! (-> v1-2 acceleration) (-> obj enemy-info-override walk-acceleration))
    )
  0
  0
  (none)
  )

(defmethod run-logic? predator ((obj predator))
  #t
  )

;; WARN: Return type mismatch none vs symbol.
(defmethod enemy-method-63 predator ((obj predator) (arg0 process-focusable) (arg1 enemy-aware))
  (let ((t9-0 (method-of-type nav-enemy enemy-method-63)))
    (the-as symbol (if (t9-0 obj arg0 arg1)
                       (set-dst-proc! (-> obj los) (-> obj focus handle))
                       )
            )
    )
  )

;; WARN: Return type mismatch entity-perm-status vs none.
(defmethod init-from-entity! predator ((obj predator) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (process-entity-status! obj (entity-perm-status dead) #t)
  (none)
  )

(defmethod init-enemy-behaviour-and-stats! predator ((obj predator) (arg0 nav-enemy-info))
  "Initializes a bunch of enemy fields related to how they should react, how many hitpoints they should have, etc"
  (set! (-> arg0 nav-mesh) *default-nav-mesh*)
  (let ((t9-0 (method-of-type nav-enemy init-enemy-behaviour-and-stats!)))
    (t9-0 obj arg0)
    )
  (logclear! (-> obj mask) (process-mask actor-pause))
  (logclear! (-> obj enemy-flags) (enemy-flag notice))
  0
  (none)
  )

(defmethod init-enemy! predator ((obj predator))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-predator" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (init-enemy-behaviour-and-stats! obj *predator-nav-enemy-info*)
  (let ((v1-5 (-> obj nav)))
    (set! (-> v1-5 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> obj root-override2 dynam) 327680.0)
  (add-connection *part-engine* obj 8 obj 318 (new 'static 'vector :x 1228.8 :y 450.56 :z 983.04 :w 614400.0))
  (add-connection *part-engine* obj 8 obj 318 (new 'static 'vector :x -1228.8 :y 450.56 :z 983.04 :w 614400.0))
  (new-source! (-> obj los) obj (seconds 0.2) (collide-spec backgnd enemy obstacle))
  (setup-masks (-> obj draw) 8 0)
  (setup-masks (-> obj draw) 4 0)
  (logior! (-> obj draw status) (draw-control-status force-fade warp-cross-fade))
  (set! (-> obj draw force-fade) (the-as uint 0))
  (set! (-> obj fade) 0.0)
  (set! (-> obj dest-fade) 0.0)
  (set! (-> obj curr-node) -1)
  (set! (-> obj next-change) (the-as uint 0))
  (set! (-> obj miss-amount) 16384.0)
  (set! (-> obj ambient-sound-id) (new 'static 'sound-id))
  (predator-method-185 obj)
  (set! (-> obj sound) (new
                         'process
                         'ambient-sound
                         (static-sound-spec "pred-hum" :fo-min 2 :fo-max 30)
                         (-> obj root-override2 trans)
                         )
        )
  (set! (-> obj enemy-flags) (logior (enemy-flag trackable-backup enable-on-hostile) (-> obj enemy-flags)))
  (add-icon! *minimap* obj (the-as uint 16) (the-as int #f) (the-as vector #t) 0)
  0
  (none)
  )

(deftype predator-manager (process)
  ((predator-count    uint32                   :offset-assert 128)
   (predator-h        handle                32 :offset-assert 136)
   (hud-counter       handle                   :offset-assert 392)
   (actor-group       (pointer actor-group)    :offset-assert 400)
   (actor-group-count int32                    :offset-assert 404)
   )
  :heap-base #x120
  :method-count-assert 17
  :size-assert         #x198
  :flag-assert         #x1101200198
  (:methods
    (idle () _type_ :state 14)
    (closed () _type_ :state 15)
    (predator-manager-method-16 (_type_) none 16)
    )
  )


(define *predator-manager* (the-as predator-manager #f))

;; WARN: Return type mismatch process vs predator-manager.
(defmethod relocate predator-manager ((obj predator-manager) (arg0 int))
  (set! *predator-manager* obj)
  (if *predator-manager*
      (set! *predator-manager* (&+ *predator-manager* arg0))
      )
  (the-as predator-manager ((method-of-type process relocate) obj arg0))
  )

(defmethod predator-manager-method-16 predator-manager ((obj predator-manager))
  0
  (none)
  )

(defstate idle (predator-manager)
  :virtual #t
  :enter (behavior ()
    (set! (-> self hud-counter) (ppointer->handle (process-spawn hud-predator :init hud-init-by-other :to self)))
    (none)
    )
  :exit (behavior ()
    (when (-> self hud-counter)
      (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
      (set! (-> self hud-counter) (the-as handle #f))
      )
    (none)
    )
  :trans (behavior ()
    (predator-manager-method-16 self)
    (let ((gp-0 0))
      (dotimes (v1-2 (the-as int (-> self predator-count)))
        (if (handle->process (-> self predator-h v1-2))
            (+! gp-0 1)
            )
        )
      (dotimes (s5-0 (length (-> self actor-group 0)))
        (if (not (logtest? (-> self actor-group 0 data s5-0 actor extra perm status) (entity-perm-status dead)))
            (+! gp-0 1)
            )
        )
      (set! (-> *game-info* counter) (the float gp-0))
      (when (zero? gp-0)
        (task-node-close! (game-task-node forest-hunt-resolution))
        (when (-> self hud-counter)
          (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
          (set! (-> self hud-counter) (the-as handle #f))
          (talker-spawn-func (-> *talker-speech* 89) *entity-pool* (target-pos 0) (the-as region #f))
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior predator-manager) sleep-code)
  )

(defstate closed (predator-manager)
  :virtual #t
  :code (the-as (function none :behavior predator-manager) sleep-code)
  )

;; WARN: Return type mismatch object vs none.
;; WARN: new jak 2 until loop case, check carefully
(defmethod init-from-entity! predator-manager ((obj predator-manager) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (local-vars (sv-16 res-tag))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (cond
      ((task-node-closed? (game-task-node forest-hunt-resolution))
       (go (method-of-object obj closed))
       )
      (else
        (dotimes (v1-2 (the-as int (-> *predator-graph* node-count)))
          (let ((a0-4 (-> *predator-graph* node v1-2)))
            (logior! (-> a0-4 flags) (predator-node-flag spawnable))
            (logclear! (-> a0-4 flags) (predator-node-flag taken))
            )
          )
        (set! sv-16 (new 'static 'res-tag))
        (let ((v1-6 (res-lump-data (-> obj entity) 'actor-groups pointer :tag-ptr (& sv-16))))
          (cond
            ((and v1-6 (nonzero? (-> sv-16 elt-count)))
             (set! (-> obj actor-group) (the-as (pointer actor-group) v1-6))
             (set! (-> obj actor-group-count) (the-as int (-> sv-16 elt-count)))
             )
            (else
              (set! (-> obj actor-group) (the-as (pointer actor-group) #f))
              (set! (-> obj actor-group-count) 0)
              (go process-drawable-art-error "actor-group predator-manager")
              )
            )
          )
        (dotimes (s5-0 (length (-> obj actor-group 0)))
          (let ((t0-1 (-> obj actor-group 0 data s5-0 actor)))
            (if t0-1
                (add-icon! *minimap* obj (the-as uint 16) (the-as int #f) (the-as vector t0-1) 0)
                )
            )
          )
        (dotimes (s5-1 (the-as int (-> *predator-graph* node-count)))
          (let ((s4-0 (-> *predator-graph* node s5-1)))
            (when (logtest? (-> s4-0 flags) (predator-node-flag spawnable))
              (dotimes (s3-0 (the-as int (-> *predator-graph* node-count)))
                (let ((s2-0 (-> *predator-graph* node s3-0)))
                  (when (and (!= s5-1 s3-0) (logtest? (-> s2-0 flags) (predator-node-flag spawnable)))
                    (if (< (vector-vector-distance (-> s4-0 position) (-> s2-0 position)) 180224.0)
                        (logclear! (-> s2-0 flags) (predator-node-flag spawnable))
                        )
                    )
                  )
                )
              )
            )
          )
        (let ((s5-2 0))
          (dotimes (s4-1 (the-as int (-> *predator-graph* node-count)))
            (let ((s3-1 (-> *predator-graph* node s4-1)))
              (when (logtest? (-> s3-1 flags) (predator-node-flag spawnable))
                (let ((s2-1 (new 'stack-no-clear 'transformq)))
                  (new 'stack-no-clear 'vector)
                  (let ((s0-0 (new 'stack-no-clear 'vector))
                        (s1-0 (new 'stack-no-clear 'vector))
                        )
                    (let ((v1-52 0))
                      (until #f
                        (when (logtest? (-> s3-1 points) (ash 1 v1-52))
                          (vector-rotate-around-y! s0-0 *x-vector* (* 182.04445 (* 11.25 (the float v1-52))))
                          (let ((a0-29 s1-0))
                            (let ((v1-53 (-> s3-1 position)))
                              (let ((a1-17 (-> s3-1 radius)))
                                (.mov vf7 a1-17)
                                )
                              (.lvf vf5 (&-> s0-0 quad))
                              (.lvf vf4 (&-> v1-53 quad))
                              )
                            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                            (.mul.x.vf acc vf5 vf7 :mask #b111)
                            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                            (.svf (&-> a0-29 quad) vf6)
                            )
                          (goto cfg-40)
                          )
                        (+! v1-52 1)
                        )
                      )
                    #f
                    (label cfg-40)
                    (set! (-> s2-1 trans quad) (-> s1-0 quad))
                    )
                  (quaternion-copy! (-> s2-1 quat) *unity-quaternion*)
                  (set! (-> s2-1 scale x) (the-as float (-> obj actor-group 1 data s5-2 actor)))
                  (set! (-> s2-1 scale y) (the-as float #f))
                  (set! (-> s2-1 scale z) (the-as float #f))
                  (let* ((s1-2 (ppointer->process (process-spawn predator :init enemy-init-by-other obj s2-1 :to obj)))
                         (s2-2 (if (type? s1-2 process-focusable)
                                   s1-2
                                   )
                               )
                         (s3-2 (entity-nav-mesh-by-aid (the-as actor-id (-> s3-1 nav-mesh-id))))
                         (v1-66 (if (type? s3-2 entity-nav-mesh)
                                    s3-2
                                    )
                                )
                         )
                    (set! (-> obj predator-h (-> obj predator-count)) (process->handle (the-as process s2-2)))
                    (+! (-> obj predator-count) 1)
                    (when v1-66
                      (change-to (-> v1-66 nav-mesh) (the-as process-drawable s2-2))
                      (let ((v1-70 (-> (the-as process-drawable s2-2) nav state)))
                        (set! (-> v1-70 current-poly) (the-as nav-poly #f))
                        )
                      0
                      )
                    )
                  )
                (+! s5-2 1)
                )
              )
            )
          )
        (go (method-of-object obj idle))
        )
      )
    (none)
    )
  )
