;;-*-Lisp-*-
(in-package goal)

;; name: nav-enemy-h.gc
;; name in dgo: nav-enemy-h
;; dgos: GAME, COMMON

;; DECOMP BEGINS

(defenum enemy-flag
   :type int64
   :bitfield #t
   (lock-focus 0)
   (death-start 1)
   (enable-on-active 2)
   (checking-water 3)
   (check-water 4)
   (spawn-gem 5)
   (chase-startup 6)
   (attackable-backup 7)
   (look-at-focus 8)
   (use-notice-distance 9)
   (enable-on-notice 10)
   (look-at-move-dest 11)
   (notice 12)
   (auto-reset-penetrate 13)
   (jump-check-blocked 14)
   (drawn-mirrored 15)
   (multi-focus 16)
   (alert 17)
   (victory 18)
   (dangerous-backup 19)
   (actor-pause-backup 20)
   (trackable 21)
   (called-dying 22)
   (check-water-backup 23)
   (no-initial-move-to-ground 24)
   (cam-attack-mode 25)
   (trackable-backup 26)
   (enable-on-hostile 27)
   (directed-ready 28)
   (use-trigger 29)
   (directed 30)
   (dislike-combo 31)
   (recover-applied-velocity 32)
   (vulnerable-backup 33)
   (vulnerable 34)
   (recover 35)
   )

(deftype enemy-focus (focus)
  ((aware uint64  :offset-assert 16)
   (flags uint64  :offset-assert 24)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  (:methods
    (enemy-focus-method-13 () none 13)
    )
  )

(deftype enemy-info (basic)
  ((fact-defaults                       basic           :offset-assert 4)
   (use-die-falling                     basic           :offset-assert 8)
   (use-victory                         basic           :offset-assert 12)
   (use-jump-blocked                    basic           :offset-assert 16)
   (debug-draw-neck                     basic           :offset-assert 20)
   (jump-debug-draw                     basic           :offset-assert 24)
   (move-to-ground                      basic           :offset-assert 28)
   (hover-if-no-ground                  basic           :offset-assert 32)
   (idle-anim-script                    uint32          :offset-assert 36)
   (idle-anim                           int32           :offset-assert 40)
   (notice-anim                         int32           :offset-assert 44)
   (hostile-anim                        int32           :offset-assert 48)
   (hit-anim                            int32           :offset-assert 52)
   (knocked-anim                        int32           :offset-assert 56)
   (knocked-land-anim                   int32           :offset-assert 60)
   (die-anim                            int32           :offset-assert 64)
   (die-falling-anim                    int32           :offset-assert 68)
   (victory-anim                        int32           :offset-assert 72)
   (jump-wind-up-anim                   int32           :offset-assert 76)
   (jump-in-air-anim                    int32           :offset-assert 80)
   (jump-land-anim                      int32           :offset-assert 84)
   (neck-joint                          int32           :offset-assert 88)
   (look-at-joint                       int32           :offset-assert 92)
   (bullseye-joint                      int32           :offset-assert 96)
   (sound-hit                           uint128         :offset-assert 112)
   (sound-die                           uint128         :offset-assert 128)
   (notice-distance                     meters          :offset-assert 144)
   (notice-distance-delta               meters          :offset-assert 148)
   (proximity-notice-distance           meters          :offset-assert 152)
   (default-hit-points                  int32           :offset-assert 156)
   (gnd-collide-with                    uint32          :offset-assert 160)
   (overlaps-others-collide-with-filter uint32          :offset-assert 164)
   (penetrate-flinch                    uint64          :offset-assert 168)
   (penetrate-knocked                   uint64          :offset-assert 176)
   (movement-gravity                    meters          :offset-assert 184)
   (friction                            float           :offset-assert 188)
   (slip-factor                         float           :offset-assert 192)
   (attack-shove-back                   meters          :offset-assert 196)
   (attack-shove-up                     meters          :offset-assert 200)
   (attack-mode                         basic           :offset-assert 204)
   (attack-damage                       int32           :offset-assert 208)
   (recover-gnd-collide-with            uint32          :offset-assert 212)
   (jump-height-min                     meters          :offset-assert 216)
   (jump-height-factor                  float           :offset-assert 220)
   (knocked-seek-ry-clamp               float           :offset-assert 224)
   (knocked-soft-vxz-lo                 float           :offset-assert 228)
   (knocked-soft-vxz-hi                 float           :offset-assert 232)
   (knocked-soft-vy-lo                  float           :offset-assert 236)
   (knocked-soft-vy-hi                  float           :offset-assert 240)
   (knocked-medium-vxz-lo               float           :offset-assert 244)
   (knocked-medium-vxz-hi               float           :offset-assert 248)
   (knocked-medium-vy-lo                float           :offset-assert 252)
   (knocked-medium-vy-hi                float           :offset-assert 256)
   (knocked-hard-vxz-lo                 float           :offset-assert 260)
   (knocked-hard-vxz-hi                 float           :offset-assert 264)
   (knocked-hard-vy-lo                  float           :offset-assert 268)
   (knocked-hard-vy-hi                  float           :offset-assert 272)
   (knocked-huge-vxz-lo                 float           :offset-assert 276)
   (knocked-huge-vxz-hi                 float           :offset-assert 280)
   (knocked-huge-vy-lo                  float           :offset-assert 284)
   (knocked-huge-vy-hi                  float           :offset-assert 288)
   (knocked-yellow-vxz-lo               float           :offset-assert 292)
   (knocked-yellow-vxz-hi               float           :offset-assert 296)
   (knocked-yellow-vy-lo                float           :offset-assert 300)
   (knocked-yellow-vy-hi                float           :offset-assert 304)
   (knocked-red-vxz-lo                  float           :offset-assert 308)
   (knocked-red-vxz-hi                  float           :offset-assert 312)
   (knocked-red-vy-lo                   float           :offset-assert 316)
   (knocked-red-vy-hi                   float           :offset-assert 320)
   (knocked-blue-vxz-lo                 float           :offset-assert 324)
   (knocked-blue-vxz-hi                 float           :offset-assert 328)
   (knocked-blue-vy-lo                  float           :offset-assert 332)
   (knocked-blue-vy-hi                  float           :offset-assert 336)
   (shadow-size                         meters          :offset-assert 340)
   (shadow-max-y                        meters          :offset-assert 344)
   (shadow-min-y                        meters          :offset-assert 348)
   (shadow-locus-dist                   meters          :offset-assert 352)
   (gem-joint                           int32           :offset-assert 356)
   (gem-seg                             uint32          :offset-assert 360)
   (gem-no-seg                          uint32          :offset-assert 364)
   (gem-offset                          sphere  :inline :offset-assert 368)
   )
  :method-count-assert 10
  :size-assert         #x180
  :flag-assert         #xa00000180
  (:methods
    (enemy-info-method-9 () none 9)
    )
  )

(deftype enemy-knocked-info (structure)
  ((anim-speed         float   :offset-assert 0)
   (on-surface-count   int32   :offset-assert 4)
   (move-count         int32   :offset-assert 8)
   (land-can-land-time time-frame  :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype enemy-jump-info (structure)
  ((flags      uint8              :offset-assert 0)
   (anim-speed float              :offset-assert 4)
   (hang-time  time-frame             :offset-assert 8)
   (start-pos  vector     :inline :offset-assert 16)
   (dest-pos   vector     :inline :offset-assert 32)
   (traj       trajectory :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype enemy-init-by-other-params (structure)
  ((trans                      vector     :inline :offset-assert 0)
   (quat                       quaternion :inline :offset-assert 16)
   (entity                     basic              :offset-assert 32)
   (directed?                  basic              :offset-assert 36)
   (no-initial-move-to-ground? basic              :offset-assert 40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype enemy-attack-info (structure)
  ((attack-id         uint32         :offset-assert 0)
   (knocked-type      uint8          :offset-assert 4)
   (blue-juggle-count uint8          :offset-assert 5)
   (attacker-handle   uint64         :offset-assert 8)
   (attack-time       time-frame     :offset-assert 16)
   (penetrate-using   uint64         :offset-assert 24)
   (attacker-pos      vector :inline :offset-assert 32)
   (attack-direction  vector :inline :offset-assert 48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype enemy-best-focus (structure)
  ((proc   basic   :offset-assert 0)
   (rating float   :offset-assert 4)
   (aware  uint64  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
(deftype nav-enemy (enemy)
  ((frustration-point       vector :inline :offset-assert 544)
   (move-dest               vector :inline :offset-assert 560)
   (frustration-time        time-frame         :offset-assert 576) ;; time-frame
   (blocked-start-time      time-frame         :offset-assert 584)
   (restore-nav-radius-time time-frame         :offset-assert 592)
   (nav-radius-backup       float          :offset-assert 600)
   (circle-radial-dist      float          :offset 244)
   )
  :method-count-assert 178
  :size-assert         #x25c
  :flag-assert         #xb201e0025c
  (:methods
    (nav-enemy-method-137 () none 137)
    (nav-enemy-method-138 () none 138)
    (nav-enemy-method-139 () none 139)
    (nav-enemy-method-140 () none 140)
    (nav-enemy-method-141 () none 141)
    (nav-enemy-method-142 () none 142)
    (nav-enemy-method-143 () none 143)
    (nav-enemy-method-144 () none 144)
    (nav-enemy-method-145 () none 145)
    (nav-enemy-method-146 () none 146)
    (nav-enemy-method-147 () none 147)
    (nav-enemy-method-148 () none 148)
    (nav-enemy-method-149 () none 149)
    (nav-enemy-method-150 () none 150)
    (nav-enemy-method-151 () none 151)
    (nav-enemy-method-152 () none 152)
    (nav-enemy-method-153 () none 153)
    (nav-enemy-method-154 () none 154)
    (nav-enemy-method-155 () none 155)
    (nav-enemy-method-156 () none 156)
    (nav-enemy-method-157 () none 157)
    (nav-enemy-method-158 () none 158)
    (nav-enemy-method-159 () none 159)
    (nav-enemy-method-160 () none 160)
    (nav-enemy-method-161 () none 161)
    (nav-enemy-method-162 () none 162)
    (nav-enemy-method-163 () none 163)
    (nav-enemy-method-164 () none 164)
    (nav-enemy-method-165 () none 165)
    (nav-enemy-method-166 () none 166)
    (nav-enemy-method-167 () none 167)
    (nav-enemy-method-168 () none 168)
    (nav-enemy-method-169 () none 169)
    (nav-enemy-method-170 () none 170)
    (nav-enemy-method-171 () none 171)
    (nav-enemy-method-172 () none 172)
    (nav-enemy-method-173 () none 173)
    (nav-enemy-method-174 () none 174)
    (nav-enemy-method-175 () none 175)
    (nav-enemy-method-176 () none 176)
    (nav-enemy-method-177 () none 177)
    )
  )
