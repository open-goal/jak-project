;;-*-Lisp-*-
(in-package goal)

;; name: main.gc
;; name in dgo: main
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(defun end-display ((arg0 display))
  (let ((s5-0 (-> (if *debug-segment*
                      (-> arg0 frames (-> arg0 on-screen) debug-buf)
                      (-> arg0 frames (-> arg0 on-screen) global-buf)
                      )
                  base
                  )
              )
        )
    ; (when *debug-segment*
    ;   (debug-draw-buffers)
    ;   (let* ((s3-0 (-> arg0 frames (-> arg0 on-screen) debug-buf))
    ;          (s4-0 (-> s3-0 base))
    ;          )
    ;     (when (or *display-profile* *stats-profile-bars*)
    ;       (setup-categories! (-> arg0 frames (-> arg0 on-screen) profile-array))
    ;       (let ((a2-0 7))
    ;         (if *display-profile*
    ;             (draw-bars! *profile-array* s3-0 a2-0)
    ;             )
    ;         )
    ;       (if (and (!= *master-mode* 'menu) *stats-profile-bars*)
    ;           (draw-text! *profile-array*)
    ;           )
    ;       )
    ;     (when *display-deci-count*
    ;       (let ((s2-0 draw-string-xy))
    ;         (format (clear *temp-string*) "~D" *deci-count*)
    ;         (s2-0 *temp-string* s3-0 448 210 (font-color default) (font-flags shadow))
    ;         )
    ;       )
    ;     (display-file-info)
    ;     (let ((a3-1 (-> s3-0 base)))
    ;       (let ((v1-37 (the-as dma-packet (-> s3-0 base))))
    ;         (set! (-> v1-37 dma) (new 'static 'dma-tag :id (dma-tag-id next)))
    ;         (set! (-> v1-37 vif0) (new 'static 'vif-tag))
    ;         (set! (-> v1-37 vif1) (new 'static 'vif-tag))
    ;         (set! (-> s3-0 base) (the-as pointer (&+ v1-37 16)))
    ;         )
    ;       (dma-bucket-insert-tag
    ;         (the-as (inline-array dma-bucket) (-> *display* frames (-> *display* on-screen) bucket-group))
    ;         (bucket-id debug-no-zbuf)
    ;         s4-0
    ;         (the-as (pointer dma-tag) a3-1)
    ;         )
    ;       )
    ;     )
    ;   )
    ; (let* ((s3-1 (if *debug-segment*
    ;                  (-> arg0 frames (-> arg0 on-screen) debug-buf)
    ;                  (-> arg0 frames (-> arg0 on-screen) global-buf)
    ;                  )
    ;              )
    ;        (s4-1 (-> s3-1 base))
    ;        )
    ;   (if (and (= *master-mode* 'pause)
    ;            (and (!= *cheat-mode* 'camera) (or (zero? *screen-shot-work*) (= (-> *screen-shot-work* count) -1)))
    ;            )
    ;       (draw-string-xy
    ;         (lookup-text! *common-text* (game-text-id pause) #f)
    ;         s3-1
    ;         256
    ;         (if (< (-> *display* base-clock frame-counter) (-> *game-info* letterbox-time))
    ;             352
    ;             320
    ;             )
    ;         (font-color orange-red)
    ;         (font-flags shadow kerning middle large)
    ;         )
    ;       )
    ;   (let ((s2-2 (the int (-> *font-context* origin y))))
    ;     (cond
    ;       ((or (movie?) (< (-> *display* base-clock frame-counter) (-> *game-info* letterbox-time)))
    ;        (+! s2-2 56)
    ;        )
    ;       (*display-profile*
    ;         (+! s2-2 48)
    ;         )
    ;       )
    ;     (when (or (zero? *screen-shot-work*) (= (-> *screen-shot-work* count) -1))
    ;       (let* ((v1-82
    ;                (draw-string-xy
    ;                  *stdcon0*
    ;                  s3-1
    ;                  (the int (-> *font-context* origin x))
    ;                  s2-2
    ;                  (font-color default)
    ;                  (font-flags shadow)
    ;                  )
    ;                )
    ;              (a3-6 (+ s2-2 (the int (* 2.0 (the-as float (gpr->fpr (sar (the-as int v1-82) 32)))))))
    ;              )
    ;         (draw-string-xy
    ;           *stdcon1*
    ;           s3-1
    ;           (the int (-> *font-context* origin x))
    ;           a3-6
    ;           (font-color default)
    ;           (font-flags shadow)
    ;           )
    ;         )
    ;       )
    ;     )
    ;   (if *display-iop-info*
    ;       (show-iop-info s3-1)
    ;       )
    ;   (if *display-memcard-info*
    ;       (show-mc-info s3-1)
    ;       )
    ;   (let ((a3-7 (-> s3-1 base)))
    ;     (let ((v1-94 (the-as dma-packet (-> s3-1 base))))
    ;       (set! (-> v1-94 dma) (new 'static 'dma-tag :id (dma-tag-id next)))
    ;       (set! (-> v1-94 vif0) (new 'static 'vif-tag))
    ;       (set! (-> v1-94 vif1) (new 'static 'vif-tag))
    ;       (set! (-> s3-1 base) (the-as pointer (&+ v1-94 16)))
    ;       )
    ;     (dma-bucket-insert-tag
    ;       (the-as (inline-array dma-bucket) (-> *display* frames (-> *display* on-screen) bucket-group))
    ;       (bucket-id debug-no-zbuf)
    ;       s4-1
    ;       (the-as (pointer dma-tag) a3-7)
    ;       )
    ;     )
    ;   )
    ; (let ((v1-101 *dma-mem-usage*))
    ;   (when (nonzero? v1-101)
    ;     (set! (-> v1-101 length) (max 88 (-> v1-101 length)))
    ;     (set! (-> v1-101 data 87 name) "debug")
    ;     (+! (-> v1-101 data 87 count) 1)
    ;     (+! (-> v1-101 data 87 used) (&-
    ;                                    (-> (if *debug-segment*
    ;                                            (-> arg0 frames (-> arg0 on-screen) debug-buf)
    ;                                            (-> arg0 frames (-> arg0 on-screen) global-buf)
    ;                                            )
    ;                                        base
    ;                                        )
    ;                                    (the-as uint s5-0)
    ;                                    )
    ;         )
    ;     (set! (-> v1-101 data 87 total) (-> v1-101 data 87 used))
    ;     )
    ;   )
    ; )
  (set! *stdcon* (clear *stdcon0*))
  0
  (none)
  )

(defun display-loop-main ((arg0 display))
  (local-vars (a0-94 int) (a0-96 int))
  (with-pp

    ; ;; LOAD LEVEL
    ; (if (-> *level* loading-level)
    ;     (load-continue (-> *level* loading-level))
    ;     )

    ; ;; Run blerc to modify foreground models for
    ; (with-profiler 'merc *profile-merc-color*
    ;   (blerc-execute)
    ;   (blerc-init)
    ;   )

    ; ;; Run
    ; (texscroll-execute)
    ; (ripple-execute)
    ; (region-execute)

    ; (with-profiler 'joints *profile-joints-color*
    ;   (execute-math-engine)
    ;   )


    ; (with-profiler 'debug *profile-debug-color*
    ;   (let* ((s5-5 *debug-hook*)
    ;          (t9-12 (car s5-5)))
    ;     (while (not (null? s5-5))
    ;       ((the-as (function none) t9-12))
    ;       (set! s5-5 (cdr s5-5))
    ;       (set! t9-12 (car s5-5))
    ;       )
    ;     )
    ;   (main-cheats)
    ;   )

    ; (with-profiler 'camera *profile-camera-color*
    ;   (update-camera)
    ;   )

    ; (update *bigmap*)

    ; (if (-> *level* loading-level)
    ;     (load-continue (-> *level* loading-level))
    ;     )

    ; (with-profiler 'draw-hook *profile-draw-hook-color*
    ;   (*draw-hook*)
    ;   )

    ; (if (-> *level* loading-level)
    ;     (load-continue (-> *level* loading-level))
    ;     )

    ; (if *display-color-bars*
    ;     (draw-color-bars)
    ;     )

    ; (with-profiler 'menu-hook *profile-menu-hook-color*
    ;   (*menu-hook*)
    ;   )

    ; (load-level-text-files -1)

    ; (if (-> *screen-filter* draw?)
    ;     (draw *screen-filter*)
    ;     )

    ; (when (or (movie?) (< (-> *display* base-clock frame-counter) (-> *game-info* letterbox-time)))
    ;   (if (< (-> *game-info* letterbox-time) (-> *display* base-clock frame-counter))
    ;       (set! (-> *game-info* letterbox-time) (-> *display* base-clock frame-counter))
    ;       )
    ;   (if (and (= (-> *setting-control* user-current aspect-ratio) 'aspect4x3)
    ;            (or (zero? *screen-shot-work*) (= (-> *screen-shot-work* count) -1))
    ;            )
    ;       (letterbox)
    ;       )
    ;   )

    ; (when (-> *setting-control* user-current render)
    ;   (if (< (-> *display* base-clock frame-counter) (-> *game-info* blackout-time))
    ;       (set! (-> *setting-control* user-default bg-a-force) 1.0)
    ;       (set! (-> *setting-control* user-default bg-a-force) 0.0)
    ;       )
    ;   )

    ; (blit-displays)


    ; (when *debug-segment*
    ;   (let ((s5-13 (-> arg0 frames (-> arg0 on-screen) profile-array data 0)))
    ;     (when (and *dproc* *debug-segment*)
    ;       (let* ((v1-294 (+ (-> s5-13 depth) -1))
    ;              (s4-12 (-> s5-13 segment v1-294))
    ;              (s3-12 (-> s5-13 base-time))
    ;              )
    ;         (when (>= v1-294 0)
    ;           (set! (-> s4-12 end-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s3-12))))
    ;           (+! (-> s5-13 depth) -1)
    ;           )
    ;         )
    ;       )
    ;     )
    ;   0
    ;   (read! (-> *perf-stats* data (perf-stat-bucket all-code)))
    ;   )
    ; (when (nonzero? (sync-path 0 0))
    ;   (*dma-timeout-hook*)
    ;   (reset-vif1-path)
    ;   )
    ; (end-display arg0)
    ; (swap-display arg0)
    ; (when *debug-segment*
    ;   (start-frame! (-> arg0 frames (-> arg0 on-screen) profile-array data 0))
    ;   (reset! (-> *perf-stats* data (perf-stat-bucket all-code)))
    ;   )
    ; (set! (-> *time-of-day-context* title-updated) #f)
    ; (set! *teleport* #f)
    ; (when (nonzero? *teleport-count*)
    ;   (set! *teleport* #t)
    ;   (set! *teleport-count* (+ *teleport-count* -1))
    ;   )

    ; (let ((gp-1 (-> pp clock)))
    ;   (set! (-> pp clock) (-> *display* part-clock))
    ;   (process-particles)
    ;   (set! (-> pp clock) gp-1)
    ;   )
    ; (dma-send
    ;   (the-as dma-bank #x10008000)
    ;   (the-as uint (-> *collide-vif0-init* data))
    ;   (the-as uint (/ (-> *collide-vif0-init* length) 4))
    ;   )
    ; (swap-sound-buffers (ear-trans 0) (ear-trans 1) (camera-pos) (camera-angle))
    ; (str-play-kick)
    ; (level-update *level*)
    ; (mc-run)
    ; (auto-save-check)
    (none)
    )
  )

(defbehavior display-loop process ()
  (stack-size-set! (-> self main-thread) 512)
  ; (process-spawn-function
  ;   process
  ;   (lambda :behavior process
  ;     ()
  ;     (logclear! (-> self mask) (process-mask freeze pause menu progress entity))
  ;     (until #f
  ;       (when *debug-segment*
  ;         (let ((gp-0 (-> *display* frames (-> *display* on-screen) profile-array data 0))
  ;               (v1-9 'joints)
  ;               (s5-0 *profile-joints-color*)
  ;               )
  ;           (when (and *dproc* *debug-segment*)
  ;             (let ((s4-0 (-> gp-0 data (-> gp-0 count))))
  ;               (let ((s3-0 (-> gp-0 base-time)))
  ;                 (set! (-> s4-0 name) v1-9)
  ;                 (set! (-> s4-0 start-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s3-0))))
  ;                 )
  ;               (set! (-> s4-0 depth) (the-as uint (-> gp-0 depth)))
  ;               (set! (-> s4-0 color) s5-0)
  ;               (set! (-> gp-0 segment (-> gp-0 depth)) s4-0)
  ;               )
  ;             (+! (-> gp-0 count) 1)
  ;             (+! (-> gp-0 depth) 1)
  ;             (set! (-> gp-0 max-depth) (max (-> gp-0 max-depth) (-> gp-0 depth)))
  ;             )
  ;           )
  ;         0
  ;         )
  ;       (execute-math-engine)
  ;       (when *debug-segment*
  ;         (let ((gp-1 (-> *display* frames (-> *display* on-screen) profile-array data 0)))
  ;           (when (and *dproc* *debug-segment*)
  ;             (let* ((v1-33 (+ (-> gp-1 depth) -1))
  ;                    (s5-1 (-> gp-1 segment v1-33))
  ;                    (s4-1 (-> gp-1 base-time))
  ;                    )
  ;               (when (>= v1-33 0)
  ;                 (set! (-> s5-1 end-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s4-1))))
  ;                 (+! (-> gp-1 depth) -1)
  ;                 )
  ;               )
  ;             )
  ;           )
  ;         0
  ;         )
  ;       (suspend)
  ;       )
  ;     #f
  ;     (none)
  ;     )
  ;   :name "matrix"
  ;   :from *4k-dead-pool*
  ;   :to *mid-pool*
  ;   )
  (let ((gp-1 *display*))
    ; (set! *teleport* #t)
    ; (update *setting-control*)
    ; (init-time-of-day-context *time-of-day-context*)
    ; (display-sync gp-1)
    ; (swap-display gp-1)
    ; (install-handler 3 vblank-handler)
    ; *touching-list*
    ; ((method-of-type touching-list touching-list-method-10))
    ; (prepare *collide-rider-pool*)
    ; (update-actor-hash)
    ; (blerc-init)
    ; (dma-send
    ;   (the-as dma-bank #x10008000)
    ;   (the-as uint (-> *collide-vif0-init* data))
    ;   (the-as uint (/ (-> *collide-vif0-init* length) 4))
    ;   )
    (suspend)
    ; (set! (-> *setting-control* user-default bg-a) 0.0)
    ; (set! (-> gp-1 frames 0 start-time) (the-as time-frame (timer-count (the-as timer-bank #x10000800))))
    ; (set! (-> gp-1 frames 1 start-time) (the-as time-frame (timer-count (the-as timer-bank #x10000800))))
    ; (set! (-> gp-1 dog-ratio) 1.0)
    (while *run*
      ;(format 0 "hello from display process: ~A" (with-pp pp))
      ;(display-loop-main gp-1)
      (with-profiler 'actors *profile-actors-color*
        (suspend)
        )
      )
    )
  (set! *dproc* #f)
  (format 0 "display is off #<#x~X>.~%" self)
  0
  )

(defun on ((arg0 symbol))
  "Start the display loop."
  (when (not *dproc*)
    (when (not arg0)
      (if (= (-> *level* level0 status) 'inactive)
          (bg 'halfpipe)
          )
      )
    (set! *run* #t)
    (set! *dproc* (ppointer->process (process-spawn-function
                                       process
                                       display-loop
                                       :name "display"
                                       :from *4k-dead-pool*
                                       :to *display-pool*
                                       :stack *kernel-dram-stack*
                                       )
                                     )
          )
    (format 0 "SKIP: level activation in on~%")
    ; (cond
    ;   ((or (level-get-with-status *level* 'loaded)
    ;        (level-get-with-status *level* 'alive)
    ;        (level-get-with-status *level* 'active)
    ;        )
    ;    (activate-levels! *level*)
    ;    (when (not arg0)
    ;      (let ((gp-1 (entity-by-type camera-start)))
    ;        (when (and gp-1 (type? gp-1 entity-actor))
    ;          (while (not (camera-teleport-to-entity gp-1))
    ;            (suspend)
    ;            )
    ;          )
    ;        )
    ;      )
    ;    (if (and (= *kernel-boot-message* 'art-group) *kernel-boot-art-group*)
    ;        (anim-tester-add-object *kernel-boot-art-group*)
    ;        )
    ;    )
    ;   (else
    ;     (kill-by-name "display" *active-pool*)
    ;     (set! *dproc* #f)
    ;     )
    ;   )
    )
  *dproc*
  )

(defun off ()
  (stop 'debug)
  (dotimes (gp-0 (-> *level* length))
    (let ((a0-2 (-> *level* level gp-0)))
      (if (= (-> a0-2 status) 'active)
          (deactivate a0-2)
          )
      )
    )
  (set! *run* #f)
  0
  )
