;;-*-Lisp-*-
(in-package goal)

;; name: game-info-h.gc
;; name in dgo: game-info-h
;; dgos: ENGINE, GAME

(declare-type entity-perm-array inline-array-class)
(declare-type continue-point basic)
(declare-type game-save basic)


(defenum mc-status-code
  :type uint32
  ; (busy 0)
  ; (ok 1)
  ; (bad-handle 2)
  ; (format-failed 3)
  ; (internal-error 4)
  ; (write-error 5)
  ; (read-error 6)
  ; (new-game 7)
  ; (no-memory 8)
  ; (no-card 9)
  ; (no-last 10)
  ; (no-format 11)
  ; (no-file 12)
  ; (no-save 13)
  ; (no-space 14)
  ; (bad-version 15)
  ; (no-process 16)
  ; (no-auto-save 17)
  )

(defenum continue-flags
  :type uint32
  :bitfield #t
  (cf0 0)
  (cf1 1)
  (cf2 2)
  (cf3 3)
  (cf4 4)
  (cf5 5)
  (cf6 6)
  (cf7 7)
  (cf8 8)
  (cf9 9)
  (cf10 10)
  (cf11 11)
  (cf12 12)
  (cf13 13)
  (cf14 14)
  (cf15 15)
  (cf16 16)
  (cf17 17)
  (cf18 18)
  (cf19 19)
  (cf20 20)
  (cf21 21)
  (cf22 22)
  (cf23 23)
  (cf24 24)
  (cf25 25)
  (cf26 26)
  (cf27 27)
  (cf28 28)
  (cf29 29)
  (cf30 30)
  )

;; DECOMP BEGINS

(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert   4)
   (life-start-default float  :offset-assert   8)
   (life-single-inc    float  :offset-assert  12)
   (money-task-inc     float  :offset-assert  16)
   (money-oracle-inc   float  :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(define *GAME-bank* (new 'static 'game-bank
                      :life-max-default 99.0
                      :life-start-default 5.0
                      :life-single-inc 1.0
                      :money-task-inc 90.0
                      :money-oracle-inc 120.0
                      )
        )

(deftype actor-id (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype highscore-info (structure)
  ((flags        uint8   :offset-assert   0)
   (award-scores float 3 :offset-assert   4)
   (bronze-score float   :offset          4)
   (silver-score float   :offset          8)
   (gold-score   float   :offset         12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (highscore-info-method-9 () none 9)
    )
  )

(deftype level-buffer-state (structure)
  ((name          symbol  :offset-assert   0)
   (display?      symbol  :offset-assert   4)
   (force-vis?    symbol  :offset-assert   8)
   (force-inside? symbol  :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype load-state (basic)
  ((want          level-buffer-state 6 :inline :offset-assert   4)
   (want-sound    symbol             3         :offset-assert 100)
   (vis-nick      symbol                       :offset-assert 112)
   (command-list  pair                         :offset-assert 116)
   (object-name   string             256       :offset-assert 120)
   (object-status basic              256       :offset-assert 1144)
   )
  :method-count-assert 22
  :size-assert         #x878
  :flag-assert         #x1600000878
  (:methods
    (new (symbol type) _type_ 0)
    (reset! (_type_) _type_ 9)
    (update! (_type_) int 10)
    (want-levels (_type_ (pointer symbol)) int 11)
    (want-sound-banks (_type_ (pointer symbol)) none 12)
    (want-display-level (_type_ symbol symbol) int 13)
    (want-vis-level (_type_ symbol) none 14)
    (load-state-method-15 () none 15)
    (load-state-method-16 () none 16)
    (load-state-method-17 () none 17)
    (load-state-method-18 () none 18)
    (load-state-method-19 () none 19)
    (load-state-method-20 () none 20)
    (load-state-method-21 () none 21)
    )
  )

(defmethod inspect load-state ((obj load-state))
  (when (not obj)
    (return obj)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twant[6] @ #x~X~%" (-> obj want))
  (dotimes (s5-0 6)
    (format #t "~T  [~D]~1Twant: ~`level-buffer-state`P~%" s5-0 (-> obj want s5-0))
    )
  (format #t "~1Twant-sound[3] @ #x~X~%" (-> obj want-sound))
  (dotimes (s5-1 3)
    (format #t "~T  [~D]~1Twant-sound: ~`symbol`P~%" s5-1 (-> obj want-sound s5-1))
    )
  (format #t "~1Tvis-nick: ~A~%" (-> obj vis-nick))
  (format #t "~1Tcommand-list: ~A~%" (-> obj command-list))
  (format #t "~1Tobject-name[256] @ #x~X~%" (-> obj object-name))
  (format #t "~1Tobject-status[256] @ #x~X~%" (-> obj object-status))
  obj
  )

(defmethod new load-state ((allocation symbol) (type-to-make type))
  (reset! (object-new allocation type-to-make (the-as int (-> type-to-make size))))
  )

(deftype continue-point (basic)
  ((name         string                       :offset-assert   4)
   (level        symbol                       :offset-assert   8)
   (flags        continue-flags               :offset-assert  12)
   (trans        vector             :inline   :offset-assert  16)
   (quat         vector             :inline   :offset-assert  32)
   (camera-trans vector             :inline   :offset-assert  48)
   (camera-rot   float              9         :offset-assert  64)
   (on-goto      pair                         :offset-assert 100)
   (vis-nick     symbol                       :offset-assert 104)
   (want         level-buffer-state 6 :inline :offset-assert 108)
   (want-sound   symbol             3         :offset-assert 204)
   )
  :method-count-assert 12
  :size-assert         #xd8
  :flag-assert         #xc000000d8
  (:methods
    (continue-point-method-9 () none 9)
    (continue-point-method-10 () none 10)
    (continue-point-method-11 () none 11)
    )
  )

(defmethod inspect continue-point ((obj continue-point))
  (when (not obj)
    (return obj)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ttrans: ~`vector`P~%" (-> obj trans))
  (format #t "~1Tquat: ~`vector`P~%" (-> obj quat))
  (format #t "~1Tcamera-trans: ~`vector`P~%" (-> obj camera-trans))
  (format #t "~1Tcamera-rot[9] @ #x~X~%" (-> obj camera-rot))
  (format #t "~1Ton-goto: ~A~%" (-> obj on-goto))
  (format #t "~1Tvis-nick: ~A~%" (-> obj vis-nick))
  (format #t "~1Twant[6] @ #x~X~%" (-> obj want))
  (dotimes (s5-0 6)
    (format #t "~T  [~D]~1Twant: ~`level-buffer-state`P~%" s5-0 (-> obj want s5-0))
    )
  (format #t "~1Twant-sound[3] @ #x~X~%" (-> obj want-sound))
  (dotimes (s5-1 3)
    (format #t "~T  [~D]~1Twant-sound: ~`symbol`P~%" s5-1 (-> obj want-sound s5-1))
    )
  obj
  )

(deftype game-info (basic)
  ((mode                   symbol               :offset-assert   4)
   (save-name              basic                :offset-assert   8)
   (life                   float                :offset-assert  12)
   (life-max               float                :offset-assert  16)
   (money                  float                :offset-assert  20)
   (money-total            float                :offset-assert  24)
   (money-per-level        uint8             32 :offset-assert  28)
   (deaths-per-level       uint8             32 :offset-assert  60)
   (buzzer-total           float                :offset-assert  92)
   (fuel                   float                :offset-assert  96)
   (gem                    float                :offset-assert 100)
   (gem-total              float                :offset-assert 104)
   (skill                  float                :offset-assert 108)
   (skill-total            float                :offset-assert 112)
   (karma                  float                :offset-assert 116)
   (eco-pill-dark          float                :offset-assert 120)
   (eco-pill-dark-total    float                :offset-assert 124)
   (features               uint64               :offset-assert 128)
   (debug-features         uint64               :offset-assert 136)
   (secrets                uint32               :offset-assert 144)
   (unknown-pad1           uint32               :offset-assert 148)
   (purchase-secrets       uint32               :offset-assert 152)
   (unknown-pad2           uint32               :offset-assert 156)
   (gun-type               int32                :offset-assert 160)
   (gun-ammo               uint32            4  :offset-assert 164)
   (shield                 float                :offset-assert 180)
   (score                  float                :offset-assert 184)
   (score-owner            uint64               :offset-assert 192)
   (timer                  uint64               :offset-assert 200)
   (timer-owner            uint64               :offset-assert 208)
   (timer-flash            basic                :offset-assert 216)
   (counter                float                :offset-assert 220)
   (counter-flash          basic                :offset-assert 224)
   (attack-id              uint32               :offset-assert 228)
   (perm-list              entity-perm-array    :offset-assert 232)
   (task-perm-list         entity-perm-array    :offset-assert 236)
   (current-continue       continue-point       :offset-assert 240)
   (last-continue          basic                :offset-assert 244)
   (unknown-pad3           uint32            3  :offset-assert 248)
   (task-counter           uint32               :offset-assert 260)
   (unknown-pad4           uint32               :offset-assert 264)
   (level-opened           uint8             32 :offset-assert 268)
   (total-deaths           int32                :offset-assert 300)
   (continue-deaths        int32                :offset-assert 304)
   (task-deaths            int32                :offset-assert 308)
   (total-trys             int32                :offset-assert 312)
   (game-start-time        time-frame           :offset-assert 320)
   (continue-time          time-frame           :offset-assert 328)
   (death-time             time-frame           :offset-assert 336)
   (hit-time               time-frame           :offset-assert 344)
   (task-pickup-time       time-frame           :offset-assert 352)
   (unknown-array1         (array uint64)       :offset-assert 360)
   (unknown-array2         (array uint64)       :offset-assert 364)
   (unknown-array3         (array uint64)       :offset-assert 368)
   (death-pos              vector-array         :offset        372)
   (stop-watch-start       uint64               :offset-assert 376)
   (stop-watch-stop        uint64               :offset-assert 384)
   (blackout-time          time-frame           :offset-assert 392)
   (letterbox-time         time-frame           :offset-assert 400)
   (hint-play-time         time-frame           :offset-assert 408)
   (display-text-time      time-frame           :offset-assert 416)
   (display-text-handle    uint64               :offset-assert 424)
   (death-movie-tick       int32                :offset-assert 432)
   (want-auto-save         symbol               :offset-assert 436)
   (auto-save-proc         handle               :offset-assert 440)
   (auto-save-status       mc-status-code       :offset-assert 448)
   (auto-save-card         int32                :offset-assert 452)
   (auto-save-which        int32                :offset-assert 456)
   (auto-save-count        int32                :offset-assert 460)
   (pov-camera-handle      uint64               :offset-assert 464)
   (other-camera-handle    uint64               :offset-assert 472)
   (controller             uint64            2  :offset-assert 480)
   (race-timer             uint64               :offset-assert 496)
   (race-current-lap-count int32                :offset-assert 504)
   (race-total-lap-count   int32                :offset-assert 508)
   (race-position          int32                :offset-assert 512)
   (race-number-turbos     int32                :offset-assert 516)
   (bot-health             uint32            3  :offset-assert 520)
   (demo-state             uint32               :offset-assert 532)
   (wanted-flash           basic                :offset-assert 536)
   (distance               float                :offset-assert 540)
   (kiosk-timeout          uint64               :offset-assert 544)
   (pause-start-time       time-frame           :offset-assert 552)
   (game-score             basic                :offset-assert 560)
   (goal                   float                :offset-assert 564)
   (miss                   float                :offset-assert 568)
   (miss-max               float                :offset-assert 572)
   (unknown-array4         (array uint64)       :offset-assert 576)
   (live-eco-pill-count    int32                :offset-assert 580)
   (live-gem-count         int32                :offset-assert 584)
   (air-supply             float                :offset-assert 588)
   (homing-beacon          int32                :offset-assert 592)
   (dark-eco-pickup        int32                :offset-assert 596)
   (green-eco-pickup       int32                :offset-assert 600)
   )
  :method-count-assert 31
  :size-assert         #x25c
  :flag-assert         #x1f0000025c
  (:methods
    (initialize! (_type_ symbol game-save string) _type_ 9)
    (game-info-method-10 () none 10)
    (game-info-method-11 () none 11)
    (game-info-method-12 () none 12)
    (game-info-method-13 () none 13)
    (game-info-method-14 () none 14)
    (game-info-method-15 () none 15)
    (copy-perms-from-level! (_type_ level) none 16)
    (copy-perms-to-level! (_type_ level) none 17)
    (game-info-method-18 () none 18)
    (game-info-method-19 () none 19)
    (game-info-method-20 () none 20)
    (set-continue! (_type_ basic) continue-point 21)
    (game-info-method-22 () none 22)
    (game-info-method-23 () none 23)
    (game-info-method-24 () none 24)
    (game-info-method-25 () none 25)
    (game-info-method-26 () none 26)
    (get-next-attack-id (_type_) uint 27)
    (game-info-method-28 () none 28)
    (game-info-method-29 () none 29)
    (game-info-method-30 () none 30)
    )
  )


(defmethod get-next-attack-id game-info ((obj game-info))
  (let ((v0-0 (+ (-> obj attack-id) 1)))
    (set! (-> obj attack-id) v0-0)
    v0-0
    )
  )

(define-extern *game-info* game-info)
(when (or (not *game-info*) (zero? *game-info*))
  (let  ((gp-0 (new 'static 'game-info :mode 'debug :current-continue #f :last-continue #f)))
    (set! (-> gp-0 unknown-array1) (the-as (array uint64) (new 'global 'boxed-array uint64 110)))
    (set! (-> gp-0 unknown-array4) (the-as (array uint64) (new 'global 'boxed-array uint64 110)))
    (set! (-> gp-0 unknown-array2) (the-as (array uint64) (new 'global 'boxed-array uint64 32)))
    (set! (-> gp-0 unknown-array3) (the-as (array uint64) (new 'global 'boxed-array uint64 32)))
    (set! *game-info* gp-0)
    )
  )

(declare-type process-drawable process)
(define-extern process-drawable-art-error (state string process-drawable))
(define-extern part-group-pointer? (function pointer symbol))
