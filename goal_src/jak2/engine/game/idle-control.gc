;;-*-Lisp-*-
(in-package goal)

;; name: idle-control.gc
;; name in dgo: idle-control
;; dgos: GAME, COMMON

(defenum ic-cmd
  :type uint8
  (restart 0)
  (play 1)
  (push 2)
  )

;; DECOMP BEGINS

(deftype idle-control-frame (uint32)
  ((command ic-cmd :offset   0 :size   8)
   (anim    uint8  :offset   8 :size   8)
   (param0  uint8  :offset  16 :size   8)
   (param1  uint8  :offset  24 :size   8)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(deftype idle-control (structure)
  ((anim    (pointer idle-control-frame)  :offset-assert   0)
   (current (pointer idle-control-frame)  :offset-assert   4)
   (counter int32                         :offset-assert   8)
   (target  int32                         :offset-assert  12)
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (idle-control-method-9 (_type_ (pointer idle-control-frame)) none 9)
    (idle-control-method-10 (_type_ process-drawable) none :behavior process-drawable 10)
    )
  )


;; WARN: Return type mismatch idle-control vs none.
(defmethod idle-control-method-9 idle-control ((this idle-control) (arg0 (pointer idle-control-frame)))
  (set! (-> this anim) arg0)
  (set! (-> this current) arg0)
  (set! (-> this counter) 0)
  (set! (-> this target) 0)
  (none)
  )

;; TODO - method manually patched (maybe incorrectly) around `self` changing
;; WARN: Function (method 10 idle-control) has a return type of none, but the expression builder found a return statement.
(defmethod idle-control-method-10 idle-control ((this idle-control) (arg0 process-drawable))
  (local-vars (a1-1 int) (backup-pp process))
  (when (nonzero? (-> this anim))
    (with-pp
      (set! backup-pp pp)
      (set! pp arg0)
      (loop
        (let ((s4-0 (-> this current 0)))
          (case (-> s4-0 command)
            (((ic-cmd play))
             (if (< (-> s4-0 anim) 0)
                 (return #f)
                 )
             (when (zero? (-> this target))
               (let ((t9-0 rand-vu-int-range)
                     (a0-3 (-> s4-0 param0))
                     )
                 (shift-arith-right-32 a1-1 s4-0 24)
                 (set! (-> this target) (t9-0 (the-as int a0-3) a1-1))
                 )
               (ja :group! (-> (the-as process-drawable self) draw art-group data (-> s4-0 anim)) :num! min)
               (return #f)
               )
             (ja :group! (-> (the-as process-drawable self) draw art-group data (-> s4-0 anim)) :num! (seek!))
             (cond
               ((ja-done? 0)
                (+! (-> this counter) 1)
                (cond
                  ((>= (-> this counter) (-> this target))
                   (set! (-> this current) (&-> (-> this current) 1))
                   (set! (-> this counter) 0)
                   (set! (-> this target) 0)
                   0
                   )
                  (else
                    (ja :num-func num-func-identity :frame-num 0.0)
                    (return #f)
                    )
                  )
                )
               (else
                 (return #f)
                 )
               )
             )
            (((ic-cmd push))
             (ja-channel-push! 1 (the-as time-frame (-> s4-0 param0)))
             (set! (-> this current) (&-> (-> this current) 1))
             (set! (-> this counter) 0)
             (set! (-> this target) 0)
             0
             )
            (((ic-cmd restart))
             (set! (-> this current) (-> this anim))
             (set! (-> this counter) 0)
             (set! (-> this target) 0)
             0
             )
            )
          )
        )
      (set! pp backup-pp)
      )
    )
  0
  (none)
  )
