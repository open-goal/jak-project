;;-*-Lisp-*-
(in-package goal)

;; name: idle-control.gc
;; name in dgo: idle-control
;; dgos: GAME, COMMON

;; DECOMP BEGINS

(deftype idle-control-frame (uint32)
  ((command uint8 :offset   0 :size   8)
   (anim    uint8 :offset   8 :size   8)
   (param0  uint8 :offset  16 :size   8)
   (param1  uint8 :offset  24 :size   8)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(deftype idle-control (structure)
  ((anim    (pointer uint32)  :offset-assert   0)
   (current (pointer uint32)  :offset-assert   4)
   (counter int32             :offset-assert   8)
   (target  int32             :offset-assert  12)
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (idle-control-method-9 (_type_ (pointer uint32)) none 9)
    (idle-control-method-10 (_type_ process-drawable) none :behavior process-drawable 10)
    )
  )


;; WARN: Return type mismatch idle-control vs none.
(defmethod idle-control-method-9 idle-control ((obj idle-control) (arg0 (pointer uint32)))
  (set! (-> obj anim) arg0)
  (set! (-> obj current) arg0)
  (set! (-> obj counter) 0)
  (set! (-> obj target) 0)
  (none)
  )

;; TODO - method manually patched (maybe incorrectly) around `self` changing
;; WARN: Function (method 10 idle-control) has a return type of none, but the expression builder found a return statement.
(defmethod idle-control-method-10 idle-control ((obj idle-control) (arg0 process-drawable))
  (with-pp arg0
    (local-vars (a1-1 int))
    (when (nonzero? (-> obj anim))
      (let ((s5-0 self))
        (loop
          (let* ((s4-0 (-> obj current 0))
                (v1-4 (shr (shl s4-0 56) 56))
                )
            (cond
              ((= v1-4 1)
              (if (< (shr (shl s4-0 48) 56) 0)
                  (return #f)
                  )
              (when (zero? (-> obj target))
                (let ((t9-0 rand-vu-int-range)
                      (a0-3 (sar (shl s4-0 40) 56))
                      )
                  (shift-arith-right-32 a1-1 s4-0 24)
                  (set! (-> obj target) (t9-0 (the-as int a0-3) a1-1))
                  )
                (ja :group! (-> (the-as process-drawable arg0) draw art-group data (shr (shl s4-0 48) 56)) :num! min)
                (return #f)
                )
              (ja :group! (-> (the-as process-drawable arg0) draw art-group data (shr (shl s4-0 48) 56))
                  :num! (seek!
                    (the float
                          (+ (-> (the-as art-joint-anim (-> (the-as process-drawable arg0) draw art-group data (shr (shl s4-0 48) 56)))
                                frames
                                num-frames
                                )
                            -1
                            )
                          )
                    )
                  )
              (cond
                ((ja-done? 0)
                  (+! (-> obj counter) 1)
                  (cond
                    ((>= (-> obj counter) (-> obj target))
                    (set! (-> obj current) (&-> (-> obj current) 1))
                    (set! (-> obj counter) 0)
                    (set! (-> obj target) 0)
                    0
                    )
                    (else
                      (ja :num-func num-func-identity :frame-num 0.0)
                      (return #f)
                      )
                    )
                  )
                (else
                  (return #f)
                  )
                )
              )
              ((= v1-4 2)
              (ja-channel-push! 1 (the-as time-frame (sar (shl s4-0 40) 56)))
              (set! (-> obj current) (&-> (-> obj current) 1))
              (set! (-> obj counter) 0)
              (set! (-> obj target) 0)
              0
              )
              ((zero? v1-4)
              (set! (-> obj current) (-> obj anim))
              (set! (-> obj counter) 0)
              (set! (-> obj target) 0)
              0
              )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )
