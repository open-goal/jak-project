;;-*-Lisp-*-
(in-package goal)

;; name: drawable.gc
;; name in dgo: drawable
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

;; sphere-cull
;; guard-band-cull
;; sphere-in-view-frustum?
;; line-in-view-frustum?
;; vis-cull
;; error-sphere

;; drawable methods

(defun display-frame-start ((arg0 display) (arg1 int) (arg2 float))
  ; (set! (-> (the-as vif-bank #x10003c00) err me0) 1)
  ; (set-time-ratios *display* 1.0)
  ; (tick! (-> arg0 frame-clock))
  ; (tick! (-> arg0 real-frame-clock))
  ; (set-time-ratios *display* arg2)
  ; (tick! (-> arg0 session-clock))
  ; (tick! (-> arg0 game-clock))
  ; (tick! (-> arg0 total-game-clock))
  ; (tick! (-> arg0 base-clock))
  ; (tick! (-> arg0 real-clock))
  ; (tick! (-> arg0 target-clock))
  ; (tick! (-> arg0 camera-clock))
  ; (tick! (-> arg0 entity-clock))
  ; (tick! (-> arg0 user0-clock))
  ; (tick! (-> arg0 bg-clock))
  ; (set! (-> arg0 bg-clock frame-counter) (the-as time-frame (mod (-> arg0 bg-clock frame-counter) #x69780)))
  ; (tick! (-> arg0 part-clock))
  ; (when (and (nonzero? *screen-shot-work*) (!= (-> *screen-shot-work* count) -1))
  ;   (let ((v1-43 (-> *screen-shot-work* size)))
  ;     (if (!= (-> *screen-shot-work* count) (* v1-43 v1-43))
  ;         (store-image *screen-shot-work*)
  ;         )
  ;     )
  ;   (+! (-> *screen-shot-work* count) -1)
  ;   (if (= (-> *screen-shot-work* count) -1)
  ;       (set! (-> *screen-shot-work* size) -1)
  ;       )
  ;   )
  ; (let ((s5-1 (-> arg0 frames arg1)))
  ;   (if *sync-dma*
  ;       (sync-path 0 0)
  ;       )
  ;   (let ((v1-57 (-> s5-1 global-buf)))
  ;     (set! (-> v1-57 base) (-> v1-57 data))
  ;     (set! (-> v1-57 end) (&-> v1-57 data-buffer (-> v1-57 allocated-length)))
  ;     )
  ;   (let ((v1-58 (-> s5-1 global-buf)))
  ;     (&+! (-> v1-58 end) -65536)
  ;     )
  ;   (when *debug-segment*
  ;     (let ((v1-61 (-> s5-1 debug-buf)))
  ;       (set! (-> v1-61 base) (-> v1-61 data))
  ;       (set! (-> v1-61 end) (&-> v1-61 data-buffer (-> v1-61 allocated-length)))
  ;       )
  ;     )
  ;   (let ((v1-62 (-> s5-1 calc-buf)))
  ;     (set! (-> v1-62 base) (-> v1-62 data))
  ;     (set! (-> v1-62 end) (&-> v1-62 data-buffer (-> v1-62 allocated-length)))
  ;     )
  ;   (*pre-draw-hook* (-> s5-1 calc-buf))
  ;   (when (not (paused?))
  ;     (clear *stdcon1*)
  ;     (debug-reset-buffers)
  ;     (clear! *simple-sprite-system*)
  ;     )
  ;   (set! (-> s5-1 bucket-group) (the-as dma-bucket (dma-buffer-add-buckets (-> s5-1 calc-buf) 327)))
  ;   )
  ; (service-cpads)
  ; (service-mouse)
  ; (execute-connections *pad-engine* #f)
  (none)
  )

(defun display-sync ((arg0 display))
  (sync-path 0 0)
  ; (let* ((s4-0 (-> arg0 last-screen))
  ;        (a1-1 (shl (timer-count (the-as timer-bank #x10000800)) 48))
  ;        (s5-0 (shl (-> arg0 frames s4-0 start-time) 48))
  ;        (a0-3 (shl (-> arg0 vblank-start-time 0) 48))
  ;        (v1-6 (shl (-> arg0 vblank-start-time 1) 48))
  ;        )
  ;   (set! *ticks-per-frame* (sar (- v1-6 a0-3) 48))
  ;   (let* ((f28-0 (the float *ticks-per-frame*))
  ;          (f1-0 (the float (sar (- a1-1 (the-as uint s5-0)) 48)))
  ;          (f0-2 (/ f1-0 f28-0))
  ;          )
  ;     (/ (the float (sar (- a1-1 (the-as uint v1-6)) 48)) f28-0)
  ;     (let ((f26-0 (/ (the float (sar (- a1-1 (the-as uint v1-6)) 48)) f28-0))
  ;           (f30-0 (fmax 1.0 (fmin 4.0 (-> *display* dog-ratio))))
  ;           )
  ;       (set! (-> arg0 frames s4-0 run-time) (the-as time-frame (the int f1-0)))
  ;       (set! f0-2
  ;             (cond
  ;               ((-> arg0 run-half-speed)
  ;                (syncv 0)
  ;                (if (and (< (/ (the float (sar (- (shl (timer-count (the-as timer-bank #x10000800)) 48) (the-as uint s5-0)) 48)) f28-0)
  ;                            2.0
  ;                            )
  ;                         (< f26-0 0.9)
  ;                         )
  ;                    (syncv 0)
  ;                    )
  ;                2.0
  ;                )
  ;               (else
  ;                 (cond
  ;                   ((< 1.0 f0-2)
  ;                    (when (not (or (zero? a0-3) (zero? v1-6)))
  ;                      (when (> (-> arg0 force-sync) 0)
  ;                        (syncv 0)
  ;                        (+! (-> arg0 force-sync) -1)
  ;                        (let ((v1-23 (shl (timer-count (the-as timer-bank #x10000800)) 48)))
  ;                          (the float (sar (- v1-23 (the-as uint s5-0)) 48))
  ;                          (set! f0-2 (/ (the float (sar (- v1-23 (the-as uint s5-0)) 48)) f28-0))
  ;                          )
  ;                        )
  ;                      )
  ;                    (set! (-> arg0 dog-count) 0.0)
  ;                    )
  ;                   ((or (= f30-0 1.0) (!= (-> arg0 dog-count) 0.0))
  ;                    (if (< f26-0 0.9)
  ;                        (syncv 0)
  ;                        )
  ;                    (set! f0-2 1.0)
  ;                    (set! (-> arg0 dog-count) 0.0)
  ;                    )
  ;                   (else
  ;                     (when (not (or (zero? a0-3) (zero? v1-6)))
  ;                       (while (or (< f0-2 f30-0) (and (< 0.333 f26-0) (< f26-0 0.667)))
  ;                         (let ((v1-34 (shl (timer-count (the-as timer-bank #x10000800)) 48)))
  ;                           (set! f0-2 (/ (the float (sar (- v1-34 (the-as uint s5-0)) 48)) f28-0))
  ;                           (if (< f0-2 0.0)
  ;                               (set! f0-2 f30-0)
  ;                               )
  ;                           (set! f26-0 (/ (the float (sar (- v1-34 (the-as uint (shl (-> arg0 vblank-start-time 1) 48))) 48)) f28-0))
  ;                           )
  ;                         )
  ;                       )
  ;                     (set! (-> arg0 dog-count) 1.0)
  ;                     )
  ;                   )
  ;                 f0-2
  ;                 )
  ;               )
  ;             )
  ;       (if (< f0-2 0.0)
  ;           (set! f0-2 f30-0)
  ;           )
  ;       )
  ;     (let ((f30-1 (fmax 1.0 f0-2))
  ;           (s4-1 (-> arg0 on-screen))
  ;           )
  ;       (let ((v1-48 (timer-count (the-as timer-bank #x10000800))))
  ;         (+! (-> arg0 total-run-time) (the-as time-frame (sar (- (shl v1-48 48) (the-as uint s5-0)) 48)))
  ;         (set! (-> arg0 frames s4-1 start-time) (the-as time-frame v1-48))
  ;         )
  ;       (set-graphics-mode)
  ;       (let ((s5-1 (-> arg0 frames s4-1 calc-buf)))
  ;         (when (nonzero? (dma-buffer-length s5-1))
  ;           (+! s4-1 1)
  ;           (if (< 1 s4-1)
  ;               (set! s4-1 0)
  ;               )
  ;           (set! (-> arg0 last-screen) (-> arg0 on-screen))
  ;           (set! (-> arg0 on-screen) s4-1)
  ;           (when *debug-segment*
  ;             (set! *profile-interrupt-segment* (-> *display* frames (-> *display* last-screen) profile-array data 1))
  ;             (set! (-> *profile-interrupt-segment* depth) 0)
  ;             (set! (-> *profile-interrupt-segment* max-depth) 1)
  ;             )
  ;           (dma-buffer-send-chain (the-as dma-bank-source #x10009000) s5-1)
  ;           )
  ;         )
  ;       (determine-pause-mode)
  ;       (when (and (nonzero? *screen-shot-work*) (= (-> *screen-shot-work* count) -1) (!= (-> *screen-shot-work* size) -1))
  ;         (let ((v1-77 (-> *screen-shot-work* size)))
  ;           (set! (-> *screen-shot-work* count) (* v1-77 v1-77))
  ;           )
  ;         (set-master-mode 'pause)
  ;         )
  ;       (display-frame-start arg0 s4-1 f30-1)
  ;       )
  ;     )
  ;   )
  (none)
  )


(defun swap-display ((arg0 display))
  (display-frame-finish arg0)
  (display-sync arg0)
  (none)
  )
