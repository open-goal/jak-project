;;-*-Lisp-*-
(in-package goal)

;; name: enemy-h.gc
;; name in dgo: enemy-h
;; dgos: GAME, COMMON

(define-extern get-penetrate-using-from-attack-event (function process-drawable event-message-block penetrate))

;; NOTE - for battle
(declare-type enemy process-focusable)
(declare-type enemy-init-by-other-params structure)
(define-extern enemy-init-by-other (function process-drawable enemy-init-by-other-params none :behavior enemy))

;; +++enemy-flag
(defenum enemy-flag
   :type int64
   :bitfield #t
   (look-at-focus 0)
   (look-at-move-dest 1)
   (vulnerable 2)
   (vulnerable-backup 3)
   (dangerous-backup 4)
   (notice 5)
   (alert 6)
   (auto-reset-penetrate 7)
   (victory 8)
   (cam-attack-mode 9)
   (use-notice-distance 10)
   (attackable-backup 11)
   (actor-pause-backup 12)
   (enable-on-notice 13)
   (enable-on-active 14)
   (enable-on-hostile 15)
   (dislike-combo 16)
   (directed 17)
   (directed-ready 18)
   (chase-startup 19)
   (lock-focus 20)
   (multi-focus 21)
   (use-trigger 22)
   (trackable 23)
   (trackable-backup 24)
   (spawn-gem 25)
   (check-water 26)
   (check-water-backup 27)
   (checking-water 28)
   (recover 29)
   (recover-applied-velocity 30)
   (drawn-mirrored 31)
   (called-dying 32)
   (no-initial-move-to-ground 33)
   (jump-check-blocked 34)
   (death-start 35)
   (enemy-flag36 36)
   (enemy-flag37 37)
   (enemy-flag38 38)
   (not-frustrated 39)
   (enemy-flag40 40)
   (enemy-flag41 41)
   (enemy-flag42 42)
   (enemy-flag43 43)
   )
;; ---enemy-flag


;; +++enemy-aware
(defenum enemy-aware
  :type uint64
  (enemy-aware-0 0)
  (enemy-aware-1 1)
  (enemy-aware-2 2)
  (enemy-aware-3 3)
  (unaware 4)
  )
;; ---enemy-aware

(defenum enemy-jump-flags
  :bitfield #t
  :type uint8
  (enjflag-0)
  (enjflag-1)
  (enjflag-2)
  (enjflag-3)
  (enjflag-4)
  (enjflag-5)
  (enjflag-6)
  (enjflag-7)
  )


;; DECOMP BEGINS

(deftype enemy-focus (focus)
  ((aware  enemy-aware)
   (flags  enemy-flag)
   )
  (:methods
    (try-update-focus (_type_ process-focusable enemy) symbol :replace)
    (enemy-focus-method-13 (_type_ process-focusable enemy-aware) symbol)
    )
  )


(deftype enemy-info (basic)
  ((fact-defaults                        fact-info-enemy-defaults)
   (use-die-falling                      symbol)
   (use-victory                          symbol)
   (use-jump-blocked                     symbol)
   (debug-draw-neck                      symbol)
   (jump-debug-draw                      symbol)
   (move-to-ground                       symbol)
   (hover-if-no-ground                   symbol)
   (idle-anim-script                     (pointer idle-control-frame))
   (idle-anim                            int32)
   (notice-anim                          int32)
   (hostile-anim                         int32)
   (hit-anim                             int32)
   (knocked-anim                         int32)
   (knocked-land-anim                    int32)
   (die-anim                             int32)
   (die-falling-anim                     int32)
   (victory-anim                         int32)
   (jump-wind-up-anim                    int32)
   (jump-in-air-anim                     int32)
   (jump-land-anim                       int32)
   (neck-joint                           int32)
   (look-at-joint                        int32)
   (bullseye-joint                       int32)
   (sound-hit                            sound-name)
   (sound-die                            sound-name)
   (notice-distance                      meters)
   (notice-distance-delta                meters)
   (proximity-notice-distance            meters)
   (default-hit-points                   int32)
   (gnd-collide-with                     collide-spec)
   (overlaps-others-collide-with-filter  collide-spec)
   (penetrate-flinch                     penetrate)
   (penetrate-knocked                    penetrate)
   (movement-gravity                     meters)
   (friction                             float)
   (slip-factor                          float)
   (attack-shove-back                    meters)
   (attack-shove-up                      meters)
   (attack-mode                          symbol)
   (attack-damage                        int32)
   (recover-gnd-collide-with             collide-spec)
   (jump-height-min                      meters)
   (jump-height-factor                   float)
   (knocked-seek-ry-clamp                float)
   (knocked-soft-vxz-lo                  float)
   (knocked-soft-vxz-hi                  float)
   (knocked-soft-vy-lo                   float)
   (knocked-soft-vy-hi                   float)
   (knocked-medium-vxz-lo                float)
   (knocked-medium-vxz-hi                float)
   (knocked-medium-vy-lo                 float)
   (knocked-medium-vy-hi                 float)
   (knocked-hard-vxz-lo                  float)
   (knocked-hard-vxz-hi                  float)
   (knocked-hard-vy-lo                   float)
   (knocked-hard-vy-hi                   float)
   (knocked-huge-vxz-lo                  float)
   (knocked-huge-vxz-hi                  float)
   (knocked-huge-vy-lo                   float)
   (knocked-huge-vy-hi                   float)
   (knocked-yellow-vxz-lo                float)
   (knocked-yellow-vxz-hi                float)
   (knocked-yellow-vy-lo                 float)
   (knocked-yellow-vy-hi                 float)
   (knocked-red-vxz-lo                   float)
   (knocked-red-vxz-hi                   float)
   (knocked-red-vy-lo                    float)
   (knocked-red-vy-hi                    float)
   (knocked-blue-vxz-lo                  float)
   (knocked-blue-vxz-hi                  float)
   (knocked-blue-vy-lo                   float)
   (knocked-blue-vy-hi                   float)
   (shadow-size                          meters)
   (shadow-max-y                         meters)
   (shadow-min-y                         meters)
   (shadow-locus-dist                    meters)
   (gem-joint                            int32)
   (gem-seg                              uint32)
   (gem-no-seg                           uint32)
   (gem-offset                           sphere  :inline)
   )
  (:methods
    (copy-enemy-info! (_type_ _type_) none)
    )
  )


(deftype enemy-knocked-info (structure)
  ((anim-speed          float)
   (on-surface-count    int32)
   (move-count          int32)
   (land-can-land-time  time-frame)
   )
  )


(deftype enemy-jump-info (structure)
  ((flags       enemy-jump-flags)
   (anim-speed  float)
   (hang-time   time-frame)
   (start-pos   vector      :inline)
   (dest-pos    vector      :inline)
   (traj        trajectory  :inline)
   )
  )


(deftype enemy-init-by-other-params (structure)
  ((trans                       vector      :inline)
   (quat                        quaternion  :inline)
   (entity                      entity)
   (directed?                   symbol)
   (no-initial-move-to-ground?  symbol)
   )
  )


(deftype enemy-attack-info (structure)
  ((attack-id          uint32)
   (knocked-type       knocked-type)
   (blue-juggle-count  uint8)
   (attacker-handle    handle)
   (attack-time        time-frame)
   (penetrate-using    penetrate)
   (attacker-pos       vector  :inline)
   (attack-direction   vector  :inline)
   )
  )


(deftype enemy-best-focus (structure)
  ((proc    process)
   (rating  float)
   (aware   enemy-aware)
   )
  )


(deftype enemy (process-focusable)
  ((root                       collide-shape-moving :override)
   (fact                       fact-info-enemy      :override)
   (enemy-flags                enemy-flag)
   (enemy-info                 enemy-info)
   (hit-points                 int32)
   (gnd-collide                uint32)
   (attack-id                  uint32)
   (persistent-attack-id       uint32)
   (water-max-height           meters)
   (water-surface-height       meters)
   (desired-angle              degrees)
   (jump-why                   uint64)
   (penetrated-by-all          penetrate)
   (penetrated-flinch          penetrate)
   (penetrated-knocked         penetrate)
   (reaction-time              time-frame)
   (notice-time                time-frame)
   (state-timeout              time-frame)
   (auto-reset-penetrate-time  time-frame)
   (hit-focus-time             time-frame)
   (last-draw-time             time-frame)
   (starting-time              time-frame)
   (fated-time                 time-frame)
   (focus-pos                  vector                :inline)
   (event-param-point          vector                :inline)
   (jump-dest                  vector                :inline :overlay-at event-param-point)
   (focus                      enemy-focus           :inline)
   (incoming                   enemy-attack-info     :inline)
   (actor-group                (pointer actor-group))
   (actor-group-count          int32)
   (neck                       joint-mod)
   (on-notice                  pair)
   (on-active                  pair)
   (on-hostile                 pair)
   (on-death                   pair)
   (idle-anim-player           idle-control          :inline)
   (rand-gen                   symbol)
   )
  (:state-methods
    dormant
    dormant-aware
    hit
    knocked
    idle
    active
    notice
    flee
    stare
    hostile
    victory
    die
    die-falling
    die-fast
    directed
    jump
    jump-blocked
    ambush
    view-anims
    )
  (:methods
    (enemy-method-46 (_type_ int) none)
    (enemy-method-47 (_type_ vector) float)
    (take-damage-from-attack (_type_ process event-message-block) int)
    (enemy-method-49 (_type_) time-frame :behavior enemy)
    (enemy-method-50 (_type_ vector) vector)
    (enemy-method-51 (_type_) float)
    (enemy-method-52 (_type_ vector) none)
    (enemy-method-53 (_type_ process-focusable) symbol)
    (enemy-method-54 (_type_) enemy-flag)
    (common-post (_type_) none)
    (damage-amount-from-attack (_type_ process event-message-block) int)
    (update-target-awareness! (_type_ process-focusable enemy-best-focus) enemy-aware)
    (enemy-method-58 (_type_ process event-message-block) symbol)
    (get-penetrate-info (_type_) penetrate)
    (coin-flip? (_type_) symbol)
    (enemy-method-61 (_type_ int) int :behavior enemy)
    (enemy-method-62 (_type_) none)
    (enemy-method-63 (_type_ process-focusable enemy-aware) symbol)
    (go-dormant (_type_) object)
    (go-dormant-aware (_type_) object)
    (go-ambush (_type_) object)
    (go-stare (_type_) object)
    (go-stare2 (_type_) object)
    (go-directed (_type_) object)
    (go-hostile (_type_) object)
    (go-flee (_type_) object)
    (react-to-focus (_type_) object)
    (kill-prefer-falling (_type_) object)
    (general-event-handler (_type_ process int symbol event-message-block) object)
    (enemy-method-75 (_type_ process event-message-block) object)
    (enemy-method-76 (_type_ process event-message-block) symbol)
    (enemy-method-77 (_type_ enemy-knocked-info) symbol)
    (enemy-method-78 (_type_ enemy-knocked-info) symbol)
    (enemy-method-79 (_type_ int enemy-knocked-info) symbol)
    (enemy-method-80 (_type_ enemy-knocked-info) symbol)
    (enemy-method-81 (_type_) symbol)
    (enemy-method-82 (_type_ enemy-jump-info) symbol)
    (enemy-method-83 (_type_ enemy-jump-info) none)
    (enemy-method-84 (_type_ enemy-jump-info) none)
    (enemy-method-85 (_type_) float)
    (enemy-method-86 (_type_) symbol)
    (enemy-method-87 (_type_ enemy-jump-info) symbol)
    (enemy-method-88 (_type_ enemy-jump-info) symbol)
    (enemy-method-89 (_type_ enemy-jump-info) symbol)
    (enemy-method-90 (_type_ int enemy-jump-info) symbol)
    (enemy-method-91 (_type_ int enemy-jump-info) none)
    (enemy-method-92 (_type_ int enemy-jump-info) none)
    (enemy-method-93 (_type_) none)
    (enemy-method-94 (_type_ vector float) symbol)
    (enemy-method-95 (_type_ vector float) symbol)
    (enemy-method-96 (_type_ float symbol) symbol)
    (enemy-method-97 (_type_) process)
    (in-aggro-range? (_type_ process-focusable vector) symbol)
    (enemy-method-99 (_type_ process-focusable) symbol)
    (enemy-method-100 (_type_) symbol)
    (enemy-method-101 (_type_) none)
    (enemy-method-102 (_type_) symbol)
    (enemy-method-103 (_type_) collide-spec)
    (enemy-method-104 (_type_ process touching-shapes-entry uint) symbol :behavior process)
    (enemy-method-105 (_type_ process) enemy-flag)
    (set-incoming-attack-info (_type_ process object penetrate attack-info) none :behavior enemy)
    (get-enemy-target (_type_) process-focusable)
    (enemy-method-108 (_type_ process-drawable event-message-block) int)
    (look-at-target! (_type_ enemy-flag) none)
    (stop-looking-at-target! (_type_) none)
    (enemy-method-111 (_type_) none :behavior enemy)
    (set-enemy-info! (_type_ enemy-info) none)
    (init-enemy-behaviour-and-stats! (_type_ enemy-info) none)
    (init-enemy-collision! (_type_) none)
    (init-enemy! (_type_) none)
    (go-idle (_type_) none)
    (rnd-float (_type_) float)
    (rnd-float-range (_type_ float float) float)
    (rnd-int-count (_type_ int) int)
    (rnd-bit (_type_ int int) int)
    (rnd-int-range (_type_ int int) int)
    (rnd-percent? (_type_ float) symbol)
    (rnd-go-idle? (_type_ float) symbol)
    (enemy-method-124 (_type_) collide-spec)
    (ground-pat-set! (_type_ collide-query collide-spec float float float) pat-surface)
    (enemy-above-ground? (_type_ collide-query vector collide-spec float float float) symbol)
    (enemy-method-127 (_type_ float float symbol collide-spec) symbol)
    (enemy-method-128 (_type_ vector move-above-ground-params) none)
    (enemy-method-129 (_type_) none)
    (enemy-method-130 (_type_ float) symbol)
    (penetrate-using->knocked (_type_ penetrate) knocked-type)
    (dying (_type_) none)
    (enemy-method-133 (_type_) symbol)
    (get-attacker (_type_ process attack-info) process-focusable)
    (enemy-method-135 (_type_ int) sound-id)
    (enemy-method-136 (_type_) enemy-flag)
    )
  )


(deftype anim-info (structure)
  ((anim-index    int32)
   (travel-speed  meters)
   )
  )


(defmethod try-update-focus ((this enemy-focus) (arg0 process-focusable) (arg1 enemy))
  (let* ((t9-0 (method-of-type focus try-update-focus))
         (s3-0 (t9-0 this arg0))
         )
    (when (not s3-0)
      (logclear! (-> this flags) (enemy-flag look-at-focus))
      (set! (-> this aware)
            (the-as
              enemy-aware
              (enemy-method-61 arg1 (the-as int (update-target-awareness! arg1 arg0 (the-as enemy-best-focus #f))))
              )
            )
      )
    s3-0
    )
  )

(defmethod enemy-focus-method-13 ((this enemy-focus) (arg0 process-focusable) (arg1 enemy-aware))
  (let* ((t9-0 (method-of-type focus try-update-focus))
         (v0-0 (t9-0 this arg0))
         )
    (set! (-> this aware) arg1)
    (if (not v0-0)
        (logclear! (-> this flags) (enemy-flag look-at-focus))
        )
    v0-0
    )
  )

;; WARN: Return type mismatch enemy-flag vs none.
(defmethod clear-focused ((this enemy-focus))
  (let ((t9-0 (method-of-type focus clear-focused)))
    (t9-0 this)
    )
  (set! (-> this aware) (enemy-aware enemy-aware-0))
  (logclear! (-> this flags) (enemy-flag look-at-focus))
  (none)
  )
