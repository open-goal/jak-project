;;-*-Lisp-*-
(in-package goal)

;; name: nav-graph-editor.gc
;; name in dgo: nav-graph-editor
;; dgos: ENGINE, GAME

;; NOTE - for default-menu
(declare-type nav-graph-editor process)
(define-extern get-nav-graph-editor (function nav-graph-editor))
(define-extern run-nav-graph-editor (function symbol (pointer process)))
(define-extern exit-nav-graph-editor (function none))

;; DECOMP BEGINS

;; this file is debug only
(declare-file (debug))

(deftype nav-graph-command (structure)
  ((com-type uint32         :offset-assert   0)
   (id       int32          :offset-assert   4)
   (index    int32          :offset-assert   8)
   (move-vec vector :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )


(deftype nav-graph-command-array (inline-array-class)
  ((data nav-graph-command :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(set! (-> nav-graph-command-array heap-base) (the-as uint 32))

(deftype nav-graph-editor (process)
  ((self-override       nav-graph-editor                :offset         32)
   (nav-graph           mysql-nav-graph                 :offset-assert 128)
   (mode                symbol                          :offset-assert 132)
   (command-id          int32                           :offset-assert 136)
   (max-command         int32                           :offset-assert 140)
   (selected-index      int32                           :offset-assert 144)
   (selected-dist       float                           :offset-assert 148)
   (selected-node-edge? symbol                          :offset-assert 152)
   (closest-node        int32                           :offset-assert 156)
   (dist-closest-node   float                           :offset-assert 160)
   (closest-edge        int32                           :offset-assert 164)
   (dist-closest-edge   float                           :offset-assert 168)
   (mouse-pos           vector                  :inline :offset-assert 176)
   (mouse-hit           vector                  :inline :offset-assert 192)
   (mouse-hit-pick      vector                  :inline :offset-assert 208)
   (mouse-normal        vector                  :inline :offset-assert 224)
   (mouse-spos-hold     vector                  :inline :offset-assert 240)
   (edge-src            int32                           :offset-assert 256)
   (edge-dst            int32                           :offset-assert 260)
   (edge-visibility     int32                           :offset-assert 264)
   (vehicle-edit-mode   symbol                          :offset-assert 268)
   (hover-edit-mode     symbol                          :offset-assert 272)
   (clipping-dist       float                           :offset-assert 276)
   (plane-height        float                           :offset-assert 280)
   (plane-height-hold   float                           :offset-assert 284)
   (default-node        mysql-nav-node          :inline :offset-assert 288)
   (default-edge        mysql-nav-edge          :inline :offset-assert 356)
   (command-array       nav-graph-command-array         :offset-assert 424)
   )
  :heap-base #x130
  :method-count-assert 64
  :size-assert         #x1ac
  :flag-assert         #x40013001ac
  (:methods
    (move-node () _type_ :state 14)
    (move-plane () _type_ :state 15)
    (create () _type_ :state 16)
    (edit-edge () _type_ :state 17)
    (create-edge () _type_ :state 18)
    (adjust-plane () _type_ :state 19)
    (adjust-it () _type_ :state 20)
    (adjust-minimap () _type_ :state 21)
    (adjust-node-angle () _type_ :state 22)
    (adjust-node-radius () _type_ :state 23)
    (adjust-edge-visibility () _type_ :state 24)
    (adjust-edge-width () _type_ :state 25)
    (adjust-edge-density () _type_ :state 26)
    (draw-closest-minimap () _type_ :state 27)
    (nav-graph-editor-method-28 (_type_) none 28)
    (nav-graph-editor-method-29 (_type_ string string string) none 29)
    (nav-graph-editor-method-30 (_type_ int) symbol 30)
    (nav-graph-editor-method-31 (_type_ int) symbol 31)
    (nav-graph-editor-method-32 (_type_ symbol int) none 32)
    (nav-graph-editor-method-33 (_type_ int) none 33)
    (nav-graph-editor-method-34 (_type_) object 34)
    (nav-graph-editor-method-35 (_type_) none 35)
    (nav-graph-editor-method-36 (_type_) none 36)
    (nav-graph-editor-method-37 (_type_) none 37)
    (nav-graph-editor-method-38 (_type_) none 38)
    (nav-graph-editor-method-39 (_type_) none 39)
    (nav-graph-editor-method-40 (_type_) none 40)
    (nav-graph-editor-method-41 (_type_) none 41)
    (nav-graph-editor-method-42 (_type_) symbol 42)
    (nav-graph-editor-method-43 (_type_) none 43)
    (nav-graph-editor-method-44 (_type_) symbol 44)
    (nav-graph-editor-method-45 (_type_) none 45)
    (nav-graph-editor-method-46 (_type_) pad-buttons 46)
    (nav-graph-editor-method-47 (_type_) none 47)
    (nav-graph-editor-method-48 (_type_ uint) nav-graph-command 48)
    (nav-graph-editor-method-49 (_type_) nav-graph-command 49)
    (nav-graph-editor-method-50 (_type_) none 50)
    (nav-graph-editor-method-51 (_type_) none 51)
    (nav-graph-editor-method-52 (_type_) uint 52)
    (nav-graph-editor-method-53 (_type_ int int) none 53)
    (nav-graph-editor-method-54 (_type_ int) none 54)
    (nav-graph-editor-method-55 (_type_ int) none 55)
    (nav-graph-editor-method-56 (_type_ int) none 56)
    (nav-graph-editor-method-57 (_type_ int int) int 57)
    (nav-graph-editor-method-58 (_type_) symbol 58)
    (nav-graph-editor-method-59 (_type_) pad-buttons 59)
    (nav-graph-editor-method-60 (_type_) none 60)
    (nav-graph-editor-method-61 (_type_) none 61)
    (nav-graph-editor-method-62 (_type_ symbol symbol) none 62)
    (nav-graph-editor-method-63 (_type_) none 63)
    )
  )


(define *nav-graph-editor* (the-as (pointer nav-graph-editor) #f))

;; WARN: Return type mismatch symbol vs none.
(defmethod nav-graph-editor-method-62 nav-graph-editor ((obj nav-graph-editor) (arg0 symbol) (arg1 symbol))
  (case arg0
    (('minimap)
     (set! (-> obj vehicle-edit-mode) #t)
     (set! (-> obj default-node nav_node_flag) (nav-node-flag))
     (set! (-> obj clipping-dist) 3276800.0)
     )
    (('hover)
     (set! (-> obj hover-edit-mode) #t)
     )
    )
  (set! (-> obj command-array length) 0)
  (init-from-sql! (-> obj nav-graph) (the-as string arg0) (the-as string arg1))
  (set! (-> obj default-node nav_graph_id) (-> obj nav-graph nav_graph_id))
  (set! (-> obj default-edge nav_graph_id) (-> obj nav-graph nav_graph_id))
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod nav-graph-editor-method-63 nav-graph-editor ((obj nav-graph-editor))
  (set! (-> obj command-array length) 0)
  (exec-sql! (-> obj nav-graph))
  (none)
  )

(defmethod deactivate nav-graph-editor ((obj nav-graph-editor))
  (set! *nav-graph-editor* (the-as (pointer nav-graph-editor) #f))
  ((method-of-type process deactivate) obj)
  (none)
  )

;; WARN: Return type mismatch none vs nav-graph-editor.
(defmethod relocate nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (the-as
    nav-graph-editor
    ((the-as (function process int none) (find-parent-method nav-graph-editor 7)) obj arg0)
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod nav-graph-editor-method-60 nav-graph-editor ((obj nav-graph-editor))
  (let ((v0-0 (not (-> obj vehicle-edit-mode))))
    (set! (-> obj vehicle-edit-mode) v0-0)
    (set! (-> obj default-node nav_node_flag) (if v0-0
                                                  (nav-node-flag)
                                                  (nav-node-flag pedestrian)
                                                  )
          )
    )
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod nav-graph-editor-method-61 nav-graph-editor ((obj nav-graph-editor))
  (set! (-> obj hover-edit-mode) (not (-> obj hover-edit-mode)))
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
;; WARN: Function (method 54 nav-graph-editor) has a return type of none, but the expression builder found a return statement.
(defmethod nav-graph-editor-method-54 nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (when (not (-> obj hover-edit-mode))
    (let ((gp-0 (-> obj nav-graph node-array data arg0)))
      (dotimes (s5-0 (-> *level* length))
        (let ((s4-0 (-> *level* level s5-0)))
          (when (= (-> s4-0 status) 'active)
            (let ((s3-0 (-> s4-0 bsp nav-meshes)))
              (when (nonzero? s3-0)
                (dotimes (s2-0 (-> s3-0 length))
                  (let ((s1-0 (-> s3-0 s2-0)))
                    (-> s1-0 aid)
                    (let* ((s0-0 s1-0)
                           (v1-14 (if (type? s0-0 entity-nav-mesh)
                                      s0-0
                                      )
                                  )
                           )
                      (when v1-14
                        (let ((a0-7 (-> v1-14 nav-mesh))
                              (a1-2 (new 'stack-no-clear 'nav-find-poly-parms))
                              )
                          (vector-! (-> a1-2 point) (-> gp-0 position) (-> a0-7 bounds))
                          (set! (-> a1-2 y-threshold) 163840.0)
                          (set! (-> a1-2 ignore) (the-as uint 2))
                          (when (find-poly-containing-point-local a0-7 a1-2)
                            (set! (-> gp-0 nav_mesh_id) (-> s1-0 aid))
                            (set! (-> gp-0 level_name) (-> s4-0 name))
                            (logior! (-> gp-0 mysql-save-flag) (mysql-save-flag update))
                            (format *stdcon* "~S~%" (-> gp-0 level_name))
                            (return #f)
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

(defmethod nav-graph-editor-method-30 nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (let ((s3-0 (-> obj nav-graph edge-array data arg0))
        (s4-0 (new 'stack-no-clear 'matrix))
        )
    (format *stdcon* "flags ( ")
    (let ((s2-0 (-> s3-0 minimap_edge_flag)))
      (if (= (logand s2-0 (nav-minimap-edge-flag pass-red)) (nav-minimap-edge-flag pass-red))
          (format *stdcon* "pass-red ")
          )
      (if (= (logand s2-0 (nav-minimap-edge-flag pass-blue)) (nav-minimap-edge-flag pass-blue))
          (format *stdcon* "pass-blue ")
          )
      (if (= (logand s2-0 (nav-minimap-edge-flag pass-green)) (nav-minimap-edge-flag pass-green))
          (format *stdcon* "pass-green ")
          )
      (if (= (logand s2-0 (nav-minimap-edge-flag pass-yellow)) (nav-minimap-edge-flag pass-yellow))
          (format *stdcon* "pass-yellow ")
          )
      )
    (format *stdcon* ")~%")
    (vector-average!
      (-> s4-0 trans)
      (the-as
        vector
        (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> s3-0 runtime-node-id-1)))
        )
      (the-as
        vector
        (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> s3-0 runtime-node-id-2)))
        )
      )
    (dotimes (s3-1 (-> obj nav-graph visnode-array length))
      (let ((v1-23 (-> obj nav-graph visnode-array data s3-1)))
        (when (and (= (-> v1-23 runtime-edge-id) arg0) (not (logtest? (-> v1-23 mysql-save-flag) (mysql-save-flag delete))))
          (vector-!
            (the-as vector (-> s4-0 vector))
            (the-as
              vector
              (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> v1-23 runtime-node-id)))
              )
            (-> s4-0 trans)
            )
          (vector-normalize!
            (the-as vector (-> s4-0 vector))
            (fmax 15360.0 (+ -15360.0 (vector-length (the-as vector (-> s4-0 vector)))))
            )
          (vector-rotate-around-y! (-> s4-0 vector 1) (the-as vector (-> s4-0 vector)) 24576.0)
          (vector-normalize! (-> s4-0 vector 1) 16384.0)
          (vector-rotate-around-y! (-> s4-0 vector 2) (the-as vector (-> s4-0 vector)) -24576.0)
          (vector-normalize! (-> s4-0 vector 2) 16384.0)
          (vector+! (the-as vector (-> s4-0 vector)) (the-as vector (-> s4-0 vector)) (-> s4-0 trans))
          (vector+! (-> s4-0 vector 2) (-> s4-0 vector 2) (the-as vector (-> s4-0 vector)))
          (vector+! (-> s4-0 vector 1) (-> s4-0 vector 1) (the-as vector (-> s4-0 vector)))
          (add-debug-line
            #t
            (bucket-id debug2)
            (the-as vector (-> s4-0 vector))
            (-> s4-0 vector 1)
            *color-light-yellow*
            #f
            (the-as rgba -1)
            )
          (add-debug-line
            #t
            (bucket-id debug2)
            (the-as vector (-> s4-0 vector))
            (-> s4-0 vector 2)
            *color-light-yellow*
            #f
            (the-as rgba -1)
            )
          (add-debug-line
            #t
            (bucket-id debug2)
            (-> s4-0 vector 1)
            (-> s4-0 vector 2)
            *color-light-yellow*
            #f
            (the-as rgba -1)
            )
          (vector-lerp! (the-as vector (-> s4-0 vector)) (-> s4-0 vector 1) (-> s4-0 vector 2) 0.5)
          (add-debug-line
            #t
            (bucket-id debug2)
            (-> s4-0 trans)
            (the-as vector (-> s4-0 vector))
            *color-light-yellow*
            #f
            (the-as rgba -1)
            )
          )
        )
      )
    )
  #f
  )

(defmethod nav-graph-editor-method-33 nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (let* ((gp-0 (-> obj nav-graph edge-array data arg0))
         (s5-0 (-> obj nav-graph node-array data (-> gp-0 runtime-node-id-1)))
         (s3-0 (-> obj nav-graph node-array data (-> gp-0 runtime-node-id-2)))
         (s4-0 (new 'stack-no-clear 'vector))
         )
    (vector-! s4-0 (-> s5-0 position) (-> s3-0 position))
    (set! (-> s4-0 y) 0.0)
    (vector-rotate90-around-y! s4-0 s4-0)
    (vector-normalize! s4-0 (-> gp-0 width))
    (add-debug-line
      #t
      (bucket-id debug2)
      (vector+! (new 'stack-no-clear 'vector) (-> s5-0 position) s4-0)
      (vector+! (new 'stack-no-clear 'vector) (-> s3-0 position) s4-0)
      *color-red*
      #f
      (the-as rgba -1)
      )
    (add-debug-line
      #t
      (bucket-id debug2)
      (vector-! (new 'stack-no-clear 'vector) (-> s5-0 position) s4-0)
      (vector-! (new 'stack-no-clear 'vector) (-> s3-0 position) s4-0)
      *color-red*
      #f
      (the-as rgba -1)
      )
    )
  0
  (none)
  )

(defmethod nav-graph-editor-method-31 nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> obj nav-graph node-array data arg0)))
      (format *stdcon* "Radius = ~M~%" (-> gp-0 radius))
      (cond
        ((= (-> obj nav-graph nav_graph_id) 4)
         (add-debug-sphere #t (bucket-id debug2) (-> gp-0 position) (-> gp-0 radius) *color-green*)
         )
        (else
          (new 'stack-no-clear 'vector)
          (let ((s5-1 (new 'stack-no-clear 'vector)))
            (sincos! s5-1 (-> gp-0 angle))
            (set! (-> s5-1 z) (-> s5-1 y))
            (set! (-> s5-1 y) 0.0)
            (set! (-> s5-1 w) 1.0)
            (let ((t9-3 add-debug-sphere)
                  (a0-8 #t)
                  (a1-4 324)
                  (a2-2 (new 'stack-no-clear 'vector))
                  )
              (let ((v1-6 (-> gp-0 position)))
                (let ((a3-1 s5-1))
                  (let ((t0-1 (-> gp-0 radius)))
                    (.mov vf7 t0-1)
                    )
                  (.lvf vf5 (&-> a3-1 quad))
                  )
                (.lvf vf4 (&-> v1-6 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> a2-2 quad) vf6)
              (t9-3 a0-8 (the-as bucket-id a1-4) a2-2 (-> gp-0 radius) *color-green*)
              )
            (let ((t9-4 add-debug-sphere)
                  (a0-9 #t)
                  (a1-5 324)
                  (a2-3 (new 'stack-no-clear 'vector))
                  )
              (let ((v1-7 (-> gp-0 position)))
                (let ((a3-3 (- (-> gp-0 radius))))
                  (.mov vf7 a3-3)
                  )
                (.lvf vf5 (&-> s5-1 quad))
                (.lvf vf4 (&-> v1-7 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> a2-3 quad) vf6)
              (t9-4 a0-9 (the-as bucket-id a1-5) a2-3 (-> gp-0 radius) *color-green*)
              )
            )
          )
        )
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod nav-graph-editor-method-29 nav-graph-editor ((obj nav-graph-editor) (arg0 string) (arg1 string) (arg2 string))
  (format *stdcon* "~0K")
  (format *stdcon* "~%~%~3L~18S~18S~18S~%~0L" "Left button" "Middle button" "Right button")
  (format *stdcon* "~18S~18S~18S~%" arg0 arg1 arg2)
  (format *stdcon* "~1K")
  (none)
  )

(defmethod nav-graph-editor-method-28 nav-graph-editor ((obj nav-graph-editor))
  (local-vars (sv-144 int) (sv-160 (function _varargs_ object)))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> obj nav-graph)))
      (dotimes (s4-0 (-> gp-0 node-array length))
        (let ((s2-0 (-> gp-0 node-array data s4-0)))
          (set! (-> s2-0 visible) #f)
          (when (and (not (logtest? (-> s2-0 nav_node_flag) (nav-node-flag hidden)))
                     (not (logtest? (-> s2-0 mysql-save-flag) (mysql-save-flag delete)))
                     )
            (let ((s3-0 (new 'stack-no-clear 'vector)))
              (let ((v1-8 (new 'stack-no-clear 'vector)))
                (set-vector! s3-0 (-> s2-0 position x) (-> s2-0 position y) (-> s2-0 position z) 1.0)
                (set! (-> v1-8 quad) (-> s3-0 quad))
                (set! (-> v1-8 w) (-> s2-0 radius))
                )
              (set! (-> s2-0 cam-dist) (vector-vector-distance-squared s3-0 (camera-pos)))
              (let ((f0-6 (-> s2-0 cam-dist))
                    (f1-0 (-> obj clipping-dist))
                    )
                (set! (-> s2-0 visible) (< f0-6 (* f1-0 f1-0)))
                )
              (if (or (and (-> obj vehicle-edit-mode) (logtest? (-> s2-0 nav_node_flag) (nav-node-flag pedestrian)))
                      (and (not (-> obj vehicle-edit-mode)) (not (logtest? (-> s2-0 nav_node_flag) (nav-node-flag pedestrian))))
                      )
                  (set! (-> s2-0 visible) #f)
                  )
              (when (-> s2-0 visible)
                (let ((v1-21 (new 'stack-no-clear 'inline-array 'vector 2)))
                  (let ((a1-4 (-> v1-21 0)))
                    (let ((a0-11 s3-0))
                      (let ((a2-1 -4096.0))
                        (.mov vf6 a2-1)
                        )
                      (.lvf vf4 (&-> a0-11 quad))
                      )
                    (.add.x.vf vf5 vf0 vf0 :mask #b1000)
                    (.add.x.vf vf5 vf4 vf6 :mask #b111)
                    (.svf (&-> a1-4 quad) vf5)
                    )
                  (let ((a1-5 (-> v1-21 1)))
                    (let ((a0-12 s3-0))
                      (let ((a2-3 4096.0))
                        (.mov vf6 a2-3)
                        )
                      (.lvf vf4 (&-> a0-12 quad))
                      )
                    (.add.x.vf vf5 vf0 vf0 :mask #b1000)
                    (.add.x.vf vf5 vf4 vf6 :mask #b111)
                    (.svf (&-> a1-5 quad) vf5)
                    )
                  (add-debug-box #t (bucket-id debug2) (-> v1-21 0) (-> v1-21 1) *color-yellow*)
                  )
                (add-debug-x #t (bucket-id debug2) s3-0 *color-red*)
                (let ((s1-1 add-debug-text-3d)
                      (s0-1 #t)
                      )
                  (set! sv-144 324)
                  (set! sv-160 format)
                  (let ((a0-16 (clear *temp-string*))
                        (a1-8 "~D")
                        (a2-6 (-> s2-0 nav_mesh_id))
                        )
                    (sv-160 a0-16 a1-8 a2-6)
                    )
                  (let* ((a2-7 *temp-string*)
                         (a3-2 s3-0)
                         (v1-24 (-> s2-0 level_name))
                         (t0-1 (cond
                                 ((= v1-24 'ctyport)
                                  3
                                  )
                                 ((= v1-24 'ctyinda)
                                  4
                                  )
                                 ((= v1-24 'ctyindb)
                                  5
                                  )
                                 ((= v1-24 'ctypal)
                                  6
                                  )
                                 ((= v1-24 'ctysluma)
                                  7
                                  )
                                 ((= v1-24 'ctyslumb)
                                  8
                                  )
                                 ((= v1-24 'ctyslumc)
                                  9
                                  )
                                 (else
                                   1
                                   )
                                 )
                               )
                         (t1-0 #f)
                         )
                    (s1-1 s0-1 (the-as bucket-id sv-144) a2-7 a3-2 (the-as font-color t0-1) (the-as vector2h t1-0))
                    )
                  )
                (let ((s1-2 (new 'stack-no-clear 'vector)))
                  (let ((s0-2 (new 'stack-no-clear 'vector)))
                    (sincos! s0-2 (-> s2-0 angle))
                    (set! (-> s1-2 x) (-> s0-2 y))
                    (set! (-> s1-2 y) 0.0)
                    (set! (-> s1-2 z) (- (-> s0-2 x)))
                    )
                  (set! (-> s1-2 w) 1.0)
                  (add-debug-vector #t (bucket-id debug2) s3-0 s1-2 (meters 2) *color-green*)
                  )
                )
              )
            )
          )
        )
      (dotimes (s5-1 (-> gp-0 edge-array length))
        (let ((a1-12 (-> gp-0 edge-array data s5-1)))
          (when (not (logtest? (-> a1-12 mysql-save-flag) (mysql-save-flag delete)))
            (let ((v1-40 (-> gp-0 node-array data (-> a1-12 runtime-node-id-1)))
                  (a2-11 (-> gp-0 node-array data (-> a1-12 runtime-node-id-2)))
                  (a0-33 (new 'stack-no-clear 'vector))
                  (a3-4 (new 'stack-no-clear 'vector))
                  )
              (cond
                ((and (>= (-> a1-12 runtime-node-id-1) 0)
                      (>= (-> a1-12 runtime-node-id-2) 0)
                      (-> v1-40 visible)
                      (-> a2-11 visible)
                      )
                 (vector-! a0-33 (-> a2-11 position) (-> v1-40 position))
                 (let* ((f0-15 (vector-length a0-33))
                        (f1-5 (fmax (* 0.75 f0-15) (+ -8192.0 f0-15)))
                        )
                   (vector-float*! a0-33 a0-33 (/ f1-5 f0-15))
                   )
                 (vector+! a3-4 (-> v1-40 position) a0-33)
                 (add-debug-line
                   #t
                   (bucket-id debug2)
                   (-> v1-40 position)
                   a3-4
                   (if (logtest? (-> v1-40 nav_node_flag) (nav-node-flag pedestrian))
                       *color-dark-red*
                       *color-dark-blue*
                       )
                   #f
                   *color-white*
                   )
                 )
                (else
                  #f
                  )
                )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod nav-graph-editor-method-34 nav-graph-editor ((obj nav-graph-editor))
  (with-pp
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (set! (-> obj mouse-pos quad) (-> (camera-pos) quad))
      (let ((s5-1 (new 'stack-no-clear 'vector))
            (s2-0 (new 'stack-no-clear 'vector))
            (s3-0 (new 'stack-no-clear 'vector))
            (s1-0 (new 'stack-no-clear 'vector))
            (s4-0 (new 'stack-no-clear 'vector))
            )
        (set! (-> s4-0 quad) (-> *up-vector* quad))
        (set-vector! s1-0 (-> *mouse* posx) (-> *mouse* posy) 0.0 1.0)
        (cond
          ((not (-> obj vehicle-edit-mode))
           (set! (-> s3-0 quad) (-> (camera-matrix) vector 2 quad))
           (let ((s0-0 s2-0))
             (let ((s4-2 (-> obj mouse-pos)))
               (let ((v1-8 (-> (camera-matrix) vector 2)))
                 (let ((a0-4 (-> obj clipping-dist)))
                   (.mov vf7 a0-4)
                   )
                 (.lvf vf5 (&-> v1-8 quad))
                 )
               (.lvf vf4 (&-> s4-2 quad))
               )
             (.add.x.vf vf6 vf0 vf0 :mask #b1000)
             (.mul.x.vf acc vf5 vf7 :mask #b111)
             (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
             (.svf (&-> s0-0 quad) vf6)
             )
           (reverse-transform-point! s5-1 s2-0 s3-0 s1-0)
           (let ((s4-3 (new 'stack 'collide-query)))
             (set! (-> s4-3 start-pos quad) (-> obj mouse-pos quad))
             (vector-! (-> s4-3 move-dist) s5-1 (-> obj mouse-pos))
             (let ((v1-12 s4-3))
               (set! (-> v1-12 radius) 4096.0)
               (set! (-> v1-12 collide-with) (collide-spec backgnd obstacle hit-by-player-list hit-by-others-list))
               (set! (-> v1-12 ignore-process0) pp)
               (set! (-> v1-12 ignore-process1) #f)
               (set! (-> v1-12 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
               (set! (-> v1-12 action-mask) (collide-action solid))
               )
             (let ((f0-6 (fill-and-probe-using-line-sphere *collide-cache* s4-3)))
               (when (>= f0-6 0.0)
                 (let ((a1-3 (-> obj mouse-hit)))
                   (let ((v1-16 (-> s4-3 start-pos)))
                     (let ((a0-16 (-> s4-3 move-dist)))
                       (let ((a2-1 f0-6))
                         (.mov vf7 a2-1)
                         )
                       (.lvf vf5 (&-> a0-16 quad))
                       )
                     (.lvf vf4 (&-> v1-16 quad))
                     )
                   (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                   (.mul.x.vf acc vf5 vf7 :mask #b111)
                   (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                   (.svf (&-> a1-3 quad) vf6)
                   )
                 (vector+!
                   (-> obj mouse-hit-pick)
                   (-> obj mouse-hit)
                   (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s4-3 move-dist) 4096.0)
                   )
                 (set! (-> obj mouse-normal quad) (-> s4-3 best-other-tri normal quad))
                 (dotimes (s5-3 (-> *level* length))
                   (let ((s4-4 (-> *level* level s5-3)))
                     (when (= (-> s4-4 status) 'active)
                       (let ((s3-3 (-> s4-4 bsp nav-meshes)))
                         (when (nonzero? s3-3)
                           (dotimes (s2-1 (-> s3-3 length))
                             (let* ((s0-1 (-> s3-3 s2-1))
                                    (s1-1 (-> s0-1 aid))
                                    (v1-28 (if (type? s0-1 entity-nav-mesh)
                                               s0-1
                                               )
                                           )
                                    )
                               (when v1-28
                                 (let ((a0-24 (-> v1-28 nav-mesh))
                                       (a1-6 (new 'stack-no-clear 'nav-find-poly-parms))
                                       )
                                   (vector-! (-> a1-6 point) (-> obj mouse-hit) (-> a0-24 bounds))
                                   (set! (-> a1-6 y-threshold) 40960.0)
                                   (set! (-> a1-6 ignore) (the-as uint 2))
                                   (if (find-poly-containing-point-local a0-24 a1-6)
                                       (format *stdcon* "Mouse : ~S ~D~%" (-> s4-4 name) s1-1)
                                       )
                                   )
                                 )
                               )
                             )
                           )
                         )
                       )
                     )
                   )
                 )
               )
             )
           (let ((s5-4 (new 'stack-no-clear 'vector)))
             (set! (-> s5-4 quad) (-> obj mouse-hit quad))
             (let ((s4-5 (quaternion-from-two-vectors! (new 'stack-no-clear 'quaternion) *up-vector* (-> obj mouse-normal))))
               (add-debug-vector
                 #t
                 (bucket-id debug2)
                 s5-4
                 (vector-orient-by-quat! (new 'stack-no-clear 'vector) (new 'static 'vector :x 8192.0 :w 1.0) s4-5)
                 (meters 0.00024414062)
                 *color-blue*
                 )
               (add-debug-vector
                 #t
                 (bucket-id debug2)
                 s5-4
                 (vector-orient-by-quat! (new 'stack-no-clear 'vector) (new 'static 'vector :x -8192.0 :w 1.0) s4-5)
                 (meters 0.00024414062)
                 *color-blue*
                 )
               (add-debug-vector
                 #t
                 (bucket-id debug2)
                 s5-4
                 (vector-orient-by-quat! (new 'stack-no-clear 'vector) (new 'static 'vector :z 8192.0 :w 1.0) s4-5)
                 (meters 0.00024414062)
                 *color-green*
                 )
               (add-debug-vector
                 #t
                 (bucket-id debug2)
                 s5-4
                 (vector-orient-by-quat! (new 'stack-no-clear 'vector) (new 'static 'vector :z -8192.0 :w 1.0) s4-5)
                 (meters 0.00024414062)
                 *color-green*
                 )
               )
             )
           (add-debug-vector
             #t
             (bucket-id debug-no-zbuf1)
             (-> obj mouse-hit)
             (-> obj mouse-normal)
             (meters 5)
             *color-red*
             )
           )
          ((and (-> obj next-state) (= (-> obj next-state name) 'move-plane))
           (vector-cross! s3-0 *up-vector* (the-as vector (-> (camera-matrix) vector)))
           (vector-normalize! s3-0 1.0)
           (set! (-> s2-0 quad) (-> obj mouse-hit quad))
           (reverse-transform-point! s5-1 s2-0 s3-0 s1-0)
           (set! (-> obj plane-height) (-> s5-1 y))
           (let ((s5-5 (new 'stack-no-clear 'vector)))
             (set-vector! s5-5 (-> obj mouse-hit x) (-> obj plane-height) (-> obj mouse-hit z) 1.0)
             (add-debug-vector
               #t
               (bucket-id debug2)
               s5-5
               (new 'static 'vector :x 4096.0 :w 1.0)
               (meters 0.0024414062)
               *color-red*
               )
             (add-debug-vector
               #t
               (bucket-id debug2)
               s5-5
               (new 'static 'vector :x -4096.0 :w 1.0)
               (meters 0.0024414062)
               *color-red*
               )
             (add-debug-vector
               #t
               (bucket-id debug2)
               s5-5
               (new 'static 'vector :z 4096.0 :w 1.0)
               (meters 0.0024414062)
               *color-blue*
               )
             (add-debug-vector
               #t
               (bucket-id debug2)
               s5-5
               (new 'static 'vector :z -4096.0 :w 1.0)
               (meters 0.0024414062)
               *color-blue*
               )
             (add-debug-vector
               #t
               (bucket-id debug2)
               s5-5
               (new 'static 'vector :y 4096.0 :w 1.0)
               (meters 0.009765625)
               *color-green*
               )
             (add-debug-vector
               #t
               (bucket-id debug2)
               s5-5
               (new 'static 'vector :y -4096.0 :w 1.0)
               (meters 0.009765625)
               *color-green*
               )
             (let ((gp-2 (vector+! (new 'stack-no-clear 'vector) s5-5 (new 'static 'vector :x 12288.0 :z 12288.0 :w 1.0)))
                   (s4-8 (vector+! (new 'stack-no-clear 'vector) s5-5 (new 'static 'vector :x 12288.0 :z -12288.0 :w 1.0)))
                   (s3-9 (vector+! (new 'stack-no-clear 'vector) s5-5 (new 'static 'vector :x -12288.0 :z -12288.0 :w 1.0)))
                   (s2-7 (vector+! (new 'stack-no-clear 'vector) s5-5 (new 'static 'vector :x -12288.0 :z 12288.0 :w 1.0)))
                   )
               (add-debug-line #t (bucket-id debug2) gp-2 s4-8 *color-white* #f (the-as rgba -1))
               (add-debug-line #t (bucket-id debug2) s4-8 s3-9 *color-white* #f (the-as rgba -1))
               (add-debug-line #t (bucket-id debug2) s3-9 s2-7 *color-white* #f (the-as rgba -1))
               (add-debug-line #t (bucket-id debug2) s2-7 gp-2 *color-white* #f (the-as rgba -1))
               )
             )
           )
          (else
            (set! (-> s3-0 quad) (-> *up-vector* quad))
            (set! (-> s2-0 quad) (-> obj mouse-pos quad))
            (set! (-> s2-0 y) (-> obj plane-height))
            (reverse-transform-point! s5-1 s2-0 s3-0 s1-0)
            (set! (-> s4-0 quad) (-> s3-0 quad))
            (let ((v1-57 (new 'stack-no-clear 'matrix)))
              (dotimes (a0-64 4)
                (set! (-> v1-57 quad a0-64) (the-as uint128 0))
                )
              (vector+! (the-as vector (-> v1-57 vector)) s5-1 (new 'static 'vector :x 8192.0 :z 8192.0 :w 1.0))
              (vector+! (-> v1-57 vector 1) s5-1 (new 'static 'vector :x 8192.0 :z -8192.0 :w 1.0))
              (vector+! (-> v1-57 vector 2) s5-1 (new 'static 'vector :x -8192.0 :z -8192.0 :w 1.0))
              (vector+! (-> v1-57 trans) s5-1 (new 'static 'vector :x -8192.0 :z 8192.0 :w 1.0))
              )
            (let ((f30-0 50.0))
              (if (= (-> obj nav-graph nav_graph_id) 2)
                  (set! f30-0 4.0)
                  )
              (add-debug-vector
                #t
                (bucket-id debug2)
                s5-1
                (new 'static 'vector :x 4096.0 :w 1.0)
                (the-as meters f30-0)
                *color-red*
                )
              (add-debug-vector
                #t
                (bucket-id debug2)
                s5-1
                (new 'static 'vector :x -4096.0 :w 1.0)
                (the-as meters f30-0)
                *color-red*
                )
              (add-debug-vector
                #t
                (bucket-id debug2)
                s5-1
                (new 'static 'vector :z 4096.0 :w 1.0)
                (the-as meters f30-0)
                *color-blue*
                )
              (add-debug-vector
                #t
                (bucket-id debug2)
                s5-1
                (new 'static 'vector :z -4096.0 :w 1.0)
                (the-as meters f30-0)
                *color-blue*
                )
              (add-debug-vector
                #t
                (bucket-id debug2)
                s5-1
                (new 'static 'vector :y 4096.0 :w 1.0)
                (the-as meters f30-0)
                *color-green*
                )
              (add-debug-vector
                #t
                (bucket-id debug2)
                s5-1
                (new 'static 'vector :y -4096.0 :w 1.0)
                (the-as meters f30-0)
                *color-green*
                )
              )
            (set! (-> obj mouse-hit quad) (-> s5-1 quad))
            (set! (-> obj mouse-hit-pick quad) (-> s5-1 quad))
            (let ((v0-19 (the-as object (-> obj mouse-normal))))
              (set! (-> (the-as vector v0-19) quad) (-> s4-0 quad))
              v0-19
              )
            )
          )
        )
      )
    )
  )

(defmethod nav-graph-editor-method-41 nav-graph-editor ((obj nav-graph-editor))
  (set! (-> obj selected-index) -1)
  (none)
  )

(defmethod nav-graph-editor-method-42 nav-graph-editor ((obj nav-graph-editor))
  (let ((s5-0 (-> obj nav-graph)))
    (dotimes (s4-0 (-> s5-0 node-array length))
      (let ((s3-0 (-> s5-0 node-array data s4-0)))
        (when (and (-> s3-0 visible)
                   (not (logtest? (-> s3-0 nav_node_flag) (nav-node-flag hidden)))
                   (not (logtest? (-> s3-0 mysql-save-flag) (mysql-save-flag delete)))
                   )
          (let ((a0-4 (new 'stack-no-clear 'vector))
                (v1-9 (new 'stack-no-clear 'vector))
                )
            (set-vector! a0-4 (-> s3-0 position x) (-> s3-0 position y) (-> s3-0 position z) 1.0)
            (set! (-> v1-9 quad) (-> a0-4 quad))
            (set! (-> v1-9 w) 11468.8)
            (when (< 0.0 (ray-sphere-intersect
                           (-> obj mouse-pos)
                           (vector-! (new 'stack-no-clear 'vector) (-> obj mouse-hit-pick) (-> obj mouse-pos))
                           v1-9
                           (-> v1-9 w)
                           )
                     )
              (let ((f0-8 (+ -8192.0 (-> s3-0 cam-dist))))
                (when (or (= (-> obj selected-index) -1) (< f0-8 (-> obj selected-dist)))
                  (set! (-> obj selected-index) s4-0)
                  (set! (-> obj selected-dist) f0-8)
                  (set! (-> obj selected-node-edge?) #t)
                  )
                )
              )
            )
          )
        )
      )
    )
  #f
  )

(defmethod nav-graph-editor-method-44 nav-graph-editor ((obj nav-graph-editor))
  (set! (-> obj closest-node) -1)
  (set! (-> obj dist-closest-node) 0.0)
  (let ((s5-0 (-> obj nav-graph)))
    (dotimes (s4-0 (-> s5-0 node-array length))
      (let ((v1-4 (-> s5-0 node-array data s4-0)))
        (when (and (-> v1-4 visible)
                   (not (logtest? (-> v1-4 nav_node_flag) (nav-node-flag hidden)))
                   (not (logtest? (-> v1-4 mysql-save-flag) (mysql-save-flag delete)))
                   )
          (let ((f0-1 (vector-vector-distance (-> v1-4 position) (-> obj mouse-hit))))
            (when (or (< (-> obj closest-node) 0) (< f0-1 (-> obj dist-closest-node)))
              (set! (-> obj closest-node) s4-0)
              (set! (-> obj dist-closest-node) f0-1)
              )
            )
          )
        )
      )
    )
  #f
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod nav-graph-editor-method-45 nav-graph-editor ((obj nav-graph-editor))
  (set! (-> obj closest-edge) -1)
  (set! (-> obj dist-closest-edge) 0.0)
  (let ((s5-0 (-> obj nav-graph)))
    0.0
    (dotimes (s4-0 (-> s5-0 edge-array length))
      (let ((a0-2 (-> s5-0 edge-array data s4-0)))
        (when (not (logtest? (-> a0-2 mysql-save-flag) (mysql-save-flag delete)))
          (let ((v1-9 (-> s5-0 node-array data (-> a0-2 runtime-node-id-1)))
                (a1-5 (-> s5-0 node-array data (-> a0-2 runtime-node-id-2)))
                )
            (new 'stack-no-clear 'vector)
            (let ((a3-0 (new 'stack-no-clear 'vector)))
              (when (and (>= (-> a0-2 runtime-node-id-1) 0)
                         (>= (-> a0-2 runtime-node-id-2) 0)
                         (-> v1-9 visible)
                         (-> a1-5 visible)
                         )
                (let ((f0-2 (vector-segment-distance-point! (-> obj mouse-hit) (-> a1-5 position) (-> v1-9 position) a3-0)))
                  (when (or (< (-> obj closest-edge) 0) (< f0-2 (-> obj dist-closest-edge)))
                    (set! (-> obj closest-edge) s4-0)
                    (set! (-> obj dist-closest-edge) f0-2)
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod nav-graph-editor-method-43 nav-graph-editor ((obj nav-graph-editor))
  (local-vars (sv-128 vector) (sv-144 vector))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> obj nav-graph)))
      (dotimes (s4-0 (-> s5-0 edge-array length))
        (let ((a0-2 (-> s5-0 edge-array data s4-0)))
          (when (not (logtest? (-> a0-2 mysql-save-flag) (mysql-save-flag delete)))
            (let ((v1-8 (-> s5-0 node-array data (-> a0-2 runtime-node-id-1)))
                  (a1-5 (-> s5-0 node-array data (-> a0-2 runtime-node-id-2)))
                  (s2-0 (new 'stack-no-clear 'vector))
                  (s3-0 (new 'stack-no-clear 'vector))
                  )
              (when (and (>= (-> a0-2 runtime-node-id-1) 0)
                         (>= (-> a0-2 runtime-node-id-2) 0)
                         (-> v1-8 visible)
                         (-> a1-5 visible)
                         )
                (vector-! s2-0 (-> a1-5 position) (-> v1-8 position))
                (let ((s1-0 (new 'stack-no-clear 'vector)))
                  (set! (-> s1-0 quad) (-> v1-8 position quad))
                  (let ((s0-0 (new 'stack-no-clear 'vector)))
                    (set! (-> s0-0 quad) (-> a1-5 position quad))
                    (let ((v0-0 (vector-normalize-copy! (new 'stack-no-clear 'vector) s2-0 4915.2)))
                      (vector+! s1-0 s1-0 v0-0)
                      (vector-! s0-0 s0-0 v0-0)
                      )
                    (vector-! s2-0 s0-0 s1-0)
                    )
                  (let ((f30-0 0.0)
                        (s0-1 ray-cylinder-intersect)
                        )
                    (set! sv-128 (-> obj mouse-pos))
                    (set! sv-144 (new 'stack-no-clear 'vector))
                    (let ((v1-18 (-> obj mouse-hit-pick))
                          (a0-13 (-> obj mouse-pos))
                          )
                      (.lvf vf4 (&-> v1-18 quad))
                      (.lvf vf5 (&-> a0-13 quad))
                      )
                    (.mov.vf vf6 vf0 :mask #b1000)
                    (.sub.vf vf6 vf4 vf5 :mask #b111)
                    (.svf (&-> sv-144 quad) vf6)
                    (let ((a3-3 (vector-normalize-copy! (new 'stack-no-clear 'vector) s2-0 1.0))
                          (t0-0 1024.0)
                          (t1-0 (vector-length s2-0))
                          (t2-0 s3-0)
                          )
                      (when (< f30-0 (s0-1 sv-128 sv-144 s1-0 a3-3 t0-0 t1-0 t2-0))
                        (let ((f0-1 (vector-vector-distance s3-0 (-> obj mouse-pos))))
                          (when (or (= (-> obj selected-index) -1) (< f0-1 (-> obj selected-dist)))
                            (set! (-> obj selected-index) s4-0)
                            (set! (-> obj selected-dist) f0-1)
                            (set! (-> obj selected-node-edge?) #f)
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    (none)
    )
  )

(defmethod nav-graph-editor-method-32 nav-graph-editor ((obj nav-graph-editor) (arg0 symbol) (arg1 int))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((v1-0 (-> obj nav-graph)))
      (when (>= arg1 0)
        (cond
          (arg0
            (let ((gp-0 (-> v1-0 node-array data arg1)))
              (set-vector!
                (new 'stack-no-clear 'vector)
                (-> gp-0 position x)
                (-> gp-0 position y)
                (-> gp-0 position z)
                11468.8
                )
              (let ((v1-3 (new 'stack-no-clear 'vector)))
                (let ((a1-1 (&-> v1-3 x)))
                  (let ((a0-5 (-> gp-0 position)))
                    (let ((a2-2 -4096.0))
                      (.mov vf6 a2-2)
                      )
                    (.lvf vf4 (&-> a0-5 quad))
                    )
                  (.add.x.vf vf5 vf0 vf0 :mask #b1000)
                  (.add.x.vf vf5 vf4 vf6 :mask #b111)
                  (.svf (the-as (pointer uint128) (&-> a1-1 0)) vf5)
                  )
                (let ((a1-2 (&+ v1-3 16)))
                  (let ((a0-6 (-> gp-0 position)))
                    (let ((a2-4 4096.0))
                      (.mov vf6 a2-4)
                      )
                    (.lvf vf4 (&-> a0-6 quad))
                    )
                  (.add.x.vf vf5 vf0 vf0 :mask #b1000)
                  (.add.x.vf vf5 vf4 vf6 :mask #b111)
                  (.svf (&-> a1-2 quad) vf5)
                  )
                (add-debug-box #t (bucket-id debug2) (the-as vector (&-> v1-3 x)) (&+ v1-3 16) *color-green*)
                )
              (format *stdcon* "selected node level : ~S~%" (-> gp-0 level_name))
              )
            )
          (else
            (let* ((a0-12 (-> v1-0 edge-array data arg1))
                   (t0-1 (-> v1-0 node-array data (-> a0-12 runtime-node-id-1)))
                   (v1-6 (-> v1-0 node-array data (-> a0-12 runtime-node-id-2)))
                   )
              (add-debug-line-sphere
                #t
                (bucket-id debug2)
                (-> t0-1 position)
                (vector-! (new 'stack-no-clear 'vector) (-> v1-6 position) (-> t0-1 position))
                1024.0
                *color-green*
                )
              )
            )
          )
        )
      )
    (none)
    )
  )

(defmethod nav-graph-editor-method-47 nav-graph-editor ((obj nav-graph-editor))
  (+! (-> obj command-id) 1)
  (-> obj command-id)
  (none)
  )

(defmethod nav-graph-editor-method-48 nav-graph-editor ((obj nav-graph-editor) (arg0 uint))
  "TODO - enum / com-type"
  (let* ((v1-1 (-> obj command-array length))
         (v0-0 (-> obj command-array data v1-1))
         )
    (+! (-> obj command-array length) 1)
    (set! (-> obj max-command) v1-1)
    (set! (-> v0-0 com-type) arg0)
    (set! (-> v0-0 id) (-> obj command-id))
    v0-0
    )
  )

(defmethod nav-graph-editor-method-49 nav-graph-editor ((obj nav-graph-editor))
  (-> obj command-array data (+ (-> obj command-array length) -1))
  )

(defmethod nav-graph-editor-method-50 nav-graph-editor ((obj nav-graph-editor))
  (+! (-> obj command-array length) -1)
  (set! (-> obj max-command) (-> obj command-array length))
  (none)
  )

;; WARN: new jak 2 until loop case, check carefully
(defmethod nav-graph-editor-method-58 nav-graph-editor ((obj nav-graph-editor))
  (if (zero? (-> obj command-array length))
      (return #f)
      )
  (let ((s5-0 (-> obj command-array data (+ (-> obj command-array length) -1) id)))
    (until #f
      (if (zero? (-> obj command-array length))
          (return #t)
          )
      (let ((s4-0 (-> obj command-array data (+ (-> obj command-array length) -1))))
        (if (!= s5-0 (-> s4-0 id))
            (return #t)
            )
        (let ((v1-20 (-> s4-0 com-type)))
          (cond
            ((zero? v1-20)
             (format #t "Undo move-node ~D~%" (-> s4-0 id))
             (vector-!
               (the-as vector (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> s4-0 index))))
               (the-as vector (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> s4-0 index))))
               (-> s4-0 move-vec)
               )
             (nav-graph-editor-method-54 obj (-> s4-0 index))
             )
            ((= v1-20 1)
             (format #t "Undo delete-edge ~D~%" (-> s4-0 id))
             (logclear! (-> obj nav-graph edge-array data (-> s4-0 index) mysql-save-flag) (mysql-save-flag delete))
             )
            ((= v1-20 2)
             (format #t "Undo delete-node ~D~%" (-> s4-0 id))
             (logclear! (-> obj nav-graph node-array data (-> s4-0 index) mysql-save-flag) (mysql-save-flag delete))
             )
            ((= v1-20 5)
             (format #t "Undo delete-visnode ~D~%" (-> s4-0 id))
             (logclear! (-> obj nav-graph visnode-array data (-> s4-0 index) mysql-save-flag) (mysql-save-flag delete))
             )
            ((= v1-20 3)
             (format #t "Undo new-node ~D~%" (-> s4-0 id))
             (logior! (-> obj nav-graph node-array data (-> s4-0 index) mysql-save-flag) (mysql-save-flag delete))
             )
            ((= v1-20 6)
             (format #t "Undo new-visnode ~D~%" (-> s4-0 id))
             (logior! (-> obj nav-graph visnode-array data (-> s4-0 index) mysql-save-flag) (mysql-save-flag delete))
             )
            ((= v1-20 4)
             (format #t "Undo new-edge ~D~%" (-> s4-0 id))
             (logior! (-> obj nav-graph edge-array data (-> s4-0 index) mysql-save-flag) (mysql-save-flag delete))
             )
            )
          )
        )
      (+! (-> obj command-array length) -1)
      )
    )
  #f
  )

(defmethod nav-graph-editor-method-51 nav-graph-editor ((obj nav-graph-editor))
  (let ((gp-0 (alloc-new-node! (-> obj nav-graph))))
    (when (!= gp-0 -1)
      (let ((v1-6 (-> obj nav-graph node-array data gp-0))
            (a0-4 (-> obj default-node))
            )
        (set! (-> v1-6 position quad) (-> obj mouse-hit quad))
        (set! (-> v1-6 angle) (-> a0-4 angle))
        (set! (-> v1-6 radius) (-> a0-4 radius))
        (set! (-> v1-6 nav_mesh_id) (-> a0-4 nav_mesh_id))
        (set! (-> v1-6 nav_node_flag) (-> a0-4 nav_node_flag))
        )
      (nav-graph-editor-method-54 obj gp-0)
      (set! (-> (nav-graph-editor-method-48 obj (the-as uint 3)) index) gp-0)
      )
    )
  (none)
  )

(defmethod nav-graph-editor-method-53 nav-graph-editor ((obj nav-graph-editor) (arg0 int) (arg1 int))
  (let ((s5-0 (indexof-visnode (-> obj nav-graph) arg0 arg1)))
    (if (= s5-0 -1)
        (set! s5-0 (alloc-new-visnode! (-> obj nav-graph) arg0 arg1))
        )
    (when (!= s5-0 -1)
      (logclear! (-> obj nav-graph visnode-array data s5-0 mysql-save-flag) (mysql-save-flag delete))
      (set! (-> (nav-graph-editor-method-48 obj (the-as uint 6)) index) s5-0)
      )
    )
  (none)
  )

;; WARN: Return type mismatch int vs uint.
(defmethod nav-graph-editor-method-52 nav-graph-editor ((obj nav-graph-editor))
  (let ((gp-0 (alloc-new-edge! (-> obj nav-graph))))
    (when (!= gp-0 -1)
      (let ((v1-6 (-> obj nav-graph edge-array data gp-0))
            (a0-4 (-> obj default-edge))
            )
        (set! (-> v1-6 runtime-node-id-1) (-> obj edge-src))
        (set! (-> v1-6 runtime-node-id-2) (-> obj edge-dst))
        (set! (-> v1-6 directionality) (nav-directionality bi_directional))
        (set! (-> v1-6 speed_limit) (-> a0-4 speed_limit))
        (set! (-> v1-6 density) (-> a0-4 density))
        (set! (-> v1-6 traffic_edge_flag) (-> a0-4 traffic_edge_flag))
        (set! (-> v1-6 nav_clock_mask) (-> a0-4 nav_clock_mask))
        (set! (-> v1-6 nav_clock_type) (-> a0-4 nav_clock_type))
        (set! (-> v1-6 width) (-> a0-4 width))
        (set! (-> v1-6 minimap_edge_flag) (-> a0-4 minimap_edge_flag))
        )
      (set! (-> (nav-graph-editor-method-48 obj (the-as uint 4)) index) gp-0)
      )
    (the-as uint gp-0)
    )
  )

(defmethod nav-graph-editor-method-57 nav-graph-editor ((obj nav-graph-editor) (arg0 int) (arg1 int))
  (case (indexof-visnode (-> obj nav-graph) arg0 arg1)
    ((-1)
     (return (the-as int #f))
     )
    )
  (let ((s5-1 (alloc-new-visnode! (-> obj nav-graph) arg0 arg1)))
    (when (!= s5-1 -1)
      (nav-graph-editor-method-47 obj)
      (logior! (-> obj nav-graph visnode-array data s5-1 mysql-save-flag) (mysql-save-flag delete))
      (set! (-> (nav-graph-editor-method-48 obj (the-as uint 5)) index) s5-1)
      )
    )
  0
  )

(defmethod nav-graph-editor-method-55 nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (nav-graph-editor-method-47 obj)
  (let ((s5-0 (-> obj nav-graph node-array data arg0)))
    (logior! (-> s5-0 mysql-save-flag) (mysql-save-flag delete))
    (set! (-> (nav-graph-editor-method-48 obj (the-as uint 2)) index) arg0)
    (dotimes (s3-0 (-> obj nav-graph edge-array length))
      (let ((v1-13 (-> obj nav-graph edge-array data s3-0)))
        (when (and (not (logtest? (-> v1-13 mysql-save-flag) (mysql-save-flag delete)))
                   (or (= (-> v1-13 runtime-node-id-1) arg0) (= (-> v1-13 runtime-node-id-2) arg0))
                   )
          (logior! (-> v1-13 mysql-save-flag) (mysql-save-flag delete))
          (set! (-> (nav-graph-editor-method-48 obj (the-as uint 1)) index) s3-0)
          )
        )
      )
    (dotimes (s4-1 (-> obj nav-graph visnode-array length))
      (let ((v1-23 (-> obj nav-graph visnode-array data s4-1)))
        (when (and (not (logtest? (-> v1-23 mysql-save-flag) (mysql-save-flag delete)))
                   (= (-> v1-23 runtime-node-id) (-> s5-0 runtime-id))
                   )
          (logior! (-> v1-23 mysql-save-flag) (mysql-save-flag delete))
          (set! (-> (nav-graph-editor-method-48 obj (the-as uint 5)) index) s4-1)
          )
        )
      )
    )
  0
  (none)
  )

(defmethod nav-graph-editor-method-56 nav-graph-editor ((obj nav-graph-editor) (arg0 int))
  (nav-graph-editor-method-47 obj)
  (let ((s5-0 (-> obj nav-graph edge-array data arg0)))
    (logior! (-> s5-0 mysql-save-flag) (mysql-save-flag delete))
    (set! (-> (nav-graph-editor-method-48 obj (the-as uint 1)) index) arg0)
    (dotimes (s4-1 (-> obj nav-graph visnode-array length))
      (let ((v1-11 (-> obj nav-graph visnode-array data s4-1)))
        (when (and (not (logtest? (-> v1-11 mysql-save-flag) (mysql-save-flag delete)))
                   (= (-> v1-11 runtime-edge-id) (-> s5-0 runtime-id))
                   )
          (logior! (-> v1-11 mysql-save-flag) (mysql-save-flag delete))
          (set! (-> (nav-graph-editor-method-48 obj (the-as uint 5)) index) s4-1)
          )
        )
      )
    (dotimes (s4-2 2)
      (let ((s3-0 (if (zero? s4-2)
                      (-> s5-0 runtime-node-id-1)
                      (-> s5-0 runtime-node-id-2)
                      )
                  )
            (v1-19 #f)
            )
        (dotimes (a0-16 (-> obj nav-graph edge-array length))
          (let ((a1-7 (-> obj nav-graph edge-array data a0-16)))
            (if (and (not (logtest? (-> a1-7 mysql-save-flag) (mysql-save-flag delete)))
                     (or (= (-> a1-7 runtime-node-id-1) s3-0) (= (-> a1-7 runtime-node-id-2) s3-0))
                     )
                (set! v1-19 #t)
                )
            )
          )
        (when (not v1-19)
          (let ((v1-24 (-> obj nav-graph node-array data s3-0)))
            (logior! (-> v1-24 mysql-save-flag) (mysql-save-flag delete))
            )
          (set! (-> (nav-graph-editor-method-48 obj (the-as uint 2)) index) s3-0)
          )
        )
      )
    )
  0
  (none)
  )

(defmethod nav-graph-editor-method-59 nav-graph-editor ((obj nav-graph-editor))
  (if (cpad-pressed? 0 triangle)
      (nav-graph-editor-method-58 obj)
      )
  (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons triangle))
  (let ((v0-1 (logclear (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons triangle))))
    (set! (-> *cpad-list* cpads 0 button0-rel 0) v0-1)
    v0-1
    )
  )

(defmethod nav-graph-editor-method-46 nav-graph-editor ((obj nav-graph-editor))
  (if (cpad-pressed? 0 up)
      (go (method-of-object obj create))
      )
  (if (cpad-pressed? 0 down)
      (go (method-of-object obj adjust-it))
      )
  (if (cpad-pressed? 0 left)
      (go (method-of-object obj adjust-minimap))
      )
  (if (cpad-pressed? 0 right)
      (go (method-of-object obj adjust-plane))
      )
  (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons up))
  (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons up))
  (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons down))
  (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons down))
  (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons left))
  (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons left))
  (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons right))
  (let ((v0-4 (logclear (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons right))))
    (set! (-> *cpad-list* cpads 0 button0-rel 0) v0-4)
    v0-4
    )
  )

(defmethod nav-graph-editor-method-35 nav-graph-editor ((obj nav-graph-editor))
  (nav-graph-editor-method-34 obj)
  (nav-graph-editor-method-32 obj (-> obj selected-node-edge?) (-> obj selected-index))
  (cond
    ((not (logtest? (-> *mouse* button0-abs 0) 1))
     (let ((a0-4 (nav-graph-editor-method-49 obj)))
       (vector-!
         (-> a0-4 move-vec)
         (the-as vector (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> obj selected-index))))
         (-> a0-4 move-vec)
         )
       )
     (go (method-of-object obj create))
     )
    (else
      (set! (-> obj nav-graph node-array data (-> obj selected-index) position quad) (-> obj mouse-hit quad))
      (nav-graph-editor-method-54 obj (-> obj selected-index))
      )
    )
  (none)
  )

(defstate move-node (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    (nav-graph-editor-method-47 self)
    (let ((v1-3 (nav-graph-editor-method-48 self (the-as uint 0))))
      (let ((a0-5 (-> self nav-graph node-array data (-> self selected-index))))
        (logior! (-> a0-5 mysql-save-flag) (mysql-save-flag update))
        )
      (set! (-> v1-3 index) (-> self selected-index))
      (set! (-> v1-3 move-vec quad)
            (-> (the-as
                  (pointer uint128)
                  (+ (the-as uint (-> self nav-graph node-array data 0 position)) (* 80 (-> self selected-index)))
                  )
                )
            )
      )
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Move node" "" "")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-35 self)
    (none)
    )
  )

(defstate adjust-plane (nav-graph-editor)
  :virtual #t
  :trans (behavior ()
    (if (logtest? (-> *mouse* button0-abs 0) 1)
        (go-virtual move-plane)
        )
    (when (and (logtest? (-> *mouse* button0-abs 0) 4) (>= (-> self selected-index) 0))
      (set! (-> *mouse* button0-abs 0) (logand -5 (-> *mouse* button0-abs 0)))
      (set! (-> *mouse* button0-rel 0) (logand -5 (-> *mouse* button0-rel 0)))
      (set! (-> self plane-height) (-> self nav-graph node-array data (-> self selected-index) position y))
      )
    (nav-graph-editor-method-41 self)
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Move plane" "Snap to node" "")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-34 self)
    (nav-graph-editor-method-46 self)
    (nav-graph-editor-method-42 self)
    (nav-graph-editor-method-32 self (-> self selected-node-edge?) (-> self selected-index))
    (none)
    )
  )

(defstate move-plane (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    (set-vector! (-> self mouse-spos-hold) (-> *mouse* posx) (-> *mouse* posy) 0.0 1.0)
    (set! (-> self plane-height-hold) (-> self plane-height))
    (none)
    )
  :trans (behavior ()
    (if (not (logtest? (-> *mouse* button0-abs 0) 1))
        (go-virtual adjust-plane)
        )
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (format *stdcon* "~0K")
    (let ((t9-1 format)
          (a0-1 *stdcon*)
          (a1-1 "~3L~%~0L")
          )
      "Moving plane"
      (t9-1 a0-1 a1-1)
      )
    (format *stdcon* "~1K")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-34 self)
    (nav-graph-editor-method-46 self)
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod nav-graph-editor-method-38 nav-graph-editor ((obj nav-graph-editor))
  (nav-graph-editor-method-41 obj)
  (nav-graph-editor-method-34 obj)
  (nav-graph-editor-method-42 obj)
  (nav-graph-editor-method-32 obj (-> obj selected-node-edge?) (-> obj selected-index))
  (add-debug-line-sphere
    #t
    (bucket-id debug2)
    (the-as vector (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> obj edge-src))))
    (vector-!
      (new 'stack-no-clear 'vector)
      (-> obj mouse-hit)
      (the-as vector (+ (the-as uint (-> obj nav-graph node-array data 0 position)) (* 80 (-> obj edge-src))))
      )
    1024.0
    (if (>= (-> obj selected-index) 0)
        *color-green*
        *color-red*
        )
    )
  (cond
    ((and (logtest? (-> *mouse* button0-rel 0) 1)
          (begin
            (set! (-> *mouse* button0-abs 0) (logand -2 (-> *mouse* button0-abs 0)))
            (let ((v1-20 (logand -2 (-> *mouse* button0-rel 0))))
              (set! (-> *mouse* button0-rel 0) v1-20)
              (and v1-20 (!= (-> obj selected-index) (-> obj edge-src)))
              )
            )
          )
     (cond
       ((>= (-> obj selected-index) 0)
        (set! (-> obj edge-dst) (-> obj selected-index))
        )
       (else
         (set! (-> obj edge-dst) (the-as int (nav-graph-editor-method-51 obj)))
         (if (= (-> obj edge-dst) -1)
             (go (method-of-object obj create))
             )
         )
       )
     (if (= (nav-graph-editor-method-52 obj) -1)
         (go (method-of-object obj create))
         )
     (nav-graph-editor-method-47 obj)
     (set! (-> obj edge-src) (-> obj edge-dst))
     )
    ((logtest? (-> *mouse* button0-rel 0) 2)
     (if (= (-> obj edge-dst) -2)
         (nav-graph-editor-method-58 obj)
         )
     (set! (-> *mouse* button0-abs 0) (logand -3 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -3 (-> *mouse* button0-rel 0)))
     (go (method-of-object obj create))
     )
    )
  (none)
  )

(defstate create-edge (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    (cond
      ((and (>= (-> self selected-index) 0) (-> self selected-node-edge?))
       (set! (-> self edge-src) (-> self selected-index))
       (set! (-> self edge-dst) -1)
       )
      (else
        (nav-graph-editor-method-47 self)
        (set! (-> self edge-src) (the-as int (nav-graph-editor-method-51 self)))
        (set! (-> self edge-dst) -2)
        (if (= (-> self edge-src) -1)
            (go-virtual create)
            )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Dest node/pos" "" "Cancel")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-38 self)
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod nav-graph-editor-method-37 nav-graph-editor ((obj nav-graph-editor))
  (nav-graph-editor-method-41 obj)
  (nav-graph-editor-method-34 obj)
  (nav-graph-editor-method-42 obj)
  (nav-graph-editor-method-43 obj)
  (nav-graph-editor-method-32 obj (-> obj selected-node-edge?) (-> obj selected-index))
  (cond
    ((logtest? (-> *mouse* button0-rel 0) 1)
     (set! (-> *mouse* button0-abs 0) (logand -2 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -2 (-> *mouse* button0-rel 0)))
     (go (method-of-object obj create-edge))
     )
    ((and (logtest? (-> *mouse* button0-rel 0) 2)
          (>= (-> obj selected-index) 0)
          (not (-> obj selected-node-edge?))
          )
     )
    (else
      (nav-graph-editor-method-59 obj)
      (nav-graph-editor-method-46 obj)
      )
    )
  (none)
  )

(defstate edit-edge (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    (set! (-> self edge-src) -1)
    (set! (-> self edge-dst) -1)
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Create edge" "" "Delete edge")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-37 self)
    (none)
    )
  )

(defstate adjust-edge-visibility (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    (set! (-> self edge-visibility) (-> self selected-index))
    (none)
    )
  :exit (behavior ()
    (set! (-> self edge-visibility) -1)
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Add node" "Remove Node" "Exit")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-30 self (-> self edge-visibility))
    (nav-graph-editor-method-41 self)
    (nav-graph-editor-method-34 self)
    (nav-graph-editor-method-42 self)
    (nav-graph-editor-method-32 self (-> self selected-node-edge?) (-> self selected-index))
    (cond
      ((and (logtest? (-> *mouse* button0-abs 0) 1) (>= (-> self selected-index) 0))
       (set! (-> *mouse* button0-abs 0) (logand -2 (-> *mouse* button0-abs 0)))
       (set! (-> *mouse* button0-rel 0) (logand -2 (-> *mouse* button0-rel 0)))
       (nav-graph-editor-method-53 self (-> self edge-visibility) (-> self selected-index))
       )
      ((and (logtest? (-> *mouse* button0-abs 0) 4) (>= (-> self selected-index) 0))
       (set! (-> *mouse* button0-abs 0) (logand -5 (-> *mouse* button0-abs 0)))
       (set! (-> *mouse* button0-rel 0) (logand -5 (-> *mouse* button0-rel 0)))
       (nav-graph-editor-method-57 self (-> self edge-visibility) (-> self selected-index))
       )
      ((logtest? (-> *mouse* button0-abs 0) 2)
       (set! (-> *mouse* button0-abs 0) (logand -3 (-> *mouse* button0-abs 0)))
       (set! (-> *mouse* button0-rel 0) (logand -3 (-> *mouse* button0-rel 0)))
       (go-virtual adjust-minimap)
       )
      )
    (none)
    )
  )

(defstate adjust-node-angle (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-34 self)
    (cond
      ((not (logtest? (-> *mouse* button0-abs 0) 1))
       (go-virtual adjust-it)
       )
      (else
        (let ((v1-12 (-> self nav-graph node-array data (-> self selected-index))))
          (logior! (-> v1-12 mysql-save-flag) (mysql-save-flag update))
          (+! (-> v1-12 angle) (* 182.04445 (-> *mouse* speedx)))
          (format *stdcon* "Angle = ~R~%" (-> v1-12 angle))
          )
        )
      )
    (none)
    )
  )

(defstate adjust-node-radius (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-34 self)
    (cond
      ((not (logtest? (-> *mouse* button0-abs 0) 2))
       (go-virtual adjust-it)
       )
      (else
        (let ((v1-12 (-> self nav-graph node-array data (-> self selected-index))))
          (logior! (-> v1-12 mysql-save-flag) (mysql-save-flag update))
          (+! (-> v1-12 radius) (* 409.6 (-> *mouse* speedx)))
          (if (< (-> v1-12 radius) 0.0)
              (set! (-> v1-12 radius) 0.0)
              )
          )
        (nav-graph-editor-method-31 self (-> self selected-index))
        )
      )
    (none)
    )
  )

(defstate adjust-edge-width (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-34 self)
    (cond
      ((not (logtest? (-> *mouse* button0-abs 0) 2))
       (go-virtual adjust-it)
       )
      (else
        (let ((v1-12 (-> self nav-graph edge-array data (-> self selected-index))))
          (logior! (-> v1-12 mysql-save-flag) (mysql-save-flag update))
          (+! (-> v1-12 width) (* 409.6 (-> *mouse* speedx)))
          (if (< (-> v1-12 width) 0.0)
              (set! (-> v1-12 width) 0.0)
              )
          )
        (nav-graph-editor-method-33 self (-> self selected-index))
        )
      )
    (none)
    )
  )

(defstate adjust-edge-density (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-34 self)
    (nav-graph-editor-method-32 self (-> self selected-node-edge?) (-> self selected-index))
    (cond
      ((not (logtest? (-> *mouse* button0-abs 0) 4))
       (go-virtual adjust-it)
       )
      (else
        (let ((gp-0 (-> self nav-graph edge-array data (-> self selected-index))))
          (format *stdcon* "Density = ~F~%" (-> gp-0 density))
          (logior! (-> gp-0 mysql-save-flag) (mysql-save-flag update))
          (+! (-> gp-0 density) (* 0.01 (-> *mouse* speedx)))
          (if (< (-> gp-0 density) 0.0)
              (set! (-> gp-0 density) 0.0)
              )
          (if (< 1.0 (-> gp-0 density))
              (set! (-> gp-0 density) 1.0)
              )
          )
        )
      )
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod nav-graph-editor-method-39 nav-graph-editor ((obj nav-graph-editor))
  (nav-graph-editor-method-41 obj)
  (nav-graph-editor-method-34 obj)
  (nav-graph-editor-method-42 obj)
  (nav-graph-editor-method-43 obj)
  (nav-graph-editor-method-32 obj (-> obj selected-node-edge?) (-> obj selected-index))
  (when (>= (-> obj selected-index) 0)
    (if (-> obj selected-node-edge?)
        (nav-graph-editor-method-31 obj (-> obj selected-index))
        (nav-graph-editor-method-30 obj (-> obj selected-index))
        )
    )
  (cond
    ((and (logtest? (-> *mouse* button0-abs 0) 1) (>= (-> obj selected-index) 0))
     (if (-> obj selected-node-edge?)
         (go (method-of-object obj adjust-node-angle))
         )
     )
    ((and (logtest? (-> *mouse* button0-abs 0) 2) (>= (-> obj selected-index) 0))
     (if (-> obj selected-node-edge?)
         (go (method-of-object obj adjust-node-radius))
         (go (method-of-object obj adjust-edge-width))
         )
     )
    ((and (logtest? (-> *mouse* button0-abs 0) 4)
          (>= (-> obj selected-index) 0)
          (not (-> obj selected-node-edge?))
          )
     (go (method-of-object obj adjust-edge-density))
     )
    (else
      (nav-graph-editor-method-59 obj)
      (nav-graph-editor-method-46 obj)
      )
    )
  (none)
  )

(defstate adjust-it (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (cond
      ((>= (-> self selected-index) 0)
       (if (-> self selected-node-edge?)
           (nav-graph-editor-method-29 self "Node angle" "" "Node radius")
           (nav-graph-editor-method-29 self "Edge speed limit" "Edge Density" "Edge Width")
           )
       )
      (else
        (nav-graph-editor-method-29 self "" "" "")
        )
      )
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-39 self)
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defmethod nav-graph-editor-method-40 nav-graph-editor ((obj nav-graph-editor))
  (nav-graph-editor-method-41 obj)
  (nav-graph-editor-method-34 obj)
  (nav-graph-editor-method-43 obj)
  (nav-graph-editor-method-32 obj (-> obj selected-node-edge?) (-> obj selected-index))
  (if (and (>= (-> obj selected-index) 0) (not (-> obj selected-node-edge?)))
      (nav-graph-editor-method-30 obj (-> obj selected-index))
      )
  (cond
    ((and (logtest? (-> *mouse* button0-abs 0) 1) (>= (-> obj selected-index) 0))
     (set! (-> *mouse* button0-abs 0) (logand -2 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -2 (-> *mouse* button0-rel 0)))
     (go (method-of-object obj adjust-edge-visibility))
     )
    ((logtest? (-> *mouse* button0-abs 0) 2)
     (set! (-> *mouse* button0-abs 0) (logand -3 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -3 (-> *mouse* button0-rel 0)))
     (go (method-of-object obj draw-closest-minimap))
     )
    (else
      (nav-graph-editor-method-59 obj)
      (nav-graph-editor-method-46 obj)
      )
    )
  (none)
  )

(defstate adjust-minimap (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Edge visibility" "" "Closest Node/Edge")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-40 self)
    (none)
    )
  )

(defstate draw-closest-minimap (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-41 self)
    (nav-graph-editor-method-34 self)
    (nav-graph-editor-method-44 self)
    (nav-graph-editor-method-45 self)
    (when (>= (-> self closest-node) 0)
      (let ((v1-15 (-> self nav-graph node-array data (-> self closest-node))))
        (if (not (logtest? (-> v1-15 mysql-save-flag) (mysql-save-flag delete)))
            (add-debug-sphere #t (bucket-id debug2) (-> v1-15 position) (meters 4.5) (new 'static 'rgba :r #xff :a #x40))
            )
        )
      )
    (when (>= (-> self closest-edge) 0)
      (let* ((v1-21 (-> self nav-graph edge-array data (-> self closest-edge)))
             (gp-0 (-> self nav-graph node-array data (-> v1-21 runtime-node-id-1)))
             (s4-0 (-> self nav-graph node-array data (-> v1-21 runtime-node-id-2)))
             )
        (when (not (logtest? (-> v1-21 mysql-save-flag) (mysql-save-flag delete)))
          (let ((s5-0 (new 'stack-no-clear 'inline-array 'vector 5)))
            (vector-! (-> s5-0 4) (-> s4-0 position) (-> gp-0 position))
            (vector-rotate90-around-y! (-> s5-0 4) (-> s5-0 4))
            (vector-normalize! (-> s5-0 4) (-> self dist-closest-edge))
            (vector+! (-> s5-0 0) (-> gp-0 position) (-> s5-0 4))
            (vector+! (-> s5-0 1) (-> s4-0 position) (-> s5-0 4))
            (vector-! (-> s5-0 2) (-> s4-0 position) (-> s5-0 4))
            (vector-! (-> s5-0 3) (-> gp-0 position) (-> s5-0 4))
            (let ((gp-1 *color-dark-green*))
              (add-debug-line #t (bucket-id debug2) (-> s5-0 0) (-> s5-0 1) gp-1 #f (the-as rgba -1))
              (add-debug-line #t (bucket-id debug2) (-> s5-0 1) (-> s5-0 2) gp-1 #f (the-as rgba -1))
              (add-debug-line #t (bucket-id debug2) (-> s5-0 2) (-> s5-0 3) gp-1 #f (the-as rgba -1))
              (add-debug-line #t (bucket-id debug2) (-> s5-0 3) (-> s5-0 0) gp-1 #f (the-as rgba -1))
              )
            )
          )
        )
      )
    (cond
      ((logtest? (-> *mouse* button0-abs 0) 2)
       (set! (-> *mouse* button0-abs 0) (logand -3 (-> *mouse* button0-abs 0)))
       (set! (-> *mouse* button0-rel 0) (logand -3 (-> *mouse* button0-rel 0)))
       (go-virtual adjust-minimap)
       )
      (else
        (nav-graph-editor-method-59 self)
        (nav-graph-editor-method-46 self)
        )
      )
    (none)
    )
  )

(defmethod nav-graph-editor-method-36 nav-graph-editor ((obj nav-graph-editor))
  (nav-graph-editor-method-41 obj)
  (nav-graph-editor-method-34 obj)
  (nav-graph-editor-method-42 obj)
  (nav-graph-editor-method-43 obj)
  (nav-graph-editor-method-32 obj (-> obj selected-node-edge?) (-> obj selected-index))
  (cond
    ((and (logtest? (-> *mouse* button0-abs 0) 1) (>= (-> obj selected-index) 0) (-> obj selected-node-edge?))
     (set! (-> *mouse* button0-abs 0) (logand -2 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -2 (-> *mouse* button0-rel 0)))
     (go (method-of-object obj move-node))
     )
    ((logtest? (-> *mouse* button0-abs 0) 2)
     (set! (-> *mouse* button0-abs 0) (logand -3 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -3 (-> *mouse* button0-rel 0)))
     (go (method-of-object obj create-edge))
     )
    ((and (logtest? (-> *mouse* button0-abs 0) 4) (>= (-> obj selected-index) 0))
     (set! (-> *mouse* button0-abs 0) (logand -5 (-> *mouse* button0-abs 0)))
     (set! (-> *mouse* button0-rel 0) (logand -5 (-> *mouse* button0-rel 0)))
     (if (-> obj selected-node-edge?)
         (nav-graph-editor-method-55 obj (-> obj selected-index))
         (nav-graph-editor-method-56 obj (-> obj selected-index))
         )
     )
    (else
      (nav-graph-editor-method-59 obj)
      (nav-graph-editor-method-46 obj)
      )
    )
  (none)
  )

(defstate create (nav-graph-editor)
  :virtual #t
  :enter (behavior ()
    '()
    (none)
    )
  :code (the-as (function none :behavior nav-graph-editor) sleep-code)
  :post (behavior ()
    (nav-graph-editor-method-29 self "Move node" "Delete node/edge" "Create edge(s)")
    (nav-graph-editor-method-28 self)
    (nav-graph-editor-method-36 self)
    (none)
    )
  )

;; WARN: Return type mismatch object vs none.
(defbehavior nav-graph-editor-init-by-other nav-graph-editor ((arg0 string))
  (add-setting! 'mouse #t 0.0 0)
  (add-setting! 'cursor #t 0.0 0)
  (set! (-> self nav-graph) (new 'debug 'mysql-nav-graph arg0))
  (set! (-> self command-array) (new 'debug 'nav-graph-command-array 256))
  (set! (-> self command-array length) 0)
  (set! *nav-graph-editor* (the-as (pointer nav-graph-editor) (process->ppointer self)))
  (let ((v1-8 (-> self default-node)))
    (set! (-> v1-8 angle) 0.0)
    (set! (-> v1-8 radius) 16384.0)
    (set! (-> v1-8 nav_mesh_id) (the-as uint 0))
    (set! (-> v1-8 level_name) 'unknown)
    (set! (-> v1-8 nav_node_flag) (nav-node-flag pedestrian))
    )
  (let ((v1-9 (-> self default-edge)))
    (set! (-> v1-9 directionality) (nav-directionality default))
    (set! (-> v1-9 speed_limit) 40960.0)
    (set! (-> v1-9 density) 0.25)
    (set! (-> v1-9 traffic_edge_flag) 0)
    (set! (-> v1-9 nav_clock_mask) (nav-clock-mask phase-1))
    (set! (-> v1-9 nav_clock_type) (nav-clock-type no-clock))
    (set! (-> v1-9 width) 16384.0)
    (set! (-> v1-9 minimap_edge_flag) (nav-minimap-edge-flag))
    )
  0
  (set! (-> self command-id) 0)
  (set! (-> self edge-visibility) -1)
  (set! (-> self vehicle-edit-mode) #f)
  (set! (-> self hover-edit-mode) #f)
  (set! (-> self plane-height) 71680.0)
  (set! (-> self clipping-dist) 819200.0)
  (go-virtual create)
  (none)
  )

(defun run-nav-graph-editor ((arg0 symbol))
  (if (not *nav-graph-editor*)
      (process-spawn nav-graph-editor arg0)
      )
  )

(defun get-nav-graph-editor ()
  (let ((v1-0 *nav-graph-editor*))
    (if v1-0
        (-> v1-0 0 self-override)
        )
    )
  )

(defun exit-nav-graph-editor ()
  (when *nav-graph-editor*
    (let ((v1-1 *nav-graph-editor*))
      (deactivate (if v1-1
                      (-> v1-1 0 self-override)
                      )
                  )
      )
    )
  (none)
  )

;; WARN: Return type mismatch mysql-save-flag vs uint.
(defun set-minimap-edge-flag ((arg0 nav-minimap-edge-flag))
  (let ((v1-0 *nav-graph-editor*))
    (the-as uint (when (if v1-0
                           (-> v1-0 0 self-override)
                           )
                   (let* ((a1-1 *nav-graph-editor*)
                          (v1-2 (if a1-1
                                    (-> a1-1 0 self-override)
                                    )
                                )
                          )
                     (when (>= (-> v1-2 edge-visibility) 0)
                       (let ((v1-6 (-> v1-2 nav-graph edge-array data (-> v1-2 edge-visibility))))
                         (set! (-> v1-6 minimap_edge_flag) arg0)
                         (let ((v0-0 (logior (-> v1-6 mysql-save-flag) (mysql-save-flag update))))
                           (set! (-> v1-6 mysql-save-flag) v0-0)
                           v0-0
                           )
                         )
                       )
                     )
                   )
            )
    )
  )

(defun set-vehicle-edit-mode ((arg0 symbol))
  (let* ((a1-0 *nav-graph-editor*)
         (v1-0 (if a1-0
                   (-> a1-0 0 self-override)
                   )
               )
         )
    (when v1-0
      (set! (-> v1-0 vehicle-edit-mode) arg0)
      (set! (-> v1-0 default-node nav_node_flag) (if arg0
                                                     (nav-node-flag)
                                                     (nav-node-flag pedestrian)
                                                     )
            )
      )
    )
  (none)
  )

(defun translate-nav-graph ((arg0 float) (arg1 float) (arg2 float))
  (let ((v1-0 *nav-graph-editor*))
    (when (if v1-0
              (-> v1-0 0 self-override)
              )
      (let* ((a3-1 *nav-graph-editor*)
             (v1-2 (if a3-1
                       (-> a3-1 0 self-override)
                       )
                   )
             )
        (dotimes (a3-2 (-> v1-2 nav-graph node-array length))
          (let ((t0-3 (-> v1-2 nav-graph node-array data a3-2)))
            (+! (-> t0-3 position x) arg0)
            (+! (-> t0-3 position y) arg1)
            (+! (-> t0-3 position z) arg2)
            (logior! (-> t0-3 mysql-save-flag) (mysql-save-flag update))
            )
          )
        )
      #f
      )
    )
  )

(defun update-nav-meshes ()
  (let ((v1-0 *nav-graph-editor*))
    (when (if v1-0
              (-> v1-0 0 self-override)
              )
      (let* ((v1-2 *nav-graph-editor*)
             (gp-0 (if v1-2
                       (-> v1-2 0 self-override)
                       )
                   )
             )
        (dotimes (s5-0 (-> gp-0 nav-graph node-array length))
          (if (not (logtest? (-> gp-0 nav-graph node-array data s5-0 mysql-save-flag) (mysql-save-flag delete)))
              (nav-graph-editor-method-54 gp-0 s5-0)
              )
          )
        )
      #f
      )
    )
  )

(defun smooth-nav-graph ((arg0 string))
  (local-vars
    (sv-96 int)
    (sv-112 int)
    (sv-128 int)
    (sv-144 mysql-nav-edge)
    (sv-160 vector)
    (sv-176 vector)
    (sv-192 vector)
    (sv-208 vector)
    )
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let* ((v1-0 *nav-graph-editor*)
           (s5-0 (-> (if v1-0
                         (-> v1-0 0 self-override)
                         )
                     nav-graph
                     )
                 )
           )
      (dotimes (s4-0 (-> s5-0 node-array length))
        (let ((s3-0 (-> s5-0 node-array data s4-0))
              (s2-0 (new-stack-vector0))
              (s0-0 (new-stack-vector0))
              (s1-0 (new-stack-vector0))
              )
          (set! sv-96 0)
          (set! sv-112 0)
          (when (and (not (logtest? (-> s3-0 mysql-save-flag) (mysql-save-flag delete))) (= (-> s3-0 level_name) arg0))
            (set! sv-128 0)
            (while (< sv-128 (-> s5-0 edge-array length))
              (set! sv-144 (-> s5-0 edge-array data sv-128))
              (when (not (logtest? (-> sv-144 mysql-save-flag) (mysql-save-flag delete)))
                (when (= (-> sv-144 runtime-node-id-1) s4-0)
                  (let ((v1-27 (-> s5-0 node-array data (-> sv-144 runtime-node-id-1)))
                        (a1-3 (-> s5-0 node-array data (-> sv-144 runtime-node-id-2)))
                        )
                    (set! sv-176 s1-0)
                    (set! sv-160 s1-0)
                    (let ((v0-0 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> a1-3 position) (-> v1-27 position)) 1.0))
                          )
                      (.mov.vf vf6 vf0 :mask #b1000)
                      (.lvf vf4 (&-> sv-160 quad))
                      (.lvf vf5 (&-> v0-0 quad))
                      )
                    )
                  (.add.vf vf6 vf4 vf5 :mask #b111)
                  (.svf (&-> sv-176 quad) vf6)
                  (set! sv-112 (+ sv-112 1))
                  sv-112
                  )
                (when (= (-> sv-144 runtime-node-id-2) s4-0)
                  (let ((v1-40 (-> s5-0 node-array data (-> sv-144 runtime-node-id-1)))
                        (a1-9 (-> s5-0 node-array data (-> sv-144 runtime-node-id-2)))
                        )
                    (set! sv-208 s0-0)
                    (set! sv-192 s0-0)
                    (let ((v0-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> a1-9 position) (-> v1-40 position)) 1.0))
                          )
                      (.mov.vf vf6 vf0 :mask #b1000)
                      (.lvf vf4 (&-> sv-192 quad))
                      (.lvf vf5 (&-> v0-1 quad))
                      )
                    )
                  (.add.vf vf6 vf4 vf5 :mask #b111)
                  (.svf (&-> sv-208 quad) vf6)
                  (set! sv-96 (+ sv-96 1))
                  sv-96
                  )
                )
              (set! sv-128 (+ sv-128 1))
              )
            (cond
              ((and (>= sv-112 2) (= sv-96 1))
               (set! (-> s2-0 quad) (-> s0-0 quad))
               )
              ((and (>= sv-96 2) (= sv-112 1))
               (set! (-> s2-0 quad) (-> s1-0 quad))
               )
              (else
                (vector-normalize! s0-0 0.5)
                (vector-normalize! s1-0 1.0)
                (vector+! s2-0 s0-0 s1-0)
                )
              )
            (vector-normalize! s2-0 1.0)
            (logior! (-> s3-0 mysql-save-flag) (mysql-save-flag update))
            (set! (-> s3-0 angle) (+ -16384.0 (vector-y-angle s2-0)))
            )
          )
        )
      )
    #f
    )
  )

(defun update-height ((arg0 string))
  (let* ((v1-0 *nav-graph-editor*)
         (v1-2 (-> (if v1-0
                       (-> v1-0 0 self-override)
                       )
                   nav-graph
                   )
               )
         )
    (dotimes (a1-1 (-> v1-2 node-array length))
      (let ((a2-3 (-> v1-2 node-array data a1-1)))
        (set! (-> (new 'stack-no-clear 'vector) quad) (the-as uint128 0))
        (if (and (not (logtest? (-> a2-3 nav_node_flag) (nav-node-flag pedestrian)))
                 (not (logtest? (-> a2-3 mysql-save-flag) (mysql-save-flag delete)))
                 (= (-> a2-3 level_name) arg0)
                 )
            (logior! (-> a2-3 mysql-save-flag) (mysql-save-flag update))
            )
        )
      )
    )
  #f
  )

(defun update-width ((arg0 string))
  (local-vars (sv-16 (array entity-nav-mesh)) (sv-32 int) (sv-48 uint) (sv-64 entity-nav-mesh))
  (let* ((v1-0 *nav-graph-editor*)
         (s5-0 (-> (if v1-0
                       (-> v1-0 0 self-override)
                       )
                   nav-graph
                   )
               )
         )
    (dotimes (s4-0 (-> s5-0 edge-array length))
      (let ((s3-0 (-> s5-0 edge-array data s4-0)))
        (when (not (logtest? (-> s3-0 mysql-save-flag) (mysql-save-flag delete)))
          (let ((s2-0 (-> s5-0 node-array data (-> s3-0 runtime-node-id-1)))
                (s1-0 (-> s5-0 node-array data (-> s3-0 runtime-node-id-2)))
                )
            (when (and (= (-> s2-0 level_name) arg0)
                       (= (-> s1-0 level_name) arg0)
                       (logtest? (-> s2-0 nav_node_flag) (nav-node-flag pedestrian))
                       (logtest? (-> s1-0 nav_node_flag) (nav-node-flag pedestrian))
                       )
              (cond
                ((= (-> s2-0 nav_mesh_id) (-> s1-0 nav_mesh_id))
                 (dotimes (s0-0 (-> *level* length))
                   (let ((v1-25 (-> *level* level s0-0)))
                     (when (= (-> v1-25 status) 'active)
                       (set! sv-16 (-> v1-25 bsp nav-meshes))
                       (when (nonzero? sv-16)
                         (set! sv-32 0)
                         (while (< sv-32 (-> sv-16 length))
                           (set! sv-64 (-> sv-16 sv-32))
                           (set! sv-48 (-> sv-64 aid))
                           (let ((v1-36 (if (type? sv-64 entity-nav-mesh)
                                            sv-64
                                            )
                                        )
                                 )
                             (when (and v1-36 (= sv-48 (-> s2-0 nav_mesh_id)))
                               (let* ((f0-0 (nav-mesh-method-35 (-> v1-36 nav-mesh) (-> s2-0 position) (-> s1-0 position) 16384.0))
                                      (f0-1 (+ -409.6 f0-0))
                                      )
                                 (when (and (< 0.0 f0-1) (!= f0-1 (-> s3-0 width)))
                                   (set! (-> s3-0 width) f0-1)
                                   (logior! (-> s3-0 mysql-save-flag) (mysql-save-flag update))
                                   )
                                 (if (>= 0.0 f0-1)
                                     (format #t "!!!! edge ~D ~D outside nav-mesh~%" (-> s2-0 nav_node_id) (-> s1-0 nav_node_id))
                                     )
                                 )
                               )
                             )
                           (set! sv-32 (+ sv-32 1))
                           )
                         )
                       )
                     )
                   )
                 #f
                 )
                (else
                  (format #t "***** edge ~D ~D overlaps 2 nav-meshes~%" (-> s2-0 nav_node_id) (-> s1-0 nav_node_id))
                  )
                )
              )
            )
          )
        )
      )
    )
  #f
  )
