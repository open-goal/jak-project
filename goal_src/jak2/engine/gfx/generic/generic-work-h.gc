;;-*-Lisp-*-
(in-package goal)

;; name: generic-work-h.gc
;; name in dgo: generic-work-h
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(deftype generic-input-buffer (structure)
  ((data uint128           473     :offset-assert   0)
   (merc generic-merc-work :inline :offset          0)
   (tie  generic-tie-work  :inline :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x1d90
  :flag-assert         #x900001d90
  )

(deftype generic-debug (structure)
  ((locks      uint32 4  :offset-assert   0)
   (timer      uint32 32 :offset-assert  16)
   (count      uint32 32 :offset-assert 144)
   (vps        uint32 32 :offset-assert 272)
   (buffer     int32     :offset-assert 400)
   (start-addr int32     :offset-assert 404)
   (lock       int32     :offset-assert 408)
   )
  :method-count-assert 9
  :size-assert         #x19c
  :flag-assert         #x90000019c
  )

(deftype generic-vu1-header (structure)
  ((matrix  matrix          :inline   :offset-assert   0)
   (strgif  generic-gif-tag :inline   :offset-assert  64)
   (adcmds  gs-adcmd        2 :inline :offset-assert  80)
   (adnop1  gs-adcmd        :inline   :offset         80)
   (adnop2  gs-adcmd        :inline   :offset         96)
   (dps     uint16                    :offset         92)
   (kickoff uint16                    :offset        108)
   (strips  uint16                    :offset         76)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-vu1-texbuf (structure)
  ((header generic-vu1-header :inline  :offset-assert   0)
   (shader uint32             :dynamic :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype generic-texbuf (structure)
  ((tag    dma-packet         :inline  :offset-assert   0)
   (header generic-vu1-header :inline  :offset-assert  16)
   (shader uint32             :dynamic :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(deftype generic-effect-work (structure)
  ((consts   generic-consts  :inline :offset-assert   0)
   (storage  generic-storage :inline :offset-assert 432)
   (storage2 generic-storage :inline :offset-assert 688)
   (lights   vu-lights       :inline :offset-assert 944)
   )
  :method-count-assert 9
  :size-assert         #x420
  :flag-assert         #x900000420
  )

(deftype generic-effect-buffer (structure)
  ((outbuf-0 uint8               3552    :offset-assert   0)
   (work     generic-effect-work :inline :offset-assert 3552)
   (outbuf-1 uint8               3552    :offset-assert 4608)
   )
  :method-count-assert 9
  :size-assert         #x1fe0
  :flag-assert         #x900001fe0
  )

(deftype generic-work (structure)
  ((saves   generic-saves         :inline :offset-assert   0)
   (storage generic-storage       :inline :offset-assert 368)
   (in-buf  generic-input-buffer  :inline :offset-assert 624)
   (fx-buf  generic-effect-buffer :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3fe0
  :flag-assert         #x900003fe0
  )


(define *generic-debug* (new 'global 'generic-debug))
