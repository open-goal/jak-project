;;-*-Lisp-*-
(in-package goal)

;; name: vu1-user-h.gc
;; name in dgo: vu1-user-h
;; dgos: ENGINE, GAME

;; this file contains shared enums for the various renderers.

;; Renderers will output data to "buckets", which are later spliced together into a single
;; very large dma chain.

;; With the exception of a few special case buckets, there's a bucket for
;; <renderer>-<special_modes>-<draw-level>-<tpage>
;; unlike jak 1, the "draw level index" is separate from the normal level index.

;; for example: tie-s-l1-tfrag
;;  - will be filled by the TIE renderer
;;  - special "s" (scissor) variant of TIE
;;  - using geometry of level 1
;;  - while the tfrag tpage is in VRAM

;;  <what renderer>-<what level>-<what tpage>
(defenum bucket-id
  :type int32
  :bitfield #f

  ;;;;;;;;;;

  (bucket-0      0)
  (bucket-1      1)
  (bucket-2      2)
  (bucket-3      3)   ;; blit displays
  (tex-lcom-sky-pre  4)   ;; tex
  (sky-draw      5)   ;; sky
  (ocean-mid-far 6)   ;; ocean

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; All levels with tfrag tpage
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (tex-l0-tfrag      7)   ;; level 0 tex
  (tfrag-l0-tfrag    8)   ;; tfrag
  (tie-l0-tfrag      9)   ;; tie
  (etie-l0-tfrag    10)   ;; tie
  (tfrag-s-l0-tfrag 11)   ;; tfrag
  (tie-s-l0-tfrag   12)   ;; tie
  (etie-s-l0-tfrag  13)   ;; tie
  (merc-l0-tfrag    14)   ;; merc
  (emerc-l0-tfrag   15)   ;; emerc
  (gmerc-l0-tfrag   16)   ;; mercneric
  (tie-v-l0-tfrag   17)   ;; tie

  (tex-l1-tfrag     18)   ;; tex
  (tfrag-l1-tfrag   19)   ;; tfrag
  (tie-l1-tfrag     20)   ;; tie
  (etie-l1-tfrag    21)   ;; tie
  (tfrag-s-l1-tfrag 22)   ;; tfrag
  (tie-s-l1-tfrag   23)   ;; tie
  (etie-s-l1-tfrag  24)   ;; tie
  (merc-l1-tfrag    25)   ;; merc
  (emerc-l1-tfrag   26)   ;; emerc
  (gmerc-l1-tfrag   27)   ;; mercneric
  (tie-v-l1-tfrag   28)   ;; tie

  (tex-l2-tfrag     29)   ;; tex
  (tfrag-l2-tfrag   30)   ;; tfrag
  (tie-l2-tfrag     31)   ;; tie
  (etie-l2-tfrag    32)   ;; tie
  (tfrag-s-l2-tfrag 33)   ;; tfrag
  (tie-s-l2-tfrag   34)   ;; tie
  (etie-s-l2-tfrag  35)   ;; tie
  (merc-l2-tfrag    36)   ;; merc
  (emerc-l2-tfrag   37)   ;; emerc
  (gmerc-l2-tfrag   38)   ;; mercneric
  (tie-v-l2-tfrag   39)   ;; tie

  (tex-l3-tfrag     40)   ;; tex
  (tfrag-l3-tfrag   41)   ;; tfrag
  (tie-l3-tfrag     42)   ;; tie
  (etie-l3-tfrag    43)   ;; tie
  (tfrag-s-l3-tfrag 44)   ;; tfrag
  (tie-s-l3-tfrag   45)   ;; tie
  (etie-s-l3-tfrag  46)   ;; tie
  (merc-l3-tfrag    47)   ;; merc
  (emerc-l3-tfrag   48)   ;; emerc
  (gmerc-l3-tfrag   49)   ;; mercneric
  (tie-v-l3-tfrag   50)   ;; tie

  (tex-l4-tfrag     51)   ;; tex
  (tfrag-l4-tfrag   52)   ;; tfrag
  (tie-l4-tfrag     53)   ;; tie
  (etie-l4-tfrag    54)   ;; tie
  (tfrag-s-l4-tfrag 55)   ;; tfrag
  (tie-s-l4-tfrag   56)   ;; tie
  (etie-s-l4-tfrag  57)   ;; tie
  (merc-l4-tfrag    58)   ;; merc
  (emerc-l4-tfrag   59)   ;; emerc
  (gmerc-l4-tfrag   60)   ;; mercneric
  (tie-v-l4-tfrag   61)   ;; tie

  (tex-l5-tfrag     62)   ;; tex
  (tfrag-l5-tfrag   63)   ;; tfrag
  (tie-l5-tfrag     64)   ;; tie
  (etie-l5-tfrag    65)   ;; tie
  (tfrag-s-l5-tfrag 66)   ;; tfrag
  (tie-s-l5-tfrag   67)   ;; tie
  (etie-s-l5-tfrag  68)   ;; tie
  (merc-l5-tfrag    69)   ;; merc
  (emerc-l5-tfrag   70)   ;; emerc
  (gmerc-l5-tfrag   71)   ;; mercneric
  (tie-v-l5-tfrag   72)   ;; tie

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; All levels with shrub tpage
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (tex-l0-shrub         73)   ;; tex
  (shrub-l0-shrub       74)   ;; shrub
  (shrub-n-l0-shrub     75)   ;; shrub
  (billboard-l0-shrub   76)   ;; shrub
  (shrub-v-l0-shrub     77)   ;; shrub
  (shrub-nt-l0-shrub    78)   ;; shrub
  (merc-l0-shrub        79)   ;; merc
  (emerc-l0-shrub       80)   ;; emerc
  (gmerc-l0-shrub       81)   ;; mercneric

  (tex-l1-shrub         82)   ;; tex
  (shrub-l1-shrub       83)   ;; shrub
  (shrub-n-l1-shrub     84)   ;; shrub
  (billboard-l1-shrub   85)   ;; shrub
  (shrub-v-l1-shrub     86)   ;; shrub
  (shrub-nt-l1-shrub    87)   ;; shrub
  (merc-l1-shrub        88)   ;; merc
  (emerc-l1-shrub       89)   ;; emerc
  (gmerc-l1-shrub       90)   ;; mercneric

  (tex-l2-shrub         91)   ;; tex
  (shrub-l2-shrub       92)   ;; shrub
  (shrub-n-l2-shrub     93)   ;; shrub
  (billboard-l2-shrub   94)   ;; shrub
  (shrub-v-l2-shrub     95)   ;; shrub
  (shrub-nt-l2-shrub    96)   ;; shrub
  (merc-l2-shrub        97)   ;; merc
  (emerc-l2-shrub       98)   ;; emerc
  (gmerc-l2-shrub       99)   ;; mercneric

  (tex-l3-shrub        100)  ;; tex
  (shrub-l3-shrub      101)  ;; shrub
  (shrub-n-l3-shrub    102)  ;; shrub
  (billboard-l3-shrub  103)  ;; shrub
  (shrub-v-l3-shrub    104)  ;; shrub
  (shrub-nt-l3-shrub   105)  ;; shrub
  (merc-l3-shrub       106)  ;; merc
  (emerc-l3-shrub      107)  ;; emerc
  (gmerc-l3-shrub      108)  ;; mercneric

  (tex-l4-shrub        109)  ;; tex
  (shrub-l4-shrub      110)  ;; shrub
  (shrub-n-l4-shrub    111)  ;; shrub
  (billboard-l4-shrub  112)  ;; shrub
  (shrub-v-l4-shrub    113)  ;; shrub
  (shrub-nt-l4-shrub   114)  ;; shrub
  (merc-l4-shrub       115)  ;; merc
  (emerc-l4-shrub      116)  ;; emerc
  (gmerc-l4-shrub      117)  ;; mercneric

  (tex-l5-shrub        118)  ;; tex
  (shrub-l5-shrub      119)  ;; shrub
  (shrub-n-l5-shrub    120)  ;; shrub
  (billboard-l5-shrub  121)  ;; shrub
  (shrub-v-l5-shrub    122)  ;; shrub
  (shrub-nt-l5-shrub   123)  ;; shrub
  (merc-l5-shrub       124)  ;; merc
  (emerc-l5-shrub      125)  ;; emerc
  (gmerc-l5-shrub      126)  ;; mercneric

  (tex-l0-alpha        127)  ;; tex
  (tfrag-t-l0-alpha    128)  ;; tfrag
  (tie-t-l0-alpha      129)  ;; tie
  (etie-t-l0-alpha     130)  ;; tie
  (merc-l0-alpha       131)  ;; merc
  (emerc-l0-alpha      132)  ;; emerc
  (gmerc-l0-alpha      133)  ;; mercneric
  (tfrag-st-l0-alpha   134)  ;; tfrag
  (tie-st-l0-alpha     135)  ;; tie
  (etie-st-l0-alpha    136)  ;; tie

  (tex-l1-alpha        137)  ;; tex
  (tfrag-t-l1-alpha    138)  ;; tfrag
  (tie-t-l1-alpha      139)  ;; tie
  (etie-t-l1-alpha     140)  ;; tie
  (merc-l1-alpha       141)  ;; merc
  (emerc-l1-alpha      142)  ;; emerc
  (gmerc-l1-alpha      143)  ;; mercneric
  (tfrag-st-l1-alpha   144)  ;; tfrag
  (tie-st-l1-alpha     145)  ;; tie
  (etie-st-l1-alpha    146)  ;; tie

  (tex-l2-alpha        147)  ;; tex
  (tfrag-t-l2-alpha    148)  ;; tfrag
  (tie-t-l2-alpha      149)  ;; tie
  (etie-t-l2-alpha     150)  ;; tie
  (merc-l2-alpha       151)  ;; merc
  (emerc-l2-alpha      152)  ;; emerc
  (gmerc-l2-alpha      153)  ;; mercneric
  (tfrag-st-l2-alpha   154)  ;; tfrag
  (tie-st-l2-alpha     155)  ;; tie
  (etie-st-l2-alpha    156)  ;; tie

  (tex-l3-alpha        157)  ;; tex
  (tfrag-t-l3-alpha    158)  ;; tfrag
  (tie-t-l3-alpha      159)  ;; tie
  (etie-t-l3-alpha     160)  ;; tie
  (merc-l3-alpha       161)  ;; merc
  (emerc-l3-alpha      162)  ;; emerc
  (gmerc-l3-alpha      163)  ;; mercneric
  (tfrag-st-l3-alpha   164)  ;; tfrag
  (tie-st-l3-alpha     165)  ;; tie
  (etie-st-l3-alpha    166)  ;; tie

  (tex-l4-alpha        167)  ;; tex
  (tfrag-t-l4-alpha    168)  ;; tfrag
  (tie-t-l4-alpha      169)  ;; tie
  (etie-t-l4-alpha     170)  ;; tie
  (merc-l4-alpha       171)  ;; merc
  (emerc-l4-alpha      172)  ;; emerc
  (gmerc-l4-alpha      173)  ;; mercneric
  (tfrag-st-l4-alpha   174)  ;; tfrag
  (tie-st-l4-alpha     175)  ;; tie
  (etie-st-l4-alpha    176)  ;; tie

  (tex-l5-alpha        177)  ;; tex
  (tfrag-t-l5-alpha    178)  ;; tfrag
  (tie-t-l5-alpha      179)  ;; tie
  (etie-t-l5-alpha     180)  ;; tie
  (merc-l5-alpha       181)  ;; merc
  (emerc-l5-alpha      182)  ;; emerc
  (gmerc-l5-alpha      183)  ;; mercneric
  (tfrag-st-l5-alpha   184)  ;; tfrag
  (tie-st-l5-alpha     185)  ;; tie
  (etie-st-l5-alpha    186)  ;; tie

  (tex-lcom-tfrag      187)  ;; tex
  (merc-lcom-tfrag     188)  ;; merc
  (emerc-lcom-tfrag    189)  ;; emerc
  (gmerc-lcom-tfrag    190)  ;; mercneric

  (tex-lcom-shrub      191)  ;; tex
  (merc-lcom-shrub     192)  ;; merc
  (emerc-lcom-shrub    193)  ;; emerc
  (gmerc-lcom-shrub    194)  ;; mercneric

  (bucket-195          195)  ;; shadow

  (tex-l0-pris         196)  ;; tex
  (merc-l0-pris        197)  ;; merc
  (emerc-l0-pris       198)  ;; emerc
  (gmerc-l0-pris       199)  ;; mercneric

  (tex-l1-pris         200)  ;; tex
  (merc-l1-pris        201)  ;; merc
  (emerc-l1-pris       202)  ;; emerc
  (gmerc-l1-pris       203)  ;; mercneric

  (tex-l2-pris         204)  ;; tex
  (merc-l2-pris        205)  ;; merc
  (emerc-l2-pris       206)  ;; emerc
  (gmerc-l2-pris       207)  ;; mercneric

  (tex-l3-pris         208)  ;; tex
  (merc-l3-pris        209)  ;; merc
  (emerc-l3-pris       210)  ;; emerc
  (gmerc-l3-pris       211)  ;; mercneric

  (tex-l4-pris         212)  ;; tex
  (merc-l4-pris        213)  ;; merc
  (emerc-l4-pris       214)  ;; emerc
  (gmerc-l4-pris       215)  ;; mercneric

  (tex-l5-pris         216)  ;; tex
  (merc-l5-pris        217)  ;; merc
  (emerc-l5-pris       218)  ;; emerc
  (gmerc-l5-pris       219)  ;; mercneric

  (tex-lcom-pris       220)  ;; tex
  (merc-lcom-pris      221)  ;; merc
  (emerc-lcom-pris     222)  ;; emerc
  (gmerc-lcom-pris     223)  ;; mercneric

  (tex-l0-pris2        224)  ;; tex
  (merc-l0-pris2       225)  ;; merc
  (emerc-l0-pris2      226)  ;; emerc
  (gmerc-l0-pris2      227)  ;; mercneric

  (tex-l1-pris2        228)  ;; tex
  (merc-l1-pris2       229)  ;; merc
  (emerc-l1-pris2      230)  ;; emerc
  (gmerc-l1-pris2      231)  ;; mercneric

  (tex-l2-pris2        232)  ;; tex
  (merc-l2-pris2       233)  ;; merc
  (emerc-l2-pris2      234)  ;; emerc
  (gmerc-l2-pris2      235)  ;; mercneric

  (tex-l3-pris2        236)  ;; tex
  (merc-l3-pris2       237)  ;; merc
  (emerc-l3-pris2      238)  ;; emerc
  (gmerc-l3-pris2      239)  ;; mercneric

  (tex-l4-pris2        240)  ;; tex
  (merc-l4-pris2       241)  ;; merc
  (emerc-l4-pris2      242)  ;; emerc
  (gmerc-l4-pris2      243)  ;; mercneric

  (tex-l5-pris2        244)  ;; tex
  (merc-l5-pris2       245)  ;; merc
  (emerc-l5-pris2      246)  ;; emerc
  (gmerc-l5-pris2      247)  ;; mercneric

  (tex-lcom-pris2      248)  ;; tex
  (merc-lcom-pris2     249)  ;; merc
  (emerc-lcom-pris2    250)  ;; emerc
  (gmerc-lcom-pris2    251)  ;; mercneric

  (tex-l0-water        252)  ;; tex
  (merc-l0-water       253)  ;; merc
  (gmerc-l0-water      254)  ;; mercneric
  (tfrag-w-l0-water    255)  ;; tfrag
  (tie-w-l0-water      256)
  (etie-w-l0-water     257)
  (tie-sw-l0-water     258)
  (tfrag-ws-l0-water   259)  ;; tfrag
  (etie-sw-l0-water    260)

  (tex-l1-water        261)  ;; tex
  (merc-l1-water       262)  ;; merc
  (gmerc-l1-water      263)  ;; mercneric
  (tfrag-w-l1-water    264)  ;; tfrag
  (tie-w-l1-water      265)
  (etie-w-l1-water     266)
  (tie-sw-l1-water     267)
  (tfrag-ws-l1-water   268)  ;; tfrag
  (etie-sw-l1-water    269)

  (tex-l2-water        270)  ;; tex
  (merc-l2-water       271)  ;; merc
  (gmerc-l2-water      272)  ;; mercneric
  (tfrag-w-l2-water    273)  ;; tfrag
  (tie-w-l2-water      274)
  (etie-w-l2-water     275)
  (tie-sw-l2-water     276)
  (tfrag-ws-l2-water   277)  ;; tfrag
  (tie-esw-l2-water    278)

  (tex-l3-water        279)  ;; tex
  (merc-l3-water       280)  ;; merc
  (gmerc-l3-water      281)  ;; mercneric
  (tfrag-w-l3-water    282)  ;; tfrag
  (tie-w-l3-water      283)
  (etie-w-l3-water     284)
  (tie-sw-l3-water     285)
  (tfrag-ws-l3-water   286)  ;; tfrag
  (etie-sw-l3-water    287)

  (tex-l4-water        288)  ;; tex
  (merc-l4-water       289)  ;; merc
  (gmerc-l4-water      290)  ;; mercneric
  (tfrag-w-l4-water    291)  ;; tfrag
  (tie-w-l4-water      292)
  (etie-w-l4-water     293)
  (tie-sw-l4-water     294)
  (tfrag-ws-l4-water   295)  ;; tfrag
  (etie-sw-l4-water    296)

  (tex-l5-water        297)  ;; tex
  (merc-l5-water       298)  ;; merc
  (gmerc-l5-water      299)  ;; mercneric
  (tfrag-w-l5-water    300)  ;; tfrag
  (tie-w-l5-water      301)
  (etie-w-l5-water     302)
  (tie-sw-l5-water     303)
  (tfrag-ws-l5-water   304)  ;; tfrag
  (etie-sw-l5-water    305)

  (tex-lcom-water      306)  ;; tex
  (merc-lcom-water     307)  ;; merc
  (gmerc-lcom-water    308)  ;; mercneric

  (tex-lcom-sky-post   309)

  (ocean-near          310)  ;; ocean
  (bucket-311          311)  ;; depth-cue

  (tex-all-sprite      312)
  (particles           313)  ;; particles
  (bucket-314          314)  ;; shadow
  (bucket-315          315)  ;; effects
  (tex-all-warp        316)  ;; tex
  (gmerc-warp          317)  ;; mercneric

  (debug-no-zbuf1      318)  ;; debug, no zbuf
  (tex-all-map         319)  ;; tex
  (progress            320)  ;; hud | progress
  (screen-filter       321)  ;; hud letterbox, no zbuf
  (bucket-322          322)  ;; hud
  (bucket-323          323)  ;; hud
  (debug2              324)  ;; debug
  (debug-no-zbuf2      325)  ;; debug
  (debug3              326)
  )

(defenum bucket-id-16
  :type int16
  :copy-entries bucket-id
  )
;; bit mask to select a renderer
(defenum vu1-renderer-mask
  :type uint64
  :bitfield #t
  (rn0)
  (rn1)
  (rn2)
  (sky)
  (ocean)
  (ocean-wave)
  (tfrag)
  (tie)
  (tie-envmap)
  (tie-scissor)
  (tie-envmap-scissor)
  (tie-vanish)
  (generic)
  (merc)
  (emerc)
  (shrubbery)
  (shrub-near)
  (billboard)
  (shrubbery-vanish)
  (tfrag-trans)
  (tie-scissor-trans)
  (tie-trans)
  (tie-envmap-trans)
  (tie-envmap-scissor-trans)
  (tfrag-water)
  (tie-scissor-water)
  (tie-water)
  (tie-envmap-water)
  (tie-envmap-scissor-water)
  (sprite)
  (shadow)
  (rn31)
  (rn32)
  (rn33)
  (depth-cue)
  )

;; bit mask to select tpages for upload
(defenum texture-enable-mask
  :type uint64
  :bitfield #t
  (tfrag  0)
  (pris   1)
  (shrub  2)
  (alpha  3)
  (water  4)
  (warp   5)
  (sprite 6)
  (map    7)
  (sky    8)
  (tex9   9)
  (tex10 10)
  (tex11 11)
  (tex12 12)
  (tex13 13)
  (tex14 14)
  (tex15 15)
  (tex16 16)
  )

;; also used in u32's sometimes
(defenum texture-enable-mask-u32
  :type uint32
  :bitfield #t
  :copy-entries texture-enable-mask
  )

;; texture page kinds for Jak 2. Pris2 is the actual name.
(defenum tpage-category
  :type int8
  (tfrag  0)
  (pris   1)
  (shrub  2)
  (alpha  3)
  (water  4)
  (warp   5)
  (pris2  6)
  (sprite 7)
  (map    8)
  (sky    9)
  )

(defenum tpage-category-u32
  :type uint32
  :copy-entries tpage-category
  )
;; DECOMP BEGINS


;; foreground renderers will output DMA data to one of these "sinks".
(deftype dma-foreground-sink (basic)
   ;; which bucket to output to. determines draw order.
  ((bucket                   bucket-id      :offset-assert 4)
   ;; what kind of textures will be uploaded at this time?
   (foreground-texture-page  tpage-category :offset-assert 8)
   ;; which level do we belong to?
   (foreground-texture-level int8           :offset-assert 9)
   ;; if there are multiple buckets for the above categories, which bucket
   ;; (for example, jak 1 had separate merc/gmerc buckets in some categories)
   (foreground-output-bucket int8           :offset-assert 10)
   )
  :method-count-assert 9
  :size-assert         #xb
  :flag-assert         #x90000000b
  )

;; the generic renderer is double buffered - while one fragment is uploading, another is rendering.
;; This double buffering even happens across models. So when preparing DMA for the next model,
;; the generic renderer must know the output (gifbuf) region of last fragment of the previous model,
;; and upload to the other buffer.
;; The generic renderer doesn't track this state internally, so we have some extra information
;; to add on to generic buckets.
(deftype generic-bucket-state (structure)
  ((gifbuf-adr uint32  :offset-assert   0)
   (inbuf-adr  uint32  :offset-assert   4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; as described above, the generic renderer needs a bit of extra state to double
;; buffer between models.
(deftype generic-dma-foreground-sink (dma-foreground-sink)
  ((state generic-bucket-state :inline :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

