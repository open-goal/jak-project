;;-*-Lisp-*-
(in-package goal)

;; name: merc-blend-shape.gc
;; name in dgo: merc-blend-shape
;; dgos: ENGINE, GAME

(define-extern setup-blerc-chains (function merc-ctrl (pointer int16) dma-buffer none))

;; DECOMP BEGINS

(define *stats-blerc* #f)

;; added:
;; when true, uses the PC float blerc implementation.
(define *use-fp-blerc* #t)

(deftype blerc-block-header (structure)
  ((tag       generic-merc-tag :inline :offset-assert   0)
   (vtx-count uint32                   :offset-assert  16)
   (overlap   uint32                   :offset-assert  20)
   (lump-dest uint32                   :offset-assert  24)
   (lump-qwc  uint32                   :offset-assert  28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )


(deftype blerc-block (structure)
  ((output uint8              848     :offset-assert   0)
   (header blerc-block-header :inline :offset-assert 848)
   )
  :method-count-assert 9
  :size-assert         #x370
  :flag-assert         #x900000370
  )


(deftype blerc-dcache (structure)
  ((repl-mult vector 40 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )


(deftype blerc-globals (structure)
  ((first            uint32  :offset-assert   0)
   (next             uint32  :offset-assert   4)
   (min-val          int16   :offset-assert   8)
   (max-val          int16   :offset-assert  10)
   (fragment-count   int32   :offset-assert  12)
   (vtx-count        int32   :offset-assert  16)
   (target-vtx-count int32   :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )


(define *blerc-globals* (new 'global 'blerc-globals))

(deftype blerc-context (structure)
  ((block-a blerc-block :inline :offset-assert   0)
   (dummy   uint8       7312    :offset-assert 880)
   (block-b blerc-block :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x2370
  :flag-assert         #x900002370
  )


(defun-debug blerc-stats-init ()
  (when *stats-blerc*
    (when (nonzero? (-> *blerc-globals* fragment-count))
      (format *stdcon* "~%BLERC (merc blend target) STATS~%")
      (format
        *stdcon*
        "  ~D fragments, ~D vertices~%"
        (-> *blerc-globals* fragment-count)
        (-> *blerc-globals* vtx-count)
        )
      (format
        *stdcon*
        "  ~D blend target computations (~F average)~%"
        (-> *blerc-globals* target-vtx-count)
        (/ (the float (-> *blerc-globals* target-vtx-count)) (the float (-> *blerc-globals* vtx-count)))
        )
      (if (< (-> *blerc-globals* min-val) 0)
          (format *stdcon* "MINIMUM OUT OF RANGE: ~D~%" (-> *blerc-globals* min-val))
          )
      (if (< 255 (-> *blerc-globals* max-val))
          (format *stdcon* "MAXIMUM OUT OF RANGE: ~D~%" (-> *blerc-globals* max-val))
          )
      )
    (let ((a0-7 *blerc-globals*))
      (set! (-> a0-7 min-val) 255)
      (set! (-> a0-7 max-val) 0)
      (set! (-> a0-7 fragment-count) 0)
      (set! (-> a0-7 vtx-count) 0)
      (set! (-> a0-7 target-vtx-count) 0)
      )
    )
  0
  (none)
  )

(defun blerc-init ()
  (blerc-stats-init)
  (let ((v1-0 *blerc-globals*))
    (set! (-> v1-0 first) (the-as uint 0))
    (set! (-> v1-0 next) (the-as uint 0))
    )
  0
  (none)
  )

;; ERROR: function was not converted to expressions. Cannot decompile.

;; ERROR: function has no type analysis. Cannot decompile.

;; ERROR: function has no type analysis. Cannot decompile.

(def-mips2c blerc-execute (function none))

;; WARN: Return type mismatch int vs object.
(defun merc-blend-shape ((arg0 process-drawable))
  (when *debug-segment*
    (let ((s5-0 (-> *display* frames (-> *display* on-screen) profile-array data 0))
          (v1-7 'merc)
          (s4-0 *profile-merc-color*)
          )
      (when (and *dproc* *debug-segment*)
        (let ((s3-0 (-> s5-0 data (-> s5-0 count))))
          (let ((s2-0 (-> s5-0 base-time)))
            (set! (-> s3-0 name) v1-7)
            (set! (-> s3-0 start-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s2-0))))
            )
          (set! (-> s3-0 depth) (the-as uint (-> s5-0 depth)))
          (set! (-> s3-0 color) s4-0)
          (set! (-> s5-0 segment (-> s5-0 depth)) s3-0)
          )
        (+! (-> s5-0 count) 1)
        (+! (-> s5-0 depth) 1)
        (set! (-> s5-0 max-depth) (max (-> s5-0 max-depth) (-> s5-0 depth)))
        )
      )
    0
    )
  (let* ((a2-0 (-> arg0 skel root-channel 0))
         (a3-0 (-> a2-0 frame-group))
         (a1-2 (new 'stack-no-clear 'array 'int16 128))
         )
    (when (and a3-0
               (> (-> arg0 skel active-channels) 0)
               (zero? (-> arg0 draw cur-lod))
               (logtest? (-> arg0 skel status) (joint-control-status blend-shape))
               )
      (cond
        ((and (-> arg0 skel override) (!= (-> arg0 skel override 0) 0.0))
         (let ((a0-13 (-> arg0 draw mgeo)))
           (let ((v1-35 (-> a0-13 header blend-target-count))
                 (a2-2 (-> arg0 skel override))
                 )
             (dotimes (a3-1 (the-as int v1-35))
               (set! (-> a1-2 a3-1) (the int (* 8192.0 (-> a2-2 (+ a3-1 1)))))
               )
             )
           (setup-blerc-chains a0-13 a1-2 (-> *display* frames (-> *display* on-screen) global-buf))
           )
         (logior! (-> arg0 skel status) (joint-control-status blend-shape-valid))
         ;;(return (the-as object #f))
         (goto end) ;; modified so we don't skip the profiler bar end
         )
        (else
          (let ((t2-0 (-> a3-0 blend-shape-anim)))
            (when t2-0
              (let ((a0-15 (-> arg0 draw mgeo)))
                (let* ((v1-49 (-> a0-15 header blend-target-count))
                       (t0-5 (-> a2-0 frame-num))
                       (t1-2 (the int t0-5))
                       (a2-6 (&+ t2-0 (* (the-as uint t1-2) v1-49)))
                       )
                  (cond
                    ((< t1-2 (the-as int (+ (-> a3-0 frames num-frames) -1)))
                     (let* ((a3-6 (&+ a2-6 v1-49))
                            (t0-6 (* 64.0 (- t0-5 (the float t1-2))))
                            (t1-4 (- 64.0 t0-6))
                            )
                       (dotimes (t2-2 (the-as int v1-49))
                         (set! (-> a1-2 t2-2) (the int (+ (* (the float (+ (-> (the-as (pointer uint8) (&+ a2-6 t2-2))) -64)) t1-4)
                                                          (* (the float (+ (-> (the-as (pointer uint8) (&+ a3-6 t2-2))) -64)) t0-6)
                                                          )
                                                   )
                               )
                         )
                       )
                     )
                    (else
                      (dotimes (a3-7 (the-as int v1-49))
                        (set! (-> a1-2 a3-7) (the-as int (* (+ (-> (the-as (pointer uint8) (&+ a2-6 a3-7))) -64) 64)))
                        )
                      )
                    )
                  )
                (setup-blerc-chains a0-15 a1-2 (-> *display* frames (-> *display* on-screen) global-buf))
                )
              (logior! (-> arg0 skel status) (joint-control-status blend-shape-valid))
              ;; (return (the-as object #f))
              (goto end) ;; modified so we don't skip the profiler bar end
              )
            )
          )
        )
      )
    )
  (when (logtest? (-> arg0 skel status) (joint-control-status blend-shape-valid))
    (logclear! (-> arg0 skel status) (joint-control-status blend-shape-valid))
    (setup-blerc-chains
      (-> arg0 draw lod-set lod 0 geo)
      (new 'static 'array int16 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (-> *display* frames (-> *display* on-screen) global-buf)
      )
    )
  (label end)
  (when *debug-segment*
    (let ((gp-1 (-> *display* frames (-> *display* on-screen) profile-array data 0)))
      (when (and *dproc* *debug-segment*)
        (let* ((v1-87 (+ (-> gp-1 depth) -1))
               (s5-1 (-> gp-1 segment v1-87))
               (s4-1 (-> gp-1 base-time))
               )
          (when (>= v1-87 0)
            (set! (-> s5-1 end-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s4-1))))
            (+! (-> gp-1 depth) -1)
            )
          )
        )
      )
    0
    )
  0
  )

(def-mips2c setup-blerc-chains-for-one-fragment (function object object object object object object object))

(defun setup-blerc-chains ((arg0 merc-ctrl) (arg1 (pointer int16)) (arg2 dma-buffer))
  (local-vars
    (sv-16 uint)
    (sv-20 pointer)
    (sv-24 merc-effect)
    (sv-28 uint)
    (sv-32 object)
    (sv-48 int)
    (sv-64 int)
    )
  (set! sv-16 (-> arg0 header effect-count))
  (let ((s3-0 (-> arg0 header blend-target-count))
        (v1-1 (-> arg2 base))
        )
    (set! sv-20 (&+ v1-1 0))
    (let ((a2-1 (the-as object (&+ v1-1 16))))
      (if (zero? (-> *blerc-globals* first))
          (set! (-> *blerc-globals* first) (the-as uint a2-1))
          )
      (dotimes (s2-0 (the-as int sv-16))
        (set! sv-24 (-> arg0 effect s2-0))
        (set! sv-28 (-> sv-24 blend-frag-count))
        (when (nonzero? sv-28)
          (let ((v1-15 (the-as object (-> sv-24 frag-geo)))
                (s1-0 (the-as structure (-> sv-24 frag-ctrl)))
                (s0-0 (the-as object (-> sv-24 blend-data)))
                )
            (set! sv-32 (-> sv-24 blend-ctrl))
            (set! sv-48 0)
            (while (< sv-48 (the-as int sv-28))
              (set! sv-64 (+ (the-as int v1-15)
                             (logand (* (+ (-> (the-as merc-fragment-control s1-0) unsigned-four-count) 3) 4) #xfff0)
                             )
                    )
              (if (nonzero? (-> (the-as (pointer uint8) sv-32) 0))
                  (set! a2-1 (setup-blerc-chains-for-one-fragment s3-0 arg1 a2-1 s0-0 sv-32 sv-64))
                  )
              (let ((a0-14 (logand (+ (* (the-as uint 6) (-> (the-as merc-blend-ctrl sv-32) blend-vtx-count)) 15) #xfff0)))
                (set! v1-15
                      (+ sv-64
                         (logand (* (+ (-> (the-as merc-fragment-control s1-0) lump-four-count) 3) 4) #xfff0)
                         (* (-> (the-as merc-fragment-control s1-0) fp-qwc) 16)
                         )
                      )
                (set! s1-0 (&+ s1-0 (* (-> (the-as merc-fragment-control s1-0) mat-xfer-count) 2) 4))
                (set! s0-0
                      (+ (the-as int s0-0) (* (the-as uint a0-14) (+ (-> (the-as merc-blend-ctrl sv-32) nonzero-index-count) 1)))
                      )
                )
              (set! sv-32 (+ (the-as int sv-32) s3-0 2))
              (the-as int sv-32)
              (set! sv-48 (+ sv-48 1))
              )
            )
          )
        )
      (set! (-> (the-as (pointer int64) sv-20)) (logior #x20000000 (shr (shl (the-as int a2-1) 33) 1)))
      (set! (-> (the-as (pointer uint32) sv-20) 2) (the-as uint 0))
      (set! (-> (the-as (pointer uint32) sv-20) 3) (the-as uint 0))
      (set! (-> arg2 base) (the-as pointer a2-1))
      )
    )
  0
  (none)
  )

; (defun setup-blerc-chains ((mc merc-ctrl) (blend-shape-coeffs (pointer int16)) (dma-buf dma-buffer))
;   (local-vars
;     (effect merc-effect)
;     (blend-frag-count uint)
;     (blend-ctrl object)
;     (sv-48 int)
;     (sv-64 int)
;     )
;   (let* ((num-effects (-> mc header effect-count))
;         (num-targets (-> mc header blend-target-count))
;         (dma-mem (-> dma-buf base))
;         (dma-tag-mem (&+ dma-mem 0))
;         (dma-mem-ptr (the-as object (&+ dma-mem 16)))
;         )
;     (if (zero? (-> *blerc-globals* first))
;         (set! (-> *blerc-globals* first) (the-as uint dma-mem-ptr))
;         )
;     (dotimes (effect-idx (the-as int num-effect))
;       (set! effect (-> mc effect effect-idx))
;       (set! blend-frag-count (-> effect blend-frag-count))
;       (when (nonzero? blend-frag-count)
;         (let ((v1-15 (the-as object (-> effect frag-geo)))
;               (s1-0 (the-as structure (-> effect frag-ctrl)))
;               (s0-0 (the-as object (-> effect blend-data)))
;               )
;           (set! blend-ctrl (-> effect blend-ctrl))
;           (set! sv-48 0)
;           (while (< sv-48 (the-as int blend-frag-count))
;             (set! sv-64 (+ (the-as int v1-15)
;                            (logand (* (+ (-> (the-as merc-fragment-control s1-0) unsigned-four-count) 3) 4) #xfff0)
;                            )
;                   )
;             (if (nonzero? (-> (the-as (pointer uint8) blend-ctrl) 0))
;                 (set! dma-mem-ptr (setup-blerc-chains-for-one-fragment num-targets blend-shape-coeffs dma-mem-ptr s0-0 blend-ctrl sv-64))
;                 )
;             (let ((a0-14 (logand (+ (* (the-as uint 6)
;                                        (-> (the-as merc-blend-ctrl blend-ctrl) blend-vtx-count))
;                                      15)
;                                  #xfff0)))
;               (set! v1-15
;                     (+ sv-64
;                        (logand (* (+ (-> (the-as merc-fragment-control s1-0) lump-four-count) 3) 4) #xfff0)
;                        (* (-> (the-as merc-fragment-control s1-0) fp-qwc) 16)
;                        )
;                     )
;               (set! s1-0 (&+ s1-0 (* (-> (the-as merc-fragment-control s1-0) mat-xfer-count) 2) 4))
;               (set! s0-0
;                     (+ (the-as int s0-0) (* (the-as uint a0-14) (+ (-> (the-as merc-blend-ctrl blend-ctrl) nonzero-index-count) 1)))
;                     )
;               )
;             (set! blend-ctrl (+ (the-as int blend-ctrl) num-targets 2))
;             (the-as int blend-ctrl)
;             (set! sv-48 (+ sv-48 1))
;             )
;           )
;         )
;       )
;     (set! (-> (the-as (pointer int64) dma-tag-mem)) (logior #x20000000 (shr (shl (the-as int dma-mem-ptr) 33) 1)))
;     (set! (-> (the-as (pointer uint32) dma-tag-mem) 2) (the-as uint 0))
;     (set! (-> (the-as (pointer uint32) dma-tag-mem) 3) (the-as uint 0))
;     (set! (-> dma-buf base) (the-as pointer dma-mem-ptr))

;     )
;   0
;   (none)
;   )
