;;-*-Lisp-*-
(in-package goal)

;; name: foreground-h.gc
;; name in dgo: foreground-h
;; dgos: ENGINE, GAME

(define-extern *foreground-draw-engine* engine)
(define-extern vu-lights<-light-group! (function vu-lights light-group none))
(define-extern foreground-draw-hud (function draw-control dma-buffer float none))

;; DECOMP BEGINS

(deftype mercneric-chain (structure)
  ((first      uint32                       :offset-assert   0)
   (next       uint32                       :offset-assert   4)
   (state      generic-bucket-state :inline :offset-assert   8)
   (vu1-bucket bucket-id                    :offset-assert  16)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype merc-chain (structure)
  ((first      dma-packet  :offset-assert   0)
   (patch      dma-packet  :offset-assert   4)
   (vu1-bucket bucket-id   :offset-assert   8)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype foreground-bucket (structure)
  ((merc      merc-chain      :inline :offset-assert   0)
   (emerc     merc-chain      :inline :offset-assert  12)
   (mercneric mercneric-chain :inline :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype foreground-level-buckets (structure)
  ((data foreground-bucket 7 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )

(deftype foreground-bucket-grid (structure)
  ((level-buckets foreground-level-buckets LEVEL_TOTAL :inline :offset-assert   0)
   (warp-chain    mercneric-chain          :inline   :offset-assert 2352)
   )
  :method-count-assert 9
  :size-assert         #x944
  :flag-assert         #x900000944
  )

(deftype foreground-regs (structure)
  ((dist                  float                     :offset-assert   0)
   (merc-used             uint32                    :offset-assert   4)
   (emerc-used            uint32                    :offset-assert   8)
   (mercneric-used        uint32                    :offset-assert  12)
   (use-isometric         uint32                    :offset-assert  16)
   (base-start            dma-packet                :offset-assert  20)
   (joint-ptr             (inline-array joint)      :offset-assert  24)
   (bone-ptr              (inline-array bone)       :offset-assert  28)
   (num-bones             uint32                    :offset-assert  32)
   (mtxs                  (inline-array pris-mtx)   :offset-assert  36)
   (dma-buf               dma-buffer                :offset-assert  40)
   (default-texture-index uint32                    :offset-assert  44)
   (mercneric-chain       mercneric-chain           :offset-assert  48)
   (level-buckets         foreground-level-buckets  :offset-assert  52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

(deftype foreground-work (structure)
  ((regs           foreground-regs        :inline :offset-assert   0)
   (draw-index-map uint8                  LEVEL_TOTAL :offset     64)
   (grid           foreground-bucket-grid :inline :offset-assert  80)
   (bounds         sphere                 :inline :offset-assert 2464)
   (lights         vu-lights              :inline :offset-assert 2480)
   (distance       vector                 :inline :offset-assert 2592)
   (next-tmpl      dma-packet             :inline :offset-assert 2608)
   )
  :method-count-assert 9
  :size-assert         #xa40
  :flag-assert         #x900000a40
  )


(defun invalidate-cache-line ((arg0 pointer))
  ; (.sync.l)
  ; (.cache dxwbin arg0 0)
  ; (.sync.l)
  ; (.cache dxwbin arg0 1)
  ; (.sync.l)
  0
  )

(deftype texscroll-globals (structure)
  ((requests int32          :offset-assert   0)
   (effects  merc-effect 32 :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x84
  :flag-assert         #x900000084
  )

(deftype merc-effect-bucket-info (structure)
  ((color-fade     rgba   :offset-assert   0)
   (alpha          uint8  :offset          3)
   (merc-path      uint8  :offset-assert   4)
   (ignore-alpha   uint8  :offset-assert   5)
   (disable-draw   uint8  :offset-assert   6)
   (disable-envmap uint8  :offset-assert   7)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype merc-bucket-info (structure)
  ((light                       vu-lights               :inline    :offset-assert   0)
   (needs-clip                  int32                              :offset-assert 112)
   (need-mercprime-if-merc      int32                              :offset-assert 116)
   (must-use-mercneric-for-clip int32                              :offset-assert 120)
   (effect                      merc-effect-bucket-info 64 :inline :offset-assert 124)
   )
  :method-count-assert 9
  :size-assert         #x27c
  :flag-assert         #x90000027c
  )

(deftype foreground-globals (structure)
  ((foreground-grid  foreground-bucket-grid :inline :offset-assert   0)
   (merc-bucket-info merc-bucket-info       :inline :offset-assert 2384)
   (texscroll        texscroll-globals      :inline :offset-assert 3024)
   )
  :method-count-assert 9
  :size-assert         #xc54
  :flag-assert         #x900000c54
  )

(define *foreground* (new 'global 'foreground-globals))

;; definition of type shadow-dma-packet
(deftype shadow-dma-packet (structure)
  ((tag      generic-merc-tag :inline :offset-assert   0)
   (settings shadow-settings  :inline :offset-assert  16)
   (geo-ref  dma-packet       :inline :offset-assert  96)
   (mtx-ref  dma-packet       :inline :offset-assert 112)
   (end-tag  dma-packet       :inline :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )
