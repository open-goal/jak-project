;;-*-Lisp-*-
(in-package goal)

;; name: merc-death.gc
;; name in dgo: merc-death
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(define *merc-death-globals* (new 'global 'vector))

(deftype death-info (basic)
  ((vertex-skip uint16  :offset-assert   4)
   (timer       uint8   :offset-assert   6)
   (overlap     uint8   :offset-assert   7)
   (effect      uint32  :offset-assert   8)
   (sound       symbol  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defun birth-func-death-sparks ()
  0
  (none)
  )

(define death-seed
  (new 'static 'death-info :vertex-skip #x8 :timer #xe0 :overlap #xff :effect #x48 :sound 'temp-enemy-die)
  )

(defun start-seed-effect ((arg0 process-drawable) (arg1 vector) (arg2 cspace))
  (let ((v1-0 (-> arg0 draw))
        (a1-1 death-seed)
        )
    (set! (-> v1-0 death-vertex-skip) (-> a1-1 vertex-skip))
    (set! (-> v1-0 death-effect) (-> a1-1 effect))
    (set! (-> v1-0 death-timer) (+ (-> a1-1 timer) 1))
    (set! (-> v1-0 death-timer-org) (-> v1-0 death-timer))
    (set! (-> v1-0 death-draw-overlap) (-> a1-1 overlap))
    )
  (send-event
    arg0
    'trans-hook
    (lambda :behavior process-drawable () (set! (-> self draw death-timer) (the-as uint 200)) (none))
    )
  0
  (none)
  )

(defpart 72
  :init-specs ((sp-flt spt-scale-x (meters 1))
    (sp-flt spt-rot-x 409.6)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 196.0 1.0)
    (sp-rnd-flt spt-g 196.0 64.0 1.0)
    (sp-flt spt-b 0.0)
    (sp-rnd-flt spt-a 4.0 2.0 1.0)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-func spt-func 'sparticle-texture-glow-soft)
    )
  )

(define death-default
  (new 'static 'death-info :vertex-skip #xa :timer #x4b :overlap #x4 :effect #x49 :sound 'enemy-fizz)
  )

(define death-warp-in
  (new 'static 'death-info :vertex-skip #x96 :timer #x4b :effect #x4a :sound 'warpgate-tele)
  )

(define death-warp-out
  (new 'static 'death-info :vertex-skip #x96 :timer #x96 :effect #x4a :sound 'warpgate-tele)
  )

(defun sparticle-texture-glow-soft ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (particle-adgif-callback (-> arg1 adgif) (new 'static 'texture-id :index #xca :page #xc))
  (set! (-> arg1 sp-func) (the-as (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d uint none) 0))
  0
  (none)
  )

(defpart 74
  :init-specs ((sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 32.0 1.0)
    (sp-rnd-flt spt-g 32.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.02) (meters 0.02) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a 0.0 -1.28 1.0)
    (sp-rnd-flt spt-friction 0.92 0.02 1.0)
    (sp-int spt-timer 500)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12)
    (sp-int-plain-rnd spt-next-time 30 19 1)
    (sp-launcher-by-id spt-next-launcher 75)
    )
  )

(defpart 75
  :init-specs ((sp-rnd-flt spt-scale-x (meters 0.3) (meters 0.2) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-rnd-flt spt-omega 8.192 6.144 1.0)
    (sp-rnd-flt spt-vel-x (meters -0.053333335) (meters 0.10666667) 1.0)
    (sp-rnd-flt spt-vel-y (meters -0.026666667) (meters 0.093333334) 1.0)
    (sp-rnd-flt spt-vel-z (meters -0.053333335) (meters 0.10666667) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters -0.001) (meters -0.008) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.0)
    (sp-func spt-func 'sparticle-motion-blur)
    )
  )

(defpart 73
  :init-specs ((sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 96.0 150.0 1.0)
    (sp-rnd-flt spt-g 32.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-scalevel-x (meters 0.02) (meters 0.02) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-fade-a 0.0 -1.28 1.0)
    (sp-rnd-flt spt-friction 0.92 0.02 1.0)
    (sp-int spt-timer 500)
    (sp-cpuinfo-flags sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 sp-cpuinfo-flag-12)
    (sp-int-plain-rnd spt-next-time 30 19 1)
    (sp-launcher-by-id spt-next-launcher 76)
    )
  )

(defpart 76
  :init-specs ((sp-rnd-flt spt-scale-x (meters 0.3) (meters 0.2) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-rnd-flt spt-omega 8.192 6.144 1.0)
    (sp-rnd-flt spt-vel-x (meters -0.053333335) (meters 0.10666667) 1.0)
    (sp-rnd-flt spt-vel-y (meters -0.026666667) (meters 0.093333334) 1.0)
    (sp-rnd-flt spt-vel-z (meters -0.053333335) (meters 0.10666667) 1.0)
    (sp-rnd-flt spt-scalevel-x (meters -0.001) (meters -0.008) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.0)
    (sp-func spt-func 'sparticle-motion-blur)
    )
  )

(defun merc-death-spawn ((arg0 int) (arg1 vector) (arg2 vector))
  (let ((v1-2 (-> *part-id-table* arg0)))
    (if (and (nonzero? v1-2) (= (-> v1-2 type) sparticle-launcher))
        (sp-launch-particles-death *sp-particle-system-2d* v1-2 arg1)
        )
    )
  0
  (none)
  )




