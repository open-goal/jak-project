;;-*-Lisp-*-
(in-package goal)

;; name: simple-sprite-h.gc
;; name in dgo: simple-sprite-h
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(deftype sprite-glow-data (structure)
  ((position   vector :inline :offset-assert 0)
   (size-x     float          :offset 12)
   (size-probe float          :offset-assert 16)
   (z-offset   float          :offset-assert 20)
   (rot-angle  float          :offset-assert 24)
   (size-y     float          :offset-assert 28)
   (color      rgbaf  :inline :offset-assert 32)
   (fade-a     float          :offset-assert 48)
   (fade-b     float          :offset-assert 52)
   (tex-id     texture-id     :offset-assert 56)
   (dummy      uint32         :offset-assert 60)
   (quads      vector 4 :inline :offset 0)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (set-trans (_type_ vector) none 9)
    )
  )


(defmethod set-trans sprite-glow-data ((obj sprite-glow-data) (arg0 vector))
  (let ((f0-0 (-> obj position w)))
    (set! (-> obj position quad) (-> arg0 quad))
    (set! (-> obj position w) f0-0)
    )
  0
  (none)
  )

(deftype simple-sprite-system (structure)
  ((count     int16   :offset-assert 0)
   (max-count int16   :offset-assert 2)
   (data      (inline-array sprite-glow-data) :offset-assert 4)
   )
  :method-count-assert 12
  :size-assert         #x8
  :flag-assert         #xc00000008
  (:methods
    (add! (_type_ sprite-glow-data) none 9)
    (draw-all-sprites! (_type_ dma-buffer) none 10)
    (clear! (_type_) none 11)
    )
  )
