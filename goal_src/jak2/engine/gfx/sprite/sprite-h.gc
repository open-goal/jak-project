;;-*-Lisp-*-
(in-package goal)

;; name: sprite-h.gc
;; name in dgo: sprite-h
;; dgos: ENGINE, GAME

(define-extern sprite-init-distorter (function dma-buffer none))
(define-extern sprite-draw-distorters (function dma-buffer none))
(define-extern sprite-glow-init-engine (function dma-buffer none))
(define-extern sprite-glow-draw (function dma-buffer none))

(#when PC_BIG_MEMORY (defconstant SPRITE_MAX_AMOUNT_MULT 12))
(#when PC_BIG_MEMORY (defconstant SPRITE_AUX_MAX_AMOUNT_MULT 4))


;; DECOMP BEGINS

(deftype sprite-vec-data-2d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert   0)
   (flag-rot-sy vector   :inline :offset-assert  16)
   (r-g-b-a     vector   :inline :offset-assert  32)
   (x           float            :offset          0)
   (y           float            :offset          4)
   (z           float            :offset          8)
   (sx          float            :offset         12)
   (sy          float            :offset         28)
   (rot         float            :offset         24)
   (flag        int32            :offset         16)
   (matrix      int32            :offset         20)
   (warp-turns  int32            :offset         16)
   (r           float            :offset         32)
   (g           float            :offset         36)
   (b           float            :offset         40)
   (a           float            :offset         44)
   (trans       vector3s :inline :offset          0)
   (color       rgbaf    :inline :offset         32)
   (data        uint128  1       :offset          0)
   (data64      uint64   6       :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-2d (basic)
  ((num-sprites int32                       2 :offset-assert   4)
   (num-valid   int32                       2 :offset-assert  12)
   (vec-data    pointer                       :offset-assert  20)
   (adgif-data  (inline-array adgif-shader)   :offset-assert  24)
   (pad         uint128                     4 :offset-assert  32)
   (data        uint128                     1 :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  )

(deftype sprite-vec-data-3d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert   0)
   (qx-qy-qz-sy vector   :inline :offset-assert  16)
   (r-g-b-a     vector   :inline :offset-assert  32)
   (x           float            :offset          0)
   (y           float            :offset          4)
   (z           float            :offset          8)
   (sx          float            :offset         12)
   (sy          float            :offset         28)
   (qx          float            :offset         16)
   (qy          float            :offset         20)
   (qz          float            :offset         24)
   (r           float            :offset         32)
   (g           float            :offset         36)
   (b           float            :offset         40)
   (a           float            :offset         44)
   (trans       vector3s :inline :offset          0)
   (rot         vector3s :inline :offset         16)
   (color       rgbaf    :inline :offset         32)
   (data        uint128  1       :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sprite-array-3d (basic)
  ((num-sprites int32                       2 :offset-assert   4)
   (num-valid   int32                       2 :offset-assert  12)
   (vec-data    pointer                       :offset-assert  20)
   (adgif-data  (inline-array adgif-shader)   :offset-assert  24)
   (data        uint128                     1 :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  )
