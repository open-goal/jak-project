;;-*-Lisp-*-
(in-package goal)

;; name: sparticle-launcher.gc
;; name in dgo: sparticle-launcher
;; dgos: ENGINE, GAME

;; og:ignore-form:sp-relaunch-particle-3d
;; og:ignore-form:execute-part-engine
;; og:ignore-form:sparticle-respawn-heights
;; og:ignore-form:sparticle-respawn-timer
;; og:ignore-form:sparticle-mode-animate
;; og:ignore-form:sparticle-mode-animate
;; og:ignore-form:sparticle-texture-animate
;; og:ignore-form:sparticle-texture-day-night
;; og:ignore-form:sparticle-motion-blur
;; og:ignore-form:birth-func-texture-group
;; og:ignore-form:sparticle-launcher-method-10
(define-extern sp-init-fields! (function object (inline-array sp-field-init-spec) sp-field-id sp-field-id symbol object)) ;; TODO - mips2c

(define-extern particle-adgif (function adgif-shader texture-id none)) ;; TODO - particle-adgif atomic ops, MIPS2C
(define-extern particle-adgif-callback (function adgif-shader none)) ;; TODO bad VF dependencies
(define-extern sp-launch-particles-var (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none)) ;; TODO - mips2c

;; DECOMP BEGINS

;; WARN: Return type mismatch int vs sparticle-launcher.

(kmemopen global "part-tables")

(define *part-id-table* (new 'global 'boxed-array sparticle-launcher 5760))

(define *part-group-id-table* (new 'global 'boxed-array sparticle-launch-group 1408))

(define *sp-temp* 0)

(kmemclose)

(defun lookup-part-group-by-name ((arg0 string))
  "Iterate through the [[*part-group-id-table*]] and return the matching [[sparticle-launch-group]], or [[#f]] otherwise"
  (let* ((s5-0 *part-group-id-table*)
         (s4-0 (-> s5-0 length))
         )
    (dotimes (s3-0 s4-0)
      (let ((s2-0 (-> s5-0 s3-0)))
        (if (and (nonzero? s2-0) (string= arg0 (-> s2-0 name)))
            (return s2-0)
            )
        )
      )
    )
  (the-as sparticle-launch-group #f)
  )

;; WARN: Return type mismatch (pointer sparticle-launch-group) vs (pointer object).
(defun lookup-part-group-pointer-by-name ((arg0 string))
  "Similar to [[lookup-part-group-by-name]] but returns a pointer instead"
  (let* ((s4-0 *part-group-id-table*)
         (s3-0 (-> s4-0 length))
         )
    (dotimes (gp-0 s3-0)
      (let ((v1-2 (-> s4-0 gp-0)))
        (if (and (nonzero? v1-2) (string= arg0 (-> v1-2 name)))
            (return (the-as (pointer object) (&+ (-> s4-0 data) (* gp-0 4))))
            )
        )
      )
    )
  (the-as (pointer sparticle-launch-group) #f)
  )

(defun part-group-pointer? ((arg0 pointer))
  "Verifies if the given pointer, points to a [[sparticle-launch-group]]"
  (let ((v1-0 *part-group-id-table*))
    (and (>= (the-as int arg0) (the-as int (-> v1-0 data))) (< (the-as int arg0) (the-as int (&-> v1-0 1408))))
    )
  )

(defun unlink-part-group-by-heap ((arg0 kheap))
  (let* ((v1-0 *part-group-id-table*)
         (a2-0 (-> v1-0 length))
         (a1-0 (-> arg0 base))
         (a0-1 (-> arg0 top-base))
         )
    (while (nonzero? a2-0)
      (+! a2-0 -1)
      (let ((a3-2 (-> v1-0 a2-0)))
        (when (and (>= (the-as int a3-2) (the-as int a1-0)) (< (the-as int a3-2) (the-as int a0-1)))
          (set! (-> v1-0 a2-0) (the-as sparticle-launch-group 0))
          0
          )
        )
      )
    )
  0
  )

;; ERROR: function was not converted to expressions. Cannot decompile.

(deftype sp-queued-launch-particles (structure)
  ((sp-system   sparticle-system           :offset-assert   0)
   (sp-launcher sparticle-launcher         :offset-assert   4)
   (pos         vector             :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )


(deftype sp-launch-queue (basic)
  ((in-use int32                                  :offset-assert   4)
   (queue  sp-queued-launch-particles 256 :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x2010
  :flag-assert         #x900002010
  )


(kmemopen global "launcher-queue")

(define *sp-launcher-lock* #f)

(define *sp-launch-queue* (new 'global 'sp-launch-queue))

(define *sp-launcher-enable* #t)

(kmemclose)

;; ERROR: function has no type analysis. Cannot decompile.

(deftype particle-adgif-cache (basic)
  ((used    int32                   :offset-assert   4)
   (last    uint16                  :offset-assert   8)
   (lastgif adgif-shader            :offset-assert  12)
   (tidhash uint16       80         :offset-assert  16)
   (spadgif adgif-shader 80 :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x19b0
  :flag-assert         #x9000019b0
  )


(kmemopen global "part-adgif-cache")

(define *particle-adgif-cache* (new 'global 'particle-adgif-cache))

(set! (-> *particle-adgif-cache* used) 0)

(kmemclose)

(defun particle-adgif-cache-flush ()
  "Clear [[*particle-adgif-cache*]]"
  (set! (-> *particle-adgif-cache* used) 0)
  (set! (-> *particle-adgif-cache* last) (the-as uint 0))
  0
  (none)
  )

;; ERROR: function was not converted to expressions. Cannot decompile.

;; ERROR: function was not converted to expressions. Cannot decompile.

(defun sp-queue-launch ((arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 matrix))
  (let ((v1-0 *sp-launch-queue*))
    (when (= (-> v1-0 in-use) 256)
      (format 0 "ERROR: sp-launch-particles called during processing, and queue is full~%")
      (return 0)
      )
    (let ((a3-5 (-> v1-0 queue (-> v1-0 in-use))))
      (set! (-> a3-5 sp-system) arg0)
      (set! (-> a3-5 sp-launcher) arg1)
      (set! (-> a3-5 pos quad) (-> arg2 trans quad))
      )
    (let ((v0-1 (+ (-> v1-0 in-use) 1)))
      (set! (-> v1-0 in-use) v0-1)
      v0-1
      )
    )
  )

(defun sp-adjust-launch ((arg0 sparticle-launchinfo)
                (arg1 sparticle-cpuinfo)
                (arg2 (inline-array sp-field-init-spec))
                (arg3 matrix)
                (arg4 symbol)
                )
  (let ((s2-0 (new 'stack-no-clear 'matrix))
        (s5-0 (new 'stack-no-clear 'matrix))
        )
    (let ((s0-0 (new 'stack-no-clear 'vector)))
      (sp-init-fields! (-> s2-0 vector) arg2 (sp-field-id launch-fields-start) (sp-field-id launch-fields-end) #t)
      (matrix-rotate-xyz! s5-0 (the-as vector (-> s2-0 vector)))
      (vector3s-matrix*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
      (matrix-rotate-xyz! s5-0 (-> s2-0 vector 1))
      (vector3s-matrix*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
      (matrix*! s5-0 s5-0 arg3)
      (set-vector! s0-0 0.0 (-> s2-0 vector 2 w) 0.0 1.0)
      (vector-matrix*! s0-0 s0-0 s5-0)
      (+! (-> arg0 launchrot x) (-> s0-0 x))
      (+! (-> arg0 launchrot y) (-> s0-0 y))
      (+! (-> arg0 launchrot z) (-> s0-0 z))
      )
    (when (logtest? (sp-cpuinfo-flag sp-cpuinfo-flag-21) (-> arg1 flags))
      (set! (-> arg0 launchrot w) (* (-> arg0 launchrot w) (vector-length (the-as vector (-> arg3 vector)))))
      (set! (-> arg0 conerot w) (* (-> arg0 conerot w) (vector-length (-> arg3 vector 1))))
      )
    (matrix-rotate-xyz! s5-0 (-> s2-0 vector 2))
    (matrix*! s5-0 s5-0 arg3)
    (vector3s-rotate*! (the-as vector3s (-> arg0 launchrot)) (the-as vector3s (-> arg0 launchrot)) s5-0)
    (vector3s-rotate*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
    (if (zero? (logand (sp-cpuinfo-flag use-global-acc) (-> arg1 flags)))
        (vector3s-rotate*! (the-as vector3s (-> arg1 acc)) (the-as vector3s (-> arg1 acc)) s5-0)
        )
    (if (logtest? (sp-cpuinfo-flag set-conerot) (-> arg1 flags))
        (set! (-> arg0 conerot y) (+ 16384.0 (vector-y-angle (-> s5-0 vector 2))))
        )
    (when arg4
      (let ((s4-1 (new 'stack-no-clear 'euler-angles)))
        (matrix->eul s4-1 s5-0 13)
        (set! (-> arg0 conerot x) (- (-> arg0 conerot x) (-> s4-1 y)))
        (set! (-> arg0 conerot y) (- (-> arg0 conerot y) (-> s4-1 z)))
        (set! (-> arg0 conerot z) (- (-> arg0 conerot z) (-> s4-1 x)))
        )
      )
    )
  0
  (none)
  )

(defun sp-euler-convert ((arg0 sparticle-launchinfo) (arg1 sparticle-cpuinfo))
  (local-vars (v1-1 float) (v1-2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a1-1 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'quaternion))
          )
      (set-vector! a1-1 (-> arg0 conerot x) (-> arg0 conerot y) (-> arg0 conerot z) 1.0)
      (quaternion-zxy! s5-0 a1-1)
      (cond
        ((< (-> s5-0 w) 0.0)
         (.lvf vf1 (&-> arg0 conerot quad))
         (.lvf vf2 (&-> s5-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg0 conerot quad) vf1)
         (.mov v1-1 vf1)
         )
        (else
          (.lvf vf1 (&-> arg0 conerot quad))
          (.lvf vf2 (&-> s5-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg0 conerot quad) vf1)
          (.mov v1-2 vf1)
          )
        )
      )
    (cond
      (*sp-60-hz*
        (set! (-> arg1 rot-syvel x) (* 5.0 (-> arg1 rot-syvel x)))
        (set! (-> arg1 rot-syvel y) (* 5.0 (-> arg1 rot-syvel y)))
        (set! (-> arg1 rot-syvel z) (* 5.0 (-> arg1 rot-syvel z)))
        )
      (else
        (set! (-> arg1 rot-syvel x) (* 6.0 (-> arg1 rot-syvel x)))
        (set! (-> arg1 rot-syvel y) (* 6.0 (-> arg1 rot-syvel y)))
        (set! (-> arg1 rot-syvel z) (* 6.0 (-> arg1 rot-syvel z)))
        )
      )
    (quaternion-zxy! (-> arg1 rotvel3d) (-> arg1 rot-syvel))
    0
    (none)
    )
  )

(defun sp-rotate-system ((arg0 sparticle-launchinfo) (arg1 sparticle-cpuinfo) (arg2 transformq))
  (let ((s5-0 (new 'stack-no-clear 'matrix)))
    (let ((a1-1 (new 'stack-no-clear 'quaternion)))
      (let* ((v1-0 a1-1)
             (a0-1 arg2)
             (f0-0 (-> a0-1 quat x))
             (f1-0 (-> a0-1 quat y))
             (f2-0 (-> a0-1 quat z))
             )
        (set! (-> v1-0 x) f0-0)
        (set! (-> v1-0 y) f1-0)
        (set! (-> v1-0 z) f2-0)
        (set! (-> v1-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
        )
      (quaternion->matrix s5-0 a1-1)
      )
    (vector3s-rotate*! (the-as vector3s (-> arg0 launchrot)) (the-as vector3s (-> arg0 launchrot)) s5-0)
    (vector3s-rotate*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
    (if (zero? (logand (sp-cpuinfo-flag use-global-acc) (-> arg1 flags)))
        (vector3s-rotate*! (the-as vector3s (-> arg1 acc)) (the-as vector3s (-> arg1 acc)) s5-0)
        )
    )
  0
  (none)
  )

(deftype sp-launch-stack (structure)
  ((ra         basic                       :offset-assert   0)
   (dummy0     basic                       :offset-assert   4)
   (dummy1     basic                       :offset-assert   8)
   (b-spfic    basic                       :offset-assert  12)
   (r16        uint128                     :offset-assert  16)
   (r17        uint128                     :offset-assert  32)
   (r18        uint128                     :offset-assert  48)
   (pos        uint128                     :offset-assert  64)
   (matrix     matrix              :inline :offset-assert  80)
   (l-spfic    basic                       :offset-assert 144)
   (birth-info sparticle-birthinfo :inline :offset-assert 160)
   (sprite     sprite-vec-data-2d  :inline :offset-assert 192)
   (r19        uint128                     :offset-assert 240)
   (r20        uint128                     :offset-assert 256)
   (r21        uint128                     :offset-assert 272)
   (r22        uint128                     :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x130
  :flag-assert         #x900000130
  )


;; ERROR: function was not converted to expressions. Cannot decompile.

(define *death-adgif* (the-as adgif-shader #f))

;; WARN: Function sp-launch-particles-death has a return type of none, but the expression builder found a return statement.
(defun sp-launch-particles-death ((arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 vector))
  (local-vars (v1-26 float) (v1-28 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf30 :class vf)
         (vf31 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (.lvf vf30 (&-> arg2 quad))
    (let ((v1-0 #x437f0000))
      (.mov vf31 v1-0)
      )
    (let ((s5-0 (new 'stack-no-clear 'matrix))
          (gp-0 (sp-get-particle arg0 0 (the-as sparticle-launch-state #f)))
          )
      (if (not gp-0)
          (return 0)
          )
      (let* ((a1-2 (-> arg1 init-specs 0))
             (a1-3
               (sp-init-fields!
                 (-> s5-0 vector)
                 (the-as (inline-array sp-field-init-spec) a1-2)
                 (sp-field-id sprite-fields-start)
                 (sp-field-id sprite-fields-end)
                 #t
                 )
               )
             )
        (sp-init-fields!
          (&-> gp-0 omega)
          (the-as (inline-array sp-field-init-spec) a1-3)
          (sp-field-id cpu-fields-start)
          (sp-field-id cpu-fields-end)
          #t
          )
        )
      (set! (-> s5-0 vector 1 y) 0.0)
      (set! (-> s5-0 vector 1 z) (the float (sar (shl (the int (-> s5-0 vector 1 z)) 48) 48)))
      (.lvf vf4 (&-> s5-0 vector 2 quad))
      (.lvf vf5 (&-> s5-0 vector 0 quad))
      (.min.x.vf vf4 vf4 vf31 :mask #b111)
      (.add.vf vf5 vf5 vf30 :mask #b111)
      (.svf (&-> s5-0 vector 2 quad) vf4)
      (.svf (&-> s5-0 vector 0 quad) vf5)
      (when (not *death-adgif*)
        (set! *death-adgif* (new 'static 'adgif-shader))
        (particle-adgif *death-adgif* (new 'static 'texture-id :index #xc9 :page #xc))
        (set! (-> *death-adgif* alpha) (new 'static 'gs-alpha :b #x2 :d #x1))
        )
      (let ((v1-14 (-> *death-adgif* quad 0 quad)))
        (set! (-> gp-0 adgif quad 0 quad) v1-14)
        )
      (let ((v1-16 (-> *death-adgif* quad 1 quad)))
        (set! (-> gp-0 adgif quad 1 quad) v1-16)
        )
      (let ((v1-18 (-> *death-adgif* quad 2 quad)))
        (set! (-> gp-0 adgif quad 2 quad) v1-18)
        )
      (let ((v1-20 (-> *death-adgif* quad 3 quad)))
        (set! (-> gp-0 adgif quad 3 quad) v1-20)
        )
      (let ((v1-22 (-> *death-adgif* quad 4 quad)))
        (set! (-> gp-0 adgif quad 4 quad) v1-22)
        )
      (set! (-> gp-0 clock-index) (the-as uint 8))
      (.lvf vf4 (&-> (-> *time-of-day-context* current-prt-color) quad))
      (.lvf vf5 (&-> s5-0 vector 2 quad))
      (.lvf vf6 (&-> gp-0 fade quad))
      (.mul.vf vf5 vf5 vf4 :mask #b111)
      (.mul.vf vf6 vf6 vf4 :mask #b111)
      (.svf (&-> s5-0 vector 2 quad) vf5)
      (.svf (&-> gp-0 fade quad) vf6)
      (.mov v1-26 vf6)
      (set! (-> gp-0 key) (the-as sparticle-launch-control 0))
      (set! (-> gp-0 binding) #f)
      (let ((v1-27 (-> gp-0 sprite)))
        (.lvf vf1 (&-> s5-0 vector 0 quad))
        (.lvf vf2 (&-> s5-0 vector 1 quad))
        (.lvf vf3 (&-> s5-0 vector 2 quad))
        (.svf (&-> v1-27 x-y-z-sx quad) vf1)
        (.svf (&-> v1-27 flag-rot-sy quad) vf2)
        (.sub.w.vf vf3 vf0 vf0 :mask #b1000)
        (.svf (&-> v1-27 r-g-b-a quad) vf3)
        )
      (.mov v1-28 vf3)
      (logior! (-> gp-0 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-5))
      (set! (-> gp-0 cache-alpha) (-> s5-0 vector 2 w))
      )
    0
    (none)
    )
  )

(defun sp-clear-queue ()
  (let ((gp-0 *sp-launch-queue*)
        (s5-0 *launch-matrix*)
        )
    (when (> (-> gp-0 in-use) 0)
      (dotimes (s4-0 (-> gp-0 in-use))
        (let ((v1-4 (-> gp-0 queue s4-0)))
          (set! (-> s5-0 trans quad) (-> v1-4 pos quad))
          (sp-launch-particles-var
            (-> v1-4 sp-system)
            (-> v1-4 sp-launcher)
            s5-0
            (the-as sparticle-launch-state #f)
            (the-as sparticle-launch-control #f)
            1.0
            )
          )
        )
      (set! (-> gp-0 in-use) 0)
      0
      )
    )
  0
  (none)
  )

(defun sp-relaunch-setup-fields ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (let ((a1-1 (-> arg1 init-specs 0))
        (s4-0 (logand (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-9 level0 level1)))
        )
    (set! (-> arg2 next-launcher) (the-as basic 0))
    (cond
      ((and (logtest? (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-12))
            (zero? (logand (-> arg2 flags) (sp-cpuinfo-flag distort)))
            (zero? (logand (-> arg2 flags) (sp-cpuinfo-flag glow)))
            )
       (let ((f20-0 (-> arg3 r-g-b-a x))
             (f22-0 (-> arg3 r-g-b-a y))
             (f24-0 (-> arg3 r-g-b-a z))
             (f26-0 (-> arg2 fade x))
             (f28-0 (-> arg2 fade y))
             (f30-0 (-> arg2 fade z))
             )
         (set! (-> arg3 r-g-b-a x) 99999.0)
         (set! (-> arg3 r-g-b-a y) 99999.0)
         (set! (-> arg3 r-g-b-a z) 99999.0)
         (set! (-> arg2 fade x) 99999.0)
         (set! (-> arg2 fade y) 99999.0)
         (set! (-> arg2 fade z) 99999.0)
         (let ((a1-2
                 (sp-init-fields!
                   (-> arg3 x-y-z-sx)
                   (the-as (inline-array sp-field-init-spec) a1-1)
                   (sp-field-id sprite-fields-start)
                   (sp-field-id sprite-fields-end)
                   #f
                   )
                 )
               )
           (sp-init-fields!
             (&-> arg2 omega)
             (the-as (inline-array sp-field-init-spec) a1-2)
             (sp-field-id cpu-fields-start)
             (sp-field-id cpu-fields-end)
             #f
             )
           )
         (logior! (-> arg2 flags) s4-0)
         (let ((v1-18 (-> *time-of-day-context* current-prt-color)))
           (if (= (-> arg3 r-g-b-a x) 99999.0)
               (set! (-> arg3 r-g-b-a x) f20-0)
               (set! (-> arg3 r-g-b-a x) (* (-> arg3 r-g-b-a x) (-> v1-18 x)))
               )
           (if (= (-> arg3 r-g-b-a y) 99999.0)
               (set! (-> arg3 r-g-b-a y) f22-0)
               (set! (-> arg3 r-g-b-a y) (* (-> arg3 r-g-b-a y) (-> v1-18 y)))
               )
           (if (= (-> arg3 r-g-b-a z) 99999.0)
               (set! (-> arg3 r-g-b-a z) f24-0)
               (set! (-> arg3 r-g-b-a z) (* (-> arg3 r-g-b-a z) (-> v1-18 z)))
               )
           (if (= (-> arg2 fade x) 99999.0)
               (set! (-> arg2 fade x) f26-0)
               (set! (-> arg2 fade x) (* (-> arg2 fade x) (-> v1-18 x)))
               )
           (if (= (-> arg2 fade y) 99999.0)
               (set! (-> arg2 fade y) f28-0)
               (set! (-> arg2 fade y) (* (-> arg2 fade y) (-> v1-18 y)))
               )
           (if (= (-> arg2 fade z) 99999.0)
               (set! (-> arg2 fade z) f30-0)
               (set! (-> arg2 fade z) (* (-> arg2 fade z) (-> v1-18 z)))
               )
           )
         )
       )
      (else
        (let ((a1-3
                (sp-init-fields!
                  (-> arg3 x-y-z-sx)
                  (the-as (inline-array sp-field-init-spec) a1-1)
                  (sp-field-id sprite-fields-start)
                  (sp-field-id sprite-fields-end)
                  #f
                  )
                )
              )
          (sp-init-fields!
            (&-> arg2 omega)
            (the-as (inline-array sp-field-init-spec) a1-3)
            (sp-field-id cpu-fields-start)
            (sp-field-id cpu-fields-end)
            #f
            )
          )
        )
      )
    )
  0
  0
  (none)
  )

(defun sp-relaunch-particle-2d ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (sp-relaunch-setup-fields arg0 arg1 arg2 arg3)
  (when (logtest? (-> arg2 flags) (sp-cpuinfo-flag distort))
    (set! (-> arg3 r-g-b-a w) 0.0)
    (set! (-> arg2 fade w) 0.0)
    (logclear! (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-2))
    )
  (when (logtest? (-> arg2 flags) (sp-cpuinfo-flag glow))
    )
  0
  (none)
  )

;; ERROR: failed type prop at 32: Could not figure out load: (set! a1 (l.w (+ gp 104)))

(defmethod initialize sparticle-launch-control ((obj sparticle-launch-control) (arg0 sparticle-launch-group) (arg1 process))
  (with-pp
    (let ((s5-0 0))
      (set! (-> obj group) arg0)
      (set! (-> obj proc) (the-as process-drawable arg1))
      (set! (-> obj local-clock) 0)
      (set! (-> obj fade) 1.0)
      (set! (-> obj matrix) 0)
      (set! (-> obj last-spawn-frame) (the-as int (+ (-> *display* real-frame-clock integral-frame-counter) -2)))
      (set! (-> obj last-spawn-time) 0)
      (if (logtest? (-> obj group flags) (sp-group-flag unk-4))
          (quaternion->matrix (-> obj origin) (-> (the-as process-drawable arg1) root quat))
          (matrix-identity! (-> obj origin))
          )
      (when (logtest? (-> arg0 flags) (sp-group-flag unk-6))
        (let ((f0-1 (-> arg0 rotate-x))
              (f1-0 (-> arg0 rotate-y))
              (f2-0 (-> arg0 rotate-z))
              (t9-2 matrix-rotate-xyz!)
              (a0-3 (new 'stack-no-clear 'matrix))
              (a1-2 (new 'stack-no-clear 'vector))
              )
          (set! (-> a1-2 x) f0-1)
          (set! (-> a1-2 y) f1-0)
          (set! (-> a1-2 z) f2-0)
          (set! (-> a1-2 w) 1.0)
          (let ((a1-3 (t9-2 a0-3 a1-2)))
            (matrix*! (-> obj origin) a1-3 (-> obj origin))
            )
          )
        )
      (when (logtest? (-> arg0 flags) (sp-group-flag unk-7))
        (let ((a1-4 (new 'stack-no-clear 'vector)))
          (set! (-> a1-4 x) (-> arg0 scale-x))
          (set! (-> a1-4 y) (-> arg0 scale-y))
          (set! (-> a1-4 z) (-> arg0 scale-z))
          (set! (-> a1-4 w) 1.0)
          (set! (-> a1-4 w) 1.0)
          (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
          )
        )
      (dotimes (s3-0 (-> arg0 length))
        (let* ((a0-7 (-> arg0 launcher s3-0))
               (a1-6 (-> *part-id-table* (-> a0-7 launcher)))
               (v1-29 (-> obj data s5-0))
               )
          (when (nonzero? a1-6)
            (set! (-> v1-29 group-item) a0-7)
            (cond
              ((= (-> a1-6 type) sparticle-launcher)
               (set! (-> v1-29 accum) 0.0)
               (set! (-> v1-29 spawn-time) (the-as uint (+ (-> pp clock frame-counter) (seconds -100))))
               (set! (-> v1-29 offset) (the-as uint (-> a0-7 offset)))
               (set! (-> v1-29 randomize) (the-as uint 0))
               (cond
                 ((logtest? (-> a0-7 flags) (sp-group-item-flag start-dead))
                  (logclear! (-> v1-29 flags) (sp-launch-state-flags launcher-active))
                  (set! (-> v1-29 center) #f)
                  (set! (-> v1-29 sprite3d) #f)
                  (set! (-> v1-29 sprite) #f)
                  )
                 (else
                   (logior! (-> v1-29 flags) (sp-launch-state-flags launcher-active))
                   (set! (-> v1-29 center) (-> obj origin trans))
                   (set! (-> v1-29 sprite3d) #f)
                   (set! (-> v1-29 sprite) #f)
                   )
                 )
               (+! s5-0 1)
               )
              (else
                (format 0 "initialize called with non-particle-launcher~%")
                )
              )
            )
          )
        )
      (set! (-> obj length) s5-0)
      )
    0
    (none)
    )
  )

;; WARN: Return type mismatch object vs sparticle-launch-control.
(defmethod create-launch-control sparticle-launch-group ((obj sparticle-launch-group) (arg0 process))
  (let ((gp-0 (the-as object (new 'process 'sparticle-launch-control (-> obj length)))))
    (when (zero? (the-as sparticle-launch-control gp-0))
      (go process-drawable-art-error "memory")
      (set! gp-0 0)
      (goto cfg-4)
      )
    (initialize (the-as sparticle-launch-control gp-0) obj arg0)
    (label cfg-4)
    (the-as sparticle-launch-control gp-0)
    )
  )

(defmethod kill-and-free-particles sparticle-launch-control ((obj sparticle-launch-control))
  (countdown (v1-0 (-> obj length))
    (let ((a0-4 (-> obj data v1-0)))
      (logclear! (-> a0-4 flags) (sp-launch-state-flags particles-active))
      )
    )
  (set! (-> obj local-clock) 0)
  (set! (-> obj fade) 1.0)
  (kill-all-particles-with-key obj)
  (if (> (-> obj matrix) 0)
      (sprite-release-user-hvdf (-> obj matrix))
      )
  0
  (none)
  )

(defmethod kill-particles sparticle-launch-control ((obj sparticle-launch-control))
  (kill-all-particles-with-key obj)
  0
  (none)
  )

(defmethod sparticle-launch-control-method-10 sparticle-launch-control ((obj sparticle-launch-control) (arg0 vector))
  (let* ((v1-0 (-> obj group))
         (f0-0 (-> v1-0 bounds r))
         )
    (cond
      ((= f0-0 0.0)
       #t
       )
      ((nonzero? (-> obj matrix))
       #t
       )
      (else
        (let ((s5-1 (vector+! (new 'stack-no-clear 'vector) arg0 (the-as vector (-> v1-0 bounds)))))
          (set! (-> s5-1 w) f0-0)
          (when (or *display-sprite-marks* *display-sprite-spheres* (and *display-actor-vis* (= (-> obj proc) *debug-actor*)))
            (add-debug-sphere
              *display-sprite-spheres*
              (bucket-id debug2)
              s5-1
              (-> s5-1 w)
              (new 'static 'rgba :g #xff :a #x80)
              )
            (add-debug-matrix *display-sprite-marks* (bucket-id debug2) (-> obj origin) (meters 2))
            )
          (sphere-in-view-frustum? (the-as sphere s5-1))
          )
        )
      )
    )
  )

(defmethod sparticle-launch-control-method-12 sparticle-launch-control ((obj sparticle-launch-control) (arg0 matrix))
  (let* ((a2-0 (-> obj origin))
         (a3-0 arg0)
         (v1-0 (-> a3-0 vector 0 quad))
         (a0-1 (-> a3-0 vector 1 quad))
         (a1-1 (-> a3-0 vector 2 quad))
         (a3-1 (-> a3-0 trans quad))
         )
    (set! (-> a2-0 vector 0 quad) v1-0)
    (set! (-> a2-0 vector 1 quad) a0-1)
    (set! (-> a2-0 vector 2 quad) a1-1)
    (set! (-> a2-0 trans quad) a3-1)
    )
  (let ((s4-0 (-> obj group)))
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-6))
      (let ((f0-0 (-> s4-0 rotate-x))
            (f1-0 (-> s4-0 rotate-y))
            (f2-0 (-> s4-0 rotate-z))
            (t9-0 matrix-rotate-xyz!)
            (a0-2 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-0)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-0 a0-2 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> s4-0 scale-x))
        (set! (-> a1-4 y) (-> s4-0 scale-y))
        (set! (-> a1-4 z) (-> s4-0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    )
  (sparticle-launch-control-method-11 obj (-> arg0 trans))
  (none)
  )

(defmethod sparticle-launch-control-method-13 sparticle-launch-control ((obj sparticle-launch-control) (arg0 cspace))
  (let* ((v1-0 (-> obj origin))
         (a3-0 (-> arg0 bone transform))
         (a0-2 (-> a3-0 vector 0 quad))
         (a1-1 (-> a3-0 vector 1 quad))
         (a2-0 (-> a3-0 vector 2 quad))
         (a3-1 (-> a3-0 trans quad))
         )
    (set! (-> v1-0 vector 0 quad) a0-2)
    (set! (-> v1-0 vector 1 quad) a1-1)
    (set! (-> v1-0 vector 2 quad) a2-0)
    (set! (-> v1-0 trans quad) a3-1)
    )
  (let ((s4-0 (-> obj group)))
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-6))
      (let ((f0-0 (-> s4-0 rotate-x))
            (f1-0 (-> s4-0 rotate-y))
            (f2-0 (-> s4-0 rotate-z))
            (t9-0 matrix-rotate-xyz!)
            (a0-3 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-0)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-0 a0-3 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> s4-0 scale-x))
        (set! (-> a1-4 y) (-> s4-0 scale-y))
        (set! (-> a1-4 z) (-> s4-0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    )
  (sparticle-launch-control-method-11 obj (vector<-cspace! (-> obj origin trans) arg0))
  (none)
  )

;; ERROR: function was not converted to expressions. Cannot decompile.

;; ERROR: failed type prop at 12: Could not figure out load: (set! a1 (l.wu (+ a0 132)))

(defun sparticle-track-root ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-3 (-> arg1 key proc root trans)))
    (set! (-> arg2 x) (-> v1-3 x))
    (set! (-> arg2 y) (-> v1-3 y))
    (set! (-> arg2 z) (-> v1-3 z))
    )
  0
  (none)
  )

(defun sparticle-track-root-prim ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-4 (-> (the-as collide-shape (-> arg1 key proc root)) root-prim prim-core)))
    (set! (-> arg2 x) (-> v1-4 world-sphere x))
    (set! (-> arg2 y) (-> v1-4 world-sphere y))
    (set! (-> arg2 z) (-> v1-4 world-sphere z))
    )
  0
  (none)
  )

(defun sparticle-track-joint ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let* ((v1-1 (-> arg1 key proc))
         (a1-1 (the int (-> arg1 user-float)))
         (v1-3 (vector<-cspace! (new 'stack-no-clear 'vector) (-> v1-1 node-list data a1-1)))
         )
    (set! (-> arg2 x) (-> v1-3 x))
    (set! (-> arg2 y) (-> v1-3 y))
    (set! (-> arg2 z) (-> v1-3 z))
    )
  0
  (none)
  )

(defun sparticle-turn-to-vel ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-3d))
  (local-vars (v1-1 float) (v1-2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-axis-angle! gp-0 0.0 1.0 0.0 (+ 32768.0 (vector-y-angle (-> arg1 vel-sxvel))))
      (cond
        ((< (-> gp-0 w) 0.0)
         (.lvf vf1 (&-> arg2 qx-qy-qz-sy quad))
         (.lvf vf2 (&-> gp-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg2 qx-qy-qz-sy quad) vf1)
         (.mov v1-1 vf1)
         )
        (else
          (.lvf vf1 (&-> arg2 qx-qy-qz-sy quad))
          (.lvf vf2 (&-> gp-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg2 qx-qy-qz-sy quad) vf1)
          (.mov v1-2 vf1)
          )
        )
      )
    0
    (none)
    )
  )

(defun birth-func-copy-rot-color ((arg0 sparticle-system)
                         (arg1 sparticle-cpuinfo)
                         (arg2 sprite-vec-data-3d)
                         (arg3 sparticle-launcher)
                         (arg4 sparticle-launch-state)
                         )
  (local-vars (v1-5 float) (v1-6 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> arg4 sprite)))
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (let* ((v1-0 arg2)
               (f0-0 (-> v1-0 qx-qy-qz-sy x))
               (f1-0 (-> v1-0 qx-qy-qz-sy y))
               (f2-0 (-> v1-0 qx-qy-qz-sy z))
               )
          (set! (-> s4-0 x) f0-0)
          (set! (-> s4-0 y) f1-0)
          (set! (-> s4-0 z) f2-0)
          (set! (-> s4-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
          )
        (quaternion-rotate-y! s4-0 s4-0 (-> s5-0 sprite flag-rot-sy z))
        (let ((v1-4 arg2))
          (cond
            ((< (-> s4-0 w) 0.0)
             (.lvf vf1 (&-> v1-4 qx-qy-qz-sy quad))
             (.lvf vf2 (&-> s4-0 vec quad))
             (.sub.vf vf1 vf0 vf2 :mask #b111)
             (.svf (&-> v1-4 qx-qy-qz-sy quad) vf1)
             (.mov v1-5 vf1)
             )
            (else
              (.lvf vf1 (&-> v1-4 qx-qy-qz-sy quad))
              (.lvf vf2 (&-> s4-0 vec quad))
              (.add.vf vf1 vf0 vf2 :mask #b111)
              (.svf (&-> v1-4 qx-qy-qz-sy quad) vf1)
              (.mov v1-6 vf1)
              )
            )
          )
        )
      (set! (-> arg2 r-g-b-a x) (-> s5-0 sprite r-g-b-a x))
      (set! (-> arg2 r-g-b-a y) (-> s5-0 sprite r-g-b-a y))
      (set! (-> arg2 r-g-b-a z) (-> s5-0 sprite r-g-b-a z))
      )
    0
    (none)
    )
  )

(define *global-toggle* 0)

(defun birth-func-copy2-rot-color ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (local-vars (v1-18 float) (v1-19 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> arg4 sprite)))
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (let* ((v1-0 arg2)
               (f0-0 (-> v1-0 qx-qy-qz-sy x))
               (f1-0 (-> v1-0 qx-qy-qz-sy y))
               (f2-0 (-> v1-0 qx-qy-qz-sy z))
               )
          (set! (-> s4-0 x) f0-0)
          (set! (-> s4-0 y) f1-0)
          (set! (-> s4-0 z) f2-0)
          (set! (-> s4-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
          )
        (let ((a1-1 (new-stack-vector0)))
          (set! (-> a1-1 y) (-> s5-0 sprite flag-rot-sy z))
          (set! (-> a1-1 z) (if (logtest? *global-toggle* 1)
                                (the float (sar (shl (the int (- 16384.0 (-> s5-0 sprite x-y-z-sx w))) 48) 48))
                                (the float (sar (shl (the int (+ 16384.0 (-> s5-0 sprite x-y-z-sx w))) 48) 48))
                                )
                )
          (quaternion-zxy! s4-0 a1-1)
          )
        (let ((v1-17 arg2))
          (cond
            ((< (-> s4-0 w) 0.0)
             (.lvf vf1 (&-> v1-17 qx-qy-qz-sy quad))
             (.lvf vf2 (&-> s4-0 vec quad))
             (.sub.vf vf1 vf0 vf2 :mask #b111)
             (.svf (&-> v1-17 qx-qy-qz-sy quad) vf1)
             (.mov v1-18 vf1)
             )
            (else
              (.lvf vf1 (&-> v1-17 qx-qy-qz-sy quad))
              (.lvf vf2 (&-> s4-0 vec quad))
              (.add.vf vf1 vf0 vf2 :mask #b111)
              (.svf (&-> v1-17 qx-qy-qz-sy quad) vf1)
              (.mov v1-19 vf1)
              )
            )
          )
        )
      (set! (-> arg2 r-g-b-a x) (-> s5-0 sprite r-g-b-a x))
      (set! (-> arg2 r-g-b-a y) (-> s5-0 sprite r-g-b-a y))
      (set! (-> arg2 r-g-b-a z) (-> s5-0 sprite r-g-b-a z))
      )
    (set! *global-toggle* (+ *global-toggle* 1))
    0
    (none)
    )
  )

(defun birth-func-copy-omega-to-z ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (set! (-> arg2 qx-qy-qz-sy z) (+ -16384.0 (-> arg1 omega)))
  (set! (-> arg1 next-time) (-> arg4 sprite next-time))
  (set! (-> arg2 x-y-z-sx w) (* 163.85638 (the float (-> arg4 sprite next-time))))
  0
  (none)
  )

(defun birth-func-random-next-time ((arg0 sparticle-system)
                           (arg1 sparticle-cpuinfo)
                           (arg2 sprite-vec-data-3d)
                           (arg3 sparticle-launcher)
                           (arg4 sparticle-launch-state)
                           )
  (set! (-> arg1 next-time) (the-as uint (the int (rand-vu-float-range 0.0 (-> arg1 user-float)))))
  0
  (none)
  )

;; ERROR: failed type prop at 12: Could not figure out load: (set! v1 (l.w (+ gp 16)))

;; ERROR: failed type prop at 9: Could not figure out load: (set! v1 (l.w gp))

;; ERROR: failed type prop at 2: Could not figure out load: (set! a0 (l.w (+ v1 20)))

;; ERROR: failed type prop at 21: Could not figure out load: (set! a1 (l.w (+ s2 40)))
;; ERROR: Bad vector register dependency: vf1
;; ERROR: Bad vector register dependency: vf2

;; ERROR: failed type prop at 5: Could not figure out load: (set! a1 (l.w (+ v1 12)))

;; ERROR: Expression building failed: In sparticle-motion-blur: [OP: 78] - Floating point math attempted on invalid types: uint and float in op (-.s f2-0 f3-0).
;; ERROR: Inline assembly instruction marked with TODO - [TODO.VCLIP]
;; ERROR: Unsupported inline assembly instruction kind - [cfc2.i v1, Clipping]
;; ERROR: Inline assembly instruction marked with TODO - [TODO.VCLIP]
;; ERROR: Unsupported inline assembly instruction kind - [cfc2.i v1, Clipping]
;; ERROR: Unsupported inline assembly instruction kind - [mula.s f3, f3]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f3, f4, f4]
;; ERROR: Unsupported inline assembly instruction kind - [mula.s f0, f3]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f0, f2, f5]

;; WARN: Return type mismatch int vs object.

(defun sparticle-set-conerot ((arg0 sparticle-launcher) (arg1 vector))
  (let ((s5-0 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-x)))
        (s4-0 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-y)))
        (v1-3 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-z)))
        )
    (set! (-> s5-0 initial-valuef) (-> arg1 x))
    (set! (-> s4-0 initial-valuef) (-> arg1 y))
    (set! (-> v1-3 initial-valuef) (-> arg1 z))
    )
  0
  (none)
  )

(defun sparticle-next-on-mode-1 ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (if (zero? (-> arg1 key state-mode 0))
      (set! (-> arg1 next-time)
            (the-as uint (* (max 1 (the-as int (-> *display* clock (-> arg1 clock-index) sparticle-data x))) 2))
            )
      )
  0.0
  )

(defun check-ground-bounce ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((f0-1 (+ (-> arg1 key origin trans y) (-> arg1 user-float))))
    (when (and (< (-> arg2 launchrot y) f0-1) (< (-> arg1 vel-sxvel y) 0.0))
      (set! (-> arg2 launchrot y) f0-1)
      (set! (-> arg1 vel-sxvel y) (* (-> arg1 vel-sxvel y) (- (rand-vu-float-range 0.6 0.8))))
      )
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defun check-drop-group-center ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((f0-0 (-> arg1 key origin trans y)))
    (if (< (-> arg2 launchrot y) f0-0)
        (sp-kill-particle arg0 arg1)
        )
    )
  (none)
  )

(defun birth-func-y->userdata ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (+! (-> arg1 user-float) (-> arg2 vector 0 y))
  0
  (none)
  )

(defun birth-func-ocean-height ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (set! (-> arg2 vector 0 y) (+ (ocean-method-11 *ocean* (-> arg2 vector) #t) (-> arg1 user-float)))
  0
  (none)
  )

(defun birth-func-camera-orient ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (v1-0 float) (v1-1 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-1 (forward-up-nopitch->quaternion
                  (new 'stack-no-clear 'quaternion)
                  (-> (math-camera-matrix) vector 2)
                  *up-vector*
                  )
                )
          )
      (quaternion-rotate-x! s5-1 s5-1 16384.0)
      (cond
        ((< (-> s5-1 w) 0.0)
         (.lvf vf1 (&-> arg2 conerot quad))
         (.lvf vf2 (&-> s5-1 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg2 conerot quad) vf1)
         (.mov v1-0 vf1)
         )
        (else
          (.lvf vf1 (&-> arg2 conerot quad))
          (.lvf vf2 (&-> s5-1 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg2 conerot quad) vf1)
          (.mov v1-1 vf1)
          )
        )
      )
    0
    (none)
    )
  )

(define *particle-quat* (new 'static 'quaternion :w 1.0))

(defun birth-func-set-quat ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (a0-2 float) (a0-3 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a0-1 arg2)
          (v1-0 *particle-quat*)
          )
      (cond
        ((< (-> v1-0 w) 0.0)
         (.lvf vf1 (&-> a0-1 conerot quad))
         (.lvf vf2 (&-> v1-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> a0-1 conerot quad) vf1)
         (.mov a0-2 vf1)
         )
        (else
          (.lvf vf1 (&-> a0-1 conerot quad))
          (.lvf vf2 (&-> v1-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> a0-1 conerot quad) vf1)
          (.mov a0-3 vf1)
          )
        )
      )
    0
    (none)
    )
  )

(define *particle-vel* (new 'static 'vector :w 1.0))

(defun birth-func-set-vel ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((v1-0 *particle-vel*))
    (set! (-> arg1 vel-sxvel x) (-> v1-0 x))
    (set! (-> arg1 vel-sxvel y) (-> v1-0 y))
    (set! (-> arg1 vel-sxvel z) (-> v1-0 z))
    )
  0
  (none)
  )


;; WARN: new jak 2 until loop case, check carefully
(defmethod get-field-spec-by-id sparticle-launcher ((obj sparticle-launcher) (arg0 sp-field-id))
  "Returns the [[sp-field-init-spec]] that has the matching [[sp-field-id]]"
  (let ((v1-0 0))
    (until #f
      (let ((a2-2 (-> obj init-specs v1-0 field)))
        (cond
          ((= a2-2 arg0)
           (return (-> obj init-specs v1-0))
           )
          ((or (< (the-as uint arg0) (the-as uint a2-2)) (= a2-2 (sp-field-id spt-end)))
           (return (the-as sp-field-init-spec #f))
           )
          (else
            (+! v1-0 1)
            )
          )
        )
      )
    )
  (the-as sp-field-init-spec #f)
  )

;; ERROR: failed type prop at 45: Could not figure out load: (set! v1 (l.w (+ gp 12)))
