;;-*-Lisp-*-
(in-package goal)

;; name: sparticle-launcher.gc
;; name in dgo: sparticle-launcher
;; dgos: ENGINE, GAME

;; TODO sparticle-texture-day-night vf1/vf2 issue

;; og:ignore-form:sp-relaunch-particle-3d
;; og:ignore-form:execute-part-engine
;; og:ignore-form:sparticle-respawn-heights
;; og:ignore-form:sparticle-respawn-timer
;; og:ignore-form:sparticle-mode-animate
;; og:ignore-form:sparticle-mode-animate
;; og:ignore-form:sparticle-texture-animate
;; og:ignore-form:sparticle-texture-day-night
;; og:ignore-form:sparticle-motion-blur
;; og:ignore-form:birth-func-texture-group
;; og:ignore-form:sparticle-launcher-method-10

(define-extern particle-adgif (function adgif-shader texture-id none)) ;; TODO - particle-adgif atomic ops, MIPS2C
(define-extern sp-launch-particles-var (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none)) ;; TODO - mips2c

;; DECOMP BEGINS

;; WARN: Return type mismatch int vs sparticle-launcher.

(kmemopen global "part-tables")

(define *part-id-table* (new 'global 'boxed-array sparticle-launcher 5760))

(define *part-group-id-table* (new 'global 'boxed-array sparticle-launch-group 1408))

(define *sp-temp* 0.0)

(kmemclose)

(defun lookup-part-group-by-name ((arg0 string))
  "Iterate through the [[*part-group-id-table*]] and return the matching [[sparticle-launch-group]], or [[#f]] otherwise"
  (let* ((s5-0 *part-group-id-table*)
         (s4-0 (-> s5-0 length))
         )
    (dotimes (s3-0 s4-0)
      (let ((s2-0 (-> s5-0 s3-0)))
        (if (and (nonzero? s2-0) (string= arg0 (-> s2-0 name)))
            (return s2-0)
            )
        )
      )
    )
  (the-as sparticle-launch-group #f)
  )

;; WARN: Return type mismatch (pointer sparticle-launch-group) vs (pointer object).
(defun lookup-part-group-pointer-by-name ((arg0 string))
  "Similar to [[lookup-part-group-by-name]] but returns a pointer instead"
  (let* ((s4-0 *part-group-id-table*)
         (s3-0 (-> s4-0 length))
         )
    (dotimes (gp-0 s3-0)
      (let ((v1-2 (-> s4-0 gp-0)))
        (if (and (nonzero? v1-2) (string= arg0 (-> v1-2 name)))
            (return (the-as (pointer object) (&+ (-> s4-0 data) (* gp-0 4))))
            )
        )
      )
    )
  (the-as (pointer sparticle-launch-group) #f)
  )

(defun part-group-pointer? ((arg0 pointer))
  "Verifies if the given pointer, points to a [[sparticle-launch-group]]"
  (let ((v1-0 *part-group-id-table*))
    (and (>= (the-as int arg0) (the-as int (-> v1-0 data))) (< (the-as int arg0) (the-as int (&-> v1-0 1408))))
    )
  )

(defun unlink-part-group-by-heap ((arg0 kheap))
  (let* ((v1-0 *part-group-id-table*)
         (a2-0 (-> v1-0 length))
         (a1-0 (-> arg0 base))
         (a0-1 (-> arg0 top-base))
         )
    (while (nonzero? a2-0)
      (+! a2-0 -1)
      (let ((a3-2 (-> v1-0 a2-0)))
        (when (and (>= (the-as int a3-2) (the-as int a1-0)) (< (the-as int a3-2) (the-as int a0-1)))
          (set! (-> v1-0 a2-0) (the-as sparticle-launch-group 0))
          0
          )
        )
      )
    )
  0
  )

;; this was rewritten from assembly
(defun sp-init-fields! ((arg0 (pointer float)) (arg1 (inline-array sp-field-init-spec)) (arg2 sp-field-id) (arg3 sp-field-id) (write-missing-fields symbol))
  (1+! arg2)
  (let ((cur-spec arg1))
      (while (< (-> cur-spec 0 field) arg2)
        (&+! cur-spec 16)
        )
      (if (>= arg2 arg3)
          (return cur-spec))
      (until (= arg2 arg3)
        (cond
          ((!= (-> cur-spec 0 field) arg2)
            (if write-missing-fields
                (set! (-> arg0) 0.0))
            ;; reduce by 16 because it will be incremented by 16 right after but we don't want to advance field
            (&+! cur-spec -16)
            )
          ((= arg2 (sp-field-id spt-sound))
            (set! (-> arg0) (-> cur-spec 0 initial-valuef))
            )
          (else
            (case (-> cur-spec 0 flags)
              (((sp-flag float))
                (if (= (-> cur-spec 0 random-range) 0)
                    (set! (-> arg0) (-> cur-spec 0 initial-valuef))
                    (set! (-> arg0) (+ (-> cur-spec 0 initial-valuef) (* (-> cur-spec 0 random-multf) (* (rand-vu) (-> cur-spec 0 random-rangef))))))
                )
              (((sp-flag float-int-rand))
                (if (= (-> cur-spec 0 random-range) 0)
                    (set! (-> arg0) (-> cur-spec 0 initial-valuef))
                    (set! (-> arg0) (+ (-> cur-spec 0 initial-valuef) (* (-> cur-spec 0 random-multf) (the int (* (rand-vu) (1+ (-> cur-spec 0 random-range))))))))
                )
              (((sp-flag float-store))
                (if (= (-> cur-spec 0 random-range) 0)
                    (set! (-> arg0) (-> cur-spec 0 initial-valuef))
                    (set! (-> arg0) (+ (-> cur-spec 0 initial-valuef) (* (-> cur-spec 0 random-multf) (* (rand-vu) (-> cur-spec 0 random-rangef))))))
                (set! *sp-temp* (-> arg0))
                )
              (((sp-flag copy-from-other))
                (set! (-> arg0) (-> arg0 (-> cur-spec 0 initial-value)))
                )
              (((sp-flag symbol))
                (set! (-> arg0) (the-as float (-> cur-spec 0 sym value)))
                )
              (((sp-flag launcher))
                (set! (-> arg0) (the-as float (-> *part-id-table* (-> cur-spec 0 initial-value))))
                )
              (((sp-flag object))
                (set! (-> arg0) (the-as float (-> cur-spec 0 object)))
                )
              (else
                (if (= (-> cur-spec 0 random-range) 0)
                    (set! (-> arg0) (-> cur-spec 0 initial-valuef))
                    (set! (-> arg0) (the-as float (+ (-> cur-spec 0 initial-value) (* (-> cur-spec 0 random-mult) (the int (* (rand-vu) (-> cur-spec 0 random-range))))))))
                )
              )
            )
          )
        (1+! arg2)
        (&+! arg0 4)
        (&+! cur-spec 16))
      cur-spec)
  )

(deftype sp-queued-launch-particles (structure)
  ((sp-system   sparticle-system           :offset-assert   0)
   (sp-launcher sparticle-launcher         :offset-assert   4)
   (pos         vector             :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )


(deftype sp-launch-queue (basic)
  ((in-use int32                                  :offset-assert   4)
   (queue  sp-queued-launch-particles 256 :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x2010
  :flag-assert         #x900002010
  )


(kmemopen global "launcher-queue")

(define *sp-launcher-lock* #f)

(define *sp-launch-queue* (new 'global 'sp-launch-queue))

(define *sp-launcher-enable* #t)

(kmemclose)

(defun particle-setup-adgif ((arg0 adgif-shader) (arg1 int))
  (let ((a1-1 (lookup-texture-by-id-fast (the-as texture-id arg1)))
        (s5-0 #f)
        )
    (when (not a1-1)
      (set! a1-1 (lookup-texture-by-id-fast (new 'static 'texture-id :index #x9b :page #xb)))
      (set! s5-0 #t)
      )
    (set! (-> arg0 tex1) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> arg0 tex0 tfx) 0)
    (adgif-shader<-texture! arg0 a1-1)
    (set! (-> arg0 prims 1) (gs-reg64 tex0-1))
    (set! (-> arg0 prims 3) (the-as gs-reg64 (logior arg1 20)))
    (set! (-> arg0 prims 5) (gs-reg64 miptbp1-1))
    (set! (-> arg0 clamp-reg) (gs-reg64 zbuf-1))
    (set! (-> arg0 prims 9) (gs-reg64 alpha-1))
    (if s5-0
        (logior! (-> arg0 link-test) (link-test-flags backup-sprite-tex))
        )
    )
  (set! (-> arg0 alpha) (new 'static 'gs-alpha :b #x1 :d #x1))
  (set! (-> arg0 clamp) (new 'static 'gs-clamp :minu #x13 :minv #x101))
  0
  (none)
  )

(deftype particle-adgif-cache (basic)
  ((used    int32                   :offset-assert   4)
   (last    uint16                  :offset-assert   8)
   (lastgif adgif-shader            :offset-assert  12)
   (tidhash uint16       80         :offset-assert  16)
   (spadgif adgif-shader 80 :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x19b0
  :flag-assert         #x9000019b0
  )


(kmemopen global "part-adgif-cache")

(define *particle-adgif-cache* (new 'global 'particle-adgif-cache))

(set! (-> *particle-adgif-cache* used) 0)

(kmemclose)

(defun particle-adgif-cache-flush ()
  "Clear [[*particle-adgif-cache*]]"
  (set! (-> *particle-adgif-cache* used) 0)
  (set! (-> *particle-adgif-cache* last) (the-as uint 0))
  0
  (none)
  )

(def-mips2c particle-adgif (function adgif-shader texture-id none))

;; ERROR: Bad vector register dependency: vf16
;; ERROR: Bad vector register dependency: vf17
;; ERROR: Bad vector register dependency: vf18
;; ERROR: Bad vector register dependency: vf19
;; ERROR: Bad vector register dependency: vf20
(defun particle-adgif-callback ((arg0 adgif-shader) (arg1 texture-id))
  "Callback to update the adgif of a particle, keeping only alpha and clamp.
   This is new for jak 2.
   There is some funny stuff going on with vf16 - vf20, but it seems like this function just
   preserves those registers (which particle-adgif likely clobbers) so this doesn't clobber
   registers used by particle system, which it assumes are preserved across callbacks."
  (local-vars (v1-0 float))
  (rlet ((vf16 :class vf)
         (vf17 :class vf)
         (vf18 :class vf)
         (vf19 :class vf)
         (vf20 :class vf)
         )
    (let ((s5-0 (new 'stack-no-clear 'inline-array 'vector 4)))
      (let ((s4-0 (-> arg0 alpha))
            (s3-0 (-> arg0 clamp))
            )
        ; (.svf (&-> s5-0 0 quad) vf16)
        ; (.svf (&-> s5-0 1 quad) vf17)
        ; (.svf (&-> s5-0 2 quad) vf18)
        ; (.svf (&-> s5-0 3 quad) vf19)
        ; (.svf (&-> s5-0 4 quad) vf20)
        (particle-adgif arg0 arg1)
        (set! (-> arg0 alpha) s4-0)
        (set! (-> arg0 clamp) s3-0)
        )
      ; (.lvf vf16 (&-> s5-0 0 quad))
      ; (.lvf vf17 (&-> s5-0 1 quad))
      ; (.lvf vf18 (&-> s5-0 2 quad))
      ; (.lvf vf19 (&-> s5-0 3 quad))
      ; (.lvf vf20 (&-> s5-0 4 quad))
      )
    (.mov v1-0 vf20)
    0
    (none)
    )
  )

(defun sp-queue-launch ((arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 matrix))
  (let ((v1-0 *sp-launch-queue*))
    (when (= (-> v1-0 in-use) 256)
      (format 0 "ERROR: sp-launch-particles called during processing, and queue is full~%")
      (return 0)
      )
    (let ((a3-5 (-> v1-0 queue (-> v1-0 in-use))))
      (set! (-> a3-5 sp-system) arg0)
      (set! (-> a3-5 sp-launcher) arg1)
      (set! (-> a3-5 pos quad) (-> arg2 trans quad))
      )
    (let ((v0-1 (+ (-> v1-0 in-use) 1)))
      (set! (-> v1-0 in-use) v0-1)
      v0-1
      )
    )
  )

(defun sp-adjust-launch ((arg0 sparticle-launchinfo)
                (arg1 sparticle-cpuinfo)
                (arg2 (inline-array sp-field-init-spec))
                (arg3 matrix)
                (arg4 symbol)
                )
  (let ((s2-0 (new 'stack-no-clear 'matrix))
        (s5-0 (new 'stack-no-clear 'matrix))
        )
    (let ((s0-0 (new 'stack-no-clear 'vector)))
      (sp-init-fields!
        (the-as (pointer float) (-> s2-0 vector))
        arg2
        (sp-field-id launch-fields-start)
        (sp-field-id launch-fields-end)
        #t
        )
      (matrix-rotate-xyz! s5-0 (the-as vector (-> s2-0 vector)))
      (vector3s-matrix*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
      (matrix-rotate-xyz! s5-0 (-> s2-0 vector 1))
      (vector3s-matrix*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
      (matrix*! s5-0 s5-0 arg3)
      (set-vector! s0-0 0.0 (-> s2-0 vector 2 w) 0.0 1.0)
      (vector-matrix*! s0-0 s0-0 s5-0)
      (+! (-> arg0 launchrot x) (-> s0-0 x))
      (+! (-> arg0 launchrot y) (-> s0-0 y))
      (+! (-> arg0 launchrot z) (-> s0-0 z))
      )
    (when (logtest? (sp-cpuinfo-flag sp-cpuinfo-flag-21) (-> arg1 flags))
      (set! (-> arg0 launchrot w) (* (-> arg0 launchrot w) (vector-length (the-as vector (-> arg3 vector)))))
      (set! (-> arg0 conerot w) (* (-> arg0 conerot w) (vector-length (-> arg3 vector 1))))
      )
    (matrix-rotate-xyz! s5-0 (-> s2-0 vector 2))
    (matrix*! s5-0 s5-0 arg3)
    (vector3s-rotate*! (the-as vector3s (-> arg0 launchrot)) (the-as vector3s (-> arg0 launchrot)) s5-0)
    (vector3s-rotate*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
    (if (not (logtest? (sp-cpuinfo-flag use-global-acc) (-> arg1 flags)))
        (vector3s-rotate*! (the-as vector3s (-> arg1 acc)) (the-as vector3s (-> arg1 acc)) s5-0)
        )
    (if (logtest? (sp-cpuinfo-flag set-conerot) (-> arg1 flags))
        (set! (-> arg0 conerot y) (+ 16384.0 (vector-y-angle (-> s5-0 vector 2))))
        )
    (when arg4
      (let ((s4-1 (new 'stack-no-clear 'euler-angles)))
        (matrix->eul s4-1 s5-0 13)
        (set! (-> arg0 conerot x) (- (-> arg0 conerot x) (-> s4-1 y)))
        (set! (-> arg0 conerot y) (- (-> arg0 conerot y) (-> s4-1 z)))
        (set! (-> arg0 conerot z) (- (-> arg0 conerot z) (-> s4-1 x)))
        )
      )
    )
  0
  (none)
  )

(defun sp-euler-convert ((arg0 sparticle-launchinfo) (arg1 sparticle-cpuinfo))
  (local-vars (v1-1 float) (v1-2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a1-1 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'quaternion))
          )
      (set-vector! a1-1 (-> arg0 conerot x) (-> arg0 conerot y) (-> arg0 conerot z) 1.0)
      (quaternion-zxy! s5-0 a1-1)
      (cond
        ((< (-> s5-0 w) 0.0)
         (.lvf vf1 (&-> arg0 conerot quad))
         (.lvf vf2 (&-> s5-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg0 conerot quad) vf1)
         (.mov v1-1 vf1)
         )
        (else
          (.lvf vf1 (&-> arg0 conerot quad))
          (.lvf vf2 (&-> s5-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg0 conerot quad) vf1)
          (.mov v1-2 vf1)
          )
        )
      )
    (cond
      (*sp-60-hz*
        (set! (-> arg1 rot-syvel x) (* 5.0 (-> arg1 rot-syvel x)))
        (set! (-> arg1 rot-syvel y) (* 5.0 (-> arg1 rot-syvel y)))
        (set! (-> arg1 rot-syvel z) (* 5.0 (-> arg1 rot-syvel z)))
        )
      (else
        (set! (-> arg1 rot-syvel x) (* 6.0 (-> arg1 rot-syvel x)))
        (set! (-> arg1 rot-syvel y) (* 6.0 (-> arg1 rot-syvel y)))
        (set! (-> arg1 rot-syvel z) (* 6.0 (-> arg1 rot-syvel z)))
        )
      )
    (quaternion-zxy! (-> arg1 rotvel3d) (-> arg1 rot-syvel))
    0
    (none)
    )
  )

(defun sp-rotate-system ((arg0 sparticle-launchinfo) (arg1 sparticle-cpuinfo) (arg2 transformq))
  (let ((s5-0 (new 'stack-no-clear 'matrix)))
    (let ((a1-1 (new 'stack-no-clear 'quaternion)))
      (let* ((v1-0 a1-1)
             (a0-1 arg2)
             (f0-0 (-> a0-1 quat x))
             (f1-0 (-> a0-1 quat y))
             (f2-0 (-> a0-1 quat z))
             )
        (set! (-> v1-0 x) f0-0)
        (set! (-> v1-0 y) f1-0)
        (set! (-> v1-0 z) f2-0)
        (set! (-> v1-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
        )
      (quaternion->matrix s5-0 a1-1)
      )
    (vector3s-rotate*! (the-as vector3s (-> arg0 launchrot)) (the-as vector3s (-> arg0 launchrot)) s5-0)
    (vector3s-rotate*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
    (if (not (logtest? (sp-cpuinfo-flag use-global-acc) (-> arg1 flags)))
        (vector3s-rotate*! (the-as vector3s (-> arg1 acc)) (the-as vector3s (-> arg1 acc)) s5-0)
        )
    )
  0
  (none)
  )

(deftype sp-launch-stack (structure)
  ((ra         basic                       :offset-assert   0)
   (dummy0     basic                       :offset-assert   4)
   (dummy1     basic                       :offset-assert   8)
   (b-spfic    basic                       :offset-assert  12)
   (r16        uint128                     :offset-assert  16)
   (r17        uint128                     :offset-assert  32)
   (r18        uint128                     :offset-assert  48)
   (pos        uint128                     :offset-assert  64)
   (matrix     matrix              :inline :offset-assert  80)
   (l-spfic    basic                       :offset-assert 144)
   (birth-info sparticle-birthinfo :inline :offset-assert 160)
   (sprite     sprite-vec-data-2d  :inline :offset-assert 192)
   (r19        uint128                     :offset-assert 240)
   (r20        uint128                     :offset-assert 256)
   (r21        uint128                     :offset-assert 272)
   (r22        uint128                     :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x130
  :flag-assert         #x900000130
  )


(def-mips2c sp-launch-particles-var (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none))

(define *death-adgif* (the-as adgif-shader #f))

;; WARN: Function sp-launch-particles-death has a return type of none, but the expression builder found a return statement.
(defun sp-launch-particles-death ((arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 vector))
  (local-vars (v1-26 float) (v1-28 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf30 :class vf)
         (vf31 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (.lvf vf30 (&-> arg2 quad))
    (let ((v1-0 #x437f0000))
      (.mov vf31 v1-0)
      )
    (let ((s5-0 (new 'stack-no-clear 'matrix))
          (gp-0 (sp-get-particle arg0 0 (the-as sparticle-launch-state #f)))
          )
      (if (not gp-0)
          (return 0)
          )
      (let* ((a1-2 (-> arg1 init-specs 0))
             (a1-3 (sp-init-fields!
                     (the-as (pointer float) (-> s5-0 vector))
                     (the-as (inline-array sp-field-init-spec) a1-2)
                     (sp-field-id sprite-fields-start)
                     (sp-field-id sprite-fields-end)
                     #t
                     )
                   )
             )
        (sp-init-fields! (&-> gp-0 omega) a1-3 (sp-field-id cpu-fields-start) (sp-field-id cpu-fields-end) #t)
        )
      (set! (-> s5-0 vector 1 y) 0.0)
      (set! (-> s5-0 vector 1 z) (the float (sar (shl (the int (-> s5-0 vector 1 z)) 48) 48)))
      (.lvf vf4 (&-> s5-0 vector 2 quad))
      (.lvf vf5 (&-> s5-0 vector 0 quad))
      (.min.x.vf vf4 vf4 vf31 :mask #b111)
      (.add.vf vf5 vf5 vf30 :mask #b111)
      (.svf (&-> s5-0 vector 2 quad) vf4)
      (.svf (&-> s5-0 vector 0 quad) vf5)
      (when (not *death-adgif*)
        (set! *death-adgif* (new 'static 'adgif-shader))
        (particle-adgif *death-adgif* (new 'static 'texture-id :index #xc9 :page #xc))
        (set! (-> *death-adgif* alpha) (new 'static 'gs-alpha :b #x2 :d #x1))
        )
      (let ((v1-14 (-> *death-adgif* quad 0 quad)))
        (set! (-> gp-0 adgif quad 0 quad) v1-14)
        )
      (let ((v1-16 (-> *death-adgif* quad 1 quad)))
        (set! (-> gp-0 adgif quad 1 quad) v1-16)
        )
      (let ((v1-18 (-> *death-adgif* quad 2 quad)))
        (set! (-> gp-0 adgif quad 2 quad) v1-18)
        )
      (let ((v1-20 (-> *death-adgif* quad 3 quad)))
        (set! (-> gp-0 adgif quad 3 quad) v1-20)
        )
      (let ((v1-22 (-> *death-adgif* quad 4 quad)))
        (set! (-> gp-0 adgif quad 4 quad) v1-22)
        )
      (set! (-> gp-0 clock-index) (the-as uint 8))
      (.lvf vf4 (&-> (-> *time-of-day-context* current-prt-color) quad))
      (.lvf vf5 (&-> s5-0 vector 2 quad))
      (.lvf vf6 (&-> gp-0 fade quad))
      (.mul.vf vf5 vf5 vf4 :mask #b111)
      (.mul.vf vf6 vf6 vf4 :mask #b111)
      (.svf (&-> s5-0 vector 2 quad) vf5)
      (.svf (&-> gp-0 fade quad) vf6)
      (.mov v1-26 vf6)
      (set! (-> gp-0 key) (the-as sparticle-launch-control 0))
      (set! (-> gp-0 binding) #f)
      (let ((v1-27 (-> gp-0 sprite)))
        (.lvf vf1 (&-> s5-0 vector 0 quad))
        (.lvf vf2 (&-> s5-0 vector 1 quad))
        (.lvf vf3 (&-> s5-0 vector 2 quad))
        (.svf (&-> v1-27 x-y-z-sx quad) vf1)
        (.svf (&-> v1-27 flag-rot-sy quad) vf2)
        (.sub.w.vf vf3 vf0 vf0 :mask #b1000)
        (.svf (&-> v1-27 r-g-b-a quad) vf3)
        )
      (.mov v1-28 vf3)
      (logior! (-> gp-0 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-5))
      (set! (-> gp-0 cache-alpha) (-> s5-0 vector 2 w))
      )
    0
    (none)
    )
  )

(defun sp-clear-queue ()
  (let ((gp-0 *sp-launch-queue*)
        (s5-0 *launch-matrix*)
        )
    (when (> (-> gp-0 in-use) 0)
      (dotimes (s4-0 (-> gp-0 in-use))
        (let ((v1-4 (-> gp-0 queue s4-0)))
          (set! (-> s5-0 trans quad) (-> v1-4 pos quad))
          (sp-launch-particles-var
            (-> v1-4 sp-system)
            (-> v1-4 sp-launcher)
            s5-0
            (the-as sparticle-launch-state #f)
            (the-as sparticle-launch-control #f)
            1.0
            )
          )
        )
      (set! (-> gp-0 in-use) 0)
      0
      )
    )
  0
  (none)
  )

(defun sp-relaunch-setup-fields ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (let ((a1-1 (-> arg1 init-specs 0))
        (s4-0 (logand (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-9 level0 level1)))
        )
    (set! (-> arg2 next-launcher) (the-as basic 0))
    (cond
      ((and (logtest? (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-12))
            (not (logtest? (-> arg2 flags) (sp-cpuinfo-flag distort)))
            (not (logtest? (-> arg2 flags) (sp-cpuinfo-flag glow)))
            )
       (let ((f20-0 (-> arg3 r-g-b-a x))
             (f22-0 (-> arg3 r-g-b-a y))
             (f24-0 (-> arg3 r-g-b-a z))
             (f26-0 (-> arg2 fade x))
             (f28-0 (-> arg2 fade y))
             (f30-0 (-> arg2 fade z))
             )
         (set! (-> arg3 r-g-b-a x) 99999.0)
         (set! (-> arg3 r-g-b-a y) 99999.0)
         (set! (-> arg3 r-g-b-a z) 99999.0)
         (set! (-> arg2 fade x) 99999.0)
         (set! (-> arg2 fade y) 99999.0)
         (set! (-> arg2 fade z) 99999.0)
         (let ((a1-2 (sp-init-fields!
                       (the-as (pointer float) (-> arg3 x-y-z-sx))
                       (the-as (inline-array sp-field-init-spec) a1-1)
                       (sp-field-id sprite-fields-start)
                       (sp-field-id sprite-fields-end)
                       #f
                       )
                     )
               )
           (sp-init-fields! (&-> arg2 omega) a1-2 (sp-field-id cpu-fields-start) (sp-field-id cpu-fields-end) #f)
           )
         (logior! (-> arg2 flags) s4-0)
         (let ((v1-18 (-> *time-of-day-context* current-prt-color)))
           (if (= (-> arg3 r-g-b-a x) 99999.0)
               (set! (-> arg3 r-g-b-a x) f20-0)
               (set! (-> arg3 r-g-b-a x) (* (-> arg3 r-g-b-a x) (-> v1-18 x)))
               )
           (if (= (-> arg3 r-g-b-a y) 99999.0)
               (set! (-> arg3 r-g-b-a y) f22-0)
               (set! (-> arg3 r-g-b-a y) (* (-> arg3 r-g-b-a y) (-> v1-18 y)))
               )
           (if (= (-> arg3 r-g-b-a z) 99999.0)
               (set! (-> arg3 r-g-b-a z) f24-0)
               (set! (-> arg3 r-g-b-a z) (* (-> arg3 r-g-b-a z) (-> v1-18 z)))
               )
           (if (= (-> arg2 fade x) 99999.0)
               (set! (-> arg2 fade x) f26-0)
               (set! (-> arg2 fade x) (* (-> arg2 fade x) (-> v1-18 x)))
               )
           (if (= (-> arg2 fade y) 99999.0)
               (set! (-> arg2 fade y) f28-0)
               (set! (-> arg2 fade y) (* (-> arg2 fade y) (-> v1-18 y)))
               )
           (if (= (-> arg2 fade z) 99999.0)
               (set! (-> arg2 fade z) f30-0)
               (set! (-> arg2 fade z) (* (-> arg2 fade z) (-> v1-18 z)))
               )
           )
         )
       )
      (else
        (let ((a1-3 (sp-init-fields!
                      (the-as (pointer float) (-> arg3 x-y-z-sx))
                      (the-as (inline-array sp-field-init-spec) a1-1)
                      (sp-field-id sprite-fields-start)
                      (sp-field-id sprite-fields-end)
                      #f
                      )
                    )
              )
          (sp-init-fields! (&-> arg2 omega) a1-3 (sp-field-id cpu-fields-start) (sp-field-id cpu-fields-end) #f)
          )
        )
      )
    )
  0
  0
  (none)
  )

(defun sp-relaunch-particle-2d ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (sp-relaunch-setup-fields arg0 arg1 arg2 arg3)
  (when (logtest? (-> arg2 flags) (sp-cpuinfo-flag distort))
    (set! (-> arg3 r-g-b-a w) 0.0)
    (set! (-> arg2 fade w) 0.0)
    (logclear! (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-2))
    )
  (when (logtest? (-> arg2 flags) (sp-cpuinfo-flag glow))
    )
  0
  (none)
  )

(defun sp-relaunch-particle-3d ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (local-vars (v1-9 float) (v1-10 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'quaternion)))
      (let* ((v1-0 s4-0)
             (a2-1 arg3)
             (f0-0 (-> a2-1 qx-qy-qz-sy x))
             (f1-0 (-> a2-1 qx-qy-qz-sy y))
             (f2-0 (-> a2-1 qx-qy-qz-sy z))
             )
        (set! (-> v1-0 x) f0-0)
        (set! (-> v1-0 y) f1-0)
        (set! (-> v1-0 z) f2-0)
        (set! (-> v1-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
        )
      (set! (-> arg3 qx-qy-qz-sy x) 0.0)
      (set! (-> arg3 qx-qy-qz-sy y) 0.0)
      (set! (-> arg3 qx-qy-qz-sy z) 0.0)
      (sp-relaunch-setup-fields arg0 arg1 arg2 arg3)

      ;; some truly strange flag weirdness.
      (let* ((a1-1 (-> arg2 flags-s32))
             (v1-1 -2)
             (a0-1 (the-as uint (-> arg3 r-g-b-a x)))
             (a1-2 (logand a1-1 (sp-cpuinfo-flag-s32 sp-cpuinfo-flag-14)))
             )
        1
        (let ((a1-3 (sar (the-as int a1-2) 14)))
          (set! (-> arg3 r-g-b-a x) (the-as float (logior (logand a0-1 (the-as uint v1-1)) a1-3)))
          )
        )
      (let ((a1-4 (new 'stack-no-clear 'vector))
            (s3-0 (new 'stack-no-clear 'quaternion))
            )
        (set-vector! a1-4 (-> arg3 qx-qy-qz-sy x) (-> arg3 qx-qy-qz-sy y) (-> arg3 qx-qy-qz-sy z) 1.0)
        (quaternion-zxy! s3-0 a1-4)
        (if (logtest? (sp-cpuinfo-flag left-multiply-quat) (-> arg2 flags))
            (quaternion*! s3-0 s4-0 s3-0)
            )
        (cond
          ((< (-> s3-0 w) 0.0)
           (.lvf vf1 (&-> arg3 qx-qy-qz-sy quad))
           (.lvf vf2 (&-> s3-0 vec quad))
           (.sub.vf vf1 vf0 vf2 :mask #b111)
           (.svf (&-> arg3 qx-qy-qz-sy quad) vf1)
           (.mov v1-9 vf1)
           )
          (else
            (.lvf vf1 (&-> arg3 qx-qy-qz-sy quad))
            (.lvf vf2 (&-> s3-0 vec quad))
            (.add.vf vf1 vf0 vf2 :mask #b111)
            (.svf (&-> arg3 qx-qy-qz-sy quad) vf1)
            (.mov v1-10 vf1)
            )
          )
        )
      )
    (cond
      (*sp-60-hz*
        (set! (-> arg2 rot-syvel x) (* 5.0 (-> arg2 rot-syvel x)))
        (set! (-> arg2 rot-syvel y) (* 5.0 (-> arg2 rot-syvel y)))
        (set! (-> arg2 rot-syvel z) (* 5.0 (-> arg2 rot-syvel z)))
        )
      (else
        (set! (-> arg2 rot-syvel x) (* 6.0 (-> arg2 rot-syvel x)))
        (set! (-> arg2 rot-syvel y) (* 6.0 (-> arg2 rot-syvel y)))
        (set! (-> arg2 rot-syvel z) (* 6.0 (-> arg2 rot-syvel z)))
        )
      )
    (quaternion-zxy! (-> arg2 rotvel3d) (-> arg2 rot-syvel))
    0
    (none)
    )
  )

(defmethod initialize sparticle-launch-control ((obj sparticle-launch-control) (arg0 sparticle-launch-group) (arg1 process))
  (let ((s5-0 0))
    (set! (-> obj group) arg0)
    (set! (-> obj proc) (the-as process-drawable arg1))
    (set! (-> obj local-clock) 0)
    (set! (-> obj fade) 1.0)
    (set! (-> obj matrix) 0)
    (set! (-> obj last-spawn-frame) (the-as int (+ (-> *display* real-frame-clock integral-frame-counter) -2)))
    (set! (-> obj last-spawn-time) 0)
    (if (logtest? (-> obj group flags) (sp-group-flag unk-4))
        (quaternion->matrix (-> obj origin) (-> (the-as process-drawable arg1) root quat))
        (matrix-identity! (-> obj origin))
        )
    (when (logtest? (-> arg0 flags) (sp-group-flag unk-6))
      (let ((f0-1 (-> arg0 rotate-x))
            (f1-0 (-> arg0 rotate-y))
            (f2-0 (-> arg0 rotate-z))
            (t9-2 matrix-rotate-xyz!)
            (a0-3 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-1)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-2 a0-3 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> arg0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> arg0 scale-x))
        (set! (-> a1-4 y) (-> arg0 scale-y))
        (set! (-> a1-4 z) (-> arg0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    (dotimes (s3-0 (-> arg0 length))
      (let* ((a0-7 (-> arg0 launcher s3-0))
             (a1-6 (-> *part-id-table* (-> a0-7 launcher)))
             (v1-29 (-> obj data s5-0))
             )
        (when (nonzero? a1-6)
          (set! (-> v1-29 group-item) a0-7)
          (cond
            ((= (-> a1-6 type) sparticle-launcher)
             (set! (-> v1-29 accum) 0.0)
             (set! (-> v1-29 spawn-time) (the-as uint (+ (current-time) (seconds -100))))
             (set! (-> v1-29 offset) (the-as uint (-> a0-7 offset)))
             (set! (-> v1-29 randomize) (the-as uint 0))
             (cond
               ((logtest? (-> a0-7 flags) (sp-group-item-flag start-dead))
                (logclear! (-> v1-29 flags) (sp-launch-state-flags launcher-active))
                (set! (-> v1-29 center) #f)
                (set! (-> v1-29 sprite3d) #f)
                (set! (-> v1-29 sprite) #f)
                )
               (else
                 (logior! (-> v1-29 flags) (sp-launch-state-flags launcher-active))
                 (set! (-> v1-29 center) (-> obj origin trans))
                 (set! (-> v1-29 sprite3d) #f)
                 (set! (-> v1-29 sprite) #f)
                 )
               )
             (+! s5-0 1)
             )
            (else
              (format 0 "initialize called with non-particle-launcher~%")
              )
            )
          )
        )
      )
    (set! (-> obj length) s5-0)
    )
  0
  (none)
  )

;; WARN: Return type mismatch object vs sparticle-launch-control.
(defmethod create-launch-control sparticle-launch-group ((obj sparticle-launch-group) (arg0 process))
  (let ((gp-0 (the-as object (new 'process 'sparticle-launch-control (-> obj length)))))
    (when (zero? (the-as sparticle-launch-control gp-0))
      (go process-drawable-art-error "memory")
      (set! gp-0 0)
      (goto cfg-4)
      )
    (initialize (the-as sparticle-launch-control gp-0) obj arg0)
    (label cfg-4)
    (the-as sparticle-launch-control gp-0)
    )
  )

(defmethod kill-and-free-particles sparticle-launch-control ((obj sparticle-launch-control))
  (countdown (v1-0 (-> obj length))
    (let ((a0-4 (-> obj data v1-0)))
      (logclear! (-> a0-4 flags) (sp-launch-state-flags particles-active))
      )
    )
  (set! (-> obj local-clock) 0)
  (set! (-> obj fade) 1.0)
  (kill-all-particles-with-key obj)
  (if (> (-> obj matrix) 0)
      (sprite-release-user-hvdf (-> obj matrix))
      )
  0
  (none)
  )

(defmethod kill-particles sparticle-launch-control ((obj sparticle-launch-control))
  (kill-all-particles-with-key obj)
  0
  (none)
  )

(defmethod is-visible? sparticle-launch-control ((obj sparticle-launch-control) (arg0 vector))
  (let* ((v1-0 (-> obj group))
         (f0-0 (-> v1-0 bounds r))
         )
    (cond
      ((= f0-0 0.0)
       #t
       )
      ((nonzero? (-> obj matrix))
       #t
       )
      (else
        (let ((s5-1 (vector+! (new 'stack-no-clear 'vector) arg0 (the-as vector (-> v1-0 bounds)))))
          (set! (-> s5-1 w) f0-0)
          (when (or *display-sprite-marks* *display-sprite-spheres* (and *display-actor-vis* (= (-> obj proc) *debug-actor*)))
            (add-debug-sphere
              *display-sprite-spheres*
              (bucket-id debug2)
              s5-1
              (-> s5-1 w)
              (new 'static 'rgba :g #xff :a #x80)
              )
            (add-debug-matrix *display-sprite-marks* (bucket-id debug2) (-> obj origin) (meters 2))
            )
          ;; can we see it?
          (#if (not PC_PORT)
              (sphere-in-view-frustum? (the-as sphere s5-1))
              (if (-> *pc-settings* ps2-parts?)
                  ;; pc port : launchers have larger bsphere if you have ps2 parts off
                  (sphere-in-view-frustum? (the-as sphere s5-1))
                  (sphere-in-view-frustum? (the-as sphere (begin (*! (-> s5-1 w) 4.0) s5-1)))
                  )
              )
          )
        )
      )
    )
  )

(defmethod spawn-with-matrix sparticle-launch-control ((obj sparticle-launch-control) (arg0 matrix))
  (let* ((a2-0 (-> obj origin))
         (a3-0 arg0)
         (v1-0 (-> a3-0 vector 0 quad))
         (a0-1 (-> a3-0 vector 1 quad))
         (a1-1 (-> a3-0 vector 2 quad))
         (a3-1 (-> a3-0 trans quad))
         )
    (set! (-> a2-0 vector 0 quad) v1-0)
    (set! (-> a2-0 vector 1 quad) a0-1)
    (set! (-> a2-0 vector 2 quad) a1-1)
    (set! (-> a2-0 trans quad) a3-1)
    )
  (let ((s4-0 (-> obj group)))
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-6))
      (let ((f0-0 (-> s4-0 rotate-x))
            (f1-0 (-> s4-0 rotate-y))
            (f2-0 (-> s4-0 rotate-z))
            (t9-0 matrix-rotate-xyz!)
            (a0-2 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-0)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-0 a0-2 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> s4-0 scale-x))
        (set! (-> a1-4 y) (-> s4-0 scale-y))
        (set! (-> a1-4 z) (-> s4-0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    )
  (spawn obj (-> arg0 trans))
  (none)
  )

(defmethod spawn-with-cspace sparticle-launch-control ((obj sparticle-launch-control) (arg0 cspace))
  (let* ((v1-0 (-> obj origin))
         (a3-0 (-> arg0 bone transform))
         (a0-2 (-> a3-0 vector 0 quad))
         (a1-1 (-> a3-0 vector 1 quad))
         (a2-0 (-> a3-0 vector 2 quad))
         (a3-1 (-> a3-0 trans quad))
         )
    (set! (-> v1-0 vector 0 quad) a0-2)
    (set! (-> v1-0 vector 1 quad) a1-1)
    (set! (-> v1-0 vector 2 quad) a2-0)
    (set! (-> v1-0 trans quad) a3-1)
    )
  (let ((s4-0 (-> obj group)))
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-6))
      (let ((f0-0 (-> s4-0 rotate-x))
            (f1-0 (-> s4-0 rotate-y))
            (f2-0 (-> s4-0 rotate-z))
            (t9-0 matrix-rotate-xyz!)
            (a0-3 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-0)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-0 a0-3 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> s4-0 scale-x))
        (set! (-> a1-4 y) (-> s4-0 scale-y))
        (set! (-> a1-4 z) (-> s4-0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    )
  (spawn obj (vector<-cspace! (-> obj origin trans) arg0))
  (none)
  )

;; WARN: Function (method 11 sparticle-launch-control) has a return type of none, but the expression builder found a return statement.
(defmethod spawn sparticle-launch-control ((obj sparticle-launch-control) (arg0 vector))
  (with-pp
    (set! (-> obj origin trans quad) (-> arg0 quad))
    (if (not (or (is-visible? obj arg0) (logtest? (-> obj group flags) (sp-group-flag always-draw screen-space))))
        (return 0)
        )
    (let ((s4-0 (the-as int (current-time)))
          (s5-0 (-> obj last-spawn-time))
          )
      (let ((v1-10 (-> *display* real-frame-clock integral-frame-counter)))
        (if (!= v1-10 (+ (-> obj last-spawn-frame) 1))
            (set! s5-0 (the-as int (- (the-as time-frame s4-0) (logand (the-as int (-> pp clock sparticle-data x)) 255))))
            )
        )
      (set! (-> obj last-spawn-frame) (the-as int (-> *display* real-frame-clock integral-frame-counter)))
      (set! (-> obj last-spawn-time) s4-0)
      (when (logtest? (-> obj group flags) (sp-group-flag use-local-clock))
        (set! s5-0 (-> obj local-clock))
        (+! (-> obj local-clock) (logand (the-as int (-> pp clock sparticle-data x)) 255))
        (set! s4-0 (-> obj local-clock))
        )
      (let* ((f30-0 (vector-vector-distance arg0 (math-camera-pos)))
             (v1-26 1)
             (a0-13 *time-of-day*)
             (s3-1 (ash v1-26 (if a0-13
                                  (-> a0-13 0 hours)
                                  0
                                  )
                        )
                   )
             )
        (if (nonzero? (-> obj matrix))
            (set! f30-0 0.0)
            )

        ;; if we have ps2 particles off, say we're at the camera
        (with-pc
          (if (not (-> *pc-settings* ps2-parts?))
              (set! f30-0 0.0)))

        (let ((s2-1 (-> obj length)))
          (b! #t cfg-95 :delay (nop!))
          (label cfg-19)
          (+! s2-1 -1)
          (let* ((a3-0 (-> obj data s2-1))
                 (v1-33 (-> a3-0 group-item))
                 (a1-4 (-> *part-id-table* (-> v1-33 launcher)))
                 )
            (b!
              (not (and a1-4 (nonzero? a1-4) (logtest? (-> a3-0 flags) (sp-launch-state-flags launcher-active))))
              cfg-95
              :delay (empty-form)
              )
            (let* ((f1-3 (if (!= (-> v1-33 falloff-to) 0.0)
                             (- 1.0 (/ f30-0 (-> v1-33 falloff-to)))
                             1.0
                             )
                         )
                   (f0-5 f1-3)
                   )
              (let ((a0-25 sparticle-launcher))
                (b! (!= (-> a1-4 type) a0-25) cfg-94 :delay (nop!))
                )
              (b! (not (logtest? (-> v1-33 flags) (sp-group-item-flag launch-asap))) cfg-42 :delay (nop!))
              (when (not (logtest? (-> a3-0 flags) (sp-launch-state-flags particles-active)))
                (set! (-> a3-0 spawn-time) (the-as uint s4-0))
                (logior! (-> a3-0 flags) (sp-launch-state-flags particles-active))
                (when (< 0.0 f0-5)
                  (b! (not (logtest? (-> v1-33 flags) (sp-group-item-flag bit7))) cfg-37 :delay (nop!))
                  (let ((t9-3 sp-launch-particles-var))
                    (b! (not (logtest? (-> v1-33 flags) (sp-group-item-flag is-3d))) cfg-35 :delay (nop!))
                    (let ((a0-36 *sp-particle-system-3d*))
                      (b! #t cfg-36 :delay (nop!))
                      (label cfg-35)
                      (set! a0-36 *sp-particle-system-2d*)
                      (label cfg-36)
                      (t9-3 a0-36 a1-4 (-> obj origin) a3-0 obj f0-5)
                      )
                    )
                  (b! #t cfg-41 :delay (nop!))
                  (label cfg-37)
                  (let ((t9-4 sp-launch-particles-var)
                        (a0-38 (if (logtest? (-> v1-33 flags) (sp-group-item-flag is-3d))
                                   *sp-particle-system-3d*
                                   *sp-particle-system-2d*
                                   )
                               )
                        (a2-4 *launch-matrix*)
                        )
                    (set! (-> a2-4 trans quad) (-> a3-0 center quad))
                    (t9-4 a0-38 a1-4 a2-4 a3-0 obj f0-5)
                    )
                  )
                )
              (label cfg-41)
              (b! #t cfg-93 :delay (nop!))
              (label cfg-42)
              (when (or (logtest? s3-1 (-> v1-33 hour-mask))
                        (not (or (= (-> v1-33 fade-after) 0.0) (< f30-0 (-> v1-33 fade-after))))
                        )
                0
                (goto cfg-93)
                )
              (b! (nonzero? (-> v1-33 period)) cfg-59 :delay (empty-form))
              (if (not (logtest? (-> v1-33 flags) (sp-group-item-flag bit6)))
                  (set! f0-5 (* 0.2 (the float (- s4-0 s5-0)) f0-5))
                  )
              (b! #t cfg-81 :delay (nop!))
              (label cfg-59)
              0
              0
              (let* ((a2-5 (-> v1-33 length))
                     (a0-57 (-> v1-33 period))
                     (t0-10 (mod (+ (- s5-0 (the-as int (-> obj data s2-1 offset))) a0-57) (the-as int a0-57)))
                     (a0-58 (mod (the-as uint (+ (- s4-0 (the-as int (-> obj data s2-1 offset))) a0-57)) a0-57))
                     )
                (set! f0-5 (cond
                             ((and (< t0-10 (the-as int a2-5)) (< (the-as int a0-58) (the-as int a2-5)))
                              (* 0.2 (the float (- s4-0 s5-0)) f0-5)
                              )
                             ((and (< t0-10 (the-as int a2-5)) (>= (the-as int a0-58) (the-as int a2-5)))
                              (* 0.2 (the float (- a2-5 (the-as uint t0-10))) f0-5)
                              )
                             ((and (>= t0-10 (the-as int a2-5)) (< (the-as int a0-58) (the-as int a2-5)))
                              (* 0.2 (the float a0-58) f0-5)
                              )
                             (else
                               (when (not (logtest? (-> v1-33 flags) (sp-group-item-flag bit1)))
                                 0
                                 (goto cfg-93)
                                 )
                               (when (< (the-as uint (- s4-0 (the-as int (-> obj data s2-1 spawn-time)))) (-> v1-33 period))
                                 0
                                 (goto cfg-93)
                                 )
                               (set! (-> obj data s2-1 offset) (- (-> v1-33 period) a0-58))
                               (* 0.2 (the float (- s4-0 s5-0)) f0-5)
                               )
                             )
                      )
                )
              (label cfg-81)
              (set! (-> a3-0 spawn-time) (the-as uint s4-0))
              (logior! (-> a3-0 flags) (sp-launch-state-flags particles-active))
              (when (< 0.0 f0-5)
                (if (logtest? (-> v1-33 flags) (sp-group-item-flag bit6))
                    (set! f0-5 f1-3)
                    )
                (cond
                  ((logtest? (-> v1-33 flags) (sp-group-item-flag bit7))
                   (sp-launch-particles-var
                     (if (logtest? (-> v1-33 flags) (sp-group-item-flag is-3d))
                         *sp-particle-system-3d*
                         *sp-particle-system-2d*
                         )
                     a1-4
                     (-> obj origin)
                     a3-0
                     obj
                     f0-5
                     )
                   )
                  (else
                    (let ((t9-6 sp-launch-particles-var)
                          (a0-83 (if (logtest? (-> v1-33 flags) (sp-group-item-flag is-3d))
                                     *sp-particle-system-3d*
                                     *sp-particle-system-2d*
                                     )
                                 )
                          (a2-22 *launch-matrix*)
                          )
                      (set! (-> a2-22 trans quad) (-> a3-0 center quad))
                      (t9-6 a0-83 a1-4 a2-22 a3-0 obj f0-5)
                      )
                    )
                  )
                )
              )
            )
          (label cfg-93)
          (b! #t cfg-95 :delay (nop!))
          (label cfg-94)
          (format 0 "spawn called for non-sparticle-launcher~%")
          (label cfg-95)
          (b! (nonzero? s2-1) cfg-19 :delay (nop!))
          )
        )
      )
    0
    (none)
    )
  )


(defun execute-part-engine ()
  (local-vars (sv-96 sparticle-launcher) (sv-104 int))
  (let ((gp-0 *sp-particle-system-2d*))
    (let* ((s5-0 *part-engine*)
           (s4-0 *part-id-table*)
           (s3-0 (new 'stack-no-clear 'matrix))
           (s2-0 (new 'stack-no-clear 'vector))
           (v1-1 (-> s5-0 alive-list next0))
           (s1-0 (-> v1-1 next0))
           )
      (while (!= v1-1 (-> s5-0 alive-list-end))
        (let* ((a0-2 (the-as process-drawable (-> (the-as connection v1-1) param1)))
               (a1-0 (-> a0-2 draw))
               (s0-0 (the-as object (-> (the-as connection v1-1) param3)))
               )
          (when (and (logtest? (-> a1-0 status) (draw-control-status on-screen))
                     (< (-> a1-0 distance) (-> (the-as vector s0-0) w))
                     )
            (set! sv-96 (-> s4-0 (-> (the-as connection v1-1) param2)))
            (set! sv-104 (the-as int (-> (the-as connection v1-1) param0)))
            (when (nonzero? sv-96)
              (let ((a1-8 (-> a0-2 node-list data sv-104)))
                (let* ((v1-7 s3-0)
                       (t0-0 (-> a1-8 bone transform))
                       (a0-5 (-> t0-0 vector 0 quad))
                       (a2-2 (-> t0-0 vector 1 quad))
                       (a3-0 (-> t0-0 vector 2 quad))
                       (t0-1 (-> t0-0 trans quad))
                       )
                  (set! (-> v1-7 vector 0 quad) a0-5)
                  (set! (-> v1-7 vector 1 quad) a2-2)
                  (set! (-> v1-7 vector 2 quad) a3-0)
                  (set! (-> v1-7 trans quad) t0-1)
                  )
                (vector<-cspace! (-> s3-0 trans) a1-8)
                )
              (set! (-> s2-0 quad) (-> (the-as vector s0-0) quad))
              (set! (-> s2-0 w) 1.0)
              (vector-matrix*! (-> s3-0 trans) s2-0 s3-0)
              (sp-launch-particles-var
                gp-0
                sv-96
                s3-0
                (the-as sparticle-launch-state #f)
                (the-as sparticle-launch-control #f)
                1.0
                )
              )
            )
          )
        (set! v1-1 s1-0)
        (set! s1-0 (-> s1-0 next0))
        )
      )
    (let* ((s5-1 (camera-pos))
           (v1-12 1)
           (a0-14 *time-of-day*)
           (s4-1 (ash v1-12 (if a0-14
                                (-> a0-14 0 hours)
                                0
                                )
                      )
                 )
           )
      (dotimes (s3-1 (-> *level* length))
        (let ((v1-16 (-> *level* level s3-1)))
          (when (= (-> v1-16 status) 'active)
            (let ((s2-1 (-> v1-16 part-engine)))
              (when s2-1
                (countdown (s1-1 (-> s2-1 length))
                  (let ((s0-1 (-> s2-1 data s1-1)))
                    (when (and (or (zero? (-> s0-1 param3))
                                   (< (vector-vector-distance s5-1 (the-as vector (&-> s0-1 param0))) (the-as float (-> s0-1 param3)))
                                   )
                               (zero? (logand s4-1 (the-as int (-> s0-1 prev1))))
                               )
                      (let ((a1-14 (-> s0-1 next1))
                            (t9-5 sp-launch-particles-var)
                            (a0-25 gp-0)
                            (a2-5 *launch-matrix*)
                            )
                        (set! (-> a2-5 trans quad) (-> (the-as vector (&-> s0-1 param0)) quad))
                        (t9-5
                          a0-25
                          (the-as sparticle-launcher a1-14)
                          a2-5
                          (the-as sparticle-launch-state #f)
                          (the-as sparticle-launch-control #f)
                          1.0
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )
(defun sparticle-track-root ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-3 (-> arg1 key proc root trans)))
    (set! (-> arg2 x) (-> v1-3 x))
    (set! (-> arg2 y) (-> v1-3 y))
    (set! (-> arg2 z) (-> v1-3 z))
    )
  0
  (none)
  )

(defun sparticle-track-root-prim ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-4 (-> (the-as collide-shape (-> arg1 key proc root)) root-prim prim-core)))
    (set! (-> arg2 x) (-> v1-4 world-sphere x))
    (set! (-> arg2 y) (-> v1-4 world-sphere y))
    (set! (-> arg2 z) (-> v1-4 world-sphere z))
    )
  0
  (none)
  )

(defun sparticle-track-joint ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let* ((v1-1 (-> arg1 key proc))
         (a1-1 (the int (-> arg1 user-float)))
         (v1-3 (vector<-cspace! (new 'stack-no-clear 'vector) (-> v1-1 node-list data a1-1)))
         )
    (set! (-> arg2 x) (-> v1-3 x))
    (set! (-> arg2 y) (-> v1-3 y))
    (set! (-> arg2 z) (-> v1-3 z))
    )
  0
  (none)
  )

(defun sparticle-turn-to-vel ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-3d))
  (local-vars (v1-1 float) (v1-2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-axis-angle! gp-0 0.0 1.0 0.0 (+ 32768.0 (vector-y-angle (-> arg1 vel-sxvel))))
      (cond
        ((< (-> gp-0 w) 0.0)
         (.lvf vf1 (&-> arg2 qx-qy-qz-sy quad))
         (.lvf vf2 (&-> gp-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg2 qx-qy-qz-sy quad) vf1)
         (.mov v1-1 vf1)
         )
        (else
          (.lvf vf1 (&-> arg2 qx-qy-qz-sy quad))
          (.lvf vf2 (&-> gp-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg2 qx-qy-qz-sy quad) vf1)
          (.mov v1-2 vf1)
          )
        )
      )
    0
    (none)
    )
  )

(defun birth-func-copy-rot-color ((arg0 sparticle-system)
                         (arg1 sparticle-cpuinfo)
                         (arg2 sprite-vec-data-3d)
                         (arg3 sparticle-launcher)
                         (arg4 sparticle-launch-state)
                         )
  (local-vars (v1-5 float) (v1-6 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> arg4 sprite)))
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (let* ((v1-0 arg2)
               (f0-0 (-> v1-0 qx-qy-qz-sy x))
               (f1-0 (-> v1-0 qx-qy-qz-sy y))
               (f2-0 (-> v1-0 qx-qy-qz-sy z))
               )
          (set! (-> s4-0 x) f0-0)
          (set! (-> s4-0 y) f1-0)
          (set! (-> s4-0 z) f2-0)
          (set! (-> s4-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
          )
        (quaternion-rotate-y! s4-0 s4-0 (-> s5-0 sprite flag-rot-sy z))
        (let ((v1-4 arg2))
          (cond
            ((< (-> s4-0 w) 0.0)
             (.lvf vf1 (&-> v1-4 qx-qy-qz-sy quad))
             (.lvf vf2 (&-> s4-0 vec quad))
             (.sub.vf vf1 vf0 vf2 :mask #b111)
             (.svf (&-> v1-4 qx-qy-qz-sy quad) vf1)
             (.mov v1-5 vf1)
             )
            (else
              (.lvf vf1 (&-> v1-4 qx-qy-qz-sy quad))
              (.lvf vf2 (&-> s4-0 vec quad))
              (.add.vf vf1 vf0 vf2 :mask #b111)
              (.svf (&-> v1-4 qx-qy-qz-sy quad) vf1)
              (.mov v1-6 vf1)
              )
            )
          )
        )
      (set! (-> arg2 r-g-b-a x) (-> s5-0 sprite r-g-b-a x))
      (set! (-> arg2 r-g-b-a y) (-> s5-0 sprite r-g-b-a y))
      (set! (-> arg2 r-g-b-a z) (-> s5-0 sprite r-g-b-a z))
      )
    0
    (none)
    )
  )

(define *global-toggle* 0)

(defun birth-func-copy2-rot-color ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (local-vars (v1-18 float) (v1-19 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> arg4 sprite)))
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (let* ((v1-0 arg2)
               (f0-0 (-> v1-0 qx-qy-qz-sy x))
               (f1-0 (-> v1-0 qx-qy-qz-sy y))
               (f2-0 (-> v1-0 qx-qy-qz-sy z))
               )
          (set! (-> s4-0 x) f0-0)
          (set! (-> s4-0 y) f1-0)
          (set! (-> s4-0 z) f2-0)
          (set! (-> s4-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
          )
        (let ((a1-1 (new-stack-vector0)))
          (set! (-> a1-1 y) (-> s5-0 sprite flag-rot-sy z))
          (set! (-> a1-1 z) (if (logtest? *global-toggle* 1)
                                (the float (sar (shl (the int (- 16384.0 (-> s5-0 sprite x-y-z-sx w))) 48) 48))
                                (the float (sar (shl (the int (+ 16384.0 (-> s5-0 sprite x-y-z-sx w))) 48) 48))
                                )
                )
          (quaternion-zxy! s4-0 a1-1)
          )
        (let ((v1-17 arg2))
          (cond
            ((< (-> s4-0 w) 0.0)
             (.lvf vf1 (&-> v1-17 qx-qy-qz-sy quad))
             (.lvf vf2 (&-> s4-0 vec quad))
             (.sub.vf vf1 vf0 vf2 :mask #b111)
             (.svf (&-> v1-17 qx-qy-qz-sy quad) vf1)
             (.mov v1-18 vf1)
             )
            (else
              (.lvf vf1 (&-> v1-17 qx-qy-qz-sy quad))
              (.lvf vf2 (&-> s4-0 vec quad))
              (.add.vf vf1 vf0 vf2 :mask #b111)
              (.svf (&-> v1-17 qx-qy-qz-sy quad) vf1)
              (.mov v1-19 vf1)
              )
            )
          )
        )
      (set! (-> arg2 r-g-b-a x) (-> s5-0 sprite r-g-b-a x))
      (set! (-> arg2 r-g-b-a y) (-> s5-0 sprite r-g-b-a y))
      (set! (-> arg2 r-g-b-a z) (-> s5-0 sprite r-g-b-a z))
      )
    (set! *global-toggle* (+ *global-toggle* 1))
    0
    (none)
    )
  )

(defun birth-func-copy-omega-to-z ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (set! (-> arg2 qx-qy-qz-sy z) (+ -16384.0 (-> arg1 omega)))
  (set! (-> arg1 next-time) (-> arg4 sprite next-time))
  (set! (-> arg2 x-y-z-sx w) (* 163.85638 (the float (-> arg4 sprite next-time))))
  0
  (none)
  )

(defun birth-func-random-next-time ((arg0 sparticle-system)
                           (arg1 sparticle-cpuinfo)
                           (arg2 sprite-vec-data-3d)
                           (arg3 sparticle-launcher)
                           (arg4 sparticle-launch-state)
                           )
  (set! (-> arg1 next-time) (the-as uint (the int (rand-vu-float-range 0.0 (-> arg1 user-float)))))
  0
  (none)
  )

(defun sparticle-respawn-heights ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((gp-0 (the-as (array int32) (-> arg1 user-float))))
    (when (and (nonzero? gp-0)
               (or (and (< (-> arg1 vel-sxvel y) 0.0) (< (-> arg2 y) (the-as float (-> gp-0 1))))
                   (and (< 0.0 (-> arg1 vel-sxvel y)) (< (the-as float (-> gp-0 2)) (-> arg2 y)))
                   )
               )
      (sp-kill-particle arg0 arg1)
      (let ((s3-0 (+ (the-as int (-> gp-0 length)) -1)))
        (when (< 2 s3-0)
          (let ((s2-0 (new 'stack-no-clear 'vector))
                (s1-0 (if (zero? (-> gp-0 0))
                          *sp-particle-system-2d*
                          *sp-particle-system-3d*
                          )
                      )
                )
            (set-vector! s2-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
            (let ((s5-1 3))
              (while (>= s3-0 s5-1)
                (let ((t9-1 sp-launch-particles-var)
                      (a0-2 s1-0)
                      (a1-3 (-> *part-id-table* (-> gp-0 s5-1)))
                      (a2-1 *launch-matrix*)
                      )
                  (set! (-> a2-1 trans quad) (-> s2-0 quad))
                  (t9-1 a0-2 a1-3 a2-1 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                  )
                (+! s5-1 1)
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )


(defun sparticle-respawn-timer ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (<= (-> arg1 timer) 0)
    (let ((gp-0 (the-as object (-> arg1 user-float))))
      (when (nonzero? (the-as float gp-0))
        (sp-kill-particle arg0 arg1)
        (let ((s5-0 (+ (the-as int (-> (the-as (array int32) gp-0) length)) -1)))
          (when (< 2 s5-0)
            (let ((s4-0 (new 'stack-no-clear 'vector))
                  (s3-0 (if (zero? (-> (the-as (array int32) gp-0) 0))
                            *sp-particle-system-2d*
                            *sp-particle-system-3d*
                            )
                        )
                  )
              (set-vector! s4-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
              (let ((s2-1 3))
                (while (>= s5-0 s2-1)
                  (let ((t9-1 sp-launch-particles-var)
                        (a0-2 s3-0)
                        (a1-3 (-> *part-id-table* (-> (the-as (array int32) gp-0) s2-1)))
                        (a2-1 *launch-matrix*)
                        )
                    (set! (-> a2-1 trans quad) (-> s4-0 quad))
                    (t9-1 a0-2 a1-3 a2-1 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                    )
                  (+! s2-1 1)
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defun sparticle-texture-animate ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-0 (the-as (array int32) (-> arg1 user-float))))
    (when (nonzero? v1-0)
      (if (zero? (-> v1-0 2))
          (set! (-> v1-0 2) (-> arg1 timer))
          )
      (let* ((a0-6 (+ (-> v1-0 length) -3))
             (a2-1 (-> v1-0 0))
             (a3-0 (-> v1-0 2))
             (t0-1 (if (< (-> arg1 timer) 0)
                       (the-as int (-> *display* base-clock frame-counter))
                       (- a3-0 (-> arg1 timer))
                       )
                   )
             )
        (cond
          ((zero? (-> v1-0 1))
           (let ((v1-2 (-> v1-0 (+ (max 0 (min (+ (/ t0-1 a2-1) (-> arg1 user1-int16)) (+ a0-6 -1))) 3))))
             (if (nonzero? v1-2)
                 (particle-adgif-callback (-> arg1 adgif) (the-as texture-id v1-2))
                 )
             )
           )
          (else
            (let ((v1-4 (-> v1-0 (+ (mod (max 0 (+ (/ t0-1 a2-1) (-> arg1 user1-int16))) a0-6) 3))))
              (if (nonzero? v1-4)
                  (particle-adgif-callback (-> arg1 adgif) (the-as texture-id v1-4))
                  )
              )
            )
          )
        )
      )
    )
  (none)
  )

;; TODO: vf1/vf2 get set from somewhere...
(defun sparticle-texture-day-night ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-2d))
  (local-vars
    (v1-9 uint128)
    (v1-10 uint128)
    (v1-13 uint128)
    (v1-14 uint128)
    (v1-23 uint128)
    (v1-24 uint128)
    (v1-27 uint128)
    (v1-28 uint128)
    (v1-33 float)
    (a0-5 float)
    (a0-11 float)
    (t7-0 uint) ;; changed
    (t7-3 uint) ;; changed
    (s3-0 float)
    (s4-0 float)
    )
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         )
    (let ((s2-0 (the-as object (-> arg1 user-float))))
      (when (nonzero? (the-as float s2-0))
        (let* ((v1-1 *time-of-day*)
               (s1-0 (if v1-1
                         (-> v1-1 0 hours)
                         0
                         )
                     )
               (f0-0 (rand-vu))
               )
          (.mov s4-0 vf1)
          (.mov s3-0 vf2)
          (cond
            ((or (< s1-0 6) (< 18 s1-0))
             (let ((a1-1 (-> (the-as (array int32) s2-0) 7)))
               (when (nonzero? a1-1)
                 (let ((v1-6 f0-0))
                   (.mov vf2 v1-6)
                   )
                 (let ((v1-8 (the-as uint128 (make-u128 0 (-> (the-as (array int32) s2-0) 9)))))
                   (.pextlb v1-9 0 v1-8)
                   )
                 (.pextlb v1-10 0 v1-9)
                 (.mov vf1 v1-10)
                 (.itof.vf vf1 vf1)
                 (.mul.x.vf vf1 vf1 vf2)
                 (let ((v1-12 (the-as uint128 (make-u128 0 (-> (the-as (array int32) s2-0) 8)))))
                   (.pextlb v1-13 0 v1-12)
                   )
                 (.pextlb v1-14 0 v1-13)
                 (.mov vf2 v1-14)
                 (.itof.vf vf2 vf2)
                 (.add.vf vf1 vf1 vf2)
                 (let ((v1-15 (-> arg1 flags-s32)))
                   (when (nonzero? (-> (the-as (array int32) s2-0) 10))
                     (.lvf vf2 (&-> *time-of-day-context* current-prt-color quad))
                     (.mul.vf vf1 vf1 vf2)
                     (.mov a0-5 vf1)
                     )
                   (let ((v1-16 (logand v1-15 (sp-cpuinfo-flag-s32 sp-cpuinfo-flag-14))))
                     (.mov t7-0 vf1)
                     (let ((v1-17 (sar (the-as int v1-16) 14)))
                       (set! (-> arg2 r-g-b-a quad) (the-as uint128 (logior (logand t7-0 (the-as uint -2)) v1-17)))
                       )
                     )
                   )
                 (particle-adgif-callback (-> arg1 adgif) (the-as texture-id a1-1))
                 )
               )
             )
            (else
              (let ((a1-2 (-> (the-as (array int32) s2-0) 3)))
                (when (nonzero? a1-2)
                  (let ((v1-20 f0-0))
                    (.mov vf2 v1-20)
                    )
                  (let ((v1-22 (the-as uint128 (make-u128 0 (-> (the-as (array int32) s2-0) 5)))))
                    (.pextlb v1-23 0 v1-22)
                    )
                  (.pextlb v1-24 0 v1-23)
                  (.mov vf1 v1-24)
                  (.itof.vf vf1 vf1)
                  (.mul.x.vf vf1 vf1 vf2)
                  (let ((v1-26 (the-as uint128 (make-u128 0 (-> (the-as (array int32) s2-0) 4)))))
                    (.pextlb v1-27 0 v1-26)
                    )
                  (.pextlb v1-28 0 v1-27)
                  (.mov vf2 v1-28)
                  (.itof.vf vf2 vf2)
                  (.add.vf vf1 vf1 vf2)
                  (let ((v1-29 (-> arg1 flags-s32)))
                    (when (nonzero? (-> (the-as (array int32) s2-0) 6))
                      (.lvf vf2 (&-> *time-of-day-context* current-prt-color quad))
                      (.mul.vf vf1 vf1 vf2)
                      (.mov a0-11 vf1)
                      )
                    (let ((v1-30 (logand v1-29 (sp-cpuinfo-flag-s32 sp-cpuinfo-flag-14))))
                      (.mov t7-3 vf1)
                      (let ((v1-31 (sar (the-as int v1-30) 14)))
                        (set! (-> arg2 r-g-b-a quad) (the-as uint128 (logior (logand t7-3 (the-as uint -2)) v1-31)))
                        )
                      )
                    )
                  (particle-adgif-callback (-> arg1 adgif) (the-as texture-id a1-2))
                  )
                )
              )
            )
          )
        (.mov vf1 s4-0)
        (.mov vf2 s3-0)
        (.mov v1-33 vf2)
        )
      )
    (none)
    )
  )

(defun sparticle-mode-animate ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-2d))
  (let ((a0-1 (-> arg1 key))
        (v1-0 (the-as object (-> arg1 user-float)))
        )
    (when (nonzero? (the-as float v1-0))
      (let ((a1-2 (the-as (array uint32) (-> (the-as (array symbol) v1-0) 0 value))))
        (when (nonzero? a1-2)
          (let* ((a1-4 (the-as object (-> a1-2 (min (the-as int (+ (-> a0-1 state-mode 0) 1)) (+ (-> a1-2 length) -1)))))
                 (a0-8 (the-as
                         object
                         (-> (the-as (array int32) a1-4)
                             (+ (mod
                                  (the-as int (/ (-> a0-1 state-counter) (/ (the-as int (-> (the-as vector4w a1-4) w)) 8)))
                                  (+ (-> (the-as (pointer int32) a1-4) 0) -1)
                                  )
                                1
                                )
                             )
                         )
                       )
                 (a1-6 (/ (-> (the-as (array int32) v1-0) 1) 8))
                 (a2-14 (-> (the-as (pointer int64) a0-8) (/ a1-6 64)))
                 (a0-11 (logtest? a2-14 (ash 1 (logand a1-6 63))))
                 (s4-0 (if a0-11
                           (-> (the-as (pointer int32) v1-0) 6)
                           (-> (the-as (pointer int32) v1-0) 5)
                           )
                       )
                 )
            (if a0-11
                (set! (-> arg2 r-g-b-a x) (rand-vu-float-range 64.0 192.0))
                (set! (-> arg2 r-g-b-a x) (rand-vu-float-range 32.0 48.0))
                )
            (set! (-> arg2 r-g-b-a y) (-> arg2 r-g-b-a x))
            (set! (-> arg2 r-g-b-a z) (-> arg2 r-g-b-a x))
            (if (nonzero? s4-0)
                (particle-adgif-callback (-> arg1 adgif) (the-as texture-id s4-0))
                )
            )
          )
        )
      )
    )
  0
  (none)
  )

(def-mips2c sparticle-motion-blur (function sparticle-system sparticle-cpuinfo vector none))

(defun-debug sparticle-motion-blur-old ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-3d))
  "Unused"
  (let ((s2-0 (new 'stack-no-clear 'vector))
        (s5-0 (new 'stack-no-clear 'vector4w))
        (s3-0 (new 'stack-no-clear 'vector4w))
        )
    (set! (-> s2-0 x) (-> arg2 x-y-z-sx x))
    (set! (-> s2-0 y) (-> arg2 x-y-z-sx y))
    (set! (-> s2-0 z) (-> arg2 x-y-z-sx z))
    (set! (-> s2-0 w) 1.0)
    (when (and (or (!= (-> arg1 vel-sxvel x) 0.0) (!= (-> arg1 vel-sxvel y) 0.0) (!= (-> arg1 vel-sxvel z) 0.0))
               (transform-point-qword! s5-0 s2-0)
               )
      (+! (-> s2-0 x) (* 32.0 (-> arg1 vel-sxvel x)))
      (+! (-> s2-0 y) (* 32.0 (-> arg1 vel-sxvel y)))
      (+! (-> s2-0 z) (* 32.0 (-> arg1 vel-sxvel z)))
      (when (transform-point-qword! s3-0 s2-0)
        (let* ((f0-14 (the float (+ (-> s5-0 x) -28672)))
               (f1-10 (the float (+ (-> s5-0 y) -29440)))
               (f2-4 (the float (+ (-> s3-0 x) -28672)))
               (f3-1 (the float (+ (-> s3-0 y) -29440)))
               (f30-0 (- f2-4 f0-14))
               (f28-0 (- f3-1 f1-10))
               )
          (set! (-> arg2 qx-qy-qz-sy z) (+ -16384.0 (atan f30-0 f28-0)))
          (let ((f0-17 (-> arg1 omega)))
            (if (!= f0-17 0.0)
                (set! (-> arg2 x-y-z-sx w) (* (sqrtf (+ (* f30-0 f30-0) (* f28-0 f28-0)))
                                              f0-17
                                              (lerp-scale 3.0 0.25 (/ 1.0 (the float (-> s5-0 z))) 0.000001 0.00000014285715)
                                              )
                      )
                )
            )
          )
        (return (the-as object #f))
        )
      )
    )
  (if (!= (-> arg1 omega) 0.0)
      (set! (-> arg2 x-y-z-sx w) 0.0)
      )
  0
  )

(defun sparticle-set-conerot ((arg0 sparticle-launcher) (arg1 vector))
  (let ((s5-0 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-x)))
        (s4-0 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-y)))
        (v1-3 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-z)))
        )
    (set! (-> s5-0 initial-valuef) (-> arg1 x))
    (set! (-> s4-0 initial-valuef) (-> arg1 y))
    (set! (-> v1-3 initial-valuef) (-> arg1 z))
    )
  0
  (none)
  )

(defun sparticle-next-on-mode-1 ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (if (zero? (-> arg1 key state-mode 0))
      (set! (-> arg1 next-time)
            (the-as uint (* (max 1 (the-as int (-> *display* clock (-> arg1 clock-index) sparticle-data x))) 2))
            )
      )
  0.0
  )

(defun check-ground-bounce ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((f0-1 (+ (-> arg1 key origin trans y) (-> arg1 user-float))))
    (when (and (< (-> arg2 launchrot y) f0-1) (< (-> arg1 vel-sxvel y) 0.0))
      (set! (-> arg2 launchrot y) f0-1)
      (set! (-> arg1 vel-sxvel y) (* (-> arg1 vel-sxvel y) (- (rand-vu-float-range 0.6 0.8))))
      )
    )
  )

;; WARN: Return type mismatch symbol vs none.
(defun check-drop-group-center ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((f0-0 (-> arg1 key origin trans y)))
    (if (< (-> arg2 launchrot y) f0-0)
        (sp-kill-particle arg0 arg1)
        )
    )
  (none)
  )

(defun birth-func-y->userdata ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (+! (-> arg1 user-float) (-> arg2 vector 0 y))
  0
  (none)
  )

(defun birth-func-ocean-height ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (set! (-> arg2 vector 0 y) (+ (get-height *ocean* (the-as vector (-> arg2 vector)) #t) (-> arg1 user-float)))
  0
  (none)
  )

(defun birth-func-camera-orient ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (v1-0 float) (v1-1 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-1 (forward-up-nopitch->quaternion
                  (new 'stack-no-clear 'quaternion)
                  (-> (math-camera-matrix) vector 2)
                  *up-vector*
                  )
                )
          )
      (quaternion-rotate-x! s5-1 s5-1 16384.0)
      (cond
        ((< (-> s5-1 w) 0.0)
         (.lvf vf1 (&-> arg2 conerot quad))
         (.lvf vf2 (&-> s5-1 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg2 conerot quad) vf1)
         (.mov v1-0 vf1)
         )
        (else
          (.lvf vf1 (&-> arg2 conerot quad))
          (.lvf vf2 (&-> s5-1 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg2 conerot quad) vf1)
          (.mov v1-1 vf1)
          )
        )
      )
    0
    (none)
    )
  )

(define *particle-quat* (new 'static 'quaternion :w 1.0))

(defun birth-func-set-quat ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (a0-2 float) (a0-3 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a0-1 arg2)
          (v1-0 *particle-quat*)
          )
      (cond
        ((< (-> v1-0 w) 0.0)
         (.lvf vf1 (&-> a0-1 conerot quad))
         (.lvf vf2 (&-> v1-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> a0-1 conerot quad) vf1)
         (.mov a0-2 vf1)
         )
        (else
          (.lvf vf1 (&-> a0-1 conerot quad))
          (.lvf vf2 (&-> v1-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> a0-1 conerot quad) vf1)
          (.mov a0-3 vf1)
          )
        )
      )
    0
    (none)
    )
  )

(define *particle-vel* (new 'static 'vector :w 1.0))

(defun birth-func-set-vel ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((v1-0 *particle-vel*))
    (set! (-> arg1 vel-sxvel x) (-> v1-0 x))
    (set! (-> arg1 vel-sxvel y) (-> v1-0 y))
    (set! (-> arg1 vel-sxvel z) (-> v1-0 z))
    )
  0
  (none)
  )

(defun birth-func-texture-group ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (the-as (array int32) (-> arg1 user-float))))
    (when (nonzero? s5-0)
      (let* ((a0-1 (+ (-> s5-0 length) -3))
             (a1-1 (-> s5-0 (+ (rand-vu-int-count a0-1) 3)))
             )
        (if (nonzero? a1-1)
            (particle-adgif-callback (-> arg1 adgif) (the-as texture-id a1-1))
            )
        )
      )
    )
  0
  (none)
  )

;; WARN: new jak 2 until loop case, check carefully
(defmethod get-field-spec-by-id sparticle-launcher ((obj sparticle-launcher) (arg0 sp-field-id))
  "Returns the [[sp-field-init-spec]] that has the matching [[sp-field-id]]"
  (let ((v1-0 0))
    (until #f
      (let ((a2-2 (-> obj init-specs v1-0 field)))
        (cond
          ((= a2-2 arg0)
           (return (-> obj init-specs v1-0))
           )
          ((or (< (the-as uint arg0) (the-as uint a2-2)) (= a2-2 (sp-field-id spt-end)))
           (return (the-as sp-field-init-spec #f))
           )
          (else
            (+! v1-0 1)
            )
          )
        )
      )
    )
  (the-as sp-field-init-spec #f)
  )

(defmethod setup-user-array sparticle-launcher ((obj sparticle-launcher) (arg0 string))
  (let ((s5-0 (get-field-spec-by-id obj (sp-field-id spt-texture)))
        (v1-1 (lookup-texture-id-by-name arg0 (the-as string #f)))
        )
    (if s5-0
        (set! (-> s5-0 initial-valuef) (the-as float v1-1))
        )
    )
  (let ((v1-3 (get-field-spec-by-id obj (sp-field-id spt-userdata))))
    (when (and v1-3 (= (-> v1-3 flags) (sp-flag object)))
      (let ((gp-1 (the-as object (-> v1-3 initial-valuef))))
        (when (and (= (logand (the-as int gp-1) 7) 4)
                   (type? (the-as float gp-1) array)
                   (logtest? (-> (the-as (array int32) gp-1) 1) 128)
                   )
          (set! (-> (the-as (array int32) gp-1) 0) (/ (-> (the-as (array int32) gp-1) 0) 8))
          (set! (-> (the-as (array int32) gp-1) 1) (/ (logand (-> (the-as (array int32) gp-1) 1) 8) 8))
          (set! (-> (the-as (array int32) gp-1) 2) (/ (-> (the-as (array int32) gp-1) 2) 8))
          (set! (-> (the-as (array int32) gp-1) content-type) int32)
          (dotimes (s5-1 (+ (-> (the-as (array int32) gp-1) length) -3))
            (set! (-> (the-as (array int32) gp-1) (+ s5-1 3))
                  (the-as
                    int
                    (lookup-texture-id-by-name (the-as string (-> (the-as (array int32) gp-1) (+ s5-1 3))) (the-as string #f))
                    )
                  )
            )
          )
        )
      )
    )
  0
  (none)
  )
