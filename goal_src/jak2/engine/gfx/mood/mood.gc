;;-*-Lisp-*-
(in-package goal)

;; name: mood.gc
;; name in dgo: mood
;; dgos: ENGINE, GAME

;; og:ignore-form:update-mood-direction
;; og:ignore-form:(defmethod gen-lightning-and-thunder!
;; og:ignore-form:(defmethod init-weather!

(define-extern update-mood-direction (function mood-context-core3 mood-table float float))

;; DECOMP BEGINS

(defun palette-select-special ((arg0 mood-context-core3))
  "Use the `special` time-of-day mode palette"
  (dotimes (v1-0 8)
    (if (logtest? (-> *time-of-day-context* mode) (ash 16 v1-0))
        (set! (-> arg0 times v1-0 w) (-> *time-of-day-context* times v1-0 w))
        (set! (-> arg0 times v1-0 w) 0.0)
        )
    )
  #f
  )

(defun clear-mood-times ((arg0 mood-context))
  "Clear all of the mood times on the given context"
  (dotimes (v1-0 8)
    (set! (-> arg0 times v1-0 w) 0.0)
    )
  #f
  )

;; WARN: Return type mismatch int vs none.
;; WARN: Function may read a register that is not set: f31
(defun update-mood-itimes ((arg0 mood-context))
  (local-vars
    (r0-0 int)
    (r0-1 int)
    (r0-2 int)
    (v1-1 uint128)
    (v1-2 uint128)
    (v1-3 uint128)
    (v1-4 uint128)
    (a1-0 uint128)
    (a1-1 uint128)
    (a1-2 uint128)
    (a1-3 uint128)
    (a2-0 uint128)
    (a2-1 uint128)
    (a3-0 uint128)
    (a3-1 uint128)
    (t0-0 uint128)
    (t0-1 uint128)
    (t1-0 uint128)
    (t1-1 uint128)
    (t2-0 uint128)
    (t2-1 uint128)
    (t3-0 uint128)
    (t3-1 uint128)
    (f31-0 none)
    )
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         )
    (nop!)
    (nop!)
    *time-of-day-context*
    (nop!)
    (.lvf vf1 (&-> arg0 times 0 quad))
    (nop!)
    (.lvf vf2 (&-> arg0 times 1 quad))
    (.mul.w.vf vf1 vf1 vf1 :mask #b111)
    (.lvf vf3 (&-> arg0 times 2 quad))
    (.mul.w.vf vf2 vf2 vf2 :mask #b111)
    (.lvf vf4 (&-> arg0 times 3 quad))
    (.mul.w.vf vf3 vf3 vf3 :mask #b111)
    (.lvf vf5 (&-> arg0 times 4 quad))
    (.mul.w.vf vf4 vf4 vf4 :mask #b111)
    (.lvf vf6 (&-> arg0 times 5 quad))
    (.mul.w.vf vf5 vf5 vf5 :mask #b111)
    (.lvf vf7 (&-> arg0 times 6 quad))
    (.mul.w.vf vf6 vf6 vf6 :mask #b111)
    (.lvf vf8 (&-> arg0 times 7 quad))
    (.mul.w.vf vf7 vf7 vf7 :mask #b111)
    (nop!)
    (.mul.w.vf vf8 vf8 vf8 :mask #b111)
    (nop!)
    (vftoi12.xyzw vf1 vf1)
    (nop!)
    (vftoi12.xyzw vf2 vf2)
    (nop!)
    (vftoi12.xyzw vf3 vf3)
    (nop!)
    (vftoi12.xyzw vf4 vf4)
    (nop!)
    (vftoi12.xyzw vf5 vf5)
    (nop!)
    (vftoi12.xyzw vf6 vf6)
    (nop!)
    (vftoi12.xyzw vf7 vf7)
    (nop!)
    (vftoi12.xyzw vf8 vf8)
    (nop!)
    (.mov v1-1 vf1)
    (nop!)
    (.mov a1-0 vf2)
    (nop!)
    (.mov a2-0 vf3)
    (.pw.sra v1-2 v1-1 6)
    (.mov a3-0 vf4)
    (.pw.sra a1-1 a1-0 6)
    (.mov t0-0 vf5)
    (.pw.sra a2-1 a2-0 6)
    (.mov t1-0 vf6)
    (.pw.sra a3-1 a3-0 6)
    (.mov t2-0 vf7)
    (.pw.sra t0-1 t0-0 6)
    (.mov t3-0 vf8)
    (.pw.sra t1-1 t1-0 6)
    (.pw.sra t2-1 t2-0 6)
    (.mov r0-0 f31-0)
    (.pw.sra t3-1 t3-0 6)
    (.mov r0-1 f31-0)
    (.ppach v1-3 a1-1 v1-2)
    (.mov r0-2 f31-0)
    (.ppach a1-2 a3-1 a2-1)
    (set! (-> arg0 itimes 0 quad) v1-3)
    (.ppach v1-4 t1-1 t0-1)
    (set! (-> arg0 itimes 1 quad) a1-2)
    (.ppach a1-3 t3-1 t2-1)
    (set! (-> arg0 itimes 2 quad) v1-4)
    (nop!)
    (set! (-> arg0 itimes 3 quad) a1-3)
    0
    (none)
    )
  )

;; ERROR: Expression building failed: In update-mood-direction: Failed to match non-power of two case: t3-14

(defun update-mood-exterior ((arg0 mood-context-core3) (arg1 mood-table) (arg2 float) (arg3 int))
  (local-vars (v0-1 object) (sv-32 mood-color) (sv-48 mood-color) (sv-64 vector))
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      0
      0
      0.0
      (let* ((v1-3 (the int arg2))
             (f0-4 (- arg2 (the float v1-3)))
             (f1-3 (- 1.0 f0-4))
             (a0-6 (/ v1-3 24))
             (v1-7 (-> arg1 mood-interp-table hour (- v1-3 (* 24 a0-6))))
             (s3-0 (-> v1-7 snapshot1))
             (s2-0 (-> v1-7 snapshot2))
             (f30-0 (+ (* f1-3 (-> v1-7 morph-start)) (* f0-4 (-> v1-7 morph-end))))
             )
        (set! v0-1
              (cond
                ((and (-> *level* level arg3 bsp)
                      (nonzero? (-> *level* level arg3 bsp))
                      (not (-> *level* level arg3 bsp ambients))
                      )
                 (set! v0-1 (-> arg0 times))
                 (set! (-> (the-as (inline-array vector) v0-1) 0 x) 1.0)
                 (set! (-> (the-as (inline-array vector) v0-1) 0 y) 1.0)
                 (set! (-> (the-as (inline-array vector) v0-1) 0 z) 1.0)
                 (set! (-> (the-as (inline-array vector) v0-1) 0 w) 1.0)
                 v0-1
                 )
                ((= s3-0 s2-0)
                 (let ((a2-1 (-> arg1 mood-color-table data s3-0))
                       (v1-26 (-> arg0 times))
                       (a1-2 (-> arg0 times 1))
                       (a0-16 (-> arg0 light-group))
                       )
                   (set! (-> v1-26 0 quad) (-> a2-1 amb-color quad))
                   (set! (-> a1-2 quad) (-> a2-1 lgt-color quad))
                   (set! (-> arg0 times 2 quad) (-> a1-2 quad))
                   (set! (-> arg0 times 3 quad) (-> a1-2 quad))
                   (set! (-> arg0 times 4 quad) (-> a1-2 quad))
                   (set! (-> a0-16 0 ambi color quad) (-> v1-26 0 quad))
                   )
                 (set! (-> arg0 current-sky-color quad) (-> arg1 mood-sky-table data s3-0 quad))
                 (mem-copy! (the-as pointer (-> arg0 current-fog)) (the-as pointer (-> arg1 mood-fog-table data s3-0)) 48)
                 )
                (else
                  (set! sv-32 (-> arg1 mood-color-table data s3-0))
                  (set! sv-48 (-> arg1 mood-color-table data s2-0))
                  (let ((s1-0 (-> arg0 times)))
                    (set! sv-64 (-> arg0 times 1))
                    (let ((s0-0 (-> arg0 light-group)))
                      (vector4-lerp! (the-as vector s1-0) (-> sv-32 amb-color) (-> sv-48 amb-color) f30-0)
                      (vector4-lerp! sv-64 (-> sv-32 lgt-color) (-> sv-48 lgt-color) f30-0)
                      (set! (-> arg0 times 2 quad) (-> sv-64 quad))
                      (set! (-> arg0 times 3 quad) (-> sv-64 quad))
                      (set! (-> arg0 times 4 quad) (-> sv-64 quad))
                      (set! (-> s0-0 0 ambi color quad) (-> s1-0 0 quad))
                      )
                    )
                  (vector4-lerp!
                    (-> arg0 current-sky-color)
                    (-> arg1 mood-sky-table data s3-0)
                    (-> arg1 mood-sky-table data s2-0)
                    f30-0
                    )
                  (vector4-array-lerp!
                    (the-as (inline-array vector4) (-> arg0 current-fog))
                    (the-as (inline-array vector4) (-> arg1 mood-fog-table data s3-0))
                    (the-as (inline-array vector4) (-> arg1 mood-fog-table data s2-0))
                    f30-0
                    3
                    )
                  )
                )
              )
        )
      (set-vector! (-> arg0 current-prt-color) 0.0 0.0 0.0 0.0)
      (set-vector! (-> arg0 current-env-color) 0.0 0.0 0.0 0.0)
      (let ((f0-18 (-> *mood-control* lightning-flash))
            (a0-36 (-> *mood-control* lightning-index))
            )
        (when (and (!= f0-18 0.0) (< a0-36 4))
          (let ((v1-64 (new 'stack-no-clear 'vector))
                (a0-40 (-> arg0 times (+ a0-36 1)))
                )
            (set-vector! v1-64 f0-18 f0-18 f0-18 0.0)
            (vector+! a0-40 a0-40 v1-64)
            )
          )
        )
      (update-mood-direction arg0 arg1 arg2)
      )
    )
  )

(defun copy-mood-exterior ((arg0 mood-context))
  (set! (-> *time-of-day-context* exterior-level) (the-as basic #t))
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (let ((v1-2 (the-as object arg0))
            (a1-4 (the-as (inline-array vector) (-> *level* default-level mood-context)))
            )
        (dotimes (a2-0 31)
          (set! (-> (the-as (inline-array vector) v1-2) 0 quad) (-> a1-4 0 quad))
          (set! v1-2 (-> (the-as (inline-array vector) v1-2) 1))
          (set! a1-4 (the-as (inline-array vector) (-> a1-4 1)))
          )
        )
      (let ((v1-5 (-> arg0 times))
            (a0-2 (-> *level* default-level mood-context times))
            )
        (dotimes (a1-6 5)
          (set! (-> v1-5 0 quad) (-> a0-2 0 quad))
          (set! v1-5 (the-as (inline-array vector) (-> v1-5 1)))
          (set! a0-2 (the-as (inline-array vector) (-> a0-2 1)))
          )
        )
      #f
      )
    )
  )

;; WARN: Return type mismatch object vs none.
(defun copy-mood-exterior-ambi ((arg0 mood-context) (arg1 symbol))
  (cond
    ((< (the-as uint 8) (the-as uint (-> *time-of-day-context* mode)))
     (palette-select-special arg0)
     )
    (else
      (let ((v1-1 arg0)
            (a2-3 (the-as structure (-> *level* default-level mood-context)))
            )
        (dotimes (a3-0 31)
          (set! (-> v1-1 current-fog fog-color quad) (-> (the-as mood-context a2-3) current-fog fog-color quad))
          (set! v1-1 (the-as mood-context (-> v1-1 current-fog fog-dists)))
          (set! a2-3 (-> (the-as mood-context a2-3) current-fog fog-dists))
          )
        )
      (set! (-> arg0 times 0 quad) (-> *level* default-level mood-context times 0 quad))
      (when arg1
        (set! (-> arg0 times 1 quad) (-> *level* default-level mood-context times 1 quad))
        (set! (-> arg0 times 1 w) 1.0)
        )
      )
    )
  (none)
  )

(defun clear-mood-context ((arg0 mood-context))
  (let ((v1-0 arg0))
    (dotimes (a1-0 123)
      (set! (-> v1-0 data a1-0) (the-as uint128 0))
      )
    )
  (dotimes (v1-3 8)
    (set-vector! (-> arg0 times v1-3) 1.0 1.0 1.0 0.0)
    )
  #f
  )

(defun update-mood-interior ((arg0 mood-context))
  (let ((v1-0 (-> arg0 light-group)))
    (set! (-> arg0 current-fog fog-color quad) (-> *level* default-level mood-context current-fog fog-color quad))
    (set-vector! (-> arg0 current-fog fog-dists) 98304.0 3072000.0 255.0 150.0)
    (set-vector! (-> arg0 current-fog erase-color) 0.0 0.0 0.0 128.0)
    (set-vector! (-> arg0 current-prt-color) 0.0 0.0 0.0 0.0)
    (set-vector! (-> arg0 current-env-color) 96.0 96.0 96.0 128.0)
    (set-vector! (-> arg0 current-sky-color) 0.0 0.0 0.0 1.0)
    (let ((a0-2 (-> v1-0 0)))
      (set! (-> a0-2 dir0 direction x) 0.0)
      (set! (-> a0-2 dir0 direction y) 1.0)
      (set! (-> a0-2 dir0 direction z) 0.0)
      (set! (-> a0-2 dir0 direction w) 0.0)
      )
    (set-vector! (-> v1-0 0 dir0 color) 0.667 0.667 0.667 1.0)
    (set-vector! (-> v1-0 0 ambi color) 0.333 0.333 0.333 1.0)
    (set! (-> v1-0 0 dir0 extra x) 1.0)
    (set! (-> v1-0 0 dir1 extra x) 0.0)
    (set! (-> v1-0 0 dir2 extra x) 0.0)
    (let ((f0-35 1.0))
      (set! (-> v1-0 0 ambi extra x) f0-35)
      f0-35
      )
    )
  )

(deftype flames-state (structure)
  ((time   float  :offset-assert   0)
   (index  uint8  :offset-assert   4)
   (length uint8  :offset-assert   5)
   (height uint8  :offset-assert   6)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x7
  :flag-assert         #x900000007
  )


(defbehavior update-mood-flames time-of-day-proc ((arg0 mood-context) (arg1 int) (arg2 int) (arg3 int) (arg4 float) (arg5 float) (arg6 float))
  (let* ((gp-0 (the-as flames-state (+ (+ arg3 1840) (the-as int arg0))))
         (s4-0 (+ (-> gp-0 index) arg1))
         (f0-0 (-> gp-0 time))
         (v1-2 (-> gp-0 length))
         (s0-0 (-> gp-0 height))
         )
    (dotimes (a0-1 arg2)
      (set! (-> arg0 times (+ arg1 a0-1) w) arg4)
      )
    (cond
      ((>= f0-0 (the float v1-2))
       (set! (-> gp-0 index) (the-as uint (the int (rand-vu-float-range 0.0 (+ -0.01 (the float arg2))))))
       (set! (-> gp-0 time) 0.0)
       (set! (-> gp-0 length) (the-as uint (the int (* (rand-vu-float-range 7.0 15.0) arg6))))
       (set! (-> gp-0 height) (the-as uint (the int (rand-vu-float-range 0.0 255.0))))
       (let ((f0-11 arg4))
         (set! (-> arg0 times s4-0 w) f0-11)
         f0-11
         )
       )
      (else
        (let ((f0-14 (sin (* 32768.0 (/ f0-0 (the float v1-2))))))
          (set! (-> arg0 times s4-0 w) (+ (* (the float s0-0) f0-14 arg5) arg4))
          )
        (when (not (paused?))
          (let ((f0-19 (+ (-> gp-0 time) (if (= (-> *display* bg-clock clock-ratio) 0.0)
                                             1.0
                                             (-> self clock time-adjust-ratio)
                                             )
                          )
                       )
                )
            (set! (-> gp-0 time) f0-19)
            f0-19
            )
          )
        )
      )
    )
  )

(define *flash0*
  (the-as (array float)
    (new 'static 'boxed-array :type float 1.0 0.0 0.5 1.0 0.5 0.0 0.5 0.35 0.4 0.35 0.25 0.1 0.04)
    )
  )

(define *flash1*
  (the-as (array float) (new 'static 'boxed-array :type float 1.0 0.8 0.0 1.0 0.5 1.0 0.4 0.2 0.1))
  )

(define *flash2*
  (the-as (array float) (new 'static 'boxed-array :type float 1.0 0.9 0.8 0.7 0.0 0.0 1.0 0.0 1.0 0.5))
  )

(define *flash3*
  (the-as (array float)
    (new 'static 'boxed-array :type float 0.5 0.0 1.0 0.9 1.0 0.8 0.3 0.0 0.0 0.5 0.1 0.5 0.35)
    )
  )

(define *flash4*
  (the-as (array float)
    (new 'static 'boxed-array :type float 1.0 0.0 1.0 0.0 1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.5 0.4 0.3 0.2 0.1)
    )
  )

(define *flash5* (the-as (array float) (new 'static 'boxed-array :type float
                                         1.0
                                         0.0
                                         1.0
                                         0.0
                                         1.0
                                         0.95
                                         0.9
                                         0.85
                                         0.8
                                         0.75
                                         0.7
                                         0.65
                                         0.6
                                         0.55
                                         0.5
                                         0.45
                                         0.4
                                         0.35
                                         0.3
                                         0.25
                                         0.2
                                         0.5
                                         0.45
                                         0.4
                                         0.35
                                         0.3
                                         0.25
                                         0.2
                                         0.15
                                         0.1
                                         0.05
                                         )
                                       )
        )

(define *flash6*
  (the-as (array float)
    (new 'static 'boxed-array :type float 1.0 0.0 1.0 0.0 0.5 0.0 0.5 0.35 0.0 0.0 1.0 0.0 0.2 0.1)
    )
  )

(define *flash7*
  (the-as (array float)
    (new 'static 'boxed-array :type float 1.0 0.8 0.3 0.0 0.6 0.5 0.4 0.3 0.2 0.5 0.4 0.3 0.2 0.1)
    )
  )

(deftype light-state (structure)
  ((time float  :offset-assert   0)
   (fade float  :offset-assert   4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


(defun update-mood-light ((arg0 mood-context) (arg1 int) (arg2 int) (arg3 float) (arg4 float) (arg5 float) (arg6 float) (arg7 float))
  (with-pp
    (let ((gp-0 (the-as light-state (+ (+ arg2 1840) (the-as int arg0)))))
      (let* ((f0-0 512.0)
             (f1-1 (+ (-> gp-0 time) arg6))
             (f28-0 (* f0-0 (- f1-1 (* (the float (the int (/ f1-1 256.0))) 256.0))))
             (f0-3 (+ arg3 (* (cos f28-0) arg4)))
             (f30-1 (-> gp-0 fade))
             )
        (cond
          ((or (>= arg5 18.0) (>= 6.0 arg5))
           (cond
             ((< f28-0 3640.889)
              (set! (-> arg0 times arg1 w) f0-3)
              (set! (-> gp-0 fade) 1.0)
              )
             ((= f30-1 1.0)
              (set! (-> arg0 times arg1 w) f0-3)
              )
             )
           )
          ((= f30-1 1.0)
           (cond
             ((< f28-0 3640.889)
              (set! (-> arg0 times arg1 w) f0-3)
              (set! (-> gp-0 fade) 0.99)
              )
             (else
               (set! (-> arg0 times arg1 w) f0-3)
               )
             )
           )
          ((and (< f30-1 1.0) (< 0.0 f30-1))
           (set! (-> arg0 times arg1 w) f30-1)
           (when (not (paused?))
             (if (< 0.75 f30-1)
                 (set! (-> gp-0 fade) (- (-> gp-0 fade) (* 0.04 (-> pp clock time-adjust-ratio))))
                 (set! (-> gp-0 fade) (- (-> gp-0 fade) (* 0.02 (-> pp clock time-adjust-ratio))))
                 )
             )
           )
          (else
            (set! (-> gp-0 fade) 0.0)
            (set! (-> gp-0 time) 0.0)
            )
          )
        )
      (when (not (paused?))
        (let ((f0-15 (-> gp-0 time)))
          (set! arg7 (cond
                       ((= (-> *display* bg-clock clock-ratio) 0.0)
                        (empty)
                        arg7
                        )
                       (else
                         (* arg7 (-> pp clock time-adjust-ratio))
                         )
                       )
                )
          (let ((f0-16 (+ f0-15 arg7)))
            (set! (-> gp-0 time) f0-16)
            f0-16
            )
          )
        )
      )
    )
  )

(deftype lava-state (structure)
  ((lava float  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(defun update-mood-lava ((arg0 mood-context) (arg1 int) (arg2 int) (arg3 float) (arg4 float) (arg5 float) (arg6 float) (arg7 float))
  "Unused"
  (let ((gp-0 (the-as lava-state (+ (+ arg2 1840) (the-as int arg0)))))
    (let ((f0-1 (cos (-> gp-0 lava))))
      (set! (-> arg0 times arg1 w) (+ arg3 (* f0-1 arg4)))
      (set! (-> arg0 times (+ arg1 1) w) (+ arg3 (* (- f0-1) arg4)))
      )
    (when (not (paused?))
      (let ((f0-6 (+ (-> gp-0 lava) arg5)))
        (set! (-> gp-0 lava) f0-6)
        f0-6
        )
      )
    )
  )

(deftype flicker-state (structure)
  ((flicker-off uint8  :offset-assert   0)
   (flicker-on  uint8  :offset-assert   1)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )


;; WARN: Return type mismatch int vs none.
(defun update-mood-flicker ((arg0 mood-context) (arg1 int) (arg2 int))
  "Unused"
  (let ((gp-0 (the-as flicker-state (+ (+ arg2 1840) (the-as int arg0)))))
    (cond
      ((nonzero? (-> gp-0 flicker-on))
       (set! (-> arg0 times arg1 w) 1.0)
       (if (not (paused?))
           (+! (-> gp-0 flicker-on) -1)
           )
       )
      ((nonzero? (-> gp-0 flicker-off))
       (if (not (paused?))
           (+! (-> gp-0 flicker-off) -1)
           )
       )
      (else
        (set! (-> gp-0 flicker-on) (the-as uint (the int (rand-vu-float-range 2.0 20.0))))
        (if (zero? (the int (rand-vu-float-range 0.0 3.0)))
            (set! (-> gp-0 flicker-off) (the-as uint (the int (rand-vu-float-range 2.0 120.0))))
            (set! (-> gp-0 flicker-off) (the-as uint (the int (rand-vu-float-range 2.0 20.0))))
            )
        )
      )
    )
  (none)
  )

(deftype florescent-state (structure)
  ((value  float  :offset-assert   0)
   (delay  int8   :offset-assert   4)
   (delay2 int8   :offset-assert   5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )


(defun update-mood-florescent ((arg0 mood-context) (arg1 int) (arg2 int))
  "Unused"
  (let ((gp-0 (the-as florescent-state (+ (+ arg2 1840) (the-as int arg0)))))
    (set! (-> arg0 times arg1 w) (-> gp-0 value))
    (when (not (paused?))
      (cond
        ((zero? (-> gp-0 delay))
         (set! (-> gp-0 delay2) (the int (rand-vu-float-range 10.0 60.0)))
         (set! (-> gp-0 delay) (the int (rand-vu-float-range 60.0 120.0)))
         )
        (else
          (+! (-> gp-0 delay) -1)
          )
        )
      (cond
        ((>= (-> gp-0 delay2) (-> gp-0 delay))
         (let ((f0-5 (rand-vu-float-range 1.0 1.5)))
           (set! (-> gp-0 value) f0-5)
           f0-5
           )
         )
        ((< (-> gp-0 delay2) (-> gp-0 delay))
         (let ((f0-6 1.5))
           (set! (-> gp-0 value) f0-6)
           f0-6
           )
         )
        )
      )
    )
  )

(deftype electricity-state (structure)
  ((value float  :offset-assert   0)
   (scale float  :offset-assert   4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


;; WARN: Return type mismatch float vs none.
(defun update-mood-electricity ((arg0 mood-context) (arg1 int) (arg2 int) (arg3 float) (arg4 float))
  (let ((gp-0 (the-as electricity-state (+ (+ arg2 1840) (the-as int arg0)))))
    (set! (-> arg0 times arg1 w) (* (-> gp-0 value) (-> gp-0 scale)))
    (if (not (paused?))
        (set! (-> gp-0 value) (rand-vu-float-range arg3 arg4))
        )
    )
  (none)
  )

(deftype pulse-state (structure)
  ((pulse float  :offset-assert   0)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


;; WARN: Return type mismatch float vs none.
(defun update-mood-pulse ((arg0 mood-context) (arg1 int) (arg2 int) (arg3 float) (arg4 float) (arg5 float) (arg6 float))
  (let ((gp-0 (the-as pulse-state (+ (+ arg2 1840) (the-as int arg0)))))
    (set! (-> arg0 times arg1 w) (+ arg3 (* (cos (+ (-> gp-0 pulse) arg6)) arg4)))
    (if (not (paused?))
        (+! (-> gp-0 pulse) arg5)
        )
    )
  (none)
  )

(deftype strobe-state (structure)
  ((time float  :offset-assert   0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )


(defun update-mood-strobe ((arg0 mood-context) (arg1 int) (arg2 int) (arg3 int) (arg4 float))
  (let ((gp-0 (the-as strobe-state (+ (+ arg2 1840) (the-as int arg0)))))
    (let ((a2-1 (the int (-> gp-0 time))))
      (if (logtest? arg3 (ash 1 a2-1))
          (set! (-> arg0 times arg1 w) 1.0)
          (set! (-> arg0 times arg1 w) 0.3)
          )
      )
    (when (not (paused?))
      (let* ((f0-5 (+ (-> gp-0 time) arg4))
             (f0-6 (- f0-5 (* (the float (the int (/ f0-5 32.0))) 32.0)))
             )
        (set! (-> gp-0 time) f0-6)
        f0-6
        )
      )
    )
  )

(defun update-mood-caustics ((arg0 mood-context) (arg1 int) (arg2 float) (arg3 float) (arg4 float) (arg5 float))
  (let* ((f0-2 (sin (+ arg2 arg3))) (f0-4 (+ arg4 (* f0-2 arg5)))) (set! (-> arg0 times arg1 w) f0-4) f0-4)
  )

;; WARN: Return type mismatch int vs none.
(defmethod apply-mood-clouds-and-fog mood-control ((obj mood-control) (arg0 mood-control-work))
  (let ((v1-0 (-> obj mood-fog-table)))
    (dotimes (a0-1 24)
      (set! (-> v1-0 data-raw a0-1) (the-as uint128 0))
      )
    )
  (let ((s4-0 (-> obj mood-fog-table)))
    (let ((f30-0 (- 1.0 (-> arg0 interp cloud))))
      (when (!= f30-0 0.0)
        (let ((f0-4 (* (- 1.0 (-> arg0 interp fog)) f30-0))
              (a2-0 (-> obj fogs (-> arg0 index 0)))
              )
          (if (!= f0-4 0.0)
              (vector4-array-madd!
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) a2-0)
                f0-4
                24
                )
              )
          )
        (let ((f0-6 (* (-> arg0 interp fog) f30-0))
              (a2-1 (-> obj fogs (-> arg0 index 1)))
              )
          (if (!= f0-6 0.0)
              (vector4-array-madd!
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) a2-1)
                f0-6
                24
                )
              )
          )
        )
      )
    (let ((f30-1 (-> arg0 interp cloud)))
      (when (!= f30-1 0.0)
        (let ((f0-10 (* (- 1.0 (-> arg0 interp fog)) f30-1))
              (a2-2 (-> obj fogs (-> arg0 index 2)))
              )
          (if (!= f0-10 0.0)
              (vector4-array-madd!
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) a2-2)
                f0-10
                24
                )
              )
          )
        (let ((f0-12 (* (-> arg0 interp fog) f30-1))
              (a2-3 (-> obj fogs (-> arg0 index 3)))
              )
          (if (!= f0-12 0.0)
              (vector4-array-madd!
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) s4-0)
                (the-as (inline-array vector4) a2-3)
                f0-12
                24
                )
              )
          )
        )
      )
    )
  (let ((f0-13 (-> *time-of-day-context* fog-mult))
        (v1-29 (-> obj mood-fog-table))
        )
    (dotimes (a0-6 8)
      (set! (-> v1-29 data a0-6 fog-dists y) (* (-> v1-29 data a0-6 fog-dists y) f0-13))
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch int vs none.
(defmethod apply-mood-color mood-control ((obj mood-control) (arg0 mood-control-work))
  (let ((v1-0 (-> obj mood-color-table)))
    (dotimes (a0-1 16)
      (set! (-> v1-0 data-raw a0-1) (the-as uint128 0))
      )
    )
  (let ((s4-0 (-> obj mood-color-table)))
    (let ((f0-1 (- 1.0 (-> arg0 color-interp)))
          (a2-0 (-> obj colors (-> arg0 color-index 0)))
          )
      (if (!= f0-1 0.0)
          (vector4-array-madd!
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) a2-0)
            f0-1
            16
            )
          )
      )
    (let ((f0-2 (-> arg0 color-interp))
          (a2-1 (-> obj colors (-> arg0 color-index 1)))
          )
      (if (!= f0-2 0.0)
          (vector4-array-madd!
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) a2-1)
            f0-2
            16
            )
          )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch int vs none.
(defmethod apply-mood-channels mood-control ((obj mood-control) (arg0 mood-control-work))
  (let ((v1-0 (-> obj mood-channel-group)))
    (dotimes (a0-1 24)
      (set! (-> v1-0 data 0 vecs a0-1 quad) (the-as uint128 0))
      )
    )
  (let ((s4-0 (-> obj mood-channel-group)))
    (let ((f0-1 (- 1.0 (-> arg0 channel-interp)))
          (a2-0 (-> obj channels (-> arg0 channel-index 0)))
          )
      (if (!= f0-1 0.0)
          (vector4-array-madd!
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) a2-0)
            f0-1
            24
            )
          )
      )
    (let ((f0-2 (-> arg0 channel-interp))
          (a2-1 (-> obj channels (-> arg0 channel-index 1)))
          )
      (if (!= f0-2 0.0)
          (vector4-array-madd!
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) s4-0)
            (the-as (inline-array vector4) a2-1)
            f0-2
            24
            )
          )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch int vs none.
(defmethod adjust-num-clouds! mood-control ((obj mood-control) (arg0 mood-control-work))
  (let ((v1-0 (-> obj mood-clouds)))
    (set! (-> v1-0 cloud-min) 0.0)
    (set! (-> v1-0 cloud-max) 0.0)
    (let ((f0-3 (- 1.0 (-> arg0 cloud-interp)))
          (a2-4 (-> obj clouds (-> arg0 cloud-index 0)))
          )
      (when (!= f0-3 0.0)
        (set! (-> v1-0 cloud-min) (* (-> a2-4 cloud-min) f0-3))
        (set! (-> v1-0 cloud-max) (* (-> a2-4 cloud-max) f0-3))
        )
      )
    (let ((f0-5 (-> arg0 cloud-interp))
          (a0-2 (-> obj clouds (-> arg0 cloud-index 1)))
          )
      (when (!= f0-5 0.0)
        (+! (-> v1-0 cloud-min) (* (-> a0-2 cloud-min) f0-5))
        (+! (-> v1-0 cloud-max) (* (-> a0-2 cloud-max) f0-5))
        )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch int vs sound-id.
(defmethod play-or-stop-lightning! mood-control ((obj mood-control) (arg0 sound-spec) (arg1 vector))
  "Handles playing/stopping of the lightning sound
       - Plays the lightning sound if we are not loading and `lightning-id` is zero
       - Stops the lightning sound first if `lightning-id` is non-zero
       Returns the current value of `lightning-id`"
  (vector+! (new 'stack-no-clear 'vector) arg1 (math-camera-pos))
  (the-as sound-id (cond
                     ((or (load-in-progress? *level*) (movie?))
                      (the-as sound-id (when (nonzero? (-> obj lightning-id))
                                         (sound-stop (-> obj lightning-id))
                                         (set! (-> obj lightning-id) (new 'static 'sound-id))
                                         (new 'static 'sound-id)
                                         )
                              )
                      )
                     (else
                       (when (nonzero? (-> obj lightning-id))
                         (sound-stop (-> obj lightning-id))
                         (set! (-> obj lightning-id) (new 'static 'sound-id))
                         0
                         )
                       (let ((lightning-sound-id (sound-play-by-spec arg0 (new-sound-id) arg1)))
                         (set! (-> obj lightning-id) lightning-sound-id)
                         lightning-sound-id
                         )
                       )
                     )
          )
  )

;; WARN: disable def twice: 141. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.

;; WARN: Return type mismatch int vs none.

;; WARN: Return type mismatch int vs none.
(defmethod update-mood-weather! mood-control ((obj mood-control) (cloud-target float) (fog-target float) (cloud-speed float) (fog-speed float))
  "Set the `target-interp` and `speed-interp` for the clouds and fog
       If `*-speed` is 0.0, use the `*-target` args to set `current-interp`
       See [[mood-weather]]"
  (set! (-> obj target-interp cloud) cloud-target)
  (set! (-> obj target-interp fog) fog-target)
  (set! (-> obj speed-interp cloud) cloud-speed)
  (set! (-> obj speed-interp fog) fog-speed)
  (if (= cloud-speed 0.0)
      (set! (-> obj current-interp cloud) cloud-target)
      )
  (if (= fog-speed 0.0)
      (set! (-> obj current-interp fog) fog-target)
      )
  0
  (none)
  )

;; WARN: Return type mismatch int vs none.
(defmethod update-mood-range! mood-control ((obj mood-control) (min-cloud float) (max-cloud float) (min-fog float) (max-fog float))
  "Set the minimum and maximum ranges of clouds and fog
       See [[mood-range]]"
  (set! (-> obj range min-cloud) min-cloud)
  (set! (-> obj range max-cloud) max-cloud)
  (set! (-> obj range min-fog) min-fog)
  (set! (-> obj range max-fog) max-fog)
  0
  (none)
  )

;; WARN: Return type mismatch int vs none.
(defmethod set-time-for-random-weather! mood-control ((obj mood-control) (arg0 float) (arg1 float))
  "Set the `time-until-random`'s cloud and fog values
       See [[mood-weather]]"
  (set! (-> obj time-until-random cloud) arg0)
  (set! (-> obj time-until-random fog) arg1)
  0
  (none)
  )




