;;-*-Lisp-*-
(in-package goal)

;; name: shrubbery-h.gc
;; name in dgo: shrubbery-h
;; dgos: ENGINE, GAME

;; NOTE - for cam-update
(declare-type instance-shrub-work structure)
(define-extern *instance-shrub-work* instance-shrub-work)
(define-extern shrub-make-perspective-matrix (function matrix matrix matrix))

;; DECOMP BEGINS

(deftype billboard (drawable)
  ((flat  adgif-shader  :inline)
   )
  )


(deftype shrub-view-data (structure)
  ((data            uint128     3)
   (texture-giftag  gs-gif-tag  :inline :overlay-at (-> data 0))
   (consts          vector      :inline :overlay-at (-> data 1))
   (fog-clamp       vector      :inline :overlay-at (-> data 2))
   (tex-start-ptr   int32               :overlay-at (-> data 1))
   (gifbufsum       float               :overlay-at (-> data 1))
   (mtx-buf-ptr     int32               :overlay-at (-> consts y))
   (exp23           float               :overlay-at mtx-buf-ptr)
   (fog-0           float               :overlay-at (-> consts z))
   (fog-1           float               :overlay-at (-> consts w))
   (fog-min         float               :overlay-at (-> data 2))
   (fog-max         float               :overlay-at (-> fog-clamp y))
   )
  )


(deftype shrubbery (drawable)
  ((textures  (inline-array adgif-shader)  :overlay-at id)
   (header    qword                        :offset   8)
   (obj-qwc   uint8                        :offset  12)
   (vtx-qwc   uint8                        :offset  13)
   (col-qwc   uint8                        :offset  14)
   (stq-qwc   uint8                        :offset  15)
   (obj       uint32                       :overlay-at (-> bsphere data 0))
   (vtx       uint32                       :overlay-at (-> bsphere data 1))
   (col       uint32                       :overlay-at (-> bsphere data 2))
   (stq       uint32                       :overlay-at (-> bsphere data 3))
   )
  )


(deftype instance-shrubbery (instance)
  ((flat-normal  vector  :inline)
   (flat-hwidth  float   :overlay-at (-> flat-normal data 3))
   (color        uint32  :offset   8)
   )
  )


(deftype drawable-inline-array-instance-shrub (drawable-inline-array)
  ((data  instance-shrubbery  1 :inline)
   (pad   uint32)
   )
  )

(deftype drawable-tree-instance-shrub (drawable-tree)
  ((info          prototype-array-shrub-info  :offset   8)
   (colors-added  time-of-day-palette         :offset  12)
   )
  )

(deftype generic-shrub-fragment (drawable)
  ((textures  (inline-array adgif-shader)  :overlay-at id)
   (vtx-cnt   uint32                       :offset   8)
   (cnt-qwc   uint8                        :offset  12)
   (vtx-qwc   uint8                        :offset  13)
   (col-qwc   uint8                        :offset  14)
   (stq-qwc   uint8                        :offset  15)
   (cnt       uint32                       :overlay-at (-> bsphere data 0))
   (vtx       uint32                       :overlay-at (-> bsphere data 1))
   (col       uint32                       :overlay-at (-> bsphere data 2))
   (stq       uint32                       :overlay-at (-> bsphere data 3))
   )
  )


(deftype prototype-shrubbery (drawable-inline-array)
  ((data  shrubbery  1 :inline)
   (pad   uint32)
   )
  )

(deftype prototype-trans-shrubbery (prototype-shrubbery)
  ()
  )

(deftype prototype-generic-shrub (drawable-group)
  ()
  )

(deftype shrubbery-matrix (structure)
  ((mat    matrix  :inline)
   (color  qword   :inline)
   )
  )


;; WARN: Return type mismatch symbol vs none.
(defun shrubbery-login-post-texture ((arg0 shrubbery))
  (let* ((v1-1 (-> arg0 header data 0))
         (a1-1 (the-as object (+ (the-as uint (-> arg0 header)) (* (+ (-> arg0 header data 1) 1) 16))))
         (a2-5 (the-as object (+ (the-as int a1-1) (* v1-1 64))))
         (a3-0 (the-as object (-> arg0 textures)))
         )
    (dotimes (a0-1 (the-as int v1-1))
      (set! (-> (the-as qword a2-5) quad) (-> (the-as qword a3-0) quad))
      (let ((a2-6 (the-as object (+ (the-as int a2-5) 16)))
            (a3-1 (the-as object (&+ (the-as pointer a3-0) 16)))
            )
        (set! (-> (the-as qword a1-1) vector4w x) (the-as int (-> (the-as qword a3-1) data 0)))
        (set! (-> (the-as qword a1-1) vector4w y) (the-as int (-> (the-as qword a3-1) data 1)))
        (set! (-> (the-as qword a1-1) vector4w z) (the-as int (-> (the-as qword a3-1) data 2)))
        (set! a1-1 (+ (the-as int a1-1) 16))
        (let ((a3-2 (the-as object (&+ (the-as pointer a3-1) 16))))
          (dotimes (t0-4 3)
            (set! (-> (the-as qword a1-1) quad) (-> (the-as qword a3-2) quad))
            (set! a1-1 (+ (the-as int a1-1) 16))
            (set! a3-2 (&+ (the-as pointer a3-2) 16))
            )
          (set! (-> (the-as qword a2-6) quad) (-> (the-as qword a3-2) quad))
          (set! a2-5 (+ (the-as int a2-6) 16))
          (set! a3-0 (&+ (the-as pointer a3-2) 80))
          )
        )
      )
    )
  (none)
  )

(define *shrub-state* 0)

(deftype shrub-near-packet (structure)
  ((matrix-tmpl  dma-packet  :inline)
   (header-tmpl  dma-packet  :inline)
   (stq-tmpl     dma-packet  :inline)
   (color-tmpl   dma-packet  :inline)
   (vertex-tmpl  dma-packet  :inline)
   (mscal-tmpl   dma-packet  :inline)
   (init-tmpl    dma-packet  :inline)
   (init-data    qword       2 :inline)
   )
  )


(deftype instance-shrub-work (structure)
  ((dummy                            qword              3 :inline)
   (chaina                           qword              8 :inline)
   (chainb                           qword              8 :inline)
   (colors                           rgba               1024)
   (matrix-tmpl                      qword              20 :inline)
   (count-tmpl                       vector4w           20 :inline)
   (mscalf-tmpl                      dma-packet         :inline)
   (mscalf-ret-tmpl                  dma-packet         :inline)
   (adgif-tmpl                       dma-gif-packet     :inline)
   (billboard-tmpl                   dma-gif-packet     :inline)
   (billboard-const                  vector             :inline)
   (shrub-near-packets               shrub-near-packet  6 :inline)
   (dma-ref                          dma-packet         :inline)
   (dma-end                          dma-packet         :inline)
   (wind-const                       vector             :inline)
   (constants                        vector             :inline)
   (color-constant                   vector4w           :inline)
   (hmge-d                           vector             :inline)
   (hvdf-offset                      vector             :inline)
   (wind-force                       vector             :inline)
   (color                            vector             :inline)
   (bb-color                         vector             :inline)
   (min-dist                         vector             :inline)
   (temp-vec                         vector             :inline)
   (guard-plane                      plane              4 :inline)
   (plane                            plane              4 :inline)
   (last                             uint32             4)
   (next                             uint32             4)
   (count                            uint16             4)
   (mod-count                        uint16             4)
   (wind-vectors                     uint32)
   (instance-ptr                     uint32)
   (chain-ptr                        uint32)
   (chain-ptr-next                   uint32)
   (stack-ptr                        uint32)
   (bucket-ptr                       uint32)
   (src-ptr                          uint32)
   (to-spr                           uint32)
   (from-spr                         uint32)
   (shrub-count                      uint32)
   (pad                              uint32)
   (node                             uint32             6)
   (length                           uint32             6)
   (prototypes                       uint32)
   (pad2                             uint32)
   (start-bank                       uint8              20)
   (buffer-index                     uint32)
   (current-spr                      uint32)
   (current-mem                      uint32)
   (current-shrub-near-packet        uint32)
   (current-shrub-near-trans-packet  uint32)
   (pad3                             uint32)
   (dma-buffer                       basic)
   (near-last                        uint32)
   (near-next                        uint32)
   (near-count                       uint32)
   (near-trans-last                  uint32)
   (near-trans-next                  uint32)
   (near-trans-count                 uint32)
   (last-shrubs                      uint32)
   (chains                           uint32)
   (flags                            uint32)
   (node-count                       uint32)
   (inst-count                       uint32)
   (wait-from-spr                    uint32)
   (wait-to-spr                      uint32)
   (texture-dists                    uint32)
   )
  )


(deftype instance-shrub-dma (structure)
  ((instancea  uint128  325)
   (instanceb  uint128  325)
   (outa       uint128  128)
   (outb       uint128  128)
   )
  )

;; DECOMP ENDS
(define-extern draw-drawable-tree-instance-shrub (function drawable-tree-instance-shrub level none))
