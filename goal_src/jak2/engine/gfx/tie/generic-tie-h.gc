;;-*-Lisp-*-
(in-package goal)

;; name: generic-tie-h.gc
;; name in dgo: generic-tie-h
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(deftype generic-tie-instance (structure)
  ((matrix-tag  dma-packet :inline   :offset-assert   0)
   (matrix-data vector     6 :inline :offset-assert  16)
   (index-tag   dma-packet :inline   :offset-assert 112)
   (indices     uint8      224       :offset-assert 128)
   (end-tag     dma-packet :inline   :offset-assert 352)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

(deftype generic-tie-input (structure)
  ((palette-tag dma-packet :inline     :offset-assert   0)
   (palette     rgba       128         :offset-assert  16)
   (model-tag   dma-packet :inline     :offset-assert 528)
   (model       vector     146 :inline :offset-assert 544)
   (matrix-tag  dma-packet :inline     :offset-assert 2880)
   (matrix-data vector     6 :inline   :offset-assert 2896)
   (index-tag   dma-packet :inline     :offset-assert 2992)
   (indices     uint8      224         :offset-assert 3008)
   (end-tag     dma-packet :inline     :offset-assert 3232)
   )
  :method-count-assert 9
  :size-assert         #xcb0
  :flag-assert         #x900000cb0
  )

(deftype generic-tie-run-control (structure)
  ((skip-bp2    uint8  :offset-assert   0)
   (skip-ips    uint8  :offset-assert   1)
   (gifbuf-skip uint8  :offset-assert   2)
   (strips      uint8  :offset-assert   3)
   (target-bp1  uint8  :offset-assert   4)
   (target-bp2  uint8  :offset-assert   5)
   (target-ip1  uint8  :offset-assert   6)
   (target-ip2  uint8  :offset-assert   7)
   (target-bps  uint8  :offset-assert   8)
   (target-ips  uint8  :offset-assert   9)
   (is-generic  uint8  :offset-assert  10)
   (reserved    uint8  :offset-assert  11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype generic-tie-base-point (structure)
  ((data uint16  8 :offset-assert   0)
   (quad uint128   :offset          0)
   (x    int16     :offset          0)
   (y    int16     :offset          2)
   (z    int16     :offset          4)
   (d0   int16     :offset          6)
   (vtx  uint64    :offset          0)
   (u    int16     :offset          8)
   (v    int16     :offset         10)
   (tex  uint32    :offset          8)
   (w    int16     :offset         12)
   (d1   int16     :offset         14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-bps (structure)
  ((bp generic-tie-base-point 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype generic-tie-interp-point (structure)
  ((data   uint16 12 :offset-assert   0)
   (x      int16     :offset          0)
   (y      int16     :offset          2)
   (z      int16     :offset          4)
   (d0     int16     :offset          6)
   (vtx0   uint64    :offset          0)
   (dx     int16     :offset          8)
   (dy     int16     :offset         10)
   (dz     int16     :offset         12)
   (unused int16     :offset         14)
   (vtx1   uint64    :offset          8)
   (u      int16     :offset         16)
   (v      int16     :offset         18)
   (tex    uint32    :offset         16)
   (w      int16     :offset         20)
   (d1     int16     :offset         22)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(deftype generic-tie-ips (structure)
  ((ip generic-tie-interp-point 2 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-header (structure)
  ((effect              uint8              :offset-assert   0)
   (interp-table-size   uint8              :offset-assert   1)
   (num-bps             uint8              :offset-assert   2)
   (num-ips             uint8              :offset-assert   3)
   (tint-color          uint32             :offset-assert   4)
   (index-table-offset  uint16             :offset-assert   8)
   (kick-table-offset   uint16             :offset-assert  10)
   (normal-table-offset uint16             :offset-assert  12)
   (interp-table-offset uint16             :offset-assert  14)
   (gsf-header          gsf-header :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype generic-tie-matrix (structure)
  ((matrix matrix :inline :offset-assert   0)
   (morph  vector :inline :offset-assert  64)
   (fog    qword  :inline :offset-assert  80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

(deftype generic-tie-normal (structure)
  ((x     int8  :offset-assert   0)
   (y     int8  :offset-assert   1)
   (z     int8  :offset-assert   2)
   (dummy int8  :offset-assert   3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype generic-tie-control (structure)
  ((ptr-palette   uint32                   :offset-assert   0)
   (ptr-shaders   uint32                   :offset-assert   4)
   (ptr-runctrl   generic-tie-run-control  :offset-assert   8)
   (ptr-verts     uint32                   :offset-assert  12)
   (ptr-generic   generic-tie-header       :offset-assert  16)
   (ptr-dps       uint32                   :offset-assert  20)
   (ptr-kicks     uint32                   :offset-assert  24)
   (ptr-normals   uint32                   :offset-assert  28)
   (ptr-interp    uint32                   :offset-assert  32)
   (ptr-mtxs      generic-tie-matrix       :offset-assert  36)
   (ptr-cinds     uint32                   :offset-assert  40)
   (next-instance uint32                   :offset-assert  44)
   (next-model    uint32                   :offset-assert  48)
   (next-is-model uint32                   :offset-assert  52)
   (tie-type      uint32                   :offset-assert  56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

(deftype generic-tie-stats (structure)
  ((num-bps       uint32  :offset-assert   0)
   (num-ips       uint32  :offset-assert   4)
   (num-dps       uint32  :offset-assert   8)
   (num-shaders   uint32  :offset-assert  12)
   (num-models    uint32  :offset-assert  16)
   (num-instances uint32  :offset-assert  20)
   (num-waits     uint32  :offset-assert  24)
   (num-qwc       uint32  :offset-assert  28)
   (max-qwc       uint32  :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype generic-tie-calls (structure)
  ((generic-prepare-dma-double basic  :offset-assert   0)
   (generic-envmap-dproc       basic  :offset-assert   4)
   (generic-interp-dproc       basic  :offset-assert   8)
   (generic-no-light-dproc     basic  :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype generic-tie-shadow (structure)
  ((out-buf      gsf-buffer                :offset-assert   0)
   (cur-buf      uint32                    :offset-assert   4)
   (tie-type     int32                     :offset-assert   8)
   (ptr-inst     uint32                    :offset-assert  12)
   (ptr-buf      uint32                    :offset-assert  16)
   (inst-xor     int32                     :offset-assert  20)
   (end-of-chain uint32                    :offset-assert  24)
   (write-limit  uint32                    :offset-assert  28)
   (calls        generic-tie-calls :inline :offset-assert  32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype generic-tie-work (structure)
  ((control     generic-tie-control  :inline :offset-assert   0)
   (interp-job  generic-interp-job   :inline :offset-assert  60)
   (shadow      generic-tie-shadow   :inline :offset-assert  76)
   (input-a     generic-tie-input    :inline :offset-assert 128)
   (input-b     generic-tie-input    :inline :offset-assert 3376)
   (inst-buf    generic-tie-instance :inline :offset-assert 6624)
   (palette-buf rgba                 128     :offset-assert 6992)
   )
  :method-count-assert 9
  :size-assert         #x1d50
  :flag-assert         #x900001d50
  )
