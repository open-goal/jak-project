;;-*-Lisp-*-
(in-package goal)

;; name: display-h.gc
;; name in dgo: display-h
;; dgos: ENGINE, GAME

#|@file
At any point in time, there are 3 frames in progress:
- one frame is fully rendered and being drawn on the screen.
  this frame just sits in the frame buffer, and isn't tracked by the display system.
- one frame is being rendered
  (frame buffer is being written to by GS, VU1 sending tris to GS, VIF1 feeding VU1)
  this frame needs a DMA buffer that is full, and being read by VIF1
- one frame is being set up. The engine is running gameplay code and generating DMA data
  this frame also needs a DMA buffer, which is being filled up.
|#

;; DECOMP BEGINS

;; per-frame DMA buffers, timing, and profiling info.
(deftype display-frame (basic)
  ((buffer         dma-buffer                 11)
   (calc-buf       dma-buffer                 :overlay-at (-> buffer 1))
   (vu1-buf        dma-buffer                 :overlay-at (-> buffer 1))
   (debug-buf      dma-buffer                 :overlay-at (-> buffer 8))
   (global-buf     dma-buffer                 :overlay-at (-> buffer 9))
   (bucket-group   (inline-array dma-bucket)  :overlay-at (-> buffer 10))
   (profile-array  profile-array              :inline)
   (start-time     int64)
   (run-time       int64)
   )
  (:methods
    (new (symbol type) _type_)
    )
  )


(defmethod new display-frame ((allocation symbol) (type-to-make type))
  "Allocate and initialize a display frame. Does not set up dma buffers."
  (let ((gp-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> gp-0 calc-buf) (the-as dma-buffer 0))
    (set! (-> gp-0 global-buf) (the-as dma-buffer 0))
    (set! (-> gp-0 debug-buf) (the-as dma-buffer 0))
    ;; allocate profile buffers if debugging.
    (when *debug-segment*
      (set! (-> gp-0 profile-array data 0) (new 'debug 'profile-segment-array))
      (set! (-> gp-0 profile-array data 1) (new 'debug 'profile-segment-array))
      )
    gp-0
    )
  )

;; The display is the global state related to frame timing and double-buffering of frames.
;; it also holds the render enable mask.
(deftype display (basic)
  ((on-screen             int32) ;; frame index (0 or 1)
   (last-screen           int32) ;; frame index (0 or 1)
   (frames                display-frame  2) ;; per-frame dma/timing
   (bgcolor               gs-bgcolor) ;; GS setting
   (pmode                 gs-pmode) ;; GS setting
   (clock                 clock          13)
   (session-clock         clock          :overlay-at (-> clock 0))
   (game-clock            clock          :overlay-at (-> clock 1))
   (base-clock            clock          :overlay-at (-> clock 2))
   (real-clock            clock          :overlay-at (-> clock 3))
   (frame-clock           clock          :overlay-at (-> clock 4))
   (real-frame-clock      clock          :overlay-at (-> clock 5))
   (target-clock          clock          :overlay-at (-> clock 6))
   (entity-clock          clock          :overlay-at (-> clock 7))
   (part-clock            clock          :overlay-at (-> clock 8))
   (bg-clock              clock          :overlay-at (-> clock 9))
   (camera-clock          clock          :overlay-at (-> clock 10))
   (user0-clock           clock          :overlay-at (-> clock 11))
   (total-game-clock      clock          :overlay-at (-> clock 12))
   (time-factor           float)
   (dog-ratio             float)
   (vblank-start-time     int64          2)
   (total-run-time        int64)
   (run-half-speed        basic)
   (dog-count             float)
   (vu1-enable-user       vu1-renderer-mask)
   (vu1-enable-user-menu  vu1-renderer-mask)
   (force-sync            uint32)
   )
  (:methods
    (new (symbol type int int int int int) _type_)
    (set-time-ratios (_type_ float) float)
    )
  )

(defconstant DEFAULT_ALL_RENDERERS
  (vu1-renderer-mask
    sky ocean ocean-wave tfrag tie tie-envmap tie-scissor tie-envmap-scissor
    tie-vanish generic merc emerc shrubbery shrub-near billboard shrubbery-vanish
    tfrag-trans tie-scissor-trans tie-trans tie-envmap-trans tie-envmap-scissor-trans
    tfrag-water tie-scissor-water tie-water tie-envmap-water tie-envmap-scissor-water
    sprite shadow rn31 rn32 depth-cue
    )
  )

(define-extern set-display (function display display))

(defmethod new display ((allocation symbol) (type-to-make type) (arg0 int) (arg1 int) (arg2 int) (arg3 int) (arg4 int))
  (let ((gp-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set-display gp-0)
    (set! (-> gp-0 frames 0) (new 'global 'display-frame))
    (set! (-> gp-0 frames 1) (new 'global 'display-frame))
    (set! (-> gp-0 pmode) (new 'static 'gs-pmode :en1 #x1 :crtmd #x1 :mmod #x1 :slbg #x1))
    (set! (-> gp-0 run-half-speed) #f)
    (set! (-> gp-0 vu1-enable-user-menu) DEFAULT_ALL_RENDERERS)
    (set! (-> gp-0 vu1-enable-user) DEFAULT_ALL_RENDERERS)
    gp-0
    )
  )

;; optional functions to run before and after drawing.

(define *pre-draw-hook* (the-as (function object none) nothing))

(define *post-draw-hook* (the-as (function dma-buffer none) nothing))


(define-extern *display* display)

(defmacro current-frame ()
  `(-> *display* frames (-> *display* on-screen))
  )

(defmacro integral-current-time ()
  `(-> *display* integral-frame-counter)
  )

(defmacro real-current-time ()
  `(-> *display* real-frame-counter)
  )


;; debug stuff really
(defmacro get-screen-x (frac)
  `(the int (* ,frac 512)))

(defmacro get-screen-y (frac)
  `(the int (* ,frac 416)))
