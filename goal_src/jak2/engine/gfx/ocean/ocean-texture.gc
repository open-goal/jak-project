;;-*-Lisp-*-
(in-package goal)

;; name: ocean-texture.gc
;; name in dgo: ocean-texture
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(define ocean-texture-vu1-block (new 'static 'vu-function #|:length #x7c :qlength 62|#))

(defmethod ocean-texture-setup-constants ocean ((obj ocean) (arg0 ocean-texture-constants))
  (set! (-> arg0 giftag tag)
        (new 'static 'gif-tag64
          :nloop #x42
          :eop #x1
          :pre #x1
          :prim (new 'static 'gs-prim :prim (gs-prim-type tri-strip) :iip #x1 :tme #x1)
          :nreg #x3
          )
        )
  (set! (-> arg0 giftag regs)
        (new 'static 'gif-tag-regs :regs0 (gif-reg-id st) :regs1 (gif-reg-id rgbaq) :regs2 (gif-reg-id xyz2))
        )
  (set-vector! (-> arg0 buffers) 384 583 384 583)
  (set-vector! (-> arg0 dests) 782 881 782 881)
  (set-vector! (-> arg0 start) 0.0 0.0 1048575.94 0.0)
  (set-vector! (-> arg0 offsets) 4.0 8.0 12.0 16.0)
  (set-vector! (-> arg0 constants) 0.5 0.5 0.0 128.0)
  (set! (-> arg0 cam-nrm x) 0.0)
  (set! (-> arg0 cam-nrm y) 0.707)
  (set! (-> arg0 cam-nrm z) 0.707)
  (set! (-> arg0 cam-nrm w) 0.0)
  0
  (none)
  )

(defmethod ocean-texture-add-constants ocean ((obj ocean) (arg0 dma-buffer))
  (let* ((a2-0 7)
         (v1-0 arg0)
         (a1-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a1-1) dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc a2-0))
    (set! (-> (the-as dma-packet a1-1) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a1-1) vif1)
          (new 'static 'vif-tag :imm #x3d9 :cmd (vif-cmd unpack-v4-32) :num a2-0)
          )
    (set! (-> v1-0 base) (&+ (the-as pointer a1-1) 16))
    )
  (ocean-texture-setup-constants obj (the-as ocean-texture-constants (-> arg0 base)))
  (&+! (-> arg0 base) 112)
  0
  (none)
  )

(defmethod ocean-texture-add-envmap ocean ((obj ocean) (arg0 dma-buffer))
  (let ((v1-0 (the-as object (-> arg0 base))))
    (set! (-> (the-as (inline-array vector4w) v1-0) 0 quad) (-> obj adgif-tmpl dma-vif quad))
    (set! (-> (the-as (inline-array vector4w) v1-0) 1 quad) (-> obj adgif-tmpl quad 1))
    (let ((s4-0 (&+ (the-as pointer v1-0) 32)))
      (adgif-shader<-texture-simple!
        (the-as adgif-shader s4-0)
        (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #x475))
        )
      )
    )
  (&+! (-> arg0 base) 112)
  0
  (none)
  )

(defmethod ocean-texture-add-verts ocean ((obj ocean) (arg0 dma-buffer) (arg1 int))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :qwc #xc0 :id (dma-tag-id ref) :addr arg1))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a0-1) vif1)
          (new 'static 'vif-tag :imm #x8000 :num #xc0 :cmd (vif-cmd unpack-v4-32))
          )
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  0
  (none)
  )

(defmethod ocean-texture-add-verts-last ocean ((obj ocean) (arg0 dma-buffer) (arg1 int) (arg2 int))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :qwc #x80 :id (dma-tag-id ref) :addr arg1))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a0-1) vif1)
          (new 'static 'vif-tag :imm #x8000 :num #x80 :cmd (vif-cmd unpack-v4-32))
          )
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  (let* ((v1-1 arg0)
         (a0-3 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as dma-packet a0-3) dma) (new 'static 'dma-tag :qwc #x40 :id (dma-tag-id ref) :addr arg2))
    (set! (-> (the-as dma-packet a0-3) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a0-3) vif1)
          (new 'static 'vif-tag :imm #x8080 :num #x40 :cmd (vif-cmd unpack-v4-32))
          )
    (set! (-> v1-1 base) (&+ (the-as pointer a0-3) 16))
    )
  0
  (none)
  )

(defmethod ocean-texture-add-call-start ocean ((obj ocean) (arg0 dma-buffer))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1))
    (set! (-> (the-as dma-packet a0-1) vif1) (new 'static 'vif-tag :cmd (vif-cmd stmod)))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  0
  (none)
  )

(defmethod ocean-texture-add-call-rest ocean ((obj ocean) (arg0 dma-buffer))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :imm #x2 :cmd (vif-cmd mscalf) :msk #x1))
    (set! (-> (the-as dma-packet a0-1) vif1) (new 'static 'vif-tag :cmd (vif-cmd stmod)))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  0
  (none)
  )

(defmethod ocean-texture-add-call-done ocean ((obj ocean) (arg0 dma-buffer))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd mscalf) :msk #x1))
    (set! (-> (the-as dma-packet a0-1) vif1) (new 'static 'vif-tag :cmd (vif-cmd stmod)))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  0
  (none)
  )

(defmethod draw-ocean-texture ocean ((obj ocean) (arg0 dma-buffer) (arg1 int))
  (set-display-gs-state arg0 21 128 128 0 0)
  (ocean-texture-add-envmap obj arg0)
  (let* ((v1-2 arg0)
         (a0-3 (the-as object (-> v1-2 base)))
         )
    (set! (-> (the-as dma-packet a0-3) dma) (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-3) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-3) vif1) (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-2 base) (&+ (the-as pointer a0-3) 16))
    )
  (let* ((v1-3 arg0)
         (a0-5 (the-as object (-> v1-3 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-5) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x3))
    (set! (-> (the-as gs-gif-tag a0-5) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-3 base) (&+ (the-as pointer a0-5) 16))
    )
  (let* ((v1-4 arg0)
         (a0-7 (-> v1-4 base))
         )
    (set! (-> (the-as (pointer gs-test) a0-7) 0)
          (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          )
    (set! (-> (the-as (pointer gs-reg64) a0-7) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-alpha) a0-7) 2) (new 'static 'gs-alpha :b #x2 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) a0-7) 3) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex1) a0-7) 4) (new 'static 'gs-tex1))
    (set! (-> (the-as (pointer gs-reg64) a0-7) 5) (gs-reg64 tex1-1))
    (set! (-> v1-4 base) (&+ a0-7 48))
    )
  (dma-buffer-add-vu-function arg0 ocean-texture-vu1-block 1)
  (let* ((v1-5 arg0)
         (a0-10 (the-as object (-> v1-5 base)))
         )
    (set! (-> (the-as dma-packet a0-10) dma) (new 'static 'dma-tag :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-10) vif0) (new 'static 'vif-tag :cmd (vif-cmd base)))
    (set! (-> (the-as dma-packet a0-10) vif1) (new 'static 'vif-tag :imm #xc0 :cmd (vif-cmd offset)))
    (set! (-> v1-5 base) (&+ (the-as pointer a0-10) 16))
    )
  (ocean-texture-add-constants obj arg0)
  (let ((s3-0 (+ arg1 0)))
    (ocean-texture-add-verts obj arg0 s3-0)
    (let ((s3-1 (+ s3-0 3072)))
      (ocean-texture-add-call-start obj arg0)
      (dotimes (s2-0 9)
        (ocean-texture-add-verts obj arg0 s3-1)
        (+! s3-1 3072)
        (ocean-texture-add-call-rest obj arg0)
        )
      (ocean-texture-add-verts-last obj arg0 s3-1 (+ arg1 0))
      )
    )
  (ocean-texture-add-call-rest obj arg0)
  (ocean-texture-add-call-done obj arg0)
  ;; (ocean-method-81 obj arg0)
  ;; (reset-display-gs-state *display* arg0)
  0
  (none)
  )

(defmethod ocean-method-79 ocean ((obj ocean) (arg0 dma-buffer))
  (set-display-gs-state arg0 53 64 64 0 0)
  (let* ((v1-0 arg0)
         (a0-2 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-2) dma) (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-2) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-2) vif1) (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-2) 16))
    )
  (let* ((v1-1 arg0)
         (a0-4 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-4) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x6))
    (set! (-> (the-as gs-gif-tag a0-4) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-1 base) (&+ (the-as pointer a0-4) 16))
    )
  (let* ((s4-0 arg0)
         (s3-0 (-> s4-0 base))
         )
    (set! (-> (the-as (pointer gs-test) s3-0) 0)
          (new 'static 'gs-test :ate #x1 :atst (gs-atest always) :zte #x1 :ztst (gs-ztest always))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-alpha) s3-0) 2) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 3) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-0) 4)
          (new 'static 'gs-tex0 :tbp0 #x2a0 :tbw #x2 :tcc #x1 :th (log2 128) :tw (log2 128))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 5) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-0) 6) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 7) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-0) 8) (new 'static 'gs-clamp))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 9) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer uint64) s3-0) 10) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 11) (gs-reg64 texflush))
    (set! (-> s4-0 base) (&+ s3-0 96))
    )
  (let ((v1-17 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-17 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-17 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-17 2 quad) (-> obj color80808040 quad))
    (set! (-> v1-17 3 quad) (-> obj uv00 quad))
    (set! (-> v1-17 4 quad) (-> obj xy00 quad))
    (set! (-> v1-17 5 quad) (-> obj uv8080 quad))
    (set! (-> v1-17 6 quad) (-> obj xy4040 quad))
    )
  (&+! (-> arg0 base) 112)
  (set-display-gs-state arg0 61 32 32 0 0)
  (let* ((v1-20 arg0)
         (a0-16 (the-as object (-> v1-20 base)))
         )
    (set! (-> (the-as dma-packet a0-16) dma) (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-16) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-16) vif1) (new 'static 'vif-tag :imm #x3 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-20 base) (&+ (the-as pointer a0-16) 16))
    )
  (let* ((v1-21 arg0)
         (a0-18 (the-as object (-> v1-21 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-18) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x2))
    (set! (-> (the-as gs-gif-tag a0-18) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-21 base) (&+ (the-as pointer a0-18) 16))
    )
  (let* ((s4-1 arg0)
         (s3-1 (-> s4-1 base))
         )
    (set! (-> (the-as (pointer gs-tex0) s3-1) 0)
          (new 'static 'gs-tex0 :tbp0 #x6a0 :tbw #x1 :tcc #x1 :th (log2 64) :tw (log2 64))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-1) 1) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer uint64) s3-1) 2) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 3) (gs-reg64 texflush))
    (set! (-> s4-1 base) (&+ s3-1 32))
    )
  (let ((v1-30 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-30 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-30 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-30 2 quad) (-> obj color80808000 quad))
    (set! (-> v1-30 3 quad) (-> obj uv00 quad))
    (set! (-> v1-30 4 quad) (-> obj xy00 quad))
    (set! (-> v1-30 5 quad) (-> obj uv4040 quad))
    (set! (-> v1-30 6 quad) (-> obj xy2020 quad))
    )
  (&+! (-> arg0 base) 112)
  (set-display-gs-state arg0 63 16 16 0 0)
  (let* ((v1-33 arg0)
         (a0-30 (the-as object (-> v1-33 base)))
         )
    (set! (-> (the-as dma-packet a0-30) dma) (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-30) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-30) vif1) (new 'static 'vif-tag :imm #x3 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-33 base) (&+ (the-as pointer a0-30) 16))
    )
  (let* ((v1-34 arg0)
         (a0-32 (the-as object (-> v1-34 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-32) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x2))
    (set! (-> (the-as gs-gif-tag a0-32) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-34 base) (&+ (the-as pointer a0-32) 16))
    )
  (let* ((s4-2 arg0)
         (s3-2 (-> s4-2 base))
         )
    (set! (-> (the-as (pointer gs-tex0) s3-2) 0)
          (new 'static 'gs-tex0 :tbp0 #x7a0 :tcc #x1 :th (log2 32) :tw (log2 32))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-2) 1) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer uint64) s3-2) 2) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 3) (gs-reg64 texflush))
    (set! (-> s4-2 base) (&+ s3-2 32))
    )
  (let ((v1-43 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-43 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-43 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-43 2 quad) (-> obj color80808000 quad))
    (set! (-> v1-43 3 quad) (-> obj uv00 quad))
    (set! (-> v1-43 4 quad) (-> obj xy00 quad))
    (set! (-> v1-43 5 quad) (-> obj uv2020 quad))
    (set! (-> v1-43 6 quad) (-> obj xy1010 quad))
    )
  (&+! (-> arg0 base) 112)
  (set-display-gs-state arg0 64 8 8 0 0)
  (let* ((v1-46 arg0)
         (a0-44 (the-as object (-> v1-46 base)))
         )
    (set! (-> (the-as dma-packet a0-44) dma) (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-44) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-44) vif1) (new 'static 'vif-tag :imm #x3 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-46 base) (&+ (the-as pointer a0-44) 16))
    )
  (let* ((v1-47 arg0)
         (a0-46 (the-as object (-> v1-47 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-46) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x2))
    (set! (-> (the-as gs-gif-tag a0-46) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-47 base) (&+ (the-as pointer a0-46) 16))
    )
  (let* ((s4-3 arg0)
         (s3-3 (-> s4-3 base))
         )
    (set! (-> (the-as (pointer gs-tex0) s3-3) 0)
          (new 'static 'gs-tex0 :tbp0 #x7e0 :tcc #x1 :th (log2 16) :tw (log2 16))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-3) 1) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer uint64) s3-3) 2) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-3) 3) (gs-reg64 texflush))
    (set! (-> s4-3 base) (&+ s3-3 32))
    )
  (let ((v1-56 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-56 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-56 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-56 2 quad) (-> obj color80808000 quad))
    (set! (-> v1-56 3 quad) (-> obj uv00 quad))
    (set! (-> v1-56 4 quad) (-> obj xy00 quad))
    (set! (-> v1-56 5 quad) (-> obj uv1010 quad))
    (set! (-> v1-56 6 quad) (-> obj xy88 quad))
    )
  (&+! (-> arg0 base) 112)
  (set-display-gs-state arg0 65 8 8 0 0)
  (let* ((v1-59 arg0)
         (a0-58 (the-as object (-> v1-59 base)))
         )
    (set! (-> (the-as dma-packet a0-58) dma) (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-58) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-58) vif1) (new 'static 'vif-tag :imm #x3 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-59 base) (&+ (the-as pointer a0-58) 16))
    )
  (let* ((v1-60 arg0)
         (a0-60 (the-as object (-> v1-60 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-60) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x2))
    (set! (-> (the-as gs-gif-tag a0-60) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-60 base) (&+ (the-as pointer a0-60) 16))
    )
  (let* ((s4-4 arg0)
         (s3-4 (-> s4-4 base))
         )
    (set! (-> (the-as (pointer gs-tex0) s3-4) 0)
          (new 'static 'gs-tex0 :tbp0 #x800 :tcc #x1 :th (log2 8) :tw (log2 8))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-4) 1) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer uint64) s3-4) 2) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-4) 3) (gs-reg64 texflush))
    (set! (-> s4-4 base) (the-as pointer (the-as (inline-array vector4w) (&+ s3-4 32))))
    )
  (let ((v1-69 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-69 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-69 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-69 2 quad) (-> obj color80808000 quad))
    (set! (-> v1-69 3 quad) (-> obj uv00 quad))
    (set! (-> v1-69 4 quad) (-> obj xy00 quad))
    (set! (-> v1-69 5 quad) (-> obj uv1010 quad))
    (set! (-> v1-69 6 quad) (-> obj xy88 quad))
    )
  (&+! (-> arg0 base) 112)
  (set-display-gs-state arg0 66 8 8 0 0)
  (let ((v1-72 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-72 0 quad) (-> obj erase-tmpl dma-vif quad))
    (set! (-> v1-72 1 quad) (-> obj erase-tmpl quad 1))
    (set! (-> v1-72 2 quad) (-> obj color80808000 quad))
    (set! (-> v1-72 3 quad) (-> obj xy00 quad))
    (set! (-> v1-72 4 quad) (-> obj xy88 quad))
    )
  (set! (-> arg0 base) (the-as pointer (-> (the-as (inline-array vector4w) (-> arg0 base)) 5)))
  (reset-display-gs-state *display* arg0)
  0
  (none)
  )

(defmethod ocean-method-80 ocean ((obj ocean) (arg0 (pointer rgba)))
  (dotimes (v1-0 256)
    (let ((a0-3 (-> (the-as (pointer uint8) (&+ *clut-translate* v1-0)))))
      (set! (-> arg0 a0-3 r) v1-0)
      (set! (-> arg0 a0-3 g) v1-0)
      (set! (-> arg0 a0-3 b) v1-0)
      (set! (-> arg0 a0-3 a) v1-0)
      )
    )
  0
  (none)
  )

(defmethod do-tex-scroll! ocean ((obj ocean))
  (with-pp
    (when (not (paused?))
      (+! (-> obj st-scroll x) (* 8.0 (-> pp clock seconds-per-frame)))
      (set! (-> obj st-scroll y) (- (-> obj st-scroll y) (* 8.0 (-> pp clock seconds-per-frame))))
      (if (< 128.0 (-> obj st-scroll x))
          (set! (-> obj st-scroll x) (+ -128.0 (-> obj st-scroll x)))
          )
      (if (< (-> obj st-scroll y) 0.0)
          (set! (-> obj st-scroll y) (+ 128.0 (-> obj st-scroll y)))
          )
      )
    (set! (-> obj uv-scroll-0 x) (the int (* 16.0 (-> obj st-scroll x))))
    (set! (-> obj uv-scroll-0 y) (the int (* 16.0 (+ 256.0 (-> obj st-scroll y)))))
    (set! (-> obj uv-scroll-1 x) (the int (* 16.0 (+ 256.0 (-> obj st-scroll x)))))
    (set! (-> obj uv-scroll-1 y) (the int (* 16.0 (-> obj st-scroll y))))
    0
    (none)
    )
  )

(defmethod ocean-method-81 ocean ((obj ocean) (arg0 dma-buffer))
  (set-display-gs-state arg0 53 128 128 0 0)
  (let* ((v1-0 arg0)
         (a0-2 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-2) dma) (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-2) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-2) vif1) (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-2) 16))
    )
  (let* ((v1-1 arg0)
         (a0-4 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-4) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x6))
    (set! (-> (the-as gs-gif-tag a0-4) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-1 base) (&+ (the-as pointer a0-4) 16))
    )
  (let* ((s4-0 arg0)
         (s3-0 (-> s4-0 base))
         )
    (set! (-> (the-as (pointer gs-test) s3-0) 0)
          (new 'static 'gs-test :ate #x1 :atst (gs-atest always) :zte #x1 :ztst (gs-ztest always))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-alpha) s3-0) 2) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 3) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-0) 4)
          (new 'static 'gs-tex0 :tbp0 #x2a0 :tbw #x2 :tcc #x1 :th (log2 128) :tw (log2 128))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 5) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-0) 6) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 7) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-0) 8) (new 'static 'gs-clamp))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 9) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer uint64) s3-0) 10) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 11) (gs-reg64 texflush))
    (set! (-> s4-0 base) (&+ s3-0 96))
    )
  (let ((v1-17 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-17 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-17 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-17 2 quad) (-> obj color80808080 quad))
    (set! (-> v1-17 3 quad) (-> obj uv00 quad))
    (set! (-> v1-17 4 quad) (-> obj xy00 quad))
    (set! (-> v1-17 5 quad) (-> obj uv8080 quad))
    (set! (-> v1-17 6 quad) (-> obj xy8080 quad))
    )
  (&+! (-> arg0 base) 112)
  (let* ((v1-20 arg0)
         (a0-15 (the-as object (-> v1-20 base)))
         )
    (set! (-> (the-as dma-packet a0-15) dma) (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-15) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-15) vif1) (new 'static 'vif-tag :imm #x5 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-20 base) (&+ (the-as pointer a0-15) 16))
    )
  (let* ((v1-21 arg0)
         (a0-17 (the-as object (-> v1-21 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-17) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x4))
    (set! (-> (the-as gs-gif-tag a0-17) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-21 base) (&+ (the-as pointer a0-17) 16))
    )
  (let* ((v1-22 arg0)
         (a0-19 (-> v1-22 base))
         )
    (set! (-> (the-as (pointer gs-bitbltbuf) a0-19) 0) (new 'static 'gs-bitbltbuf :dbp #x860))
    (set! (-> (the-as (pointer gs-reg64) a0-19) 1) (gs-reg64 bitbltbuf))
    (set! (-> (the-as (pointer gs-trxpos) a0-19) 2) (new 'static 'gs-trxpos))
    (set! (-> (the-as (pointer gs-reg64) a0-19) 3) (gs-reg64 trxpos))
    (set! (-> (the-as (pointer gs-trxreg) a0-19) 4) (new 'static 'gs-trxreg :rrw #x10 :rrh #x10))
    (set! (-> (the-as (pointer gs-reg64) a0-19) 5) (gs-reg64 trxreg))
    (set! (-> (the-as (pointer gs-trxdir) a0-19) 6) (new 'static 'gs-trxdir))
    (set! (-> (the-as (pointer gs-reg64) a0-19) 7) (gs-reg64 trxdir))
    (set! (-> v1-22 base) (&+ a0-19 64))
    )
  (let ((v1-23 (the-as object (-> arg0 base))))
    (set! (-> (the-as (inline-array vector4w) v1-23) 0 quad) (-> obj clut-tmpl dma-vif quad))
    (set! (-> (the-as (inline-array vector4w) v1-23) 1 quad) (-> obj clut-tmpl quad 1))
    (ocean-method-80 obj (the-as (pointer rgba) (&+ (the-as pointer v1-23) 32)))
    )
  (&+! (-> arg0 base) 1056)
  (set-display-gs-state arg0 85 128 128 0 0)
  (let* ((v1-27 arg0)
         (a0-25 (the-as object (-> v1-27 base)))
         )
    (set! (-> (the-as dma-packet a0-25) dma) (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-25) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-25) vif1) (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-27 base) (&+ (the-as pointer a0-25) 16))
    )
  (let* ((v1-28 arg0)
         (a0-27 (the-as object (-> v1-28 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-27) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x5))
    (set! (-> (the-as gs-gif-tag a0-27) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-28 base) (&+ (the-as pointer a0-27) 16))
    )
  (let* ((s4-1 arg0)
         (s3-1 (-> s4-1 base))
         )
    (set! (-> (the-as (pointer gs-alpha) s3-1) 0) (new 'static 'gs-alpha))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 1) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-1) 2) (new 'static 'gs-tex0
                                                   :tbp0 #x2a0
                                                   :tbw #x2
                                                   :psm #x1b
                                                   :tcc #x1
                                                   :cbp #x860
                                                   :cld #x1
                                                   :th (log2 128)
                                                   :tw (log2 128)
                                                   )
          )
    (set! (-> (the-as (pointer gs-reg64) s3-1) 3) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-1) 4) (new 'static 'gs-tex1))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 5) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-1) 6) (new 'static 'gs-clamp))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 7) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer uint64) s3-1) 8) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 9) (gs-reg64 texflush))
    (set! (-> s4-1 base) (&+ s3-1 80))
    )
  (let ((v1-40 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-40 0 quad) (-> obj sprite-tmpl3 dma-vif quad))
    (set! (-> v1-40 1 quad) (-> obj sprite-tmpl3 quad 1))
    (set-vector! (-> v1-40 2) 96 96 96 128)
    (set! (-> v1-40 3 quad) (-> obj uv00 quad))
    (set! (-> v1-40 4 quad) (-> obj xy00 quad))
    (set! (-> v1-40 5 quad) (-> obj uv8080 quad))
    (set! (-> v1-40 6 quad) (-> obj xy8080 quad))
    )
  (&+! (-> arg0 base) 112)
  (let* ((v1-43 arg0)
         (a0-38 (the-as object (-> v1-43 base)))
         )
    (set! (-> (the-as dma-packet a0-38) dma) (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-38) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-38) vif1) (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-43 base) (&+ (the-as pointer a0-38) 16))
    )
  (let* ((v1-44 arg0)
         (a0-40 (the-as object (-> v1-44 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-40) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x3))
    (set! (-> (the-as gs-gif-tag a0-40) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-44 base) (&+ (the-as pointer a0-40) 16))
    )
  (let* ((v1-45 arg0)
         (a0-42 (-> v1-45 base))
         )
    (set! (-> (the-as (pointer gs-alpha) a0-42) 0) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) a0-42) 1) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex1) a0-42) 2) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) a0-42) 3) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer uint64) a0-42) 4) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) a0-42) 5) (gs-reg64 texflush))
    (set! (-> v1-45 base) (&+ a0-42 48))
    )
  (let ((v1-46 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-46 0 quad) (-> obj sprite-tmpl3 dma-vif quad))
    (set! (-> v1-46 1 quad) (-> obj sprite-tmpl3 quad 1))
    (set-vector! (-> v1-46 2) 64 64 64 64)
    (set! (-> v1-46 3 quad) (-> obj uv-scroll-0 quad))
    (set! (-> v1-46 4 quad) (-> obj xy00 quad))
    (set! (-> v1-46 5 quad) (-> obj uv-scroll-1 quad))
    (set! (-> v1-46 6 quad) (-> obj xy8080 quad))
    )
  (&+! (-> arg0 base) 112)
  (set-display-gs-state arg0 21 128 128 0 0)
  (let* ((v1-49 arg0)
         (a0-52 (the-as object (-> v1-49 base)))
         )
    (set! (-> (the-as dma-packet a0-52) dma) (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-52) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-52) vif1) (new 'static 'vif-tag :imm #x5 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-49 base) (&+ (the-as pointer a0-52) 16))
    )
  (let* ((v1-50 arg0)
         (a0-54 (the-as object (-> v1-50 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-54) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x4))
    (set! (-> (the-as gs-gif-tag a0-54) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-50 base) (&+ (the-as pointer a0-54) 16))
    )
  (let* ((s4-2 arg0)
         (s3-2 (-> s4-2 base))
         )
    (set! (-> (the-as (pointer gs-alpha) s3-2) 0) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 1) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-2) 2)
          (new 'static 'gs-tex0 :tbp0 #x6a0 :tbw #x2 :th (log2 128) :tw (log2 128))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-2) 3) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-2) 4) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 5) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer uint64) s3-2) 6) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 7) (gs-reg64 texflush))
    (set! (-> s4-2 base) (&+ s3-2 64))
    )
  (let ((v1-63 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-63 0 quad) (-> obj sprite-tmpl3 dma-vif quad))
    (set! (-> v1-63 1 quad) (-> obj sprite-tmpl3 quad 1))
    (set-vector! (-> v1-63 2) 128 128 128 64)
    (set! (-> v1-63 3 quad) (-> obj uv-scroll-0 quad))
    (set! (-> v1-63 4 quad) (-> obj xy00 quad))
    (set! (-> v1-63 5 quad) (-> obj uv-scroll-1 quad))
    (set! (-> v1-63 6 quad) (-> obj xy8080 quad))
    )
  (&+! (-> arg0 base) 112)
  (let ((s5-1 128)
        (s4-3 128)
        )
    (let ((s1-0 21)
          (s2-5 2720)
          (s3-3 (log2 (* s5-1 2)))
          (v1-66 (log2 s4-3))
          (a0-69 (/ (+ (* s5-1 2) 63) 64))
          (a1-55 #x3fff)
          )
      (let* ((a2-3 arg0)
             (a3-3 (the-as object (-> a2-3 base)))
             )
        (set! (-> (the-as dma-packet a3-3) dma) (new 'static 'dma-tag :qwc #xc :id (dma-tag-id cnt)))
        (set! (-> (the-as dma-packet a3-3) vif0) (new 'static 'vif-tag :cmd (vif-cmd flusha) :msk #x1))
        (set! (-> (the-as dma-packet a3-3) vif1) (new 'static 'vif-tag :imm #xc :cmd (vif-cmd direct) :msk #x1))
        (set! (-> a2-3 base) (&+ (the-as pointer a3-3) 16))
        )
      (let* ((a2-4 arg0)
             (a3-5 (the-as object (-> a2-4 base)))
             )
        (set! (-> (the-as gs-gif-tag a3-5) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #xb))
        (set! (-> (the-as gs-gif-tag a3-5) regs) GIF_REGS_ALL_AD)
        (set! (-> a2-4 base) (&+ (the-as pointer a3-5) 16))
        )
      (let* ((a2-5 arg0)
             (a3-7 (-> a2-5 base))
             )
        (set! (-> (the-as (pointer gs-xy-offset) a3-7) 0) (new 'static 'gs-xy-offset))
        (set! (-> (the-as (pointer gs-reg64) a3-7) 1) (gs-reg64 xyoffset-1))
        (set! (-> (the-as (pointer gs-frame) a3-7) 2)
              (new 'static 'gs-frame :psm (gs-psm ct16) :fbmsk a1-55 :fbw a0-69 :fbp s1-0)
              )
        (set! (-> (the-as (pointer gs-reg64) a3-7) 3) (gs-reg64 frame-1))
        (set! (-> (the-as (pointer gs-scissor) a3-7) 4)
              (new 'static 'gs-scissor :scax1 (+ s5-1 -1) :scay1 (+ s4-3 -1))
              )
        (set! (-> (the-as (pointer gs-reg64) a3-7) 5) (gs-reg64 scissor-1))
        (set! (-> (the-as (pointer gs-test) a3-7) 6)
              (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
              )
        (set! (-> (the-as (pointer gs-reg64) a3-7) 7) (gs-reg64 test-1))
        (set! (-> (the-as (pointer gs-alpha) a3-7) 8) (new 'static 'gs-alpha :a #x2 :b #x2 :c #x2 :fix #x80))
        (set! (-> (the-as (pointer gs-reg64) a3-7) 9) (gs-reg64 alpha-1))
        (set! (-> (the-as (pointer gs-tex0) a3-7) 10)
              (new 'static 'gs-tex0 :psm #x2 :tcc #x1 :tfx #x1 :th v1-66 :tw s3-3 :tbw a0-69 :tbp0 s2-5)
              )
        (set! (-> (the-as (pointer gs-reg64) a3-7) 11) (gs-reg64 tex0-1))
        (set! (-> (the-as (pointer uint64) a3-7) 12) (the-as uint 0))
        (set! (-> (the-as (pointer gs-reg64) a3-7) 13) (gs-reg64 fba-1))
        (set! (-> (the-as (pointer gs-texa) a3-7) 14) (new 'static 'gs-texa :ta1 #x80))
        (set! (-> (the-as (pointer gs-reg64) a3-7) 15) (gs-reg64 texa))
        (set! (-> (the-as (pointer gs-tex1) a3-7) 16) (new 'static 'gs-tex1 :lcm #x1))
        (set! (-> (the-as (pointer gs-reg64) a3-7) 17) (gs-reg64 tex1-1))
        (set! (-> (the-as (pointer uint64) a3-7) 18) (the-as uint 0))
        (set! (-> (the-as (pointer gs-reg64) a3-7) 19) (gs-reg64 texflush))
        (set! (-> (the-as (pointer gs-prim) a3-7) 20)
              (new 'static 'gs-prim :prim (gs-prim-type sprite) :tme #x1 :abe #x1 :fst #x1)
              )
        (set! (-> (the-as (pointer gs-reg64) a3-7) 21) (gs-reg64 prim))
        (set! (-> a2-5 base) (&+ a3-7 176))
        )
      (let ((a2-6 s4-3))
        (dotimes (a3-9 (/ s5-1 16))
          (let* ((t0-38 arg0)
                 (t1-19 (the-as object (-> t0-38 base)))
                 )
            (set! (-> (the-as dma-packet t1-19) dma) (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt)))
            (set! (-> (the-as dma-packet t1-19) vif0) (new 'static 'vif-tag))
            (set! (-> (the-as dma-packet t1-19) vif1) (new 'static 'vif-tag :imm #x5 :cmd (vif-cmd direct) :msk #x1))
            (set! (-> t0-38 base) (&+ (the-as pointer t1-19) 16))
            )
          (let* ((t0-39 arg0)
                 (t1-21 (the-as object (-> t0-39 base)))
                 )
            (set! (-> (the-as gs-gif-tag t1-21) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x4))
            (set! (-> (the-as gs-gif-tag t1-21) regs) GIF_REGS_ALL_AD)
            (set! (-> t0-39 base) (&+ (the-as pointer t1-21) 16))
            )
          (let* ((t0-40 arg0)
                 (t1-23 (-> t0-40 base))
                 )
            (set! (-> (the-as (pointer gs-xyz) t1-23) 0) (new 'static 'gs-xyz :y #x8 :x (+ (* a3-9 256) 8)))
            (set! (-> (the-as (pointer gs-reg64) t1-23) 1) (gs-reg64 uv))
            (set! (-> (the-as (pointer gs-xyz) t1-23) 2) (new 'static 'gs-xyz :x (+ (* a3-9 256) 128)))
            (set! (-> (the-as (pointer gs-reg64) t1-23) 3) (gs-reg64 xyz2))
            (set! (-> (the-as (pointer gs-xyz) t1-23) 4)
                  (new 'static 'gs-xyz :x (+ (* a3-9 256) 136) :y (+ (* a2-6 16) 8))
                  )
            (set! (-> (the-as (pointer gs-reg64) t1-23) 5) (gs-reg64 uv))
            (set! (-> (the-as (pointer gs-xyz) t1-23) 6) (new 'static 'gs-xyz :y (* a2-6 16) :x (+ (* a3-9 256) 256)))
            (set! (-> (the-as (pointer gs-reg64) t1-23) 7) (gs-reg64 xyz2))
            (set! (-> t0-40 base) (&+ t1-23 64))
            )
          )
        )
      (let ((t0-42 (/ s5-1 64)))
        (let* ((a2-9 arg0)
               (a3-10 (the-as object (-> a2-9 base)))
               )
          (set! (-> (the-as dma-packet a3-10) dma) (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt)))
          (set! (-> (the-as dma-packet a3-10) vif0) (new 'static 'vif-tag))
          (set! (-> (the-as dma-packet a3-10) vif1) (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1))
          (set! (-> a2-9 base) (&+ (the-as pointer a3-10) 16))
          )
        (let* ((a2-10 arg0)
               (a3-12 (the-as object (-> a2-10 base)))
               )
          (set! (-> (the-as gs-gif-tag a3-12) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x3))
          (set! (-> (the-as gs-gif-tag a3-12) regs) GIF_REGS_ALL_AD)
          (set! (-> a2-10 base) (&+ (the-as pointer a3-12) 16))
          )
        (let* ((a2-11 arg0)
               (a3-14 (-> a2-11 base))
               )
          (set! (-> (the-as (pointer gs-frame) a3-14) 0)
                (new 'static 'gs-frame :psm (gs-psm ct16) :fbmsk a1-55 :fbw a0-69 :fbp (+ s1-0 t0-42))
                )
          (set! (-> (the-as (pointer gs-reg64) a3-14) 1) (gs-reg64 frame-1))
          (set! (-> (the-as (pointer gs-tex0) a3-14) 2)
                (new 'static 'gs-tex0 :psm #x2 :tcc #x1 :tfx #x1 :th v1-66 :tw s3-3 :tbw a0-69 :tbp0 (+ s2-5 (* t0-42 32)))
                )
          (set! (-> (the-as (pointer gs-reg64) a3-14) 3) (gs-reg64 tex0-1))
          (set! (-> (the-as (pointer gs-prim) a3-14) 4)
                (new 'static 'gs-prim :prim (gs-prim-type sprite) :tme #x1 :abe #x1 :fst #x1)
                )
          (set! (-> (the-as (pointer gs-reg64) a3-14) 5) (gs-reg64 prim))
          (set! (-> a2-11 base) (&+ a3-14 48))
          )
        )
      )
    (dotimes (v1-73 (/ s5-1 16))
      (let* ((a0-74 arg0)
             (a1-63 (the-as object (-> a0-74 base)))
             )
        (set! (-> (the-as dma-packet a1-63) dma) (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt)))
        (set! (-> (the-as dma-packet a1-63) vif0) (new 'static 'vif-tag))
        (set! (-> (the-as dma-packet a1-63) vif1) (new 'static 'vif-tag :imm #x5 :cmd (vif-cmd direct) :msk #x1))
        (set! (-> a0-74 base) (&+ (the-as pointer a1-63) 16))
        )
      (let* ((a0-75 arg0)
             (a1-65 (the-as object (-> a0-75 base)))
             )
        (set! (-> (the-as gs-gif-tag a1-65) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x4))
        (set! (-> (the-as gs-gif-tag a1-65) regs) GIF_REGS_ALL_AD)
        (set! (-> a0-75 base) (&+ (the-as pointer a1-65) 16))
        )
      (let* ((a0-76 arg0)
             (a1-67 (-> a0-76 base))
             )
        (set! (-> (the-as (pointer gs-xyz) a1-67) 0) (new 'static 'gs-xyz :y #x8 :x (+ (* v1-73 256) 8)))
        (set! (-> (the-as (pointer gs-reg64) a1-67) 1) (gs-reg64 uv))
        (set! (-> (the-as (pointer gs-xyz) a1-67) 2) (new 'static 'gs-xyz :x (+ (* v1-73 256) 128)))
        (set! (-> (the-as (pointer gs-reg64) a1-67) 3) (gs-reg64 xyz2))
        (set! (-> (the-as (pointer gs-xyz) a1-67) 4)
              (new 'static 'gs-xyz :x (+ (* v1-73 256) 136) :y (+ (* s4-3 16) 8))
              )
        (set! (-> (the-as (pointer gs-reg64) a1-67) 5) (gs-reg64 uv))
        (set! (-> (the-as (pointer gs-xyz) a1-67) 6) (new 'static 'gs-xyz :y (* s4-3 16) :x (+ (* v1-73 256) 256)))
        (set! (-> (the-as (pointer gs-reg64) a1-67) 7) (gs-reg64 xyz2))
        (set! (-> a0-76 base) (&+ a1-67 64))
        )
      )
    )
  0
  (none)
  )

(defmethod draw-envmap-debug ocean ((obj ocean) (arg0 dma-buffer))
  (format *stdcon* "draw-envmap-debug~%")
  (-> arg0 base)
  (let* ((v1-1 arg0)
         (a0-2 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as dma-packet a0-2) dma) (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-2) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-2) vif1) (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-1 base) (&+ (the-as pointer a0-2) 16))
    )
  (let* ((v1-2 arg0)
         (a0-4 (the-as object (-> v1-2 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-4) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x6))
    (set! (-> (the-as gs-gif-tag a0-4) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-2 base) (&+ (the-as pointer a0-4) 16))
    )
  (let* ((s4-0 arg0)
         (s3-0 (-> s4-0 base))
         )
    (set! (-> (the-as (pointer gs-test) s3-0) 0)
          (new 'static 'gs-test :ate #x1 :atst (gs-atest always) :zte #x1 :ztst (gs-ztest always))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-alpha) s3-0) 2) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 3) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-0) 4)
          (new 'static 'gs-tex0
            :tbw #x1
            :tcc #x1
            :th (log2 64)
            :tw (log2 64)
            :tbp0 (+ (-> *ocean-texture-base* vram-block) 256)
            )
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 5) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-0) 6) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 7) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-0) 8)
          (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 9) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer uint64) s3-0) 10) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 11) (gs-reg64 texflush))
    (set! (-> s4-0 base) (&+ s3-0 96))
    )
  (let ((v1-20 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-20 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-20 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-20 2 quad) (-> obj color80808080 quad))
    (set! (-> v1-20 3 quad) (-> obj uv00 quad))
    (set-vector! (-> v1-20 4) #x7b50 #x8000 #xffffff 0)
    (set! (-> v1-20 5 quad) (-> obj uv4040 quad))
    (set-vector! (-> v1-20 6) #x7f60 #x8400 #xffffff 0)
    )
  (&+! (-> arg0 base) 112)
  (let* ((v1-24 arg0)
         (a0-22 (the-as object (-> v1-24 base)))
         )
    (set! (-> (the-as dma-packet a0-22) dma) (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-22) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-22) vif1) (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-24 base) (&+ (the-as pointer a0-22) 16))
    )
  (let* ((v1-25 arg0)
         (a0-24 (the-as object (-> v1-25 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-24) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x6))
    (set! (-> (the-as gs-gif-tag a0-24) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-25 base) (&+ (the-as pointer a0-24) 16))
    )
  (let* ((s4-1 arg0)
         (s3-1 (-> s4-1 base))
         )
    (set! (-> (the-as (pointer gs-test) s3-1) 0)
          (new 'static 'gs-test :ate #x1 :atst (gs-atest always) :zte #x1 :ztst (gs-ztest always))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-1) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-alpha) s3-1) 2) (new 'static 'gs-alpha))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 3) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-1) 4)
          (new 'static 'gs-tex0 :tbw #x1 :th (log2 64) :tw (log2 64) :tbp0 (-> *ocean-envmap-texture-base* vram-block))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-1) 5) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-1) 6) (new 'static 'gs-tex1))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 7) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-1) 8)
          (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-1) 9) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer uint64) s3-1) 10) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-1) 11) (gs-reg64 texflush))
    (set! (-> s4-1 base) (&+ s3-1 96))
    )
  (let ((v1-44 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-44 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-44 1 quad) (-> obj sprite-tmpl quad 1))
    (set! (-> v1-44 2 quad) (-> obj color80808080 quad))
    (set! (-> v1-44 3 quad) (-> obj uv00 quad))
    (set-vector! (-> v1-44 4) #x8000 #x8000 #xffffff 0)
    (set! (-> v1-44 5 quad) (-> obj uv4040 quad))
    (set-vector! (-> v1-44 6) #x8820 #x8400 #xffffff 0)
    )
  (&+! (-> arg0 base) 112)
  0
  (none)
  )

(defmethod ocean-method-83 ocean ((obj ocean) (arg0 dma-buffer) (arg1 float))
  (let* ((s4-0 64)
         (s3-0 0)
         (f30-0 (/ -65536.0 (the float s4-0)))
         (f28-0 arg1)
         )
    (let* ((v1-1 arg0)
           (a0-1 (the-as object (-> v1-1 base)))
           )
      (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt)))
      (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag))
      (set! (-> (the-as dma-packet a0-1) vif1) (new 'static 'vif-tag :imm #x5 :cmd (vif-cmd direct) :msk #x1))
      (set! (-> v1-1 base) (&+ (the-as pointer a0-1) 16))
      )
    (let* ((v1-2 arg0)
           (a0-3 (the-as object (-> v1-2 base)))
           )
      (set! (-> (the-as gs-gif-tag a0-3) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x4))
      (set! (-> (the-as gs-gif-tag a0-3) regs) GIF_REGS_ALL_AD)
      (set! (-> v1-2 base) (&+ (the-as pointer a0-3) 16))
      )
    (let* ((s2-0 arg0)
           (s1-0 (-> s2-0 base))
           )
      (set! (-> (the-as (pointer gs-alpha) s1-0) 0) (new 'static 'gs-alpha :b #x1 :d #x1))
      (set! (-> (the-as (pointer gs-reg64) s1-0) 1) (gs-reg64 alpha-1))
      (set! (-> (the-as (pointer gs-tex0) s1-0) 2)
            (new 'static 'gs-tex0
              :tbw #x1
              :tcc #x1
              :th (log2 64)
              :tw (log2 64)
              :tbp0 (+ (-> *ocean-texture-base* vram-block) 256)
              )
            )
      (set! (-> (the-as (pointer gs-reg64) s1-0) 3) (gs-reg64 tex0-1))
      (set! (-> (the-as (pointer gs-clamp) s1-0) 4)
            (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
            )
      (set! (-> (the-as (pointer gs-reg64) s1-0) 5) (gs-reg64 clamp-1))
      (set! (-> (the-as (pointer uint64) s1-0) 6) (the-as uint 0))
      (set! (-> (the-as (pointer gs-reg64) s1-0) 7) (gs-reg64 texflush))
      (set! (-> s2-0 base) (&+ s1-0 64))
      )
    (let ((v1-16 (-> arg0 base)))
      (set! (-> (the-as (pointer uint128) v1-16)) (-> obj line-tmpl dma-vif quad))
      (set! (-> (the-as (pointer uint128) v1-16) 1) (-> obj line-tmpl quad 1))
      )
    (&+! (-> arg0 base) 32)
    (dotimes (s2-1 s4-0)
      (let ((s1-1 (the-as object (-> arg0 base))))
        (let ((f26-1 (+ 0.5 (* 0.5 (sin f28-0))))
              (f0-5 (+ 0.5 (* 0.5 (cos f28-0))))
              )
          (set! (-> (the-as (inline-array vector4w) s1-1) 0 quad) (-> obj color80808000 quad))
          (set! (-> (the-as (inline-array vector4w) s1-1) 1 quad) (-> obj st0505 quad))
          (set-vector! (-> (the-as (inline-array vector4w) s1-1) 2) s3-0 0 #xffffff 0)
          (set-vector!
            (-> (the-as (inline-array vector4w) s1-1) 3)
            (the-as int f26-1)
            (the-as int f0-5)
            (the-as int 1.0)
            (the-as int 0.0)
            )
          )
        (set-vector! (-> (the-as (inline-array vector4w) s1-1) 4) s3-0 512 #xffffff 0)
        )
      (+! s3-0 16)
      (+! f28-0 f30-0)
      (&+! (-> arg0 base) 80)
      )
    )
  0
  (none)
  )

(defmethod ocean-method-84 ocean ((obj ocean) (arg0 dma-buffer) (arg1 sky-upload-data) (arg2 vector4w) (arg3 float))
  (when (>= (-> arg1 sun 0 pos y) -150.0)
    (let* ((f2-0 (* 0.00010050251 (-> arg1 sun 0 pos x)))
           (f1-3 (* 0.00010050251 (-> arg1 sun 0 pos z)))
           (f0-6 (if (< 0.0 (-> arg1 sun 0 pos y))
                     1.0
                     (* 0.006666667 (+ 150.0 (-> arg1 sun 0 pos y)))
                     )
                 )
           (f3-6 (if (< 4000.0 (-> arg1 sun 0 pos y))
                     1.0
                     (+ 1.0 (* 0.001 (- 4000.0 (-> arg1 sun 0 pos y))))
                     )
                 )
           (t0-1 (* arg3 f3-6))
           (v1-14 (the int (+ 1024.0 (* 512.0 f2-0))))
           (a2-3 (the int (+ 1024.0 (* 512.0 f1-3))))
           (t0-2 (the int t0-1))
           (t1-0 (the-as (inline-array vector4w) (-> arg0 base)))
           )
      (set! (-> t1-0 0 quad) (-> obj sun-tmpl dma-vif quad))
      (set! (-> t1-0 1 quad) (-> obj sun-tmpl quad 1))
      (set! (-> t1-0 2 quad) (-> arg2 quad))
      (set! (-> t1-0 2 w) (the int (* 128.0 f0-6)))
      (set! (-> t1-0 3 quad) (-> obj st0000 quad))
      (set-vector! (-> t1-0 4) (- v1-14 t0-2) (- a2-3 t0-2) #xffffff 0)
      (set! (-> t1-0 5 quad) (-> obj st1010 quad))
      (set-vector! (-> t1-0 6) (+ v1-14 t0-2) (+ a2-3 t0-2) #xffffff 0)
      )
    (&+! (-> arg0 base) 112)
    )
  0
  (none)
  )

(defmethod ocean-method-85 ocean ((obj ocean) (arg0 dma-buffer))
  (local-vars (sv-48 vector4w) (sv-64 vector4w))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-1) vif1) (new 'static 'vif-tag :imm #x2 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  (let* ((v1-1 arg0)
         (a0-3 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-3) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x1))
    (set! (-> (the-as gs-gif-tag a0-3) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-1 base) (&+ (the-as pointer a0-3) 16))
    )
  (let* ((v1-2 arg0)
         (a0-5 (-> v1-2 base))
         )
    (set! (-> (the-as (pointer gs-alpha) a0-5) 0) (new 'static 'gs-alpha :b #x2 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) a0-5) 1) (gs-reg64 alpha-1))
    (set! (-> v1-2 base) (&+ a0-5 16))
    )
  (let ((v1-3 (-> arg0 base)))
    (set! (-> (the-as (pointer uint128) v1-3)) (-> obj haze-tmpl dma-vif quad))
    (set! (-> (the-as (pointer uint128) v1-3) 1) (-> obj haze-tmpl quad 1))
    )
  (&+! (-> arg0 base) 32)
  (let ((f30-0 0.0)
        (f28-0 4096.0)
        (s3-0 (new 'stack-no-clear 'vector))
        (s2-0 (new 'stack-no-clear 'ocean-vertex))
        (s4-0 (-> arg0 base))
        )
    (dotimes (s1-0 16)
      (let ((s0-0 (the-as object (-> arg0 base))))
        (set! sv-48 (-> obj haze-verts (* s1-0 2)))
        (set! sv-64 (-> obj haze-verts (+ (* s1-0 2) 1)))
        (let ((f0-1 (+ -1024.0 (the float (-> sv-48 x))))
              (f1-3 (+ -1024.0 (the float (-> sv-48 y))))
              (v1-22 s2-0)
              )
          (set! (-> v1-22 pos x) f0-1)
          (set! (-> v1-22 pos y) 0.0)
          (set! (-> v1-22 pos z) f1-3)
          (set! (-> v1-22 pos w) 1.0)
          )
        (add-colors! obj s3-0 s2-0)
        (vector-float*! s3-0 s3-0 0.25)
        (set-vector!
          (-> (the-as (inline-array vector4w) s0-0) 0)
          (the int (-> s3-0 x))
          (the int (-> s3-0 y))
          (the int (-> s3-0 z))
          0
          )
        (set! (-> (the-as (inline-array vector4w) s0-0) 1 quad) (-> sv-48 quad))
        (set-vector!
          (-> (the-as (inline-array vector4w) s0-0) 2)
          (the int (-> s3-0 x))
          (the int (-> s3-0 y))
          (the int (-> s3-0 z))
          128
          )
        (set! (-> (the-as (inline-array vector4w) s0-0) 3 quad) (-> sv-64 quad))
        )
      (&+! (-> arg0 base) 64)
      (+! f30-0 f28-0)
      )
    (let ((v1-37 (the-as (pointer uint128) (-> arg0 base))))
      (set! (-> v1-37 0) (-> (the-as (pointer uint128) s4-0) 0))
      (set! (-> v1-37 1) (-> (the-as (pointer uint128) s4-0) 1))
      (set! (-> v1-37 2) (-> (the-as (pointer uint128) s4-0) 2))
      (set! (-> v1-37 3) (-> (the-as (pointer uint128) s4-0) 3))
      )
    )
  (&+! (-> arg0 base) 64)
  0
  (none)
  )

(defmethod ocean-method-86 ocean ((obj ocean) (arg0 vector) (arg1 vector) (arg2 vector) (arg3 vector))
  (local-vars (v1-1 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf10 :class vf)
         (vf11 :class vf)
         (vf12 :class vf)
         (vf13 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         (vf9 :class vf)
         )
    (init-vf0-vector)
    (let ((v1-0 (new 'static 'vector :y 128.0 :z 255.0)))
      (.max.w.vf vf1 vf0 vf0)
      (.lvf vf2 (&-> v1-0 quad))
      )
    (.lvf vf7 (&-> arg1 quad))
    (.lvf vf4 (&-> obj cloud-lights sun0-normal quad))
    (.lvf vf5 (&-> obj cloud-lights sun1-normal quad))
    (.lvf vf6 (&-> obj cloud-lights moon-normal quad))
    (.mul.vf vf8 vf4 vf7)
    (.mul.vf vf9 vf5 vf7)
    (.mul.vf vf10 vf6 vf7)
    (.lvf vf3 (&-> arg3 quad))
    (.mul.w.vf acc vf8 vf0)
    (.add.mul.y.vf acc vf1 vf8 acc)
    (.add.mul.z.vf vf8 vf1 vf8 acc)
    (.mul.w.vf acc vf9 vf0)
    (.add.mul.y.vf acc vf1 vf9 acc)
    (.add.mul.z.vf vf9 vf1 vf9 acc)
    (.mul.w.vf acc vf10 vf0)
    (.add.mul.y.vf acc vf1 vf10 acc)
    (.add.mul.z.vf vf10 vf1 vf10 acc)
    (.lvf vf11 (&-> arg2 quad))
    (.max.vf vf8 vf8 vf0)
    (.max.vf vf9 vf9 vf0)
    (.max.vf vf10 vf10 vf0)
    (.lvf vf12 (&-> obj cloud-lights sun1-color quad))
    (.lvf vf13 (&-> obj cloud-lights moon-color quad))
    (.mul.w.vf acc vf3 vf0)
    (.add.mul.x.vf acc vf11 vf8 acc)
    (.add.mul.x.vf acc vf12 vf9 acc)
    (.add.mul.x.vf vf3 vf13 vf10 acc)
    (.mul.y.vf vf3 vf3 vf2)
    (.max.x.vf vf3 vf3 vf0)
    (.min.z.vf vf3 vf3 vf2)
    (.ftoi.vf vf3 vf3)
    (.svf (&-> arg0 quad) vf3)
    (.mov v1-1 vf3)
    0
    (none)
    )
  )

(defmethod ocean-method-87 ocean ((obj ocean) (arg0 vector) (arg1 vector) (arg2 vector))
  (let ((s5-0 (new 'stack-no-clear 'vector))
        (s2-0 (new 'stack-no-clear 'vector))
        (s4-0 (new 'stack-no-clear 'vector))
        (f28-0 0.00390625)
        (f30-0 0.015625)
        )
    (let ((s3-0 (-> obj cloud-lights)))
      (set! (-> arg0 quad) (-> arg1 quad))
      (vector--float*! s5-0 arg2 (-> s3-0 sun0-normal) 9.0)
      (vector--float*! s2-0 arg2 (-> s3-0 sun1-normal) 9.0)
      (vector--float*! s4-0 arg2 (-> s3-0 moon-normal) 9.0)
      (vector-float*! s5-0 s5-0 (* (-> s3-0 sun0-scale) f28-0))
      (vector+float*! s5-0 s5-0 s2-0 (* 0.25 f28-0 (-> s3-0 sun1-scale)))
      (vector+float*! s5-0 s5-0 s4-0 (* (-> s3-0 moon-scale) f28-0))
      )
    (+! (-> arg0 x) (fmax (fmin (-> s5-0 x) f30-0) (- f30-0)))
    (+! (-> arg0 y) (fmax (fmin (-> s5-0 z) f30-0) (- f30-0)))
    )
  0
  (none)
  )

(defmethod ocean-method-88 ocean ((obj ocean) (arg0 dma-buffer))
  (local-vars (sv-48 vector) (sv-64 uint) (sv-80 vector) (sv-96 vector) (sv-112 vector))
  (let* ((v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-1) vif1) (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  (let* ((v1-1 arg0)
         (a0-3 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-3) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x6))
    (set! (-> (the-as gs-gif-tag a0-3) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-1 base) (&+ (the-as pointer a0-3) 16))
    )
  (let* ((s4-0 arg0)
         (s3-0 (-> s4-0 base))
         )
    (set! (-> (the-as (pointer gs-test) s3-0) 0) (new 'static 'gs-test
                                                   :ate #x1
                                                   :atst (gs-atest greater-equal)
                                                   :aref #x50
                                                   :afail #x1
                                                   :zte #x1
                                                   :ztst (gs-ztest greater-equal)
                                                   )
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-tex0) s3-0) 2) (new 'static 'gs-tex0
                                                   :tbp0 #x100
                                                   :tbw #x2
                                                   :psm #x1b
                                                   :tcc #x1
                                                   :cbp #x300
                                                   :cld #x1
                                                   :th (log2 128)
                                                   :tw (log2 128)
                                                   )
          )
    (set! (-> (the-as (pointer gs-reg64) s3-0) 3) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-0) 4) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 5) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-0) 6) (new 'static 'gs-clamp))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 7) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer gs-alpha) s3-0) 8) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 9) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer uint64) s3-0) 10) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-0) 11) (gs-reg64 texflush))
    (set! (-> s4-0 base) (&+ s3-0 96))
    )
  (let* ((v1-17 *sky-work*)
         (f0-1 (* 0.000015258789 (the float (-> v1-17 off-s))))
         (f1-3 (* 0.000015258789 (the float (-> v1-17 off-t))))
         )
    (dotimes (v1-19 6)
      (dotimes (a0-10 6)
        (set-vector!
          (-> obj cloud-st0 (+ (* 6 v1-19) a0-10))
          (+ (* 0.5 (the float a0-10)) f0-1)
          (+ (* 0.5 (the float v1-19)) f1-3)
          1.0
          0.0
          )
        )
      )
    )
  (let ((s4-1 (new 'stack-no-clear 'vector))
        (s3-1 (new 'stack-no-clear 'vector))
        (s2-2 (-> obj cloud-lights))
        )
    (vector-float*! (-> s2-2 sun0-color) (-> s2-2 sun0-color) 0.25)
    (vector-float*! (-> s2-2 sun0-color-lower) (-> s2-2 sun0-color-lower) 0.25)
    (vector-float*! (-> s2-2 sun1-color) (-> s2-2 sun1-color) 0.25)
    (vector-float*! (-> s2-2 moon-color) (-> s2-2 moon-color) 0.25)
    (vector-float*! (-> s2-2 ambi-color) (-> s2-2 ambi-color) 0.25)
    (vector-float*! (-> s2-2 ambi-color-lower) (-> s2-2 ambi-color-lower) 0.25)
    (dotimes (s1-0 36)
      (let ((v1-36 (-> obj cloud-verts s1-0)))
        (set! sv-80 (-> obj cloud-nrms s1-0))
        (let ((s0-0 (-> obj cloud-col0 s1-0)))
          (set! sv-48 (-> obj cloud-col1 s1-0))
          (set! sv-112 (-> obj cloud-st0 s1-0))
          (set! sv-96 (-> obj cloud-st1 s1-0))
          (set! sv-64 (-> obj cloud-alpha s1-0))
          (set! (-> s4-1 x) (* 0.140625 (+ -1024.0 (the float (-> v1-36 x)))))
          (set! (-> s4-1 z) (* 0.140625 (+ -1024.0 (the float (-> v1-36 z)))))
          (vector-negate! s3-1 sv-80)
          (let ((a0-41 obj)
                (t9-3 (method-of-type ocean ocean-method-86))
                (a1-19 s0-0)
                (a3-0 (-> s2-2 sun0-color))
                (t0-0 (-> s2-2 ambi-color))
                )
            (t9-3 a0-41 a1-19 sv-80 a3-0 t0-0)
            )
          (ocean-method-86 obj sv-48 s3-1 (-> s2-2 sun0-color-lower) (-> s2-2 ambi-color-lower))
          (set! (-> s0-0 w) (the-as float sv-64))
          )
        )
      (set! (-> sv-48 w) (the-as float sv-64))
      (let ((a0-44 obj)
            (t9-5 (method-of-type ocean ocean-method-87))
            (a3-2 s4-1)
            )
        (t9-5 a0-44 sv-96 sv-112 a3-2)
        )
      )
    )
  (dotimes (v1-46 5)
    (let ((a0-45 (the-as (inline-array vector4w) (-> arg0 base))))
      (set! (-> a0-45 0 quad) (-> obj cloud-tmpl dma-vif quad))
      (set! (-> a0-45 1 quad) (-> obj cloud-tmpl quad 1))
      )
    (&+! (-> arg0 base) 32)
    (dotimes (a0-48 6)
      (let ((a3-3 (+ (* 6 v1-46) a0-48))
            (a2-7 (+ (* 6 (+ v1-46 1)) a0-48))
            (a1-28 (the-as (inline-array vector4w) (-> arg0 base)))
            )
        (set! (-> a1-28 0 quad) (-> obj cloud-col0 a3-3 quad))
        (set! (-> a1-28 1 quad) (-> obj cloud-st0 a3-3 quad))
        (set! (-> a1-28 2 quad) (-> obj cloud-verts a3-3 quad))
        (set! (-> a1-28 3 quad) (-> obj cloud-col0 a2-7 quad))
        (set! (-> a1-28 4 quad) (-> obj cloud-st0 a2-7 quad))
        (set! (-> a1-28 5 quad) (-> obj cloud-verts a2-7 quad))
        )
      (&+! (-> arg0 base) 96)
      )
    )
  (dotimes (v1-49 5)
    (let ((a0-51 (the-as (inline-array vector4w) (-> arg0 base))))
      (set! (-> a0-51 0 quad) (-> obj cloud-tmpl dma-vif quad))
      (set! (-> a0-51 1 quad) (-> obj cloud-tmpl quad 1))
      )
    (&+! (-> arg0 base) 32)
    (dotimes (a0-54 6)
      (let ((a3-13 (+ (* 6 v1-49) a0-54))
            (a2-12 (+ (* 6 (+ v1-49 1)) a0-54))
            (a1-37 (the-as (inline-array vector4w) (-> arg0 base)))
            )
        (set! (-> a1-37 0 quad) (-> obj cloud-col1 a3-13 quad))
        (set! (-> a1-37 1 quad) (-> obj cloud-st1 a3-13 quad))
        (set! (-> a1-37 2 quad) (-> obj cloud-verts a3-13 quad))
        (set! (-> a1-37 3 quad) (-> obj cloud-col1 a2-12 quad))
        (set! (-> a1-37 4 quad) (-> obj cloud-st1 a2-12 quad))
        (set! (-> a1-37 5 quad) (-> obj cloud-verts a2-12 quad))
        )
      (&+! (-> arg0 base) 96)
      )
    )
  0
  (none)
  )

(defmethod ocean-method-89 ocean ((obj ocean) (arg0 dma-buffer))
  (set-display-gs-state arg0 (the-as int (+ (-> *ocean-texture-base* vram-page) 8)) 64 64 0 0)
  (vector-float*! (-> obj sky-color) (-> *time-of-day-context* current-sky-color) 0.25)
  (+! (-> obj sky-color x) (* 0.5 (- (-> obj sky-color z) (-> obj sky-color x))))
  (+! (-> obj sky-color y) (* 0.5 (- (-> obj sky-color z) (-> obj sky-color y))))
  (let* ((v1-6 arg0)
         (a0-4 (the-as object (-> v1-6 base)))
         )
    (set! (-> (the-as dma-packet a0-4) dma) (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-4) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-4) vif1) (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-6 base) (&+ (the-as pointer a0-4) 16))
    )
  (let* ((v1-7 arg0)
         (a0-6 (the-as object (-> v1-7 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-6) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x3))
    (set! (-> (the-as gs-gif-tag a0-6) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-7 base) (&+ (the-as pointer a0-6) 16))
    )
  (let* ((v1-8 arg0)
         (a0-8 (-> v1-8 base))
         )
    (set! (-> (the-as (pointer gs-test) a0-8) 0)
          (new 'static 'gs-test :ate #x1 :atst (gs-atest always) :zte #x1 :ztst (gs-ztest always))
          )
    (set! (-> (the-as (pointer gs-reg64) a0-8) 1) (gs-reg64 test-1))
    (set! (-> (the-as (pointer gs-alpha) a0-8) 2) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) a0-8) 3) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer uint64) a0-8) 4) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) a0-8) 5) (gs-reg64 texflush))
    (set! (-> v1-8 base) (&+ a0-8 48))
    )
  (let ((v1-9 (the-as object (-> arg0 base))))
    (let ((a1-13 (-> obj sky-color)))
      (set! (-> (the-as (inline-array vector4w) v1-9) 0 quad) (-> obj sprite-tmpl2 dma-vif quad))
      (set! (-> (the-as (inline-array vector4w) v1-9) 1 quad) (-> obj sprite-tmpl2 quad 1))
      (set-vector!
        (-> (the-as (inline-array vector4w) v1-9) 2)
        (the int (-> a1-13 x))
        (the int (-> a1-13 y))
        (the int (-> a1-13 z))
        128
        )
      )
    (let ((a0-13 (the-as (inline-array vector4w) (&+ (the-as pointer v1-9) 48))))
      (set! (-> a0-13 0 x) 0)
      (set! (-> a0-13 0 y) 0)
      (set! (-> a0-13 0 z) #xffffff)
      (set! (-> a0-13 0 w) 0)
      )
    (let ((v1-10 (the-as (inline-array vector4w) (-> (the-as (inline-array vector4w) v1-9) 4))))
      (set! (-> v1-10 0 x) 1024)
      (set! (-> v1-10 0 y) 1024)
      (set! (-> v1-10 0 z) #xffffff)
      (set! (-> v1-10 0 w) 0)
      )
    )
  (&+! (-> arg0 base) 80)
  (let* ((v1-13 arg0)
         (a0-17 (the-as object (-> v1-13 base)))
         )
    (set! (-> (the-as dma-packet a0-17) dma) (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-17) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-17) vif1) (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-13 base) (&+ (the-as pointer a0-17) 16))
    )
  (let* ((v1-14 arg0)
         (a0-19 (the-as object (-> v1-14 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-19) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x3))
    (set! (-> (the-as gs-gif-tag a0-19) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-14 base) (&+ (the-as pointer a0-19) 16))
    )
  (let* ((v1-15 arg0)
         (a0-21 (-> v1-15 base))
         )
    (set! (-> (the-as (pointer gs-xy-offset) a0-21) 0) (new 'static 'gs-xy-offset :ofx #x200 :ofy #x200))
    (set! (-> (the-as (pointer gs-reg64) a0-21) 1) (gs-reg64 xyoffset-1))
    (set! (-> (the-as (pointer gs-texa) a0-21) 2) (new 'static 'gs-texa :ta1 #x80))
    (set! (-> (the-as (pointer gs-reg64) a0-21) 3) (gs-reg64 texa))
    (set! (-> (the-as (pointer uint64) a0-21) 4) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) a0-21) 5) (gs-reg64 texflush))
    (set! (-> v1-15 base) (&+ a0-21 48))
    )
  (let ((v1-16 (the-as adgif-shader (-> arg0 base))))
    (set! (-> v1-16 quad 0 quad) (-> obj adgif-tmpl dma-vif quad))
    (set! (-> v1-16 quad 1 quad) (-> obj adgif-tmpl quad 1))
    (let ((s4-0 (&-> v1-16 miptbp1)))
      (adgif-shader<-texture-simple!
        (the-as adgif-shader s4-0)
        (lookup-texture-by-id-fast (new 'static 'texture-id :index #x4 :page #x475))
        )
      (set! (-> s4-0 8) (new 'static 'gs-miptbp :tbp1 #x48))
      )
    )
  (&+! (-> arg0 base) 112)
  (let ((s4-1 (-> *sky-work* upload-data))
        (a3-1 (new 'stack 'vector4w))
        )
    (let ((a0-28 (-> obj cloud-lights sun0-color)))
      (set-vector!
        a3-1
        (the int (* 128.0 (-> a0-28 x)))
        (the int (* 80.0 (-> a0-28 y)))
        (the int (* 32.0 (-> a0-28 z)))
        1
        )
      )
    (ocean-method-84 obj arg0 s4-1 a3-1 80.0)
    )
  (let ((s4-2 (-> *sky-work* upload-data sun 1))
        (a3-2 (new 'stack 'vector4w))
        )
    (let ((a0-32 (-> obj cloud-lights sun1-color)))
      (set-vector!
        a3-2
        (the int (* 255.0 (-> a0-32 x)))
        (the int (* 255.0 (-> a0-32 y)))
        (the int (* 255.0 (-> a0-32 z)))
        1
        )
      )
    (ocean-method-84 obj arg0 (the-as sky-upload-data s4-2) a3-2 64.0)
    )
  (let ((v1-30 (the-as adgif-shader (-> arg0 base))))
    (set! (-> v1-30 quad 0 quad) (-> obj adgif-tmpl dma-vif quad))
    (set! (-> v1-30 quad 1 quad) (-> obj adgif-tmpl quad 1))
    (let ((s4-3 (&-> v1-30 miptbp1)))
      (adgif-shader<-texture-simple!
        (the-as adgif-shader s4-3)
        (lookup-texture-by-id-fast (new 'static 'texture-id :index #x1 :page #x475))
        )
      (set! (-> s4-3 8) (new 'static 'gs-miptbp :tbp1 #x44))
      )
    )
  (&+! (-> arg0 base) 112)
  (let ((a2-3 (-> *sky-work* upload-data moon))
        (a3-3 (new 'static 'vector4w :x 80 :y 80 :z 80))
        )
    (ocean-method-84 obj arg0 (the-as sky-upload-data a2-3) a3-3 48.0)
    )
  (ocean-method-85 obj arg0)
  (ocean-method-88 obj arg0)
  (set-display-gs-state arg0 (the-as int (-> *ocean-envmap-texture-base* vram-page)) 64 64 0 0)
  (ocean-method-83 obj arg0 32768.0)
  (let* ((v1-44 arg0)
         (a0-44 (the-as object (-> v1-44 base)))
         )
    (set! (-> (the-as dma-packet a0-44) dma) (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-44) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-44) vif1) (new 'static 'vif-tag :imm #x7 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-44 base) (&+ (the-as pointer a0-44) 16))
    )
  (let* ((v1-45 arg0)
         (a0-46 (the-as object (-> v1-45 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-46) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x6))
    (set! (-> (the-as gs-gif-tag a0-46) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-45 base) (&+ (the-as pointer a0-46) 16))
    )
  (let* ((s4-4 arg0)
         (s3-2 (-> s4-4 base))
         )
    (set! (-> (the-as (pointer gs-alpha) s3-2) 0) (new 'static 'gs-alpha :b #x1 :d #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 1) (gs-reg64 alpha-1))
    (set! (-> (the-as (pointer gs-tex0) s3-2) 2)
          (new 'static 'gs-tex0
            :tbw #x1
            :tcc #x1
            :th (log2 32)
            :tw (log2 64)
            :tbp0 (-> *ocean-envmap-texture-base* vram-block)
            )
          )
    (set! (-> (the-as (pointer gs-reg64) s3-2) 3) (gs-reg64 tex0-1))
    (set! (-> (the-as (pointer gs-tex1) s3-2) 4) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 5) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer gs-clamp) s3-2) 6)
          (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          )
    (set! (-> (the-as (pointer gs-reg64) s3-2) 7) (gs-reg64 clamp-1))
    (set! (-> (the-as (pointer gs-rgbaq) s3-2) 8) (new 'static 'gs-rgbaq :r #x80 :g #x80 :b #x80 :a #x80 :q 1.0))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 9) (gs-reg64 rgbaq))
    (set! (-> (the-as (pointer uint64) s3-2) 10) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) s3-2) 11) (gs-reg64 texflush))
    (set! (-> s4-4 base) (&+ s3-2 96))
    )
  (let* ((v1-63 arg0)
         (a0-54 (the-as object (-> v1-63 base)))
         )
    (set! (-> (the-as dma-packet a0-54) dma) (new 'static 'dma-tag :qwc #x3 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a0-54) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a0-54) vif1) (new 'static 'vif-tag :imm #x3 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-63 base) (&+ (the-as pointer a0-54) 16))
    )
  (let* ((v1-64 arg0)
         (a0-56 (the-as object (-> v1-64 base)))
         )
    (set! (-> (the-as gs-gif-tag a0-56) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x2))
    (set! (-> (the-as gs-gif-tag a0-56) regs) GIF_REGS_ALL_AD)
    (set! (-> v1-64 base) (&+ (the-as pointer a0-56) 16))
    )
  (let* ((v1-65 arg0)
         (a0-58 (-> v1-65 base))
         )
    (set! (-> (the-as (pointer gs-tex1) a0-58) 0) (new 'static 'gs-tex1))
    (set! (-> (the-as (pointer gs-reg64) a0-58) 1) (gs-reg64 tex1-1))
    (set! (-> (the-as (pointer uint64) a0-58) 2) (the-as uint 0))
    (set! (-> (the-as (pointer gs-reg64) a0-58) 3) (gs-reg64 texflush))
    (set! (-> v1-65 base) (&+ a0-58 32))
    )
  (let ((v1-66 (the-as (inline-array vector4w) (-> arg0 base))))
    (set! (-> v1-66 0 quad) (-> obj sprite-tmpl dma-vif quad))
    (set! (-> v1-66 1 quad) (-> obj sprite-tmpl quad 1))
    (set-vector! (-> v1-66 2) 128 128 128 128)
    (set-vector! (-> v1-66 3) 8 520 0 0)
    (set-vector! (-> v1-66 4) 0 512 #xffffff 0)
    (set-vector! (-> v1-66 5) 1032 8 0 0)
    (let ((v1-67 (the-as object (-> v1-66 6))))
      (set! (-> (the-as (inline-array vector4w) v1-67) 0 x) 1024)
      (set! (-> (the-as vector4w v1-67) y) 1024)
      (set! (-> (the-as vector4w v1-67) z) #xffffff)
      (set! (-> (the-as vector4w v1-67) w) 0)
      )
    )
  (&+! (-> arg0 base) 112)
  (reset-display-gs-state *display* arg0)
  0
  (none)
  )

(defun-debug generate-cloud-verts ((arg0 int) (arg1 float))
  (let ((f30-0 8192.0)
        (f28-0 (/ 65536.0 (the float arg0)))
        )
    (dotimes (s4-0 arg0)
      (let* ((f26-0 (sin f30-0))
             (f0-1 (cos f30-0))
             (a2-0 (* (the int (+ 64.0 (* f26-0 arg1))) 16))
             (a3-0 (* (the int (+ 64.0 (* f0-1 arg1))) 16))
             )
        (format
          0
          "(new 'static 'vector4w :x #x~x :y #x~x :z #xffffff :w 0) ; ~f degrees~%"
          a2-0
          a3-0
          (* 0.005493164 f30-0)
          )
        )
      (+! f30-0 f28-0)
      )
    )
  #f
  )

(defun-debug generate-cloud-nrms ((arg0 int) (arg1 float))
  (let ((f30-0 8192.0)
        (f28-0 (/ 65536.0 (the float arg0)))
        )
    (dotimes (s4-0 arg0)
      (let ((f26-0 (sin f30-0))
            (f0-1 (cos f30-0))
            (s3-0 (new 'stack-no-clear 'vector))
            )
        (set-vector! s3-0 f26-0 arg1 f0-1 1.0)
        (vector-normalize! s3-0 1.0)
        (format
          0
          "(new 'static 'vector :x ~f :y ~f :z ~f :w 0) ; ~f degrees~%"
          (-> s3-0 x)
          (-> s3-0 y)
          (-> s3-0 z)
          (* 0.005493164 f30-0)
          )
        )
      (+! f30-0 f28-0)
      )
    )
  #f
  )

;; WARN: Return type mismatch gs-tex1 vs none.
(defun-debug set-ocean-lk ((arg0 int) (arg1 int))
  (let ((v1-0 *ocean*))
    (set! (-> v1-0 tex1 l) arg0)
    (set! (-> v1-0 tex1 k) arg1)
    (set! (-> v1-0 tex1-near l) arg0)
    (set! (-> v1-0 tex1-near k) arg1)
    )
  (none)
  )

(defun-debug set-ocean-normal-scale ((arg0 float))
  (let* ((v1-0 *ocean*)
         (f0-1 (/ -1.0 (* 4096.0 arg0)))
         (v0-0 (-> v1-0 scales))
         )
    (set! (-> v0-0 x) f0-1)
    (set! (-> v0-0 y) 255.0)
    (set! (-> v0-0 z) f0-1)
    (set! (-> v0-0 w) 128.0)
    v0-0
    )
  )
