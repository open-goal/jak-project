;;-*-Lisp-*-
(in-package goal)

;; name: water.gc
;; name in dgo: water
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(defun check-water-level-drop ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (and (< (-> arg2 y) (-> arg1 user-float)) (< (-> arg1 vel-sxvel y) 0.0))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (set-vector! gp-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
      (sound-play "water-drop" :position gp-0)
      (let ((t9-3 sp-launch-particles-var)
            (a0-4 *sp-particle-system-3d*)
            (a1-3 (-> *part-id-table* 501))
            (a2-2 *launch-matrix*)
            )
        (set! (-> a2-2 trans quad) (-> gp-0 quad))
        (t9-3 a0-4 a1-3 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defun check-water-level-drop-and-die ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (if (and (< (-> arg2 y) (-> arg1 user-float)) (< (-> arg1 vel-sxvel y) 0.0))
      (sp-kill-particle arg0 arg1)
      )
  (none)
  )

(defun check-water-level-drop-and-die-motion ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (if (and (< (-> arg2 y) (-> arg1 user-float)) (< (-> arg1 vel-sxvel y) 0.0))
      (sp-kill-particle arg0 arg1)
      )
  (sparticle-motion-blur arg0 arg1 arg2)
  (none)
  )

;; WARN: Return type mismatch symbol vs none.
(defun check-water-level-above-and-die ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (if (or (>= (-> arg2 y) (-> arg1 user-float)) (and *target* (>= (-> arg2 y) (-> *target* water height))))
      (sp-kill-particle arg0 arg1)
      )
  (none)
  )

(defpart 502
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 9.0)
    (:x (meters -0.25) (meters 0.5))
    (:y (meters -0.05) (meters 0.1))
    (:z (meters -0.25) (meters 0.5))
    (:scale-x (meters 0.1) (meters 0.1))
    (:scale-y (meters 0.05) (meters 0.05))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 24.0 40.0)
    (:vel-y (meters 0) (meters 0.006666667))
    (:accel-y (meters 0.00016666666) (meters 0.00016666666))
    (:friction 0.96)
    (:timer (seconds 5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-above-and-die)
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 503
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 0.1)
    (:x (meters -0.25) (meters 0.5))
    (:y (meters 0.15))
    (:z (meters -0.25) (meters 0.5))
    (:scale-x (meters 0.3) (meters 0.1))
    (:scale-y (meters 0.15) (meters 0.05))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0 24.0)
    (:vel-y (meters 0) (meters 0.006666667))
    (:accel-y (meters 0.00033333333))
    (:friction 0.96)
    (:timer (seconds 5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-above-and-die)
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 504
  :init-specs ((:texture (new 'static 'texture-id :index #x2c :page #xc))
    (:num 0.05)
    (:scale-x (meters 1.6) (meters 0.8))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y (meters 1.6) (meters 0.8))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0 16.0)
    (:scalevel-x (meters 0.004) (meters 0.0037333334))
    (:scalevel-y (meters 0.004) (meters 0.0037333334))
    (:timer (seconds 2.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.5) (seconds 0.997))
    (:next-launcher 505)
    )
  )

(defpart 506
  :init-specs ((:texture (new 'static 'texture-id :index #x2e :page #xc))
    (:num 0.06)
    (:x (meters 10))
    (:scale-x (meters 0.75) (meters 1.5))
    (:rot-y (degrees 0))
    (:scale-y (meters 0.75) (meters 1.5))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-x (meters 0.01) (meters 0.006666667))
    (:scalevel-x (meters 0.0033333334) (meters 0.004333333))
    (:scalevel-y (meters 0.0033333334) (meters 0.004333333))
    (:fade-a 0.7111111)
    (:friction 0.94)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.3))
    (:next-launcher 507)
    (:rotate-y (degrees 0))
    )
  )

(defpart 507
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.3) (seconds 0.397)) (:next-launcher 508))
  )

(defpart 508
  :init-specs ((:fade-a -0.21333334))
  )

(defpart 509
  :init-specs ((:texture (new 'static 'texture-id :index #x33 :page #xc))
    (:num 0.05 0.4)
    (:x (meters -0.75) (meters 1.5))
    (:z (meters -0.75) (meters 1.5))
    (:scale-x (meters 0.2) (meters 0.7))
    (:rot-y (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:scalevel-x (meters 0.0016666667) (meters 0.003))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.42666668)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.5))
    (:next-launcher 510)
    (:rotate-y (degrees 0))
    )
  )

(defpart 510
  :init-specs ((:fade-a 0.0) (:next-time (seconds 1.2)) (:next-launcher 511))
  )

(defpart 511
  :init-specs ((:fade-a -0.7111111))
  )

(defpartgroup group-part-water-splash
  :id 121
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 -12 0 14)
  :parts ((sp-item 514 :flags (is-3d) :period (seconds 3) :length (seconds 0.21))
    (sp-item 515 :period (seconds 3) :length (seconds 0.05))
    (sp-item 516 :flags (is-3d) :period (seconds 3) :length (seconds 0.05))
    (sp-item 517 :period (seconds 3) :length (seconds 0.05) :binding 512)
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 518 :flags (is-3d) :period (seconds 3) :length (seconds 0.05) :offset 60)
    (sp-item 519 :flags (is-3d) :period (seconds 3) :length (seconds 0.2) :offset 60)
    (sp-item 520 :period (seconds 3) :length (seconds 0.035) :offset 60 :binding 513)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 513 :flags (start-dead) :period (seconds 3) :length (seconds 0.4) :offset 60)
    (sp-item 521 :period (seconds 3) :length (seconds 0.017))
    (sp-item 521 :period (seconds 3) :length (seconds 0.05))
    (sp-item 521 :period (seconds 3) :length (seconds 0.135))
    (sp-item 522 :flags (launch-asap) :period (seconds 3) :length (seconds 0.017))
    )
  )

(defpartgroup group-part-water-splash-small
  :id 122
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 -12 0 14)
  :parts ((sp-item 514 :flags (is-3d) :period (seconds 3) :length (seconds 0.21))
    (sp-item 515 :period (seconds 3) :length (seconds 0.05))
    (sp-item 516 :flags (is-3d) :period (seconds 3) :length (seconds 0.05))
    (sp-item 517 :period (seconds 3) :length (seconds 0.035) :binding 512)
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    (sp-item 512 :flags (start-dead) :period (seconds 3) :length (seconds 0.4))
    )
  )

(defpart 512
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 0.2)
    (:x (meters -0.2) (meters 0.4))
    (:y (meters -0.2) (meters 0.4))
    (:scale-x (meters 0.05) (meters 0.15))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0 24.0)
    (:scalevel-x (meters 0.000033333334))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00040000002) (meters -0.00020000001))
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-drop-and-die)
    )
  )

(defpart 513
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 0.2)
    (:x (meters -0.2) (meters 0.4))
    (:y (meters -0.2) (meters 0.4))
    (:scale-x (meters 0.05) (meters 0.15))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0 24.0)
    (:scalevel-x (meters 0.000033333334))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00040000002) (meters -0.00020000001))
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-drop-and-die)
    )
  )

(defpart 519
  :init-specs ((:texture (new 'static 'texture-id :index #x2c :page #xc))
    (:num 0.05)
    (:scale-x (meters 0.080000006) (meters 0.32000002))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y (meters 0.080000006) (meters 0.32000002))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:scalevel-x (meters 0.004) (meters 0.0090666665))
    (:scalevel-y (meters 0.004) (meters 0.0090666665))
    (:fade-a 0.32)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.5))
    (:next-launcher 523)
    )
  )

(defpart 520
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 3.2)
    (:x (meters -0.2) (meters 0.4))
    (:y (meters -0.2) (meters 0.4))
    (:scale-x (meters 0.35) (meters 0.075))
    (:scale-y (meters 0.2) (meters 0.075))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0 24.0)
    (:vel-x (meters -0.002) (meters 0.004))
    (:vel-y (meters 0.018666666) (meters 0.0053333333))
    (:vel-z (meters -0.002) (meters 0.004))
    (:scalevel-x (meters -0.00066666666))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00080000004) (meters -0.00020000001))
    (:timer (seconds 3))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-drop)
    (:next-time (seconds 0.4))
    (:next-launcher 524)
    )
  )

(defpart 518
  :init-specs ((:texture (new 'static 'texture-id :index #x2d :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.24000001) (meters 0.71999997))
    (:rot-x (degrees 90))
    (:rot-y (degrees 0) (degrees 360))
    (:rot-z (degrees 0))
    (:scale-y (meters 0.8) (meters 1.7600001))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0 32.0)
    (:scalevel-y (meters 0.053333335) (meters 0.013333334))
    (:timer (seconds 0.8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat set-conerot))
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 525)
    )
  )

(defpart 525
  :init-specs ((:scalevel-y (meters 0.026666667)) (:next-time (seconds 0.067)) (:next-launcher 526))
  )

(defpart 526
  :init-specs ((:scalevel-y (meters 0)) (:fade-a -0.64) (:next-time (seconds 0.067)) (:next-launcher 527))
  )

(defpart 527
  :init-specs ((:scalevel-x (meters 0.0016666667))
    (:scalevel-y (meters -0.026666667))
    (:next-time (seconds 0.067))
    (:next-launcher 528)
    )
  )

(defpart 528
  :init-specs ((:scalevel-x (meters 0.0033333334)) (:scalevel-y (meters -0.053333335)))
  )

(defpart 516
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:birth-func 'birth-func-texture-group)
    (:num 3.0)
    (:scale-x (meters 1.6) (meters 0.8))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y (meters 1.6) (meters 0.8))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 48.0 16.0)
    (:scalevel-x (meters 0.004) (meters 0.0037333334))
    (:scalevel-y (meters 0.004) (meters 0.0037333334))
    (:timer (seconds 2.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32 10 0 0 #xc0c900 #xc03300 #xc02c00))
    (:next-time (seconds 0.5) (seconds 0.997))
    (:next-launcher 505)
    )
  )

(defpart 505
  :init-specs ((:fade-a -0.21333334))
  )

(defpart 517
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 3.2)
    (:x (meters 0.96000004))
    (:scale-x (meters 0.35) (meters 0.075))
    (:scale-y (meters 0.2) (meters 0.075))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0 24.0)
    (:vel-x (meters 0.0026666666) (meters 0.0053333333))
    (:vel-y (meters 0.016) (meters 0.0053333333))
    (:scalevel-x (meters -0.00066666666))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00080000004) (meters -0.00020000001))
    (:timer (seconds 3))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-drop)
    (:next-time (seconds 0.4))
    (:next-launcher 524)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 524
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y :copy scalevel-x))
  )

(defpart 515
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 8.0)
    (:x (meters 0.8))
    (:scale-x (meters 0.15) (meters 0.05))
    (:scale-y (meters 0.15) (meters 0.05))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 40.0 24.0)
    (:vel-x (meters 0.0026666666) (meters 0.0053333333))
    (:vel-y (meters 0.0053333333) (meters 0.0053333333))
    (:scalevel-x (meters -0.00033333333))
    (:scalevel-y (meters -0.00033333333))
    (:accel-y (meters -0.0005333334) (meters -0.00013333335))
    (:timer (seconds 1.25))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-drop-and-die)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 514
  :init-specs ((:texture (new 'static 'texture-id :index #x2d :page #xc))
    (:num 1.5)
    (:x (meters 0.16000001) (meters 0.16000001))
    (:scale-x (meters 0.32000002) (meters 0.96000004))
    (:rot-x (degrees 90))
    (:rot-y (degrees 90))
    (:rot-z (degrees 0))
    (:scale-y (meters 0.16000001) (meters 1.7600001))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 48.0 24.0)
    (:vel-x (meters 0.0026666666))
    (:scalevel-x (meters 0) (meters 0.0016666667))
    (:rotvel-x (degrees 0.2))
    (:scalevel-y (meters 0.04))
    (:timer (seconds 0.8))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat set-conerot))
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 529)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 529
  :init-specs ((:scalevel-x (meters 0))
    (:rotvel-x (degrees 0.16666667))
    (:scalevel-y (meters 0.016666668))
    (:next-time (seconds 0.067))
    (:next-launcher 530)
    )
  )

(defpart 530
  :init-specs ((:rotvel-x (degrees 0.13333334))
    (:scalevel-y (meters 0))
    (:fade-a -0.64)
    (:next-time (seconds 0.067))
    (:next-launcher 531)
    )
  )

(defpart 531
  :init-specs ((:rotvel-x (degrees 0.1))
    (:scalevel-y (meters -0.016666668))
    (:next-time (seconds 0.067))
    (:next-launcher 532)
    )
  )

(defpart 532
  :init-specs ((:rotvel-x (degrees 0.06666667)) (:scalevel-y (meters -0.033333335)))
  )

(defpart 522
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:scale-x (meters 6) (meters 0.1))
    (:rot-x (degrees 11.25))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g :copy r)
    (:b 255.0)
    (:a 0.0)
    (:scalevel-x (meters 0.16))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 1.0666667)
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow sp-cpuinfo-flag-21))
    (:userdata 10240.0)
    (:next-time (seconds 0.05))
    (:next-launcher 533)
    (:rotate-y (degrees 0))
    )
  )

(defpart 533
  :init-specs ((:fade-a -0.64))
  )

(defpart 521
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 12.0)
    (:y (meters 0))
    (:scale-x (meters 0.08) (meters 0.03))
    (:rot-x 4)
    (:scale-y :copy scale-x)
    (:r 32.0 32.0)
    (:g :copy r)
    (:b 64.0 32.0)
    (:a 128.0)
    (:omega (degrees 0.01575) (degrees 0.009))
    (:vel-y (meters 0.033333335) (meters 0.05))
    (:accel-y (meters -0.005) (meters -0.00066666666))
    (:friction 0.96 0.02)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-21))
    (:userdata -208896.0)
    (:func 'check-water-level-drop-motion)
    (:next-time (seconds 0) (seconds 0.58))
    (:next-launcher 63)
    (:conerot-x (degrees 15) (degrees 65))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters 1))
    )
  )

(defpart 63
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 534))
  )

(defpart 534
  :init-specs ((:r 32.0 32.0) (:g 32.0 32.0) (:b 64.0 32.0) (:next-time (seconds 0) (seconds 1.497)) (:next-launcher 535))
  )

(defpart 501
  :init-specs ((:texture (new 'static 'texture-id :index #xc9 :page #xc))
    (:num 0.3)
    (:scale-x (meters 0.5) (meters 0.25))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 32.0 32.0)
    (:g :copy r)
    (:b 64.0 32.0)
    (:a 64.0 32.0)
    (:scalevel-x (meters 0.006666667) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.32 -0.32)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-21))
    (:userdata :data (new 'static 'boxed-array :type int32 10 0 0 #xc0c900 #xc02600 #xc03300 #xc02c00))
    (:func 'sparticle-texture-animate)
    (:rotate-y (degrees 0))
    )
  )

(defpart 536
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 0.0 0.5)
    (:scale-x (meters 0.08) (meters 0.03))
    (:rot-x 4)
    (:scale-y :copy scale-x)
    (:r 32.0 32.0)
    (:g :copy r)
    (:b 64.0 32.0)
    (:a 128.0)
    (:omega (degrees 0.01575) (degrees 0.009))
    (:vel-y (meters 0.026666667) (meters 0.05))
    (:accel-y (meters -0.005) (meters -0.00066666666))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-21))
    (:userdata -208896.0)
    (:func 'check-water-level-drop-and-die-motion)
    (:next-time (seconds 0) (seconds 0.33))
    (:next-launcher 63)
    (:conerot-x (degrees 30) (degrees 40))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0))
    )
  )

(defun check-water-level-drop-motion ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (and (< (-> arg2 y) (-> arg1 user-float)) (< (-> arg1 vel-sxvel y) 0.0))
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (set-vector! s3-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
      (sound-play "water-drop" :position s3-0)
      (let ((t9-3 sp-launch-particles-var)
            (a0-5 *sp-particle-system-3d*)
            (a1-3 (-> *part-id-table* 501))
            (a2-2 *launch-matrix*)
            )
        (set! (-> a2-2 trans quad) (-> s3-0 quad))
        (t9-3 a0-5 a1-3 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      (set! (-> *part-id-table* 536 init-specs 15 initial-valuef) (-> s3-0 y))
      (let ((t9-4 sp-launch-particles-var)
            (a0-6 *sp-particle-system-2d*)
            (a1-4 (-> *part-id-table* 536))
            (a2-3 *launch-matrix*)
            )
        (set! (-> a2-3 trans quad) (-> s3-0 quad))
        (t9-4 a0-6 a1-4 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      )
    )
  (sparticle-motion-blur arg0 arg1 arg2)
  (none)
  )

(defpart 537
  :init-specs ((:texture (new 'static 'texture-id :index #x21 :page #xc))
    (:num 1.0)
    (:scale-x (meters 0.15) (meters 0.05))
    (:rot-x 4)
    (:scale-y :copy scale-x)
    (:r 32.0 32.0)
    (:g :copy r)
    (:b 64.0 32.0)
    (:a 128.0)
    (:omega (degrees 0.0225) (degrees 0.0225))
    (:vel-x (meters -0.016666668) (meters 0.0016666667))
    (:vel-y (meters 0.016666668))
    (:vel-z (meters -0.016666668) (meters 0.0016666667))
    (:scalevel-x (meters -0.00016666666))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.001) (meters -0.00033333333))
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'check-water-level-drop-motion)
    (:next-time (seconds 2))
    (:next-launcher 538)
    )
  )

(defmethod water-control-method-9 water-control ((obj water-control))
  0
  (none)
  )

(defmethod water-control-method-10 water-control ((obj water-control))
  (local-vars
    (sv-272 (function vector entity-actor skeleton-group vector object none :behavior manipy))
    (sv-288 vector)
    (sv-304 entity-actor)
    )
  (with-pp
    (let ((s4-0 (-> obj flags))
          (s5-0 (new 'stack-no-clear 'water-info))
          )
      (when (logtest? (water-flags find-water) (-> obj flags))
        (water-info-init! (the-as collide-shape (-> obj process control)) s5-0 (collide-action solid semi-solid))
        (set! (-> obj flags)
              (logior (logclear
                        (-> obj flags)
                        (water-flags active can-wade can-swim can-ground use-ocean tar mud use-water-anim swamp over-water)
                        )
                      (logclear (-> s5-0 flags) (water-flags touch-water))
                      )
              )
        (set! (-> obj base-height) (-> s5-0 base-height))
        (set! (-> obj base-ocean-offset) (- (-> s5-0 trans y) (-> s5-0 base-height)))
        )
      (cond
        ((not (logtest? (-> obj flags) (water-flags active)))
         (logclear!
           (-> obj flags)
           (water-flags under-water head-under-water bouncing wading swimming touch-water jump-out break-surface)
           )
         )
        ((and (logtest? (-> obj flags) (water-flags no-grab-ground))
              (logtest? (-> obj process focus-status) (focus-status grabbed))
              )
         (set! (-> obj flags) (logior (water-flags jump-out) (-> obj flags)))
         (logclear! (-> obj flags) (water-flags break-surface))
         )
        ((begin
           (set! (-> obj top 1 quad) (-> obj top 0 quad))
           (vector<-cspace! (the-as vector (-> obj top)) (-> obj process node-list data (-> obj joint-index)))
           (+! (-> obj top 0 y) (-> obj top-y-offset))
           (set! (-> obj bottom 1 quad) (-> obj bottom 0 quad))
           (set! (-> obj bottom 0 quad) (-> obj process control trans quad))
           (logclear! (-> obj flags) (water-flags under-water head-under-water bouncing wading swimming break-surface))
           (set! (-> obj bob-offset) (update! (-> obj bob)))
           (cond
             ((logtest? (-> obj flags) (water-flags use-ocean use-water-anim))
              (if (not (logtest? (water-flags touch-water) (-> obj flags)))
                  (set! (-> obj ocean-offset) (-> obj base-ocean-offset))
                  (set! (-> obj ocean-offset) (lerp (-> obj ocean-offset) (-> obj base-ocean-offset) 0.2))
                  )
              (set! (-> obj base-ocean-offset) 0.0)
              )
             (else
               (set! (-> obj base-ocean-offset) 0.0)
               (set! (-> obj base-ocean-offset) 0.0)
               (set! (-> obj ocean-offset) 0.0)
               )
             )
           (if (logtest? (focus-status board pilot) (-> obj process focus-status))
               (set! (-> obj bob-offset) 0.0)
               )
           (set! (-> obj height)
                 (+ (-> obj base-height) (-> obj ocean-offset) (-> obj bob-offset) (-> obj align-offset))
                 )
           (set! (-> obj surface-height) (+ (-> obj base-height) (-> obj base-ocean-offset)))
           (cond
             ((logtest? (focus-status board pilot) (-> obj process focus-status))
              (set! (-> obj collide-height) (+ -819.2 (-> obj base-ocean-offset) (-> obj base-height)))
              )
             ((logtest? (-> obj flags) (water-flags swim-ground))
              (set! (-> obj collide-height) (- (-> obj height) (-> obj swim-height)))
              )
             (else
               (set! (-> obj collide-height) (- (-> obj height) (-> obj bottom-height)))
               )
             )
           (set! (-> obj swim-depth) (fmax 0.0 (- (- (-> obj surface-height) (-> obj swim-height)) (-> obj bottom 0 y))))
           (and (>= (-> obj height) (-> obj bottom 0 y)) (logtest? (water-flags touch-water) (-> s5-0 flags)))
           )
         (if (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status) (collide-status on-water))
             (set! (-> obj on-water-time) (current-time))
             )
         (when (not (logtest? (-> obj flags) (water-flags dark-eco lava)))
           (set! (-> obj drip-wetness) 1.0)
           (set! (-> obj drip-height) (fmax (- (-> obj surface-height) (-> obj bottom 0 y)) (-> obj drip-height)))
           (set! (-> obj drip-speed) 15.0)
           )
         (if (and (not (logtest? (water-flags touch-water) (-> obj flags)))
                  (not (logtest? (-> obj process focus-status) (focus-status touch-water)))
                  )
             (enter-water obj)
             )
         (set! (-> obj flags) (logior (water-flags touch-water) (-> obj flags)))
         (cond
           ((>= (-> obj top 0 y) (-> obj height))
            (let ((s3-0 (new 'stack-no-clear 'vector)))
              (set! (-> s3-0 quad) (-> obj bottom 0 quad))
              (let ((v1-79 (-> obj process control transv)))
                (sqrtf (+ (* (-> v1-79 x) (-> v1-79 x)) (* (-> v1-79 z) (-> v1-79 z))))
                )
              (set! (-> obj flags) (logior (water-flags break-surface) (-> obj flags)))
              (set! (-> s3-0 y) (+ 40.96 (-> obj surface-height)))
              (when (and (not (handle->process (-> obj ripple))) (>= (+ (current-time) (seconds -1.5)) (-> obj enter-water-time)))
                (let* ((s1-0 (get-process *default-dead-pool* manipy #x4000))
                       (s2-0
                         (when s1-0
                           (let ((t9-6 (method-of-type manipy activate)))
                             (t9-6 (the-as manipy s1-0) (-> obj process) (symbol->string (-> manipy symbol)) (the-as pointer #x70004000))
                             )
                           (let ((s2-1 run-function-in-process)
                                 (s0-0 s1-0)
                                 )
                             (set! sv-272 manipy-init)
                             (set! sv-288 s3-0)
                             (set! sv-304 (-> obj process entity))
                             (let ((t0-0 (art-group-get-by-name *level* "skel-generic-ripples" (the-as (pointer uint32) #f)))
                                   (t1-0 #f)
                                   (t2-0 0)
                                   )
                               ((the-as (function object object object object object object object none) s2-1)
                                s0-0
                                sv-272
                                sv-288
                                sv-304
                                t0-0
                                t1-0
                                t2-0
                                )
                               )
                             )
                           (-> s1-0 ppointer)
                           )
                         )
                       )
                  (set! (-> obj ripple) (ppointer->handle s2-0))
                  (when s2-0
                    (send-event (ppointer->process s2-0) 'anim-mode 'loop)
                    (send-event (ppointer->process s2-0) 'art-joint-anim "generic-ripples-cycle" 0)
                    (set-vector! (-> (the-as process-drawable (-> s2-0 0)) root scale) 0.0 0.5 0.0 1.0)
                    (send-event
                      (ppointer->process s2-0)
                      'trans-hook
                      (lambda :behavior process-drawable
                        ()
                        (let ((s5-0 (ppointer->process (-> self parent)))
                              (gp-0 (new 'stack-no-clear 'vector))
                              )
                          (set! (-> gp-0 quad) (-> (the-as process-drawable s5-0) water bottom 0 quad))
                          (seek! (-> self root scale x) 2.0 (* 2.0 (-> self clock seconds-per-frame)))
                          (set! (-> self root scale z) (-> self root scale x))
                          (set! (-> gp-0 y) (-> (the-as process-drawable s5-0) water surface-height))
                          (let ((v0-1 (-> self root trans)))
                            (set! (-> v0-1 quad) (-> gp-0 quad))
                            v0-1
                            )
                          )
                        )
                      )
                    )
                  )
                )
              (when (and (logtest? (-> obj process draw status) (draw-control-status on-screen))
                         (zero? (-> obj process draw cur-lod))
                         (logtest? (water-flags part-rings) (-> obj flags))
                         (logtest? (water-flags part-water) (-> obj flags))
                         )
                (let* ((f30-0 (y-angle (-> obj process control)))
                       (v1-141 (-> obj process control transv))
                       (f28-0 (sqrtf (+ (* (-> v1-141 x) (-> v1-141 x)) (* (-> v1-141 z) (-> v1-141 z)))))
                       )
                  (set! (-> *part-id-table* 506 init-specs 4 initial-valuef) (+ 24576.0 f30-0))
                  (set! (-> *part-id-table* 506 init-specs 19 initial-valuef) (+ 49152.0 f30-0))
                  (set! (-> *part-id-table* 506 init-specs 1 initial-valuef) (* 0.0000036621095 f28-0))
                  (set! (-> *part-id-table* 506 init-specs 2 initial-valuef) (* 0.1 f28-0))
                  (set! (-> *part-id-table* 506 init-specs 13 initial-valuef) 0.7111111)
                  (set! (-> *part-id-table* 506 init-specs 3 initial-valuef) (-> obj wake-size))
                  (set! (-> *part-id-table* 506 init-specs 5 initial-valuef) (-> obj wake-size))
                  (let ((t9-13 sp-launch-particles-var)
                        (a0-62 *sp-particle-system-3d*)
                        (a1-16 (-> *part-id-table* 506))
                        (a2-8 *launch-matrix*)
                        )
                    (set! (-> a2-8 trans quad) (-> s3-0 quad))
                    (t9-13 a0-62 a1-16 a2-8 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                    )
                  (set! (-> *part-id-table* 509 init-specs 1 initial-valuef) (* 0.000004150391 f28-0))
                  (set! (-> *part-id-table* 509 init-specs 18 initial-valuef) f30-0)
                  (let ((t9-14 sp-launch-particles-var)
                        (a0-63 *sp-particle-system-3d*)
                        (a1-17 (-> *part-id-table* 509))
                        (a2-9 *launch-matrix*)
                        )
                    (set! (-> a2-9 trans quad) (-> s3-0 quad))
                    (t9-14 a0-63 a1-17 a2-9 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                    )
                  (when (< f28-0 4096.0)
                    (set! (-> *part-id-table* 504 init-specs 2 random-rangef) (-> obj ripple-size))
                    (let ((t9-15 sp-launch-particles-var)
                          (a0-64 *sp-particle-system-3d*)
                          (a1-18 (-> *part-id-table* 504))
                          (a2-10 *launch-matrix*)
                          )
                      (set! (-> a2-10 trans quad) (-> s3-0 quad))
                      (t9-15 a0-64 a1-18 a2-10 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                      )
                    )
                  )
                )
              (if (< (-> obj top 1 y) (-> obj height))
                  (spawn-ripples obj 0.2 s3-0 1 (-> obj process control transv) #t)
                  )
              )
            )
           (else
             (set! (-> obj flags) (logior (water-flags head-under-water) (-> obj flags)))
             )
           )
         (when (and (logtest? (water-flags part-splash) (-> obj flags)) (logtest? (water-flags part-water) (-> obj flags)))
           (cond
             ((logtest? (-> obj flags) (water-flags lava))
              )
             ((logtest? (-> obj flags) (water-flags dark-eco))
              )
             ((logtest? (focus-status mech) (-> obj process focus-status))
              )
             (else
               (let* ((v0-17 (rand-vu-int-range 3 (+ (-> obj process node-list length) -1)))
                      (s3-1 (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj process node-list data v0-17)))
                      )
                 (when (< (-> s3-1 y) (-> obj surface-height))
                   (set! (-> *part-id-table* 502 init-specs 16 initial-valuef) (-> obj surface-height))
                   (let ((f0-72 (lerp-scale 12.0 0.4 (the float (- (current-time) (-> obj enter-water-time))) 0.0 600.0))
                         (f1-26 0.00012207031)
                         (v1-222 (-> obj process control transv))
                         )
                     (set! (-> *part-id-table* 502 init-specs 1 initial-valuef)
                           (+ f0-72 (* f1-26 (sqrtf (+ (* (-> v1-222 x) (-> v1-222 x)) (* (-> v1-222 z) (-> v1-222 z))))))
                           )
                     )
                   (let ((t9-20 sp-launch-particles-var)
                         (a0-75 *sp-particle-system-2d*)
                         (a1-26 (-> *part-id-table* 502))
                         (a2-14 *launch-matrix*)
                         )
                     (set! (-> a2-14 trans quad) (-> s3-1 quad))
                     (t9-20 a0-75 a1-26 a2-14 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                     )
                   (set! (-> *part-id-table* 503 init-specs 16 initial-valuef) (-> obj surface-height))
                   (let ((t9-21 sp-launch-particles-var)
                         (a0-76 *sp-particle-system-2d*)
                         (a1-27 (-> *part-id-table* 503))
                         (a2-15 *launch-matrix*)
                         )
                     (set! (-> a2-15 trans quad) (-> s3-1 quad))
                     (t9-21 a0-76 a1-27 a2-15 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                     )
                   )
                 )
               )
             )
           )
         (let ((f30-1 (- (+ (-> obj base-height) (-> obj ocean-offset) (-> obj bob-offset) (-> obj align-offset))
                         (-> obj swim-height)
                         )
                      )
               )
           (let* ((s3-2 (-> obj process control))
                  (v1-236 (if (type? s3-2 control-info)
                              s3-2
                              )
                          )
                  (v1-237 (and v1-236 (< (- (current-time) (-> v1-236 last-time-on-surface)) (seconds 0.5))))
                  )
             (if (and (logtest? (-> obj flags) (water-flags swim-ground))
                      (and v1-237
                           (not (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status) (collide-status on-water)))
                           )
                      )
                 (set! (-> obj bob amp) (* 0.8 (-> obj bob amp)))
                 )
             (cond
               ((and (logtest? (-> obj flags) (water-flags can-swim))
                     (or (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status) (collide-status on-water))
                         (>= f30-1 (-> obj bottom 0 y))
                         (and (logtest? (water-flags swimming) s4-0)
                              (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status) (collide-status touch-surface))
                              (not (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status) (collide-status on-surface))
                                   )
                              (>= (+ 204.8 f30-1) (-> obj bottom 0 y))
                              )
                         )
                     (or (logtest? (water-flags swimming) s4-0)
                         (let ((f0-84 12288.0)
                               (a0-112 (-> obj process control transv))
                               )
                           (< f0-84 (sqrtf (+ (* (-> a0-112 x) (-> a0-112 x)) (* (-> a0-112 z) (-> a0-112 z)))))
                           )
                         (< (+ (current-time) (seconds -0.2)) (-> obj enter-water-time))
                         (or (>= (+ (- 204.8 (fmin 6144.0 (+ (-> obj ocean-offset) (-> obj bob-offset) (-> obj align-offset)))) f30-1)
                                 (-> obj bottom 0 y)
                                 )
                             (and (-> obj process next-state) (= (-> obj process next-state name) 'target-hit-ground))
                             )
                         )
                     )
                (set! (-> obj swim-time) (current-time))
                (send-event (-> obj process) 'swim)
                (set! (-> obj flags) (logior (water-flags swimming) (-> obj flags)))
                (if (not (logtest? (water-flags swimming) s4-0))
                    (set! (-> obj enter-swim-time) (current-time))
                    )
                (cond
                  ((and (logtest? (-> obj flags) (water-flags swim-ground))
                        (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status) (collide-status touch-surface))
                        (not (logtest? (water-flags jump-out) (-> obj flags)))
                        )
                   (let ((v1-260 (new 'stack-no-clear 'vector)))
                     (set! (-> v1-260 quad) (-> obj bottom 0 quad))
                     (set! (-> v1-260 y) (- (-> obj height) (-> obj swim-height)))
                     (let ((s3-3 (the-as collide-shape-moving (-> obj process control))))
                       (when (and (not (logtest? (-> s3-3 status) (collide-status touch-background)))
                                  (logtest? (water-flags swimming) (-> obj flags))
                                  (not (logtest? (focus-status board pilot) (-> obj process focus-status)))
                                  )
                         (let ((a1-42 (vector-! (new 'stack-no-clear 'vector) v1-260 (-> (the-as control-info s3-3) trans))))
                           (vector-float*! a1-42 a1-42 (-> pp clock frames-per-second))
                           (integrate-and-collide! s3-3 a1-42)
                           )
                         (set! (-> (the-as control-info s3-3) status)
                               (logior (-> s3-3 status) (collide-status on-surface on-ground touch-surface on-water))
                               )
                         )
                       )
                     )
                   )
                  ((and (< (-> obj bottom 0 y) f30-1) (not (logtest? (water-flags jump-out) (-> obj flags))))
                   (logior! (-> obj flags) (water-flags under-water))
                   )
                  )
                )
               ((begin
                  (set! v1-237
                        (and (logtest? (-> obj flags) (water-flags can-wade))
                             (or (not (!= (-> obj bob amp) 0.0)) (>= (- (current-time) (-> obj swim-time)) (seconds 0.05)))
                             (and (>= (- (-> obj height) (-> obj wade-height)) (-> obj bottom 0 y)) v1-237)
                             )
                        )
                  v1-237
                  )
                (set! (-> obj wade-time) (current-time))
                (send-event (-> obj process) 'wade)
                (set! (-> obj flags) (logior (water-flags wading) (-> obj flags)))
                )
               ((and (< (-> obj bottom 0 y) f30-1) (not (logtest? (water-flags jump-out) (-> obj flags))))
                (logior! (-> obj flags) (water-flags under-water))
                )
               )
             )
           (when (and (logtest? (-> obj flags) (water-flags can-swim))
                      (< (-> obj bottom 1 y) f30-1)
                      (and (< f30-1 (-> obj bottom 0 y)) (logtest? s4-0 (water-flags under-water)))
                      )
             (set! (-> obj flags) (logior (water-flags swimming) (-> obj flags)))
             (let ((a1-47 (new 'stack-no-clear 'vector)))
               (set! (-> a1-47 quad) (-> obj bottom 0 quad))
               (let ((s4-1 (the-as collide-shape-moving (-> obj process control))))
                 (set! (-> a1-47 y) f30-1)
                 (when (not (logtest? (focus-status board pilot) (-> obj process focus-status)))
                   (let ((f30-2 (-> s4-1 ground-impact-vel)))
                     (move-to-ground-point s4-1 a1-47 (-> (the-as control-info s4-1) transv) *up-vector*)
                     (set! (-> (the-as control-info s4-1) status) (logior (-> s4-1 status) (collide-status on-water)))
                     (set! (-> (the-as control-info s4-1) ground-impact-vel) f30-2)
                     )
                   )
                 )
               )
             )
           )
         (when (= (-> obj process type) target)
           (cond
             ((logtest? (-> obj flags) (water-flags tar))
              (when (and (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status)
                                   (collide-status on-surface on-water)
                                   )
                         (not (logtest? (focus-status board pilot) (-> obj process focus-status)))
                         )
                (when (< (-> obj process control trans y) (+ -1228.8 (-> obj base-height)))
                  (send-event (-> obj process) 'no-look-around (seconds 1.5))
                  (when (not (logtest? (-> obj process focus-status) (focus-status flut)))
                    (let ((a1-51 (new 'stack-no-clear 'event-message-block)))
                      (set! (-> a1-51 from) (process->ppointer pp))
                      (set! (-> a1-51 num-params) 2)
                      (set! (-> a1-51 message) 'attack)
                      (set! (-> a1-51 param 0) (the-as uint #f))
                      (let ((v1-327 (new 'static 'attack-info :mask (attack-info-mask mode shove-back shove-up id))))
                        (set! (-> v1-327 id) (-> obj attack-id))
                        (set! (-> v1-327 shove-up) 2048.0)
                        (set! (-> v1-327 shove-back) 0.0)
                        (set! (-> v1-327 mode) 'tar)
                        (set! (-> a1-51 param 1) (the-as uint v1-327))
                        )
                      (send-event-function (-> obj process) a1-51)
                      )
                    )
                  (let ((v1-329 (-> obj process)))
                    (set! (-> v1-329 control surf) *tar-surface*)
                    (set! (-> v1-329 control ground-pat)
                          (copy-and-set-field (-> (the-as collide-shape-moving (-> v1-329 control)) ground-pat) material 4)
                          )
                    )
                  )
                (set! (-> obj swim-height) (lerp (-> obj swim-height) 7372.8 0.05))
                )
              )
             ((logtest? (-> obj flags) (water-flags lava))
              (when (logtest? (-> (the-as collide-shape-moving (-> obj process control)) status)
                              (collide-status on-surface on-water)
                              )
                (when (< (-> obj process control trans y) (+ -204.8 (-> obj base-height)))
                  (send-event (-> obj process) 'no-look-around (seconds 1.5))
                  (let ((a1-56 (new 'stack-no-clear 'event-message-block)))
                    (set! (-> a1-56 from) (process->ppointer pp))
                    (set! (-> a1-56 num-params) 2)
                    (set! (-> a1-56 message) 'attack)
                    (set! (-> a1-56 param 0) (the-as uint #f))
                    (let ((v1-350 (new 'static 'attack-info :mask (attack-info-mask intersection mode shove-back shove-up id))))
                      (set! (-> v1-350 id) (the-as uint 2))
                      (set! (-> v1-350 shove-up) 2048.0)
                      (set! (-> v1-350 shove-back) 0.0)
                      (set! (-> v1-350 mode) 'melt)
                      (set! (-> v1-350 intersection quad) (-> s5-0 trans quad))
                      (set! (-> a1-56 param 1) (the-as uint v1-350))
                      )
                    (send-event-function (-> obj process) a1-56)
                    )
                  )
                (set! (-> obj swim-height) (lerp (-> obj swim-height) 7372.8 0.05))
                )
              )
             ((and (logtest? (focus-status dark) (-> obj process focus-status))
                   (nonzero? (-> obj process darkjak))
                   (logtest? (-> obj process darkjak stage) 32)
                   )
              (set! (-> obj swim-height) 16384.0)
              )
             (else
               (set! (-> obj swim-height) 8192.0)
               )
             )
           )
         )
        (else
          (if (logtest? (water-flags touch-water) (-> obj flags))
              (water-control-method-16 obj)
              )
          )
        )
      )
    (when (not (or (not (logtest? (water-flags part-drip) (-> obj flags)))
                   (not (logtest? (water-flags part-water) (-> obj flags)))
                   (= (-> obj drip-wetness) 0.0)
                   )
               )
      (cond
        ((logtest? (water-flags spawn-drip) (-> obj flags))
         (let ((v0-34
                 (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj process node-list data (-> obj drip-joint-index)))
                 )
               )
           (set! (-> *part-id-table* 537 init-specs 18 initial-valuef) (-> obj surface-height))
           (set! (-> *part-id-table* 537 init-specs 10 initial-valuef) (* 0.05 (- (-> v0-34 x) (-> obj drip-old-pos x))))
           (set! (-> *part-id-table* 537 init-specs 11 initial-valuef) (* 0.05 (- (-> v0-34 y) (-> obj drip-old-pos y))))
           (set! (-> *part-id-table* 537 init-specs 12 initial-valuef) (* 0.05 (- (-> v0-34 z) (-> obj drip-old-pos z))))
           (let ((t9-35 sp-launch-particles-var)
                 (a0-208 *sp-particle-system-2d*)
                 (a1-61 (-> *part-id-table* 537))
                 (a2-22 *launch-matrix*)
                 )
             (set! (-> a2-22 trans quad) (-> v0-34 quad))
             (t9-35 a0-208 a1-61 a2-22 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
             )
           )
         (set! (-> obj drip-time) (current-time))
         (logclear! (-> obj flags) (water-flags spawn-drip))
         (seek! (-> obj drip-wetness) 0.0 (* 0.001 (-> obj drip-speed)))
         (set! (-> obj drip-speed) (* 1.05 (-> obj drip-speed)))
         (if (= (-> obj drip-wetness) 0.0)
             (set! (-> obj drip-height) 0.0)
             )
         )
        ((>= (- (current-time) (the-as time-frame (the int (/ (the float (-> obj drip-time)) (-> obj drip-mult)))))
             (the int (-> obj drip-speed))
             )
         (let* ((s5-1 (rand-vu-int-range 3 (+ (-> obj process node-list length) -1)))
                (v0-38 (vector<-cspace! (new 'stack-no-clear 'vector) (-> obj process node-list data s5-1)))
                )
           (when (and (< (- (-> v0-38 y) (-> obj process control trans y)) (-> obj drip-height))
                      (< (-> obj height) (-> v0-38 y))
                      )
             (set! (-> obj drip-joint-index) s5-1)
             (set! (-> obj drip-old-pos quad) (-> v0-38 quad))
             (set! (-> obj flags) (logior (water-flags spawn-drip) (-> obj flags)))
             )
           )
         )
        )
      )
    (if (and (not (logtest? (water-flags break-surface) (-> obj flags))) (handle->process (-> obj ripple)))
        (send-event (handle->process (-> obj ripple)) 'die)
        )
    0
    (none)
    )
  )

(defmethod start-bobbing! water-control ((obj water-control) (arg0 float) (arg1 int) (arg2 int))
  (with-pp
    (activate! (-> obj bob) (- arg0) arg1 arg2 0.9 1.0 (-> pp clock))
    0
    (none)
    )
  )

(defun part-water-splash-callback ((arg0 part-tracker))
  (let ((f1-0 (-> arg0 root trans y))
        (f0-0 (the-as float (-> arg0 userdata)))
        )
    (set! (-> *part-id-table* 521 init-specs 16 initial-valuef) f1-0)
    (set! (-> *part-id-table* 521 init-specs 1 initial-valuef) (* 12.0 f0-0))
    (set! (-> *part-id-table* 517 init-specs 16 initial-valuef) f1-0)
    (set! (-> *part-id-table* 520 init-specs 18 initial-valuef) f1-0)
    (set! (-> *part-id-table* 515 init-specs 16 initial-valuef) f1-0)
    (set! (-> *part-id-table* 512 init-specs 15 initial-valuef) f1-0)
    (set! (-> *part-id-table* 513 init-specs 15 initial-valuef) f1-0)
    (set! (-> *part-id-table* 512 init-specs 12 initial-valuef) (* 13.653334 (* -0.15 f0-0)))
    (set! (-> *part-id-table* 512 init-specs 12 random-rangef) (* 13.653334 (* -0.075 f0-0)))
    (set! (-> *part-id-table* 513 init-specs 12 initial-valuef) (* 13.653334 (* -0.15 f0-0)))
    (set! (-> *part-id-table* 513 init-specs 12 random-rangef) (* 13.653334 (* -0.075 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 2 initial-valuef) (* 4096.0 (* 0.1 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 2 random-rangef) (* 4096.0 (* 0.4 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 4 initial-valuef) (* 4096.0 (* 0.1 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 4 random-rangef) (* 4096.0 (* 0.4 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 9 initial-valuef) (* 13.653334 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 9 random-rangef) (* 13.653334 (* 3.4 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 10 initial-valuef) (* 13.653334 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 519 init-specs 10 random-rangef) (* 13.653334 (* 3.4 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 3 initial-valuef) (* 4096.0 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 3 random-rangef) (* 4096.0 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 5 initial-valuef) (* 4096.0 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 5 random-rangef) (* 4096.0 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 10 initial-valuef) (* 13.653334 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 10 random-rangef) (* 13.653334 (* 2.4 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 11 initial-valuef) (* 13.653334 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 516 init-specs 11 random-rangef) (* 13.653334 (* 2.4 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 1 initial-valuef) (* 0.5 f0-0))
    (set! (-> *part-id-table* 520 init-specs 2 initial-valuef) (* 4096.0 (* -0.25 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 2 random-rangef) (* 4096.0 (* 0.5 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 3 initial-valuef) (* 4096.0 (* -0.25 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 3 random-rangef) (* 4096.0 (* 0.5 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 10 initial-valuef) (* 13.653334 (* -0.75 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 10 random-rangef) (* 13.653334 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 12 initial-valuef) (* 13.653334 (* -0.75 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 12 random-rangef) (* 13.653334 (* 1.5 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 11 initial-valuef) (* 13.653334 (* 7.0 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 11 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 15 initial-valuef) (* 13.653334 (* -0.3 f0-0)))
    (set! (-> *part-id-table* 520 init-specs 15 random-rangef) (* 13.653334 (* -0.075 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 1 initial-valuef) (* 0.5 f0-0))
    (set! (-> *part-id-table* 517 init-specs 2 initial-valuef) (* 1.2 f0-0))
    (set! (-> *part-id-table* 517 init-specs 9 initial-valuef) (* 13.653334 f0-0))
    (set! (-> *part-id-table* 517 init-specs 9 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 10 initial-valuef) (* 13.653334 (* 6.0 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 10 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 13 initial-valuef) (* 13.653334 (* -0.3 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 13 random-rangef) (* 13.653334 (* -0.075 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 9 initial-valuef) (* 13.653334 f0-0))
    (set! (-> *part-id-table* 517 init-specs 9 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 10 initial-valuef) (* 13.653334 (* 6.0 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 10 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 13 initial-valuef) (* 13.653334 (* -0.3 f0-0)))
    (set! (-> *part-id-table* 517 init-specs 13 random-rangef) (* 13.653334 (* -0.075 f0-0)))
    (set! (-> *part-id-table* 515 init-specs 1 initial-valuef) (* 4.0 f0-0))
    (set! (-> *part-id-table* 515 init-specs 2 initial-valuef) (* 4096.0 f0-0))
    (set! (-> *part-id-table* 515 init-specs 9 initial-valuef) (* 13.653334 f0-0))
    (set! (-> *part-id-table* 515 init-specs 9 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 515 init-specs 10 initial-valuef) (* 13.653334 (* 6.0 f0-0)))
    (set! (-> *part-id-table* 515 init-specs 10 random-rangef) (* 13.653334 (* 2.0 f0-0)))
    (set! (-> *part-id-table* 515 init-specs 13 initial-valuef) (* 13.653334 (* -0.3 f0-0)))
    (set! (-> *part-id-table* 515 init-specs 13 random-rangef) (* 13.653334 (* -0.075 f0-0)))
    (set! (-> *part-id-table* 514 init-specs 2 initial-valuef) (* 4096.0 (* 1.2 f0-0)))
    (set! (-> *part-id-table* 514 init-specs 2 random-rangef) (* 4096.0 (* 0.2 f0-0)))
    (set! (-> *part-id-table* 514 init-specs 3 initial-valuef) (* 4096.0 (* 0.4 f0-0)))
    (set! (-> *part-id-table* 514 init-specs 3 random-rangef) (* 4096.0 (* 1.2 f0-0)))
    (set! (-> *part-id-table* 514 init-specs 7 initial-valuef) (* 4096.0 (* 0.2 f0-0)))
    (set! (-> *part-id-table* 514 init-specs 7 random-rangef) (* 4096.0 (* 2.2 f0-0)))
    (set! (-> *part-id-table* 518 init-specs 2 initial-valuef) (* 4096.0 (* 0.3 f0-0)))
    (set! (-> *part-id-table* 518 init-specs 2 random-rangef) (* 4096.0 (* 0.9 f0-0)))
    (set! (-> *part-id-table* 518 init-specs 6 initial-valuef) (* 4096.0 f0-0))
    (set! (-> *part-id-table* 518 init-specs 6 random-rangef) (* 4096.0 (* 2.2 f0-0)))
    )
  0
  (none)
  )

(defmethod enter-water water-control ((obj water-control))
  (with-pp
    (set! (-> obj flags) (logior (water-flags touch-water) (-> obj flags)))
    (logclear! (-> obj flags) (water-flags jump-out))
    (set! (-> obj enter-water-time) (current-time))
    (set-vector! (-> obj enter-water-pos) (-> obj bottom 0 x) (-> obj surface-height) (-> obj bottom 0 z) 1.0)
    (when (and (logtest? (water-flags part-splash) (-> obj flags)) (logtest? (water-flags part-water) (-> obj flags)))
      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-1 from) (process->ppointer pp))
        (set! (-> a1-1 num-params) 1)
        (set! (-> a1-1 message) 'query)
        (set! (-> a1-1 param 0) (the-as uint 'ground-height))
        (let* ((f0-4 (the-as float (send-event-function (-> obj process) a1-1)))
               (f30-0 (lerp-scale 0.3 1.0 f0-4 2048.0 24576.0))
               )
          (when (not (logtest? (-> obj flags) (water-flags dark-eco lava)))
            (if (nonzero? (-> obj process skel effect))
                (sound-play "swim-enter")
                )
            (spawn-ripples obj f30-0 (-> obj enter-water-pos) 1 (-> obj process control transv) #t)
            )
          )
        )
      )
    (if (logtest? (-> obj flags) (water-flags tar lava))
        (set! (-> obj swim-height) 2867.2)
        )
    0
    (none)
    )
  )

(defmethod water-control-method-16 water-control ((obj water-control))
  (logclear! (-> obj flags) (water-flags touch-water))
  (set-zero! (-> obj bob))
  (if (logtest? (-> obj flags) (water-flags tar lava))
      (set! (-> obj swim-height) 2867.2)
      )
  0
  (none)
  )

(defun splash-spawn ((arg0 float) (arg1 vector) (arg2 int))
  (let ((s5-0 (get-process *default-dead-pool* part-tracker #x4000)))
    (when s5-0
      (let ((t9-1 (method-of-type part-tracker activate)))
        (t9-1
          (the-as part-tracker s5-0)
          *entity-pool*
          (symbol->string (-> part-tracker symbol))
          (the-as pointer #x70004000)
          )
        )
      (let ((t9-2 run-function-in-process)
            (a0-3 s5-0)
            (a1-3 part-tracker-init)
            (a2-5 (if (zero? arg2)
                      (-> *part-group-id-table* 122)
                      (-> *part-group-id-table* 121)
                      )
                  )
            (a3-1 0)
            (t0-0 part-water-splash-callback)
            (t2-0 #f)
            (t3-0 *launch-matrix*)
            )
        (set! (-> t3-0 trans quad) (-> arg1 quad))
        ((the-as (function object object object object object object object object none) t9-2)
         a0-3
         a1-3
         a2-5
         a3-1
         t0-0
         arg0
         t2-0
         t3-0
         )
        )
      (-> s5-0 ppointer)
      )
    )
  0
  (none)
  )

(defun rings-water-spawn ((arg0 float) (arg1 vector) (arg2 vector) (arg3 float) (arg4 float))
  (let* ((v1-0 arg2)
         (f30-0 (sqrtf (+ (* (-> v1-0 x) (-> v1-0 x)) (* (-> v1-0 z) (-> v1-0 z)))))
         )
    (set! (-> *part-id-table* 506 init-specs 4 initial-valuef) (+ 24576.0 arg0))
    (set! (-> *part-id-table* 506 init-specs 19 initial-valuef) (+ 49152.0 arg0))
    (set! (-> *part-id-table* 506 init-specs 1 initial-valuef) (* 0.0000036621095 f30-0))
    (set! (-> *part-id-table* 506 init-specs 2 initial-valuef) (* 0.1 f30-0))
    (set! (-> *part-id-table* 506 init-specs 13 initial-valuef) 0.7111111)
    (set! (-> *part-id-table* 506 init-specs 3 initial-valuef) arg3)
    (set! (-> *part-id-table* 506 init-specs 5 initial-valuef) arg3)
    (let ((t9-0 sp-launch-particles-var)
          (a0-1 *sp-particle-system-3d*)
          (a1-1 (-> *part-id-table* 506))
          (a2-1 *launch-matrix*)
          )
      (set! (-> a2-1 trans quad) (-> arg1 quad))
      (t9-0 a0-1 a1-1 a2-1 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
      )
    (set! (-> *part-id-table* 509 init-specs 1 initial-valuef) (* 0.000004150391 f30-0))
    (set! (-> *part-id-table* 509 init-specs 18 initial-valuef) arg0)
    (let ((t9-1 sp-launch-particles-var)
          (a0-2 *sp-particle-system-3d*)
          (a1-2 (-> *part-id-table* 509))
          (a2-2 *launch-matrix*)
          )
      (set! (-> a2-2 trans quad) (-> arg1 quad))
      (t9-1 a0-2 a1-2 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
      )
    (when (< f30-0 4096.0)
      (set! (-> *part-id-table* 504 init-specs 2 random-rangef) arg4)
      (let ((t9-2 sp-launch-particles-var)
            (a0-3 *sp-particle-system-3d*)
            (a1-3 (-> *part-id-table* 504))
            (a2-3 *launch-matrix*)
            )
        (set! (-> a2-3 trans quad) (-> arg1 quad))
        (t9-2 a0-3 a1-3 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      )
    )
  0
  (none)
  )

(defmethod spawn-ripples water-control ((obj water-control) (arg0 float) (arg1 vector) (arg2 int) (arg3 vector) (arg4 symbol))
  (when (and (logtest? (water-flags part-splash) (-> obj flags)) (logtest? (water-flags part-water) (-> obj flags)))
    (let ((s4-1 (vector+float*! (new 'stack-no-clear 'vector) arg1 arg3 0.05)))
      (set! (-> s4-1 y) (+ 40.96 (-> obj surface-height)))
      (if (>= (- (current-time) (-> obj distort-time)) (seconds 0.1))
          (splash-spawn arg0 s4-1 arg2)
          )
      (when (and arg4 (>= (- (current-time) (-> obj distort-time)) (seconds 0.3)))
        (set! (-> obj distort-time) (current-time))
        (let ((s3-1 (process-spawn
                      manipy
                      :init manipy-init
                      s4-1
                      (-> obj process entity)
                      (art-group-get-by-name *level* "skel-generic-ripples" (the-as (pointer uint32) #f))
                      #f
                      0
                      :to (-> obj process)
                      )
                    )
              )
          (when s3-1
            (send-event (ppointer->process s3-1) 'anim-mode 'play1)
            (send-event (ppointer->process s3-1) 'anim "idle")
            (let ((f0-4 (fmax 0.6 (fmin 1.0 (* 2.0 arg0)))))
              (set-vector! (-> (the-as process-drawable (-> s3-1 0)) root scale) f0-4 0.5 f0-4 1.0)
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

(defun water-info<-region ((arg0 water-info) (arg1 drawable-region-prim) (arg2 collide-shape) (arg3 collide-action))
  (set! (-> arg0 flags) (water-flags))
  (set! (-> arg0 handle) (the-as handle #f))
  (set! (-> arg0 depth) 0.0)
  (let ((s2-0 (the-as object (-> arg1 region on-inside))))
    (set! s2-0 (cond
                 ((= (the-as symbol (-> (the-as pair s2-0) car)) 'water)
                  (empty)
                  s2-0
                  )
                 (else
                   (script-eval (the-as pair s2-0))
                   )
                 )
          )
    (let ((a0-4 (-> arg2 root-prim)))
      (when s2-0
        (set! (-> arg0 trans quad) (-> a0-4 prim-core world-sphere quad))
        (set-vector! (-> arg0 normal) 0.0 1.0 0.0 1.0)
        (set! (-> arg0 prim) arg1)
        (case (-> (the-as pair (-> (the-as pair s2-0) cdr)) car)
          (('height)
           (set! (-> arg0 flags) (water-flags active))
           (set! (-> arg0 trans y)
                 (* 4096.0 (command-get-float (-> (the-as pair (-> (the-as pair (-> (the-as pair s2-0) cdr)) cdr)) car) 0.0))
                 )
           (set! (-> arg0 base-height) (-> arg0 trans y))
           )
          (('ocean)
           (set! (-> arg0 flags) (water-flags active use-ocean))
           (set! (-> arg0 trans y) (get-height *ocean* (-> arg0 trans) #f))
           (set! (-> arg0 base-height) (get-base-height *ocean-map*))
           (when (= (-> arg0 trans y) 4095996000.0)
             (set! (-> arg0 flags) (water-flags))
             0
             )
           )
          (('water-anim)
           (let* ((s0-0 (command-get-process
                          (-> (the-as pair (-> (the-as pair (-> (the-as pair s2-0) cdr)) cdr)) car)
                          (the-as process #f)
                          )
                        )
                  (s1-0 (if (type? s0-0 process-drawable)
                            s0-0
                            )
                        )
                  )
             (cond
               (s1-0
                 (set! (-> arg0 flags) (water-flags active use-water-anim))
                 (set! (-> arg0 trans y) (ripple-find-height (the-as process-drawable s1-0) 0 (-> arg0 trans)))
                 (set! (-> arg0 handle) (process->handle s1-0))
                 (set! (-> arg0 base-height) (-> (the-as process-drawable s1-0) root trans y))
                 )
               (else
                 (set! (-> arg0 flags) (water-flags))
                 0
                 )
               )
             )
           )
          )
        (when (logtest? (-> arg0 flags) (water-flags active))
          (let* ((s2-1 (-> (the-as pair (-> (the-as pair (-> (the-as pair (-> (the-as pair s2-0) cdr)) cdr)) cdr)) car))
                 (v1-39 (-> (the-as pair s2-1) car))
                 )
            (while (not (null? s2-1))
              (cond
                ((= v1-39 'swim)
                 (logior! (-> arg0 flags) (water-flags can-swim can-ground))
                 )
                ((= v1-39 'wade)
                 (logior! (-> arg0 flags) (water-flags can-wade can-ground))
                 )
                ((= v1-39 'event)
                 (set! (-> arg0 flags) (logior (water-flags event) (-> arg0 flags)))
                 )
                ((= v1-39 'tar)
                 (logior! (-> arg0 flags) (water-flags tar))
                 )
                ((= v1-39 'darkeco)
                 (logior! (-> arg0 flags) (water-flags dark-eco))
                 )
                ((= v1-39 'lava)
                 (logior! (-> arg0 flags) (water-flags lava))
                 )
                ((= v1-39 'mech)
                 (let* ((s1-1 (-> arg2 process))
                        (a0-39 (if (type? s1-1 process-focusable)
                                   s1-1
                                   )
                               )
                        )
                   (when (and a0-39 (not (logtest? (focus-status mech) (-> (the-as process-focusable a0-39) focus-status))))
                     (set! (-> arg0 flags) (water-flags))
                     0
                     )
                   )
                 (logior! (-> arg0 extra-flags) 1)
                 )
                )
              (set! s2-1 (-> (the-as pair s2-1) cdr))
              (set! v1-39 (-> (the-as pair s2-1) car))
              )
            )
          (let ((s2-2 (-> arg2 root-prim)))
            (countdown (s1-2 (-> arg2 total-prims))
              (when (and (nonzero? (-> s2-2 prim-core prim-type))
                         (logtest? (-> s2-2 prim-core action) arg3)
                         (nonzero? (-> s2-2 prim-core collide-with))
                         )
                (set! (-> (scratchpad-object region-prim-area) pos quad) (-> s2-2 prim-core world-sphere quad))
                (if (and (within-area? arg1 (scratchpad-object region-prim-area))
                         (begin
                           (set! (-> arg0 flags) (logior (water-flags over-water) (-> arg0 flags)))
                           (>= (-> arg0 trans y) (- (-> s2-2 prim-core world-sphere y) (-> s2-2 prim-core world-sphere w)))
                           )
                         )
                    (set! (-> arg0 flags) (logior (water-flags touch-water) (-> arg0 flags)))
                    )
                )
              (&+! s2-2 80)
              )
            )
          (if (and (logtest? (water-flags event) (-> arg0 flags)) (logtest? (water-flags touch-water) (-> arg0 flags)))
              (send-event (handle->process (-> arg0 handle)) 'water arg0 (-> arg2 process))
              )
          )
        )
      )
    )
  arg0
  )

(defmethod water-info-init! collide-shape ((obj collide-shape) (arg0 water-info) (arg1 collide-action))
  "Initialize a [[water-info]] with the currently loaded regions."
  (local-vars (sv-80 int))
  (let ((s3-0 (new 'stack 'water-info)))
    (set! (-> s3-0 flags) (water-flags))
    (set! (-> s3-0 handle) (the-as handle #f))
    (set! (-> arg0 flags) (water-flags))
    (set! (-> arg0 handle) (the-as handle #f))
    (set! (-> s3-0 extra-flags) (the-as uint 0))
    (set! (-> (scratchpad-object region-prim-area) region-prim-list num-items) 0)
    (set! (-> (scratchpad-object region-prim-area) region-inside-count) 0)
    (set! (-> (scratchpad-object region-prim-area) pos quad) (-> obj root-prim prim-core world-sphere quad))
    (dotimes (s2-0 (-> *level* length))
      (let ((v1-8 (-> *level* level s2-0)))
        (when (= (-> v1-8 status) 'active)
          (let ((s1-0 (-> v1-8 bsp region-trees)))
            (when (nonzero? s1-0)
              (let ((s0-0 (-> s1-0 length)))
                (set! sv-80 0)
                (let ((a0-10 (-> s1-0 sv-80)))
                  (while (< sv-80 s0-0)
                    (if (= (-> a0-10 name) 'water)
                        (collect-regions
                          a0-10
                          (the-as sphere (-> (scratchpad-object region-prim-area) pos))
                          0
                          (-> (scratchpad-object region-prim-area) region-prim-list)
                          )
                        )
                    (set! sv-80 (+ sv-80 1))
                    (set! a0-10 (-> s1-0 sv-80))
                    )
                  )
                )
              )
            )
          )
        )
      )
    (countdown (s2-1 (-> (scratchpad-object region-prim-area) region-prim-list num-items))
      (water-info<-region s3-0 (-> (scratchpad-object region-prim-area) region-prim-list items s2-1) obj arg1)
      (when (and (logtest? (-> s3-0 flags) (water-flags active))
                 (logtest? (water-flags touch-water) (-> s3-0 flags))
                 (not (logtest? (-> s3-0 extra-flags) 1))
                 )
        (mem-copy! (the-as pointer arg0) (the-as pointer s3-0) 60)
        (set! arg0 arg0)
        (goto cfg-27)
        )
      (if (and (logtest? (-> s3-0 flags) (water-flags active))
               (logtest? (water-flags touch-water over-water) (-> s3-0 flags))
               )
          (mem-copy! (the-as pointer arg0) (the-as pointer s3-0) 60)
          )
      )
    )
  (label cfg-27)
  arg0
  )
