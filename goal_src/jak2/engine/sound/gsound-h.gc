;;-*-Lisp-*-
(in-package goal)

;; name: gsound-h.gc
;; name in dgo: gsound-h
;; dgos: ENGINE, GAME

;; TODO: methods for ambient-sound.

(defenum sound-command
  :type uint16
  ; (load-bank)
  ; (load-music)
  ; (unload-bank)
  ; (play)
  ; (pause-sound)
  ; (stop-sound)
  ; (continue-sound)
  ; (set-param)
  ; (set-master-volume)
  ; (pause-group)
  ; (stop-group)
  ; (continue-group)
  ; (get-irx-version)
  ; (set-falloff-curve)
  ; (set-sound-falloff)
  ; (reload-info)
  ; (set-language)
  ; (set-flava)
  ; (set-reverb)
  ; (set-ear-trans)
  ; (shutdown)
  ; (list-sounds)
  ; (unload-music)
  ; (set-fps)
  )

(defenum sound-group
  :bitfield #t
  :type uint8
  (sfx)
  (sog1)
  (sog2)
  (sog3)
  (sog4)
  (sog5)
  (sog6)
  (sog7)
  ; (sfx)
  ; (music)
  ; (dialog)
  ; (sog3)
  ; (ambient)
  ; (sog5)
  ; (sog6)
  ; (sog7)
  )

(defenum sound-mask
  :bitfield #t
  :type uint16
  (volume)
  (pitch)
  (bend)
  (unused)
  (time)
  (trans)
  (fo-min)
  (fo-max)
  (fo-curve)
  )


;; DECOMP BEGINS

(deftype sound-stream-name (structure)
  ((name uint8 48 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-id (uint32)
  ()
  :method-count-assert 10
  :size-assert         #x4
  :flag-assert         #xa00000004
  (:methods
    (unused-9 () none 9)
    )
  )

(deftype sound-bank-id (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-name (uint128)
  ((lo uint64 :offset   0 :size  64)
   (hi uint64 :offset  64 :size  64)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-cmd (structure)
  ((rsvd1   uint16         :offset-assert   0)
   (command sound-command  :offset-assert   2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-play-params (structure)
  ((mask      uint16   :offset-assert   0)
   (pitch-mod int16    :offset-assert   2)
   (bend      int16    :offset-assert   4)
   (fo-min    int16    :offset-assert   6)
   (fo-max    int16    :offset-assert   8)
   (fo-curve  int8     :offset-assert  10)
   (priority  int8     :offset-assert  11)
   (volume    int32    :offset-assert  12)
   (trans     int32  3 :offset-assert  16)
   (group     uint8    :offset-assert  28)
   (reg       uint8  3 :offset-assert  29)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )


(deftype sound-rpc-bank-cmd (sound-rpc-cmd)
  ((bank-name sound-name  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-test-cmd (sound-rpc-cmd)
  ((ee-addr uint32  :offset-assert   4)
   (param0  uint16  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )

(deftype sound-rpc-sound-cmd (sound-rpc-cmd)
  ((id sound-id  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-group-cmd (sound-rpc-cmd)
  ((group sound-group  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-load-bank (sound-rpc-bank-cmd)
  ((ee-addr uint32  :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

(deftype sound-rpc-load-music (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-unload-bank (sound-rpc-bank-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype sound-rpc-play (sound-rpc-sound-cmd)
  ((name   sound-name                :offset-assert  16)
   (params sound-play-params :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(deftype sound-rpc-pause-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-stop-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-continue-sound (sound-rpc-sound-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-param (sound-rpc-sound-cmd)
  ((params    sound-play-params :inline :offset-assert   8)
   (auto-time int32                     :offset-assert  40)
   (auto-from int32                     :offset-assert  44)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype sound-rpc-set-master-volume (sound-rpc-group-cmd)
  ((volume int32  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype sound-rpc-pause-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-stop-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-continue-group (sound-rpc-group-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-get-irx-version (sound-rpc-cmd)
  ((major   uint32   :offset-assert   4)
   (minor   uint32   :offset-assert   8)
   (ee-addr pointer  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype sound-rpc-set-language (sound-rpc-cmd)
  ((lang uint32  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-stereo-mode (sound-rpc-cmd)
  ((mode int32  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype sound-rpc-set-reverb (sound-rpc-cmd)
  ((core   uint8   :offset-assert   4)
   (reverb int32   :offset-assert   8)
   (left   uint32  :offset-assert  12)
   (right  uint32  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

(deftype sound-rpc-set-ear-trans (sound-rpc-cmd)
  ((ear-trans1 int32 3 :offset-assert   4)
   (ear-trans0 int32 3 :offset-assert  16)
   (cam-trans  int32 3 :offset-assert  28)
   (cam-angle  int32   :offset-assert  40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

(deftype sound-rpc-set-flava (sound-rpc-cmd)
  ((flava      uint8  :offset-assert   4)
   (excitement uint8  :offset-assert   5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(deftype sound-rpc-set-midi-reg (sound-rpc-cmd)
  ((reg   int32  :offset-assert   4)
   (value int16  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xa
  :flag-assert         #x90000000a
  )

(deftype sound-rpc-shutdown (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-set-fps (sound-rpc-cmd)
  ((fps uint8  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x5
  :flag-assert         #x900000005
  )

(deftype sound-rpc-list-sounds (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-unload-music (sound-rpc-cmd)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype sound-rpc-union (structure)
  ((data              uint32                      20 :offset-assert   0)
   (load-bank         sound-rpc-load-bank            :offset          0)
   (unload-bank       sound-rpc-unload-bank          :offset          0)
   (play              sound-rpc-play                 :offset          0)
   (pause-sound       sound-rpc-pause-sound          :offset          0)
   (stop-sound        sound-rpc-stop-sound           :offset          0)
   (continue-sound    sound-rpc-continue-sound       :offset          0)
   (set-param         sound-rpc-set-param            :offset          0)
   (set-master-volume sound-rpc-set-master-volume    :offset          0)
   (pause-group       sound-rpc-pause-group          :offset          0)
   (stop-group        sound-rpc-stop-group           :offset          0)
   (continue-group    sound-rpc-continue-group       :offset          0)
   (get-irx-version   sound-rpc-get-irx-version      :offset          0)
   (set-language      sound-rpc-set-language         :offset          0)
   (set-reverb        sound-rpc-set-reverb           :offset          0)
   (set-ear-trans     sound-rpc-set-ear-trans        :offset          0)
   (set-flava         sound-rpc-set-flava            :offset          0)
   (set-midi-reg      sound-rpc-set-midi-reg         :offset          0)
   (set-fps           sound-rpc-set-fps              :offset          0)
   (shutdown          sound-rpc-shutdown             :offset          0)
   (list-sounds       sound-rpc-list-sounds          :offset          0)
   (unload-music      sound-rpc-unload-music         :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

(deftype sound-spec (basic)
  ((mask            sound-mask     :offset-assert   4)
   (num             float          :offset-assert   8)
   (group           sound-group    :offset-assert  12)
   (reg             uint8       3  :offset-assert  13)
   (sound-name-char uint8       16 :offset-assert  16)
   (sound-name      sound-name     :offset         16)
   (trans           int32       4  :offset-assert  32)
   (volume          int32          :offset-assert  48)
   (pitch-mod       int32          :offset-assert  52)
   (bend            int32          :offset-assert  56)
   (fo-min          int16          :offset-assert  60)
   (fo-max          int16          :offset-assert  62)
   (fo-curve        int8           :offset-assert  64)
   (priority        int8           :offset-assert  65)
   (auto-time       int32          :offset-assert  68)
   (auto-from       int32          :offset-assert  72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(define *current-sound-id* (the-as sound-id #x10000))

(deftype ambient-sound (basic)
  ((spec         sound-spec              :offset-assert   4)
   (playing-id   sound-id                :offset-assert   8)
   (trans        vector          :inline :offset-assert  16)
   (name         sound-name              :offset-assert  32)
   (play-time    time-frame              :offset-assert  48)
   (time-base    time-frame              :offset-assert  56)
   (time-random  time-frame              :offset-assert  64)
   (volume       int32                   :offset-assert  72)
   (pitch        int32                   :offset-assert  76)
   (falloff-near int32                   :offset-assert  80)
   (falloff-far  int32                   :offset-assert  84)
   (falloff-mode int32                   :offset-assert  88)
   (params       (pointer float)         :offset-assert  92)
   (param-count  int32                   :offset-assert  96)
   (entity       entity                  :offset-assert 100)
   (sound-count  int32                   :offset-assert 104)
   )
  :method-count-assert 16
  :size-assert         #x6c
  :flag-assert         #x100000006c
  (:methods
    (ambient-sound-method-9 () none 9)
    (ambient-sound-method-10 () none 10)
    (ambient-sound-method-11 () none 11)
    (ambient-sound-method-12 () none 12)
    (ambient-sound-method-13 () none 13)
    (ambient-sound-method-14 () none 14)
    (ambient-sound-method-15 () none 15)
    )
  )




