;;-*-Lisp-*-
(in-package goal)

;; name: gun-states.gc
;; name in dgo: gun-states
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(defstate target-gun-stance (target)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('gun)
       (let ((gp-0 (-> block param 0))
             (v0-0 (target-standard-event-handler proc argc message block))
             )
         (when v0-0
           (cond
             ((= gp-0 2)
              (if (logtest? (-> self game features) (game-feature gun-upgrade-speed))
                  (set! (-> self control unknown-word04) (the-as uint jakb-gun-red-fire-fast-ja))
                  (set! (-> self control unknown-word04) (the-as uint jakb-gun-red-fire-ja))
                  )
              )
             ((= gp-0 4)
              (set! (-> self control unknown-word04) (the-as uint jakb-gun-dark-fire-ja))
              )
             ((= gp-0 1)
              (set! (-> self control unknown-word04) (the-as uint jakb-gun-yellow-fire-low-ja))
              )
             ((= gp-0 3)
              (set! (-> self control unknown-word04) (the-as uint jakb-gun-blue-fire-single-ja))
              )
             )
           )
         v0-0
         )
       )
      (('wade)
       #f
       )
      (else
        (target-standard-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (logior! (-> self state-flags) (state-flags lleg-still rleg-still))
    (set! (-> self control mod-surface) *gun-walk-mods*)
    (set! (-> self control unknown-word04) (the-as uint #f))
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (set! (-> self control bend-target) 0.0)
    (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
    (target-state-hook-exit)
    (target-gun-exit)
    )
  :trans (behavior ()
    ((-> self state-hook))
    (when (= (-> self control ground-pat material) (pat-material ice))
      (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
      (set! (-> self control bend-target) 0.0)
      (remove-exit)
      (go target-ice-stance)
      )
    (when (or (move-legs?) (< 8192.0 (fabs (-> self gun gun-roty-rel))))
      (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
      (set! (-> self control bend-target) 0.0)
      (remove-exit)
      (go target-gun-walk)
      )
    (if (want-to-darkjak?)
        (go target-darkjak-get-on (darkjak-stage active))
        )
    (when (and (cpad-hold? (-> self control cpad number) l1) (can-duck?))
      (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
      (set! (-> self control bend-target) 0.0)
      (remove-exit)
      (go target-duck-stance #f)
      )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons x)
                       )
             (can-jump? #f)
             )
        (target-jump-go)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons circle)
                       )
             (can-feet? #t)
             )
        (go target-attack)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons square)
                       )
             (can-hands? #t)
             )
        (go target-running-attack)
        )
    (slide-down-test)
    (fall-test target-falling -4096000.0)
    )
  :code (behavior ()
    (local-vars (v1-232 object))
    (let ((gp-0 (-> self skel top-anim frame-targ)))
      (when (or (= gp-0 jakb-gun-red-takeout-ja)
                (= gp-0 jakb-gun-yellow-takeout-ja)
                (= gp-0 jakb-gun-blue-takeout-ja)
                (= gp-0 jakb-gun-dark-takeout-ja)
                )
        (ja-channel-push! 1 (seconds 0.1))
        (ja-no-eval :group! gp-0 :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        )
      )
    (while (using-gun? self)
      (let* ((v1-33 (-> self gun gun-type))
             (gp-1 (cond
                     ((= v1-33 (pickup-type eco-blue))
                      jakb-gun-stance-blue-ja
                      )
                     ((= v1-33 (pickup-type eco-yellow))
                      jakb-gun-stance-yellow-ja
                      )
                     ((= v1-33 (pickup-type eco-dark))
                      jakb-gun-stance-dark-ja
                      )
                     (else
                       jakb-gun-stance-ja
                       )
                     )
                   )
             )
        (cond
          ((ja-group? gp-1)
           )
          (else
            (let ((v1-50 (ja-group)))
              (cond
                ((and (and v1-50 (or (= v1-50 jakb-gun-stance-ja) (= v1-50 jakb-gun-stance-dark-ja)))
                      (or (= gp-1 jakb-gun-stance-ja) (= gp-1 jakb-gun-stance-dark-ja))
                      )
                 (ja-channel-push! 1 (seconds 0.1))
                 (ja-no-eval :group! jakb-gun-transformation-twirl-ja :num! (seek!) :frame-num 0.0)
                 (until (ja-done? 0)
                   (suspend)
                   (ja :num! (seek!))
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
                 )
                ((let ((v1-89 (ja-group)))
                   (and (and v1-89 (or (= v1-89 jakb-gun-stance-ja) (= v1-89 jakb-gun-stance-dark-ja)))
                        (or (= gp-1 jakb-gun-stance-yellow-ja) (= gp-1 jakb-gun-stance-blue-ja))
                        )
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (ja-no-eval :group! jakb-gun-front-to-side-hop-ja :num! (seek!) :frame-num 0.0)
                 (until (ja-done? 0)
                   (suspend)
                   (ja :num! (seek!))
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
                 )
                ((let ((v1-129 (ja-group)))
                   (and (and v1-129 (or (= v1-129 jakb-gun-stance-yellow-ja) (= v1-129 jakb-gun-stance-blue-ja)))
                        (or (= gp-1 jakb-gun-stance-ja) (= gp-1 jakb-gun-stance-dark-ja))
                        )
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (ja-no-eval :group! jakb-gun-side-to-front-hop-ja :num! (seek!) :frame-num 0.0)
                 (until (ja-done? 0)
                   (suspend)
                   (ja :num! (seek!))
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
                 )
                ((let ((v1-169 (ja-group)))
                   (and (and v1-169 (or (= v1-169 jakb-gun-stance-yellow-ja) (= v1-169 jakb-gun-stance-blue-ja)))
                        (or (= gp-1 jakb-gun-stance-blue-ja) (= gp-1 jakb-gun-stance-yellow-ja))
                        )
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (ja-no-eval :group! jakb-gun-blue-to-yellow-ja :num! (seek!) :frame-num 0.0)
                 (until (ja-done? 0)
                   (suspend)
                   (ja :num! (seek!))
                   )
                 (ja-channel-push! 1 (seconds 0.1))
                 (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
                 )
                (else
                  (ja-channel-push! 1 (seconds 0.1))
                  (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-1))
                  )
                )
              )
            )
          )
        )
      (suspend)
      (ja :num! (loop!))
      (when (can-play-stance-amibent?)
        (set-time! (-> self ambient-time))
        (target-gun-end-mode #t)
        )
      (cond
        ((not (-> self control unknown-spool-anim00))
         )
        ((= (-> self control unknown-spool-anim00) jakb-gun-dark-fire-ja)
         (ja-channel-push! 1 0)
         (ja :group! (-> self control unknown-spool-anim00))
         (suspend)
         ;; og:preserve-this
         ;(b! #t cfg-94) ; branch to the next instruction...
         (until (not v1-232)
           (let ((v1-231 (get-channel (-> self skel top-anim) 0)))
             (b! (not v1-231) cfg-101 :likely-delay (set! v1-232 v1-231))
             (let ((a1-30 (= (-> v1-231 frame-group) jakb-gun-dark-fire-ja)))
               (b! (not a1-30) cfg-101 :likely-delay (set! v1-232 a1-30))
               )
             (let ((a0-74 (-> self skel root-channel 0)))
               (set! (-> a0-74 num-func) num-func-identity)
               (let ((f0-36 (-> v1-231 frame-num)))
                 (set! (-> a0-74 frame-num) f0-36)
                 (let ((v1-233 f0-36))
                   (b! (not (the int v1-233)) cfg-101 :likely-delay (set! v1-232 v1-233))
                   )
                 )
               )
             )
           (suspend)
           (set! v1-232 0)
           (label cfg-101)
           )
         (set! (-> self control unknown-word04) (the-as uint #f))
         )
        (else
          (ja-channel-push! 1 0)
          (ja-no-eval :group! (-> self control unknown-spool-anim00) :num! (seek!) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!))
            )
          (set! (-> self control unknown-word04) (the-as uint #f))
          )
        )
      )
    (let ((gp-2 (-> self skel top-anim frame-targ)))
      (cond
        ((or (= gp-2 jakb-gun-red-takeout-ja) (= gp-2 jakb-gun-yellow-takeout-ja) (= gp-2 jakb-gun-dark-takeout-ja))
         (ja-channel-push! 1 (seconds 0.1))
         (ja-no-eval :group! gp-2 :num! (seek! 0.0) :frame-num max)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek! 0.0))
           )
         )
        ((= gp-2 jakb-gun-blue-takeout-ja)
         (ja-channel-push! 1 (seconds 0.1))
         (ja-no-eval :group! gp-2 :num! (seek! 0.0) :frame-num (ja-aframe -34.0 0))
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek! 0.0))
           )
         )
        )
      )
    (go target-stance)
    )
  :post target-gun-post
  )

(defstate target-gun-walk (target)
  :event target-standard-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self control mod-surface) *gun-walk-mods*)
    (case (-> self gun gun-type)
      (((pickup-type eco-yellow) (pickup-type eco-blue))
       (set! (-> self control unknown-word04) (the-as uint 0))
       0
       )
      (else
        (set! (-> self control unknown-word04) (the-as uint 1))
        )
      )
    )
  :exit (behavior ()
    (target-effect-exit)
    (target-state-hook-exit)
    (target-gun-exit)
    )
  :trans (behavior ()
    (cond
      ((zero? (-> self control unknown-spool-anim00))
       (case (-> self gun gun-type)
         (((pickup-type eco-red) (pickup-type eco-dark))
          (remove-exit)
          (go target-gun-walk)
          )
         )
       )
      (else
        (case (-> self gun gun-type)
          (((pickup-type eco-yellow) (pickup-type eco-blue))
           (remove-exit)
           (go target-gun-walk)
           )
          )
        )
      )
    ((-> self state-hook))
    (if (not (using-gun? self))
        (go target-walk)
        )
    (if (logtest? (water-flags wading) (-> self water flags))
        (go target-wade-walk)
        )
    (when (= (-> self control ground-pat material) (pat-material ice))
      (target-effect-exit)
      (remove-exit)
      (go target-ice-walk)
      )
    (when (not (or (move-legs?) (< 182.04445 (fabs (-> self gun gun-roty-rel)))))
      (target-effect-exit)
      (remove-exit)
      (go target-gun-stance)
      )
    (if (want-to-darkjak?)
        (go target-darkjak-get-on (darkjak-stage active))
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons l1)
                       )
             (and (!= (-> *cpad-list* cpads (-> self control cpad number) stick0-speed) 0.0) (can-roll?))
             )
        (go target-roll)
        )
    (when (and (cpad-hold? (-> self control cpad number) l1) (can-duck?))
      (target-effect-exit)
      (remove-exit)
      (go target-duck-walk #f)
      )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons x)
                       )
             (can-jump? #f)
             )
        (target-jump-go)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons circle)
                       )
             (can-feet? #t)
             )
        (go target-attack)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons square)
                       )
             (can-hands? #t)
             )
        (go target-running-attack)
        )
    (if (wall-hide?)
        (go target-hide)
        )
    (slide-down-test)
    (fall-test target-falling -4096000.0)
    )
  :code (behavior ()
    (target-walk-anim -300)
    )
  :post target-gun-post
  )
