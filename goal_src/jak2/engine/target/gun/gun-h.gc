;;-*-Lisp-*-
(in-package goal)

;; name: gun-h.gc
;; name in dgo: gun-h
;; dgos: ENGINE, GAME

(define-extern *setting-control* setting-control)
(define-extern can-exit-duck? (function symbol :behavior target))

;; DECOMP BEGINS

(deftype gun (process-drawable)
  ((control       basic         :offset 128)
   (shadow-backup basic         :offset 208)
   (read-scale    basic         :offset 212)
   (gun-type      pickup-type   :offset 216)
   (barrel        basic         :offset 220)
   (mag           basic       4 :offset 224)
   (mag-scale     float       4 :offset 240)
   )
  :heap-base #x80
  :method-count-assert 24
  :size-assert         #x100
  :flag-assert         #x1800800100
  (:methods
    (gun-method-20 () none 20)
    (gun-method-21 () none 21)
    (gun-method-22 () none 22)
    (gun-method-23 () none 23)
    )
  )

(deftype gun-info (basic)
  ((process                uint32                :offset   4)
   (gun                    uint32                :offset   8)
   (gun-pos                transformq    :inline :offset  16)
   (gun-trans              vector        :inline :offset  16)
   (gun-quat               quaternion            :offset  32)
   (gun-scale              vector        :inline :offset  48)
   (gun-type               pickup-type           :offset  64)
   (using-gun-type         pickup-type           :offset  68)
   (active?                symbol                :offset  72)
   (latch?                 symbol                :offset  76)
   (put-away?              symbol                :offset  80)
   (surpress-time          time-frame            :offset  88)
   (fire-time              time-frame            :offset  96)
   (gun-time               time-frame            :offset 104)
   (gun-get-on-time        time-frame            :offset 112)
   (active-time            time-frame            :offset 120)
   (fire-delay             uint32                :offset 128)
   (gun-control            uint32                :offset 132)
   (gun-target             uint32                :offset 136)
   (gun-daxter             float                 :offset 140)
   (gun-roty-rel           degrees               :offset 144)
   (gun-roty               degrees               :offset 148)
   (gun-roty-targ          degrees               :offset 152)
   (hips                   basic                 :offset 156)
   (upper-body             basic                 :offset 160)
   (chest                  basic                 :offset 164)
   (fire-dir-rot           degrees               :offset 168)
   (fire-dir               vector                :offset 176)
   (fire-point             vector                :offset 208)
   (fire-dir-backup        vector                :offset 224)
   (fire-dir-out           vector                :offset 240)
   (fire-pending           int32                 :offset 256)
   (fire-pending-time      time-frame            :offset 264)
   (fire-start-time        time-frame            :offset 272)
   (fire-charge            float                 :offset 280)
   (fire-spin              degrees               :offset 284)
   (fire-spinv             degrees               :offset 288)
   (fire-chamber           int32                 :offset 292)
   (fire-range             meters                :offset 296)
   (laser-active?          symbol                :offset 300)
   (laser-point            vector                :offset 304)
   (laser-dir              vector                :offset 320)
   (laser-hit-point        vector                :offset 352)
   (track?                 uint16                :offset 368)
   (track-tilt             degrees               :offset 372)
   (track-turn             degrees               :offset 376)
   (track-find-range       meters                :offset 380)
   (track-turnv-range      meters                :offset 384)
   (track-tilt-range       meters                :offset 388)
   (track-turn-range       meters                :offset 392)
   (track-tilt-max         degrees               :offset 396)
   (track-turn-max         degrees               :offset 400)
   (track-angle-mult       float                 :offset 404)
   (track-beam-size        float                 :offset 408)
   (track-auto-fire        symbol                :offset 412)
   (track-require          uint32                :offset 416)
   (track-target-hold-time time-frame            :offset 424)
   (track-start-time       time-frame            :offset 432)
   (track-press-start-time time-frame            :offset 440)
   (track-target           focus         2       :offset 448)
   (track-trans            vector                :offset 480)
   (track-dir              vector                :offset 496)
   (turn-fast-hold-time    time-frame            :offset 512)
   (blue-whine-sound-id    uint32                :offset 520)
   (blue-whine-volume      float                 :offset 524)
   (top-anim-twist         vector                :offset 528)
   (top-anim-twist-targ    vector                :offset 544)
   (top-anim-look-at       vector                :offset 560)
   (top-anim-twist-reset   uint64                :offset 576)
   (top-anim-gun-height    meters                :offset 584)
   (top-anim-blue-cycle    float                 :offset 588)
   (top-anim-low-high      float                 :offset 592)
   (top-anim-extra-twistv  degrees               :offset 596)
   (top-anim-tilt-up       degrees               :offset 600)
   (attack-combo           combo-tracker         :offset 608)
   (combo-window-start     time-frame            :offset 656)
   (combo-window-state     uint32                :offset 664)
   (combo-fire-delay       uint32                :offset 668)
   (charge-ammo            float                 :offset 672)
   (charge-start-time      time-frame            :offset 680)
   (charge-inc-time        time-frame            :offset 688)
   (charge-active?         uint64                :offset 696)
   )
  :method-count-assert 10
  :size-assert         #x2c0
  :flag-assert         #xa000002c0
  (:methods
    (gun-info-method-9 () none 9)
    )
  )

(defun want-to-gun? ((arg0 target) (arg1 int))
  "Are we able to pull out a gun?"
  (local-vars (v1-36 symbol))
  (with-pp
    (the-as
      symbol
      (and (logtest? (-> arg0 game features) 32)
           (>= (- (-> pp clock frame-counter) (-> arg0 gun gun-time)) (seconds 0.1))
           (zero? (logand (focus-status fs1 fs6 fs18 fs21 fs22 fs30) (-> arg0 focus-status)))
           (zero? (logand (surface-flag gun-inactive gun-hide gun-off) (-> arg0 control unknown-surface00 flags)))
           (zero? (logand (state-flags sf18) (-> arg0 state-flags)))
           (logtest? (logand (-> *setting-control* user-current features) 960) (-> arg0 game features))
           (or (zero? (logand (-> arg0 control unknown-surface00 flags) (surface-flag duck))) (can-exit-duck?))
           (or (zero? (logand (focus-status fs20) (-> arg0 focus-status))) (-> arg0 pilot gun?))
           (or arg1
               (nonzero? (-> arg0 gun using-gun-type))
               (begin
                 (set! v1-36 (and (cpad-hold? (-> arg0 control unknown-cpad-info00 number) r1)
                                  (zero? (logand (-> arg0 focus-status) (focus-status fs7)))
                                  (begin (set! v1-36 #t) (set! (-> arg0 gun latch?) v1-36) v1-36)
                                  )
                       )
                 v1-36
                 )
               (-> arg0 gun latch?)
               )
           (not (-> arg0 skel top-anim frame-group))
           (>= (- (-> pp clock frame-counter) (the-as int (-> arg0 control unknown-dword01))) (seconds 0.1))
           )
      )
    )
  )

(defun using-gun? ((arg0 target))
  "Are we using a gun?"
  (nonzero? (-> arg0 gun gun-type))
  )

(defun enabled-gun? ((arg0 target))
  (nonzero? (-> arg0 gun using-gun-type))
  )

(defun gun->ammo ((arg0 pickup-type))
  "Get ammo type based on gun."
  (case arg0
    (((pickup-type eco-yellow))
     13
     )
    (((pickup-type eco-red))
     14
     )
    (((pickup-type eco-blue))
     15
     )
    (((pickup-type eco-dark))
     16
     )
    (else
      0
      )
    )
  )

(defmethod get-gun-ammo fact-info-target ((obj fact-info-target) (arg0 target))
  "Get ammo count for current gun."
  (let ((current-gun (gun->ammo (-> (the-as target (-> obj process)) gun gun-type))))
    (if (zero? current-gun)
        0.0
        (-> (the-as target (-> obj process)) game gun-ammo (+ current-gun -13))
        )
    )
  )

;; failed to figure out what this is:
(let ((a0-5 (new 'static 'skeleton-group
              :name "skel-gun"
              :extra #f
              :info #f
              :art-group-name "gun"
              :bounds (new 'static 'vector :w 6144.0)
              :version #x7
              :shadow #xb
              :sort 1
              :origin-joint-index 3
              )
            )
      )
  (set! (-> a0-5 jgeo) 9)
  (set! (-> a0-5 janim) -1)
  (set! (-> a0-5 mgeo 0) 10)
  (set! (-> a0-5 data 12) (the-as art-element 4095996000.0))
  ((method-of-object a0-5 skeleton-group-method-15))
  )

(define *gun-shadow-control*
  (new 'static 'shadow-control :settings (new 'static 'shadow-settings
                                           :center (new 'static 'vector :w (the-as float #xa))
                                           :shadow-dir (new 'static 'vector :y -1.0 :w 614400.0)
                                           :bot-plane (new 'static 'plane :y 1.0 :w 81920.0)
                                           :top-plane (new 'static 'plane :y 1.0 :w 2048.0)
                                           )
                               )
  )

(let ((a0-6 (new 'static 'skeleton-group
              :name "skel-ammo-yellow"
              :extra #f
              :info #f
              :art-group-name "gun"
              :bounds (new 'static 'vector :w 4096.0)
              :texture-level #x6
              :version #x7
              :sort 1
              )
            )
      )
  (set! (-> a0-6 jgeo) 0)
  (set! (-> a0-6 janim) 8)
  (set! (-> a0-6 mgeo 0) 1)
  (set! (-> a0-6 data 12) (the-as art-element 4095996000.0))
  ((method-of-object a0-6 skeleton-group-method-15))
  )

(let ((a0-7 (new 'static 'skeleton-group
              :name "skel-ammo-red"
              :extra #f
              :info #f
              :art-group-name "gun"
              :bounds (new 'static 'vector :w 4096.0)
              :texture-level #x6
              :version #x7
              :sort 1
              )
            )
      )
  (set! (-> a0-7 jgeo) 2)
  (set! (-> a0-7 janim) 8)
  (set! (-> a0-7 mgeo 0) 3)
  (set! (-> a0-7 data 12) (the-as art-element 4095996000.0))
  ((method-of-object a0-7 skeleton-group-method-15))
  )

(let ((a0-8 (new 'static 'skeleton-group
              :name "skel-ammo-blue"
              :extra #f
              :info #f
              :art-group-name "gun"
              :bounds (new 'static 'vector :w 4096.0)
              :texture-level #x6
              :version #x7
              :sort 1
              )
            )
      )
  (set! (-> a0-8 jgeo) 4)
  (set! (-> a0-8 janim) 8)
  (set! (-> a0-8 mgeo 0) 5)
  (set! (-> a0-8 data 12) (the-as art-element 4095996000.0))
  ((method-of-object a0-8 skeleton-group-method-15))
  )

(let ((a0-9 (new 'static 'skeleton-group
              :name "skel-ammo-dark"
              :extra #f
              :info #f
              :art-group-name "gun"
              :bounds (new 'static 'vector :w 4096.0)
              :texture-level #x6
              :version #x7
              :sort 1
              )
            )
      )
  (set! (-> a0-9 jgeo) 6)
  (set! (-> a0-9 janim) 8)
  (set! (-> a0-9 mgeo 0) 7)
  (set! (-> a0-9 data 12) (the-as art-element 4095996000.0))
  ((method-of-object a0-9 skeleton-group-method-15))
  )

(let ((a0-10 (new 'static 'skeleton-group
               :name "skel-gun-red-cone"
               :extra #f
               :info #f
               :art-group-name "gun"
               :bounds (new 'static 'vector :w 4096.0)
               :texture-level #x6
               :version #x7
               )
             )
      )
  (set! (-> a0-10 jgeo) 40)
  (set! (-> a0-10 janim) 42)
  (set! (-> a0-10 mgeo 0) 41)
  (set! (-> a0-10 data 12) (the-as art-element 4095996000.0))
  ((method-of-object a0-10 skeleton-group-method-15))
  )




