;;-*-Lisp-*-
(in-package goal)

;; name: gun-yellow-shot.gc
;; name in dgo: gun-yellow-shot
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(defbehavior target-gun-fire-yellow target ()
  (let ((s5-0 (-> self gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> self entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event self 'get-vehicle))))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (-> s5-0 fire-dir-out) 819200.0)
    (spawn-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)
    )
  )

(defun someone-fire-yellow ((arg0 process-drawable) (arg1 vector) (arg2 vector))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (set! (-> gp-0 ent) (-> arg0 entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity proj-options-8000))
    (set! (-> gp-0 pos quad) (-> arg1 quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle arg0))
    (let* ((v1-7 *game-info*)
           (a0-8 (+ (-> v1-7 attack-id) 1))
           )
      (set! (-> v1-7 attack-id) a0-8)
      (set! (-> gp-0 attack-id) a0-8)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-normalize-copy! (-> gp-0 vel) arg2 819200.0)
    (spawn-projectile gun-yellow-shot gp-0 arg0 *default-dead-pool*)
    )
  )

(deftype gun-yellow-shot (projectile)
  ((hit-actor? symbol         :offset-assert 472)
   (tail-pos   vector :inline :offset-assert 480)
   (hit-pos    vector :inline :offset-assert 496)
   )
  :heap-base #x180
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  )


(defmethod draw-laser-sight gun-yellow-shot ((obj gun-yellow-shot))
  "TODO - confirm If applicable, draw the laser sight particles"
  (draw-beam (-> *part-id-table* 227) (-> obj tail-pos) (-> obj starting-dir) #f #t)
  0
  (none)
  )

(defmethod spawn-impact-particles gun-yellow-shot ((obj gun-yellow-shot))
  "Spawns associated particles with the projectile if applicable"
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((s4-0 (-> obj root-override trans))
           (a1-0 (-> obj tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) s4-0 a1-0))
           (f30-0 (vector-length s5-1))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-4 a1-0))
        (let ((a0-2 s5-1))
          (let ((a2-1 0.8))
            (.mov vf7 a2-1)
            )
          (.lvf vf5 (&-> a0-2 quad))
          )
        (.lvf vf4 (&-> v1-4 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> gp-0 quad) vf6)
      (let ((f28-0 (-> *part-id-table* 223 init-specs 4 initial-valuef)))
        (set! (-> *part-id-table* 223 init-specs 4 initial-valuef) (fmin f28-0 (vector-length s5-1)))
        (draw-beam (-> *part-id-table* 223) a1-0 s5-1 #f #t)
        (set! (-> *part-id-table* 223 init-specs 4 initial-valuef) f28-0)
        )
      (vector-normalize! s5-1 1.0)
      (let ((t9-2 sp-launch-particles-var)
            (a0-5 *sp-particle-system-2d*)
            (a1-2 (-> *part-id-table* 224))
            (a2-3 *launch-matrix*)
            )
        (set! (-> a2-3 trans quad) (-> gp-0 quad))
        (t9-2 a0-5 a1-2 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      (let ((s3-0 (new 'stack-no-clear 'matrix))
            (f28-1 (* 0.000015258789 f30-0))
            (f30-1 (-> *part-id-table* 226 init-specs 3 initial-valuef))
            )
        (forward-up->inv-matrix s3-0 s5-1 *up-vector*)
        (set! (-> s3-0 trans quad) (-> s4-0 quad))
        (set! (-> *part-id-table* 226 init-specs 3 initial-valuef) (* f28-1 f30-1))
        (sp-launch-particles-var
          *sp-particle-system-2d*
          (-> *part-id-table* 226)
          s3-0
          (the-as sparticle-launch-state #f)
          (the-as sparticle-launch-control #f)
          1.0
          )
        (set! (-> *part-id-table* 226 init-specs 3 initial-valuef) f30-1)
        )
      (let ((f0-6 (vector-dot s5-1 (-> (camera-matrix) vector 2))))
        (when (< 0.0 f0-6)
          (let ((f0-7 (* f0-6 f0-6))
                (f30-2 (-> *part-id-table* 225 init-specs 8 initial-valuef))
                (f28-2 (-> *part-id-table* 225 init-specs 8 random-rangef))
                )
            (set! (-> *part-id-table* 225 init-specs 8 initial-valuef) (* f30-2 f0-7))
            (set! (-> *part-id-table* 225 init-specs 8 random-rangef) (* f28-2 f0-7))
            (let ((t9-6 sp-launch-particles-var)
                  (a0-9 *sp-particle-system-2d*)
                  (a1-5 (-> *part-id-table* 225))
                  (a2-6 *launch-matrix*)
                  )
              (set! (-> a2-6 trans quad) (-> gp-0 quad))
              (t9-6 a0-9 a1-5 a2-6 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
              )
            (set! (-> *part-id-table* 225 init-specs 8 initial-valuef) f30-2)
            (set! (-> *part-id-table* 225 init-specs 8 random-rangef) f28-2)
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod deal-damage! gun-yellow-shot ((obj gun-yellow-shot) (arg0 process) (arg1 event-message-block))
  "Constructs an [[attack-info]] according to the projectile's `options`"
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 obj arg0 arg1)
      (set! (-> obj hit-actor?) #t)
      #t
      )
    )
  )

(defmethod spawn-shell-particles gun-yellow-shot ((obj gun-yellow-shot))
  "TODO - confirm"
  (cond
    ((-> obj hit-actor?)
     (let ((s5-0 (get-process *default-dead-pool* part-tracker #x4000)))
       (when s5-0
         (let ((t9-1 (method-of-type part-tracker activate)))
           (t9-1
             (the-as part-tracker s5-0)
             *entity-pool*
             (symbol->string (-> part-tracker symbol))
             (the-as pointer #x70004000)
             )
           )
         (let ((t9-2 run-function-in-process)
               (a0-3 s5-0)
               (a1-2 part-tracker-init)
               (a2-4 (-> *part-group-id-table* 74))
               (a3-1 0)
               (t0-0 #f)
               (t1-0 #f)
               (t2-0 #f)
               (t3-0 *launch-matrix*)
               )
           (set! (-> t3-0 trans quad) (-> obj root-override trans quad))
           ((the-as (function object object object object object object object object none) t9-2)
            a0-3
            a1-2
            a2-4
            a3-1
            t0-0
            t1-0
            t2-0
            t3-0
            )
           )
         (-> s5-0 ppointer)
         )
       )
     )
    (else
      (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
        (when s5-1
          (let ((t9-4 (method-of-type part-tracker activate)))
            (t9-4
              (the-as part-tracker s5-1)
              *entity-pool*
              (symbol->string (-> part-tracker symbol))
              (the-as pointer #x70004000)
              )
            )
          (let ((t9-5 run-function-in-process)
                (a0-6 s5-1)
                (a1-5 part-tracker-init)
                (a2-9 (-> *part-group-id-table* 73))
                (a3-3 0)
                (t0-1 #f)
                (t1-1 #f)
                (t2-1 #f)
                (t3-1 *launch-matrix*)
                )
            (set! (-> t3-1 trans quad) (-> obj root-override trans quad))
            ((the-as (function object object object object object object object object none) t9-5)
             a0-6
             a1-5
             a2-9
             a3-3
             t0-1
             t1-1
             t2-1
             t3-1
             )
            )
          (-> s5-1 ppointer)
          )
        )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound gun-yellow-shot ((obj gun-yellow-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "yellow-shot-fir")
       )
      ((= v1-0 (projectile-options lose-altitude))
       (sound-play "yellow-gun-burn")
       )
      ((= v1-0 (projectile-options proj-options-2))
       (sound-play "yellow-shot-fiz")
       )
      (else
        (sound-play "yellow-shot-std" :id (-> obj sound-id) :position (-> obj root-override trans))
        )
      )
    )
  (none)
  )

(defmethod made-impact? gun-yellow-shot ((obj gun-yellow-shot))
  "TODO - queries the collision cache, return true/false"
  (let ((v1-0 (-> obj root-override))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a0-1 t1-0))
      (set! (-> a0-1 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a0-1 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a0-1 ignore-process0) obj)
      (set! (-> a0-1 ignore-process1) (ppointer->process (-> obj parent)))
      (set! (-> a0-1 ignore-pat) (-> v1-0 pat-ignore-mask))
      (set! (-> a0-1 action-mask) (collide-action solid))
      )
    (when (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -10240.0 12697.6 -4096.0 t1-0)
      (if (logtest? (-> obj root-override status) (collide-status touch-actor))
          (set! (-> obj hit-actor?) #t)
          )
      #t
      )
    )
  )

(defun gun-yellow-shot-move ((arg0 gun-yellow-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root-override)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 65536.0 f0-0)
          (vector-normalize! s4-0 65536.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root-override status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (let ((v1-14 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
            (a1-5 (-> arg0 hit-pos))
            )
        (set! (-> a1-5 quad) (-> s5-0 trans quad))
        (vector+! a1-5 a1-5 v1-14)
        (move-to-point! (-> arg0 root-override) a1-5)
        )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

(defmethod init-proj-collision! gun-yellow-shot ((obj gun-yellow-shot))
  "Init the [[projectile]]'s [[collide-shape]]"
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root-override) s5-0)
    )
  (set! (-> obj root-override pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! gun-yellow-shot ((obj gun-yellow-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (set! (-> obj hit-actor?) #f)
  (set! (-> obj tail-pos quad) (-> obj root-override trans quad))
  (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
  (set! (-> obj attack-mode) 'eco-yellow)
  (set! (-> obj max-speed) 819200.0)
  (set! (-> obj move) gun-yellow-shot-move)
  (set! (-> obj timeout) (seconds 0.5))
  (set! (-> obj sound-id) (new-sound-id))
  (set! (-> obj damage) (if (logtest? (game-feature gun-upgrade-damage) (-> *game-info* features))
                            4.0
                            2.0
                            )
        )
  0
  (none)
  )
