;;-*-Lisp-*-
(in-package goal)

;; name: collide-hash-h.gc
;; name in dgo: collide-hash-h
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(define *collide-list-boxes* (the-as object #f))

(define *collide-hash-fragments* (the-as object 0))

(define *collide-hash-fragments-tfrag* (the-as object 0))

(define *collide-hash-fragments-instance* (the-as object 0))

(define *already-printed-exeeded-max-cache-tris* #f)

(deftype collide-hash-scratch (structure)
  ((collidable-bits uint128 128 :offset-assert   0)
   (poly-bits       uint64  2   :offset          0)
   (id-bits         uint32  512 :offset          0)
   (tris            uint32      :offset-assert 2048)
   )
  :method-count-assert 9
  :size-assert         #x804
  :flag-assert         #x900000804
  )

(deftype collide-hash-bucket (structure)
  ((index int16  :offset-assert   0)
   (count int16  :offset-assert   2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-item (structure)
  ((id         uint32  :offset-assert   0)
   (collidable basic   :offset-assert   4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

(deftype collide-hash-poly (structure)
  ((data        uint8  4 :offset-assert   0)
   (vert-index0 uint8    :offset          0)
   (vert-index1 uint8    :offset          1)
   (vert-index2 uint8    :offset          2)
   (pat-index   uint8    :offset          3)
   (word        uint32   :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-fragment-stats (structure)
  ((num-verts  uint16  :offset-assert   0)
   (num-polys  uint8   :offset-assert   2)
   (poly-count uint8   :offset-assert   3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype collide-hash-fragment (drawable)
  ((num-buckets     uint16                              :offset          4)
   (num-indices     uint16                              :offset          6)
   (pat-array       uint32                              :offset          8)
   (bucket-array    uint32                              :offset         12)
   (grid-step       vector                      :inline :offset-assert  32)
   (bbox            bounding-box                :inline :offset-assert  48)
   (bbox4w          bounding-box4w              :inline :offset-assert  80)
   (axis-scale      vector                      :inline :offset         64)
   (avg-extents     vector                      :inline :offset         80)
   (dimension-array uint32                      4       :offset         44)
   (stats           collide-hash-fragment-stats :inline :offset         60)
   (num-verts       uint16                              :offset         60)
   (num-polys       uint8                               :offset         62)
   (poly-count      uint8                               :offset         63)
   (poly-array      uint32                              :offset         76)
   (vert-array      uint32                              :offset         92)
   (index-array     uint32                              :offset        108)
   )
  :method-count-assert 17
  :size-assert         #x70
  :flag-assert         #x1100000070
  )

(deftype collide-hash-fragment-array (array)
  ((fragments collide-hash-fragment :dynamic :offset 16))
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype collide-hash (drawable)
  ((num-ids         uint16                           :offset          4)
   (id-count        uint16                           :offset          6)
   (num-buckets     uint32                           :offset          8)
   (qwc-id-bits     uint32                           :offset         12)
   (grid-step       vector                   :inline :offset         16)
   (bbox            bounding-box             :inline :offset-assert  32)
   (bbox4w          bounding-box4w           :inline :offset-assert  64)
   (axis-scale      vector                   :inline :offset         48)
   (avg-extents     vector                   :inline :offset         64)
   (bucket-array    uint32                           :offset         44)
   (item-array      (inline-array collide-hash-item) :offset         60)
   (dimension-array uint32         3                 :offset         76)
   (num-items       uint32                           :offset         92)
   )
  :method-count-assert 17
  :size-assert         #x60
  :flag-assert         #x1100000060
  )
