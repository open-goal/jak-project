;;-*-Lisp-*-
(in-package goal)

;; name: rigid-body-h.gc
;; name in dgo: rigid-body-h
;; dgos: GAME, COMMON

;; +++rigid-body-flag
(defenum rigid-body-flag
  :bitfield #t
  :type uint32
  (display-marks 0)
  (enable-physics 1)
  (enable-collision 2)
  (active 3)
  (debug 4)
  (blocker 5)
  )
;; ---rigid-body-flag

;; +++rigid-body-object-flag
(defenum rigid-body-object-flag
  :bitfield #t
  :type uint64
  (enable-collision 0)
  (disturbed 1)
  (damaged 2)
  (dead 3)
  (player-touching 4)
  (player-edge-grabbing 5)
  (player-standing-on 6)
  (player-impulse-force 7)
  (player-contact-force 8)
  (persistent 9)
  (in-air 10)
  (on-ground 11)
  (on-flight-level 12)
  (riding 13)
  (player-driving 14)
  (waiting-for-player 15)
  (ignition 16)
  (turbo-boost 17)
  (reverse-gear 18)
  (slide 19)
  (hard-turn 20)
  (jump 21)
  (jump-sound 22)
  (ai-driving 23)
  (traffic-managed 24)
  (flight-level-transition 25)
  (flight-level-transition-ending 26)
  (camera-bike-mode 27)
  (camera-rapid-track-mode 28)
  (camera 29)
  (alert 30)
  (in-pursuit 31)
  (target-in-sight 32)
  (rammed-target 33)
  (draw-marks 34)
  (hack-edit-graph-mode 35)
  (measure-control-parameters 36)
  (lights-on 37)
  (lights-update 38)
  (lights-dead 39)
  (no-hijack 40)
  (player-grabbed 41)
  (nav-spheres 42)
  (idle-sound 43)
  )
;; ---rigid-body-object-flag

(declare-type rigid-body-work structure)
(declare-type rigid-body-object process-focusable)

;; DECOMP BEGINS

(deftype rigid-body-info (structure)
  ((mass                 float)
   (inv-mass             float)
   (linear-damping       float)
   (angular-damping      float)
   (bounce-factor        float)
   (friction-factor      float)
   (bounce-mult-factor   float)
   (unknown-k1hbn23      float)
   (cm-offset-joint      vector  :inline)
   (inv-inertial-tensor  matrix  :inline)
   (inertial-tensor      matrix  :inline)
   (inertial-tensor-box  meters  3)
   )
  (:methods
    (rigid-body-info-method-9 (_type_) none)
    )
  )


(deftype rigid-body-object-extra-info (structure)
  ((max-time-step       float)
   (gravity             meters)
   (idle-distance       meters)
   (attack-force-scale  float)
   )
  :pack-me
  )


(deftype rigid-body-object-constants (structure)
  ((info               rigid-body-info               :inline)
   (cm-joint           vector                        :inline :overlay-at (-> info cm-offset-joint))
   (cm-joint-x         meters                                :overlay-at (-> info cm-offset-joint data 0))
   (cm-joint-y         meters                                :overlay-at (-> info cm-offset-joint data 1))
   (cm-joint-z         meters                                :overlay-at (-> info cm-offset-joint data 2))
   (cm-joint-w         meters                                :overlay-at (-> info cm-offset-joint data 3))
   (linear-damping     float                                 :overlay-at (-> info linear-damping))
   (angular-damping    float                                 :overlay-at (-> info angular-damping))
   (bounce-factor      float                                 :overlay-at (-> info bounce-factor))
   (friction-factor    float                                 :overlay-at (-> info friction-factor))
   (inertial-tensor-x  meters                                :overlay-at (-> info inertial-tensor-box 0))
   (inertial-tensor-y  meters                                :overlay-at (-> info inertial-tensor-box 1))
   (inertial-tensor-z  meters                                :overlay-at (-> info inertial-tensor-box 2))
   (extra              rigid-body-object-extra-info  :inline)
   (name               symbol)
   )
  )


(deftype rigid-body-impact (structure)
  ((point     vector  :inline)
   (normal    vector  :inline)
   (velocity  vector  :inline)
   (impulse   float)
   (pat       pat-surface)
   (rbody     basic)
   (prim-id   uint32)
   )
  )


(deftype rigid-body (structure)
  ((work            rigid-body-work)
   (info            rigid-body-info)
   (flags           rigid-body-flag)
   (force-callback  (function object float none))
   (blocked-by      rigid-body-object)
   (time-remaining  float)
   (step-count      int16)
   (position        vector      :inline)
   (rot             vector      :inline)
   (rotation        quaternion  :inline :overlay-at (-> rot data 0))
   (lin-momentum    vector      :inline)
   (ang-momentum    vector      :inline)
   (force           vector      :inline)
   (torque          vector      :inline)
   (lin-velocity    vector      :inline)
   (ang-velocity    vector      :inline)
   (matrix          matrix      :inline)
   (inv-i-world     matrix      :inline)
   )
  (:methods
    (rigid-body-method-9 (_type_ collide-shape-moving float) none)
    (rigid-body-method-10 (_type_) none)
    (rigid-body-method-11 (_type_ collide-shape-moving) none)
    (rigid-body-method-12 (_type_ float) none)
    (rigid-body-method-13 (_type_) none)
    (rigid-body-method-14 (_type_ float) none)
    (rigid-body-method-15 (_type_ collide-shape-moving float) none)
    (clear-force-torque! (_type_) none)
    (clear-momentum! (_type_) none)
    (rigid-body-method-18 (_type_ vector vector) none)
    (rigid-body-method-19 (_type_ vector vector) none)
    (rigid-body-method-20 (_type_ vector) none)
    (rigid-body-method-21 (_type_ vector vector float) none)
    (rigid-body-method-22 (_type_ vector vector) vector)
    (rigid-body-method-23 (_type_ vector) vector)
    (rigid-body-method-24 (_type_) none)
    (rigid-body-method-25 (_type_ rigid-body-info vector quaternion function) none)
    (rigid-body-method-26 (_type_ vector quaternion) none)
    (print-physics (_type_ object) none)
    (print-force-torque (_type_ object) none)
    (print-position-rotation (_type_ object) none)
    (print-momentum (_type_ object) none)
    (print-velocity (_type_ object) none)
    )
  )


(deftype rigid-body-control (basic)
  ((process  process)
   (state    rigid-body  :inline)
   )
  (:methods
    (new (symbol type process) _type_)
    (rigid-body-control-method-9 (_type_ collide-shape-moving float) none)
    (rigid-body-control-method-10 (_type_ rigid-body-object float float) object)
    (rigid-body-control-method-11 (_type_ collide-shape-moving) none)
    (rigid-body-control-method-12 (_type_ float) none)
    (rigid-body-control-method-13 (_type_) none)
    (rigid-body-control-method-14 (_type_ float) none)
    (clear-force-torque! (_type_) none)
    (clear-momentum! (_type_) none)
    (rigid-body-control-method-17 (_type_ vector vector) none)
    (rigid-body-control-method-18 (_type_ vector vector) none)
    (rigid-body-control-method-19 (_type_ vector) none)
    (rigid-body-control-method-20 (_type_ vector vector float) none)
    (rigid-body-control-method-21 (_type_ vector vector) vector)
    (rigid-body-control-method-22 (_type_ vector) vector)
    (rigid-body-control-method-23 (_type_) none)
    (rigid-body-control-method-24 (_type_ rigid-body-info vector quaternion basic) none)
    (rigid-body-control-method-25 (_type_ vector quaternion) none)
    )
  )


(defmethod rigid-body-control-method-9 ((this rigid-body-control) (arg0 collide-shape-moving) (arg1 float))
  (rigid-body-method-9 (-> this state) arg0 arg1)
  (none)
  )

;; WARN: Return type mismatch none vs object.
(defmethod rigid-body-control-method-10 ((this rigid-body-control) (arg0 rigid-body-object) (arg1 float) (arg2 float))
  (rigid-body-method-10 (-> this state))
  )

(defmethod rigid-body-control-method-11 ((this rigid-body-control) (arg0 collide-shape-moving))
  (rigid-body-method-11 (-> this state) arg0)
  (none)
  )

(defmethod rigid-body-control-method-12 ((this rigid-body-control) (arg0 float))
  (rigid-body-method-12 (-> this state) arg0)
  (none)
  )

(defmethod rigid-body-control-method-13 ((this rigid-body-control))
  (rigid-body-method-13 (-> this state))
  (none)
  )

(defmethod rigid-body-control-method-14 ((this rigid-body-control) (arg0 float))
  (rigid-body-method-14 (-> this state) arg0)
  (none)
  )

(defmethod clear-force-torque! ((this rigid-body-control))
  (clear-force-torque! (-> this state))
  (none)
  )

(defmethod clear-momentum! ((this rigid-body-control))
  (clear-momentum! (-> this state))
  (none)
  )

(defmethod rigid-body-control-method-17 ((this rigid-body-control) (arg0 vector) (arg1 vector))
  (rigid-body-method-18 (-> this state) arg0 arg1)
  (none)
  )

(defmethod rigid-body-control-method-18 ((this rigid-body-control) (arg0 vector) (arg1 vector))
  (rigid-body-method-19 (-> this state) arg0 arg1)
  (none)
  )

(defmethod rigid-body-control-method-19 ((this rigid-body-control) (arg0 vector))
  (rigid-body-method-20 (-> this state) arg0)
  (none)
  )

(defmethod rigid-body-control-method-20 ((this rigid-body-control) (arg0 vector) (arg1 vector) (arg2 float))
  (rigid-body-method-21 (-> this state) arg0 arg1 arg2)
  (none)
  )

(defmethod rigid-body-control-method-21 ((this rigid-body-control) (arg0 vector) (arg1 vector))
  (rigid-body-method-22 (-> this state) arg0 arg1)
  )

(defmethod rigid-body-control-method-22 ((this rigid-body-control) (arg0 vector))
  (rigid-body-method-23 (-> this state) arg0)
  )

(defmethod rigid-body-control-method-23 ((this rigid-body-control))
  (rigid-body-method-24 (-> this state))
  (none)
  )

(defmethod rigid-body-control-method-24 ((this rigid-body-control) (arg0 rigid-body-info) (arg1 vector) (arg2 quaternion) (arg3 basic))
  (rigid-body-method-25 (-> this state) arg0 arg1 arg2 (the-as function arg3))
  (none)
  )

(defmethod rigid-body-control-method-25 ((this rigid-body-control) (arg0 vector) (arg1 quaternion))
  (rigid-body-method-26 (-> this state) arg0 arg1)
  (none)
  )

(deftype rigid-body-object (process-focusable)
  ((root                   collide-shape-moving :override)
   (info                   rigid-body-object-constants)
   (flags                  rigid-body-object-flag)
   (max-time-step          float)
   (incoming-attack-id     uint32)
   (player-touch-time      time-frame)
   (disturbed-time         time-frame)
   (player-force-position  vector                :inline)
   (player-force           vector                :inline)
   )
  (:state-methods
    idle
    active
    )
  (:methods
    (rigid-body-object-method-29 (_type_ float) none)
    (rigid-body-object-method-30 (_type_) none)
    (alloc-and-init-rigid-body-control (_type_ rigid-body-object-constants) none)
    (allocate-and-init-cshape (_type_) none)
    (init-skel-and-rigid-body (_type_) none)
    (rigid-body-object-method-34 (_type_) none)
    (rigid-body-object-method-35 (_type_) none)
    (do-engine-sounds (_type_) none)
    (rigid-body-object-method-37 (_type_) none)
    (rigid-body-object-method-38 (_type_) none)
    (rigid-body-object-method-39 (_type_) none)
    (rigid-body-object-method-40 (_type_) none)
    (rigid-body-object-method-41 (_type_) none)
    (rigid-body-object-method-42 (_type_) none :behavior rigid-body-object)
    (rigid-body-object-method-43 (_type_) none)
    (apply-damage (_type_ float rigid-body-impact) none)
    (rigid-body-object-method-45 (_type_ rigid-body-impact) none)
    (rigid-body-object-method-46 (_type_ process-drawable int symbol event-message-block) object :behavior rigid-body-object)
    (rigid-body-object-method-47 (_type_ process-drawable attack-info touching-shapes-entry penetrate) symbol)
    (rigid-body-object-method-48 (_type_ process-focusable touching-shapes-entry) symbol)
    (rigid-body-object-method-49 (_type_ rigid-body-impact touching-shapes-entry) none)
    (rigid-body-object-method-50 (_type_ float) none)
    (rigid-body-object-method-51 (_type_) none)
    (rigid-body-object-method-52 (_type_) none)
    )
  )


(deftype rigid-body-queue (structure)
  ((count  int8)
   (array  handle  128 :offset   8)
   )
  (:methods
    (rigid-body-queue-method-9 (_type_) none)
    (rigid-body-queue-method-10 (_type_) none)
    (rigid-body-queue-method-11 (_type_ rigid-body-object) none)
    (rigid-body-queue-method-12 (_type_ int int) none)
    (rigid-body-queue-method-13 (_type_ int rigid-body-object) none)
    (rigid-body-queue-method-14 (_type_ int) none)
    (rigid-body-queue-method-15 (_type_ rigid-body-object) none)
    (validate (_type_) symbol)
    )
  )
