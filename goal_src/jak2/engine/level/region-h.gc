;;-*-Lisp-*-
(in-package goal)

;; name: region-h.gc
;; name in dgo: region-h
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(deftype region (structure)
  ((id        uint32  :offset-assert   0)
   (on-enter  basic   :offset-assert   4)
   (on-inside basic   :offset-assert   8)
   (on-exit   basic   :offset-assert  12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (region-method-9 () none 9)
    )
  )

(deftype region-array (inline-array-class)
  ((data region :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
(set! (-> region-array heap-base) (the-as uint 16))

(deftype drawable-region-prim (drawable)
  ((region region  :offset   8)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  (:methods
    (debug-draw-region (_type_ int) none 17)
    (drawable-region-prim-method-18 () none 18)
    (drawable-region-prim-method-19 () none 19)
    )
  )

(deftype drawable-tree-region-prim (drawable-tree)
  ((name  basic                          :offset   8)
   (data2 drawable-inline-array :dynamic :offset  32)
   )
  :method-count-assert 19
  :size-assert         #x20
  :flag-assert         #x1300000020
  (:methods
    (drawable-tree-region-prim-method-17 () none 17)
    (debug-print (_type_ vector object) none 18)
    )
  )

(defmethod inspect drawable-tree-region-prim ((obj drawable-tree-region-prim))
  (when (not obj)
    (return obj)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (dotimes (s5-0 (-> obj length))
    (format #t "~T  [~D]~1Tdata: ~A~%" s5-0 (-> obj data s5-0))
    )
  (format #t "~1Tname: ~A~%" (-> obj name))
  obj
  )


(deftype drawable-inline-array-region-prim (drawable-inline-array)
  ((data drawable-region-prim 1 :inline :offset-assert  32)
   (pad  uint8                4         :offset-assert  64)
   )
  :method-count-assert 17
  :size-assert         #x44
  :flag-assert         #x1100000044
  )

(deftype drawable-region-sphere (drawable-region-prim)
  ()
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  )

(deftype region-face-data (structure)
  ((normal        vector :inline          :offset-assert   0)
   (normal-offset float                   :offset         12)
   (num-points    uint32                  :offset-assert  16)
   (points        vector :inline :dynamic :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(deftype drawable-region-face (drawable-region-prim)
  ((data region-face-data  :offset  12)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  )

(deftype region-face-array (inline-array-class)
  ((data region-face-data :dynamic :offset  20)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )
(set! (-> region-face-array heap-base) (the-as uint 32))

(deftype drawable-region-volume (drawable-region-prim)
  ((faces region-face-array  :offset  12)
   )
  :method-count-assert 20
  :size-assert         #x20
  :flag-assert         #x1400000020
  )

(deftype region-prim-list (structure)
  ((num-items int32                    :offset-assert   0)
   (items     drawable-region-prim 320 :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x504
  :flag-assert         #x900000504
  )


(define-extern region-prim-lookup-by-id (function int drawable-region-prim))
(define-extern region-lookup-by-id (function int region))

