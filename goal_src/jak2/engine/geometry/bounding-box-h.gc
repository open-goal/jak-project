;;-*-Lisp-*-
(in-package goal)

;; name: bounding-box-h.gc
;; name in dgo: bounding-box-h
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

;; axis-aligned bounding box, using floats.
(deftype bounding-box (structure)
  ((min vector :inline :offset-assert   0)
   (max vector :inline :offset-assert  16)
   )
  :method-count-assert 21
  :size-assert         #x20
  :flag-assert         #x1500000020
  (:methods
    (add-spheres! (_type_ (inline-array sphere) int) int 9)
    (add-box! (_type_ bounding-box) int 10)
    (add-point! (_type_ vector) none 11)
    (intersects-line-segment? (_type_ vector vector) symbol 12)
    (set-from-point-offset! (_type_ vector vector) none 13)
    (set-from-point-offset-pad! (_type_ vector vector float) int 14)
    (set-to-point! (_type_ vector) none 15)
    (set-from-sphere! (_type_ sphere) none 16)
    (set-from-spheres! (_type_ (inline-array sphere) int) int 17)
    (get-bounding-sphere (_type_ vector) vector 18)
    (inside-xyz? (bounding-box vector) symbol 19)
    (inside-xz? (bounding-box vector) symbol 20)
    )
  )

;; axis-aligned bounding box, using int32's
(deftype bounding-box4w (structure)
  ((min vector4w :inline :offset-assert   0)
   (max vector4w :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; axis-aligned bounding box, storing both float and int32's (for crazy collision assembly stuff)
(deftype bounding-box-both (structure)
  ((box   bounding-box   :inline :offset-assert   0)
   (box4w bounding-box4w :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )


(deftype bounding-box-array (inline-array-class)
  ((data bounding-box :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )
(set! (-> bounding-box-array heap-base) (the-as uint 32))




