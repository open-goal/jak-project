;;-*-Lisp-*-
(in-package goal)

#|

  Additional PC port specific file for overriding/expanding the progress menu
	This gives us more freedom to write code how we want.

|#



(defun draw-previous-next ((arg0 menu-highscores-option) (arg1 font-context) (arg2 symbol))
  (local-vars (sv-16 string) (sv-32 int))
  (let ((s3-0 370))
    (case (get-aspect-ratio)
      (('aspect4x3)
       (set! (-> arg1 origin x) 73.0)
       (set! (-> arg1 origin y) 308.0)
       (set! (-> arg1 width) 359.0)
       (set! (-> arg1 height) 185.0)
       )
      (('aspect16x9)
       (set! (-> arg1 origin x) 82.0)
       (set! (-> arg1 origin y) 328.0)
       (set! (-> arg1 width) 355.0)
       (set! (-> arg1 height) 185.0)
       (set! s3-0 350)
       )
      )
    (when (not (-> *pc-settings* use-vis?))
      (set! s3-0 (the int (* (-> *pc-settings* aspect-ratio-reciprocal) s3-0)))
      (*! (-> arg1 width) (-> *pc-settings* aspect-ratio-reciprocal))
      (set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x))))
      )

    (set-flags! arg1 (font-flags kerning large))
    (set-color! arg1 (progress-selected 200))
    (set-scale! arg1 0.6)
    (when (or (> (-> arg0 page-index) 0) arg2)
      (print-game-text (string-format "~C~S" 163 (lookup-text! *common-text* (text-id progress-next) #f)) arg1 #f 44 (bucket-id progress))
      )
    (set! arg2 (or (!= (-> arg0 page-index) (+ (-> arg0 num-pages) -1)) arg2))
    (when arg2
      (set-flags! arg1 (font-flags kerning right large))
      (+! (-> arg1 origin x) (the float s3-0))
      (print-game-text (string-format "~S~C" (lookup-text! *common-text* (text-id progress-next) #f) 161) arg1 #f 44 (bucket-id progress))
      )
    )
  0
  (none)
  )


(defun get-highscore-icon-xoffset ((arg0 int))
	(cond
		((not (-> *pc-settings* use-vis?))
      (adjust-game-x 435.0)
      )
		((= (get-aspect-ratio) 'aspect4x3)
			435)
		(else
			410)
		)
  )

(deftype highscore-cup-draw-params (structure)
  ((cup-scale  float)
   (cup-y      int16)
   (cup-x      int16)
   (font-scale float)
   )
  )

(define *highscore-cup-draw-params* (new 'static 'inline-array highscore-cup-draw-params 8
        (new 'static 'highscore-cup-draw-params :cup-scale 0.25  :cup-y 174  :cup-x 112  :font-scale -1.0)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.22  :cup-y 197  :cup-x 111  :font-scale 0.5)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.20  :cup-y 217  :cup-x 110  :font-scale 0.4)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.15  :cup-y 232  :cup-x 109  :font-scale 0.3)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.15  :cup-y 244  :cup-x 109  :font-scale -1.0)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.15  :cup-y 256  :cup-x 109  :font-scale -1.0)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.15  :cup-y 268  :cup-x 109  :font-scale -1.0)
        (new 'static 'highscore-cup-draw-params :cup-scale 0.15  :cup-y 280  :cup-x 109  :font-scale -1.0)
        ))

(defun print-highscore ((arg0 print-highscore-obj))
  (local-vars (sv-16 font-context) (sv-20 float) (sv-24 int) (sv-32 int))
  (set! sv-16 (-> arg0 context))
  (set! sv-20 (-> arg0 interp))
  (set! sv-24 50)
  (set! sv-32 (if (= (get-aspect-ratio) 'aspect4x3)
                  320
                  300
                  )
        )
  (when (not (-> *pc-settings* use-vis?))
    (set! sv-32 (the int (* (-> *pc-settings* aspect-ratio-reciprocal) sv-32)))
    (set! sv-24 (the int (* (-> *pc-settings* aspect-ratio-reciprocal) sv-24)))
    )
  (set-flags! sv-16 (font-flags kerning large))
  (+! (-> sv-16 origin x) (the float sv-24))
  
  (let* ((draw-params (-> *highscore-cup-draw-params* (-> arg0 place)))
         (cup-x (-> draw-params cup-x)))
      ;; correct cup x
      (when (not (-> *pc-settings* use-vis?))
        (set! cup-x (adjust-game-x (the float cup-x))))
      ;; set font scale
      (if (> (-> draw-params font-scale) 0)
          (set-scale! sv-16 (-> draw-params font-scale)))
      ;; move font down
      (when (< 0 (-> arg0 place))
          (+! (-> sv-16 origin y) (the float (- (-> draw-params cup-y) (-> *highscore-cup-draw-params* (1- (-> arg0 place)) cup-y)))))
      ;; print highscore text
      (print-game-text (string-format "~S" (lookup-text! *common-text* (-> (new 'static 'boxed-array :type text-id  (text-id progress-highscores-1st)
                                                                                                                    (text-id progress-highscores-2nd)
                                                                                                                    (text-id progress-highscores-3rd)
                                                                                                                    (text-id progress-highscores-4th)
                                                                                                                    (text-id progress-highscores-5th)
                                                                                                                    (text-id progress-highscores-6th)
                                                                                                                    (text-id progress-highscores-7th)
                                                                                                                    (text-id progress-highscores-8th))
                                                                          (-> arg0 place)) #f)) sv-16 #f 44 (bucket-id progress))
      ;; draw cup icon if we're not the previous page
      (if (not (-> arg0 previous))
          (draw-highscore-cup (-> arg0 self) (eval-highscore arg0) (+ (the int sv-20) cup-x) (-> draw-params cup-y) (-> draw-params cup-scale) (-> arg0 local-scale)))
    )

  (+! (-> sv-16 origin x) (the float sv-32))
  (set-flags! sv-16 (font-flags kerning right large))
  (cond
    ((-> arg0 game-score)
     (print-game-text (string-format "~D" (the int (-> arg0 score))) sv-16 #f 44 (bucket-id progress))
     )
    (else
      (print-game-text (str-print-time (-> arg0 score)) sv-16 #f 44 (bucket-id progress))
      )
    )

  (set-flags! sv-16 (font-flags kerning large))
  (set! (-> sv-16 origin x) (- (-> sv-16 origin x) (the float (+ sv-24 sv-32))))
  )


(defmethod draw-option menu-highscores-option ((obj menu-highscores-option) (arg0 progress) (arg1 font-context) (arg2 int) (arg3 symbol))
  (local-vars
    (sv-96 float)
    (sv-100 float)
    (sv-104 float)
    (sv-108 float)
    (sv-112 hud-box)
    (sv-116 print-highscore-obj)
    (sv-120 float)
    (sv-124 float)
    )
  (let ((padding 20.0))
  (if (not (-> *pc-settings* use-vis?))
      (*! padding (-> *pc-settings* aspect-ratio-reciprocal)))
  (set! sv-96 (* 2.0 (- 0.5 (-> arg0 menu-transition))))
  (set! sv-100 0.22)
  (set! sv-104 395.0)
  (if (not (-> *pc-settings* use-vis?))
      (*! sv-104 (-> *pc-settings* aspect-ratio-reciprocal)))
  (set! sv-108 (-> arg1 origin x))
  (set! sv-112 (new 'stack-no-clear 'hud-box))
  (set! sv-116 (new 'stack 'print-highscore-obj))
  (set! sv-120 (* (-> arg0 sliding) sv-104))
  (set! sv-124 (* (-> arg0 sliding-off) (-> obj slide-dir) sv-104))
  (if (< sv-96 0.0)
      (set! sv-96 0.0)
      )
  (cond
    ((not (-> *bigmap* progress-minimap))
     (draw-busy-loading arg1)
     )
    (else
			;; initial font parameters
      (set! (-> arg1 alpha) sv-96)
      (set-scale! arg1 1.0)
      (set-flags! arg1 (font-flags kerning middle large))
      (set-color! arg1 (font-color progress))
			;; set up for decoration text
      (set! (-> arg1 origin x) 59.0)
			(if (not (-> *pc-settings* use-vis?))
					(set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x)))))
      (set! (-> arg1 origin y) 78.0)
      (set! (-> arg1 width) sv-104)
      (set! (-> arg1 height) 215.0)

			;; set the scissor region
      (begin-scissor sv-112 arg0)

			;; set up for highscore icon
      (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #xc93)))
      (set! (-> obj sprites 0 flags) (the-as uint 4))
      (set! (-> obj sprites 0 scale-x) sv-100)
      (set! (-> obj sprites 0 scale-y) sv-100)
      (let ((v1-33 (-> obj sprites 0 color2)))
        (set! (-> v1-33 0) 128)
        (set! (-> v1-33 1) 128)
        (set! (-> v1-33 2) 128)
        (set! (-> v1-33 3) (the int (* 128.0 sv-96)))
        )
      (set! (-> obj sprites 0 pos z) #xfffff0)
      (set! (-> obj sprites 0 pos w) 0)

			;; draw decoration text
      (if (= (-> *setting-control* user-default language) (language-enum spanish))
          (draw-decoration obj arg1 sv-96 (text-id progress-root-highscores) #t 0.8)
          (draw-decoration obj arg1 sv-96 (text-id progress-root-highscores) #t 0.95)
          )

			;; draw highscore title (e.g 'Gun Course')
      (set-scale! arg1 0.6)
      (set! (-> arg1 height) 185.0)
      (+! (-> arg1 origin y) 46.0)
      (set! (-> arg1 origin x) 65.0)
			(if (not (-> *pc-settings* use-vis?))
					(set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x)))))
			(set-width! arg1 367)
      (set-flags! arg1 (font-flags kerning large))
      (set-color! arg1 (font-color progress-force-selected))
      (set! (-> arg1 origin x) (+ padding sv-120 (-> arg1 origin x)))
      (set-scale! arg1 0.75)
      (when (= (-> *setting-control* user-default language) (language-enum german))
        (set-scale! arg1 0.69)
        )
      (when (= (-> *setting-control* user-default language) (language-enum french))
        (set-scale! arg1 0.72)
        )
      (when (= (-> *setting-control* user-default language) (language-enum spanish))
        (set-scale! arg1 0.65)
        )
			(print-game-text (string-format "~S" (lookup-text! *common-text* (get-highscore-text (-> obj page-index)) #f)) arg1 #f 44 (bucket-id progress))

			;; now draw highscore subtitle (e.g 'Scatter Gun')
      (+! (-> arg1 origin y) 25.0)
      (set-scale! arg1 0.6)
      (when (or (= (-> *setting-control* user-default language) (language-enum french))
                (= (-> *setting-control* user-default language) (language-enum spanish))
                )
        (set-scale! arg1 0.58)
        )
			(print-game-text (string-format "~S" (lookup-text! *common-text* (get-highscore-text-sub (-> obj page-index)) #f)) arg1 #f 44 (bucket-id progress))

      ;; draw highscore icon
      (set! (-> arg1 origin x) (- (-> arg1 origin x) (+ padding sv-120)))
      (+! (-> arg1 origin y) 25.0)
      (draw-highscore-icon
        obj
        (get-highscore-icon (-> obj page-index))
        (the int (+ (the float (get-highscore-icon-xoffset (-> obj page-index))) sv-120))
        (get-highscore-icon-yoffset (-> obj page-index))
        (get-highscore-icon-scale (-> obj page-index))
        )
      
      ;; print the 8 scores now.
      (set! sv-108 (-> arg1 origin x))
      (set-color! arg1 (font-color progress))
      (+! (-> arg1 origin x) sv-120)
      (set-scale! arg1 0.6)
      (let ((gp-5 (get-game-score-ref *game-info* (get-highscore-score (-> obj page-index)))))
        (set! (-> sv-116 index) (-> obj page-index))
        (set! (-> sv-116 previous) #f)
        (set! (-> sv-116 self) obj)
        (case (get-highscore-type (-> obj page-index))
          (('game)
           (set! (-> sv-116 game-score) #t)
           )
          (('race)
           (set! (-> sv-116 game-score) #f)
           )
          )
        (set! (-> sv-116 context) arg1)
        (set! (-> sv-116 local-scale) sv-96)
        (set! (-> sv-116 interp) sv-120)
        (dotimes (s5-5 8)
          (set! (-> sv-116 place) s5-5)
          (set! (-> sv-116 score) (-> gp-5 s5-5))
          (print-highscore sv-116)
          )
        )
      (set! (-> arg1 origin x) sv-108)

      ;; draw the previous highscore that was seen
      ;; note that we only need to know what the last one was
      ;; since the screen only needs to draw 2 highscores at any given time anyway
      ;; reset font parameters
      (set-scale! arg1 0.6)
      (set! (-> arg1 origin x) 59.0)
			(if (not (-> *pc-settings* use-vis?))
					(set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x)))))
      (set! (-> arg1 origin y) 78.0)
      (set! (-> arg1 width) sv-104)
      (set! (-> arg1 height) 215.0)
      (set-scale! arg1 0.5)
      (set! (-> arg1 height) 185.0)
      (+! (-> arg1 origin y) 46.0)
      (set! (-> arg1 origin x) 80.0)
			(if (not (-> *pc-settings* use-vis?))
					(set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x)))))
      (set! (-> obj sprites 0 pos z) #xffffff)
      (set! (-> arg1 width) sv-104)
      (set-flags! arg1 (font-flags kerning large))
      (set-color! arg1 (font-color progress-force-selected))
      (set! (-> arg1 origin x) (+ padding sv-124 (-> arg1 origin x)))
      (set-scale! arg1 0.75)
      (when (= (-> *setting-control* user-default language) (language-enum german))
        (set-scale! arg1 0.69)
        )
      (when (= (-> *setting-control* user-default language) (language-enum french))
        (set-scale! arg1 0.72)
        )
      (when (= (-> *setting-control* user-default language) (language-enum spanish))
        (set-scale! arg1 0.65)
        )
			(print-game-text (string-format "~S" (lookup-text! *common-text* (get-highscore-text (-> obj prev-page-index)) #f)) arg1 #f 44 (bucket-id progress))
      (+! (-> arg1 origin y) 25.0)
      (set-scale! arg1 0.6)
      (when (or (= (-> *setting-control* user-default language) (language-enum french))
                (= (-> *setting-control* user-default language) (language-enum spanish))
                )
        (set-scale! arg1 0.58)
        )
			(print-game-text (string-format "~S" (lookup-text! *common-text* (get-highscore-text-sub (-> obj prev-page-index)) #f)) arg1 #f 44 (bucket-id progress))
      (set! (-> arg1 origin x) (- (-> arg1 origin x) (+ padding sv-124)))
      (+! (-> arg1 origin y) 25.0)
      (draw-highscore-icon
        obj
        (get-highscore-icon (-> obj prev-page-index))
        (the int (+ (the float (get-highscore-icon-xoffset (-> obj page-index))) sv-124))
        (get-highscore-icon-yoffset (-> obj page-index))
        (get-highscore-icon-scale (-> obj page-index))
        )
      (set! sv-108 (-> arg1 origin x))
      (set-color! arg1 (font-color progress))
      (+! (-> arg1 origin x) sv-124)
      (set-scale! arg1 0.6)
      (when (< 1 (get-num-highscores))
        (let ((gp-11 (get-game-score-ref *game-info* (get-highscore-score (-> obj prev-page-index)))))
          (set! (-> sv-116 index) (-> obj prev-page-index))
          (set! (-> sv-116 previous) #t)
          (set! (-> sv-116 self) obj)
          (case (get-highscore-type (-> obj prev-page-index))
            (('game)
             (set! (-> sv-116 game-score) #t)
             )
            (('race)
             (set! (-> sv-116 game-score) #f)
             )
            )
          (set! (-> sv-116 context) arg1)
          (set! (-> sv-116 local-scale) sv-96)
          (set! (-> sv-116 interp) sv-120)
          (dotimes (s5-10 8)
            (set! (-> sv-116 place) s5-10)
            (set! (-> sv-116 score) (-> gp-11 s5-10))
            (print-highscore sv-116)
            )
          )
        (set! (-> arg1 origin x) sv-108)
        (set-scale! arg1 0.6)
        )
      (if (< 1 (get-num-highscores))
          (draw-previous-next obj arg1 #t)
          )
      (end-scissor sv-112 1.0)
      )
    ))
  0
  (none)
  )