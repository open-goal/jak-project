;;-*-Lisp-*-
(in-package goal)

#|

  Additional PC port specific file for overriding/expanding the progress menu
  This gives us more freedom to write code how we want.

|#

(set! (-> *main-options-debug* options 9) (new 'static 'menu-main-menu-option :name (text-id progress-music-player) :scale #t :next-state 'music-player))

(define *game-options-pc*
  (progress-new-generic-scrolling-page (text-id progress-root-game-options)
    (progress-new-generic-scrolling-page (text-id progress-menu-input-options)
      (progress-new-generic-scrolling-page (text-id progress-camera-options)
        ;; TODO - macro for booleans, they are the most common option
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-camera-options-first-horz)
          :truthy-text (text-id progress-normal)
          :falsey-text (text-id progress-inverted)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-camera-options-first-vert)
          :truthy-text (text-id progress-normal)
          :falsey-text (text-id progress-inverted)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-camera-options-third-horz)
          :truthy-text (text-id progress-normal)
          :falsey-text (text-id progress-inverted)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-camera-options-third-vert)
          :truthy-text (text-id progress-normal)
          :falsey-text (text-id progress-inverted)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        ;; TODO - shouldn't be a bool!
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-restore-defaults)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%"))))
      (progress-new-generic-scrolling-page (text-id progress-menu-controller-options)
        ;; TODO - need a dynamic list option, slight modification here
        (new 'static 'menu-generic-carousel-option
          :name (text-id progress-controller-options-select-controller)
          :items (new 'static 'boxed-array :type text-id
                      (text-id language-name-english)
                      (text-id language-name-french)
                      (text-id language-name-german)
                      (text-id language-name-spanish)
                      (text-id language-name-italian)
                      (text-id language-name-japanese)
                      (text-id language-name-korean)
                      (text-id language-name-english-uk))
          :get-item-index-fn (lambda () 0)
          :on-confirm (lambda ((index int)) 0))
        ;; TODO - disabled if controller has no rumble
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-vibration)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () (-> *setting-control* user-default vibration))
          :on-confirm (lambda ((val symbol)) (set! (-> *setting-control* user-default vibration) val)))
        ;; TODO - slider!
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-controller-options-analog-deadzone)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () (-> *setting-control* user-default vibration))
          :on-confirm (lambda ((val symbol)) (set! (-> *setting-control* user-default vibration) val)))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-controller-options-ignore-if-unfocused)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-controller-options-led-hp)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-controller-options-led-darkjak)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
        ;; TODO - shouldn't be a bool!
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-restore-defaults)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%"))))
      (new 'static 'menu-generic-boolean-option
        :name (text-id progress-input-options-enable-keyboard)
        :truthy-text (text-id progress-on)
        :falsey-text (text-id progress-off)
        :get-value-fn (lambda () #t)
        :on-confirm (lambda ((val symbol)) #t))
      (new 'static 'menu-generic-boolean-option
        :name (text-id progress-input-options-enable-mouse)
        :truthy-text (text-id progress-on)
        :falsey-text (text-id progress-off)
        :get-value-fn (lambda () #t)
        :on-confirm (lambda ((val symbol)) #t))
      (progress-new-generic-scrolling-page (text-id progress-menu-mouse-options) ;; TODO - disable based on mouse setting
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-mouse-options-track-camera)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) #t))
        ;; TODO - slider! and hidden based on track camera option
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-mouse-options-horz-sens)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () (-> *setting-control* user-default vibration))
          :on-confirm (lambda ((val symbol)) (set! (-> *setting-control* user-default vibration) val)))
        ;; TODO - slider! and hidden based on track camera option
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-mouse-options-horz-sens)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () (-> *setting-control* user-default vibration))
          :on-confirm (lambda ((val symbol)) (set! (-> *setting-control* user-default vibration) val)))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-mouse-options-player-movement)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) #t))
        ;; TODO - shouldn't be a bool!
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-restore-defaults)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol)) (format 0 "TODO~%"))))
      (new 'static 'menu-generic-boolean-option
        :name (text-id progress-input-options-auto-hide-cursor)
        :truthy-text (text-id progress-on)
        :falsey-text (text-id progress-off)
        :get-value-fn (lambda () #t)
        :on-confirm (lambda ((val symbol)) #t))
      (progress-new-generic-scrolling-page (text-id progress-menu-mouse-options)
        (progress-new-generic-link (text-id progress-reassign-binds-controller)
          ;; TODO - make details list to use for keybinds
          )
        (progress-new-generic-link (text-id progress-reassign-binds-keyboard)
          ;; TODO - make details list to use for keybinds
          )
        (progress-new-generic-link (text-id progress-reassign-binds-mouse)
          ;; TODO - make details list to use for keybinds
          )
        )
      ;; TODO - shouldn't be a bool!
      (new 'static 'menu-generic-boolean-option
        :name (text-id progress-restore-defaults)
        :truthy-text (text-id progress-on)
        :falsey-text (text-id progress-off)
        :get-value-fn (lambda () #t)
        :on-confirm (lambda ((val symbol)) (format 0 "TODO~%")))
    )
    (new 'static 'menu-generic-boolean-option
      :name (text-id progress-subtitles)
      :truthy-text (text-id progress-on)
      :falsey-text (text-id progress-off)
      :get-value-fn (lambda () (-> *setting-control* user-default subtitle))
      :on-confirm (lambda ((val symbol)) (set! (-> *setting-control* user-default subtitle) val)))
    (new 'static 'menu-generic-carousel-option
      :name (text-id progress-sound-subtitle-language)
      :items (new 'static 'boxed-array :type text-id
                  (text-id language-name-english)
                  (text-id language-name-french)
                  (text-id language-name-german)
                  (text-id language-name-spanish)
                  (text-id language-name-italian)
                  (text-id language-name-japanese)
                  (text-id language-name-korean)
                  (text-id language-name-english-uk))
      :get-item-index-fn (lambda () (-> *setting-control* user-default subtitle-language))
      :on-confirm (lambda ((index int)) (set! (-> *setting-control* user-default subtitle-language)
                                              (the-as language-enum index))))
    (new 'static 'menu-generic-carousel-option
      :name (text-id progress-sound-language)
      :items (new 'static 'boxed-array :type text-id
                  (text-id language-name-english)
                  (text-id language-name-french)
                  (text-id language-name-german)
                  (text-id language-name-spanish)
                  (text-id language-name-italian)
                  (text-id language-name-japanese)
                  (text-id language-name-korean)
                  (text-id language-name-english-uk))
      :get-item-index-fn (lambda () (-> *setting-control* user-default language))
      :on-confirm (lambda ((index int)) (set! (-> *setting-control* user-default language) (the-as language-enum index))
                                        ;; NOTE - this doesn't actually work (naughty dog tried it too in their progress code)
                                        ;; fix it eventually
                                        (load-level-text-files (the-as int (-> *setting-control* user-default language)))))
    (progress-new-generic-link (text-id progress-misc-game-options)
      (progress-new-generic-scrolling-page (text-id progress-misc-game-options)
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-discord-rpc)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () #t)
          :on-confirm (lambda ((val symbol))
            (format 0 "TODO!~%")
            (commit-to-file *pc-settings*)))
        (new 'static 'menu-generic-boolean-option
          :name (text-id progress-speedrunner-mode)
          :truthy-text (text-id progress-on)
          :falsey-text (text-id progress-off)
          :get-value-fn (lambda () (-> *pc-settings* speedrunner-mode?))
          :on-confirm (lambda ((val symbol))
            (set! (-> *pc-settings* speedrunner-mode?) val)
            (commit-to-file *pc-settings*)))))))


;; TODO - update this
;; graphic options
;;   resolution
;;   display mode
;;   display select
;;   vsync
;;   aspect ratio
;;   msaa
;;   frame rate
;;   ps2 options
;;     lod bg
;;     lod fg
;;     particle culling
;;     force env mapping
;;     actor culling
(define *graphic-options-pc*
  (new 'static 'menu-option-list
    :y-center 198
    :y-space 34
    :scale 0.82
    :options (new 'static 'boxed-array :type menu-option
      (new 'static 'menu-display-mode-option :name (text-id progress-display-mode))
      (new 'static 'menu-aspect-ratio-pc-option :name (text-id progress-aspect-ratio))
      (new 'static 'menu-frame-rate-option :name (text-id progress-frame-rate))
      (new 'static 'menu-on-off-vsync-option :name (text-id progress-vsync))
      )
    )
  )

(define *frame-rate-options* (new 'static 'boxed-array :type int16 30 50 60 75 120 144 165 240))

(define *aspect-ratio-custom-options*
  (new 'static 'menu-option-list
    :y-center 198
    :y-space 34
    :scale 0.82
    :options (new 'static 'boxed-array :type menu-option
      (new 'static 'menu-aspect-ratio-custom-option :name (text-id progress-aspect-ratio-custom-title))
      )
    )
  )


(define *music-player-options*
  (new 'static 'menu-option-list
    :y-center 198
    :y-space 34
    :scale 0.82
    :options (new 'static 'boxed-array :type menu-option
      (new 'static 'menu-music-player-option :name (text-id progress-music-player))
      )
    )
  )


