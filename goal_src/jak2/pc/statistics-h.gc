;;-*-Lisp-*-
(in-package goal)

#|
  Header file for the statistics code.
 |#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defconstant KILL_STATS_MAX_ENEMY_TYPES 127)
(defconstant KILL_STATS_MAX_SOURCE 35)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; types and enums
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defenum kill-stats-source
  :type uint8
  (unknown)
  
  (gun-yellow)
  (gun-red)
  (gun-blue)
  (gun-dark)
  (board)
  (board-trick)
  (mech)
  (mech-bonk)
  (turret)
  (punch)
  (flop)
  (uppercut)
  (spin)
  (roll)

  (darkjak-punch)
  (darkjak-flop)
  (darkjak-uppercut)
  (darkjak-spin)
  (darkjak-roll)
  (darkjak-bomb0)
  (darkjak-bomb1)

  (indax-punch)
  (indax-spin)
  
  (guard)
  (bot)
  (sig)
  (ashelin)
  (jinx)
  (grim)
  (mog)
  (metalhead)
  (enemy)

  (max)
  )


(deftype kill-statistics-source-entry (structure)
  ((name    symbol)
   (amount  int32)
   )
  )

(deftype kill-statistics-enemy-entry (structure)
  ((name      symbol)
   (sources   int16 KILL_STATS_MAX_SOURCE)
   )
  )


(deftype kill-statistics (structure)
  ((enemies    kill-statistics-enemy-entry KILL_STATS_MAX_ENEMY_TYPES   :inline)
   (allow-unknown?  symbol)
   )

  (:methods
    (initialize (_type_) int)
    (alloc-slot (_type_ symbol) kill-statistics-enemy-entry)

    (get-total-count (_type_) int)
    (get-enemy-stats (_type_ symbol) kill-statistics-enemy-entry)
    (get-count-for-enemy (_type_ symbol) int)
    (get-count-for-source (_type_ kill-stats-source) int)
    (get-count (_type_ symbol kill-stats-source) int)

    (increment (_type_ symbol kill-stats-source) int)

    (print-stats (_type_ object) object)
    )
  )


(deftype statistics (structure)
  ((kill-stats  kill-statistics :inline)
   )
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; methods
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(defmethod new statistics ((allocation symbol) (type-to-make type))
  "make a new statistics"
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (initialize (-> obj kill-stats))
    (false! (-> obj kill-stats allow-unknown?))
    obj))



(defmethod initialize ((this kill-statistics))
  "initialize a kill-statistics to the default values"
  
  (dotimes (i KILL_STATS_MAX_ENEMY_TYPES)
    (set! (-> this enemies i name) #f)
    (dotimes (ii KILL_STATS_MAX_SOURCE)
      (set! (-> this enemies i sources ii) 0)
      )
    )
  
  0)


(defmethod get-total-count ((this kill-statistics))
  "return the total kill count for every thing tracked in the stats"

  (let ((amount 0))
    (dotimes (i KILL_STATS_MAX_ENEMY_TYPES)
      (when (-> this enemies i name)
        (dotimes (ii KILL_STATS_MAX_SOURCE)
          (+! amount (-> this enemies i sources ii))
          )))
    amount)
  )


(defmethod get-enemy-stats ((this kill-statistics) (name symbol))
  "return the enemy entry with that name. #f = not found"

  (dotimes (i KILL_STATS_MAX_ENEMY_TYPES)
    (when (= (-> this enemies i name) name)
        (return (-> this enemies i))))
  (the kill-statistics-enemy-entry #f))

(defmethod alloc-slot ((this kill-statistics) (name symbol))
  "allocates an enemy stats entry for that name and returns it. #f = out of memory"
  (dotimes (i KILL_STATS_MAX_ENEMY_TYPES)
    (when (not (-> this enemies i name))
        (set! (-> this enemies i name) name)
        (dotimes (ii KILL_STATS_MAX_SOURCE)
          (set! (-> this enemies i sources ii) 0))
        (return (-> this enemies i)))
    )
  (the kill-statistics-enemy-entry #f))

(defmethod increment ((this kill-statistics) (name symbol) (source kill-stats-source))
  "adds one kill to the kill statistics"

  (let ((kill-stats (get-enemy-stats this name)))
    (if (not kill-stats)
        (set! kill-stats (alloc-slot this name)))
    (when (not kill-stats)
        (format 0 "out of stats memory!~%")
        (return 0))
    
    (+! (-> kill-stats sources source) 1))
  )



(defmethod get-count ((this kill-statistics) (name symbol) (source kill-stats-source))
  "return number of kills for that enemy with that cause of death"

  (let ((kill-stats (get-enemy-stats this name)))
    (if (not kill-stats)
        (return 0))
    
    (-> kill-stats sources source))
  )

(defmethod get-count-for-enemy ((this kill-statistics) (name symbol))
  "return number of kills for that enemy"

  (let ((kill-stats (get-enemy-stats this name))
        (kills 0))
    (if (not kill-stats)
        (return 0))
    
    (dotimes (i KILL_STATS_MAX_SOURCE)
      (+! kills (-> kill-stats sources i)))
    kills)
  )

(defmethod get-count-for-source ((this kill-statistics) (source kill-stats-source))
  "return number of kills for that source"

  (let ((kills 0))
    (dotimes (i KILL_STATS_MAX_ENEMY_TYPES)
      (when (-> this enemies i name)
        (+! kills (-> this enemies i sources source))
        )
      )
    kills)
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; global variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define *statistics* (new 'global 'statistics))

