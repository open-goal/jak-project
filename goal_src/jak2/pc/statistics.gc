;;-*-Lisp-*-
(in-package goal)

#|

  Code for the statistics tracker.

 |#



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  debug functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun-debug pu->string (out (pu penetrate))
  (bit-enum->string penetrate pu out)
  )

(defun-debug kill-source->string ((ks kill-stats-source))
  (enum->string kill-stats-source ks))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defmacro pu? (pu &rest flags)
  `(logtest? ,pu (penetrate ,@flags))
  )

(defmacro pu-all? (pu &rest flags)
  `(logtesta? ,pu (penetrate ,@flags))
  )

(define-extern bot type)
(define-extern crimson-guard type)
(defun pu&attacker->kill-source ((pu penetrate) (attacker process))
  "returns the appropriate kill source based on penetrate-using and attacker"

  (cond
    ((not attacker)
      (format #t "got null attacker~%")
      (kill-stats-source unknown))
    ((type? attacker target)
      (case pu
        (((penetrate spin touch)) (if (focus-test? (the target attacker) indax) (kill-stats-source indax-spin) (kill-stats-source spin)))
        (((penetrate flop touch)) (kill-stats-source flop))
        (((penetrate uppercut touch)) (kill-stats-source uppercut))
        (((penetrate punch touch)) (if (focus-test? (the target attacker) indax) (kill-stats-source indax-punch) (kill-stats-source punch)))

        (((penetrate board spin touch)) (kill-stats-source board-trick))
        (((penetrate board touch)) (kill-stats-source board))

        (((penetrate dark-skin spin touch)) (kill-stats-source darkjak-spin))
        (((penetrate dark-skin flop touch)) (kill-stats-source darkjak-flop))
        (((penetrate dark-skin uppercut touch)) (kill-stats-source darkjak-uppercut))
        (((penetrate dark-punch dark-skin punch touch)) (kill-stats-source darkjak-punch))
        (((penetrate dark-bomb dark-skin touch)) (case (-> attacker state)
                                                    ((target-darkjak-bomb0) (kill-stats-source darkjak-bomb0))
                                                    ((target-darkjak-bomb1) (kill-stats-source darkjak-bomb1))
                                                    (else (kill-stats-source unknown))))
        (((penetrate dark-skin touch)) (kill-stats-source unknown))
        
        (((penetrate jak-yellow-shot generic-attack)) (kill-stats-source gun-yellow))
        (((penetrate jak-red-shot generic-attack)) (kill-stats-source gun-red))
        (((penetrate jak-blue-shot generic-attack)) (kill-stats-source gun-blue))
        (((penetrate generic-attack)) (kill-stats-source gun-dark))

        (else
          (format #t "unhandled target penetrate-using #x~x for kill-source~%" pu)
          (kill-stats-source unknown)))
      )
    ((type? attacker bot)
      (kill-stats-source bot)
      )
    ((type? attacker crimson-guard)
      (kill-stats-source guard)
      )
    ((type? attacker enemy)
      (kill-stats-source enemy)
      )
    (else
      (format #t "unknown attacker ~A~%" attacker)
      (kill-stats-source unknown))
    )
  )


(define-extern civilian type)
(define-extern sig type)
(define-extern ashelin type)
(define-extern stad-samos type)
(define-extern juicer type)
(define-extern grunt type)
(define-extern flitter type)
(define-extern wasp type)
(define-extern spyder type)
(define-extern metalhead-predator type)
(define-extern metalhead-grunt type)
(define-extern metalhead-flitter type)
(define-extern crimson-guard-hover type)
(define-extern crimson-guard-level type)
(defun remap-enemy-type-name ((en-type type))
  "returns the appropriate type name (symbol) for the stats tracker"

  (cond
    ((symbol-member? (-> en-type symbol) '(kid kid-escort)) 'kid)
    
    ((= en-type metalhead-predator) 'predator)
    ((= en-type metalhead-grunt) 'grunt)
    ((= en-type metalhead-flitter) 'flitter)
    ((= en-type crimson-guard-level) 'crimson-guard)
    ((= en-type crimson-guard-hover) 'crimson-guard)

    ((type-type? en-type civilian) 'civilian)
    ((type-type? en-type sig) 'sig)
    ((type-type? en-type ashelin) 'ashelin)
    ((type-type? en-type stad-samos) 'stad-samos)
    ((type-type? en-type juicer) 'juicer)
    ((type-type? en-type grunt) 'grunt)
    ((type-type? en-type flitter) 'flitter)
    ((type-type? en-type wasp) 'wasp)
    ((type-type? en-type spyder) 'spyder)
    (else (-> en-type symbol)))
  )



(defun add-to-kill-stats ((enemy enemy) (attack enemy-attack-info))
  "adds a kill to the statistics tracker"
  
  ;; (format #t "enemy ~A killed~%" (-> enemy name))
  ;; (format #t "~Tattacker: ~A~%" (handle->process (-> attack attacker-handle)))
  ;; (format #t "~Tpu: ")
  ;; (pu->string #t (-> attack penetrate-using))
  ;; (format #t "~%")

  (let ((enemy-name (remap-enemy-type-name (-> enemy type)))
        (source (pu&attacker->kill-source (-> attack penetrate-using) (handle->process (-> attack attacker-handle)))))

    (when *debug-segment*
        (format #t "STATS : enemy ~S(~S) killed by ~S~%" enemy-name (-> enemy type symbol) (kill-source->string source)))
        
    (increment (-> *statistics* kill-stats) enemy-name source)
    )
  )



(defun reset-kill-stats ()
  (initialize (-> *statistics* kill-stats)))



(defmethod print-stats ((this kill-statistics) out)
  "print the stats as a table to out"

  (format out "----! kill stats (total: ~D) !----~%" (get-total-count this))
  (dotimes (i KILL_STATS_MAX_ENEMY_TYPES)
    (when (-> this enemies i name)
      (format out "~S: ~D total~%" (-> this enemies i name) (get-count-for-enemy this (-> this enemies i name)))
      (dotimes (ii KILL_STATS_MAX_SOURCE)
        (if (nonzero? (-> this enemies i sources ii))
            (format out "  ~3D ~S~%" (-> this enemies i sources ii) (kill-source->string (the kill-stats-source ii))))
        )
      )
    )
  out)

