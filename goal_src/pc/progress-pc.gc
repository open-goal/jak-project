;;-*-Lisp-*-
(in-package goal)

#|

  Code for the progress menu in the PC port. The original code is still loaded, this just has some overriden functions.

 |#


(#when PC_PORT


;;-------------------
;; pc menu defines

(define *game-options-pc*
  (new 'static 'boxed-array :type game-option :length 7 :allocated-length 7
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id vibrations) :scale #t)
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id play-hints) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id camera) :scale #t :param3 (game-option-menu camera))
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id accessibility) :scale #t :param3 (game-option-menu accessibility))
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id ps2-options) :scale #t :param3 (game-option-menu game-ps2))
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id discord-rpc) :scale #t)
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )

(define *graphic-options-pc*
  (new 'static 'boxed-array :type game-option :length 8 :allocated-length 8
    (new 'static 'game-option :option-type (game-option-type display-mode) :name (game-text-id display-mode) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id game-resolution) :scale #t :param3 (game-option-menu resolution))
    (new 'static 'game-option :option-type (game-option-type aspect-ratio) :name (game-text-id aspect-ratio-ps2) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id aspect-ratio) :scale #t :param3 (game-option-menu aspect-ratio))
    (new 'static 'game-option :option-type (game-option-type msaa) :name (game-text-id msaa) :scale #t)
    (new 'static 'game-option :option-type (game-option-type frame-rate) :name (game-text-id frame-rate) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id ps2-options) :scale #t :param3 (game-option-menu gfx-ps2))
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )


;;-------------------
;; function overrides

(defun init-game-options ((obj progress))
  "Set the options for all of the menus."

  ;; start off by making them all invalid
  (dotimes (i (progress-screen max))
    (set! (-> *options-remap* i) #f)
    )

  ;; main menu
  (set! (-> *options-remap* (progress-screen settings))
    (case *kernel-boot-message*
        (('demo)
         ;; game demo
         *main-options-demo*
         )
        (('demo-shared)
         ;; game demo with external launcher
         *main-options-demo-shared*
         )
        (else
         ;; normal game
         *main-options*
         )
      )
    )
  (set! (-> *options-remap* (progress-screen game-settings)) *game-options-pc*)
  (set! (-> *options-remap* (progress-screen graphic-settings)) *graphic-options-pc*)

  (set! (-> *options-remap* (progress-screen sound-settings))           *sound-options*)
  (set! (-> *options-remap* (progress-screen memcard-no-space))         *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-not-inserted))     *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-not-formatted))    *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-format))           *yes-no-options*)
  (set! (-> *options-remap* (progress-screen memcard-data-exists))      *yes-no-options*)
  (set! (-> *options-remap* (progress-screen memcard-insert))           *ok-options*)
  (set! (-> *options-remap* (progress-screen load-game))                *load-options*)
  (set! (-> *options-remap* (progress-screen save-game))                *save-options*)
  (set! (-> *options-remap* (progress-screen save-game-title))          *save-options-title*)
  (set! (-> *options-remap* (progress-screen memcard-error-loading))    *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-error-saving))     *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-error-formatting)) *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-error-creating))   *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-auto-save-error))  *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-removed))          *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-no-data))          *yes-no-options*)
  (set! (-> *options-remap* (progress-screen title))                    *title*)
  (set! (-> *options-remap* (progress-screen settings-title))           *options*)
  (set! (-> *options-remap* (progress-screen auto-save))                *ok-options*)
  (set! (-> *options-remap* (progress-screen pal-change-to-60hz))       *yes-no-options*)
  (set! (-> *options-remap* (progress-screen pal-now-60hz))             *yes-no-options*)
  (set! (-> *options-remap* (progress-screen no-disc))                  *ok-options*)
  (set! (-> *options-remap* (progress-screen bad-disc))                 *ok-options*)
  (set! (-> *options-remap* (progress-screen quit))                     *yes-no-options*)
  (set! (-> *progress-state* aspect-ratio-choice) (get-aspect-ratio))
  (set! (-> *progress-state* video-mode-choice) (get-video-mode))
  (set! (-> *progress-state* yes-no-choice) #f)
  (set! (-> *game-options* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *game-options* 2 value-to-modify) (&-> *setting-control* default language))
  (set! (-> *game-options-japan* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options-japan* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *game-options-demo* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options-demo* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *graphic-options* 1 value-to-modify) (&-> *progress-state* aspect-ratio-choice))
  (set! (-> *graphic-title-options-pal* 1 value-to-modify) (&-> *progress-state* video-mode-choice))
  (set! (-> *graphic-title-options-pal* 2 value-to-modify) (&-> *progress-state* aspect-ratio-choice))
  (set! (-> *sound-options* 0 value-to-modify) (&-> *setting-control* default sfx-volume))
  (set! (-> *sound-options* 1 value-to-modify) (&-> *setting-control* default music-volume))
  (set! (-> *sound-options* 2 value-to-modify) (&-> *setting-control* default dialog-volume))
  (set! (-> *yes-no-options* 0 value-to-modify) (&-> *progress-state* yes-no-choice))
  (none)
  )

(defmethod respond-common progress ((obj progress))
  "common logic for navigating the progress menu.
   this is the overriden version, purged of no longer necessary code and added our new code."

  (mc-get-slot-info 0 *progress-save-info*)
  (set! (-> obj card-info) *progress-save-info*)
  (let ((options (-> *options-remap* (-> obj display-state))))
    (when (and options (not (-> obj in-transition)))
      ;; only respond to inputs when transition is done (and also there's options at all)
      (cond
        ((cpad-pressed? 0 up)
        ;; pressed up
        ;; original code checked hold and then press, because hold can be used during center screen option. which we don't use.
          (when (not (-> obj selected-option))
            (if (!= (length options) 1)
                (sound-play-by-name (static-sound-name "cursor-up-down") (new-sound-id) 1024 0 0 1 #t)
                )
            (set! (-> obj last-option-index-change) (-> *display* real-frame-counter))
            (if (> (-> obj option-index) 0)
                (+! (-> obj option-index) -1)
                (set! (-> obj option-index) (+ (length options) -1))
                )
            )
         )
        ((cpad-pressed? 0 down)
        ;; pressed down.
          (when (not (-> obj selected-option))
            (if (!= (length options) 1)
                (sound-play-by-name (static-sound-name "cursor-up-down") (new-sound-id) 1024 0 0 1 #t)
                )
            (set! (-> obj last-option-index-change) (-> *display* real-frame-counter))
            (if (< (-> obj option-index) (1- (length options)))
                (1+! (-> obj option-index))
                (set! (-> obj option-index) 0)
                )
            )
         )
        ((cpad-hold? 0 left)
        ;; holding left. sliders use hold.
         (cond
           ((cpad-pressed? 0 left)
            ;; navigate left.
            (when (or (-> obj selected-option) (= (-> options (-> obj option-index) option-type) (game-option-type yes-no)))
              (let ((sound? #f))
                (case (-> options (-> obj option-index) option-type)
                  (((game-option-type on-off) (game-option-type yes-no))
                   ;; pressed left on an on/off yes/no option
                   (when (not (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify))))
                     ;; it was on 'off' or 'no'
                     (set! sound? #t)
                     ;; vibrate if this toggles vibration. broken in original game.
                     (if (= (-> options (-> obj option-index) value-to-modify) (&-> *setting-control* default vibration))
                         (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 255 (seconds 0.3))
                         )
                     )
                   ;; it's on 'on' or 'yes' now
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) #t)
                   )
                  (((game-option-type aspect-ratio))
                   (set! sound? (= (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect16x9))
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect4x3)
                   )
                  (((game-option-type video-mode))
                   (set! sound? (= (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'ntsc))
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'pal)
                   )
                  (((game-option-type language))
                   ;; language selection. if not on first language, go back. if on first language, go to last.
                   (if (> (the-as int (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify)))) 0)
                       (+! (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify))) -1)
                       (set! (-> (the-as (pointer int64) (-> options (-> obj option-index) value-to-modify)))
                             (if (and (zero? (scf-get-territory)) (not (and (= *progress-cheat* 'language) (cpad-hold? 0 l2) (cpad-hold? 0 r2))))
                                 4
                                 5
                                 )
                             )
                       )
                   ;; language was updated.
                   (set! (-> obj language-transition) #t)
                   (set! (-> obj language-direction) #t)
                   (set! sound? #t)
                   )
                  )
                (if sound?
                    (sound-play-by-name (static-sound-name "cursor-l-r") (new-sound-id) 1024 0 0 1 #t)
                    )
                )
              )
            )
           (else
             ;; holding left
             (when (-> obj selected-option)
               (let ((sound? #f))
                 (case (-> options (-> obj option-index) option-type)
                   (((game-option-type slider))
                    ;; slider is selected
                    (cond
                      ((>= (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                           (+ 1.0 (-> options (-> obj option-index) param1))
                           )
                       ;; we're 1 above minimum, so reduce by 1
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (+ -1.0 (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                             )
                       (set! sound? #t)
                       )
                      ((< (-> options (-> obj option-index) param1)
                       ;; not at least 1 above minimum, just set to minimum (why not just use max or something!!)
                          (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                          )
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (-> options (-> obj option-index) param1)
                             )
                       (set! sound? #t)
                       )
                      )
                    )
                   )
                 ;; play sound
                 (when sound?
                   (let ((vol 100.0))
                     (case (-> options (-> obj option-index) name)
                       (((game-text-id music-volume) (game-text-id speech-volume))
                        (set! vol (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                        )
                       )
                     (when (< (seconds 0.3) (- (-> *display* real-frame-counter) (-> *progress-state* last-slider-sound)))
                       (set! (-> *progress-state* last-slider-sound) (-> *display* real-frame-counter))
                       (sound-play-by-name (static-sound-name "slider2001") (new-sound-id) (the int (* 10.24 vol)) 0 0 1 #t)
                       )
                     )
                   )
                 )
               )
             )
           )
         )
        ((cpad-hold? 0 right)
        ;; holding right
         (cond
           ((cpad-pressed? 0 right)
            ;; pressed right
            (when (or (-> obj selected-option) (= (-> options (-> obj option-index) option-type) (game-option-type yes-no)))
              (let ((sound? #f))
                (case (-> options (-> obj option-index) option-type)
                  (((game-option-type on-off) (game-option-type yes-no))
                   ;; play sound if it was on 'yes'
                   (set! sound? (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))))
                   ;; set to no
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) #f)
                   )
                  (((game-option-type aspect-ratio))
                   ;; same shit different toilet
                   (set! sound? (= (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect4x3))
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect16x9)
                   )
                  (((game-option-type video-mode))
                   ;; etc
                   (set! sound? (= (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'pal))
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'ntsc)
                   )
                  (((game-option-type language))
                   ;; 0 -> 1 ... -> 5 -> 0
                   (let ((max-lang (if (and (zero? (scf-get-territory))
                                          (not (and (= *progress-cheat* 'language) (cpad-hold? 0 l2) (cpad-hold? 0 r2)))
                                          )
                                     4
                                     5
                                     )
                                 )
                         )
                     (if (< (the-as int (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify)))) max-lang)
                         (1+! (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify))))
                         (set! (-> (the-as (pointer int64) (-> options (-> obj option-index) value-to-modify))) 0)
                         )
                     )
                   (set! (-> obj language-transition) #t)
                   (set! (-> obj language-direction) #f)
                   (set! sound? #t)
                   )
                  )
                (if sound?
                    (sound-play-by-name (static-sound-name "cursor-l-r") (new-sound-id) 1024 0 0 1 #t)
                    )
                )
              )
            )
           (else
             (when (-> obj selected-option)
               (let ((sound? #f))
                 (case (-> options (-> obj option-index) option-type)
                   (((game-option-type slider))
                    (cond
                      ((>= (+ -1.0 (-> options (-> obj option-index) param2))
                           (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                           )
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (+ 1.0 (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                             )
                       (set! sound? #t)
                       )
                      ((< (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                          (-> options (-> obj option-index) param2)
                          )
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (-> options (-> obj option-index) param2)
                             )
                       (set! sound? #t)
                       )
                      )
                    )
                   )
                 (when sound?
                   (let ((vol 100.0))
                     (case (-> options (-> obj option-index) name)
                       (((game-text-id music-volume) (game-text-id speech-volume))
                        (set! vol (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                        )
                       )
                     (when (< (seconds 0.3) (- (-> *display* real-frame-counter) (-> *progress-state* last-slider-sound)))
                       (set! (-> *progress-state* last-slider-sound) (-> *display* real-frame-counter))
                       (sound-play-by-name (static-sound-name "slider2001") (new-sound-id) (the int (* 10.24 vol)) 0 0 1 #t)
                       )
                     )
                   )
                 )
               )
             )
           )
         )
        ((or (cpad-pressed? 0 square) (cpad-pressed? 0 triangle))
         ;; pressed square or triangle
         (cond
           ((-> obj selected-option)
            ;; an option is selected. AHHH!!!
            (case (-> options (-> obj option-index) option-type)
              (((game-option-type slider))
               (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* slider-backup)
                     )
               )
              (((game-option-type language))
               (set! (-> (the-as (pointer int64) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* language-backup)
                     )
               )
              (((game-option-type on-off))
               (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* on-off-backup)
                     )
               )
              (((game-option-type aspect-ratio) (game-option-type video-mode))
               (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* aspect-ratio-backup)
                     )
               )
              )
            (sound-play-by-name (static-sound-name "cursor-options") (new-sound-id) 1024 0 0 1 #t)
            (set! (-> obj selected-option) #f)
            )
           ((or (can-go-back? obj)
                (= (-> obj display-state) (progress-screen load-game))
                (= (-> obj display-state) (progress-screen save-game))
                (= (-> obj display-state) (progress-screen save-game-title))
                )
            ;; no option selected, see if we can go back
            (cpad-clear! 0 square)
            (cpad-clear! 0 triangle)
            (if (= (-> obj display-state) (progress-screen settings))
                (sound-play-by-name (static-sound-name "menu-stats") (new-sound-id) 1024 0 0 1 #t)
                (sound-play-by-name (static-sound-name "cursor-options") (new-sound-id) 1024 0 0 1 #t)
                )
            (load-level-text-files (-> *level-task-data* (-> obj display-level-index) text-group-index))
            (set! (-> obj next-display-state) (progress-screen invalid))
            )
           )
         )
        ((or (cpad-pressed? 0 x) (cpad-pressed? 0 circle))
         ;; pressed x or circle
         (cond
           ((not (-> obj selected-option))
            ;; no option selected.
            (cond
              ((= (-> options (-> obj option-index) option-type) (game-option-type menu))
               ;; go to a menu
               (cpad-clear! 0 x)
               (cpad-clear! 0 circle)
               (push! obj)
               (sound-play-by-name (static-sound-name "select-option") (new-sound-id) 1024 0 0 1 #t)
               (set! (-> obj next-display-state) (the-as progress-screen (-> options (-> obj option-index) param3)))
               (case (-> obj next-display-state)
                 (((progress-screen load-game) (progress-screen save-game) (progress-screen save-game-title))
                  (set! (-> obj next-display-state) (set-memcard-screen obj (-> obj next-display-state)))
                  )
                 )
               )
              ((= (-> options (-> obj option-index) option-type) (game-option-type button))
               ;; a button. what?
               (case (-> options (-> obj option-index) name)
                 (((game-text-id exit-demo))
                  ;; exit demo!
                  (set! *master-exit* 'force)
                  (set-master-mode 'game)
                  )
                 (((game-text-id back))
                  ;; go back!
                  (if (= (-> obj display-state) (progress-screen settings))
                      (sound-play-by-name (static-sound-name "menu-stats") (new-sound-id) 1024 0 0 1 #t)
                      (sound-play-by-name (static-sound-name "cursor-options") (new-sound-id) 1024 0 0 1 #t)
                      )
                  (load-level-text-files (-> *level-task-data* (-> obj display-level-index) text-group-index))
                  (set! (-> obj next-display-state) (progress-screen invalid))
                  )
                 )
               ;; other behaviors are hardcoded elsewhere because screw you.
               )
              ((!= (-> options (-> obj option-index) option-type) (game-option-type yes-no))
               ;; not yes-no
               ;; overwrite backups!
               (case (-> options (-> obj option-index) option-type)
                 (((game-option-type slider))
                  (set! (-> *progress-state* slider-backup)
                        (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                  )
                 (((game-option-type language))
                  (set! (-> *progress-state* language-backup)
                        (the-as int (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify)))))
                  )
                 (((game-option-type on-off))
                  (set! (-> *progress-state* on-off-backup)
                        (the-as symbol (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))))
                  )
                 (((game-option-type aspect-ratio) (game-option-type video-mode))
                  (set! (-> *progress-state* aspect-ratio-backup)
                        (the-as symbol (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))))
                  )
                 )
               (sound-play-by-name (static-sound-name "select-option") (new-sound-id) 1024 0 0 1 #t)
               (cpad-clear! 0 x)
               (cpad-clear! 0 circle)
               (set! (-> obj selected-option) #t)
               (when (= (-> options (-> obj option-index) option-type) (game-option-type language))
                 (set! (-> obj language-selection) (-> *setting-control* current language))
                 (set! (-> obj language-direction) #t)
                 (set! (-> obj language-transition) #f)
                 (set! (-> obj language-x-offset) 0)
                 )
               )
              )
            )
           (else
             (sound-play-by-name (static-sound-name "start-options") (new-sound-id) 1024 0 0 1 #t)
             (set! (-> obj selected-option) #f)
             (case (-> options (-> obj option-index) option-type)
               (((game-option-type aspect-ratio))
                (set! (-> *setting-control* default aspect-ratio)
                      (the-as symbol (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))))
                )
               (((game-option-type video-mode))
                (case (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))
                  (('pal)
                   (set! (-> *setting-control* default video-mode)
                         (the-as symbol (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))))
                   )
                  (('ntsc)
                   (push! obj)
                   (set! (-> obj next-display-state) (progress-screen pal-change-to-60hz))
                   )
                  )
                )
               (((game-option-type language))
                (if (not (-> obj language-transition))
                    (load-level-text-files (-> obj display-level-index)))
                )
               )
             )
           )
         )
        )
      )
    )
  (none)
  )




)



