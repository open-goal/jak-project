;;-*-Lisp-*-
(in-package goal)

#|

  Code for the progress menu in the PC port. The original code is still loaded, this just has some overriden functions.

 |#


(#when PC_PORT


;;-------------------
;; pc menu defines

(define *game-options-pc*
  (new 'static 'boxed-array :type game-option :length 6 :allocated-length 6
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id vibrations) :scale #t)
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id play-hints) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id camera-options) :scale #t :param3 (game-option-menu camera-options))
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id accessibility-options) :scale #t :param3 (game-option-menu accessibility-options))
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id misc-options) :scale #t :param3 (game-option-menu misc-options))
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )

(define *graphic-options-pc*
  (new 'static 'boxed-array :type game-option :length 8 :allocated-length 8
    (new 'static 'game-option :option-type (game-option-type display-mode) :name (game-text-id display-mode) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id game-resolution) :scale #t :param3 (game-option-menu resolution))
    (new 'static 'game-option :option-type (game-option-type aspect-ratio) :name (game-text-id aspect-ratio-ps2) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id aspect-ratio) :scale #t :param3 (game-option-menu aspect-ratio))
    (new 'static 'game-option :option-type (game-option-type msaa) :name (game-text-id msaa) :scale #t)
    (new 'static 'game-option :option-type (game-option-type frame-rate) :name (game-text-id frame-rate) :scale #t)
    (new 'static 'game-option :option-type (game-option-type menu) :name (game-text-id ps2-options) :scale #t :param3 (game-option-menu gfx-ps2-options))
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )

(define *misc-options*
  (new 'static 'boxed-array :type game-option :length 2 :allocated-length 2
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id discord-rpc) :scale #t)
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )

(define *camera-options*
  (new 'static 'boxed-array :type game-option :length 3 :allocated-length 3
    (new 'static 'game-option :option-type (game-option-type normal-inverted) :name (game-text-id camera-controls-horz) :scale #t)
    (new 'static 'game-option :option-type (game-option-type normal-inverted) :name (game-text-id camera-controls-vert) :scale #t)
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )

(define *accessibility-options*
  (new 'static 'boxed-array :type game-option :length 2 :allocated-length 2
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id money-starburst) :scale #t)
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )

(define *gfx-ps2-options*
  (new 'static 'boxed-array :type game-option :length 2 :allocated-length 2
    (new 'static 'game-option :option-type (game-option-type on-off) :name (game-text-id ps2-parts) :scale #t)
    (new 'static 'game-option :option-type (game-option-type button) :name (game-text-id back) :scale #t)
    )
  )


;;-------------------
;; function overrides

(defun init-game-options ((obj progress))
  "Set the options for all of the menus."

  ;; start off by making them all invalid
  (dotimes (i (progress-screen max))
    (set! (-> *options-remap* i) #f)
    )

  ;; set up options for each screen
  (set! (-> *options-remap* (progress-screen settings)) *main-options*)
  (set! (-> *options-remap* (progress-screen game-settings)) *game-options-pc*)
  (set! (-> *options-remap* (progress-screen graphic-settings)) *graphic-options-pc*)

  (set! (-> *options-remap* (progress-screen sound-settings))           *sound-options*)
  (set! (-> *options-remap* (progress-screen memcard-no-space))         *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-not-inserted))     *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-not-formatted))    *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-format))           *yes-no-options*)
  (set! (-> *options-remap* (progress-screen memcard-data-exists))      *yes-no-options*)
  (set! (-> *options-remap* (progress-screen memcard-insert))           *ok-options*)
  (set! (-> *options-remap* (progress-screen load-game))                *load-options*)
  (set! (-> *options-remap* (progress-screen save-game))                *save-options*)
  (set! (-> *options-remap* (progress-screen save-game-title))          *save-options-title*)
  (set! (-> *options-remap* (progress-screen memcard-error-loading))    *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-error-saving))     *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-error-formatting)) *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-error-creating))   *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-auto-save-error))  *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-removed))          *ok-options*)
  (set! (-> *options-remap* (progress-screen memcard-no-data))          *yes-no-options*)
  (set! (-> *options-remap* (progress-screen title))                    *title*)
  (set! (-> *options-remap* (progress-screen settings-title))           *options*)
  (set! (-> *options-remap* (progress-screen auto-save))                *ok-options*)
  (set! (-> *options-remap* (progress-screen pal-change-to-60hz))       *yes-no-options*)
  (set! (-> *options-remap* (progress-screen pal-now-60hz))             *yes-no-options*)
  (set! (-> *options-remap* (progress-screen no-disc))                  *ok-options*)
  (set! (-> *options-remap* (progress-screen bad-disc))                 *ok-options*)
  (set! (-> *options-remap* (progress-screen quit))                     *yes-no-options*)
  ;; our screens!
  (set! (-> *options-remap* (progress-screen aspect-msg)) *yes-no-options*)
  (set! (-> *options-remap* (progress-screen camera-options)) *camera-options*)
  (set! (-> *options-remap* (progress-screen misc-options)) *misc-options*)
  (set! (-> *options-remap* (progress-screen accessibility-options)) *accessibility-options*)
  (set! (-> *options-remap* (progress-screen gfx-ps2-options)) *gfx-ps2-options*)
  
  ;; set default params
  (set! (-> *progress-state* aspect-ratio-choice) (get-aspect-ratio))
  (set! (-> *progress-state* video-mode-choice) (get-video-mode))
  (set! (-> *progress-state* yes-no-choice) #f)
  
  ;; set variable pointers
  (set! (-> *game-options* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *game-options* 2 value-to-modify) (&-> *setting-control* default language))
  (set! (-> *game-options-japan* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options-japan* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *game-options-demo* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options-demo* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *graphic-options* 1 value-to-modify) (&-> *progress-state* aspect-ratio-choice))
  (set! (-> *graphic-title-options-pal* 1 value-to-modify) (&-> *progress-state* video-mode-choice))
  (set! (-> *graphic-title-options-pal* 2 value-to-modify) (&-> *progress-state* aspect-ratio-choice))
  (set! (-> *sound-options* 0 value-to-modify) (&-> *setting-control* default sfx-volume))
  (set! (-> *sound-options* 1 value-to-modify) (&-> *setting-control* default music-volume))
  (set! (-> *sound-options* 2 value-to-modify) (&-> *setting-control* default dialog-volume))
  (set! (-> *yes-no-options* 0 value-to-modify) (&-> *progress-state* yes-no-choice))
  ;; our options!
  (set! (-> *game-options-pc* 0 value-to-modify) (&-> *setting-control* default vibration))
  (set! (-> *game-options-pc* 1 value-to-modify) (&-> *setting-control* default play-hints))
  (set! (-> *misc-options* 0 value-to-modify) (&-> *pc-settings* discord-rpc?))
  (set! (-> *camera-options* 0 value-to-modify) (&-> *pc-settings* camera-hflip?))
  (set! (-> *camera-options* 1 value-to-modify) (&-> *pc-settings* camera-vflip?))
  (set! (-> *accessibility-options* 0 value-to-modify) (&-> *pc-settings* money-starburst?))
  (set! (-> *gfx-ps2-options* 0 value-to-modify) (&-> *pc-settings* ps2-parts?))
  (none)
  )

(defmethod respond-common progress ((obj progress))
  "common logic for navigating the progress menu.
   this is the overriden version, purged of no longer necessary code and with additional new code."

  (mc-get-slot-info 0 *progress-save-info*)
  (set! (-> obj card-info) *progress-save-info*)
  (let ((options (-> *options-remap* (-> obj display-state))))
    (when (and options (not (-> obj in-transition)))
      ;; only respond to inputs when transition is done (and also there's options at all)
      (cond
        ((cpad-pressed? 0 up)
        ;; pressed up
        ;; original code checked hold and then press, because hold can be used during center screen option. which we don't use.
          (when (not (-> obj selected-option))
            (if (!= (length options) 1)
                (sound-play-by-name (static-sound-name "cursor-up-down") (new-sound-id) 1024 0 0 1 #t)
                )
            (set! (-> obj last-option-index-change) (-> *display* real-frame-counter))
            (if (> (-> obj option-index) 0)
                (+! (-> obj option-index) -1)
                (set! (-> obj option-index) (+ (length options) -1))
                )
            )
         )
        ((cpad-pressed? 0 down)
        ;; pressed down.
          (when (not (-> obj selected-option))
            (if (!= (length options) 1)
                (sound-play-by-name (static-sound-name "cursor-up-down") (new-sound-id) 1024 0 0 1 #t)
                )
            (set! (-> obj last-option-index-change) (-> *display* real-frame-counter))
            (if (< (-> obj option-index) (1- (length options)))
                (1+! (-> obj option-index))
                (set! (-> obj option-index) 0)
                )
            )
         )
        ((cpad-hold? 0 left)
        ;; holding left. sliders use hold.
         (cond
           ((cpad-pressed? 0 left)
            ;; navigate left.
            (when (or (-> obj selected-option) (= (-> options (-> obj option-index) option-type) (game-option-type yes-no)))
              (let ((sound? #f))
                (case (-> options (-> obj option-index) option-type)
                  (((game-option-type on-off) (game-option-type yes-no) (game-option-type normal-inverted))
                   ;; pressed left on an on/off yes/no option
                   (when (not (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify))))
                     ;; it was on 'off' or 'no'
                     (set! sound? #t)
                     ;; vibrate if this toggles vibration. broken in original game.
                     (if (= (-> options (-> obj option-index) value-to-modify) (&-> *setting-control* default vibration))
                         (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 255 (seconds 0.3))
                         )
                     )
                   ;; it's on 'on' or 'yes' now
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) #t)
                   )
                  (((game-option-type aspect-ratio))
                   (set! sound? (= (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect16x9))
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect4x3)
                   )
                  (((game-option-type language))
                   ;; language selection. if not on first language, go back. if on first language, go to last.
                   (if (> (the-as int (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify)))) 0)
                       (+! (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify))) -1)
                       (set! (-> (the-as (pointer int64) (-> options (-> obj option-index) value-to-modify))) 5)
                       )
                   ;; language was updated.
                   (set! (-> obj language-transition) #t)
                   (set! (-> obj language-direction) #t)
                   (set! sound? #t)
                   )
                  )
                (if sound?
                    (sound-play-by-name (static-sound-name "cursor-l-r") (new-sound-id) 1024 0 0 1 #t)
                    )
                )
              )
            )
           (else
             ;; holding left
             (when (-> obj selected-option)
               (let ((sound? #f))
                 (case (-> options (-> obj option-index) option-type)
                   (((game-option-type slider))
                    ;; slider is selected
                    (cond
                      ((>= (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                           (+ 1.0 (-> options (-> obj option-index) param1)))
                       ;; we're 1 above minimum, so reduce by 1
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (+ -1.0 (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))))
                       (set! sound? #t)
                       )
                      ((< (-> options (-> obj option-index) param1)
                       ;; not at least 1 above minimum, just set to minimum (why not just use max or something!!)
                          (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (-> options (-> obj option-index) param1))
                       (set! sound? #t)
                       )
                      )
                    )
                   )
                 ;; play sound
                 (when sound?
                   (let ((vol 100.0))
                     (case (-> options (-> obj option-index) name)
                       (((game-text-id music-volume) (game-text-id speech-volume))
                        (set! vol (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                        )
                       )
                     (when (< (seconds 0.3) (- (-> *display* real-frame-counter) (-> *progress-state* last-slider-sound)))
                       (set! (-> *progress-state* last-slider-sound) (-> *display* real-frame-counter))
                       (sound-play-by-name (static-sound-name "slider2001") (new-sound-id) (the int (* 10.24 vol)) 0 0 1 #t)
                       )
                     )
                   )
                 )
               )
             )
           )
         )
        ((cpad-hold? 0 right)
        ;; holding right
         (cond
           ((cpad-pressed? 0 right)
            ;; pressed right
            (when (or (-> obj selected-option) (= (-> options (-> obj option-index) option-type) (game-option-type yes-no)))
              (let ((sound? #f))
                (case (-> options (-> obj option-index) option-type)
                  (((game-option-type on-off) (game-option-type yes-no) (game-option-type normal-inverted))
                   ;; play sound if it was on 'yes' because we're going to 'no' now
                   (set! sound? (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))))
                   ;; set to no
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) #f)
                   )
                  (((game-option-type aspect-ratio))
                   ;; same shit different toilet
                   (set! sound? (= (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect4x3))
                   (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify))) 'aspect16x9)
                   )
                  (((game-option-type language))
                   ;; same thing as before. if at last, go to first. otherwise, keep going forward.
                   (if (< (the-as int (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify)))) 5)
                       (1+! (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify))))
                       (set! (-> (the-as (pointer int64) (-> options (-> obj option-index) value-to-modify))) 0)
                       )
                   (set! (-> obj language-transition) #t)
                   (set! (-> obj language-direction) #f)
                   (set! sound? #t)
                   )
                  )
                ;; play sound if desired
                (if sound?
                    (sound-play-by-name (static-sound-name "cursor-l-r") (new-sound-id) 1024 0 0 1 #t)
                    )
                )
              )
            )
           (else
             ;; holding right, but didnt just press it. same slider stuff as before
             (when (-> obj selected-option)
               (let ((sound? #f))
                 (case (-> options (-> obj option-index) option-type)
                   (((game-option-type slider))
                    (cond
                      ((>= (+ -1.0 (-> options (-> obj option-index) param2))
                           (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (+ 1.0 (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))))
                       (set! sound? #t)
                       )
                      ((< (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                          (-> options (-> obj option-index) param2))
                       (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                             (-> options (-> obj option-index) param2))
                       (set! sound? #t)
                       )
                      )
                    )
                   )
                 (when sound?
                   (let ((vol 100.0))
                     (case (-> options (-> obj option-index) name)
                       (((game-text-id music-volume) (game-text-id speech-volume))
                        (set! vol (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                        )
                       )
                     (when (< (seconds 0.3) (- (-> *display* real-frame-counter) (-> *progress-state* last-slider-sound)))
                       (set! (-> *progress-state* last-slider-sound) (-> *display* real-frame-counter))
                       (sound-play-by-name (static-sound-name "slider2001") (new-sound-id) (the int (* 10.24 vol)) 0 0 1 #t)
                       )
                     )
                   )
                 )
               )
             )
           )
         )
        ((or (cpad-pressed? 0 square) (cpad-pressed? 0 triangle))
         ;; pressed square or triangle, cancel out!
         (cond
           ((-> obj selected-option)
            ;; an option is selected. AHHH!!! just restore to whatever was on the backup
            (case (-> options (-> obj option-index) option-type)
              (((game-option-type slider))
               (set! (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* slider-backup))
               )
              (((game-option-type language))
               (set! (-> (the-as (pointer int64) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* language-backup))
               )
              (((game-option-type on-off) (game-option-type normal-inverted))
               (set! (-> (the-as (pointer symbol) (-> options (-> obj option-index) value-to-modify)))
                     (-> *progress-state* on-off-backup))
               )
              )
            ;; ding
            (sound-play-by-name (static-sound-name "cursor-options") (new-sound-id) 1024 0 0 1 #t)
            (set! (-> obj selected-option) #f)
            )
           ((or (can-go-back? obj)
                (= (-> obj display-state) (progress-screen load-game))
                (= (-> obj display-state) (progress-screen save-game))
                (= (-> obj display-state) (progress-screen save-game-title))
                )
            ;; no option selected, see if we can go back
            (cpad-clear! 0 square)
            (cpad-clear! 0 triangle)
            (if (= (-> obj display-state) (progress-screen settings))
                (sound-play-by-name (static-sound-name "menu-stats") (new-sound-id) 1024 0 0 1 #t)
                (sound-play-by-name (static-sound-name "cursor-options") (new-sound-id) 1024 0 0 1 #t)
                )
            (load-level-text-files (-> *level-task-data* (-> obj display-level-index) text-group-index))
            (set! (-> obj next-display-state) (progress-screen invalid))
            )
           )
         )
        ((or (cpad-pressed? 0 x) (cpad-pressed? 0 circle))
         ;; pressed x or circle. select option!
         (cond
           ((not (-> obj selected-option))
            ;; no option already selected.
            (cond
              ((= (-> options (-> obj option-index) option-type) (game-option-type menu))
               ;; go to a menu
               (cpad-clear! 0 x)
               (cpad-clear! 0 circle)
               (push! obj)
               (sound-play-by-name (static-sound-name "select-option") (new-sound-id) 1024 0 0 1 #t)
               (set! (-> obj next-display-state) (the-as progress-screen (-> options (-> obj option-index) param3)))
               (case (-> obj next-display-state)
                 (((progress-screen load-game) (progress-screen save-game) (progress-screen save-game-title))
                  (set! (-> obj next-display-state) (set-memcard-screen obj (-> obj next-display-state)))
                  )
                 )
               )
              ((= (-> options (-> obj option-index) option-type) (game-option-type button))
               ;; a button. what?
               (case (-> options (-> obj option-index) name)
                 (((game-text-id exit-demo))
                  ;; exit demo!
                  (set! *master-exit* 'force)
                  (set-master-mode 'game)
                  )
                 (((game-text-id back))
                  ;; go back!
                  (if (= (-> obj display-state) (progress-screen settings))
                      (sound-play-by-name (static-sound-name "menu-stats") (new-sound-id) 1024 0 0 1 #t)
                      (sound-play-by-name (static-sound-name "cursor-options") (new-sound-id) 1024 0 0 1 #t)
                      )
                  (load-level-text-files (-> *level-task-data* (-> obj display-level-index) text-group-index))
                  (set! (-> obj next-display-state) (progress-screen invalid))
                  )
                 )
               ;; other behaviors are hardcoded elsewhere because screw you.
               )
              ((!= (-> options (-> obj option-index) option-type) (game-option-type yes-no))
               ;; not yes-no
               ;; set backups! we're entering some toggle or whatever
               (case (-> options (-> obj option-index) option-type)
                 (((game-option-type slider))
                  (set! (-> *progress-state* slider-backup)
                        (-> (the-as (pointer float) (-> options (-> obj option-index) value-to-modify))))
                  )
                 (((game-option-type language))
                  (set! (-> *progress-state* language-backup)
                        (the-as int (-> (the-as (pointer uint64) (-> options (-> obj option-index) value-to-modify)))))
                  )
                 (((game-option-type on-off) (game-option-type normal-inverted))
                  (set! (-> *progress-state* on-off-backup)
                        (the-as symbol (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))))
                  )
                 )
               (sound-play-by-name (static-sound-name "select-option") (new-sound-id) 1024 0 0 1 #t)
               (cpad-clear! 0 x)
               (cpad-clear! 0 circle)
               (set! (-> obj selected-option) #t)
               (when (= (-> options (-> obj option-index) option-type) (game-option-type language))
                 (set! (-> obj language-selection) (-> *setting-control* current language))
                 (set! (-> obj language-direction) #t)
                 (set! (-> obj language-transition) #f)
                 (set! (-> obj language-x-offset) 0)
                 )
               )
              )
            )
           (else
             ;; an option was selected. write stuff!
             (sound-play-by-name (static-sound-name "start-options") (new-sound-id) 1024 0 0 1 #t)
             (set! (-> obj selected-option) #f)
             (case (-> options (-> obj option-index) option-type)
               (((game-option-type aspect-ratio))
                ;; aspect ratio is first written to the backup. so this is for applying the change if we went through with it.
                (set! (-> *setting-control* default aspect-ratio)
                      (the-as symbol (-> (the-as (pointer uint32) (-> options (-> obj option-index) value-to-modify)))))
                )
               (((game-option-type language))
                (if (not (-> obj language-transition))
                    (load-level-text-files (-> obj display-level-index)))
                )
               )
             )
           )
         )
        )
      )
    )
  (none)
  )


(defmethod draw-options progress ((obj progress) (arg0 int) (arg1 int) (arg2 float))
  "common logic for drawing options menus."
  (let ((s3-0 (-> *options-remap* (-> obj display-state))))
    (when s3-0
      (let ((s2-1 (- arg0 (/ (* arg1 (length s3-0)) 2)))
            (s1-0 0)
            (unkx 27)
            (unk2 0)
            (font (new 'stack 'font-context *font-default-matrix* 0 0 0.0 (font-color default) (font-flags shadow kerning)))
            )
        (set-width! font 370)
        (set-height! font 25)
        (set! (-> font flags) (font-flags shadow kerning middle left large))
        (dotimes (s0-0 (length s3-0))
        (let ((option-str (the string #f))
              (x-off 17)
              (y-off s2-1)
              )
          (let ((v1-18 (-> s3-0 s0-0 option-type)))
            (cond
              ((= v1-18 (game-option-type yes-no))
               (if (-> (the-as (pointer uint32) (-> s3-0 s0-0 value-to-modify)))
                   (set! option-str (string-format "~30L~S~0L ~S" (lookup-text! *common-text* (game-text-id yes) #f) (lookup-text! *common-text* (game-text-id no) #f)))
                   (set! option-str (string-format "~0L~S ~30L~S~1L" (lookup-text! *common-text* (game-text-id yes) #f) (lookup-text! *common-text* (game-text-id no) #f)))
                   )
               )
              ((or (= v1-18 (game-option-type menu)) (= v1-18 (game-option-type button)))
               (cond
                 ((nonzero? (-> s3-0 s0-0 name))
                  (set! option-str (lookup-text! *common-text* (-> s3-0 s0-0 name) #f))
                  )
                 (else
                   (set! option-str (the-as string #f))
                   )
                 )
               )
              ((and (-> obj selected-option) (= (-> obj option-index) s0-0))
               (set-color! font (font-color default))
               (set! (-> font origin x) (the float (- x-off (-> obj left-x-offset))))
               (set! (-> font origin y) (the float (+ s2-1 -8)))
               (set-scale! font 0.6)
               (print-game-text (lookup-text! *common-text* (-> s3-0 s0-0 name) #f) font #f 128 22)
               (set! y-off (+ s2-1 7))
               (case (-> s3-0 s0-0 option-type)
                 (((game-option-type slider))
                  (let* ((v1-82 (the-as uint #x8000ffff))
                         (f0-12 (* 0.01 (-> (the-as (pointer float) (-> s3-0 s0-0 value-to-modify)))))
                         (a0-34 (logior (logand v1-82 -256) (shr (shl (the int (+ 64.0 (* 191.0 f0-12))) 56) 56)))
                         (a3-5 (logior (logand a0-34 -65281) (shr (shl (shr (shl a0-34 56) 56) 56) 48)))
                         )
                    (draw-percent-bar (- 75 (-> obj left-x-offset)) (+ s2-1 8) f0-12 (the-as int a3-5))
                    )
                  (set! option-str (string-format "~D" (the int (-> (the-as (pointer float) (-> s3-0 s0-0 value-to-modify))))))
                  (set! x-off (+ (the int (* 2.5 (-> (the-as (pointer float) (-> s3-0 s0-0 value-to-modify))))) -100))
                  x-off
                  )
                 (((game-option-type on-off))
                  (if (-> (the-as (pointer uint32) (-> s3-0 s0-0 value-to-modify)))
                      (set! option-str (string-format "~30L~S~0L ~S" (lookup-text! *common-text* (game-text-id on) #f) (lookup-text! *common-text* (game-text-id off) #f)))
                      (set! option-str (string-format "~0L~S ~30L~S~1L" (lookup-text! *common-text* (game-text-id on) #f) (lookup-text! *common-text* (game-text-id off) #f)))
                      )
                  )
                 (((game-option-type normal-inverted))
                  (if (-> (the-as (pointer uint32) (-> s3-0 s0-0 value-to-modify)))
                      (set! option-str (string-format "~30L~S~0L ~S" (lookup-text! *common-text* (game-text-id normal) #f) (lookup-text! *common-text* (game-text-id inverted) #f)))
                      (set! option-str (string-format "~0L~S ~30L~S~1L" (lookup-text! *common-text* (game-text-id normal) #f) (lookup-text! *common-text* (game-text-id inverted) #f)))
                      )
                  )
                 (((game-option-type language))
                  (let ((old-lang (-> obj language-selection))
                        (new-lang (-> (the-as (pointer language-enum) (-> s3-0 s0-0 value-to-modify))))
                        (max-lang (if (and (= (scf-get-territory) GAME_TERRITORY_SCEA)
                                           (not (and (= *progress-cheat* 'language) (cpad-hold? 0 l2) (cpad-hold? 0 r2))))
                                      5
                                      6
                                      ))
                        )
                  (if (-> obj language-transition)
                      (set! (-> obj language-x-offset)
                            (seekl (-> obj language-x-offset) 200 (the int (* 10.0 (-> *display* time-adjust-ratio))))))
                  (when (>= (-> obj language-x-offset) 100)
                    (set! (-> obj language-selection) new-lang)
                    (set! old-lang new-lang)
                    (set! (-> obj language-transition) #f)
                    (set! (-> obj language-x-offset) 0)
                    )
                  (set! (-> font origin y) (the float (+ s2-1 3)))
                  (set-color! font (font-color lighter-lighter-blue))
                  0
                  (let ((next-lang (mod (+ old-lang 1) max-lang))
                        (a0-66 (mod (+ max-lang -1 old-lang) max-lang))
                        (v1-153 (mod (+ old-lang 2) max-lang))
                        (prev-lang (mod (+ max-lang -2 old-lang) max-lang))
                        )
                    (cond
                      ((-> obj language-direction)
                       (let ((a2-22 (- 200 (+ (-> obj language-x-offset) 100))))
                         (print-language-name a0-66 font a2-22 #f)
                         )
                       (let ((a2-23 (+ (-> obj language-x-offset) 100)))
                         (cond
                           ((< a2-23 150)
                            (print-language-name (the int next-lang) font a2-23 #t)
                            )
                           (else
                             (let ((a2-24 (- 200 (-> obj language-x-offset))))
                               (print-language-name prev-lang font a2-24 #f)
                               )
                             )
                           )
                         )
                       )
                      (else
                        (let ((a2-25 (+ (-> obj language-x-offset) 100)))
                          (cond
                            ((< a2-25 150)
                             (print-language-name a0-66 font a2-25 #f)
                             )
                            (else
                              (let ((a2-26 (- 200 (-> obj language-x-offset))))
                                (print-language-name (the int v1-153) font a2-26 #t)
                                )
                              )
                            )
                          )
                        (let ((a2-27 (- 200 (+ (-> obj language-x-offset) 100))))
                          (print-language-name (the int next-lang) font a2-27 #t)
                          )
                        )
                      )
                    )
                  (if (not (-> obj language-transition))
                      (set-color! font (font-color yellow-green-2)))
                  (print-language-name (the-as int old-lang) font (-> obj language-x-offset) (-> obj language-direction))
                  ))
                 (((game-option-type aspect-ratio))
                  (if (= (-> (the-as (pointer uint32) (-> s3-0 s0-0 value-to-modify))) 'aspect4x3)
                      (set! option-str (string-format "~30L~S~0L ~S" (lookup-text! *common-text* (game-text-id 4x3) #f) (lookup-text! *common-text* (game-text-id 16x9) #f)))
                      (set! option-str (string-format "~0L~S ~30L~S~1L" (lookup-text! *common-text* (game-text-id 4x3) #f) (lookup-text! *common-text* (game-text-id 16x9) #f)))
                      )
                  )
                 )
               )
              (else
                (case (-> s3-0 s0-0 option-type)
                  (((game-option-type slider)
                    (game-option-type aspect-ratio)
                    )
                   (set! option-str (lookup-text! *common-text* (-> s3-0 s0-0 name) #f))
                   )
                  (((game-option-type on-off))
                   (set! option-str (string-format "~S: ~S" (lookup-text! *common-text* (-> s3-0 s0-0 name) #f)
                                                        (if (-> (the-as (pointer uint32) (-> s3-0 s0-0 value-to-modify)))
                                                            (lookup-text! *common-text* (game-text-id on) #f)
                                                            (lookup-text! *common-text* (game-text-id off) #f)
                                                            )))
                   )
                  (((game-option-type normal-inverted))
                   (set! option-str (string-format "~S: ~S" (lookup-text! *common-text* (-> s3-0 s0-0 name) #f)
                                                        (if (-> (the-as (pointer uint32) (-> s3-0 s0-0 value-to-modify)))
                                                            (lookup-text! *common-text* (game-text-id normal) #f)
                                                            (lookup-text! *common-text* (game-text-id inverted) #f)
                                                            )))
                   )
                  (((game-option-type language))
                   (set! option-str (string-format "~S: ~S" (lookup-text! *common-text* (-> s3-0 s0-0 name) #f)
                                                        (lookup-text! *common-text* (-> *language-name-remap* (-> (the-as (pointer uint64) (-> s3-0 s0-0 value-to-modify)))) #f)))
                   )
                  )
                )
              )
            )
          (when option-str
            (let ((f0-23 (-> obj transition-percentage-invert)))
              (set-color! font (if (and (= s0-0 (-> obj option-index)) (not (-> obj in-transition)))
                                   (font-color yellow-green-2)
                                   (font-color default)
                                   )
                      )
              (set! (-> font origin x) (the float (- x-off (-> obj left-x-offset))))
              (set! (-> font origin y) (the float (the int (* (the float y-off) (if (-> s3-0 s0-0 scale)
                                                                                       f0-23
                                                                                       1.0
                                                                                       )))))
              (set-scale! font (* arg2 f0-23))
              (print-game-text option-str font #f (the int (* 128.0 f0-23)) 22)
              )
            )
          (+! s2-1 arg1)
          (+! s1-0 1)
          ))
        )
      )
    )
  0
  (none)
  )


;; override the post handler for progress-normal
(set! (-> progress-normal post) 
  (lambda :behavior progress ()
    ;; draw the menus!!
    (let* ((a1-0 (-> self display-level-index))
           (gp-0 (-> *level-task-data* a1-0))
           (unk #t)
           (stats? #f)
           )
      (case (-> self display-state)
        (((progress-screen fuel-cell))
         (set! stats? #t)
         (draw-fuel-cell-screen self a1-0)
         )
        (((progress-screen money))
         (set! stats? #t)
         (draw-money-screen self a1-0)
         )
        (((progress-screen buzzer))
         (set! stats? #t)
         (draw-buzzer-screen self a1-0)
         )
        (((progress-screen graphic-settings)
          (progress-screen sound-settings)
          (progress-screen settings-title)
          (progress-screen title)
          (progress-screen game-settings)
          (progress-screen settings)
          (progress-screen misc-options)
          (progress-screen accessibility-options)
          (progress-screen game-ps2-options)
          )
         (hide-progress-icons)
         (draw-options self 115 25 0.82)
         )
        (((progress-screen camera-options))
         ;; camera options lines are a bit too big
         (hide-progress-icons)
         (draw-options self 115 30 0.7)
         )
        (((progress-screen memcard-removed) (progress-screen memcard-auto-save-error))
         (draw-notice-screen self)
         (draw-options self 192 0 0.82)
         )
        (((progress-screen memcard-no-data))
         (draw-notice-screen self)
         (draw-options self 165 0 0.82)
         )
        (((progress-screen memcard-format))
         (draw-notice-screen self)
         (draw-options self 172 0 0.82)
         )
        (((progress-screen memcard-no-space)
          (progress-screen memcard-not-inserted)
          (progress-screen memcard-not-formatted)
          )
         (draw-notice-screen self)
         (draw-options self 195 0 0.82)
         )
        (((progress-screen memcard-error-loading)
          (progress-screen memcard-error-saving)
          (progress-screen memcard-error-formatting)
          (progress-screen memcard-error-creating)
          (progress-screen memcard-auto-save-error)
          (progress-screen auto-save) (progress-screen load-game) (progress-screen save-game)
          )
         (draw-notice-screen self)
         (draw-options self 190 0 0.82)
         )
        (((progress-screen no-disc) (progress-screen bad-disc))
         (draw-notice-screen self)
         (if (is-cd-in?)
             (draw-options self 170 0 0.82)
             )
         )
        (((progress-screen quit))
         (draw-notice-screen self)
         (draw-options self 110 0 0.82)
         )
        (((progress-screen memcard-insert))
         (draw-notice-screen self)
         (draw-options self 165 0 0.82)
         )
        (((progress-screen memcard-data-exists))
         (draw-notice-screen self)
         (draw-options self 168 0 0.82)
         )
        (((progress-screen memcard-loading)
          (progress-screen memcard-saving)
          (progress-screen memcard-formatting)
          (progress-screen memcard-creating)
          )
         (draw-notice-screen self)
         )
        (((progress-screen save-game-title))
         (draw-notice-screen self)
         (draw-options self 169 15 0.6)
         )
        )
      (when stats?
        (let* ((v1-98 (cond ((-> self stat-transition) 0)
                            ((= (-> self level-transition) 1) (- (-> self transition-offset)))
                            (else (-> self transition-offset))
                            ))
               (f30-0 (the-as float (if (-> self stat-transition)
                                        1.0
                                        (-> self transition-percentage-invert)
                                        )))
               (s5-1 (new 'stack 'font-context *font-default-matrix*
                   (- 32 (-> self left-x-offset))
                   (the int (* (+ 42.0 (the float (/ v1-98 2))) f30-0))
                   8325000.0
                   (font-color lighter-lighter-blue)
                   (font-flags shadow kerning)
                   ))
               )
          (set-width! s5-1 328)
          (set-height! s5-1 45)
          (set! (-> s5-1 flags) (font-flags shadow kerning middle left large))
          (print-game-text-scaled (lookup-text! *common-text* (-> gp-0 level-name-id) #f) f30-0 s5-1 (the int (* 128.0 f30-0)))
          )
        )
      )
    (case (-> self display-state)
      (((progress-screen fuel-cell) (progress-screen money) (progress-screen buzzer))
       (draw-progress self)
       )
      )
    (adjust-sprites self)
    (adjust-icons self)
    (none)
    ))



)



