;;-*-Lisp-*-
(in-package goal)

;; name: water-h.gc
;; name in dgo: water-h
;; dgos: GAME, ENGINE

(defenum water-flags
  :bitfield #t
  :type uint32
  (wt00)
  (wt01)
  (wt02)
  (wt03)
  (wt04)
  (wt05)
  (wt06)
  (wt07)
  (wt08)
  (wt09)
  (wt10)
  (wt11)
  (wt12)
  (wt13)
  (wt14)
  (wt15)
  (wt16)
  (wt17)
  (wt18)
  (wt19)
  (wt20)
  (wt21)
  (wt22)
  (wt23)
  (wt24)
  (wt25)
  (wt26)
  (wt27)
  (wt28)
  (wt29)
  (wt30)
  (wt31)
  )

;; DECOMP BEGINS

(deftype water-control (basic)
  ((flags              water-flags)
   (process            process-drawable)
   (joint-index        int32)
   (top-y-offset       float)
   (ripple-size        meters)
   (enter-water-time   time-frame)
   (wade-time          time-frame)
   (on-water-time      time-frame)
   (enter-swim-time    time-frame)
   (swim-time          time-frame)
   (base-height        meters)
   (wade-height        meters)
   (swim-height        meters)
   (surface-height     meters)
   (bottom-height      meters)
   (height             meters)
   (height-offset      float          4)
   (real-ocean-offset  meters         :overlay-at (-> height-offset 0))
   (ocean-offset       meters         :overlay-at (-> height-offset 1))
   (bob-offset         meters         :overlay-at (-> height-offset 2))
   (align-offset       meters         :overlay-at (-> height-offset 3))
   (swim-depth         meters)
   (bob                smush-control  :inline)
   (volume             handle)
   (bottom             vector         2 :inline)
   (top                vector         2 :inline)
   (enter-water-pos    vector         :inline)
   (drip-old-pos       vector         :inline)
   (drip-joint-index   int32)
   (drip-wetness       float)
   (drip-time          time-frame)
   (drip-speed         float)
   (drip-height        meters)
   (drip-mult          float)
   )
  (:methods
    (new (symbol type process int float float float) _type_)
    (water-control-method-9 (_type_) none)
    (water-control-method-10 (_type_) none)
    (start-bobbing! (_type_ float int int) none)
    (distance-from-surface (_type_) float)
    (create-splash (_type_ float vector int vector) none)
    (display-water-marks? (_type_) symbol)
    (water-control-method-15 (_type_) none)
    (water-control-method-16 (_type_) none)
    )
  )


(defmethod display-water-marks? ((this water-control))
  (and *display-water-marks* (logtest? (-> this flags) (water-flags wt00)))
  )

(defmethod new water-control ((allocation symbol) (type-to-make type) (arg0 process) (arg1 int) (arg2 float) (arg3 float) (arg4 float))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 process) (the-as process-drawable arg0))
    (set! (-> v0-0 joint-index) arg1)
    (set! (-> v0-0 wade-height) arg4)
    (set! (-> v0-0 swim-height) arg3)
    (set! (-> v0-0 bottom-height) 32768.0)
    (set! (-> v0-0 ripple-size) 1638.4)
    (set! (-> v0-0 volume) (the-as handle #f))
    (set! (-> v0-0 drip-mult) 1.0)
    (set! (-> v0-0 top-y-offset) arg2)
    v0-0
    )
  )

(defmethod distance-from-surface ((this water-control))
  (- (-> this top 0 y) (-> this height))
  )

(deftype water-vol (process-drawable)
  ((water-height   meters)
   (wade-height    meters)
   (swim-height    meters)
   (bottom-height  meters)
   (attack-event   symbol)
   (target         handle)
   (flags          water-flags)
   )
  (:state-methods
    water-vol-idle
    water-vol-startup
    )
  (:methods
    (water-vol-method-22 (_type_) none)
    (reset-root! (_type_) none)
    (set-stack-size! (_type_) none)
    (water-vol-method-25 (_type_) none)
    (update! (_type_) none)
    (on-exit-water (_type_) none)
    (get-ripple-height (_type_ vector) float)
    (init! (_type_) none)
    )
  )
