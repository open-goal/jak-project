;;-*-Lisp-*-
(in-package goal)

;; name: water-h.gc
;; name in dgo: water-h
;; dgos: GAME, ENGINE

(defenum water-flags
  :bitfield #t
  :type uint32
  (wt00)
  (wt01)
  (wt02)
  (wt03)
  (wt04)
  (wt05)
  (wt06)
  (wt07)
  (wt08)
  (wt09)
  (wt10)
  (wt11)
  (wt12)
  (wt13)
  (wt14)
  (wt15)
  (wt16)
  (wt17)
  (wt18)
  (wt19)
  (wt20)
  (wt21)
  (wt22)
  (wt23)
  (wt24)
  (wt25)
  (wt26)
  (wt27)
  (wt28)
  (wt29)
  (wt30)
  (wt31)
  )

;; DECOMP BEGINS

(deftype water-control (basic)
  ((flags             water-flags                :offset-assert   4)
   (process           process-drawable           :offset-assert   8)
   (joint-index       int32                      :offset-assert  12)
   (top-y-offset      float                      :offset-assert  16)
   (ripple-size       meters                     :offset-assert  20)
   (enter-water-time  time-frame                 :offset-assert  24)
   (wade-time         time-frame                 :offset-assert  32)
   (on-water-time     time-frame                 :offset-assert  40)
   (enter-swim-time   time-frame                 :offset-assert  48)
   (swim-time         time-frame                 :offset-assert  56)
   (base-height       meters                     :offset-assert  64)
   (wade-height       meters                     :offset-assert  68)
   (swim-height       meters                     :offset-assert  72)
   (surface-height    meters                     :offset-assert  76)
   (bottom-height     meters                     :offset-assert  80)
   (height            meters                     :offset-assert  84)
   (height-offset     float            4         :offset-assert  88)
   (real-ocean-offset meters                     :offset         88)
   (ocean-offset      meters                     :offset         92)
   (bob-offset        meters                     :offset         96)
   (align-offset      meters                     :offset        100)
   (swim-depth        meters                     :offset-assert 104)
   (bob               smush-control    :inline   :offset-assert 112)
   (volume            handle                     :offset-assert 144)
   (bottom            vector           2 :inline :offset-assert 160)
   (top               vector           2 :inline :offset-assert 192)
   (enter-water-pos   vector           :inline   :offset-assert 224)
   (drip-old-pos      vector           :inline   :offset-assert 240)
   (drip-joint-index  int32                      :offset-assert 256)
   (drip-wetness      float                      :offset-assert 260)
   (drip-time         time-frame                 :offset-assert 264)
   (drip-speed        float                      :offset-assert 272)
   (drip-height       meters                     :offset-assert 276)
   (drip-mult         float                      :offset-assert 280)
   )
  :method-count-assert 17
  :size-assert         #x11c
  :flag-assert         #x110000011c
  (:methods
    (new (symbol type process int float float float) _type_ 0)
    (water-control-method-9 (_type_) none 9)
    (water-control-method-10 (_type_) none 10)
    (start-bobbing! (_type_ float int int) none 11)
    (distance-from-surface (_type_) float 12)
    (create-splash (_type_ float vector int vector) none 13)
    (display-water-marks? (_type_) symbol 14)
    (water-control-method-15 (_type_) none 15)
    (water-control-method-16 (_type_) none 16)
    )
  )


(defmethod display-water-marks? water-control ((obj water-control))
  (and *display-water-marks* (logtest? (-> obj flags) (water-flags wt00)))
  )

(defmethod new water-control ((allocation symbol) (type-to-make type) (arg0 process) (arg1 int) (arg2 float) (arg3 float) (arg4 float))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 process) (the-as process-drawable arg0))
    (set! (-> v0-0 joint-index) arg1)
    (set! (-> v0-0 wade-height) arg4)
    (set! (-> v0-0 swim-height) arg3)
    (set! (-> v0-0 bottom-height) 32768.0)
    (set! (-> v0-0 ripple-size) 1638.4)
    (set! (-> v0-0 volume) (the-as handle #f))
    (set! (-> v0-0 drip-mult) 1.0)
    (set! (-> v0-0 top-y-offset) arg2)
    v0-0
    )
  )

(defmethod distance-from-surface water-control ((obj water-control))
  (- (-> obj top 0 y) (-> obj height))
  )

(deftype water-vol (process-drawable)
  ((water-height  meters       :offset-assert 176)
   (wade-height   meters       :offset-assert 180)
   (swim-height   meters       :offset-assert 184)
   (bottom-height meters       :offset-assert 188)
   (attack-event  symbol       :offset-assert 192)
   (target        handle       :offset-assert 200)
   (flags         water-flags  :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e007000d4
  (:methods
    (water-vol-idle () _type_ :state 20)
    (water-vol-startup () _type_ :state 21)
    (water-vol-method-22 (_type_) none 22)
    (reset-root! (_type_) none 23)
    (set-stack-size! (_type_) none 24)
    (water-vol-method-25 (_type_) none 25)
    (update! (_type_) none 26)
    (on-exit-water (_type_) none 27)
    (get-ripple-height (_type_ vector) float 28)
    (init! (_type_) none 29)
    )
  )
