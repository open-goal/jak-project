;;-*-Lisp-*-
(in-package goal)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; mimicking Java's util.Random https://docs.oracle.com/javase/8/docs/api/java/util/Random.html
;;;; This is a linear congruential pseudorandom number generator, as defined by D. H. Lehmer 
;;;;  and described by Donald E. Knuth in The Art of Computer Programming, Volume 3: Seminumerical Algorithms, section 3.2.1.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype knuth-rand-state (structure)
  ((seed uint64))
  )

(define *knuth-rand-state* (new 'global 'knuth-rand-state))

(defun knuth-rand-init ((newSeed uint))
  (set! (-> *knuth-rand-state* seed) newSeed)
)
(knuth-rand-init (scf-time-to-uint64))

(defun knuth-rand-advance-seed ()
  ;; seed =  (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1)
  (set! (-> *knuth-rand-state* seed) (the uint64 (logand (+ (imul64 (-> *knuth-rand-state* seed) 25214903917) 11) (- (shl 1 48) 1))))
)

(defun knuth-rand-next ((bits int))
  (knuth-rand-advance-seed)

  ;; return (int)(seed >>> (48 - bits))
  (shr (-> *knuth-rand-state* seed) (- 48 bits))
)

(defun knuth-rand-nextInt () 
  (knuth-rand-advance-seed)
  (-> *knuth-rand-state* seed)
)

;; returns a pseudorandom int in the range [min, max)
(defun knuth-rand-nextIntRange ((min int) (max int))
  (let* ((bound (- max min))
    ;; int bits, val;
         (bits (the uint64 0))
         (val (the uint64 0)))

    ;; if ((bound & -bound) == bound)  // i.e., bound is a power of 2
    (if (= (logand bound (* -1 bound)) bound)
      ;; return (int)((bound * (long)next(31)) >> 31);
      (return (sar (* bound (knuth-rand-next 31)) 31))
    )

    ;;  do {
    ;;      bits = next(31);
    ;;      val = bits % bound;
    ;;  } while (bits - val + (bound-1) < 0);
    ;;  return val;
    (while #t
      (set! bits (knuth-rand-next 31))
      (set! val (mod bits bound))

      (if (>= (+ bits (* -1 val) bound -1) 0)
        (return (+ min val))
      )
    )
  )
  -1
)

;; returns a pseudorandom float in the range [0, 1)
(defun knuth-rand-nextFloat ()
  ;; return next(24) / ((float)(1 << 24));
  (/ (the float (knuth-rand-next 24)) (shl 1 24))
) 