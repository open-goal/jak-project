;;-*-Lisp-*-
(in-package goal)

;; name: ocean-h.gc
;; name in dgo: ocean-h
;; dgos: GAME, ENGINE

;; NOTE - for water
(define-extern ocean-get-height (function vector float))
(define-extern update-ocean (function none))
(define-extern draw-ocean (function none))
(define-extern draw-ocean-texture (function dma-buffer (inline-array vector) symbol none))
(define-extern draw-ocean-transition (function dma-buffer none))
(define-extern draw-ocean-mid (function dma-buffer none))
(define-extern draw-ocean-near (function dma-buffer none))


;; The "ocean" renderer is used to render the infinite water.
;; It doesn't draw the rivers in FJ or the water near the farmer.

;; DECOMP BEGINS

(deftype ocean-corner (structure)
  ((bsphere       sphere  :inline)
   (start-corner  vector  :inline)
   (y-scales      vector  :inline)
   (alphas        vector  :inline)
   (colors        uint32  4)
   )
  )


(deftype ocean-wave-info (structure)
  ((frequency   float)
   (amplitude   float)
   (wave-speed  float)
   (angle       float)
   (kx          float)
   (ky          float)
   (w           float)
   (flags       int32)
   )
  )


(deftype ocean-vertex (structure)
  ((pos  vector  :inline)
   (stq  vector  :inline)
   (col  vector  :inline)
   )
  )


(deftype ocean-spheres (structure)
  ((spheres  sphere  36 :inline)
   )
  )


(deftype ocean-colors (structure)
  ((colors  rgba  2548)
   )
  )


(deftype ocean-mid-mask (structure)
  ((mask   uint8   8)
   (dword  uint64  :overlay-at (-> mask 0))
   )
  :pack-me
  )


(deftype ocean-mid-indices (basic)
  ((data  uint16  36)
   )
  )


(deftype ocean-mid-masks (basic)
  ((data  (inline-array ocean-mid-mask))
   )
  :pack-me
  )


(deftype ocean-trans-mask (structure)
  ((mask  uint8   4)
   (word  uint64  :overlay-at (-> mask 0))
   )
  :pack-me
  )


(deftype ocean-trans-index (structure)
  ((parent  int16)
   (child   int16)
   )
  :pack-me
  )


(deftype ocean-trans-indices (basic)
  ((data  ocean-trans-index  2304 :inline)
   )
  )


(deftype ocean-near-index (structure)
  ((data  uint16  16)
   )
  )


(deftype ocean-near-indices (basic)
  ((data  (inline-array ocean-near-index))
   )
  )


(deftype ocean-near-colors (structure)
  ((color0  vector  :inline)
   (color1  vector  :inline)
   (color2  vector  :inline)
   (color3  vector  :inline)
   )
  )


(deftype ocean-map (basic)
  ((start-corner         vector  :inline)
   (far-color            vector  :inline)
   (ocean-spheres        ocean-spheres)
   (ocean-colors         ocean-colors)
   (ocean-mid-indices    ocean-mid-indices)
   (ocean-trans-indices  ocean-trans-indices)
   (ocean-near-indices   ocean-near-indices)
   (ocean-mid-masks      ocean-mid-masks)
   )
  )


(deftype ocean-trans-strip (structure)
  ((verts  uint128  10)
   )
  )


(deftype ocean-trans-strip-array (structure)
  ((data  ocean-trans-strip  4 :inline)
   )
  )


(deftype ocean-wave-data (structure)
  ((data  uint8  1024)
   )
  )


(deftype ocean-wave-frames (structure)
  ((frame  ocean-wave-data  64 :inline)
   )
  )


(deftype ocean-work (basic)
  ((deltas              vector            :inline)
   (map-min             vector            :inline)
   (map-max             vector            :inline)
   (interp              vector            :inline)
   (corner-array        ocean-corner      25 :inline)
   (corner-count        int32)
   (temp-vecs           vector            4 :inline)
   (mid-mask-ptrs       (pointer int64)   36)
   (mid-camera-masks    uint64            36)
   (trans-mask-ptrs     (pointer int32)   64)
   (trans-camera-masks  ocean-trans-mask  16 :inline)
   (trans-temp-masks    ocean-trans-mask  16 :inline)
   (near-mask-indices   uint16            16)
   (mid-minx            uint8)
   (mid-maxx            uint8)
   (mid-minz            uint8)
   (mid-maxz            uint8)
   (near-minx           uint8)
   (near-maxx           uint8)
   (near-minz           uint8)
   (near-maxz           uint8)
   (temp-minx           uint8)
   (temp-maxx           uint8)
   (temp-minz           uint8)
   (temp-maxz           uint8)
   )
  )


(define *ocean-work* (new 'static 'ocean-work))
(define *ocean-facing* 0)
(define *ocean-off* #f)
(define *ocean-mid-off* #f)
(define *ocean-near-off* #f)
(define *ocean-heights* (the-as ocean-wave-info #f))
(define *ocean-verts* (the-as (inline-array vector) #f))

(deftype ocean-vu0-work (structure)
  ((scales       vector     :inline)
   (mask-hi      vector4w   :inline)
   (mask-lo      vector4w   :inline)
   (lights       vu-lights  :inline)
   (wait-to-vu0  uint32)
   )
  )


(deftype ocean-texture-constants (structure)
  ((giftag     gs-gif-tag  :inline)
   (buffers    vector4w    :inline)
   (dests      vector4w    :inline)
   (start      vector      :inline)
   (offsets    vector      :inline)
   (constants  vector      :inline)
   (cam-nrm    vector      :inline)
   )
  )


(deftype ocean-texture-work (structure)
  ((sprite-tmpl   dma-gif-packet  :inline)
   (sprite-tmpl2  dma-gif-packet  :inline)
   (adgif-tmpl    dma-gif-packet  :inline)
   )
  )


(deftype ocean-mid-vertex (structure)
  ((stq  vector  :inline)
   (col  vector  :inline)
   (pos  vector  :inline)
   )
  )


(deftype ocean-mid-constants (structure)
  ((hmge-scale      vector        :inline)
   (inv-hmge-scale  vector        :inline)
   (hvdf-offset     vector        :inline)
   (fog             vector        :inline)
   (constants       vector        :inline)
   (constants2      vector        :inline)
   (drw-fan         gs-gif-tag    :inline)
   (env-fan         gs-gif-tag    :inline)
   (drw-adgif       gs-gif-tag    :inline)
   (drw-texture     adgif-shader  :inline)
   (drw-strip-0     gs-gif-tag    :inline)
   (drw-strip-1     gs-gif-tag    :inline)
   (env-adgif       gs-gif-tag    :inline)
   (env-texture     adgif-shader  :inline)
   (env-strip       gs-gif-tag    :inline)
   (env-color       vector        :inline)
   (index-table     vector4w      8 :inline)
   (pos0            vector        :inline)
   (pos1            vector        :inline)
   (pos2            vector        :inline)
   (pos3            vector        :inline)
   )
  )


(deftype ocean-mid-upload (structure)
  ((rot     matrix   :inline)
   (matrix  matrix   :inline)
   (colors  uint128  108)
   (masks   uint128  2)
   )
  )


(deftype ocean-mid-upload2 (structure)
  ((rot     matrix    :inline)
   (matrix  matrix    :inline)
   (count   vector4w  :inline)
   (tex0    vector    :inline)
   (tex1    vector    :inline)
   (tex2    vector    :inline)
   (tex3    vector    :inline)
   (clr0    vector    :inline)
   (clr1    vector    :inline)
   (clr2    vector    :inline)
   (clr3    vector    :inline)
   (verts   uint128   18)
   )
  )


(deftype ocean-mid-work (structure)
  ((env0     vector   :inline)
   (env1     vector   :inline)
   (env2     vector   :inline)
   (hmg0     vector   :inline)
   (hmg1     vector   :inline)
   (hmg2     vector   :inline)
   (indices  uint128  16)
   )
  )


(deftype ocean-near-constants (structure)
  ((hmge-scale      vector        :inline)
   (inv-hmge-scale  vector        :inline)
   (hvdf-offset     vector        :inline)
   (fog             vector        :inline)
   (constants       vector        :inline)
   (constants2      vector        :inline)
   (constants3      vector        :inline)
   (constants4      vector        :inline)
   (drw-fan         gs-gif-tag    :inline)
   (drw2-fan        gs-gif-tag    :inline)
   (env-fan         gs-gif-tag    :inline)
   (drw-adgif       gs-gif-tag    :inline)
   (drw-texture     adgif-shader  :inline)
   (drw-strip       gs-gif-tag    :inline)
   (env-adgif       gs-gif-tag    :inline)
   (env-texture     adgif-shader  :inline)
   (env-strip       gs-gif-tag    :inline)
   (env-color       vector        :inline)
   (drw2-adgif      gs-gif-tag    :inline)
   (drw2-tex0       qword         :inline)
   (drw2-frame      qword         :inline)
   (drw2-strip      gs-gif-tag    :inline)
   (drw3-adgif      gs-gif-tag    :inline)
   (drw3-frame      qword         :inline)
   (index-table     vector4w      4 :inline)
   )
  )


(deftype ocean-near-upload (structure)
  ((rot           matrix             :inline)
   (matrix        matrix             :inline)
   (masks         uint128            2)
   (start-height  vector4w           :inline)
   (start-st      vector             :inline)
   (near-colors   ocean-near-colors  :inline)
   )
  )


(deftype ocean-near-vertex (structure)
  ((stq  vector  :inline)
   (clr  vector  :inline)
   (pos  vector  :inline)
   )
  )


(deftype ocean-near-work (structure)
  ((verts-ptr  vector   :inline)
   (indices    uint128  16)
   )
  )

(define-extern *ocean-trans-corner-table* (inline-array vector4w-2))
(define-extern ocean-interp-wave (function ocean-wave-info uint none))
(define-extern ocean-generate-verts (function (inline-array vector) ocean-wave-info none))
