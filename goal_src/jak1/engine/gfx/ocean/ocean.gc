;;-*-Lisp-*-
(in-package goal)

;; name: ocean.gc
;; name in dgo: ocean
;; dgos: GAME, ENGINE
;; note: changed for high fps

;; TODO - for ocean-transition
(define-extern *ocean-map* ocean-map)
;; TODO - for rigid-body

(defun ocean-get-height ((arg0 vector))
  (cond
    ((and *ocean-heights* *ocean-map*)
     (let* ((f2-1 (* 0.00008138021 (- (-> arg0 x) (-> *ocean-map* start-corner x))))
            (f3-1 (* 0.00008138021 (- (-> arg0 z) (-> *ocean-map* start-corner z))))
            (f0-2 f2-1)
            (f0-4 (- f0-2 (the float (the int f0-2))))
            (f1-8 f3-1)
            (f1-10 (- f1-8 (the float (the int f1-8))))
            (a0-1 (logand (the int f2-1) 31))
            (a2-0 (logand (the int f3-1) 31))
            (v1-11 (logand (+ a0-1 1) 31))
            (a1-1 (logand (+ a2-0 1) 31))
            (f2-4 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a2-0 32) a0-1) 4)))))
            (f4-4 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a2-0 32) v1-11) 4)))))
            (f3-2 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a1-1 32) a0-1) 4)))))
            (f5-0 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a1-1 32) v1-11) 4)))))
            (f2-6 (+ (* f4-4 f0-4) (* f2-4 (- 1.0 f0-4))))
            )
       (+ (* (+ (* f5-0 f0-4) (* f3-2 (- 1.0 f0-4))) f1-10) (* f2-6 (- 1.0 f1-10)) (-> *ocean-map* start-corner y))
       )
     )
    (else
      0.0
      )
    )
  )

(def-mips2c init-ocean-far-regs (function none))
(def-mips2c render-ocean-quad (function (inline-array ocean-vertex) dma-buffer symbol))

;; (vertices (-> (scratchpad-object terrain-context) work background dma-area ocean-vertex))

(defun render-ocean-far ((arg0 dma-buffer) (arg1 int))
  (local-vars
    (sv-16 float)
    (sv-32 int)
    (sv-48 int)
    (sv-64 float)
    (sv-80 int)
    (sv-96 int)
    (sv-112 float)
    (sv-128 int)
    (sv-144 float)
    (sv-160 int)
    )
  (let* ((s1-0 48)
         (s3-0 48)
         (f24-0 (-> *ocean-map* start-corner x))
         (f30-0 (-> *ocean-map* start-corner y))
         (f22-0 (-> *ocean-map* start-corner z))
         (f28-0 (+ f22-0 (* 393216.0 (the float s3-0))))
         (f26-0 (+ f24-0 (* 393216.0 (the float s1-0))))
         (vertices (-> (scratchpad-object terrain-context) work background dma-area ocean-vertex))
         )
    (let ((s2-0 #f))
      0
      (set! (-> vertices 0 col quad) (-> *ocean-map* far-color quad))
      (set! (-> vertices 1 col quad) (-> *ocean-map* far-color quad))
      (set! (-> vertices 2 col quad) (-> *ocean-map* far-color quad))
      (set! (-> vertices 3 col quad) (-> *ocean-map* far-color quad))
      (set-vector! (-> vertices 0 stq) 0.0 0.0 1.0 1.0)
      (set-vector! (-> vertices 1 stq) 1.0 0.0 1.0 1.0)
      (set-vector! (-> vertices 2 stq) 1.0 15.0 1.0 1.0)
      (set-vector! (-> vertices 3 stq) 0.0 15.0 1.0 1.0)
      (when (zero? (logand arg1 2))
        (let ((f20-0 (+ -5898240.0 f22-0)))
          (set! sv-16 f22-0)
          (let ((s0-0 #f))
            (set! sv-32 0)
            (set! sv-48 0)
            (while (< sv-48 s1-0)
              (let ((f0-23 (+ (* 393216.0 (the float sv-48)) f24-0)))
                (let ((f1-7 (+ 393216.0 f0-23)))
                  (let ((v1-19 (-> vertices 0)))
                    (set! (-> v1-19 pos x) f0-23)
                    (set! (-> v1-19 pos y) f30-0)
                    (set! (-> v1-19 pos z) f20-0)
                    (set! (-> v1-19 pos w) 0.0)
                    )
                  (let ((v1-20 (-> vertices 1)))
                    (set! (-> v1-20 pos x) f1-7)
                    (set! (-> v1-20 pos y) f30-0)
                    (set! (-> v1-20 pos z) f20-0)
                    (set! (-> v1-20 pos w) 0.0)
                    )
                  (let ((v1-21 (-> vertices 2)))
                    (set! (-> v1-21 pos x) f1-7)
                    (set! (-> v1-21 pos y) f30-0)
                    (set! (-> v1-21 pos z) sv-16)
                    (set! (-> v1-21 pos w) 1.0)
                    )
                  )
                (let ((v1-22 (-> vertices 3)))
                  (set! (-> v1-22 pos x) f0-23)
                  (set! (-> v1-22 pos y) f30-0)
                  (set! (-> v1-22 pos z) sv-16)
                  (set! (-> v1-22 pos w) 1.0)
                  )
                )
              (set! sv-32 (logand (+ sv-32 1) 7))
              (set! s2-0 (render-ocean-quad vertices arg0))
              (cond
                (s2-0
                  (set! s0-0 #t)
                  )
                (else
                  (if s0-0
                      (goto cfg-10)
                      )
                  )
                )
              (set! sv-48 (+ sv-48 1))
              )
            )
          )
        )
      (label cfg-10)
      (when (zero? (logand arg1 4))
        (let ((f20-1 f28-0))
          (set! sv-64 (+ 5898240.0 f20-1))
          (let ((s0-1 #f))
            (set! sv-80 0)
            (set! sv-96 0)
            (while (< sv-96 s1-0)
              (let ((f0-30 (+ (* 393216.0 (the float sv-96)) f24-0)))
                (let ((f1-14 (+ (* 393216.0 (the float (+ sv-96 1))) f24-0)))
                  (let ((v1-43 (-> vertices 0)))
                    (set! (-> v1-43 pos x) f0-30)
                    (set! (-> v1-43 pos y) f30-0)
                    (set! (-> v1-43 pos z) f20-1)
                    (set! (-> v1-43 pos w) 1.0)
                    )
                  (let ((v1-44 (-> vertices 1)))
                    (set! (-> v1-44 pos x) f1-14)
                    (set! (-> v1-44 pos y) f30-0)
                    (set! (-> v1-44 pos z) f20-1)
                    (set! (-> v1-44 pos w) 1.0)
                    )
                  (let ((v1-45 (-> vertices 2)))
                    (set! (-> v1-45 pos x) f1-14)
                    (set! (-> v1-45 pos y) f30-0)
                    (set! (-> v1-45 pos z) sv-64)
                    (set! (-> v1-45 pos w) 0.0)
                    )
                  )
                (let ((v1-46 (-> vertices 3)))
                  (set! (-> v1-46 pos x) f0-30)
                  (set! (-> v1-46 pos y) f30-0)
                  (set! (-> v1-46 pos z) sv-64)
                  (set! (-> v1-46 pos w) 0.0)
                  )
                )
              (set! sv-80 (logand (+ sv-80 1) 7))
              (render-ocean-quad vertices arg0)
              (cond
                (s2-0
                  (set! s0-1 #t)
                  )
                (else
                  (if s0-1
                      (goto cfg-20)
                      )
                  )
                )
              (set! sv-96 (+ sv-96 1))
              )
            )
          )
        )
      (label cfg-20)
      (set-vector! (-> vertices 0 stq) 0.0 0.0 1.0 1.0)
      (set-vector! (-> vertices 1 stq) 15.0 0.0 1.0 1.0)
      (set-vector! (-> vertices 2 stq) 15.0 1.0 1.0 1.0)
      (set-vector! (-> vertices 3 stq) 0.0 1.0 1.0 1.0)
      (when (zero? (logand arg1 16))
        (let ((f20-2 (+ -5898240.0 f24-0)))
          (set! sv-112 f24-0)
          (let ((s1-1 #f))
            (set! sv-128 0)
            (dotimes (s0-2 s3-0)
              (let* ((f1-19 (+ (* 393216.0 (the float s0-2)) f22-0))
                     (f0-53 (+ 393216.0 f1-19))
                     )
                (let ((v1-66 (-> vertices 0)))
                  (set! (-> v1-66 pos x) f20-2)
                  (set! (-> v1-66 pos y) f30-0)
                  (set! (-> v1-66 pos z) f1-19)
                  (set! (-> v1-66 pos w) 0.0)
                  )
                (let ((v1-67 (-> vertices 1)))
                  (set! (-> v1-67 pos x) sv-112)
                  (set! (-> v1-67 pos y) f30-0)
                  (set! (-> v1-67 pos z) f1-19)
                  (set! (-> v1-67 pos w) 1.0)
                  )
                (let ((v1-68 (-> vertices 2)))
                  (set! (-> v1-68 pos x) sv-112)
                  (set! (-> v1-68 pos y) f30-0)
                  (set! (-> v1-68 pos z) f0-53)
                  (set! (-> v1-68 pos w) 1.0)
                  )
                (let ((v1-69 (-> vertices 3)))
                  (set! (-> v1-69 pos x) f20-2)
                  (set! (-> v1-69 pos y) f30-0)
                  (set! (-> v1-69 pos z) f0-53)
                  (set! (-> v1-69 pos w) 0.0)
                  )
                )
              (set! sv-128 (logand (+ sv-128 1) 7))
              (render-ocean-quad vertices arg0)
              (cond
                (s2-0
                  (set! s1-1 #t)
                  )
                (else
                  (if s1-1
                      (goto cfg-30)
                      )
                  )
                )
              )
            )
          )
        )
      (label cfg-30)
      (when (zero? (logand arg1 8))
        (let ((f20-3 f26-0))
          (set! sv-144 (+ 5898240.0 f26-0))
          (let ((s1-2 #f))
            (set! sv-160 0)
            (dotimes (s0-3 s3-0)
              (let* ((f1-25 (+ (* 393216.0 (the float s0-3)) f22-0))
                     (f0-60 (+ 393216.0 f1-25))
                     )
                (let ((v1-83 (-> vertices 0)))
                  (set! (-> v1-83 pos x) f20-3)
                  (set! (-> v1-83 pos y) f30-0)
                  (set! (-> v1-83 pos z) f1-25)
                  (set! (-> v1-83 pos w) 1.0)
                  )
                (let ((v1-84 (-> vertices 1)))
                  (set! (-> v1-84 pos x) sv-144)
                  (set! (-> v1-84 pos y) f30-0)
                  (set! (-> v1-84 pos z) f1-25)
                  (set! (-> v1-84 pos w) 0.0)
                  )
                (let ((v1-85 (-> vertices 2)))
                  (set! (-> v1-85 pos x) sv-144)
                  (set! (-> v1-85 pos y) f30-0)
                  (set! (-> v1-85 pos z) f0-60)
                  (set! (-> v1-85 pos w) 0.0)
                  )
                (let ((v1-86 (-> vertices 3)))
                  (set! (-> v1-86 pos x) f20-3)
                  (set! (-> v1-86 pos y) f30-0)
                  (set! (-> v1-86 pos z) f0-60)
                  (set! (-> v1-86 pos w) 1.0)
                  )
                )
              (set! sv-160 (logand (+ sv-160 1) 7))
              (render-ocean-quad vertices arg0)
              (cond
                (s2-0
                  (set! s1-2 #t)
                  )
                (else
                  (if s1-2
                      (goto cfg-40)
                      )
                  )
                )
              )
            )
          )
        )
      )
    (label cfg-40)
    (set-vector! (-> vertices 0 stq) 0.0 0.0 1.0 1.0)
    (set-vector! (-> vertices 1 stq) 15.0 0.0 1.0 1.0)
    (set-vector! (-> vertices 2 stq) 15.0 15.0 1.0 1.0)
    (set-vector! (-> vertices 3 stq) 0.0 15.0 1.0 1.0)
    (when (not (or (logtest? arg1 2) (logtest? arg1 16)))
      (let ((f0-79 (+ -5898240.0 f24-0))
            (f3-0 (+ -5898240.0 f22-0))
            (f2-10 f24-0)
            (f1-30 f22-0)
            )
        (let ((v1-105 (-> vertices 0)))
          (set! (-> v1-105 pos x) f0-79)
          (set! (-> v1-105 pos y) f30-0)
          (set! (-> v1-105 pos z) f3-0)
          (set! (-> v1-105 pos w) 0.0)
          )
        (let ((v1-106 (-> vertices 1)))
          (set! (-> v1-106 pos x) f2-10)
          (set! (-> v1-106 pos y) f30-0)
          (set! (-> v1-106 pos z) f3-0)
          (set! (-> v1-106 pos w) 0.0)
          )
        (let ((v1-107 (-> vertices 2)))
          (set! (-> v1-107 pos x) f2-10)
          (set! (-> v1-107 pos y) f30-0)
          (set! (-> v1-107 pos z) f1-30)
          (set! (-> v1-107 pos w) 1.0)
          )
        (let ((v1-108 (-> vertices 3)))
          (set! (-> v1-108 pos x) f0-79)
          (set! (-> v1-108 pos y) f30-0)
          (set! (-> v1-108 pos z) f1-30)
          (set! (-> v1-108 pos w) 0.0)
          )
        )
      (render-ocean-quad vertices arg0)
      )
    (when (not (or (logtest? arg1 2) (logtest? arg1 8)))
      (let ((f0-81 f26-0))
        (let ((f2-12 (+ -5898240.0 f22-0))
              (f1-33 (+ 5898240.0 f26-0))
              )
          (let ((v1-114 (-> vertices 0)))
            (set! (-> v1-114 pos x) f0-81)
            (set! (-> v1-114 pos y) f30-0)
            (set! (-> v1-114 pos z) f2-12)
            (set! (-> v1-114 pos w) 0.0)
            )
          (let ((v1-115 (-> vertices 1)))
            (set! (-> v1-115 pos x) f1-33)
            (set! (-> v1-115 pos y) f30-0)
            (set! (-> v1-115 pos z) f2-12)
            (set! (-> v1-115 pos w) 0.0)
            )
          (let ((v1-116 (-> vertices 2)))
            (set! (-> v1-116 pos x) f1-33)
            (set! (-> v1-116 pos y) f30-0)
            (set! (-> v1-116 pos z) f22-0)
            (set! (-> v1-116 pos w) 0.0)
            )
          )
        (let ((v1-117 (-> vertices 3)))
          (set! (-> v1-117 pos x) f0-81)
          (set! (-> v1-117 pos y) f30-0)
          (set! (-> v1-117 pos z) f22-0)
          (set! (-> v1-117 pos w) 1.0)
          )
        )
      (render-ocean-quad vertices arg0)
      )
    (when (not (or (logtest? arg1 4) (logtest? arg1 16)))
      (let ((f0-84 (+ -5898240.0 f24-0))
            (f2-14 f28-0)
            (f1-36 (+ 5898240.0 f28-0))
            )
        (let ((v1-123 (-> vertices 0)))
          (set! (-> v1-123 pos x) f0-84)
          (set! (-> v1-123 pos y) f30-0)
          (set! (-> v1-123 pos z) f2-14)
          (set! (-> v1-123 pos w) 0.0)
          )
        (let ((v1-124 (-> vertices 1)))
          (set! (-> v1-124 pos x) f24-0)
          (set! (-> v1-124 pos y) f30-0)
          (set! (-> v1-124 pos z) f2-14)
          (set! (-> v1-124 pos w) 1.0)
          )
        (let ((v1-125 (-> vertices 2)))
          (set! (-> v1-125 pos x) f24-0)
          (set! (-> v1-125 pos y) f30-0)
          (set! (-> v1-125 pos z) f1-36)
          (set! (-> v1-125 pos w) 0.0)
          )
        (let ((v1-126 (-> vertices 3)))
          (set! (-> v1-126 pos x) f0-84)
          (set! (-> v1-126 pos y) f30-0)
          (set! (-> v1-126 pos z) f1-36)
          (set! (-> v1-126 pos w) 0.0)
          )
        )
      (render-ocean-quad vertices arg0)
      )
    (when (not (or (logtest? arg1 4) (logtest? arg1 8)))
      (let ((f0-86 f26-0)
            (f1-37 f28-0)
            (f2-18 (+ 5898240.0 f26-0))
            (f3-5 (+ 5898240.0 f28-0))
            )
        (let ((v1-131 (-> vertices 0)))
          (set! (-> v1-131 pos x) f0-86)
          (set! (-> v1-131 pos y) f30-0)
          (set! (-> v1-131 pos z) f1-37)
          (set! (-> v1-131 pos w) 1.0)
          )
        (let ((v1-132 (-> vertices 1)))
          (set! (-> v1-132 pos x) f2-18)
          (set! (-> v1-132 pos y) f30-0)
          (set! (-> v1-132 pos z) f1-37)
          (set! (-> v1-132 pos w) 0.0)
          )
        (let ((v1-133 (-> vertices 2)))
          (set! (-> v1-133 pos x) f2-18)
          (set! (-> v1-133 pos y) f30-0)
          (set! (-> v1-133 pos z) f3-5)
          (set! (-> v1-133 pos w) 0.0)
          )
        (let ((v1-134 (-> vertices 3)))
          (set! (-> v1-134 pos x) f0-86)
          (set! (-> v1-134 pos y) f30-0)
          (set! (-> v1-134 pos z) f3-5)
          (set! (-> v1-134 pos w) 0.0)
          )
        )
      (render-ocean-quad vertices arg0)
      )
    )
  (none)
  )

;; definition for symbol *swamp-low-ocean-marker*, type vector
(define *swamp-low-ocean-marker* (new 'global 'vector))

;; failed to figure out what this is:
(set-vector! *swamp-low-ocean-marker* 2621440.0 0.0 -8151040.0 1.0)

(defun draw-ocean-far ((arg0 dma-buffer))
  (init-ocean-far-regs)
  (if *debug-segment*
      (add-frame
        (-> *display* frames (-> *display* on-screen) frame profile-bar 0)
        'draw
        (new 'static 'rgba :r #x40 :b #x40 :a #x80)
        )
      )
  (let ((gp-0 (the-as object (-> arg0 base))))
    (&+! (-> arg0 base) 16)
    (let ((v1-9 *ocean-facing*))
      (cond
        ((zero? v1-9)
         (render-ocean-far arg0 4)
         )
        ((= v1-9 1)
         (render-ocean-far arg0 2)
         )
        ((= v1-9 3)
         (render-ocean-far arg0 8)
         )
        ((= v1-9 2)
         (render-ocean-far arg0 16)
         )
        )
      )
    (close-sky-buffer arg0)
    (let ((v1-18 (/ (the-as int (+ (- -16 (the-as int gp-0)) (the-as int (-> arg0 base)))) 16)))
      (set! (-> (the-as dma-packet gp-0) dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc v1-18))
      (set! (-> (the-as dma-packet gp-0) vif0) (new 'static 'vif-tag))
      (set! (-> (the-as dma-packet gp-0) vif1) (new 'static 'vif-tag :cmd (vif-cmd direct) :msk #x1 :imm v1-18))
      )
    )
  (if *debug-segment*
      (add-frame
        (-> *display* frames (-> *display* on-screen) frame profile-bar 0)
        'draw
        (new 'static 'rgba :g #xff :a #x80)
        )
      )
  )

(defun ocean-init-buffer ((arg0 dma-buffer))
  (let* ((a1-0 *ocean-base-page*)
         (v1-0 *ocean-base-block*)
         (s3-0 (* (+ a1-0 8) 32))
         (gp-0 (* (+ a1-0 10) 32))
         )
    (let* ((a1-2 arg0)
           (a2-1 (the-as object (-> a1-2 base)))
           )
      (set! (-> (the-as dma-packet a2-1) dma) (new 'static 'dma-tag :qwc #xa :id (dma-tag-id cnt)))
      (set! (-> (the-as dma-packet a2-1) vif0) (new 'static 'vif-tag))
      (set! (-> (the-as dma-packet a2-1) vif1) (new 'static 'vif-tag :imm #xa :cmd (vif-cmd direct) :msk #x1))
      (set! (-> a1-2 base) (the-as pointer (&+ (the-as dma-packet a2-1) 16)))
      )
    (let* ((a1-3 arg0)
           (a2-3 (the-as object (-> a1-3 base)))
           )
      (set! (-> (the-as gs-gif-tag a2-3) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x9))
      (set! (-> (the-as gs-gif-tag a2-3) regs) (new 'static 'gif-tag-regs
                                                 :regs0 (gif-reg-id a+d)
                                                 :regs1 (gif-reg-id a+d)
                                                 :regs2 (gif-reg-id a+d)
                                                 :regs3 (gif-reg-id a+d)
                                                 :regs4 (gif-reg-id a+d)
                                                 :regs5 (gif-reg-id a+d)
                                                 :regs6 (gif-reg-id a+d)
                                                 :regs7 (gif-reg-id a+d)
                                                 :regs8 (gif-reg-id a+d)
                                                 :regs9 (gif-reg-id a+d)
                                                 :regs10 (gif-reg-id a+d)
                                                 :regs11 (gif-reg-id a+d)
                                                 :regs12 (gif-reg-id a+d)
                                                 :regs13 (gif-reg-id a+d)
                                                 :regs14 (gif-reg-id a+d)
                                                 :regs15 (gif-reg-id a+d)
                                                 )
            )
      (set! (-> a1-3 base) (&+ (the-as pointer a2-3) 16))
      )
    (let* ((s5-0 arg0)
           (s4-0 (-> s5-0 base))
           )
      (set! (-> (the-as (pointer gs-test) s4-0) 0)
            (new 'static 'gs-test :ate #x1 :atst (gs-atest always) :zte #x1 :ztst (gs-ztest always))
            )
      (set! (-> (the-as (pointer gs-reg64) s4-0) 1) (gs-reg64 test-1))
      (set! (-> (the-as (pointer gs-alpha) s4-0) 2) (new 'static 'gs-alpha :b #x1 :d #x1))
      (set! (-> (the-as (pointer gs-reg64) s4-0) 3) (gs-reg64 alpha-1))
      (set! (-> (the-as (pointer gs-tex0) s4-0) 4)
            (new 'static 'gs-tex0 :tbw #x2 :th (log2 128) :tw (log2 128) :tbp0 v1-0)
            )
      (set! (-> (the-as (pointer gs-reg64) s4-0) 5) (gs-reg64 tex0-1))
      (set! (-> (the-as (pointer gs-tex1) s4-0) 6)
            (new 'static 'gs-tex1 :mxl #x6 :mmag #x1 :mmin #x4 :l #x1 :k #xeed)
            )
      (set! (-> (the-as (pointer gs-reg64) s4-0) 7) (gs-reg64 tex1-1))
      (set! (-> (the-as (pointer gs-texa) s4-0) 8) (new 'static 'gs-texa :ta0 #x80 :ta1 #x80))
      (set! (-> (the-as (pointer gs-reg64) s4-0) 9) (gs-reg64 texa))
      (set! (-> (the-as (pointer gs-miptbp) s4-0) 10)
            (new 'static 'gs-miptbp :tbw1 #x1 :tbw2 #x1 :tbw3 #x1 :tbp3 (+ gp-0 16) :tbp2 gp-0 :tbp1 s3-0)
            )
      (set! (-> (the-as (pointer gs-reg64) s4-0) 11) (gs-reg64 miptbp1-1))
      (set! (-> (the-as (pointer gs-miptbp) s4-0) 12)
            (new 'static 'gs-miptbp :tbw1 #x1 :tbw2 #x1 :tbw3 #x1 :tbp3 (+ gp-0 22) :tbp2 (+ gp-0 21) :tbp1 (+ gp-0 20))
            )
      (set! (-> (the-as (pointer gs-reg64) s4-0) 13) (gs-reg64 miptbp2-1))
      (set! (-> (the-as (pointer gs-clamp) s4-0) 14) (new 'static 'gs-clamp))
      (set! (-> (the-as (pointer gs-reg64) s4-0) 15) (gs-reg64 clamp-1))
      (set! (-> (the-as (pointer gs-fogcol) s4-0) 16) (the-as gs-fogcol *fog-color*))
      (set! (-> (the-as (pointer gs-reg64) s4-0) 17) (gs-reg64 fogcol))
      (let ((v0-2 (&+ s4-0 144)))
        (set! (-> s5-0 base) v0-2)
        v0-2
        )
      )
    )
  )

(defun ocean-end-buffer ((arg0 dma-buffer))
  (let* ((v1-0 arg0)
         (a1-0 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a1-0) dma) (new 'static 'dma-tag :qwc #x2 :id (dma-tag-id cnt)))
    (set! (-> (the-as dma-packet a1-0) vif0) (new 'static 'vif-tag))
    (set! (-> (the-as dma-packet a1-0) vif1) (new 'static 'vif-tag :imm #x2 :cmd (vif-cmd direct) :msk #x1))
    (set! (-> v1-0 base) (&+ (the-as pointer a1-0) 16))
    )
  (let* ((v1-1 arg0)
         (a1-2 (the-as object (-> v1-1 base)))
         )
    (set! (-> (the-as gs-gif-tag a1-2) tag) (new 'static 'gif-tag64 :nloop #x1 :eop #x1 :nreg #x1))
    (set! (-> (the-as gs-gif-tag a1-2) regs)
          (new 'static 'gif-tag-regs
            :regs0 (gif-reg-id a+d)
            :regs1 (gif-reg-id a+d)
            :regs2 (gif-reg-id a+d)
            :regs3 (gif-reg-id a+d)
            :regs4 (gif-reg-id a+d)
            :regs5 (gif-reg-id a+d)
            :regs6 (gif-reg-id a+d)
            :regs7 (gif-reg-id a+d)
            :regs8 (gif-reg-id a+d)
            :regs9 (gif-reg-id a+d)
            :regs10 (gif-reg-id a+d)
            :regs11 (gif-reg-id a+d)
            :regs12 (gif-reg-id a+d)
            :regs13 (gif-reg-id a+d)
            :regs14 (gif-reg-id a+d)
            :regs15 (gif-reg-id a+d)
            )
          )
    (set! (-> v1-1 base) (&+ (the-as pointer a1-2) 16))
    )
  (let* ((v1-2 arg0)
         (a0-1 (-> v1-2 base))
         )
    (set! (-> (the-as (pointer gs-texa) a0-1) 0) (new 'static 'gs-texa :ta1 #x80))
    (set! (-> (the-as (pointer gs-reg64) a0-1) 1) (gs-reg64 texa))
    (let ((v0-0 (&+ a0-1 16)))
      (set! (-> v1-2 base) v0-0)
      v0-0
      )
    )
  )

;; PC Port hack
(define *ocean-generate-verts-vector* (new 'global 'vector))

(set-vector! *ocean-generate-verts-vector*
             (the-as float #x42800000)
             (the-as float #x43000000)
             (the-as float #x43000000)
             (the-as float #x43000000)
             )

(defun draw-ocean ()
  (set! *ocean-heights* #f)
  (set! *ocean-verts* (the-as (inline-array vector) #f))
  (let ((gp-0 (-> *display* frames (-> *display* on-screen) frame global-buf)))
    (set! *ocean-heights* (the-as ocean-wave-info (-> gp-0 base)))
    (ocean-interp-wave *ocean-heights* (the uint (* (/ (-> *display* time-factor) 5.0) (-> *display* integral-frame-counter)))) ;; changed for high fps
    (&+! (-> gp-0 base) 4096)
    (set! *ocean-verts* (the-as (inline-array vector) (-> gp-0 base)))
    (ocean-generate-verts *ocean-verts* *ocean-heights*)
    (&+! (-> gp-0 base) #x8000)
    )
  (when *ocean-map*
    (let* ((v1-12 (camera-pos))
           (a0-6 *swamp-low-ocean-marker*)
           (f0-1 (* 0.00024414062 (- (-> v1-12 x) (-> a0-6 x))))
           (f0-3 (* f0-1 f0-1))
           (f1-3 (* 0.00024414062 (- (-> v1-12 z) (-> a0-6 z))))
           )
      (cond
        ((< (+ f0-3 (* f1-3 f1-3)) 40000.0)
         (set! (-> *ocean-map* start-corner y) -4096.0)
         )
        ((or (< -409600.0 (-> v1-12 y)) (movie?))
         (set! (-> *ocean-map* start-corner y) 0.0)
         )
        (else
          (set! (-> *ocean-map* start-corner y) -98304.0)
          )
        )
      )
    (when (not *ocean-off*)
      (when (logtest? *vu1-enable-user* (vu1-renderer-mask ocean))
        (let* ((s5-0 (-> *display* frames (-> *display* on-screen) frame global-buf))
               (gp-1 (-> s5-0 base))
               )
          (draw-ocean-texture s5-0 *ocean-verts* #t)
          (ocean-init-buffer s5-0)
          (draw-ocean-far s5-0)
          (when (not *ocean-mid-off*)
            (draw-ocean-mid s5-0)
            )
          (ocean-end-buffer s5-0)
          (let ((a3-0 (-> s5-0 base)))
            (let ((v1-32 (the-as object (-> s5-0 base))))
              (set! (-> (the-as dma-packet v1-32) dma) (new 'static 'dma-tag :id (dma-tag-id next)))
              (set! (-> (the-as dma-packet v1-32) vif0) (new 'static 'vif-tag))
              (set! (-> (the-as dma-packet v1-32) vif1) (new 'static 'vif-tag))
              (set! (-> s5-0 base) (&+ (the-as pointer v1-32) 16))
              )
            (dma-bucket-insert-tag
              (-> *display* frames (-> *display* on-screen) frame bucket-group)
              (bucket-id ocean-mid-and-far)
              gp-1
              (the-as (pointer dma-tag) a3-0)
              )
            )
          )
        (when (not (or *ocean-near-off* (or *ocean-mid-off* (< 196608.0 (fabs (-> *math-camera* trans y))))))
          (let* ((s5-1 (-> *display* frames (-> *display* on-screen) frame global-buf))
                 (gp-2 (-> s5-1 base))
                 )
            (draw-ocean-texture s5-1 *ocean-verts* #f)
            (draw-ocean-near s5-1)
            (ocean-end-buffer s5-1)
            (let ((a3-1 (-> s5-1 base)))
              (let ((v1-46 (the-as object (-> s5-1 base))))
                (set! (-> (the-as dma-packet v1-46) dma) (new 'static 'dma-tag :id (dma-tag-id next)))
                (set! (-> (the-as dma-packet v1-46) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-46) vif1) (new 'static 'vif-tag))
                (set! (-> s5-1 base) (&+ (the-as pointer v1-46) 16))
                )
              (dma-bucket-insert-tag
                (-> *display* frames (-> *display* on-screen) frame bucket-group)
                (bucket-id ocean-near)
                gp-2
                (the-as (pointer dma-tag) a3-1)
                )
              )
            )
          )
        )
      )
    )
  (when (not (paused?))
    (set! *ocean-off* #f)
    (set! *ocean-mid-off* #f)
    (set! *ocean-near-off* #f)
    )
  0
  (none)
  )

(defun update-ocean ()
  (set! *ocean-map* #f)
  (dotimes (v1-0 (-> *level* length))
    (let ((a0-3 (-> *level* level v1-0)))
      (when (= (-> a0-3 status) 'active)
        (let ((a1-3 (-> a0-3 info ocean)))
          (cond
            ((= a1-3 'none)
             (when (and (-> a0-3 meta-inside?) (not (-> a0-3 other meta-inside?)))
               (set! *ocean-map* #f)
               (goto cfg-19)
               )
             )
            ((and a1-3 (nonzero? (-> a1-3 value)))
             (set! *ocean-map* (the-as ocean-map (-> a1-3 value)))
             )
            )
          )
        )
      )
    )
  (label cfg-19)
  (if (and *ocean-map* (< (-> *math-camera* trans y) -409600.0))
      (set! *ocean-map* *ocean-map-sunken*)
      )
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (set! (-> gp-0 quad) (-> (matrix-local->world #f #f) vector 2 quad))
    (cond
      ((< (fabs (-> gp-0 z)) (fabs (-> gp-0 x)))
       (if (< (-> gp-0 x) 0.0)
           (set! *ocean-facing* 3)
           (set! *ocean-facing* 2)
           )
       )
      ((< (-> gp-0 z) 0.0)
       (set! *ocean-facing* 0)
       0
       )
      (else
        (set! *ocean-facing* 1)
        )
      )
    )
  0
  (none)
  )
