;;-*-Lisp-*-
(in-package goal)

;; name: time-of-day-h.gc
;; name in dgo: time-of-day-h
;; dgos: GAME, ENGINE

;; TODO for mood
(declare-type time-of-day-proc process)
(declare-type time-of-day-palette basic)
(define-extern *time-of-day-proc* (pointer time-of-day-proc))
(define-extern time-of-day-interp-colors (function (pointer rgba) uint mood-context none))
(define-extern time-of-day-interp-colors-scratch (function (pointer rgba) time-of-day-palette mood-context none))

(declare-type sparticle-launch-control basic)

;; DECOMP BEGINS

;; control time of day palette from outside the time of day system
;; (for example, the cave crystals and deadly water in LPC)
(deftype palette-fade-control (structure)
  ((trans       vector  :inline)
   (fade        float)
   (actor-dist  float)
   )
  )

;; group of 8 palette fade controls
(deftype palette-fade-controls (basic)
  ((control  palette-fade-control  8 :inline)
   )
  (:methods
    (reset! (_type_) symbol)
    (set-fade! (_type_ int float float vector) object)
    )
  )

;; the global palette fade control used by game objects to control time of day lighting effects
(define-perm *palette-fade-controls* palette-fade-controls (new 'global 'palette-fade-controls))

;; the time-of-day system runs a single process that just ticks time forward and controls
;; star/sun/moon/green-sun particle launch.
(deftype time-of-day-proc (process)
  ((year             int32)
   (month            int32)
   (week             int32)
   (day              int32)
   (hour             int32)
   (minute           int32)
   (second           int32)
   (frame            int32)
   (time-of-day      float)
   (time-ratio       float)
   (star-count       int32)
   (stars            sparticle-launch-control)
   (sun-count        int32)
   (sun              sparticle-launch-control)
   (green-sun-count  int32)
   (green-sun        sparticle-launch-control)
   (moon-count       int32)
   (moon             sparticle-launch-control)
   )
  (:states
    time-of-day-tick
    )
  )

;; a color palette that can be interpolated based on the time of day.
;; tie/tfrag/shrub all use these.
(deftype time-of-day-palette (basic)
  ((width   int32)
   (height  int32)
   (pad     int32)
   (data    int32  1)
   )
  )

;; all time of day state.
(deftype time-of-day-context (basic)
  ((active-count          uint32)
   (interp                float)
   (current-interp        float)
   (moods                 mood-context  2)
   (current-fog           mood-fog      :inline)
   (current-sun           mood-sun      :inline)
   (current-prt-color     vector        :inline)
   (current-shadow        vector        :inline)
   (current-shadow-color  vector        :inline)
   (light-group           light-group   9 :inline)
   (title-light-group     light-group   :inline)
   (time                  float)
   (target-interp         float)
   (erase-color           rgba)
   (num-stars             float)
   (light-masks-0         uint8         2)
   (light-masks-1         uint8         2)
   (light-interp          float         2)
   (sky                   symbol)
   (sun-fade              float)
   (title-updated         symbol)
   )
  )

;; dma memory layout for time of day palette interpolation
(deftype time-of-day-dma (structure)
  ((outa   uint32  256)
   (outb   uint32  256)
   (banka  uint32  256)
   (bankb  uint32  256)
   )
  )

;; weird, either 8 (running) or 4 (not running)
(define *time-of-day-mode* 8)

;; the global time of day context - this is used to access all mood and time of day data.
(define *time-of-day-context* (new 'static 'time-of-day-context))
