;;-*-Lisp-*-
(in-package goal)

;; name: tie-h.gc
;; name in dgo: tie-h
;; dgos: GAME, ENGINE

;; DECOMP BEGINS

;; The TIE FRAGMENT is a record for a chunk of TIE DMA data.
;; The actual data isn't stored in the tie-fragment - this just has some meta-data and a pointer
;; to the actual data.
;; Unlike with tfrag, tie-fragments aren't part of the draw-node tree - instead they are associated with a prototype.
(deftype tie-fragment (drawable)
  ((gif-ref        (inline-array adgif-shader)  :overlay-at id)
   (point-ref      uint32                       :offset   8)
   (color-index    uint16                       :offset  12)
   (base-colors    uint8                        :offset  14)
   (tex-count      uint16)
   (gif-count      uint16)
   (vertex-count   uint16)
   (color-count    uint16)
   (num-tris       uint16)
   (num-dverts     uint16)
   (dp-ref         uint32)
   (dp-qwc         uint32)
   (generic-ref    uint32)
   (generic-count  uint32)
   (debug-lines    (array vector-array))
   )
  )

;; This is a specialization of the shared instance type for a TIE.
;; It is the child node type in the draw-node BVH tree.
(deftype instance-tie (instance)
  ((color-indices  uint32                :overlay-at error)
   (bucket-ptr     prototype-bucket-tie  :offset  12)
   (max-scale      uint16                :overlay-at (-> origin data 3))
   (flags          uint16                :overlay-at (-> origin data 7))
   )
  )

;; Wrapper class for lists of consecutive instances.
;; This is equivalent to drawable-inline-array-tfrag of tfrag.
(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((data  instance-tie  1 :inline)
   (pad   uint32)
   )
  )

;; Top-level drawable tree for TIE instances.
;; this is also a drawable-group, so it has a data array containing drawables.
;; based on the login methods it seems like the data field has all the drawables.
(deftype drawable-tree-instance-tie (drawable-tree)
  ((prototypes  proxy-prototype-array-tie  :offset   8)
   )
  )

;; Wrapper class for lists of consecutive prototypes.
;; It's not known if these are proper draw-node BVH trees.
;; you could imagine it being for things with only one instance (like generic stuff?)
(deftype prototype-tie (drawable-inline-array)
  ((data  tie-fragment  1 :inline)
   (pad   uint32)
   )
  )

;; The actual matrix type we will upload to VU1 per instance.
(deftype tie-matrix (structure)
  ((mat    matrix  :inline)
   (morph  qword   :inline)
   (fog    qword   :inline)
   )
  )

;; Temps used in the instance drawing asm functions
(deftype instance-tie-work (structure)
  ((wind-const                   vector      :inline)
   (hmge-d                       vector      :inline)
   (hvdf-offset                  vector      :inline)
   (wind-force                   vector      :inline)
   (constant                     vector      :inline)
   (far-morph                    vector      :inline)
   (dist-test                    vector      :inline)
   (min-dist                     vector      :inline)
   (guard-plane                  plane       4 :inline)
   (upload-color-0               dma-packet  :inline)
   (upload-color-1               dma-packet  :inline)
   (upload-color-2               dma-packet  :inline)
   (upload-color-ret             dma-packet  :inline)
   (upload-color-temp            dma-packet  :inline)
   (generic-color-0              dma-packet  :inline)
   (generic-color-1              dma-packet  :inline)
   (generic-color-end            dma-packet  :inline)
   (tie-near-perspective-matrix  matrix      :inline)
   (wind-vectors                 uint32)
   (test-id                      uint32)
   (test-id2                     uint32)
   (dma-buffer                   basic)
   (to-spr                       uint32)
   (from-spr                     uint32)
   (wind-work                    uint32)
   (cur-vis-bits                 uint32)
   (end-vis-bits                 uint32)
   (first-generic-prototype      uint32)
   (refl-fade-fac                float)
   (refl-fade-end                float)
   (flags                        uint32)
   (paused                       basic)
   (wait-from-spr                uint32)
   (wait-to-spr                  uint32)
   )
  )

;; DMA storage for instance dma generation (mapped to scratchpad)
(deftype instance-tie-dma (structure)
  ((banka  instance-tie       32 :inline)
   (bankb  instance-tie       32 :inline)
   (outa   uint128            256)
   (outb   uint128            256)
   (work   instance-tie-work  :dynamic)
   )
  )

;; temps used in the prototype drawing
(deftype prototype-tie-work (structure)
  ((upload-palette-0       dma-packet  :inline)
   (upload-palette-1       dma-packet  :inline)
   (upload-model-0         dma-packet  :inline)
   (upload-model-1         dma-packet  :inline)
   (upload-model-2         dma-packet  :inline)
   (upload-model-3         dma-packet  :inline)
   (upload-model-near-0    dma-packet  :inline)
   (upload-model-near-1    dma-packet  :inline)
   (upload-model-near-2    dma-packet  :inline)
   (upload-model-near-3    dma-packet  :inline)
   (upload-model-near-4    dma-packet  :inline)
   (generic-envmap-shader  dma-packet  :inline)
   (generic-palette        dma-packet  :inline)
   (generic-model-0        dma-packet  :inline)
   (generic-model-1        dma-packet  :inline)
   (generic-model-2        dma-packet  :inline)
   (generic-model-next     dma-packet  :inline)
   (clamp                  uint64)
   (prototype-array        basic)
   (generic-wait-from-spr  uint32)
   (generic-wait-to-spr    uint32)
   (wait-from-spr          uint32)
   (wait-to-spr            uint32)
   (near-wait-from-spr     uint32)
   (near-wait-to-spr       uint32)
   )
  )

;; DMA storage for prototype dma generation (mapped to scratchpad)
(deftype prototype-tie-dma (structure)
  ((colora           rgba     256)
   (colorb           rgba     256)
   (outa             uint128  256)
   (outb             uint128  256)
   (length           uint32)
   (dma-buffer       basic)
   (this-frag-count  uint32)
   (next             uint32   4 :offset 10256)
   (geometry         uint32   4)
   (frag-count       uint8    4)
   )
  )


(define *instance-tie-work-copy* (the-as instance-tie-work #f))
(define-extern *instance-tie-work* instance-tie-work)
(define-extern tie-near-make-perspective-matrix (function matrix matrix))
(define-extern draw-drawable-tree-instance-tie (function drawable-tree-instance-tie level none))
