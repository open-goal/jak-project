;;-*-Lisp-*-
(in-package goal)

;; name: subdivide-h.gc
;; name in dgo: subdivide-h
;; dgos: GAME, ENGINE

;; DECOMP BEGINS

(deftype subdivide-settings (basic)
  ((dist    float  5)
   (meters  float  5)
   (close   float  4)
   (far     float  4)
   )
  (:methods
    (new (symbol type meters meters) _type_)
    )
  )


(defmethod new subdivide-settings ((allocation symbol) (type-to-make type) (arg0 meters) (arg1 meters))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (dotimes (v1-2 3)
      (set! (-> v0-0 close v1-2) arg0)
      (set! (-> v0-0 far v1-2) arg1)
      )
    v0-0
    )
  )

(deftype subdivide-dists (structure)
  ((data    uint32   32        :offset   0)
   (vector  vector   8 :inline :overlay-at (-> data 0))
   (k0s     uint128  4         :overlay-at vector)
   (k1s     uint128  4         :overlay-at (-> data 16))
   )
  )


(deftype gs-packed-rgba (structure)
  ((data   int32  4)
   (red    int32  :overlay-at (-> data 0))
   (green  int32  :overlay-at (-> data 1))
   (blue   int32  :overlay-at (-> data 2))
   (alpha  int32  :overlay-at (-> data 3))
   )
  )


(deftype gs-packed-xyzw (structure)
  ((data  int32    4)
   (x     int32    :overlay-at (-> data 0))
   (y     int32    :overlay-at (-> data 1))
   (z     int32    :overlay-at (-> data 2))
   (w     int32    :overlay-at (-> data 3))
   (quad  uint128  :overlay-at (-> data 0))
   )
  )


(deftype gs-packed-stq (structure)
  ((data   float    4)
   (tex-s  float    :overlay-at (-> data 0))
   (tex-t  float    :overlay-at (-> data 1))
   (tex-q  float    :overlay-at (-> data 2))
   (quad   uint128  :overlay-at (-> data 0))
   )
  )


(deftype gs-packed-gt (structure)
  ((stq   gs-packed-stq   :inline)
   (rgba  gs-packed-rgba  :inline)
   (xyzw  gs-packed-xyzw  :inline)
   )
  )


(deftype gs-packed-gt4 (structure)
  ((data  gs-packed-gt  4 :inline)
   )
  )


(deftype terrain-bsp (structure)
  ((lev-index  int32)
   (mood       basic)
   )
  )


(deftype terrain-stats (structure)
  ((pris              tr-stat  :inline)
   (tie-generic       tr-stat  :inline)
   (tie               tr-stat  :inline)
   (tie-near          tr-stat  :inline)
   (shrub-near        tr-stat  :inline)
   (shrub             tr-stat  :inline)
   (tfrag-near        tr-stat  :inline)
   (tfrag             tr-stat  :inline)
   (billboard         tr-stat  :inline)
   (trans-tfrag       tr-stat  :inline)
   (trans-tfrag-near  tr-stat  :inline)
   (trans-pris        tr-stat  :inline)
   (trans-shrub       tr-stat  :inline)
   (ocean-mid         tr-stat  :inline)
   (ocean-near        tr-stat  :inline)
   (total             tr-stat  :inline)
   )
  )


(deftype dma-area (structure)
  ((draw-node-dma       draw-node-dma       :inline   :offset   0)
   (tfrag-dma           tfrag-dma           :inline   :offset   0)
   (instance-shrub-dma  instance-shrub-dma  :inline   :offset   0)
   (instance-tie-dma    instance-tie-dma    :inline   :offset   0)
   (prototype-tie-dma   prototype-tie-dma   :inline   :offset   0)
   (time-of-day-dma     time-of-day-dma     :inline   :offset   0)
   (decomp-work         decomp-work         :inline   :offset   0)
   (ocean-vertex        ocean-vertex        4 :inline :offset   0)
   )
  )


(deftype background-area (structure)
  ((dma-area  dma-area  :inline)
   (vis-list  uint8     2048)
   )
  )


(deftype foreground-area (structure)
  ((joint-work    joint-work    :inline)
   (generic-work  generic-work  :inline :overlay-at (-> joint-work temp-mtx data 0))
   (bone-mem      bone-memory   :inline :overlay-at (-> joint-work temp-mtx data 0))
   (shadow-work   shadow-work   :inline :overlay-at (-> joint-work temp-mtx data 0))
   )
  )


(deftype ambient-area (structure)
  ((ambient-list  ambient-list  :inline)
   )
  )


(deftype work-area (structure)
  ((background  background-area  :inline)
   (foreground  foreground-area  :inline :offset   0)
   (ambient     ambient-area     :inline :offset   0)
   )
  )


(deftype terrain-context (structure)
  ((bsp   terrain-bsp  :inline)
   (work  work-area    :inline)
   )
  )


(define *terrain-stats* (new 'global 'terrain-stats))

(define *collide-stats* (new 'global 'collide-stats))
(define-extern *subdivide-settings* subdivide-settings)
(define-extern update-subdivide-settings! (function subdivide-settings math-camera int none))
