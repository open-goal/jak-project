;;-*-Lisp-*-
(in-package goal)

;; name: sparticle-launcher-h.gc
;; name in dgo: sparticle-launcher-h
;; dgos: GAME, ENGINE


;; The "sparticle" system is the particle system.
;; Features
;; - Support for 2D particles (autosave icon, progress menu graphics)
;; - Support for 3D particles (many of the effects)
;; - Uses the "sprite" renderer to draw particles

;; The "sparticle-launcher" code is the framework for describing particle effects
;; The "sparticle" code is the system that runs particles
;; Note that neither of these link particles to the process system. See part-tracker for that.

;; The higheset level class here is sparticle-launch-control.
;; Each instance of a particle effect must have one of these.
;; For example, there would be one of these per eco-vent.
;; These store some state (a sparticle-launch-state) and a reference to a sparticle-launch-group
;; Multiple launch-controls can refer to the same launch-group.


;; A sparticle-launch-group is a description of a particle effect.
;; It can contain multiple types of particles.
;; The `*part-group-id-table*` array stores a reference to every launch-group, indexed by group id.
;; Each launch-group is just a list of sparticle-launchers, stored as an index

;; A launcher is a single particle effect. 
;; The `*part-id-table*` has references to all particle effects.
;; It contains a list of "field-init-specs".  When the particle effect starts, the system
;; iterates through this list and sets parameters about particles.

;; There are five types of fields:
;; misc fields
;; sprite fields
;; cpu fields
;; launch fields
;; weird fields

;; The built-in parameters can be used for many simple effects, but sometimes it is not enough.
;; You can provide a callback function to update the particle's state if needed.

;; These are the user-settable state variables for each particle effect
(defenum sp-field-id
  :type uint16
  
  (misc-fields-start 0)
  (spt-texture 1)
  (spt-anim 2)
  (spt-anim-speed 3)
  (spt-birth-func 4)
  (spt-joint/refpoint 5)
  (spt-num 6)
  (spt-sound 7)
  (misc-fields-end 8)
  
  (sprite-fields-start 9)
  (spt-x 10)
  (spt-y 11)
  (spt-z 12)
  (spt-scale-x 13)
  (spt-rot-x 14)
  (spt-rot-y 15)
  (spt-rot-z 16)
  (spt-scale-y 17)
  (spt-r 18)
  (spt-g 19)
  (spt-b 20)
  (spt-a 21)
  (sprite-fields-end 22)
  
  (cpu-fields-start 23)
  (spt-omega 24)
  (spt-vel-x 25)
  (spt-vel-y 26)
  (spt-vel-z 27)
  (spt-scalevel-x 28)
  (spt-rotvel-x 29)
  (spt-rotvel-y 30)
  (spt-rotvel-z 31)
  (spt-scalevel-y 32)
  (spt-fade-r 33)
  (spt-fade-g 34)
  (spt-fade-b 35)
  (spt-fade-a 36)
  (spt-accel-x 37)
  (spt-accel-y 38)
  (spt-accel-z 39)
  (spt-dummy 40)
  (spt-quat-x 41)
  (spt-quat-y 42)
  (spt-quat-z 43)
  (spt-quad-w 44)
  (spt-friction 45)
  (spt-timer 46)
  (spt-flags 47)
  (spt-userdata 48)
  (spt-func 49)
  (spt-next-time 50)
  (spt-next-launcher 51)
  (cpu-fields-end 52)
  
  (launch-fields-start 53)
  (spt-launchrot-x 54)
  (spt-launchrot-y 55)
  (spt-launchrot-z 56)
  (spt-launchrot-w 57)
  (spt-conerot-x 58)
  (spt-conerot-y 59)
  (spt-conerot-z 60)
  (spt-conerot-w 61)
  (spt-conerot-radius 62)
  (spt-rotate-y 63)
  (launch-fields-end 64)
  
  (spt-scale 65)
  (spt-scalevel 66)
  (spt-end 67)
  )

(defenum sp-flag
  :type uint16
  (int 0) ;; int
  (float 1) ;; float
  (float-int-rand 2) ;; float with int rand
  (copy-from-other 3) ;; copy
  (object 4) ;; label
  (symbol 5) ;; symbol
  (launcher 6) ;; launcher from id
  )

;; This describes the initial value and some more info for a single field
;; Note that there are overlays here and some values only make sense in some
;; cases.
(deftype sp-field-init-spec (structure)
  ((field          sp-field-id  :offset-assert 0)
   (flags          sp-flag  :offset-assert 2)
   (initial-valuef float   :offset-assert 4)
   (random-rangef  float   :offset-assert 8)
   (random-multf   float   :offset-assert 12)
   (initial-value  int32   :offset 4)
   (random-range   int32   :offset 8)
   (random-mult    int32   :offset 12)
   (func           symbol      :offset 4)
   (tex            texture-id  :offset 4)
   (pntr           pointer     :offset 4)
   (sym            symbol      :offset 4)
   (sound          sound-spec  :offset 4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype sparticle-launcher (basic)
  ((birthaccum float                              :offset-assert   4)
   (soundaccum float                              :offset-assert   8)
   (init-specs (inline-array sp-field-init-spec)  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(defenum sp-group-item-flag
  :bitfield #t
  :type uint16
  (is-3d 0)
  (bit1 1)
  (start-dead 2)
  (launch-asap 3)
  (bit6 6)
  )

(deftype sparticle-group-item (structure)
  ((launcher   uint32  :offset-assert 0)
   (fade-after meters  :offset-assert 4)
   (falloff-to meters  :offset-assert 8)
   (flags      sp-group-item-flag  :offset-assert 12)
   (period     uint16  :offset-assert 14)
   (length     uint16  :offset-assert 16)
   (offset     uint16  :offset-assert 18)
   (hour-mask  uint32  :offset-assert 20)
   (binding    uint32  :offset-assert 24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

(defmacro sp-item (launcher
                    &key (fade-after 0.0)
                    &key (falloff-to 0.0)
                    &key (flags ())
                    &key (period 0)
                    &key (length 0)
                    &key (offset 0)
                    &key (hour-mask 0)
                    &key (binding 0)
                    )
  `(new 'static 'sparticle-group-item
        :launcher ,launcher
        :fade-after ,fade-after
        :falloff-to ,falloff-to
        :flags (sp-group-item-flag ,@flags)
        :period ,period
        :length ,length
        :offset ,offset
        :hour-mask ,hour-mask
        :binding ,binding
        )
  )

(defenum sp-launch-state-flags
  :bitfield #t
  :type uint16
  (launcher-active 0)        ;; active
  (particles-active 1) ;; wants to launch
  (bit2 2)
  )

(declare-type sparticle-cpuinfo structure)

(deftype sparticle-launch-state (structure)
  ((group-item sparticle-group-item  :offset-assert 0)
   (flags      sp-launch-state-flags :offset-assert 4)
   (randomize  uint16                :offset-assert 6)
   (origin     vector                :offset-assert 8)
   (sprite3d   sprite-vec-data-3d    :offset-assert 12)
   (sprite     sparticle-cpuinfo     :offset-assert 16)
   (offset     uint32                :offset-assert 20)
   (accum      float                 :offset-assert 24)
   (spawn-time uint32                :offset-assert 28)
   (swarm      basic                 :offset 20)
   (seed       uint32                :offset 24)
   (time       uint32                :offset 28)
   (spec       basic                 :offset 16)
   (id         uint32                :offset 12)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(defenum sp-group-flag
  :bitfield #t
  :type uint16
  (use-local-clock 0)
  (always-draw 1)
  (screen-space 2)
  (unknown-bit-01 3) ;; beach-part
  )

(deftype sparticle-launch-group (basic)
  ((length          int16          :offset-assert 4)
   (duration        uint16         :offset-assert 6)
   (linger-duration uint16         :offset-assert 8)
   (flags           sp-group-flag  :offset-assert 10)
   (name            string         :offset-assert 12)
   (launcher        (inline-array sparticle-group-item)         :offset-assert 16)
   (bounds          sphere :inline :offset-assert 32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control 9)
    )
  )


(deftype sparticle-launch-control (inline-array-class)
  ((group            sparticle-launch-group                  :offset-assert  16)
   (proc             process                                 :offset-assert  20)
   (local-clock      int32                                   :offset-assert  24)
   (fade             float                                   :offset-assert  28)
   (matrix           int32                                   :offset-assert  32)
   (last-spawn-frame int32                                   :offset-assert  36)
   (last-spawn-time  int32                                   :offset-assert  40)
   (center           vector                 :inline          :offset-assert  48)
   (data             sparticle-launch-state :inline :dynamic :offset-assert  64)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (initialize (_type_ sparticle-launch-group process) none 9)
    (is-visible? (_type_ vector) symbol 10)
    (spawn (_type_ vector) object 11)
    (kill-and-free-particles (_type_) none 12)
    (kill-particles (_type_) none 13)
    )
  )


(set! (-> sparticle-launch-control heap-base) (the-as uint 32))


(defmacro defpartgroup (name &key id &key parts &key (duration 3000) &key (linger-duration 1500) &key (flags ()) &key bounds)
  "define a new part group. defines a constant with the name of the group with the ID as its value"
  `(begin
    (defconstant ,name ,id)
    (set! (-> *part-group-id-table* ,id)
      (new 'static 'sparticle-launch-group
          :duration ,duration
          :linger-duration ,linger-duration
          :flags (sp-group-flag ,@flags)
          :bounds ,bounds
          :name ,(symbol->string name)
          :length ,(length parts)
          :launcher (new 'static 'inline-array sparticle-group-item ,(length parts) ,@parts)
          )
      )
    )
  )

(defmacro get-part-group (id)
  `(-> *part-group-id-table* ,id)
  )

(seval (begin
(define *sparticle-fields* '())
(doenum (name val 'sp-field-id)
  (append!! *sparticle-fields* (list (if (string-starts-with? (symbol->string name) "spt-")
                                         (string-substr (symbol->string name) 4 0)
                                         (symbol->string name))
                                     val name (member name '(spt-vel-x
                                                             spt-vel-y
                                                             spt-vel-z
                                                             spt-scalevel-x
                                                             spt-scalevel-y
                                                             spt-rotvel-x
                                                             spt-rotvel-y
                                                             spt-rotvel-z
                                                             spt-fade-r
                                                             spt-fade-g
                                                             spt-fade-b
                                                             spt-fade-a
                                                             spt-accel-x
                                                             spt-accel-y
                                                             spt-accel-z))))
  )
;; you cannot define these fields ever.
(define *sparticle-fields-banned* '(misc-fields-start
                                    misc-fields-end
                                    sprite-fields-start
                                    sprite-fields-end
                                    cpu-fields-start
                                    cpu-fields-end
                                    launch-fields-start
                                    launch-fields-end
                                    end
                                    ))
))
(defmacro defpart (id &key (init-specs ()))
  "define a new sparticle-launcher"

  (let ((last-field-id -1))
    `(set! (-> *part-id-table* ,id)
        (new 'static 'sparticle-launcher
            :init-specs (new 'static 'inline-array sp-field-init-spec ,(1+ (length init-specs))
                    ,@(apply (lambda (x)
                    (let* ((head (symbol->string (car x)))
                          (params (cdr x))
                          (field-name (string-substr head 1 0))
                          (field (assoc field-name *sparticle-fields*)))
                      (when (not field)
                        (fmt #t "unknown sparticle field {}\n" x))
                      (when (neq? (string-ref head 0) #\:)
                        (fmt #t "invalid sparticle field {}\n" x))
                      (when (member (string->symbol field-name) *sparticle-fields-banned*)
                        (fmt #t "you cannot use sparticle field {}\n" field-name))
                    (let* ((field-id (cadr field))
                          (field-enum-name (caddr field))
                          (vel? (and #f (cadddr field)))
                          (param-float? (lambda (p) (or (float? p) (and (pair? p) (eq? 'meters (car p))) (and (pair? p) (eq? 'degrees (car p))))))
                          (param-int? (lambda (p) (or (integer? p) (and (pair? p) (eq? 'seconds (car p))))))
                          (param-symbol? (lambda (p) (and (pair? p) (eq? 'quote (car p)))))
                          (param-count (length params)))
                      (when (>= last-field-id field-id)
                        (fmt #t "field {} must come after field {}, not before\n" field-name (car (nth last-field-id *sparticle-fields*))))
                      (set! last-field-id field-id)
                      (cond
                        ((eq? field-name "flags")
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :initial-value (sp-cpuinfo-flag ,@(car params)) :random-mult 1)
                          )
                        ((eq? field-name "texture")
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :tex ,(car params) :flags (sp-flag int))
                          )
                        ((eq? field-name "next-launcher")
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :initial-value ,(car params) :flags (sp-flag launcher))
                          )
                        ((eq? field-name "sound")
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :sound ,(car params) :flags (sp-flag object))
                          )
                        ((and (= 2 param-count) (symbol? (car params)) (eq? (symbol->string (car params)) ":copy"))
                          (let* ((other-field (assoc (symbol->string (cadr (member (string->symbol ":copy") params))) *sparticle-fields*))
                                (other-field-id (cadr other-field)))
                            (when (>= other-field-id field-id)
                              (fmt #t "warning copying to sparticle field {} - you can only copy from fields before this one!\n" field-name))
                            `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag copy-from-other)
                                                              :initial-value ,(- other-field-id field-id) :random-mult 1)
                            )
                          )
                        ((and (= 2 param-count) (symbol? (car params)) (eq? (symbol->string (car params)) ":data"))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag object)
                                                            :pntr (the-as pointer ,(cadr (member (string->symbol ":data") params))))
                          )
                        ((and (= 1 param-count) (param-symbol? (first params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag symbol)
                                                            :sym ,(first params))
                          )
                        ((and (= 1 param-count) (param-float? (first params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag float)
                                                            :initial-valuef ,(if vel? `(/ ,(first params) 60.0) (first params))
                                                            :random-rangef 0.0
                                                            :random-multf 1.0)
                          )
                        ((and (= 2 param-count) (param-float? (first params)) (param-float? (second params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag float)
                                                            :initial-valuef ,(if vel? `(/ ,(first params) 60.0) (first params))
                                                            :random-rangef ,(if vel? `(/ ,(second params) 60.0) (second params))
                                                            :random-multf 1.0)
                          )
                        ((and (= 3 param-count) (param-float? (first params)) (param-float? (second params)) (param-float? (third params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag float)
                                                            :initial-valuef ,(if vel? `(/ ,(first params) 60.0) (first params))
                                                            :random-rangef ,(second params)
                                                            :random-multf ,(if vel? `(/ ,(third params) 60.0) (third params)))
                          )
                        ((and (= 3 param-count) (param-float? (first params)) (param-int? (second params)) (param-float? (third params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag float-int-rand)
                                                            :initial-valuef ,(if vel? `(/ ,(first params) 60.0) (first params))
                                                            :random-range ,(second params)
                                                            :random-multf ,(if vel? `(/ ,(third params) 60.0) (third params)))
                          )
                        ((and (= 1 param-count) (param-int? (first params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag int)
                                                            :initial-value ,(first params)
                                                            :random-range 0
                                                            :random-mult 1)
                          )
                        ((and (= 2 param-count) (param-int? (first params)) (param-int? (second params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag int)
                                                            :initial-value ,(first params)
                                                            :random-range ,(second params)
                                                            :random-mult 1)
                          )
                        ((and (= 3 param-count) (param-int? (first params)) (param-int? (second params)) (param-int? (third params)))
                          `(new 'static 'sp-field-init-spec :field (sp-field-id ,field-enum-name) :flags (sp-flag int)
                                                            :initial-value ,(first params)
                                                            :random-range ,(second params)
                                                            :random-mult ,(third params))
                          )
                        (#t
                          `(new 'static 'sp-field-init-spec :field (sp-field-id spt-end))
                          )
                        )
                      ))
                    ) init-specs)
                    (new 'static 'sp-field-init-spec :field (sp-field-id spt-end))
                    )))
    )
  )



