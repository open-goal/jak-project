;;-*-Lisp-*-
(in-package goal)

;; name: hud-h.gc
;; name in dgo: hud-h
;; dgos: GAME, ENGINE

(define-extern activate-hud (function process none))
(define-extern activate-orb-all (function int int))
(define-extern hide-hud (function none))
(define-extern hide-hud-quick (function none))
(define-extern hide-bottom-hud (function none))
(define-extern hud-hidden? (function symbol))
(define-extern bottom-hud-hidden? (function symbol))
(define-extern enable-hud (function none))
(define-extern disable-hud (function int none))

(declare-type hud process)
(declare-type hud-pickups hud)
(declare-type hud-money hud)
(declare-type hud-fuel-cell hud)
(declare-type hud-health hud)
(declare-type hud-buzzers hud)
(declare-type hud-power hud)
(declare-type hud-bike-speed hud)
(declare-type hud-bike-heat hud)
(declare-type hud-money-all hud)

;; DECOMP BEGINS

(deftype hud-icon (basic)
  ((icon     (pointer manipy))
   (icon-y   int32)
   (icon-x   int32)
   (icon-z   int32)
   (scale-x  float)
   (scale-y  float)
   )
  )


(deftype hud-particle (basic)
  ((part      sparticle-launch-control)
   (init-pos  vector  :inline)
   (pos       vector  :inline)
   (prev-pos  vector  :inline)
   )
  )


(deftype hud (process)
  ((value                   int32)
   (value2                  int32)
   (target-value            int32)
   (last-increment-time     time-frame)
   (last-target-equal-time  time-frame)
   (offset                  int32)
   (y-offset                int32)
   (next-y-offset           int32)
   (x-sgn                   int32)
   (y-sgn                   int32)
   (text-x                  int32)
   (text-y                  int32)
   (friend                  int32)
   (first-init              symbol)
   (increment-on-event      symbol)
   (skip-particle           int32)
   (disable                 symbol)
   (force-on-screen         symbol)
   (deactivate-when-hidden  symbol)
   (trigger-time            time-frame)
   (last-hide-time          time-frame)
   (nb-of-icons             int32)
   (icons                   hud-icon      6)
   (max-nb-of-particles     int32)
   (nb-of-particles         int32)
   (particles               hud-particle  7)
   )
  (:methods
    (hidden? (_type_) symbol)
    (draw-hud (_type_) none)
    (tally-value (_type_ int int) none)
    (draw-icons (_type_) none)
    (draw-particles (_type_) none)
    (hud-update (_type_) none)
    (init-particles! (_type_ int) none)
    (get-icon-pos-x (_type_) int)
    (get-icon-pos-y (_type_) int)
    (hud-method-23 (_type_) none)
    (set-pos-and-scale (_type_ symbol symbol) none)
    (get-icon-scale-x (_type_) float)
    (get-icon-scale-y (_type_) float)
    )
  (:states
    hud-arriving
    hud-hidden
    hud-in
    (hud-leaving int)
    )
  )


(deftype hud-parts (structure)
  ((pickups     (pointer hud-pickups))
   (money       (pointer hud-money))
   (fuel-cell   (pointer hud-fuel-cell))
   (health      (pointer hud-health))
   (buzzers     (pointer hud-buzzers))
   (power       (pointer hud-power))
   (bike-speed  (pointer hud-bike-speed))
   (bike-heat   (pointer hud-bike-heat))
   (money-all   (pointer hud-money-all))
   (parts       (pointer hud)  9 :overlay-at pickups)
   )
  )


(define *hud-parts* (new 'static 'hud-parts
                      :pickups #f
                      :money #f
                      :fuel-cell #f
                      :health #f
                      :buzzers #f
                      :power #f
                      :bike-speed #f
                      :bike-heat #f
                      :money-all #f
                      )
        )

;; added for pc port
(defenum hud-collectable-view
  (original)
  (game-totals)
  (level-totals)
  )

(define *hud-collectable-view* (hud-collectable-view original))

0




