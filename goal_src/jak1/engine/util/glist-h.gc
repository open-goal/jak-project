;;-*-Lisp-*-
(in-package goal)

;; name: glist-h.gc
;; name in dgo: glist-h
;; dgos: GAME, ENGINE


;; Very very weird linked list system.
;; TODO add examples because this is extremely confusing.

;; DECOMP BEGINS

;; this file is debug only
(declare-file (debug))

(deftype glst-node (structure)
  ((next  glst-node)
   (prev  glst-node)
   )
  )


(deftype glst-named-node (glst-node)
  ((privname  string)
   )
  )


(deftype glst-list (structure)
  ((head      glst-node)
   (tail      glst-node)
   (tailpred  glst-node)
   (numelem   int32)
   )
  :allow-misaligned
  )


;; FUN FACT! The "defun" macro only checks if the first item in the function body is a
;; string (the docstring), but because these functions were marked as inline (or debug)
;; BEFORE the docstring, they end up being considered part of the body and the compiled output!
;; This amusing mistake is reproduced here.

(defun glst-next ((arg0 glst-node))
  (declare (inline))
  "return the next node in the list"

  (-> arg0 next)
  )

(defun glst-prev ((arg0 glst-node))
  (declare (inline))
  "return the previous node in the list"

  (-> arg0 prev)
  )

(defun glst-head ((arg0 glst-list))
  (declare (inline))
  "return the start of the list"

  (-> arg0 head)
  )

(defun glst-tail ((arg0 glst-list))
  (declare (inline))
  "return the tail of the list"

  (-> arg0 tailpred)
  )

(defun glst-end-of-list? ((arg0 glst-node))
  (declare (inline))
  "is this node the end of the list. #t = end"

  (not (-> arg0 next))
  )

(defun glst-start-of-list? ((arg0 glst-node))
  (declare (inline))
  "is this node the start of the list. #t = start"

  (not (-> arg0 prev))
  )

(defun glst-empty? ((arg0 glst-list))
  (declare (inline))
  "is the list empty, #t = empty"

  (= (-> arg0 tailpred) arg0)
  )

(defun glst-node-name ((arg0 glst-named-node))
  "Return the name of the node"

  (-> arg0 privname)
  )

(defun glst-set-name! ((arg0 glst-named-node) (arg1 string))
  "Set the name of the node"
  (declare (inline))

  (set! (-> arg0 privname) arg1)
  )
