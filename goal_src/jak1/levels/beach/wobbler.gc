;;-*-Lisp-*-
(in-package goal)

;; name: wobbler.gc
;; name in dgo: wobbler
;; dgos: BEA, L1

;; DECOMP BEGINS

(defclass wobbler (basic)
 "Simulates the motion of a dampened spring. 
  This is used to make the flutflut egg wobble when being hit."
  ((posx    float  :offset-assert   4)
   (posy    float  :offset-assert   8)
   (velx    float  :offset-assert  12)
   (vely    float  :offset-assert  16)
   (spring  float  :offset-assert  20)
   (damping float  :offset-assert  24)
   (height  float  :offset-assert  28)
   )
  (:methods
    (reset! ((spring float) (damping float) (height float)) (none) 
      "Resets position and velocity.
       Sets the spring constant, damping factor, and height."
      (set! (-> self posx) 0.0)
      (set! (-> self posy) 0.0)
      (set! (-> self velx) 0.0)
      (set! (-> self vely) 0.0)
      (set! (-> self spring) spring)
      (set! (-> self damping) damping)
      (set! (-> self height) height)
      0
      (none)
     )
    (inc-xy-vel! ((x float) (y float)) (none)
      (+! (-> self velx) x)
      (+! (-> self vely) y)
      0
      (none)
     )
    (wobble! () (none)
      "Simulates a frame of a dampened spring, resulting in wobbling.
       Updates the wobbler position and velocity based on the current position and velocity."
      (+! (-> self posx) (* (-> self velx) (-> *display* seconds-per-frame)))
      (+! (-> self posy) (* (-> self vely) (-> *display* seconds-per-frame)))
      (set! (-> self velx) (* (-> self velx) (-> self damping)))
      (set! (-> self vely) (* (-> self vely) (-> self damping)))
      (+! (-> self velx) (* -1.0 (-> self posx) (-> self spring)))
      (+! (-> self vely) (* -1.0 (-> self posy) (-> self spring)))
      0
      (none)
     )
    (reorient-quat! ((quat quaternion)) (none)
      "Reorients a quaternion to point in the direction of the current wobbler position.
       The quaternion is also rotated to point up or down based on the current position."
      (let ((pos (new 'stack-no-clear 'vector)))
        (set! (-> pos x) (-> self posy))
        (set! (-> pos y) 0.0)
        (set! (-> pos z) (- (-> self posx)))
        (vector-normalize! pos 1.0)
        (let* ((distance (/ (sqrtf (+ (* (-> self posx) (-> self posx)) (* (-> self posy) (-> self posy)))) (-> self height)))
              (angle (atan distance 1.0))
              )
          (quaternion-vector-angle! quat pos angle)
         )
       )
      0
      (none)
     )
    )
  (:options
    :method-count-assert 13
    :size-assert         #x20
    :flag-assert         #xd00000020
   )
  )