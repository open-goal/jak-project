;;-*-Lisp-*-
(in-package goal)

;; name: sidekick-human.gc
;; name in dgo: sidekick-human
;; dgos: L1, MIS

;; DECOMP BEGINS

(import "goal_src/jak1/import/darkecocan-ag.gc")
(import "goal_src/jak1/import/sidekick-human-ag.gc")
(import "goal_src/jak1/import/evilbro-ag.gc")
(import "goal_src/jak1/import/evilsis-ag.gc")

(deftype sequenceA (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )


(defpartgroup group-2d-intro-mist
  :id 657
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2665 :period 300 :length 5 :binding 2663)
    (sp-item 2663 :flags (start-dead launch-asap) :binding 2664)
    (sp-item 2663 :flags (start-dead launch-asap) :binding 2664)
    (sp-item 2664 :flags (start-dead))
    (sp-item 2664 :flags (start-dead))
    (sp-item 2664 :flags (start-dead))
    (sp-item 2666)
    (sp-item 2667)
    )
  )

(defpart 2665
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters -2.5) (meters 5) 1.0)
    (sp-rnd-flt spt-y (meters -1.5) (meters 3) 1.0)
    (sp-flt spt-scale-x (meters 0.1))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-g 128.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.0033333334) (meters 0.0033333334) 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit3)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2663
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters 0) (meters 16) 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 16) 1.0)
    (sp-rnd-flt spt-z (meters 0.5) (meters 0.2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 0.0 96.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-omega 0.0 65536.0 1.0)
    (sp-rnd-int-flt spt-vel-x (meters -0.053333335) 1 436.90668)
    (sp-flt spt-scalevel-x (meters -0.0012121212))
    (sp-rnd-int-flt spt-rotvel-z (degrees -0.3) 1 109.22667)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit3 bit7)
    )
  )

(defpart 2664
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.3) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 96.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-flt spt-scalevel-x (meters -0.0010952381))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-accel-y 0.0 -0.13653333 1.0)
    (sp-int-plain-rnd spt-timer 30 299 1)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-int spt-next-time 240)
    (sp-launcher-by-id spt-next-launcher 198)
    )
  )

(defpart 2667
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x36 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-flt spt-z (meters -3.90625))
    (sp-flt spt-scale-x (meters 15))
    (sp-flt spt-scale-y (meters 12))
    (sp-flt spt-r 0.0)
    (sp-flt spt-g 0.0)
    (sp-flt spt-b 0.0)
    (sp-flt spt-a 128.0)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags bit2 bit14)
    )
  )

(defpart 2666
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.3)
    (sp-rnd-flt spt-x (meters -4) (meters 8) 1.0)
    (sp-rnd-flt spt-y (meters -3) (meters 6) 1.0)
    (sp-rnd-flt spt-z (meters 0) (meters 3.4179688) 1.0)
    (sp-rnd-flt spt-scale-x (meters 6) (meters 8) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 6) (meters 8) 1.0)
    (sp-rnd-flt spt-r 16.0 80.0 1.0)
    (sp-rnd-flt spt-g 0.0 16.0 1.0)
    (sp-rnd-flt spt-b 16.0 150.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-scalevel-x (meters -0.0016666667) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.075) (degrees 0.15) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 1500)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int-plain-rnd spt-next-time 150 149 1)
    (sp-launcher-by-id spt-next-launcher 2668)
    )
  )

(defpart 2668
  :init-specs ((sp-flt spt-fade-a 0.0)
    (sp-int-plain-rnd spt-next-time 300 299 1)
    (sp-launcher-by-id spt-next-launcher 2669)
    )
  )

(defpart 2669
  :init-specs ((sp-flt spt-fade-a -0.21333334))
  )

(defpartgroup group-evilsib-appear
  :id 557
  :duration 900
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2345 :period 1500 :length 20 :offset 1500)
    (sp-item 2346 :period 1500 :length 20 :offset 1500)
    (sp-item 2347 :period 1500 :length 5 :offset 1500)
    (sp-item 2348 :period 1500 :length 20 :offset 1500)
    (sp-item 2349 :period 1500 :length 900 :offset 750 :binding 2344)
    (sp-item 2350 :period 1500 :length 750 :offset 600 :binding 2344)
    (sp-item 2351 :period 1500 :length 600 :offset 450 :binding 2344)
    (sp-item 2351 :period 1500 :length 450 :offset 300 :binding 2344)
    (sp-item 2352 :period 1500 :length 300 :offset 150 :binding 2344)
    (sp-item 2352 :period 1500 :length 150 :binding 2344)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    )
  )

(defpart 2349
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0) (meters 0.1) 1.0)
    (sp-rnd-flt spt-y (meters -1) (meters 4) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit14)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2353
  :init-specs ((sp-flt spt-fade-a -0.21333334))
  )

(defpart 2350
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0) (meters 0.1) 1.0)
    (sp-rnd-flt spt-y (meters -1) (meters 4) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int spt-next-time 300)
    (sp-launcher-by-id spt-next-launcher 2353)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2351
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0) (meters 0.3) 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int spt-next-time 300)
    (sp-launcher-by-id spt-next-launcher 2353)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2352
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0) (meters 0.5) 1.0)
    (sp-rnd-flt spt-y (meters -0.5) (meters 1) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int spt-next-time 300)
    (sp-launcher-by-id spt-next-launcher 2353)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2344
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters 0) (meters 16) 1.0)
    (sp-rnd-flt spt-y (meters 0) (meters 16) 1.0)
    (sp-rnd-flt spt-z (meters 5) (meters 1.5) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.05) (meters 0.05) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-rnd-flt spt-omega 0.0 65536.0 1.0)
    (sp-rnd-flt spt-vel-x (meters -0.074074075) (meters 0.14814815) 1.0)
    (sp-flt spt-vel-y (meters 0))
    (sp-flt spt-vel-z (meters -0.015))
    (sp-flt spt-scalevel-x (meters 0.0005))
    (sp-rnd-flt spt-rotvel-z (degrees -0.53333336) (degrees 1.0666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit3 bit7 bit14)
    (sp-int spt-next-time 270)
    (sp-launcher-by-id spt-next-launcher 2354)
    )
  )

(defpart 2354
  :init-specs ((sp-flt spt-fade-a -3.2))
  )

(defpart 2345
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 1) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.2) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0) (meters 0.21333334) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00066666666))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-g -0.42666668)
    (sp-rnd-flt spt-accel-y -0.68266666 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.8 0.05 1.0)
    (sp-int spt-timer 1500)
    (sp-cpuinfo-flags bit0 bit2 bit14)
    (sp-int-plain-rnd spt-next-time 30 749 1)
    (sp-launcher-by-id spt-next-launcher 2355)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 2) 1.0)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2355
  :init-specs ((sp-flt spt-fade-g 0.0) (sp-flt spt-fade-a 0.0))
  )

(defpart 2346
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.4) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0) (meters 0.026666667) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00066666666))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-g -0.42666668)
    (sp-rnd-flt spt-accel-y -0.68266666 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.75 0.05 1.0)
    (sp-int spt-timer 1500)
    (sp-cpuinfo-flags bit0 bit2 bit14)
    (sp-int-plain-rnd spt-next-time 30 749 1)
    (sp-launcher-by-id spt-next-launcher 2355)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.5) (meters 1) 1.0)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2347
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 2))
    (sp-rnd-flt spt-scale-x (meters 28) (meters 4) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-flt spt-fade-g -2.3272727)
    (sp-flt spt-fade-a -2.3272727)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    )
  )

(defpart 2348
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 2.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 2) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.25) (meters 0.1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-scale-y (meters 16))
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 128.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-flt spt-scalevel-y (meters 0.6))
    (sp-flt spt-fade-r -2.1333334)
    (sp-flt spt-fade-g -2.1333334)
    (sp-flt spt-fade-a -1.0666667)
    (sp-int spt-timer 60)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    )
  )

(defpartgroup group-evilsib-hover
  :id 558
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2386 :binding 2385)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    )
  )

(defpart 2386
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-y (meters 0.25) (meters 1.5) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.5) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-accel-y -2.048)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit14)
    )
  )

(defpart 2385
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters 0) (meters 16) 1.0)
    (sp-flt spt-y (meters 0))
    (sp-rnd-flt spt-z (meters 0.25) (meters 0.25) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.05) (meters 0.025) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-omega 0.0 65536.0 1.0)
    (sp-rnd-flt spt-vel-x (meters -0.04444444) (meters 0.08888888) 1.0)
    (sp-flt spt-vel-y (meters 0))
    (sp-flt spt-vel-z (meters 0.0027777778))
    (sp-flt spt-scalevel-x (meters 0.00027777778))
    (sp-rnd-flt spt-rotvel-z (degrees -0.53333336) (degrees 1.0666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 4.266667)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit3 bit7 bit14)
    (sp-int-plain-rnd spt-next-time 30 14 1)
    (sp-launcher-by-id spt-next-launcher 2388)
    )
  )

(defpart 2388
  :init-specs ((sp-flt spt-fade-a 0.0) (sp-int spt-next-time 150) (sp-launcher-by-id spt-next-launcher 2389))
  )

(defpart 2389
  :init-specs ((sp-flt spt-vel-z (meters -0.008333334))
    (sp-flt spt-scalevel-x (meters -0.00041666668))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -1.0666667)
    )
  )

(defpart 2384
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 0.1)
    (sp-rnd-flt spt-scale-x (meters 0.4) (meters 0.2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-flt spt-scalevel-x (meters -0.03))
    (sp-rnd-flt spt-rotvel-z (degrees -0.53333336) (degrees 1.0666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -4.8)
    (sp-flt spt-accel-y -1.3653333)
    (sp-int spt-timer 15)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    )
  )

(defpartgroup group-sequenceC-glowing-can
  :id 560
  :duration 900
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2298))
  )

(defpart 2298
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.0)
    (sp-rnd-flt spt-x (meters -0.25) (meters 0.5) 1.0)
    (sp-rnd-flt spt-y (meters -0.25) (meters 0.5) 1.0)
    (sp-rnd-flt spt-z (meters -0.25) (meters 0.5) 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 0.0)
    (sp-rnd-flt spt-g 96.0 32.0 1.0)
    (sp-flt spt-b 0.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-flt spt-vel-y (meters 0))
    (sp-rnd-flt spt-rotvel-z (degrees -1.2) (degrees 2.4) 1.0)
    (sp-flt spt-fade-a -0.42666668)
    (sp-int spt-timer 150)
    (sp-cpuinfo-flags bit2 bit3)
    )
  )

(defpartgroup group-sequenceC-exploding-can
  :id 561
  :duration 900
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2785 :period 1800 :length 5)
    (sp-item 2786 :period 1800 :length 40)
    (sp-item 2787 :period 1800 :length 20)
    (sp-item 2788 :period 1800 :length 20)
    (sp-item 2830 :fade-after (meters 100) :period 600 :length 5 :binding 296)
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    )
  )

(defpart 2830
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-x (meters -2) (meters 4) 1.0)
    (sp-rnd-flt spt-y (meters 1) (meters 2) 1.0)
    (sp-rnd-flt spt-z (meters -2) (meters 4) 1.0)
    (sp-flt spt-scale-x (meters 0.1))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.053333335) (meters 0.026666667) 1.0)
    (sp-flt spt-accel-y -1.3653333)
    (sp-flt spt-friction 0.94)
    (sp-int spt-timer 240)
    (sp-cpuinfo-flags bit3)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 140.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    )
  )

(defpart 2786
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 12.0)
    (sp-rnd-flt spt-y (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.4) (meters 0.8) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-rnd-flt spt-a 32.0 96.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.04) (meters 0.16) 1.0)
    (sp-flt spt-scalevel-x (meters -0.0026666666))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-accel-y -0.68266666 -0.68266666 1.0)
    (sp-flt spt-friction 0.9)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int-plain-rnd spt-next-time 30 89 1)
    (sp-launcher-by-id spt-next-launcher 2789)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 120.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 2) (meters 4) 1.0)
    )
  )

(defpart 2789
  :init-specs ((sp-flt spt-fade-a -1.0666667))
  )

(defpart 2788
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 12.0)
    (sp-flt spt-scale-x (meters 0.3))
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-scale-y (meters 12))
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 32.0 64.0 1.0)
    (sp-flt spt-scalevel-y (meters 1.04))
    (sp-flt spt-fade-a -1.6)
    (sp-int spt-timer 60)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    )
  )

(defpart 2785
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-flt spt-scale-x (meters 24))
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-flt spt-fade-a -2.3272727)
    (sp-int spt-timer 54)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    )
  )

(defpart 2787
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 16.0)
    (sp-rnd-flt spt-y (meters -1.5) (meters 3) 1.0)
    (sp-rnd-flt spt-scale-x (meters 3) (meters 1.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 0.0 96.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.08) (meters 0.04) 1.0)
    (sp-flt spt-scalevel-x (meters 0.02))
    (sp-rnd-flt spt-rotvel-z (degrees -0.6) (degrees 1.2) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -0.28444445)
    (sp-rnd-flt spt-accel-y 0.68266666 0.68266666 1.0)
    (sp-flt spt-friction 0.8)
    (sp-int spt-timer 510)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 120.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0) (meters 4) 1.0)
    )
  )

(defpartgroup group-sequenceC-dark-splash
  :id 562
  :duration 900
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 295 :fade-after (meters 100) :period 600 :length 5 :binding 296)
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 2095 :period 600 :length 5)
    (sp-item 2096 :fade-after (meters 80) :falloff-to (meters 80) :period 600 :length 40)
    (sp-item 2097 :period 600 :length 20)
    )
  )

(defpartgroup group-sequenceC-blow-dust
  :id 681
  :duration 5
  :linger-duration 900
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2790))
  )

(defpart 2790
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 128.0 32.0 1.0)
    (sp-rnd-flt spt-g 96.0 64.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.016666668) (meters 0.0033333334) 1.0)
    (sp-flt spt-scalevel-x (meters 0.006666667))
    (sp-rnd-flt spt-rotvel-z (degrees -1.2) (degrees 2.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.4)
    (sp-rnd-flt spt-accel-y 1.3653333 -1.3653333 1.0)
    (sp-flt spt-friction 0.92)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-int-plain-rnd spt-next-time 15 44 1)
    (sp-launcher-by-id spt-next-launcher 2822)
    (sp-rnd-flt spt-conerot-x (degrees 112.99999) (degrees 2.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees -12.500001) (degrees 15.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.3) (meters -0.5) 1.0)
    )
  )

(defpart 2822
  :init-specs ((sp-flt spt-fade-a -0.1))
  )

(deftype sequenceB (process-taskable)
  ((bonelurker  handle   :offset-assert 384)
   (evilbro     handle   :offset-assert 392)
   (evilsis     handle   :offset-assert 400)
   (lurker-army handle 9 :offset-assert 408)
   )
  :heap-base #x170
  :method-count-assert 53
  :size-assert         #x1e0
  :flag-assert         #x35017001e0
  )


(deftype sequenceC (process-taskable)
  ((bonelurker              handle          :offset-assert 384)
   (darkecocan              handle          :offset-assert 392)
   (darkecocan-glowing-look lod-set :inline :offset-assert 400)
   )
  :heap-base #x150
  :method-count-assert 53
  :size-assert         #x1b1
  :flag-assert         #x35015001b1
  )


(defskelgroup *sidekick-human-sg* sidekick-human sidekick-human-lod0-jg sidekick-human-idle-ja
              ((sidekick-human-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2.5)
              :shadow sidekick-human-shadow-mg
              )

(defskelgroup *darkecocan-sg* darkecocan darkecocan-lod0-jg darkecocan-idle-ja
              ((darkecocan-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

(defskelgroup *darkecocan-glow-sg* darkecocan darkecocan-glow-lod0-jg darkecocan-idle-ja
              ((darkecocan-glow-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

(defskelgroup *evilbro-sg* evilbro evilbro-lod0-jg evilbro-idle-ja
              ((evilbro-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

(defskelgroup *evilsis-sg* evilsis evilsis-lod0-jg evilsis-idle-ja
              ((evilsis-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

(deftype army-info (structure)
  ((pos         vector  :offset-assert   0)
   (rot         float   :offset-assert   4)
   (start-frame float   :offset-assert   8)
   (skel        symbol  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(define *lurker-army*
  (the-as (array army-info) (new 'static 'boxed-array :type army-info
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -920633.4 :y 83546.11 :z 4210409.5)
                                :rot 28556.04
                                :skel 'babak
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -873488.4 :y 86441.984 :z 4225454.0)
                                :rot 37861.24
                                :start-frame 5.0
                                :skel 'babak
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -905871.4 :y 83132.414 :z 4231934.0)
                                :rot 32054.021
                                :start-frame 10.0
                                :skel 'babak
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -926765.06 :y 83496.96 :z 4236230.5)
                                :rot 30001.652
                                :start-frame 15.0
                                :skel 'babak
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -893345.8 :y 83517.44 :z 4212961.5)
                                :rot 32755.074
                                :start-frame 20.0
                                :skel 'babak
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -842797.06 :y 84041.73 :z 4218855.5)
                                :rot 43916.402
                                :skel 'bonelurker
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -839274.5 :y 82644.99 :z 4248723.5)
                                :rot 40510.715
                                :start-frame 6.0
                                :skel 'bonelurker
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -871485.44 :y 85909.51 :z 4243181.5)
                                :rot 37046.043
                                :start-frame 12.0
                                :skel 'bonelurker
                                )
                              (new 'static 'army-info
                                :pos (new 'static 'vector :x -947523.56 :y 85835.77 :z 4219314.0)
                                :rot 26980.078
                                :start-frame 18.0
                                :skel 'bonelurker
                                )
                              )
                            )
  )

(defbehavior evilsib-trans-hook-hover evilbro ()
  0
  (none)
  )

(defbehavior evilsib-trans-hook-wait evilbro ()
  (when (>= (ja-aframe-num 0) 425.0)
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> *part-group-id-table* 557)
      -1
      #f
      #f
      #f
      (-> self draw origin)
      :to *entity-pool*
      )
    (send-event self 'trans-hook evilsib-trans-hook-hover)
    )
  0
  (none)
  )

(defmethod play-anim! sequenceB ((obj sequenceB) (arg0 symbol))
  (cond
    (arg0
      (send-event *target* 'sidekick #f)
      (set! (-> obj bonelurker)
            (ppointer->handle (manipy-spawn (-> obj root-override trans) (-> obj entity) *bonelurker-sg* #f :to obj))
            )
      (send-event (handle->process (-> obj bonelurker)) 'anim-mode 'clone-anim)
      (send-event (handle->process (-> obj bonelurker)) 'center-joint 3)
      (set-setting! 'music-volume-movie 'abs 0.0 0)
      (set-setting! 'sfx-volume-movie 'abs 0.0 0)
      (set-setting! 'ambient-volume-movie 'abs 0.0 0)
      (dotimes (s5-1 9)
        (let ((s4-0 (-> *lurker-army* s5-1)))
          (cond
            ((= (-> s4-0 skel) 'bonelurker)
             (set! (-> obj lurker-army s5-1)
                   (ppointer->handle (manipy-spawn (-> s4-0 pos) (-> obj entity) *bonelurker-sg* #f :to obj))
                   )
             (let ((s3-1 (handle->process (-> obj lurker-army s5-1))))
               (when s3-1
                 (set! (-> (the-as babak s3-1) draw light-index) (the-as uint 1))
                 (set! (-> (the-as babak s3-1) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                 )
               )
             )
            (else
              (set! (-> obj lurker-army s5-1)
                    (ppointer->handle (manipy-spawn (-> s4-0 pos) (-> obj entity) *babak-sg* #f :to obj))
                    )
              (let ((s3-3 (handle->process (-> obj lurker-army s5-1))))
                (when s3-3
                  (set! (-> (the-as babak s3-3) draw light-index) (the-as uint 1))
                  (set! (-> (the-as babak s3-3) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                  )
                )
              (send-event (handle->process (-> obj lurker-army s5-1)) 'art-joint-anim "idle" 0)
              )
            )
          (send-event (handle->process (-> obj lurker-army s5-1)) 'rot (-> s4-0 rot))
          )
        )
      )
    ((!= (level-status *level* 'intro) 'active)
     (return (get-art-elem obj))
     )
    )
  (new 'static 'spool-anim
    :name "sidekick-human-intro-sequence-b"
    :index 5
    :parts 11
    :command-list '((0 blackout 0)
      (0 setting-reset ocean-off near)
      (0 want-levels misty intro)
      (0 display-level intro special)
      (0 kill "money-1404")
      (0 kill "money-1405")
      (0 kill "money-1406")
      (0 kill "money-1407")
      (0 kill "money-1551")
      (0 kill "money-1552")
      (0 kill "money-1553")
      (0 kill "balloonlurker-9")
      (0 kill "balloonlurker-10")
      (0 kill "balloonlurker-11")
      (0 kill "balloonlurker-12")
      (0 kill "balloonlurker-13")
      (0 kill "balloonlurker-14")
      (0 kill "keg-conveyor-8")
      (0 kill "mistycannon-8")
      (0 kill "muse-2")
      (0 kill "mud-1")
      (0 kill "mud-2")
      (0 kill "mud-3")
      (0 kill "mud-4")
      (0 kill "mud-5")
      (0 kill "mud-6")
      (0 kill "mud-7")
      (0 kill "mud-8")
      (0 kill "mud-9")
      (0 kill "mud-10")
      (0 kill "mud-11")
      (0 kill "dark-eco-pool-11")
      (0 kill "sharkey-32")
      (0 kill "sharkey-34")
      (0 kill "sharkey-39")
      (0 kill "sharkey-41")
      (0 kill "bonelurker-14")
      (0 kill "bonelurker-15")
      (0 kill "bonelurker-16")
      (0 kill "bonelurker-17")
      (0 kill "bonelurker-18")
      (0 kill "bonelurker-19")
      (0 kill "bonelurker-20")
      (0 kill "bonelurker-21")
      (0 kill "bonelurker-22")
      (0 kill "bonelurker-23")
      (0 kill "bonelurker-24")
      (0 kill "bonelurker-26")
      (0 kill "babak-with-cannon-5")
      (0 kill "babak-200")
      (0 kill "babak-201")
      (0 kill "babak-202")
      (0 kill "babak-203")
      (0 kill "babak-204")
      (0 kill "babak-205")
      (0 kill "babak-206")
      (0 kill "babak-207")
      (0 kill "babak-208")
      (0 kill "babak-209")
      (0 kill "babak-212")
      (0 kill "quicksandlurker-5")
      (0 kill "boatpaddle-4")
      (0 kill "silostep-7")
      (0 kill "silostep-8")
      (0 kill "silostep-9")
      (0 kill "silostep-10")
      (0 kill "orb-cache-top-15")
      (0 kill "windturbine-11")
      (0 kill "teetertotter-5")
      (0 kill "bone-platform-4")
      (0 kill "misty-battle-controller-1")
      (30 send-event self offset-army)
      (196 joint "cameraB")
      (196 shadow target #f)
      (196 shadow self #f)
      (380 send-event self evilbro)
      (385 send-event "evilbro" draw #t)
      (385 send-event "evilsis" draw #t)
      (397 joint "camera")
      (410 setting-reset ocean-off #t)
      (456 joint "cameraB")
      (546 joint "camera")
      (701 joint "cameraB")
      (701 setting-reset ocean-off near)
      (776 joint "camera")
      (776 setting-reset ocean-off #t)
      (937 joint "cameraB")
      (1027 joint "camera")
      (1122 joint "cameraB")
      (1221 joint "cameraB")
      (1221 setting-reset ocean-off near)
      (1280 alive "sequenceC-1")
      (1281 save)
      (1281 shadow target #t)
      (1281 setting-unset ocean-off)
      )
    )
  )

(defmethod get-art-elem sequenceB ((obj sequenceB))
  (-> obj draw art-group data 3)
  )

(defstate play-anim (sequenceB)
  :virtual #t
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (case arg2
      (('offset-army)
       (dotimes (gp-0 9)
         (let ((v1-3 (-> *lurker-army* gp-0)))
           (send-event (handle->process (-> self lurker-army gp-0)) 'set-frame-num (-> v1-3 start-frame))
           )
         )
       #f
       )
      (('evilbro)
       (when (= (level-status *level* 'intro) 'active)
         (let ((gp-2 (entity-by-name "evilbro-2")))
           (when gp-2
             (set! (-> self evilbro)
                   (ppointer->handle (manipy-spawn (-> self root-override trans) gp-2 *evilbro-sg* #f :to self))
                   )
             (let ((gp-3 (handle->process (-> self evilbro))))
               (when gp-3
                 (set! (-> (the-as evilbro gp-3) draw light-index) (the-as uint 1))
                 (set! (-> (the-as evilbro gp-3) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                 )
               )
             (send-event (handle->process (-> self evilbro)) 'anim-mode 'clone-anim)
             (send-event (handle->process (-> self evilbro)) 'blend-shape #t)
             (send-event (handle->process (-> self evilbro)) 'center-joint 3)
             (send-event (handle->process (-> self evilbro)) 'trans-hook evilsib-trans-hook-wait)
             (send-event (handle->process (-> self evilbro)) 'draw #f)
             (send-event
               (handle->process (-> self evilbro))
               'eval
               (lambda :behavior sequenceB () (let ((v0-0 (create-launch-control (-> *part-group-id-table* 558) self)))
                                                (set! (-> self part) v0-0)
                                                v0-0
                                                )
                                           )
               )
             )
           )
         (let ((gp-4 (entity-by-name "evilsis-2")))
           (when gp-4
             (set! (-> self evilsis)
                   (ppointer->handle (manipy-spawn (-> self root-override trans) gp-4 *evilsis-sg* #f :to self))
                   )
             (let ((gp-5 (handle->process (-> self evilsis))))
               (when gp-5
                 (set! (-> (the-as evilsis gp-5) draw light-index) (the-as uint 1))
                 (set! (-> (the-as evilsis gp-5) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                 )
               )
             (send-event (handle->process (-> self evilsis)) 'anim-mode 'clone-anim)
             (send-event (handle->process (-> self evilsis)) 'blend-shape #t)
             (send-event (handle->process (-> self evilsis)) 'center-joint 3)
             (send-event (handle->process (-> self evilsis)) 'trans-hook evilsib-trans-hook-wait)
             (send-event (handle->process (-> self evilsis)) 'draw #f)
             (send-event
               (handle->process (-> self evilsis))
               'eval
               (lambda :behavior sequenceB () (let ((v0-0 (create-launch-control (-> *part-group-id-table* 558) self)))
                                                (set! (-> self part) v0-0)
                                                v0-0
                                                )
                                           )
               )
             )
           )
         )
       )
      )
    )
  :exit (behavior ()
    (send-event *target* 'sidekick #t)
    (let ((a0-2 (handle->process (-> self bonelurker))))
      (if a0-2
          (deactivate a0-2)
          )
      )
    (let ((a0-6 (handle->process (-> self evilbro))))
      (if a0-6
          (deactivate a0-6)
          )
      )
    (let ((a0-10 (handle->process (-> self evilsis))))
      (if a0-10
          (deactivate a0-10)
          )
      )
    (dotimes (gp-0 9)
      (let ((a0-14 (handle->process (-> self lurker-army gp-0))))
        (if a0-14
            (deactivate a0-14)
            )
        )
      )
    ((-> (method-of-type process-taskable play-anim) exit))
    (#when PC_PORT
      ;; extra stuff when skipping cutscene
      (when (and (= (get-response (-> self query)) 'no) (or (not (= *cheat-mode* 'debug)) (not (cpad-hold? 0 r1))))
          (close-specific-task! (game-task intro) (task-status need-resolution))
          (start 'play (get-continue-by-name *game-info* "game-start"))
          (set-blackout-frames (seconds 0.1))
          (return #f)
          )
      )
    (let ((gp-1 (entity-by-name "sequenceC-1")))
      (set-blackout-frames (seconds 20))
      (send-event *camera* 'clear-entity)
      (entity-birth-no-kill gp-1)
      (send-event
        (if gp-1
            (-> gp-1 extra process)
            )
        'play-anim
        )
      )
    (none)
    )
  :trans (behavior ()
    (spool-push *art-control* "sidekick-human-intro-sequence-c" 0 self (the-as float -1.0))
    ((-> (method-of-type process-taskable play-anim) trans))
    (none)
    )
  )

(defmethod should-display? sequenceB ((obj sequenceB))
  #f
  )

(defmethod init-from-entity! sequenceB ((obj sequenceB) (arg0 entity-actor))
  (dummy-40 obj arg0 *sidekick-human-sg* 3 44 (new 'static 'vector :w 4096.0) -1)
  (set! (-> obj tasks) (get-task-control (game-task intro)))
  (set! (-> obj bonelurker) (the-as handle #f))
  (set! (-> obj evilbro) (the-as handle #f))
  (set! (-> obj evilsis) (the-as handle #f))
  (dotimes (v1-2 9)
    (set! (-> obj lurker-army v1-2) (the-as handle #f))
    )
  (dummy-42 obj)
  (none)
  )

(defbehavior sequenceC-can-trans-hook-2 sequenceC ()
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (vector<-cspace! gp-0 (-> self node-list data 4))
    (spawn (-> self part) gp-0)
    )
  (when (>= (ja-aframe-num 0) 1590.0)
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> *part-group-id-table* 561)
      -1
      #f
      #f
      #f
      (-> self draw origin)
      :to *entity-pool*
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

(defbehavior sequenceC-can-trans-hook sequenceC ()
  (when (>= (ja-aframe-num 0) 1055.0)
    (lods-assign! (-> self draw) (the-as lod-set (&-> (the-as process-taskable (-> self parent 0)) stack 288)))
    (send-event self 'trans-hook sequenceC-can-trans-hook-2)
    (set-vector! (-> self draw color-emissive) 0.5 0.0 0.0 0.0)
    )
  0
  (none)
  )

(defmethod play-anim! sequenceC ((obj sequenceC) (arg0 symbol))
  (when arg0
    (set-setting! 'music-volume-movie 'abs 0.0 0)
    (set-setting! 'sfx-volume-movie 'abs 0.0 0)
    (set-setting! 'ambient-volume-movie 'abs 0.0 0)
    (set! (-> obj bonelurker)
          (ppointer->handle (manipy-spawn (-> obj root-override trans) (-> obj entity) *bonelurker-sg* #f :to obj))
          )
    (send-event (handle->process (-> obj bonelurker)) 'anim-mode 'clone-anim)
    (send-event (handle->process (-> obj bonelurker)) 'center-joint 3)
    (set! (-> obj darkecocan)
          (ppointer->handle (manipy-spawn (-> obj root-override trans) (-> obj entity) *darkecocan-sg* #f :to obj))
          )
    (send-event (handle->process (-> obj darkecocan)) 'anim-mode 'clone-anim)
    (send-event (handle->process (-> obj darkecocan)) 'center-joint 3)
    (send-event (handle->process (-> obj darkecocan)) 'trans-hook sequenceC-can-trans-hook)
    (send-event
      (handle->process (-> obj darkecocan))
      'eval
      (lambda :behavior sequenceC
        ()
        ((method-of-type lod-set setup-lods!)
         (the-as lod-set (&-> (the-as process-taskable (-> self parent 0)) stack 288))
         *darkecocan-glow-sg*
         (-> self draw art-group)
         (-> (the-as process-taskable (-> self parent 0)) entity)
         )
        (let ((v0-1 (create-launch-control (-> *part-group-id-table* 560) self)))
          (set! (-> self part) v0-1)
          v0-1
          )
        )
      )
    )
  (the-as basic (new 'static 'spool-anim
                  :name "sidekick-human-intro-sequence-c"
                  :index 6
                  :parts 22
                  :command-list '((0 blackout 0)
                    (0 kill "fuel-cell-11")
                    (0 kill "fuel-cell-50")
                    (0 kill "money-1561")
                    (0 kill "money-1562")
                    (0 kill "money-1563")
                    (0 kill "money-1564")
                    (0 kill "money-1565")
                    (5 alive "dark-eco-pool-11")
                    (151 joint "cameraB")
                    (200 want-levels misty village1)
                    (236 joint "camera")
                    (301 joint "cameraB")
                    (421 joint "camera")
                    (460 shadow self #f)
                    (470 shadow self #t)
                    (496 joint "cameraB")
                    (611 joint "camera")
                    (721 joint "cameraB")
                    (1176 joint "camera")
                    (1271 joint "cameraB")
                    (1331 joint "camera")
                    (1386 joint "cameraB")
                    (1461 joint "camera")
                    (1524 joint "cameraB")
                    (1558 joint "camera")
                    (1602 joint "cameraB")
                    (1628 joint "camera")
                    (1676 joint "cameraB")
                    (1728 joint "camera")
                    (1791 joint "cameraB")
                    (1831 joint "camera")
                    (1942 joint "cameraB")
                    (2000 display-level village1 special)
                    (2028 joint "camera")
                    (2096 joint "cameraB")
                    (2154 joint "camera")
                    (2226 joint "cameraB")
                    (2266 joint "camera")
                    (2307 joint "cameraB")
                    (2431 joint "camera")
                    (2476 joint "cameraB")
                    (2530 display-level misty movie)
                    (2530 want-force-vis misty #t)
                    (2530 dead "dark-eco-pool-11")
                    (2534 display-level village1 display)
                    (2535 want-vis vi1)
                    (2536 joint "camera")
                    (2580 alive "sage-23")
                    (2596 save)
                    )
                  )
          )
  )

(defmethod get-art-elem sequenceC ((obj sequenceC))
  (-> obj draw art-group data 3)
  )

(defstate play-anim (sequenceC)
  :virtual #t
  :exit (behavior ()
    (let ((a0-1 (handle->process (-> self bonelurker))))
      (if a0-1
          (deactivate a0-1)
          )
      )
    (let ((a0-5 (handle->process (-> self darkecocan))))
      (if a0-5
          (deactivate a0-5)
          )
      )
    ((-> (method-of-type process-taskable play-anim) exit))
    (#when PC_PORT
      ;; extra stuff when skipping cutscene
      (when (and (= (get-response (-> self query)) 'no) (or (not (= *cheat-mode* 'debug)) (not (cpad-hold? 0 r1))))
          (close-specific-task! (game-task intro) (task-status need-resolution))
          (start 'play (get-continue-by-name *game-info* "game-start"))
          (set-blackout-frames (seconds 0.1))
          (return #f)
          )
      )
    (start 'play (get-continue-by-name *game-info* "village1-intro"))
    (none)
    )
  :trans (behavior ()
    (spool-push *art-control* "sage-intro-sequence-d1" 0 self (the-as float -1.0))
    ((-> (method-of-type process-taskable play-anim) trans))
    (none)
    )
  )

(defmethod should-display? sequenceC ((obj sequenceC))
  #f
  )

(defbehavior sequenceC-trans-hook sequenceC ()
  (when (>= (ja-aframe-num 0) 1655.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (vector<-cspace! gp-0 (-> self node-list data 3))
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 562)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (set! (-> self cur-trans-hook) nothing)
    )
  0
  (none)
  )

(defmethod init-from-entity! sequenceC ((obj sequenceC) (arg0 entity-actor))
  (dummy-40 obj arg0 *sidekick-human-sg* 3 44 (new 'static 'vector :w 4096.0) -1)
  (set! (-> obj tasks) (get-task-control (game-task intro)))
  (set! (-> obj bonelurker) (the-as handle #f))
  (set! (-> obj darkecocan) (the-as handle #f))
  (set! (-> obj cur-trans-hook) sequenceC-trans-hook)
  (dummy-42 obj)
  (none)
  )




