;;-*-Lisp-*-
(in-package goal)

;; name: racer-part.gc
;; name in dgo: racer-part
;; dgos: L1, FIC, LAV, MIS, OGR, RACERP, ROL
;; note: changed for high fps

;; DECOMP BEGINS

(defun part-hud-racer-speed-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (let* ((f0-0 (-> *target* control unknown-float01))
         (f0-1 (cond
                 ((>= 122880.0 f0-0)
                  (lerp-scale 42780.445 27488.71 f0-0 0.0 122880.0)
                  )
                 ((>= 131072.0 f0-0)
                  (lerp-scale 27488.71 14927.645 f0-0 122880.0 131072.0)
                  )
                 ((>= 139264.0 f0-0)
                  (lerp-scale 14927.645 7281.778 f0-0 131072.0 139264.0)
                  )
                 ((>= 147456.0 f0-0)
                  (lerp-scale 7281.778 -546.13336 f0-0 139264.0 147456.0)
                  )
                 ((>= 155648.0 f0-0)
                  (lerp-scale -546.13336 -6371.5557 f0-0 147456.0 155648.0)
                  )
                 ((>= 163840.0 f0-0)
                  (lerp-scale -6371.5557 -10922.667 f0-0 155648.0 163840.0)
                  )
                 (else
                   (lerp-scale -10922.667 -15473.777 f0-0 163840.0 172032.0)
                   )
                 )
               )
         )
    (cond
      ((< (-> *hud-parts* bike-speed 0 offset) 10)
       (if (< f0-1 (-> arg2 vector 1 z))
           (set! (-> arg2 vector 1 z) (deg-seek (-> arg2 vector 1 z) f0-1 (* 131072.0 (-> *display* seconds-per-frame))))
           (set! (-> arg2 vector 1 z) (deg-seek (-> arg2 vector 1 z) f0-1 (* 32768.0 (-> *display* seconds-per-frame))))
           )
       )
      (else
        (set! (-> arg2 vector 1 z) f0-1)
        )
      )
    )
  (none)
  )

(defpartgroup group-part-hud-racer-speed-dial
  :id 108
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 740 :flags (launch-asap)))
  )

(defpartgroup group-part-hud-racer-speed
  :id 109
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 741 :flags (launch-asap)))
  )

(defpartgroup group-part-hud-racer-speed-front
  :id 110
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 1999 :flags (launch-asap)))
  )

(defpart 741
  :init-specs ((:texture (new 'static 'texture-id :index #x3 :page #x45f))
    (:num 1.0)
    (:scale-x (meters 3))
    (:rot-x 4)
    (:scale-y (meters 3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    )
  )

(defpart 740
  :init-specs ((:texture (new 'static 'texture-id :index #x6 :page #x45f))
    (:num 1.0)
    (:scale-x (meters 1))
    (:rot-x 4)
    (:rot-z (degrees 235))
    (:scale-y (meters 0.3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    (:func 'part-hud-racer-speed-func)
    )
  )

(defpart 1999
  :init-specs ((:texture (new 'static 'texture-id :index #x7 :page #x45f))
    (:num 1.0)
    (:scale-x (meters 0.8))
    (:rot-x 4)
    (:scale-y (meters 0.8))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    )
  )

(defun part-hud-racer-heat-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (let ((f0-1 (/ (-> *target* racer heat) (-> *RACER-bank* heat-max))))
    (set! (-> arg2 vector 1 z) (* 182.04445 (+ -45.0 (* 215.0 f0-1))))
    (cond
      ((and (< 0.8 f0-1) (not (logtest? (the int (* DISPLAY_FPS_RATIO (-> *display* integral-frame-counter))) 8))) ;; changed for high fps
       (set! (-> arg2 vector 2 x) 128.0)
       (set! (-> arg2 vector 2 y) 0.0)
       (set! (-> arg2 vector 2 z) 0.0)
       )
      (else
        (set! (-> arg2 vector 2 x) 128.0)
        (set! (-> arg2 vector 2 y) 128.0)
        (set! (-> arg2 vector 2 z) 128.0)
        )
      )
    )
  (none)
  )

(defun zoomer-heat-slice-color ((arg0 matrix) (arg1 float))
  (cond
    ((< arg1 0.6)
     (set! (-> arg0 vector 2 x) (* 213.33333 arg1))
     (set! (-> arg0 vector 2 y) 128.0)
     (set! (-> arg0 vector 2 z) 0.0)
     )
    ((< arg1 0.8)
     (set! (-> arg0 vector 2 x) 128.0)
     (set! (-> arg0 vector 2 y) (- 128.0 (* 640.0 (+ -0.6 arg1))))
     (set! (-> arg0 vector 2 z) 0.0)
     )
    ((not (logtest? (the int (* DISPLAY_FPS_RATIO (-> *display* integral-frame-counter))) 8)) ;; changed for high fps
     (set! (-> arg0 vector 2 x) 128.0)
     (set! (-> arg0 vector 2 y) 0.0)
     (set! (-> arg0 vector 2 z) 0.0)
     )
    (else
      (set! (-> arg0 vector 2 x) 128.0)
      (set! (-> arg0 vector 2 y) 100.0)
      (set! (-> arg0 vector 2 z) 100.0)
      )
    )
  (none)
  )

(defun part-hud-zoomer-heat-slice-01-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (let ((f0-1 (/ (-> *target* racer heat) (-> *RACER-bank* heat-max))))
    (set! (-> arg2 vector 1 z) (* 182.04445 (+ -135.0 (* 215.0 f0-1))))
    (zoomer-heat-slice-color arg2 f0-1)
    )
  (none)
  )

(defun part-hud-zoomer-heat-slice-02-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (let ((f0-1 (/ (-> *target* racer heat) (-> *RACER-bank* heat-max))))
    (set! (-> arg2 vector 1 z) (* 182.04445 (+ -225.0 (* 215.0 f0-1))))
    (if (< (-> arg2 vector 1 z) -24576.0)
        (set! (-> arg2 vector 1 z) -24576.0)
        )
    (zoomer-heat-slice-color arg2 f0-1)
    )
  (none)
  )

(defun part-hud-zoomer-heat-slice-03-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (let ((f0-1 (/ (-> *target* racer heat) (-> *RACER-bank* heat-max))))
    (set! (-> arg2 vector 1 z) (* 182.04445 (+ -315.0 (* 215.0 f0-1))))
    (if (< (-> arg2 vector 1 z) -24576.0)
        (set! (-> arg2 vector 1 z) -24576.0)
        )
    (zoomer-heat-slice-color arg2 f0-1)
    )
  (none)
  )

(defpartgroup group-part-hud-racer-heat-backing
  :id 111
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 737 :flags (launch-asap)))
  )

(defpartgroup group-part-hud-racer-heat-dial
  :id 112
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 738 :flags (launch-asap)))
  )

(defpartgroup group-part-hud-racer-heat
  :id 113
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 739 :flags (launch-asap)))
  )

(defpartgroup group-part-hud-racer-heat-slice
  :id 114
  :flags (use-local-clock screen-space)
  :bounds (static-bspherem 0 0 0 100)
  :parts ((sp-item 2010 :flags (launch-asap)) (sp-item 2011 :flags (launch-asap)) (sp-item 2012 :flags (launch-asap)))
  )

(defpart 739
  :init-specs ((:texture (new 'static 'texture-id :index #x2 :page #x45f))
    (:num 1.0)
    (:scale-x (meters 3))
    (:rot-x 4)
    (:scale-y (meters 3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    )
  )

(defpart 737
  :init-specs ((:texture (new 'static 'texture-id :index #x5 :page #x45f))
    (:num 1.0)
    (:scale-x (meters 3.5))
    (:rot-x 4)
    (:scale-y (meters 3.5))
    (:r 128.0)
    (:g 100.0)
    (:b 63.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    )
  )

(defpart 738
  :init-specs ((:texture (new 'static 'texture-id :page #x45f))
    (:num 1.0)
    (:scale-x (meters 0.9))
    (:rot-x 4)
    (:scale-y (meters 0.52))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    (:func 'part-hud-racer-heat-func)
    )
  )

(defpart 2010
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #x2))
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    (:func 'part-hud-zoomer-heat-slice-01-func)
    )
  )

(defpart 2011
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #x2))
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    (:func 'part-hud-zoomer-heat-slice-02-func)
    )
  )

(defpart 2012
  :init-specs ((:texture (new 'static 'texture-id :index #x32 :page #x2))
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds -0.005))
    (:flags (bit2 bit9))
    (:func 'part-hud-zoomer-heat-slice-03-func)
    )
  )

(deftype hud-bike-heat (hud)
  ()
  :heap-base #xb0
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00b00118
  )


(defmethod hud-update hud-bike-heat ((obj hud-bike-heat))
  (if *target*
      (tally-value obj (the int (-> *target* racer heat)) 0)
      )
  0
  (none)
  )

(defmethod init-particles! hud-bike-heat ((obj hud-bike-heat) (arg0 int))
  (add-setting! 'common-page 'set 0.0 2)
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-0 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-0) (new 'static 'hud-particle))
      (set! (-> obj particles s5-0 part) (create-launch-control (-> *part-group-id-table* 111) obj))
      (set! (-> obj particles s5-0 init-pos x) 13.0)
      (set! (-> obj particles s5-0 init-pos y) 370.0)
      (set! (-> obj particles s5-0 init-pos z) 10.0)
      (set! (-> obj particles s5-0 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-1 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-1) (new 'static 'hud-particle))
      (set! (-> obj particles s5-1 part) (create-launch-control (-> *part-group-id-table* 112) obj))
      (set! (-> obj particles s5-1 init-pos x) 70.0)
      (set! (-> obj particles s5-1 init-pos y) 370.0)
      (set! (-> obj particles s5-1 init-pos z) 6.0)
      (set! (-> obj particles s5-1 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-2 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-2) (new 'static 'hud-particle))
      (set! (-> obj particles s5-2 part) (create-launch-control (-> *part-group-id-table* 113) obj))
      (set! (-> obj particles s5-2 init-pos x) 20.0)
      (set! (-> obj particles s5-2 init-pos y) 370.0)
      (set! (-> obj particles s5-2 init-pos z) 1.0)
      (set! (-> obj particles s5-2 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-3 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-3) (new 'static 'hud-particle))
      (set! (-> obj particles s5-3 part) (create-launch-control (-> *part-group-id-table* 114) obj))
      (set! (-> obj particles s5-3 init-pos x) 70.0)
      (set! (-> obj particles s5-3 init-pos y) 370.0)
      (set! (-> obj particles s5-3 init-pos z) 7.0)
      (set! (-> obj particles s5-3 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (dotimes (s5-4 (-> obj nb-of-particles))
    (if (= (-> obj particles s5-4 part matrix) -1)
        (set! (-> obj particles s5-4 part matrix) (sprite-allocate-user-hvdf))
        )
    )
  (set! (-> obj x-sgn) -1)
  (set! (-> obj y-sgn) 1)
  (set! (-> obj force-on-screen) #t)
  0
  (none)
  )

(deftype hud-bike-speed (hud)
  ()
  :heap-base #xb0
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00b00118
  )


(defmethod hud-update hud-bike-speed ((obj hud-bike-speed))
  (if *target*
      (tally-value obj (the int (-> *target* control unknown-float01)) 0)
      )
  0
  (none)
  )

(defmethod init-particles! hud-bike-speed ((obj hud-bike-speed) (arg0 int))
  (add-setting! 'common-page 'set 0.0 2)
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-0 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-0) (new 'static 'hud-particle))
      (set! (-> obj particles s5-0 part) (create-launch-control (-> *part-group-id-table* 108) obj))
      (set! (-> obj particles s5-0 init-pos x) 433.0)
      (set! (-> obj particles s5-0 init-pos y) 370.0)
      (set! (-> obj particles s5-0 init-pos z) 3.0)
      (set! (-> obj particles s5-0 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-1 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-1) (new 'static 'hud-particle))
      (set! (-> obj particles s5-1 part) (create-launch-control (-> *part-group-id-table* 109) obj))
      (set! (-> obj particles s5-1 init-pos x) 378.0)
      (set! (-> obj particles s5-1 init-pos y) 370.0)
      (set! (-> obj particles s5-1 init-pos z) 5.0)
      (set! (-> obj particles s5-1 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (when (< (-> obj nb-of-particles) (-> obj max-nb-of-particles))
    (let ((s5-2 (-> obj nb-of-particles)))
      (set! (-> obj particles s5-2) (new 'static 'hud-particle))
      (set! (-> obj particles s5-2 part) (create-launch-control (-> *part-group-id-table* 110) obj))
      (set! (-> obj particles s5-2 init-pos x) 415.0)
      (set! (-> obj particles s5-2 init-pos y) 370.0)
      (set! (-> obj particles s5-2 init-pos z) 1.0)
      (set! (-> obj particles s5-2 part matrix) -1)
      )
    (+! (-> obj nb-of-particles) 1)
    )
  (dotimes (s5-3 (-> obj nb-of-particles))
    (if (= (-> obj particles s5-3 part matrix) -1)
        (set! (-> obj particles s5-3 part matrix) (sprite-allocate-user-hvdf))
        )
    )
  (set! (-> obj x-sgn) 1)
  (set! (-> obj y-sgn) 1)
  (set! (-> obj force-on-screen) #t)
  0
  (none)
  )

(#when PC_PORT
;; extra methods needed for aspect ratio in pc port
(defmethod set-pos-and-scale hud-bike-heat ((obj hud-bike-heat) (arg0 symbol) (arg1 symbol))
  (with-pc
    (let ((base-x (-> obj particles 0 init-pos x)))
        (*! base-x (-> *pc-settings* aspect-ratio-reciprocal))
        (set! (-> obj particles 0 init-pos x) 13.0)
        (set! (-> obj particles 1 init-pos x) 70.0)
        (set! (-> obj particles 2 init-pos x) 20.0)
        (set! (-> obj particles 3 init-pos x) 70.0)

    (when (not (-> *pc-settings* use-vis?))
      (dotimes (i (-> obj nb-of-particles))
        (set! (-> obj particles i init-pos x) (+ base-x (* (-> *pc-settings* aspect-ratio-reciprocal) (- (-> obj particles i init-pos x) base-x))))

        ))

        )
    )
  (none)
  )

(defmethod set-pos-and-scale hud-bike-speed ((obj hud-bike-speed) (arg0 symbol) (arg1 symbol))
  (with-pc
    (let ((base-x (-> obj particles 1 init-pos x)))
        (+! base-x (* (- 512.0 base-x) (- 1.0 (-> *pc-settings* aspect-ratio-reciprocal))))
        (set! (-> obj particles 0 init-pos x) 433.0)
        (set! (-> obj particles 1 init-pos x) 378.0)
        (set! (-> obj particles 2 init-pos x) 415.0)

    (when (not (-> *pc-settings* use-vis?))
      (dotimes (i (-> obj nb-of-particles))
        (set! (-> obj particles i init-pos x) (+ base-x (* (-> *pc-settings* aspect-ratio-reciprocal) (- (-> obj particles i init-pos x) base-x))))

        ))

        )
    )
  (none)
  )
  )

(defpartgroup group-racer-trans-pad
  :id 115
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 742 :fade-after (meters 160))
    (sp-item 743 :fade-after (meters 160))
    (sp-item 744 :fade-after (meters 60) :falloff-to (meters 60) :flags (is-3d))
    )
  )

(defpart 742
  :init-specs ((:texture (new 'static 'texture-id :index #x29 :page #x2))
    (:num 0.5)
    (:y (meters 7))
    (:scale-x (meters 14) (meters 1))
    (:scale-y (meters 14))
    (:r 40.0)
    (:g 60.0 60.0)
    (:b 128.0)
    (:a 32.0 32.0)
    (:timer (seconds 0.035))
    (:flags (bit2 bit3))
    )
  )

(defpart 743
  :init-specs ((:texture (new 'static 'texture-id :index #x29 :page #x2))
    (:num 0.5)
    (:y (meters 4))
    (:scale-x (meters 7) (meters 1))
    (:scale-y (meters 14))
    (:r 40.0)
    (:g 60.0 60.0)
    (:b 128.0)
    (:a 64.0 64.0)
    (:fade-a -8.533334)
    (:timer (seconds 0.035))
    (:flags (bit2 bit3))
    )
  )

(defpart 744
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 1.0)
    (:y (meters 0.75) (meters 0.1))
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 15))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 16.0)
    (:g 0.0 127.0)
    (:b 127.0)
    (:a 127.0)
    (:vel-y (meters 0))
    (:scalevel-x (meters 0.02))
    (:rotvel-y (degrees -0.6) (degrees 1.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:accel-y (meters -0.00015))
    (:timer (seconds 1))
    (:flags (bit2 bit3))
    )
  )

(defpart 2211
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 8.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.02) (meters 0.01))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters -0.00033333333))
    (:friction 0.95)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2207
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 32.0)
    (:g 96.0 32.0)
    (:b 0.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2221
  :init-specs ((:texture (new 'static 'texture-id :index #x17 :page #x2))
    (:num 0.5 1.0)
    (:scale-x (meters 0.15) (meters 0.35))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.15))
    (:r 0.0 2.0 64.0)
    (:g 64.0 3.0 64.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.02) (meters 0.053333335))
    (:rotvel-z (degrees -2.4) (degrees 4.8))
    (:fade-a -0.53333336)
    (:accel-y (meters -0.0013333333))
    (:friction 0.95)
    (:timer (seconds 0.9))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 40) (degrees 40))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 1))
    )
  )

(defpart 2208
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 16.0 16.0)
    (:g 128.0 64.0)
    (:b 192.0 64.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2218
  :init-specs ((:texture (new 'static 'texture-id :index #x9 :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 16.0 16.0)
    (:g 128.0 64.0)
    (:b 192.0 64.0)
    (:a 32.0 64.0)
    (:vel-y (meters 0.02) (meters 0.053333335))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -0.64)
    (:accel-y (meters -0.0013333333))
    (:friction 0.95)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 1))
    )
  )

(defpart 2215
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 70.0 32.0)
    (:b 40.0 20.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2216
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 96.0 32.0)
    (:g 64.0 64.0)
    (:b 96.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2831
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 96.0 32.0)
    (:g 64.0 32.0)
    (:b 96.0 40.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2214
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 192.0 32.0)
    (:g 64.0 64.0)
    (:b 0.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2220
  :init-specs ((:texture (new 'static 'texture-id :index #x1 :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 0.05) (meters 0.025))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0 2 128.0)
    (:b 0.0)
    (:a 128.0)
    (:vel-y (meters 0.02) (meters 0.053333335))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:fade-a -1.0666667)
    (:accel-y (meters -0.0013333333))
    (:friction 0.95)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 1))
    )
  )

(defpart 2213
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 192.0 32.0)
    (:g 128.0 64.0)
    (:b 0.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters 0.04) (meters 0.053333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.00033333333))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit3 bit12 bit14))
    (:conerot-x (degrees 60) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 2275
  :init-specs ((:texture (new 'static 'texture-id :index #xa :page #x2))
    (:num 0.06)
    (:x (meters 10))
    (:scale-x (meters 1.5) (meters 3))
    (:rot-y (degrees 0))
    (:scale-y (meters 1.5) (meters 3))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-x (meters 0.01) (meters 0.006666667))
    (:scalevel-x (meters 0.006666667) (meters 0.008666666))
    (:scalevel-y (meters 0.006666667) (meters 0.008666666))
    (:fade-a 0.7111111)
    (:friction 0.94)
    (:timer (seconds 2))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.3))
    (:next-launcher 119)
    (:rotate-y (degrees 0))
    )
  )

(defpart 2276
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 0.04 0.03)
    (:x (meters -0.2) (meters 0.4))
    (:z (meters -0.2) (meters 0.4))
    (:scale-x (meters 1) (meters 0.5))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:scalevel-x (meters 0.008333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.64)
    (:timer (seconds 2))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.5))
    (:next-launcher 116)
    )
  )

(defpart 2212
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:birth-func 'birth-func-vector-orient)
    (:num 1.0)
    (:scale-x (meters 4) (meters -0.5))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 64.0 -16.0)
    (:g 64.0 -16.0)
    (:b 64.0 -16.0)
    (:a 64.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3 bit14))
    (:userdata 0.0)
    )
  )

(defpart 2225
  :init-specs ((:texture (new 'static 'texture-id :index #x1 :page #x2))
    (:num 4.0 16.0)
    (:x (meters 0.9))
    (:y (meters 0.05))
    (:z (meters -0.9))
    (:scale-x (meters 0.05) (meters 0.05))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 2.0 128.0)
    (:g 128.0 2.0 64.0)
    (:b 0.0 2.0 64.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.013333334) (meters 0.08))
    (:scalevel-x (meters -0.00055555557))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.35555556)
    (:fade-a -0.6)
    (:accel-y (meters -0.001))
    (:friction 0.9)
    (:timer (seconds 0.3) (seconds 0.197))
    (:flags (bit0 bit2 bit14))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 0.5))
    )
  )

(defpart 2226
  :init-specs ((:texture (new 'static 'texture-id :index #x1 :page #x2))
    (:num 4.0 16.0)
    (:x (meters 0.9))
    (:y (meters 0.05))
    (:z (meters -0.9))
    (:scale-x (meters 0.05) (meters 0.05))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 2.0 128.0)
    (:g 0.0 2.0 64.0)
    (:b 0.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.013333334) (meters 0.08))
    (:scalevel-x (meters -0.00055555557))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.35555556)
    (:fade-a -0.6)
    (:accel-y (meters -0.001))
    (:friction 0.9)
    (:timer (seconds 0.3) (seconds 0.197))
    (:flags (bit0 bit2 bit14))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 0.5))
    )
  )

(defpart 2227
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.0)
    (:scale-x (meters 1.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 192.0 32.0)
    (:g 64.0 32.0)
    (:b 0.0)
    (:a 0.0)
    (:scalevel-x (meters 0.0033333334) (meters 0.0033333334))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 4.266667)
    (:accel-y (meters 0.00033333333) (meters 0.00033333333))
    (:friction 0.85)
    (:timer (seconds 1.5))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.05) (seconds 0.015))
    (:next-launcher 2277)
    )
  )

(defpart 2277
  :init-specs ((:fade-r -5.0) (:fade-g -1.6) (:fade-b 1.6) (:fade-a 0.0) (:next-time (seconds 0.067)) (:next-launcher 2278))
  )

(defpart 2278
  :init-specs ((:fade-r -0.2) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.21333334))
  )

(defpartgroup group-racer-explode
  :id 116
  :duration (seconds 1)
  :linger-duration (seconds 10)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2279 :period (seconds 2) :length (seconds 0.017))
    (sp-item 2280 :period (seconds 2) :length (seconds 0.135))
    (sp-item 2281 :period (seconds 2) :length (seconds 0.067))
    (sp-item 2282 :period (seconds 2) :length (seconds 0.067))
    )
  )

(defpart 2280
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 8.0)
    (:y (meters 0) (meters 1))
    (:scale-x (meters 0.4) (meters 0.8))
    (:scale-y :copy scale-x)
    (:r 192.0 64.0)
    (:g 192.0 64.0)
    (:b 128.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.04) (meters 0.16))
    (:scalevel-x (meters -0.0026666666))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -2.1333334)
    (:fade-b -1.4222223)
    (:accel-y (meters -0.00016666666) (meters -0.00016666666))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.1) (seconds 0.297))
    (:next-launcher 2283)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2) (meters 4))
    )
  )

(defpart 2283
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -1.0666667))
  )

(defpart 2282
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 6.0)
    (:y (meters 0) (meters 1))
    (:scale-x (meters 0.3))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 12))
    (:r 255.0)
    (:g 196.0)
    (:b 64.0)
    (:a 32.0 64.0)
    (:scalevel-y (meters 0.85333335))
    (:fade-g -3.2666667)
    (:fade-b -1.0666667)
    (:fade-a -1.6)
    (:timer (seconds 0.2))
    (:flags (bit2 bit3 bit14))
    )
  )

(defpart 2279
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:y (meters 2))
    (:scale-x (meters 24))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 192.0 32.0)
    (:b 128.0)
    (:a 128.0)
    (:fade-a -2.3272727)
    (:timer (seconds 0.18))
    (:flags (bit2 bit3 bit14))
    )
  )

(defpart 2281
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 16.0)
    (:y (meters 0) (meters 1))
    (:scale-x (meters 3) (meters 1.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0 64.0)
    (:b 128.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.08) (meters 0.04))
    (:scalevel-x (meters 0.02))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.28444445)
    (:accel-y (meters 0.00016666666) (meters 0.00016666666))
    (:friction 0.8)
    (:timer (seconds 1.7))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.14))
    (:next-launcher 2284)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 3))
    )
  )

(defpart 2284
  :init-specs ((:fade-r -1.0666667)
    (:fade-g -1.0666667)
    (:fade-b -2.1166666)
    (:next-time (seconds 0.2))
    (:next-launcher 2285)
    )
  )

(defpart 2285
  :init-specs ((:fade-r -0.5688889)
    (:fade-g -0.28444445)
    (:fade-b 0.0)
    (:fade-a -0.21333334)
    (:next-time (seconds 0.75))
    (:next-launcher 2286)
    )
  )

(defpart 2286
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0))
  )

(defpart 2229
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:scale-x (meters 0.1) (meters 0.15))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 32.0 64.0)
    (:b 192.0 64.0)
    (:a 64.0 64.0)
    (:scalevel-x (meters -0.00033333333))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.4)
    (:accel-y (meters -0.000016666667))
    (:timer (seconds 1.5))
    (:flags (bit0 bit2 bit3 bit14))
    )
  )
