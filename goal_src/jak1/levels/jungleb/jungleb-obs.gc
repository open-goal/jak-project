;;-*-Lisp-*-
(in-package goal)

;; name: jungleb-obs.gc
;; name in dgo: jungleb-obs
;; dgos: JUB, L1


;; DECOMP BEGINS

(import "goal_src/jak1/import/eggtop-ag.gc")
(import "goal_src/jak1/import/jng-iris-door-ag.gc")

(deftype eggtop (process-drawable)
  ((root-override collide-shape-moving  :offset        112)
   (cam-tracker   handle                :offset-assert 176)
   (sound-id      sound-id              :offset-assert 184)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xbc
  :flag-assert         #x14005000bc
  (:states
    (eggtop-close symbol)
    eggtop-idle
    )
  )


(defskelgroup *eggtop-sg* eggtop eggtop-lod0-jg eggtop-idle-ja
              ((eggtop-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -4.5 0 4.5)
              )

(defpartgroup group-jungle-blue-eco-room-open
  :id 189
  :bounds (static-bspherem 0 -6 0 8)
  :parts ((sp-item 899 :fade-after (meters 110))
    (sp-item 900 :fade-after (meters 110))
    (sp-item 901 :fade-after (meters 110))
    (sp-item 902 :fade-after (meters 110))
    (sp-item 903 :fade-after (meters 110))
    )
  )

(defpartgroup group-jungle-blue-eco-room-activate
  :id 190
  :duration (seconds 3)
  :bounds (static-bspherem 0 -6 0 8)
  :parts ((sp-item 903) (sp-item 903) (sp-item 904 :flags (bit1) :period (seconds 4) :length (seconds 0.05)))
  )

(defpart 904
  :init-specs ((:texture (new 'static 'texture-id :index #x2 :page #x2))
    (:num 30.0)
    (:y (meters -4))
    (:scale-x (meters 20) (meters 10))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 5) (meters 2))
    (:r 0.0 16.0)
    (:g 16.0 32.0)
    (:b 127.0)
    (:a 0.0)
    (:rotvel-z (degrees -0.05) (degrees 0.1))
    (:fade-a 0.85333335)
    (:timer (seconds 2))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.25))
    (:next-launcher 905)
    )
  )

(defpart 905
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.75)) (:next-launcher 906))
  )

(defpart 906
  :init-specs ((:fade-a -0.14222223))
  )

(defpart 899
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:y (meters -4))
    (:scale-x (meters 10) (meters 2))
    (:scale-y (meters 8) (meters 2))
    (:r 0.0 64.0)
    (:g 0.0 64.0)
    (:b 255.0)
    (:a 128.0 128.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3))
    )
  )

(defpart 900
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:y (meters -4))
    (:scale-x (meters 3) (meters 2))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 128.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3))
    )
  )

(defpart 901
  :init-specs ((:texture (new 'static 'texture-id :index #x1f :page #x2))
    (:num 0.5 1.0)
    (:y (meters -4))
    (:scale-x (meters 3) (meters 3))
    (:rot-x 4)
    (:rot-z (degrees -30) (degrees 60))
    (:scale-y (meters 0.7) (meters 0.4))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 128.0)
    (:fade-a -1.6)
    (:timer (seconds 0.3))
    (:flags (bit2 bit3))
    (:next-time (seconds 0.035))
    (:next-launcher 907)
    )
  )

(defpart 907
  :init-specs ((:r 64.0) (:g 64.0) (:fade-r -1.0) (:fade-g -1.0) (:fade-a -2.0))
  )

(defpart 902
  :init-specs ((:texture (new 'static 'texture-id :index #x1f :page #x2))
    (:num 0.5 1.0)
    (:y (meters -4))
    (:scale-x (meters 3) (meters 3))
    (:rot-x 4)
    (:rot-z (degrees 150) (degrees 60))
    (:scale-y (meters 0.7) (meters 0.4))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 128.0)
    (:fade-a -1.6)
    (:timer (seconds 0.3))
    (:flags (bit2 bit3))
    (:next-time (seconds 0.035))
    (:next-launcher 907)
    )
  )

(defpart 903
  :init-specs ((:texture (new 'static 'texture-id :index #x1f :page #x2))
    (:num 1.0 1.0)
    (:y (meters -6.5) (meters 1))
    (:scale-x (meters 6) (meters 2))
    (:rot-x 4)
    (:rot-z (degrees -140) (degrees 100.00001))
    (:scale-y (meters 0.7) (meters 0.4))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 128.0)
    (:fade-a -1.6)
    (:timer (seconds 0.3))
    (:flags (bit2 bit3))
    (:next-time (seconds 0.035))
    (:next-launcher 907)
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 80) (degrees 200.00002))
    (:conerot-radius (meters 4))
    )
  )

(defstate eggtop-idle (eggtop)
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object (case event-type
                     (('notify)
                      (case (-> event param 0)
                        (('pickup)
                         (if (type-type? (-> proc type) fuel-cell)
                             (save-reminder (get-task-control (-> self entity extra perm task)) 1 0)
                             )
                         )
                        )
                      )
                     )
            )
    )
  :exit (behavior ()
    (sound-stop (-> self sound-id))
    (none)
    )
  :trans (behavior ()
    (if (and (not (-> self child)) (task-complete? *game-info* (-> self entity extra perm task)))
        (go eggtop-close #f)
        )
    (spawn (-> self part) (-> self root-override trans))
    (sound-play "electric-loop" :id (-> self sound-id))
    (none)
    )
  :code (behavior ()
    (suspend)
    (update-transforms! (-> self root-override))
    (anim-loop)
    (none)
    )
  :post (the-as (function none :behavior eggtop) ja-post)
  )

(defstate eggtop-close (eggtop)
  :trans (behavior ()
    (rider-trans)
    (hide-hud-quick)
    (none)
    )
  :code (behavior ((arg0 symbol))
    (when (not arg0)
      (sound-play "vent-switch" :vol 200)
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 190)
        -1
        #f
        #f
        #f
        (-> self root-override trans)
        :to *entity-pool*
        )
      (set! (-> self cam-tracker)
            (ppointer->handle (process-spawn
                                camera-tracker
                                :init camera-tracker-init
                                (lambda :behavior camera-tracker
                                  ()
                                  (while (not (process-grab? *target*))
                                    (suspend)
                                    )
                                  (let ((gp-0 (-> *display* base-frame-counter)))
                                    (until (>= (- (-> *display* base-frame-counter) gp-0) (seconds 1))
                                      (suspend)
                                      )
                                    )
                                  (send-event *camera* 'blend-from-as-fixed)
                                  (camera-look-at (the-as pair "ecovent-171") (the-as uint 0))
                                  (camera-change-to "camera-223" 0 #f)
                                  (let ((gp-1 (-> *display* base-frame-counter)))
                                    (until (>= (- (-> *display* base-frame-counter) gp-1) (seconds 3))
                                      (suspend)
                                      )
                                    )
                                  (while (not (process-release? (handle->process (-> self grab-target))))
                                    (suspend)
                                    )
                                  (send-event *camera* 'blend-from-as-fixed)
                                  (level-hint-spawn
                                    (text-id jungle-eggtop-resolution)
                                    "asstvb02"
                                    (the-as entity #f)
                                    *entity-pool*
                                    (game-task none)
                                    )
                                  (camera-look-at (the-as pair *target*) (the-as uint 0))
                                  (camera-change-to (the-as string 'base) 150 #f)
                                  (send-event (ppointer->process (-> *hud-parts* fuel-cell)) 'show)
                                  (none)
                                  )
                                :to self
                                )
                              )
            )
      (save-reminder (get-task-control (-> self entity extra perm task)) 2 0)
      (sound-play "jngb-eggtop-seq")
      (ja-no-eval :group! (-> self draw art-group data 2) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    (process-entity-status! self (entity-perm-status complete) #t)
    (let ((a0-20 (-> self entity)))
      (if (and a0-20 (= self (-> a0-20 extra process)))
          (entity-task-complete-on a0-20)
          )
      )
    (ja :group! (-> self draw art-group data 2) :num! max)
    (suspend)
    (logior! (-> self mask) (process-mask sleep))
    (suspend)
    0
    (none)
    )
  :post (the-as (function none :behavior eggtop) rider-post)
  )

(defmethod init-from-entity! eggtop ((obj eggtop) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 4)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 -7372.8 16384.0)
      (set-root-prim! s4-0 s3-0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> obj root-override) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *eggtop-sg* '())
  (logior! (-> obj skel status) (janim-status inited))
  (update-transforms! (-> obj root-override))
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 189) obj))
  (set! (-> obj sound-id) (new-sound-id))
  (cond
    ((task-complete? *game-info* (-> obj entity extra perm task))
     (go eggtop-close #t)
     )
    (else
      (birth-pickup-at-point
        (vector+! (new 'stack-no-clear 'vector) (-> obj root-override trans) (new 'static 'vector :y 6144.0 :w 1.0))
        (pickup-type fuel-cell)
        (the float (-> obj entity extra perm task))
        #f
        obj
        (the-as fact-info #f)
        )
      (go eggtop-idle)
      )
    )
  (none)
  )

(deftype jng-iris-door (eco-door)
  ()
  :heap-base #xa0
  :method-count-assert 27
  :size-assert         #x104
  :flag-assert         #x1b00a00104
  )


(defskelgroup *jng-iris-door-sg* jng-iris-door jng-iris-door-lod0-jg jng-iris-door-idle-ja
              ((jng-iris-door-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

(defmethod eco-door-method-24 jng-iris-door ((obj jng-iris-door))
  (let ((s5-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-others))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 16384.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> obj root-override) s5-0)
    )
  0
  (none)
  )

(defmethod eco-door-method-25 jng-iris-door ((obj jng-iris-door))
  (initialize-skeleton obj *jng-iris-door-sg* '())
  (set! (-> obj open-distance) 32768.0)
  (set! (-> obj close-distance) 49152.0)
  (update-transforms! (-> obj root-override))
  0
  (none)
  )
