;;-*-Lisp-*-
(in-package goal)

;; name: spiderwebs.gc
;; name in dgo: spiderwebs
;; dgos: L1, MAI, MAINCAVE

;; DECOMP BEGINS

(import "goal_src/jak1/import/spiderwebs-ag.gc")

(define *spider-jump-mods* (new 'static 'surface
                             :name 'jump
                             :turnv 131072.0
                             :turnvv 18204.445
                             :tiltv 32768.0
                             :tiltvv 131072.0
                             :transv-max 49152.0
                             :target-speed 49152.0
                             :seek0 0.6
                             :seek90 0.6
                             :seek180 0.6
                             :fric 0.2
                             :nonlin-fric-dist 1.0
                             :slip-factor 1.0
                             :slide-factor 1.0
                             :slope-up-factor 1.0
                             :slope-down-factor 1.0
                             :slope-slip-angle 1.0
                             :impact-fric 1.0
                             :bend-factor 1.0
                             :bend-speed 1.0
                             :alignv 1.0
                             :slope-up-traction 1.0
                             :align-speed 1.0
                             :mode 'air
                             :flags (surface-flags allow-edge-grab jump)
                             )
        )

(deftype spiderwebs (process-drawable)
  ((spring-height meters  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  (:states
    spiderwebs-bounce
    spiderwebs-idle
    )
  )


(defskelgroup *spiderwebs-sg* spiderwebs spiderwebs-good-lod0-jg -1
              ((spiderwebs-good-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.5)
              )

(defbehavior spiderwebs-default-event-handler spiderwebs ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('bonk)
     (if (send-event arg0 'jump (-> self spring-height) (-> self spring-height) *spider-jump-mods*)
         (go spiderwebs-bounce)
         )
     )
    (('touch)
     (when (= (-> arg0 type) target)
       (let* ((a0-8 (target-pos 0))
              (f1-1 (- (-> a0-8 y) (-> self root trans y)))
              )
         (if (and (>= 2048.0 (fabs f1-1))
                  (and (>= 13516.8 (vector-vector-distance a0-8 (-> self root trans)))
                       (send-event arg0 'jump (-> self spring-height) (-> self spring-height) *spider-jump-mods*)
                       )
                  )
             (go spiderwebs-bounce)
             )
         )
       )
     )
    (('attack)
     (if (and (= (-> arg3 param 1) 'flop)
              (send-event arg0 'jump (-> self spring-height) (-> self spring-height) *spider-jump-mods*)
              )
         (go spiderwebs-bounce)
         )
     #f
     )
    )
  )

(defstate spiderwebs-idle (spiderwebs)
  :event spiderwebs-default-event-handler
  :code (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (ja :group! spiderwebs-bounce-ja :num! min)
    (transform-post)
    (loop
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    (none)
    )
  )

(defstate spiderwebs-bounce (spiderwebs)
  :code (behavior ()
    (logclear! (-> self mask) (process-mask actor-pause))
    (sound-play "web-tramp")
    (ja-no-eval :group! spiderwebs-bounce-ja :num! (seek! (ja-aframe 10.0 0)) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! (ja-aframe 10.0 0)))
      )
    (set! (-> self event-hook) (-> spiderwebs-idle event))
    (ja-no-eval :group! spiderwebs-bounce-ja :num! (seek!) :frame-num (ja-aframe 10.0 0))
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go spiderwebs-idle)
    (none)
    )
  :post (the-as (function none :behavior spiderwebs) transform-post)
  )

(defmethod init-from-entity! spiderwebs ((obj spiderwebs) (arg0 entity-actor))
  (set! (-> obj mask) (logior (process-mask platform) (-> obj mask)))
  (let ((s4-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 14336.0)
      (set-root-prim! s4-0 s3-0)
      )
    (set! (-> s4-0 nav-radius) 13926.4)
    (backup-collide-with-as s4-0)
    (set! (-> obj root) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *spiderwebs-sg* '())
  (set! (-> obj spring-height) (res-lump-float arg0 'spring-height :default 45056.0))
  (ja-channel-set! 1)
  (let ((a0-11 (-> obj skel root-channel 0)))
    (set! (-> a0-11 param 0) (the float (+ (-> a0-11 frame-group data 0 length) -1)))
    (set! (-> a0-11 param 1) 1.0)
    (joint-control-channel-group! a0-11 (the-as art-joint-anim #f) num-func-seek!)
    )
  (let ((s5-1 (-> obj skel root-channel 0)))
    (joint-control-channel-group-eval!
      s5-1
      (the-as art-joint-anim (-> obj draw art-group data 2))
      num-func-identity
      )
    (set! (-> s5-1 frame-num) 0.0)
    )
  (nav-mesh-connect obj (-> obj root) (the-as nav-control #f))
  (transform-post)
  (go spiderwebs-idle)
  (none)
  )




