;;-*-Lisp-*-
(in-package goal)

;; name: training-part.gc
;; name in dgo: training-part
;; dgos: L1, TRA

;; DECOMP BEGINS

(deftype training-part (part-spawner)
  ()
  :heap-base #x60
  :method-count-assert 21
  :size-assert         #xd0
  :flag-assert         #x15006000d0
  )


(defpartgroup group-training-geyser-2
  :id 146
  :flags (always-draw)
  :bounds (static-bspherem 0 32 0 70)
  :parts ((sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 4500)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 4530)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 4560)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 4590)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 4620)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 4650)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 4050)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 4080)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 4110)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 4140)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 4170)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 3900)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 4050)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 4080)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 4110)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 4140)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 4170)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 3900)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 10) :offset 4050)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 7) :offset 4050)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 5) :offset 3750)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 3) :offset 3450)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 10) :offset 4050)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 7) :offset 4050)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 5) :offset 3750)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 3) :offset 3450)
    )
  )

(defpartgroup group-training-geyser-5
  :id 147
  :flags (always-draw)
  :bounds (static-bspherem 0 32 0 70)
  :parts ((sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 900)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 930)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 960)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 990)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 1020)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 1050)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 450)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 420)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 390)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 360)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 330)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 300)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 450)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 420)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 390)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 360)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 330)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 300)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 10) :offset 450)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 7) :offset 450)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 5) :offset 150)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 3) :offset 4650)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 10) :offset 450)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 7) :offset 450)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 5) :offset 150)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 3) :offset 4650)
    )
  )

(defpartgroup group-training-geyser-6
  :id 149
  :flags (always-draw)
  :bounds (static-bspherem 0 32 0 70)
  :parts ((sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 2100)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 2130)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 2160)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 2190)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 2220)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 2250)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 1650)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 1680)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 1710)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 1740)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 1770)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 1500)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 1650)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 1680)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 1710)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 1740)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 1770)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 1500)
    )
  )

(defpartgroup group-training-geyser-4
  :id 148
  :flags (always-draw)
  :bounds (static-bspherem 0 32 0 70)
  :parts ((sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 3300)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 3330)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 3360)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 3390)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 3420)
    (sp-item 752 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 3450)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 2850)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 2880)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 2910)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 2940)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 2970)
    (sp-item 753 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 2700)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 4) :offset 2850)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.8) :offset 2880)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.6) :offset 2910)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.4) :offset 2940)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3.2) :offset 2970)
    (sp-item 754 :falloff-to (meters 500) :period (seconds 16) :length (seconds 3) :offset 2700)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 10) :offset 2850)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 7) :offset 2850)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 5) :offset 2550)
    (sp-item 757 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 3) :offset 2250)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 10) :offset 2850)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 7) :offset 2850)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 5) :offset 2550)
    (sp-item 758 :fade-after (meters 100) :falloff-to (meters 100) :period (seconds 16) :length (seconds 3) :offset 2250)
    )
  )

(defpart 752
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 0.2)
    (:sound (static-sound-spec "geyser" :num 0.1 :fo-min 50 :fo-max 200))
    (:x (meters 0) (meters 1))
    (:y (meters -8))
    (:scale-x (meters 8))
    (:rot-z (degrees 180))
    (:scale-y (meters 16))
    (:r 200.0 55.0)
    (:g 200.0 55.0)
    (:b 200.0 55.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.36666667) (meters 0.033333335))
    (:scalevel-x (meters 0.0033333334))
    (:accel-y (meters -0.004))
    (:timer (seconds 2))
    (:flags (bit2 bit14))
    (:next-time (seconds 1.7))
    (:next-launcher 761)
    (:conerot-x (degrees 0) (degrees 1))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 761
  :init-specs ((:scalevel-x (meters 0.06666667)) (:fade-a -1.0666667))
  )

(defpart 753
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 0.15)
    (:x (meters 0) (meters 1))
    (:y (meters 85) (meters 10))
    (:scale-x (meters 8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 200.0 55.0)
    (:g 200.0 55.0)
    (:b 200.0 55.0)
    (:a 0.0)
    (:scalevel-x (meters 0.035555556))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.053333335)
    (:fade-g -0.053333335)
    (:fade-a 1.0666667)
    (:accel-x (meters 0) (meters 0.00033333333))
    (:accel-y (meters -0.001) (meters -0.00033333333))
    (:timer (seconds 6))
    (:flags (bit2 bit14))
    (:userdata 0.0)
    (:func 'check-drop-level-training-mist)
    (:next-time (seconds 0.1) (seconds 0.097))
    (:next-launcher 762)
    (:conerot-x (degrees 0) (degrees 1))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 762
  :init-specs ((:fade-a -0.03678161))
  )

(defun check-drop-level-training-mist ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (< (-> arg2 y) (-> arg1 user-float))
    (new 'stack-no-clear 'vector)
    (sp-kill-particle arg0 arg1)
    )
  (none)
  )

(defpart 754
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 0.035)
    (:x (meters 0) (meters 1))
    (:y (meters 85) (meters 10))
    (:scale-x (meters 8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 200.0 55.0)
    (:g 200.0 55.0)
    (:b 200.0 55.0)
    (:a 0.0)
    (:scalevel-x (meters 0.035555556))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.053333335)
    (:fade-g -0.053333335)
    (:fade-a 1.0666667)
    (:accel-x (meters 0.00033333333) (meters 0.00033333333))
    (:accel-y (meters -0.001) (meters -0.00033333333))
    (:timer (seconds 6))
    (:flags (bit2 bit14))
    (:userdata 0.0)
    (:func 'check-drop-level-training-mist)
    (:next-time (seconds 0.1) (seconds 0.097))
    (:next-launcher 762)
    (:conerot-x (degrees 0) (degrees 1))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 763
  :init-specs ((:texture (new 'static 'texture-id :index #x9 :page #x2))
    (:num 0.0 1 1.0)
    (:scale-x (meters 0.05) (meters 0.075))
    (:scale-y :copy scale-x)
    (:r 110.0 32.0)
    (:g 128.0 32.0)
    (:b 64.0 64.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:fade-a -0.85333335)
    (:accel-y (meters -0.00066666666))
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 25.000002) (degrees 40))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

(defpart 764
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 1.0)
    (:y (meters 0.02))
    (:scale-x (meters 1) (meters 1))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 110.0 32.0)
    (:g 128.0 32.0)
    (:b 96.0 32.0)
    (:a 16.0 32.0)
    (:scalevel-x (meters 0.006666667) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.4)
    (:timer (seconds 0.4))
    (:flags (bit2 bit3))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defun check-drop-level-training-spout-rain ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (< (-> arg2 y) (-> arg1 user-float))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (sp-kill-particle arg0 arg1)
      (if (< (rand-float-gen) 0.25)
          (sound-play "water-drop")
          )
      (set-vector! gp-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
      (sp-launch-particles-var
        *sp-particle-system-2d*
        (-> *part-id-table* 763)
        gp-0
        (the-as sparticle-launch-state #f)
        (the-as sparticle-launch-control #f)
        1.0
        )
      (sp-launch-particles-var
        *sp-particle-system-3d*
        (-> *part-id-table* 764)
        gp-0
        (the-as sparticle-launch-state #f)
        (the-as sparticle-launch-control #f)
        1.0
        )
      )
    )
  (none)
  )

(defpart 759
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 2.0)
    (:x (meters 0) (meters 40))
    (:y (meters 10) (meters 20))
    (:scale-x (meters 0.03) (meters 0.03))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 50.0)
    (:g 80.0 55.0)
    (:b 50.0 50.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.06666667) (meters -0.13333334))
    (:timer (seconds 0.8))
    (:flags (bit2))
    (:userdata 66560.0)
    (:func 'check-drop-level-training-spout-rain)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 760
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 4.0)
    (:x (meters 0) (meters 40))
    (:y (meters 10) (meters 20))
    (:scale-x (meters 0.03) (meters 0.03))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 50.0)
    (:g 80.0 55.0)
    (:b 50.0 50.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.06666667) (meters -0.033333335))
    (:timer (seconds 0.8))
    (:flags (bit2))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 757
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 2.0)
    (:x (meters 0) (meters 40))
    (:y (meters 4) (meters 8))
    (:scale-x (meters 0.03) (meters 0.03))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 50.0)
    (:g 80.0 55.0)
    (:b 50.0 50.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.06666667) (meters -0.13333334))
    (:timer (seconds 0.8))
    (:flags (bit2))
    (:userdata 0.0)
    (:func 'check-drop-level-training-spout-rain)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 758
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 4.0)
    (:x (meters 0) (meters 40))
    (:y (meters 4) (meters 10))
    (:scale-x (meters 0.03) (meters 0.03))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 50.0)
    (:g 80.0 55.0)
    (:b 50.0 50.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.06666667) (meters -0.033333335))
    (:timer (seconds 0.8))
    (:flags (bit2))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 755
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 2.0)
    (:x (meters 0) (meters 40))
    (:y (meters 10) (meters 10))
    (:scale-x (meters 0.03) (meters 0.03))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 50.0)
    (:g 80.0 55.0)
    (:b 50.0 50.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.06666667) (meters -0.13333334))
    (:timer (seconds 0.8))
    (:flags (bit2))
    (:userdata 0.0)
    (:func 'check-drop-level-training-spout-rain)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 756
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 4.0)
    (:x (meters 0) (meters 40))
    (:y (meters 10) (meters 20))
    (:scale-x (meters 0.03) (meters 0.03))
    (:scale-y (meters 0.5) (meters 0.5))
    (:r 50.0)
    (:g 80.0 55.0)
    (:b 50.0 50.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.06666667) (meters -0.033333335))
    (:timer (seconds 0.8))
    (:flags (bit2))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpartgroup group-training-warpgate
  :id 150
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 767 :fade-after (meters 60) :falloff-to (meters 60))
    (sp-item 768 :fade-after (meters 60) :falloff-to (meters 100) :binding 765)
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 765 :flags (bit1 start-dead launch-asap))
    (sp-item 769 :fade-after (meters 60) :falloff-to (meters 100) :binding 766)
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 766 :flags (bit1 start-dead launch-asap))
    (sp-item 770 :fade-after (meters 100) :flags (is-3d))
    )
  )

(defpart 770
  :init-specs ((:texture (new 'static 'texture-id :index #x3 :page #x2))
    (:num 0.5)
    (:x (meters 0))
    (:scale-x (meters 5))
    (:rot-x (degrees 90))
    (:rot-z (degrees 15))
    (:scale-y :copy scale-x)
    (:r 0.0 32.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 0.0 64.0)
    (:timer (seconds 0.035))
    (:flags (bit3 bit14))
    )
  )

(defpart 769
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 0.25)
    (:x (meters -2))
    (:scale-x (meters 0.25))
    (:scale-y :copy scale-x)
    (:g 128.0)
    (:a 0.0)
    (:vel-x (meters 0.0033333334))
    (:timer (seconds 2))
    (:flags (bit3 bit14))
    (:rotate-y (degrees -105))
    )
  )

(defpart 766
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 1.0)
    (:x (meters -0.6666667))
    (:y (meters 4))
    (:z (meters 5.4) (meters 1))
    (:scale-x (meters 0.2) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 0.0 32.0)
    (:g 0.0 32.0)
    (:b 64.0 196.0)
    (:a 0.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters 0))
    (:vel-z (meters 0))
    (:fade-a 0.16)
    (:accel-x (meters 0.0002962963))
    (:accel-z (meters -0.00018333334))
    (:timer (seconds 2))
    (:flags (bit2 bit3 bit7 bit14))
    )
  )

(defpart 767
  :init-specs ((:num 3.0 3.0)
    (:x (meters -0.5))
    (:rot-x 5)
    (:r 4096.0)
    (:g 3481.6)
    (:b 3481.6)
    (:vel-y (meters -0.026666667) (meters -0.02))
    (:fade-b 2.968116)
    (:timer (seconds 0.23))
    (:flags (aux-list))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4) (meters 3))
    (:rotate-y (degrees -105))
    )
  )

(defpart 768
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:scale-x (meters 0.25))
    (:scale-y :copy scale-x)
    (:g 128.0)
    (:a 0.0)
    (:accel-x (meters 0.000016666667))
    (:timer (seconds 2.3))
    (:flags (bit3 bit14))
    (:rotate-y (degrees -105))
    )
  )

(defpart 765
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0)
    (:x (meters -0.6666667))
    (:y (meters 4))
    (:z (meters 2.4))
    (:scale-x (meters 1.1) (meters 0.6))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0 32.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 8.0 32.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters -0.0044444446))
    (:vel-z (meters -0.0034999999))
    (:rotvel-z (degrees 0) (degrees 1.2))
    (:fade-a 0.21333334)
    (:accel-x (meters 0.0010370371))
    (:timer (seconds 2.3))
    (:flags (bit2 bit3 bit7 bit14))
    )
  )

(defpartgroup group-training-butterflies
  :id 151
  :bounds (static-bspherem 0 0 0 30)
  :parts ((sp-item 773 :fade-after (meters 120) :period (seconds 16.345) :length (seconds 0.017) :hour-mask #b111111100000000000111111 :binding 771)
    (sp-item 773 :fade-after (meters 120) :period (seconds 22.125) :length (seconds 0.017) :hour-mask #b111111100000000000111111 :binding 771)
    (sp-item 773 :fade-after (meters 120) :period (seconds 32.82) :length (seconds 0.017) :hour-mask #b111111100000000000111111 :binding 771)
    (sp-item 771 :flags (start-dead launch-asap) :binding 772)
    (sp-item 772 :flags (is-3d start-dead))
    (sp-item 771 :flags (start-dead launch-asap) :binding 772)
    (sp-item 772 :flags (is-3d start-dead))
    (sp-item 771 :flags (start-dead launch-asap) :binding 772)
    (sp-item 772 :flags (is-3d start-dead))
    (sp-item 771 :flags (start-dead launch-asap) :binding 772)
    (sp-item 772 :flags (is-3d start-dead))
    (sp-item 771 :flags (start-dead launch-asap) :binding 772)
    (sp-item 772 :flags (is-3d start-dead))
    )
  )

(defpart 773
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:x (meters 0) (meters 7.5))
    (:y (meters 14) (meters 3))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:a 0.0)
    (:vel-y (meters -0.036666665))
    (:accel-y (meters 0.00033333333))
    (:timer (seconds 20))
    (:flags (bit3))
    (:next-time (seconds 1.85))
    (:next-launcher 774)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

(defpart 774
  :init-specs ((:accel-y (meters 0)) (:next-time (seconds 9) (seconds 4.997)) (:next-launcher 775))
  )

(defpart 775
  :init-specs ((:accel-y (meters 0.00033333333)))
  )

(defpart 771
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:x (meters 0) (meters 16))
    (:y (meters 0) (meters 16))
    (:z (meters 3) (meters 1))
    (:scale-x (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:g 0.0 256.0)
    (:b 128.0 1 128.0)
    (:a 0.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters -0.017777778) (meters 0.035555556))
    (:vel-y (meters -0.0074074077) (meters 0.0148148155))
    (:vel-z (meters 0))
    (:timer (seconds 20))
    (:flags (bit3 bit7))
    (:next-time (seconds 0.5) (seconds 1.497))
    (:next-launcher 776)
    )
  )

(defpart 776
  :init-specs ((:vel-x (meters -0.017777778) (meters 0.035555556))
    (:vel-y (meters -0.0074074077) (meters 0.0148148155))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:next-time (seconds 0.5) (seconds 1.497))
    (:next-launcher 776)
    )
  )

(defpart 772
  :init-specs ((:texture (new 'static 'texture-id :index #x22 :page #x2))
    (:birth-func 'birth-func-copy-rot-color)
    (:num 2.0)
    (:scale-x (meters 0.9))
    (:rot-x (degrees -60) (degrees 300))
    (:scale-y (meters 1.3))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:fade-a -8.0)
    (:timer (seconds 0.035))
    (:flags (bit2 bit9 bit12))
    )
  )

(defpartgroup group-training-birds
  :id 152
  :bounds (static-bspherem 0 8 0 45)
  :parts ((sp-item 779 :fade-after (meters 120) :flags (bit1 launch-asap) :binding 777)
    (sp-item 779 :fade-after (meters 120) :flags (bit1 launch-asap) :binding 777)
    (sp-item 779 :fade-after (meters 120) :flags (bit1 launch-asap) :binding 777)
    (sp-item 777 :flags (start-dead launch-asap) :binding 778)
    (sp-item 778 :flags (is-3d start-dead))
    (sp-item 777 :flags (start-dead launch-asap) :binding 778)
    (sp-item 778 :flags (is-3d start-dead))
    (sp-item 777 :flags (start-dead launch-asap) :binding 778)
    (sp-item 778 :flags (is-3d start-dead))
    )
  )

(defun tra-bird-bob-func ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (set! (-> arg2 y) (+ (-> (the-as process-drawable (-> arg1 key proc)) root trans y)
                       (* -2048.0 (sin (* 218.45334 (the float (mod (-> *display* base-frame-counter) 300)))))
                       )
        )
  0
  (none)
  )

(defpart 779
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:birth-func 'birth-func-random-next-time)
    (:num 1.0)
    (:x (meters -15) (meters 30))
    (:y (meters 0) (meters 16))
    (:z (meters -15) (meters 30))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:a 0.0)
    (:timer (seconds -0.005))
    (:flags (bit3))
    (:userdata 199.98)
    (:func 'tra-bird-bob-func)
    )
  )

(defun tra-sparticle-seagull-moon ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (set! (-> arg2 vector 1 z) (the float (sar (shl (the int (+ -16384.0 (-> arg1 omega))) 48) 48)))
  0
  (none)
  )

(defpart 777
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:birth-func 'birth-func-copy-omega-to-z)
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 0))
    (:z (meters 30))
    (:scale-x (meters 0))
    (:rot-z (degrees 0))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters 0.0044444446))
    (:vel-z (meters 0))
    (:scalevel-x (meters 0.04))
    (:timer (seconds 2))
    (:flags (bit3 bit7))
    (:func 'tra-sparticle-seagull-moon)
    (:next-time (seconds 0.665))
    (:next-launcher 780)
    )
  )

(defpart 780
  :init-specs ((:scale-x (meters 8))
    (:scalevel-x (meters -0.08))
    (:timer (seconds 2))
    (:next-time (seconds 0.335))
    (:next-launcher 781)
    )
  )

(defpart 781
  :init-specs ((:scale-x (meters 0))
    (:scalevel-x (meters -0.04))
    (:timer (seconds 2))
    (:next-time (seconds 0.665))
    (:next-launcher 780)
    )
  )

(defpart 778
  :init-specs ((:texture (new 'static 'texture-id :index #x1c :page #x2))
    (:birth-func 'birth-func-copy2-rot-color)
    (:num 2.0)
    (:scale-x (meters 4))
    (:scale-y (meters 1.5))
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit9 bit12))
    )
  )

(defpartgroup group-training-waterfall-21
  :id 153
  :flags (always-draw)
  :bounds (static-bspherem 0 16 0 32)
  :parts ((sp-item 782 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 783 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 784 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 785 :fade-after (meters 80) :falloff-to (meters 80))
    (sp-item 786 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 787 :fade-after (meters 160) :falloff-to (meters 160))
    )
  )

(defpart 789
  :init-specs ((:fade-a -0.10666667))
  )

(defpart 790
  :init-specs ((:fade-a -0.16))
  )

(defpart 791
  :init-specs ((:fade-a -2.6666667))
  )

(defpart 782
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 0.9)
    (:x (meters -9) (meters 1))
    (:y (meters 47))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 2.4) (meters 1.6))
    (:scale-y (meters 1.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 32.0 16.0)
    (:vel-x (meters 0.05))
    (:vel-y (meters 0.013333334) (meters 0.013333334))
    (:vel-z (meters -0.0016666667) (meters 0.0033333334))
    (:scalevel-x (meters 0.0073242188))
    (:scalevel-y (meters 0.029296875))
    (:accel-x (meters -0.00091074686))
    (:accel-y (meters -0.0036666668) (meters -0.00066666666))
    (:timer (seconds 1.28))
    (:flags (bit2))
    (:next-time (seconds 1.23))
    (:next-launcher 791)
    (:launchrot-x (degrees -15) (degrees 30))
    (:rotate-y (degrees 90))
    )
  )

(defpart 783
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 0.9)
    (:x (meters -9) (meters 1))
    (:y (meters 39) (meters 5))
    (:z (meters 0))
    (:scale-x (meters 2.4) (meters 1.6))
    (:scale-y (meters 1.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 32.0 16.0)
    (:vel-x (meters 0.05) (meters 0.013333334))
    (:vel-y (meters 0.013333334) (meters 0.013333334))
    (:vel-z (meters 0.011666667) (meters 0.01))
    (:scalevel-x (meters 0.0073242188))
    (:scalevel-y (meters 0.029296875))
    (:accel-x (meters -0.00091074686))
    (:accel-y (meters -0.0036666668) (meters -0.00066666666))
    (:timer (seconds 0.7))
    (:flags (bit2))
    (:next-time (seconds 1.23))
    (:next-launcher 791)
    (:launchrot-x (degrees -15) (degrees 30))
    (:rotate-y (degrees 90))
    )
  )

(defpart 784
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 1.0)
    (:x (meters -2) (meters 3))
    (:y (meters 24) (meters 6))
    (:z (meters 2))
    (:scale-x (meters 2.4) (meters 1.6))
    (:scale-y (meters 4.8) (meters 3.2))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 32.0 16.0)
    (:vel-x (meters 0) (meters 0.026666667))
    (:vel-y (meters -0.01) (meters 0.0033333334))
    (:vel-z (meters -0.021666666) (meters 0.013333334))
    (:scalevel-x (meters 0.0073242188))
    (:scalevel-y (meters 0.029296875))
    (:accel-y (meters -0.0036666668) (meters -0.00066666666))
    (:timer (seconds 0.9))
    (:flags (bit2))
    (:next-time (seconds 1.23))
    (:next-launcher 791)
    (:launchrot-x (degrees -15) (degrees 30))
    (:rotate-y (degrees 90))
    )
  )

(defpart 785
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 1.0)
    (:x (meters -9) (meters 1))
    (:y (meters 47))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 0.2) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 24.0)
    (:vel-x (meters 0.05) (meters 0.013333334))
    (:vel-y (meters 0.0033333334) (meters 0.02))
    (:vel-z (meters -0.006666667) (meters 0.013333334))
    (:scalevel-x (meters -0.00024414062))
    (:scalevel-y (meters 0.001953125))
    (:accel-x (meters -0.00069444446))
    (:accel-y (meters -0.0016666667) (meters -0.00083333335))
    (:timer (seconds 1.7))
    (:flags (bit2 bit3))
    (:launchrot-x (degrees -20) (degrees 40))
    (:rotate-y (degrees 90))
    )
  )

(defpart 786
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5 0.4)
    (:x (meters -7) (meters 3.5))
    (:y (meters 47))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 1.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 1.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 16.0 16.0)
    (:vel-x (meters 0.021666666))
    (:vel-y (meters -0.0033333334) (meters 0.01))
    (:vel-z (meters -0.0033333334) (meters 0.006666667))
    (:scalevel-x (meters 0.0146484375))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y (meters 0.0146484375))
    (:accel-x (meters -0.00029040404))
    (:accel-y (meters -0.001) (meters -0.00025))
    (:timer (seconds 2.27))
    (:flags (bit2))
    (:next-time (seconds 2.22))
    (:next-launcher 791)
    (:rotate-y (degrees 90))
    )
  )

(defpart 787
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 0.133)
    (:x (meters 0) (meters 6))
    (:y (meters -3.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 12))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-x (meters -0.006666667) (meters 0.02))
    (:vel-y (meters 0.033333335))
    (:vel-z (meters -0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 1.28)
    (:accel-y (meters 0.0000033333336))
    (:friction 0.99)
    (:timer (seconds 3))
    (:flags (bit2))
    (:next-time (seconds 0.15) (seconds 0.097))
    (:next-launcher 790)
    (:rotate-y (degrees 90))
    )
  )

(defpartgroup group-training-waterfall-20
  :id 154
  :flags (always-draw)
  :bounds (static-bspherem 0 12 0 12)
  :parts ((sp-item 792 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 793 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 794 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 795 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 796 :fade-after (meters 160) :falloff-to (meters 160))
    (sp-item 797 :fade-after (meters 160) :falloff-to (meters 160) :flags (is-3d))
    )
  )

(defpart 792
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 1.0)
    (:x (meters -6) (meters 1))
    (:y (meters 15.5))
    (:z (meters -6) (meters 6))
    (:scale-x (meters 3.4) (meters 1.6))
    (:scale-y (meters 2.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 32.0 16.0)
    (:vel-x (meters 0.05))
    (:vel-y (meters 0.013333334) (meters 0.013333334))
    (:vel-z (meters -0.0016666667) (meters 0.0033333334))
    (:scalevel-x (meters 0.0073242188))
    (:scalevel-y (meters 0.029296875))
    (:accel-x (meters -0.00091074686))
    (:accel-y (meters -0.0036666668) (meters -0.00066666666))
    (:timer (seconds 0.7))
    (:flags (bit2))
    (:next-time (seconds 1.23))
    (:next-launcher 791)
    (:launchrot-x (degrees -15) (degrees 30))
    (:rotate-y (degrees 120))
    )
  )

(defpart 793
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 1.4)
    (:x (meters -4) (meters 1))
    (:y (meters 15.5))
    (:z (meters -3) (meters 10))
    (:scale-x (meters 3.4) (meters 1.6))
    (:scale-y (meters 2.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 32.0 16.0)
    (:vel-x (meters 0.05))
    (:vel-y (meters 0.013333334) (meters 0.013333334))
    (:vel-z (meters -0.0016666667) (meters 0.0033333334))
    (:scalevel-x (meters 0.0073242188))
    (:scalevel-y (meters 0.029296875))
    (:accel-x (meters -0.00091074686))
    (:accel-y (meters -0.0036666668) (meters -0.00066666666))
    (:timer (seconds 0.7))
    (:flags (bit2))
    (:next-time (seconds 1.23))
    (:next-launcher 791)
    (:launchrot-x (degrees -15) (degrees 30))
    (:rotate-y (degrees 190))
    )
  )

(defpart 794
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5 0.4)
    (:x (meters -6) (meters 1))
    (:y (meters 15.5))
    (:z (meters -6) (meters 6))
    (:scale-x (meters 2.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 2.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 16.0 16.0)
    (:vel-x (meters 0.021666666))
    (:vel-y (meters -0.0033333334) (meters 0.01))
    (:vel-z (meters -0.0033333334) (meters 0.006666667))
    (:scalevel-x (meters 0.0146484375))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y (meters 0.0146484375))
    (:accel-x (meters -0.00029040404))
    (:accel-y (meters -0.001) (meters -0.00025))
    (:timer (seconds 1.8))
    (:flags (bit2))
    (:next-time (seconds 1.2))
    (:next-launcher 791)
    (:rotate-y (degrees 120))
    )
  )

(defpart 795
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5 0.4)
    (:x (meters -4) (meters 1))
    (:y (meters 15.5))
    (:z (meters -3) (meters 10))
    (:scale-x (meters 2.2) (meters 0.8))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 2.2) (meters 0.8))
    (:r 192.0)
    (:g 192.0)
    (:b 192.0)
    (:a 16.0 16.0)
    (:vel-x (meters 0.021666666))
    (:vel-y (meters -0.0033333334) (meters 0.01))
    (:vel-z (meters -0.0033333334) (meters 0.006666667))
    (:scalevel-x (meters 0.0146484375))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y (meters 0.0146484375))
    (:accel-x (meters -0.00029040404))
    (:accel-y (meters -0.001) (meters -0.00025))
    (:timer (seconds 1.8))
    (:flags (bit2))
    (:next-time (seconds 1.2))
    (:next-launcher 791)
    (:rotate-y (degrees 190))
    )
  )

(defpart 796
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 0.133)
    (:x (meters 0) (meters 6))
    (:y (meters -3.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 12))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-x (meters -0.006666667) (meters 0.02))
    (:vel-y (meters 0.033333335))
    (:vel-z (meters -0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 1.28)
    (:accel-y (meters 0.0000033333336))
    (:friction 0.99)
    (:timer (seconds 3))
    (:flags (bit2))
    (:next-time (seconds 0.15) (seconds 0.097))
    (:next-launcher 790)
    (:rotate-y (degrees 90))
    )
  )

(defpart 797
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 0.05)
    (:x (meters 0) (meters 5))
    (:z (meters -8) (meters 8))
    (:scale-x (meters 2) (meters 4))
    (:scale-y :copy scale-x)
    (:r 92.0)
    (:g 92.0)
    (:b 92.0)
    (:a 0.0)
    (:scalevel-x (meters 0.02) (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.2)
    (:timer (seconds 3))
    (:flags (bit2 bit3))
    (:next-time (seconds 1))
    (:next-launcher 789)
    (:rotate-y (degrees 90))
    )
  )
