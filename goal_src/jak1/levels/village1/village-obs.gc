;;-*-Lisp-*-
(in-package goal)

;; name: village-obs-VI1.gc
;; name in dgo: village-obs
;; dgos: VI1


;; DECOMP BEGINS

(defskelgroup *med-res-jungle-sg* medres-jungle medres-jungle-lod0-jg medres-jungle-idle-ja
              ((medres-jungle-lod0-mg (meters 999999)))
              :bounds (static-spherem -80 0 -80 240)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-jungle1-sg* medres-jungle1 medres-jungle1-lod0-jg medres-jungle1-idle-ja
              ((medres-jungle1-lod0-mg (meters 999999)))
              :bounds (static-spherem 30 0 -40 230)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-jungle2-sg* medres-jungle2 medres-jungle2-lod0-jg medres-jungle2-idle-ja
              ((medres-jungle2-lod0-mg (meters 999999)))
              :bounds (static-spherem 90 0 130 110)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-beach-sg* medres-beach medres-beach-lod0-jg medres-beach-idle-ja
              ((medres-beach-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 -140 200)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-beach1-sg* medres-beach1 medres-beach1-lod0-jg medres-beach1-idle-ja
              ((medres-beach1-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 -360 200)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-beach2-sg* medres-beach2 medres-beach2-lod0-jg medres-beach2-idle-ja
              ((medres-beach2-lod0-mg (meters 999999)))
              :bounds (static-spherem -200 0 -450 180)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-beach3-sg* medres-beach3 medres-beach3-lod0-jg medres-beach3-idle-ja
              ((medres-beach3-lod0-mg (meters 999999)))
              :bounds (static-spherem 75 70 -480 100)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-misty-sg* medres-misty medres-misty-lod0-jg medres-misty-idle-ja
              ((medres-misty-lod0-mg (meters 999999)))
              :bounds (static-spherem -40 0 -20 260)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-village11-sg* medres-village11 medres-village11-lod0-jg medres-village11-idle-ja
              ((medres-village11-lod0-mg (meters 999999)))
              :bounds (static-spherem -100 0 90 200)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-village12-sg* medres-village12 medres-village12-lod0-jg medres-village12-idle-ja
              ((medres-village12-lod0-mg (meters 999999)))
              :bounds (static-spherem 40 0 -50 155)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-village13-sg* medres-village13 medres-village13-lod0-jg medres-village13-idle-ja
              ((medres-village13-lod0-mg (meters 999999)))
              :bounds (static-spherem 180 -40 -40 180)
              :longest-edge (meters 0.01)
              )

(defskelgroup *med-res-training-sg* medres-training medres-training-lod0-jg medres-training-idle-ja
              ((medres-training-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 -60 220)
              :longest-edge (meters 0.01)
              )

(defpart 368
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 2.5)
    (:x (meters 0.8))
    (:scale-x (meters 1.7))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0 128.0)
    (:b 255.0)
    (:a 64.0)
    (:scalevel-x (meters -0.0020833334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.08888889)
    (:accel-y (meters -0.000033333334))
    (:timer (seconds 2.4))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) 3 (degrees 90))
    (:conerot-radius (meters 2) (meters 17.5))
    )
  )

(defpart 369
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 3.0)
    (:x (meters 4))
    (:scale-x (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0 128.0)
    (:b 255.0)
    (:a 128.0)
    (:vel-x (meters -0.01) (meters 0.02))
    (:vel-y (meters 0.050666668))
    (:vel-z (meters -0.01) (meters 0.02))
    (:scalevel-x (meters 0.0016666667))
    (:rotvel-z (degrees -3.0000002) (degrees 6.0000005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.35555556)
    (:fade-g -0.35555556)
    (:fade-a 0.35555556)
    (:timer (seconds 0.55))
    (:flags (bit2 bit3))
    (:conerot-x (degrees -45) 3 (degrees 90))
    (:conerot-radius (meters 2))
    )
  )

(defpart 370
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 5.0)
    (:x (meters 4))
    (:scale-x (meters 1.7))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0 128.0)
    (:b 255.0)
    (:a 64.0)
    (:vel-x (meters -0.026666667) (meters 0.07666667))
    (:vel-y (meters -0.006666667))
    (:vel-z (meters -0.05) (meters 0.1))
    (:scalevel-x (meters -0.008333334))
    (:rotvel-z (degrees -3.0000002) (degrees 6.0000005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.17777778)
    (:accel-y (meters -0.001))
    (:timer (seconds 0.6))
    (:flags (bit2 bit3))
    (:conerot-x (degrees -45) 3 (degrees 90))
    (:conerot-radius (meters 10.6))
    )
  )

(defpart 371
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 3.8)
    (:x (meters 5.5))
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 0.0 64.0)
    (:b 255.0)
    (:a 196.0)
    (:vel-x (meters -0.006666667) (meters 0.026666667))
    (:vel-y (meters 0.0073333336))
    (:scalevel-x (meters -0.008333334))
    (:rotvel-z (degrees -0.99999994) (degrees 1.9999999))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.17777778)
    (:fade-a -1.0888889)
    (:timer (seconds 0.55))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 2.3))
    )
  )

(deftype windmill-sail (process-drawable)
  ((root-override  trsq        :overlay-at root)
   (sync           sync-info   :inline)
   (blade-normal   vector      :inline)
   (orig-quat      quaternion  :inline)
   (alt-actor      entity-actor)
   (part2          sparticle-launch-control)
   )
  (:states
    windmill-sail-idle
    )
  )


(defmethod relocate ((this windmill-sail) (arg0 int))
  (if (nonzero? (-> this part2))
      (&+! (-> this part2) arg0)
      )
  (the-as windmill-sail ((method-of-type process-drawable relocate) this arg0))
  )

(defmethod deactivate ((this windmill-sail))
  (if (nonzero? (-> this part2))
      (kill-and-free-particles (-> this part2))
      )
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

(defskelgroup *windmill-sail-sg* windmill-sail windmill-sail-lod0-jg windmill-sail-idle-ja
              ((windmill-sail-lod0-mg (meters 20))
               (windmill-sail-lod1-mg (meters 40))
               (windmill-sail-lod2-mg (meters 999999))
               )
              :bounds (static-spherem 0 0 0 21)
              :longest-edge (meters 14.9)
              )

(defpartgroup group-win-wind-mill
  :id 123
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 368 :fade-after (meters 100))
    (sp-item 369 :fade-after (meters 100))
    (sp-item 370 :fade-after (meters 200))
    (sp-item 371 :fade-after (meters 200))
    )
  )

(defpartgroup group-win-wind-mill-hires
  :id 124
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 368) (sp-item 369) (sp-item 370) (sp-item 371))
  )

(defstate windmill-sail-idle (windmill-sail)
  :trans (behavior ()
    (cond
      ((task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
       (let ((f30-0 (get-current-value (-> self sync) 65536.0)))
         (set! (-> self sync period) (the-as uint 4800))
         (quaternion-axis-angle!
           (-> self root-override quat)
           (-> self blade-normal x)
           (-> self blade-normal y)
           (-> self blade-normal z)
           f30-0
           )
         (quaternion*! (-> self root-override quat) (-> self root-override quat) (-> self orig-quat))
         (quaternion-normalize! (-> self root-override quat))
         (set! (-> *part-id-table* 368 init-specs 15 initial-valuef) f30-0)
         )
       (spawn
         (if (movie?)
             (-> self part2)
             (-> self part)
             )
         (-> self root-override trans)
         )
       (if (nonzero? (-> self sound))
           (change-sound! (-> self sound) (static-sound-name "mayors-gears"))
           )
       )
      (else
        (set! (-> self sync period) (the-as uint #x15f90))
        (let ((f0-3 (get-current-value (-> self sync) 65536.0)))
          (quaternion-axis-angle!
            (-> self root-override quat)
            (-> self blade-normal x)
            (-> self blade-normal y)
            (-> self blade-normal z)
            f0-3
            )
          )
        (quaternion*! (-> self root-override quat) (-> self root-override quat) (-> self orig-quat))
        (quaternion-normalize! (-> self root-override quat))
        )
      )
    (if (nonzero? (-> self sound))
        (update! (-> self sound))
        )
    (if (= (-> self draw cur-lod) (-> self draw lod-set max-lod))
        (logior! (-> self draw status) (draw-status do-not-check-distance))
        (logclear! (-> self draw status) (draw-status do-not-check-distance))
        )
    )
  :code anim-loop
  :post ja-post
  )

(defmethod init-from-entity! ((this windmill-sail) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (load-params! (-> this sync) this (the-as uint 4800) 0.0 0.15 0.15)
  (set! (-> this root-override) (new 'process 'trsq))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (initialize-skeleton this *windmill-sail-sg* '())
  (quaternion-copy! (-> this orig-quat) (-> this root-override quat))
  (vector-x-quaternion! (-> this blade-normal) (-> this root-override quat))
  (vector-normalize! (-> this blade-normal) 1.0)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 123) this))
  (set! (-> this part2) (create-launch-control (-> *part-group-id-table* 124) this))
  (set! (-> this sound) (new 'process 'ambient-sound arg0 (-> this root-override trans)))
  (go windmill-sail-idle)
  (none)
  )

(deftype sagesail (process-drawable)
  ((root-override  trsq        :overlay-at root)
   (sync           sync-info   :inline)
   (blade-normal   vector      :inline)
   (orig-quat      quaternion  :inline)
   )
  (:states
    sagesail-idle
    )
  )


(defskelgroup *sagesail-sg* sagesail sagesail-lod0-jg sagesail-idle-ja
              ((sagesail-lod0-mg (meters 20)) (sagesail-lod1-mg (meters 40)) (sagesail-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 25.5)
              :longest-edge (meters 24.2)
              )

(defstate sagesail-idle (sagesail)
  :trans (behavior ()
    (let ((f0-0 (get-current-value (-> self sync) 65536.0)))
      (quaternion-axis-angle!
        (-> self root-override quat)
        (-> self blade-normal x)
        (-> self blade-normal y)
        (-> self blade-normal z)
        f0-0
        )
      )
    (quaternion*! (-> self root-override quat) (-> self root-override quat) (-> self orig-quat))
    (quaternion-normalize! (-> self root-override quat))
    )
  :code anim-loop
  :post ja-post
  )

(defmethod init-from-entity! ((this sagesail) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (load-params! (-> this sync) this (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> this root-override) (new 'process 'trsq))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (initialize-skeleton this *sagesail-sg* '())
  (quaternion-copy! (-> this orig-quat) (-> this root-override quat))
  (vector-z-quaternion! (-> this blade-normal) (-> this root-override quat))
  (vector-normalize! (-> this blade-normal) 1.0)
  (go sagesail-idle)
  (none)
  )

(deftype windspinner (process-drawable)
  ((blade-normal  vector      :inline)
   (orig-quat     quaternion  :inline)
   (angle         float)
   (angle-vel     float)
   )
  (:states
    windspinner-idle
    )
  )


(defmethod run-logic? ((this windspinner))
  (or (not (logtest? (-> this mask) (process-mask actor-pause)))
      (or (and (nonzero? (-> this draw))
               (logtest? (-> this draw status) (draw-status was-drawn))
               (>= (+ (-> *ACTOR-bank* pause-dist) (-> this root pause-adjust-distance))
                   (vector-vector-distance (-> this root trans) (math-camera-pos))
                   )
               )
          (and (nonzero? (-> this skel)) (!= (-> this skel root-channel 0) (-> this skel channel)))
          (and (nonzero? (-> this draw)) (logtest? (-> this draw status) (draw-status no-skeleton-update)))
          )
      )
  )

(defskelgroup *windspinner-sg* windspinner windspinner-lod0-jg windspinner-idle-ja
              ((windspinner-lod0-mg (meters 20)) (windspinner-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

(defstate windspinner-idle (windspinner)
  :trans (behavior ()
    (let* ((f0-0 0.992)
           (f1-0 0.008090864)
           (a0-0 (-> self root trans))
           (f0-1
             (* f0-0
                (+ (* f1-0
                      (-> *wind-work*
                          wind-force
                          (logand (+ (the int (-> a0-0 x)) (the int (-> a0-0 z)) (-> *wind-work* wind-time)) 63)
                          )
                      )
                   (-> self angle-vel)
                   )
                )
             )
           )
      (if (< 291.27112 f0-1)
          (set! f0-1 291.27112)
          )
      (set! (-> self angle-vel) f0-1)
      )
    (let ((f0-3 (+ (-> self angle) (-> self angle-vel))))
      (set! (-> self angle) (- f0-3 (* (the float (the int (/ f0-3 65536.0))) 65536.0)))
      )
    (quaternion-axis-angle!
      (-> self root quat)
      (-> self blade-normal x)
      (-> self blade-normal y)
      (-> self blade-normal z)
      (-> self angle)
      )
    (quaternion*! (-> self root quat) (-> self root quat) (-> self orig-quat))
    (quaternion-normalize! (-> self root quat))
    )
  :code anim-loop
  :post ja-post
  )

(defmethod init-from-entity! ((this windspinner) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (set! (-> this angle) 0.0)
  (set! (-> this angle-vel) 145.63556)
  (set! (-> this root) (the-as trsqv (new 'process 'trsq)))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *windspinner-sg* '())
  (set! (-> this root pause-adjust-distance) 819200.0)
  (quaternion-copy! (-> this orig-quat) (-> this root quat))
  (vector-y-quaternion! (-> this blade-normal) (-> this root quat))
  (vector-normalize! (-> this blade-normal) 1.0)
  (go windspinner-idle)
  (none)
  )

(deftype mayorgears (process-drawable)
  ((alt-actor  entity-actor)
   )
  (:states
    mayorgears-idle
    )
  )


(defskelgroup *mayorgears-sg* mayorgears mayorgears-geo-jg mayorgears-idle-ja
              ((mayorgears-geo-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4.5)
              )

(defstate mayorgears-idle (mayorgears)
  :code (behavior ()
    (loop
      (if (task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
          (ja :num! (loop!))
          (ja :num! (loop! 0.0))
          )
      (suspend)
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! ((this mayorgears) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *mayorgears-sg* '())
  (set! (-> this draw shadow-mask) (the-as uint 255))
  (go mayorgears-idle)
  (none)
  )

;; og:preserve-this PAL patch here
(deftype evilplant (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

(defmethod inspect evilplant ((obj evilplant))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  obj
  )

(defskelgroup *evilplant-sg* evilplant evilplant-lod0-jg evilplant-idle-ja
              ((evilplant-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 3.8)
              )

(defstate idle (evilplant)
  :virtual #t
  :code (behavior ()
    (loop
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! evilplant ((obj evilplant) (arg0 entity-actor))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *evilplant-sg* '())
  (go (method-of-object obj idle))
  (none)
  )

(deftype reflector-middle (process-drawable)
  ((reflector-trans       vector  :inline)
   (next-reflector-trans  vector  :inline)
   )
  (:states
    reflector-middle-idle
    )
  )


(defskelgroup *reflector-middle-sg* reflector-middle reflector-middle-geo-jg reflector-middle-idle-ja
              ((reflector-middle-geo-mg (meters 999999)))
              :bounds (static-spherem 0 17 0 17)
              )

(defstate reflector-middle-idle (reflector-middle)
  :trans (behavior ()
    (when (task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
      (process-entity-status! self (entity-perm-status complete) #t)
      (draw-eco-beam (-> self reflector-trans) (-> self next-reflector-trans))
      )
    )
  :code anim-loop
  :post ja-post
  )

(defmethod init-from-entity! ((this reflector-middle) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *reflector-middle-sg* '())
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (set! (-> this reflector-trans quad) (-> this root trans quad))
  (+! (-> this reflector-trans y) (res-lump-float arg0 'height-info))
  (let ((a0-10 (-> this link next)))
    (when a0-10
      (set! (-> this next-reflector-trans quad) (-> a0-10 extra trans quad))
      (+! (-> this next-reflector-trans y) (res-lump-float a0-10 'height-info))
      )
    )
  (logior! (-> this draw status) (draw-status do-not-check-distance))
  (go reflector-middle-idle)
  (none)
  )

(deftype reflector-end (process-drawable)
  ()
  (:states
    reflector-end-idle
    )
  )


(defstate reflector-end-idle (reflector-end)
  :code anim-loop
  )

(defmethod init-from-entity! ((this reflector-end) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (go reflector-end-idle)
  (none)
  )

(deftype villa-starfish (process-drawable)
  ((child-count  int8)
   )
  (:states
    villa-starfish-idle
    )
  )


(defskelgroup *starfish-sg* villa-starfish villa-starfish-lod0-jg villa-starfish-idle-ja
              ((villa-starfish-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2)
              )

(deftype starfish (nav-enemy)
  ()
  (:states
    starfish-idle
    starfish-patrol
    )
  )


(defstate starfish-idle (starfish)
  :enter (behavior ()
    (move-to-ground (-> self collide-info) 40960.0 40960.0 #t (collide-kind background))
    (set-time! (-> self state-time))
    (ja-channel-set! 0)
    )
  :exit (behavior ()
    (ja-channel-set! 1)
    )
  :trans (behavior ()
    (if (and *target* (>= 163840.0 (vector-vector-distance (-> self collide-info trans) (-> *target* control trans))))
        (go starfish-patrol)
        )
    )
  :code (behavior ()
    (loop
      (suspend)
      )
    )
  :post ja-post
  )

(defstate starfish-patrol (starfish)
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logior! (-> self nav flags) (nav-control-flags navcf19))
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (seconds 1))
      (if (or (not *target*)
              (< 204800.0 (vector-vector-distance (-> self collide-info trans) (-> *target* control trans)))
              )
          (go starfish-idle)
          )
      )
    )
  :code (behavior ()
    (set! (-> self target-speed) 4096.0)
    (set! (-> self rotate-speed) 12743.111)
    (set! (-> self turn-time) (seconds 0.5))
    (loop
      (ja-no-eval :group! villa-starfish-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post nav-enemy-patrol-post
  )

(define *starfish-nav-enemy-info* (new 'static 'nav-enemy-info
                                    :idle-anim -1
                                    :walk-anim -1
                                    :turn-anim -1
                                    :notice-anim -1
                                    :run-anim -1
                                    :jump-anim -1
                                    :jump-land-anim -1
                                    :victory-anim -1
                                    :taunt-anim -1
                                    :die-anim -1
                                    :neck-joint -1
                                    :player-look-at-joint 5
                                    :run-travel-speed (meters 1)
                                    :run-rotate-speed (degrees 70)
                                    :run-acceleration (meters 1)
                                    :run-turn-time (seconds 0.5)
                                    :walk-travel-speed (meters 1)
                                    :walk-rotate-speed (degrees 70)
                                    :walk-acceleration (meters 1)
                                    :walk-turn-time (seconds 0.5)
                                    :attack-shove-back (meters 3)
                                    :attack-shove-up (meters 2)
                                    :shadow-size (meters 1)
                                    :nav-nearest-y-threshold (meters 10)
                                    :notice-distance (meters 30)
                                    :stop-chase-distance (meters 40)
                                    :frustration-distance (meters 8)
                                    :frustration-time (seconds 4)
                                    :die-anim-hold-frame 10000000000.0
                                    :jump-land-anim-end-frame 10000000000.0
                                    :jump-height-min (meters 1)
                                    :jump-height-factor 0.5
                                    :jump-start-anim-speed 1.0
                                    :shadow-max-y (meters 1)
                                    :shadow-min-y (meters -1)
                                    :shadow-locus-dist (meters 150)
                                    :use-align #f
                                    :draw-shadow #f
                                    :move-to-ground #t
                                    :hover-if-no-ground #f
                                    :use-momentum #f
                                    :use-flee #f
                                    :use-proximity-notice #f
                                    :use-jump-blocked #f
                                    :use-jump-patrol #f
                                    :gnd-collide-with (collide-kind background)
                                    :debug-draw-neck #f
                                    :debug-draw-jump #f
                                    )
        )

(defmethod initialize-collision ((this starfish))
  (logior! (-> this mask) (process-mask enemy))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> s4-0 prim-core offense) (collide-offense normal-attack))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this collide-info) s5-0)
    )
  0
  (none)
  )

(defmethod nav-enemy-method-48 ((this starfish))
  (initialize-skeleton this *starfish-sg* '())
  (init-defaults! this *starfish-nav-enemy-info*)
  0
  (none)
  )

(defbehavior starfish-init-by-other starfish ((arg0 starfish) (arg1 vector))
  (initialize-collision self)
  (logior! (-> self mask) (process-mask actor-pause))
  (set! (-> self collide-info trans quad) (-> arg1 quad))
  (quaternion-copy! (-> self collide-info quat) (-> arg0 collide-info quat))
  (vector-identity! (-> self collide-info scale))
  (set! (-> self entity) (-> arg0 entity))
  (nav-enemy-method-48 self)
  (go starfish-idle)
  (none)
  )

(defbehavior process-drawable-child-count process-drawable ()
  (let ((v0-0 0))
    (let ((v1-0 (-> self child)))
      (while v1-0
        (+! v0-0 1)
        (set! v1-0 (-> v1-0 0 brother))
        (nop!)
        (nop!)
        )
      )
    v0-0
    )
  )

(defbehavior starfish-spawn-child starfish ()
  (let ((gp-0 (new-stack-vector0)))
    (get-random-point (-> self path) gp-0)
    (process-spawn starfish self gp-0 :to self)
    )
  )

(defstate villa-starfish-idle (villa-starfish)
  :code (behavior ()
    (set-time! (-> self state-time))
    (loop
      (when (time-elapsed? (-> self state-time) (seconds 0.5))
        (set-time! (-> self state-time))
        (if (and (and *target* (>= 204800.0 (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                 (< (process-drawable-child-count) (-> self child-count))
                 )
            (starfish-spawn-child)
            )
        )
      (suspend)
      )
    )
  :post #f
  )

(defmethod init-from-entity! ((this villa-starfish) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (let ((a1-4 (res-lump-value arg0 'num-lurkers uint128 :default (the-as uint128 3))))
    (set! (-> this child-count) (max 1 (min 8 (the-as int a1-4))))
    )
  (set! (-> this path) (new 'process 'path-control this 'path 0.0))
  (go villa-starfish-idle)
  (none)
  )

(deftype village-fish (process-drawable)
  ((child-count  int8)
   )
  (:states
    village-fish-idle
    )
  )


(defstate village-fish-idle (village-fish)
  :code (behavior ()
    (set-time! (-> self state-time))
    (loop
      (suspend)
      )
    )
  :post #f
  )

(defmethod init-from-entity! ((this village-fish) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (go village-fish-idle)
  (none)
  )

(deftype villa-fisha (village-fish)
  ()
  )


(deftype villa-fishb (village-fish)
  ()
  )


(deftype cyclegen (structure)
  ((output  float)
   (inc     float)
   )
  :pack-me
  )


(defun set-period ((arg0 cyclegen) (arg1 int))
  (set! (-> arg0 inc) (/ 5.0 (the float arg1)))
  )

(defun update-clock ((arg0 cyclegen))
  (let ((f0-1 (+ (-> arg0 output) (* (-> arg0 inc) (-> *display* time-adjust-ratio)))))
    (set! (-> arg0 output) (- f0-1 (the float (the int f0-1))))
    )
  (-> arg0 output)
  )

(deftype hutlamp (process-drawable)
  ((pivot  joint-mod-set-local)
   (clock  cyclegen  :inline)
   )
  (:states
    hutlamp-idle
    )
  )


(defmethod relocate ((this hutlamp) (arg0 int))
  (if (nonzero? (-> this pivot))
      (&+! (-> this pivot) arg0)
      )
  (call-parent-method this arg0)
  )

(defskelgroup *hutlamp-sg* hutlamp hutlamp-lod0-jg hutlamp-idle-ja
              ((hutlamp-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 1.2)
              :longest-edge (meters 0.7)
              )

(defstate hutlamp-idle (hutlamp)
  :code (behavior ()
    (loop
      (let ((f0-3 (* 1820.4445 (sin (* 65536.0 (update-clock (-> self clock)))))))
        (quaternion-vector-angle! (-> self pivot transform quat) *x-vector* f0-3)
        )
      (suspend)
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! ((this hutlamp) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *hutlamp-sg* '())
  (set! (-> this pivot) (new 'process 'joint-mod-set-local this 3 #f #t #f))
  (set-period (-> this clock) 900)
  (set! (-> this clock output) (rand-vu))
  (go hutlamp-idle)
  (none)
  )

(deftype revcycleprop (process-drawable)
  ()
  (:state-methods
    idle
    )
  )


(defskelgroup *revcycleprop-sg* revcycleprop revcycleprop-lod0-jg revcycleprop-idle-ja
              ((revcycleprop-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2.2)
              )

(defstate idle (revcycleprop)
  :virtual #t
  :code anim-loop
  :post ja-post
  )

(defmethod init-from-entity! ((this revcycleprop) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *revcycleprop-sg* '())
  (set! (-> this draw light-index) (the-as uint 1))
  (go (method-of-object this idle))
  (none)
  )

(deftype revcycle (process-drawable)
  ()
  (:state-methods
    idle
    )
  )


(defskelgroup *revcycle-sg* revcycle revcycle-geo-jg revcycle-idle-ja
              ((revcycle-geo-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.2)
              )

(defstate idle (revcycle)
  :virtual #t
  :code anim-loop
  :post ja-post
  )

(defmethod init-from-entity! ((this revcycle) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *revcycle-sg* '())
  (set! (-> this draw light-index) (the-as uint 1))
  (go (method-of-object this idle))
  (none)
  )

(deftype villagea-water (water-anim)
  ()
  )


(define ripple-for-villagea-water (new 'static 'ripple-wave-set
                                    :count 3
                                    :converted #f
                                    :normal-scale 4.0
                                    :wave (new 'static 'inline-array ripple-wave 4
                                      (new 'static 'ripple-wave :scale 10.0 :xdiv 1 :speed 1.5)
                                      (new 'static 'ripple-wave :scale 10.0 :xdiv -1 :zdiv 1 :speed 1.5)
                                      (new 'static 'ripple-wave :scale 5.0 :xdiv 5 :zdiv 3 :speed 0.75)
                                      (new 'static 'ripple-wave)
                                      )
                                    )
        )

(defmethod water-vol-method-22 ((this villagea-water))
  (let ((t9-0 (method-of-type water-anim water-vol-method-22)))
    (t9-0 this)
    )
  (let ((v1-2 (new 'process 'ripple-control)))
    (set! (-> this draw ripple) v1-2)
    (set-vector! (-> this draw color-mult) 0.01 0.45 0.5 0.75)
    (set! (-> v1-2 global-scale) 3072.0)
    (set! (-> v1-2 close-fade-dist) 163840.0)
    (set! (-> v1-2 far-fade-dist) 245760.0)
    (set! (-> v1-2 waveform) ripple-for-villagea-water)
    )
  (none)
  )
