;;-*-Lisp-*-
(in-package goal)

;; name: display-h.gc
;; name in dgo: display-h
;; dgos: GAME, ENGINE

(declare-type display basic)
(define-extern set-display (function display int int int int int display))

(deftype display-env (structure)
  ((pmode   uint64  :offset-assert 0)
   (smode2  uint64  :offset-assert 8)
   (dspfb   uint64  :offset-assert 16)
   (display uint64  :offset-assert 24)
   (bgcolor uint64  :offset-assert 32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

(deftype draw-env (structure)
  ((frame1         uint64  :offset-assert 0)
   (frame1addr     uint64  :offset-assert 8)
   (zbuf1          uint64  :offset-assert 16)
   (zbuf1addr      uint64  :offset-assert 24)
   (xyoffset1      uint64  :offset-assert 32)
   (xyoffset1addr  uint64  :offset-assert 40)
   (scissor1       uint64  :offset-assert 48)
   (scissor1addr   uint64  :offset-assert 56)
   (prmodecont     uint64  :offset-assert 64)
   (prmodecontaddr uint64  :offset-assert 72)
   (colclamp       uint64  :offset-assert 80)
   (colclampaddr   uint64  :offset-assert 88)
   (dthe           uint64  :offset-assert 96)
   (dtheaddr       uint64  :offset-assert 104)
   (test1          uint64  :offset-assert 112)
   (test1addr      uint64  :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

(defun put-draw-env ((packet dma-packet))
  "Uses the qwc stored in the packet."
  ;; TODO - good spot to patch for PC, or maybe just exclude.
  (dma-send GIF_DMA_BANK (the uint packet) (+ (the uint 1) (-> packet dma qwc)))
  )

(deftype display-frame (basic)
  ((buffer       int32    11 :offset-assert 4) ;; no idea
   (calc-buf     basic         :offset 8)  ;; todo - maybe DMA buffers?
   (vu1-buf      basic         :offset 8)
   (debug-buf    basic         :offset 36)
   (global-buf   basic         :offset 40)
   (bucket-group dma-bucket    :offset 44)
   (profile-bar  basic    2  :offset 48)
   (run-time     uint64        :offset 56)
   )
  (:methods
   (new (symbol type) _type_ 0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

(defmethod new display-frame ((allocation symbol) (type-to-make type))
  "Allocate a new display-frame"
  (local-vars (obj display-frame))
  (set! obj (object-new allocation type-to-make (the-as int (-> type-to-make size))))
  (set! (-> obj buffer 1) 0)
  (set! (-> obj buffer 9) 0)
  (set! (-> obj buffer 8) 0)
  (when *debug-segment*
   (set! (-> obj profile-bar 0) (new 'debug 'profile-bar))
   (set! (-> obj profile-bar 1) (new 'debug 'profile-bar))
   )
  obj
  )

(deftype virtual-frame (structure)
  ((display      display-env    :offset-assert 0)
   (display-last display-env    :offset-assert 4)
   (gif          pointer        :offset-assert 8)
   (draw         draw-env       :offset-assert 12)
   (frame        display-frame  :offset-assert 16)
   )
  
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )


(deftype display (basic)
  ((display-env0                    display-env :inline :offset-assert 8)
   (display-env1                    display-env :inline :offset-assert 48)
   (display-env2                    display-env :inline :offset-assert 88)
   (gif-tag0                        uint128             :offset-assert 128)
   (draw0                           draw-env    :inline :offset-assert 144)
   (gif-tag1                        uint128             :offset-assert 272)
   (draw1                           draw-env    :inline :offset-assert 288)
   (gif-tag2                        uint128             :offset-assert 416)
   (draw2                           draw-env    :inline :offset-assert 432)
   (on-screen                       int32               :offset-assert 560)
   (last-screen                     int32               :offset-assert 564)
   (frames                          virtual-frame 6 :inline :offset-assert 568)
   (bg-clear-color                  uint32       4      :offset-assert 760)
   (real-frame-counter              uint64              :offset-assert 776)
   (base-frame-counter              uint64              :offset-assert 784)
   (game-frame-counter              uint64              :offset-assert 792)
   (integral-frame-counter          uint64              :offset-assert 800)
   (real-integral-frame-counter     uint64              :offset-assert 808)
   (actual-frame-counter            uint64              :offset-assert 816)
   (real-actual-frame-counter       uint64              :offset-assert 824)
   (part-frame-counter              uint64              :offset-assert 832)
   (old-real-frame-counter          uint64              :offset-assert 840)
   (old-base-frame-counter          uint64              :offset-assert 848)
   (old-game-frame-counter          uint64              :offset-assert 856)
   (old-integral-frame-counter      uint64              :offset-assert 864)
   (old-real-integral-frame-counter uint64              :offset-assert 872)
   (old-actual-frame-counter        uint64              :offset-assert 880)
   (old-real-actual-frame-counter   uint64              :offset-assert 888)
   (old-part-frame-counter          uint64              :offset-assert 896)
   (time-ratio                      float               :offset-assert 904)
   (seconds-per-frame               float               :offset-assert 908)
   (frames-per-second               float               :offset-assert 912)
   (time-factor                     float               :offset-assert 916)
   (time-adjust-ratio               float               :offset-assert 920)
   )
  :method-count-assert 10
  :size-assert         #x39c
  :flag-assert         #xa0000039c
  (:methods
   (new (symbol type int int int int int) _type_ 0)
   (dummy-9 () none 9)
   )
  )

(define-extern *display* display)

(defmethod new display ((allocation symbol) (type-to-make type) (psm int) (w int) (h int) (ztest int) (zpsm int))
  (local-vars (obj display))
  (set! obj
        (object-new allocation type-to-make (the-as int (-> type-to-make size)))
        )
  (set-display obj psm w h ztest zpsm)
  (set! (-> obj frames 0 display) (-> obj display-env0))
  (set! (-> obj frames 1 display) (-> obj display-env1))
  (set! (-> obj frames 2 display) (-> obj display-env2))
  (set! (-> obj frames 3 display) (-> obj display-env0))
  (set! (-> obj frames 4 display) (-> obj display-env1))
  (set! (-> obj frames 5 display) (-> obj display-env2))
  (set! (-> obj frames 0 display-last) (-> obj display-env2))
  (set! (-> obj frames 1 display-last) (-> obj display-env0))
  (set! (-> obj frames 2 display-last) (-> obj display-env1))
  (set! (-> obj frames 3 display-last) (-> obj display-env2))
  (set! (-> obj frames 4 display-last) (-> obj display-env0))
  (set! (-> obj frames 5 display-last) (-> obj display-env1))
  (set! (-> obj frames 0 gif) (&-> obj gif-tag0))
  (set! (-> obj frames 1 gif) (&-> obj gif-tag1))
  (set! (-> obj frames 2 gif) (&-> obj gif-tag2))
  (set! (-> obj frames 3 gif) (&-> obj gif-tag0))
  (set! (-> obj frames 4 gif) (&-> obj gif-tag1))
  (set! (-> obj frames 5 gif) (&-> obj gif-tag2))
  (set! (-> obj frames 0 draw) (-> obj draw0))
  (set! (-> obj frames 1 draw) (-> obj draw1))
  (set! (-> obj frames 2 draw) (-> obj draw2))
  (set! (-> obj frames 3 draw) (-> obj draw0))
  (set! (-> obj frames 4 draw) (-> obj draw1))
  (set! (-> obj frames 5 draw) (-> obj draw2))
  (set! (-> obj frames 0 frame) (new 'global 'display-frame))
  (set! (-> obj frames 1 frame) (new 'global 'display-frame))
  (set! (-> obj frames 2 frame) (-> obj frames 0 frame))
  (set! (-> obj frames 3 frame) (-> obj frames 1 frame))
  (set! (-> obj frames 4 frame) (-> obj frames 0 frame))
  (set! (-> obj frames 5 frame) (-> obj frames 1 frame))
  (default-buffer-init *default-regs-buffer*)
  (set! (-> obj bg-clear-color 0) #x80808080)
  (set! (-> obj bg-clear-color 1) #x80808080)
  (set! (-> obj bg-clear-color 2) #x80808080)
  (set! (-> obj bg-clear-color 3) #x80808080)
  obj
  )

(define *pre-draw-hook* nothing)
(define *post-draw-hook* nothing)
