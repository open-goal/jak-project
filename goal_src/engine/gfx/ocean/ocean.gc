;;-*-Lisp-*-
(in-package goal)

;; name: ocean.gc
;; name in dgo: ocean
;; dgos: GAME, ENGINE

;; TODO - for ocean-transition
(define-extern *ocean-map* ocean-map)
;; TODO - for rigid-body
(define-extern ocean-get-height (function vector float))

(defun ocean-get-height ((arg0 vector))
  (cond
    ((and *ocean-heights* *ocean-map*)
     (let* ((f2-1 (* 0.00008138021 (- (-> arg0 x) (-> *ocean-map* start-corner x))))
            (f3-1 (* 0.00008138021 (- (-> arg0 z) (-> *ocean-map* start-corner z))))
            (f0-2 f2-1)
            (f0-4 (- f0-2 (the float (the int f0-2))))
            (f1-8 f3-1)
            (f1-10 (- f1-8 (the float (the int f1-8))))
            (a0-1 (logand (the int f2-1) 31))
            (a2-0 (logand (the int f3-1) 31))
            (v1-11 (logand (+ a0-1 1) 31))
            (a1-1 (logand (+ a2-0 1) 31))
            (f2-4 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a2-0 32) a0-1) 4)))))
            (f4-4 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a2-0 32) v1-11) 4)))))
            (f3-2 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a1-1 32) a0-1) 4)))))
            (f5-0 (-> (the-as (pointer float) (+ (the-as uint *ocean-heights*) (* (+ (* a1-1 32) v1-11) 4)))))
            (f2-6 (+ (* f4-4 f0-4) (* f2-4 (- 1.0 f0-4))))
            )
       (+ (* (+ (* f5-0 f0-4) (* f3-2 (- 1.0 f0-4))) f1-10) (* f2-6 (- 1.0 f1-10)) (-> *ocean-map* start-corner y))
       )
     )
    (else
      0.0
      )
    )
  )

(defun update-ocean ()
  (set! *ocean-map* #f)
  (dotimes (v1-0 (-> *level* length))
    (let ((a0-3 (-> *level* level v1-0)))
      (when (= (-> a0-3 status) 'active)
        (let ((a1-3 (-> a0-3 info ocean)))
          (cond
            ((= a1-3 'none)
             (when (and (-> a0-3 meta-inside?) (not (-> a0-3 other meta-inside?)))
               (set! *ocean-map* #f)
               (goto cfg-19)
               )
             )
            ((and a1-3 (nonzero? (-> a1-3 value)))
             (set! *ocean-map* (the-as ocean-map (-> a1-3 value)))
             )
            )
          )
        )
      )
    )
  (label cfg-19)
  (if (and *ocean-map* (< (-> *math-camera* trans y) -409600.0))
      (set! *ocean-map* *ocean-map-sunken*)
      )
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (set! (-> gp-0 quad) (-> (matrix-local->world #f #f) vector 2 quad))
    (cond
      ((< (fabs (-> gp-0 z)) (fabs (-> gp-0 x)))
       (if (< (-> gp-0 x) 0.0)
           (set! *ocean-facing* 3)
           (set! *ocean-facing* 2)
           )
       )
      ((< (-> gp-0 z) 0.0)
       (set! *ocean-facing* 0)
       0
       )
      (else
        (set! *ocean-facing* 1)
        )
      )
    )
  0
  (none)
  )