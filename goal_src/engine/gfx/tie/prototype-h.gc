;;-*-Lisp-*-
(in-package goal)

;; name: prototype-h.gc
;; name in dgo: prototype-h
;; dgos: GAME, ENGINE

;; The "prototype" system is used for instanced background rendering (shrub and tie).

;; The first type is the bucket.  There's one bucket per prototype which collects instances.
;; Each prototype can have up to 4 geometries (level of details). Lower numbers are higher detail.
;; During drawing, the engine will build linked lists of instance data.  Each instance will pick
;; a geom, based on distance from the camera (or other settings) and will add itself to the list
;; for that geom.
(deftype prototype-bucket (basic)
  ((name          string           :offset-assert   4)
   (flags         uint32           :offset-assert   8)
   (in-level      uint16           :offset-assert  12)
   (utextures     uint16           :offset-assert  14)
   (geometry      drawable 4       :offset-assert  16) ;; the 4 levels of detail
   (dists         vector   :inline :offset-assert  32) ;; lod settings
   (rdists        vector   :inline :offset-assert  48) ;; lod settings
   (next          uint32   4       :offset-assert  64) ;; linked list of instances of each geom.
   (count         uint16   4       :offset-assert  80) ;; number of each instance with each geom.

   ;; overlays
   (near-plane    meters           :offset         32)
   (near-stiff    meters           :offset         36)
   (mid-plane     meters           :offset         40)
   (far-plane     meters           :offset         44)
   (rlength-near  float            :offset         48)
   (rlength-stiff float            :offset         52)
   (rlength-mid   float            :offset         56)
   (stiffness     float            :offset         60)
   (next-clear    uint128          :offset         64)
   (next-clear-1  int32 :offset 64)
   (next-clear-2  int32 :offset 68)
   (next-clear-3  int32 :offset 72)
   (next-clear-4  int32 :offset 76)
   (count-clear   uint64           :offset         80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

;;;;;;;;;;;;;;;
;; shrub
;;;;;;;;;;;;;;;

;; specialization for shrub.  We keep the end of the linked list too.
(deftype prototype-bucket-shrub (prototype-bucket)
  ((mod-count  uint16  4           :offset-assert 88)
   (last       dma-packet  4           :offset-assert 96)
   (count-clear-qword   uint128         :offset 80)
   (last-clear uint128 :offset  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; array of all the prototypes in a shrub tree.
(deftype prototype-inline-array-shrub (drawable)
  ((length int16                  :offset   6)
   (data   prototype-bucket-shrub 1 :inline :offset  32)
   (_pad   uint32                                       :offset-assert 144)
   )
  :method-count-assert 18
  :size-assert         #x94
  :flag-assert         #x1200000094
  )

;; shrub prototypes, plus a pointer to the level's wind data.
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub prototype-inline-array-shrub   :offset-assert 4)
   (wind-vectors                 uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;;;;;;;;;;;;;;;
;; tie
;;;;;;;;;;;;;;;

;; tie has a few special features:
;; - ability to output to generic (and env map)
;; - per-proto colors
;; - instanced collision

(declare-type drawable-inline-array-collide-fragment drawable-inline-array)
(declare-type prototype-tie drawable)
;; prototype for a TIE
(deftype prototype-bucket-tie (prototype-bucket)
  ((generic-count       uint16       4           :offset-assert 88)
   (generic-next        uint32       4           :offset-assert 96)
   (frag-count          uint8        4           :offset-assert 112)
   (index-start         uint8        4           :offset-assert 116)
   (base-qw             uint16       4           :offset-assert 120)
   (envmap-rfade        float                    :offset-assert 128)
   (envmap-fade-far     float                    :offset-assert 132)
   (envmap-shader       adgif-shader             :offset-assert 136)
   (collide-frag        drawable-inline-array-collide-fragment  :offset-assert 140)
   (tie-colors          time-of-day-palette      :offset-assert 144)
   (data                uint32       :dynamic    :offset-assert 148)
   (color-index-qwc     uint32       :dynamic    :offset-assert 148)
   (generic-next-clear  uint128      :offset  96)
   (generic-count-clear uint128      :offset  80)
   (geometry-override   prototype-tie 4 :offset 16 :score 1)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

;; all tie prototypes in a tie tree. (note, not inline like shrub)
(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset  16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (login (_type_) none 9)
    )
  )

;; all tie prototypes and pointer to level's wind data.
;; in practice, they are shared with all tie/shrub trees in the level
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie   :offset-assert 4)
   (wind-vectors        uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;;;;;;;;;;;;
;; instance
;;;;;;;;;;;;

;; note: more specific instances are available in tie/shrub files.

(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)         ;; which bucket (index in arrays)
   (error   (pointer drawable-error) :offset 8)      ;; if we have an error.
   (origin       matrix4h :inline :offset-assert 32) ;; our location (packed format)
   (unknown-vector vector :inline :offset 32)        ;; todo, this might not be right.
   (wind-index   uint16           :offset 62)        ;; used by wind calculation.
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  )
