;;-*-Lisp-*-
(in-package goal)

;; name: prototype-h.gc
;; name in dgo: prototype-h
;; dgos: GAME, ENGINE

(deftype prototype-bucket (basic)
  ((name          basic                :offset-assert 4)
   (flags         uint32               :offset-assert 8)
   (in-level      uint16               :offset-assert 12)
   (utextures     uint16               :offset-assert 14)
   (geometry      drawable 4           :offset-assert 16)
   (dists         vector   :inline     :offset-assert 32)
   (rdists        vector   :inline     :offset-assert 48)
   (next          uint32   4           :offset-assert 64)
   (count         uint16   4           :offset-assert 80)
   (near-plane    float    :offset  32)
   (near-stiff    float    :offset  36)
   (mid-plane     float    :offset  40)
   (far-plane     float    :offset  44)
   (rlength-near  float    :offset  48)
   (rlength-stiff float    :offset  52)
   (rlength-mid   float    :offset  56)
   (stiffness     float    :offset  60)
   (next-clear    uint128  :offset  64)
   (count-clear   uint64   :offset  80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

(deftype prototype-bucket-shrub (prototype-bucket)
  ((mod-count  uint16  4           :offset-assert 88)
   (last       uint32  4           :offset-assert 96)
   (last-clear uint128 :offset  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

(deftype prototype-inline-array-shrub (drawable)
  ((length int16                  :offset   6)
   (data   prototype-bucket-shrub 1 :inline :offset  32)
   (_pad   uint32                                       :offset-assert 144)
   )
  :method-count-assert 18
  :size-assert         #x94
  :flag-assert         #x1200000094
  )

(defmethod
  inspect
  prototype-inline-array-shrub
  ((obj prototype-inline-array-shrub))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tid: ~D~%" (-> obj id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~Tlength: ~D~%" (-> obj length))
  (format #t "~Tdata[1] @ #x~X~%" (-> obj data))
  obj
  )

(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub basic   :offset-assert 4)
   (wind-vectors                 uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype prototype-bucket-tie (prototype-bucket)
  ((generic-count       uint16       4           :offset-assert 88)
   (generic-next        uint32       4           :offset-assert 96)
   (frag-count          uint8        4           :offset-assert 112)
   (index-start         uint8        4           :offset-assert 116)
   (base-qw             uint16       4           :offset-assert 120)
   (envmap-rfade        float                    :offset-assert 128)
   (envmap-fade-far     float                    :offset-assert 132)
   (envmap-shader       adgif-shader             :offset-assert 136)
   (collide-frag        basic                    :offset-assert 140)
   (tie-colors          basic                    :offset-assert 144)
   (data                uint32       :dynamic    :offset-assert 148)
   (color-index-qwc     uint32       :dynamic    :offset-assert 148)
   (generic-next-clear  uint128      :offset  96)
   (generic-count-clear uint128      :offset  80)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset  16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (TODO-RENAME-9 (_type_) none 9)
    )
  )

(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie   :offset-assert 4)
   (wind-vectors        uint32  :offset-assert 8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

(deftype instance (drawable)
  ((bucket-index uint16           :offset 6)
   (unknown uint32 :offset 8) ; TODO - from default-menu
   (origin       matrix4h :inline :offset-assert 32) ; TODO - this can also be a float, default-menu::lambda_62
   (wind-index   uint16           :offset 62)
   )
  :method-count-assert 18
  :size-assert         #x40
  :flag-assert         #x1200000040
  )
