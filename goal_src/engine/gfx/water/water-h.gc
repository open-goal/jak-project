;;-*-Lisp-*-
(in-package goal)

;; name: water-h.gc
;; name in dgo: water-h
;; dgos: GAME, ENGINE

(define-extern *water-anim-sunken-dark-eco-qbert-sg* skeleton-group)
(define-extern *water-anim-sunken-dark-eco-platform-room-sg* skeleton-group)
(define-extern *water-anim-sunken-dark-eco-helix-room-sg* skeleton-group)
(define-extern *water-anim-sunken-big-room-sg* skeleton-group)
(define-extern *water-anim-sunken-first-room-from-entrance-sg* skeleton-group)
(define-extern *water-anim-sunken-qbert-room-sg* skeleton-group)
(define-extern *water-anim-sunken-first-right-branch-sg* skeleton-group)
(define-extern *water-anim-sunken-circular-with-bullys-sg* skeleton-group)
(define-extern *water-anim-sunken-hall-with-one-whirlpool-sg* skeleton-group)
(define-extern *water-anim-sunken-hall-with-three-whirlpools-sg* skeleton-group)
(define-extern *water-anim-sunken-start-of-helix-slide-sg* skeleton-group)
(define-extern *water-anim-sunken-room-above-exit-chamber-sg* skeleton-group)
(define-extern *water-anim-sunken-hall-before-big-room-sg* skeleton-group)
(define-extern *water-anim-sunken-short-piece-sg* skeleton-group)
(define-extern *water-anim-sunken-big-room-upper-water-sg* skeleton-group)
(define-extern *water-anim-maincave-center-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-lower-right-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-mid-right-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-lower-left-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-mid-left-pool-sg* skeleton-group)
(define-extern *water-anim-maincave-water-with-crystal-sg* skeleton-group)
(define-extern *water-anim-robocave-main-pool-sg* skeleton-group)
(define-extern *water-anim-misty-mud-by-arena-sg* skeleton-group)
(define-extern *water-anim-misty-mud-above-skeleton-sg* skeleton-group)
(define-extern *water-anim-misty-mud-behind-skeleton-sg* skeleton-group)
(define-extern *water-anim-misty-mud-above-skull-back-sg* skeleton-group)
(define-extern *water-anim-misty-mud-above-skull-front-sg* skeleton-group)
(define-extern *water-anim-misty-mud-other-near-skull-sg* skeleton-group)
(define-extern *water-anim-misty-mud-near-skull-sg* skeleton-group)
(define-extern *water-anim-misty-mud-under-spine-sg* skeleton-group)
(define-extern *water-anim-misty-mud-by-dock-sg* skeleton-group)
(define-extern *water-anim-misty-mud-island-near-dock-sg* skeleton-group)
(define-extern *water-anim-misty-mud-lonely-island-sg* skeleton-group)
(define-extern *water-anim-misty-dark-eco-pool-sg* skeleton-group)
(define-extern *water-anim-ogre-lava-sg* skeleton-group)
(define-extern *water-anim-jungle-river-sg* skeleton-group)
(define-extern *water-anim-village3-lava-sg* skeleton-group)
(define-extern *water-anim-training-lake-sg* skeleton-group)
(define-extern *water-anim-darkcave-water-with-crystal-sg* skeleton-group)
(define-extern *water-anim-rolling-water-back-sg* skeleton-group)
(define-extern *water-anim-rolling-water-front-sg* skeleton-group)
(define-extern *water-anim-finalboss-dark-eco-pool-sg* skeleton-group)
(define-extern *water-anim-lavatube-energy-lava-sg* skeleton-group)
(define-extern *water-anim-village1-rice-paddy-sg* skeleton-group)
(define-extern *water-anim-village1-fountain-sg* skeleton-group)
(define-extern *water-anim-village1-rice-paddy-mid-sg* skeleton-group)
(define-extern *water-anim-village1-rice-paddy-top-sg* skeleton-group)
(define-extern *water-anim-village2-bucket-sg* skeleton-group)

;; DECOMP BEGINS

(deftype water-control (basic)
  ((flags             uint32                     :offset-assert   4)
   (process           process-drawable           :offset-assert   8)
   (joint-index       int32                      :offset-assert  12)
   (top-y-offset      float                      :offset-assert  16)
   (ripple-size       meters                     :offset-assert  20)
   (enter-water-time  time-frame                 :offset-assert  24)
   (wade-time         time-frame                 :offset-assert  32)
   (on-water-time     time-frame                 :offset-assert  40)
   (enter-swim-time   time-frame                 :offset-assert  48)
   (swim-time         time-frame                 :offset-assert  56)
   (base-height       meters                     :offset-assert  64)
   (wade-height       meters                     :offset-assert  68)
   (swim-height       meters                     :offset-assert  72)
   (surface-height    meters                     :offset-assert  76)
   (bottom-height     meters                     :offset-assert  80)
   (height            meters                     :offset-assert  84)
   (height-offset     float            4         :offset-assert  88)
   (real-ocean-offset meters                     :offset         88)
   (ocean-offset      meters                     :offset         92)
   (bob-offset        meters                     :offset         96)
   (align-offset      meters                     :offset        100)
   (swim-depth        meters                     :offset-assert 104)
   (bob               smush-control    :inline   :offset-assert 112)
   (volume            handle                     :offset-assert 144)
   (bottom            vector           2 :inline :offset-assert 160)
   (top               vector           2 :inline :offset-assert 192)
   (enter-water-pos   vector           :inline   :offset-assert 224)
   (drip-old-pos      vector           :inline   :offset-assert 240)
   (drip-joint-index  int32                      :offset-assert 256)
   (drip-wetness      float                      :offset-assert 260)
   (drip-time         time-frame                 :offset-assert 264)
   (drip-speed        float                      :offset-assert 272)
   (drip-height       meters                     :offset-assert 276)
   (drip-mult         float                      :offset-assert 280)
   )
  :method-count-assert 17
  :size-assert         #x11c
  :flag-assert         #x110000011c
  (:methods
    (new (symbol type process int float float float) _type_ 0)
    (dummy-9 (_type_) none 9)
    (dummy-10 (_type_) none 10)
    (start-bobbing! (_type_ float int int) none 11)
    (distance-from-surface (_type_) float 12)
    (dummy-13 (_type_ float vector int vector) none 13)
    (display-water-marks? (_type_) symbol 14)
    (TODO-RENAME-15 (_type_) none 15)
    (TODO-RENAME-16 (_type_) none 16)
    )
  )


(defmethod display-water-marks? water-control ((obj water-control))
  (and *display-water-marks* (logtest? (-> obj flags) 1))
  )

(defmethod new water-control ((allocation symbol) (type-to-make type) (arg0 process) (arg1 int) (arg2 float) (arg3 float) (arg4 float))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 process) (the-as process-drawable arg0))
    (set! (-> v0-0 joint-index) arg1)
    (set! (-> v0-0 wade-height) arg4)
    (set! (-> v0-0 swim-height) arg3)
    (set! (-> v0-0 bottom-height) 32768.0)
    (set! (-> v0-0 ripple-size) 1638.4)
    (set! (-> v0-0 volume) (the-as handle #f))
    (set! (-> v0-0 drip-mult) 1.0)
    (set! (-> v0-0 top-y-offset) arg2)
    v0-0
    )
  )

(defmethod distance-from-surface water-control ((obj water-control))
  (- (-> obj top 0 y) (-> obj height))
  )

(deftype water-vol (process-drawable)
  ((water-height  meters  :offset-assert 176)
   (wade-height   meters  :offset-assert 180)
   (swim-height   meters  :offset-assert 184)
   (bottom-height meters  :offset-assert 188)
   (attack-event  symbol  :offset-assert 192)
   (target        handle  :offset-assert 200)
   (flags         uint32  :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e007000d4
  (:methods
    (water-vol-idle () _type_ :state 20)
    (water-vol-startup () _type_ :state 21)
    (TODO-RENAME-22 (_type_) none 22)
    (reset-root! (_type_) none 23)
    (set-stack-size! (_type_) none 24)
    (TODO-RENAME-25 (_type_) object 25)
    (TODO-RENAME-26 (_type_) none 26)
    (dummy-27 (_type_) none 27)
    (get-ripple-height (_type_ vector) float 28)
    (TODO-RENAME-29 (_type_) uint 29)
    )
  )


0




