;;-*-Lisp-*-
(in-package goal)

;; name: water-h.gc
;; name in dgo: water-h
;; dgos: GAME, ENGINE

;; definition of type water-control
(deftype water-control (basic)
  ((flags             uint32                :offset-assert 4)
   (process           process               :offset-assert 8)
   (joint-index       int32                 :offset-assert 12)
   (top-y-offset      float                 :offset-assert 16)
   (ripple-size       float                :offset-assert 20) ; meters
   (enter-water-time  uint64                :offset-assert 24)
   (wade-time         uint64                :offset-assert 32)
   (on-water-time     uint64                :offset-assert 40)
   (enter-swim-time   uint64                :offset-assert 48)
   (swim-time         uint64                :offset-assert 56)
   (base-height       float                :offset-assert 64) ; meters
   (wade-height       float                :offset-assert 68) ; meters
   (swim-height       float                :offset-assert 72) ; meters
   (surface-height    float                :offset-assert 76) ; meters
   (bottom-height     float                :offset-assert 80) ; meters
   (height            float                :offset-assert 84) ; meters
   (height-offset     float       4       :offset-assert 88)
   (real-ocean-offset float                :offset 88) ; meters
   (ocean-offset      float                :offset 92) ; meters
   (bob-offset        float                :offset 96) ; meters
   (align-offset      float                :offset 100) ; meters
   (swim-depth        float                :offset-assert 104) ; meters
   (bob               smush-control :inline :offset-assert 112)
   (volume            uint64                :offset-assert 144) ;; handle?
   (bottom            vector       2       :inline :offset-assert 160)
   (top               vector       2       :inline :offset-assert 192)
   (enter-water-pos   vector        :inline :offset-assert 224)
   (drip-old-pos      vector        :inline :offset-assert 240)
   (drip-joint-index  int32                 :offset-assert 256)
   (drip-wetness      float                 :offset-assert 260)
   (drip-time         uint64                :offset-assert 264)
   (drip-speed        float                 :offset-assert 272)
   (drip-height       float                :offset-assert 276) ; meters
   (drip-mult         float                 :offset-assert 280)
   )
  :method-count-assert 17
  :size-assert         #x11c
  :flag-assert         #x110000011c
  (:methods
    (new (symbol type process int float float float) _type_ 0)
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (distance-from-surface (_type_) float 12)
    (dummy-13 () none 13)
    (display-water-marks? (_type_) symbol 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    )
  )

(defmethod display-water-marks? water-control ((obj water-control))
  (and *display-water-marks* (nonzero? (logand (-> obj flags) 1)))
  )

(defmethod new water-control ((allocation symbol) (type-to-make type) (arg0 process) (arg1 int) (arg2 float) (arg3 float) (arg4 float))
  (let
   ((v0-0
     (object-new allocation type-to-make (the-as int (-> type-to-make size)))
     )
    )
   (set! (-> v0-0 process) arg0)
   (set! (-> v0-0 joint-index) arg1)
   (set! (-> v0-0 wade-height) arg4)
   (set! (-> v0-0 swim-height) arg3)
   (set! (-> v0-0 bottom-height) 32768.0)
   (set! (-> v0-0 ripple-size) 1638.4)
   (set! (-> v0-0 volume) (the-as uint #f))
   (set! (-> v0-0 drip-mult) 1.0)
   (set! (-> v0-0 top-y-offset) arg2)
   v0-0
   )
  )

(defmethod distance-from-surface water-control ((obj water-control))
  (- (-> obj top 0 y) (-> obj height))
  )

(deftype water-vol (process-drawable)
  ((water-height  float   :offset-assert 176)
   (wade-height   float   :offset-assert 180)
   (swim-height   float   :offset-assert 184)
   (bottom-height float   :offset-assert 188)
   (attack-event  basic   :offset-assert 192)
   (target        uint64  :offset-assert 200)
   (flags         uint32  :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xd4
  :flag-assert         #x1e007000d4
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    )
  )
