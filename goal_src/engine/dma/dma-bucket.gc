;;-*-Lisp-*-
(in-package goal)

;; name: dma-bucket.gc
;; name in dgo: dma-bucket
;; dgos: GAME, ENGINE

;; A dma-bucket is a 16 byte thing that lives in the dma-buffer.
;; buckets live consecutively in the dma-buffer, and can mark the start of a DMA chain
;; location anywhere.

;; The typical process is:
;; - empty buckets are allocated with add-buckets
;; - tags are put somewhere and added to the appropriate bucket with insert-tag, updating last as needed.
;; - buckets are patched to link to each other with dma-buffer-add-buckets.

;; the idea here is that you can build the buckets in whatever order you want, but the buckets
;; will be DMAd in the bucket allocation order.

;; Each bucket contains:
;;   a tag, (64-bits), to point to the chain of the bucket
;;   last, a pointer to the last tag of this bucket, so that the bucket can be patched to point to the next.

(defun dma-buffer-add-buckets ((dma-buf dma-buffer) (count int))
  "Add count buckets to the dma buffer. Each bucket is initialized empty."
  (local-vars (current-bucket dma-bucket) (i int))
  ;; grab the first free memory
  (set! current-bucket (the dma-bucket (-> dma-buf base)))
  (set! i 0)
  (while (< i count)
    ;; also sets next, which points to the memory after this bucket
    (set! (-> current-bucket tag)
          (the dma-tag (logior
                        #x20000000
                        (the-as int (shr (shl (+ (the-as uint current-bucket) 16) 33) 1))
                        )
               )
          )

    ;; nothing in the bucket chain, so our last tag is the bucket tag.
    (set! (-> current-bucket last) (the (pointer uint64) current-bucket))
    ;; advance to next bucket
    (set! current-bucket (&+ current-bucket 16))
    (set! i (+ i 1))
    )
  ;; update base ptr.
  (set! (-> dma-buf base) (the pointer current-bucket))
  (none)
  )

(defun dma-buffer-patch-buckets ((bucket dma-bucket) (count int))
  "Patch last pointers in a sequence of buckets.
   Call this after you have added everything to buckets."
  (local-vars (i int))
  (when (nonzero? bucket)
    (set! i 0)
    (while (< i count)
      ;; make last tag of this bucket point to the next bucket.
      (set! (-> bucket last 0)
            (logior (logand (-> bucket last 0) #x80000000ffffffff)
                    (shr (shl (+ (the-as uint bucket) 16) 33) 1)
                    )
            )
      ;; clear last, and move on to the next bucket.
      (set! (-> bucket last) (the (pointer uint64) 0))
      (set! bucket (&+ bucket 16))
      (set! i (+ i 1))
      )
    )
  (the-as int bucket)
  )

(defun dma-bucket-insert-tag ((base dma-bucket) (idx int) (tag-start dma-bucket) (tag-end (pointer uint64)))
  "Splice in a tag."
  (local-vars (bucket dma-bucket))
  ;; seek to bucket we want to splice before.
  (set! bucket (&+ base (shl idx 4)))
  ;; append to last tag (kind of a hack here with the types)
  (set! (-> (the dma-bucket (-> bucket last)) next) (the uint tag-start))
  ;; make prev = end of tag so we can add more.
  (set! (-> bucket last) tag-end)
  tag-start
  )
