;;-*-Lisp-*-
(in-package goal)

;; name: dma-disasm.gc
;; name in dgo: dma-disasm
;; dgos: GAME, ENGINE

(deftype vif-disasm-element (structure)
  ((mask    uint32      :offset-assert 0)
   (tag     vif-cmd-32  :offset-assert 4)
   (val     uint32      :offset-assert 8)
   (print   uint32      :offset-assert 12)
   (string1 string      :offset-assert 16)
   (string2 string      :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(define *vif-disasm-table*
    (new 'static 'boxed-array vif-disasm-element 34
         (new 'static 'vif-disasm-element :mask #x7f :string1 "nop")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x1 :print #x2 :string1 "stcycl")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x2 :print #x1 :string1 "offset" :string2 "offset")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x3 :print #x1 :string1 "base" :string2 "base")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x4 :print #x1 :string1 "itop" :string2 "addr")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x5 :print #x1 :string1 "stmod" :string2 "mode")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x6 :print #x1 :string1 "mskpath3" :string2 "mask")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x7 :print #x1 :string1 "mark" :string2 "mark")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x10 :string1 "flushe")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x11 :string1 "flush")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x13 :string1 "flusha")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x14 :print #x1 :string1 "mscal" :string2 "addr")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x17 :string1 "mscnt")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x15 :print #x1 :string1 "mscalf" :string2 "addr")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x20 :print #x3 :string1 "stmask" :string2 "mask")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x30 :print #x4 :string1 "strow" :string2 "row")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x31 :print #x4 :string1 "stcol" :string2 "col")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x4a :print #x5 :string1 "mpg")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x50 :print #x6 :string1 "direct")
         (new 'static 'vif-disasm-element :mask #x7f :tag #x51 :print #x6 :string1 "directhl")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x60 :val #x10 :print #x7 :string1 "unpack-s-32")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x61 :val #x8 :print #x7 :string1 "unpack-s-16")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x62 :val #x4 :print #x7 :string1 "unpack-s-8")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x64 :val #x8 :print #x7 :string1 "unpack-v2-32")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x65 :val #x4 :print #x7 :string1 "unpack-v2-16")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x66 :val #x2 :print #x7 :string1 "unpack-v2-8")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x68 :val #xc :print #x7 :string1 "unpack-v3-32")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x69 :val #x6 :print #x7 :string1 "unpack-v3-16")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x6a :val #x3 :print #x7 :string1 "unpack-v3-8")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x6c :val #x10 :print #x7 :string1 "unpack-v4-32")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x6d :val #x8 :print #x7 :string1 "unpack-v4-16")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x6e :val #x4 :print #x7 :string1 "unpack-v4-8")
         (new 'static 'vif-disasm-element :mask #x6f :tag #x6f :val #x2 :print #x7 :string1 "unpack-v4-5")
         (new 'static 'vif-disasm-element :print #x8)))
 


(defun disasm-vif-details ((stream symbol) (data (pointer uint8)) (kind vif-cmd) (count int))
  (cond
    ((= kind (vif-cmd unpack-v4-8))
     (let ((data-ptr (&-> data 4)))
       (dotimes (i count)
         (format stream "  #x~X:    #x~2X #x~2X #x~2X #x~2X~%"
                 (+ (+ (shl i 2) 4) (the-as int data))
                 (-> data-ptr (shl i 2))
                 (-> data-ptr (+ (shl i 2) 1))
                 (-> data-ptr (+ (shl i 2) 2))
                 (-> data-ptr (+ (shl i 2) 3))
                 )
         )
       )
     )
    ((= kind (vif-cmd unpack-s-8))
     (let ((s3-1 (&-> data 4)))
       (dotimes (s2-1 count)
         ;; this is messed up and I think somebody put a parenthesis in
         ;; the wrong spot. I believe the format below only has one
         ;; format argument but should have 2.
         (format stream "  #x~X:    #x~2x~%"
                 (+ (+ s2-1 4) (the-as int data))
                 count
                 )
         ;; the actual assembly is very strange here.
         (let ((v1-21 (-> s3-1 (* 3 s2-1))))
           )
         (let ((v1-26 (-> s3-1 (+ (* 3 s2-1) 1))))
           )
         )
       )
     )
    ((= kind (vif-cmd unpack-v4-32))
     (let ((s3-2 (the-as (pointer uint32) (&-> data 4))))
       (dotimes (s2-2 count)
         (format stream "  #x~X:    #x~8x #x~8x #x~8x #x~8x~%"
          (+ (+ (shl s2-2 4) 4) (the-as int data))
          (-> s3-2 (shl s2-2 2))
          (-> s3-2 (+ (shl s2-2 2) 1))
          (-> s3-2 (+ (shl s2-2 2) 2))
          (-> s3-2 (+ (shl s2-2 2) 3))
          )
         )
       )
     )
    ((= kind (vif-cmd unpack-v4-16))
     (let ((s3-3 (the-as (pointer uint16) (&-> data 4))))
       (dotimes (s2-3 count)
         (format stream "  #x~X:    #x~4x #x~4x #x~4x #x~4x~%"
          (+ (+ (shl s2-3 3) 4) (the-as int data))
          (-> s3-3 (shl s2-3 2))
          (-> s3-3 (+ (shl s2-3 2) 1))
          (-> s3-3 (+ (shl s2-3 2) 2))
          (-> s3-3 (+ (shl s2-3 2) 3))
          )
         )
       )
     )
    ((= kind (vif-cmd unpack-v3-32))
     (let ((s3-4 (the-as (pointer uint32) (&-> data 4))))
       (dotimes (s2-4 count)
         (format stream "  #x~X:    #x~8x #x~8x #x~8x~%"
          (+ (+ (* 12 s2-4) 4) (the-as int data))
          (-> (&+ s3-4 (* 12 s2-4)) 0)
          (-> s3-4 (+ (* 3 s2-4) 1))
          (-> s3-4 (+ (* 3 s2-4) 2))
          )
         )
       )
     )
    ((= kind (vif-cmd unpack-v3-16))
     (let ((s3-5 (the-as (pointer uint16) (&-> data 4))))
       (dotimes (s2-5 count)
         (format stream "  #x~X:    #x~4x #x~4x #x~4x~%"
          (+ (+ (* 6 s2-5) 4) (the-as int data))
          (-> (&+ s3-5 (* 6 s2-5)) 0)
          (-> s3-5 (+ (* 3 s2-5) 1))
          (-> s3-5 (+ (* 3 s2-5) 2))
          )
         )
       )
     )
    ((= kind (vif-cmd unpack-v2-16))
     (let ((s3-6 (the-as (pointer uint16) (&-> data 4))))
       (dotimes (s2-6 count)
         (format stream "  #x~X:    #x~4x #x~4x~%"
          (+ (+ (shl s2-6 2) 4) (the-as int data))
          (-> (&+ s3-6 (* 6 s2-6)) 0)
          (-> s3-6 (+ (* 3 s2-6) 1))
          )
         )
       )
     )
    (else
     (format stream "  #x~X:    Data format #b~b not yet supported, add it for yourself!~%"
      (&-> data 4)
      kind
      )
     )
    )
  #f
  )

(defun disasm-vif-tag ((data (pointer vif-tag)) (words int) (stream symbol) (details symbol))
  "Print out a vif code and the immediate data.
   Will print stuff until the number of words has been reached.
   Returns how many bytes we overshot by."
  (local-vars
   (cmd vif-cmd)
   (data-ptr (pointer vif-tag))
   (data-idx int)
   (unpack-imm vif-unpack-imm)
   )
  (let ((byte-idx 0))
    (while (< byte-idx (shl words 2))
      (let ((packet-size 4)) ;; default packet size is 32-bits.
        (let ((first-tag (-> data 0)))
          ;; print the packet's address.
          (format stream "  #x~X:" data)
          ;; iterate through the disasm table, looking for a match
          (dotimes (cmd-template-idx (-> *vif-disasm-table* length))
            (set! cmd (-> first-tag cmd))
            ;; check the command against the table's mask and tag
            (when (= (logand cmd (the-as uint (-> *vif-disasm-table* cmd-template-idx mask)))
                     (-> *vif-disasm-table* cmd-template-idx tag)
                     )
              (let* ((print-kind (-> *vif-disasm-table* cmd-template-idx print))
                     (v0-1 (cond
                             ((zero? print-kind)
                              ;; just the name and irq bit.
                              (format stream "  (~s :irq ~D)~%"
                                      (-> *vif-disasm-table* cmd-template-idx string1)
                                      (-> first-tag irq)
                                      )
                              )
                             ((= print-kind 1)
                              ;; name and immediate register value.
                              (format stream "  (~s :irq ~D :~s #x~X)~%"
                                      (-> *vif-disasm-table* cmd-template-idx string1)
                                      (-> first-tag irq)
                                      (-> *vif-disasm-table* cmd-template-idx string2)
                                      (-> first-tag imm)
                                      )
                              )
                             ((= print-kind 2)
                              ;; name and stcycl immediate
                              (let ((stcycl-imm (the-as vif-stcycl-imm (-> first-tag imm))))
                                (format stream "  (~s :irq ~D :wl ~D :cl ~D)~%"
                                        (-> *vif-disasm-table* cmd-template-idx string1)
                                        (-> first-tag irq)
                                        (-> stcycl-imm wl)
                                        (-> stcycl-imm cl)
                                        )
                                )
                              )
                             ((= print-kind 3)
                              ;; name and a single word of extra data
                              (set! packet-size 8) ;; 4 + 4 = 8 byte packet.
                              (format stream "  (~s :irq ~D :~s #x~X)~%"
                                      (-> *vif-disasm-table* cmd-template-idx string1)
                                      (-> first-tag irq)
                                      (-> *vif-disasm-table* cmd-template-idx string2)
                                      (-> data 1)
                                      )
                              )
                             ((= print-kind 4)
                              ;; 4x 1 word extra data
                              (set! packet-size 20) ;; 4 + 16 = 20 byte packet.
                              (format stream "  (~s :irq ~D :~s "
                                      (-> *vif-disasm-table* cmd-template-idx string1)
                                      (-> first-tag irq)
                                      (-> *vif-disasm-table* cmd-template-idx string2)
                                      )
                              (format stream "#x~X #x~X #x~X #x~X)~%"
                                      (-> data 1)
                                      (-> data 2)
                                      (-> data 3)
                                      (-> data 4)
                                      )
                              )
                             ((= print-kind 5)
                              (format stream "  (~s :irq ~D :instructions #x~D :addr #x~X)~%"
                                      (-> *vif-disasm-table* cmd-template-idx string1)
                                      (-> first-tag irq)
                                      (-> first-tag num)
                                      (-> first-tag imm)
                                      )
                              )
                             ((= print-kind 6)
                              ;; imm is quadword count.
                              ;; This packet size calculation is wrong.
                              ;; this doesn't seem to be a decompiler error, this matches
                              ;; the assembly, but makes no sense.
                              (set! packet-size
                                    (the-as int (if (-> first-tag imm)
                                                    #x100000
                                                    (shl (-> first-tag imm) 4)
                                                    )
                                            )
                                    )
                              (format stream "  (~s :irq ~D :qwc #x~D)~%"
                                       (-> *vif-disasm-table* cmd-template-idx string1)
                                       (-> first-tag irq)
                                       (-> first-tag imm)
                                       )

                              ;; loop over data and print it.
                              (set! data-ptr (&-> data 1))
                              (set! data-idx 0)
                              (while (< data-idx (the-as int (-> first-tag imm)))
                                (format stream "  #x~X:    #x~8x #x~8x #x~8x #x~8x~%"
                                 (+ (+ (shl data-idx 4) 4) (the-as int data))
                                 (-> data-ptr (shl data-idx 2))
                                 (-> data-ptr (+ (shl data-idx 2) 1))
                                 (-> data-ptr (+ (shl data-idx 2) 2))
                                 (-> data-ptr (+ (shl data-idx 2) 3))
                                 )
                                (set! data-idx (+ data-idx 1))
                                )
                              #f
                              )
                             ((= print-kind 7)
                              (set! packet-size
                                    (the-as int
                                            (+
                                             (logand
                                              -4
                                              (+ (* (-> *vif-disasm-table* cmd-template-idx val)
                                                    (the-as uint (-> first-tag num)))
                                                 3
                                                 )
                                              )
                                             4
                                             )
                                            )
                                    )
                              (set! unpack-imm (the-as vif-unpack-imm (-> first-tag imm)))
                              (format stream "  (~s :irq ~D :num ~D :addr #x~X "
                               (-> *vif-disasm-table* cmd-template-idx string1)
                               (-> first-tag irq)
                               (-> first-tag num)
                               (-> unpack-imm addr)
                               )
                              (format stream ":msk ~D :flg ~D :usn ~D [skip ~d])~%"
                               (-> first-tag msk)
                               (-> unpack-imm flg)
                               (-> unpack-imm usn)
                               (the-as uint packet-size)
                               )
                              (if details
                                  (disasm-vif-details
                                   stream
                                   (the-as (pointer uint8) data)
                                   (logand cmd (vif-cmd cmd-mask))
                                   (the-as int (-> first-tag num))
                                   )
                                  )
                              )
                             ((= print-kind 8)
                              (format stream "  (*unknown* vif-tag #x~X)~%"
                               (-> first-tag cmd)
                               )
                              )
                             )
                       )
                     )
                )
              ;; we matched, skip to the end.
              (set! cmd-template-idx (-> *vif-disasm-table* length))
              )
            )
          )
        ;; increment counters.
        (+! byte-idx packet-size)
        (&+! data packet-size)
        )
      )
    (- byte-idx (shl words 2))
    )
  )

(defun disasm-dma-tag ((arg0 dma-tag) (arg1 symbol))
  (format arg1 "(dma-tag ")
  ;; this is a case statement.
  (let ((t9-1 format)
        (a0-2 arg1)
        (a1-2 "~s")
        (v1-1 (-> arg0 id))
        )
    (t9-1 a0-2 a1-2 (cond
                      ((= v1-1 (dma-tag-id end))
                       "end"
                       )
                      ((= v1-1 (dma-tag-id ret))
                       "ret"
                       )
                      ((= v1-1 (dma-tag-id call))
                       "call"
                       )
                      ((= v1-1 (dma-tag-id refs))
                       "refs"
                       )
                      ((= v1-1 (dma-tag-id ref))
                       "ref"
                       )
                      ((= v1-1 (dma-tag-id next))
                       "next"
                       )
                      ((= v1-1 (dma-tag-id cnt))
                       "cnt"
                       )
                      ((zero? v1-1)
                       "refe"
                       )
                      (else
                       "*unknown*"
                       )
                      )
          )
    )
  (if (> (the-as uint (-> arg0 addr)) 0)
      (format arg1 " :addr #x~8x" (-> arg0 addr))
      )
  (if (> (the-as uint (-> arg0 qwc)) 0)
      (format arg1 " :qwc ~d" (-> arg0 qwc))
      )
  (if (> (the-as uint (-> arg0 spr)) 0)
      (format arg1 " :spr ~d" (-> arg0 spr))
      )
  (if (> (the-as uint (-> arg0 irq)) 0)
      (format arg1 " :irq ~d" (-> arg0 irq))
      )
  (if (> (the-as uint (-> arg0 pce)) 0)
      (format arg1 " :pce ~d" (-> arg0 pce))
      )
  (format arg1 ")~%")
  (none)
  )



