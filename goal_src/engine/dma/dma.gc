;;-*-Lisp-*-
(in-package goal)

;; name: dma.gc
;; name in dgo: dma
;; dgos: GAME, ENGINE

;; DMA send and sync functions:
;; These functions transfer existing DMA chains and buffers.
;; In general, there are two types:
;;  - plain transfer of a buffer (like, src, dst, size)
;;  - chain, a data structure the PS2 DMA hardware can traverse, just give it a starting address.

;; The plan for OpenGOAL is to patch things higher up, likely in renderers or buffers.
;; So we would replace a (dma-send-chain ...) in a render with
;; (generic-dma-pc-port ...) that will pass the data along to the PC renderer.
;; these functions are just here for completeness and won't work properly on PC.
;; DMA sync functions will succeed and return instantly, so it's safe to leave those in.

(defconstant SPR_FROM_BANK (the dma-bank-spr #x100D000))
(defconstant SPR_TO_BANK (the dma-bank-spr #x1000D400))

(defun dma-sync-hang ((bank dma-bank))
  "Hang here until the dma transfer is completed.
   This is worse than the dma-sync-fast because it ends
   up spamming the DMA bank register more often, and reduces
   the speed of the DMA transfer."
  (#cond
    (INSTANT_DMA
     0)
    (#t
     (while (nonzero? (-> bank chcr str))
       (nop!)
       )
     )
    )
  (none)
  )

(defun dma-sync-crash ((arg0 dma-bank))
  "Try to sync DMA for a bit, then crash if we can't"
  (local-vars (count int))
  (#when INSTANT_DMA
    (return 0)
    )
  (set! count 5000000)
  ;; checking str
  (while (nonzero? (logand (the-as int (-> arg0 chcr)) 256))
    (if (zero? count)
        (segfault)
        (set! count (+ count -1))
        )
    )
  (none)
  )

(defun dma-send ((arg0 dma-bank) (madr uint) (qwc uint))
  "Send DMA! madr can be a scratchpad address.
   Like dma-send-no-scratch, this sets chcr to zero, which may be undesirable."
  (dma-sync (the-as pointer arg0) 0 0)
  (flush-cache 0)
  (.sync.l)
  (set! (-> arg0 madr)
        (logior (logand #xfffffff (the-as int madr)) ;; lower 28 bits are untouched
                ;; if we are transferring to the scratchpad (at 70000000)
                ;; we should set bit 31 in madr, per the manual.
                (if (= (logand #x70000000 (the-as int madr)) #x70000000)
                    (shl #x8000 16) ;; set bit 31
                    0)
                )
        )
  (set! (-> arg0 qwc) qwc)
  (.sync.l)
  ;; set str!
  (set! (-> arg0 chcr) (new 'static 'dma-chcr :str 1))
  (.sync.l)
  (none)
  )

(defun dma-send-chain ((arg0 dma-bank-source) (tadr uint))
  "Send DMA! tadr should be a tag address, possibly in spad ram."
  (dma-sync (the-as pointer arg0) 0 0)
  (flush-cache 0)
  (.sync.l)
  (set! (-> arg0 qwc) 0)
  ;; adjust address
  (set! (-> arg0 tadr)
   (logior (logand #xfffffff (the-as int tadr))
           (if (= (logand #x70000000 (the-as int tadr)) #x70000000)
               (shl #x8000 16)
               0)
    )
   )
  (.sync.l)
  ;;(set! (-> arg0 chcr) 325)
  (set! (-> arg0 chcr)
        (new 'static 'dma-chcr
             :dir 1 ;; from memory
             :mod 1 ;; source chain
             :tte 1 ;; send tags
             :str 1) ;; go!
        )
  (.sync.l)
  (none)
  )

(defun dma-send-chain-no-tte ((arg0 dma-bank-source) (arg1 uint))
  "Send DMA chain! TTE bit is not set, don't transfer tags."
  (dma-sync (the-as pointer arg0) 0 0)
  (flush-cache 0)
  (.sync.l)
  (set! (-> arg0 qwc) 0)
  (set!
   (-> arg0 tadr)
   (logior
    (logand #xfffffff (the-as int arg1))
    (the-as
     uint
     (if (= (logand #x70000000 (the-as int arg1)) #x70000000) (shl #x8000 16) 0)
     )
    )
   )
  (.sync.l)
  (set! (-> arg0 chcr)
        (new 'static 'dma-chcr
             :dir 1  ;; from memory
             :mod 1  ;; source chain
             :tte 0  ;; no tags
             :str 1) ;; go!
        )
  (.sync.l)
  (none)
  )

(defun dma-send-chain-no-flush ((arg0 dma-bank-source) (arg1 uint))
  "Send DMA chain! But don't flush the cache, so be careful here. TTE enable." 
  (local-vars (v0-1 int))
  (dma-sync (the-as pointer arg0) 0 0)
  (.sync.l)
  (set! (-> arg0 qwc) 0)
  (set!
   (-> arg0 tadr)
   (logior
    (logand #xfffffff (the-as int arg1))
    (the-as
     uint
     (if (= (logand #x70000000 (the-as int arg1)) #x70000000) (shl #x8000 16) 0)
     )
    )
   )
  (.sync.l)
  ;;(set! (-> arg0 chcr) 325)
  (set! (-> arg0 chcr)
        (new 'static 'dma-chcr
             :dir 1
             :mod 1
             :tte 1
             :str 1)
        )
  (.sync.l)
  (set! v0-1 0)
  (none)
  )

(defun dma-send-to-spr ((sadr uint) (madr uint) (qwc uint) (sync symbol))
  "Transfer data to spr"
  (local-vars (s5-0 dma-bank-spr))
  (set! s5-0 SPR_TO_BANK)
  (dma-sync (the-as pointer s5-0) 0 0)
  (flush-cache 0)
  (.sync.l)
  (set! (-> s5-0 madr) (logand #xfffffff (the-as int madr)))
  (set! (-> s5-0 sadr) (logand #xfffffff (the-as int sadr)))
  (set! (-> s5-0 qwc) qwc)
  (.sync.l)
  (set! (-> s5-0 chcr) (new 'static 'dma-chcr :str 1))
  (.sync.l)
  (if sync
      (dma-sync (the-as pointer s5-0) 0 0))
  (none)
  )

(defun dma-send-to-spr-no-flush ((sadr uint) (madr uint) (qwc uint) (sync symbol))
  "Transfer to spr. Doesn't flush the cache first, so be careful."
  (local-vars (s5-0 dma-bank-spr))
  (set! s5-0 SPR_TO_BANK)
  (dma-sync (the-as pointer s5-0) 0 0)
  (.sync.l)
  (set! (-> s5-0 madr) (logand #xfffffff (the-as int madr)))
  (set! (-> s5-0 sadr) (logand #xfffffff (the-as int sadr)))
  (set! (-> s5-0 qwc) qwc)
  (.sync.l)
  (set! (-> s5-0 chcr) (new 'static 'dma-chcr :str 1))
  (.sync.l)
  (if sync (dma-sync (the-as pointer s5-0) 0 0))
  (none)
  )

(defun dma-send-from-spr ((madr uint) (sadr uint) (qwc uint) (sync symbol))
  "Transfer from spr."
  (local-vars (s5-0 dma-bank-spr))
  (set! s5-0 SPR_FROM_BANK)
  (dma-sync (the-as pointer s5-0) 0 0)
  (flush-cache 0)
  (.sync.l)
  (set! (-> s5-0 madr) (logand #xfffffff (the-as int madr)))
  (set! (-> s5-0 sadr) (logand #xfffffff (the-as int sadr)))
  (set! (-> s5-0 qwc) qwc)
  (.sync.l)
  (set! (-> s5-0 chcr) (new 'static 'dma-chcr :str 1))
  (.sync.l)
  (if sync (dma-sync (the-as pointer s5-0) 0 0))
  (none)
  )

(defun dma-send-from-spr-no-flush ((madr uint) (sadr uint) (qwc uint) (sync symbol))
  "Transfer from spr, don't flush the cache."
  (local-vars (s5-0 dma-bank-spr))
  (set! s5-0 SPR_FROM_BANK)
  (dma-sync (the-as pointer s5-0) 0 0)
  (.sync.l)
  (set! (-> s5-0 madr) (logand #xfffffff (the-as int madr)))
  (set! (-> s5-0 sadr) (logand #xfffffff (the-as int sadr)))
  (set! (-> s5-0 qwc) qwc)
  (.sync.l)
  (set! (-> s5-0 chcr) (new 'static 'dma-chcr :str 1))
  (.sync.l)
  (if sync (dma-sync (the-as pointer s5-0) 0 0))
  (none)
  )

(defun dma-initialize ()
  "Due to a bug in the PS2 hardware, you must always disable the DMAtag mismatch
   error. This is done here."
  (#when PC_PORT
    (format 0 "[dma.gc] skipping dma-initialize for PC port~%")
    (return 0)
    )
  
  (set! (-> VIF0_BANK err)
        (logior (logand (-> VIF0_BANK err) (the-as uint -3)) 2)
        )
  (set! (-> (the vif-bank #x10003c00) err)
        (logior (logand (-> VIF1_BANK err) (the-as uint -3)) 2)
        )
  (none)
  )

(defun clear-vu0-mem ()
  "Clear the data memory of VU0, filling it with abadbeef
   This uses the slow memory mapping of VU0's data memory at 0x11004000"
  (local-vars
   (v1-0 (pointer uint32))
   (a0-0 int)
   )
  (set! v1-0 (the (pointer uint32) #x11004000))
  (set! a0-0 0)
  (while (< a0-0 1024)
    (set! (-> v1-0 a0-0) #xabadbeef)
    (set! a0-0 (+ a0-0 1))
    )
  (none)
  )

(defun clear-vu1-mem ()
  "Clear the data memory of VU1, filling it with abadbeef
   This uses the slow memory mapping of VU1's data memory at 0x1100C000"
  (local-vars
   (v1-0 (pointer uint32))
   (a0-0 int)
   )
  (set! v1-0 (the (pointer uint32) #x1100c000))
  (set! a0-0 0)
  (while (< a0-0 4096)
    (set! (-> v1-0 a0-0) #xabadbeef)
    (set! a0-0 (+ a0-0 1))
    )
  (none)
  )

(defun dump-vu1-mem ()
  "Print VU1 memory to runtime stdout."
  (local-vars (s5-0 int) (gp-0 (pointer uint32)))
  (set! gp-0 (the (pointer uint32) #x1100c000))
  (set! s5-0 0)
  (while (< s5-0 1024) ;; 1k quadwords
    (format 0 "~4,'0X: ~8,'0X ~8,'0X ~8,'0X ~8,'0X"
            s5-0
            (-> gp-0 (shl s5-0 2))
            (-> gp-0 (+ (shl s5-0 2) 1))
            (-> gp-0 (+ (shl s5-0 2) 2))
            (-> gp-0 (+ (shl s5-0 2) 3))
            )
    (format 0 "      ~F ~F ~F ~F ~%"
            (-> gp-0 (shl s5-0 2))
            (-> gp-0 (+ (shl s5-0 2) 1))
            (-> gp-0 (+ (shl s5-0 2) 2))
            (-> gp-0 (+ (shl s5-0 2) 3))
            )
    (set! s5-0 (+ s5-0 1))
    )
  (none)
  )

(defun dump-vu1-range ((start uint) (total-count uint))
  "Print part of VU1 memory to runtime stdout."
  (local-vars (s3-0 int) (s2-0 int) (s4-0 (pointer uint32)))
  (set! s4-0 (the (pointer uint32) #x1100c000))
  (set! s3-0 0)
  (while (< s3-0 (the-as int total-count))
   (set! s2-0 (+ s3-0 (the-as int start)))
   (format 0 "~4,'0X: ~8x ~8x ~8x ~8x"
    s2-0
    (-> s4-0 (shl s2-0 2))
    (-> s4-0 (+ (shl s2-0 2) 1))
    (-> s4-0 (+ (shl s2-0 2) 2))
    (-> s4-0 (+ (shl s2-0 2) 3))
    )
   (format 0 "      ~F ~F ~F ~F ~%"
    (-> s4-0 (shl s2-0 2))
    (-> s4-0 (+ (shl s2-0 2) 1))
    (-> s4-0 (+ (shl s2-0 2) 2))
    (-> s4-0 (+ (shl s2-0 2) 3))
    )
   (set! s3-0 (+ s3-0 1))
   )
  '#f
  )

;; if we send junk DMA data due to an engine bug, the PS2 will eventually time out the transfer.
;; in this case, the main loop will attempt to reset everything to hopefully recover.
;; this value is the PAL/NTSC constant for the Sony reset functions.
;; if we switch PAL/NTSC during runtime, we should update this.
(define *video-reset-parm* 2)

(defun reset-vif1-path ()
  "When things go wrong, totally reset vif1."
  ;; inspect the banks
  (#unless PC_PORT
    ((method-of-type dma-bank-vif inspect) VIF1_DMA_BANK)
    ((method-of-type vif-bank inspect) VIF1_BANK)
    )
  ;; sceGsResetPath
  (reset-path)
  ;; sceGsResetGraph
  (reset-graph 1 1 *video-reset-parm* 1)
  (format 0 "gkernel: vif1 path reset!~%")
  (none)
  )

(defun ultimate-memcpy ((dst pointer) (src pointer) (size-bytes uint))
  "Fast memcpy using the scratchpad. Will blow away everything in scratch.
   Rounds to nearest quadword for size, dst and source should be aligned 16-bytes."
  (local-vars
   (qwc-transferred-now uint)
   (qwc-remaining uint)
   (spr-from-bank dma-bank-spr)
   (spr-to-bank dma-bank-spr)
   )
  (set! spr-to-bank (the dma-bank-spr #x1000d400))
  (set! spr-from-bank (the dma-bank-spr #x1000d000))
  (set! qwc-remaining (shr size-bytes 4))
  (flush-cache 0)
  (dma-sync (the-as pointer spr-to-bank) 0 0)
  (dma-sync (the-as pointer spr-from-bank) 0 0)
  (while (> qwc-remaining 0)
    ;; figure out how much to transfer, limited by 1024 quadword size of spad.
    (set! qwc-transferred-now qwc-remaining)
    (when (< (the-as uint 1024) qwc-transferred-now)
      (set! qwc-transferred-now (the uint 1024))
      )
    (set! qwc-remaining (- qwc-remaining (the-as uint qwc-transferred-now)))
    
    (.sync.l)
    ;; set up dma
    (set! (-> spr-to-bank madr) (the uint src))
    (set! (-> spr-to-bank sadr) 0)
    (set! (-> spr-to-bank qwc) qwc-transferred-now)
    (.sync.l)
    ;; start dma
    (set! (-> spr-to-bank chcr) (new 'static 'dma-chcr :str 1))
    (.sync.l)
    ;; sync
    (dma-sync (the-as pointer spr-to-bank) 0 0)

    ;; advance source pointer.
    (set! src (&+ src (the-as uint (shl qwc-transferred-now 4))))

    ;; setup transfer back
    (set! (-> spr-from-bank madr) (the uint dst))
    (set! (-> spr-from-bank sadr) 0)
    (set! (-> spr-from-bank qwc) qwc-transferred-now)
    ;; transfer!
    (.sync.l)
    (set! (-> spr-from-bank chcr) (new 'static 'dma-chcr :str 1))
    (.sync.l)
    ;; sync!
    (dma-sync (the-as pointer spr-from-bank) 0 0)
    ;; advance dst.
    (set! dst (&+ dst (the-as uint (shl qwc-transferred-now 4))))
    )
  (none)
  )

(defun symlink2 ()
  "symlink2 is a handwritten assembly version of the v2 linking routine.
   it is not ported because the OpenGOAL linker has its own implementation already."
  (segfault)
  (none)
  )

(defun symlink3 ()
  "symlink3 is a handwritten assembly version of the v3 linking routine.
   OpenGOAL uses a different format for v3, customized for x86-64, so this is not
   needed. The C++ implementation is plenty fast enough"
  (segfault)
  (none)
  )

;; configuration required to work around hardware bug.
;; doesn't do anything important
(dma-initialize)
