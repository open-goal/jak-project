;;-*-Lisp-*-
(in-package goal)

;; name: types-h.gc
;; name in dgo: types-h
;; dgos: GAME, ENGINE

;; these types may have bitfields in them.
;; these have runtime types. But nothing appears to use them?

(deftype time-frame (int64)
  ()
  :flag-assert #x900000008
  )

(deftype part-id (uint32)
  ()
  :flag-assert #x900000004
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Common Units
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; in-game durations, distances, and rotations are stored in special formats.
;; these macros/constants convert from literals to the correct format.
;; for example, (meters 4.0) will give you a distance representing 4 in-game meters.

;; meters are stored as (usually) a float, scaled by 4096.
;; this gives you reasonable accuracy as an integer.
(defglobalconstant METER_LENGTH 4096.0)

(defmacro meters (x)
  "Convert number to meters.
   If the input is a constant float or integer, the result will be a
   compile time constant float. Otherwise, it will not be constant.
   Returns float."

  ;; we don't have enough constant propagation for the compiler to figure this out.
  (cond
    ((float? x)
     (* METER_LENGTH x)
     )
    ((integer? x)
     (* METER_LENGTH x)
     )
    (#t
     `(* METER_LENGTH ,x)
     )
    )
  )

;; rotations are stored in 65,536ths of a full rotation.
;; like with meters, you get a reasonable accuracy as an integer.
;; additionally, it is a power-of-two, so wrapping rotations can be done
;; quickly by converting to an int, masking, and back to float
(defglobalconstant DEGREES_PER_ROT 65536.0)

;; this was deg in GOAL
(defmacro degrees (x)
  "Convert number to degrees unit.
   Will keep a constant float/int constant."
  (cond
    ((or (float? x) (integer? x))
     (* DEGREES_PER_ROT (/ (+ 0.0 x) 360.0))
     )
    (#t
     `(* (/ (the float ,x) 360.0)
         DEGREES_PER_ROT
         )
     )
    )
  )

;; times are stored in 300ths of a second.
;; this divides evenly into frames at both 50 and 60 fps.
;; typically these are stored as integers as more precision is not useful.
;; an unsigned 32-bit integer can store about 150 days
(defglobalconstant TICKS_PER_SECOND 300) ;; 5 t/frame @ 60fps, 6 t/frame @ 50fps

;; this was usec in GOAL
(defmacro seconds (x)
  "Convert number to seconds unit.
   Returns uint."
  (cond
    ((integer? x)
     (* TICKS_PER_SECOND x)
     )
    ((float? x)
     (* 1 (* 1.0 x TICKS_PER_SECOND))
     )
    (#t
     `(the uint (* TICKS_PER_SECOND ,x))
     )
    )
  )

(defmacro fsec (x)
  "Convert number to seconds unit.
   Returns float."
  (cond
    ((or (integer? x) (float? x))
     (* 1.0 TICKS_PER_SECOND x)
     )
    (#t
     `(* 1.0 TICKS_PER_SECOND ,x)
     )
    )
  )

;; maybe rename to "velocity"?
(defmacro vel-tick (vel)
  "turn a velocity value into a per-tick value"
  `(* (/ 1.0 ,TICKS_PER_SECOND) ,vel)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Debugging Stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; set to #t to get lots of prints during loading
(defglobalconstant DEBUG_LOAD #f)
(defglobalconstant DEBUG_TEX #f)

(defmacro load-dbg (fmt-str &rest args)
  (if DEBUG_LOAD
      `(format 0 ,(string-append "[LOAD] " fmt-str) ,@args)
      '(empty)
      )
  )

(defmacro tex-dbg (fmt-str &rest args)
  (if DEBUG_TEX
      `(format 0 ,(string-append "[TEX] " fmt-str) ,@args)
      '(empty)
      )
  )
