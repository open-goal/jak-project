;;-*-Lisp-*-
(in-package goal)

;; name: fact-h.gc
;; name in dgo: fact-h
;; dgos: GAME, ENGINE

;; NOT FINISHED

(deftype fact-bank (basic)
  ((eco-level-max        float     :offset-assert 4)
   (eco-single-inc       float     :offset-assert 8)
   (eco-full-inc         float     :offset-assert 12)
   (eco-single-timeout   uint64  :offset-assert 16) ; usec
   (eco-full-timeout     uint64  :offset-assert 24) ; usec
   (dummy                uint64  :offset-assert 32) ; usec
   (health-max-default   float     :offset-assert 40)
   (health-single-inc    float     :offset-assert 44)
   (eco-pill-max-default float     :offset-assert 48)
   (health-small-inc     float     :offset-assert 52)
   (buzzer-max-default   float     :offset-assert 56)
   (buzzer-single-inc    float     :offset-assert 60)
   (suck-bounce-dist     float    :offset-assert 64) ; meters
   (suck-suck-dist       float    :offset-assert 68) ; meters
   (default-pill-inc     float     :offset-assert 72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

(define *FACT-bank*
    (new 'static 'fact-bank
         :eco-level-max 2.000000
         :eco-single-inc 1.000000
         :eco-full-inc 5.000000
         :eco-single-timeout #x5dc
         :eco-full-timeout #x1770
         :dummy #x1194
         :health-max-default 3.000000
         :health-single-inc 1.000000
         :eco-pill-max-default 50.000000
         :health-small-inc 1.000000
         :buzzer-max-default 7.000000
         :buzzer-single-inc 1.000000
         :suck-bounce-dist 73728.000000
         :suck-suck-dist 30720.000000
         )
  )

(defun pickup-type->string ((arg0 int))
  (local-vars (v1-0 int))
  (set! v1-0 arg0)
  (cond
   ((= v1-0 9) "eco-pill-random")
   ((= v1-0 8) "buzzer")
   ((= v1-0 7) "eco-pill")
   ((= v1-0 6) "fuel-cell")
   ((= v1-0 5) "money")
   ((= v1-0 4) "eco-green")
   ((= v1-0 3) "eco-blue")
   ((= v1-0 2) "eco-red")
   ((= v1-0 1) "eco-yellow")
   ((zero? v1-0) "none")
   (else "*unknown*")
   )
  )

(deftype fact-info (basic)
  ((process             basic   :offset-assert 4)
   (pickup-type         int32   :offset-assert 8)
   (pickup-amount       float   :offset-assert 12)
   (pickup-spawn-amount float   :offset-assert 16)
   (options             uint64  :offset-assert 24)
   (fade-time           uint64  :offset-assert 32)
   )
  :method-count-assert 12
  :size-assert         #x28
  :flag-assert         #xc00000028
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

(deftype fact-info-target (fact-info)
  ((eco-type              int32     :offset-assert 40)
   (eco-level             float     :offset-assert 44)
   (eco-pickup-time       uint64    :offset-assert 48)
   (eco-timeout           uint64  :offset-assert 56) ;; usec
   (health                float     :offset-assert 64)
   (health-max            float     :offset-assert 68)
   (buzzer                float     :offset-assert 72)
   (buzzer-max            float     :offset-assert 76)
   (eco-pill              float     :offset-assert 80)
   (eco-pill-max          float     :offset-assert 84)
   (health-pickup-time    uint64    :offset-assert 88)
   (eco-source            uint64    :offset-assert 96)
   (eco-source-time       uint64    :offset-assert 104)
   (money-pickup-time     uint64    :offset-assert 112)
   (buzzer-pickup-time    uint64    :offset-assert 120)
   (fuel-cell-pickup-time uint64    :offset-assert 128)
   (eco-pill-pickup-time  uint64    :offset-assert 136)
   )
  :method-count-assert 12
  :size-assert         #x90
  :flag-assert         #xc00000090
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

(deftype fact-info-enemy (fact-info)
  ((speed               float   :offset-assert 40)
   (idle-distance       float  :offset-assert 44) ; meters 
   (notice-top          float  :offset-assert 48) ; meters 
   (notice-bottom       float  :offset-assert 52) ; meters 
   (cam-horz            float  :offset-assert 56) ; meters 
   (cam-vert            float  :offset-assert 60) ; meters 
   (cam-notice-dist     float  :offset-assert 64) ; meters 
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )
