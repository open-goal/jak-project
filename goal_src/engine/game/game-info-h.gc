; ;;-*-Lisp-*-
; (in-package goal)

; ;; name: game-info-h.gc
; ;; name in dgo: game-info-h
; ;; dgos: GAME, ENGINE

(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert 4)
   (life-start-default float  :offset-assert 8)
   (life-single-inc    float  :offset-assert 12)
   (money-task-inc     float  :offset-assert 16)
   (money-oracle-inc   float  :offset-assert 20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

(define *GAME-bank* (new 'static 'game-bank
                         :life-max-default 99.000000
                         :life-start-default 5.000000
                         :life-single-inc 1.000000
                         :money-task-inc 90.000000
                         :money-oracle-inc 120.000000
                         )
  )

(deftype actor-id (uint32)
  ()
  :flag-assert #x900000004
  )

(deftype level-buffer-state (structure)
  ((name          basic  :offset-assert 0)
   (display?      basic  :offset-assert 4)
   (force-vis?    basic  :offset-assert 8)
   (force-inside? basic  :offset-assert 12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

(deftype load-state (basic)
  ((want          level-buffer-state  2 :inline  :offset-assert 4)
   (vis-nick      basic       :offset-assert 36)
   (command-list  pair        :offset-assert 40)
   (object-name   basic 256 :offset-assert 44)
   (object-status basic 256 :offset-assert 1068)
   )
  :method-count-assert 21
  :size-assert         #x82c
  :flag-assert         #x150000082c
  (:methods
   (new (symbol type) _type_ 0)
   (reset! (_type_) _type_ 9)
   (dummy-10 () none 10)
   (dummy-11 () none 11)
   (dummy-12 () none 12)
   (dummy-13 () none 13)
   (dummy-14 () none 14)
   (dummy-15 () none 15)
   (dummy-16 () none 16)
   (dummy-17 () none 17)
   (dummy-18 () none 18)
   (dummy-19 () none 19)
   (dummy-20 () none 20)
   )
  )

(defmethod new load-state ((allocation symbol) (type-to-make type))
  (reset!
   (object-new allocation type-to-make (the-as int (-> type-to-make size)))
   )
  )

(deftype continue-point (basic)
  ((name          basic           :offset-assert 4)
   (level         basic           :offset-assert 8)
   (flags         uint32          :offset-assert 12)
   (trans         vector  :inline :offset-assert 16)
   (quat          vector  :inline :offset-assert 32)
   (camera-trans  vector  :inline :offset-assert 48)
   (camera-rot    float 9       :offset-assert 64)
   (load-commands pair           :offset-assert 100)
   (vis-nick      basic           :offset-assert 104)
   (lev0          basic           :offset-assert 108)
   (disp0         basic           :offset-assert 112)
   (lev1          basic           :offset-assert 116)
   (disp1         basic           :offset-assert 120)
   )
  :method-count-assert 10
  :size-assert         #x7c
  :flag-assert         #xa0000007c
  (:methods
    (dummy-9 () none 9)
    )
  )

(deftype game-info (basic)
  ((mode                  basic      :offset-assert 4)
   (save-name             basic      :offset-assert 8)
   (life                  float      :offset-assert 12)
   (life-max              float      :offset-assert 16)
   (money                 float      :offset-assert 20)
   (money-total           float      :offset-assert 24)
   (money-per-level       uint8 32 :offset-assert 28)
   (deaths-per-level      uint8 32 :offset-assert 60)
   (buzzer-total          float      :offset-assert 92)
   (fuel                  float      :offset-assert 96)
   (perm-list             basic      :offset-assert 100)
   (task-perm-list        basic      :offset-assert 104)
   (current-continue      basic      :offset-assert 108)
   (text-ids-seen         basic      :offset-assert 112)
   (level-opened          uint8 32 :offset-assert 116)
   (hint-control          basic      :offset-assert 148)
   (task-hint-control     basic      :offset-assert 152)
   (total-deaths          int32      :offset-assert 156)
   (continue-deaths       int32      :offset-assert 160)
   (fuel-cell-deaths      int32      :offset-assert 164)
   (game-start-time       uint64     :offset-assert 168)
   (continue-time         uint64     :offset-assert 176)
   (death-time            uint64     :offset-assert 184)
   (hit-time              uint64     :offset-assert 192)
   (fuel-cell-pickup-time uint64     :offset-assert 200)
   (fuel-cell-time        basic      :offset-assert 208)
   (enter-level-time      basic      :offset-assert 212)
   (in-level-time         basic      :offset-assert 216)
   (blackout-time         uint64     :offset-assert 224)
   (letterbox-time        uint64     :offset-assert 232)
   (hint-play-time        uint64     :offset-assert 240)
   (display-text-time     uint64     :offset-assert 248)
   (display-text-handle   uint64     :offset-assert 256)
   (death-movie-tick      int32      :offset-assert 264)
   (want-auto-save        basic      :offset-assert 268)
   (auto-save-proc        uint64     :offset-assert 272)
   (auto-save-status      uint32     :offset-assert 280)
   (auto-save-card        int32      :offset-assert 284)
   (auto-save-which       int32      :offset-assert 288)
   (pov-camera-handle     uint64     :offset-assert 296)
   (other-camera-handle   uint64     :offset-assert 304)
   (death-pos             basic      :offset-assert 312)
   (dummy                 basic      :offset-assert 316)
   (auto-save-count       int32      :offset-assert 320)
   )
  :method-count-assert 29
  :size-assert         #x144
  :flag-assert         #x1d00000144
  ;; field dummy is a basic loaded with a signed load 
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    )
  )

(define-extern *game-info* game-info)

(when (or (not *game-info*) (zero? *game-info*))
  (let ((temp (new 'static 'game-info :mode 'debug :current-continue #f)))
    (set! (-> temp fuel-cell-time) (new 'global 'boxed-array uint64 116))
    (set! (-> temp enter-level-time) (new 'global 'boxed-array uint64 32))
    (set! (-> temp in-level-time) (new 'global 'boxed-array uint64 32))
    (set! *game-info* temp)
    )
  )
