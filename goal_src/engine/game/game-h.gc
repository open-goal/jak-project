;;-*-Lisp-*-
(in-package goal)

;; name: game-h.gc
;; name in dgo: game-h
;; dgos: GAME, ENGINE


(declare-type nav-control basic)
(declare-type path-control basic)
(declare-type vol-control basic)
(declare-type actor-link-info basic)
(declare-type sparticle-launch-control basic)
(declare-type water-control basic)
(declare-type collide-shape basic)
(deftype process-drawable (process)
  ((root        trsqv           :offset-assert 112)
   (node-list   cspace-array    :offset-assert 116)
   (draw        draw-control    :offset-assert 120)
   (skel        joint-control   :offset-assert 124)
   (nav         nav-control     :offset-assert 128)
   (align       align-control   :offset-assert 132)
   (path        path-control    :offset-assert 136)
   (vol         vol-control     :offset-assert 140)
   (fact        fact-info       :offset-assert 144)
   (link        actor-link-info   :offset-assert 148)
   (part        sparticle-launch-control   :offset-assert 152)
   (water       water-control   :offset-assert 156)
   (sound       ambient-sound   :offset-assert 160)
   (state-flags uint32  :offset-assert 164)
   (state-time  seconds  :offset-assert 168)
   )
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  ;; inherited inspect of process
  (:methods
    (deactivate (_type_) none 10)
    ;; add-art?
    (dummy-14 (_type_ skeleton-group object) none 14) ;; I think skeleton group is too specific.
    
    ;; load skeleton group?
    (dummy-15 (_type_ string object) _type_ 15)
    
    ;; apply velocity offset?
    ;; probably a transformq
    (dummy-16 (_type_ int (inline-array vector) vector) collide-shape 16)
    
    ;; something with cspace
    (dummy-17 (_type_) none 17)
    (dummy-18 (_type_) symbol 18)
    
    ;; something with animation
    (dummy-19 (_type_) none 19)
    )
  )

(deftype process-drawable-reserved (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 63
  :size-assert         #xb0
  :flag-assert         #x3f004000b0
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    (dummy-53 () none 53)
    (dummy-54 () none 54)
    (dummy-55 () none 55)
    (dummy-56 () none 56)
    (dummy-57 () none 57)
    (dummy-58 () none 58)
    (dummy-59 () none 59)
    (dummy-60 () none 60)
    (dummy-61 () none 61)
    (dummy-62 () none 62)
    )
  )

(deftype attack-info (structure)
  ((trans        vector :inline :offset-assert 0)
   (vector       vector :inline :offset-assert 16)
   (intersection vector :inline :offset-assert 32)
   (attacker     handle         :offset-assert 48)
   (invinc-time  uint64         :offset-assert 56) ;; likely useconds?
   (mask         uint32         :offset-assert 64)
   (mode         symbol          :offset-assert 68)
   (shove-back   meters         :offset-assert 72)
   (shove-up     meters         :offset-assert 76)
   (speed        meters         :offset-assert 80)
   (dist         meters         :offset-assert 84)
   (control      float          :offset-assert 88)
   (angle        symbol          :offset-assert 92)
   (rotate-to    degrees        :offset-assert 96)
   (prev-state   state          :offset-assert 100)
   )
  :method-count-assert 10
  :size-assert         #x68
  :flag-assert         #xa00000068
  ;; field handle is likely a value type
  (:methods
    (dummy-9 (_type_ attack-info) none 9)
    )
  )

(define *global-attack-id* 0)

(deftype ground-tween-info (structure)
  ((chan  uint8   3 :offset-assert 0)
   (blend float   3 :offset-assert 4)
   (group uint32  5 :offset-assert 16)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )


(declare-type target process-drawable)

