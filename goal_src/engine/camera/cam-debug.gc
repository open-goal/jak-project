;;-*-Lisp-*-
(in-package goal)

;; name: cam-debug.gc
;; name in dgo: cam-debug
;; dgos: GAME, ENGINE

(when *debug-segment*

(defun external-cam-reset! ()
  (vector-reset! (-> *math-camera* trans))
  (matrix-identity! (-> *math-camera* inv-camera-rot))
  (when *camera-combiner*
   (let* ((v1-6 (-> *math-camera* inv-camera-rot))
          (a3-0 (-> *camera-combiner* inv-camera-rot))
          (a0-2 (-> a3-0 vector 0 quad))
          (a1-0 (-> a3-0 vector 1 quad))
          (a2-0 (-> a3-0 vector 2 quad))
          (a3-1 (-> a3-0 vector 3 quad))
          )
    (set! (-> v1-6 vector 0 quad) a0-2)
    (set! (-> v1-6 vector 1 quad) a1-0)
    (set! (-> v1-6 vector 2 quad) a2-0)
    (set! (-> v1-6 vector 3 quad) a3-1)
    )
   (set! (-> *math-camera* trans quad) (-> *camera-combiner* trans quad))
   )
  0
  (none)
  )

(defun debug-set-camera-pos-rot! ((arg0 vector) (arg1 matrix))
  (when (and *camera* *camera-combiner*)
   (send-event *camera* 'change-state cam-free-floating 0)
   (set! (-> *camera-combiner* trans quad) (-> arg0 quad))
   (let ((a2-0 (-> *camera-combiner* inv-camera-rot))
         (v1-10 (-> arg1 vector 0 quad))
         (a0-4 (-> arg1 vector 1 quad))
         (a1-2 (-> arg1 vector 2 quad))
         (a3-0 (-> arg1 vector 3 quad))
         )
    (set! (-> a2-0 vector 0 quad) v1-10)
    (set! (-> a2-0 vector 1 quad) a0-4)
    (set! (-> a2-0 vector 2 quad) a1-2)
    (set! (-> a2-0 vector 3 quad) a3-0)
    )
   (send-event *camera* 'change-state cam-fixed 0)
   )
  arg0
  )

)


(define-extern cam-debug-add-los-tri (function (inline-array collide-cache-tri) vector vector none))
(defun cam-debug-add-los-tri ((a (inline-array collide-cache-tri)) (b vector) (c vector))
  (none)
  )
(defun cam-collision-record-save ((a vector) (b vector) (c int) (d symbol) (e camera-slave))
  (none)
  )
(define-extern slave-los-state->string (function slave-los-state string))
(define-extern cam-debug-reset-coll-tri (function none)) ;; not confirmed

(when (or (not *camera-old-cpu*) (zero? *camera-old-cpu*))
  (set! *camera-old-cpu* 0)
  0
  )

;; failed to figure out what this is:
(when (or (not *camera-old-vu*) (zero? *camera-old-vu*))
  (set! *camera-old-vu* 0)
  0
  )

;; failed to figure out what this is:
(when (or (not *camera-old-tfrag-bytes*) (zero? *camera-old-tfrag-bytes*))
  (set! *camera-old-tfrag-bytes* 0)
  0
  )

;; definition (perm) for symbol *camera-old-level*, type string
(define-perm *camera-old-level* string (new 'global 'string 128 (the-as string #f)))

;; definition (perm) for symbol *camera-old-stat-string-tfrag*, type string
(define-perm *camera-old-stat-string-tfrag* string (new 'global 'string 128 (the-as string #f)))

;; definition (perm) for symbol *camera-old-stat-string-tfrag-near*, type string
(define-perm *camera-old-stat-string-tfrag-near* string (new 'global 'string 128 (the-as string #f)))

;; definition (perm) for symbol *camera-old-stat-string-total*, type string
(define-perm *camera-old-stat-string-total* string (new 'global 'string 128 (the-as string #f)))
