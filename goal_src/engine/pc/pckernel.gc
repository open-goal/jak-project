;;-*-Lisp-*-
(in-package goal)

#|

  This file contains code that we need for the PC port of the game specifically.
  It should be included as part of the game engine package (engine.cgo).

  This file contains various types and functions to store PC-specific information
  and also to communicate between the game (GOAL) and the operating system.
  This way we can poll, change and display information about the system the game
  is running on, such as:
  - display devices and their settings, such as fullscreen, DPI, refresh rate, etc.
  - audio devices and their settings, such as audio latency, channel number, etc.
  - graphics devices and their settings, such as resolution, FPS, anisotropy, shaders, etc.
  - input devices and their settings, such as controllers, keyboards, mice, etc.
  - information about the game window (position, size)
  - PC-specific goodies, enhancements, fixes and settings.
  - whatever else.

  If you do not want to include these PC things, you should exclude it from the build system.

 |#


(#when PC_PORT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; updates
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(defmethod set-fullscreen! pc-settings ((obj pc-settings) (mode symbol))
  "toggles fullscreen mode"
  
  (if (= (-> obj fullscreen?) mode) ;; already fullscreen
    (return 0))
  
  (set! (-> obj fullscreen?) mode)
  (pc-set-fullscreen
          (cond ((= mode 'borderless) 2)
                (mode 1)
                (else 0)
                )
          0)
  0)

(defmethod set-size! pc-settings ((obj pc-settings) (width int) (height int))
  "toggles fullscreen mode"
  
  (pc-set-window-size width height)
  0)


(defmethod set-aspect! pc-settings ((obj pc-settings) (aw int) (ah int))
  (let ((aspect (/ (the float aw) (the float ah))))
    (set! (-> *pc-settings* aspect-ratio) aspect)
    (set! (-> *pc-settings* aspect-ratio-auto?) #f)
    (set! (-> *pc-settings* use-vis?) #f)
    )
  0)



(defmethod update-from-os pc-settings ((obj pc-settings))
  "Update settings from the PC kernel to GOAL."
  
  (set! (-> obj os) (pc-get-os))
  (pc-get-window-size (&-> obj win-width) (&-> obj win-height))
  (pc-get-window-scale (&-> obj dpi-x) (&-> obj dpi-y))
  
  (when (-> obj use-vis?)
    (if (= (-> *setting-control* default aspect-ratio) 'aspect4x3)
        (set! (-> obj aspect-ratio) ASPECT_4X3)
        (set! (-> obj aspect-ratio) ASPECT_16X9)
        )
    (set! (-> obj aspect-ratio-auto?) #f)
    )
  
  (let ((win-aspect (/ (the float (-> obj win-width)) (the float (-> obj win-height)))))
    (cond
      ((-> obj aspect-ratio-auto?)
       ;; the window determines the resolution
       (set! (-> obj aspect-ratio) win-aspect)
       (set! (-> obj width) (-> obj win-width))
       (set! (-> obj height) (-> obj win-height))
       )
      ((> win-aspect (-> obj aspect-ratio))
       ;; too wide
       (set! (-> obj width) (the int (* (-> obj aspect-ratio) (the float (-> obj win-height)))))
       (set! (-> obj height) (-> obj win-height))
       )
      ((< win-aspect (-> obj aspect-ratio))
       ;; too tall
       (set! (-> obj width) (-> obj win-width))
       (set! (-> obj height) (the int (/ (the float (-> obj win-width)) (-> obj aspect-ratio))))
       )
      (else
       ;; just right
       (set! (-> obj width) (-> obj win-width))
       (set! (-> obj height) (-> obj win-height))
       )
      )
    )
  

  (none))

(defmethod update-to-os pc-settings ((obj pc-settings))
  "Update settings from GOAL to the PC kernel."
  
  (cond
    ((-> obj letterbox?)
     (pc-set-letterbox (-> obj width) (-> obj height))
     )
    (else
     (pc-set-letterbox (-> obj win-width) (-> obj win-height))
     )
    )
  
  (none))

(defmethod update pc-settings ((obj pc-settings))
  "Update settings to/from PC kernel. Call this at the start of every frame.
   This will update things like the aspect-ratio, which will be used for graphics code later."

  (update-from-os obj)
  (update-to-os obj)

  (when (not (-> obj use-vis?))
    (set! (-> *video-parms* relative-x-scale) (/ ASPECT_4X3 (-> obj aspect-ratio)))
    (set! (-> *video-parms* relative-x-scale-reciprical) (/ (-> obj aspect-ratio) ASPECT_4X3))
    (set! (-> *font-default-matrix* vector 0 x) (-> *video-parms* relative-x-scale))
    )
  (if (and *debug-segment* (-> obj debug-pad-display))
    (debug-pad-display (-> *cpad-list* cpads 0))
    )

  (none))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(when *debug-segment*

(defmethod draw pc-settings ((obj pc-settings) (buf dma-buffer))
  "debug draw"
  
  (clear *pc-temp-string*)
  (format *pc-temp-string* "game resolution: ~D x ~D~%" (-> obj width) (-> obj height))
  (format *pc-temp-string* "window size: ~D x ~D (~,,1f x ~,,1f)~%" (-> obj win-width) (-> obj win-height) (-> obj dpi-x) (-> obj dpi-y))
  (format *pc-temp-string* "target aspect: ~,,3f/~,,3f A: ~A/~A L: ~A~%" (-> obj aspect-ratio) (/ (the float (-> obj win-width)) (the float (-> obj win-height))) (-> obj aspect-ratio-auto?) (-> obj use-vis?) (-> obj letterbox?))
  (format *pc-temp-string* "fullscreen: ~A ~A~%" (-> obj fullscreen?) (-> obj vsync?))

  (draw-string-xy *pc-temp-string* buf 0 (- 240 (* 8 4)) (font-color default) (font-flags shadow kerning))
  
  (none))

)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; file IO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(defmethod read-from-file pc-settings ((obj pc-settings) (filename string))
  "read settings from a file"
  
  (if (not filename)
    (return #f))
  
  (let ((file (new 'stack 'file-stream filename 'read)))
    (if (not (file-stream-valid? file))
      (return #f))
    
    (file-stream-close file)
    )
  
  (format 0 "pc settings file read: ~A~%" filename)
  
  #t
  )

(defmethod write-to-file pc-settings ((obj pc-settings) (filename string))
  "write settings to a file"
  
  (if (not filename)
    (return #f))
  
  (let ((file (new 'stack 'file-stream filename 'write)))
    (if (not (file-stream-valid? file))
      (return #f))
    

    (format file "(settings #x~X~%" (-> obj version))

    (format file "  (fps ~D)~%" (-> obj target-fps))
    (format file "  (size ~D ~D)~%" (-> obj width) (-> obj height))
    (format file "  (aspect ~D ~D)~%" (-> obj aspect-custom-x) (-> obj aspect-custom-y))
    (format file "  (aspect-auto ~A)~%" (-> obj aspect-ratio-auto?))
    (format file "  (fullscreen ~A)~%" (-> obj fullscreen?))
    (format file "  (letterbox ~A)~%" (-> obj letterbox?))
    (format file "  (vsync ~A)~%" (-> obj vsync?))
    (format file "  (font-scale ~f)~%" (-> obj font-scale))

    (format file "  (audio-latency-ms ~D)~%" (-> obj audio-latency-ms))
    (format file "  (audio-pan-override ~f)~%" (-> obj audio-pan-override))
    (format file "  (audio-volume-override ~f)~%" (-> obj audio-volume-override))
    (format file "  (audio-channel-nb ~D)~%" (-> obj audio-channel-nb))

    (format file "  (gfx-renderer ~D)~%" (-> obj gfx-renderer))
    (format file "  (gfx-resolution ~f)~%" (-> obj gfx-resolution))
    (format file "  (gfx-anisotropy ~f)~%" (-> obj gfx-anisotropy))
    (format file "  (shrub-dist-mod ~f)~%" (-> obj shrub-dist-mod))
    (format file "  (lod-dist-mod ~f)~%" (-> obj lod-dist-mod))
    (format file "  (lod-force-tfrag ~D)~%" (-> obj lod-force-tfrag))
    (format file "  (lod-force-tie ~D)~%" (-> obj lod-force-tie))
    (format file "  (lod-force-ocean ~D)~%" (-> obj lod-force-ocean))
    (format file "  (lod-force-actor ~D)~%" (-> obj lod-force-actor))

    (format file "  (stick-deadzone ~f)~%" (-> obj stick-deadzone))

    (format file "  (ps2-read-speed? ~A)~%" (-> obj ps2-read-speed?))
    (format file "  (ps2-parts? ~A)~%" (-> obj ps2-parts?))
    (format file "  (ps2-music? ~A)~%" (-> obj ps2-music?))
    (format file "  (ps2-se? ~A)~%" (-> obj ps2-se?))
    (format file "  (ps2-hints? ~A)~%" (-> obj ps2-hints?))
    (format file "  (ps2-lod-dist? ~A)~%" (-> obj ps2-lod-dist?))
    (format file "  (music-fade? ~A)~%" (-> obj music-fade?))
    (format file "  (use-vis? ~A)~%" (-> obj use-vis?))
    (format file "  (skip-movies? ~A)~%" (-> obj skip-movies?))
    (format file "  (subtitles? ~A)~%" (-> obj subtitles?))
    (format file "  (hinttitles? ~A)~%" (-> obj hinttitles?))
    (format file "  (subtitle-language ~D)~%" (-> obj subtitle-language))

    (format file "  (scenes-seen")
    (dotimes (i 197)
      (if (zero? (mod i 16))
        (format file "~%   ")
        )
      (format file " ~D" (-> obj scenes-seen i))
      )
    (format file "~%    )~%")

    (format file "  (fixes~%")
    (format file "    (crash-sagecage ~A)~%" (-> obj fixes crash-sagecage))
    (format file "    (crash-dma ~A)~%" (-> obj fixes crash-dma))
    (format file "    (crash-light-eco ~A)~%" (-> obj fixes crash-light-eco))
    (format file "    (lockout-pelican ~A)~%" (-> obj fixes lockout-pelican))
    (format file "    (lockout-pipegame ~A)~%" (-> obj fixes lockout-pipegame))
    (format file "    (lockout-gambler ~A)~%" (-> obj fixes lockout-gambler))
    (format file "    (fix-movies ~A)~%" (-> obj fixes fix-movies))
    (format file "    (fix-credits ~A)~%" (-> obj fixes fix-credits))
    (format file "    )~%")

    (format file "  (secrets~%")
    (format file "    (art #x~X)~%" (-> obj secrets art))
    (format file "    (hard-rats? ~A)~%" (-> obj secrets hard-rats?))
    (format file "    (hero-mode? ~A)~%" (-> obj secrets hero-mode?))
    (format file "    (hud-map? ~A)~%" (-> obj secrets hud-map?))
    (format file "    (hud-counters? ~A)~%" (-> obj secrets hud-counters?))
    (format file "    (hard-fish-hiscore ~D)~%" (-> obj secrets hard-fish-hiscore))
    (format file "    (hard-rats-hiscore ~D)~%" (-> obj secrets hard-rats-hiscore))
    (format file "    (hard-rats-hiwave ~D)~%" (-> obj secrets hard-rats-hiwave))
    (format file "    (music")
    (dotimes (i 30)
      (if (zero? (mod i 4))
        (format file "~%     ")
        )
      (format file " #x~X" (-> obj secrets music i))
      )
    (format file "~%      )~%")
    (format file "    )~%")

    (format file "  )~%")
    (file-stream-close file)
    )
  
  (format 0 "pc settings file write: ~A~%" filename)
  
  #t
  )


(defmethod new pc-settings ((allocation symbol) (type-to-make type) (filename string))
  "make a new pc-settings"
  
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    
    (reset obj)
    (read-from-file obj filename)
    
    obj
    )
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; PC settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define *pc-settings* (new 'global 'pc-settings PC_SETTINGS_FILE_NAME))



)



