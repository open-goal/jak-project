;;-*-Lisp-*-
(in-package goal)

;; name: lurkercrab.gc
;; name in dgo: lurkercrab
;; dgos: BEA, L1

(define-extern *lurkercrab-sg* skeleton-group)
(declare-type lurkercrab nav-enemy)
(define-extern lurkercrab-pushed (state lurkercrab))

;; DECOMP BEGINS

(set!
  (-> *part-group-id-table* 159)
  (new 'static 'sparticle-launch-group
   :length 2
   :duration #xbb8
   :linger-duration #x5dc
   :name "group-lurkercrab-slide"
   :launcher
   (new 'static 'inline-array sparticle-group-item 2
    (sp-item 663 :fade-after (meters 40.0) :falloff-to (meters 40.0))
    (sp-item 664 :fade-after (meters 40.0) :falloff-to (meters 40.0))
    )
   :bounds
   (new 'static 'sphere :y -49152.0 :w 57344.0)
   )
  )

(set!
  (-> *part-id-table* 663)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 16
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-rnd-flt spt-num 0.3 0.3 1.0)
    (sp-flt spt-y (meters -2.0))
    (sp-rnd-flt spt-scale-x (meters 2.0) (meters 2.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 100.0 30.0 1.0)
    (sp-rnd-flt spt-g 80.0 20.0 1.0)
    (sp-rnd-flt spt-b 30.0 30.0 1.0)
    (sp-rnd-flt spt-a 16.0 48.0 1.0)
    (sp-flt spt-vel-y (meters 0.0033333334))
    (sp-flt spt-scalevel-x (meters 0.033333335))
    (sp-flt spt-fade-a -0.21333334)
    (sp-flt spt-accel-y -0.13653333)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit12)
    (sp-end)
    )
   )
  )

(set!
  (-> *part-id-table* 664)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 18
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-rnd-flt spt-num 0.1 1.0 1.0)
    (sp-flt spt-y (meters -2.0))
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.2) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 75.0 60.0 1.0)
    (sp-rnd-flt spt-g 60.0 20.0 1.0)
    (sp-rnd-flt spt-b 23.0 30.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-y (meters 0.026666667) (meters 0.026666667) 1.0)
    (sp-flt spt-fade-a -0.42666668)
    (sp-flt spt-accel-y -6.826667)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit12)
    (sp-rnd-flt spt-conerot-x (degrees 30.0) (degrees 30.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-flt spt-conerot-radius (meters 0.2))
    (sp-end)
    )
   )
  )

(deftype lurkercrab (nav-enemy)
  ((orient basic  :offset-assert 400)
   )
  :heap-base #x130
  :method-count-assert 76
  :size-assert         #x194
  :flag-assert         #x4c01300194
  )


(let
  ((v1-4
    (new 'static 'skeleton-group
     :art-group-name "lurkercrab"
     :bounds (new 'static 'vector :w 10240.0)
     :max-lod 2
     :version #x6
     )
    )
   )
  (set! (-> v1-4 jgeo) 0)
  (set! (-> v1-4 janim) 4)
  (set! (-> v1-4 mgeo 0) (the-as uint 1))
  (set! (-> v1-4 lod-dist 0) 81920.0)
  (set! (-> v1-4 mgeo 1) (the-as uint 2))
  (set! (-> v1-4 lod-dist 1) 163840.0)
  (set! (-> v1-4 mgeo 2) (the-as uint 3))
  (set! (-> v1-4 lod-dist 2) 4095996000.0)
  (set! *lurkercrab-sg* v1-4)
  )

(defmethod
  dummy-44
  lurkercrab
  ((obj lurkercrab) (arg0 process) (arg1 event-message-block))
  (if
   (and
    (logtest? (-> obj nav-enemy-flags) 64)
    ((method-of-type touching-shapes-entry prims-touching?)
     (the-as touching-shapes-entry (-> arg1 param 0))
     (-> obj collide-info)
     (the-as uint 1)
     )
    )
   (nav-enemy-send-attack
    arg0
    (the-as touching-shapes-entry (-> arg1 param 0))
    'generic
    )
   )
  (dummy-55 (-> obj collide-info) arg0 (-> arg1 param 0) 0.7 6144.0 16384.0)
  (the-as object (if (zero? (logand (-> obj nav-enemy-flags) 256))
                  (dummy-45 (-> obj collide-info))
                  )
   )
  )

;; WARN: rewrite_to_get_var got a none typed variable. Is there unreachable code?
;; WARN: rewrite_to_get_var got a none typed variable. Is there unreachable code?
;; WARN: rewrite_to_get_var got a none typed variable. Is there unreachable code?
;; WARN: rewrite_to_get_var got a none typed variable. Is there unreachable code?
(defmethod
  dummy-43
  lurkercrab
  ((obj lurkercrab) (arg0 process) (arg1 event-message-block))
  (let ((s5-0 (-> obj incomming-attack-id)))
   (set! (-> obj incomming-attack-id) (the-as handle (-> arg1 param 2)))
   (let ((v1-1 (-> arg1 param 1)))
    (the-as object (cond
                    ((or (= v1-1 'flop) (= v1-1 'explode) (= v1-1 'darkeco))
                     (logclear! (-> obj mask) (process-mask actor-pause))
                     (go (method-of-object obj nav-enemy-die))
                     )
                    ((= v1-1 'punch)
                     (cond
                      ((logtest? (-> obj nav-enemy-flags) 32)
                       (logclear! (-> obj mask) (process-mask actor-pause))
                       (go (method-of-object obj nav-enemy-die))
                       )
                      ((begin
                        (let ((s4-0 (new 'stack-no-clear 'vector)))
                         (let ((f30-0 (quaternion-xz-angle (target-rot))))
                          (set-vector!
                           s4-0
                           (* 24576.0 (sin f30-0))
                           0.0
                           (* 24576.0 (cos f30-0))
                           1.0
                           )
                          )
                         (vector+! s4-0 (-> obj collide-info trans) s4-0)
                         (set! (-> obj nav target-pos quad) (-> s4-0 quad))
                         )
                        (go lurkercrab-pushed)
                        (= s5-0 (-> obj incomming-attack-id))
                        )
                       'push
                       )
                      (else
                       #t
                       )
                      )
                     )
                    ((logtest? (-> obj nav-enemy-flags) 32)
                     (logclear! (-> obj mask) (process-mask actor-pause))
                     (go (method-of-object obj nav-enemy-die))
                     )
                    ((begin
                      (let ((s4-1 (new 'stack-no-clear 'vector)))
                       (vector-!
                        s4-1
                        (-> obj collide-info trans)
                        (target-pos 0)
                        )
                       (vector-normalize! s4-1 24576.0)
                       (vector+! s4-1 (-> obj collide-info trans) s4-1)
                       (set! (-> obj nav target-pos quad) (-> s4-1 quad))
                       )
                      (go lurkercrab-pushed)
                      (= s5-0 (-> obj incomming-attack-id))
                      )
                     'push
                     )
                    (else
                     #t
                     )
                    )
     )
    )
   )
  )

nav-enemy-default-event-handler

(defmethod TODO-RENAME-37 lurkercrab ((obj lurkercrab))
  (when (-> obj orient)
   (if (logtest? (nav-control-flags bit19) (-> obj nav flags))
    (seek-to-point-toward-point!
     (-> obj collide-info)
     (-> obj nav target-pos)
     (-> obj rotate-speed)
     (-> obj turn-time)
     )
    (seek-toward-heading-vec!
     (-> obj collide-info)
     (-> obj nav travel)
     (-> obj rotate-speed)
     (-> obj turn-time)
     )
    )
   )
  (if (not (-> obj orient))
   (quaternion-rotate-y!
    (-> obj collide-info quat)
    (-> obj collide-info quat)
    (* 163840.0 (-> *display* seconds-per-frame))
    )
   )
  0
  (none)
  )

(defmethod TODO-RENAME-38 lurkercrab ((obj lurkercrab))
  (dummy-59
   (-> obj collide-info)
   (-> obj collide-info transv)
   (the-as uint 1)
   8192.0
   #f
   #f
   #f
   )
  0
  (none)
  )

(defstate nav-enemy-idle (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :exit
  (behavior ()
   (set! (-> self draw force-lod) -1)
   (none)
   )
  :code
  (behavior ()
   (set! (-> self target-speed) 0.0)
   (set! (-> self draw force-lod) 2)
   (ja-channel-push! 1 22)
   (while #t
    (let ((gp-0 (-> self skel root-channel 0)))
     (joint-control-channel-group-eval!
      gp-0
      (the-as art-joint-anim (-> self draw art-group data 4))
      num-func-identity
      )
     (set! (-> gp-0 frame-num) (ja-aframe 1.0 0))
     )
    (let ((gp-1 (-> *display* base-frame-counter)))
     (until (>= (- (-> *display* base-frame-counter) gp-1) 900)
      (suspend)
      )
     )
    (let ((gp-2 (-> self skel root-channel 0)))
     (set!
      (-> gp-2 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 4))
      )
     (set! (-> gp-2 param 0) (ja-aframe 19.0 0))
     (set! (-> gp-2 param 1) 1.0)
     (set! (-> gp-2 frame-num) (ja-aframe 1.0 0))
     (joint-control-channel-group!
      gp-2
      (the-as art-joint-anim (-> self draw art-group data 4))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-3 (-> self skel root-channel 0)))
      (set! (-> gp-3 param 0) (ja-aframe 19.0 0))
      (set! (-> gp-3 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-3
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (let ((gp-4 (-> self skel root-channel 0)))
     (set! (-> gp-4 num-func) num-func-identity)
     (set! (-> gp-4 frame-num) (ja-aframe 19.0 0))
     )
    (let ((gp-5 (-> *display* base-frame-counter)))
     (until (>= (- (-> *display* base-frame-counter) gp-5) 300)
      (suspend)
      )
     )
    (let ((gp-6 (-> self skel root-channel 0)))
     (set!
      (-> gp-6 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 4))
      )
     (set! (-> gp-6 param 0) (ja-aframe 1.0 0))
     (set! (-> gp-6 param 1) 1.0)
     (set! (-> gp-6 frame-num) (ja-aframe 19.0 0))
     (joint-control-channel-group!
      gp-6
      (the-as art-joint-anim (-> self draw art-group data 4))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-7 (-> self skel root-channel 0)))
      (set! (-> gp-7 param 0) (ja-aframe 1.0 0))
      (set! (-> gp-7 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-7
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  )

(defbehavior lurkercrab-invulnerable lurkercrab ()
  (set! (-> self nav-enemy-flags) (logand -33 (-> self nav-enemy-flags)))
  (let ((v1-3 (dummy-34 (-> self collide-info) (the-as uint 2))))
   (when v1-3
    (let ((v0-1 4))
     (set! (-> v1-3 prim-core offense) v0-1)
     v0-1
     )
    )
   )
  )

(defbehavior lurkercrab-vulnerable lurkercrab ()
  (logior! (-> self nav-enemy-flags) 32)
  (let ((v1-3 (dummy-34 (-> self collide-info) (the-as uint 2))))
   (when v1-3
    (let ((v0-1 1))
     (set! (-> v1-3 prim-core offense) v0-1)
     v0-1
     )
    )
   )
  )

(defstate nav-enemy-patrol (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :exit
  (behavior ()
   (lurkercrab-invulnerable)
   (set! (-> self nav-enemy-flags) (logand -65 (-> self nav-enemy-flags)))
   (logior! (-> self nav-enemy-flags) 8)
   (none)
   )
  :code
  (behavior ()
   (when (= (if (> (-> self skel active-channels) 0)
             (-> self skel root-channel 0 frame-group)
             )
          (-> self draw art-group data 4)
          )
    (let ((a0-4 (-> self skel root-channel 0)))
     (set!
      (-> a0-4 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 5))
      )
     (set!
      (-> a0-4 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 5))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-4 param 1) 1.0)
     (set! (-> a0-4 frame-num) 0.0)
     (joint-control-channel-group!
      a0-4
      (the-as art-joint-anim (-> self draw art-group data 5))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-5 (-> self skel root-channel 0)))
      (set!
       (-> a0-5 param 0)
       (the float (+ (-> a0-5 frame-group data 0 length) -1))
       )
      (set! (-> a0-5 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-5
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (ja-channel-push! 1 22)
   (while #t
    (dotimes (gp-0 6)
     (let ((a0-8 (-> self skel root-channel 0)))
      (set!
       (-> a0-8 frame-group)
       (the-as art-joint-anim (-> self draw art-group data 6))
       )
      (set!
       (-> a0-8 param 0)
       (the
        float
        (+
         (->
          (the-as art-joint-anim (-> self draw art-group data 6))
          data
          0
          length
          )
         -1
         )
        )
       )
      (set! (-> a0-8 param 1) 1.0)
      (set! (-> a0-8 frame-num) 0.0)
      (joint-control-channel-group!
       a0-8
       (the-as art-joint-anim (-> self draw art-group data 6))
       num-func-seek!
       )
      )
     (until (ja-done? 0)
      (suspend)
      (let ((a0-9 (-> self skel root-channel 0)))
       (set!
        (-> a0-9 param 0)
        (the float (+ (-> a0-9 frame-group data 0 length) -1))
        )
       (set! (-> a0-9 param 1) 1.0)
       (joint-control-channel-group-eval!
        a0-9
        (the-as art-joint-anim #f)
        num-func-seek!
        )
       )
      )
     )
    (when (nav-enemy-rnd-go-idle? 0.2)
     (let ((a0-12 (-> self skel root-channel 0)))
      (set! (-> a0-12 param 0) 1.0)
      (joint-control-channel-group!
       a0-12
       (the-as art-joint-anim #f)
       num-func-loop!
       )
      )
     (ja-channel-push! 1 180)
     (set! (-> self nav-enemy-flags) (logand -9 (-> self nav-enemy-flags)))
     (nav-enemy-rnd-int-range 2 6)
     (until (not (nav-enemy-rnd-go-idle? 0.2))
      (let ((gp-1 (-> self skel root-channel 0)))
       (joint-control-channel-group-eval!
        gp-1
        (the-as art-joint-anim (-> self draw art-group data 4))
        num-func-identity
        )
       (set! (-> gp-1 frame-num) (ja-aframe 1.0 0))
       )
      (let ((gp-2 (-> *display* base-frame-counter)))
       (until (>= (- (-> *display* base-frame-counter) gp-2) 600)
        (suspend)
        )
       )
      )
     (logior! (-> self nav-enemy-flags) 8)
     (let ((a0-19 (-> self skel root-channel 0)))
      (set!
       (-> a0-19 frame-group)
       (the-as art-joint-anim (-> self draw art-group data 5))
       )
      (set!
       (-> a0-19 param 0)
       (the
        float
        (+
         (->
          (the-as art-joint-anim (-> self draw art-group data 5))
          data
          0
          length
          )
         -1
         )
        )
       )
      (set! (-> a0-19 param 1) 1.0)
      (set! (-> a0-19 frame-num) 0.0)
      (joint-control-channel-group!
       a0-19
       (the-as art-joint-anim (-> self draw art-group data 5))
       num-func-seek!
       )
      )
     (until (ja-done? 0)
      (suspend)
      (let ((a0-20 (-> self skel root-channel 0)))
       (set!
        (-> a0-20 param 0)
        (the float (+ (-> a0-20 frame-group data 0 length) -1))
        )
       (set! (-> a0-20 param 1) 1.0)
       (joint-control-channel-group-eval!
        a0-20
        (the-as art-joint-anim #f)
        num-func-seek!
        )
       )
      )
     )
    (let ((gp-3 (-> self skel root-channel 0)))
     (set!
      (-> gp-3 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 7))
      )
     (set! (-> gp-3 param 0) (ja-aframe 30.0 0))
     (set! (-> gp-3 param 1) 1.0)
     (set! (-> gp-3 frame-num) (ja-aframe 1.0 0))
     (joint-control-channel-group!
      gp-3
      (the-as art-joint-anim (-> self draw art-group data 7))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-4 (-> self skel root-channel 0)))
      (set! (-> gp-4 param 0) (ja-aframe 30.0 0))
      (set! (-> gp-4 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-4
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (lurkercrab-vulnerable)
    (logior! (-> self nav-enemy-flags) 64)
    (dotimes (gp-5 2)
     (let ((s5-0 (-> self skel root-channel 0)))
      (set!
       (-> s5-0 frame-group)
       (the-as art-joint-anim (-> self draw art-group data 7))
       )
      (set! (-> s5-0 param 0) (ja-aframe 60.0 0))
      (set! (-> s5-0 param 1) 1.0)
      (set! (-> s5-0 frame-num) (ja-aframe 30.0 0))
      (joint-control-channel-group!
       s5-0
       (the-as art-joint-anim (-> self draw art-group data 7))
       num-func-seek!
       )
      )
     (until (ja-done? 0)
      (suspend)
      (let ((s5-1 (-> self skel root-channel 0)))
       (set! (-> s5-1 param 0) (ja-aframe 60.0 0))
       (set! (-> s5-1 param 1) 1.0)
       (joint-control-channel-group-eval!
        s5-1
        (the-as art-joint-anim #f)
        num-func-seek!
        )
       )
      )
     )
    (lurkercrab-invulnerable)
    (set! (-> self nav-enemy-flags) (logand -65 (-> self nav-enemy-flags)))
    (let ((gp-6 (-> self skel root-channel 0)))
     (set!
      (-> gp-6 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 8))
      )
     (set! (-> gp-6 param 0) (ja-aframe 90.0 0))
     (set! (-> gp-6 param 1) 1.0)
     (set! (-> gp-6 frame-num) (ja-aframe 60.0 0))
     (joint-control-channel-group!
      gp-6
      (the-as art-joint-anim (-> self draw art-group data 8))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-7 (-> self skel root-channel 0)))
      (set! (-> gp-7 param 0) (ja-aframe 90.0 0))
      (set! (-> gp-7 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-7
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  )

(defstate nav-enemy-notice (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :code
  (behavior ()
   (go-virtual nav-enemy-chase)
   (none)
   )
  )

(defstate nav-enemy-chase (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :exit
  (behavior ()
   (lurkercrab-invulnerable)
   (set! (-> self nav-enemy-flags) (logand -65 (-> self nav-enemy-flags)))
   (none)
   )
  :trans
  (behavior ()
   (if (logtest? (-> *target* state-flags) #x80f8)
    (go-virtual nav-enemy-victory)
    )
   (if (< (ja-aframe-num 0) 2.0)
    ((-> (method-of-type nav-enemy nav-enemy-chase) trans))
    )
   (none)
   )
  :code
  (behavior ()
   (logior! (-> self nav-enemy-flags) 8)
   (ja-channel-push! 1 22)
   (while #t
    (let ((a0-1 (-> self skel root-channel 0)))
     (set!
      (-> a0-1 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 6))
      )
     (set!
      (-> a0-1 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 6))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-1 param 1) 1.0)
     (set! (-> a0-1 frame-num) 0.0)
     (joint-control-channel-group!
      a0-1
      (the-as art-joint-anim (-> self draw art-group data 6))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-2 (-> self skel root-channel 0)))
      (set!
       (-> a0-2 param 0)
       (the float (+ (-> a0-2 frame-group data 0 length) -1))
       )
      (set! (-> a0-2 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-2
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (lurkercrab-vulnerable)
    (logior! (-> self nav-enemy-flags) 64)
    (let ((gp-0 (-> self skel root-channel 0)))
     (set!
      (-> gp-0 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 7))
      )
     (set! (-> gp-0 param 0) (ja-aframe 30.0 0))
     (set! (-> gp-0 param 1) 1.0)
     (set! (-> gp-0 frame-num) (ja-aframe 1.0 0))
     (joint-control-channel-group!
      gp-0
      (the-as art-joint-anim (-> self draw art-group data 7))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-1 (-> self skel root-channel 0)))
      (set! (-> gp-1 param 0) (ja-aframe 30.0 0))
      (set! (-> gp-1 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-1
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (let ((gp-2 (-> self skel root-channel 0)))
     (set!
      (-> gp-2 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 9))
      )
     (set! (-> gp-2 param 0) (ja-aframe 120.0 0))
     (set! (-> gp-2 param 1) 1.0)
     (set! (-> gp-2 frame-num) (ja-aframe 30.0 0))
     (joint-control-channel-group!
      gp-2
      (the-as art-joint-anim (-> self draw art-group data 9))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-3 (-> self skel root-channel 0)))
      (set! (-> gp-3 param 0) (ja-aframe 120.0 0))
      (set! (-> gp-3 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-3
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (let ((gp-4 (-> self skel root-channel 0)))
     (set!
      (-> gp-4 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 7))
      )
     (set! (-> gp-4 param 0) (ja-aframe 60.0 0))
     (set! (-> gp-4 param 1) 1.0)
     (set! (-> gp-4 frame-num) (ja-aframe 30.0 0))
     (joint-control-channel-group!
      gp-4
      (the-as art-joint-anim (-> self draw art-group data 7))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-5 (-> self skel root-channel 0)))
      (set! (-> gp-5 param 0) (ja-aframe 60.0 0))
      (set! (-> gp-5 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-5
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (let ((gp-6 (-> self skel root-channel 0)))
     (set!
      (-> gp-6 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 7))
      )
     (set! (-> gp-6 param 0) (ja-aframe 60.0 0))
     (set! (-> gp-6 param 1) 1.0)
     (set! (-> gp-6 frame-num) (ja-aframe 30.0 0))
     (joint-control-channel-group!
      gp-6
      (the-as art-joint-anim (-> self draw art-group data 7))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-7 (-> self skel root-channel 0)))
      (set! (-> gp-7 param 0) (ja-aframe 60.0 0))
      (set! (-> gp-7 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-7
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (lurkercrab-invulnerable)
    (set! (-> self nav-enemy-flags) (logand -65 (-> self nav-enemy-flags)))
    (let ((gp-8 (-> self skel root-channel 0)))
     (set!
      (-> gp-8 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 8))
      )
     (set! (-> gp-8 param 0) (ja-aframe 90.0 0))
     (set! (-> gp-8 param 1) 1.0)
     (set! (-> gp-8 frame-num) (ja-aframe 60.0 0))
     (joint-control-channel-group!
      gp-8
      (the-as art-joint-anim (-> self draw art-group data 8))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((gp-9 (-> self skel root-channel 0)))
      (set! (-> gp-9 param 0) (ja-aframe 90.0 0))
      (set! (-> gp-9 param 1) 1.0)
      (joint-control-channel-group-eval!
       gp-9
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (let ((a0-35 (-> self skel root-channel 0)))
     (set!
      (-> a0-35 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 6))
      )
     (set!
      (-> a0-35 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 6))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-35 param 1) 1.0)
     (set! (-> a0-35 frame-num) 0.0)
     (joint-control-channel-group!
      a0-35
      (the-as art-joint-anim (-> self draw art-group data 6))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-36 (-> self skel root-channel 0)))
      (set!
       (-> a0-36 param 0)
       (the float (+ (-> a0-36 frame-group data 0 length) -1))
       )
      (set! (-> a0-36 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-36
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    (let ((a0-38 (-> self skel root-channel 0)))
     (set!
      (-> a0-38 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 6))
      )
     (set!
      (-> a0-38 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 6))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-38 param 1) 1.0)
     (set! (-> a0-38 frame-num) 0.0)
     (joint-control-channel-group!
      a0-38
      (the-as art-joint-anim (-> self draw art-group data 6))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-39 (-> self skel root-channel 0)))
      (set!
       (-> a0-39 param 0)
       (the float (+ (-> a0-39 frame-group data 0 length) -1))
       )
      (set! (-> a0-39 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-39
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  )

(defstate nav-enemy-stop-chase (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :code
  (behavior ()
   (go-virtual nav-enemy-patrol)
   (none)
   )
  )

(defstate nav-enemy-stare (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :code
  (behavior ()
   (go-virtual nav-enemy-patrol)
   (none)
   )
  )

(defstate nav-enemy-victory (lurkercrab)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :code
  (behavior ()
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (ja-channel-push! 1 22)
   (let ((v1-4 (-> self skel root-channel 0)))
    (set!
     (-> v1-4 frame-group)
     (the-as
      art-joint-anim
      (-> self draw art-group data (-> self nav-info victory-anim))
      )
     )
    )
   (until
    (>=
     (- (-> *display* base-frame-counter) (the-as int (-> self state-time)))
     300
     )
    (let ((v1-7 (-> self skel root-channel 0)))
     (set! (-> v1-7 num-func) num-func-identity)
     (set! (-> v1-7 frame-num) 0.0)
     )
    (suspend)
    )
   (go-virtual nav-enemy-patrol)
   (none)
   )
  )

(defstate lurkercrab-pushed (lurkercrab)
  :event
  (the-as
   (function process int symbol event-message-block object :behavior lurkercrab)
   nav-enemy-default-event-handler
   )
  :exit
  (behavior ()
   (set! (-> self orient) #t)
   (none)
   )
  :code
  (behavior ()
   (set! (-> self momentum-speed) 57344.0)
   (set! (-> self target-speed) 0.0)
   (set! (-> self orient) #f)
   (let ((gp-0 (-> self skel root-channel 0)))
    (set!
     (-> gp-0 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 10))
     )
    (set! (-> gp-0 param 0) (ja-aframe 18.0 0))
    (set! (-> gp-0 param 1) 0.75)
    (set! (-> gp-0 frame-num) (ja-aframe 1.0 0))
    (joint-control-channel-group!
     gp-0
     (the-as art-joint-anim (-> self draw art-group data 10))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((gp-1 (-> self skel root-channel 0)))
     (set! (-> gp-1 param 0) (ja-aframe 18.0 0))
     (set! (-> gp-1 param 1) 0.75)
     (joint-control-channel-group-eval!
      gp-1
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (let ((gp-2 (-> *display* base-frame-counter)))
    (until (>= (- (-> *display* base-frame-counter) gp-2) 75)
     (suspend)
     )
    )
   (let ((gp-3 (-> *display* base-frame-counter)))
    (until (>= (- (-> *display* base-frame-counter) gp-3) 30)
     (suspend)
     )
    )
   (go-virtual nav-enemy-chase)
   (none)
   )
  :post
  (behavior ()
   (let ((a0-0 (-> self part))
         (a1-0 (-> self collide-info root-prim prim-core))
         )
    (spawn a0-0 (the-as vector a1-0))
    )
   (nav-enemy-travel-post)
   (none)
   )
  )

(define
  *lurkercrab-nav-enemy-info*
  (new 'static 'nav-enemy-info
   :idle-anim 4
   :walk-anim 6
   :turn-anim -1
   :notice-anim 4
   :run-anim 6
   :jump-anim 6
   :jump-land-anim 6
   :victory-anim 4
   :taunt-anim 4
   :die-anim 11
   :neck-joint -1
   :player-look-at-joint 5
   :run-travel-speed (meters 5.0)
   :run-rotate-speed (degrees 999.99994)
   :run-acceleration (meters 12.0)
   :run-turn-time #x1e
   :walk-travel-speed (meters 2.0)
   :walk-rotate-speed (degrees 999.99994)
   :walk-acceleration (meters 12.0)
   :walk-turn-time #x1e
   :attack-shove-back (meters 1.2)
   :attack-shove-up (meters 1.5)
   :shadow-size (meters 2.0)
   :notice-nav-radius (meters 1.0)
   :nav-nearest-y-threshold (meters 10.0)
   :notice-distance (meters 25.0)
   :stop-chase-distance (meters 35.0)
   :frustration-distance (meters 8.0)
   :frustration-time #x4b0
   :die-anim-hold-frame 4.0
   :jump-land-anim-end-frame 10000000000.0
   :jump-height-min (meters 1.0)
   :jump-height-factor 0.5
   :jump-start-anim-speed 1.0
   :shadow-max-y (meters 1.0)
   :shadow-min-y (meters -1.0)
   :shadow-locus-dist (meters 150.0)
   :use-align #f
   :draw-shadow #t
   :move-to-ground #t
   :hover-if-no-ground #f
   :use-momentum #t
   :use-flee #f
   :use-proximity-notice #f
   :use-jump-blocked #f
   :use-jump-patrol #f
   :gnd-collide-with #x1
   :debug-draw-neck #f
   :debug-draw-jump #f
   )
  )

(defmethod copy-defaults! lurkercrab ((obj lurkercrab) (arg0 res-lump))
  (let
   ((s4-0
     (new
      'process
      'collide-shape-moving
      obj
      (collide-list-enum usually-hit-by-player)
      )
     )
    )
   (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s4-0 reaction) default-collision-reaction)
   (set! (-> s4-0 no-reaction) nothing)
   (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 3) 0)))
    (set! (-> s3-0 prim-core collide-as) (the-as uint 256))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set-vector! (-> s3-0 local-sphere) 0.0 10240.0 0.0 12288.0)
    (dummy-46 s4-0)
    (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 2))))
     (set! (-> s2-0 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-0 collide-with) (the-as uint 16))
     (set! (-> s2-0 prim-core action) (the-as uint 1))
     (set! (-> s2-0 prim-core offense) 4)
     (set-vector! (-> s2-0 local-sphere) 0.0 4915.2 0.0 4096.0)
     )
    (dummy-28 s3-0)
    (let ((s2-1 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
     (set! (-> s2-1 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-1 collide-with) (the-as uint 16))
     (set! (-> s2-1 prim-core offense) 2)
     (set! (-> s2-1 transform-index) 16)
     (set-vector! (-> s2-1 local-sphere) 0.0 0.0 0.0 1638.4)
     )
    (dummy-28 s3-0)
    (let ((s2-2 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
     (set! (-> s2-2 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-2 collide-with) (the-as uint 16))
     (set! (-> s2-2 prim-core offense) 2)
     (set! (-> s2-2 transform-index) 21)
     (set-vector! (-> s2-2 local-sphere) 0.0 0.0 0.0 1638.4)
     )
    (dummy-28 s3-0)
    )
   (set! (-> s4-0 nav-radius) 4096.0)
   (dummy-50 s4-0)
   (set! (-> obj collide-info) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *lurkercrab-sg* '())
  (TODO-RENAME-45 obj *lurkercrab-nav-enemy-info*)
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 159) obj)
   )
  (set! (-> obj orient) #t)
  (set! (-> obj nav-enemy-flags) (logand -97 (-> obj nav-enemy-flags)))
  (set! (-> obj target-speed) 0.0)
  (set! (-> obj momentum-speed) 0.0)
  (set! (-> obj draw force-lod) 2)
  (go (method-of-object obj nav-enemy-idle))
  (none)
  )




