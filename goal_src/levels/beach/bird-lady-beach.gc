;;-*-Lisp-*-
(in-package goal)

;; name: bird-lady-beach.gc
;; name in dgo: bird-lady-beach
;; dgos: BEA, L1

(define-extern *bird-lady-beach-sg* skeleton-group)

;; definition of type bird-lady-beach
(deftype bird-lady-beach (process-taskable)
  ((flutflut handle  :offset-assert 384)
   (egg      handle  :offset-assert 392)
   )
  :heap-base #x120
  :method-count-assert 53
  :size-assert         #x190
  :flag-assert         #x3501200190
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "bird-lady-beach"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     :shadow 2
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 3)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 4095996000.0)
  (set! *bird-lady-beach-sg* v1-1)
  )

;; failed to figure out what this is:
(defstate idle (bird-lady-beach)
  :virtual #t
  :enter
  (behavior ()
   (when (not (should-display? self))
    (let ((a0-2 (handle->process (-> self flutflut))))
     (if a0-2
      (deactivate a0-2)
      )
     )
    (let ((a0-6 (handle->process (-> self egg))))
     (if a0-6
      (deactivate a0-6)
      )
     )
    (go-virtual hidden)
    )
   ((-> (method-of-type process-taskable idle) enter))
   (none)
   )
  )

;; definition for method 32 of type bird-lady-beach
(defmethod play-anim! bird-lady-beach ((obj bird-lady-beach) (arg0 symbol))
  (with-pp
   (case (current-status (-> obj tasks)) 
    ((6)
      (when arg0
       (set!
        (-> obj cell-for-task)
        (the-as game-task (current-task (-> obj tasks)))
        )
       (close-current! (-> obj tasks))
       (let ((s5-1 (get-process *default-dead-pool* manipy #x4000)))
        (set! (-> obj flutflut) (ppointer->handle (when s5-1
                                                   (let
                                                    ((t9-4
                                                      (method-of-type
                                                       manipy
                                                       activate
                                                       )
                                                      )
                                                     )
                                                    (t9-4
                                                     (the-as manipy s5-1)
                                                     obj
                                                     'manipy
                                                     (the-as pointer #x70004000)
                                                     )
                                                    )
                                                   ((the-as
                                                     (function process function object object object object object)
                                                     run-function-in-process
                                                     )
                                                    s5-1
                                                    manipy-init
                                                    (-> obj root trans)
                                                    (-> obj entity)
                                                    *flutflut-naked-sg*
                                                    #f
                                                    )
                                                   (-> s5-1 ppointer)
                                                   )
                                 )
         )
        )
       (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-4 from) pp)
        (set! (-> a1-4 num-params) 1)
        (set! (-> a1-4 message) 'anim-mode)
        (set! (-> a1-4 param 0) (the-as uint 'clone-anim))
        (send-event-function (handle->process (-> obj flutflut)) a1-4)
        )
       (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-5 from) pp)
        (set! (-> a1-5 num-params) 1)
        (set! (-> a1-5 message) 'blend-shape)
        (set! (-> a1-5 param 0) (the-as uint #t))
        (send-event-function (handle->process (-> obj flutflut)) a1-5)
        )
       (let ((s5-2 (get-process *default-dead-pool* manipy #x4000)))
        (set! (-> obj egg) (ppointer->handle (when s5-2
                                              (let
                                               ((t9-9
                                                 (method-of-type
                                                  manipy
                                                  activate
                                                  )
                                                 )
                                                )
                                               (t9-9
                                                (the-as manipy s5-2)
                                                obj
                                                'manipy
                                                (the-as pointer #x70004000)
                                                )
                                               )
                                              ((the-as
                                                (function process function object object object object object)
                                                run-function-in-process
                                                )
                                               s5-2
                                               manipy-init
                                               (-> obj root trans)
                                               (-> obj entity)
                                               *flutflutegg-sg*
                                               #f
                                               )
                                              (-> s5-2 ppointer)
                                              )
                            )
         )
        )
       (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-9 from) pp)
        (set! (-> a1-9 num-params) 1)
        (set! (-> a1-9 message) 'anim-mode)
        (set! (-> a1-9 param 0) (the-as uint 'clone-anim))
        (send-event-function (handle->process (-> obj egg)) a1-9)
        )
       )
      (new 'static 'spool-anim
       :name "bird-lady-beach-resolution"
       :index 4
       :parts 10
       :command-list
       '(
         ((the binteger 141)
           joint
           "cameraB"
           )
         ((the binteger 535)
          joint
          "camera"
          )
         ((the binteger 696)
          joint
          "cameraB"
          )
         ((the binteger 758)
          joint
          "camera"
          )
         ((the binteger 813) joint "cameraB")
         )
       )
      )
    (else
     (if arg0
      (format
       0
       "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
       (-> obj name)
       (task-status->string
        (the-as task-status (current-status (-> obj tasks)))
        )
       )
      )
     (-> obj draw art-group data 3)
     )
    )
   )
  )

;; definition for method 31 of type bird-lady-beach
(defmethod get-art-elem bird-lady-beach ((obj bird-lady-beach))
  (-> obj draw art-group data 3)
  )

;; definition for method 39 of type bird-lady-beach
(defmethod should-display? bird-lady-beach ((obj bird-lady-beach))
  (= (current-status (-> obj tasks)) 6)
  )

;; definition for method 11 of type bird-lady-beach
(defmethod copy-defaults! bird-lady-beach ((obj bird-lady-beach) (arg0 res-lump))
  (dummy-40
   obj
   arg0
   *bird-lady-beach-sg*
   3
   51
   (new 'static 'vector :y 4096.0 :w 4096.0)
   5
   )
  (set! (-> obj tasks) (get-task-control (game-task beach-flutflut)))
  (set! (-> obj sound-flava) (the-as uint 7))
  (dummy-42 obj)
  (none)
  )