;;-*-Lisp-*-
(in-package goal)

;; name: oracle.gc
;; name in dgo: oracle
;; dgos: CIT, L1, VI1, VI2, VI3, VILLAGEP

(define-extern *oracle-sg* skeleton-group)

;; definition of type oracle
(deftype oracle (process-taskable)
  ((first-task     uint8   :offset-assert 380)
   (second-task    uint8   :offset-assert 381)
   (left-eye-cell  handle  :offset-assert 384)
   (right-eye-cell handle  :offset-assert 392)
   )
  :heap-base #x120
  :method-count-assert 53
  :size-assert         #x190
  :flag-assert         #x3501200190
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "oracle"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 2)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 4095996000.0)
  (set! *oracle-sg* v1-1)
  )

;; definition for method 32 of type oracle
(defmethod play-anim! oracle ((obj oracle) (arg0 symbol))
  (with-pp
   (set! (-> obj talk-message) (the-as uint 260))
   (case (current-status (-> obj tasks)) 
    ((2 3)
      (when arg0
       (close-specific-task!
        (the-as game-task (-> obj first-task))
        (task-status need-introduction)
        )
       (close-specific-task!
        (the-as game-task (-> obj second-task))
        (task-status need-introduction)
        )
       )
      (case (-> (level-get-target-inside *level*) name) 
       (('village1)
         (new 'static 'spool-anim
          :name "oracle-intro-1"
          :index 9
          :parts 5
          :command-list '()
          )
         )
       (('village2)
        (new 'static 'spool-anim
         :name "oracle-intro-2"
         :index 11
         :parts 4
         :command-list
         '(
           (0
             kill
             "pontoonten-20"
             )
           (0
            kill
            "pontoonten-19"
            )
           (0
            kill
            "pontoonten-18"
            )
           (0
            kill
            "pontoonten-15"
            )
           (0
            kill
            "pontoonten-14"
            )
           (0
            kill
            "pontoonfive-14"
            )
           (0
            kill
            "pontoonfive-15"
            )
           (0
            kill
            "pontoonfive-19"
            )
           (0
            kill
            "pontoonfive-20"
            )
           (0
            kill
            "med-res-level-12"
            )
           (0
            kill
            "med-res-level-13"
            )
           (0
            kill
            "med-res-level-15"
            )
           (0
            kill
            "money-2844"
            )
           (0
            kill
            "money-2845"
            )
           (0
            kill
            "money-2846"
            )
           (0
            kill
            "money-2847"
            )
           (0
            kill
            "money-2848"
            )
           (0
            kill
            "money-2849"
            )
           (0
            kill
            "money-2850"
            )
           (0
            kill
            "money-2854"
            )
           (0
            kill
            "money-2855"
            )
           (0
            kill
            "money-2856"
            )
           (0
            kill
            "money-2860"
            )
           (0
            kill
            "money-2861"
            )
           (0
            kill
            "money-2862"
            )
           (0
            kill
            "eco-27"
            )
           (0
            kill
            "eco-26"
            )
           (0
            kill
            "sharkey-25"
            )
           (0
            kill
            "barrel-13"
            )
           (0
            kill
            "barrel-14"
            )
           (0
            kill
            "barrel-15"
            )
           (0
            kill
            "barrel-16"
            )
           (0
            kill
            "barrel-17"
            )
           (0
            kill
            "barrel-18"
            )
           (0
            kill
            "barrel-19"
            )
           (0
            kill
            "barrel-20"
            )
           (0
            kill
            "barrel-21"
            )
           (0
            kill
            "barrel-22"
            )
           (0
            kill
            "barrel-23"
            )
           (0
            kill
            "villageb-part-18"
            )
           (0
            kill
            "villageb-part-19"
            )
           (0
            kill
            "villageb-part-20"
            )
           (0
            kill
            "villageb-part-21"
            )
           (0
            kill
            "villageb-part-28"
            )
           (0
            kill
            "villageb-part-29"
            )
           (0
            kill
            "villageb-part-30"
            )
           (0
            kill
            "villageb-part-31"
            )
           (0
            kill
            "villageb-part-32"
            )
           (0
            kill
            "villageb-part-33"
            )
           (0
            kill
            "villageb-part-35"
            )
           (0
            kill
            "villageb-part-37"
            )
           (0
            kill
            "villageb-part-38"
            )
           (0
            kill
            "villageb-part-47"
            )
           (0
            kill
            "villageb-part-48"
            )
           (0
            kill
            "villageb-part-49"
            )
           (0
            kill
            "villageb-part-50"
            )
           (0
            kill
            "villageb-part-56"
            )
           (0
            kill
            "villageb-part-62"
            )
           (0
            kill
            "villageb-part-63"
            )
           (0
            kill
            "villageb-ogreboss-1"
            )
           (0
            kill
            "crate-3127"
            )
           (0
            kill
            "crate-3128"
            )
           (0
            kill
            "crate-3129"
            )
           (0
            kill
            "crate-3133"
            )
           (0
            kill
            "geologist-1"
            )
           (0
            kill
            "fireboulder-2"
            )
           (0
            kill
            "fireboulder-3"
            )
           (0
            kill
            "fireboulder-4"
            )
           (0
            kill
            "water-vol-100"
            )
           (0
            kill
            "water-vol-101"
            )
           (0
            kill
            "water-vol-102"
            )
           (0
            kill
            "water-vol-103"
            )
           (0
            kill
            "water-vol-284"
            )
           (0
            kill
            "water-vol-285"
            )
           (0
            kill
            "water-vol-286"
            )
           (0
            kill
            "ceilingflag-6"
            )
           (0
            kill
            "ceilingflag-7"
            )
           (0
            kill
            "ceilingflag-8"
            )
           (0
            kill
            "ceilingflag-9"
            )
           (0
            kill
            "orb-cache-top-14"
            )
           (0
            setting-reset
            ocean-off
            near
            )
           ((the binteger 399) setting-unset ocean-off)
           )
         )
        )
       (('village3)
        (new 'static 'spool-anim
         :name "oracle-intro-3"
         :index 13
         :parts 4
         :command-list '()
         )
        )
       )
      )
    ((5)
     (set! (-> obj skippable) #t)
     (case (-> (level-get-target-inside *level*) name) 
      (('village1)
        (new 'static 'spool-anim
         :name "oracle-reminder-1"
         :index 10
         :parts 4
         :command-list '()
         )
        )
      (('village2)
       (new 'static 'spool-anim
        :name "oracle-reminder-2"
        :index 12
        :parts 2
        :command-list '()
        )
       )
      (('village3)
       (new 'static 'spool-anim
        :name "oracle-reminder-3"
        :index 14
        :parts 2
        :command-list '()
        )
       )
      )
     )
    ((6)
     (cond
      (arg0
       (set!
        (-> obj cell-for-task)
        (the-as game-task (current-task (-> obj tasks)))
        )
       (close-current! (-> obj tasks))
       (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-5 from) pp)
        (set! (-> a1-5 num-params) 2)
        (set! (-> a1-5 message) 'get-pickup)
        (set! (-> a1-5 param 0) (the-as uint 5))
        (set!
         (-> a1-5 param 1)
         (the-as uint (- (-> *GAME-bank* money-oracle-inc)))
         )
        (send-event-function *target* a1-5)
        )
       (cond
        ((= (current-task (-> obj tasks)) (-> obj first-task))
         (let ((a0-25 (handle->process (-> obj right-eye-cell))))
          (if a0-25
           (deactivate a0-25)
           )
          )
         )
        (else
         (let ((a0-29 (handle->process (-> obj left-eye-cell))))
          (if a0-29
           (deactivate a0-29)
           )
          )
         )
        )
       )
      (else
       (set! (-> obj will-talk) #t)
       (set! (-> obj talk-message) (the-as uint 283))
       )
      )
     (cond
      ((= (current-task (-> obj tasks)) (-> obj first-task))
       (case (-> (level-get-target-inside *level*) name) 
        (('village1)
          (new 'static 'spool-anim
           :name "oracle-right-eye-1"
           :index 3
           :parts 2
           :command-list '()
           )
          )
        (('village2)
         (new 'static 'spool-anim
          :name "oracle-right-eye-2"
          :index 5
          :parts 2
          :command-list '()
          )
         )
        (('village3)
         (new 'static 'spool-anim
          :name "oracle-right-eye-3"
          :index 7
          :parts 2
          :command-list '()
          )
         )
        )
       )
      (else
       (case (-> (level-get-target-inside *level*) name) 
        (('village1)
          (new 'static 'spool-anim
           :name "oracle-left-eye-1"
           :index 4
           :parts 2
           :command-list '()
           )
          )
        (('village2)
         (new 'static 'spool-anim
          :name "oracle-left-eye-2"
          :index 6
          :parts 2
          :command-list '()
          )
         )
        (('village3)
         (new 'static 'spool-anim
          :name "oracle-left-eye-3"
          :index 8
          :parts 2
          :command-list '()
          )
         )
        )
       )
      )
     )
    (else
     (if arg0
      (format
       0
       "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
       (-> obj name)
       (task-status->string
        (the-as task-status (current-status (-> obj tasks)))
        )
       )
      )
     (-> obj draw art-group data 2)
     )
    )
   )
  )

;; definition for method 31 of type oracle
(defmethod get-art-elem oracle ((obj oracle))
  (-> obj draw art-group data 2)
  )

;; failed to figure out what this is:
(defstate idle (oracle)
  :virtual #t
  :exit
  (behavior ()
   (stop! (-> self sound))
   ((-> (method-of-type process-taskable idle) exit))
   (none)
   )
  :trans
  (behavior ()
   (update! (-> self sound))
   ((-> (method-of-type process-taskable idle) trans))
   (none)
   )
  )

;; definition for method 11 of type oracle
(defmethod copy-defaults! oracle ((obj oracle) (arg0 res-lump))
  (with-pp
   (dummy-40
    obj
    arg0
    *oracle-sg*
    3
    4
    (new 'static 'vector :y -4096.0 :w 4096.0)
    -1
    )
   (set!
    (-> obj sound)
    (new
     'process
     'ambient-sound
     (new 'static 'sound-spec
      :mask #x80
      :num 1.0
      :group #x1
      :sound-name-char
      (new 'static 'array uint8 16
       #x6f
       #x72
       #x61
       #x63
       #x6c
       #x65
       #x2d
       #x73
       #x6c
       #x65
       #x65
       #x70
       #x0
       #x0
       #x0
       #x0
       )
      :volume #x400
      :fo-max 50
      )
     (-> obj root trans)
     )
    )
   (set! (-> obj first-task) (the-as uint (-> arg0 extra perm task)))
   (set! (-> obj second-task) (res-lump-value arg0 'alt-task uint))
   (set!
    (-> obj tasks)
    (get-task-control (the-as game-task (-> obj first-task)))
    )
   (set! (-> obj right-eye-cell) (the-as handle #f))
   (set! (-> obj left-eye-cell) (the-as handle #f))
   (logior! (-> obj draw status) 32)
   (let ((s4-0 (new 'stack-no-clear 'vector))
         (s5-1 (lambda :behavior oracle () (let* ((gp-0 (-> self root))
                                                  (v1-1
                                                   (if
                                                    (and
                                                     (nonzero? gp-0)
                                                     (type-type?
                                                      (-> gp-0 type)
                                                      collide-shape
                                                      )
                                                     )
                                                    gp-0
                                                    )
                                                   )
                                                  (a1-1 (if v1-1
                                                         (->
                                                          (the-as
                                                           collide-shape
                                                           v1-1
                                                           )
                                                          root-prim
                                                          prim-core
                                                          )
                                                         (-> self root trans)
                                                         )
                                                   )
                                                  )
                                            (dummy-11
                                             (-> self part)
                                             (the-as vector a1-1)
                                             )
                                            )
                0
                (none)
                )
          )
         )
    (ja-post)
    (when
     (not
      (task-closed?
       (the-as game-task (-> obj first-task))
       (task-status need-resolution)
       )
      )
     (vector<-cspace! s4-0 (-> obj node-list data 5))
     (let ((s3-0 (get-process *default-dead-pool* manipy #x4000)))
      (set! (-> obj right-eye-cell) (ppointer->handle (when s3-0
                                                       (let
                                                        ((t9-8
                                                          (method-of-type
                                                           manipy
                                                           activate
                                                           )
                                                          )
                                                         )
                                                        (t9-8
                                                         (the-as manipy s3-0)
                                                         obj
                                                         'manipy
                                                         (the-as
                                                          pointer
                                                          #x70004000
                                                          )
                                                         )
                                                        )
                                                       (run-now-in-process
                                                        s3-0
                                                        manipy-init
                                                        s4-0
                                                        (-> obj entity)
                                                        *fuel-cell-sg*
                                                        (new 'static 'vector
                                                         :w 4915.2
                                                         )
                                                        )
                                                       (-> s3-0 ppointer)
                                                       )
                                     )
       )
      )
     (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-9 from) pp)
      (set! (-> a1-9 num-params) 1)
      (set! (-> a1-9 message) 'eval)
      (set!
       (-> a1-9 param 0)
       (the-as
        uint
        (lambda :behavior oracle
         ()
         (let
          ((v0-0 (create-launch-control (-> *part-group-id-table* 63) self)))
          (set! (-> self part) v0-0)
          (the-as sparticle-launch-group v0-0)
          )
         )
        )
       )
      (send-event-function (handle->process (-> obj right-eye-cell)) a1-9)
      )
     (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-10 from) pp)
      (set! (-> a1-10 num-params) 1)
      (set! (-> a1-10 message) 'trans-hook)
      (set! (-> a1-10 param 0) (the-as uint s5-1))
      (send-event-function (handle->process (-> obj right-eye-cell)) a1-10)
      )
     )
    (when
     (not
      (task-closed?
       (the-as game-task (-> obj second-task))
       (task-status need-resolution)
       )
      )
     (vector<-cspace! s4-0 (-> obj node-list data 6))
     (let ((s3-1 (get-process *default-dead-pool* manipy #x4000)))
      (set! (-> obj left-eye-cell) (ppointer->handle (when s3-1
                                                      (let
                                                       ((t9-15
                                                         (method-of-type
                                                          manipy
                                                          activate
                                                          )
                                                         )
                                                        )
                                                       (t9-15
                                                        (the-as manipy s3-1)
                                                        obj
                                                        'manipy
                                                        (the-as
                                                         pointer
                                                         #x70004000
                                                         )
                                                        )
                                                       )
                                                      (run-now-in-process
                                                       s3-1
                                                       manipy-init
                                                       s4-0
                                                       (-> obj entity)
                                                       *fuel-cell-sg*
                                                       (new 'static 'vector
                                                        :w 4915.2
                                                        )
                                                       )
                                                      (-> s3-1 ppointer)
                                                      )
                                    )
       )
      )
     (let ((a1-16 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-16 from) pp)
      (set! (-> a1-16 num-params) 1)
      (set! (-> a1-16 message) 'eval)
      (set!
       (-> a1-16 param 0)
       (the-as
        uint
        (lambda :behavior oracle
         ()
         (let
          ((v0-0 (create-launch-control (-> *part-group-id-table* 63) self)))
          (set! (-> self part) v0-0)
          (the-as sparticle-launch-group v0-0)
          )
         )
        )
       )
      (send-event-function (handle->process (-> obj left-eye-cell)) a1-16)
      )
     (let ((a1-17 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-17 from) pp)
      (set! (-> a1-17 num-params) 1)
      (set! (-> a1-17 message) 'trans-hook)
      (set! (-> a1-17 param 0) (the-as uint s5-1))
      (send-event-function (handle->process (-> obj left-eye-cell)) a1-17)
      )
     )
    )
   (dummy-42 obj)
   (none)
   )
  )




