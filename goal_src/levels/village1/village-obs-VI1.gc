;;-*-Lisp-*-
(in-package goal)

;; name: village-obs-VI1.gc
;; name in dgo: village-obs
;; dgos: VI1

(define-extern *revcycle-sg* skeleton-group)
(define-extern *revcycleprop-sg* skeleton-group)
(define-extern *hutlamp-sg* skeleton-group)
(define-extern *starfish-sg* skeleton-group)
(define-extern *starfish-nav-enemy-info* nav-enemy-info)
(define-extern *reflector-middle-sg* skeleton-group)
(define-extern *mayorgears-sg* skeleton-group)
(define-extern *windspinner-sg* skeleton-group)
(define-extern *sagesail-sg* skeleton-group)
(define-extern *windmill-sail-sg* skeleton-group)
(define-extern *med-res-jungle-sg* skeleton-group)
(define-extern *med-res-jungle1-sg* skeleton-group)
(define-extern *med-res-jungle2-sg* skeleton-group)
(define-extern *med-res-beach-sg* skeleton-group)
(define-extern *med-res-beach1-sg* skeleton-group)
(define-extern *med-res-beach2-sg* skeleton-group)
(define-extern *med-res-beach3-sg* skeleton-group)
(define-extern *med-res-misty-sg* skeleton-group)
(define-extern *med-res-village11-sg* skeleton-group)
(define-extern *med-res-village12-sg* skeleton-group)
(define-extern *med-res-village13-sg* skeleton-group)
(define-extern *med-res-training-sg* skeleton-group)

(declare-type windmill-sail process-drawable)
(declare-type sagesail process-drawable)
(declare-type windspinner process-drawable)
(declare-type mayorgears process-drawable)
(declare-type reflector-middle process-drawable)
(declare-type starfish nav-enemy)
(declare-type reflector-end process-drawable)
(declare-type hutlamp process-drawable)
(declare-type village-fish process-drawable)
(declare-type villa-starfish process-drawable)

(define-extern windmill-sail-idle (state windmill-sail)) ;; unknown type
(define-extern sagesail-idle (state sagesail)) ;; unknown type
(define-extern windspinner-idle (state windspinner)) ;; unknown type
(define-extern mayorgears-idle (state mayorgears)) ;; unknown type
(define-extern reflector-middle-idle (state reflector-middle)) ;; unknown type
(define-extern starfish-patrol (state starfish)) ;; unknown type
(define-extern reflector-end-idle (state reflector-end)) ;; unknown type
(define-extern hutlamp-idle (state hutlamp)) ;; unknown type
(define-extern village-fish-idle (state village-fish)) ;; unknown type
(define-extern villa-starfish-idle (state villa-starfish)) ;; unknown type
(define-extern starfish-idle (state starfish)) ;; unknown type

;; DECOMP BEGINS

(defskelgroup *med-res-jungle-sg* medres-jungle
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem -80 0 -80 240)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-jungle1-sg* medres-jungle1
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 30 0 -40 230)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-jungle2-sg* medres-jungle2
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 90 0 130 110)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-beach-sg* medres-beach
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 -140 200)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-beach1-sg* medres-beach1
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 -360 200)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-beach2-sg* medres-beach2
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem -200 0 -450 180)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-beach3-sg* medres-beach3
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 75 70 -480 100)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-misty-sg* medres-misty
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem -40 0 -20 260)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-village11-sg* medres-village11
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem -100 0 90 200)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-village12-sg* medres-village12
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 40 0 -50 155)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-village13-sg* medres-village13
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 180 -40 -40 180)
  :longest-edge (meters 0.009999999776482582)
  )

(defskelgroup *med-res-training-sg* medres-training
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 -60 220)
  :longest-edge (meters 0.009999999776482582)
  )

(set!
  (-> *part-id-table* 368)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 18
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 2.5)
    (sp-flt spt-x (meters 0.8))
    (sp-flt spt-scale-x (meters 1.7))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 64.0)
    (sp-rnd-flt spt-g 0.0 128.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 64.0)
    (sp-flt spt-scalevel-x (meters -0.0020833334))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.08888889)
    (sp-flt spt-accel-y -0.13653333)
    (sp-int spt-timer 720)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-rnd-int-flt spt-conerot-x (degrees 0.0) 3 16384.0)
    (sp-rnd-flt spt-conerot-radius (meters 2.0) (meters 17.5) 1.0)
    (sp-end)
    )
   )
  )

(set!
  (-> *part-id-table* 369)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 24
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 3.0)
    (sp-flt spt-x (meters 4.0))
    (sp-flt spt-scale-x (meters 0.5))
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 64.0)
    (sp-rnd-flt spt-g 0.0 128.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-vel-x (meters -0.01) (meters 0.02) 1.0)
    (sp-flt spt-vel-y (meters 0.050666668))
    (sp-rnd-flt spt-vel-z (meters -0.01) (meters 0.02) 1.0)
    (sp-flt spt-scalevel-x (meters 0.0016666667))
    (sp-rnd-flt spt-rotvel-z (degrees -3.0000002) (degrees 6.0000005) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.35555556)
    (sp-flt spt-fade-g -0.35555556)
    (sp-flt spt-fade-a 0.35555556)
    (sp-int spt-timer 165)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-rnd-int-flt spt-conerot-x (degrees -45.0) 3 16384.0)
    (sp-flt spt-conerot-radius (meters 2.0))
    (sp-end)
    )
   )
  )

(set!
  (-> *part-id-table* 370)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 23
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 5.0)
    (sp-flt spt-x (meters 4.0))
    (sp-flt spt-scale-x (meters 1.7))
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 64.0)
    (sp-rnd-flt spt-g 0.0 128.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 64.0)
    (sp-rnd-flt spt-vel-x (meters -0.026666667) (meters 0.07666667) 1.0)
    (sp-flt spt-vel-y (meters -0.006666667))
    (sp-rnd-flt spt-vel-z (meters -0.05) (meters 0.1) 1.0)
    (sp-flt spt-scalevel-x (meters -0.008333334))
    (sp-rnd-flt spt-rotvel-z (degrees -3.0000002) (degrees 6.0000005) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.17777778)
    (sp-flt spt-accel-y -4.096)
    (sp-int spt-timer 180)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-rnd-int-flt spt-conerot-x (degrees -45.0) 3 16384.0)
    (sp-flt spt-conerot-radius (meters 10.6))
    (sp-end)
    )
   )
  )

(set!
  (-> *part-id-table* 371)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 3.8)
    (sp-flt spt-x (meters 5.5))
    (sp-rnd-flt spt-scale-x (meters 1.0) (meters 1.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 32.0)
    (sp-rnd-flt spt-g 0.0 64.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 196.0)
    (sp-rnd-flt spt-vel-x (meters -0.006666667) (meters 0.026666667) 1.0)
    (sp-flt spt-vel-y (meters 0.0073333336))
    (sp-flt spt-scalevel-x (meters -0.008333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.99999994) (degrees 1.9999999) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-r -0.17777778)
    (sp-flt spt-fade-a -1.0888889)
    (sp-int spt-timer 165)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.0) (meters 2.3) 1.0)
    (sp-end)
    )
   )
  )

(deftype windmill-sail (process-drawable)
  ((root-override trsq                             :offset        112)
   (sync          sync-info                :inline :offset-assert 176)
   (blade-normal  vector                   :inline :offset-assert 192)
   (orig-quat     quaternion               :inline :offset-assert 208)
   (alt-actor     entity-actor                     :offset-assert 224)
   (part2         sparticle-launch-control         :offset-assert 228)
   )
  :heap-base #x80
  :method-count-assert 20
  :size-assert         #xe8
  :flag-assert         #x14008000e8
  )


(defmethod relocate windmill-sail ((obj windmill-sail) (arg0 int))
  (if (nonzero? (-> obj part2))
   (&+! (-> obj part2) arg0)
   )
  (the-as windmill-sail ((method-of-type process-drawable relocate) obj arg0))
  )

(defmethod deactivate windmill-sail ((obj windmill-sail))
  (if (nonzero? (-> obj part2))
   (kill-and-free-particles (-> obj part2))
   )
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

(defskelgroup *windmill-sail-sg* windmill-sail
  0
  4
  ((1 (meters 20)) (2 (meters 40)) (3 (meters 999999)))
  :bounds (static-spherem 0 0 0 21)
  :longest-edge (meters 14.899999618530273)
  )

(set!
  (-> *part-group-id-table* 123)
  (new 'static 'sparticle-launch-group
   :length 4
   :duration #xbb8
   :linger-duration #x5dc
   :name "group-win-wind-mill"
   :launcher
   (new 'static 'inline-array sparticle-group-item 4
    (sp-item 368 :fade-after (meters 100.0))
    (sp-item 369 :fade-after (meters 100.0))
    (sp-item 370 :fade-after (meters 200.0))
    (sp-item 371 :fade-after (meters 200.0))
    )
   :bounds (new 'static 'sphere :w 81920.0)
   )
  )

(set!
  (-> *part-group-id-table* 124)
  (new 'static 'sparticle-launch-group
   :length 4
   :duration #xbb8
   :linger-duration #x5dc
   :name "group-win-wind-mill-hires"
   :launcher
   (new 'static 'inline-array sparticle-group-item 4
    (sp-item 368)
    (sp-item 369)
    (sp-item 370)
    (sp-item 371)
    )
   :bounds (new 'static 'sphere :w 81920.0)
   )
  )

(defstate windmill-sail-idle (windmill-sail)
  :trans
  (behavior ()
   (cond
    ((task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
     (let ((f30-0 (get-current-value (-> self sync) 65536.0)))
      (set! (-> self sync period) (the-as uint 4800))
      (quaternion-axis-angle!
       (-> self root-override quat)
       (-> self blade-normal x)
       (-> self blade-normal y)
       (-> self blade-normal z)
       f30-0
       )
      (quaternion*!
       (-> self root-override quat)
       (-> self root-override quat)
       (-> self orig-quat)
       )
      (quaternion-normalize! (-> self root-override quat))
      (set! (-> *part-id-table* 368 init-specs 15 initial-valuef) f30-0)
      )
     (spawn (if (movie?)
             (-> self part2)
             (-> self part)
             )
      (-> self root-override trans)
      )
     (if (nonzero? (-> self sound))
      (change-sound! (-> self sound) (static-sound-name "mayors-gears"))
      )
     )
    (else
     (set! (-> self sync period) (the-as uint #x15f90))
     (let ((f0-3 (get-current-value (-> self sync) 65536.0)))
      (quaternion-axis-angle!
       (-> self root-override quat)
       (-> self blade-normal x)
       (-> self blade-normal y)
       (-> self blade-normal z)
       f0-3
       )
      )
     (quaternion*!
      (-> self root-override quat)
      (-> self root-override quat)
      (-> self orig-quat)
      )
     (quaternion-normalize! (-> self root-override quat))
     )
    )
   (if (nonzero? (-> self sound))
    (update! (-> self sound))
    )
   (if (= (-> self draw cur-lod) (-> self draw lod-set max-lod))
    (logior! (-> self draw status) 64)
    (set! (-> self draw status) (logand -65 (-> self draw status)))
    )
   (none)
   )
  :code
  (the-as (function none :behavior windmill-sail) anim-loop)
  :post
  (the-as (function none :behavior windmill-sail) ja-post)
  )

(defmethod copy-defaults! windmill-sail ((obj windmill-sail) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (load-params! (-> obj sync) obj (the-as uint 4800) 0.0 0.15 0.15)
  (set! (-> obj root-override) (new 'process 'trsq))
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (initialize-skeleton obj *windmill-sail-sg* '())
  (quaternion-copy! (-> obj orig-quat) (-> obj root-override quat))
  (vector-x-quaternion! (-> obj blade-normal) (-> obj root-override quat))
  (vector-normalize! (-> obj blade-normal) 1.0)
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 123) obj)
   )
  (set!
   (-> obj part2)
   (create-launch-control (-> *part-group-id-table* 124) obj)
   )
  (set!
   (-> obj sound)
   (new 'process 'ambient-sound arg0 (-> obj root-override trans))
   )
  (go windmill-sail-idle)
  (none)
  )

(deftype sagesail (process-drawable)
  ((root-override trsq               :offset        112)
   (sync          sync-info  :inline :offset-assert 176)
   (blade-normal  vector     :inline :offset-assert 192)
   (orig-quat     quaternion :inline :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 20
  :size-assert         #xe0
  :flag-assert         #x14007000e0
  )


(defskelgroup *sagesail-sg* sagesail
  0
  4
  ((1 (meters 20)) (2 (meters 40)) (3 (meters 999999)))
  :bounds (static-spherem 0 0 0 25.5)
  :longest-edge (meters 24.200000762939453)
  )

(defstate sagesail-idle (sagesail)
  :trans
  (behavior ()
   (let ((f0-0 (get-current-value (-> self sync) 65536.0)))
    (quaternion-axis-angle!
     (-> self root-override quat)
     (-> self blade-normal x)
     (-> self blade-normal y)
     (-> self blade-normal z)
     f0-0
     )
    )
   (quaternion*!
    (-> self root-override quat)
    (-> self root-override quat)
    (-> self orig-quat)
    )
   (quaternion-normalize! (-> self root-override quat))
   (none)
   )
  :code
  (the-as (function none :behavior sagesail) anim-loop)
  :post
  (the-as (function none :behavior sagesail) ja-post)
  )

(defmethod copy-defaults! sagesail ((obj sagesail) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (load-params! (-> obj sync) obj (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> obj root-override) (new 'process 'trsq))
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (initialize-skeleton obj *sagesail-sg* '())
  (quaternion-copy! (-> obj orig-quat) (-> obj root-override quat))
  (vector-z-quaternion! (-> obj blade-normal) (-> obj root-override quat))
  (vector-normalize! (-> obj blade-normal) 1.0)
  (go sagesail-idle)
  (none)
  )

(deftype windspinner (process-drawable)
  ((blade-normal vector     :inline :offset-assert 176)
   (orig-quat    quaternion :inline :offset-assert 192)
   (angle        float              :offset-assert 208)
   (angle-vel    float              :offset-assert 212)
   )
  :heap-base #x70
  :method-count-assert 20
  :size-assert         #xd8
  :flag-assert         #x14007000d8
  )


(defmethod run-logic? windspinner ((obj windspinner))
  (or
   (zero? (logand (-> obj mask) (process-mask actor-pause)))
   (or
    (and
     (nonzero? (-> obj draw))
     (logtest? (-> obj draw status) 8)
     (>=
      (+ (-> *ACTOR-bank* pause-dist) (-> obj root pause-adjust-distance))
      (vector-vector-distance (-> obj root trans) (math-camera-pos))
      )
     )
    (and
     (nonzero? (-> obj skel))
     (!= (-> obj skel root-channel 0) (-> obj skel channel))
     )
    (and (nonzero? (-> obj draw)) (logtest? (-> obj draw status) 16))
    )
   )
  )

(defskelgroup *windspinner-sg* windspinner
  0
  3
  ((1 (meters 20)) (2 (meters 999999)))
  :bounds (static-spherem 0 0 0 8)
  :longest-edge (meters 0)
  )

(defstate windspinner-idle (windspinner)
  :trans
  (behavior ()
   (let* ((f0-0 0.992)
          (f1-0 0.008090864)
          (a0-0 (-> self root trans))
          (f0-1
           (*
            f0-0
            (+
             (*
              f1-0
              (->
               *wind-work*
               wind-force
               (logand
                (+
                 (the int (-> a0-0 x))
                 (the int (-> a0-0 z))
                 (-> *wind-work* wind-time)
                 )
                63
                )
               )
              )
             (-> self angle-vel)
             )
            )
           )
          )
    (if (< 291.27112 f0-1)
     (set! f0-1 291.27112)
     )
    (set! (-> self angle-vel) f0-1)
    )
   (let ((f0-3 (+ (-> self angle) (-> self angle-vel))))
    (set!
     (-> self angle)
     (- f0-3 (* (the float (the int (/ f0-3 65536.0))) 65536.0))
     )
    )
   (quaternion-axis-angle!
    (-> self root quat)
    (-> self blade-normal x)
    (-> self blade-normal y)
    (-> self blade-normal z)
    (-> self angle)
    )
   (quaternion*! (-> self root quat) (-> self root quat) (-> self orig-quat))
   (quaternion-normalize! (-> self root quat))
   (none)
   )
  :code
  (the-as (function none :behavior windspinner) anim-loop)
  :post
  (the-as (function none :behavior windspinner) ja-post)
  )

(defmethod copy-defaults! windspinner ((obj windspinner) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (set! (-> obj angle) 0.0)
  (set! (-> obj angle-vel) 145.63556)
  (set! (-> obj root) (the-as trsqv (new 'process 'trsq)))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *windspinner-sg* '())
  (set! (-> obj root pause-adjust-distance) 819200.0)
  (quaternion-copy! (-> obj orig-quat) (-> obj root quat))
  (vector-y-quaternion! (-> obj blade-normal) (-> obj root quat))
  (vector-normalize! (-> obj blade-normal) 1.0)
  (go windspinner-idle)
  (none)
  )

(deftype mayorgears (process-drawable)
  ((alt-actor entity-actor  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  )


(defskelgroup *mayorgears-sg* mayorgears
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 0 4.5)
  :longest-edge (meters 0)
  )

(defstate mayorgears-idle (mayorgears)
  :code
  (behavior ()
   (while #t
    (cond
     ((task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
      (let ((a0-1 (-> self skel root-channel 0)))
       (set! (-> a0-1 param 0) 1.0)
       (joint-control-channel-group-eval!
        a0-1
        (the-as art-joint-anim #f)
        num-func-loop!
        )
       )
      )
     (else
      (let ((a0-2 (-> self skel root-channel 0)))
       (set! (-> a0-2 param 0) 0.0)
       (joint-control-channel-group-eval!
        a0-2
        (the-as art-joint-anim #f)
        num-func-loop!
        )
       )
      )
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior mayorgears) ja-post)
  )

(defmethod copy-defaults! mayorgears ((obj mayorgears) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *mayorgears-sg* '())
  (set! (-> obj draw shadow-mask) (the-as uint 255))
  (go mayorgears-idle)
  (none)
  )

(deftype reflector-middle (process-drawable)
  ((reflector-trans      vector :inline :offset-assert 176)
   (next-reflector-trans vector :inline :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14006000d0
  )


(defskelgroup *reflector-middle-sg* reflector-middle
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 17 0 17)
  :longest-edge (meters 0)
  )

(defstate reflector-middle-idle (reflector-middle)
  :trans
  (behavior ()
   (when (task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
    (process-entity-status! self (entity-perm-status complete) #t)
    (draw-eco-beam (-> self reflector-trans) (-> self next-reflector-trans))
    )
   (none)
   )
  :code
  (the-as (function none :behavior reflector-middle) anim-loop)
  :post
  (the-as (function none :behavior reflector-middle) ja-post)
  )

(defmethod
  copy-defaults!
  reflector-middle
  ((obj reflector-middle) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *reflector-middle-sg* '())
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (set! (-> obj reflector-trans quad) (-> obj root trans quad))
  (+! (-> obj reflector-trans y) (res-lump-float arg0 'height-info))
  (let ((a0-10 (-> obj link next)))
   (when a0-10
    (set! (-> obj next-reflector-trans quad) (-> a0-10 extra trans quad))
    (+! (-> obj next-reflector-trans y) (res-lump-float a0-10 'height-info))
    )
   )
  (logior! (-> obj draw status) 64)
  (go reflector-middle-idle)
  (none)
  )

(deftype reflector-end (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  )


(defstate reflector-end-idle (reflector-end)
  :code
  (the-as (function none :behavior reflector-end) anim-loop)
  )

(defmethod copy-defaults! reflector-end ((obj reflector-end) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (go reflector-end-idle)
  (none)
  )

(deftype villa-starfish (process-drawable)
  ((child-count int8  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )


(defskelgroup *starfish-sg* villa-starfish
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 0 2)
  :longest-edge (meters 0)
  )

(deftype starfish (nav-enemy)
  ()
  :heap-base #x120
  :method-count-assert 76
  :size-assert         #x190
  :flag-assert         #x4c01200190
  )


(defstate starfish-idle (starfish)
  :enter
  (behavior ()
   (dummy-60 (-> self collide-info) 40960.0 40960.0 #t (the-as uint 1))
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (ja-channel-set! 0)
   (none)
   )
  :exit
  (behavior ()
   (ja-channel-set! 1)
   (none)
   )
  :trans
  (behavior ()
   (if
    (and
     *target*
     (>=
      163840.0
      (vector-vector-distance
       (-> self collide-info trans)
       (-> *target* control trans)
       )
      )
     )
    (go starfish-patrol)
    )
   (none)
   )
  :code
  (behavior ()
   (while #t
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior starfish) ja-post)
  )

(defstate starfish-patrol (starfish)
  :enter
  (behavior ()
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (set!
    (-> self nav flags)
    (logior (nav-control-flags bit19) (-> self nav flags))
    )
   (none)
   )
  :trans
  (behavior ()
   (when (>= (- (-> *display* base-frame-counter) (-> self state-time)) 300)
    (if
     (or
      (not *target*)
      (<
       204800.0
       (vector-vector-distance
        (-> self collide-info trans)
        (-> *target* control trans)
        )
       )
      )
     (go starfish-idle)
     )
    )
   (none)
   )
  :code
  (behavior ()
   (set! (-> self target-speed) 4096.0)
   (set! (-> self rotate-speed) 12743.111)
   (set! (-> self turn-time) 150)
   (while #t
    (let ((a0-0 (-> self skel root-channel 0)))
     (set!
      (-> a0-0 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 2))
      )
     (set!
      (-> a0-0 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 2))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-0 param 1) 1.0)
     (set! (-> a0-0 frame-num) 0.0)
     (joint-control-channel-group!
      a0-0
      (the-as art-joint-anim (-> self draw art-group data 2))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-1 (-> self skel root-channel 0)))
      (set!
       (-> a0-1 param 0)
       (the float (+ (-> a0-1 frame-group data 0 length) -1))
       )
      (set! (-> a0-1 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-1
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  :post
  (the-as (function none :behavior starfish) nav-enemy-patrol-post)
  )

(define
  *starfish-nav-enemy-info*
  (new 'static 'nav-enemy-info
   :idle-anim -1
   :walk-anim -1
   :turn-anim -1
   :notice-anim -1
   :run-anim -1
   :jump-anim -1
   :jump-land-anim -1
   :victory-anim -1
   :taunt-anim -1
   :die-anim -1
   :neck-joint -1
   :player-look-at-joint 5
   :run-travel-speed (meters 1.0)
   :run-rotate-speed (degrees 70.0)
   :run-acceleration (meters 1.0)
   :run-turn-time (seconds 0.5)
   :walk-travel-speed (meters 1.0)
   :walk-rotate-speed (degrees 70.0)
   :walk-acceleration (meters 1.0)
   :walk-turn-time (seconds 0.5)
   :attack-shove-back (meters 3.0)
   :attack-shove-up (meters 2.0)
   :shadow-size (meters 1.0)
   :nav-nearest-y-threshold (meters 10.0)
   :notice-distance (meters 30.0)
   :stop-chase-distance (meters 40.0)
   :frustration-distance (meters 8.0)
   :frustration-time #x4b0
   :die-anim-hold-frame 10000000000.0
   :jump-land-anim-end-frame 10000000000.0
   :jump-height-min (meters 1.0)
   :jump-height-factor 0.5
   :jump-start-anim-speed 1.0
   :shadow-max-y (meters 1.0)
   :shadow-min-y (meters -1.0)
   :shadow-locus-dist (meters 150.0)
   :use-align #f
   :draw-shadow #f
   :move-to-ground #t
   :hover-if-no-ground #f
   :use-momentum #f
   :use-flee #f
   :use-proximity-notice #f
   :use-jump-blocked #f
   :use-jump-patrol #f
   :gnd-collide-with #x1
   :debug-draw-neck #f
   :debug-draw-jump #f
   )
  )

(defmethod initialize-collision starfish ((obj starfish))
  (set! (-> obj mask) (logior (process-mask enemy) (-> obj mask)))
  (let
   ((s5-0
     (new
      'process
      'collide-shape-moving
      obj
      (collide-list-enum usually-hit-by-player)
      )
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (let ((s4-0 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
    (set! (-> s4-0 prim-core offense) 2)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj collide-info) s5-0)
   )
  0
  (none)
  )

(defmethod TODO-RENAME-48 starfish ((obj starfish))
  (initialize-skeleton obj *starfish-sg* '())
  (TODO-RENAME-45 obj *starfish-nav-enemy-info*)
  0
  (none)
  )

(defbehavior starfish-init-by-other starfish ((arg0 starfish) (arg1 vector))
  (initialize-collision self)
  (logior! (-> self mask) (process-mask actor-pause))
  (set! (-> self collide-info trans quad) (-> arg1 quad))
  (quaternion-copy! (-> self collide-info quat) (-> arg0 collide-info quat))
  (vector-identity! (-> self collide-info scale))
  (set! (-> self entity) (-> arg0 entity))
  (TODO-RENAME-48 self)
  (go starfish-idle)
  (none)
  )

(defbehavior process-drawable-child-count process-drawable ()
  (let ((v0-0 0))
   (let ((v1-0 (-> self child)))
    (while v1-0
     (+! v0-0 1)
     (set! v1-0 (-> v1-0 0 brother))
     (nop!)
     (nop!)
     )
    )
   v0-0
   )
  )

(defbehavior starfish-spawn-child starfish ()
  (let ((gp-0 (new-stack-vector0)))
   (get-random-point (-> self path) gp-0)
   (let ((s5-0 (get-process *default-dead-pool* starfish #x4000)))
    (the-as (pointer starfish) (when s5-0
                                (let ((t9-2 (method-of-type starfish activate)))
                                 (t9-2
                                  (the-as starfish s5-0)
                                  self
                                  'starfish
                                  (the-as pointer #x70004000)
                                  )
                                 )
                                (run-now-in-process
                                 s5-0
                                 starfish-init-by-other
                                 self
                                 gp-0
                                 )
                                (-> s5-0 ppointer)
                                )
     )
    )
   )
  )

(defstate villa-starfish-idle (villa-starfish)
  :code
  (behavior ()
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (while #t
    (when (>= (- (-> *display* base-frame-counter) (-> self state-time)) 150)
     (set! (-> self state-time) (-> *display* base-frame-counter))
     (if
      (and
       (and
        *target*
        (>=
         204800.0
         (vector-vector-distance
          (-> self root trans)
          (-> *target* control trans)
          )
         )
        )
       (< (process-drawable-child-count) (-> self child-count))
       )
      (starfish-spawn-child)
      )
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior villa-starfish) #f)
  )

(defmethod copy-defaults! villa-starfish ((obj villa-starfish) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (let
   ((a1-4
     (res-lump-value arg0 'num-lurkers uint128 :default (the-as uint128 3))
     )
    )
   (set! (-> obj child-count) (max 1 (min 8 (the-as int a1-4))))
   )
  (set! (-> obj path) (new 'process 'path-control obj 'path 0.0))
  (go villa-starfish-idle)
  (none)
  )

(deftype village-fish (process-drawable)
  ((child-count int8  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )


(defstate village-fish-idle (village-fish)
  :code
  (behavior ()
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (while #t
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior village-fish) #f)
  )

(defmethod copy-defaults! village-fish ((obj village-fish) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (go village-fish-idle)
  (none)
  )

(deftype villa-fisha (village-fish)
  ()
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )


(deftype villa-fishb (village-fish)
  ()
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )


(deftype cyclegen (structure)
  ((output float  :offset-assert   0)
   (inc    float  :offset-assert   4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


(defun set-period ((arg0 cyclegen) (arg1 int))
  (let ((f0-1 (/ 5.0 (the float arg1))))
   (set! (-> arg0 inc) f0-1)
   f0-1
   )
  )

(defun update-clock ((arg0 cyclegen))
  (let
   ((f0-1
     (+ (-> arg0 output) (* (-> arg0 inc) (-> *display* time-adjust-ratio)))
     )
    )
   (set! (-> arg0 output) (- f0-1 (the float (the int f0-1))))
   )
  (-> arg0 output)
  )

(deftype hutlamp (process-drawable)
  ((pivot joint-mod-set-local         :offset-assert 176)
   (clock cyclegen            :inline :offset-assert 180)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xbc
  :flag-assert         #x14005000bc
  )


(defmethod relocate hutlamp ((obj hutlamp) (arg0 int))
  (if (nonzero? (-> obj pivot))
   (&+! (-> obj pivot) arg0)
   )
  (the-as
   hutlamp
   ((the-as
     (function process-drawable int process-drawable)
     (find-parent-method hutlamp 7)
     )
    obj
    arg0
    )
   )
  )

(defskelgroup *hutlamp-sg* hutlamp
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 1 0 1.2000000476837158)
  :longest-edge (meters 0.699999988079071)
  )

(defstate hutlamp-idle (hutlamp)
  :code
  (behavior ()
   (while #t
    (let ((f0-3 (* 1820.4445 (sin (* 65536.0 (update-clock (-> self clock)))))))
     (quaternion-vector-angle! (-> self pivot transform quat) *x-vector* f0-3)
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior hutlamp) ja-post)
  )

(defmethod copy-defaults! hutlamp ((obj hutlamp) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *hutlamp-sg* '())
  (set! (-> obj pivot) (new 'process 'joint-mod-set-local obj 3 #f #t #f))
  (set-period (-> obj clock) 900)
  (set! (-> obj clock output) (rand-vu))
  (go hutlamp-idle)
  (none)
  )

(deftype revcycleprop (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 21
  :size-assert         #xb0
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )


(defskelgroup *revcycleprop-sg* revcycleprop
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 0 2.200000047683716)
  :longest-edge (meters 0)
  )

(defstate idle (revcycleprop)
  :virtual #t
  :code
  (the-as (function none :behavior revcycleprop) anim-loop)
  :post
  (the-as (function none :behavior revcycleprop) ja-post)
  )

(defmethod copy-defaults! revcycleprop ((obj revcycleprop) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *revcycleprop-sg* '())
  (set! (-> obj draw light-index) (the-as uint 1))
  (go (method-of-object obj idle))
  (none)
  )

(deftype revcycle (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 21
  :size-assert         #xb0
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )


(defskelgroup *revcycle-sg* revcycle
  0
  2
  ((1 (meters 999999)))
  :bounds (static-spherem 0 0 0 3.200000047683716)
  :longest-edge (meters 0)
  )

(defstate idle (revcycle)
  :virtual #t
  :code
  (the-as (function none :behavior revcycle) anim-loop)
  :post
  (the-as (function none :behavior revcycle) ja-post)
  )

(defmethod copy-defaults! revcycle ((obj revcycle) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *revcycle-sg* '())
  (set! (-> obj draw light-index) (the-as uint 1))
  (go (method-of-object obj idle))
  (none)
  )

(deftype villagea-water (water-anim)
  ()
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  )


(define
  ripple-for-villagea-water
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 4.0
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 10.0 :xdiv 1 :speed 1.5)
    (new 'static 'ripple-wave :scale 10.0 :xdiv -1 :zdiv 1 :speed 1.5)
    (new 'static 'ripple-wave :scale 5.0 :xdiv 5 :zdiv 3 :speed 0.75)
    (new 'static 'ripple-wave)
    )
   )
  )

(defmethod TODO-RENAME-22 villagea-water ((obj villagea-water))
  (let ((t9-0 (method-of-type water-anim TODO-RENAME-22)))
   (t9-0 obj)
   )
  (let ((v1-2 (new 'process 'ripple-control)))
   (set! (-> obj draw ripple) v1-2)
   (set-vector! (-> obj draw color-mult) 0.01 0.45 0.5 0.75)
   (set! (-> v1-2 global-scale) 3072.0)
   (set! (-> v1-2 close-fade-dist) 163840.0)
   (set! (-> v1-2 far-fade-dist) 245760.0)
   (let ((v0-2 ripple-for-villagea-water))
    (set! (-> v1-2 waveform) v0-2)
    v0-2
    )
   )
  )




