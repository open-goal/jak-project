;;-*-Lisp-*-
(in-package goal)

;; name: farmer.gc
;; name in dgo: farmer
;; dgos: L1, VI1

(define-extern *farmer-sg* skeleton-group)

;; definition of type farmer
(deftype farmer (process-taskable)
  ()
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x17c
  :flag-assert         #x350110017c
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "farmer"
     :bounds (new 'static 'vector :w 16384.0)
     :max-lod 1
     :version #x6
     :shadow 3
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 4)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 81920.0)
  (set! (-> v1-1 mgeo 1) (the-as uint 2))
  (set! (-> v1-1 lod-dist 1) 4095996000.0)
  (set! *farmer-sg* v1-1)
  )

;; definition for method 32 of type farmer
(defmethod play-anim! farmer ((obj farmer) (arg0 symbol))
  (case (current-status (-> obj tasks)) 
   ((2 3)
     (if arg0
      (close-status! (-> obj tasks) (task-status need-introduction))
      )
     (new 'static 'spool-anim
      :name "farmer-introduction"
      :index 6
      :parts 5
      :command-list '()
      )
     )
   ((5)
    (set! (-> obj skippable) #t)
    (cond
     ((zero? (get-reminder (-> obj tasks) 0))
      (if arg0
       (save-reminder (-> obj tasks) 1 0)
       )
      (new 'static 'spool-anim
       :name "farmer-reminder-1"
       :index 7
       :parts 2
       :command-list '()
       )
      )
     (else
      (if arg0
       (save-reminder (-> obj tasks) 0 0)
       )
      (new 'static 'spool-anim
       :name "farmer-reminder-2"
       :index 8
       :parts 2
       :command-list '()
       )
      )
     )
    )
   ((6)
    (when arg0
     (set!
      (-> obj cell-for-task)
      (the-as game-task (current-task (-> obj tasks)))
      )
     (close-current! (-> obj tasks))
     )
    (new 'static 'spool-anim
     :name "farmer-resolution"
     :index 9
     :parts 4
     :command-list '()
     )
    )
   (else
    (if arg0
     (format
      0
      "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
      (-> obj name)
      (task-status->string (the-as task-status (current-status (-> obj tasks))))
      )
     )
    (-> obj draw art-group data 4)
    )
   )
  )

;; definition for method 31 of type farmer
(defmethod get-art-elem farmer ((obj farmer))
  (let ((v1-1 (current-status (-> obj tasks))))
   (if (or (= v1-1 2) (= v1-1 3) (= v1-1 7) (zero? v1-1))
    (-> obj draw art-group data 4)
    (-> obj draw art-group data 5)
    )
   )
  )

;; definition for method 43 of type farmer
(defmethod TODO-RENAME-43 farmer ((obj farmer))
  (when
   (TODO-RENAME-10
    (-> obj ambient)
    (new 'stack-no-clear 'vector)
    9000
    122880.0
    obj
    )
   (let* ((v1-3 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
          (v1-4 (the-as number (logior #x3f800000 v1-3)))
          (f0-2 (+ -1.0 (the-as float v1-4)))
          )
    (cond
     ((< 0.8333333 f0-2)
      (dummy-11 (-> obj ambient) "FAR-LO1A" #f (-> obj root trans))
      )
     ((< 0.6666667 f0-2)
      (dummy-11 (-> obj ambient) "FAR-AM01" #f (-> obj root trans))
      )
     ((< 0.5 f0-2)
      )
     ((< 0.33333334 f0-2)
      (dummy-11 (-> obj ambient) "FAR-AM2A" #f (-> obj root trans))
      )
     ((< 0.16666667 f0-2)
      (dummy-11 (-> obj ambient) "FAR-AM02" #f (-> obj root trans))
      )
     (else
      )
     )
    )
   )
  (none)
  )

;; definition for method 41 of type farmer
;; INFO: Return type mismatch int vs none.
(defmethod initialize-collision farmer ((obj farmer) (arg0 int))
  (let
   ((s5-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-player))))
   (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
    (set! (-> s4-0 prim-core collide-as) (the-as uint 256))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 1))
    (set! (-> s4-0 prim-core offense) 4)
    (set-vector! (-> s4-0 local-sphere) 4096.0 8192.0 -4096.0 12288.0)
    (dummy-46 s5-0)
    (let ((s3-0 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
     (set! (-> s3-0 prim-core collide-as) (the-as uint 256))
     (set! (-> s3-0 collide-with) (the-as uint 16))
     (set! (-> s3-0 prim-core action) (the-as uint 1))
     (set! (-> s3-0 prim-core offense) 4)
     (set-vector! (-> s3-0 local-sphere) 4096.0 6144.0 -4096.0 8192.0)
     )
    (dummy-28 s4-0)
    (let ((s3-1 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
     (set! (-> s3-1 prim-core collide-as) (the-as uint 256))
     (set! (-> s3-1 collide-with) (the-as uint 16))
     (set! (-> s3-1 prim-core action) (the-as uint 1))
     (set! (-> s3-1 prim-core offense) 4)
     (set-vector! (-> s3-1 local-sphere) 4096.0 10240.0 -4096.0 8192.0)
     )
    (dummy-28 s4-0)
    )
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root) s5-0)
   )
  0
  (none)
  )

;; definition for method 11 of type farmer
(defmethod copy-defaults! farmer ((obj farmer) (arg0 res-lump))
  (dummy-40 obj arg0 *farmer-sg* 3 25 (new 'static 'vector :w 4096.0) 5)
  (set! (-> obj root nav-radius) 40960.0)
  (nav-mesh-connect obj (-> obj root) (the-as nav-control #f))
  (set! (-> obj tasks) (get-task-control (game-task village1-yakow)))
  (dummy-42 obj)
  (none)
  )
