;;-*-Lisp-*-
(in-package goal)

;; name: darkcave-obs.gc
;; name in dgo: darkcave-obs
;; dgos: DAR, L1

(define-extern *cavecrystal-sg* skeleton-group)

;; TODO - have to fully forward declare this, 
;; > Type Error: Type cavecrystal-light-control is not fully defined.
;; > (execute-connections *cavecrystal-light-control*)
(deftype cavecrystal-light (structure)
  ((next           cavecrystal-light         :offset-assert 0)
   (crystal-id     int32                     :offset-assert 4)
   (intensity      float                     :offset-assert 8)
   (fade-start     float                     :offset-assert 12)
   (fade-end       float                     :offset-assert 16)
   (crystal-handle handle                    :offset-assert 24)
   (trans          vector            :inline :offset-assert 32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

(deftype cavecrystal-light-control (basic)
  ((active-count          int32               :offset-assert 4)
   (head                  cavecrystal-light   :offset-assert 8)
   (last-known-valid-time uint64              :offset-assert 16)
   (crystal               cavecrystal-light           7 :inline :offset-assert 32)
   )
  :method-count-assert 15
  :size-assert         #x170
  :flag-assert         #xf00000170
  (:methods
    (TODO-RENAME-9 (_type_ int float cavecrystal) object 9)
    (TODO-RENAME-10 (_type_ vector) float 10)
    (inc-intensites! (_type_) int 11)
    (TODO-RENAME-12 (_type_) symbol 12)
    (create-connection! (_type_ cavecrystal res-lump (function object object object object object) object object) connection 13)
    (execute-connections (_type_) int 14)
    )
  )
(define-extern *cavecrystal-light-control* cavecrystal-light-control)

;; DECOMP BEGINS

(deftype cavecrystal (process-drawable)
  ((root-override              collide-shape         :offset        112)
   (is-master?                 symbol                :offset-assert 176)
   (crystal-id                 int32                 :offset-assert 180)
   (glow-u                     float                 :offset-assert 184)
   (glow-wf-period             int32                 :offset-assert 188)
   (glow-wf-offset             int32                 :offset-assert 192)
   (prev-compute-glow-time     uint64                :offset-assert 200)
   (start-fade-time            uint64                :offset-assert 208)
   (end-fade-time              uint64                :offset-assert 216)
   (activated-time             uint64                :offset-assert 224)
   (last-updated-user-lighting uint64                :offset-assert 232)
   (player-attack-id           uint64                :offset-assert 240)
   (on-color-mult              vector        :inline :offset-assert 256)
   (on-color-emissive          vector        :inline :offset-assert 272)
   (off-color-mult             vector        :inline :offset-assert 288)
   (off-color-emissive         vector        :inline :offset-assert 304)
   )
  :heap-base #xd0
  :method-count-assert 22
  :size-assert         #x140
  :flag-assert         #x1600d00140
  (:methods
    (update-connected-crystals! (_type_) none 20)
    (dummy-21 (_type_) float 21)
    )
  )


(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "cavecrystal"
     :bounds
     (new 'static 'vector :y 19251.2 :w 22118.4)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) -1)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 81920.0)
  (set! (-> v1-1 mgeo 1) (the-as uint 2))
  (set! (-> v1-1 lod-dist 1) 4095996000.0)
  (set! *cavecrystal-sg* v1-1)
  )

(defmethod update-connected-crystals! cavecrystal ((obj cavecrystal))
  (when (-> obj is-master?)
   (let ((v1-2 (-> *display* base-frame-counter)))
    (when (!= (-> obj last-updated-user-lighting) v1-2)
     (set! (-> obj last-updated-user-lighting) (the-as uint v1-2))
     (execute-connections *cavecrystal-light-control*)
     )
    )
   )
  (none)
  )

(defmethod dummy-21 cavecrystal ((obj cavecrystal))
  (set!
   (-> obj prev-compute-glow-time)
   (the-as uint (-> *display* game-frame-counter))
   )
  (let*
   ((gp-1
     (max
      1
      (the-as
       int
       (+
        (- 1 (the-as int (-> obj activated-time)))
        (-> *display* game-frame-counter)
        )
       )
      )
     )
    (f0-2
     (/
      (the
       float
       (mod
        (+ (-> *display* base-frame-counter) (-> obj glow-wf-offset))
        (-> obj glow-wf-period)
        )
       )
      (the float (-> obj glow-wf-period))
      )
     )
    (f30-1 (* 0.1 (cos (* 65536.0 f0-2))))
    )
   (cond
    ((>= 20 (the-as int gp-1))
     (let ((v1-11 (* 0.05 (the float gp-1))))
      (fmax 0.0 (fmin 2.0 (+ (* 2.0 v1-11) (* v1-11 f30-1))))
      )
     )
    ((>= 180 (the-as int gp-1))
     (let ((a2-0 (* 0.00625 (the float (+ gp-1 -20)))))
      (fmin 2.0 (+ (lerp 2.0 1.0 a2-0) f30-1))
      )
     )
    ((>= (the-as int (-> obj start-fade-time)) (the-as int gp-1))
     (+ 1.0 f30-1)
     )
    (else
     (let
      ((v1-20
        (fmin 1.0 (* 0.004761905 (the float (- gp-1 (-> obj start-fade-time)))))
        )
       )
      (fmax 0.0 (- (+ 1.0 (* (- 1.0 v1-20) f30-1)) v1-20))
      )
     )
    )
   )
  )

(defstate cavecrystal-idle (cavecrystal)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (= v1-0 'attack)
                    (go cavecrystal-active)
                    )
     )
    )
   )
  :trans
  (behavior ()
   (if
    (and
     *target*
     (>=
      40960.0
      (vector-vector-distance
       (-> self root-override trans)
       (-> *target* control trans)
       )
      )
     )
    (level-hint-spawn
     (game-text-id darkcave-light-crystal-hint)
     "sksp0333"
     (the-as entity #f)
     *entity-pool*
     (game-task none)
     )
    )
   (update-connected-crystals! self)
   (none)
   )
  :code
  (behavior ()
   (logior! (-> self mask) (process-mask sleep-code))
   (suspend)
   0
   (none)
   )
  )

(defstate cavecrystal-active (cavecrystal)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'attack)
                    (let ((v1-1 (-> arg3 param 2)))
                     (cond
                      ((!= v1-1 (-> self player-attack-id))
                       (set! (-> self player-attack-id) v1-1)
                       (set!
                        (-> self activated-time)
                        (the-as uint (-> *display* game-frame-counter))
                        )
                       #t
                       )
                      (else
                       #f
                       )
                      )
                     )
                    )
     )
    )
   )
  :enter
  (behavior ()
   (logclear! (-> self mask) (process-mask actor-pause))
   (set!
    (-> self activated-time)
    (the-as uint (-> *display* game-frame-counter))
    )
   (set!
    (-> self prev-compute-glow-time)
    (the-as uint (-> *display* game-frame-counter))
    )
   (none)
   )
  :exit
  (behavior ()
   (stop! (-> self sound))
   (if (not (-> self is-master?))
    (logior! (-> self mask) (process-mask actor-pause))
    )
   (none)
   )
  :trans
  (behavior ()
   (let ((f30-0 (dummy-21 self)))
    (set! (-> self glow-u) f30-0)
    (let ((gp-0 (new 'stack-no-clear 'vector))
          (f28-0 1.993)
          )
     (let ((s5-0 (-> self draw color-mult)))
      (vector-! gp-0 (-> self on-color-mult) (-> self off-color-mult))
      (vector+*! s5-0 (-> self off-color-mult) gp-0 f30-0)
      (set! (-> s5-0 x) (fmax 0.0 (fmin (-> s5-0 x) f28-0)))
      (set! (-> s5-0 y) (fmax 0.0 (fmin (-> s5-0 y) f28-0)))
      (set! (-> s5-0 z) (fmax 0.0 (fmin (-> s5-0 z) f28-0)))
      (set! (-> s5-0 w) 1.0)
      )
     (let ((s5-1 (-> self draw color-emissive)))
      (vector-! gp-0 (-> self on-color-emissive) (-> self off-color-emissive))
      (vector+*! s5-1 (-> self off-color-emissive) gp-0 f30-0)
      (set! (-> s5-1 x) (fmax 0.0 (fmin (-> s5-1 x) f28-0)))
      (set! (-> s5-1 y) (fmax 0.0 (fmin (-> s5-1 y) f28-0)))
      (set! (-> s5-1 z) (fmax 0.0 (fmin (-> s5-1 z) f28-0)))
      (set! (-> s5-1 w) 0.0)
      )
     )
    (TODO-RENAME-9
     *cavecrystal-light-control*
     (-> self crystal-id)
     (-> self glow-u)
     self
     )
    (update-connected-crystals! self)
    (when (>= 0.0 f30-0)
     (level-hint-spawn
      (game-text-id darkcave-light-crystal-low-light-hint)
      "sksp0332"
      (the-as entity #f)
      *entity-pool*
      (game-task none)
      )
     (go cavecrystal-idle)
     )
    )
   (update! (-> self sound))
   (none)
   )
  :code
  (behavior ()
   (logior! (-> self mask) (process-mask sleep-code))
   (suspend)
   0
   (none)
   )
  )

(defmethod deactivate cavecrystal ((obj cavecrystal))
  (if (nonzero? (-> obj sound))
   (stop! (-> obj sound))
   )
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

(defmethod copy-defaults! cavecrystal ((obj cavecrystal) (arg0 res-lump))
  (set! (-> obj glow-u) 0.0)
  (set! (-> obj player-attack-id) (the-as uint 0))
  (set! (-> obj last-updated-user-lighting) (the-as uint 0))
  (set-vector! (-> obj off-color-mult) 0.0 0.0 0.0 1.0)
  (set-vector! (-> obj off-color-emissive) 0.0 0.0 0.0 0.0)
  (set-vector! (-> obj on-color-mult) 1.0 1.0 1.0 1.0)
  (set-vector! (-> obj on-color-emissive) 0.0 0.0 0.0 0.0)
  (let
   ((s4-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-others))))
   (let
    ((s3-0
      (new
       'process
       'collide-shape-prim-mesh
       s4-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s3-0 prim-core collide-as) (the-as uint 512))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set! (-> s3-0 prim-core offense) 4)
    (set! (-> s3-0 transform-index) 0)
    (set-vector! (-> s3-0 local-sphere) 0.0 19251.2 0.0 22118.4)
    )
   (dummy-46 s4-0)
   (set! (-> s4-0 nav-radius) 4915.2)
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (set! (-> obj crystal-id) (actor-count-before (-> obj link)))
  (set! (-> obj is-master?) (= (-> obj crystal-id) 3))
  (set! (-> obj glow-wf-period) (rand-vu-int-range 225 375))
  (set! (-> obj glow-wf-offset) (rand-vu-int-range 0 300))
  (if (-> obj is-master?)
   (logclear! (-> obj mask) (process-mask actor-pause))
   )
  (set!
   (-> obj start-fade-time)
   (the-as
    uint
    (the int (* 300.0 (res-lump-float (-> obj entity) 'timeout :default 8.0)))
    )
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *cavecrystal-sg* '())
  (nav-mesh-connect obj (-> obj root-override) (the-as nav-control #f))
  (set! (-> obj draw color-mult quad) (-> obj off-color-mult quad))
  (set! (-> obj draw color-emissive quad) (-> obj off-color-emissive quad))
  (ja-channel-push! 1 0)
  (let ((s5-1 (-> obj skel root-channel 0)))
   (joint-control-channel-group-eval!
    s5-1
    (the-as art-joint-anim (-> obj draw art-group data 3))
    num-func-identity
    )
   (set! (-> s5-1 frame-num) 0.0)
   )
  (ja-post)
  (dummy-47 (-> obj root-override))
  (TODO-RENAME-9 *cavecrystal-light-control* (-> obj crystal-id) 0.0 obj)
  (set!
   (-> obj sound)
   (new
    'process
    'ambient-sound
    (new 'static 'sound-spec
     :mask #x80
     :num 1.0
     :group #x1
     :sound-name-char
     (new 'static 'array uint8 16
      #x63
      #x72
      #x79
      #x73
      #x74
      #x61
      #x6c
      #x2d
      #x6f
      #x6e
      #x0
      #x0
      #x0
      #x0
      #x0
      #x0
      )
     :volume #x400
     :fo-max 80
     )
    (-> obj root-override trans)
    )
   )
  (go cavecrystal-idle)
  (none)
  )




