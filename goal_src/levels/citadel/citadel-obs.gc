;;-*-Lisp-*-
(in-package goal)

;; name: citadel-obs.gc
;; name in dgo: citadel-obs
;; dgos: CIT, L1

(define-extern *citadelcam-sg* skeleton-group)
(define-extern *citb-generator-sg* skeleton-group)
(define-extern *citb-generator-broken-sg* skeleton-group)
(define-extern *citb-hose-sg* skeleton-group)
(define-extern *citb-coil-sg* skeleton-group)
(define-extern *citb-robotboss-sg* skeleton-group)
(define-extern *citb-robotboss-nose-sg* skeleton-group)
(define-extern *citb-robotboss-head-sg* skeleton-group)
(define-extern *citb-robotboss-gun-sg* skeleton-group)
(define-extern *citb-robotboss-leftshoulder-sg* skeleton-group)
(define-extern *citb-robotboss-rightshoulder-sg* skeleton-group)
(define-extern *citb-robotboss-leftarm-sg* skeleton-group)
(define-extern *citb-robotboss-rightarm-sg* skeleton-group)
(define-extern *citb-robotboss-belly-sg* skeleton-group)
(define-extern *citb-launcher-sg* skeleton-group)
(define-extern *citb-button-sg* skeleton-group)
(define-extern *citb-iris-door-sg* skeleton-group)
(define-extern *citb-disc-d-sg* skeleton-group)
(define-extern *citb-disc-c-sg* skeleton-group)
(define-extern *citb-disc-b-sg* skeleton-group)
(define-extern *citb-disc-a-sg* skeleton-group)
(define-extern *citb-arm-shoulder-b-sg* skeleton-group)
(define-extern *citb-arm-shoulder-a-sg* skeleton-group)
(define-extern *citb-arm-d-sg* skeleton-group)
(define-extern *citb-arm-c-sg* skeleton-group)
(define-extern *citb-arm-b-sg* skeleton-group)
(define-extern *citb-arm-a-sg* skeleton-group)

(declare-type citadelcam process-drawable)
(declare-type citb-generator process-drawable)
(declare-type citb-disc process-drawable)
(declare-type citb-robotboss process-drawable)
(declare-type citb-coil process-drawable)
(declare-type citb-hose process-drawable)
(declare-type citb-generator process-drawable)

(define-extern citadelcam-idle (state citadelcam)) ;; unknown type
(define-extern citadelcam-stair-plats (state citadelcam)) ;; unknown type
(define-extern citb-generator-broken (state citb-generator)) ;; unknown type
(define-extern citb-generator-idle (state citb-generator)) ;; unknown type
(define-extern citb-disc-idle (state citb-disc)) ;; unknown type
(define-extern citb-robotboss-die (state citb-robotboss)) ;; unknown type
(define-extern citb-robotboss-idle (state citb-robotboss)) ;; unknown type
(define-extern citb-coil-broken (state citb-coil)) ;; unknown type
(define-extern citb-coil-idle (state citb-coil)) ;; unknown type
(define-extern citb-coil-break (state citb-coil)) ;; unknown type
(define-extern citb-hose-die (state citb-hose)) ;; unknown type
(define-extern citb-hose-idle (state citb-hose)) ;; unknown type
(define-extern citb-hose-spawn (state citb-hose)) ;; unknown type
(define-extern citb-generator-break (state citb-generator)) ;; unknown type

;; DECOMP BEGINS

(deftype citb-arm-section (process-drawable)
  ((root-override  collide-shape-moving         :offset        112)
   (sync           sync-info            :inline :offset-assert 176)
   (cull-dir-local vector               :inline :offset-assert 192)
   (cull-dot       float                        :offset-assert 208)
   (rot-scale      float                        :offset-assert 212)
   (y-angle        float                        :offset-assert 216)
   )
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  (:methods
    (init-root! (_type_) none 20)
    (synchonize! (_type_) none 21)
    (idle () _type_ :state 22)
    )
  )


(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "citb-arm"
     :bounds (new 'static 'vector :w 57344.0)
     :max-lod 1
     :longest-edge (meters 9.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 3)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 81920.0)
  (set! (-> v1-1 mgeo 1) (the-as uint 2))
  (set! (-> v1-1 lod-dist 1) 4095996000.0)
  (set! *citb-arm-a-sg* v1-1)
  )

(let
  ((v1-2
    (new 'static 'skeleton-group
     :art-group-name "citb-arm"
     :bounds (new 'static 'vector :w 81920.0)
     :max-lod 1
     :longest-edge (meters 10.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-2 jgeo) 4)
  (set! (-> v1-2 janim) 7)
  (set! (-> v1-2 mgeo 0) (the-as uint 5))
  (set! (-> v1-2 lod-dist 0) 81920.0)
  (set! (-> v1-2 mgeo 1) (the-as uint 6))
  (set! (-> v1-2 lod-dist 1) 4095996000.0)
  (set! *citb-arm-b-sg* v1-2)
  )

(let
  ((v1-3
    (new 'static 'skeleton-group
     :art-group-name "citb-arm"
     :bounds (new 'static 'vector :w 102400.0)
     :max-lod 1
     :longest-edge (meters 11.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-3 jgeo) 8)
  (set! (-> v1-3 janim) 11)
  (set! (-> v1-3 mgeo 0) (the-as uint 9))
  (set! (-> v1-3 lod-dist 0) 81920.0)
  (set! (-> v1-3 mgeo 1) (the-as uint 10))
  (set! (-> v1-3 lod-dist 1) 4095996000.0)
  (set! *citb-arm-c-sg* v1-3)
  )

(let
  ((v1-4
    (new 'static 'skeleton-group
     :art-group-name "citb-arm"
     :bounds (new 'static 'vector :w 118784.0)
     :max-lod 1
     :longest-edge (meters 8.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-4 jgeo) 12)
  (set! (-> v1-4 janim) 15)
  (set! (-> v1-4 mgeo 0) (the-as uint 13))
  (set! (-> v1-4 lod-dist 0) 81920.0)
  (set! (-> v1-4 mgeo 1) (the-as uint 14))
  (set! (-> v1-4 lod-dist 1) 4095996000.0)
  (set! *citb-arm-d-sg* v1-4)
  )

(let
  ((v1-5
    (new 'static 'skeleton-group
     :art-group-name "citb-arm-shoulder"
     :bounds (new 'static 'vector :w 90112.0)
     :longest-edge (meters 10.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-5 jgeo) 0)
  (set! (-> v1-5 janim) 2)
  (set! (-> v1-5 mgeo 0) (the-as uint 1))
  (set! (-> v1-5 lod-dist 0) 4095996000.0)
  (set! *citb-arm-shoulder-a-sg* v1-5)
  )

(let
  ((v1-6
    (new 'static 'skeleton-group
     :art-group-name "citb-arm-shoulder"
     :bounds (new 'static 'vector :w 90112.0)
     :longest-edge (meters 10.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-6 jgeo) 3)
  (set! (-> v1-6 janim) 5)
  (set! (-> v1-6 mgeo 0) (the-as uint 4))
  (set! (-> v1-6 lod-dist 0) 4095996000.0)
  (set! *citb-arm-shoulder-b-sg* v1-6)
  )

(defstate idle (citb-arm-section)
  :virtual #t
  :code
  (behavior ()
   (let ((gp-0 (new 'stack-no-clear 'vector))
         (s5-0 (new 'stack-no-clear 'vector))
         )
    (while #t
     (cond
      ((< (- (-> (target-pos 0) y) (-> self root-override trans y)) -122880.0)
       (set! (-> self draw force-lod) 1)
       )
      (else
       (set! (-> self draw force-lod) 0)
       0
       )
      )
     (set!
      (-> self y-angle)
      (* 65536.0 (get-current-phase (-> self sync)) (-> self rot-scale))
      )
     (quaternion-axis-angle!
      (-> self root-override quat)
      0.0
      1.0
      0.0
      (-> self y-angle)
      )
     (vector-orient-by-quat!
      gp-0
      (-> self cull-dir-local)
      (-> self root-override quat)
      )
     (vector-! s5-0 (-> self root-override trans) (camera-pos))
     (set! (-> gp-0 y) 0.0)
     (set! (-> s5-0 y) 0.0)
     (vector-normalize! gp-0 1.0)
     (vector-normalize! s5-0 1.0)
     (if (>= (vector-dot gp-0 s5-0) (-> self cull-dot))
      (logior! (-> self draw status) 2)
      (set! (-> self draw status) (logand -3 (-> self draw status)))
      )
     (suspend)
     )
    )
   (none)
   )
  :post
  (the-as (function none :behavior citb-arm-section) ja-post)
  )

(defmethod init-root! citb-arm-section ((obj citb-arm-section))
  (set!
   (-> obj root-override)
   (the-as collide-shape-moving (new 'process 'trsqv))
   )
  0
  (none)
  )

(defmethod synchonize! citb-arm-section ((obj citb-arm-section))
  (logclear! (-> obj mask) (process-mask actor-pause))
  (load-params! (-> obj sync) obj (the-as uint 3000) 0.0 0.15 0.15)
  (cond
   ((> (-> obj sync period) 0)
    (set! (-> obj rot-scale) 1.0)
    )
   (else
    (set! (-> obj rot-scale) -1.0)
    (let ((v1-6 (abs (the-as int (-> obj sync period)))))
     (set! (-> obj sync period) (the-as uint v1-6))
     )
    )
   )
  (logior! (-> obj skel status) 1)
  (set-vector! (-> obj cull-dir-local) 0.0 0.0 -1.0 1.0)
  (set! (-> obj cull-dot) (cos 5461.3335))
  0
  (none)
  )

(defmethod
  copy-defaults!
  citb-arm-section
  ((obj citb-arm-section) (arg0 res-lump))
  (init-root! obj)
  (process-drawable-from-entity! obj arg0)
  (synchonize! obj)
  (go (method-of-object obj idle))
  (none)
  )

(deftype citb-arm (citb-arm-section)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(defstate idle (citb-arm)
  :virtual #t
  :trans
  (the-as (function none :behavior citb-arm) rider-trans)
  :post
  (behavior ()
   (if (logtest? (-> self draw status) 2)
    (dummy-48 (-> self root-override))
    (dummy-49 (-> self root-override))
    )
   (rider-post)
   (none)
   )
  )

(defmethod init-root! citb-arm ((obj citb-arm))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-others))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 3))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 3)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 40960.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )

(defmethod synchonize! citb-arm ((obj citb-arm))
  ((the-as (function citb-arm-section none) (find-parent-method citb-arm 21))
   obj
   )
  (set! (-> obj draw origin-joint-index) (the-as uint 4))
  (set-vector! (-> obj cull-dir-local) 0.0 0.0 -1.0 1.0)
  (set! (-> obj cull-dot) (cos 5461.3335))
  0
  (none)
  )

(deftype citb-arm-shoulder (citb-arm-section)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(defmethod synchonize! citb-arm-shoulder ((obj citb-arm-shoulder))
  ((the-as
    (function citb-arm-section none)
    (find-parent-method citb-arm-shoulder 21)
    )
   obj
   )
  (set! (-> obj draw origin-joint-index) (the-as uint 4))
  (set-vector! (-> obj cull-dir-local) 1.0 0.0 1.0 1.0)
  (set! (-> obj cull-dot) (cos 8374.045))
  0
  (none)
  )

(deftype citb-arm-a (citb-arm)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(deftype citb-arm-b (citb-arm)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(deftype citb-arm-c (citb-arm)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(deftype citb-arm-d (citb-arm)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(deftype citb-arm-shoulder-a (citb-arm-shoulder)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(deftype citb-arm-shoulder-b (citb-arm-shoulder)
  ()
  :heap-base #x70
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17007000dc
  )


(defmethod synchonize! citb-arm-a ((obj citb-arm-a))
  (dummy-14 obj *citb-arm-a-sg* '())
  ((the-as (function citb-arm none) (find-parent-method citb-arm-a 21)) obj)
  (set! (-> obj root-override root-prim local-sphere z) -184320.0)
  0
  (none)
  )

(defmethod synchonize! citb-arm-b ((obj citb-arm-b))
  (dummy-14 obj *citb-arm-b-sg* '())
  ((the-as (function citb-arm none) (find-parent-method citb-arm-b 21)) obj)
  (set! (-> obj root-override root-prim local-sphere z) -225280.0)
  0
  (none)
  )

(defmethod synchonize! citb-arm-c ((obj citb-arm-c))
  (dummy-14 obj *citb-arm-c-sg* '())
  ((the-as (function citb-arm none) (find-parent-method citb-arm-c 21)) obj)
  (set! (-> obj root-override root-prim local-sphere z) -266240.0)
  0
  (none)
  )

(defmethod synchonize! citb-arm-d ((obj citb-arm-d))
  (dummy-14 obj *citb-arm-d-sg* '())
  ((the-as (function citb-arm none) (find-parent-method citb-arm-d 21)) obj)
  (set! (-> obj root-override root-prim local-sphere z) -307200.0)
  0
  (none)
  )

(defmethod synchonize! citb-arm-shoulder-a ((obj citb-arm-shoulder-a))
  (dummy-14 obj *citb-arm-shoulder-a-sg* '())
  ((the-as (function citb-arm none) (find-parent-method citb-arm-shoulder-a 21))
   (the-as citb-arm obj)
   )
  0
  (none)
  )

(defmethod synchonize! citb-arm-shoulder-b ((obj citb-arm-shoulder-b))
  (dummy-14 obj *citb-arm-shoulder-b-sg* '())
  ((the-as (function citb-arm none) (find-parent-method citb-arm-shoulder-b 21))
   (the-as citb-arm obj)
   )
  0
  (none)
  )

(let
  ((v1-20
    (new 'static 'skeleton-group
     :art-group-name "citb-disc"
     :bounds (new 'static 'vector :w 49152.0)
     :max-lod 2
     :longest-edge (meters 7.5)
     :version #x6
     )
    )
   )
  (set! (-> v1-20 jgeo) 0)
  (set! (-> v1-20 janim) 4)
  (set! (-> v1-20 mgeo 0) (the-as uint 1))
  (set! (-> v1-20 lod-dist 0) 81920.0)
  (set! (-> v1-20 mgeo 1) (the-as uint 2))
  (set! (-> v1-20 lod-dist 1) 163840.0)
  (set! (-> v1-20 mgeo 2) (the-as uint 3))
  (set! (-> v1-20 lod-dist 2) 4095996000.0)
  (set! *citb-disc-a-sg* v1-20)
  )

(let
  ((v1-21
    (new 'static 'skeleton-group
     :art-group-name "citb-disc"
     :bounds (new 'static 'vector :w 49152.0)
     :max-lod 2
     :longest-edge (meters 7.5)
     :version #x6
     )
    )
   )
  (set! (-> v1-21 jgeo) 5)
  (set! (-> v1-21 janim) 9)
  (set! (-> v1-21 mgeo 0) (the-as uint 6))
  (set! (-> v1-21 lod-dist 0) 81920.0)
  (set! (-> v1-21 mgeo 1) (the-as uint 7))
  (set! (-> v1-21 lod-dist 1) 163840.0)
  (set! (-> v1-21 mgeo 2) (the-as uint 8))
  (set! (-> v1-21 lod-dist 2) 4095996000.0)
  (set! *citb-disc-b-sg* v1-21)
  )

(let
  ((v1-22
    (new 'static 'skeleton-group
     :art-group-name "citb-disc"
     :bounds (new 'static 'vector :w 49152.0)
     :max-lod 2
     :longest-edge (meters 11.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-22 jgeo) 10)
  (set! (-> v1-22 janim) 14)
  (set! (-> v1-22 mgeo 0) (the-as uint 11))
  (set! (-> v1-22 lod-dist 0) 81920.0)
  (set! (-> v1-22 mgeo 1) (the-as uint 12))
  (set! (-> v1-22 lod-dist 1) 163840.0)
  (set! (-> v1-22 mgeo 2) (the-as uint 13))
  (set! (-> v1-22 lod-dist 2) 4095996000.0)
  (set! *citb-disc-c-sg* v1-22)
  )

(let
  ((v1-23
    (new 'static 'skeleton-group
     :art-group-name "citb-disc"
     :bounds (new 'static 'vector :w 49152.0)
     :max-lod 2
     :longest-edge (meters 8.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-23 jgeo) 15)
  (set! (-> v1-23 janim) 19)
  (set! (-> v1-23 mgeo 0) (the-as uint 16))
  (set! (-> v1-23 lod-dist 0) 81920.0)
  (set! (-> v1-23 mgeo 1) (the-as uint 17))
  (set! (-> v1-23 lod-dist 1) 163840.0)
  (set! (-> v1-23 mgeo 2) (the-as uint 18))
  (set! (-> v1-23 lod-dist 2) 4095996000.0)
  (set! *citb-disc-d-sg* v1-23)
  )

(deftype citb-disc (process-drawable)
  ((root-override collide-shape-moving         :offset        112)
   (sync          sync-info            :inline :offset-assert 176)
   (rot-scale     float                        :offset-assert 184)
   )
  :heap-base #x50
  :method-count-assert 22
  :size-assert         #xbc
  :flag-assert         #x16005000bc
  (:methods
    (init! (_type_) none 20)
    (dummy-21 (_type_) none 21)
    )
  )


(defstate citb-disc-idle (citb-disc)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'touch)
                    (send-event arg0 'no-look-around 75)
                    #f
                    )
     )
    )
   )
  :trans
  (the-as (function none :behavior citb-disc) rider-trans)
  :code
  (behavior ()
   (while #t
    (update! (-> self sound))
    (quaternion-axis-angle!
     (-> self root-override quat)
     0.0
     1.0
     0.0
     (* 65536.0 (get-current-phase (-> self sync)) (-> self rot-scale))
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior citb-disc) rider-post)
  )

(defmethod init! citb-disc ((obj citb-disc))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-others))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 19))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 0)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 49152.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )

(defmethod dummy-21 citb-disc ((obj citb-disc))
  0
  (none)
  )

(defmethod copy-defaults! citb-disc ((obj citb-disc) (arg0 res-lump))
  (init! obj)
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (load-params! (-> obj sync) obj (the-as uint 3000) 0.0 0.15 0.15)
  (cond
   ((> (-> obj sync period) 0)
    (set! (-> obj rot-scale) 1.0)
    )
   (else
    (set! (-> obj rot-scale) -1.0)
    (let ((v1-8 (abs (the-as int (-> obj sync period)))))
     (set! (-> obj sync period) (the-as uint v1-8))
     )
    )
   )
  (dummy-21 obj)
  (set!
   (-> obj sound)
   (new
    'process
    'ambient-sound
    (new 'static 'sound-spec
     :mask #x80
     :num 1.0
     :group #x1
     :sound-name (static-sound-name "rotate-plat")
     :volume #x400
     :fo-max 20
     )
    (-> obj root-override trans)
    )
   )
  (logior! (-> obj skel status) 1)
  (go citb-disc-idle)
  (none)
  )

(deftype citb-disc-a (citb-disc)
  ()
  :heap-base #x50
  :method-count-assert 22
  :size-assert         #xbc
  :flag-assert         #x16005000bc
  )


(deftype citb-disc-b (citb-disc)
  ()
  :heap-base #x50
  :method-count-assert 22
  :size-assert         #xbc
  :flag-assert         #x16005000bc
  )


(deftype citb-disc-c (citb-disc)
  ()
  :heap-base #x50
  :method-count-assert 22
  :size-assert         #xbc
  :flag-assert         #x16005000bc
  )


(deftype citb-disc-d (citb-disc)
  ()
  :heap-base #x50
  :method-count-assert 22
  :size-assert         #xbc
  :flag-assert         #x16005000bc
  )


(defmethod dummy-21 citb-disc-a ((obj citb-disc-a))
  (dummy-14 obj *citb-disc-a-sg* '())
  0
  (none)
  )

(defmethod dummy-21 citb-disc-b ((obj citb-disc-b))
  (dummy-14 obj *citb-disc-b-sg* '())
  0
  (none)
  )

(defmethod dummy-21 citb-disc-c ((obj citb-disc-c))
  (dummy-14 obj *citb-disc-c-sg* '())
  0
  (none)
  )

(defmethod dummy-21 citb-disc-d ((obj citb-disc-d))
  (dummy-14 obj *citb-disc-d-sg* '())
  0
  (none)
  )

(deftype citb-iris-door (eco-door)
  ()
  :heap-base #xa0
  :method-count-assert 27
  :size-assert         #x104
  :flag-assert         #x1b00a00104
  )


(let
  ((v1-31
    (new 'static 'skeleton-group
     :art-group-name "citb-iris-door"
     :bounds (new 'static 'vector :w 32768.0)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-31 jgeo) 0)
  (set! (-> v1-31 janim) 3)
  (set! (-> v1-31 mgeo 0) (the-as uint 1))
  (set! (-> v1-31 lod-dist 0) 81920.0)
  (set! (-> v1-31 mgeo 1) (the-as uint 2))
  (set! (-> v1-31 lod-dist 1) 4095996000.0)
  (set! *citb-iris-door-sg* v1-31)
  )

(defmethod TODO-RENAME-24 citb-iris-door ((obj citb-iris-door))
  (let
   ((s5-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-others))))
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 512))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 1))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 0)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 16384.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )

(defmethod TODO-RENAME-25 citb-iris-door ((obj citb-iris-door))
  (dummy-14 obj *citb-iris-door-sg* '())
  (set! (-> obj open-distance) 32768.0)
  (set! (-> obj close-distance) 49152.0)
  (set! (-> obj auto-close) #t)
  (process-entity-status! obj (entity-perm-status complete) #t)
  (dummy-47 (-> obj root-override))
  0
  (none)
  )

(let
  ((v1-32
    (new 'static 'skeleton-group
     :art-group-name "citb-button"
     :bounds (new 'static 'vector :w 12288.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-32 jgeo) 0)
  (set! (-> v1-32 janim) 2)
  (set! (-> v1-32 mgeo 0) (the-as uint 1))
  (set! (-> v1-32 lod-dist 0) 4095996000.0)
  (set! *citb-button-sg* v1-32)
  )

(deftype citb-button (basebutton)
  ()
  :heap-base #x90
  :method-count-assert 32
  :size-assert         #x100
  :flag-assert         #x2000900100
  )


(defmethod TODO-RENAME-27 citb-button ((obj citb-button))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 1))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 3)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 12288.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  (the-as collide-shape-moving 0)
  )

(defmethod TODO-RENAME-26 citb-button ((obj citb-button))
  (dummy-14 obj *citb-button-sg* '())
  (logior! (-> obj skel status) 1)
  (ja-channel-set! 1)
  (cond
   ((-> obj down?)
    (let ((s5-0 (-> obj skel root-channel 0)))
     (joint-control-channel-group-eval!
      s5-0
      (the-as art-joint-anim (-> obj draw art-group data 2))
      num-func-identity
      )
     (set!
      (-> s5-0 frame-num)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> obj draw art-group data 2))
         data
         0
         length
         )
        -1
        )
       )
      )
     )
    )
   (else
    (let ((s5-1 (-> obj skel root-channel 0)))
     (joint-control-channel-group-eval!
      s5-1
      (the-as art-joint-anim (-> obj draw art-group data 2))
      num-func-identity
      )
     (set! (-> s5-1 frame-num) 0.0)
     )
    )
   )
  (set! (-> obj anim-speed) 2.0)
  (set! (-> obj timeout) 1.0)
  (dummy-47 (-> obj root-override))
  (ja-post)
  (none)
  )

(deftype citb-launcher (plat)
  ((launcher (pointer launcher)  :offset-assert 264)
   )
  :heap-base #xa0
  :method-count-assert 33
  :size-assert         #x10c
  :flag-assert         #x2100a0010c
  )


(defstate plat-path-active (citb-launcher)
  :virtual #t
  :post
  (behavior ()
   (let ((t9-0 (-> (method-of-type plat plat-path-active) post)))
    (if t9-0
     ((the-as (function none :behavior citb-launcher) t9-0))
     )
    )
   (send-event
    (ppointer->process (-> self launcher))
    'trans
    (-> self basetrans)
    )
   (none)
   )
  )

(let
  ((v1-37
    (new 'static 'skeleton-group
     :art-group-name "citb-launcher"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-37 jgeo) 0)
  (set! (-> v1-37 janim) 2)
  (set! (-> v1-37 mgeo 0) (the-as uint 1))
  (set! (-> v1-37 lod-dist 0) 4095996000.0)
  (set! *citb-launcher-sg* v1-37)
  )

(defmethod get-unlit-skel citb-launcher ((obj citb-launcher))
  *citb-launcher-sg*
  )

(defmethod dummy-26 citb-launcher ((obj citb-launcher))
  (let
   ((f30-0 (res-lump-float (-> obj entity) 'spring-height :default 163840.0))
    (s5-0 (res-lump-value (-> obj entity) 'mode uint128))
    (s4-0 (get-process *default-dead-pool* launcher #x4000))
    )
   (set! (-> obj launcher) (the-as (pointer launcher) (when s4-0
                                                       (let
                                                        ((t9-3
                                                          (method-of-type
                                                           launcher
                                                           activate
                                                           )
                                                          )
                                                         )
                                                        (t9-3
                                                         (the-as launcher s4-0)
                                                         obj
                                                         'launcher
                                                         (the-as
                                                          pointer
                                                          #x70004000
                                                          )
                                                         )
                                                        )
                                                       (run-now-in-process
                                                        s4-0
                                                        launcher-init-by-other
                                                        (->
                                                         obj
                                                         root-override
                                                         trans
                                                         )
                                                        f30-0
                                                        s5-0
                                                        81920.0
                                                        )
                                                       (-> s4-0 ppointer)
                                                       )
                            )
    )
   )
  (set! (-> obj root-override root-prim local-sphere w) 18432.0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  0
  (none)
  )

(let
  ((v1-38
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :y 69632.0 :w 73728.0)
     :longest-edge (meters 6.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-38 jgeo) 0)
  (set! (-> v1-38 janim) 2)
  (set! (-> v1-38 mgeo 0) (the-as uint 1))
  (set! (-> v1-38 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-sg* v1-38)
  )

(let
  ((v1-39
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :y 122880.0 :z 40960.0 :w 49152.0)
     :longest-edge (meters 2.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-39 jgeo) 6)
  (set! (-> v1-39 janim) 8)
  (set! (-> v1-39 mgeo 0) (the-as uint 7))
  (set! (-> v1-39 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-head-sg* v1-39)
  )

(let
  ((v1-40
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :y 40960.0 :z 81920.0 :w 61440.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-40 jgeo) 3)
  (set! (-> v1-40 janim) 5)
  (set! (-> v1-40 mgeo 0) (the-as uint 4))
  (set! (-> v1-40 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-nose-sg* v1-40)
  )

(let
  ((v1-41
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :y 114688.0 :z -40960.0 :w 57344.0)
     :longest-edge (meters 5.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-41 jgeo) 9)
  (set! (-> v1-41 janim) 11)
  (set! (-> v1-41 mgeo 0) (the-as uint 10))
  (set! (-> v1-41 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-gun-sg* v1-41)
  )

(let
  ((v1-42
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :x 69632.0 :y 110592.0 :w 57344.0)
     :longest-edge (meters 6.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-42 jgeo) 12)
  (set! (-> v1-42 janim) 14)
  (set! (-> v1-42 mgeo 0) (the-as uint 13))
  (set! (-> v1-42 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-leftshoulder-sg* v1-42)
  )

(let
  ((v1-43
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :x -69632.0 :y 110592.0 :w 57344.0)
     :longest-edge (meters 6.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-43 jgeo) 15)
  (set! (-> v1-43 janim) 17)
  (set! (-> v1-43 mgeo 0) (the-as uint 16))
  (set! (-> v1-43 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-rightshoulder-sg* v1-43)
  )

(let
  ((v1-44
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :x 61440.0 :y 20480.0 :z -40960.0 :w 81920.0)
     :longest-edge (meters 9.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-44 jgeo) 18)
  (set! (-> v1-44 janim) 20)
  (set! (-> v1-44 mgeo 0) (the-as uint 19))
  (set! (-> v1-44 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-leftarm-sg* v1-44)
  )

(let
  ((v1-45
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :x -61440.0 :z -32768.0 :w 65536.0)
     :longest-edge (meters 3.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-45 jgeo) 21)
  (set! (-> v1-45 janim) 23)
  (set! (-> v1-45 mgeo 0) (the-as uint 22))
  (set! (-> v1-45 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-rightarm-sg* v1-45)
  )

(let
  ((v1-46
    (new 'static 'skeleton-group
     :art-group-name "citb-robotboss"
     :bounds
     (new 'static 'vector :y -8192.0 :z 12288.0 :w 40960.0)
     :longest-edge (meters 3.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-46 jgeo) 24)
  (set! (-> v1-46 janim) 26)
  (set! (-> v1-46 mgeo 0) (the-as uint 25))
  (set! (-> v1-46 lod-dist 0) 4095996000.0)
  (set! *citb-robotboss-belly-sg* v1-46)
  )

(deftype citb-robotboss (process-drawable)
  ((root-override collide-shape  :offset        112)
   (shield-on     symbol         :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  )


(defstate citb-robotboss-idle (citb-robotboss)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (sv-96 int) (sv-112 int))
   (the-as object (cond
                   ((= arg2 'shield-off)
                    (stop! (-> self sound))
                    (if (-> self shield-on)
                     (sound-play-by-name
                      (static-sound-name "robotcage-off")
                      (new-sound-id)
                      1024
                      0
                      0
                      (the-as uint 1)
                      (the-as vector #t)
                      )
                     )
                    (set! (-> self shield-on) #f)
                    #f
                    )
                   ((= arg2 'shield-on)
                    (let ((v0-3 #t))
                     (set! (-> self shield-on) v0-3)
                     v0-3
                     )
                    )
                   ((= arg2 'die)
                    (dummy-18 self)
                    (the-as symbol (deactivate self))
                    )
                   ((or (= arg2 'touch) (= arg2 'attack))
                    (let ((s4-0 sound-play-by-name)
                          (s3-0
                           (make-u128 #x7061 (the-as uint #x7a2d646c65696873))
                           )
                          (s2-0 (new-sound-id))
                          (s1-0 1024)
                          (s0-0 0)
                          )
                     (set! sv-96 0)
                     (set! sv-112 1)
                     (let ((t2-1 (target-pos 0)))
                      (s4-0
                       (the-as sound-name s3-0)
                       s2-0
                       s1-0
                       s0-0
                       sv-96
                       (the-as uint sv-112)
                       t2-1
                       )
                      )
                     )
                    (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-3 from) self)
                     (set! (-> a1-3 num-params) 2)
                     (set! (-> a1-3 message) 'shove)
                     (set! (-> a1-3 param 0) (-> arg3 param 0))
                     (let ((v1-21 (new 'static 'attack-info :mask #xc0)))
                      (set! (-> v1-21 shove-up) 8192.0)
                      (set! (-> v1-21 shove-back) 12288.0)
                      (set! (-> a1-3 param 1) (the-as uint v1-21))
                      )
                     (the-as symbol (send-event-function arg0 a1-3))
                     )
                    )
                   )
    )
   )
  :code
  (behavior ()
   (let* ((s5-0 (get-process *default-dead-pool* manipy #x4000))
          (gp-0 (when s5-0
                 (let ((t9-1 (method-of-type manipy activate)))
                  (t9-1
                   (the-as manipy s5-0)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-0
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-nose-sg*
                  #f
                  )
                 (-> s5-0 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-0) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-0)
     'art-joint-anim
     "citb-robotboss-nose-idle"
     0
     )
    (send-event (ppointer->process gp-0) 'draw #t)
    )
   (let* ((s5-1 (get-process *default-dead-pool* manipy #x4000))
          (gp-1 (when s5-1
                 (let ((t9-7 (method-of-type manipy activate)))
                  (t9-7
                   (the-as manipy s5-1)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-1
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-head-sg*
                  #f
                  )
                 (-> s5-1 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-1) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-1)
     'art-joint-anim
     "citb-robotboss-head-idle"
     0
     )
    (send-event (ppointer->process gp-1) 'draw #t)
    )
   (let* ((s5-2 (get-process *default-dead-pool* manipy #x4000))
          (gp-2 (when s5-2
                 (let ((t9-13 (method-of-type manipy activate)))
                  (t9-13
                   (the-as manipy s5-2)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-2
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-gun-sg*
                  #f
                  )
                 (-> s5-2 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-2) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-2)
     'art-joint-anim
     "citb-robotboss-gun-idle"
     0
     )
    (send-event (ppointer->process gp-2) 'draw #t)
    )
   (let* ((s5-3 (get-process *default-dead-pool* manipy #x4000))
          (gp-3 (when s5-3
                 (let ((t9-19 (method-of-type manipy activate)))
                  (t9-19
                   (the-as manipy s5-3)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-3
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-leftshoulder-sg*
                  #f
                  )
                 (-> s5-3 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-3) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-3)
     'art-joint-anim
     "citb-robotboss-leftshoulder-idle"
     0
     )
    (send-event (ppointer->process gp-3) 'draw #t)
    )
   (let* ((s5-4 (get-process *default-dead-pool* manipy #x4000))
          (gp-4 (when s5-4
                 (let ((t9-25 (method-of-type manipy activate)))
                  (t9-25
                   (the-as manipy s5-4)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-4
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-rightshoulder-sg*
                  #f
                  )
                 (-> s5-4 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-4) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-4)
     'art-joint-anim
     "citb-robotboss-rightshoulder-idle"
     0
     )
    (send-event (ppointer->process gp-4) 'draw #t)
    )
   (let* ((s5-5 (get-process *default-dead-pool* manipy #x4000))
          (gp-5 (when s5-5
                 (let ((t9-31 (method-of-type manipy activate)))
                  (t9-31
                   (the-as manipy s5-5)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-5
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-leftarm-sg*
                  #f
                  )
                 (-> s5-5 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-5) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-5)
     'art-joint-anim
     "citb-robotboss-leftarm-idle"
     0
     )
    (send-event (ppointer->process gp-5) 'draw #t)
    )
   (let* ((s5-6 (get-process *default-dead-pool* manipy #x4000))
          (gp-6 (when s5-6
                 (let ((t9-37 (method-of-type manipy activate)))
                  (t9-37
                   (the-as manipy s5-6)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-6
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-rightarm-sg*
                  #f
                  )
                 (-> s5-6 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-6) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-6)
     'art-joint-anim
     "citb-robotboss-rightarm-idle"
     0
     )
    (send-event (ppointer->process gp-6) 'draw #t)
    )
   (let* ((s5-7 (get-process *default-dead-pool* manipy #x4000))
          (gp-7 (when s5-7
                 (let ((t9-43 (method-of-type manipy activate)))
                  (t9-43
                   (the-as manipy s5-7)
                   self
                   'manipy
                   (the-as pointer #x70004000)
                   )
                  )
                 (run-now-in-process
                  s5-7
                  manipy-init
                  (-> self root-override trans)
                  (-> self entity)
                  *citb-robotboss-belly-sg*
                  #f
                  )
                 (-> s5-7 ppointer)
                 )
           )
          )
    (send-event (ppointer->process gp-7) 'anim-mode 'loop)
    (send-event
     (ppointer->process gp-7)
     'art-joint-anim
     "citb-robotboss-belly-idle"
     0
     )
    (send-event (ppointer->process gp-7) 'draw #t)
    )
   (dummy-47 (-> self root-override))
   (while #t
    (when (-> self shield-on)
     (update! (-> self sound))
     (spawn (-> self part) (-> self root-override trans))
     (set! (-> *palette-fade-controls* control 7 fade) 1.0)
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior citb-robotboss) ja-post)
  )

(defstate citb-robotboss-die (citb-robotboss)
  :code
  (behavior ()
   (dummy-18 self)
   (deactivate self)
   (none)
   )
  )

(defmethod copy-defaults! citb-robotboss ((obj citb-robotboss) (arg0 res-lump))
  (let
   ((s4-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-player))))
   (let
    ((s3-0
      (new
       'process
       'collide-shape-prim-mesh
       s4-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s3-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set! (-> s3-0 prim-core offense) 4)
    (set! (-> s3-0 transform-index) 3)
    (set-vector! (-> s3-0 local-sphere) 0.0 81920.0 0.0 143360.0)
    )
   (dummy-46 s4-0)
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *citb-robotboss-sg* '())
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 601) obj)
   )
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj shield-on) #t)
  (set!
   (-> obj sound)
   (new
    'process
    'ambient-sound
    (new 'static 'sound-spec
     :mask #x80
     :num 1.0
     :group #x1
     :sound-name (static-sound-name "robotcage-lp")
     :volume #x400
     :fo-max #x96
     )
    (-> obj root-override trans)
    )
   )
  (if
   (= (get-task-status (-> obj entity extra perm task)) (task-status invalid))
   (go citb-robotboss-die)
   (go citb-robotboss-idle)
   )
  (none)
  )

(let
  ((v1-50
    (new 'static 'skeleton-group
     :art-group-name "citb-coil"
     :bounds (new 'static 'vector :w 16384.0)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-50 jgeo) 0)
  (set! (-> v1-50 janim) 3)
  (set! (-> v1-50 mgeo 0) (the-as uint 1))
  (set! (-> v1-50 lod-dist 0) 81920.0)
  (set! (-> v1-50 mgeo 1) (the-as uint 2))
  (set! (-> v1-50 lod-dist 1) 4095996000.0)
  (set! *citb-coil-sg* v1-50)
  )

(deftype citb-coil (process-drawable)
  ((part-off sparticle-launch-control  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  )


(defmethod relocate citb-coil ((obj citb-coil) (arg0 int))
  (if (nonzero? (-> obj part-off))
   (&+! (-> obj part-off) arg0)
   )
  (the-as citb-coil ((method-of-type process-drawable relocate) obj arg0))
  )

(defmethod deactivate citb-coil ((obj citb-coil))
  (if (nonzero? (-> obj part-off))
   (kill-and-free-particles (-> obj part-off))
   )
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

(defstate citb-coil-idle (citb-coil)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (= v1-0 'trigger)
                    (go citb-coil-break)
                    )
     )
    )
   )
  :code
  (behavior ()
   (while #t
    (let ((a0-0 (-> self skel root-channel 0)))
     (set! (-> a0-0 frame-group) (if (> (-> self skel active-channels) 0)
                                  (-> self skel root-channel 0 frame-group)
                                  )
      )
     (set!
      (-> a0-0 param 0)
      (the float (+ (-> (if (> (-> self skel active-channels) 0)
                         (-> self skel root-channel 0 frame-group)
                         )
                     data
                     0
                     length
                     )
                  -1
                  )
       )
      )
     (set! (-> a0-0 param 1) 1.0)
     (set! (-> a0-0 frame-num) 0.0)
     (joint-control-channel-group! a0-0 (if (> (-> self skel active-channels) 0)
                                         (->
                                          self
                                          skel
                                          root-channel
                                          0
                                          frame-group
                                          )
                                         )
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-1 (-> self skel root-channel 0)))
      (set!
       (-> a0-1 param 0)
       (the float (+ (-> a0-1 frame-group data 0 length) -1))
       )
      (set! (-> a0-1 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-1
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  :post
  (behavior ()
   (spawn (-> self part) (-> self root trans))
   (ja-post)
   (none)
   )
  )

(defstate citb-coil-break (citb-coil)
  :code
  (behavior ()
   (process-entity-status! self (entity-perm-status complete) #t)
   (ja-channel-push! 1 30)
   (let ((a0-2 (-> self skel root-channel 0)))
    (set!
     (-> a0-2 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 4))
     )
    (set!
     (-> a0-2 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 4))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-2 param 1) 1.0)
    (set! (-> a0-2 frame-num) 0.0)
    (joint-control-channel-group!
     a0-2
     (the-as art-joint-anim (-> self draw art-group data 4))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-3 (-> self skel root-channel 0)))
     (set!
      (-> a0-3 param 0)
      (the float (+ (-> a0-3 frame-group data 0 length) -1))
      )
     (set! (-> a0-3 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (go citb-coil-broken)
   (none)
   )
  :post
  (the-as (function none :behavior citb-coil) ja-post)
  )

(defstate citb-coil-broken (citb-coil)
  :code
  (behavior ()
   (let ((a0-0 (-> self skel root-channel 0)))
    (set!
     (-> a0-0 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 5))
     )
    (set!
     (-> a0-0 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 5))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-0 param 1) 1.0)
    (set! (-> a0-0 frame-num) 0.0)
    (joint-control-channel-group!
     a0-0
     (the-as art-joint-anim (-> self draw art-group data 5))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-1 (-> self skel root-channel 0)))
     (set!
      (-> a0-1 param 0)
      (the float (+ (-> a0-1 frame-group data 0 length) -1))
      )
     (set! (-> a0-1 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-1
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (while #t
    (spawn (-> self part-off) (-> self root trans))
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior citb-coil) ja-post)
  )

(defmethod copy-defaults! citb-coil ((obj citb-coil) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *citb-coil-sg* '())
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 596) obj)
   )
  (set!
   (-> obj part-off)
   (create-launch-control (-> *part-group-id-table* 602) obj)
   )
  (let
   ((v1-9 (the-as entity (entity-actor-lookup (-> obj entity) 'state-actor 0))))
   (if (not (the-as entity-actor v1-9))
    (set! v1-9 (-> obj entity))
    )
   (if (logtest? (-> v1-9 extra perm status) (entity-perm-status complete))
    (go citb-coil-broken)
    (go citb-coil-idle)
    )
   )
  (none)
  )

(let
  ((v1-55
    (new 'static 'skeleton-group
     :art-group-name "citb-hose"
     :bounds (new 'static 'vector :w 40960.0)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-55 jgeo) 0)
  (set! (-> v1-55 janim) 3)
  (set! (-> v1-55 mgeo 0) (the-as uint 1))
  (set! (-> v1-55 lod-dist 0) 81920.0)
  (set! (-> v1-55 mgeo 1) (the-as uint 2))
  (set! (-> v1-55 lod-dist 1) 4095996000.0)
  (set! *citb-hose-sg* v1-55)
  )

(deftype citb-hose (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  )


(defbehavior
  citb-hose-event-handler citb-hose
  ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (let ((v1-0 arg2))
   (the-as object (cond
                   ((= v1-0 'spawn)
                    (go citb-hose-spawn)
                    )
                   ((= v1-0 'trigger)
                    (go citb-hose-die)
                    )
                   )
    )
   )
  )

(defstate citb-hose-idle (citb-hose)
  :event
  citb-hose-event-handler
  :code
  (behavior ()
   (while #t
    (let ((a0-0 (-> self skel root-channel 0)))
     (set!
      (-> a0-0 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 3))
      )
     (set!
      (-> a0-0 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 3))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-0 param 1) 1.0)
     (set! (-> a0-0 frame-num) 0.0)
     (joint-control-channel-group!
      a0-0
      (the-as art-joint-anim (-> self draw art-group data 3))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-1 (-> self skel root-channel 0)))
      (set!
       (-> a0-1 param 0)
       (the float (+ (-> a0-1 frame-group data 0 length) -1))
       )
      (set! (-> a0-1 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-1
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  :post
  (the-as (function none :behavior citb-hose) ja-post)
  )

(defstate citb-hose-spawn (citb-hose)
  :event
  citb-hose-event-handler
  :code
  (behavior ()
   (ja-channel-push! 1 30)
   (let ((a0-1 (-> self skel root-channel 0)))
    (set!
     (-> a0-1 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 4))
     )
    (set!
     (-> a0-1 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 4))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-1 param 1) 1.0)
    (set! (-> a0-1 frame-num) 0.0)
    (joint-control-channel-group!
     a0-1
     (the-as art-joint-anim (-> self draw art-group data 4))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-2 (-> self skel root-channel 0)))
     (set!
      (-> a0-2 param 0)
      (the float (+ (-> a0-2 frame-group data 0 length) -1))
      )
     (set! (-> a0-2 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-2
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (go citb-hose-idle)
   (none)
   )
  :post
  (the-as (function none :behavior citb-hose) ja-post)
  )

(defstate citb-hose-die (citb-hose)
  :event
  citb-hose-event-handler
  :code
  (behavior ()
   (process-entity-status! self (entity-perm-status complete) #t)
   (ja-channel-push! 1 30)
   (let ((a0-2 (-> self skel root-channel 0)))
    (set!
     (-> a0-2 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 5))
     )
    (set!
     (-> a0-2 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 5))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-2 param 1) 1.0)
    (set! (-> a0-2 frame-num) 0.0)
    (joint-control-channel-group!
     a0-2
     (the-as art-joint-anim (-> self draw art-group data 5))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-3 (-> self skel root-channel 0)))
     (set!
      (-> a0-3 param 0)
      (the float (+ (-> a0-3 frame-group data 0 length) -1))
      )
     (set! (-> a0-3 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (anim-loop)
   (none)
   )
  :post
  (the-as (function none :behavior citb-hose) ja-post)
  )

(defmethod copy-defaults! citb-hose ((obj citb-hose) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *citb-hose-sg* '())
  (let
   ((v1-3 (the-as entity (entity-actor-lookup (-> obj entity) 'state-actor 0))))
   (if (not (the-as entity-actor v1-3))
    (set! v1-3 (-> obj entity))
    )
   (if (logtest? (-> v1-3 extra perm status) (entity-perm-status complete))
    (go citb-hose-die)
    (go citb-hose-idle)
    )
   )
  (none)
  )

(deftype citb-chains (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )


(let
  ((v1-62
    (new 'static 'skeleton-group
     :art-group-name "citb-generator"
     :bounds (new 'static 'vector :w 8192.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-62 jgeo) 0)
  (set! (-> v1-62 janim) 4)
  (set! (-> v1-62 mgeo 0) (the-as uint 1))
  (set! (-> v1-62 lod-dist 0) 4095996000.0)
  (set! *citb-generator-sg* v1-62)
  )

(let
  ((v1-63
    (new 'static 'skeleton-group
     :art-group-name "citb-generator"
     :bounds (new 'static 'vector :w 8192.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-63 jgeo) 2)
  (set! (-> v1-63 janim) 4)
  (set! (-> v1-63 mgeo 0) (the-as uint 3))
  (set! (-> v1-63 lod-dist 0) 4095996000.0)
  (set! *citb-generator-broken-sg* v1-63)
  )

(deftype citb-generator (process-drawable)
  ((root-override   collide-shape                    :offset        112)
   (normal-look     lod-set                  :inline :offset-assert 176)
   (broken-look     lod-set                  :inline :offset-assert 212)
   (mushroom-pos    vector                   :inline :offset-assert 256)
   (mushroom        symbol                           :offset-assert 272)
   (birth-fuel-cell symbol                           :offset-assert 276)
   (trigger-others  symbol                           :offset-assert 280)
   (part-broken     sparticle-launch-control         :offset-assert 284)
   (part-mushroom   sparticle-launch-control         :offset-assert 288)
   )
  :heap-base #xc0
  :method-count-assert 22
  :size-assert         #x124
  :flag-assert         #x1600c00124
  (:methods
    (init! (_type_) none 20)
    (dummy-21 (_type_) none 21)
    )
  )


(defmethod relocate citb-generator ((obj citb-generator) (arg0 int))
  (if (nonzero? (-> obj part-broken))
   (&+! (-> obj part-broken) arg0)
   )
  (if (nonzero? (-> obj part-mushroom))
   (&+! (-> obj part-mushroom) arg0)
   )
  (the-as citb-generator ((method-of-type process-drawable relocate) obj arg0))
  )

(defmethod deactivate citb-generator ((obj citb-generator))
  (if (nonzero? (-> obj part-broken))
   (kill-and-free-particles (-> obj part-broken))
   )
  (if (nonzero? (-> obj part-mushroom))
   (kill-and-free-particles (-> obj part-mushroom))
   )
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

(defbehavior citb-generator-trigger-others citb-generator ()
  (let ((gp-0 (entity-actor-count (-> self entity) 'alt-actor)))
   (dotimes (s5-0 gp-0)
    (let ((s4-0 (entity-actor-lookup (-> self entity) 'alt-actor s5-0))
          (a1-2 (new 'stack-no-clear 'event-message-block))
          )
     (set! (-> a1-2 from) self)
     (set! (-> a1-2 num-params) 0)
     (set! (-> a1-2 message) 'trigger)
     (let ((t9-2 send-event-function)
           (v1-1 s4-0)
           )
      (when (not (t9-2 (if v1-1
                        (-> v1-1 extra process)
                        )
                  a1-2
                  )
             )
       (entity-birth-no-kill s4-0)
       (suspend)
       (send-event (if s4-0
                    (-> s4-0 extra process)
                    )
        'trigger
        )
       )
      )
     )
    )
   )
  (let ((gp-1 (-> *display* base-frame-counter)))
   (while (< (- (-> *display* base-frame-counter) gp-1) 150)
    (if (movie?)
     (set! gp-1 (-> *display* base-frame-counter))
     )
    (suspend)
    )
   )
  (let ((gp-2 (entity-actor-count (-> self entity) 'trigger-actor)))
   (dotimes (s5-1 gp-2)
    (let ((s4-1 (entity-actor-lookup (-> self entity) 'trigger-actor s5-1))
          (a1-6 (new 'stack-no-clear 'event-message-block))
          )
     (set! (-> a1-6 from) self)
     (set! (-> a1-6 num-params) 0)
     (set! (-> a1-6 message) 'trigger)
     (let ((t9-8 send-event-function)
           (v1-19 s4-1)
           )
      (when (not (t9-8 (if v1-19
                        (-> v1-19 extra process)
                        )
                  a1-6
                  )
             )
       (entity-birth-no-kill s4-1)
       (suspend)
       (send-event (if s4-1
                    (-> s4-1 extra process)
                    )
        'trigger
        )
       )
      )
     )
    )
   )
  0
  (none)
  )

(defstate citb-generator-idle (citb-generator)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((= v1-0 'attack)
                     (if (-> self mushroom)
                      (increment-success-for-hint
                       (the-as level-hint-control 2054)
                       )
                      (increment-success-for-hint
                       (the-as level-hint-control 2057)
                       )
                      )
                     (go citb-generator-break)
                     )
                    ((= v1-0 'trigger)
                     #t
                     )
                    )
     )
    )
   )
  :exit
  (behavior ()
   (stop! (-> self sound))
   (none)
   )
  :code
  (behavior ()
   (dummy-11 (-> self draw) (-> self normal-look))
   (dummy-47 (-> self root-override))
   (while #t
    (spawn (-> self part) (-> self root-override trans))
    (update! (-> self sound))
    (if (-> self mushroom)
     (spawn (-> self part-mushroom) (-> self mushroom-pos))
     )
    (if (not (-> self mushroom))
     (set!
      (-> *palette-fade-controls* control 3 fade)
      (+ 0.3333 (-> *palette-fade-controls* control 3 fade))
      )
     )
    (when
     (and
      *target*
      (>=
       32768.0
       (vector-vector-distance
        (-> self root-override trans)
        (-> *target* control trans)
        )
       )
      )
     (if (-> self mushroom)
      (level-hint-spawn
       (game-text-id citadel-break-generator-hint)
       "sksp0381"
       (the-as entity #f)
       *entity-pool*
       (game-task none)
       )
      (level-hint-spawn
       (game-text-id citadel-break-generators-reminder)
       "sksp0384"
       (the-as entity #f)
       *entity-pool*
       (game-task none)
       )
      )
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior citb-generator) ja-post)
  )

(defstate citb-generator-break (citb-generator)
  :code
  (behavior ()
   (let ((gp-0 (entity-actor-count (-> self entity) 'open-actor)))
    (dotimes (s5-0 gp-0)
     (let ((s4-0 (entity-actor-lookup (-> self entity) 'open-actor s5-0))
           (a1-2 (new 'stack-no-clear 'event-message-block))
           )
      (set! (-> a1-2 from) self)
      (set! (-> a1-2 num-params) 0)
      (set! (-> a1-2 message) 'open)
      (let ((t9-2 send-event-function)
            (v1-1 s4-0)
            )
       (when (not (t9-2 (if v1-1
                         (-> v1-1 extra process)
                         )
                   a1-2
                   )
              )
        (entity-birth-no-kill s4-0)
        (suspend)
        (send-event (if s4-0
                     (-> s4-0 extra process)
                     )
         'open
         )
        )
       )
      )
     )
    )
   (process-entity-status! self (entity-perm-status complete) #t)
   (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-1
     (let ((t9-7 (method-of-type part-tracker activate)))
      (t9-7
       (the-as part-tracker gp-1)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-1
      part-tracker-init
      (-> *part-group-id-table* 598)
      -1
      #f
      #f
      #f
      (-> self root-override trans)
      )
     (-> gp-1 ppointer)
     )
    )
   (sound-play-by-name
    (static-sound-name "sagecage-open")
    (new-sound-id)
    1024
    0
    0
    (the-as uint 1)
    (the-as vector #t)
    )
   (go citb-generator-broken)
   (none)
   )
  :post
  (the-as (function none :behavior citb-generator) ja-post)
  )

(defstate citb-generator-broken (citb-generator)
  :code
  (behavior ()
   (dummy-11 (-> self draw) (-> self broken-look))
   (dummy-47 (-> self root-override))
   (cond
    ((-> self birth-fuel-cell)
     (process-drawable-birth-fuel-cell #f #f #t)
     (when (-> self child)
      (while (-> self child)
       (suspend)
       )
      (citb-generator-trigger-others)
      )
     )
    (else
     (citb-generator-trigger-others)
     )
    )
   (anim-loop)
   (none)
   )
  :post
  (behavior ()
   (spawn (-> self part-broken) (-> self root-override trans))
   (ja-post)
   (none)
   )
  )

(defmethod init! citb-generator ((obj citb-generator))
  (let
   ((s5-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-player))))
   (let ((s4-0 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 1))
    (set! (-> s4-0 prim-core offense) 4)
    (set-vector! (-> s4-0 local-sphere) 0.0 4096.0 0.0 4096.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )

(defmethod dummy-21 citb-generator ((obj citb-generator))
  (dummy-14 obj *citb-generator-sg* '())
  (let ((a0-2 (-> obj normal-look))
        (t9-1 (method-of-type lod-set dummy-9))
        )
   *citb-generator-sg*
   (-> obj draw art-group)
   (-> obj entity)
   (t9-1 a0-2)
   )
  (let ((a0-3 (-> obj broken-look))
        (t9-2 (method-of-type lod-set dummy-9))
        )
   *citb-generator-broken-sg*
   (-> obj draw art-group)
   (-> obj entity)
   (t9-2 a0-3)
   )
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (set!
   (-> obj birth-fuel-cell)
   (< (the-as uint 1) (the-as uint (-> obj entity extra perm task)))
   )
  (set! (-> obj trigger-others) #f)
  (set! (-> obj mushroom-pos quad) (-> obj root-override trans quad))
  (let ((f30-0 0.0))
   (cond
    ((name= (-> obj name) "citb-generator-1")
     (set! (-> obj mushroom) #t)
     (set! f30-0 21845.334)
     )
    ((name= (-> obj name) "citb-generator-2")
     (set! (-> obj mushroom) #t)
     (set! f30-0 16384.0)
     )
    ((name= (-> obj name) "citb-generator-3")
     (set! (-> obj mushroom) #t)
     (set! f30-0 16384.0)
     )
    ((name= (-> obj name) "citb-generator-4")
     (set! (-> obj mushroom) #t)
     (set! f30-0 -5461.3335)
     )
    (else
     (set! (-> obj mushroom) #f)
     )
    )
   (when (-> obj mushroom)
    (+! (-> obj mushroom-pos x) (* 19251.2 (sin f30-0)))
    (+! (-> obj mushroom-pos z) (* 19251.2 (cos f30-0)))
    )
   )
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 600) obj)
   )
  (set!
   (-> obj part-broken)
   (create-launch-control (-> *part-group-id-table* 597) obj)
   )
  (set!
   (-> obj part-mushroom)
   (create-launch-control (-> *part-group-id-table* 599) obj)
   )
  (set!
   (-> obj sound)
   (new
    'process
    'ambient-sound
    (new 'static 'sound-spec
     :mask #x80
     :num 1.0
     :group #x1
     :sound-name (static-sound-name "mushroom-gen")
     :volume #x400
     :fo-max 20
     )
    (-> obj root-override trans)
    )
   )
  0
  (none)
  )

(defmethod copy-defaults! citb-generator ((obj citb-generator) (arg0 res-lump))
  (init! obj)
  (process-drawable-from-entity! obj arg0)
  (dummy-21 obj)
  (let
   ((v1-4 (the-as entity (entity-actor-lookup (-> obj entity) 'state-actor 0))))
   (if (not (the-as entity-actor v1-4))
    (set! v1-4 (-> obj entity))
    )
   (if (logtest? (-> v1-4 extra perm status) (entity-perm-status complete))
    (go citb-generator-broken)
    (go citb-generator-idle)
    )
   )
  (none)
  )

(let
  ((v1-69
    (new 'static 'skeleton-group
     :art-group-name "citadelcam"
     :bounds (new 'static 'vector :w 81920.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-69 jgeo) 0)
  (set! (-> v1-69 janim) 2)
  (set! (-> v1-69 mgeo 0) (the-as uint 1))
  (set! (-> v1-69 lod-dist 0) 4095996000.0)
  (set! *citadelcam-sg* v1-69)
  )

(deftype citadelcam (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  )


(defstate citadelcam-idle (citadelcam)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'trigger)
                    (when
                     (and
                      (task-complete? *game-info* (game-task citadel-sage-blue))
                      (task-complete? *game-info* (game-task citadel-sage-red))
                      (task-complete?
                       *game-info*
                       (game-task citadel-sage-yellow)
                       )
                      )
                     (logclear! (-> self mask) (process-mask actor-pause))
                     (go citadelcam-stair-plats)
                     )
                    )
     )
    )
   )
  :code
  (behavior ()
   (logior! (-> self mask) (process-mask actor-pause))
   (anim-loop)
   (none)
   )
  )

(defstate citadelcam-stair-plats (citadelcam)
  :code
  (behavior ()
   (let ((gp-0 (entity-actor-count (-> self entity) 'trigger-actor)))
    (dotimes (s5-0 gp-0)
     (let ((s4-0 (entity-actor-lookup (-> self entity) 'trigger-actor s5-0))
           (a1-2 (new 'stack-no-clear 'event-message-block))
           )
      (set! (-> a1-2 from) self)
      (set! (-> a1-2 num-params) 0)
      (set! (-> a1-2 message) 'trigger)
      (let ((t9-2 send-event-function)
            (v1-1 s4-0)
            )
       (when (not (t9-2 (if v1-1
                         (-> v1-1 extra process)
                         )
                   a1-2
                   )
              )
        (entity-birth-no-kill s4-0)
        (suspend)
        (send-event (if s4-0
                     (-> s4-0 extra process)
                     )
         'trigger
         )
        )
       )
      )
     )
    )
   (let* ((gp-1 (get-process *default-dead-pool* pov-camera #x4000))
          (gp-2 (ppointer->handle (when gp-1
                                   (let
                                    ((t9-6 (method-of-type pov-camera activate))
                                     )
                                    (t9-6
                                     (the-as pov-camera gp-1)
                                     self
                                     'pov-camera
                                     (the-as pointer #x70004000)
                                     )
                                    )
                                   (run-now-in-process
                                    gp-1
                                    pov-camera-init-by-other
                                    (-> self root trans)
                                    *citadelcam-sg*
                                    "citadelcam-stair-plats"
                                    0
                                    #f
                                    '()
                                    )
                                   (-> gp-1 ppointer)
                                   )
                 )
           )
          )
    (while (handle->process (the-as handle gp-2))
     (suspend)
     )
    )
   (level-hint-spawn
    (game-text-id citadel-climb-plat-hint)
    "sksp0387"
    (the-as entity #f)
    *entity-pool*
    (game-task none)
    )
   (go citadelcam-idle)
   (none)
   )
  )

(defmethod copy-defaults! citadelcam ((obj citadelcam) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (go citadelcam-idle)
  (none)
  )

(deftype citb-battlecontroller (battlecontroller)
  ()
  :heap-base #x210
  :method-count-assert 29
  :size-assert         #x27c
  :flag-assert         #x1d0210027c
  )


(defstate battlecontroller-play-intro-camera (citb-battlecontroller)
  :virtual #t
  :code
  (behavior ()
   (level-hint-spawn
    (game-text-id citadel-lurker-bunny-alert)
    "sksp0383"
    (the-as entity #f)
    *entity-pool*
    (game-task none)
    )
   (suspend)
   (let* ((gp-0 (get-process *default-dead-pool* pov-camera #x4000))
          (gp-1 (ppointer->handle (when gp-0
                                   (let
                                    ((t9-2 (method-of-type pov-camera activate))
                                     )
                                    (t9-2
                                     (the-as pov-camera gp-0)
                                     self
                                     'pov-camera
                                     (the-as pointer #x70004000)
                                     )
                                    )
                                   (run-now-in-process
                                    gp-0
                                    pov-camera-init-by-other
                                    (->
                                     (entity-by-name "citadelcam-1")
                                     extra
                                     trans
                                     )
                                    *citadelcam-sg*
                                    "citadel-bunnies"
                                    0
                                    #f
                                    '()
                                    )
                                   (-> gp-0 ppointer)
                                   )
                 )
           )
          )
    (send-event (handle->process (the-as handle gp-1)) 'mask 2048)
    (while (handle->process (the-as handle gp-1))
     (set! (-> *target* state-flags) (logand -17 (-> *target* state-flags)))
     (suspend)
     )
    )
   (go-virtual battlecontroller-active)
   (none)
   )
  )

(defstate battlecontroller-die (citb-battlecontroller)
  :virtual #t
  :code
  (behavior ()
   (process-entity-status! self (entity-perm-status complete) #t)
   (let
    ((t9-2
      (->
       (the-as
        (state battlecontroller)
        (find-parent-method citb-battlecontroller 26)
        )
       code
       )
      )
     )
    (if t9-2
     ((the-as (function none :behavior battlecontroller) t9-2))
     )
    )
   (none)
   )
  )

(defmethod set-aggro-dist! citb-battlecontroller ((obj citb-battlecontroller))
  ((the-as
    (function battlecontroller none)
    (find-parent-method citb-battlecontroller 27)
    )
   obj
   )
  (set! (-> obj activate-distance) 143360.0)
  0
  (none)
  )




