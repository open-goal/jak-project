;;-*-Lisp-*-
(in-package goal)

;; name: sage-finalboss-FIN.gc
;; name in dgo: sage-finalboss
;; dgos: FIN

;; DECOMP BEGINS

(let
  ((v1-0
    (new 'static 'skeleton-group
     :art-group-name "robotboss-cinematic"
     :bounds
     (new 'static 'vector :y -40960.0 :w 8192000.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-0 jgeo) 0)
  (set! (-> v1-0 janim) 2)
  (set! (-> v1-0 mgeo 0) (the-as uint 1))
  (set! (-> v1-0 lod-dist 0) 4095996000.0)
  (set! *robotboss-cinematic-sg* v1-0)
  )

(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "jak-white"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 2)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 4095996000.0)
  (set! *jak-white-sg* v1-1)
  )

(let
  ((v1-2
    (new 'static 'skeleton-group
     :art-group-name "plat-eco-finalboss"
     :bounds (new 'static 'vector :w 12288.0)
     :max-lod 2
     :version #x6
     )
    )
   )
  (set! (-> v1-2 jgeo) 0)
  (set! (-> v1-2 janim) 8)
  (set! (-> v1-2 mgeo 0) (the-as uint 1))
  (set! (-> v1-2 lod-dist 0) 81920.0)
  (set! (-> v1-2 mgeo 1) (the-as uint 2))
  (set! (-> v1-2 lod-dist 1) 163840.0)
  (set! (-> v1-2 mgeo 2) (the-as uint 3))
  (set! (-> v1-2 lod-dist 2) 4095996000.0)
  (set! *plat-eco-finalboss-unlit-sg* v1-2)
  )

(let
  ((v1-3
    (new 'static 'skeleton-group
     :art-group-name "plat-eco-finalboss"
     :bounds (new 'static 'vector :w 12288.0)
     :max-lod 2
     :version #x6
     )
    )
   )
  (set! (-> v1-3 jgeo) 4)
  (set! (-> v1-3 janim) 8)
  (set! (-> v1-3 mgeo 0) (the-as uint 5))
  (set! (-> v1-3 lod-dist 0) 81920.0)
  (set! (-> v1-3 mgeo 1) (the-as uint 6))
  (set! (-> v1-3 lod-dist 1) 163840.0)
  (set! (-> v1-3 mgeo 2) (the-as uint 7))
  (set! (-> v1-3 lod-dist 2) 4095996000.0)
  (set! *plat-eco-finalboss-lit-sg* v1-3)
  )

(deftype plat-eco-finalboss (plat-eco)
  ((force-dest float  :offset-assert 360)
   (targ-dest  float  :offset-assert 364)
   (dest       float  :offset-assert 368)
   (speed      float  :offset-assert 372)
   (touch-time int64  :offset-assert 376)
   )
  :heap-base #x110
  :method-count-assert 33
  :size-assert         #x180
  :flag-assert         #x2101100180
  )


(defmethod get-unlit-skel plat-eco-finalboss ((obj plat-eco-finalboss))
  *plat-eco-finalboss-unlit-sg*
  )

(defmethod get-lit-skel plat-eco-finalboss ((obj plat-eco-finalboss))
  *plat-eco-finalboss-lit-sg*
  )

(defmethod dummy-26 plat-eco-finalboss ((obj plat-eco-finalboss))
  (set! (-> obj force-dest) -1.0)
  (set! (-> obj targ-dest) -1.0)
  (set! (-> obj dest) 0.0)
  (set! (-> obj speed) 0.1)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (process-entity-status! obj (entity-perm-status bit-3) #t)
  (none)
  )

(defstate plat-path-active (plat-eco-finalboss)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (case arg2 
    (('target)
      (process-entity-status! self (entity-perm-status complete) #t)
      (let ((f0-0 (the-as float (-> arg3 param 0))))
       (set! (-> self force-dest) f0-0)
       f0-0
       )
      )
    (('ridden 'edge-grabbed)
     (if (>= (- (-> *display* base-frame-counter) (-> self touch-time)) 600)
      (set! (-> self targ-dest) (cond
                                 ((= (-> self path-pos) 0.0)
                                  (set! (-> self force-dest) -1.0)
                                  0.99
                                  )
                                 ((= (-> self path-pos) 0.99)
                                  0.0
                                  )
                                 (else
                                  (-> self targ-dest)
                                  )
                                 )
       )
      )
     (set! (-> self touch-time) (-> *display* base-frame-counter))
     #f
     )
    (else
     (plat-event arg0 arg1 arg2 arg3)
     )
    )
   )
  :enter
  (behavior ((arg0 plat))
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (dummy-11 (-> self draw) (-> self lit-look))
   (process-entity-status! self (entity-perm-status complete) #t)
   (cond
    (arg0
     )
    (else
     (dotimes (gp-1 5)
      (spawn-projectile-blue *target*)
      )
     )
    )
   (none)
   )
  :trans
  (behavior ()
   (let
    ((s5-0
      (eval-path-curve!
       (-> self path)
       (new 'stack-no-clear 'vector)
       0.0
       'interp
       )
      )
     (gp-0
      (eval-path-curve!
       (-> self path)
       (new 'stack-no-clear 'vector)
       1.0
       'interp
       )
      )
     )
    (if (>= (- (-> *display* base-frame-counter) (-> self touch-time)) 900)
     (set! (-> self targ-dest) -1.0)
     )
    (set! (-> self dest) (cond
                          ((>= (-> self force-dest) 0.0)
                           (-> self force-dest)
                           )
                          ((>= (-> self targ-dest) 0.0)
                           (-> self targ-dest)
                           )
                          ((<
                            (vector-vector-xz-distance (target-pos 0) s5-0)
                            (vector-vector-xz-distance (target-pos 0) gp-0)
                            )
                           0.0
                           )
                          (else
                           0.99
                           )
                          )
     )
    )
   (if (= (-> self state-time) (-> *display* base-frame-counter))
    (set! (-> self path-pos) (-> self dest))
    )
   (set!
    (-> self path-pos)
    (seek
     (-> self path-pos)
     (-> self dest)
     (* (-> self speed) (-> *display* seconds-per-frame))
     )
    )
   (eval-path-curve!
    (-> self path)
    (-> self basetrans)
    (-> self path-pos)
    'interp
    )
   (if
    (<
     (vector-vector-distance (-> self root-override trans) (ear-trans))
     81920.0
     )
    (sound-play-by-name
     (static-sound-name "eco-plat-hover")
     (-> self sound-id)
     1024
     0
     0
     (the-as uint 1)
     (-> self root-override trans)
     )
    )
   (plat-trans)
   (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-8 from) self)
    (set! (-> a1-8 num-params) 2)
    (set! (-> a1-8 message) 'query)
    (set! (-> a1-8 param 0) (the-as uint 'powerup))
    (set! (-> a1-8 param 1) (the-as uint 1))
    (when (send-event-function *target* a1-8)
     (process-entity-status! self (entity-perm-status complete) #t)
     (set! (-> self force-dest) 0.0)
     )
    )
   (none)
   )
  )

(deftype sage-finalboss-particle (structure)
  ((part   sparticle-launch-control  :offset-assert   0)
   (active symbol                    :offset-assert   4)
   )
  :allow-misaligned  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )


(deftype sage-finalboss (process-taskable)
  ((redsage           handle                             :offset-assert 384)
   (bluesage          handle                             :offset-assert 392)
   (yellowsage        handle                             :offset-assert 400)
   (assistant         handle                             :offset-assert 408)
   (robotplat         handle                             :offset-assert 416)
   (robotboss         handle                             :offset-assert 424)
   (silodoor          handle                             :offset-assert 432)
   (jak-white         handle                             :offset-assert 440)
   (left-door         entity-actor                       :offset-assert 448)
   (right-door        entity-actor                       :offset-assert 452)
   (kick-in-the-door  symbol                             :offset-assert 456)
   (kick-the-credits  symbol                             :offset-assert 460)
   (credit-fade       float                              :offset-assert 464)
   (palette-val       float                              :offset-assert 468)
   (particle          sage-finalboss-particle  9 :inline :offset-assert 472)
   (particle-whiteout sparticle-launch-control           :offset-assert 616)
   (credits-played    symbol                             :offset-assert 620)
   )
  :heap-base #x200
  :method-count-assert 53
  :size-assert         #x270
  :flag-assert         #x3502000270
  )


(defmethod relocate sage-finalboss ((obj sage-finalboss) (arg0 int))
  (let ((v1-0 (the-as object 0)))
   (while (< (the-as int v1-0) 9)
    (if
     (nonzero?
      (->
       (&+ obj (* (the-as (inline-array sage-finalboss-particle) v1-0) 16))
       particle
       0
       part
       )
      )
     (&+!
      (->
       (&+ obj (* (the-as (inline-array sage-finalboss-particle) v1-0) 16))
       particle
       0
       part
       )
      arg0
      )
     )
    (set! v1-0 (+ (the-as int v1-0) 1))
    )
   )
  (if (nonzero? (-> obj particle-whiteout))
   (&+! (-> obj particle-whiteout) arg0)
   )
  (the-as sage-finalboss ((method-of-type process-taskable relocate) obj arg0))
  )

(defmethod deactivate sage-finalboss ((obj sage-finalboss))
  (dotimes (s5-0 9)
   (let ((a0-1 (-> obj particle s5-0 part)))
    (if (nonzero? a0-1)
     (kill-and-free-particles a0-1)
     )
    )
   )
  (if (nonzero? (-> obj particle-whiteout))
   (kill-and-free-particles (-> obj particle-whiteout))
   )
  ((method-of-type process-taskable deactivate) obj)
  (none)
  )

(let
  ((v1-11
    (new 'static 'skeleton-group
     :art-group-name "green-sagecage"
     :bounds (new 'static 'vector :w 10240.0)
     :max-lod 1
     :version #x6
     :shadow 3
     )
    )
   )
  (set! (-> v1-11 jgeo) 0)
  (set! (-> v1-11 janim) 4)
  (set! (-> v1-11 mgeo 0) (the-as uint 1))
  (set! (-> v1-11 lod-dist 0) 81920.0)
  (set! (-> v1-11 mgeo 1) (the-as uint 2))
  (set! (-> v1-11 lod-dist 1) 4095996000.0)
  (set! *sage-finalboss-sg* v1-11)
  )

(defmethod play-reminder sage-finalboss ((obj sage-finalboss))
  (with-pp
   (let ((s5-0 (entity-by-name "red-sagecage-1")))
    (when s5-0
     (let ((s4-0 (get-process *default-dead-pool* manipy #x4000)))
      (set! (-> obj redsage) (ppointer->handle (when s4-0
                                                (let
                                                 ((t9-2
                                                   (method-of-type
                                                    manipy
                                                    activate
                                                    )
                                                   )
                                                  )
                                                 (t9-2
                                                  (the-as manipy s4-0)
                                                  obj
                                                  'manipy
                                                  (the-as pointer #x70004000)
                                                  )
                                                 )
                                                (run-now-in-process
                                                 s4-0
                                                 manipy-init
                                                 (-> obj root-override trans)
                                                 s5-0
                                                 *redsage-sg*
                                                 #f
                                                 )
                                                (-> s4-0 ppointer)
                                                )
                              )
       )
      )
     (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-3 from) pp)
      (set! (-> a1-3 num-params) 1)
      (set! (-> a1-3 message) 'anim-mode)
      (set! (-> a1-3 param 0) (the-as uint 'clone-anim))
      (send-event-function (handle->process (-> obj redsage)) a1-3)
      )
     (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-4 from) pp)
      (set! (-> a1-4 num-params) 1)
      (set! (-> a1-4 message) 'blend-shape)
      (set! (-> a1-4 param 0) (the-as uint #t))
      (send-event-function (handle->process (-> obj redsage)) a1-4)
      )
     (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-5 from) pp)
      (set! (-> a1-5 num-params) 1)
      (set! (-> a1-5 message) 'center-joint)
      (set! (-> a1-5 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj redsage)) a1-5)
      )
     (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-6 from) pp)
      (set! (-> a1-6 num-params) 1)
      (set! (-> a1-6 message) 'origin-joint-index)
      (set! (-> a1-6 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj redsage)) a1-6)
      )
     )
    )
   (let ((s5-1 (entity-by-name "blue-sagecage-1")))
    (when s5-1
     (let ((s4-1 (get-process *default-dead-pool* manipy #x4000)))
      (set! (-> obj bluesage) (ppointer->handle (when s4-1
                                                 (let
                                                  ((t9-10
                                                    (method-of-type
                                                     manipy
                                                     activate
                                                     )
                                                    )
                                                   )
                                                  (t9-10
                                                   (the-as manipy s4-1)
                                                   obj
                                                   'manipy
                                                   (the-as pointer #x70004000)
                                                   )
                                                  )
                                                 (run-now-in-process
                                                  s4-1
                                                  manipy-init
                                                  (-> obj root-override trans)
                                                  s5-1
                                                  *bluesage-sg*
                                                  #f
                                                  )
                                                 (-> s4-1 ppointer)
                                                 )
                               )
       )
      )
     (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-10 from) pp)
      (set! (-> a1-10 num-params) 1)
      (set! (-> a1-10 message) 'anim-mode)
      (set! (-> a1-10 param 0) (the-as uint 'clone-anim))
      (send-event-function (handle->process (-> obj bluesage)) a1-10)
      )
     (let ((a1-11 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-11 from) pp)
      (set! (-> a1-11 num-params) 1)
      (set! (-> a1-11 message) 'blend-shape)
      (set! (-> a1-11 param 0) (the-as uint #t))
      (send-event-function (handle->process (-> obj bluesage)) a1-11)
      )
     (let ((a1-12 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-12 from) pp)
      (set! (-> a1-12 num-params) 1)
      (set! (-> a1-12 message) 'center-joint)
      (set! (-> a1-12 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj bluesage)) a1-12)
      )
     (let ((a1-13 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-13 from) pp)
      (set! (-> a1-13 num-params) 1)
      (set! (-> a1-13 message) 'origin-joint-index)
      (set! (-> a1-13 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj bluesage)) a1-13)
      )
     )
    )
   (let ((s5-2 (entity-by-name "yellow-sagecage-1")))
    (the-as symbol (when s5-2
                    (let
                     ((s4-2 (get-process *default-dead-pool* manipy #x4000)))
                     (set! (-> obj yellowsage) (ppointer->handle (when s4-2
                                                                  (let
                                                                   ((t9-18
                                                                     (method-of-type
                                                                      manipy
                                                                      activate
                                                                      )
                                                                     )
                                                                    )
                                                                   (t9-18
                                                                    (the-as
                                                                     manipy
                                                                     s4-2
                                                                     )
                                                                    obj
                                                                    'manipy
                                                                    (the-as
                                                                     pointer
                                                                     #x70004000
                                                                     )
                                                                    )
                                                                   )
                                                                  (run-now-in-process
                                                                   s4-2
                                                                   manipy-init
                                                                   (->
                                                                    obj
                                                                    root-override
                                                                    trans
                                                                    )
                                                                   s5-2
                                                                   *yellowsage-sg*
                                                                   #f
                                                                   )
                                                                  (->
                                                                   s4-2
                                                                   ppointer
                                                                   )
                                                                  )
                                                )
                      )
                     )
                    (let ((a1-17 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-17 from) pp)
                     (set! (-> a1-17 num-params) 1)
                     (set! (-> a1-17 message) 'anim-mode)
                     (set! (-> a1-17 param 0) (the-as uint 'clone-anim))
                     (send-event-function
                      (handle->process (-> obj yellowsage))
                      a1-17
                      )
                     )
                    (let ((a1-18 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-18 from) pp)
                     (set! (-> a1-18 num-params) 1)
                     (set! (-> a1-18 message) 'blend-shape)
                     (set! (-> a1-18 param 0) (the-as uint #t))
                     (send-event-function
                      (handle->process (-> obj yellowsage))
                      a1-18
                      )
                     )
                    (let ((a1-19 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-19 from) pp)
                     (set! (-> a1-19 num-params) 1)
                     (set! (-> a1-19 message) 'center-joint)
                     (set! (-> a1-19 param 0) (the-as uint 3))
                     (send-event-function
                      (handle->process (-> obj yellowsage))
                      a1-19
                      )
                     )
                    (let ((a1-20 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-20 from) pp)
                     (set! (-> a1-20 num-params) 1)
                     (set! (-> a1-20 message) 'origin-joint-index)
                     (set! (-> a1-20 param 0) (the-as uint 3))
                     (send-event-function
                      (handle->process (-> obj yellowsage))
                      a1-20
                      )
                     )
                    )
     )
    )
   )
  )

(defmethod dummy-45 sage-finalboss ((obj sage-finalboss))
  (with-pp
   (let ((s5-0 (entity-by-name "assistant-lavatube-end-3")))
    (when s5-0
     (let ((s4-0 (get-process *default-dead-pool* manipy #x4000)))
      (set! (-> obj assistant) (ppointer->handle (when s4-0
                                                  (let
                                                   ((t9-2
                                                     (method-of-type
                                                      manipy
                                                      activate
                                                      )
                                                     )
                                                    )
                                                   (t9-2
                                                    (the-as manipy s4-0)
                                                    obj
                                                    'manipy
                                                    (the-as pointer #x70004000)
                                                    )
                                                   )
                                                  (run-now-in-process
                                                   s4-0
                                                   manipy-init
                                                   (-> obj root-override trans)
                                                   s5-0
                                                   *assistant-lavatube-end-sg*
                                                   #f
                                                   )
                                                  (-> s4-0 ppointer)
                                                  )
                                )
       )
      )
     (let* ((v1-6 (-> obj assistant))
            (s5-1
             (and
              (nonzero? (l32-false-check v1-6))
              (let ((a0-10 (-> (the-as (pointer manipy) (-> v1-6 process)) 0)))
               (if (= (-> v1-6 pid) (-> a0-10 pid))
                a0-10
                )
               )
              )
             )
            )
      (if s5-1
       (set!
        (-> s5-1 draw level-index)
        (the-as uint (-> (level-get *level* 'finalboss) index))
        )
       )
      )
     (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-5 from) pp)
      (set! (-> a1-5 num-params) 1)
      (set! (-> a1-5 message) 'anim-mode)
      (set! (-> a1-5 param 0) (the-as uint 'clone-anim))
      (send-event-function (handle->process (-> obj assistant)) a1-5)
      )
     (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-6 from) pp)
      (set! (-> a1-6 num-params) 1)
      (set! (-> a1-6 message) 'blend-shape)
      (set! (-> a1-6 param 0) (the-as uint #t))
      (send-event-function (handle->process (-> obj assistant)) a1-6)
      )
     (let ((a1-7 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-7 from) pp)
      (set! (-> a1-7 num-params) 1)
      (set! (-> a1-7 message) 'center-joint)
      (set! (-> a1-7 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj assistant)) a1-7)
      )
     (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-8 from) pp)
      (set! (-> a1-8 num-params) 1)
      (set! (-> a1-8 message) 'origin-joint-index)
      (set! (-> a1-8 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj assistant)) a1-8)
      )
     )
    )
   (none)
   )
  )

(defmethod play-anim! sage-finalboss ((obj sage-finalboss) (arg0 symbol))
  (with-pp
   (case (current-status (-> obj tasks)) 
    (((task-status unknown))
      (when arg0
       (close-current! (-> obj tasks))
       (set-yaw-angle-clear-roll-pitch! (-> obj root-override) 0.0)
       )
      (new 'static 'spool-anim
       :name "green-sagecage-daxter-sacrifice"
       :index 8
       :parts 6
       :command-list
       '(
         ((the binteger 1)
           blackout
           0
           )
         ((the binteger 236)
          joint
          "cameraB"
          )
         ((the binteger 439) joint "camera")
         )
       )
      )
    (((task-status need-introduction))
     (when arg0
      (set-yaw-angle-clear-roll-pitch! (-> obj root-override) 0.0)
      (close-current! (-> obj tasks))
      (let ((s5-1 (get-process *default-dead-pool* manipy #x4000)))
       (set! (-> obj jak-white) (ppointer->handle (when s5-1
                                                   (let
                                                    ((t9-6
                                                      (method-of-type
                                                       manipy
                                                       activate
                                                       )
                                                      )
                                                     )
                                                    (t9-6
                                                     (the-as manipy s5-1)
                                                     obj
                                                     'manipy
                                                     (the-as pointer #x70004000)
                                                     )
                                                    )
                                                   (run-now-in-process
                                                    s5-1
                                                    manipy-init
                                                    (-> obj root-override trans)
                                                    (-> obj entity)
                                                    *jak-white-sg*
                                                    #f
                                                    )
                                                   (-> s5-1 ppointer)
                                                   )
                                 )
        )
       )
      (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-6 from) pp)
       (set! (-> a1-6 num-params) 1)
       (set! (-> a1-6 message) 'eval)
       (set!
        (-> a1-6 param 0)
        (the-as
         uint
         (lambda :behavior sage-finalboss
          ()
          (set-vector! (-> self draw color-emissive) 0.5 0.5 0.5 0.0)
          (none)
          )
         )
        )
       (send-event-function (handle->process (-> obj jak-white)) a1-6)
       )
      (let ((a1-7 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-7 from) pp)
       (set! (-> a1-7 num-params) 1)
       (set! (-> a1-7 message) 'anim-mode)
       (set! (-> a1-7 param 0) (the-as uint 'clone-anim))
       (send-event-function (handle->process (-> obj jak-white)) a1-7)
       )
      (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-8 from) pp)
       (set! (-> a1-8 num-params) 1)
       (set! (-> a1-8 message) 'origin-joint-index)
       (set! (-> a1-8 param 0) (the-as uint 3))
       (send-event-function (handle->process (-> obj jak-white)) a1-8)
       )
      (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-9 from) pp)
       (set! (-> a1-9 num-params) 1)
       (set! (-> a1-9 message) 'blend-shape)
       (set! (-> a1-9 param 0) (the-as uint #t))
       (send-event-function (handle->process (-> obj jak-white)) a1-9)
       )
      (let ((s5-2 (get-process *default-dead-pool* manipy #x4000)))
       (set! (-> obj robotboss) (ppointer->handle (when s5-2
                                                   (let
                                                    ((t9-13
                                                      (method-of-type
                                                       manipy
                                                       activate
                                                       )
                                                      )
                                                     )
                                                    (t9-13
                                                     (the-as manipy s5-2)
                                                     obj
                                                     'manipy
                                                     (the-as pointer #x70004000)
                                                     )
                                                    )
                                                   (run-now-in-process
                                                    s5-2
                                                    manipy-init
                                                    (-> obj root-override trans)
                                                    (-> obj entity)
                                                    *robotboss-cinematic-sg*
                                                    #f
                                                    )
                                                   (-> s5-2 ppointer)
                                                   )
                                 )
        )
       )
      (let ((a1-13 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-13 from) pp)
       (set! (-> a1-13 num-params) 1)
       (set! (-> a1-13 message) 'anim-mode)
       (set! (-> a1-13 param 0) (the-as uint 'clone-anim))
       (send-event-function (handle->process (-> obj robotboss)) a1-13)
       )
      (let ((a1-14 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-14 from) pp)
       (set! (-> a1-14 num-params) 1)
       (set! (-> a1-14 message) 'origin-joint-index)
       (set! (-> a1-14 param 0) (the-as uint 3))
       (send-event-function (handle->process (-> obj robotboss)) a1-14)
       )
      (let* ((v1-66 (-> obj robotboss))
             (v1-67
              (and
               (nonzero? (l32-false-check v1-66))
               (let
                ((a0-46 (-> (the-as (pointer manipy) (-> v1-66 process)) 0)))
                (if (= (-> v1-66 pid) (-> a0-46 pid))
                 a0-46
                 )
                )
               )
              )
             )
       (if v1-67
        (set! (-> v1-67 draw bounds w) 2048000.0)
        )
       )
      (let ((s5-3 (get-process *default-dead-pool* manipy #x4000)))
       (set! (-> obj silodoor) (ppointer->handle (when s5-3
                                                  (let
                                                   ((t9-18
                                                     (method-of-type
                                                      manipy
                                                      activate
                                                      )
                                                     )
                                                    )
                                                   (t9-18
                                                    (the-as manipy s5-3)
                                                    obj
                                                    'manipy
                                                    (the-as pointer #x70004000)
                                                    )
                                                   )
                                                  (run-now-in-process
                                                   s5-3
                                                   manipy-init
                                                   (-> obj root-override trans)
                                                   (-> obj entity)
                                                   *silodoor-sg*
                                                   #f
                                                   )
                                                  (-> s5-3 ppointer)
                                                  )
                                )
        )
       )
      (let ((a1-19 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-19 from) pp)
       (set! (-> a1-19 num-params) 1)
       (set! (-> a1-19 message) 'anim-mode)
       (set! (-> a1-19 param 0) (the-as uint 'clone-anim))
       (send-event-function (handle->process (-> obj silodoor)) a1-19)
       )
      (let* ((v1-83 (-> obj silodoor))
             (v1-84
              (and
               (nonzero? (l32-false-check v1-83))
               (let
                ((a0-62 (-> (the-as (pointer manipy) (-> v1-83 process)) 0)))
                (if (= (-> v1-83 pid) (-> a0-62 pid))
                 a0-62
                 )
                )
               )
              )
             )
       (if v1-84
        (set! (-> v1-84 draw bounds w) 2048000.0)
        )
       )
      (let ((gp-1 (new 'stack-no-clear 'event-message-block)))
       (set! (-> gp-1 from) pp)
       (set! (-> gp-1 num-params) 0)
       (set! (-> gp-1 message) 'hide)
       (send-event-function (process-by-name "silodoor-5" *active-pool*) gp-1)
       )
      (set-setting! *setting-control* pp 'music #f 0.0 0)
      (set-setting! *setting-control* pp 'allow-progress #f 0.0 0)
      )
     (new 'static 'spool-anim
      :name "green-sagecage-outro-beat-boss-a"
      :index 9
      :parts 8
      :command-list
      '(
        (0
          send-event
          self
          activate-particle
          0
          )
        (0
         send-event
         self
         activate-particle
         (the binteger 1)
         )
        (0
         send-event
         self
         activate-particle
         (the binteger 7)
         )
        ((the binteger 1)
         blackout
         0
         )
        ((the binteger 61)
         joint
         "cameraB"
         )
        ((the binteger 71)
         send-event
         self
         activate-particle
         (the binteger 2)
         )
        ((the binteger 156)
         joint
         "camera"
         )
        ((the binteger 216)
         joint
         "cameraB"
         )
        ((the binteger 259)
         send-event
         self
         deactivate-particle
         (the binteger 2)
         )
        ((the binteger 259)
         send-event
         self
         activate-particle
         (the binteger 3)
         )
        ((the binteger 268)
         send-event
         self
         activate-particle
         (the binteger 4)
         )
        ((the binteger 270)
         send-event
         self
         deactivate-particle
         (the binteger 3)
         )
        ((the binteger 270)
         send-event
         self
         deactivate-particle
         0
         )
        ((the binteger 270)
         send-event
         self
         deactivate-particle
         (the binteger 1)
         )
        ((the binteger 271)
         joint
         "camera"
         )
        ((the binteger 269)
         send-event
         self
         activate-particle
         (the binteger 5)
         )
        ((the binteger 272)
         send-event
         self
         flash
         )
        ((the binteger 272)
         eval
         (lambda :behavior sage-finalboss
          ()
          (let ((a0-1 (get-task-control (game-task finalboss-movies))))
           (save-reminder a0-1 (logior (get-reminder a0-1 0) 1) 0)
           )
          (none)
          )
         )
        ((the binteger 273)
         send-event
         self
         deactivate-particle
         (the binteger 5)
         )
        ((the binteger 333)
         joint
         "cameraB"
         )
        ((the binteger 395)
         joint
         "camera"
         )
        ((the binteger 453)
         joint
         "cameraB"
         )
        ((the binteger 478)
         send-event
         self
         deactivate-particle
         (the binteger 4)
         )
        ((the binteger 478)
         send-event
         self
         activate-particle
         (the binteger 6)
         )
        ((the binteger 482)
         send-event
         self
         deactivate-particle
         (the binteger 6)
         )
        ((the binteger 583)
         joint
         "camera"
         )
        ((the binteger 640)
         send-event
         self
         deactivate-particle
         (the binteger 7)
         )
        )
      )
     )
    (((task-status need-reminder-a))
     (when arg0
      (set-yaw-angle-clear-roll-pitch! (-> obj root-override) 0.0)
      (close-current! (-> obj tasks))
      (play-reminder obj)
      (dummy-45 obj)
      (set! (-> obj kick-the-credits) #t)
      (let ((s5-5 (get-process *default-dead-pool* manipy #x4000)))
       (set! (-> obj robotplat) (ppointer->handle (when s5-5
                                                   (let
                                                    ((t9-30
                                                      (method-of-type
                                                       manipy
                                                       activate
                                                       )
                                                      )
                                                     )
                                                    (t9-30
                                                     (the-as manipy s5-5)
                                                     obj
                                                     'manipy
                                                     (the-as pointer #x70004000)
                                                     )
                                                    )
                                                   (run-now-in-process
                                                    s5-5
                                                    manipy-init
                                                    (-> obj root-override trans)
                                                    (-> obj entity)
                                                    *plat-eco-finalboss-lit-sg*
                                                    #f
                                                    )
                                                   (-> s5-5 ppointer)
                                                   )
                                 )
        )
       )
      (let ((a1-29 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-29 from) pp)
       (set! (-> a1-29 num-params) 1)
       (set! (-> a1-29 message) 'anim-mode)
       (set! (-> a1-29 param 0) (the-as uint 'clone-anim))
       (send-event-function (handle->process (-> obj robotplat)) a1-29)
       )
      (let ((a1-30 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-30 from) pp)
       (set! (-> a1-30 num-params) 1)
       (set! (-> a1-30 message) 'origin-joint-index)
       (set! (-> a1-30 param 0) (the-as uint 3))
       (send-event-function (handle->process (-> obj robotplat)) a1-30)
       )
      (set!
       (-> obj old-target-pos trans quad)
       (->
        (new 'static 'vector :x 11368946.0 :y 2215900.2 :z -19405602.0 :w 1.0)
        quad
        )
       )
      (quaternion-copy!
       (-> obj old-target-pos quat)
       (new 'static 'quaternion :y -0.8472 :w 0.5312)
       )
      (set-setting! *setting-control* pp 'music #f 0.0 0)
      (set-setting! *setting-control* pp 'sfx-volume 'abs 0.0 0)
      (set-setting! *setting-control* pp 'ambient-volume 'abs 0.0 0)
      (set-setting! *setting-control* pp 'allow-progress #f 0.0 0)
      )
     (new 'static 'spool-anim
      :name "green-sagecage-outro-beat-boss-b"
      :index 10
      :parts 27
      :command-list
      '(
        (0
          kill
          "crate-3250"
          )
        (0
         kill
         "crate-3251"
         )
        (0
         kill
         "crate-3252"
         )
        (0
         kill
         "crate-3253"
         )
        (0
         kill
         "crate-3254"
         )
        (0
         kill
         "crate-3255"
         )
        (0
         kill
         "crate-3256"
         )
        (0
         kill
         "crate-3257"
         )
        (0
         kill
         "crate-3258"
         )
        (0
         kill
         "crate-3259"
         )
        (0
         kill
         "plat-eco-finalboss-1"
         )
        ((the binteger 1)
         blackout
         0
         )
        ((the binteger 61)
         joint
         "cameraB"
         )
        ((the binteger 136)
         joint
         "camera"
         )
        ((the binteger 510)
         joint
         "cameraB"
         )
        ((the binteger 641)
         joint
         "camera"
         )
        ((the binteger 751)
         joint
         "cameraB"
         )
        ((the binteger 1096)
         joint
         "camera"
         )
        ((the binteger 1321)
         joint
         "cameraB"
         )
        ((the binteger 1521)
         joint
         "camera"
         )
        ((the binteger 1636)
         joint
         "cameraB"
         )
        ((the binteger 1751)
         joint
         "camera"
         )
        ((the binteger 1916)
         joint
         "cameraB"
         )
        ((the binteger 1996)
         joint
         "camera"
         )
        ((the binteger 2256) joint "cameraB")
        )
      )
     )
    (((task-status need-reminder))
     (when arg0
      (set-yaw-angle-clear-roll-pitch! (-> obj root-override) -13116.667)
      (close-current! (-> obj tasks))
      (dummy-45 obj)
      (let ((a1-37 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-37 from) pp)
       (set! (-> a1-37 num-params) 0)
       (set! (-> a1-37 message) 'teleport)
       (send-event-function *camera* a1-37)
       )
      (set-setting! *setting-control* pp 'allow-progress #f 0.0 0)
      )
     (cond
      ((target-has-all-the-cells?)
       (new 'static 'spool-anim
        :name
        "green-sagecage-outro-beat-boss-enough-cells"
        :index 12
        :parts 6
        :command-list
        '(
          (0
            send-event
            self
            fade
            )
          ((the binteger 1)
           blackout
           0
           )
          ((the binteger 65)
           joint
           "cameraB"
           )
          ((the binteger 104)
           joint
           "camera"
           )
          ((the binteger 134)
           joint
           "cameraB"
           )
          ((the binteger 165)
           joint
           "camera"
           )
          ((the binteger 292)
           joint
           "cameraB"
           )
          ((the binteger 488)
           joint
           "camera"
           )
          ((the binteger 488) auto-save auto-save)
          )
        )
       )
      (else
       (if arg0
        (set-setting! *setting-control* pp 'allow-progress #f 0.0 0)
        )
       (new 'static 'spool-anim
        :name
        "green-sagecage-outro-beat-boss-need-cells"
        :index 11
        :parts 8
        :command-list
        '(
          (0
            send-event
            self
            fade
            )
          ((the binteger 1)
           blackout
           0
           )
          ((the binteger 65)
           joint
           "cameraB"
           )
          ((the binteger 104)
           joint
           "camera"
           )
          ((the binteger 134)
           joint
           "cameraB"
           )
          ((the binteger 165)
           joint
           "camera"
           )
          ((the binteger 292)
           joint
           "cameraB"
           )
          ((the binteger 488)
           joint
           "camera"
           )
          ((the binteger 488) auto-save auto-save)
          )
        )
       )
      )
     )
    (((task-status need-reward-speech))
     (when arg0
      (set-yaw-angle-clear-roll-pitch! (-> obj root-override) -13116.667)
      (close-current! (-> obj tasks))
      (dummy-45 obj)
      (set!
       (-> obj left-door)
       (the-as entity-actor (entity-by-name "power-left-2"))
       )
      (set!
       (-> obj right-door)
       (the-as entity-actor (entity-by-name "power-right-2"))
       )
      (set-setting! *setting-control* pp 'allow-progress #f 0.0 0)
      )
     (new 'static 'spool-anim
      :name "green-sagecage-outro-big-finish"
      :index 13
      :parts 7
      :command-list
      '(
        ((the binteger 1)
          blackout
          0
          )
        ((the binteger 61)
         joint
         "cameraB"
         )
        ((the binteger 102)
         joint
         "camera"
         )
        ((the binteger 145)
         joint
         "cameraB"
         )
        ((the binteger 220)
         send-event
         "power-left-2"
         open
         )
        ((the binteger 220)
         send-event
         "power-right-2"
         open
         )
        ((the binteger 235)
         joint
         "camera"
         )
        ((the binteger 243)
         send-event
         self
         activate-particle
         (the binteger 8)
         )
        ((the binteger 322)
         joint
         "cameraB"
         )
        ((the binteger 428)
         joint
         "camera"
         )
        ((the binteger 519) joint "cameraB") ((the binteger 602) joint "camera")
        )
      )
     )
    (else
     (if arg0
      (format
       0
       "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
       (-> obj name)
       (task-status->string (current-status (-> obj tasks)))
       )
      )
     (-> obj draw art-group data 4)
     )
    )
   )
  )

(defmethod get-art-elem sage-finalboss ((obj sage-finalboss))
  (-> obj draw art-group data 4)
  )

(defbehavior sage-finalboss-credit-particle sage-finalboss ()
  (when (< 0.0 (-> self credit-fade))
   (when (> (-> self part matrix) 0)
    (let ((v1-4 (sprite-get-user-hvdf (-> self part matrix))))
     (set! (-> v1-4 vector4w x) (the-as int 2048.0))
     (set! (-> v1-4 vector4w y) (the-as int 2048.0))
     (set!
      (-> v1-4 vector4w z)
      (the-as int (+ -1024.0 (-> *math-camera* hvdf-off z)))
      )
     (set! (-> v1-4 vector4w w) (the-as int (-> *math-camera* hvdf-off w)))
     )
    )
   (set!
    (-> *part-id-table* 2827 init-specs 8 initial-valuef)
    (* 128.0 (-> self credit-fade))
    )
   (cond
    ((< (-> self credit-fade) 1.0)
     (set! (-> *part-id-table* 2825 init-specs 1 initial-valuef) 0.0)
     (set! (-> *part-id-table* 2826 init-specs 1 initial-valuef) 0.0)
     )
    (else
     (set! (-> *part-id-table* 2825 init-specs 1 initial-valuef) 1.0)
     (set! (-> *part-id-table* 2826 init-specs 1 initial-valuef) 0.3)
     )
    )
   (spawn (-> self part) *zero-vector*)
   (set! (-> self credit-fade) (+ -0.008333334 (-> self credit-fade)))
   )
  (none)
  )

(defstate play-anim (sage-finalboss)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (case arg2 
    (('fade)
      (let ((f0-0 1.0))
       (set! (-> self credit-fade) f0-0)
       f0-0
       )
      )
    (('flash)
     (let ((f0-1 1.9921875))
      (set! (-> self palette-val) f0-1)
      f0-1
      )
     )
    (('activate-particle)
     (let ((v0-0 (the-as object #t)))
      (set! (-> self particle (-> arg3 param 0) active) (the-as symbol v0-0))
      v0-0
      )
     )
    (('deactivate-particle)
     (set! (-> self particle (-> arg3 param 0) active) #f)
     #f
     )
    )
   )
  :enter
  (behavior ()
   (set! (-> self credit-fade) 0.0)
   ((-> (method-of-type process-taskable play-anim) enter))
   (none)
   )
  :exit
  (behavior ()
   (when (= (current-status (-> self tasks)) (task-status invalid))
    (cond
     ((not (-> self credits-played))
      (set! (-> self kick-the-credits) #t)
      )
     (else
      (set-blackout-frames 0)
      (initialize! *game-info* 'game (the-as game-save #f) "title-start")
      )
     )
    )
   (let ((a0-4 (handle->process (-> self redsage))))
    (if a0-4
     (deactivate a0-4)
     )
    )
   (let ((a0-8 (handle->process (-> self bluesage))))
    (if a0-8
     (deactivate a0-8)
     )
    )
   (let ((a0-12 (handle->process (-> self yellowsage))))
    (if a0-12
     (deactivate a0-12)
     )
    )
   (let ((a0-16 (handle->process (-> self assistant))))
    (if a0-16
     (deactivate a0-16)
     )
    )
   (let ((a0-20 (handle->process (-> self robotplat))))
    (if a0-20
     (deactivate a0-20)
     )
    )
   (let ((a0-24 (handle->process (-> self robotboss))))
    (if a0-24
     (deactivate a0-24)
     )
    )
   (let ((a0-28 (handle->process (-> self jak-white))))
    (if a0-28
     (deactivate a0-28)
     )
    )
   (let ((a0-32 (handle->process (-> self silodoor))))
    (if a0-32
     (deactivate a0-32)
     )
    )
   (when (-> self left-door)
    (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-9 from) self)
     (set! (-> a1-9 num-params) 2)
     (set! (-> a1-9 message) 'brightness)
     (set! (-> a1-9 param 0) (the-as uint 1.0))
     (set! (-> a1-9 param 1) (the-as uint 0.0))
     (let ((t9-11 send-event-function)
           (v1-61 (-> self left-door))
           )
      (t9-11 (if v1-61
              (-> v1-61 extra process)
              )
       a1-9
       )
      )
     )
    (set! (-> self left-door) #f)
    )
   (when (-> self right-door)
    (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-10 from) self)
     (set! (-> a1-10 num-params) 2)
     (set! (-> a1-10 message) 'brightness)
     (set! (-> a1-10 param 0) (the-as uint 1.0))
     (set! (-> a1-10 param 1) (the-as uint 0.0))
     (let ((t9-12 send-event-function)
           (v1-71 (-> self right-door))
           )
      (t9-12 (if v1-71
              (-> v1-71 extra process)
              )
       a1-10
       )
      )
     )
    (set! (-> self right-door) #f)
    )
   (cond
    ((= (current-status (-> self tasks)) (task-status need-reward-speech))
     (if (target-has-all-the-cells?)
      (set! (-> self kick-in-the-door) #t)
      (start 'play (get-continue-by-name *game-info* "finalboss-start"))
      )
     )
    ((= (current-status (-> self tasks)) (task-status invalid))
     )
    (else
     (set-blackout-frames #x7530)
     )
    )
   (dotimes (v1-84 9)
    (set! (-> self particle v1-84 active) #f)
    )
   ((-> (method-of-type process-taskable play-anim) exit))
   (none)
   )
  :trans
  (behavior ()
   (local-vars (f28-0 float))
   (when (-> self left-door)
    (let ((f30-0 (ja-aframe-num 0)))
     0.0
     (let ((f30-1 (cond
                   ((< f30-0 235.0)
                    (set! f28-0 1.0)
                    0.0
                    )
                   ((< 320.0 f30-0)
                    (set! f28-0 1.0)
                    0.0
                    )
                   (else
                    (when (> (-> self particle-whiteout matrix) 0)
                     (let
                      ((v1-8
                        (sprite-get-user-hvdf
                         (-> self particle-whiteout matrix)
                         )
                        )
                       )
                      (set! (-> v1-8 vector4w x) (the-as int 2048.0))
                      (set! (-> v1-8 vector4w y) (the-as int 2048.0))
                      (set!
                       (-> v1-8 vector4w z)
                       (the-as int (+ -1024.0 (-> *math-camera* hvdf-off z)))
                       )
                      (set!
                       (-> v1-8 vector4w w)
                       (the-as int (-> *math-camera* hvdf-off w))
                       )
                      )
                     )
                    (set!
                     (-> *part-id-table* 2965 init-specs 8 initial-valuef)
                     (fmax 0.0 (fmin 128.0 (* 0.75 (+ -240.0 f30-0))))
                     )
                    (spawn (-> self particle-whiteout) *zero-vector*)
                    (set!
                     f28-0
                     (fmin 2.0 (fmax 0.0 (* 0.033333335 (+ -235.0 f30-0))))
                     )
                    f28-0
                    )
                   )
            )
           )
      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-1 from) self)
       (set! (-> a1-1 num-params) 2)
       (set! (-> a1-1 message) 'brightness)
       (set! (-> a1-1 param 0) (the-as uint f28-0))
       (set! (-> a1-1 param 1) (the-as uint f30-1))
       (let ((t9-3 send-event-function)
             (v1-20 (-> self left-door))
             )
        (t9-3 (if v1-20
               (-> v1-20 extra process)
               )
         a1-1
         )
        )
       )
      (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-2 from) self)
       (set! (-> a1-2 num-params) 2)
       (set! (-> a1-2 message) 'brightness)
       (set! (-> a1-2 param 0) (the-as uint f28-0))
       (set! (-> a1-2 param 1) (the-as uint f30-1))
       (let ((t9-4 send-event-function)
             (v1-27 (-> self right-door))
             )
        (t9-4 (if v1-27
               (-> v1-27 extra process)
               )
         a1-2
         )
        )
       )
      )
     )
    )
   (when (and *target* (-> self particle 0 active))
    (let ((a1-3 (new 'stack-no-clear 'vector)))
     (set! (-> a1-3 quad) (-> *target* draw origin quad))
     (set! (-> a1-3 y) 1970176.0)
     (spawn (-> self particle 0 part) a1-3)
     )
    )
   (when (and (handle->process (-> self jak-white)) (-> self particle 1 active))
    (let ((a0-17 (handle->process (-> self jak-white))))
     (spawn
      (-> self particle 1 part)
      (process-drawable-random-point!
       (the-as process-drawable a0-17)
       (new 'stack-no-clear 'vector)
       )
      )
     )
    )
   (when (and (handle->process (-> self jak-white)) (-> self particle 2 active))
    (let* ((v1-51 (-> self jak-white))
           (v1-52
            (and
             (nonzero? (l32-false-check v1-51))
             (let ((a0-27 (-> (the-as (pointer manipy) (-> v1-51 process)) 0)))
              (if (= (-> v1-51 pid) (-> a0-27 pid))
               a0-27
               )
              )
             )
            )
           (a1-11
            (vector<-cspace!
             (new 'stack-no-clear 'vector)
             (-> v1-52 node-list data 52)
             )
            )
           )
     (spawn (-> self particle 2 part) a1-11)
     )
    )
   (when (and (handle->process (-> self jak-white)) (-> self particle 3 active))
    (let* ((v1-62 (-> self jak-white))
           (v1-63
            (and
             (nonzero? (l32-false-check v1-62))
             (let ((a0-37 (-> (the-as (pointer manipy) (-> v1-62 process)) 0)))
              (if (= (-> v1-62 pid) (-> a0-37 pid))
               a0-37
               )
              )
             )
            )
           (a1-15
            (vector<-cspace!
             (new 'stack-no-clear 'vector)
             (-> v1-63 node-list data 52)
             )
            )
           )
     (spawn (-> self particle 3 part) a1-15)
     )
    )
   (if (and (handle->process (-> self robotboss)) (-> self particle 4 active))
    (spawn
     (-> self particle 4 part)
     (process-drawable-random-point!
      (the-as process-drawable (handle->process (-> self robotboss)))
      (new 'stack-no-clear 'vector)
      )
     )
    )
   (when (and (handle->process (-> self robotboss)) (-> self particle 5 active))
    (let* ((gp-2 (-> self particle 5 part))
           (s5-2 (method-of-object gp-2 spawn))
           (t9-14 vector<-cspace!)
           (a0-54 (new 'stack-no-clear 'vector))
           (v1-84 (-> self robotboss))
           )
     (s5-2
      gp-2
      (t9-14
       a0-54
       (->
        (and
         (nonzero? (l32-false-check v1-84))
         (let ((a1-23 (-> (the-as (pointer manipy) (-> v1-84 process)) 0)))
          (if (= (-> v1-84 pid) (-> a1-23 pid))
           a1-23
           )
          )
         )
        node-list
        data
        15
        )
       )
      )
     )
    )
   (when (and (handle->process (-> self robotboss)) (-> self particle 6 active))
    (let* ((gp-3 (-> self particle 6 part))
           (s5-3 (method-of-object gp-3 spawn))
           (t9-16 vector<-cspace!)
           (a0-60 (new 'stack-no-clear 'vector))
           (v1-95 (-> self robotboss))
           )
     (s5-3
      gp-3
      (t9-16
       a0-60
       (->
        (and
         (nonzero? (l32-false-check v1-95))
         (let ((a1-30 (-> (the-as (pointer manipy) (-> v1-95 process)) 0)))
          (if (= (-> v1-95 pid) (-> a1-30 pid))
           a1-30
           )
          )
         )
        node-list
        data
        6
        )
       )
      )
     )
    )
   (when (and (handle->process (-> self robotboss)) (-> self particle 7 active))
    (let ((gp-4 (new 'stack-no-clear 'vector)))
     (let ((t9-18 vector<-cspace!)
           (a0-66 gp-4)
           (v1-105 (-> self robotboss))
           )
      (t9-18
       a0-66
       (->
        (and
         (nonzero? (l32-false-check v1-105))
         (let ((a1-37 (-> (the-as (pointer manipy) (-> v1-105 process)) 0)))
          (if (= (-> v1-105 pid) (-> a1-37 pid))
           a1-37
           )
          )
         )
        node-list
        data
        7
        )
       )
      )
     (spawn (-> self particle 7 part) gp-4)
     )
    )
   (when (-> self particle 8 active)
    (let
     ((gp-5
       (the-as
        final-door
        (search-process-tree *active-pool* (lambda ((arg0 final-door))
                                            (= (-> arg0 type) power-left)
                                            )
         )
        )
       )
      (a0-70
       (the-as
        final-door
        (search-process-tree *active-pool* (lambda ((arg0 final-door))
                                            (= (-> arg0 type) power-left)
                                            )
         )
        )
       )
      (a1-43 (new 'stack-no-clear 'vector))
      )
     (vector+! a1-43 (-> gp-5 root trans) (-> a0-70 root trans))
     (vector-float*! a1-43 a1-43 0.5)
     (spawn (-> self particle 8 part) a1-43)
     )
    )
   (sage-finalboss-credit-particle)
   (let* ((f0-14 (- 0.0 (-> self palette-val)))
          (f0-15 (if (< 0.0 f0-14)
                  (fmin 0.025 f0-14)
                  (fmax -0.025 f0-14)
                  )
           )
          )
    (+! (-> self palette-val) f0-15)
    )
   (set! (-> *palette-fade-controls* control 2 fade) (-> self palette-val))
   (case (current-status (-> self tasks)) 
    (((task-status need-introduction))
      (spool-push *art-control* "green-sagecage-outro-beat-boss-a" 0 self -1.0)
      )
    (((task-status need-reminder-a))
     (spool-push *art-control* "green-sagecage-outro-beat-boss-b" 0 self -1.0)
     )
    (((task-status need-reminder))
     (if (target-has-all-the-cells?)
      (spool-push
       *art-control*
       "green-sagecage-outro-beat-boss-enough-cells"
       0
       self
       -1.0
       )
      (spool-push
       *art-control*
       "green-sagecage-outro-beat-boss-need-cells"
       0
       self
       -1.0
       )
      )
     )
    (((task-status need-reward-speech))
     (spool-push *art-control* "green-sagecage-outro-big-finish" 0 self -1.0)
     )
    )
   ((-> (method-of-type process-taskable play-anim) trans))
   (none)
   )
  )

(defstate sage-finalboss-credits (sage-finalboss)
  :exit
  (behavior ()
   (when (= (current-status (-> self tasks)) (task-status invalid))
    (set-blackout-frames 0)
    (initialize! *game-info* 'game (the-as game-save #f) "title-start")
    )
   (none)
   )
  :code
  (behavior ()
   (local-vars (s5-0 symbol))
   (set! (-> self credits-played) #t)
   (set-blackout-frames 0)
   (set-blackout-frames 15)
   (clear-pending-settings-from-process *setting-control* self 'sfx-volume)
   (clear-pending-settings-from-process *setting-control* self 'ambient-volume)
   (set-setting! *setting-control* self 'allow-pause #f 0.0 0)
   (set-setting! *setting-control* self 'allow-progress #f 0.0 0)
   (set-setting! *setting-control* self 'music 'ogreboss 0.0 0)
   (set! (-> self state-time) (-> *display* game-frame-counter))
   (logior! (-> self draw status) 2)
   (let ((gp-0 (-> self mask)))
    (load-state-want-display-level 'finalboss 'special)
    (logclear! (-> self mask) (process-mask pause progress))
    (push-setting! *setting-control* self 'process-mask 'set 0.0 8212)
    (copy-settings-from-target! *setting-control*)
    (let ((f30-0 0.0)
          (f28-0 0.5)
          )
     (until s5-0
      (hide-hud-quick)
      (set! (-> self credit-fade) 1.0)
      (sage-finalboss-credit-particle)
      (set! s5-0 (draw-end-credits (the int f30-0)))
      (if
       (and
        *cheat-mode*
        (logtest? (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons triangle))
        )
       (set! s5-0 #t)
       )
      (cond
       ((paused?)
        )
       ((and
         (< 1300.0 f30-0)
         (logtest?
          (-> *cpad-list* cpads 0 button0-abs 0)
          (pad-buttons circle x)
          )
         )
        (set! f28-0 (seek f28-0 16.0 (* 4.0 (-> *display* seconds-per-frame))))
        (+! f30-0 (* f28-0 (-> *display* time-adjust-ratio)))
        )
       (else
        (set! f28-0 (seek f28-0 0.5 (* 16.0 (-> *display* seconds-per-frame))))
        (+! f30-0 (* f28-0 (-> *display* time-adjust-ratio)))
        )
       )
      (suspend)
      )
     )
    (set! (-> self mask) gp-0)
    )
   (load-state-want-display-level 'finalboss 'display)
   (clear-pending-settings-from-process *setting-control* self 'allow-pause)
   (clear-pending-settings-from-process *setting-control* self 'allow-progress)
   (clear-pending-settings-from-process *setting-control* self 'process-mask)
   (clear-pending-settings-from-process *setting-control* self 'music)
   (copy-settings-from-target! *setting-control*)
   (set-blackout-frames 15)
   (let ((gp-1 (-> *display* base-frame-counter)))
    (until (>= (- (-> *display* base-frame-counter) gp-1) 15)
     (suspend)
     )
    )
   (go-virtual hidden)
   (none)
   )
  )

(defmethod should-display? sage-finalboss ((obj sage-finalboss))
  #f
  )

(defbehavior sage-finalboss-extra-trans sage-finalboss ()
  (case (current-status (-> self tasks)) 
   (((task-status need-reminder-a) (task-status need-reminder))
     (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-1 from) self)
      (set! (-> a1-1 num-params) 0)
      (set! (-> a1-1 message) 'play-anim)
      (send-event-function self a1-1)
      )
     )
   )
  (none)
  )

(defbehavior sage-finalboss-extra-enter sage-finalboss ()
  (cond
   ((-> self kick-the-credits)
    (set! (-> self kick-the-credits) #f)
    (go sage-finalboss-credits)
    )
   ((-> self kick-in-the-door)
    (set! (-> self kick-in-the-door) #f)
    (entity-birth-no-kill (entity-by-type power-right))
    (entity-birth-no-kill (entity-by-type power-left))
    (let ((gp-2 (new 'stack-no-clear 'event-message-block)))
     (set! (-> gp-2 from) self)
     (set! (-> gp-2 num-params) 3)
     (set! (-> gp-2 message) 'change-mode)
     (set! (-> gp-2 param 0) (the-as uint 'final-door))
     (set!
      (-> gp-2 param 1)
      (the-as
       uint
       (search-process-tree *active-pool* (lambda ((arg0 final-door))
                                           (= (-> arg0 type) power-right)
                                           )
        )
       )
      )
     (set!
      (-> gp-2 param 2)
      (the-as
       uint
       (search-process-tree *active-pool* (lambda ((arg0 final-door))
                                           (= (-> arg0 type) power-left)
                                           )
        )
       )
      )
     (send-event-function *target* gp-2)
     )
    )
   )
  (none)
  )

(defstate hidden (sage-finalboss)
  :virtual #t
  :enter
  (behavior ()
   (sage-finalboss-extra-enter)
   ((-> (method-of-type process-taskable hidden) enter))
   (clear-pending-settings-from-process *setting-control* self 'allow-progress)
   (none)
   )
  :trans
  (behavior ()
   (sage-finalboss-extra-trans)
   ((-> (method-of-type process-taskable hidden) trans))
   (none)
   )
  )

(defstate idle (sage-finalboss)
  :virtual #t
  :enter
  (behavior ()
   (sage-finalboss-extra-enter)
   ((-> (method-of-type process-taskable idle) enter))
   (none)
   )
  :trans
  (behavior ()
   (sage-finalboss-extra-trans)
   ((-> (method-of-type process-taskable idle) trans))
   (none)
   )
  )

(defmethod copy-defaults! sage-finalboss ((obj sage-finalboss) (arg0 res-lump))
  (dummy-40 obj arg0 *sage-finalboss-sg* 3 40 (new 'static 'vector :w 4096.0) 5)
  (set! (-> obj tasks) (get-task-control (game-task finalboss-movies)))
  (set! (-> obj redsage) (the-as handle #f))
  (set! (-> obj bluesage) (the-as handle #f))
  (set! (-> obj yellowsage) (the-as handle #f))
  (set! (-> obj assistant) (the-as handle #f))
  (set! (-> obj robotplat) (the-as handle #f))
  (set! (-> obj robotboss) (the-as handle #f))
  (set! (-> obj jak-white) (the-as handle #f))
  (set! (-> obj silodoor) (the-as handle #f))
  (set! (-> obj left-door) #f)
  (set! (-> obj right-door) #f)
  (set! (-> obj kick-in-the-door) #f)
  (set! (-> obj kick-the-credits) #f)
  (set! (-> obj credits-played) #f)
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 682) obj)
   )
  (set! (-> obj part matrix) (sprite-allocate-user-hvdf))
  (set!
   (-> obj particle-whiteout)
   (create-launch-control (-> *part-group-id-table* 706) obj)
   )
  (set! (-> obj particle-whiteout matrix) (sprite-allocate-user-hvdf))
  (set!
   (-> obj particle 0 part)
   (create-launch-control (-> *part-group-id-table* 699) obj)
   )
  (set!
   (-> obj particle 1 part)
   (create-launch-control (-> *part-group-id-table* 700) obj)
   )
  (set!
   (-> obj particle 2 part)
   (create-launch-control (-> *part-group-id-table* 701) obj)
   )
  (set!
   (-> obj particle 3 part)
   (create-launch-control (-> *part-group-id-table* 702) obj)
   )
  (set!
   (-> obj particle 7 part)
   (create-launch-control (-> *part-group-id-table* 645) obj)
   )
  (set!
   (-> obj particle 4 part)
   (create-launch-control (-> *part-group-id-table* 703) obj)
   )
  (set!
   (-> obj particle 5 part)
   (create-launch-control (-> *part-group-id-table* 696) obj)
   )
  (set!
   (-> obj particle 6 part)
   (create-launch-control (-> *part-group-id-table* 704) obj)
   )
  (set!
   (-> obj particle 8 part)
   (create-launch-control (-> *part-group-id-table* 698) obj)
   )
  (dotimes (v1-37 9)
   (set! (-> obj particle v1-37 active) #f)
   )
  (set! (-> obj palette-val) 0.0)
  (set!
   (-> obj root-override trans y)
   (+ 2048.0 (-> obj root-override trans y))
   )
  (if (not (should-display? obj))
   (go (method-of-object obj hidden))
   (go (method-of-object obj idle))
   )
  (none)
  )




