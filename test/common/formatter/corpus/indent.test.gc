===
Basic Nested Form
===

(println "hello" (println "world" "world2" "very-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-form"))

---

(println "hello"
         (println "world"
                  "world2"
                  "very-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-form"))

===
Basic Nested Form Reversed
===

(println (println "world" "world2" "very-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-form") "hello")

---

(println (println "world"
                  "world2"
                  "very-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-formvery-long-form")
         "hello")

===
Multiple Top Level Forms
===

(println "hello" "world")(println "hello" "world")

---

(println "hello" "world")

(println "hello" "world")

===
All Indented
===

(println
"hello" (println
"world"))

---

(println "hello" (println "world"))

===
Mixed
===

(println
"hello" (println "world"))

---

(println "hello" (println "world"))

===
Single Item Form
===

(println)

---

(println)

===
begin
===

(begin
"hello" (println "world"))

---

(begin
  "hello"
  (println "world"))

===
Inlining flowed form
===

(or something (begin (+ 1 2) (= 2 2)))

---

(or something (begin (+ 1 2) (= 2 2)))

===
Long array creation
===

(let ((arr (new
                  'static
                  'array
                  uint32
                  16
                  #x7b2191b ;; = 6 ^ 129112349
                  #x7b21914 ;; = 9 ^ 129112349
                  #x7b21916 ;; = 11 ^ 129112349
                  #x7b21913 ;; = 14 ^ 129112349
                  #x7b21909 ;; = 20 ^ 129112349
                  #x7b21908 ;; = 21 ^ 129112349
                  #x7b2190a ;; = 23 ^ 129112349
                  #x7b21907 ;; = 26 ^ 129112349
                  #x7b2191b ;; = 6 ^ 129112349
                  #x7b21917 ;; = 10 ^ 129112349
                  #x7b21916 ;; = 11 ^ 129112349
                  #x7b2190c ;; = 17 ^ 129112349
                  #x7b21909 ;; = 20 ^ 129112349
                  #x7b2190b ;; = 22 ^ 129112349
                  #x7b2190a ;; = 23 ^ 129112349
                  #x7b21900 ;; = 29 ^ 129112349
                  )))
    (dotimes (i 16)
      (set! (-> (scratchpad-object terrain-context) work foreground joint-work frm-jmp-table i)
            (the-as (function none) (-> arr i)))))

---

(let ((arr (new 'static
                'array
                uint32
                16
                #x7b2191b ;; = 6 ^ 129112349
                #x7b21914 ;; = 9 ^ 129112349
                #x7b21916 ;; = 11 ^ 129112349
                #x7b21913 ;; = 14 ^ 129112349
                #x7b21909 ;; = 20 ^ 129112349
                #x7b21908 ;; = 21 ^ 129112349
                #x7b2190a ;; = 23 ^ 129112349
                #x7b21907 ;; = 26 ^ 129112349
                #x7b2191b ;; = 6 ^ 129112349
                #x7b21917 ;; = 10 ^ 129112349
                #x7b21916 ;; = 11 ^ 129112349
                #x7b2190c ;; = 17 ^ 129112349
                #x7b21909 ;; = 20 ^ 129112349
                #x7b2190b ;; = 22 ^ 129112349
                #x7b2190a ;; = 23 ^ 129112349
                #x7b21900 ;; = 29 ^ 129112349
                )))
  (dotimes (i 16)
    (set! (-> (scratchpad-object terrain-context) work foreground joint-work frm-jmp-table i)
          (the-as (function none) (-> arr i)))))

===
Nested function call
===

(set! (-> this attack-event)
      (the-as symbol
              ((the-as (function res-lump symbol symbol float structure (pointer res-tag) pointer object) (method-of-type res-lump get-property-struct))
                       (-> this entity)
                       'attack-event)))
---

(set! (-> this attack-event)
      (the-as symbol
              ((the-as (function res-lump symbol symbol float structure (pointer res-tag) pointer object)
                       (method-of-type res-lump get-property-struct))
               (-> this entity)
               'attack-event)))
