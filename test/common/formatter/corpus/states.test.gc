===
Basic State
===

(defstate joint-exploder-shatter (joint-exploder)
  :enter
  (behavior ()
    (set-time! (-> self state-time)))
  :trans
  (behavior ()
    (let* ((f1-0 (the float (- (current-time) (-> self state-time))))
           (f0-2 (- 1.0 (/ f1-0 (the float (-> self tuning duration)))))
           (f1-2 (- 1.0 (/ f1-0 (* 0.75 (the float (-> self tuning duration)))))))
      (if (< f1-2 0.0) (set! f1-2 0.0))
      (set-vector! (-> self scale-vector) f0-2 f1-2 f0-2 1.0))
    (dotimes (v1-8 5)
      (set! (-> self lists v1-8 pre-moved?) #f))
    (dotimes (gp-0 5)
      (let ((s5-0 (-> self lists gp-0)))
        (when (>= (-> s5-0 head) 0)
          (when (not (-> s5-0 pre-moved?))
            (joint-exploder-method-25 self s5-0)
            (if (nonzero? gp-0) (joint-exploder-method-28 self s5-0))))))
    (let ((gp-1 (new 'stack-no-clear 'bounding-box)))
      (let ((v1-26 (-> self root trans))) (set! (-> gp-1 min quad) (-> v1-26 quad)) (set! (-> gp-1 max quad) (-> v1-26 quad)))
      (dotimes (s5-1 5)
        (let ((s4-0 (-> self lists s5-1)))
          (if (-> s4-0 bbox-valid?) (add-box! gp-1 (-> s4-0 bbox)))
          (if (nonzero? s5-1) (joint-exploder-method-22 self s4-0))))
      (let ((s5-2 (-> self draw bounds)))
        (set-vector! s5-2
                     (* 0.5 (+ (-> gp-1 min x) (-> gp-1 max x)))
                     (* 0.5 (+ (-> gp-1 min y) (-> gp-1 max y)))
                     (* 0.5 (+ (-> gp-1 min z) (-> gp-1 max z)))
                     1.0)
        (let ((f0-12 (+ 16384.0 (vector-vector-distance s5-2 (-> gp-1 max)))))
          (vector-! s5-2 s5-2 (-> self root trans))
          (set! (-> s5-2 w) f0-12))))
    0)
  :code
  (behavior ()
    (set-time! (-> self state-time))
    (until (time-elapsed? (-> self state-time) (-> self tuning duration))
      (suspend)
      (ja :num! (loop!))))
  :post
  ja-post)

---

(defstate joint-exploder-shatter (joint-exploder)
  :enter
    (behavior ()
      (set-time! (-> self state-time)))
  :trans
    (behavior ()
      (let* ((f1-0 (the float (- (current-time) (-> self state-time))))
             (f0-2 (- 1.0 (/ f1-0 (the float (-> self tuning duration)))))
             (f1-2 (- 1.0 (/ f1-0 (* 0.75 (the float (-> self tuning duration)))))))
        (if (< f1-2 0.0) (set! f1-2 0.0))
        (set-vector! (-> self scale-vector) f0-2 f1-2 f0-2 1.0))
      (dotimes (v1-8 5)
        (set! (-> self lists v1-8 pre-moved?) #f))
      (dotimes (gp-0 5)
        (let ((s5-0 (-> self lists gp-0)))
          (when (>= (-> s5-0 head) 0)
            (when (not (-> s5-0 pre-moved?))
              (joint-exploder-method-25 self s5-0)
              (if (nonzero? gp-0) (joint-exploder-method-28 self s5-0))))))
      (let ((gp-1 (new 'stack-no-clear 'bounding-box)))
        (let ((v1-26 (-> self root trans))) (set! (-> gp-1 min quad) (-> v1-26 quad)) (set! (-> gp-1 max quad) (-> v1-26 quad)))
        (dotimes (s5-1 5)
          (let ((s4-0 (-> self lists s5-1)))
            (if (-> s4-0 bbox-valid?) (add-box! gp-1 (-> s4-0 bbox)))
            (if (nonzero? s5-1) (joint-exploder-method-22 self s4-0))))
        (let ((s5-2 (-> self draw bounds)))
          (set-vector! s5-2
                       (* 0.5 (+ (-> gp-1 min x) (-> gp-1 max x)))
                       (* 0.5 (+ (-> gp-1 min y) (-> gp-1 max y)))
                       (* 0.5 (+ (-> gp-1 min z) (-> gp-1 max z)))
                       1.0)
          (let ((f0-12 (+ 16384.0 (vector-vector-distance s5-2 (-> gp-1 max)))))
            (vector-! s5-2 s5-2 (-> self root trans))
            (set! (-> s5-2 w) f0-12))))
      0)
  :code
    (behavior ()
      (set-time! (-> self state-time))
      (until (time-elapsed? (-> self state-time) (-> self tuning duration))
        (suspend)
        (ja :num! (loop!))))
  :post ja-post)

===
Ensure indentation is correct
===

(defstate idle (voicebox)
  :event
    (-> (method-of-type voicebox enter)
      event))

---

(defstate idle (voicebox)
  :event
    (-> (method-of-type voicebox enter)
        event))