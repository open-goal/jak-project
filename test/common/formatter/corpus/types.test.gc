===
Types - With Methods
===

(deftype popup-menu (basic)
  ((entries (array popup-menu-entry))
   (curr-entry-index int32))
  (:methods
    (draw! (_type_) none)
    (move-up! (_type_) none)
    (move-down! (_type_) none)
    (press! (_type_) none)
    (get-widest-label (_type_ font-context) float)))

---

(deftype popup-menu (basic)
  ((entries          (array popup-menu-entry))
   (curr-entry-index int32))
  (:methods
   (draw! (_type_) none)
   (move-up! (_type_) none)
   (move-down! (_type_) none)
   (press! (_type_) none)
   (get-widest-label (_type_ font-context) float)))

===
Types - Empty
===

(deftype popup-menu-label (popup-menu-entry) ())

---

(deftype popup-menu-label (popup-menu-entry) ())

===
Types - With Methods and States
===

(deftype popup-menu (basic)
  ((entries-incredibly-long-name-wow-what-a-long-name-very-very-long-long-long (array popup-menu-entry) :inline :overlay-at event-param-point)
   (curr-entry-index   int32))
  (:methods
    (method-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name (_type_) none :replace)
    (move-up! (_type_) none)
    (move-down! (_type_) none)
    (press! (_type_) none)
    (get-widest-label (_type_ font-context) float))
  (:states
    state-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name
    (state-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name symbol symbol symbol)
    (target-attack-uppercut float float)
    (target-attack-uppercut-jump float float)
    (target-board-clone-anim handle)
    target-board-duck-stance
    target-board-falling
    (target-board-flip float float symbol)
    (target-board-get-off object symbol)
    target-board-get-on
    (target-board-grab symbol)
    (target-board-grenade handle)
    target-board-halfpipe
    (target-board-hit vector attack-info)
    target-board-hit-ground)
  (:state-methods
    state-method-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name
    (state-method-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name float symbol symbol)
    pov-camera-playing
    pov-camera-start-playing
    pov-camera-startup
    )
  )

---

(deftype popup-menu (basic)
  ((entries-incredibly-long-name-wow-what-a-long-name-very-very-long-long-long (array popup-menu-entry) :inline :overlay-at event-param-point)
   (curr-entry-index                                                           int32))
  (:methods
   (method-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name (_type_) none :replace)
   (move-up! (_type_) none)
   (move-down! (_type_) none)
   (press! (_type_) none)
   (get-widest-label (_type_ font-context) float))
  (:states
   state-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name
   (state-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name symbol symbol symbol)
   (target-attack-uppercut float float)
   (target-attack-uppercut-jump float float)
   (target-board-clone-anim handle)
   target-board-duck-stance
   target-board-falling
   (target-board-flip float float symbol)
   (target-board-get-off object symbol)
   target-board-get-on
   (target-board-grab symbol)
   (target-board-grenade handle)
   target-board-halfpipe
   (target-board-hit vector attack-info)
   target-board-hit-ground)
  (:state-methods
   state-method-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name
   (state-method-with-a-really-long-name-method-with-a-really-long-name-method-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name-with-a-really-long-name float symbol symbol)
   pov-camera-playing
   pov-camera-start-playing
   pov-camera-startup))

===
With flags
===

(deftype process-tree (basic)
  ((name     basic                 :offset-assert 4)
   (mask     process-mask          :offset-assert 8)
   (parent   (pointer process-tree) :offset-assert 12)
   (brother  (pointer process-tree) :offset-assert 16)
   (child    (pointer process-tree) :offset-assert 20)
   (ppointer (pointer process)     :offset-assert 24)
   (self     process-tree          :offset-assert 28))
  (:methods
   (new (symbol type basic) _type_)
   (activate (_type_ process-tree basic pointer) process-tree) ;; 9
   (deactivate (_type_) none) ;; 10
   (init-from-entity! (_type_ entity-actor) none) ;; 11
   (run-logic? (_type_) symbol) ;; 12
   (process-tree-method-13 () none) ;; 13
   )
  :size-assert
  #x20
  :method-count-assert
  14
  :no-runtime-type ;; already defined by kscheme. Don't do it again.
  )

--- 

(deftype process-tree (basic)
  ((name     basic :offset-assert 4)
   (mask     process-mask :offset-assert 8)
   (parent   (pointer process-tree) :offset-assert 12)
   (brother  (pointer process-tree) :offset-assert 16)
   (child    (pointer process-tree) :offset-assert 20)
   (ppointer (pointer process) :offset-assert 24)
   (self     process-tree :offset-assert 28))
  (:methods
   (new (symbol type basic) _type_)
   (activate (_type_ process-tree basic pointer) process-tree) ;; 9
   (deactivate (_type_) none) ;; 10
   (init-from-entity! (_type_ entity-actor) none) ;; 11
   (run-logic? (_type_) symbol) ;; 12
   (process-tree-method-13 () none) ;; 13
   )
  :size-assert #x20
  :method-count-assert 14
  :no-runtime-type ;; already defined by kscheme. Don't do it again.
  )

===
Single value column
===

(deftype joint-control-channel (structure)
  ((parent           joint-control)
   (command          symbol)
   (frame-interp     float)
   (frame-group      art-joint-anim)
   (frame-num        float)
   (num-func         (function joint-control-channel float float float))
   (param            float                                              2)
   (group-sub-index  int16)
   (group-size       int16)
   (dist             meters)
   (eval-time        uint32)
   (inspector-amount float))
  (:methods
   (debug-print-frames (_type_) _type_)))

---

(deftype joint-control-channel (structure)
  ((parent           joint-control)
   (command          symbol)
   (frame-interp     float)
   (frame-group      art-joint-anim)
   (frame-num        float)
   (num-func         (function joint-control-channel float float float))
   (param            float 2)
   (group-sub-index  int16)
   (group-size       int16)
   (dist             meters)
   (eval-time        uint32)
   (inspector-amount float))
  (:methods
   (debug-print-frames (_type_) _type_)))
