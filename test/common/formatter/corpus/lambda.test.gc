===
With behavior tag
===

(lambda :behavior
        target
        ()
        (println "something"))

---

(lambda :behavior target ()
  (println "something"))

===
Without behavior tag
===

(lambda ()
        (println "something"))

---

(lambda ()
  (println "something"))

===
Too long
===

(lambda ((arg0 part-tracker))
  (let ((s5-0 (handle->process (-> arg0 userdata)))) (when s5-0 (let* ((v1-4 (handle->process (-> (the-as eco-collectable s5-0) pickup-handle))) (a2-0 (cond ((not v1-4) (-> arg0 root trans)) ((= (-> v1-4 type) target) (vector<-cspace! (new 'stack-no-clear 'vector) (-> (the-as target v1-4) node-list data 5))) (else (-> (the-as target v1-4) control trans))))) (vector-lerp! (-> arg0 root trans) (-> arg0 offset) a2-0 (/ (the float (- (current-time) (-> arg0 start-time))) (the float (-> (the-as eco-collectable s5-0) collect-effect-time))))))))
                       
---

(lambda ((arg0 part-tracker))
  (let ((s5-0 (handle->process (-> arg0 userdata))))
    (when s5-0
      (let* ((v1-4 (handle->process (-> (the-as eco-collectable s5-0) pickup-handle)))
             (a2-0 (cond
                     ((not v1-4) (-> arg0 root trans))
                     ((= (-> v1-4 type) target) (vector<-cspace! (new 'stack-no-clear 'vector) (-> (the-as target v1-4) node-list data 5)))
                     (else (-> (the-as target v1-4) control trans)))))
        (vector-lerp! (-> arg0 root trans)
                      (-> arg0 offset)
                      a2-0
                      (/ (the float (- (current-time) (-> arg0 start-time)))
                         (the float (-> (the-as eco-collectable s5-0) collect-effect-time))))))))