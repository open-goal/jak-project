(let ((v1 (new 'stack-no-clear 'array 'uint8 16))
      (v2 (new 'stack-no-clear 'array 'uint8 16))
      (v3 (new 'stack-no-clear 'array 'uint8 16))
      )

  ;; initialize stack arrays
  (dotimes (i 16)
    (set! (-> v1 i) i)
    (set! (-> v2 i) (+ i 16))
    )

  (let ((v1-quad (-> (the (pointer uint128) v1))) ;;
        (v2-quad (-> (the (pointer uint128) v2)))
        (v3-quad (the uint128 0))
        )
    (.pextlw v3-quad v1-quad v2-quad)
    ;;(print128 v1-quad) (format #t "~%")
    ;;(print128 v2-quad) (format #t "~%")
    ;; expect #x07060504171615140302010013121110
    (print128 v3-quad) (format #t "~%")

    ;; expect #x0f0e0d0c1f1e1d1c0b0a09081b1a1918
    (.pextuw v3-quad v1-quad v2-quad)
    (print128 v3-quad) (format #t "~%")
    (.pcpyld v3-quad v1-quad v2-quad)
    (print128 v3-quad) (format #t "~%")
    (.pcpyud v3-quad v1-quad v2-quad)
    (print128 v3-quad) (format #t "~%")
    (.ppach v3-quad v1-quad v2-quad)
    (print128 v3-quad) (format #t "~%")
    (.ppacb v3-quad v1-quad v2-quad) ;; expect 0e0c0a08'06040210'1e1c1a18'16141210
    (print128 v3-quad) (format #t "~%")
    )

  (let ((s1 (new 'stack-no-clear 'array 'uint32 4))
        (s2 (new 'stack-no-clear 'array 'uint32 4)))
    (set! (-> s1 0) #xdeadbeef)
    (set! (-> s1 1) #x12312323)
    (set! (-> s1 2) #x11112222)
    (set! (-> s1 3) #x11112223)

    (set! (-> s2 0) #xdeadbeee) ;; different
    (set! (-> s2 1) #x12312323)
    (set! (-> s2 2) #x91112222) ;; different
    (set! (-> s2 3) #x11112223)

    (let ((s1q (-> (the (pointer uint128) s1)))
          (s2q (-> (the (pointer uint128) s2)))
          (s3q (the uint128 0))
          )

      (.pceqw s3q s1q s2q)
      (print128 s3q) (format #t "~%")
      )
    )

  (let ((s1 (new 'stack-no-clear 'array 'uint32 4))
        (s2 (new 'stack-no-clear 'array 'uint32 4)))
    (set! (-> s1 0) #x300)
    (set! (-> s1 1) #x3)
    (set! (-> s1 2) #x100)
    (set! (-> s1 3) #x100000)
    (set! (-> s2 0) #x1)
    (set! (-> s2 1) #x5)
    (set! (-> s2 2) #x2)
    (set! (-> s2 3) #x70000)

    (let ((s1q (-> (the (pointer uint128) s1)))
          (s2q (-> (the (pointer uint128) s2)))
          (s3q (the uint128 0)))
      (.psubw s3q s1q s2q)
      (print128 s3q) (format #t "~%")
      ;;        #x00090000000000fefffffffe000002ff
      )
    )
  )


(let ((s1 (new 'static 'array uint8 16
               1 2 3 4 0 0 0 0 8 8 8 8 240 240 241 243 9 8 7 6))
      (s2 (new 'static 'array uint8 16
               7 8 3 4 1 2 3 4 9 8 7 6 240 240 241 243 9 8 1 2))
      (s3 (new 'static 'array uint8 16)))
  (let ((v1 (-> (the (pointer uint128) s1)))
        (v2 (-> (the (pointer uint128) s2)))
        (v3 (the uint128 0)))
    (.paddb v3 v2 v1)
    (set! (-> (the (pointer uint128) s3)) v3)
    (dotimes (i 16)
      (format #t "~X + ~X = ~X (~X)~%" (-> s1 i) (-> s2 i) (-> s3 i) (logand #xff (+ (-> s1 i) (-> s2 i))))
      )
    0
    )
  )
