
(let ((v1 (new 'stack-no-clear 'array 'uint8 16))
      (v2 (new 'stack-no-clear 'array 'uint8 16))
      (v3 (new 'stack-no-clear 'array 'uint8 16))
      )

  ;; initialize stack arrays
  (dotimes (i 16)
    (set! (-> v1 i) i)
    (set! (-> v2 i) (+ i 3))
    )
  (let ((v1-quad (-> (the (pointer uint128) v1)))
        (v2-quad (-> (the (pointer uint128) v2)))
        (v3-quad (the uint128 0))
        )

    (.por v3-quad v1-quad v2-quad)
    ;;(print128 v1-quad) (format #t "~%")
    ;;(print128 v2-quad) (format #t "~%")
    (print128 v3-quad) (format #t "~%")

    (.pnor v3-quad v1-quad v2-quad)
    ;;(print128 v1-quad) (format #t "~%")
    ;;(print128 v2-quad) (format #t "~%")
    (print128 v3-quad) (format #t "~%")

    (.pand v3-quad v1-quad v2-quad)
    ;;(print128 v1-quad) (format #t "~%")
    ;;(print128 v2-quad) (format #t "~%")
    (print128 v3-quad) (format #t "~%~%")

    (format #t "#x")
    (countdown (i 16)
      (format #t "~02x" (logand #xff (logior (-> v1 i) (-> v2 i))))
      )
    (format #t "~%")

    (format #t "#x")
    (countdown (i 16)
      (format #t "~02x" (logand #xff (lognor (-> v1 i) (-> v2 i))))
      )
    (format #t "~%")

    (format #t "#x")
    (countdown (i 16)
      (format #t "~02x" (logand #xff (logand (-> v1 i) (-> v2 i))))
      )
    (format #t "~%")

    )
  )
