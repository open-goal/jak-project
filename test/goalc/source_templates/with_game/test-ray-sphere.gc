;; A good intersection, tested against the C++ implementation.
(let ((sph (new 'static 'vector :x 0.4 :y 0.3 :z 0.7))
      (ray-origin (new 'static 'vector :x 0.2 :y -3.0))
      (ray-dir (new 'static 'vector :y 10.0)))
  (format #t "Got ~f~%" (ray-sphere-intersect ray-origin ray-dir sph 1.2))
  )

;; Too far away, the probe is only 1 meter.
(let ((sph (new 'static 'vector :x 0.4 :y 0.3 :z 0.7))
      (ray-origin (new 'static 'vector :x 0.2 :y -3.0))
      (ray-dir (new 'static 'vector :y 1.0)))
  (format #t "Got ~f~%" (ray-sphere-intersect ray-origin ray-dir sph 1.2))
  )

;; Wrong direction, the probe reaches, but would have to go backward.
(let ((sph (new 'static 'vector :x 0.4 :y 0.3 :z 0.7))
      (ray-origin (new 'static 'vector :x 0.2 :y -3.0))
      (ray-dir (new 'static 'vector :y -10.0)))
  (format #t "Got ~f~%" (ray-sphere-intersect ray-origin ray-dir sph 1.2))
  )

;; starts inside of the sphere (should return 0)
(let ((sph (new 'static 'vector :x 0.4 :y 0.3 :z 0.7))
      (ray-origin (new 'static 'vector :x 0.4 :y 0.2 :z 0.7))
      (ray-dir (new 'static 'vector :y 10.0)))
  (format #t "Got ~f~%" (ray-sphere-intersect ray-origin ray-dir sph 1.2))
  )

;; misses the sphere (negative in sqrt, needs to catch this to prevent NaNs)
(let ((sph (new 'static 'vector :x 0.4 :y 0.3 :z 0.7))
      (ray-origin (new 'static 'vector :x 1.61 :y -3.0))
      (ray-dir (new 'static 'vector :y 10.0)))
  (format #t "Got ~f~%" (ray-sphere-intersect ray-origin ray-dir sph 1.2))
  )
