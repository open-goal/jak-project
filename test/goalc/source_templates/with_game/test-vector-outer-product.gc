(defun test-vector-outer-product ()
  (let ((vector-in-1 (new 'stack 'vector))
        (vector-in-2 (new 'stack 'vector))
        (vector-out  (new 'stack 'vector)))

    (set-vector! vector-in-1 1.0 2.0 3.0 4.0)
    (set-vector! vector-in-2 5.0 6.0 7.0 8.0)
    (set-vector! vector-out 0.0 0.0 0.0 999.0)

    (rlet ((vf1 :class vf :reset-here #t)
           (vf2 :class vf :reset-here #t)
           (vf3 :class vf :reset-here #t))

      (.lvf vf1 vector-in-1)
      (.lvf vf2 vector-in-2)
      (.lvf vf3 vector-out)
    
      
      (.outer.product.vf vf3 vf1 vf2)
      (.wait.vf)

      (.svf vector-out vf3))

    (format #t "(~f, ~f, ~f, ~f)~%" (-> vector-out x) (-> vector-out y) (-> vector-out z) (-> vector-out w))))

(test-vector-outer-product)
