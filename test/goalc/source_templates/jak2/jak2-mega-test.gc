(define format _format)

;; check the empty pair
(format #t "empty pair: ~A ~A ~A ~A ~A~%" '() (car '()) (cdr '()) (= '() (car '())) (= 'b (car '())))
(format #t "empty pair type: ~A~%" (rtype-of '()))

;; check non-empty pair
(let ((test-pair-1 '(a b -12)))
  (format #t "non-empty pair: ~A ~A ~A ~A~%" test-pair-1 (car test-pair-1) (rtype-of test-pair-1) (new 'global 'pair 'a 'b))
  )

;; check some stuff
(format #t "basic types: ~A ~A ~A ~A~%" (-> type type) symbol string function)

;; bools
(format #t "bools: ~A ~A ~A ~A ~A ~A~%" #t #f (-> #t value) (-> #f value) (= 1 2) (= 2 2))

;; weird funcs
(nothing)
(format #t "zero: ~D~%" (zero-func))

;; type stuff
(format #t "parent of type: ~A ~A ~A ~A~%"
        (-> type parent)
        (-> type parent parent)
        (-> type parent parent parent)
        (-> type parent parent parent parent))

(define *array-of-syms* (new 'static 'array symbol 2 'asdf #f))
(format #t "array: ~A ~A~%" (-> *array-of-syms* 0) (-> *array-of-syms* 1))

#|
empty pair: () () () #t #f\
empty pair type: pair
non-empty pair: (a b -12) a pair (a . b)
basic types: type symbol string function
bools: #t #f #t #f #f #t
zero: 0
parent of type: basic structure object object
array: asdf #f
|#
