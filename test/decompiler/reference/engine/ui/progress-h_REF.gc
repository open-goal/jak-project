;;-*-Lisp-*-
(in-package goal)

;; definition of type count-info
(deftype count-info (structure)
  ((money-count  int32  :offset-assert   0)
   (buzzer-count int32  :offset-assert   4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type count-info
(defmethod inspect count-info ((obj count-info))
  (format #t "[~8x] ~A~%" obj 'count-info)
  (format #t "~Tmoney-count: ~D~%" (-> obj money-count))
  (format #t "~Tbuzzer-count: ~D~%" (-> obj buzzer-count))
  obj
  )

;; definition of type game-count-info
(deftype game-count-info (basic)
  ((length int32                       :offset-assert   4)
   (data   count-info :inline :dynamic :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type game-count-info
(defmethod inspect game-count-info ((obj game-count-info))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tlength: ~D~%" (-> obj length))
  (format #t "~Tdata[0] @ #x~X~%" (-> obj data))
  obj
  )

;; definition of type task-info-data
(deftype task-info-data (basic)
  ((task-id                  uint8    :offset-assert   4)
   (task-name                symbol 4 :offset-assert   8)
   (text-index-when-resolved int32    :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type task-info-data
(defmethod inspect task-info-data ((obj task-info-data))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Ttask-id: ~D~%" (-> obj task-id))
  (format #t "~Ttask-name[4] @ #x~X~%" (-> obj task-name))
  (format
   #t
   "~Ttext-index-when-resolved: ~D~%"
   (-> obj text-index-when-resolved)
   )
  obj
  )

;; definition of type level-tasks-info
(deftype level-tasks-info (basic)
  ((level-name-id     uint32           :offset-assert   4)
   (text-group-index  int32            :offset-assert   8)
   (nb-of-tasks       int32            :offset-assert  12)
   (buzzer-task-index int32            :offset-assert  16)
   (task-info         task-info-data 8 :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; definition for method 3 of type level-tasks-info
(defmethod inspect level-tasks-info ((obj level-tasks-info))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tlevel-name-id: ~D~%" (-> obj level-name-id))
  (format #t "~Ttext-group-index: ~D~%" (-> obj text-group-index))
  (format #t "~Tnb-of-tasks: ~D~%" (-> obj nb-of-tasks))
  (format #t "~Tbuzzer-task-index: ~D~%" (-> obj buzzer-task-index))
  (format #t "~Ttask-info[8] @ #x~X~%" (-> obj task-info))
  obj
  )

;; definition of type game-option
(deftype game-option (basic)
  ((option-type     uint64  :offset-assert   8)
   (name            uint32  :offset-assert  16)
   (scale           basic   :offset-assert  20)
   (param1          float   :offset-assert  24)
   (param2          float   :offset-assert  28)
   (param3          int32   :offset-assert  32)
   (value-to-modify uint32  :offset-assert  36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; definition for method 3 of type game-option
(defmethod inspect game-option ((obj game-option))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Toption-type: ~D~%" (-> obj option-type))
  (format #t "~Tname: ~D~%" (-> obj name))
  (format #t "~Tscale: ~A~%" (-> obj scale))
  (format #t "~Tparam1: ~f~%" (-> obj param1))
  (format #t "~Tparam2: ~f~%" (-> obj param2))
  (format #t "~Tparam3: ~D~%" (-> obj param3))
  (format #t "~Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  obj
  )

;; definition of type progress
(deftype progress (process)
  ((current-debug-string         int32           :offset-assert 112)
   (current-debug-language       int32           :offset-assert 116)
   (current-debug-group          int32           :offset-assert 120)
   (in-out-position              int32           :offset-assert 124)
   (display-state                uint64          :offset-assert 128)
   (next-display-state           uint64          :offset-assert 136)
   (option-index                 int32           :offset-assert 144)
   (selected-option              basic           :offset-assert 148)
   (completion-percentage        float           :offset-assert 152)
   (ready-to-run                 basic           :offset-assert 156)
   (display-level-index          int32           :offset-assert 160)
   (next-level-index             int32           :offset-assert 164)
   (task-index                   int32           :offset-assert 168)
   (in-transition                basic           :offset-assert 172)
   (last-in-transition           basic           :offset-assert 176)
   (force-transition             basic           :offset-assert 180)
   (stat-transition              basic           :offset-assert 184)
   (level-transition             int32           :offset-assert 188)
   (language-selection           uint64          :offset-assert 192)
   (language-direction           basic           :offset-assert 200)
   (language-transition          basic           :offset-assert 204)
   (language-x-offset            int32           :offset-assert 208)
   (sides-x-scale                float           :offset-assert 212)
   (sides-y-scale                float           :offset-assert 216)
   (left-x-offset                int32           :offset-assert 220)
   (right-x-offset               int32           :offset-assert 224)
   (button-scale                 float           :offset-assert 228)
   (slot-scale                   float           :offset-assert 232)
   (left-side-x-scale            float           :offset-assert 236)
   (left-side-y-scale            float           :offset-assert 240)
   (right-side-x-scale           float           :offset-assert 244)
   (right-side-y-scale           float           :offset-assert 248)
   (small-orb-y-offset           int32           :offset-assert 252)
   (big-orb-y-offset             int32           :offset-assert 256)
   (transition-offset            int32           :offset-assert 260)
   (transition-offset-invert     int32           :offset-assert 264)
   (transition-percentage        float           :offset-assert 268)
   (transition-percentage-invert float           :offset-assert 272)
   (transition-speed             float           :offset-assert 276)
   (total-nb-of-power-cells      int32           :offset-assert 280)
   (total-nb-of-orbs             int32           :offset-assert 284)
   (total-nb-of-buzzers          int32           :offset-assert 288)
   (card-info                    mc-slot-info    :offset-assert 292)
   (last-option-index-change     uint64          :offset-assert 296)
   (video-mode-timeout           uint64          :offset-assert 304)
   (display-state-stack          uint64       5  :offset-assert 312)
   (option-index-stack           uint32       5  :offset-assert 352)
   (display-state-pos            int32           :offset-assert 372)
   (nb-of-icons                  int32           :offset-assert 376)
   (icons                        uint32       6  :offset-assert 380)
   (max-nb-of-particles          int32           :offset-assert 404)
   (nb-of-particles              int32           :offset-assert 408)
   (particles                    uint32       40 :offset-assert 412)
   (particle-state               uint32       40 :offset-assert 572)
   )
  :method-count-assert 59
  :size-assert         #x2dc
  :flag-assert         #x3b000002dc
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (TODO-RENAME-23 (_type_ symbol symbol) none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    (dummy-53 () none 53)
    (dummy-54 () none 54)
    (dummy-55 () none 55)
    (dummy-56 () none 56)
    (dummy-57 () none 57)
    (dummy-58 () none 58)
    )
  )

;; definition for method 3 of type progress
(defmethod inspect progress ((obj progress))
  (let ((t9-0 (method-of-type process inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tcurrent-debug-string: ~D~%" (-> obj current-debug-string))
  (format #t "~T~Tcurrent-debug-language: ~D~%" (-> obj current-debug-language))
  (format #t "~T~Tcurrent-debug-group: ~D~%" (-> obj current-debug-group))
  (format #t "~T~Tin-out-position: ~D~%" (-> obj in-out-position))
  (format #t "~T~Tdisplay-state: ~D~%" (-> obj display-state))
  (format #t "~T~Tnext-display-state: ~D~%" (-> obj next-display-state))
  (format #t "~T~Toption-index: ~D~%" (-> obj option-index))
  (format #t "~T~Tselected-option: ~A~%" (-> obj selected-option))
  (format #t "~T~Tcompletion-percentage: ~f~%" (-> obj completion-percentage))
  (format #t "~T~Tready-to-run: ~A~%" (-> obj ready-to-run))
  (format #t "~T~Tdisplay-level-index: ~D~%" (-> obj display-level-index))
  (format #t "~T~Tnext-level-index: ~D~%" (-> obj next-level-index))
  (format #t "~T~Ttask-index: ~D~%" (-> obj task-index))
  (format #t "~T~Tin-transition: ~A~%" (-> obj in-transition))
  (format #t "~T~Tlast-in-transition: ~A~%" (-> obj last-in-transition))
  (format #t "~T~Tforce-transition: ~A~%" (-> obj force-transition))
  (format #t "~T~Tstat-transition: ~A~%" (-> obj stat-transition))
  (format #t "~T~Tlevel-transition: ~D~%" (-> obj level-transition))
  (format #t "~T~Tlanguage-selection: ~D~%" (-> obj language-selection))
  (format #t "~T~Tlanguage-direction: ~A~%" (-> obj language-direction))
  (format #t "~T~Tlanguage-transition: ~A~%" (-> obj language-transition))
  (format #t "~T~Tlanguage-x-offset: ~D~%" (-> obj language-x-offset))
  (format #t "~T~Tsides-x-scale: ~f~%" (-> obj sides-x-scale))
  (format #t "~T~Tsides-y-scale: ~f~%" (-> obj sides-y-scale))
  (format #t "~T~Tleft-x-offset: ~D~%" (-> obj left-x-offset))
  (format #t "~T~Tright-x-offset: ~D~%" (-> obj right-x-offset))
  (format #t "~T~Tbutton-scale: ~f~%" (-> obj button-scale))
  (format #t "~T~Tslot-scale: ~f~%" (-> obj slot-scale))
  (format #t "~T~Tleft-side-x-scale: ~f~%" (-> obj left-side-x-scale))
  (format #t "~T~Tleft-side-y-scale: ~f~%" (-> obj left-side-y-scale))
  (format #t "~T~Tright-side-x-scale: ~f~%" (-> obj right-side-x-scale))
  (format #t "~T~Tright-side-y-scale: ~f~%" (-> obj right-side-y-scale))
  (format #t "~T~Tsmall-orb-y-offset: ~D~%" (-> obj small-orb-y-offset))
  (format #t "~T~Tbig-orb-y-offset: ~D~%" (-> obj big-orb-y-offset))
  (format #t "~T~Ttransition-offset: ~D~%" (-> obj transition-offset))
  (format
   #t
   "~T~Ttransition-offset-invert: ~D~%"
   (-> obj transition-offset-invert)
   )
  (format #t "~T~Ttransition-percentage: ~f~%" (-> obj transition-percentage))
  (format
   #t
   "~T~Ttransition-percentage-invert: ~f~%"
   (-> obj transition-percentage-invert)
   )
  (format #t "~T~Ttransition-speed: ~f~%" (-> obj transition-speed))
  (format
   #t
   "~T~Ttotal-nb-of-power-cells: ~D~%"
   (-> obj total-nb-of-power-cells)
   )
  (format #t "~T~Ttotal-nb-of-orbs: ~D~%" (-> obj total-nb-of-orbs))
  (format #t "~T~Ttotal-nb-of-buzzers: ~D~%" (-> obj total-nb-of-buzzers))
  (format #t "~T~Tcard-info: #<mc-slot-info @ #x~X>~%" (-> obj card-info))
  (format
   #t
   "~T~Tlast-option-index-change: ~D~%"
   (-> obj last-option-index-change)
   )
  (format #t "~T~Tvideo-mode-timeout: ~D~%" (-> obj video-mode-timeout))
  (format #t "~T~Tdisplay-state-stack[5] @ #x~X~%" (-> obj display-state-stack))
  (format #t "~T~Toption-index-stack[5] @ #x~X~%" (-> obj option-index-stack))
  (format #t "~T~Tdisplay-state-pos: ~D~%" (-> obj display-state-pos))
  (format #t "~T~Tnb-of-icons: ~D~%" (-> obj nb-of-icons))
  (format #t "~T~Ticons[6] @ #x~X~%" (-> obj icons))
  (format #t "~T~Tmax-nb-of-particles: ~D~%" (-> obj max-nb-of-particles))
  (format #t "~T~Tnb-of-particles: ~D~%" (-> obj nb-of-particles))
  (format #t "~T~Tparticles[40] @ #x~X~%" (-> obj particles))
  (format #t "~T~Tparticle-state[40] @ #x~X~%" (-> obj particle-state))
  obj
  )

;; definition for symbol *progress-process*, type (pointer progress)
(define *progress-process* (the-as (pointer progress) #f))

;; definition for symbol *progress-last-task-index*, type int
(define *progress-last-task-index* 0)

;; failed to figure out what this is:
(let ((v0-12 0))
  )
