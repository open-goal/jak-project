;;-*-Lisp-*-
(in-package goal)

;; definition for symbol mercneric-vu0-block, type vu-function
(define mercneric-vu0-block (new 'static 'vu-function :length #xbe :origin #x118 :qlength 95))

;; definition of type invinitdata
(deftype invinitdata (structure)
  ((count     uint8   :offset-assert   0)
   (init-data uint8   :offset-assert   1)
   (init-addr uint16  :offset-assert   2)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type invinitdata
(defmethod inspect invinitdata ((obj invinitdata))
  (format #t "[~8x] ~A~%" obj 'invinitdata)
  (format #t "~Tcount: ~D~%" (-> obj count))
  (format #t "~Tinit-data: ~D~%" (-> obj init-data))
  (format #t "~Tinit-addr: ~D~%" (-> obj init-addr))
  obj
  )

;; definition for symbol *inv-init-table*, type (inline-array invinitdata)
(define *inv-init-table* (new 'static 'inline-array invinitdata 8
                           (new 'static 'invinitdata :count #x48 :init-addr #x1)
                           (new 'static 'invinitdata :count #x38 :init-data #x24 :init-addr #xe1)
                           (new 'static 'invinitdata :count #xbe)
                           (new 'static 'invinitdata :count #x81 :init-data #x80 :init-addr #x3b80)
                           (new 'static 'invinitdata :count #x88 :init-data #x50 :init-addr #x100a)
                           (new 'static 'invinitdata :count #x7d :init-data #xb :init-addr #x81e8)
                           (new 'static 'invinitdata :count #x7d :init-data #x1b :init-addr #x81e8)
                           (new 'static 'invinitdata :count #x2 :init-data #x68 :init-addr #x5200)
                           )
        )

;; definition for function generic-merc-init-asm
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function mercneric-matrix-asm
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function mercneric-shader-asm
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function mercneric-bittable-asm
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function mercneric-convert
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function high-speed-reject
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function generic-merc-execute-asm
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function generic-merc-add-to-cue
;; INFO: Return type mismatch merc-globals vs none.
(defun generic-merc-add-to-cue ((arg0 basic))
  (set! (-> *merc-globals* sink) arg0)
  (+! (-> *merc-global-array* count) 1)
  (set! *merc-globals* (-> *merc-global-array* globals (-> *merc-global-array* count)))
  (none)
  )

;; definition for function generic-merc-execute-all
;; ERROR: function was not converted to expressions. Cannot decompile.




