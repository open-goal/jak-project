;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *eye-work*, type eye-work
(define
  *eye-work*
  (new 'static 'eye-work
   :sprite-tmpl
   (new 'static 'dma-gif-packet
    :dma-vif
    (new 'static 'dma-packet
     :dma
     (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
     :vif1
     (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
     )
    :gif
    (new 'static 'array uint64 2 #x508b400000008001 #x53531)
    )
   :sprite-tmpl2
   (new 'static 'dma-gif-packet
    :dma-vif
    (new 'static 'dma-packet
     :dma
     (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
     :vif1
     (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
     )
    :gif
    (new 'static 'array uint64 2 #x50ab400000008001 #x53531)
    )
   :adgif-tmpl
   (new 'static 'dma-gif-packet
    :dma-vif
    (new 'static 'dma-packet
     :dma
     (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
     :vif1
     (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
     )
    :gif
    (new 'static 'array uint64 2 #x1000000000008005 #xe)
    )
   :blink-table
   (new 'static 'array float 10 0.0 0.667 0.9 1.0 1.0 1.0 1.0 0.333 0.1 0.0)
   )
  )

;; definition for function render-eyes
;; WARN: Stack slot offset 16 signed mismatch
;; WARN: Stack slot offset 16 signed mismatch
;; WARN: Stack slot offset 16 signed mismatch
;; WARN: Stack slot offset 16 signed mismatch
;; Used lq/sq
(defun render-eyes ((arg0 dma-buffer) (arg1 eye-control) (arg2 int))
  (local-vars (sv-16 float))
  (let ((s4-0 32)
        (s3-0 (+ (* arg2 32) 32))
        (s2-0 (* arg2 32))
        )
   (let ((f28-0 (* 16.0 (+ (the float (+ s4-0 16)) (* 32.0 (-> arg1 left x)))))
         (f26-0 (* 16.0 (+ (the float (+ s3-0 16)) (* 32.0 (-> arg1 left y)))))
         (f30-0 (* 16.0 (+ (the float (+ s4-0 48)) (* 32.0 (-> arg1 right x)))))
         )
    (set! sv-16 (* 16.0 (+ (the float (+ s3-0 16)) (* 32.0 (-> arg1 right y)))))
    (let ((s1-0 (-> arg1 shaders 0)))
     (let ((v1-6 (the-as object (-> arg0 base))))
      (set!
       (-> (the-as dma-gif-packet v1-6) dma-vif quad)
       (-> *eye-work* adgif-tmpl dma-vif quad)
       )
      (set!
       (-> (the-as dma-gif-packet v1-6) quad 1)
       (-> *eye-work* adgif-tmpl quad 1)
       )
      (let ((s0-0 (&+ (the-as pointer v1-6) 32)))
       (quad-copy! s0-0 (the-as pointer s1-0) 5)
       (let ((v1-7 (the-as uint #x7c0007c005)))
        (s.d! (+ s0-0 48) v1-7)
        )
       (let ((v1-8 68))
        (s.d! (+ s0-0 64) v1-8)
        )
       (let ((v1-9 66))
        (s.d! (+ s0-0 72) v1-9)
        )
       )
      )
     (&+! (-> arg0 base) 112)
     (let* ((v1-12 arg0)
            (a0-6 (-> v1-12 base))
            )
      (set! (-> (the-as (pointer int64) a0-6)) #x10000002)
      (s.w! (+ a0-6 8) 0)
      (let ((a1-3 #x50000002))
       (s.w! (+ a0-6 12) a1-3)
       )
      (set! (-> v1-12 base) (&+ a0-6 16))
      )
     (let* ((v1-13 arg0)
            (a0-8 (-> v1-13 base))
            )
      (set!
       (-> (the-as (pointer uint64) a0-8))
       (make-u128 0 (the-as uint #x1000000000008001))
       )
      (let ((a1-6 (the-as uint #xeeeeeeeeeeeeeeee)))
       (s.d! (+ a0-8 8) a1-6)
       )
      (set! (-> v1-13 base) (&+ a0-8 16))
      )
     (let* ((v1-14 arg0)
            (a0-10 (-> v1-14 base))
            )
      (set!
       (-> (the-as (pointer int64) a0-10))
       (logior
        (logior #x3f0000 (shr (shl s2-0 53) 21))
        (shr (shl (+ s2-0 31) 53) 5)
        )
       )
      (let ((a1-10 64))
       (s.d! (+ a0-10 8) a1-10)
       )
      (set! (-> v1-14 base) (&+ a0-10 16))
      )
     (let ((v1-15 (-> arg0 base)))
      (set!
       (-> (the-as (pointer uint128) v1-15))
       (-> *eye-work* sprite-tmpl dma-vif quad)
       )
      (let ((a0-15 (-> *eye-work* sprite-tmpl quad 1)))
       (s.q! (+ v1-15 16) a0-15)
       )
      (let ((a0-16 (&+ v1-15 32)))
       (set! (-> (the-as (pointer int32) a0-16)) 128)
       (let ((a1-12 128))
        (s.w! (+ a0-16 4) a1-12)
        )
       (let ((a1-13 128))
        (s.w! (+ a0-16 8) a1-13)
        )
       (let ((a1-14 128))
        (s.w! (+ a0-16 12) a1-14)
        )
       )
      (let ((a0-17 (&+ v1-15 48)))
       (set! (-> (the-as (pointer int32) a0-17)) 0)
       (s.w! (+ a0-17 4) 0)
       (s.w! (+ a0-17 8) 0)
       (s.w! (+ a0-17 12) 0)
       )
      (let ((a0-18 (&+ v1-15 64)))
       (set! (-> (the-as (pointer int32) a0-18)) (* s4-0 16))
       (let ((a1-16 (* s3-0 16)))
        (s.w! (+ a0-18 4) a1-16)
        )
       (let ((a1-17 #xffffff))
        (s.w! (+ a0-18 8) a1-17)
        )
       (s.w! (+ a0-18 12) 0)
       )
      (let ((a0-19 (&+ v1-15 80)))
       (set! (-> (the-as (pointer int32) a0-19)) 0)
       (s.w! (+ a0-19 4) 0)
       (s.w! (+ a0-19 8) 0)
       (s.w! (+ a0-19 12) 0)
       )
      (let ((v1-16 (&+ v1-15 96)))
       (set! (-> (the-as (pointer int32) v1-16)) (* (+ s4-0 64) 16))
       (let ((a0-23 (* (+ s3-0 32) 16)))
        (s.w! (+ v1-16 4) a0-23)
        )
       (let ((a0-24 #xffffff))
        (s.w! (+ v1-16 8) a0-24)
        )
       (s.w! (+ v1-16 12) 0)
       )
      )
     (&+! (-> arg0 base) 112)
     (let ((v1-20 (ash 16 (-> s1-0 tex0 tw)))
           (a0-30 (ash 16 (-> s1-0 tex0 th)))
           )
      (let* ((a1-22 arg0)
             (a2-7 (-> a1-22 base))
             )
       (set! (-> (the-as (pointer int64) a2-7)) #x10000002)
       (s.w! (+ a2-7 8) 0)
       (let ((a3-1 #x50000002))
        (s.w! (+ a2-7 12) a3-1)
        )
       (set! (-> a1-22 base) (&+ a2-7 16))
       )
      (let* ((a1-23 arg0)
             (a2-9 (-> a1-23 base))
             )
       (set!
        (-> (the-as (pointer uint64) a2-9))
        (make-u128 0 (the-as uint #x1000000000008001))
        )
       (let ((a3-4 (the-as uint #xeeeeeeeeeeeeeeee)))
        (s.d! (+ a2-9 8) a3-4)
        )
       (set! (-> a1-23 base) (&+ a2-9 16))
       )
      (let* ((a1-24 arg0)
             (a2-11 (-> a1-24 base))
             )
       (set!
        (-> (the-as (pointer int64) a2-11))
        (logior
         (logior #x1f0000 (shr (shl s2-0 53) 21))
         (shr (shl (+ s2-0 31) 53) 5)
         )
        )
       (let ((a3-8 64))
        (s.d! (+ a2-11 8) a3-8)
        )
       (set! (-> a1-24 base) (&+ a2-11 16))
       )
      (let* ((f0-6 (* 256.0 (-> arg1 left iris-scale)))
             (a1-25 (-> arg0 base))
             (a2-13 (the int (- f28-0 f0-6)))
             (t0-5 (the int (- f26-0 f0-6)))
             (a3-9 (the int (+ f28-0 f0-6)))
             (t1-0 (the int (+ f26-0 f0-6)))
             )
       (set!
        (-> (the-as (pointer uint128) a1-25))
        (-> *eye-work* sprite-tmpl dma-vif quad)
        )
       (let ((t2-3 (-> *eye-work* sprite-tmpl quad 1)))
        (s.q! (+ a1-25 16) t2-3)
        )
       (let ((t2-4 (&+ a1-25 32)))
        (set! (-> (the-as (pointer int32) t2-4)) 128)
        (let ((t3-1 128))
         (s.w! (+ t2-4 4) t3-1)
         )
        (let ((t3-2 128))
         (s.w! (+ t2-4 8) t3-2)
         )
        (let ((t3-3 128))
         (s.w! (+ t2-4 12) t3-3)
         )
        )
       (let ((t2-5 (&+ a1-25 48)))
        (set! (-> (the-as (pointer int32) t2-5)) 0)
        (s.w! (+ t2-5 4) 0)
        (s.w! (+ t2-5 8) 0)
        (s.w! (+ t2-5 12) 0)
        )
       (let ((t2-6 (&+ a1-25 64)))
        (set! (-> (the-as (pointer int32) t2-6)) a2-13)
        (s.w! (+ t2-6 4) t0-5)
        (let ((a2-14 #xffffff))
         (s.w! (+ t2-6 8) a2-14)
         )
        (s.w! (+ t2-6 12) 0)
        )
       (let ((a2-15 (&+ a1-25 80)))
        (set! (-> (the-as (pointer int32) a2-15)) v1-20)
        (s.w! (+ a2-15 4) a0-30)
        (s.w! (+ a2-15 8) 0)
        (s.w! (+ a2-15 12) 0)
        )
       (let ((a1-26 (&+ a1-25 96)))
        (set! (-> (the-as (pointer int32) a1-26)) a3-9)
        (s.w! (+ a1-26 4) t1-0)
        (let ((a2-16 #xffffff))
         (s.w! (+ a1-26 8) a2-16)
         )
        (s.w! (+ a1-26 12) 0)
        )
       )
      (&+! (-> arg0 base) 112)
      (let* ((a1-29 arg0)
             (a2-17 (-> a1-29 base))
             )
       (set! (-> (the-as (pointer int64) a2-17)) #x10000002)
       (s.w! (+ a2-17 8) 0)
       (let ((a3-11 #x50000002))
        (s.w! (+ a2-17 12) a3-11)
        )
       (set! (-> a1-29 base) (&+ a2-17 16))
       )
      (let* ((a1-30 arg0)
             (a2-19 (-> a1-30 base))
             )
       (set!
        (-> (the-as (pointer uint64) a2-19))
        (make-u128 0 (the-as uint #x1000000000008001))
        )
       (let ((a3-14 (the-as uint #xeeeeeeeeeeeeeeee)))
        (s.d! (+ a2-19 8) a3-14)
        )
       (set! (-> a1-30 base) (&+ a2-19 16))
       )
      (let* ((a1-31 arg0)
             (a2-21 (-> a1-31 base))
             )
       (set!
        (-> (the-as (pointer int64) a2-21))
        (logior
         (logior #x3f0020 (shr (shl s2-0 53) 21))
         (shr (shl (+ s2-0 31) 53) 5)
         )
        )
       (let ((a3-18 64))
        (s.d! (+ a2-21 8) a3-18)
        )
       (set! (-> a1-31 base) (&+ a2-21 16))
       )
      (let* ((f0-10 (* 256.0 (-> arg1 right iris-scale)))
             (a1-32 (-> arg0 base))
             (a2-23 (the int (- f30-0 f0-10)))
             (t0-11 (the int (- sv-16 f0-10)))
             (a3-20 (the int (+ f30-0 f0-10)))
             (t1-2 (the int (+ sv-16 f0-10)))
             )
       (set!
        (-> (the-as (pointer uint128) a1-32))
        (-> *eye-work* sprite-tmpl dma-vif quad)
        )
       (let ((t2-10 (-> *eye-work* sprite-tmpl quad 1)))
        (s.q! (+ a1-32 16) t2-10)
        )
       (let ((t2-11 (&+ a1-32 32)))
        (set! (-> (the-as (pointer int32) t2-11)) 128)
        (let ((t3-5 128))
         (s.w! (+ t2-11 4) t3-5)
         )
        (let ((t3-6 128))
         (s.w! (+ t2-11 8) t3-6)
         )
        (let ((t3-7 128))
         (s.w! (+ t2-11 12) t3-7)
         )
        )
       (let ((t2-12 (&+ a1-32 48)))
        (set! (-> (the-as (pointer int32) t2-12)) 0)
        (s.w! (+ t2-12 4) 0)
        (s.w! (+ t2-12 8) 0)
        (s.w! (+ t2-12 12) 0)
        )
       (let ((t2-13 (&+ a1-32 64)))
        (set! (-> (the-as (pointer int32) t2-13)) a2-23)
        (s.w! (+ t2-13 4) t0-11)
        (let ((a2-24 #xffffff))
         (s.w! (+ t2-13 8) a2-24)
         )
        (s.w! (+ t2-13 12) 0)
        )
       (let ((a2-25 (&+ a1-32 80)))
        (set! (-> (the-as (pointer int32) a2-25)) v1-20)
        (s.w! (+ a2-25 4) a0-30)
        (s.w! (+ a2-25 8) 0)
        (s.w! (+ a2-25 12) 0)
        )
       (let ((v1-21 (&+ a1-32 96)))
        (set! (-> (the-as (pointer int32) v1-21)) a3-20)
        (s.w! (+ v1-21 4) t1-2)
        (let ((a0-31 #xffffff))
         (s.w! (+ v1-21 8) a0-31)
         )
        (s.w! (+ v1-21 12) 0)
        )
       )
      )
     )
    (&+! (-> arg0 base) 112)
    (let* ((v1-24 arg0)
           (a0-32 (-> v1-24 base))
           )
     (set! (-> (the-as (pointer int64) a0-32)) #x10000002)
     (s.w! (+ a0-32 8) 0)
     (let ((a1-34 #x50000002))
      (s.w! (+ a0-32 12) a1-34)
      )
     (set! (-> v1-24 base) (&+ a0-32 16))
     )
    (let* ((v1-25 arg0)
           (a0-34 (-> v1-25 base))
           )
     (set!
      (-> (the-as (pointer uint64) a0-34))
      (make-u128 0 (the-as uint #x1000000000008001))
      )
     (let ((a1-37 (the-as uint #xeeeeeeeeeeeeeeee)))
      (s.d! (+ a0-34 8) a1-37)
      )
     (set! (-> v1-25 base) (&+ a0-34 16))
     )
    (let* ((v1-26 arg0)
           (a0-36 (-> v1-26 base))
           )
     (set! (-> (the-as (pointer int64) a0-36)) #x33001)
     (let ((a1-39 71))
      (s.d! (+ a0-36 8) a1-39)
      )
     (set! (-> v1-26 base) (&+ a0-36 16))
     )
    (let ((s1-1 (-> arg1 shaders 1)))
     (let ((v1-28 (-> arg0 base)))
      (set!
       (-> (the-as (pointer uint128) v1-28))
       (-> *eye-work* adgif-tmpl dma-vif quad)
       )
      (let ((a0-41 (-> *eye-work* adgif-tmpl quad 1)))
       (s.q! (+ v1-28 16) a0-41)
       )
      (let ((s0-1 (&+ v1-28 32)))
       (quad-copy! s0-1 (the-as pointer s1-1) 5)
       (let ((v1-29 (the-as uint #x7c0007c005)))
        (s.d! (+ s0-1 48) v1-29)
        )
       (let ((v1-30 68))
        (s.d! (+ s0-1 64) v1-30)
        )
       (let ((v1-31 66))
        (s.d! (+ s0-1 72) v1-31)
        )
       )
      )
     (&+! (-> arg0 base) 112)
     (let ((v1-35 (ash 16 (-> s1-1 tex0 tw)))
           (a0-48 (ash 16 (-> s1-1 tex0 th)))
           )
      (let* ((a1-45 arg0)
             (a2-27 (-> a1-45 base))
             )
       (set! (-> (the-as (pointer int64) a2-27)) #x10000002)
       (s.w! (+ a2-27 8) 0)
       (let ((a3-22 #x50000002))
        (s.w! (+ a2-27 12) a3-22)
        )
       (set! (-> a1-45 base) (&+ a2-27 16))
       )
      (let* ((a1-46 arg0)
             (a2-29 (-> a1-46 base))
             )
       (set!
        (-> (the-as (pointer uint64) a2-29))
        (make-u128 0 (the-as uint #x1000000000008001))
        )
       (let ((a3-25 (the-as uint #xeeeeeeeeeeeeeeee)))
        (s.d! (+ a2-29 8) a3-25)
        )
       (set! (-> a1-46 base) (&+ a2-29 16))
       )
      (let* ((a1-47 arg0)
             (a2-31 (-> a1-47 base))
             )
       (set!
        (-> (the-as (pointer int64) a2-31))
        (logior
         (logior #x1f0000 (shr (shl s2-0 53) 21))
         (shr (shl (+ s2-0 31) 53) 5)
         )
        )
       (let ((a3-29 64))
        (s.d! (+ a2-31 8) a3-29)
        )
       (set! (-> a1-47 base) (&+ a2-31 16))
       )
      (let* ((f0-14 (* 256.0 (-> arg1 left pupil-scale)))
             (a1-48 (-> arg0 base))
             (a2-33 (the int (- f28-0 f0-14)))
             (t0-17 (the int (- f26-0 f0-14)))
             (a3-30 (the int (+ f28-0 f0-14)))
             (t1-3 (the int (+ f26-0 f0-14)))
             )
       (set!
        (-> (the-as (pointer uint128) a1-48))
        (-> *eye-work* sprite-tmpl2 dma-vif quad)
        )
       (let ((t2-17 (-> *eye-work* sprite-tmpl2 quad 1)))
        (s.q! (+ a1-48 16) t2-17)
        )
       (let ((t2-18 (&+ a1-48 32)))
        (set! (-> (the-as (pointer int32) t2-18)) 128)
        (let ((t3-9 128))
         (s.w! (+ t2-18 4) t3-9)
         )
        (let ((t3-10 128))
         (s.w! (+ t2-18 8) t3-10)
         )
        (let ((t3-11 128))
         (s.w! (+ t2-18 12) t3-11)
         )
        )
       (let ((t2-19 (&+ a1-48 48)))
        (set! (-> (the-as (pointer int32) t2-19)) 0)
        (s.w! (+ t2-19 4) 0)
        (s.w! (+ t2-19 8) 0)
        (s.w! (+ t2-19 12) 0)
        )
       (let ((t2-20 (&+ a1-48 64)))
        (set! (-> (the-as (pointer int32) t2-20)) a2-33)
        (s.w! (+ t2-20 4) t0-17)
        (let ((a2-34 #xffffff))
         (s.w! (+ t2-20 8) a2-34)
         )
        (s.w! (+ t2-20 12) 0)
        )
       (let ((a2-35 (&+ a1-48 80)))
        (set! (-> (the-as (pointer int32) a2-35)) v1-35)
        (s.w! (+ a2-35 4) a0-48)
        (s.w! (+ a2-35 8) 0)
        (s.w! (+ a2-35 12) 0)
        )
       (let ((a1-49 (&+ a1-48 96)))
        (set! (-> (the-as (pointer int32) a1-49)) a3-30)
        (s.w! (+ a1-49 4) t1-3)
        (let ((a2-36 #xffffff))
         (s.w! (+ a1-49 8) a2-36)
         )
        (s.w! (+ a1-49 12) 0)
        )
       )
      (&+! (-> arg0 base) 112)
      (let* ((a1-52 arg0)
             (a2-37 (-> a1-52 base))
             )
       (set! (-> (the-as (pointer int64) a2-37)) #x10000002)
       (s.w! (+ a2-37 8) 0)
       (let ((a3-32 #x50000002))
        (s.w! (+ a2-37 12) a3-32)
        )
       (set! (-> a1-52 base) (&+ a2-37 16))
       )
      (let* ((a1-53 arg0)
             (a2-39 (-> a1-53 base))
             )
       (set!
        (-> (the-as (pointer uint64) a2-39))
        (make-u128 0 (the-as uint #x1000000000008001))
        )
       (let ((a3-35 (the-as uint #xeeeeeeeeeeeeeeee)))
        (s.d! (+ a2-39 8) a3-35)
        )
       (set! (-> a1-53 base) (&+ a2-39 16))
       )
      (let* ((a1-54 arg0)
             (a2-41 (-> a1-54 base))
             )
       (set!
        (-> (the-as (pointer int64) a2-41))
        (logior
         (logior #x3f0020 (shr (shl s2-0 53) 21))
         (shr (shl (+ s2-0 31) 53) 5)
         )
        )
       (let ((a3-39 64))
        (s.d! (+ a2-41 8) a3-39)
        )
       (set! (-> a1-54 base) (&+ a2-41 16))
       )
      (let* ((f0-18 (* 256.0 (-> arg1 right pupil-scale)))
             (a1-55 (-> arg0 base))
             (a2-43 (the int (- f30-0 f0-18)))
             (t0-23 (the int (- sv-16 f0-18)))
             (a3-41 (the int (+ f30-0 f0-18)))
             (t1-5 (the int (+ sv-16 f0-18)))
             )
       (set!
        (-> (the-as (pointer uint128) a1-55))
        (-> *eye-work* sprite-tmpl2 dma-vif quad)
        )
       (let ((t2-24 (-> *eye-work* sprite-tmpl2 quad 1)))
        (s.q! (+ a1-55 16) t2-24)
        )
       (let ((t2-25 (&+ a1-55 32)))
        (set! (-> (the-as (pointer int32) t2-25)) 128)
        (let ((t3-13 128))
         (s.w! (+ t2-25 4) t3-13)
         )
        (let ((t3-14 128))
         (s.w! (+ t2-25 8) t3-14)
         )
        (let ((t3-15 128))
         (s.w! (+ t2-25 12) t3-15)
         )
        )
       (let ((t2-26 (&+ a1-55 48)))
        (set! (-> (the-as (pointer int32) t2-26)) 0)
        (s.w! (+ t2-26 4) 0)
        (s.w! (+ t2-26 8) 0)
        (s.w! (+ t2-26 12) 0)
        )
       (let ((t2-27 (&+ a1-55 64)))
        (set! (-> (the-as (pointer int32) t2-27)) a2-43)
        (s.w! (+ t2-27 4) t0-23)
        (let ((a2-44 #xffffff))
         (s.w! (+ t2-27 8) a2-44)
         )
        (s.w! (+ t2-27 12) 0)
        )
       (let ((a2-45 (&+ a1-55 80)))
        (set! (-> (the-as (pointer int32) a2-45)) v1-35)
        (s.w! (+ a2-45 4) a0-48)
        (s.w! (+ a2-45 8) 0)
        (s.w! (+ a2-45 12) 0)
        )
       (let ((v1-36 (&+ a1-55 96)))
        (set! (-> (the-as (pointer int32) v1-36)) a3-41)
        (s.w! (+ v1-36 4) t1-5)
        (let ((a0-49 #xffffff))
         (s.w! (+ v1-36 8) a0-49)
         )
        (s.w! (+ v1-36 12) 0)
        )
       )
      )
     )
    )
   (&+! (-> arg0 base) 112)
   (let* ((v1-39 arg0)
          (a0-50 (-> v1-39 base))
          )
    (set! (-> (the-as (pointer int64) a0-50)) #x10000002)
    (s.w! (+ a0-50 8) 0)
    (let ((a1-57 #x50000002))
     (s.w! (+ a0-50 12) a1-57)
     )
    (set! (-> v1-39 base) (&+ a0-50 16))
    )
   (let* ((v1-40 arg0)
          (a0-52 (-> v1-40 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-52))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-60 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-52 8) a1-60)
     )
    (set! (-> v1-40 base) (&+ a0-52 16))
    )
   (let* ((v1-41 arg0)
          (a0-54 (-> v1-41 base))
          )
    (set! (-> (the-as (pointer int64) a0-54)) #x30003)
    (let ((a1-62 71))
     (s.d! (+ a0-54 8) a1-62)
     )
    (set! (-> v1-41 base) (&+ a0-54 16))
    )
   (let ((s1-2 (-> arg1 shaders 2)))
    (let ((v1-43 (-> arg0 base)))
     (set!
      (-> (the-as (pointer uint128) v1-43))
      (-> *eye-work* adgif-tmpl dma-vif quad)
      )
     (let ((a0-59 (-> *eye-work* adgif-tmpl quad 1)))
      (s.q! (+ v1-43 16) a0-59)
      )
     (let ((s0-2 (&+ v1-43 32)))
      (quad-copy! s0-2 (the-as pointer s1-2) 5)
      (let ((v1-44 (the-as uint #x7c0007c005)))
       (s.d! (+ s0-2 48) v1-44)
       )
      (let ((v1-45 1))
       (s.d! (+ s0-2 64) v1-45)
       )
      (let ((v1-46 66))
       (s.d! (+ s0-2 72) v1-46)
       )
      )
     )
    (&+! (-> arg0 base) 112)
    (let ((v1-50 (ash 16 (-> s1-2 tex0 tw)))
          (a0-66 (ash 16 (-> s1-2 tex0 th)))
          )
     (when (< (-> arg1 left lid) 0.0)
      (let ((f0-23 (+ 1.0 (-> arg1 left lid))))
       (set! (-> arg1 left lid) (+ f0-23 (* (- 1.0 f0-23) (-> arg1 blink))))
       )
      )
     (let* ((a1-70 arg0)
            (a2-47 (-> a1-70 base))
            )
      (set! (-> (the-as (pointer int64) a2-47)) #x10000002)
      (s.w! (+ a2-47 8) 0)
      (let ((a3-43 #x50000002))
       (s.w! (+ a2-47 12) a3-43)
       )
      (set! (-> a1-70 base) (&+ a2-47 16))
      )
     (let* ((a1-71 arg0)
            (a2-49 (-> a1-71 base))
            )
      (set!
       (-> (the-as (pointer uint64) a2-49))
       (make-u128 0 (the-as uint #x1000000000008001))
       )
      (let ((a3-46 (the-as uint #xeeeeeeeeeeeeeeee)))
       (s.d! (+ a2-49 8) a3-46)
       )
      (set! (-> a1-71 base) (&+ a2-49 16))
      )
     (let* ((a1-72 arg0)
            (a2-51 (-> a1-72 base))
            )
      (set!
       (-> (the-as (pointer int64) a2-51))
       (logior
        (logior #x1f0000 (shr (shl s2-0 53) 21))
        (shr (shl (+ s2-0 31) 53) 5)
        )
       )
      (let ((a3-50 64))
       (s.d! (+ a2-51 8) a3-50)
       )
      (set! (-> a1-72 base) (&+ a2-51 16))
      )
     (let* ((f0-27 (+ (the float (+ s3-0 -32)) (* 32.0 (-> arg1 left lid))))
            (a1-74 (-> arg0 base))
            (a2-53 (* s4-0 16))
            (t0-29 (the int (* 16.0 f0-27)))
            (a3-52 (* (+ s4-0 32) 16))
            (t1-6
             (the int (* 16.0 (+ f0-27 (* 32.0 (-> arg1 left lid-scale)))))
             )
            )
      (set!
       (-> (the-as (pointer uint128) a1-74))
       (-> *eye-work* sprite-tmpl2 dma-vif quad)
       )
      (let ((t2-31 (-> *eye-work* sprite-tmpl2 quad 1)))
       (s.q! (+ a1-74 16) t2-31)
       )
      (let ((t2-32 (&+ a1-74 32)))
       (set! (-> (the-as (pointer int32) t2-32)) 128)
       (let ((t3-17 128))
        (s.w! (+ t2-32 4) t3-17)
        )
       (let ((t3-18 128))
        (s.w! (+ t2-32 8) t3-18)
        )
       (s.w! (+ t2-32 12) 0)
       )
      (let ((t2-33 (&+ a1-74 48)))
       (set! (-> (the-as (pointer int32) t2-33)) 0)
       (s.w! (+ t2-33 4) 0)
       (s.w! (+ t2-33 8) 0)
       (s.w! (+ t2-33 12) 0)
       )
      (let ((t2-34 (&+ a1-74 64)))
       (set! (-> (the-as (pointer int32) t2-34)) a2-53)
       (s.w! (+ t2-34 4) t0-29)
       (let ((a2-54 #xffffff))
        (s.w! (+ t2-34 8) a2-54)
        )
       (s.w! (+ t2-34 12) 0)
       )
      (let ((a2-55 (&+ a1-74 80)))
       (set! (-> (the-as (pointer int32) a2-55)) v1-50)
       (s.w! (+ a2-55 4) a0-66)
       (s.w! (+ a2-55 8) 0)
       (s.w! (+ a2-55 12) 0)
       )
      (let ((a1-75 (&+ a1-74 96)))
       (set! (-> (the-as (pointer int32) a1-75)) a3-52)
       (s.w! (+ a1-75 4) t1-6)
       (let ((a2-56 #xffffff))
        (s.w! (+ a1-75 8) a2-56)
        )
       (s.w! (+ a1-75 12) 0)
       )
      )
     (&+! (-> arg0 base) 112)
     (when (< (-> arg1 right lid) 0.0)
      (let ((f0-33 (+ 1.0 (-> arg1 right lid))))
       (set! (-> arg1 right lid) (+ f0-33 (* (- 1.0 f0-33) (-> arg1 blink))))
       )
      )
     (let* ((a1-80 arg0)
            (a2-57 (-> a1-80 base))
            )
      (set! (-> (the-as (pointer int64) a2-57)) #x10000002)
      (s.w! (+ a2-57 8) 0)
      (let ((a3-54 #x50000002))
       (s.w! (+ a2-57 12) a3-54)
       )
      (set! (-> a1-80 base) (&+ a2-57 16))
      )
     (let* ((a1-81 arg0)
            (a2-59 (-> a1-81 base))
            )
      (set!
       (-> (the-as (pointer uint64) a2-59))
       (make-u128 0 (the-as uint #x1000000000008001))
       )
      (let ((a3-57 (the-as uint #xeeeeeeeeeeeeeeee)))
       (s.d! (+ a2-59 8) a3-57)
       )
      (set! (-> a1-81 base) (&+ a2-59 16))
      )
     (let* ((a1-82 arg0)
            (a2-61 (-> a1-82 base))
            )
      (set!
       (-> (the-as (pointer int64) a2-61))
       (logior
        (logior #x3f0020 (shr (shl s2-0 53) 21))
        (shr (shl (+ s2-0 31) 53) 5)
        )
       )
      (let ((a3-61 64))
       (s.d! (+ a2-61 8) a3-61)
       )
      (set! (-> a1-82 base) (&+ a2-61 16))
      )
     (let* ((f0-37 (+ (the float (+ s3-0 -32)) (* 32.0 (-> arg1 right lid))))
            (a1-84 (-> arg0 base))
            (a2-64 (* (+ s4-0 64) 16))
            (t0-35 (the int (* 16.0 f0-37)))
            (a3-63 (* (+ s4-0 32) 16))
            (t1-7
             (the int (* 16.0 (+ f0-37 (* 32.0 (-> arg1 left lid-scale)))))
             )
            )
      (set!
       (-> (the-as (pointer uint128) a1-84))
       (-> *eye-work* sprite-tmpl2 dma-vif quad)
       )
      (let ((t2-38 (-> *eye-work* sprite-tmpl2 quad 1)))
       (s.q! (+ a1-84 16) t2-38)
       )
      (let ((t2-39 (&+ a1-84 32)))
       (set! (-> (the-as (pointer int32) t2-39)) 128)
       (let ((t3-20 128))
        (s.w! (+ t2-39 4) t3-20)
        )
       (let ((t3-21 128))
        (s.w! (+ t2-39 8) t3-21)
        )
       (s.w! (+ t2-39 12) 0)
       )
      (let ((t2-40 (&+ a1-84 48)))
       (set! (-> (the-as (pointer int32) t2-40)) 0)
       (s.w! (+ t2-40 4) 0)
       (s.w! (+ t2-40 8) 0)
       (s.w! (+ t2-40 12) 0)
       )
      (let ((t2-41 (&+ a1-84 64)))
       (set! (-> (the-as (pointer int32) t2-41)) a2-64)
       (s.w! (+ t2-41 4) t0-35)
       (let ((a2-65 #xffffff))
        (s.w! (+ t2-41 8) a2-65)
        )
       (s.w! (+ t2-41 12) 0)
       )
      (let ((a2-66 (&+ a1-84 80)))
       (set! (-> (the-as (pointer int32) a2-66)) v1-50)
       (s.w! (+ a2-66 4) a0-66)
       (s.w! (+ a2-66 8) 0)
       (s.w! (+ a2-66 12) 0)
       )
      (let ((v1-51 (&+ a1-84 96)))
       (set! (-> (the-as (pointer int32) v1-51)) a3-63)
       (s.w! (+ v1-51 4) t1-7)
       (let ((a0-67 #xffffff))
        (s.w! (+ v1-51 8) a0-67)
        )
       (s.w! (+ v1-51 12) 0)
       )
      )
     )
    )
   )
  (let ((v0-3 (&+ (-> arg0 base) 112)))
   (set! (-> arg0 base) v0-3)
   v0-3
   )
  )

;; definition for function update-eyes
;; INFO: Return type mismatch int vs none.
(defun update-eyes ()
  (let* ((s5-0 (-> *display* frames (-> *display* on-screen) frame global-buf))
         (gp-0 (-> s5-0 base))
         )
   (set-display-gs-state-offset s5-0 *eyes-base-page* 64 352 0 0 32 32)
   (let* ((v1-3 s5-0)
          (a0-4 (-> v1-3 base))
          )
    (set! (-> (the-as (pointer int64) a0-4)) #x10000002)
    (s.w! (+ a0-4 8) 0)
    (let ((a1-2 #x50000002))
     (s.w! (+ a0-4 12) a1-2)
     )
    (set! (-> v1-3 base) (&+ a0-4 16))
    )
   (let* ((v1-4 s5-0)
          (a0-6 (-> v1-4 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-6))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-5 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-6 8) a1-5)
     )
    (set! (-> v1-4 base) (&+ a0-6 16))
    )
   (let* ((v1-5 s5-0)
          (a0-8 (-> v1-5 base))
          )
    (set! (-> (the-as (pointer int64) a0-8)) #x30003)
    (let ((a1-7 71))
     (s.d! (+ a0-8 8) a1-7)
     )
    (set! (-> v1-5 base) (&+ a0-8 16))
    )
   (let ((a3-1 (-> s5-0 base)))
    (let ((v1-6 (-> s5-0 base)))
     (set! (-> (the-as (pointer int64) v1-6)) #x20000000)
     (s.w! (+ v1-6 8) 0)
     (s.w! (+ v1-6 12) 0)
     (set! (-> s5-0 base) (&+ v1-6 16))
     )
    (dma-bucket-insert-tag
     (-> *display* frames (-> *display* on-screen) frame bucket-group)
     (bucket-id pris-tex0)
     gp-0
     (the-as (pointer dma-tag) a3-1)
     )
    )
   )
  (let* ((s5-1 (-> *display* frames (-> *display* on-screen) frame global-buf))
         (gp-1 (-> s5-1 base))
         )
   (set-display-gs-state-offset s5-1 *eyes-base-page* 64 352 0 0 32 32)
   (let* ((v1-15 s5-1)
          (a0-19 (-> v1-15 base))
          )
    (set! (-> (the-as (pointer int64) a0-19)) #x10000002)
    (s.w! (+ a0-19 8) 0)
    (let ((a1-11 #x50000002))
     (s.w! (+ a0-19 12) a1-11)
     )
    (set! (-> v1-15 base) (&+ a0-19 16))
    )
   (let* ((v1-16 s5-1)
          (a0-21 (-> v1-16 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-21))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-14 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-21 8) a1-14)
     )
    (set! (-> v1-16 base) (&+ a0-21 16))
    )
   (let* ((v1-17 s5-1)
          (a0-23 (-> v1-17 base))
          )
    (set! (-> (the-as (pointer int64) a0-23)) #x30003)
    (let ((a1-16 71))
     (s.d! (+ a0-23 8) a1-16)
     )
    (set! (-> v1-17 base) (&+ a0-23 16))
    )
   (let ((a3-3 (-> s5-1 base)))
    (let ((v1-18 (-> s5-1 base)))
     (set! (-> (the-as (pointer int64) v1-18)) #x20000000)
     (s.w! (+ v1-18 8) 0)
     (s.w! (+ v1-18 12) 0)
     (set! (-> s5-1 base) (&+ v1-18 16))
     )
    (dma-bucket-insert-tag
     (-> *display* frames (-> *display* on-screen) frame bucket-group)
     (bucket-id pris-tex1)
     gp-1
     (the-as (pointer dma-tag) a3-3)
     )
    )
   )
  (let* ((s5-2 (-> *display* frames (-> *display* on-screen) frame global-buf))
         (gp-2 (-> s5-2 base))
         )
   (set-display-gs-state-offset s5-2 *eyes-base-page* 64 352 0 0 32 32)
   (let* ((v1-27 s5-2)
          (a0-34 (-> v1-27 base))
          )
    (set! (-> (the-as (pointer int64) a0-34)) #x10000002)
    (s.w! (+ a0-34 8) 0)
    (let ((a1-20 #x50000002))
     (s.w! (+ a0-34 12) a1-20)
     )
    (set! (-> v1-27 base) (&+ a0-34 16))
    )
   (let* ((v1-28 s5-2)
          (a0-36 (-> v1-28 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-36))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-23 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-36 8) a1-23)
     )
    (set! (-> v1-28 base) (&+ a0-36 16))
    )
   (let* ((v1-29 s5-2)
          (a0-38 (-> v1-29 base))
          )
    (set! (-> (the-as (pointer int64) a0-38)) #x30003)
    (let ((a1-25 71))
     (s.d! (+ a0-38 8) a1-25)
     )
    (set! (-> v1-29 base) (&+ a0-38 16))
    )
   (let ((a3-5 (-> s5-2 base)))
    (let ((v1-30 (-> s5-2 base)))
     (set! (-> (the-as (pointer int64) v1-30)) #x20000000)
     (s.w! (+ v1-30 8) 0)
     (s.w! (+ v1-30 12) 0)
     (set! (-> s5-2 base) (&+ v1-30 16))
     )
    (dma-bucket-insert-tag
     (-> *display* frames (-> *display* on-screen) frame bucket-group)
     (bucket-id bucket-54)
     gp-2
     (the-as (pointer dma-tag) a3-5)
     )
    )
   )
  (dotimes (gp-3 11)
   (let* ((s5-3 (-> *eye-control-array* data gp-3))
          (v1-40 (handle->process (-> s5-3 process)))
          )
    (when
     (and
      v1-40
      (logtest? (-> (the-as process-drawable v1-40) skel status) 256)
      (logtest? (-> (the-as process-drawable v1-40) draw status) 8)
      )
     (when (-> s5-3 shaders)
      (when (not (paused?))
       (cond
        ((and (>= (-> s5-3 left lid) 0.0) (>= (-> s5-3 right lid) 0.0))
         (set! (-> s5-3 random-time) (the-as uint 60))
         (set! (-> s5-3 blink) 0.0)
         )
        (else
         (+! (-> s5-3 random-time) -1)
         (let ((v1-54 (-> s5-3 random-time)))
          (when (< v1-54 (the-as uint 10))
           (set! (-> s5-3 blink) (-> *eye-work* blink-table v1-54))
           (if (zero? v1-54)
            (set!
             (-> s5-3 random-time)
             (the-as uint (the int (rand-vu-float-range 60.0 240.0)))
             )
            )
           )
          )
         )
        )
       )
      (cond
       ((>= (the-as uint 1) (-> s5-3 level))
        (let*
         ((s3-0 (-> *display* frames (-> *display* on-screen) frame global-buf))
          (s4-0 (-> s3-0 base))
          )
         (render-eyes s3-0 s5-3 gp-3)
         (let ((a3-6 (-> s3-0 base)))
          (let ((v1-59 (-> s3-0 base)))
           (set! (-> (the-as (pointer int64) v1-59)) #x20000000)
           (s.w! (+ v1-59 8) 0)
           (s.w! (+ v1-59 12) 0)
           (set! (-> s3-0 base) (&+ v1-59 16))
           )
          (dma-bucket-insert-tag
           (-> *display* frames (-> *display* on-screen) frame bucket-group)
           (the-as bucket-id (if (zero? (-> s5-3 level))
                              48
                              51
                              )
            )
           s4-0
           (the-as (pointer dma-tag) a3-6)
           )
          )
         )
        )
       (else
        (let*
         ((s3-1 (-> *display* frames (-> *display* on-screen) frame global-buf))
          (s4-1 (-> s3-1 base))
          )
         (render-eyes s3-1 s5-3 gp-3)
         (let ((a3-7 (-> s3-1 base)))
          (let ((v1-69 (-> s3-1 base)))
           (set! (-> (the-as (pointer int64) v1-69)) #x20000000)
           (s.w! (+ v1-69 8) 0)
           (s.w! (+ v1-69 12) 0)
           (set! (-> s3-1 base) (&+ v1-69 16))
           )
          (dma-bucket-insert-tag
           (-> *display* frames (-> *display* on-screen) frame bucket-group)
           (bucket-id bucket-54)
           s4-1
           (the-as (pointer dma-tag) a3-7)
           )
          )
         )
        )
       )
      )
     )
    )
   )
  (let* ((s5-4 (-> *display* frames (-> *display* on-screen) frame global-buf))
         (gp-4 (-> s5-4 base))
         )
   (reset-display-gs-state *display* s5-4 *oddeven*)
   (let* ((v1-80 s5-4)
          (a0-85 (-> v1-80 base))
          )
    (set! (-> (the-as (pointer int64) a0-85)) #x10000002)
    (s.w! (+ a0-85 8) 0)
    (let ((a1-36 #x50000002))
     (s.w! (+ a0-85 12) a1-36)
     )
    (set! (-> v1-80 base) (&+ a0-85 16))
    )
   (let* ((v1-81 s5-4)
          (a0-87 (-> v1-81 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-87))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-39 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-87 8) a1-39)
     )
    (set! (-> v1-81 base) (&+ a0-87 16))
    )
   (let* ((v1-82 s5-4)
          (a0-89 (-> v1-82 base))
          )
    (set! (-> (the-as (pointer int64) a0-89)) 68)
    (let ((a1-41 66))
     (s.d! (+ a0-89 8) a1-41)
     )
    (set! (-> v1-82 base) (&+ a0-89 16))
    )
   (let ((a3-8 (-> s5-4 base)))
    (let ((v1-83 (-> s5-4 base)))
     (set! (-> (the-as (pointer int64) v1-83)) #x20000000)
     (s.w! (+ v1-83 8) 0)
     (s.w! (+ v1-83 12) 0)
     (set! (-> s5-4 base) (&+ v1-83 16))
     )
    (dma-bucket-insert-tag
     (-> *display* frames (-> *display* on-screen) frame bucket-group)
     (bucket-id pris-tex0)
     gp-4
     (the-as (pointer dma-tag) a3-8)
     )
    )
   )
  (let* ((s5-5 (-> *display* frames (-> *display* on-screen) frame global-buf))
         (gp-5 (-> s5-5 base))
         )
   (reset-display-gs-state *display* s5-5 *oddeven*)
   (let* ((v1-92 s5-5)
          (a0-100 (-> v1-92 base))
          )
    (set! (-> (the-as (pointer int64) a0-100)) #x10000002)
    (s.w! (+ a0-100 8) 0)
    (let ((a1-45 #x50000002))
     (s.w! (+ a0-100 12) a1-45)
     )
    (set! (-> v1-92 base) (&+ a0-100 16))
    )
   (let* ((v1-93 s5-5)
          (a0-102 (-> v1-93 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-102))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-48 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-102 8) a1-48)
     )
    (set! (-> v1-93 base) (&+ a0-102 16))
    )
   (let* ((v1-94 s5-5)
          (a0-104 (-> v1-94 base))
          )
    (set! (-> (the-as (pointer int64) a0-104)) 68)
    (let ((a1-50 66))
     (s.d! (+ a0-104 8) a1-50)
     )
    (set! (-> v1-94 base) (&+ a0-104 16))
    )
   (let ((a3-9 (-> s5-5 base)))
    (let ((v1-95 (-> s5-5 base)))
     (set! (-> (the-as (pointer int64) v1-95)) #x20000000)
     (s.w! (+ v1-95 8) 0)
     (s.w! (+ v1-95 12) 0)
     (set! (-> s5-5 base) (&+ v1-95 16))
     )
    (dma-bucket-insert-tag
     (-> *display* frames (-> *display* on-screen) frame bucket-group)
     (bucket-id pris-tex1)
     gp-5
     (the-as (pointer dma-tag) a3-9)
     )
    )
   )
  (let* ((s5-6 (-> *display* frames (-> *display* on-screen) frame global-buf))
         (gp-6 (-> s5-6 base))
         )
   (reset-display-gs-state *display* s5-6 *oddeven*)
   (let* ((v1-104 s5-6)
          (a0-115 (-> v1-104 base))
          )
    (set! (-> (the-as (pointer int64) a0-115)) #x10000002)
    (s.w! (+ a0-115 8) 0)
    (let ((a1-54 #x50000002))
     (s.w! (+ a0-115 12) a1-54)
     )
    (set! (-> v1-104 base) (&+ a0-115 16))
    )
   (let* ((v1-105 s5-6)
          (a0-117 (-> v1-105 base))
          )
    (set!
     (-> (the-as (pointer uint64) a0-117))
     (make-u128 0 (the-as uint #x1000000000008001))
     )
    (let ((a1-57 (the-as uint #xeeeeeeeeeeeeeeee)))
     (s.d! (+ a0-117 8) a1-57)
     )
    (set! (-> v1-105 base) (&+ a0-117 16))
    )
   (let* ((v1-106 s5-6)
          (a0-119 (-> v1-106 base))
          )
    (set! (-> (the-as (pointer int64) a0-119)) 68)
    (let ((a1-59 66))
     (s.d! (+ a0-119 8) a1-59)
     )
    (set! (-> v1-106 base) (&+ a0-119 16))
    )
   (let ((a3-10 (-> s5-6 base)))
    (let ((v1-107 (-> s5-6 base)))
     (set! (-> (the-as (pointer int64) v1-107)) #x20000000)
     (s.w! (+ v1-107 8) 0)
     (s.w! (+ v1-107 12) 0)
     (set! (-> s5-6 base) (&+ v1-107 16))
     )
    (dma-bucket-insert-tag
     (-> *display* frames (-> *display* on-screen) frame bucket-group)
     (bucket-id bucket-54)
     gp-6
     (the-as (pointer dma-tag) a3-10)
     )
    )
   )
  0
  (none)
  )

;; definition for function get-eye-block
(defun get-eye-block ((arg0 int) (arg1 int))
  (let ((v1-0 arg0)
        (a0-4 (-> ct32-24-block-table (* arg1 4)))
        )
   (+ *eyes-base-block* (* v1-0 32) a0-4)
   )
  )

;; definition for function convert-eye-data
;; INFO: Return type mismatch float vs none.
(defun convert-eye-data ((arg0 vector) (arg1 uint))
  (local-vars
   (r0-0 uint128)
   (v0-0 float)
   (v1-0 uint128)
   (v1-1 uint128)
   (v1-2 uint128)
   (v1-3 uint128)
   (v1-4 uint128)
   (v1-5 uint128)
   )
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         )
   (.pextlb v1-0 arg1 r0-0)
   (.pextlh v1-1 v1-0 r0-0)
   (.pw.sra v1-2 v1-1 16)
   (.mov vf1 v1-2)
   (.pextlb v1-3 r0-0 arg1)
   (.pextuh v1-4 r0-0 v1-3)
   (.pw.sll v1-5 v1-4 6)
   (.mov vf2 v1-5)
   (vitof15.xyzw vf1 vf1)
   (vitof12.xyzw vf2 vf2)
   (.svf (&-> arg0 quad) vf1)
   (s.vf! (+ arg0 16) vf2)
   (.mov v0-0 vf2)
   (none)
   )
  )

;; definition for function merc-eye-anim
;; INFO: Return type mismatch int vs none.
(defun merc-eye-anim ((arg0 manipy))
  (let* ((s5-0 (-> arg0 draw mgeo header eye-ctrl))
         (a0-1 (-> arg0 skel root-channel 0))
         (s4-0 (-> a0-1 frame-group))
         )
   (when
    (and
     (logtest? (-> arg0 skel status) 256)
     (nonzero? s5-0)
     (> (-> arg0 skel active-channels) 0)
     s4-0
     (nonzero? (-> s4-0 _unknown))
     )
    (let* ((v1-15 (-> *eye-control-array* data (-> s5-0 eye-slot)))
           (s3-1 (min (the int (-> a0-1 frame-num)) (-> s4-0 _unknown 0)))
           (s2-1 (min (+ (the int (-> a0-1 frame-num)) 1) (-> s4-0 _unknown 0)))
           (f0-4 (-> a0-1 frame-num))
           (f30-0 (- f0-4 (* (the float (the int (/ f0-4 1.0))) 1.0)))
           )
     (set! (-> v1-15 process) (process->handle arg0))
     (set!
      (-> v1-15 shaders)
      (the-as (inline-array adgif-shader) (-> s5-0 iris-shader))
      )
     (set! (-> v1-15 level) (the-as uint (-> (if (-> arg0 entity)
                                              (-> arg0 entity extra level)
                                              (-> *level* level-default)
                                              )
                                          index
                                          )
                             )
      )
     (let ((s1-0 (new 'stack-no-clear 'vector))
           (s0-0 (new 'stack-no-clear 'vector))
           )
      (cond
       ((-> s4-0 _unknown)
        (convert-eye-data
         s1-0
         (l.d (&+ (&+ (-> s4-0 _unknown) (* (* s3-1 2) 8)) 8))
         )
        (convert-eye-data
         s0-0
         (l.d (&+ (&+ (-> s4-0 _unknown) (* (* s2-1 2) 8)) 8))
         )
        (vector4-lerp!
         (the-as
          vector
          (+
           (the-as uint (-> *eye-control-array* data 0 left))
           (* 96 (-> s5-0 eye-slot))
           )
          )
         (the-as vector (&-> s1-0 x))
         (the-as vector (&-> s0-0 x))
         f30-0
         )
        (vector4-lerp!
         (the-as
          vector
          (&+
           (&-> *eye-control-array* data 0 left iris-scale)
           (* 96 (-> s5-0 eye-slot))
           )
          )
         (&+ s1-0 16)
         (&+ s0-0 16)
         f30-0
         )
        (convert-eye-data
         s1-0
         (l.d (&+ (&+ (-> s4-0 _unknown) (* (+ (* s3-1 2) 1) 8)) 8))
         )
        (convert-eye-data
         s0-0
         (l.d (&+ (&+ (-> s4-0 _unknown) (* (+ (* s2-1 2) 1) 8)) 8))
         )
        (vector4-lerp!
         (the-as
          vector
          (+
           (the-as uint (-> *eye-control-array* data 0 right))
           (* 96 (-> s5-0 eye-slot))
           )
          )
         (the-as vector (&-> s1-0 x))
         (the-as vector (&-> s0-0 x))
         f30-0
         )
        (vector4-lerp!
         (the-as
          vector
          (&+
           (&-> *eye-control-array* data 0 right iris-scale)
           (* 96 (-> s5-0 eye-slot))
           )
          )
         (&+ s1-0 16)
         (&+ s0-0 16)
         f30-0
         )
        )
       (else
        (let ((v1-37 (-> *eye-control-array* data (-> s5-0 eye-slot))))
         (set! (-> v1-37 left x) 0.0)
         (set! (-> v1-37 left y) 0.0)
         (set! (-> v1-37 left lid) -1.0)
         (set! (-> v1-37 left iris-scale) 1.0)
         (set! (-> v1-37 left pupil-scale) 1.0)
         (set! (-> v1-37 left lid-scale) 1.0)
         (set! (-> v1-37 right x) 0.0)
         (set! (-> v1-37 right y) 0.0)
         (set! (-> v1-37 right lid) -1.0)
         (set! (-> v1-37 right iris-scale) 1.0)
         (set! (-> v1-37 right pupil-scale) 1.0)
         (set! (-> v1-37 right lid-scale) 1.0)
         )
        )
       )
      )
     )
    (logior! (-> arg0 skel status) 128)
    )
   )
  (if (logtest? (-> arg0 skel status) 128)
   (set! (-> arg0 skel status) (logand -129 (-> arg0 skel status)))
   )
  0
  (none)
  )




