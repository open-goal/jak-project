;;-*-Lisp-*-
(in-package goal)

;; definition for method 39 of type collide-shape
(defmethod dummy-39 collide-shape ((obj collide-shape) (arg0 collide-shape) (arg1 collide-overlap-result))
  (let ((v1-0 arg1))
    (set! (-> v1-0 best-dist) 0.0)
    (set! (-> v1-0 best-from-prim) #f)
    (set! (-> v1-0 best-to-prim) #f)
    )
  (set! (-> arg1 best-dist) 122.88)
  (let ((s5-0 (-> obj root-prim))
        (s4-0 (-> arg0 root-prim))
        )
    (when (and
            (logtest? (-> s5-0 collide-with) (-> s4-0 prim-core collide-as))
            (logtest? (-> s5-0 prim-core action) 2)
            (logtest? (-> s4-0 prim-core action) 4)
            )
      (let ((f0-4 (- (- (vector-vector-distance (the-as vector (-> s5-0 prim-core)) (the-as vector (-> s4-0 prim-core)))
                         (-> s5-0 prim-core world-sphere w)
                         )
                     (-> s4-0 prim-core world-sphere w)
                     )
                  )
            )
        (if (< f0-4 122.88)
            (on-platform-test s5-0 s4-0 arg1 f0-4)
            )
        )
      )
    )
  (< (-> arg1 best-dist) 122.88)
  )

;; definition for method 22 of type collide-shape-prim
;; INFO: Return type mismatch object vs pat-surface.
(defmethod on-platform-test collide-shape-prim ((obj collide-shape-prim) (arg0 collide-shape-prim) (arg1 collide-overlap-result) (arg2 float))
  (the-as pat-surface (format 0 "ERROR: collide-shape-prim::on-platform-test was called illegally!~%"))
  )

;; definition for method 22 of type collide-shape-prim-group
;; INFO: Return type mismatch symbol vs pat-surface.
(defmethod on-platform-test collide-shape-prim-group ((obj collide-shape-prim-group) (arg0 collide-shape-prim-group) (arg1 collide-overlap-result) (arg2 float))
  (let ((s3-0 (-> arg0 prim-core collide-as)))
    (dotimes (s2-0 (-> obj num-prims))
      (let ((s1-0 (-> obj prims s2-0)))
        (when (and (logtest? (-> s1-0 collide-with) s3-0) (logtest? (-> s1-0 prim-core action) 2))
          (let ((f0-2 (- (- (vector-vector-distance (the-as vector (-> s1-0 prim-core)) (the-as vector (-> arg0 prim-core)))
                             (-> s1-0 prim-core world-sphere w)
                             )
                         (-> arg0 prim-core world-sphere w)
                         )
                      )
                )
            (if (< f0-2 122.88)
                (on-platform-test s1-0 arg0 arg1 f0-2)
                )
            )
          )
        )
      )
    )
  (the-as pat-surface #f)
  )

;; definition for method 22 of type collide-shape-prim-mesh
;; Used lq/sq
(defmethod on-platform-test collide-shape-prim-mesh ((obj collide-shape-prim-mesh) (arg0 collide-shape-prim-mesh) (arg1 collide-overlap-result) (arg2 float))
  (case (-> arg0 type)
    ((collide-shape-prim-group)
     (let ((s3-0 (-> obj collide-with)))
       (dotimes (s2-0 (the-as int (-> arg0 mesh)))
         (let ((s1-0 (-> (the-as collide-shape-prim-group arg0) prims s2-0)))
           (when (and (logtest? s3-0 (-> s1-0 prim-core collide-as)) (logtest? (-> s1-0 prim-core action) 4))
             (let ((f0-2 (- (- (vector-vector-distance (the-as vector (-> obj prim-core)) (the-as vector (-> s1-0 prim-core)))
                                (-> obj prim-core world-sphere w)
                                )
                            (-> s1-0 prim-core world-sphere w)
                            )
                         )
                   )
               (if (< f0-2 122.88)
                   (on-platform-test obj (the-as collide-shape-prim-mesh s1-0) arg1 f0-2)
                   )
               )
             )
           )
         )
       )
     (the-as pat-surface #f)
     )
    ((collide-shape-prim-sphere)
     (let ((s3-1 (-> obj mesh)))
       (when s3-1
         (let ((s2-1 *collide-mesh-cache*))
           (when (!= (-> obj mesh-cache-id) (-> s2-1 id))
             (let ((v1-17 (dummy-9 s2-1 (the-as collide-mesh-tri (* (the-as uint 96) (-> s3-1 num-tris))))))
               (cond
                 (v1-17
                   (set! (-> obj mesh-cache-tris) v1-17)
                   (set! (-> obj mesh-cache-id) (-> s2-1 id))
                   (let* ((a0-10 s3-1)
                          (t9-3 (method-of-object a0-10 dummy-13))
                          )
                     (-> obj mesh-cache-tris)
                     (-> obj cshape process node-list data (-> obj transform-index) bone transform)
                     (t9-3 a0-10)
                     )
                   )
                 (else
                   (return (the-as pat-surface #f))
                   )
                 )
               )
             )
           )
         (let* ((s2-2 (new 'stack-no-clear 'collide-tri-result))
                (f0-4 (dummy-12
                        s3-1
                        (the-as collide-mesh-cache-tri (-> obj mesh-cache-tris))
                        s2-2
                        (the-as vector (-> arg0 prim-core))
                        (-> arg1 best-dist)
                        )
                      )
                )
           (when (< f0-4 (-> arg1 best-dist))
             (set! (-> arg1 best-dist) f0-4)
             (set! (-> arg1 best-from-prim) obj)
             (set! (-> arg1 best-to-prim) arg0)
             (set! (-> arg1 best-from-tri vertex 0 quad) (-> s2-2 vertex 0 quad))
             (set! (-> arg1 best-from-tri vertex 1 quad) (-> s2-2 vertex 1 quad))
             (set! (-> arg1 best-from-tri vertex 2 quad) (-> s2-2 vertex 2 quad))
             (set! (-> arg1 best-from-tri intersect quad) (-> s2-2 intersect quad))
             (set! (-> arg1 best-from-tri normal quad) (-> s2-2 normal quad))
             (let ((v0-2 (-> s2-2 pat)))
               (set! (-> arg1 best-from-tri pat) v0-2)
               v0-2
               )
             )
           )
         )
       )
     )
    )
  )

;; definition for method 9 of type collide-sticky-rider-group
(defmethod add-rider! collide-sticky-rider-group ((obj collide-sticky-rider-group) (arg0 process-drawable))
  (let ((gp-0 (the-as collide-sticky-rider #f)))
    (cond
      ((< (-> obj num-riders) (-> obj allocated-riders))
       (set! gp-0 (-> obj rider (-> obj num-riders)))
       (+! (-> obj num-riders) 1)
       (let ((v1-6 gp-0))
         (set! (-> v1-6 rider-handle) (the-as handle arg0))
         (set! (-> v1-6 sticky-prim) #f)
         )
       )
      (else
        (format 0 "ERROR: Exeeded max number of riders!~%")
        )
      )
    gp-0
    )
  )

;; definition for method 35 of type collide-shape
;; WARN: Type Propagation failed: Failed type prop at op 63 ((set! a0 (l.b (+ a0 8)))): Could not get type of load: (set! a0 (l.b (+ a0 8))). 
;; WARN: Type Propagation failed: Type analysis failed
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
(defmethod dummy-35 collide-shape ((a0-0 collide-shape))
  (local-vars
    (r0-0 none)
    (v0-0 symbol)
    (v0-1 symbol)
    (v0-2 collide-sticky-rider)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 none)
    (v0-13 none)
    (v0-14 none)
    (v0-15 none)
    (v0-16 none)
    (v0-17 none)
    (v0-18 none)
    (v0-19 none)
    (v0-20 none)
    (v0-21 none)
    (v0-22 none)
    (v0-23 none)
    (v0-24 none)
    (v1-0 collide-mesh-cache)
    (v1-1 collide-sticky-rider-group)
    (v1-2 int)
    (v1-3 collide-shape-prim)
    (v1-4 uint)
    (v1-6 engine)
    (v1-7 connectable)
    (v1-8 collide-shape-prim)
    (v1-9 uint)
    (v1-10 uint)
    (v1-11 symbol)
    (v1-12 process-drawable)
    (v1-14 type)
    (v1-15 symbol)
    (v1-17 type)
    (v1-18 (pointer process))
    (v1-19 int)
    (v1-21 process-drawable)
    (v1-22 cspace-array)
    (v1-23 none)
    (v1-24 none)
    (v1-26 none)
    (v1-27 none)
    (v1-29 none)
    (v1-33 none)
    (v1-34 none)
    (v1-36 none)
    (v1-37 none)
    (v1-38 none)
    (v1-39 none)
    (v1-40 none)
    (v1-41 none)
    (v1-42 none)
    (v1-44 none)
    (v1-45 none)
    (v1-47 none)
    (v1-48 none)
    (v1-49 none)
    (v1-51 none)
    (v1-52 none)
    (v1-53 none)
    (v1-54 none)
    (v1-56 none)
    (v1-57 none)
    (v1-59 none)
    (v1-63 none)
    (v1-65 none)
    (v1-66 none)
    (v1-67 none)
    (v1-68 none)
    (v1-69 none)
    (v1-70 none)
    (v1-71 none)
    (v1-73 none)
    (v1-74 none)
    (v1-76 none)
    (v1-77 none)
    (v1-78 none)
    (v1-80 none)
    (v1-81 none)
    (v1-82 none)
    (v1-83 none)
    (v1-85 none)
    (v1-86 none)
    (v1-88 none)
    (v1-92 none)
    (v1-93 none)
    (v1-94 none)
    (v1-95 none)
    (v1-96 none)
    (v1-97 none)
    (v1-98 none)
    (v1-99 none)
    (v1-101 none)
    (v1-102 none)
    (v1-104 none)
    (v1-105 none)
    (v1-106 none)
    (v1-108 none)
    (v1-109 none)
    (v1-110 none)
    (v1-111 none)
    (v1-113 none)
    (v1-114 none)
    (v1-116 none)
    (a0-1 uint)
    (a0-2 uint)
    (a0-3 engine)
    (a0-4 connectable)
    (a0-5 uint)
    (a0-6 uint)
    (a0-8 process-drawable)
    (a0-9 collide-shape)
    (a0-10 collide-sticky-rider-group)
    (a0-11 collide-shape)
    (a0-12 none)
    (a0-13 none)
    (a0-16 none)
    (a0-17 none)
    (a0-18 none)
    (a0-19 none)
    (a0-20 engine)
    (a0-21 connectable)
    (a0-22 none)
    (a0-23 none)
    (a0-24 none)
    (a0-25 none)
    (a0-27 none)
    (a0-28 none)
    (a0-29 none)
    (a0-30 none)
    (a0-31 none)
    (a0-32 none)
    (a0-35 none)
    (a0-36 none)
    (a0-37 none)
    (a0-38 none)
    (a0-39 none)
    (a0-40 none)
    (a0-41 none)
    (a0-42 none)
    (a0-43 none)
    (a0-44 none)
    (a0-46 none)
    (a0-47 none)
    (a0-48 none)
    (a0-49 none)
    (a0-50 none)
    (a0-51 none)
    (a0-54 none)
    (a0-55 none)
    (a0-56 none)
    (a0-57 none)
    (a0-58 none)
    (a0-59 none)
    (a0-60 none)
    (a0-61 none)
    (a0-62 none)
    (a0-63 none)
    (a0-65 none)
    (a0-66 none)
    (a0-67 none)
    (a0-68 none)
    (a0-69 none)
    (a0-70 none)
    (a0-73 none)
    (a0-74 none)
    (a0-75 none)
    (a0-76 none)
    (a0-77 none)
    (a0-78 none)
    (a1-0 basic)
    (a1-1 process-drawable)
    (a1-2 process)
    (a1-3 int)
    (a1-4 int)
    (a1-5 int)
    (a1-7 none)
    (a1-8 none)
    (a1-10 none)
    (a1-11 none)
    (a1-12 none)
    (a1-13 none)
    (a1-14 none)
    (a1-16 none)
    (a1-17 none)
    (a1-19 none)
    (a1-20 none)
    (a1-21 none)
    (a1-22 none)
    (a1-23 none)
    (a1-25 none)
    (a1-26 none)
    (a1-28 none)
    (a1-29 none)
    (a1-30 none)
    (a1-31 none)
    (a1-32 none)
    (a1-34 none)
    (a1-35 none)
    (a2-0 pull-rider-info)
    (s0-0 none)
    (s0-1 none)
    (s0-2 none)
    (s0-3 none)
    (s1-0 pull-rider-info)
    (s1-1 none)
    (s1-2 none)
    (s1-3 none)
    (s1-4 none)
    (s1-5 none)
    (s1-6 none)
    (s1-7 none)
    (s2-0 basic)
    (s2-1 none)
    (s2-2 none)
    (s2-3 none)
    (s3-0 connectable)
    (s3-1 none)
    (s3-2 none)
    (s3-3 none)
    (s4-0 uint)
    (s4-1 collide-sticky-rider)
    (s4-2 none)
    (s4-3 none)
    (s4-4 none)
    (s5-0 collide-sticky-rider-group)
    (t9-0 (function collide-shape collide-shape collide-overlap-result symbol))
    (t9-1 (function collide-sticky-rider-group process-drawable collide-sticky-rider))
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (t9-12 none)
    (t9-13 none)
    (t9-14 none)
    (t9-15 none)
    (t9-16 none)
    (t9-17 none)
    (t9-18 none)
    (t9-19 none)
    (t9-20 none)
    (t9-21 none)
    (t9-22 none)
    (t9-23 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    )
  (with-pp
    (when (begin (set! s5-0 (-> a0-0 riders)) s5-0)
      (set! v1-0 *collide-mesh-cache*)
      (set! a0-1 (-> v1-0 id))
      (set! (-> v1-0 used-size) (the-as uint 0))
      (set! a0-2 (+ a0-1 1))
      (bl! (zero? a0-2) L18 (no-delay!))
      (set! a0-2 (the-as uint 1))
      (when (begin
              (when (begin
                      (label cfg-3)
                      (set! (-> v1-0 id) a0-2)
                      (set! v1-1 s5-0)
                      (set! (-> v1-1 num-riders) 0)
                      (set! v1-2 0)
                      (set! v1-3 (-> a0-0 root-prim))
                      (set! s4-0 (-> v1-3 collide-with))
                      (set! v1-4 (logand s4-0 16))
                      (nonzero? v1-4)
                      )
                (set! v1-6 *collide-player-list*)
                (set! v1-7 (-> v1-6 alive-list next0))
                (set! a0-3 *collide-player-list*)
                (set! a0-4 v1-7)
                (set! s3-0 (-> a0-4 next0))
                (while (begin (set! a0-20 *collide-player-list*) (set! a0-21 (-> a0-20 alive-list-end)) (!= v1-7 a0-21))
                  (when (begin
                          (set! s2-0 (l.w (+ v1-7 20)))
                          (set! v1-8 (l.wu (+ s2-0 156)))
                          (set! a0-5 (-> v1-8 prim-core collide-as))
                          (set! a0-6 (logand s4-0 a0-5))
                          (nonzero? a0-6)
                          )
                    (when (begin
                            (and
                              (begin (set! v1-9 (-> v1-8 prim-core action)) (set! v1-10 (logand v1-9 4)) (nonzero? v1-10))
                              (begin (set! v1-12 (-> a0-0 process)) (set! a0-8 (l.wu (+ s2-0 136))) (set! v1-11 (!= v1-12 a0-8)))
                              )
                            v1-11
                            )
                      (when (begin
                              (set! s1-0 (new 'stack-no-clear 'pull-rider-info))
                              (set! a0-9 a0-0)
                              (set! v1-14 (-> a0-9 type))
                              (set! t9-0 (method-of-type v1-14 dummy-39))
                              (set! a1-0 s2-0)
                              (set! a2-0 s1-0)
                              (set! v0-1 (call! a0-9 a1-0 a2-0))
                              (set! v1-15 v0-1)
                              v1-15
                              )
                        (when (begin
                                (if (begin
                                        (set! a0-10 s5-0)
                                        (set! v1-17 (-> a0-10 type))
                                        (set! t9-1 (method-of-type v1-17 add-rider!))
                                        (set! a1-1 (l.wu (+ s2-0 136)))
                                        a1-1
                                        )
                                    (set! v1-18 (-> a1-1 ppointer))
                                    )
                                (set! a1-2 (-> v1-18 0))
                                (set! a1-3 (-> a1-2 pid))
                                (set! a1-4 (sll a1-3 32))
                                (.sllv v1-19 v1-18 r0-0)
                                (set! a1-5 (logior a1-4 v1-19))
                                (set! v0-2 (call! a0-10 a1-5))
                                (set! s4-1 v0-2)
                                s4-1
                                )
                          (set! a0-11 (-> s1-0 rider-cshape))
                          (set! (-> s4-1 sticky-prim) (the-as collide-shape-prim a0-11))
                          (set! v1-21 (-> a0-0 process))
                          (set! v1-22 (-> v1-21 node-list))
                          (set! a0-12 (the-as none (l.b (+ a0-11 8))))
                          (set! a0-13 (the-as none (sll a0-12 5)))
                          (set! v1-23 (the-as none (+ v1-22 a0-13)))
                          (set! v1-24 (the-as none (l.wu (+ v1-23 28))))
                          (set! s1-1 (the-as none (+ v1-24 0)))
                          (set! t9-2 (the-as none matrix-y-angle))
                          (set! a0-14 (the-as none s1-1))
                          (set! v0-3 (the-as none (call!)))
                          (set! f0-0 (the-as none (gpr->fpr v0-3)))
                          (s.f! (+ s4-1 12) f0-0)
                          (set! s0-0 (the-as none (new 'stack-no-clear 'matrix)))
                          (set! t9-3 (the-as none matrix-4x4-inverse!))
                          (set! a0-15 (the-as none s0-0))
                          (set! a1-6 (the-as none s1-1))
                          (call!)
                          (set! t9-4 (the-as none vector-matrix*!))
                          (set! a0-16 (the-as none (+ s4-1 16)))
                          (set! a1-7 (the-as none (+ s2-0 12)))
                          (set! a2-1 (the-as none s0-0))
                          (call!)
                          (set! v1-25 (the-as none v0-5))
                          (set! a1-8 (the-as none (new 'stack-no-clear 'event-message-block)))
                          (s.w! (+ a1-8 4) s6-0)
                          (set! v1-26 (the-as none 1))
                          (s.w! (+ a1-8 8) v1-26)
                          (set! v1-27 (the-as none 'ridden))
                          (s.w! (+ a1-8 12) v1-27)
                          (s.d! (+ a1-8 16) s4-1)
                          (set! t9-5 (the-as none send-event-function))
                          (set! a0-17 (the-as none (l.wu (+ a0-0 136))))
                          (call!)
                          (set! v1-28 (the-as none v0-6))
                          )
                        (set! v1-29 (the-as none (-> a0-0 root-prim)))
                        (set! s4-0 (the-as uint (l.d (+ v1-29 60))))
                        (set! v1-30 (the-as none s4-0))
                        )
                      )
                    )
                  (set! v1-7 (the-as connectable s3-0))
                  (set! a0-18 (the-as none *collide-player-list*))
                  (set! a0-19 (the-as none (l.wu s3-0)))
                  (set! s3-0 (the-as connectable a0-19))
                  )
                )
              (set! v1-33 (the-as none (logand s4-0 14)))
              (nonzero? v1-33)
              )
        (when (begin
                (when (begin (set! v1-34 (the-as none (logand s4-0 2))) (nonzero? v1-34))
                  (set! v1-36 (the-as none *collide-hit-by-player-list*))
                  (set! v1-37 (the-as none (l.wu (+ v1-36 28))))
                  (set! a0-22 (the-as none *collide-hit-by-player-list*))
                  (set! a0-23 (the-as none v1-37))
                  (set! s3-1 (the-as none (l.wu a0-23)))
                  (while (begin
                           (set! a0-39 (the-as none *collide-hit-by-player-list*))
                           (set! a0-40 (the-as none (+ a0-39 44)))
                           (!= v1-37 a0-40)
                           )
                    (when (begin
                            (set! s2-1 (the-as none (l.w (+ v1-37 20))))
                            (set! v1-38 (the-as none (l.wu (+ s2-1 156))))
                            (set! a0-24 (the-as none (l.d (+ v1-38 28))))
                            (set! a0-25 (the-as none (logand s4-0 a0-24)))
                            (nonzero? a0-25)
                            )
                      (when (begin
                              (and
                                (begin
                                  (set! v1-39 (the-as none (l.wu (+ v1-38 36))))
                                  (set! v1-40 (the-as none (logand v1-39 4)))
                                  (nonzero? v1-40)
                                  )
                                (begin
                                  (set! v1-42 (the-as none (l.wu (+ a0-0 136))))
                                  (set! a0-27 (the-as none (l.wu (+ s2-1 136))))
                                  (set! v1-41 (the-as none (!= v1-42 a0-27)))
                                  )
                                )
                              v1-41
                              )
                        (when (begin
                                (set! s1-2 (the-as none (new 'stack-no-clear 'collide-overlap-result)))
                                (set! a0-28 (the-as none a0-0))
                                (set! v1-44 (the-as none (l.wu (+ a0-28 -4))))
                                (set! t9-6 (the-as none (l.wu (+ v1-44 172))))
                                (set! a1-9 (the-as none s2-1))
                                (set! a2-2 (the-as none s1-2))
                                (set! v0-7 (the-as none (call!)))
                                (set! v1-45 (the-as none v0-7))
                                v1-45
                                )
                          (when (begin
                                  (if (begin
                                          (set! a0-29 (the-as none s5-0))
                                          (set! v1-47 (the-as none (l.wu (+ a0-29 -4))))
                                          (set! t9-7 (the-as none (l.wu (+ v1-47 52))))
                                          (set! a1-10 (the-as none (l.wu (+ s2-1 136))))
                                          a1-10
                                          )
                                      (set! v1-48 (the-as none (l.wu (+ a1-10 20))))
                                      )
                                  (set! a1-11 (the-as none (l.wu v1-48)))
                                  (set! a1-12 (the-as none (l.w (+ a1-11 36))))
                                  (set! a1-13 (the-as none (sll a1-12 32)))
                                  (.sllv v1-49 v1-48 r0-0)
                                  (set! a1-14 (the-as none (logior a1-13 v1-49)))
                                  (set! v0-8 (the-as none (call!)))
                                  (set! s4-2 (the-as none v0-8))
                                  s4-2
                                  )
                            (set! a0-30 (the-as none (l.wu (+ s1-2 4))))
                            (s.w! (+ s4-2 8) a0-30)
                            (set! v1-51 (the-as none (l.wu (+ a0-0 136))))
                            (set! v1-52 (the-as none (l.wu (+ v1-51 112))))
                            (set! a0-31 (the-as none (l.b (+ a0-30 8))))
                            (set! a0-32 (the-as none (sll a0-31 5)))
                            (set! v1-53 (the-as none (+ v1-52 a0-32)))
                            (set! v1-54 (the-as none (l.wu (+ v1-53 28))))
                            (set! s1-3 (the-as none (+ v1-54 0)))
                            (set! t9-8 (the-as none matrix-y-angle))
                            (set! a0-33 (the-as none s1-3))
                            (set! v0-9 (the-as none (call!)))
                            (set! f0-1 (the-as none (gpr->fpr v0-9)))
                            (s.f! (+ s4-2 12) f0-1)
                            (set! s0-1 (the-as none (new 'stack-no-clear 'matrix)))
                            (set! t9-9 (the-as none matrix-4x4-inverse!))
                            (set! a0-34 (the-as none s0-1))
                            (set! a1-15 (the-as none s1-3))
                            (call!)
                            (set! t9-10 (the-as none vector-matrix*!))
                            (set! a0-35 (the-as none (+ s4-2 16)))
                            (set! a1-16 (the-as none (+ s2-1 12)))
                            (set! a2-3 (the-as none s0-1))
                            (call!)
                            (set! v1-55 (the-as none v0-11))
                            (set! a1-17 (the-as none (new 'stack-no-clear 'event-message-block)))
                            (s.w! (+ a1-17 4) s6-0)
                            (set! v1-56 (the-as none 1))
                            (s.w! (+ a1-17 8) v1-56)
                            (set! v1-57 (the-as none 'ridden))
                            (s.w! (+ a1-17 12) v1-57)
                            (s.d! (+ a1-17 16) s4-2)
                            (set! t9-11 (the-as none send-event-function))
                            (set! a0-36 (the-as none (l.wu (+ a0-0 136))))
                            (call!)
                            (set! v1-58 (the-as none v0-12))
                            )
                          (set! v1-59 (the-as none (l.wu (+ a0-0 156))))
                          (set! s4-0 (the-as uint (l.d (+ v1-59 60))))
                          (set! v1-60 (the-as none s4-0))
                          )
                        )
                      )
                    (set! v1-37 (the-as none s3-1))
                    (set! a0-37 (the-as none *collide-hit-by-player-list*))
                    (set! a0-38 (the-as none (l.wu s3-1)))
                    (set! s3-1 (the-as none a0-38))
                    )
                  )
                (set! v1-63 (the-as none (logand s4-0 4)))
                (nonzero? v1-63)
                )
          (set! v1-65 (the-as none *collide-usually-hit-by-player-list*))
          (set! v1-66 (the-as none (l.wu (+ v1-65 28))))
          (set! a0-41 (the-as none *collide-usually-hit-by-player-list*))
          (set! a0-42 (the-as none v1-66))
          (set! s3-2 (the-as none (l.wu a0-42)))
          (while (begin
                   (set! a0-58 (the-as none *collide-usually-hit-by-player-list*))
                   (set! a0-59 (the-as none (+ a0-58 44)))
                   (!= v1-66 a0-59)
                   )
            (when (begin
                    (set! s2-2 (the-as none (l.w (+ v1-66 20))))
                    (set! v1-67 (the-as none (l.wu (+ s2-2 156))))
                    (set! a0-43 (the-as none (l.d (+ v1-67 28))))
                    (set! a0-44 (the-as none (logand s4-0 a0-43)))
                    (nonzero? a0-44)
                    )
              (when (begin
                      (and
                        (begin
                          (set! v1-68 (the-as none (l.wu (+ v1-67 36))))
                          (set! v1-69 (the-as none (logand v1-68 4)))
                          (nonzero? v1-69)
                          )
                        (begin
                          (set! v1-71 (the-as none (l.wu (+ a0-0 136))))
                          (set! a0-46 (the-as none (l.wu (+ s2-2 136))))
                          (set! v1-70 (the-as none (!= v1-71 a0-46)))
                          )
                        )
                      v1-70
                      )
                (when (begin
                        (set! s1-4 (the-as none (new 'stack-no-clear 'collide-overlap-result)))
                        (set! a0-47 (the-as none a0-0))
                        (set! v1-73 (the-as none (l.wu (+ a0-47 -4))))
                        (set! t9-12 (the-as none (l.wu (+ v1-73 172))))
                        (set! a1-18 (the-as none s2-2))
                        (set! a2-4 (the-as none s1-4))
                        (set! v0-13 (the-as none (call!)))
                        (set! v1-74 (the-as none v0-13))
                        v1-74
                        )
                  (when (begin
                          (if (begin
                                  (set! a0-48 (the-as none s5-0))
                                  (set! v1-76 (the-as none (l.wu (+ a0-48 -4))))
                                  (set! t9-13 (the-as none (l.wu (+ v1-76 52))))
                                  (set! a1-19 (the-as none (l.wu (+ s2-2 136))))
                                  a1-19
                                  )
                              (set! v1-77 (the-as none (l.wu (+ a1-19 20))))
                              )
                          (set! a1-20 (the-as none (l.wu v1-77)))
                          (set! a1-21 (the-as none (l.w (+ a1-20 36))))
                          (set! a1-22 (the-as none (sll a1-21 32)))
                          (.sllv v1-78 v1-77 r0-0)
                          (set! a1-23 (the-as none (logior a1-22 v1-78)))
                          (set! v0-14 (the-as none (call!)))
                          (set! s4-3 (the-as none v0-14))
                          s4-3
                          )
                    (set! a0-49 (the-as none (l.wu (+ s1-4 4))))
                    (s.w! (+ s4-3 8) a0-49)
                    (set! v1-80 (the-as none (l.wu (+ a0-0 136))))
                    (set! v1-81 (the-as none (l.wu (+ v1-80 112))))
                    (set! a0-50 (the-as none (l.b (+ a0-49 8))))
                    (set! a0-51 (the-as none (sll a0-50 5)))
                    (set! v1-82 (the-as none (+ v1-81 a0-51)))
                    (set! v1-83 (the-as none (l.wu (+ v1-82 28))))
                    (set! s1-5 (the-as none (+ v1-83 0)))
                    (set! t9-14 (the-as none matrix-y-angle))
                    (set! a0-52 (the-as none s1-5))
                    (set! v0-15 (the-as none (call!)))
                    (set! f0-2 (the-as none (gpr->fpr v0-15)))
                    (s.f! (+ s4-3 12) f0-2)
                    (set! s0-2 (the-as none (new 'stack-no-clear 'matrix)))
                    (set! t9-15 (the-as none matrix-4x4-inverse!))
                    (set! a0-53 (the-as none s0-2))
                    (set! a1-24 (the-as none s1-5))
                    (call!)
                    (set! t9-16 (the-as none vector-matrix*!))
                    (set! a0-54 (the-as none (+ s4-3 16)))
                    (set! a1-25 (the-as none (+ s2-2 12)))
                    (set! a2-5 (the-as none s0-2))
                    (call!)
                    (set! v1-84 (the-as none v0-17))
                    (set! a1-26 (the-as none (new 'stack-no-clear 'event-message-block)))
                    (s.w! (+ a1-26 4) s6-0)
                    (set! v1-85 (the-as none 1))
                    (s.w! (+ a1-26 8) v1-85)
                    (set! v1-86 (the-as none 'ridden))
                    (s.w! (+ a1-26 12) v1-86)
                    (s.d! (+ a1-26 16) s4-3)
                    (set! t9-17 (the-as none send-event-function))
                    (set! a0-55 (the-as none (l.wu (+ a0-0 136))))
                    (call!)
                    (set! v1-87 (the-as none v0-18))
                    )
                  (set! v1-88 (the-as none (l.wu (+ a0-0 156))))
                  (set! s4-0 (the-as uint (l.d (+ v1-88 60))))
                  (set! v1-89 (the-as none s4-0))
                  )
                )
              )
            (set! v1-66 (the-as none s3-2))
            (set! a0-56 (the-as none *collide-usually-hit-by-player-list*))
            (set! a0-57 (the-as none (l.wu s3-2)))
            (set! s3-2 (the-as none a0-57))
            )
          )
        (when (begin (set! v1-92 (the-as none (logand s4-0 8))) (nonzero? v1-92))
          (set! v1-93 (the-as none *collide-hit-by-others-list*))
          (set! v1-94 (the-as none (l.wu (+ v1-93 28))))
          (set! a0-60 (the-as none *collide-hit-by-others-list*))
          (set! a0-61 (the-as none v1-94))
          (set! s3-3 (the-as none (l.wu a0-61)))
          (while (begin
                   (set! a0-77 (the-as none *collide-hit-by-others-list*))
                   (set! a0-78 (the-as none (+ a0-77 44)))
                   (!= v1-94 a0-78)
                   )
            (when (begin
                    (set! s2-3 (the-as none (l.w (+ v1-94 20))))
                    (set! v1-95 (the-as none (l.wu (+ s2-3 156))))
                    (set! a0-62 (the-as none (l.d (+ v1-95 28))))
                    (set! a0-63 (the-as none (logand s4-0 a0-62)))
                    (nonzero? a0-63)
                    )
              (when (begin
                      (and
                        (begin
                          (set! v1-96 (the-as none (l.wu (+ v1-95 36))))
                          (set! v1-97 (the-as none (logand v1-96 4)))
                          (nonzero? v1-97)
                          )
                        (begin
                          (set! v1-99 (the-as none (l.wu (+ a0-0 136))))
                          (set! a0-65 (the-as none (l.wu (+ s2-3 136))))
                          (set! v1-98 (the-as none (!= v1-99 a0-65)))
                          )
                        )
                      v1-98
                      )
                (when (begin
                        (set! s1-6 (the-as none (new 'stack-no-clear 'collide-overlap-result)))
                        (set! a0-66 (the-as none a0-0))
                        (set! v1-101 (the-as none (l.wu (+ a0-66 -4))))
                        (set! t9-18 (the-as none (l.wu (+ v1-101 172))))
                        (set! a1-27 (the-as none s2-3))
                        (set! a2-6 (the-as none s1-6))
                        (set! v0-19 (the-as none (call!)))
                        (set! v1-102 (the-as none v0-19))
                        v1-102
                        )
                  (when (begin
                          (if (begin
                                  (set! a0-67 (the-as none s5-0))
                                  (set! v1-104 (the-as none (l.wu (+ a0-67 -4))))
                                  (set! t9-19 (the-as none (l.wu (+ v1-104 52))))
                                  (set! a1-28 (the-as none (l.wu (+ s2-3 136))))
                                  a1-28
                                  )
                              (set! v1-105 (the-as none (l.wu (+ a1-28 20))))
                              )
                          (set! a1-29 (the-as none (l.wu v1-105)))
                          (set! a1-30 (the-as none (l.w (+ a1-29 36))))
                          (set! a1-31 (the-as none (sll a1-30 32)))
                          (.sllv v1-106 v1-105 r0-0)
                          (set! a1-32 (the-as none (logior a1-31 v1-106)))
                          (set! v0-20 (the-as none (call!)))
                          (set! s4-4 (the-as none v0-20))
                          s4-4
                          )
                    (set! a0-68 (the-as none (l.wu (+ s1-6 4))))
                    (s.w! (+ s4-4 8) a0-68)
                    (set! v1-108 (the-as none (l.wu (+ a0-0 136))))
                    (set! v1-109 (the-as none (l.wu (+ v1-108 112))))
                    (set! a0-69 (the-as none (l.b (+ a0-68 8))))
                    (set! a0-70 (the-as none (sll a0-69 5)))
                    (set! v1-110 (the-as none (+ v1-109 a0-70)))
                    (set! v1-111 (the-as none (l.wu (+ v1-110 28))))
                    (set! s1-7 (the-as none (+ v1-111 0)))
                    (set! t9-20 (the-as none matrix-y-angle))
                    (set! a0-71 (the-as none s1-7))
                    (set! v0-21 (the-as none (call!)))
                    (set! f0-3 (the-as none (gpr->fpr v0-21)))
                    (s.f! (+ s4-4 12) f0-3)
                    (set! s0-3 (the-as none (new 'stack-no-clear 'matrix)))
                    (set! t9-21 (the-as none matrix-4x4-inverse!))
                    (set! a0-72 (the-as none s0-3))
                    (set! a1-33 (the-as none s1-7))
                    (call!)
                    (set! t9-22 (the-as none vector-matrix*!))
                    (set! a0-73 (the-as none (+ s4-4 16)))
                    (set! a1-34 (the-as none (+ s2-3 12)))
                    (set! a2-7 (the-as none s0-3))
                    (call!)
                    (set! v1-112 (the-as none v0-23))
                    (set! a1-35 (the-as none (new 'stack-no-clear 'event-message-block)))
                    (s.w! (+ a1-35 4) s6-0)
                    (set! v1-113 (the-as none 1))
                    (s.w! (+ a1-35 8) v1-113)
                    (set! v1-114 (the-as none 'ridden))
                    (s.w! (+ a1-35 12) v1-114)
                    (s.d! (+ a1-35 16) s4-4)
                    (set! t9-23 (the-as none send-event-function))
                    (set! a0-74 (the-as none (l.wu (+ a0-0 136))))
                    (call!)
                    (set! v1-115 (the-as none v0-24))
                    )
                  (set! v1-116 (the-as none (l.wu (+ a0-0 156))))
                  (set! s4-0 (the-as uint (l.d (+ v1-116 60))))
                  (set! v1-117 (the-as none s4-0))
                  )
                )
              )
            (set! v1-94 (the-as none s3-3))
            (set! a0-75 (the-as none *collide-hit-by-others-list*))
            (set! a0-76 (the-as none (l.wu s3-3)))
            (set! s3-3 (the-as none a0-76))
            )
          (set! v0-0 (the-as symbol #f))
          )
        )
      )
    (ret-value v0-0)
    )
  )

;; definition for method 44 of type collide-shape
(defmethod dummy-44 collide-shape ((obj collide-shape))
  (let ((s5-0 (-> obj riders)))
    (when s5-0
      (let ((s4-0 (new 'stack-no-clear 'pull-rider-info)))
        (countdown (s3-0 (-> s5-0 num-riders))
          (let* ((v1-2 (-> s5-0 rider s3-0))
                 (a0-1 (-> v1-2 rider-handle))
                 )
            (when (handle->process a0-1)
              (set! (-> s4-0 rider) v1-2)
              (set! (-> s4-0 rider-cshape) (the-as collide-shape (-> (the-as process-drawable (-> a0-1 process 0)) root)))
              (let ((a0-5 (-> v1-2 sticky-prim)))
                (when a0-5
                  (let ((s2-0 (-> obj process node-list data (-> a0-5 transform-index) bone transform)))
                    (let ((s1-0 (-> s4-0 rider-dest)))
                      (vector-matrix*! s1-0 (-> v1-2 rider-local-pos) s2-0)
                      (vector-float*! s1-0 s1-0 (/ 1.0 (-> s1-0 w)))
                      )
                    (set! (-> s4-0 rider-delta-ry) (deg- (matrix-y-angle s2-0) (-> s4-0 rider prim-ry)))
                    )
                  (dummy-43 obj s4-0)
                  )
                )
              )
            )
          )
        )
      #f
      )
    )
  )

;; definition for method 43 of type collide-shape
;; INFO: Return type mismatch object vs none.
;; Used lq/sq
(defmethod dummy-43 collide-shape ((obj collide-shape) (arg0 pull-rider-info))
  (local-vars (at-0 int) (sv-160 (function collide-shape object uint none)))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> arg0 rider-cshape)))
      (let ((s3-0 (new 'stack-no-clear 'vector))
            (s4-0 (new 'stack-no-clear 'vector))
            )
        (set! (-> s4-0 quad) (-> gp-0 trans quad))
        (vector-! s3-0 (-> arg0 rider-dest) s4-0)
        (cond
          ((logtest? (-> obj root-prim prim-core action) 16)
           (let ((s1-0 (-> obj root-prim prim-core collide-as)))
             (set! (-> obj root-prim prim-core collide-as) (the-as uint 0))
             (let ((s0-0 gp-0))
               (set! sv-160 (method-of-object s0-0 dummy-32))
               (let ((a1-3 (+ 8192.0 (vector-length s3-0)))
                     (a2-0 (-> gp-0 root-prim collide-with))
                     )
                 (sv-160 s0-0 a1-3 a2-0)
                 )
               )
             (set! (-> obj root-prim prim-core collide-as) s1-0)
             )
           (let ((s2-1 (new 'stack-no-clear 'vector)))
             (set! (-> s2-1 quad) (-> s3-0 quad))
             (let ((v1-12 s2-1))
               (.lvf vf1 (&-> s2-1 quad))
               (let ((f0-2 (-> *display* frames-per-second)))
                 (.mov at-0 f0-2)
                 )
               (.mov vf2 at-0)
               (.mov.vf vf1 vf0 :mask #b1000)
               (.mul.x.vf vf1 vf1 vf2 :mask #b111)
               (.svf (&-> v1-12 quad) vf1)
               )
             (cond
               ((type-type? (-> gp-0 type) collide-shape-moving)
                (let ((s3-1 (-> (the-as collide-shape-moving gp-0) status)))
                  (dummy-37 (the-as collide-shape-moving gp-0) s2-1)
                  (set! (-> (the-as collide-shape-moving gp-0) status) s3-1)
                  )
                )
               (else
                 (dummy-37 gp-0 s2-1)
                 )
               )
             )
           )
          (else
            (TODO-RENAME-28 gp-0 s3-0)
            )
          )
        (when (type-type? (-> gp-0 type) collide-shape-moving)
          (let ((v1-18 (new 'stack-no-clear 'vector)))
            (vector-! v1-18 (-> (the-as collide-shape-moving gp-0) trans) s4-0)
            (vector-float*!
              (-> (the-as collide-shape-moving gp-0) rider-last-move)
              v1-18
              (-> *display* frames-per-second)
              )
            )
          (set! (-> (the-as collide-shape-moving gp-0) rider-time) (the-as uint (-> *display* base-frame-counter)))
          )
        )
      (let ((f0-4 (-> arg0 rider-delta-ry)))
        (if (!= f0-4 0.0)
            (send-event (-> gp-0 process) 'rotate-y-angle f0-4)
            )
        )
      )
    (none)
    )
  )

;; definition for method 29 of type collide-shape
;; INFO: Return type mismatch object vs none.
(defmethod dummy-29 collide-shape ((obj collide-shape) (arg0 int))
  (if (-> obj riders)
      (format 0 "ERROR: colide-shape::alloc-riders is being called multiple times!~%")
      (set! (-> obj riders) (new 'process 'collide-sticky-rider-group arg0))
      )
  (none)
  )
