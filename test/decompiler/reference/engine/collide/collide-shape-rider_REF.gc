;;-*-Lisp-*-
(in-package goal)

;; definition for method 39 of type collide-shape
(defmethod dummy-39 collide-shape ((obj collide-shape) (arg0 collide-shape) (arg1 collide-overlap-result))
  (let ((v1-0 arg1))
    (set! (-> v1-0 best-dist) 0.0)
    (set! (-> v1-0 best-from-prim) #f)
    (set! (-> v1-0 best-to-prim) #f)
    )
  (set! (-> arg1 best-dist) 122.88)
  (let ((s5-0 (-> obj root-prim))
        (s4-0 (-> arg0 root-prim))
        )
    (when (and (logtest? (-> s5-0 collide-with) (-> s4-0 prim-core collide-as))
               (logtest? (-> s5-0 prim-core action) (collide-action ca-1))
               (logtest? (-> s4-0 prim-core action) (collide-action ca-2))
               )
      (let ((f0-4 (- (- (vector-vector-distance (the-as vector (-> s5-0 prim-core)) (the-as vector (-> s4-0 prim-core)))
                        (-> s5-0 prim-core world-sphere w)
                        )
                     (-> s4-0 prim-core world-sphere w)
                     )
                  )
            )
        (if (< f0-4 122.88)
            (on-platform-test s5-0 s4-0 arg1 f0-4)
            )
        )
      )
    )
  (< (-> arg1 best-dist) 122.88)
  )

;; definition for method 22 of type collide-shape-prim
;; INFO: Return type mismatch object vs pat-surface.
(defmethod on-platform-test collide-shape-prim ((obj collide-shape-prim) (arg0 collide-shape-prim) (arg1 collide-overlap-result) (arg2 float))
  (the-as pat-surface (format 0 "ERROR: collide-shape-prim::on-platform-test was called illegally!~%"))
  )

;; definition for method 22 of type collide-shape-prim-group
;; INFO: Return type mismatch symbol vs pat-surface.
(defmethod on-platform-test collide-shape-prim-group ((obj collide-shape-prim-group) (arg0 collide-shape-prim-group) (arg1 collide-overlap-result) (arg2 float))
  (let ((s3-0 (-> arg0 prim-core collide-as)))
    (dotimes (s2-0 (-> obj num-prims))
      (let ((s1-0 (-> obj prims s2-0)))
        (when (and (logtest? (-> s1-0 collide-with) s3-0) (logtest? (-> s1-0 prim-core action) (collide-action ca-1)))
          (let ((f0-2 (- (- (vector-vector-distance (the-as vector (-> s1-0 prim-core)) (the-as vector (-> arg0 prim-core)))
                            (-> s1-0 prim-core world-sphere w)
                            )
                         (-> arg0 prim-core world-sphere w)
                         )
                      )
                )
            (if (< f0-2 122.88)
                (on-platform-test s1-0 arg0 arg1 f0-2)
                )
            )
          )
        )
      )
    )
  (the-as pat-surface #f)
  )

;; definition for method 22 of type collide-shape-prim-mesh
;; Used lq/sq
(defmethod on-platform-test collide-shape-prim-mesh ((obj collide-shape-prim-mesh) (arg0 collide-shape-prim-mesh) (arg1 collide-overlap-result) (arg2 float))
  (case (-> arg0 type)
    ((collide-shape-prim-group)
     (let ((s3-0 (-> obj collide-with)))
       (dotimes (s2-0 (the-as int (-> arg0 mesh)))
         (let ((s1-0 (-> (the-as collide-shape-prim-group arg0) prims s2-0)))
           (when (and (logtest? s3-0 (-> s1-0 prim-core collide-as))
                      (logtest? (-> s1-0 prim-core action) (collide-action ca-2))
                      )
             (let ((f0-2 (- (- (vector-vector-distance (the-as vector (-> obj prim-core)) (the-as vector (-> s1-0 prim-core)))
                               (-> obj prim-core world-sphere w)
                               )
                            (-> s1-0 prim-core world-sphere w)
                            )
                         )
                   )
               (if (< f0-2 122.88)
                   (on-platform-test obj (the-as collide-shape-prim-mesh s1-0) arg1 f0-2)
                   )
               )
             )
           )
         )
       )
     (the-as pat-surface #f)
     )
    ((collide-shape-prim-sphere)
     (let ((s3-1 (-> obj mesh)))
       (when s3-1
         (let ((s2-1 *collide-mesh-cache*))
           (when (!= (-> obj mesh-cache-id) (-> s2-1 id))
             (let ((v1-17 (dummy-9 s2-1 (the-as collide-mesh-tri (* (the-as uint 96) (-> s3-1 num-tris))))))
               (cond
                 (v1-17
                   (set! (-> obj mesh-cache-tris) v1-17)
                   (set! (-> obj mesh-cache-id) (-> s2-1 id))
                   (let* ((a0-10 s3-1)
                          (t9-3 (method-of-object a0-10 dummy-13))
                          )
                     (-> obj mesh-cache-tris)
                     (-> obj cshape process node-list data (-> obj transform-index) bone transform)
                     (t9-3 a0-10)
                     )
                   )
                 (else
                   (return (the-as pat-surface #f))
                   )
                 )
               )
             )
           )
         (let* ((s2-2 (new 'stack-no-clear 'collide-tri-result))
                (f0-4 (dummy-12
                        s3-1
                        (the-as collide-mesh-cache-tri (-> obj mesh-cache-tris))
                        s2-2
                        (the-as vector (-> arg0 prim-core))
                        (-> arg1 best-dist)
                        )
                      )
                )
           (when (< f0-4 (-> arg1 best-dist))
             (set! (-> arg1 best-dist) f0-4)
             (set! (-> arg1 best-from-prim) obj)
             (set! (-> arg1 best-to-prim) arg0)
             (set! (-> arg1 best-from-tri vertex 0 quad) (-> s2-2 vertex 0 quad))
             (set! (-> arg1 best-from-tri vertex 1 quad) (-> s2-2 vertex 1 quad))
             (set! (-> arg1 best-from-tri vertex 2 quad) (-> s2-2 vertex 2 quad))
             (set! (-> arg1 best-from-tri intersect quad) (-> s2-2 intersect quad))
             (set! (-> arg1 best-from-tri normal quad) (-> s2-2 normal quad))
             (let ((v0-2 (-> s2-2 pat)))
               (set! (-> arg1 best-from-tri pat) v0-2)
               v0-2
               )
             )
           )
         )
       )
     )
    )
  )

;; definition for method 9 of type collide-sticky-rider-group
(defmethod add-rider! collide-sticky-rider-group ((obj collide-sticky-rider-group) (arg0 process-drawable))
  (let ((gp-0 (the-as collide-sticky-rider #f)))
    (cond
      ((< (-> obj num-riders) (-> obj allocated-riders))
       (set! gp-0 (-> obj rider (-> obj num-riders)))
       (+! (-> obj num-riders) 1)
       (let ((v1-6 gp-0))
         (set! (-> v1-6 rider-handle) (the-as handle arg0))
         (set! (-> v1-6 sticky-prim) #f)
         )
       )
      (else
        (format 0 "ERROR: Exeeded max number of riders!~%")
        )
      )
    gp-0
    )
  )

;; definition for method 35 of type collide-shape
;; WARN: Expression building failed: In (method 35 collide-shape): Unhandled branch delay in BranchElement::push_to_stack: (bl! (zero? (the-as uint a0-2)) L18 (no-delay!))
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
;; WARN: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
(defmethod dummy-35 collide-shape ((obj collide-shape))
  (local-vars
    (r0-0 none)
    (v0-0 symbol)
    (v0-1 symbol)
    (v0-2 collide-sticky-rider)
    (v0-3 float)
    (v0-4 matrix)
    (v0-5 vector)
    (v0-6 object)
    (v0-7 symbol)
    (v0-8 collide-sticky-rider)
    (v0-9 float)
    (v0-10 matrix)
    (v0-11 vector)
    (v0-12 object)
    (v0-13 symbol)
    (v0-14 collide-sticky-rider)
    (v0-15 float)
    (v0-16 matrix)
    (v0-17 vector)
    (v0-18 object)
    (v0-19 symbol)
    (v0-20 collide-sticky-rider)
    (v0-21 float)
    (v0-22 matrix)
    (v0-23 vector)
    (v0-24 object)
    (v1-0 collide-mesh-cache)
    (v1-1 collide-sticky-rider-group)
    (v1-2 int)
    (v1-3 collide-shape-prim)
    (v1-4 collide-kind)
    (v1-6 engine)
    (v1-7 connectable)
    (v1-8 collide-shape-prim)
    (v1-9 collide-action)
    (v1-10 collide-action)
    (v1-11 symbol)
    (v1-12 process-drawable)
    (v1-14 type)
    (v1-15 symbol)
    (v1-17 type)
    (v1-18 (pointer process))
    (v1-19 int)
    (v1-21 process-drawable)
    (v1-22 cspace-array)
    (v1-23 int)
    (v1-24 bone)
    (v1-26 int)
    (v1-27 symbol)
    (v1-29 collide-shape-prim)
    (v1-33 collide-kind)
    (v1-34 collide-kind)
    (v1-36 engine)
    (v1-37 connectable)
    (v1-38 collide-shape-prim)
    (v1-39 collide-action)
    (v1-40 collide-action)
    (v1-41 symbol)
    (v1-42 process-drawable)
    (v1-44 type)
    (v1-45 symbol)
    (v1-47 type)
    (v1-48 (pointer process))
    (v1-49 int)
    (v1-51 process-drawable)
    (v1-52 cspace-array)
    (v1-53 int)
    (v1-54 bone)
    (v1-56 int)
    (v1-57 symbol)
    (v1-59 collide-shape-prim)
    (v1-63 collide-kind)
    (v1-65 engine)
    (v1-66 connectable)
    (v1-67 collide-shape-prim)
    (v1-68 collide-action)
    (v1-69 collide-action)
    (v1-70 symbol)
    (v1-71 process-drawable)
    (v1-73 type)
    (v1-74 symbol)
    (v1-76 type)
    (v1-77 (pointer process))
    (v1-78 int)
    (v1-80 process-drawable)
    (v1-81 cspace-array)
    (v1-82 int)
    (v1-83 bone)
    (v1-85 int)
    (v1-86 symbol)
    (v1-88 collide-shape-prim)
    (v1-92 collide-kind)
    (v1-93 engine)
    (v1-94 connectable)
    (v1-95 collide-shape-prim)
    (v1-96 collide-action)
    (v1-97 collide-action)
    (v1-98 symbol)
    (v1-99 process-drawable)
    (v1-101 type)
    (v1-102 symbol)
    (v1-104 type)
    (v1-105 (pointer process))
    (v1-106 int)
    (v1-108 process-drawable)
    (v1-109 cspace-array)
    (v1-110 int)
    (v1-111 bone)
    (v1-113 int)
    (v1-114 symbol)
    (v1-116 collide-shape-prim)
    (a0-1 uint)
    (a0-2 int)
    (a0-3 engine)
    (a0-4 connectable)
    (a0-5 collide-kind)
    (a0-6 collide-kind)
    (a0-8 process-drawable)
    (a0-9 collide-shape)
    (a0-10 collide-sticky-rider-group)
    (a0-11 collide-shape-prim)
    (a0-12 int)
    (a0-13 int)
    (a0-14 matrix)
    (a0-15 matrix)
    (a0-16 vector)
    (a0-17 process-drawable)
    (a0-18 engine)
    (a0-19 connectable)
    (a0-20 engine)
    (a0-21 connectable)
    (a0-22 engine)
    (a0-23 connectable)
    (a0-24 collide-kind)
    (a0-25 collide-kind)
    (a0-27 process-drawable)
    (a0-28 collide-shape)
    (a0-29 collide-sticky-rider-group)
    (a0-30 collide-shape-prim)
    (a0-31 int)
    (a0-32 int)
    (a0-33 matrix)
    (a0-34 matrix)
    (a0-35 vector)
    (a0-36 process-drawable)
    (a0-37 engine)
    (a0-38 connectable)
    (a0-39 engine)
    (a0-40 connectable)
    (a0-41 engine)
    (a0-42 connectable)
    (a0-43 collide-kind)
    (a0-44 collide-kind)
    (a0-46 process-drawable)
    (a0-47 collide-shape)
    (a0-48 collide-sticky-rider-group)
    (a0-49 collide-shape-prim)
    (a0-50 int)
    (a0-51 int)
    (a0-52 matrix)
    (a0-53 matrix)
    (a0-54 vector)
    (a0-55 process-drawable)
    (a0-56 engine)
    (a0-57 connectable)
    (a0-58 engine)
    (a0-59 connectable)
    (a0-60 engine)
    (a0-61 connectable)
    (a0-62 collide-kind)
    (a0-63 collide-kind)
    (a0-65 process-drawable)
    (a0-66 collide-shape)
    (a0-67 collide-sticky-rider-group)
    (a0-68 collide-shape-prim)
    (a0-69 int)
    (a0-70 int)
    (a0-71 matrix)
    (a0-72 matrix)
    (a0-73 vector)
    (a0-74 process-drawable)
    (a0-75 engine)
    (a0-76 connectable)
    (a0-77 engine)
    (a0-78 connectable)
    (a1-0 basic)
    (a1-1 process-drawable)
    (a1-2 process)
    (a1-3 int)
    (a1-4 int)
    (a1-5 int)
    (a1-6 matrix)
    (a1-7 vector)
    (a1-8 event-message-block)
    (a1-9 basic)
    (a1-10 process-drawable)
    (a1-11 process)
    (a1-12 int)
    (a1-13 int)
    (a1-14 int)
    (a1-15 matrix)
    (a1-16 vector)
    (a1-17 event-message-block)
    (a1-18 basic)
    (a1-19 process-drawable)
    (a1-20 process)
    (a1-21 int)
    (a1-22 int)
    (a1-23 int)
    (a1-24 matrix)
    (a1-25 vector)
    (a1-26 event-message-block)
    (a1-27 basic)
    (a1-28 process-drawable)
    (a1-29 process)
    (a1-30 int)
    (a1-31 int)
    (a1-32 int)
    (a1-33 matrix)
    (a1-34 vector)
    (a1-35 event-message-block)
    (a2-0 pull-rider-info)
    (a2-1 matrix)
    (a2-2 collide-overlap-result)
    (a2-3 matrix)
    (a2-4 collide-overlap-result)
    (a2-5 matrix)
    (a2-6 collide-overlap-result)
    (a2-7 matrix)
    (s0-0 matrix)
    (s0-1 matrix)
    (s0-2 matrix)
    (s0-3 matrix)
    (s1-0 pull-rider-info)
    (s1-1 matrix)
    (s1-2 collide-overlap-result)
    (s1-3 matrix)
    (s1-4 collide-overlap-result)
    (s1-5 matrix)
    (s1-6 collide-overlap-result)
    (s1-7 matrix)
    (s2-0 basic)
    (s2-1 basic)
    (s2-2 basic)
    (s2-3 basic)
    (s3-0 connectable)
    (s3-1 connectable)
    (s3-2 connectable)
    (s3-3 connectable)
    (s4-0 collide-kind)
    (s4-1 collide-sticky-rider)
    (s4-2 collide-sticky-rider)
    (s4-3 collide-sticky-rider)
    (s4-4 collide-sticky-rider)
    (s5-0 collide-sticky-rider-group)
    (t9-0 (function collide-shape collide-shape collide-overlap-result symbol))
    (t9-1 (function collide-sticky-rider-group process-drawable collide-sticky-rider))
    (t9-2 (function matrix float))
    (t9-3 (function matrix matrix matrix))
    (t9-4 (function vector vector matrix vector))
    (t9-5 (function process-tree event-message-block object))
    (t9-6 (function collide-shape collide-shape collide-overlap-result symbol))
    (t9-7 (function collide-sticky-rider-group process-drawable collide-sticky-rider))
    (t9-8 (function matrix float))
    (t9-9 (function matrix matrix matrix))
    (t9-10 (function vector vector matrix vector))
    (t9-11 (function process-tree event-message-block object))
    (t9-12 (function collide-shape collide-shape collide-overlap-result symbol))
    (t9-13 (function collide-sticky-rider-group process-drawable collide-sticky-rider))
    (t9-14 (function matrix float))
    (t9-15 (function matrix matrix matrix))
    (t9-16 (function vector vector matrix vector))
    (t9-17 (function process-tree event-message-block object))
    (t9-18 (function collide-shape collide-shape collide-overlap-result symbol))
    (t9-19 (function collide-sticky-rider-group process-drawable collide-sticky-rider))
    (t9-20 (function matrix float))
    (t9-21 (function matrix matrix matrix))
    (t9-22 (function vector vector matrix vector))
    (t9-23 (function process-tree event-message-block object))
    (f0-0 float)
    (f0-1 float)
    (f0-2 float)
    (f0-3 float)
    )
  (with-pp
    (when s5-0
      (set! v1-0 *collide-mesh-cache*)
      (set! a0-1 (-> v1-0 id))
      (set! (-> v1-0 used-size) (the-as uint 0))
      (set! a0-2 (the-as int (+ a0-1 1)))
      (bl! (zero? (the-as uint a0-2)) L18 (no-delay!))
      (set! a0-2 1)
      (when (begin
              (when (begin
                      (label cfg-3)
                      (set! (-> v1-0 id) (the-as uint a0-2))
                      (set! v1-1 s5-0)
                      (set! (-> v1-1 num-riders) 0)
                      (set! v1-2 0)
                      (set! v1-3 (-> obj root-prim))
                      (set! s4-0 (-> v1-3 collide-with))
                      (set! v1-4 (logand s4-0 16))
                      (nonzero? v1-4)
                      )
                (set! v1-6 *collide-player-list*)
                (set! v1-7 (-> v1-6 alive-list next0))
                (set! a0-3 *collide-player-list*)
                (set! a0-4 v1-7)
                (set! s3-0 (-> a0-4 next0))
                (while (begin (set! a0-20 *collide-player-list*) (set! a0-21 (-> a0-20 alive-list-end)) (!= v1-7 a0-21))
                  (when (begin
                          (set! s2-0 (-> (the-as connection v1-7) param1))
                          (set! v1-8 (-> (the-as collide-shape s2-0) root-prim))
                          (set! a0-5 (-> v1-8 prim-core collide-as))
                          (set! a0-6 (logand s4-0 a0-5))
                          (nonzero? a0-6)
                          )
                    (when (begin
                            (and (begin (set! v1-9 (-> v1-8 prim-core action)) (set! v1-10 (logand v1-9 4)) (nonzero? v1-10))
                                 (begin
                                   (set! v1-12 (-> obj process))
                                   (set! a0-8 (-> (the-as collide-shape s2-0) process))
                                   (set! v1-11 (!= v1-12 a0-8))
                                   )
                                 )
                            v1-11
                            )
                      (when (begin
                              (set! s1-0 (new 'stack-no-clear 'pull-rider-info))
                              (set! a0-9 obj)
                              (set! v1-14 (-> a0-9 type))
                              (set! t9-0 (method-of-type v1-14 dummy-39))
                              (set! a1-0 s2-0)
                              (set! a2-0 s1-0)
                              (set! v0-1 (call! a0-9 a1-0 a2-0))
                              (set! v1-15 v0-1)
                              v1-15
                              )
                        (when (begin
                                (if (begin
                                      (set! a0-10 s5-0)
                                      (set! v1-17 (-> a0-10 type))
                                      (set! t9-1 (method-of-type v1-17 add-rider!))
                                      (set! a1-1 (-> (the-as collide-shape s2-0) process))
                                      a1-1
                                      )
                                    (set! v1-18 (-> a1-1 ppointer))
                                    )
                                (set! a1-2 (-> v1-18 0))
                                (set! a1-3 (-> a1-2 pid))
                                (set! a1-4 (sll a1-3 32))
                                (.sllv v1-19 v1-18 r0-0)
                                (set! a1-5 (logior a1-4 v1-19))
                                (set! v0-2 (call! a0-10 a1-5))
                                (set! s4-1 v0-2)
                                s4-1
                                )
                          (set! a0-11 (-> s1-0 rider-cshape))
                          (set! (-> s4-1 sticky-prim) a0-11)
                          (set! v1-21 (-> obj process))
                          (set! v1-22 (-> v1-21 node-list))
                          (set! a0-12 (-> a0-11 transform-index))
                          (set! a0-13 (sll a0-12 5))
                          (set! v1-23 (+ v1-22 a0-13))
                          (set! v1-24 (dynamic-array-field-access v1-23 data PLACEHOLDER bone))
                          (set! s1-1 (-> v1-24 transform))
                          (set! t9-2 matrix-y-angle)
                          (set! a0-14 s1-1)
                          (set! v0-3 (call! a0-14))
                          (set! f0-0 (gpr->fpr v0-3))
                          (set! (-> s4-1 prim-ry) f0-0)
                          (set! s0-0 (new 'stack-no-clear 'matrix))
                          (set! t9-3 matrix-4x4-inverse!)
                          (set! a0-15 s0-0)
                          (set! a1-6 s1-1)
                          (call! a0-15 a1-6)
                          (set! t9-4 vector-matrix*!)
                          (set! a0-16 (-> s4-1 rider-local-pos))
                          (set! a1-7 (-> (the-as collide-shape s2-0) trans))
                          (set! a2-1 s0-0)
                          (call! a0-16 a1-7 a2-1)
                          (set! v1-25 v0-5)
                          (set! a1-8 (new 'stack-no-clear 'event-message-block))
                          (set! (-> a1-8 from) pp)
                          (set! v1-26 1)
                          (set! (-> a1-8 num-params) v1-26)
                          (set! v1-27 'ridden)
                          (set! (-> a1-8 message) v1-27)
                          (set! (-> a1-8 param 0) (the-as uint s4-1))
                          (set! t9-5 send-event-function)
                          (set! a0-17 (-> obj process))
                          (call! a0-17 a1-8)
                          (set! v1-28 v0-6)
                          )
                        (set! v1-29 (-> obj root-prim))
                        (set! s4-0 (-> v1-29 collide-with))
                        (set! v1-30 s4-0)
                        )
                      )
                    )
                  (set! v1-7 s3-0)
                  (set! a0-18 *collide-player-list*)
                  (set! a0-19 (-> s3-0 next0))
                  (set! s3-0 a0-19)
                  )
                )
              (set! v1-33 (logand s4-0 14))
              (nonzero? v1-33)
              )
        (when (begin
                (when (begin (set! v1-34 (logand s4-0 2)) (nonzero? v1-34))
                  (set! v1-36 *collide-hit-by-player-list*)
                  (set! v1-37 (-> v1-36 alive-list next0))
                  (set! a0-22 *collide-hit-by-player-list*)
                  (set! a0-23 v1-37)
                  (set! s3-1 (-> a0-23 next0))
                  (while (begin (set! a0-39 *collide-hit-by-player-list*) (set! a0-40 (-> a0-39 alive-list-end)) (!= v1-37 a0-40))
                    (when (begin
                            (set! s2-1 (-> (the-as connection v1-37) param1))
                            (set! v1-38 (-> (the-as collide-shape s2-1) root-prim))
                            (set! a0-24 (-> v1-38 prim-core collide-as))
                            (set! a0-25 (logand s4-0 a0-24))
                            (nonzero? a0-25)
                            )
                      (when (begin
                              (and (begin (set! v1-39 (-> v1-38 prim-core action)) (set! v1-40 (logand v1-39 4)) (nonzero? v1-40))
                                   (begin
                                     (set! v1-42 (-> obj process))
                                     (set! a0-27 (-> (the-as collide-shape s2-1) process))
                                     (set! v1-41 (!= v1-42 a0-27))
                                     )
                                   )
                              v1-41
                              )
                        (when (begin
                                (set! s1-2 (new 'stack-no-clear 'collide-overlap-result))
                                (set! a0-28 obj)
                                (set! v1-44 (-> a0-28 type))
                                (set! t9-6 (method-of-type v1-44 dummy-39))
                                (set! a1-9 s2-1)
                                (set! a2-2 s1-2)
                                (set! v0-7 (call! a0-28 a1-9 a2-2))
                                (set! v1-45 v0-7)
                                v1-45
                                )
                          (when (begin
                                  (if (begin
                                        (set! a0-29 s5-0)
                                        (set! v1-47 (-> a0-29 type))
                                        (set! t9-7 (method-of-type v1-47 add-rider!))
                                        (set! a1-10 (-> (the-as collide-shape s2-1) process))
                                        a1-10
                                        )
                                      (set! v1-48 (-> a1-10 ppointer))
                                      )
                                  (set! a1-11 (-> v1-48 0))
                                  (set! a1-12 (-> a1-11 pid))
                                  (set! a1-13 (sll a1-12 32))
                                  (.sllv v1-49 v1-48 r0-0)
                                  (set! a1-14 (logior a1-13 v1-49))
                                  (set! v0-8 (call! a0-29 a1-14))
                                  (set! s4-2 v0-8)
                                  s4-2
                                  )
                            (set! a0-30 (-> s1-2 best-from-prim))
                            (set! (-> s4-2 sticky-prim) a0-30)
                            (set! v1-51 (-> obj process))
                            (set! v1-52 (-> v1-51 node-list))
                            (set! a0-31 (-> a0-30 transform-index))
                            (set! a0-32 (sll a0-31 5))
                            (set! v1-53 (+ v1-52 a0-32))
                            (set! v1-54 (dynamic-array-field-access v1-53 data PLACEHOLDER bone))
                            (set! s1-3 (-> v1-54 transform))
                            (set! t9-8 matrix-y-angle)
                            (set! a0-33 s1-3)
                            (set! v0-9 (call! a0-33))
                            (set! f0-1 (gpr->fpr v0-9))
                            (set! (-> s4-2 prim-ry) f0-1)
                            (set! s0-1 (new 'stack-no-clear 'matrix))
                            (set! t9-9 matrix-4x4-inverse!)
                            (set! a0-34 s0-1)
                            (set! a1-15 s1-3)
                            (call! a0-34 a1-15)
                            (set! t9-10 vector-matrix*!)
                            (set! a0-35 (-> s4-2 rider-local-pos))
                            (set! a1-16 (-> (the-as collide-shape s2-1) trans))
                            (set! a2-3 s0-1)
                            (call! a0-35 a1-16 a2-3)
                            (set! v1-55 v0-11)
                            (set! a1-17 (new 'stack-no-clear 'event-message-block))
                            (set! (-> a1-17 from) pp)
                            (set! v1-56 1)
                            (set! (-> a1-17 num-params) v1-56)
                            (set! v1-57 'ridden)
                            (set! (-> a1-17 message) v1-57)
                            (set! (-> a1-17 param 0) (the-as uint s4-2))
                            (set! t9-11 send-event-function)
                            (set! a0-36 (-> obj process))
                            (call! a0-36 a1-17)
                            (set! v1-58 v0-12)
                            )
                          (set! v1-59 (-> obj root-prim))
                          (set! s4-0 (-> v1-59 collide-with))
                          (set! v1-60 s4-0)
                          )
                        )
                      )
                    (set! v1-37 s3-1)
                    (set! a0-37 *collide-hit-by-player-list*)
                    (set! a0-38 (-> s3-1 next0))
                    (set! s3-1 a0-38)
                    )
                  )
                (set! v1-63 (logand s4-0 4))
                (nonzero? v1-63)
                )
          (set! v1-65 *collide-usually-hit-by-player-list*)
          (set! v1-66 (-> v1-65 alive-list next0))
          (set! a0-41 *collide-usually-hit-by-player-list*)
          (set! a0-42 v1-66)
          (set! s3-2 (-> a0-42 next0))
          (while (begin
                   (set! a0-58 *collide-usually-hit-by-player-list*)
                   (set! a0-59 (-> a0-58 alive-list-end))
                   (!= v1-66 a0-59)
                   )
            (when (begin
                    (set! s2-2 (-> (the-as connection v1-66) param1))
                    (set! v1-67 (-> (the-as collide-shape s2-2) root-prim))
                    (set! a0-43 (-> v1-67 prim-core collide-as))
                    (set! a0-44 (logand s4-0 a0-43))
                    (nonzero? a0-44)
                    )
              (when (begin
                      (and (begin (set! v1-68 (-> v1-67 prim-core action)) (set! v1-69 (logand v1-68 4)) (nonzero? v1-69))
                           (begin
                             (set! v1-71 (-> obj process))
                             (set! a0-46 (-> (the-as collide-shape s2-2) process))
                             (set! v1-70 (!= v1-71 a0-46))
                             )
                           )
                      v1-70
                      )
                (when (begin
                        (set! s1-4 (new 'stack-no-clear 'collide-overlap-result))
                        (set! a0-47 obj)
                        (set! v1-73 (-> a0-47 type))
                        (set! t9-12 (method-of-type v1-73 dummy-39))
                        (set! a1-18 s2-2)
                        (set! a2-4 s1-4)
                        (set! v0-13 (call! a0-47 a1-18 a2-4))
                        (set! v1-74 v0-13)
                        v1-74
                        )
                  (when (begin
                          (if (begin
                                (set! a0-48 s5-0)
                                (set! v1-76 (-> a0-48 type))
                                (set! t9-13 (method-of-type v1-76 add-rider!))
                                (set! a1-19 (-> (the-as collide-shape s2-2) process))
                                a1-19
                                )
                              (set! v1-77 (-> a1-19 ppointer))
                              )
                          (set! a1-20 (-> v1-77 0))
                          (set! a1-21 (-> a1-20 pid))
                          (set! a1-22 (sll a1-21 32))
                          (.sllv v1-78 v1-77 r0-0)
                          (set! a1-23 (logior a1-22 v1-78))
                          (set! v0-14 (call! a0-48 a1-23))
                          (set! s4-3 v0-14)
                          s4-3
                          )
                    (set! a0-49 (-> s1-4 best-from-prim))
                    (set! (-> s4-3 sticky-prim) a0-49)
                    (set! v1-80 (-> obj process))
                    (set! v1-81 (-> v1-80 node-list))
                    (set! a0-50 (-> a0-49 transform-index))
                    (set! a0-51 (sll a0-50 5))
                    (set! v1-82 (+ v1-81 a0-51))
                    (set! v1-83 (dynamic-array-field-access v1-82 data PLACEHOLDER bone))
                    (set! s1-5 (-> v1-83 transform))
                    (set! t9-14 matrix-y-angle)
                    (set! a0-52 s1-5)
                    (set! v0-15 (call! a0-52))
                    (set! f0-2 (gpr->fpr v0-15))
                    (set! (-> s4-3 prim-ry) f0-2)
                    (set! s0-2 (new 'stack-no-clear 'matrix))
                    (set! t9-15 matrix-4x4-inverse!)
                    (set! a0-53 s0-2)
                    (set! a1-24 s1-5)
                    (call! a0-53 a1-24)
                    (set! t9-16 vector-matrix*!)
                    (set! a0-54 (-> s4-3 rider-local-pos))
                    (set! a1-25 (-> (the-as collide-shape s2-2) trans))
                    (set! a2-5 s0-2)
                    (call! a0-54 a1-25 a2-5)
                    (set! v1-84 v0-17)
                    (set! a1-26 (new 'stack-no-clear 'event-message-block))
                    (set! (-> a1-26 from) pp)
                    (set! v1-85 1)
                    (set! (-> a1-26 num-params) v1-85)
                    (set! v1-86 'ridden)
                    (set! (-> a1-26 message) v1-86)
                    (set! (-> a1-26 param 0) (the-as uint s4-3))
                    (set! t9-17 send-event-function)
                    (set! a0-55 (-> obj process))
                    (call! a0-55 a1-26)
                    (set! v1-87 v0-18)
                    )
                  (set! v1-88 (-> obj root-prim))
                  (set! s4-0 (-> v1-88 collide-with))
                  (set! v1-89 s4-0)
                  )
                )
              )
            (set! v1-66 s3-2)
            (set! a0-56 *collide-usually-hit-by-player-list*)
            (set! a0-57 (-> s3-2 next0))
            (set! s3-2 a0-57)
            )
          )
        (when (begin (set! v1-92 (logand s4-0 8)) (nonzero? v1-92))
          (set! v1-93 *collide-hit-by-others-list*)
          (set! v1-94 (-> v1-93 alive-list next0))
          (set! a0-60 *collide-hit-by-others-list*)
          (set! a0-61 v1-94)
          (set! s3-3 (-> a0-61 next0))
          (while (begin (set! a0-77 *collide-hit-by-others-list*) (set! a0-78 (-> a0-77 alive-list-end)) (!= v1-94 a0-78))
            (when (begin
                    (set! s2-3 (-> (the-as connection v1-94) param1))
                    (set! v1-95 (-> (the-as collide-shape s2-3) root-prim))
                    (set! a0-62 (-> v1-95 prim-core collide-as))
                    (set! a0-63 (logand s4-0 a0-62))
                    (nonzero? a0-63)
                    )
              (when (begin
                      (and (begin (set! v1-96 (-> v1-95 prim-core action)) (set! v1-97 (logand v1-96 4)) (nonzero? v1-97))
                           (begin
                             (set! v1-99 (-> obj process))
                             (set! a0-65 (-> (the-as collide-shape s2-3) process))
                             (set! v1-98 (!= v1-99 a0-65))
                             )
                           )
                      v1-98
                      )
                (when (begin
                        (set! s1-6 (new 'stack-no-clear 'collide-overlap-result))
                        (set! a0-66 obj)
                        (set! v1-101 (-> a0-66 type))
                        (set! t9-18 (method-of-type v1-101 dummy-39))
                        (set! a1-27 s2-3)
                        (set! a2-6 s1-6)
                        (set! v0-19 (call! a0-66 a1-27 a2-6))
                        (set! v1-102 v0-19)
                        v1-102
                        )
                  (when (begin
                          (if (begin
                                (set! a0-67 s5-0)
                                (set! v1-104 (-> a0-67 type))
                                (set! t9-19 (method-of-type v1-104 add-rider!))
                                (set! a1-28 (-> (the-as collide-shape s2-3) process))
                                a1-28
                                )
                              (set! v1-105 (-> a1-28 ppointer))
                              )
                          (set! a1-29 (-> v1-105 0))
                          (set! a1-30 (-> a1-29 pid))
                          (set! a1-31 (sll a1-30 32))
                          (.sllv v1-106 v1-105 r0-0)
                          (set! a1-32 (logior a1-31 v1-106))
                          (set! v0-20 (call! a0-67 a1-32))
                          (set! s4-4 v0-20)
                          s4-4
                          )
                    (set! a0-68 (-> s1-6 best-from-prim))
                    (set! (-> s4-4 sticky-prim) a0-68)
                    (set! v1-108 (-> obj process))
                    (set! v1-109 (-> v1-108 node-list))
                    (set! a0-69 (-> a0-68 transform-index))
                    (set! a0-70 (sll a0-69 5))
                    (set! v1-110 (+ v1-109 a0-70))
                    (set! v1-111 (dynamic-array-field-access v1-110 data PLACEHOLDER bone))
                    (set! s1-7 (-> v1-111 transform))
                    (set! t9-20 matrix-y-angle)
                    (set! a0-71 s1-7)
                    (set! v0-21 (call! a0-71))
                    (set! f0-3 (gpr->fpr v0-21))
                    (set! (-> s4-4 prim-ry) f0-3)
                    (set! s0-3 (new 'stack-no-clear 'matrix))
                    (set! t9-21 matrix-4x4-inverse!)
                    (set! a0-72 s0-3)
                    (set! a1-33 s1-7)
                    (call! a0-72 a1-33)
                    (set! t9-22 vector-matrix*!)
                    (set! a0-73 (-> s4-4 rider-local-pos))
                    (set! a1-34 (-> (the-as collide-shape s2-3) trans))
                    (set! a2-7 s0-3)
                    (call! a0-73 a1-34 a2-7)
                    (set! v1-112 v0-23)
                    (set! a1-35 (new 'stack-no-clear 'event-message-block))
                    (set! (-> a1-35 from) pp)
                    (set! v1-113 1)
                    (set! (-> a1-35 num-params) v1-113)
                    (set! v1-114 'ridden)
                    (set! (-> a1-35 message) v1-114)
                    (set! (-> a1-35 param 0) (the-as uint s4-4))
                    (set! t9-23 send-event-function)
                    (set! a0-74 (-> obj process))
                    (call! a0-74 a1-35)
                    (set! v1-115 v0-24)
                    )
                  (set! v1-116 (-> obj root-prim))
                  (set! s4-0 (-> v1-116 collide-with))
                  (set! v1-117 s4-0)
                  )
                )
              )
            (set! v1-94 s3-3)
            (set! a0-75 *collide-hit-by-others-list*)
            (set! a0-76 (-> s3-3 next0))
            (set! s3-3 a0-76)
            )
          (set! v0-0 #f)
          )
        )
      )
    (ret-value v0-0)
    )
  )

;; definition for method 44 of type collide-shape
(defmethod dummy-44 collide-shape ((obj collide-shape))
  (let ((s5-0 (-> obj riders)))
    (when s5-0
      (let ((s4-0 (new 'stack-no-clear 'pull-rider-info)))
        (countdown (s3-0 (-> s5-0 num-riders))
          (let* ((v1-2 (-> s5-0 rider s3-0))
                 (a0-1 (-> v1-2 rider-handle))
                 )
            (when (handle->process a0-1)
              (set! (-> s4-0 rider) v1-2)
              (set! (-> s4-0 rider-cshape)
                    (the-as collide-shape-prim (-> (the-as process-drawable (-> a0-1 process 0)) root))
                    )
              (let ((a0-5 (-> v1-2 sticky-prim)))
                (when a0-5
                  (let ((s2-0 (-> obj process node-list data (-> a0-5 transform-index) bone transform)))
                    (let ((s1-0 (-> s4-0 rider-dest)))
                      (vector-matrix*! s1-0 (-> v1-2 rider-local-pos) s2-0)
                      (vector-float*! s1-0 s1-0 (/ 1.0 (-> s1-0 w)))
                      )
                    (set! (-> s4-0 rider-delta-ry) (deg- (matrix-y-angle s2-0) (-> s4-0 rider prim-ry)))
                    )
                  (dummy-43 obj s4-0)
                  )
                )
              )
            )
          )
        )
      #f
      )
    )
  )

;; definition for method 43 of type collide-shape
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for method 29 of type collide-shape
;; INFO: Return type mismatch object vs none.
(defmethod dummy-29 collide-shape ((obj collide-shape) (arg0 int))
  (if (-> obj riders)
      (format 0 "ERROR: colide-shape::alloc-riders is being called multiple times!~%")
      (set! (-> obj riders) (new 'process 'collide-sticky-rider-group arg0))
      )
  (none)
  )
