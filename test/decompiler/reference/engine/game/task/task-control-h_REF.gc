;;-*-Lisp-*-
(in-package goal)

;; definition of type task-cstage
(deftype task-cstage (structure)
  ((game-task uint8   :offset-assert 0)
   (status    uint64  :offset-assert 8)
   (flags     uint8   :offset-assert 16)
   (condition basic   :offset-assert 20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    )
  )

;; definition for method 3 of type task-cstage
(defmethod inspect task-cstage ((obj task-cstage))
  (format #t "[~8x] ~A~%" obj 'task-cstage)
  (format #t "~Tgame-task: ~D~%" (-> obj game-task))
  (format #t "~Tstatus: ~D~%" (-> obj status))
  (format #t "~Tflags: ~D~%" (-> obj flags))
  (format #t "~Tcondition: ~A~%" (-> obj condition))
  obj
  )

;; definition of type task-control
(deftype task-control (basic)
  ((current-stage int16  :offset-assert 4)
   (stage         basic  :offset-assert 8)
   )
  :method-count-assert 19
  :size-assert         #xc
  :flag-assert         #x130000000c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    )
  )

;; definition for method 3 of type task-control
(defmethod inspect task-control ((obj task-control))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tcurrent-stage: ~D~%" (-> obj current-stage))
  (format #t "~Tstage: ~A~%" (-> obj stage))
  obj
  )

;; definition of type ambient-control
(deftype ambient-control (structure)
  ((last-ambient-time uint64  :offset-assert 0)
   (last-ambient      basic   :offset-assert 8)
   (last-ambient-id   uint32  :offset-assert 12)
   )
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; definition for method 3 of type ambient-control
(defmethod inspect ambient-control ((obj ambient-control))
  (format #t "[~8x] ~A~%" obj 'ambient-control)
  (format #t "~Tlast-ambient-time: ~D~%" (-> obj last-ambient-time))
  (format #t "~Tlast-ambient: ~A~%" (-> obj last-ambient))
  (format #t "~Tlast-ambient-id: ~D~%" (-> obj last-ambient-id))
  obj
  )

;; definition of type process-taskable
(deftype process-taskable (process-drawable)
  ((tasks                basic                   :offset-assert 176)
   (query                gui-query       :inline :offset-assert 180)
   (old-target-pos       transformq      :inline :offset-assert 208)
   (cell-for-task        uint8                   :offset-assert 256)
   (cell-x               uint64                  :offset-assert 264)
   (cam-joint-index      int32                   :offset-assert 272)
   (skippable            basic                   :offset-assert 276)
   (blend-on-exit        basic                   :offset-assert 280)
   (camera               uint64                  :offset-assert 288)
   (will-talk            basic                   :offset-assert 296)
   (talk-message         uint32                  :offset-assert 300)
   (last-talk            uint64                  :offset-assert 304)
   (bounce-away          basic                   :offset-assert 312)
   (ambient              ambient-control :inline :offset-assert 320)
   (center-joint-index   int32                   :offset-assert 336)
   (draw-bounds-y-offset float                   :offset-assert 340)
   (neck-joint-index     int32                   :offset-assert 344)
   (fuel-cell-anim       basic                   :offset-assert 348)
   (sound-flava          uint8                   :offset-assert 352)
   (have-flava           basic                   :offset-assert 356)
   (music                basic                   :offset-assert 360)
   (have-music           basic                   :offset-assert 364)
   (been-kicked          basic                   :offset-assert 368)
   (cur-trans-hook       basic                   :offset-assert 372)
   (shadow-backup        basic                   :offset-assert 376)
   )
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x17c
  :flag-assert         #x350110017c
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    )
  )

;; definition for method 3 of type process-taskable
(defmethod inspect process-taskable ((obj process-taskable))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Ttasks: ~A~%" (-> obj tasks))
  (format #t "~T~Tquery: #<gui-query @ #x~X>~%" (&-> obj stack 68))
  (format #t "~T~Told-target-pos: #<transformq @ #x~X>~%" (&-> obj stack 96))
  (format #t "~T~Tcell-for-task: ~D~%" (-> obj stack 144))
  (format #t "~T~Tcell-x: ~D~%" (-> obj cell-x))
  (format #t "~T~Tcam-joint-index: ~D~%" (-> obj cam-joint-index))
  (format #t "~T~Tskippable: ~A~%" (-> obj skippable))
  (format #t "~T~Tblend-on-exit: ~A~%" (-> obj blend-on-exit))
  (format #t "~T~Tcamera: ~D~%" (-> obj camera))
  (format #t "~T~Twill-talk: ~A~%" (-> obj will-talk))
  (format #t "~T~Ttalk-message: ~D~%" (-> obj talk-message))
  (format #t "~T~Tlast-talk: ~D~%" (-> obj last-talk))
  (format #t "~T~Tbounce-away: ~A~%" (-> obj bounce-away))
  (format #t "~T~Tambient: #<ambient-control @ #x~X>~%" (&-> obj stack 208))
  (format #t "~T~Tcenter-joint-index: ~D~%" (-> obj center-joint-index))
  (format #t "~T~Tdraw-bounds-y-offset: ~f~%" (-> obj draw-bounds-y-offset))
  (format #t "~T~Tneck-joint-index: ~D~%" (-> obj neck-joint-index))
  (format #t "~T~Tfuel-cell-anim: ~A~%" (-> obj fuel-cell-anim))
  (format #t "~T~Tsound-flava: ~D~%" (-> obj stack 240))
  (format #t "~T~Thave-flava: ~A~%" (-> obj have-flava))
  (format #t "~T~Tmusic: ~A~%" (-> obj music))
  (format #t "~T~Thave-music: ~A~%" (-> obj have-music))
  (format #t "~T~Tbeen-kicked: ~A~%" (-> obj been-kicked))
  (format #t "~T~Tcur-trans-hook: ~A~%" (-> obj cur-trans-hook))
  (format #t "~T~Tshadow-backup: ~A~%" (-> obj shadow-backup))
  obj
  )

;; failed to figure out what this is:
(let ((v0-8 0))
  )
