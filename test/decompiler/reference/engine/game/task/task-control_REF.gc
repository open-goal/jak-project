;;-*-Lisp-*-
(in-package goal)

;; definition (debug) for function task-status->string
(defun-debug task-status->string ((arg0 int))
  (let ((v1-0 arg0))
   (cond
    ((= v1-0 7)
     "need-resolution"
     )
    ((= v1-0 6)
     "need-reward-speech"
     )
    ((= v1-0 5)
     "need-reminder"
     )
    ((= v1-0 4)
     "need-reminder-a"
     )
    ((= v1-0 3)
     "need-introduction"
     )
    ((= v1-0 2)
     "need-hint"
     )
    ((= v1-0 1)
     "unknown"
     )
    ((zero? v1-0)
     "invalid"
     )
    (else
     "*unknown*"
     )
    )
   )
  )

;; definition for method 9 of type task-cstage
;; INFO: Return type mismatch game-task vs uint.
(defmethod get-game-task task-cstage ((obj task-cstage))
  (the-as uint (-> obj game-task))
  )

;; definition for method 10 of type task-cstage
;; INFO: Return type mismatch task-status vs uint.
(defmethod get-task-status task-cstage ((obj task-cstage))
  (the-as uint (-> obj status))
  )

;; definition for method 12 of type task-cstage
(defmethod first-flag-bit? task-cstage ((obj task-cstage))
  (nonzero? (logand (-> obj flags) 1))
  )

;; definition for method 13 of type task-cstage
(defmethod third-flag-bit? task-cstage ((obj task-cstage))
  (nonzero? (logand (-> obj flags) 4))
  )

;; definition for method 11 of type task-cstage
(defmethod TODO-RENAME-11 task-cstage ((obj task-cstage) (arg0 task-control))
  (let ((a0-1 obj))
   (cond
    ((nonzero? (logand (-> a0-1 flags) 1))
     #f
     )
    ((>=
      (the-as
       int
       (-> (dummy-13 *game-info* (the-as uint (-> obj game-task))) user-uint8 0)
       )
      (the-as int (-> obj status))
      )
     (set! (-> obj flags) (logior (-> obj flags) 1))
     #f
     )
    ((let ((t9-1 (method-of-object *game-info* dummy-11)))
      (-> obj game-task)
      (t9-1)
      )
     (set! (-> obj flags) (logior (-> obj flags) 1))
     #f
     )
    (else
     ((-> obj condition) arg0)
     )
    )
   )
  )

;; definition for method 14 of type task-cstage
(defmethod TODO-RENAME-14 task-cstage ((obj task-cstage))
  (if (= (-> obj game-task) (game-task none))
   (return (the-as int #f))
   )
  (set! (-> obj flags) (logior (-> obj flags) 1))
  (when (nonzero? (logand (-> obj flags) 2))
   (let ((v1-9 (dummy-13 *game-info* (the-as uint (-> obj game-task)))))
    (set!
     (-> v1-9 status)
     (logior (-> v1-9 status) (entity-perm-status unknown))
     )
    (if (< (-> v1-9 user-uint8 0) (the-as uint (-> obj status)))
     (set! (-> v1-9 user-int8 0) (the-as int (-> obj status)))
     )
    )
   )
  0
  )

;; definition for method 15 of type task-cstage
(defmethod clear-all-but-first-flag-bit task-cstage ((obj task-cstage))
  (set! (-> obj flags) (logand -2 (the-as int (-> obj flags))))
  0
  )

;; definition for symbol *null-task-control*, type task-control
(define
  *null-task-control*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new 'static 'boxed-array :type task-cstage :length 0 :allocated-length 0)
   )
  )

;; definition for method 9 of type task-control
(defmethod current-task task-control ((obj task-control))
  (the-as int (cond
               ((= obj *null-task-control*)
                (format
                 0
                 "ERROR<GMJ>: current-task received *null-task-control*~%"
                 )
                0
                )
               ((= (-> obj current-stage) -1)
                0
                )
               (else
                (the-as int (-> obj stage (-> obj current-stage) game-task))
                )
               )
   )
  )

;; definition for method 10 of type task-control
(defmethod current-status task-control ((obj task-control))
  (the-as int (cond
               ((= obj *null-task-control*)
                (format
                 0
                 "ERROR<GMJ>: current-status received self of *null-task-control*~%~%"
                 )
                0
                )
               ((= (-> obj current-stage) -1)
                0
                )
               (else
                (the-as int (-> obj stage (-> obj current-stage) status))
                )
               )
   )
  )

;; definition for method 11 of type task-control
;; INFO: Return type mismatch int vs none.
(defmethod close-current! task-control ((obj task-control))
  (cond
   ((= obj *null-task-control*)
    (format
     0
     "ERROR<GMJ>: close-current! received self of *null-task-control*~%~%"
     )
    )
   ((= (-> obj current-stage) -1)
    )
   (else
    (TODO-RENAME-14 (-> obj stage (-> obj current-stage)))
    )
   )
  (first-any obj #t)
  (none)
  )

;; definition for method 12 of type task-control
(defmethod close-status! task-control ((obj task-control) (arg0 int))
  (let ((a0-2 (current-task obj)))
   (dotimes (v1-1 (-> obj stage length))
    (when
     (and
      (= a0-2 (-> obj stage v1-1 game-task))
      (= arg0 (-> obj stage v1-1 status))
      )
     (TODO-RENAME-14 (-> obj stage v1-1))
     (return (first-any obj #t))
     )
    )
   (format
    0
    "ERROR<GMJ>: close-status! received non-existent task-cstage(~S ~S)--returning #t.~%"
    (game-task->string a0-2)
    (task-status->string arg0)
    )
   )
  0
  )

;; definition for method 13 of type task-control
(defmethod first-any task-control ((obj task-control) (arg0 symbol))
  (when (= obj *null-task-control*)
   (if arg0
    (format 0 "ERROR<GMJ>: first-any received self of *null-task-control*~%~%")
    )
   (return 0)
   )
  (dotimes (s5-0 (-> obj stage length))
   (when (TODO-RENAME-11 (-> obj stage s5-0) obj)
    (set! (-> obj current-stage) s5-0)
    (return (the-as int (-> obj stage s5-0 game-task)))
    )
   )
  (set! (-> obj current-stage) -1)
  0
  )

;; definition for method 14 of type task-control
(defmethod reset! task-control ((obj task-control) (arg0 symbol) (arg1 symbol))
  (when (= obj *null-task-control*)
   (if arg1
    (format 0 "ERROR<GMJ>: reset! received self of *null-task-control*~%~%")
    )
   (return 0)
   )
  (dotimes (s4-0 (-> obj stage length))
   (if (or (= arg0 'game) (let ((a0-4 (-> obj stage s4-0)))
                           (not (nonzero? (logand (-> a0-4 flags) 4)))
                           )
        )
    (clear-all-but-first-flag-bit (-> obj stage s4-0))
    )
   (let ((a0-10 (-> obj stage s4-0)))
    (if (nonzero? (logand (-> a0-10 flags) 1))
     (TODO-RENAME-14 (-> obj stage s4-0))
     )
    )
   )
  (the-as int #f)
  )

;; definition for method 15 of type task-control
(defmethod closed? task-control ((obj task-control) (arg0 int) (arg1 int))
  (when (= obj *null-task-control*)
   (format 0 "ERROR<GMJ>: closed? received self of *null-task-control*~%~%")
   (return #f)
   )
  (dotimes (v1-3 (-> obj stage length))
   (when
    (and
     (= arg0 (-> obj stage v1-3 game-task))
     (= arg1 (-> obj stage v1-3 status))
     )
    (let ((a0-3 (-> obj stage v1-3)))
     (return (nonzero? (logand (-> a0-3 flags) 1)))
     )
    )
   )
  (format
   0
   "ERROR<GMJ>: closed? received non-existent task-cstage(~S ~S)--returning #t.~%"
   (game-task->string arg0)
   (task-status->string arg1)
   )
  #t
  )

;; definition for method 18 of type task-control
(defmethod exists? task-control ((obj task-control) (arg0 int) (arg1 int))
  (when (= obj *null-task-control*)
   (format 0 "ERROR<GMJ>: exists? received self of *null-task-control*~%~%")
   (return #f)
   )
  (dotimes (v1-3 (-> obj stage length))
   (if
    (and
     (= arg0 (-> obj stage v1-3 game-task))
     (= arg1 (-> obj stage v1-3 status))
     )
    (return #t)
    )
   )
  #f
  )

;; definition for method 16 of type task-control
(defmethod get-reminder task-control ((obj task-control) (arg0 int))
  (when (= obj *null-task-control*)
   (format
    0
    "ERROR<GMJ>: get-reminder received self of *null-task-control*~%~%"
    )
   (return 0)
   )
  (let ((v1-4 (dummy-13 *game-info* (the-as uint (-> obj stage 0 game-task)))))
   (the-as int (-> v1-4 user-uint8 (+ arg0 1)))
   )
  )

;; definition for method 17 of type task-control
(defmethod save-reminder task-control ((obj task-control) (arg0 int) (arg1 int))
  (when (= obj *null-task-control*)
   (format
    0
    "ERROR<GMJ>: save-reminder received self of *null-task-control*~%~%"
    )
   (return 0)
   )
  (let ((v1-4 (dummy-13 *game-info* (the-as uint (-> obj stage 0 game-task)))))
   (set!
    (-> v1-4 status)
    (logior (-> v1-4 status) (entity-perm-status unknown))
    )
   (set! (-> v1-4 user-int8 (+ arg1 1)) arg0)
   )
  0
  )

;; definition for symbol *assistant-tasks*, type task-control
(define
  *assistant-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 12 :allocated-length 12
    (new 'static 'task-cstage
     :game-task (game-task jungle-eggtop)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-eggtop)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-bike)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (or
        (closed? arg0 2 5)
        (and
         (closed? arg0 2 3)
         (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-2 from) pp)
          (set! (-> a1-2 num-params) 2)
          (set! (-> a1-2 message) 'query)
          (set! (-> a1-2 param 0) (the-as uint 'pickup))
          (set! (-> a1-2 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-2))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-bike)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (or
        (closed? arg0 2 5)
        (and
         (closed? arg0 2 3)
         (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-2 from) pp)
          (set! (-> a1-2 num-params) 2)
          (set! (-> a1-2 message) 'query)
          (set! (-> a1-2 param 0) (the-as uint 'pickup))
          (set! (-> a1-2 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-2))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-eggtop)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-bike)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-bike)
     :status (task-status need-reminder-a)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-bike)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :status (task-status unknown)
     :flags #x2
     :condition
     (lambda ((arg0 task-control)) (task-closed? 111 6))
     )
    (new 'static 'task-cstage
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-eggtop)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-bike)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *assistant-village2-tasks*, type task-control
(define
  *assistant-village2-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 22 :allocated-length 22
    (new 'static 'task-cstage
     :game-task (game-task village2-levitator)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-levitator)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-levitator)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-levitator)
     :status (task-status need-reminder-a)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-levitator)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                (set! (-> a1-0 from) pp)
                (set! (-> a1-0 num-params) 2)
                (set! (-> a1-0 message) 'query)
                (set! (-> a1-0 param 0) (the-as uint 'pickup))
                (set! (-> a1-0 param 1) (the-as uint 6))
                (>= (the int (send-event-function *target* a1-0)) 45)
                )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task sunken-room)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task sunken-room)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-flutflut)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (and
        (task-closed? 17 5)
        (or
         (closed? arg0 47 5)
         (and
          (closed? arg0 47 3)
          (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-4 from) pp)
           (set! (-> a1-4 num-params) 2)
           (set! (-> a1-4 message) 'query)
           (set! (-> a1-4 param 0) (the-as uint 'pickup))
           (set! (-> a1-4 param 1) (the-as uint 6))
           (>=
            (the int (send-event-function *target* a1-4))
            (+ (get-reminder arg0 1) 3)
            )
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-flutflut)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (and
        (task-closed? 17 5)
        (or
         (closed? arg0 47 5)
         (and
          (closed? arg0 47 3)
          (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-4 from) pp)
           (set! (-> a1-4 num-params) 2)
           (set! (-> a1-4 message) 'query)
           (set! (-> a1-4 param 0) (the-as uint 'pickup))
           (set! (-> a1-4 param 1) (the-as uint 6))
           (>=
            (the int (send-event-function *target* a1-4))
            (+ (get-reminder arg0 1) 3)
            )
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-robbers)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp (if (task-closed? 17 5)
                (or
                 (closed? arg0 37 5)
                 (and
                  (closed? arg0 37 3)
                  (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
                   (set! (-> a1-4 from) pp)
                   (set! (-> a1-4 num-params) 2)
                   (set! (-> a1-4 message) 'query)
                   (set! (-> a1-4 param 0) (the-as uint 'pickup))
                   (set! (-> a1-4 param 1) (the-as uint 6))
                   (>=
                    (the int (send-event-function *target* a1-4))
                    (+ (get-reminder arg0 1) 3)
                    )
                   )
                  )
                 )
                (or
                 (closed? arg0 47 5)
                 (and
                  (closed? arg0 47 3)
                  (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
                   (set! (-> a1-8 from) pp)
                   (set! (-> a1-8 num-params) 2)
                   (set! (-> a1-8 message) 'query)
                   (set! (-> a1-8 param 0) (the-as uint 'pickup))
                   (set! (-> a1-8 param 1) (the-as uint 6))
                   (>=
                    (the int (send-event-function *target* a1-8))
                    (+ (get-reminder arg0 1) 3)
                    )
                   )
                  )
                 )
                )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-robbers)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp (if (task-closed? 17 5)
                (or
                 (closed? arg0 37 5)
                 (and
                  (closed? arg0 37 3)
                  (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
                   (set! (-> a1-4 from) pp)
                   (set! (-> a1-4 num-params) 2)
                   (set! (-> a1-4 message) 'query)
                   (set! (-> a1-4 param 0) (the-as uint 'pickup))
                   (set! (-> a1-4 param 1) (the-as uint 6))
                   (>=
                    (the int (send-event-function *target* a1-4))
                    (+ (get-reminder arg0 1) 3)
                    )
                   )
                  )
                 )
                (or
                 (closed? arg0 47 5)
                 (and
                  (closed? arg0 47 3)
                  (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
                   (set! (-> a1-8 from) pp)
                   (set! (-> a1-8 num-params) 2)
                   (set! (-> a1-8 message) 'query)
                   (set! (-> a1-8 param 0) (the-as uint 'pickup))
                   (set! (-> a1-8 param 1) (the-as uint 6))
                   (>=
                    (the int (send-event-function *target* a1-8))
                    (+ (get-reminder arg0 1) 3)
                    )
                   )
                  )
                 )
                )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task sunken-room)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task sunken-room)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-flutflut)
     :status (task-status unknown)
     :condition
     (lambda ((arg0 task-control)) (task-closed? 17 5))
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-flutflut)
     :status (task-status need-reminder)
     :flags #x2
     :condition
     (lambda ((arg0 task-control)) (task-closed? 17 5))
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-robbers)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-robbers)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task sunken-room)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-robbers)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-flutflut)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-levitator)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *gambler-tasks*, type task-control
(define
  *gambler-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 10 :allocated-length 10
    (new 'static 'task-cstage
     :game-task (game-task rolling-race)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-race)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-gambler-money)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-gambler-money)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-race)
     :status (task-status need-resolution)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 52 6))
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-gambler-money)
     :status (task-status need-resolution)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 31 6))
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-race)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 52 5))
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-gambler-money)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-race)
     :status (task-status need-reminder)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 52 3))
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-gambler-money)
     :status (task-status need-reminder)
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 52 3))
     )
    )
   )
  )

;; definition for symbol *geologist-tasks*, type task-control
(define
  *geologist-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 10 :allocated-length 10
    (new 'static 'task-cstage
     :game-task (game-task rolling-moles)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-moles)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-geologist-money)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-geologist-money)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-moles)
     :status (task-status need-resolution)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 54 6))
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-geologist-money)
     :status (task-status need-resolution)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 32 6))
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-moles)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 54 5))
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-geologist-money)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-moles)
     :status (task-status need-reminder)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 54 3))
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-geologist-money)
     :status (task-status need-reminder)
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 54 3))
     )
    )
   )
  )

;; definition for symbol *mayor-tasks*, type task-control
(define
  *mayor-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 11 :allocated-length 11
    (new 'static 'task-cstage
     :game-task (game-task jungle-lurkerm)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-lurkerm)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-mayor-money)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-mayor-money)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-lurkerm)
     :status (task-status need-resolution)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 3 6))
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-mayor-money)
     :status (task-status need-resolution)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 11 6))
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-lurkerm)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 3 5))
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-mayor-money)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-lurkerm)
     :status (task-status need-reminder-a)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 3 3))
     )
    (new 'static 'task-cstage
     :game-task (game-task jungle-lurkerm)
     :status (task-status need-reminder)
     :flags #x2
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 3 3))
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-mayor-money)
     :status (task-status need-reminder)
     :condition
     (lambda ((arg0 task-control) (arg1 task-control)) (closed? arg0 3 3))
     )
    )
   )
  )

;; definition for symbol *sage-tasks*, type task-control
(define
  *sage-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 14 :allocated-length 14
    (new 'static 'task-cstage
     :game-task (game-task intro)
     :status (task-status need-introduction)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task intro)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task intro)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task beach-ecorocks)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task beach-ecorocks)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-cannon)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 15 5)
        (and
         (closed? arg0 15 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-cannon)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 15 5)
        (and
         (closed? arg0 15 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task beach-ecorocks)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-cannon)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-cannon)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :status (task-status unknown)
     :flags #x2
     :condition
     (lambda ((arg0 task-control)) (task-closed? 111 6))
     )
    (new 'static 'task-cstage
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task beach-ecorocks)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task misty-cannon)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *sage-bluehut-tasks*, type task-control
(define
  *sage-bluehut-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 10 :allocated-length 10
    (new 'static 'task-cstage
     :game-task (game-task rolling-plants)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-plants)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-arm)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 55 5)
        (and
         (closed? arg0 55 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-arm)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 55 5)
        (and
         (closed? arg0 55 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-plants)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-arm)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-arm)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task rolling-plants)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task swamp-arm)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *oracle-village1-tasks*, type task-control
(define
  *oracle-village1-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 10 :allocated-length 10
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money1)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money1)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money2)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money2)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money1)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-oracle-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money1)
     :status (task-status need-reminder)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money1)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money2)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-oracle-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money2)
     :status (task-status need-reminder)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village1-oracle-money2)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *oracle-village2-tasks*, type task-control
(define
  *oracle-village2-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 10 :allocated-length 10
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money1)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money1)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money2)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money2)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money1)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-oracle-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money1)
     :status (task-status need-reminder)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money1)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money2)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-oracle-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money2)
     :status (task-status need-reminder)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village2-oracle-money2)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *oracle-village3-tasks*, type task-control
(define
  *oracle-village3-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 10 :allocated-length 10
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money1)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money1)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money2)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money2)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money1)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-oracle-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money1)
     :status (task-status need-reminder)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money1)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money2)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-oracle-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money2)
     :status (task-status need-reminder)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-oracle-money2)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *miners-tasks*, type task-control
(define
  *miners-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 35 :allocated-length 35
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money1)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money1)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money2)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money2)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money3)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money3)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money4)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money4)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money1)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money2)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money3)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money4)
     :status (task-status need-reward-speech)
     :flags #x2
     :condition
     (lambda
      ((arg0 task-control))
      (with-pp
       (the-as
        symbol
        (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                       (set! (-> a1-0 from) pp)
                       (set! (-> a1-0 num-params) 2)
                       (set! (-> a1-0 message) 'query)
                       (set! (-> a1-0 param 0) (the-as uint 'pickup))
                       (set! (-> a1-0 param 1) (the-as uint 5))
                       (>=
                        ((the-as
                          (function process event-message-block float)
                          send-event-function
                          )
                         *target*
                         a1-0
                         )
                        (-> *GAME-bank* money-task-inc)
                        )
                       )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-gnawers)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 99 5)
        (and
         (closed? arg0 99 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-gnawers)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 99 5)
        (and
         (closed? arg0 99 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-eggtop)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 78 5)
        (and
         (closed? arg0 78 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-eggtop)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 78 5)
        (and
         (closed? arg0 78 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money1)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money1)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money2)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money2)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money3)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money3)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money4)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money4)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-gnawers)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-gnawers)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-eggtop)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-eggtop)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money1)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money2)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money3)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-miner-money4)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-gnawers)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-eggtop)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *sage-villagec-tasks*, type task-control
(define
  *sage-villagec-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 14 :allocated-length 14
    (new 'static 'task-cstage
     :game-task (game-task village3-button)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-button)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task village3-button)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-dark-crystals)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-dark-crystals)
     :status (task-status need-introduction)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-ram)
     :status (task-status need-hint)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 79 5)
        (and
         (closed? arg0 79 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-ram)
     :status (task-status need-introduction)
     :flags #x6
     :condition
     (lambda
      ((arg0 task-control) (arg1 task-control))
      (with-pp
       (or
        (closed? arg0 79 5)
        (and
         (closed? arg0 79 3)
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-3 from) pp)
          (set! (-> a1-3 num-params) 2)
          (set! (-> a1-3 message) 'query)
          (set! (-> a1-3 param 0) (the-as uint 'pickup))
          (set! (-> a1-3 param 1) (the-as uint 6))
          (>=
           (the int (send-event-function *target* a1-3))
           (+ (get-reminder arg0 1) 3)
           )
          )
         )
        )
       )
      )
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-dark-crystals)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-ram)
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-ram)
     :status (task-status need-reminder-a)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-ram)
     :status (task-status need-reminder)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :status (task-status unknown)
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task cave-dark-crystals)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task snow-ram)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *citb-greensage-tasks*, type task-control
(define
  *citb-greensage-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 2 :allocated-length 2
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-green)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-green)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *citb-bluesage-tasks*, type task-control
(define
  *citb-bluesage-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 2 :allocated-length 2
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-blue)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-blue)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *citb-redsage-tasks*, type task-control
(define
  *citb-redsage-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 2 :allocated-length 2
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-red)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-red)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *citb-yellowsage-tasks*, type task-control
(define
  *citb-yellowsage-tasks*
  (new 'static 'task-control
   :current-stage -1
   :stage
   (new
    'static
    'boxed-array
    :type task-cstage :length 2 :allocated-length 2
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-yellow)
     :status (task-status need-hint)
     :flags #x6
     :condition (lambda ((arg0 task-control)) #t)
     )
    (new 'static 'task-cstage
     :game-task (game-task citadel-sage-yellow)
     :status (task-status need-resolution)
     :flags #x2
     :condition (lambda ((arg0 task-control)) #t)
     )
    )
   )
  )

;; definition for symbol *task-controls*, type (array task-control)
(define
  *task-controls*
  (the-as (array task-control)
   (new
    'static
    'boxed-array
    :type basic :length 116 :allocated-length 116
    '*null-task-control*
    '*null-task-control*
    '*assistant-tasks*
    '*mayor-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task jungle-tower)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-tower)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-tower)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-tower)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 7 :allocated-length 7
      (new 'static 'task-cstage
       :game-task (game-task jungle-fishgame)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-fishgame)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-fishgame)
       :status (task-status need-reminder-a)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-fishgame)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-fishgame)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-fishgame)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :status (task-status need-reminder)
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task jungle-plant)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-plant)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-plant)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-plant)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task jungle-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task jungle-canyon-end)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-canyon-end)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-canyon-end)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-canyon-end)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task jungle-temple-door)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-temple-door)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-temple-door)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task jungle-temple-door)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 5 :allocated-length 5
      (new 'static 'task-cstage
       :game-task (game-task village1-yakow)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-yakow)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-yakow)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-yakow)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-yakow)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*mayor-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 5 :allocated-length 5
      (new 'static 'task-cstage
       :game-task (game-task village1-uncle-money)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-uncle-money)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-uncle-money)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition
       (lambda
        ((arg0 task-control))
        (with-pp
         (the-as
          symbol
          (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                         (set! (-> a1-0 from) pp)
                         (set! (-> a1-0 num-params) 2)
                         (set! (-> a1-0 message) 'query)
                         (set! (-> a1-0 param 0) (the-as uint 'pickup))
                         (set! (-> a1-0 param 1) (the-as uint 5))
                         (>=
                          ((the-as
                            (function process event-message-block float)
                            send-event-function
                            )
                           *target*
                           a1-0
                           )
                          (-> *GAME-bank* money-task-inc)
                          )
                         )
           )
          )
         )
        )
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-uncle-money)
       :status (task-status need-reminder)
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-uncle-money)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*oracle-village1-tasks*
    '*oracle-village1-tasks*
    '*sage-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task beach-pelican)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-pelican)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-pelican)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-pelican)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 5 :allocated-length 5
      (new 'static 'task-cstage
       :game-task (game-task beach-flutflut)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-flutflut)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-flutflut)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-flutflut)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-flutflut)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task beach-seagull)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-seagull)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-seagull)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-seagull)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task beach-cannon)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-cannon)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-cannon)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-cannon)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task beach-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task beach-gimmie)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-gimmie)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-gimmie)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-gimmie)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task beach-sentinel)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-sentinel)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-sentinel)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task beach-sentinel)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 5 :allocated-length 5
      (new 'static 'task-cstage
       :game-task (game-task misty-muse)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-muse)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-muse)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-muse)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-muse)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task misty-boat)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-boat)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-boat)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-boat)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task misty-warehouse)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-warehouse)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-warehouse)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-warehouse)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*sage-tasks*
    '*assistant-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task misty-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task misty-bike-jump)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-bike-jump)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-bike-jump)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-bike-jump)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task misty-eco-challenge)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-eco-challenge)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-eco-challenge)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task misty-eco-challenge)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*gambler-tasks*
    '*geologist-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 5 :allocated-length 5
      (new 'static 'task-cstage
       :game-task (game-task village2-warrior-money)
       :status (task-status need-hint)
       :flags #x6
       :condition
       (lambda
        ((arg0 task-control))
        (and (not (task-closed? 86 5)) (not (task-closed? 103 6)))
        )
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-warrior-money)
       :status (task-status need-introduction)
       :flags #x6
       :condition
       (lambda
        ((arg0 task-control))
        (and (not (task-closed? 86 5)) (not (task-closed? 103 6)))
        )
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-warrior-money)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition
       (lambda
        ((arg0 task-control))
        (with-pp
         (the-as
          symbol
          (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                         (set! (-> a1-0 from) pp)
                         (set! (-> a1-0 num-params) 2)
                         (set! (-> a1-0 message) 'query)
                         (set! (-> a1-0 param 0) (the-as uint 'pickup))
                         (set! (-> a1-0 param 1) (the-as uint 5))
                         (>=
                          ((the-as
                            (function process event-message-block float)
                            send-event-function
                            )
                           *target*
                           a1-0
                           )
                          (-> *GAME-bank* money-task-inc)
                          )
                         )
           )
          )
         )
        )
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-warrior-money)
       :status (task-status need-reminder)
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-warrior-money)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*oracle-village2-tasks*
    '*oracle-village2-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 6 :allocated-length 6
      (new 'static 'task-cstage
       :game-task (game-task swamp-billy)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-billy)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-billy)
       :status (task-status need-reminder-a)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-billy)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-billy)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-billy)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*assistant-village2-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task swamp-battle)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-battle)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-battle)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-battle)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-1)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-1)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-1)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-1)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-2)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-2)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-2)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-2)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-3)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-3)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-3)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-3)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-4)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-4)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-4)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-tether-4)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task swamp-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task swamp-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-platforms)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-platforms)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-platforms)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-platforms)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-pipe)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-pipe)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-pipe)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-pipe)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-slide)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-slide)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-slide)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-slide)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*assistant-village2-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-sharks)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-sharks)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-sharks)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-sharks)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-top-of-helix)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-top-of-helix)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-top-of-helix)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-top-of-helix)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task sunken-spinning-room)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-spinning-room)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-spinning-room)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task sunken-spinning-room)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*gambler-tasks*
    '*assistant-village2-tasks*
    '*geologist-tasks*
    '*sage-bluehut-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task rolling-lake)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-lake)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-lake)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-lake)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task rolling-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-1)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-1)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-1)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-1)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-2)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-2)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-2)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task rolling-ring-chase-2)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*miners-tasks*
    '*sage-villagec-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task snow-fort)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-fort)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-fort)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-fort)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task snow-ball)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-ball)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-ball)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-ball)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task snow-bunnies)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-bunnies)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-bunnies)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-bunnies)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task snow-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task snow-bumpers)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-bumpers)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-bumpers)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-bumpers)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task snow-cage)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-cage)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-cage)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task snow-cage)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-end)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-end)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-end)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-end)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*citb-greensage-tasks*
    '*citb-bluesage-tasks*
    '*citb-redsage-tasks*
    '*citb-yellowsage-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task village3-extra1)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village3-extra1)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village3-extra1)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village3-extra1)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task village1-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village1-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task village2-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village2-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task village3-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village3-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village3-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village3-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*miners-tasks*
    '*sage-villagec-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task cave-dark-climb)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-dark-climb)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-dark-climb)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-dark-climb)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task cave-robot-climb)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-robot-climb)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-robot-climb)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-robot-climb)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task cave-swing-poles)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-swing-poles)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-swing-poles)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-swing-poles)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task cave-spider-tunnel)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-spider-tunnel)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-spider-tunnel)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-spider-tunnel)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task cave-platforms)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-platforms)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-platforms)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-platforms)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task cave-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task cave-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task ogre-boss)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-boss)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-boss)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-boss)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task ogre-end)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-end)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-end)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-end)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task ogre-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task lavatube-end)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-end)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-end)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-end)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task lavatube-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task citadel-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task citadel-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task citadel-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task citadel-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task training-gimmie)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-gimmie)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-gimmie)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-gimmie)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task training-door)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-door)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-door)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-door)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task training-climb)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-climb)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-climb)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-climb)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task training-buzzer)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-buzzer)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-buzzer)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task training-buzzer)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*miners-tasks*
    '*miners-tasks*
    '*miners-tasks*
    '*miners-tasks*
    '*oracle-village3-tasks*
    '*oracle-village3-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 2 :allocated-length 2
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-assistant)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition
       (lambda
        ((arg0 task-control))
        (with-pp (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                  (set! (-> a1-0 from) pp)
                  (set! (-> a1-0 num-params) 2)
                  (set! (-> a1-0 message) 'query)
                  (set! (-> a1-0 param 0) (the-as uint 'pickup))
                  (set! (-> a1-0 param 1) (the-as uint 6))
                  (>= (the int (send-event-function *target* a1-0)) 20)
                  )
         )
        )
       )
      (new 'static 'task-cstage
       :game-task (game-task firecanyon-assistant)
       :status (task-status unknown)
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*assistant-village2-tasks*
    '*sage-bluehut-tasks*
    '*sage-villagec-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task red-eggtop)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task red-eggtop)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task red-eggtop)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task red-eggtop)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task lavatube-balls)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-balls)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-balls)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-balls)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 2 :allocated-length 2
      (new 'static 'task-cstage
       :game-task (game-task lavatube-start)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition
       (lambda
        ((arg0 task-control))
        (with-pp (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                  (set! (-> a1-0 from) pp)
                  (set! (-> a1-0 num-params) 2)
                  (set! (-> a1-0 message) 'query)
                  (set! (-> a1-0 param 0) (the-as uint 'pickup))
                  (set! (-> a1-0 param 1) (the-as uint 6))
                  (>= (the int (send-event-function *target* a1-0)) 72)
                  )
         )
        )
       )
      (new 'static 'task-cstage
       :game-task (game-task lavatube-start)
       :status (task-status unknown)
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    '*sage-tasks*
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 4 :allocated-length 4
      (new 'static 'task-cstage
       :game-task (game-task ogre-secret)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-secret)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-secret)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task ogre-secret)
       :status (task-status need-resolution)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 3 :allocated-length 3
      (new 'static 'task-cstage
       :game-task (game-task village4-button)
       :status (task-status unknown)
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village4-button)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task village4-button)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 5 :allocated-length 5
      (new 'static 'task-cstage
       :game-task (game-task finalboss-movies)
       :status (task-status unknown)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task finalboss-movies)
       :status (task-status need-introduction)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task finalboss-movies)
       :status (task-status need-reminder-a)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task finalboss-movies)
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task finalboss-movies)
       :status (task-status need-reward-speech)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 2 :allocated-length 2
      (new 'static 'task-cstage
       :game-task (game-task plunger-lurker-hit)
       :status (task-status unknown)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task plunger-lurker-hit)
       :status (task-status need-hint)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 2 :allocated-length 2
      (new 'static 'task-cstage
       :game-task (game-task leaving-misty)
       :status (task-status need-introduction)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      (new 'static 'task-cstage
       :game-task (game-task leaving-misty)
       :status (task-status need-reminder)
       :flags #x6
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    (new 'static 'task-control
     :current-stage -1
     :stage
     (new
      'static
      'boxed-array
      :type task-cstage :length 2 :allocated-length 2
      (new 'static 'task-cstage
       :status (task-status unknown)
       :flags #x2
       :condition
       (lambda ((arg0 task-control)) (task-closed? 111 6))
       )
      (new 'static 'task-cstage
       :status (task-status need-reminder)
       :flags #x2
       :condition (lambda ((arg0 task-control)) #t)
       )
      )
     )
    )
   )
  )

;; definition for function task-control-reset
;; INFO: Return type mismatch int vs none.
(defun task-control-reset ((arg0 symbol))
  (let ((s5-0 *task-controls*))
   (countdown (s4-0 (-> s5-0 length))
    (reset! (-> s5-0 s4-0) arg0 #f)
    (first-any (-> s5-0 s4-0) #f)
    )
   )
  0
  (none)
  )

;; definition for function get-task-control
(defun get-task-control ((arg0 int))
  (cond
   ((or
     (>= (the-as uint 1) (the-as uint arg0))
     (>= (the-as uint arg0) (the-as uint 116))
     )
    (format
     0
     "ERROR<GMJ>: get-task-control received invalid task ~D/~S~%"
     arg0
     (game-task->string arg0)
     )
    *null-task-control*
    )
   (else
    (-> *task-controls* arg0)
    )
   )
  )

;; definition for function get-task-status
(defun get-task-status ((arg0 task-control))
  (let ((gp-0 (get-task-control (the-as int arg0))))
   (when gp-0
    (dotimes (s5-0 (-> gp-0 stage length))
     (when
      (and
       (= arg0 (-> gp-0 stage s5-0 game-task))
       (TODO-RENAME-11 (-> gp-0 stage s5-0) gp-0)
       )
      (first-any gp-0 #t)
      (return (the-as int (-> gp-0 stage s5-0 status)))
      )
     )
    )
   (first-any gp-0 #t)
   )
  0
  )

;; definition for function close-specific-task!
(defun close-specific-task! ((arg0 task-control) (arg1 int))
  (let ((gp-0 (get-task-control (the-as int arg0))))
   (when gp-0
    (dotimes (v1-1 (-> gp-0 stage length))
     (when
      (and
       (= arg0 (-> gp-0 stage v1-1 game-task))
       (= arg1 (-> gp-0 stage v1-1 status))
       )
      (TODO-RENAME-14 (-> gp-0 stage v1-1))
      (return (first-any gp-0 #t))
      )
     )
    (format
     0
     "ERROR<GMJ>: close-specific! received non-existent task-cstage(~S ~S)--returning #t.~%"
     (game-task->string (the-as int arg0))
     (task-status->string arg1)
     )
    )
   )
  0
  )

;; definition for function open-specific-task!
(defun open-specific-task! ((arg0 task-control) (arg1 int))
  (let ((gp-0 (get-task-control (the-as int arg0))))
   (when gp-0
    (dotimes (v1-1 (-> gp-0 stage length))
     (when
      (and
       (= arg0 (-> gp-0 stage v1-1 game-task))
       (= arg1 (-> gp-0 stage v1-1 status))
       )
      (clear-all-but-first-flag-bit (-> gp-0 stage v1-1))
      (return (first-any gp-0 #t))
      )
     )
    (format
     0
     "ERROR<GMJ>: open-specific! received non-existent task-cstage(~S ~S)--returning #t.~%"
     (game-task->string (the-as int arg0))
     (task-status->string arg1)
     )
    )
   )
  0
  )

;; definition for function task-closed?
(defun task-closed? ((arg0 int) (arg1 int))
  (closed? (get-task-control arg0) arg0 arg1)
  )

;; definition for function task-exists?
(defun task-exists? ((arg0 task-control) (arg1 int))
  (exists? (get-task-control (the-as int arg0)) (the-as int arg0) arg1)
  )

;; definition for function task-known?
(defun task-known? ((arg0 task-control))
  (let ((v1-0 (get-task-status arg0)))
   (if (or (= v1-0 6) (= v1-0 3) (= v1-0 5) (= v1-0 4) (= v1-0 7) (zero? v1-0))
    #t
    #f
    )
   )
  )

;; definition for function sages-kidnapped?
(defun sages-kidnapped? ()
  (task-closed? 111 6)
  )

;; failed to figure out what this is:
(let ((gp-0 *task-controls*))
  (countdown (s5-0 (-> gp-0 length))
   (when (and (-> gp-0 s5-0) (= (-> gp-0 s5-0 type) symbol))
    (let ((s4-0 (-> (the-as symbol (-> gp-0 s5-0)) value)))
     (cond
      ((and (nonzero? s4-0) (type-type? (rtype-of s4-0) task-control))
       (set! (-> gp-0 s5-0) (the-as task-control s4-0))
       )
      (else
       (format
        0
        "ERROR<GMJ>: value of symbol ~A in task-controls is not a task-control~%"
        )
       (set! (-> gp-0 s5-0) (the-as task-control '*null-task-control*))
       )
      )
     )
    )
   )
  )

;; failed to figure out what this is:
(task-control-reset 'game)




