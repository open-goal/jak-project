;;-*-Lisp-*-
(in-package goal)

;; definition of type rapid-gunner
(deftype rapid-gunner (nav-enemy)
  ((los               los-control  :inline)
   (joint             joint-mod)
   (joint-blend       float)
   (joint-enable      symbol)
   (shot-timer        uint64)
   (predict-timer     uint64)
   (target-prev-pos   vector       :inline)
   (target-next-pos   vector       :inline)
   (focus-dir         vector       :inline)
   (y-diff            float)
   (shots-fired       uint32)
   (spin-up-angle     float)
   (spin-up-timer     time-frame)
   (shoot-anim-index  int32)
   (status-flags      rapid-gunner-flags)
   (start-pos         vector       :inline)
   (dest-pos          vector       :inline)
   (hop-dir           vector       :inline)
   (roam-radius       float)
   )
  (:state-methods
    attack
    spin-attack
    hop
    hop-turn
    cool-down
    reload
    )
  (:methods
    (rapid-gunner-method-184 (_type_ float) symbol)
    (rapid-gunner-method-185 (_type_ vector float) none)
    (rapid-gunner-method-186 (_type_ int float int int) none)
    )
  )

;; definition for method 3 of type rapid-gunner
(defmethod inspect ((this rapid-gunner))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Tlos: #<los-control @ #x~X>~%" (-> this los))
  (format #t "~2Tjoint: ~A~%" (-> this joint))
  (format #t "~2Tjoint-blend: ~f~%" (-> this joint-blend))
  (format #t "~2Tjoint-enable: ~A~%" (-> this joint-enable))
  (format #t "~2Tshot-timer: ~D~%" (-> this shot-timer))
  (format #t "~2Tpredict-timer: ~D~%" (-> this predict-timer))
  (format #t "~2Ttarget-prev-pos: #<vector @ #x~X>~%" (-> this target-prev-pos))
  (format #t "~2Ttarget-next-pos: #<vector @ #x~X>~%" (-> this target-next-pos))
  (format #t "~2Tfocus-dir: #<vector @ #x~X>~%" (-> this focus-dir))
  (format #t "~2Ty-diff: ~f~%" (-> this y-diff))
  (format #t "~2Tshots-fired: ~D~%" (-> this shots-fired))
  (format #t "~2Tspin-up-angle: ~f~%" (-> this spin-up-angle))
  (format #t "~2Tspin-up-timer: ~D~%" (-> this spin-up-timer))
  (format #t "~2Tshoot-anim-index: ~D~%" (-> this shoot-anim-index))
  (format #t "~2Tstatus-flags: ~D~%" (-> this status-flags))
  (format #t "~2Tstart-pos: #<vector @ #x~X>~%" (-> this start-pos))
  (format #t "~2Tdest-pos: #<vector @ #x~X>~%" (-> this dest-pos))
  (format #t "~2Thop-dir: #<vector @ #x~X>~%" (-> this hop-dir))
  (format #t "~2Troam-radius: ~f~%" (-> this roam-radius))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-rapid-gunner rapid-gunner rapid-gunner-lod0-jg rapid-gunner-idle-ja
              ((rapid-gunner-lod0-mg (meters 20)) (rapid-gunner-lod1-mg (meters 40)) (rapid-gunner-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 1.5 0 7)
              :shadow rapid-gunner-shadow-mg
              )

;; definition for symbol *rapid-gunner-nav-enemy-info*, type nav-enemy-info
(define *rapid-gunner-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x5 :param0 #x1 :param1 #x1)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 5
    :notice-anim 6
    :hostile-anim -1
    :hit-anim 20
    :knocked-anim 23
    :knocked-land-anim 30
    :die-anim 28
    :die-falling-anim 29
    :victory-anim -1
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint 7
    :look-at-joint 8
    :bullseye-joint 6
    :sound-hit (static-sound-name "rapid-gunne-hit")
    :sound-die (static-sound-name "rapid-gunne-die")
    :notice-distance (meters 100)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 25)
    :default-hit-points 4
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :movement-gravity (meters -100)
    :friction 0.6
    :attack-shove-back (meters 6)
    :attack-shove-up (meters 3)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 32768.0
    :knocked-soft-vxz-hi 57344.0
    :knocked-soft-vy-lo 32768.0
    :knocked-soft-vy-hi 65536.0
    :knocked-medium-vxz-lo 40960.0
    :knocked-medium-vxz-hi 65536.0
    :knocked-medium-vy-lo 53248.0
    :knocked-medium-vy-hi 86016.0
    :knocked-hard-vxz-lo 57344.0
    :knocked-hard-vxz-hi 81920.0
    :knocked-hard-vy-lo 61440.0
    :knocked-hard-vy-hi 90112.0
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 65536.0
    :knocked-red-vy-lo 24576.0
    :knocked-red-vy-hi 57344.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 2)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint 6
    :gem-seg #x2
    :gem-offset (new 'static 'sphere :y -2252.8 :z -2170.88 :r 163840.0)
    :callback-info #f
    :use-momentum #f
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim -1
    :turn-anim 7
    :run-anim -1
    :taunt-anim -1
    :run-travel-speed (meters 4)
    :run-acceleration (meters 1)
    :run-turning-acceleration (meters 5)
    :walk-travel-speed (meters 2)
    :walk-acceleration (meters 1)
    :walk-turning-acceleration (meters 3)
    :maximum-rotation-rate (degrees 60)
    :notice-nav-radius (meters 100)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

;; failed to figure out what this is:
(set! (-> *rapid-gunner-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for method 74 of type rapid-gunner
(defmethod general-event-handler ((this rapid-gunner) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('hit 'hit-flinch)
     (logclear! (-> this mask) (process-mask actor-pause))
     (logclear! (-> this focus-status) (focus-status dangerous))
     (logclear! (-> this enemy-flags) (enemy-flag use-notice-distance))
     (logior! (-> this enemy-flags) (enemy-flag alert))
     (logior! (-> this focus-status) (focus-status hit))
     (if (zero? (-> this hit-points))
         (logior! (-> this focus-status) (focus-status dead))
         )
     (logclear! (-> this enemy-flags) (enemy-flag lock-focus))
     (enemy-method-62 this)
     (logior! (-> this enemy-flags) (enemy-flag lock-focus))
     (process-contact-action arg0)
     (send-event arg0 'get-attack-count 1)
     (go (method-of-object this knocked))
     )
    (('notify)
     (if (= (-> arg3 param 0) 'attack)
         (sound-play "rgun-shot-hit")
         )
     )
    (else
      ((method-of-type nav-enemy general-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 77 of type rapid-gunner
;; WARN: Return type mismatch object vs symbol.
;; WARN: Using new Jak 2 rtype-of
;; WARN: Using new Jak 2 rtype-of
(defmethod enemy-method-77 ((this rapid-gunner) (arg0 enemy-knocked-info))
  (let ((v1-0 (-> this incoming knocked-type)))
    (the-as
      symbol
      (cond
        ((or (= v1-0 (knocked-type knocked-type-4)) (= v1-0 (knocked-type knocked-type-0)))
         (cond
           ((zero? (-> this hit-points))
            (let ((a0-3 (-> this skel root-channel 0)))
              (set! (-> a0-3 frame-group)
                    (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim)))
                    )
              (set! (-> a0-3 param 0)
                    (the float
                         (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim))) frames num-frames)
                            -1
                            )
                         )
                    )
              (set! (-> a0-3 param 1) (-> arg0 anim-speed))
              (set! (-> a0-3 frame-num) 0.0)
              (joint-control-channel-group!
                a0-3
                (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim)))
                num-func-seek!
                )
              )
            )
           (else
             (let* ((a0-4 '((rapid-gunner-hit-ja) (rapid-gunner-hit-left-ja) (rapid-gunner-hit-right-ja)))
                    (a1-11 ((method-of-type (rtype-of a0-4) length) a0-4))
                    (s4-0 (new 'static 'array int64 3 20 21 22))
                    (s3-0 (new 'static 'array int32 4 0 0 0 0))
                    (a2-1 (ash 1 (-> s3-0 0)))
                    (v1-27 (rnd-bit this a1-11 a2-1))
                    (s4-1 (-> this draw art-group data (-> (the-as (pointer int32) (+ (* v1-27 8) (the-as int s4-0))))))
                    )
               (set! (-> s3-0 0) v1-27)
               (let ((v1-30 (if (> (-> this skel active-channels) 0)
                                (-> this skel root-channel 0 frame-group)
                                )
                            )
                     )
                 (if (and v1-30 (= v1-30 (-> this draw art-group data 27)))
                     (ja-channel-push! 1 (seconds 0.17))
                     (ja-channel-push! 1 (seconds 0.02))
                     )
                 )
               (let ((a0-19 (-> this skel root-channel 0)))
                 (set! (-> a0-19 frame-group) (the-as art-joint-anim s4-1))
                 (set! (-> a0-19 param 0) (the float (+ (-> (the-as art-joint-anim s4-1) frames num-frames) -1)))
                 (set! (-> a0-19 param 1) (-> arg0 anim-speed))
                 (set! (-> a0-19 frame-num) 0.0)
                 (joint-control-channel-group! a0-19 (the-as art-joint-anim s4-1) num-func-seek!)
                 )
               )
             )
           )
         #t
         )
        ((= v1-0 (knocked-type knocked-type-5))
         (ja-channel-push! 1 (seconds 0.067))
         (let ((a0-22 (-> this skel root-channel 0)))
           (set! (-> a0-22 frame-group) (the-as art-joint-anim (-> this draw art-group data 20)))
           (set! (-> a0-22 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 20)) frames num-frames) -1))
                 )
           (set! (-> a0-22 param 1) (-> arg0 anim-speed))
           (set! (-> a0-22 frame-num) 0.0)
           (joint-control-channel-group! a0-22 (the-as art-joint-anim (-> this draw art-group data 20)) num-func-seek!)
           )
         )
        ((= v1-0 (knocked-type knocked-type-6))
         (let* ((a0-24 '((rapid-gunner-blue-hit0-ja) (rapid-gunner-blue-hit1-ja) (rapid-gunner-blue-hit2-ja)))
                (a1-21 ((method-of-type (rtype-of a0-24) length) a0-24))
                (s5-1 (new 'static 'array int64 3 24 25 26))
                (s4-2 (new 'static 'array int32 4 0 0 0 0))
                (a2-4 (ash 1 (-> s4-2 0)))
                (v1-59 (rnd-bit this a1-21 a2-4))
                (s5-2 (-> this draw art-group data (-> (the-as (pointer int32) (+ (* v1-59 8) (the-as int s5-1))))))
                )
           (set! (-> s4-2 0) v1-59)
           (let ((v1-62 (if (> (-> this skel active-channels) 0)
                            (-> this skel root-channel 0 frame-group)
                            )
                        )
                 )
             (if (and v1-62 (= v1-62 (-> this draw art-group data 27)))
                 (ja-channel-push! 1 (seconds 0.17))
                 (ja-channel-push! 1 (seconds 0.02))
                 )
             )
           (let ((a0-39 (-> this skel root-channel 0)))
             (set! (-> a0-39 frame-group) (the-as art-joint-anim s5-2))
             (set! (-> a0-39 param 0) (the float (+ (-> (the-as art-joint-anim s5-2) frames num-frames) -1)))
             (set! (-> a0-39 param 1) 1.0)
             (set! (-> a0-39 frame-num) 0.0)
             (joint-control-channel-group! a0-39 (the-as art-joint-anim s5-2) num-func-seek!)
             )
           )
         #t
         )
        (else
          (ja-channel-push! 1 (seconds 0.067))
          (let ((a1-28 (-> this draw art-group data (-> this enemy-info knocked-anim)))
                (a0-43 (-> this skel root-channel 0))
                )
            (set! (-> a0-43 frame-group) (the-as art-joint-anim a1-28))
            (set! (-> a0-43 param 0) (the float (+ (-> (the-as art-joint-anim a1-28) frames num-frames) -1)))
            (set! (-> a0-43 param 1) (-> arg0 anim-speed))
            (set! (-> a0-43 frame-num) 0.0)
            (joint-control-channel-group! a0-43 (the-as art-joint-anim a1-28) num-func-seek!)
            )
          #t
          )
        )
      )
    )
  )

;; definition for method 52 of type rapid-gunner
;; WARN: Return type mismatch object vs none.
(defmethod enemy-method-52 ((this rapid-gunner) (arg0 vector))
  (cond
    ((> (-> this hit-points) 0)
     (-> this enemy-info)
     (case (-> this incoming knocked-type)
       (((knocked-type knocked-type-4))
        (vector-reset! arg0)
        )
       (else
         ((method-of-type nav-enemy enemy-method-52) this arg0)
         )
       )
     )
    (else
      ((method-of-type nav-enemy enemy-method-52) this arg0)
      )
    )
  (none)
  )

;; definition for method 78 of type rapid-gunner
(defmethod enemy-method-78 ((this rapid-gunner) (arg0 enemy-knocked-info))
  (case (-> this incoming knocked-type)
    (((knocked-type knocked-type-6))
     (when (>= (-> this incoming blue-juggle-count) (the-as uint 2))
       (ja-channel-push! 1 (seconds 0.1))
       (let ((a0-3 (-> this skel root-channel 0)))
         (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> this draw art-group data 27)))
         (set! (-> a0-3 param 0)
               (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 27)) frames num-frames) -1))
               )
         (set! (-> a0-3 param 1) (-> arg0 anim-speed))
         (set! (-> a0-3 frame-num) 0.0)
         (joint-control-channel-group! a0-3 (the-as art-joint-anim (-> this draw art-group data 27)) num-func-seek!)
         )
       #t
       )
     )
    (((knocked-type knocked-type-4) (knocked-type knocked-type-0))
     #t
     )
    (((knocked-type knocked-type-5))
     (when (zero? (-> this hit-points))
       (ja-channel-push! 1 (seconds 0.067))
       (let ((a1-5 (-> this draw art-group data (-> this enemy-info die-anim)))
             (a0-10 (-> this skel root-channel 0))
             )
         (set! (-> a0-10 frame-group) (the-as art-joint-anim a1-5))
         (set! (-> a0-10 param 0) (the float (+ (-> (the-as art-joint-anim a1-5) frames num-frames) -1)))
         (set! (-> a0-10 param 1) (-> arg0 anim-speed))
         (set! (-> a0-10 frame-num) 0.0)
         (joint-control-channel-group! a0-10 (the-as art-joint-anim a1-5) num-func-seek!)
         )
       #t
       )
     )
    (else
      (let ((a1-6 (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
            (a0-13 (-> this skel root-channel 0))
            )
        (set! (-> a0-13 frame-group) (the-as art-joint-anim a1-6))
        (set! (-> a0-13 param 0) (the float (+ (-> (the-as art-joint-anim a1-6) frames num-frames) -1)))
        (set! (-> a0-13 param 1) (-> arg0 anim-speed))
        (set! (-> a0-13 frame-num) 0.0)
        (joint-control-channel-group! a0-13 (the-as art-joint-anim a1-6) num-func-seek!)
        )
      #t
      )
    )
  )

;; definition for method 98 of type rapid-gunner
(defmethod in-aggro-range? ((this rapid-gunner) (arg0 process-focusable) (arg1 vector))
  "Should the enemy activate.
- if `activate-distance` is `0.0`, always true
- otherwise, check if the provided process is close enough
@param proc The process used to distance check
@returns true/false"
  (let ((t9-0 (method-of-type nav-enemy in-aggro-range?)))
    (and (t9-0 this arg0 arg1)
         (or (not (logtest? (-> this fact enemy-options) (enemy-option user8)))
             (and (not (focus-test? arg0 in-air)) (>= 4096.0 (fabs (- (-> (get-trans arg0 0) y) (-> this root trans y)))))
             )
         )
    )
  )

;; definition for method 185 of type rapid-gunner
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; WARN: Function (method 185 rapid-gunner) has a return type of none, but the expression builder found a return statement.
(defmethod rapid-gunner-method-185 ((this rapid-gunner) (arg0 vector) (arg1 float))
  (if (not (-> this joint-enable))
      (return #f)
      )
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 quad) (-> arg0 quad))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (set! (-> s4-0 quad) (-> this root root-prim prim-core world-sphere quad))
      (let ((s3-1 (vector-! (new 'stack-no-clear 'vector) s5-0 s4-0)))
        (set! (-> s4-0 w) 1.0)
        (when (< (vector-vector-distance s5-0 s4-0) 29491.2)
          (vector-normalize! s3-1 29491.2)
          (vector+! s5-0 s4-0 s3-1)
          )
        )
      )
    (let* ((v1-16 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 18)))
           (s4-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) s5-0 v1-16) 1.0))
           (s3-2
             (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this node-list data 4 bone transform vector 2) 1.0)
             )
           (s5-1 (new 'stack-no-clear 'quaternion))
           )
      (let* ((s1-0 (forward-up-nopitch->quaternion (new 'stack-no-clear 'quaternion) s4-1 *up-vector*))
             (s2-0 (vector-inv-orient-by-quat! (new 'stack-no-clear 'vector) s4-1 s1-0))
             (f0-2 (vector-x-angle s2-0))
             )
        (when (< 2730.6667 (fabs f0-2))
          (let ((f30-0 (fmax -2730.6667 (fmin 2730.6667 f0-2))))
            (set! (-> s2-0 y) 0.0)
            (vector-normalize! s2-0 1.0)
            (vector-rotate-x! s2-0 s2-0 (- f30-0))
            )
          (vector-orient-by-quat! s4-1 s2-0 s1-0)
          )
        )
      (quaternion-from-two-vectors-max-angle-partial! s5-1 s3-2 s4-1 16384.0 (-> this joint-blend))
      (quaternion-slerp! (-> this joint quat) (-> this joint quat) s5-1 0.1)
      )
    )
  0
  (none)
  )

;; definition for function vector-average-copy!
(defun vector-average-copy! ((arg0 vector) (arg1 vector) (arg2 float))
  (let ((f0-1 (- 1.0 arg2)))
    (set! (-> arg0 x) (+ (* f0-1 (-> arg0 x)) (* arg2 (-> arg1 x))))
    (set! (-> arg0 y) (+ (* f0-1 (-> arg0 y)) (* arg2 (-> arg1 y))))
    (set! (-> arg0 z) (+ (* f0-1 (-> arg0 z)) (* arg2 (-> arg1 z))))
    )
  (set! (-> arg0 w) 1.0)
  arg0
  )

;; definition for symbol *aim-pos*, type vector
(define *aim-pos* (new 'static 'vector))

;; definition for function rapid-gunner-common-post
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defbehavior rapid-gunner-common-post rapid-gunner ()
  (let ((a0-1 (handle->process (-> self focus handle))))
    (cond
      (a0-1
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (set! (-> gp-0 quad) (-> (get-trans (the-as process-focusable a0-1) 0) quad))
          (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) gp-0 (-> self target-prev-pos))))
            (let* ((a1-3 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node rapid-gunner-lod0-jg blast)))
                   (f0-0 (vector-vector-distance gp-0 a1-3))
                   )
              (vector-normalize! s5-1 (* 0.00028170072 f0-0 (vector-length s5-1)))
              )
            (set! (-> s5-1 y) 0.0)
            (vector-average-copy! (-> self focus-dir) s5-1 0.08)
            )
          (vector+! (-> self target-next-pos) (-> self focus-dir) gp-0)
          (set! (-> self target-prev-pos quad) (-> gp-0 quad))
          )
        (set! (-> self predict-timer) (the-as uint (current-time)))
        )
      (else
        (set! (-> self target-next-pos quad) (-> self target-prev-pos quad))
        (vector-reset! (-> self focus-dir))
        )
      )
    )
  0
  (none)
  )

;; definition for method 55 of type rapid-gunner
;; WARN: Return type mismatch int vs none.
(defmethod common-post ((this rapid-gunner))
  "Does a lot of various things relating to interacting with the target
- tracks when the enemy was last drawn
- looks at the target and handles attacking
@TODO Not extremely well understood yet"
  (let ((t9-0 (method-of-type nav-enemy common-post)))
    (t9-0 this)
    )
  (los-control-method-9 (-> this los) (the-as process-focusable #f) (the-as vector #f) 2048.0)
  0
  (none)
  )

;; definition for method 96 of type rapid-gunner
(defmethod enemy-method-96 ((this rapid-gunner) (arg0 float) (arg1 symbol))
  (enemy-method-95 this (-> this target-next-pos) arg0)
  )

;; definition for method 184 of type rapid-gunner
(defmethod rapid-gunner-method-184 ((this rapid-gunner) (arg0 float))
  (let* ((s4-0 (-> this node-list data 18))
         (v1-1 (vector<-cspace! (new 'stack-no-clear 'vector) s4-0))
         (s5-1 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this target-next-pos) v1-1) 1.0))
         (s4-1 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s4-0 bone transform vector 2) 1.0))
         )
    (set! (-> s4-1 y) 0.0)
    (vector-xz-normalize! s4-1 1.0)
    (set! (-> s5-1 y) 0.0)
    (vector-xz-normalize! s5-1 1.0)
    (>= (vector-dot s4-1 s5-1) (cos arg0))
    )
  )

;; definition for method 67 of type rapid-gunner
(defmethod go-stare ((this rapid-gunner))
  (go (method-of-object this hostile))
  )

;; failed to figure out what this is:
(defstate notice (rapid-gunner)
  :virtual #t
  :enter (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag cam-attack-mode))
    (look-at-target! self (enemy-flag look-at-focus))
    (when (logtest? (-> self enemy-flags) (enemy-flag enable-on-notice))
      (logclear! (-> self enemy-flags) (enemy-flag enable-on-notice))
      (let ((gp-0 (-> self on-notice)))
        (if gp-0
            (script-eval gp-0 :vector (-> self root trans))
            )
        )
      )
    (if (logtest? (-> self enemy-flags) (enemy-flag alert))
        (go-virtual hostile)
        )
    (logior! (-> self enemy-flags) (enemy-flag alert))
    (let ((v1-23 self))
      (set! (-> v1-23 enemy-flags) (the-as enemy-flag (logclear (-> v1-23 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-23 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-26 self))
      (set! (-> v1-26 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-26 enemy-flags))))
      )
    0
    (let ((v1-28 (-> self nav)))
      (set! (-> v1-28 target-speed) 0.0)
      )
    0
    (let* ((gp-1 (handle->process (-> self focus handle)))
           (a0-14 (if (type? gp-1 process-focusable)
                      gp-1
                      )
                  )
           )
      (when a0-14
        (let ((v1-34 (get-trans (the-as process-focusable a0-14) 3)))
          (set! (-> self target-next-pos quad) (-> v1-34 quad))
          (set! (-> self target-prev-pos quad) (-> v1-34 quad))
          )
        (vector-reset! (-> self focus-dir))
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.075))
    (let ((f30-0 (rnd-float-range self 0.8 1.2)))
      (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info notice-anim))
                  :num! (seek! max f30-0)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (react-to-focus self)
    )
  :post (behavior ()
    (let ((a0-0 self))
      (when (logtest? (enemy-flag enemy-flag37) (-> a0-0 enemy-flags))
        (let ((a0-4 (handle->process (-> self focus handle))))
          (if a0-4
              (seek-to-point-toward-point!
                (-> self root)
                (get-trans (the-as process-focusable a0-4) 0)
                (* 196608.0 (-> self clock frames-per-second))
                (seconds 0.2)
                )
              )
          )
        )
      )
    (nav-enemy-simple-post)
    )
  )

;; failed to figure out what this is:
(defstate attack (rapid-gunner)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self predict-timer) (the-as uint (+ (current-time) 1)))
    (set! (-> self shot-timer) (the-as uint (current-time)))
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-7 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-10 self))
      (set! (-> v1-10 enemy-flags) (the-as enemy-flag (logclear (-> v1-10 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (set! (-> self joint-enable) #t)
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-15 *game-info*)
           (a0-6 (+ (-> v1-15 attack-id) 1))
           )
      (set! (-> v1-15 attack-id) a0-6)
      (set! (-> self attack-id) a0-6)
      )
    (when (logtest? (-> self status-flags) (rapid-gunner-flags ragflags-1))
      (set! (-> self spin-up-timer) (+ (current-time) (seconds 2)))
      (logclear! (-> self status-flags) (rapid-gunner-flags ragflags-1))
      )
    (if (zero? (rand-vu-int-range 0 3))
        (set! (-> self shoot-anim-index) 15)
        (set! (-> self shoot-anim-index) 14)
        )
    )
  :exit (behavior ()
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (seek! (-> self joint-blend) 0.95 (seconds-per-frame))
    (let ((gp-0 (handle->process (-> self focus handle))))
      (if (not gp-0)
          (go-virtual hostile)
          )
      (let ((s5-0 (get-trans (the-as process-focusable gp-0) 0))
            (f0-3 (vector-vector-distance (get-trans (the-as process-focusable gp-0) 0) (-> self root trans)))
            )
        (cond
          ((and (< f0-3 20480.0)
                (and (< (fabs (- (-> s5-0 y) (-> self root trans y))) 6144.0)
                     gp-0
                     (not (logtest? (-> (the-as process-focusable gp-0) focus-status) (focus-status disable dead ignore grabbed)))
                     )
                )
           (go-virtual spin-attack)
           )
          ((< 430080.0 f0-3)
           (go-hostile self)
           )
          ((skip-check-los? (-> self los) 90)
           (vector-normalize-copy! (-> self hop-dir) (-> self focus-dir) -1.0)
           (go-virtual hop)
           )
          ((not (enemy-method-96 self 16384.0 #t))
           (go-virtual hop-turn)
           )
          ((>= (-> self shots-fired) (the-as uint 12))
           (when (skip-check-los? (-> self los) 0)
             (vector-normalize-copy! (-> self hop-dir) (-> self focus-dir) -1.0)
             (go-virtual hop)
             )
           (go-virtual reload)
           )
          ((time-elapsed? (the-as int (-> self shot-timer)) (seconds 0.25))
           (when (rapid-gunner-method-184 self 2184.5334)
             (let* ((a1-11 (joint-node rapid-gunner-lod0-jg blast))
                    (f30-0 (fmax 0.0 (the float (- (-> self spin-up-timer) (current-time)))))
                    (s5-1 (vector<-cspace! (new 'stack-no-clear 'vector) a1-11))
                    (s4-2
                      (vector+! (new 'stack-no-clear 'vector) (get-trans (the-as process-focusable gp-0) 0) (-> self focus-dir))
                      )
                    )
               (+! (-> s4-2 y) (lerp 2457.6 819.2 (* 0.000048828126 (vector-length (-> self focus-dir)))))
               (let* ((gp-2 (vector-! (new 'stack-no-clear 'vector) s4-2 s5-1))
                      (f28-1 (vector-length gp-2))
                      )
                 (vector-normalize! gp-2 1.0)
                 (vector-rotate-x! gp-2 gp-2 (* 0.9102223 f30-0))
                 (vector+float*! s4-2 s5-1 gp-2 f28-1)
                 )
               (sound-play "rgun-shot-fire" :position s5-1)
               (spawn-metalhead-projectile (the-as metalhead-shot self) s5-1 s4-2 532480.0)
               )
             (+! (-> self shots-fired) 1)
             )
           (set! (-> self shot-timer) (the-as uint (current-time)))
           )
          )
        )
      )
    )
  :code (behavior ()
    (until #f
      (when (not (enemy-method-96 self 2730.6667 #t))
        (let ((v1-3 self))
          (set! (-> v1-3 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-3 enemy-flags))))
          )
        0
        (ja-channel-push! 1 (seconds 0.2))
        (ja :group! rapid-gunner-shoot-track-ja)
        (ja :num-func num-func-identity :frame-num 0.0)
        (until (enemy-method-96 self 910.2222 #t)
          (ja-blend-eval)
          (suspend)
          (ja :num! (loop! 0.75))
          )
        (let ((v1-19 self))
          (set! (-> v1-19 enemy-flags) (the-as enemy-flag (logclear (-> v1-19 enemy-flags) (enemy-flag enemy-flag37))))
          )
        0
        )
      (let ((v1-23 (ja-group)))
        (if (not (and v1-23 (or (= v1-23 rapid-gunner-shoot-ja) (= v1-23 rapid-gunner-shoot1-ja))))
            (ja-channel-push! 1 (seconds 0.2))
            )
        )
      (ja-no-eval :group! (-> self draw art-group data (-> self shoot-anim-index)) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (rapid-gunner-method-185 self (-> self target-next-pos) 4.0)
    (let ((a0-2 (handle->process (-> self focus handle))))
      (if (and a0-2 (let ((a1-2 self))
                      (logtest? (enemy-flag enemy-flag37) (-> a1-2 enemy-flags))
                      )
               )
          (seek-to-point-toward-point!
            (-> self root)
            (get-trans (the-as process-focusable a0-2) 3)
            (* 0.5 (-> self nav max-rotation-rate))
            (seconds 0.5)
            )
          )
      )
    (rapid-gunner-common-post)
    (nav-enemy-simple-post)
    )
  )

;; definition for method 186 of type rapid-gunner
;; WARN: Return type mismatch art-element vs none.
(defmethod rapid-gunner-method-186 ((this rapid-gunner) (arg0 int) (arg1 float) (arg2 int) (arg3 int))
  (local-vars (v1-1 int))
  0
  (if (< 0.0 arg1)
      (set! v1-1 arg2)
      (set! v1-1 arg3)
      )
  (let ((a1-2 (-> this skel root-channel arg0)))
    (let ((f0-2 (fabs arg1)))
      (set! (-> a1-2 frame-interp 1) f0-2)
      (set! (-> a1-2 frame-interp 0) f0-2)
      )
    (set! (-> a1-2 frame-group) (the-as art-joint-anim (-> this draw art-group data v1-1)))
    )
  (none)
  )

;; failed to figure out what this is:
(defstate hop (rapid-gunner)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set! (-> self predict-timer) (the-as uint (current-time)))
    (let ((v1-2 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-2 enemy-flags)))
          (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-2 enemy-flags))))
          )
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-2 enemy-flags))))
      (set! (-> v1-2 nav callback-info) (-> v1-2 enemy-info callback-info))
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-9 *game-info*)
           (v0-0 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) v0-0)
      (set! (-> self attack-id) v0-0)
      )
    )
  :exit (behavior ()
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    '()
    )
  :code (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (set! (-> self shots-fired) (the-as uint (min 12 (the-as int (+ (-> self shots-fired) 2)))))
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (let ((s5-0 (-> self root trans)))
          (let ((a2-0 (new 'stack-no-clear 'vector)))
            (let ((v1-3 s5-0))
              (let ((a0-2 (-> self hop-dir)))
                (let ((a1-1 8192.0))
                  (.mov vf7 a1-1)
                  )
                (.lvf vf5 (&-> a0-2 quad))
                )
              (.lvf vf4 (&-> v1-3 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a2-0 quad) vf6)
            (set! (-> self dest-pos quad) (-> s5-0 quad))
            (cloest-point-on-mesh (-> self nav) (-> self dest-pos) a2-0 (the-as nav-poly #f))
            )
          (if (< (vector-vector-distance s5-0 (-> self dest-pos)) 6144.0)
              (go-hostile self)
              )
          (let ((a0-8 (-> self nav state))
                (v1-12 (-> self dest-pos))
                )
            (logclear! (-> a0-8 flags) (nav-state-flag directional-mode))
            (logior! (-> a0-8 flags) (nav-state-flag target-poly-dirty))
            (set! (-> a0-8 target-post quad) (-> v1-12 quad))
            )
          0
          (vector-! gp-0 (-> self dest-pos) s5-0)
          )
        (set! (-> gp-0 y) 0.0)
        (vector-normalize! gp-0 1.0)
        (let ((a0-13 (-> self nav state))
              (v1-17 gp-0)
              )
          (set! (-> a0-13 heading quad) (-> v1-17 quad))
          )
        0
        (ja-channel-push! 2 (seconds 0.1))
        (ja-no-eval :group! rapid-gunner-idle-ja :num! (seek!) :frame-num 0.0)
        (let ((a0-17 (-> self skel root-channel 1)))
          (let ((f0-7 0.0))
            (set! (-> a0-17 frame-interp 1) f0-7)
            (set! (-> a0-17 frame-interp 0) f0-7)
            )
          (set! (-> a0-17 frame-group) (the-as art-joint-anim rapid-gunner-idle-ja))
          (set! (-> a0-17 param 0)
                (the float (+ (-> (the-as art-joint-anim rapid-gunner-idle-ja) frames num-frames) -1))
                )
          (set! (-> a0-17 param 1) 1.0)
          (set! (-> a0-17 frame-num) 0.0)
          (joint-control-channel-group! a0-17 (the-as art-joint-anim rapid-gunner-idle-ja) num-func-seek!)
          )
        (until (ja-done? 0)
          (let ((s5-1 (vector-inv-orient-by-quat! (new 'stack-no-clear 'vector) gp-0 (-> self root quat))))
            (rapid-gunner-method-186 self 0 (-> s5-1 x) 10 11)
            (rapid-gunner-method-186 self 1 (-> s5-1 z) 8 9)
            )
          (suspend)
          (ja :num! (seek!))
          (ja :chan 1 :num! (chan 0))
          )
        )
      (let ((v1-67 self))
        (set! (-> v1-67 enemy-flags) (the-as enemy-flag (logclear (-> v1-67 enemy-flags) (enemy-flag enemy-flag36))))
        (set! (-> v1-67 nav callback-info) *nav-enemy-null-callback-info*)
        )
      0
      (go-hostile self)
      )
    )
  :post (behavior ()
    (rapid-gunner-common-post)
    (nav-enemy-travel-post)
    )
  )

;; failed to figure out what this is:
(defstate hop-turn (rapid-gunner)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set! (-> self predict-timer) (the-as uint (current-time)))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-9 *game-info*)
           (v0-0 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) v0-0)
      (set! (-> self attack-id) v0-0)
      )
    )
  :exit (behavior ()
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (seek! (-> self joint-blend) 0.0 (seconds-per-frame))
    (when (enemy-method-96 self 6371.5557 #t)
      (rapid-gunner-method-185 self (-> self target-next-pos) 24.0)
      (when (skip-check-los? (-> self los) 30)
        (vector-normalize-copy! (-> self hop-dir) (-> self focus-dir) -1.0)
        (go-virtual hop)
        )
      (go-hostile self)
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (until #f
      (ja-no-eval :group! rapid-gunner-turn-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (rapid-gunner-method-185 self (-> self target-next-pos) 4.0)
    (let ((a0-2 (handle->process (-> self focus handle))))
      (if (and a0-2 (let ((a1-2 self))
                      (logtest? (enemy-flag enemy-flag37) (-> a1-2 enemy-flags))
                      )
               )
          (seek-to-point-toward-point!
            (-> self root)
            (get-trans (the-as process-focusable a0-2) 3)
            (* 4.0 (-> self nav max-rotation-rate))
            (seconds 0.5)
            )
          )
      )
    (rapid-gunner-common-post)
    (nav-enemy-simple-post)
    )
  )

;; failed to figure out what this is:
(defstate cool-down (rapid-gunner)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self shots-fired) (the-as uint 0))
    0
    )
  :trans (behavior ()
    (if (time-elapsed? (-> self state-time) (seconds 0.5))
        (go-hostile self)
        )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (until #f
      (ja-no-eval :group! rapid-gunner-aim-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (rapid-gunner-common-post)
    (nav-enemy-face-focus-post)
    )
  )

;; failed to figure out what this is:
(defstate reload (rapid-gunner)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set! (-> self predict-timer) (the-as uint (current-time)))
    (set! (-> self shots-fired) (the-as uint 0))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! rapid-gunner-reload-ja :num! (seek! max 0.5) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (when (skip-check-los? (-> self los) 30)
      (vector-normalize-copy! (-> self hop-dir) (-> self focus-dir) -1.0)
      (go-virtual hop)
      )
    (go-hostile self)
    )
  :post (behavior ()
    (rapid-gunner-common-post)
    (nav-enemy-face-focus-post)
    )
  )

;; failed to figure out what this is:
(defstate hostile (rapid-gunner)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self predict-timer) (the-as uint (current-time)))
    (cond
      ((handle->process (-> self focus handle))
       (if (check-los? (-> self los) 0)
           (logclear! (-> self status-flags) (rapid-gunner-flags ragflags-1))
           (logior! (-> self status-flags) (rapid-gunner-flags ragflags-1))
           )
       )
      (else
        (logior! (-> self status-flags) (rapid-gunner-flags ragflags-1))
        )
      )
    (let ((v1-18 self))
      (set! (-> v1-18 enemy-flags) (the-as enemy-flag (logclear (-> v1-18 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-18 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    )
  :trans (behavior ()
    (if (and (logtest? (-> self enemy-flags) (enemy-flag victory)) (-> self enemy-info use-victory))
        (go-virtual victory)
        )
    (let ((gp-0 (handle->process (-> self focus handle))))
      (when gp-0
        (let* ((s5-0 (get-trans (the-as process-focusable gp-0) 0))
               (f30-0 (vector-vector-distance s5-0 (-> self root trans)))
               )
          (if (and (< f30-0 20480.0)
                   (and (< (fabs (- (-> s5-0 y) (-> self root trans y))) 6144.0)
                        gp-0
                        (not (logtest? (-> (the-as process-focusable gp-0) focus-status) (focus-status disable dead ignore grabbed)))
                        )
                   )
              (go-virtual spin-attack)
              )
          (when (and (< f30-0 409600.0) (check-los? (-> self los) 0))
            (if (>= (-> self shots-fired) (the-as uint 12))
                (go-virtual reload)
                )
            (go-virtual attack)
            )
          )
        )
      )
    (when (skip-check-los? (-> self los) 1500)
      (let ((a1-6 (vector-! (new 'stack-no-clear 'vector) (-> self start-pos) (-> self root trans))))
        (when (< 4096.0 (vector-length a1-6))
          (vector-normalize-copy! (-> self hop-dir) a1-6 1.0)
          (go-virtual hop)
          )
        )
      )
    (when (time-elapsed? (-> self state-time) (seconds 0.1))
      (if (>= 1 (the-as int (-> self focus aware)))
          (go-virtual active)
          )
      )
    )
  :code (behavior ()
    (when (not (enemy-method-96 self 2730.6667 #t))
      (let ((v1-3 self))
        (set! (-> v1-3 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-3 enemy-flags))))
        )
      0
      (ja-channel-push! 1 (seconds 0.2))
      (ja :group! rapid-gunner-shoot-track-ja)
      (ja :num-func num-func-identity :frame-num 0.0)
      (until (enemy-method-96 self 910.2222 #t)
        (ja-blend-eval)
        (suspend)
        (ja :num! (loop! 0.75))
        )
      (let ((v1-19 self))
        (set! (-> v1-19 enemy-flags) (the-as enemy-flag (logclear (-> v1-19 enemy-flags) (enemy-flag enemy-flag37))))
        )
      0
      )
    (let ((v1-23 (ja-group)))
      (when (not (and v1-23 (= v1-23 rapid-gunner-aim-ja)))
        (let ((v1-29 (ja-group)))
          (if (and v1-29 (= v1-29 rapid-gunner-shoot-track-ja))
              (ja-channel-push! 1 (seconds 0.067))
              (ja-channel-push! 1 (seconds 0.2))
              )
          )
        )
      )
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (until #f
        (ja-no-eval :group! rapid-gunner-aim-ja :num! (seek! max f30-0) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    )
  :post (behavior ()
    (rapid-gunner-method-185 self (-> self target-next-pos) 3.6)
    (rapid-gunner-common-post)
    (nav-enemy-face-focus-post)
    )
  )

;; failed to figure out what this is:
(defstate spin-attack (rapid-gunner)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (let ((v1-2 self))
      (set! (-> v1-2 enemy-flags) (the-as enemy-flag (logclear (-> v1-2 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-2 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-5 enemy-flags))))
      )
    0
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-9 *game-info*)
           (a0-7 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-7)
      (set! (-> self attack-id) a0-7)
      )
    (let ((v1-13 (-> (the-as collide-shape-prim-group (-> self root root-prim)) child 1)))
      (set! (-> v1-13 prim-core action) (collide-action deadly))
      (set! (-> v1-13 local-sphere w) 7372.8)
      )
    )
  :exit (behavior ()
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-9 (-> (the-as collide-shape-prim-group (-> self root root-prim)) child 1)))
      (set! (-> v1-9 prim-core action) (collide-action))
      (set! (-> v1-9 local-sphere w) 4096.0)
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.135))
    (ja-no-eval :group! rapid-gunner-spin-attack-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-hostile self)
    )
  :post (behavior ()
    (let ((a0-0 self))
      (when (logtest? (enemy-flag enemy-flag37) (-> a0-0 enemy-flags))
        (let ((a0-4 (handle->process (-> self focus handle))))
          (if a0-4
              (seek-to-point-toward-point!
                (-> self root)
                (get-trans (the-as process-focusable a0-4) 0)
                (-> self nav max-rotation-rate)
                (seconds 0.02)
                )
              )
          )
        )
      )
    (nav-enemy-simple-post)
    )
  )

;; failed to figure out what this is:
(defstate active (rapid-gunner)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logclear (-> v1-4 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-4 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    )
  :code (behavior ()
    (let ((v1-2 (ja-group)))
      (when (not (and v1-2 (= v1-2 (-> self draw art-group data (-> self enemy-info idle-anim)))))
        (ja-no-eval :num! (loop!))
        (ja-channel-push! 1 (seconds 0.2))
        (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info idle-anim)) :num! (loop!) :frame-num 0.0)
        )
      )
    (until #f
      (suspend)
      (ja :num! (loop!))
      )
    #f
    )
  :post nav-enemy-simple-post
  )

;; definition for method 142 of type rapid-gunner
;; WARN: Return type mismatch int vs none.
(defmethod nav-enemy-method-142 ((this rapid-gunner) (arg0 nav-control))
  0
  (none)
  )

;; definition for method 63 of type rapid-gunner
;; WARN: Return type mismatch none vs symbol.
(defmethod enemy-method-63 ((this rapid-gunner) (arg0 process-focusable) (arg1 enemy-aware))
  (let ((t9-0 (method-of-type nav-enemy enemy-method-63)))
    (the-as symbol (if (t9-0 this arg0 arg1)
                       (set-dst-proc! (-> this los) (-> this focus handle))
                       )
            )
    )
  )

;; definition for method 114 of type rapid-gunner
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this rapid-gunner))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 5) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 6))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> s4-0 local-sphere) 0.0 11264.0 0.0 17203.2)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with) (collide-spec jak bot crate hit-by-others-list player-list))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 5120.0 0.0 5120.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set! (-> v1-15 transform-index) 18)
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 -2048.0 3072.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-17 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set-vector! (-> v1-17 local-sphere) 0.0 9216.0 0.0 5120.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-19 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-19 prim-core action) (collide-action no-standon))
      (set! (-> v1-19 transform-index) 7)
      (set-vector! (-> v1-19 local-sphere) 0.0 0.0 0.0 3072.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-with) (collide-spec backgnd obstacle hit-by-others-list))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set-vector! (-> v1-21 local-sphere) 0.0 12288.0 0.0 12288.0)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-23 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-23 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-23 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 7 of type rapid-gunner
(defmethod relocate ((this rapid-gunner) (arg0 int))
  (if (nonzero? (-> this joint))
      (&+! (-> this joint) arg0)
      )
  (call-parent-method this arg0)
  )

;; definition for method 115 of type rapid-gunner
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this rapid-gunner))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (local-vars (sv-48 int))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (initialize-skeleton
      this
      (the-as skeleton-group (art-group-get-by-name *level* "skel-rapid-gunner" (the-as (pointer uint32) #f)))
      (the-as pair 0)
      )
    (init-enemy-behaviour-and-stats! this *rapid-gunner-nav-enemy-info*)
    (set! (-> this neck up) (the-as uint 1))
    (set! (-> this neck nose) (the-as uint 2))
    (set! (-> this neck ear) (the-as uint 0))
    (new-source! (-> this los) this (seconds 0.2) (collide-spec backgnd obstacle))
    (set! (-> this joint) (new 'process 'joint-mod (joint-mod-mode joint-set*-world) this 5))
    (set-vector! (-> this root scale) 1.2 1.2 1.2 1.0)
    (let ((a0-13 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
          (v1-14 (new 'stack-no-clear 'vector))
          )
      (let ((a1-7 (-> this root trans)))
        (let ((a2-5 409600.0))
          (.mov vf7 a2-5)
          )
        (.lvf vf5 (&-> a0-13 quad))
        (.lvf vf4 (&-> a1-7 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> v1-14 quad) vf6)
      (set! (-> this target-next-pos quad) (-> v1-14 quad))
      (set! (-> this target-prev-pos quad) (-> v1-14 quad))
      )
    (set! (-> this shots-fired) (the-as uint 0))
    (set! (-> this spin-up-timer) 0)
    (logclear! (-> this status-flags) (rapid-gunner-flags ragflags-0))
    (logior! (-> this status-flags) (rapid-gunner-flags ragflags-1))
    (let ((f30-0 3640.889))
      (set! sv-48 0)
      (let ((v1-22 (res-lump-data (-> this entity) 'spinup-angle pointer :tag-ptr (the-as (pointer res-tag) (& sv-48)))))
        (if v1-22
            (set! f30-0 (-> (the-as (pointer float) v1-22)))
            )
        )
      (set! (-> this spin-up-angle) f30-0)
      )
    (vector-reset! (-> this focus-dir))
    (set! (-> this shoot-anim-index) -1)
    (let ((v1-26 (-> this nav)))
      (set! (-> v1-26 speed-scale) 1.0)
      )
    0
    (logclear! (-> this nav flags) (nav-control-flag update-heading-from-facing))
    (set! (-> this enemy-flags) (the-as enemy-flag (logclear (-> this enemy-flags) (enemy-flag enemy-flag43))))
    (set! (-> this start-pos quad) (-> this root trans quad))
    (set! (-> this roam-radius) 16384.0)
    (add-connection
      *part-engine*
      this
      8
      this
      1310
      (new 'static 'vector :x 1146.88 :y 450.56 :z 901.12 :w 163840.0)
      )
    (add-connection
      *part-engine*
      this
      8
      this
      1311
      (new 'static 'vector :x -1146.88 :y 450.56 :z 901.12 :w 163840.0)
      )
    (add-connection *part-engine* this 18 this 1312 (new 'static 'vector :w 163840.0))
    0
    (none)
    )
  )

;; definition of type shield-gunner
(deftype shield-gunner (rapid-gunner)
  ()
  )

;; definition for method 3 of type shield-gunner
(defmethod inspect ((this shield-gunner))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type rapid-gunner inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
