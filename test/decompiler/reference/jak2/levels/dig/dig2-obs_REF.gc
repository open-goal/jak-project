;;-*-Lisp-*-
(in-package goal)

;; definition of type dig-breakable-door
(deftype dig-breakable-door (process-focusable)
  ((anim          basic)
   (art-name      basic)
   (collide-mesh  int32)
   )
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type dig-breakable-door
(defmethod inspect ((this dig-breakable-door))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tanim: ~A~%" (-> this anim))
  (format #t "~2Tart-name: ~A~%" (-> this art-name))
  (format #t "~2Tcollide-mesh: ~D~%" (-> this collide-mesh))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-dig-breakable-door dig-breakable-door dig-breakable-door-lod0-jg dig-breakable-door-idle-ja
              ((dig-breakable-door-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 6 0 10.3)
              :origin-joint-index 3
              )

;; failed to figure out what this is:
(defstate idle (dig-breakable-door)
  :virtual #t
  :code (behavior ()
    (until #f
      (transform-post)
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    #f
    )
  )

;; definition for method 11 of type dig-breakable-door
;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! ((this dig-breakable-door) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (stack-size-set! (-> this main-thread) 512)
  (logior! (-> this mask) (process-mask collectable))
  (let ((s4-0 (art-group-get-by-name *level* "skel-dig-breakable-door" (the-as (pointer uint32) #f))))
    (let ((s3-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
      (let ((v1-7 (new 'process 'collide-shape-prim-mesh s3-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> v1-7 prim-core collide-as) (collide-spec obstacle))
        (set! (-> v1-7 prim-core collide-with) (collide-spec jak player-list))
        (set! (-> v1-7 prim-core action) (collide-action solid))
        (set! (-> v1-7 transform-index) 3)
        (set-vector! (-> v1-7 local-sphere) 0.0 24576.0 0.0 42188.8)
        (set! (-> s3-0 total-prims) (the-as uint 1))
        (set! (-> s3-0 root-prim) v1-7)
        )
      (set! (-> s3-0 nav-radius) (* 0.75 (-> s3-0 root-prim local-sphere w)))
      (let ((v1-10 (-> s3-0 root-prim)))
        (set! (-> s3-0 backup-collide-as) (-> v1-10 prim-core collide-as))
        (set! (-> s3-0 backup-collide-with) (-> v1-10 prim-core collide-with))
        )
      (set! (-> this root) s3-0)
      )
    (process-drawable-from-entity! this arg0)
    (initialize-skeleton this (the-as skeleton-group s4-0) (the-as pair 0))
    )
  (go (method-of-object this idle))
  (none)
  )
