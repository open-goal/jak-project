;;-*-Lisp-*-
(in-package goal)

;; definition of type ruffian-course
(deftype ruffian-course (bot-course)
  ((ouch-speeches bot-speech-list-shuffle  :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; definition for method 3 of type ruffian-course
(defmethod inspect ruffian-course ((obj ruffian-course))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tcourse-id: ~D~%" (-> obj course-id))
  (format #t "~1Tspeech-count: ~D~%" (-> obj speech-count))
  (format #t "~1Tspot-count: ~D~%" (-> obj spot-count))
  (format #t "~1Tretry-cookie: ~D~%" (-> obj retry-cookie))
  (format #t "~1Ttoo-far-warn-speeches: ~A~%" (-> obj too-far-warn-speeches))
  (format #t "~1Ttoo-far-fail-speeches: ~A~%" (-> obj too-far-fail-speeches))
  (format #t "~1Tattack-player-speeches: ~A~%" (-> obj attack-player-speeches))
  (format #t "~1Tdefault-check-too-far: ~A~%" (-> obj default-check-too-far))
  (format #t "~1Twaypoints: ~A~%" (-> obj waypoints))
  (format #t "~1Tspeeches: #x~X~%" (-> obj speeches))
  (format #t "~1Tspeech-tunings: #x~X~%" (-> obj speech-tunings))
  (format #t "~1Tdirs: #x~X~%" (-> obj dirs))
  (format #t "~1Tspots: #x~X~%" (-> obj spots))
  (format #t "~1Touch-speeches: ~A~%" (-> obj ouch-speeches))
  (label cfg-4)
  obj
  )

;; definition of type ruffian
(deftype ruffian (bot)
  ((ruf-course         ruffian-course  :offset        652)
   (travel-anim-interp float           :offset-assert 992)
   (fired-gun-count    uint32          :offset-assert 996)
   (next-fire-time     time-frame      :offset-assert 1000)
   )
  :heap-base #x370
  :method-count-assert 246
  :size-assert         #x3f0
  :flag-assert         #xf6037003f0
  (:methods
    (kick () _type_ :state 225)
    (blast () _type_ :state 226)
    (alert-idle () _type_ :state 227)
    (alert-turn () _type_ :state 228)
    (traveling () _type_ :state 229)
    (traveling-blocked () _type_ :state 230)
    (waiting-idle () _type_ :state 231)
    (waiting-turn () _type_ :state 232)
    (scared-idle () _type_ :state 233)
    (scared-turn () _type_ :state 234)
    (plant-bomb () _type_ :state 235)
    (bomb-recoil () _type_ :state 236)
    (ruffian-method-237 (_type_) symbol 237)
    (ruffian-method-238 (_type_) symbol 238)
    (fire-gun (_type_ vector) none 239)
    (ruffian-method-240 (_type_) none 240)
    (ruffian-method-241 (_type_) none 241)
    (ruffian-method-242 (_type_) none 242)
    (ruffian-method-243 (_type_) symbol 243)
    (ruffian-method-244 (_type_) none 244)
    (ruffian-method-245 (_type_) none 245)
    )
  )

;; definition for method 3 of type ruffian
(defmethod inspect ruffian ((obj ruffian))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bot inspect)))
    (t9-0 obj)
    )
  (format #t "~2Ttravel-anim-interp: ~f~%" (-> obj travel-anim-interp))
  (format #t "~2Tfired-gun-count: ~D~%" (-> obj fired-gun-count))
  (format #t "~2Tnext-fire-time: ~D~%" (-> obj next-fire-time))
  (label cfg-4)
  obj
  )

;; definition of type ruft-wait-spot
(deftype ruft-wait-spot (ai-task)
  ((check-done   (function ruft-wait-spot ruffian symbol)   :offset  32)
   (which-spot   int8                                       :offset  36)
   (num-spots    uint8                                      :offset  37)
   (spot-indexes uint8                                    6 :offset  38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type ruft-wait-spot
(defmethod inspect ruft-wait-spot ((obj ruft-wait-spot))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[6] @ #x~X~%" (-> obj spot-indexes))
  (label cfg-4)
  obj
  )

;; definition of type ruft-choose-jump
(deftype ruft-choose-jump (ai-task)
  ((check-done        (function ruft-choose-jump ruffian symbol)   :offset  32)
   (which-spot        int8                                         :offset  36)
   (num-spots         uint8                                        :offset  37)
   (src-spot-indexes  uint8                                      4 :offset  38)
   (dest-spot-indexes uint8                                      4 :offset  42)
   )
  :method-count-assert 14
  :size-assert         #x30
  :flag-assert         #xe00000030
  (:methods
    (ruft-choose-jump-method-12 (_type_ ruffian) symbol 12)
    (ruft-choose-jump-method-13 (_type_ ruffian) int 13)
    )
  )

;; definition for method 3 of type ruft-choose-jump
(defmethod inspect ruft-choose-jump ((obj ruft-choose-jump))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tsrc-spot-indexes[4] @ #x~X~%" (-> obj src-spot-indexes))
  (format #t "~1Tdest-spot-indexes[4] @ #x~X~%" (-> obj dest-spot-indexes))
  (label cfg-4)
  obj
  )

;; definition of type ruft-fight-focus
(deftype ruft-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type ruft-fight-focus
(defmethod inspect ruft-fight-focus ((obj ruft-fight-focus))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (label cfg-4)
  obj
  )

;; definition of type ruft-plant-bomb
(deftype ruft-plant-bomb (ai-task)
  ((check-done         (function ruft-plant-bomb ruffian symbol)   :offset  32)
   (which-spot         int8                                        :offset  36)
   (num-spots          uint8                                       :offset  37)
   (stand-spot-indexes uint8                                     2 :offset  38)
   (face-spot-indexes  uint8                                     2 :offset  40)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type ruft-plant-bomb
(defmethod inspect ruft-plant-bomb ((obj ruft-plant-bomb))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tstand-spot-indexes[2] @ #x~X~%" (-> obj stand-spot-indexes))
  (format #t "~1Tface-spot-indexes[2] @ #x~X~%" (-> obj face-spot-indexes))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
