;;-*-Lisp-*-
(in-package goal)

;; definition of type hal
(deftype hal (bot)
  ((handle-failed-slave-id int8     :offset-assert 992)
   (slave-handle           handle 3 :offset-assert 1000)
   )
  :heap-base #x380
  :method-count-assert 227
  :size-assert         #x400
  :flag-assert         #xe303800400
  (:methods
    (hal-method-225 (_type_) symbol 225)
    (hal-method-226 (_type_) symbol 226)
    )
  )

;; definition for method 3 of type hal
(defmethod inspect hal ((obj hal))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bot inspect)))
    (t9-0 obj)
    )
  (format #t "~2Thandle-failed-slave-id: ~D~%" (-> obj handle-failed-slave-id))
  (format #t "~2Tslave-handle[3] @ #x~X~%" (-> obj slave-handle))
  (label cfg-4)
  obj
  )

;; definition of type halt-wait-spot
(deftype halt-wait-spot (ai-task)
  ((check-done   (function halt-wait-spot hal symbol)   :offset  32)
   (which-spot   int8                                   :offset  36)
   (num-spots    uint8                                  :offset  37)
   (spot-indexes uint8                                6 :offset  38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type halt-wait-spot
(defmethod inspect halt-wait-spot ((obj halt-wait-spot))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[6] @ #x~X~%" (-> obj spot-indexes))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
