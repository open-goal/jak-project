;;-*-Lisp-*-
(in-package goal)

;; definition of type cboss-tractor
(deftype cboss-tractor (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type cboss-tractor
(defmethod inspect ((this cboss-tractor))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-cboss-tractor cboss-tractor cboss-tractor-lod0-jg cboss-tractor-idle-ja
              ((cboss-tractor-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 10 -15 40)
              )

;; failed to figure out what this is:
(defstate idle (cboss-tractor)
  :virtual #t
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type cboss-tractor
;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! ((this cboss-tractor) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-cboss-tractor" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (go (method-of-object this idle))
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-cboss-elevator cboss-elevator cboss-elevator-lod0-jg cboss-elevator-idle-ja
              ((cboss-elevator-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 20)
              )

;; definition of type cboss-elevator
(deftype cboss-elevator (elevator)
  ((sound-id  sound-id)
   )
  )

;; definition for method 3 of type cboss-elevator
(defmethod inspect ((this cboss-elevator))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type elevator inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate running (cboss-elevator)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type elevator running) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (process-grab? *target* #f)
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type elevator running) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (process-release? *target*)
    (sound-stop (-> self sound-id))
    (sound-play "cas-elevate-end")
    )
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type elevator running) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (sound-play "cas-elevate" :id (-> self sound-id) :position (-> self root trans))
    )
  )

;; definition for method 30 of type cboss-elevator
(defmethod get-art-group ((this cboss-elevator))
  "@returns The associated [[art-group]]"
  (art-group-get-by-name *level* "skel-cboss-elevator" (the-as (pointer uint32) #f))
  )

;; definition for method 10 of type cboss-elevator
(defmethod deactivate ((this cboss-elevator))
  (sound-stop (-> this sound-id))
  (call-parent-method this)
  (none)
  )

;; definition for method 33 of type cboss-elevator
;; WARN: Return type mismatch int vs none.
(defmethod init-plat! ((this cboss-elevator))
  "Does any necessary initial platform setup.
For example for an elevator pre-compute the distance between the first and last points (both ways) and clear the sound."
  (set! (-> this sound-id) (new-sound-id))
  0
  (none)
  )

;; definition for method 43 of type cboss-elevator
(defmethod move-between-points ((this cboss-elevator) (arg0 vector) (arg1 float) (arg2 float))
  "Move between two points on the elevator's path
@param vec TODO not sure
@param point-a The first point fetched from the elevator's path
@param point-b The second point fetched from the path
@see [[path-control]] and [[elevator]]"
  (let ((s4-0 (get-point-in-path! (-> this path) (new 'stack-no-clear 'vector) arg1 'interp))
        (a0-3 (get-point-in-path! (-> this path) (new 'stack-no-clear 'vector) arg2 'interp))
        (v1-3 (-> this root trans))
        )
    (when (and (< (-> a0-3 y) (-> s4-0 y)) (< (-> arg0 y) (+ -8192.0 (-> v1-3 y))))
      (let ((s4-2 (vector-! (new 'stack-no-clear 'vector) arg0 v1-3)))
        (vector-inv-orient-by-quat! s4-2 s4-2 (-> this root quat))
        (and (< (fabs (-> s4-2 x)) 24576.0) (< 0.0 (-> s4-2 z)) (< (-> s4-2 z) 49152.0))
        )
      )
    )
  )

;; definition for method 45 of type cboss-elevator
(defmethod commited-to-ride? ((this cboss-elevator))
  "@returns if the target is considered within the elevator area enough to begin descending/ascending"
  (let* ((gp-0 *target*)
         (a0-2 (if (type? gp-0 process-focusable)
                   gp-0
                   )
               )
         )
    (when a0-2
      (let* ((v1-1 (get-trans a0-2 0))
             (gp-2 (vector-! (new 'stack-no-clear 'vector) v1-1 (-> this root trans)))
             )
        (vector-inv-orient-by-quat! gp-2 gp-2 (-> this root quat))
        (and (< (fabs (-> gp-2 x)) 40960.0) (< (fabs (-> gp-2 z)) 40960.0))
        )
      )
    )
  )

;; definition for method 31 of type cboss-elevator
;; WARN: Return type mismatch collide-shape-moving vs none.
(defmethod init-plat-collision! ((this cboss-elevator))
  "TODO - collision stuff for setting up the platform"
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 2))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle camera-blocker pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 81920.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (let ((v1-14 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec obstacle camera-blocker pusher))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid rideable))
      (set! (-> v1-14 transform-index) 0)
      (set-vector! (-> v1-14 local-sphere) 0.0 0.0 0.0 81920.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-17 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (none)
  )

;; definition of type krew-boss-clone
(deftype krew-boss-clone (nav-enemy)
  ((old-y-deg           float)
   (diff-angle          degrees)
   (hit-target          symbol)
   (lightning           lightning-control  4)
   (wiggle-time         time-frame)
   (wiggle-angle        degrees)
   (delta-wiggle-angle  degrees)
   (wiggle-factor       float)
   (id                  sound-id)
   )
  (:state-methods
    spawning
    )
  (:methods
    (krew-boss-clone-method-179 (_type_ vector) none)
    (krew-boss-clone-method-180 (_type_) none)
    )
  )

;; definition for method 3 of type krew-boss-clone
(defmethod inspect ((this krew-boss-clone))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Told-y-deg: ~f~%" (-> this old-y-deg))
  (format #t "~2Tdiff-angle: ~f~%" (-> this diff-angle))
  (format #t "~2Thit-target: ~A~%" (-> this hit-target))
  (format #t "~2Tlightning[4] @ #x~X~%" (-> this lightning))
  (format #t "~2Twiggle-time: ~D~%" (-> this wiggle-time))
  (format #t "~2Twiggle-angle: ~f~%" (-> this wiggle-angle))
  (format #t "~2Tdelta-wiggle-angle: ~f~%" (-> this delta-wiggle-angle))
  (format #t "~2Twiggle-factor: ~f~%" (-> this wiggle-factor))
  (format #t "~2Tid: ~D~%" (-> this id))
  (label cfg-4)
  this
  )

;; definition of type krew-boss
(deftype krew-boss (nav-enemy)
  ((task-timeout            time-frame)
   (movie-handle            handle)
   (clones                  handle  8)
   (last-closest-spawn      int32)
   (next-clone-side         int32)
   (next-shooting-frame     int32)
   (old-y-deg               float)
   (diff-angle              degrees)
   (hit-target              symbol)
   (floating                symbol)
   (next-path-point         int32)
   (num-clones-to-spawn     int32)
   (gameplay-pass           int32)
   (hud-handle              handle)
   (channel                 uint8)
   (id                      sound-id)
   (play-clone-wave-speech  symbol)
   (last-damage-time        time-frame)
   (spawn-charge            symbol)
   )
  (:state-methods
    hidden
    play-intro
    )
  )

;; definition for method 3 of type krew-boss
(defmethod inspect ((this krew-boss))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttask-timeout: ~D~%" (-> this task-timeout))
  (format #t "~2Tmovie-handle: ~D~%" (-> this movie-handle))
  (format #t "~2Tclones[8] @ #x~X~%" (-> this clones))
  (format #t "~2Tlast-closest-spawn: ~D~%" (-> this last-closest-spawn))
  (format #t "~2Tnext-clone-side: ~D~%" (-> this next-clone-side))
  (format #t "~2Tnext-shooting-frame: ~D~%" (-> this next-shooting-frame))
  (format #t "~2Told-y-deg: ~f~%" (-> this old-y-deg))
  (format #t "~2Tdiff-angle: ~f~%" (-> this diff-angle))
  (format #t "~2Thit-target: ~A~%" (-> this hit-target))
  (format #t "~2Tfloating: ~A~%" (-> this floating))
  (format #t "~2Tnext-path-point: ~D~%" (-> this next-path-point))
  (format #t "~2Tnum-clones-to-spawn: ~D~%" (-> this num-clones-to-spawn))
  (format #t "~2Tgameplay-pass: ~D~%" (-> this gameplay-pass))
  (format #t "~2Thud-handle: ~D~%" (-> this hud-handle))
  (format #t "~2Tchannel: ~D~%" (-> this channel))
  (format #t "~2Tid: ~D~%" (-> this id))
  (format #t "~2Tplay-clone-wave-speech: ~A~%" (-> this play-clone-wave-speech))
  (format #t "~2Tlast-damage-time: ~D~%" (-> this last-damage-time))
  (format #t "~2Tspawn-charge: ~A~%" (-> this spawn-charge))
  (label cfg-4)
  this
  )

;; definition for function clones-wave-speech
;; WARN: Return type mismatch int vs none.
(defun clones-wave-speech ((arg0 krew-boss))
  (when (= (get-status *gui-control* (-> arg0 id)) (gui-status unknown))
    (let ((v1-3 (rand-vu-int-count 17)))
      (cond
        ((zero? v1-3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf003" -99.0 0)
               )
         )
        ((= v1-3 1)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf004" -99.0 0)
               )
         )
        ((= v1-3 2)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf005" -99.0 0)
               )
         )
        ((= v1-3 3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf006" -99.0 0)
               )
         )
        ((= v1-3 4)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf007" -99.0 0)
               )
         )
        ((= v1-3 5)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf008" -99.0 0)
               )
         )
        ((= v1-3 6)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf009" -99.0 0)
               )
         )
        ((= v1-3 7)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf010" -99.0 0)
               )
         )
        ((= v1-3 8)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf035" -99.0 0)
               )
         )
        ((= v1-3 9)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf037" -99.0 0)
               )
         )
        ((= v1-3 10)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf040" -99.0 0)
               )
         )
        ((= v1-3 11)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf012" -99.0 0)
               )
         )
        ((= v1-3 12)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf039" -99.0 0)
               )
         )
        ((= v1-3 13)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds261" -99.0 0)
               )
         )
        ((= v1-3 14)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds262" -99.0 0)
               )
         )
        ((= v1-3 15)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds265" -99.0 0)
               )
         )
        ((= v1-3 16)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds266" -99.0 0)
               )
         )
        )
      )
    )
  0
  (none)
  )

;; definition for function krew-hit-speech
;; WARN: Return type mismatch int vs none.
(defun krew-hit-speech ((arg0 krew-boss))
  (when (= (get-status *gui-control* (-> arg0 id)) (gui-status unknown))
    (let ((v1-3 (rand-vu-int-count 14)))
      (cond
        ((zero? v1-3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf016" -99.0 0)
               )
         )
        ((= v1-3 1)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf017" -99.0 0)
               )
         )
        ((= v1-3 2)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf018" -99.0 0)
               )
         )
        ((= v1-3 3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf019" -99.0 0)
               )
         )
        ((= v1-3 4)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf020" -99.0 0)
               )
         )
        ((= v1-3 5)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf025" -99.0 0)
               )
         )
        ((= v1-3 6)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf042" -99.0 0)
               )
         )
        ((= v1-3 7)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds264" -99.0 0)
               )
         )
        ((= v1-3 8)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds267" -99.0 0)
               )
         )
        ((= v1-3 9)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds268" -99.0 0)
               )
         )
        )
      )
    )
  0
  (none)
  )

;; definition for function krew-hits-jak-speech
;; WARN: Return type mismatch int vs none.
(defun krew-hits-jak-speech ((arg0 krew-boss))
  (when (= (get-status *gui-control* (-> arg0 id)) (gui-status unknown))
    (let ((v1-3 (rand-vu-int-count 12)))
      (cond
        ((zero? v1-3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf028" -99.0 0)
               )
         )
        ((= v1-3 1)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf030" -99.0 0)
               )
         )
        ((= v1-3 2)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf031" -99.0 0)
               )
         )
        ((= v1-3 3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf032" -99.0 0)
               )
         )
        ((= v1-3 4)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf033" -99.0 0)
               )
         )
        ((= v1-3 5)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf034" -99.0 0)
               )
         )
        ((= v1-3 6)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf036" -99.0 0)
               )
         )
        ((= v1-3 7)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf038" -99.0 0)
               )
         )
        )
      )
    )
  0
  (none)
  )

;; definition for function krew-comes-in-speech
;; WARN: Return type mismatch int vs none.
(defun krew-comes-in-speech ((arg0 krew-boss))
  (when (= (get-status *gui-control* (-> arg0 id)) (gui-status unknown))
    (let ((v1-3 (rand-vu-int-count 11)))
      (cond
        ((zero? v1-3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf014" -99.0 0)
               )
         )
        ((= v1-3 1)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf015" -99.0 0)
               )
         )
        ((= v1-3 2)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf022" -99.0 0)
               )
         )
        ((= v1-3 3)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf023" -99.0 0)
               )
         )
        ((= v1-3 4)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf024" -99.0 0)
               )
         )
        ((= v1-3 5)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf026" -99.0 0)
               )
         )
        ((= v1-3 6)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf027" -99.0 0)
               )
         )
        ((= v1-3 7)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf029" -99.0 0)
               )
         )
        ((= v1-3 8)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf011" -99.0 0)
               )
         )
        ((= v1-3 9)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "kwbf013" -99.0 0)
               )
         )
        ((= v1-3 10)
         (set! (-> arg0 id)
               (add-process *gui-control* arg0 (the-as gui-channel (-> arg0 channel)) (gui-action play) "ds263" -99.0 0)
               )
         )
        )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-krew-boss krew-lowres krew-lowres-lod0-jg krew-lowres-idle-ja
              ((krew-lowres-lod0-mg (meters 20)) (krew-lowres-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              :shadow krew-lowres-shadow-mg
              )

;; failed to figure out what this is:
(defskelgroup skel-krew-boss-clone krew-clone krew-clone-lod0-jg krew-clone-idle-ja
              ((krew-clone-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              :shadow krew-clone-shadow-mg
              :origin-joint-index 3
              )

;; definition for symbol *krew-boss-clone-nav-enemy-info*, type nav-enemy-info
(define *krew-boss-clone-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd push) :param0 #x1e)
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x3 :param0 #x64 :param1 #x64)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 3
    :notice-anim 3
    :hostile-anim 6
    :hit-anim 3
    :knocked-anim 10
    :knocked-land-anim 11
    :die-anim 12
    :die-falling-anim 3
    :victory-anim -1
    :jump-wind-up-anim 3
    :jump-in-air-anim 3
    :jump-land-anim 3
    :neck-joint 5
    :look-at-joint 5
    :bullseye-joint 4
    :sound-hit (static-sound-name "krew-boss-hit")
    :sound-die (static-sound-name "krew-boss-die")
    :notice-distance (meters 50)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 200)
    :default-hit-points 8
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :movement-gravity (meters -100)
    :friction 0.9
    :attack-shove-back (meters 3.5)
    :attack-shove-up (meters 2)
    :attack-mode 'shock-green
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 65536.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 65536.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 3
    :turn-anim -1
    :run-anim 6
    :taunt-anim -1
    :run-travel-speed (meters 5)
    :run-acceleration (meters 32)
    :run-turning-acceleration (meters 20)
    :walk-travel-speed (meters 4)
    :walk-acceleration (meters 16)
    :walk-turning-acceleration (meters 20)
    :maximum-rotation-rate (degrees 360)
    :notice-nav-radius (meters 2)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

;; failed to figure out what this is:
(set! (-> *krew-boss-clone-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for method 55 of type krew-boss-clone
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod common-post ((this krew-boss-clone))
  "Does a lot of various things relating to interacting with the target
- tracks when the enemy was last drawn
- looks at the target and handles attacking
@TODO Not extremely well understood yet"
  (let ((t9-0 (method-of-type nav-enemy common-post)))
    (t9-0 this)
    )
  (let ((s5-0 (new 'stack-no-clear 'vector))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (vector<-cspace! s5-0 (-> this node-list data 36))
    (dotimes (s3-0 4)
      (let ((v1-2 s3-0))
        (cond
          ((zero? v1-2)
           (vector<-cspace! s5-0 (-> this node-list data 7))
           (vector<-cspace! s4-0 (-> this node-list data 15))
           )
          ((= v1-2 1)
           (vector<-cspace! s5-0 (-> this node-list data 6))
           (vector<-cspace! s4-0 (-> this node-list data 7))
           )
          ((= v1-2 2)
           (vector<-cspace! s5-0 (-> this node-list data 19))
           (vector<-cspace! s4-0 (-> this node-list data 27))
           )
          (else
            (vector<-cspace! s5-0 (-> this node-list data 18))
            (vector<-cspace! s4-0 (-> this node-list data 19))
            )
          )
        )
      (let ((a0-13 (-> this lightning s3-0))
            (v1-17 s5-0)
            )
        (set! (-> a0-13 state meet data 0 quad) (-> v1-17 quad))
        )
      (let ((a0-16 (-> this lightning s3-0))
            (v1-21 s4-0)
            )
        (set! (-> a0-16 state meet data (+ (-> a0-16 state points-to-draw) -1) quad) (-> v1-21 quad))
        )
      (when (not (and (-> this next-state) (= (-> this next-state name) 'die-falling)))
        (case (-> this lightning s3-0 state mode)
          (((lightning-mode lm0) (lightning-mode lm3))
           (let ((v1-35 (-> this lightning s3-0))
                 (a0-22 1)
                 )
             (let ((a1-14 (!= a0-22 (-> v1-35 state mode))))
               (case a0-22
                 ((3)
                  (if a1-14
                      (set! (-> v1-35 state counter) 0.0)
                      )
                  )
                 ((1)
                  (set! (-> v1-35 state start-color) (-> v1-35 spec start-color))
                  (set! (-> v1-35 state end-color) (-> v1-35 spec end-color))
                  )
                 )
               )
             (set! (-> v1-35 state mode) (the-as lightning-mode a0-22))
             )
           )
          )
        )
      )
    )
  (if (< (-> this root trans y) 1228800.0)
      (deactivate this)
      )
  0
  (none)
  )

;; definition for method 74 of type krew-boss-clone
(defmethod general-event-handler ((this krew-boss-clone) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (with-pp
    (case arg2
      (('touch 'bonk 'attack)
       (when (and (-> this next-state) (= (-> this next-state name) 'hostile))
         (send-event
           arg0
           'attack
           #f
           (static-attack-info
             ((id (new-attack-id)) (mode 'shock-green) (shove-up (meters 2)) (shove-back (meters 4)) (damage 1.0))
             )
           )
         (cond
           ((!= arg0 *target*)
            ((method-of-type nav-enemy general-event-handler) this arg0 arg1 arg2 arg3)
            )
           (else
             (ja-channel-push! 1 (seconds 0.1))
             (let ((a0-15 (-> this skel root-channel 0)))
               (set! (-> a0-15 frame-group)
                     (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info die-anim)))
                     )
               (set! (-> a0-15 param 0) 0.0)
               (set! (-> a0-15 param 1) (* 2.0 (-> pp clock time-adjust-ratio)))
               (set! (-> a0-15 frame-num)
                     (the float
                          (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info die-anim))) frames num-frames)
                             -1
                             )
                          )
                     )
               (joint-control-channel-group!
                 a0-15
                 (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info die-anim)))
                 num-func-seek!
                 )
               )
             (kill-prefer-falling this)
             )
           )
         )
       )
      (('track)
       (cond
         ((-> arg3 param 0)
          (if (logtest? (-> this enemy-flags) (enemy-flag vulnerable))
              #t
              'abort
              )
          )
         (else
           (logtest? (-> this enemy-flags) (enemy-flag vulnerable))
           )
         )
       )
      (else
        ((method-of-type nav-enemy general-event-handler) this arg0 arg1 arg2 arg3)
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate spawning (krew-boss-clone)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (sound-play "krew-spawn")
    )
  :exit (behavior ()
    (set! (-> self id) (sound-play "krew-travel"))
    )
  :trans (behavior ()
    (let ((gp-1 (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> self root trans)))
          (s5-0 (quaternion->matrix (new-stack-matrix0) (-> self root quat)))
          )
      (vector-normalize! gp-1 1.0)
      (let* ((a2-1 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-0 vector 1) 1.0))
             (a0-8 (vector-normalize! (vector-flatten! (new 'stack-no-clear 'vector) gp-1 a2-1) 1.0))
             )
        (quaternion-axis-angle! (-> self root quat) 0.0 1.0 0.0 (vector-y-angle a0-8))
        )
      )
    )
  :code (behavior ()
    (ja-no-eval :group! krew-clone-birth-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-virtual hostile)
    )
  :post (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag recover-applied-velocity))
    (let ((gp-0 (-> self root)))
      (let ((a1-0 (new-stack-vector0)))
        (vector-v++! (-> gp-0 transv) (compute-acc-due-to-gravity gp-0 a1-0 (-> self enemy-info slip-factor)))
        )
      (let ((a2-1 (new 'stack-no-clear 'collide-query)))
        (set! (-> a2-1 collide-with) (-> gp-0 root-prim prim-core collide-with))
        (set! (-> a2-1 ignore-process0) self)
        (set! (-> a2-1 ignore-process1) #f)
        (set! (-> a2-1 ignore-pat) (-> gp-0 pat-ignore-mask))
        (set! (-> a2-1 action-mask) (collide-action solid))
        (fill-cache-integrate-and-collide gp-0 (-> gp-0 transv) a2-1 (meters 0))
        )
      )
    (enemy-method-111 self)
    (common-post self)
    )
  )

;; failed to figure out what this is:
(defstate knocked (krew-boss-clone)
  :virtual #t
  :enter (behavior ()
    (sound-play "krew-gets-hit")
    (let ((t9-2 (-> (method-of-type nav-enemy knocked) enter)))
      (if t9-2
          (t9-2)
          )
      )
    )
  )

;; definition for method 77 of type krew-boss-clone
(defmethod enemy-method-77 ((this krew-boss-clone) (arg0 enemy-knocked-info))
  (with-pp
    (ja-channel-push! 1 0)
    (cond
      ((<= (-> this hit-points) 0)
       (let ((a0-2 (-> this skel root-channel 0)))
         (set! (-> a0-2 frame-group)
               (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info die-anim)))
               )
         (set! (-> a0-2 param 0) 0.0)
         (set! (-> a0-2 param 1) (* 2.0 (-> pp clock time-adjust-ratio)))
         (set! (-> a0-2 frame-num)
               (the float
                    (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info die-anim))) frames num-frames)
                       -1
                       )
                    )
               )
         (joint-control-channel-group!
           a0-2
           (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info die-anim)))
           num-func-seek!
           )
         )
       )
      (else
        (let ((a0-3 (-> this skel root-channel 0)))
          (set! (-> a0-3 frame-group)
                (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim)))
                )
          (set! (-> a0-3 param 0)
                (the float
                     (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim))) frames num-frames)
                        -1
                        )
                     )
                )
          (set! (-> a0-3 param 1) (* 2.0 (-> pp clock time-adjust-ratio)))
          (set! (-> a0-3 frame-num) 0.0)
          (joint-control-channel-group!
            a0-3
            (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim)))
            num-func-seek!
            )
          )
        )
      )
    #t
    )
  )

;; definition for method 78 of type krew-boss-clone
(defmethod enemy-method-78 ((this krew-boss-clone) (arg0 enemy-knocked-info))
  (when (> (-> this hit-points) 0)
    (ja-channel-push! 1 (seconds 0.1))
    (let ((a0-2 (-> this skel root-channel 0)))
      (set! (-> a0-2 frame-group)
            (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
            )
      (set! (-> a0-2 param 0)
            (the float
                 (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
                        frames
                        num-frames
                        )
                    -1
                    )
                 )
            )
      (set! (-> a0-2 param 1) (* 5.0 (-> arg0 anim-speed)))
      (set! (-> a0-2 frame-num) 0.0)
      (joint-control-channel-group!
        a0-2
        (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
        num-func-seek!
        )
      )
    )
  #t
  )

;; definition for method 79 of type krew-boss-clone
(defmethod enemy-method-79 ((this krew-boss-clone) (arg0 int) (arg1 enemy-knocked-info))
  (local-vars (s5-0 symbol))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (enemy-method-77 this arg1)
       #f
       )
      ((= v1-0 1)
       (set! s5-0 (ja-done? 0))
       (ja-eval)
       s5-0
       )
      ((= v1-0 2)
       (set! s5-0 (not (enemy-method-78 this arg1)))
       (set! (-> this incoming blue-juggle-count) (the-as uint 0))
       s5-0
       )
      ((= v1-0 3)
       (set! s5-0 (ja-done? 0))
       (ja-eval)
       s5-0
       )
      ((= v1-0 4)
       (vector-reset! (-> this root transv))
       #t
       )
      (else
        #t
        )
      )
    )
  )

;; definition for method 180 of type krew-boss-clone
;; WARN: Return type mismatch int vs none.
(defmethod krew-boss-clone-method-180 ((this krew-boss-clone))
  (let* ((f0-0 (rand-vu-float-range 0.0 1.0))
         (f1-1 (+ 1.0 (* 2.0 f0-0)))
         (f2-2 f1-1)
         (f2-4 (/ 1.0 f2-2))
         )
    (+ 1.0 (* 0.2 f0-0))
    (set! (-> this delta-wiggle-angle) (* 182.04445 f1-1))
    (set! (-> this wiggle-factor) (* 2.0 f2-4))
    )
  0
  (none)
  )

;; definition for method 179 of type krew-boss-clone
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod krew-boss-clone-method-179 ((this krew-boss-clone) (arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (+! (-> this wiggle-angle) (-> this delta-wiggle-angle))
    (if (< 65536.0 (-> this wiggle-angle))
        (+! (-> this wiggle-angle) -65536.0)
        )
    (let* ((v1-5 (-> this root trans))
           (a1-2 (vector-! (new 'stack-no-clear 'vector) v1-5 arg0))
           (s3-0 (vector-rotate-around-y! (new 'stack-no-clear 'vector) a1-2 16384.0))
           (s4-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-6 (* (-> this wiggle-factor) (sin (-> this wiggle-angle)))))
        (.mov vf7 v1-6)
        )
      (.lvf vf5 (&-> s3-0 quad))
      (.lvf vf4 (&-> arg0 quad))
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> s4-0 quad) vf6)
      (let ((v1-8 (-> this nav state)))
        (logclear! (-> v1-8 flags) (nav-state-flag directional-mode))
        (logior! (-> v1-8 flags) (nav-state-flag target-poly-dirty))
        (set! (-> v1-8 target-post quad) (-> s4-0 quad))
        )
      )
    0
    0
    (none)
    )
  )

;; definition for method 68 of type krew-boss-clone
(defmethod go-stare2 ((this krew-boss-clone))
  (go (method-of-object this hostile))
  )

;; failed to figure out what this is:
(defstate hostile (krew-boss-clone)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-6 (ja-group)))
      (when (not (and v1-6 (= v1-6 (-> self draw art-group data (-> self enemy-info hostile-anim)))))
        (ja-channel-push! 1 (seconds 0.1))
        (ja :group! (-> self draw art-group data (-> self enemy-info hostile-anim)) :num! min)
        )
      )
    )
  :code (behavior ()
    (set! (-> self wiggle-time) (+ (current-time) (seconds -10)))
    (set! (-> self wiggle-angle) 0.0)
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (until #f
        (ja :num! (loop! f30-0))
        (when (time-elapsed? (-> self wiggle-time) (seconds 1))
          (set-time! (-> self wiggle-time))
          (krew-boss-clone-method-180 self)
          )
        (suspend)
        )
      )
    #f
    )
  :post (behavior ()
    (krew-boss-clone-method-179 self (target-pos 0))
    (nav-enemy-method-176 self)
    )
  )

;; failed to figure out what this is:
(defstate die (krew-boss-clone)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (if (nonzero? (-> self id))
        (sound-stop (-> self id))
        )
    (when (< 25 (rand-vu-int-range 0 50))
      (let ((gp-1 (-> self root))
            (a1-1 (new 'stack-no-clear 'collide-query))
            )
        (when (find-ground gp-1 a1-1 (-> self enemy-info recover-gnd-collide-with) 8192.0 81920.0 1024.0)
          (let ((f0-1 (- (-> self root trans y) (-> gp-1 gspot-pos y))))
            (when (and (>= f0-1 -1228.8) (>= 26624.0 f0-1))
              (cond
                ((>= (rand-vu-int-range 0 100) (/ (* 40 (you-suck-stage *game-info* #f)) 4))
                 (set! (-> self fact pickup-type) (pickup-type ammo-random))
                 (set! (-> self fact pickup-amount) 1.0)
                 )
                (else
                  (set! (-> self fact pickup-type) (pickup-type health))
                  (set! (-> self fact pickup-amount) 2.0)
                  )
                )
              (set! (-> self fact fade-time) (seconds 10))
              (let ((v1-25 (drop-pickup (-> self fact) #t *entity-pool* (-> self fact) 0)))
                (when v1-25
                  (set! (-> (the-as collectable (-> v1-25 0)) draw light-index) (the-as uint 0))
                  0
                  )
                )
              )
            )
          )
        )
      )
    )
  :code (behavior ()
    (while (not (ja-done? 0))
      (ja-eval)
      (suspend)
      )
    (send-event self 'death-end)
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  :post enemy-simple-post
  )

;; definition for method 114 of type krew-boss-clone
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this krew-boss-clone))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate enemy hit-by-others-list player-list collectable)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid deadly))
      (set-vector! (-> s4-0 local-sphere) 0.0 8192.0 0.0 8192.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak bot crate enemy hit-by-others-list player-list collectable)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly no-standon))
      (set-vector! (-> v1-13 local-sphere) 0.0 8192.0 0.0 5324.8)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec backgnd jak bot crate enemy hit-by-others-list player-list collectable)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 5324.8 0.0 5324.8)
      )
    (set! (-> s5-0 nav-radius) 4096.0)
    (let ((v1-17 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> s5-0 pat-ignore-mask) (new 'static 'pat-surface :noentity #x1 :probe #x1 :noendlessfall #x1))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 60 of type krew-boss-clone
(defmethod coin-flip? ((this krew-boss-clone))
  "@returns The result of a 50/50 RNG roll"
  #f
  )

;; definition for method 7 of type krew-boss-clone
;; WARN: Return type mismatch nav-enemy vs krew-boss-clone.
(defmethod relocate ((this krew-boss-clone) (arg0 int))
  (dotimes (v1-0 4)
    (if (nonzero? (-> this lightning v1-0))
        (&+! (-> this lightning v1-0) arg0)
        )
    )
  (the-as krew-boss-clone ((method-of-type nav-enemy relocate) this arg0))
  )

;; definition for method 115 of type krew-boss-clone
;; WARN: Return type mismatch object vs none.
(defmethod init-enemy! ((this krew-boss-clone))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-krew-boss-clone" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (logior! (-> this draw global-effect) (draw-control-global-effect disable-envmap))
  (set! (-> this enemy-flags)
        (the-as enemy-flag (logior (enemy-flag no-initial-move-to-ground) (-> this enemy-flags)))
        )
  (set! (-> *krew-boss-clone-nav-enemy-info* nav-mesh)
        (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor 1)
        )
  (init-enemy-behaviour-and-stats! this *krew-boss-clone-nav-enemy-info*)
  (dotimes (s5-1 4)
    (set! (-> this lightning s5-1) (new
                                     'process
                                     'lightning-control
                                     (new 'static 'lightning-spec
                                       :name #f
                                       :flags (lightning-spec-flags lsf0)
                                       :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                       :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                       :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                       :fade-start-factor 0.2
                                       :texture (new 'static 'texture-id :page #xd82)
                                       :reduction 0.42
                                       :num-points 16
                                       :box-size 8192.0
                                       :merge-factor 0.5
                                       :merge-count 2
                                       :radius 512.0
                                       :duration 30.0
                                       :sound #f
                                       )
                                     this
                                     0.0
                                     )
          )
    (let ((v1-17 (-> this lightning s5-1))
          (a0-8 0)
          )
      (let ((a1-6 (!= a0-8 (-> v1-17 state mode))))
        (case a0-8
          ((3)
           (if a1-6
               (set! (-> v1-17 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-17 state start-color) (-> v1-17 spec start-color))
           (set! (-> v1-17 state end-color) (-> v1-17 spec end-color))
           )
          )
        )
      (set! (-> v1-17 state mode) (the-as lightning-mode a0-8))
      )
    )
  (let ((v1-20 (-> this neck)))
    (set! (-> v1-20 up) (the-as uint 1))
    (set! (-> v1-20 nose) (the-as uint 2))
    (set! (-> v1-20 ear) (the-as uint 0))
    (set-vector! (-> v1-20 twist-max) 3640.889 11832.889 0.0 1.0)
    (set! (-> v1-20 ignore-angle) 15473.777)
    )
  (let ((v1-22 (-> this nav)))
    (set! (-> v1-22 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> this root dynam) 573440.0)
  (logior! (-> this nav flags) (nav-control-flag momentum-ignore-heading))
  (set-vector! (-> this root scale) 0.8 0.8 0.8 1.0)
  (set! (-> this draw light-index) (the-as uint 1))
  (set-vector! (-> this draw color-emissive) 0.0 1.0 0.0 0.0)
  (set! (-> this wiggle-angle) 0.0)
  (set! (-> this delta-wiggle-angle) 182.04445)
  (set! (-> this wiggle-factor) 2.0)
  (set! (-> this id) (new 'static 'sound-id))
  (logclear! (-> this mask) (process-mask actor-pause))
  (go (method-of-object this spawning))
  (none)
  )

;; definition of type krew-boss-shot
(deftype krew-boss-shot (guard-shot)
  ()
  )

;; definition for method 3 of type krew-boss-shot
(defmethod inspect ((this krew-boss-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type guard-shot inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for function krew-boss-shot-move
;; WARN: Return type mismatch int vs none.
(defun krew-boss-shot-move ((arg0 krew-boss-shot))
  (guard-shot-move arg0)
  0
  (none)
  )

;; definition for method 31 of type krew-boss-shot
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this krew-boss-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (call-parent-method this)
  (set! (-> this move) krew-boss-shot-move)
  (set! (-> this max-speed) 245760.0)
  (set! (-> this timeout) (seconds 5))
  (none)
  )

;; definition for method 28 of type krew-boss-shot
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this krew-boss-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "krew-shot-fire")
       )
      ((= v1-0 (projectile-options lose-altitude))
       (sound-play "krew-shot-hit")
       )
      )
    )
  0
  (none)
  )

;; definition of type hud-krew-boss
(deftype hud-krew-boss (hud)
  ()
  )

;; definition for method 3 of type hud-krew-boss
(defmethod inspect ((this hud-krew-boss))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 15 of type hud-krew-boss
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-krew-boss))
  (set-hud-piece-position! (-> this sprites 1) (the int (+ 462.0 (* 130.0 (-> this offset)))) 350)
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 1)) -32 0)
  (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites 1)) -96 0)
  (set-as-offset-from! (-> this sprites 5) (the-as vector4w (-> this sprites 1)) -62 14)
  (set-as-offset-from! (-> this sprites 6) (the-as vector4w (-> this sprites 1)) -32 14)
  (let ((s5-0 (-> this values 0 current))
        (f28-0 (* 0.01 (the float (-> this values 1 current))))
        (f30-0 (* 0.01 (the float (-> this values 2 current))))
        )
    (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites 1)) -92 15)
    (cond
      ((zero? s5-0)
       (set! (-> this sprites 3 color x) 0)
       (set! (-> this sprites 3 color y) 255)
       (set! f28-0 (+ 2.0 f28-0))
       )
      ((= s5-0 1)
       (set! (-> this sprites 3 color y) 255)
       (set! (-> this sprites 3 color x) 255)
       (set! f28-0 (+ 1.0 f28-0))
       )
      (else
        (set! (-> this sprites 3 color x) 255)
        (set! (-> this sprites 3 color y) 0)
        0
        )
      )
    (set! (-> this sprites 3 scale-x) (* -7.25 f28-0))
    (set-as-offset-from! (-> this sprites 4) (the-as vector4w (-> this sprites 1)) -84 4)
    (cond
      ((< f30-0 0.5)
       (set! (-> this sprites 4 color x) 255)
       (set! (-> this sprites 4 color y) (the int (lerp 0.0 255.0 (* 2.0 f30-0))))
       )
      (else
        (set! (-> this sprites 4 color x) (the int (lerp 255.0 0.0 (* 2.0 (+ -0.5 f30-0)))))
        (set! (-> this sprites 4 color y) 255)
        )
      )
    (set! (-> this sprites 4 scale-x) (* -18.25 f30-0))
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-krew-boss
;; WARN: Return type mismatch int vs none.
(defmethod update-values ((this hud-krew-boss))
  (set! (-> this values 0 target) (+ (-> (the-as krew-boss (-> this parent 0)) gameplay-pass) -1))
  (let ((v1-7 (/ (-> (the-as krew-boss (-> this parent 0)) hit-points)
                 (if (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
                     2
                     1
                     )
                 )
              )
        )
    (case (-> (the-as krew-boss (-> this parent 0)) gameplay-pass)
      ((1)
       (set! (-> this values 1 target) (the int (* 3.3333333 (the float (+ v1-7 -70)))))
       )
      ((2)
       (set! (-> this values 1 target) (the int (* 3.3333333 (the float (+ v1-7 -40)))))
       )
      (else
        (set! (-> this values 1 target) (the int (* 2.5 (the float v1-7))))
        )
      )
    )
  (when (< (-> this values 1 target) 0)
    (set! (-> this values 1 target) 0)
    0
    )
  ((method-of-type hud update-values) this)
  0
  (none)
  )

;; definition for method 17 of type hud-krew-boss
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-krew-boss))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (set! (-> this values 0 target) 0)
  (set! (-> this values 1 target) 100)
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3b :page #x67a)))
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3c :page #x67a)))
  (set! (-> this sprites 1 flags) (the-as uint 4))
  (set! (-> this sprites 2 tex)
        (lookup-texture-by-name "hud-baronsymbol-01" (the-as string #f) (the-as (pointer texture-page) #f))
        )
  (set! (-> this sprites 2 flags) (the-as uint 4))
  (set! (-> this sprites 5 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3d :page #x67a)))
  (set! (-> this sprites 5 scale-x) 0.5)
  (set! (-> this sprites 5 flags) (the-as uint 4))
  (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3d :page #x67a)))
  (set! (-> this sprites 6 scale-x) 0.5)
  (set! (-> this sprites 6 flags) (the-as uint 4))
  (set! (-> this sprites 3 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x41 :page #x67a)))
  (set! (-> this sprites 3 scale-y) 3.25)
  (set! (-> this sprites 3 color z) 0)
  (set! (-> this sprites 3 flags) (the-as uint 4))
  (set! (-> this sprites 4 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x41 :page #x67a)))
  (set! (-> this sprites 4 scale-y) 1.5)
  (set! (-> this sprites 4 color z) 0)
  (set! (-> this sprites 4 flags) (the-as uint 4))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 flags) (font-flags kerning large))
  (set! (-> this strings 0 scale) 0.5)
  0
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-krew-boss-gun-charge
  :id 1204
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 5175 :flags (bit6) :period (seconds 1) :length (seconds 0.05))
    (sp-item 5176 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 75)
    (sp-item 5176 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 100)
    (sp-item 5177 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 150)
    (sp-item 5177 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 175)
    (sp-item 5177 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 200)
    (sp-item 5178 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 215)
    (sp-item 5178 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 235)
    (sp-item 5178 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 255)
    (sp-item 5178 :flags (bit6) :period (seconds 1) :length (seconds 0.05) :offset 275)
    )
  )

;; failed to figure out what this is:
(defpart 5175
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:x (meters -0.05))
    (:scale-x (meters 0.25))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    (:func 'sparticle-track-root)
    )
  )

;; failed to figure out what this is:
(defpart 5176
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:x (meters -0.05))
    (:scale-x (meters 0.5))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    (:func 'sparticle-track-root)
    )
  )

;; failed to figure out what this is:
(defpart 5177
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:x (meters -0.05))
    (:scale-x (meters 0.75))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 32.0)
    (:b 32.0)
    (:a 96.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    (:func 'sparticle-track-root)
    )
  )

;; failed to figure out what this is:
(defpart 5178
  :init-specs ((:texture (new 'static 'texture-id :index #xca :page #xc))
    (:num 1.0)
    (:x (meters -0.05))
    (:scale-x (meters 1.25))
    (:rot-x (degrees 6.7500005))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 32.0)
    (:b 32.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 8192.0)
    (:func 'sparticle-track-root)
    )
  )

;; definition for symbol *krew-boss-crate-spawn-points*, type (array vector)
(define *krew-boss-crate-spawn-points*
  (new 'static 'boxed-array :type vector
    (new 'static 'vector :x -1187840.0 :y 1449984.0 :z -7054541.0 :w 1456.3556)
    (new 'static 'vector :x -1167360.0 :y 1449984.0 :z -7056179.0)
    (new 'static 'vector :x -1323008.0 :y 1449984.0 :z -6782976.0 :w 21845.334)
    (new 'static 'vector :x -1311948.8 :y 1449984.0 :z -6766592.0 :w 23119.645)
    )
  )

;; definition for symbol *krew-boss-clone-spawn-points*, type (array vector)
(define *krew-boss-clone-spawn-points* (new 'static 'boxed-array :type vector
                                         (new 'static 'vector :x -1208320.0 :y 1449984.0 :z -6705152.0)
                                         (new 'static 'vector :x -1118208.0 :y 1449984.0 :z -6705152.0)
                                         (new 'static 'vector :x -1040384.0 :y 1449984.0 :z -6746112.0)
                                         (new 'static 'vector :x -995328.0 :y 1449984.0 :z -6823936.0)
                                         (new 'static 'vector :x -995328.0 :y 1449984.0 :z -6918144.0)
                                         (new 'static 'vector :x -1040384.0 :y 1449984.0 :z -6995968.0)
                                         (new 'static 'vector :x -1114112.0 :y 1449984.0 :z -7041024.0)
                                         (new 'static 'vector :x -1204224.0 :y 1449984.0 :z -7041024.0)
                                         (new 'static 'vector :x -1286144.0 :y 1449984.0 :z -7000064.0)
                                         (new 'static 'vector :x -1290240.0 :y 1449984.0 :z -6754304.0)
                                         )
        )

;; definition for symbol *krew-boss-idle-path*, type (array vector)
(define *krew-boss-idle-path* (new 'static 'boxed-array :type vector
                                (new 'static 'vector :x -1019904.0 :y 1449984.0 :z -6512640.0)
                                (new 'static 'vector :x -917504.0 :y 1449984.0 :z -6656000.0)
                                (new 'static 'vector :x -806912.0 :y 1449984.0 :z -6840320.0)
                                )
        )

;; definition for symbol *krew-boss-nav-enemy-info*, type nav-enemy-info
(define *krew-boss-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #t
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd push) :param0 #x1e)
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x4 :param0 #x64 :param1 #x64)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 4
    :notice-anim 4
    :hostile-anim 18
    :hit-anim 4
    :knocked-anim 11
    :knocked-land-anim 12
    :die-anim 15
    :die-falling-anim 4
    :victory-anim -1
    :jump-wind-up-anim 4
    :jump-in-air-anim 4
    :jump-land-anim 4
    :neck-joint 5
    :look-at-joint 5
    :bullseye-joint 4
    :sound-hit (static-sound-name "krew-boss-hit")
    :sound-die (static-sound-name "krew-boss-die")
    :notice-distance (meters 200)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 40)
    :default-hit-points 100
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-giant
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      penetrate-33
      penetrate-34
      penetrate-35
      penetrate-36
      penetrate-37
      penetrate-38
      penetrate-39
      penetrate-40
      penetrate-41
      penetrate-42
      penetrate-43
      penetrate-44
      penetrate-45
      penetrate-46
      penetrate-47
      penetrate-48
      penetrate-49
      penetrate-50
      penetrate-51
      penetrate-52
      penetrate-53
      penetrate-54
      penetrate-55
      penetrate-56
      penetrate-57
      penetrate-58
      penetrate-59
      penetrate-60
      penetrate-61
      penetrate-62
      penetrate-63
      )
    :friction 0.9
    :attack-shove-back (meters 7.5)
    :attack-shove-up (meters 5)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp -6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 122880.0
    :knocked-yellow-vxz-hi 147456.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 122880.0
    :knocked-blue-vxz-hi 147456.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #f
    :use-pacing #f
    :walk-anim 4
    :turn-anim -1
    :run-anim 4
    :taunt-anim -1
    :run-travel-speed (meters 7)
    :run-acceleration (meters 32)
    :run-turning-acceleration (meters 60)
    :walk-travel-speed (meters 4)
    :walk-acceleration (meters 16)
    :walk-turning-acceleration (meters 5)
    :maximum-rotation-rate (degrees 100.00001)
    :notice-nav-radius (meters 2)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

;; failed to figure out what this is:
(set! (-> *krew-boss-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for function baron-move-point-on-ground
;; INFO: Used lq/sq
(defun baron-move-point-on-ground ((arg0 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack-no-clear 'collide-query)))
      (set! (-> s5-0 start-pos quad) (-> arg0 quad))
      (set-vector! (-> s5-0 move-dist) 0.0 -8192.0 0.0 1.0)
      (let ((v1-2 s5-0))
        (set! (-> v1-2 radius) 40.96)
        (set! (-> v1-2 collide-with) (collide-spec backgnd))
        (set! (-> v1-2 ignore-process0) #f)
        (set! (-> v1-2 ignore-process1) #f)
        (set! (-> v1-2 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
        (set! (-> v1-2 action-mask) (collide-action solid))
        )
      (let ((f0-5 (fill-and-probe-using-line-sphere *collide-cache* s5-0)))
        (when (< 0.0 f0-5)
          (let ((v0-1 arg0))
            (let ((v1-5 (-> s5-0 move-dist)))
              (let ((a0-10 f0-5))
                (.mov vf7 a0-10)
                )
              (.lvf vf5 (&-> v1-5 quad))
              )
            (.lvf vf4 (&-> arg0 quad))
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> v0-1 quad) vf6)
            v0-1
            )
          )
        )
      )
    )
  )

;; definition for method 115 of type krew-boss
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this krew-boss))
  "Common method called to initialize the enemy, typically sets up default field values and calls ancillary helper methods"
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-krew-boss" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (init-enemy-behaviour-and-stats! this *krew-boss-nav-enemy-info*)
  (let ((v1-5 (-> this neck)))
    (set! (-> v1-5 up) (the-as uint 1))
    (set! (-> v1-5 nose) (the-as uint 2))
    (set! (-> v1-5 ear) (the-as uint 0))
    (set-vector! (-> v1-5 twist-max) 3640.889 11832.889 0.0 1.0)
    (set! (-> v1-5 ignore-angle) 15473.777)
    )
  (logclear! (-> this mask) (process-mask actor-pause))
  (let ((v1-9 (-> this nav)))
    (set! (-> v1-9 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> this root dynam) 573440.0)
  (logior! (-> this nav flags) (nav-control-flag momentum-ignore-heading))
  (set-vector! (-> this root trans) -1302528.0 -1449984.0 -6836224.0 1.0)
  (let ((v1-20 (-> this nav state))
        (a0-17 (-> this root trans))
        )
    (logclear! (-> v1-20 flags) (nav-state-flag directional-mode))
    (logior! (-> v1-20 flags) (nav-state-flag target-poly-dirty))
    (set! (-> v1-20 target-post quad) (-> a0-17 quad))
    )
  0
  (set! (-> this next-clone-side) 0)
  (set! (-> this last-closest-spawn) 0)
  (set! (-> this next-shooting-frame) 0)
  (set! (-> this floating) #f)
  (set! (-> this next-path-point) 0)
  (set! (-> this num-clones-to-spawn) 0)
  (set! (-> this gameplay-pass) 0)
  (set! (-> this hud-handle) (the-as handle #f))
  (set! (-> this id) (new 'static 'sound-id))
  (set! (-> this channel) (the-as uint 35))
  (set! (-> this play-clone-wave-speech) #f)
  (set! (-> this spawn-charge) #f)
  (dotimes (v1-24 8)
    (set! (-> this clones v1-24) (the-as handle #f))
    )
  (set! (-> this enemy-flags) (the-as enemy-flag (logclear (-> this enemy-flags) (enemy-flag enemy-flag36))))
  (set! (-> this nav callback-info) *nav-enemy-null-callback-info*)
  0
  0
  (none)
  )

;; definition for method 116 of type krew-boss
;; WARN: Return type mismatch object vs none.
(defmethod go-idle ((this krew-boss))
  (cond
    ((task-node-closed? (game-task-node castle-boss-resolution))
     (cleanup-for-death this)
     (go (method-of-object this die-fast))
     )
    (else
      (go (method-of-object this hidden))
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate hidden (krew-boss)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (go-virtual play-intro)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self focus-status) (focus-status disable))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    )
  :trans (behavior ()
    (if (task-node-closed? (game-task-node castle-boss-introduction))
        (go-virtual play-intro)
        )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate play-intro (krew-boss)
  :virtual #t
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-5 (-> self root root-prim)))
      (set! (-> v1-5 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-5 prim-core collide-with) (-> self root backup-collide-with))
      )
    )
  :code (behavior ()
    (when (not (task-node-closed? (game-task-node castle-boss-introduction)))
      (while (not (process-grab? *target* #f))
        (suspend)
        )
      (process-spawn scene-player :init scene-player-init "castle-krew-boss-fight-intro" #t #f)
      )
    (set-setting! 'music 'danger6 0.0 0)
    (while (not (task-node-closed? (game-task-node castle-boss-introduction)))
      (suspend)
      )
    (go-virtual idle)
    )
  )

;; definition for method 74 of type krew-boss
;; WARN: disable def twice: 22. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod general-event-handler ((this krew-boss) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  "Handles various events for the enemy
@TODO - unsure if there is a pattern for the events and this should have a more specific name"
  (case arg2
    (('track)
     (cond
       ((-> arg3 param 0)
        (if (logtest? (-> this enemy-flags) (enemy-flag vulnerable))
            #t
            'abort
            )
        )
       (else
         (logtest? (-> this enemy-flags) (enemy-flag vulnerable))
         )
       )
     )
    (('notify)
     (case (-> arg3 param 0)
       (('hit)
        (krew-hits-jak-speech this)
        (set! (-> this next-shooting-frame) 100)
        (set! (-> this spawn-charge) #t)
        (let ((v0-0 (the-as object (current-time))))
          (set! (-> this state-time) (the-as time-frame v0-0))
          v0-0
          )
        )
       )
     )
    (else
      ((method-of-type nav-enemy general-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 102 of type krew-boss
(defmethod enemy-method-102 ((this krew-boss))
  #f
  )

;; definition for method 77 of type krew-boss
(defmethod enemy-method-77 ((this krew-boss) (arg0 enemy-knocked-info))
  (with-pp
    (ja-channel-push! 1 0)
    (cond
      ((<= (-> this hit-points) 0)
       (let ((a0-2 (-> this skel root-channel 0)))
         (set! (-> a0-2 frame-group) (the-as art-joint-anim (-> this draw art-group data 14)))
         (set! (-> a0-2 param 0) (-> pp clock time-adjust-ratio))
         (set! (-> a0-2 frame-num) 0.0)
         (joint-control-channel-group! a0-2 (the-as art-joint-anim (-> this draw art-group data 14)) num-func-loop!)
         )
       )
      (else
        (let ((a0-3 (-> this skel root-channel 0)))
          (set! (-> a0-3 frame-group)
                (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim)))
                )
          (set! (-> a0-3 param 0)
                (the float
                     (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim))) frames num-frames)
                        -1
                        )
                     )
                )
          (set! (-> a0-3 param 1) (* 2.0 (-> pp clock time-adjust-ratio)))
          (set! (-> a0-3 frame-num) 0.0)
          (joint-control-channel-group!
            a0-3
            (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-anim)))
            num-func-seek!
            )
          )
        )
      )
    #t
    )
  )

;; definition for method 78 of type krew-boss
(defmethod enemy-method-78 ((this krew-boss) (arg0 enemy-knocked-info))
  (cond
    ((<= (-> this hit-points) 0)
     #f
     )
    (else
      (ja-channel-push! 1 (seconds 0.1))
      (let ((a0-2 (-> this skel root-channel 0)))
        (set! (-> a0-2 frame-group)
              (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
              )
        (set! (-> a0-2 param 0)
              (the float
                   (+ (-> (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
                          frames
                          num-frames
                          )
                      -1
                      )
                   )
              )
        (set! (-> a0-2 param 1) (* 2.0 (-> arg0 anim-speed)))
        (set! (-> a0-2 frame-num) 0.0)
        (joint-control-channel-group!
          a0-2
          (the-as art-joint-anim (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
          num-func-seek!
          )
        )
      #t
      )
    )
  )

;; definition for method 81 of type krew-boss
(defmethod enemy-method-81 ((this krew-boss))
  #f
  )

;; failed to figure out what this is:
(defstate knocked (krew-boss)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy knocked) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (krew-hit-speech self)
    (logclear! (-> self enemy-flags) (enemy-flag vulnerable))
    (logclear! (-> self nav flags) (nav-control-flag update-heading-from-facing))
    )
  :exit (behavior ()
    (local-vars (v1-5 enemy-flag))
    (let ((t9-0 (-> (method-of-type nav-enemy knocked) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self floating) #f)
    (let ((v1-4 (-> self enemy-flags)))
      (if (logtest? v1-4 (enemy-flag vulnerable-backup))
          (set! v1-5 (logior v1-4 (enemy-flag vulnerable)))
          (set! v1-5 (logclear v1-4 (enemy-flag vulnerable)))
          )
      )
    (set! (-> self enemy-flags) v1-5)
    (if (logtest? (enemy-flag enemy-flag43) (-> self enemy-flags))
        (logior! (-> self nav flags) (nav-control-flag update-heading-from-facing))
        (logclear! (-> self nav flags) (nav-control-flag update-heading-from-facing))
        )
    )
  :post (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag recover-applied-velocity))
    (let ((gp-0 (-> self root)))
      (cond
        ((and (>= 1449984.0 (-> gp-0 trans y)) (< (-> gp-0 transv y) 0.0))
         (set! (-> gp-0 transv y) 0.0)
         (set! (-> gp-0 trans y) 1449984.0)
         (set! (-> self floating) #t)
         )
        (else
          (let ((a1-0 (new-stack-vector0)))
            (vector-v++! (-> gp-0 transv) (compute-acc-due-to-gravity gp-0 a1-0 (-> self enemy-info slip-factor)))
            )
          )
        )
      (let ((a2-1 (new 'stack-no-clear 'collide-query)))
        (set! (-> a2-1 collide-with) (-> gp-0 root-prim prim-core collide-with))
        (set! (-> a2-1 ignore-process0) self)
        (set! (-> a2-1 ignore-process1) #f)
        (set! (-> a2-1 ignore-pat) (-> gp-0 pat-ignore-mask))
        (set! (-> a2-1 action-mask) (collide-action solid))
        (fill-cache-integrate-and-collide gp-0 (-> gp-0 transv) a2-1 (meters 0))
        )
      (if (-> self floating)
          (logior! (-> gp-0 status) (collide-status on-ground touch-surface))
          )
      )
    (enemy-method-111 self)
    (nav-enemy-method-142 self (-> self nav))
    (common-post self)
    )
  )

;; definition for method 114 of type krew-boss
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this krew-boss))
  "Initializes the [[collide-shape-moving]] and any ancillary tasks to make the enemy collide properly"
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    vehicle
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-giant
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd jak bot crate player-list collectable))
      (set! (-> s4-0 prim-core action) (collide-action solid deadly))
      (set-vector! (-> s4-0 local-sphere) 0.0 9420.8 0.0 9420.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd jak bot crate player-list collectable))
      (set! (-> v1-13 prim-core action) (collide-action solid deadly no-standon))
      (set-vector! (-> v1-13 local-sphere) 0.0 10649.6 0.0 8192.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-15 prim-core collide-with) (collide-spec backgnd jak bot crate player-list collectable))
      (set! (-> v1-15 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 8192.0 0.0 8192.0)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-17 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 60 of type krew-boss
(defmethod coin-flip? ((this krew-boss))
  "@returns The result of a 50/50 RNG roll"
  #f
  )

;; failed to figure out what this is:
(defstate idle (krew-boss)
  :virtual #t
  :enter (behavior ()
    (let ((v1-0 (-> self nav)))
      (set! (-> v1-0 target-speed) 122880.0)
      )
    0
    (set! (-> *krew-boss-nav-enemy-info* run-travel-speed) 122880.0)
    (when (nonzero? (-> self gameplay-pass))
      (nav-enemy-method-166 self)
      (let ((v1-8 self))
        (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-8 enemy-flags)))
            (set! (-> v1-8 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-8 enemy-flags))))
            )
        (set! (-> v1-8 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-8 enemy-flags))))
        (set! (-> v1-8 nav callback-info) (-> v1-8 enemy-info callback-info))
        )
      0
      (let ((v1-11 self))
        (set! (-> v1-11 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-11 enemy-flags))))
        )
      0
      )
    (let ((v1-14 (-> self nav state))
          (a0-20 (-> *krew-boss-idle-path* (-> self next-path-point)))
          )
      (logclear! (-> v1-14 flags) (nav-state-flag directional-mode))
      (logior! (-> v1-14 flags) (nav-state-flag target-poly-dirty))
      (set! (-> v1-14 target-post quad) (-> a0-20 quad))
      )
    0
    (logclear! (-> self enemy-flags) (enemy-flag vulnerable))
    (let ((v1-19 (-> self nav)))
      (set! (-> v1-19 sphere-mask) (the-as uint #x800fa))
      )
    0
    (logior! (-> self nav flags) (nav-control-flag update-heading-from-facing))
    )
  :exit (behavior ()
    (set! (-> self next-shooting-frame) 200)
    (let ((v1-1 (-> self nav)))
      (set! (-> v1-1 target-speed) 122880.0)
      )
    0
    (set! (-> *krew-boss-nav-enemy-info* run-travel-speed) 122880.0)
    (let ((v1-5 (-> self nav)))
      (set! (-> v1-5 sphere-mask) (the-as uint #x800f8))
      )
    0
    (if (logtest? (enemy-flag enemy-flag43) (-> self enemy-flags))
        (logior! (-> self nav flags) (nav-control-flag update-heading-from-facing))
        (logclear! (-> self nav flags) (nav-control-flag update-heading-from-facing))
        )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja :group! (-> self draw art-group data (-> self enemy-info idle-anim)) :num! min)
    (let ((f30-0 (rnd-float-range self 0.3 0.5)))
      (until #f
        (suspend)
        (ja :num! (loop! f30-0))
        )
      )
    #f
    )
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy idle) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (if (< 0.0 (-> self root trans y))
        (seek! (-> self root trans y) 1470464.0 (* 204.8 (-> self clock time-adjust-ratio)))
        )
    (nav-enemy-method-176 self)
    )
  )

;; definition for method 56 of type krew-boss
(defmethod damage-amount-from-attack ((this krew-boss) (arg0 process) (arg1 event-message-block))
  "@returns the amount of damage taken from an attack.  This can come straight off the [[attack-info]] or via [[penetrate-using->damage]]"
  (let ((v1-0 (get-penetrate-using-from-attack-event (the-as process-drawable arg0) arg1)))
    (cond
      ((or (logtest? (penetrate jak-blue-shot) v1-0) (logtest? (penetrate jak-dark-shot) v1-0))
       (cond
         ((time-elapsed? (-> this last-damage-time) (seconds 5))
          (set-time! (-> this last-damage-time))
          5
          )
         (else
           0
           )
         )
       )
      ((logtest? (penetrate dark-bomb) v1-0)
       20
       )
      (else
        5
        )
      )
    )
  )

;; definition for method 142 of type krew-boss
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod nav-enemy-method-142 ((this krew-boss) (arg0 nav-control))
  (with-pp
    (cond
      ((not (logtest? (-> this nav flags) (nav-control-flag update-heading-from-facing)))
       (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> this root trans)))
             (s3-0 (quaternion->matrix (new-stack-matrix0) (-> this root quat)))
             )
         (vector-normalize! s5-1 1.0)
         (let* ((s4-0 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s3-0 vector 1) 1.0))
                (s3-1 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s3-0 vector 2) 1.0))
                (s5-2 (vector-normalize! (vector-flatten! (new 'stack-no-clear 'vector) s5-1 s4-0) 1.0))
                (f30-0 (vector-y-angle s3-1))
                (f0-0 (vector-y-angle s5-2))
                (f1-1 (fabs (- f30-0 f0-0)))
                (f2-0 182.04445)
                )
           (cond
             ((= (-> this gameplay-pass) 2)
              (set! f2-0 273.06668)
              )
             ((= (-> this gameplay-pass) 3)
              (set! f2-0 364.0889)
              )
             )
           (if (< 16384.0 f1-1)
               (set! f2-0 910.2222)
               )
           (if (< 32768.0 f1-1)
               (set! f0-0 (if (< f30-0 f0-0)
                              (+ -65536.0 f0-0)
                              (+ 65536.0 f0-0)
                              )
                     )
               )
           (let ((f0-3 (seek f30-0 f0-0 (* f2-0 (-> pp clock time-adjust-ratio)))))
             (quaternion-axis-angle! (-> this root quat) 0.0 1.0 0.0 f0-3)
             )
           )
         )
       )
      (else
        ((method-of-type nav-enemy nav-enemy-method-142) this arg0)
        )
      )
    0
    (none)
    )
  )

;; failed to figure out what this is:
(defstate hostile (krew-boss)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((gp-0 (/ (-> self hit-points) (if (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
                                            2
                                            1
                                            )
                   )
                )
          )
      (cond
        ((= (-> self gameplay-pass) 1)
         (when (>= 70 gp-0)
           (if (< gp-0 70)
               (set! gp-0 70)
               )
           (+! (-> self gameplay-pass) 1)
           (set! (-> self num-clones-to-spawn) 25)
           (set! (-> *krew-boss-clone-nav-enemy-info* run-travel-speed) 36864.0)
           (send-event (-> self hud-handle process 0) 'hide-and-die)
           (set! (-> self hud-handle) (the-as handle #f))
           (set! (-> self play-clone-wave-speech) #t)
           (send-event *target* 'get-notify #f)
           (go-virtual idle)
           )
         )
        ((= (-> self gameplay-pass) 2)
         (when (>= 40 gp-0)
           (if (< gp-0 40)
               (set! gp-0 40)
               )
           (set! (-> self num-clones-to-spawn) 30)
           (set! (-> *krew-boss-clone-nav-enemy-info* run-travel-speed) 40960.0)
           (+! (-> self gameplay-pass) 1)
           (send-event (-> self hud-handle process 0) 'hide-and-die)
           (set! (-> self hud-handle) (the-as handle #f))
           (set! (-> self play-clone-wave-speech) #t)
           (send-event *target* 'get-notify #f)
           (go-virtual idle)
           )
         )
        )
      (set! (-> self hit-points) (* gp-0 (if (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
                                             2
                                             1
                                             )
                                    )
            )
      )
    (look-at-target! self (enemy-flag look-at-focus))
    (logior! (-> self enemy-flags) (enemy-flag cam-attack-mode))
    (let ((v1-58 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-58 enemy-flags)))
          (set! (-> v1-58 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-58 enemy-flags))))
          )
      (set! (-> v1-58 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-58 enemy-flags))))
      (set! (-> v1-58 nav callback-info) (-> v1-58 enemy-info callback-info))
      )
    0
    (nav-enemy-method-166 self)
    (let ((v1-63 self))
      (set! (-> v1-63 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-63 enemy-flags))))
      )
    0
    (logclear! (-> self mask) (process-mask actor-pause))
    (let ((gp-1 (handle->process (-> self focus handle))))
      (if (not gp-1)
          (go-virtual active)
          )
      (set! (-> self focus-pos quad) (-> (get-trans (the-as process-focusable gp-1) 0) quad))
      )
    (let ((f30-0 (-> self enemy-info circle-dist-lo))
          (f28-0 (-> self enemy-info circle-dist-hi))
          )
      (if (zero? (rnd-int-count self 4))
          (set! (-> self desired-angle) (rnd-float-range self f30-0 f28-0))
          (set! (-> self desired-angle)
                (fmax (fmin (vector-vector-xz-distance (-> self focus-pos) (-> self root trans)) f28-0) f30-0)
                )
          )
      )
    (set! (-> self spawn-charge) #t)
    (set! (-> self enemy-flags) (the-as enemy-flag (logxor (shl 256 32) (the-as int (-> self enemy-flags)))))
    (set! (-> self enemy-flags) (the-as enemy-flag (logclear (-> self enemy-flags) (enemy-flag enemy-flag41))))
    (set-time! (-> self starting-time))
    (when (not (handle->process (-> self hud-handle)))
      (set! (-> self hud-handle) (ppointer->handle (process-spawn hud-krew-boss :init hud-init-by-other :to self)))
      (krew-comes-in-speech self)
      (send-event *target* 'get-notify self)
      )
    (logclear! (-> self nav flags) (nav-control-flag update-heading-from-facing))
    )
  :exit (behavior ()
    (if (logtest? (enemy-flag enemy-flag43) (-> self enemy-flags))
        (logior! (-> self nav flags) (nav-control-flag update-heading-from-facing))
        (logclear! (-> self nav flags) (nav-control-flag update-heading-from-facing))
        )
    )
  :trans (behavior ()
    (local-vars (v1-25 enemy-flag))
    (let ((a0-1 (handle->process (-> self focus handle))))
      (if a0-1
          (set! (-> self focus-pos quad) (-> (get-trans (the-as process-focusable a0-1) 0) quad))
          )
      )
    (if (or (!= (-> self focus aware) 3) (not (get-enemy-target self)))
        (set-time! (-> self starting-time))
        )
    (when (= (-> self next-shooting-frame) 200)
      (cond
        ((< (vector-length (vector-! (new 'stack-no-clear 'vector) (-> self focus-pos) (-> self root trans))) 122880.0)
         (set! (-> self next-shooting-frame) 0)
         (ja :chan 1 :num-func num-func-identity :frame-num 0.0)
         (let ((v1-24 (-> self enemy-flags)))
           (if (logtest? v1-24 (enemy-flag vulnerable-backup))
               (set! v1-25 (logior v1-24 (enemy-flag vulnerable)))
               (set! v1-25 (logclear v1-24 (enemy-flag vulnerable)))
               )
           )
         (set! (-> self enemy-flags) v1-25)
         (cond
           ((= (-> self gameplay-pass) 1)
            (let ((v1-28 (-> self nav)))
              (set! (-> v1-28 target-speed) 24576.0)
              )
            0
            (set! (-> *krew-boss-nav-enemy-info* run-travel-speed) 24576.0)
            )
           ((= (-> self gameplay-pass) 2)
            (let ((v1-34 (-> self nav)))
              (set! (-> v1-34 target-speed) 28672.0)
              )
            0
            (set! (-> *krew-boss-nav-enemy-info* run-travel-speed) 28672.0)
            )
           ((= (-> self gameplay-pass) 3)
            (let ((v1-39 (-> self nav)))
              (set! (-> v1-39 target-speed) 36864.0)
              )
            0
            (set! (-> *krew-boss-nav-enemy-info* run-travel-speed) 36864.0)
            )
           )
         )
        (else
          (set-time! (-> self state-time))
          )
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 2 (seconds 0.1))
    (ja :group! (-> self draw art-group data (-> self enemy-info idle-anim)) :num! min)
    (ja :chan 1 :group! (-> self draw art-group data (-> self enemy-info hostile-anim)) :num! min)
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (until #f
        (ja :num! (loop! f30-0))
        (when (!= (-> self next-shooting-frame) 100)
          (let ((a0-6 (-> self skel root-channel 1)))
            (let ((f0-2 0.5))
              (set! (-> a0-6 frame-interp 1) f0-2)
              (set! (-> a0-6 frame-interp 0) f0-2)
              )
            (set! (-> a0-6 param 0) (the float (+ (-> a0-6 frame-group frames num-frames) -1)))
            (set! (-> a0-6 param 1) 1.0)
            (joint-control-channel-group-eval! a0-6 (the-as art-joint-anim #f) num-func-seek!)
            )
          )
        (suspend)
        )
      )
    #f
    )
  :post (behavior ()
    (let ((a0-0 self))
      (when (logtest? (enemy-flag enemy-flag36) (-> a0-0 enemy-flags))
        (let ((s5-0 (new 'stack-no-clear 'vector)))
          (let ((gp-0 (new 'stack-no-clear 'vector)))
            (let ((f30-0 16384.0))
              (if (logtest? (enemy-flag enemy-flag40) (-> self enemy-flags))
                  (set! f30-0 (- f30-0))
                  )
              (set! (-> s5-0 quad) (-> self focus-pos quad))
              (vector-! gp-0 (-> self root trans) s5-0)
              (set! (-> gp-0 y) 0.0)
              (vector-normalize! gp-0 (-> self desired-angle))
              (vector+! s5-0 s5-0 gp-0)
              (vector-rotate-around-y! gp-0 gp-0 f30-0)
              )
            (vector-normalize! gp-0 16384.0)
            (vector+! s5-0 s5-0 gp-0)
            )
          (let ((gp-1 (new 'stack-no-clear 'vector)))
            (set! (-> gp-1 quad) (-> self root trans quad))
            (cloest-point-on-mesh (-> self nav) gp-1 s5-0 (the-as nav-poly #f))
            (if (< (vector-vector-xz-distance gp-1 (-> self root trans)) 409.6)
                (set! (-> self enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag41) (-> self enemy-flags))))
                (set! (-> self enemy-flags) (the-as enemy-flag (logclear (-> self enemy-flags) (enemy-flag enemy-flag41))))
                )
            (let ((v1-28 (-> self nav state)))
              (logclear! (-> v1-28 flags) (nav-state-flag directional-mode))
              (logior! (-> v1-28 flags) (nav-state-flag target-poly-dirty))
              (set! (-> v1-28 target-post quad) (-> gp-1 quad))
              )
            )
          )
        0
        )
      )
    (let ((gp-2 (the int (* 300.0 (- 3.0 (* 0.5 (+ -1.0 (the float (-> self gameplay-pass)))))))))
      (when (and (-> self spawn-charge) (time-elapsed? (-> self state-time) (+ gp-2 -300)))
        (process-spawn
          part-tracker
          :init part-tracker-init
          (-> *part-group-id-table* 1204)
          300
          #f
          #f
          self
          33
          :to self
          )
        (set! (-> self spawn-charge) #f)
        )
      (when (and (= (-> self next-shooting-frame) 100) (time-elapsed? (-> self state-time) gp-2))
        (set! (-> self next-shooting-frame) 0)
        (ja :chan 1 :num-func num-func-identity :frame-num 0.0)
        )
      )
    (if (= (the int (ja-frame-num 1)) (-> self next-shooting-frame))
        (logior! (-> self skel status) (joint-control-status sync-math))
        )
    (nav-enemy-travel-post)
    (seek! (-> self root trans y) 1449984.0 (* 204.8 (-> self clock time-adjust-ratio)))
    (when (= (the int (ja-frame-num 1)) (-> self next-shooting-frame))
      (logclear! (-> self skel status) (joint-control-status sync-math))
      (cond
        ((= (-> self next-shooting-frame) 20)
         (set! (-> self next-shooting-frame) 100)
         (set! (-> self spawn-charge) #t)
         (set-time! (-> self state-time))
         )
        (else
          (+! (-> self next-shooting-frame) 5)
          )
        )
      (let* ((gp-5 *target*)
             (a0-40 (if (type? gp-5 process-focusable)
                        gp-5
                        )
                    )
             )
        (when a0-40
          (let ((gp-6 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (let ((s4-0 (new 'stack-no-clear 'vector)))
              (set! (-> s4-0 quad) (-> (get-trans a0-40 0) quad))
              (let ((s2-0 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node krew-lowres-lod0-jg lightC)))
                    (s5-2 (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node krew-lowres-lod0-jg lightEnd)))
                    )
                (let ((s3-0 (new 'stack-no-clear 'vector)))
                  0.0
                  (set! (-> s3-0 quad) (-> s4-0 quad))
                  (set! (-> s3-0 y) (-> s5-2 y))
                  (vector-! s3-0 s3-0 s5-2)
                  (let ((f0-17 (vector-length s3-0)))
                    (vector-! s3-0 s5-2 s2-0)
                    (set! (-> s3-0 y) 0.0)
                    (vector-normalize! s3-0 f0-17)
                    )
                  (set! (-> s3-0 y) (- (-> s4-0 y) (-> s5-2 y)))
                  (vector-normalize-copy! (-> gp-6 vel) s3-0 245760.0)
                  )
                (set! (-> gp-6 ent) #f)
                (set! (-> gp-6 charge) 1.0)
                (set! (-> gp-6 options) (projectile-options))
                (set! (-> gp-6 notify-handle) (the-as handle #f))
                (set! (-> gp-6 owner-handle) (the-as handle #f))
                (set! (-> gp-6 ignore-handle) (process->handle self))
                (let* ((v1-94 *game-info*)
                       (a0-55 (+ (-> v1-94 attack-id) 1))
                       )
                  (set! (-> v1-94 attack-id) a0-55)
                  (set! (-> gp-6 attack-id) a0-55)
                  )
                (set! (-> gp-6 timeout) (seconds 4))
                (set! (-> gp-6 pos quad) (-> s5-2 quad))
                )
              )
            (spawn-projectile krew-boss-shot gp-6 self *default-dead-pool*)
            )
          )
        )
      )
    )
  )

;; definition for method 73 of type krew-boss
(defmethod kill-prefer-falling ((this krew-boss))
  "If available in `enemy-info`, [[go]] to the [[die-falling]] state, if not, [[die]]"
  (when (handle->process (-> this hud-handle))
    (send-event (-> this hud-handle process 0) 'hide-and-die)
    (set! (-> this hud-handle) (the-as handle #f))
    )
  (send-event *target* 'get-notify #f)
  (add-process *gui-control* this (the-as gui-channel (-> this channel)) (gui-action play) "ds269" -99.0 0)
  ((method-of-type nav-enemy kill-prefer-falling) this)
  )

;; definition for symbol *krew-boss-die-positions*, type (array vector)
(define *krew-boss-die-positions* (new 'static 'boxed-array :type vector
                                    (new 'static 'vector :x -1167360.0 :y 1449984.0 :z -6746112.0)
                                    (new 'static 'vector :x -1040384.0 :y 1449984.0 :z -6860800.0)
                                    (new 'static 'vector :x -1155072.0 :y 1449984.0 :z -6991872.0)
                                    (new 'static 'vector :x -1290240.0 :y 1449984.0 :z -6881280.0)
                                    )
        )

;; failed to figure out what this is:
(defstate die (krew-boss)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy die) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set-setting! 'music #f 0.0 0)
    (nav-enemy-method-166 self)
    (let ((v1-8 self))
      (if (not (logtest? (enemy-flag enemy-flag36) (-> v1-8 enemy-flags)))
          (set! (-> v1-8 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag38) (-> v1-8 enemy-flags))))
          )
      (set! (-> v1-8 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag36) (-> v1-8 enemy-flags))))
      (set! (-> v1-8 nav callback-info) (-> v1-8 enemy-info callback-info))
      )
    0
    (let ((v1-11 self))
      (set! (-> v1-11 enemy-flags) (the-as enemy-flag (logior (enemy-flag enemy-flag37) (-> v1-11 enemy-flags))))
      )
    0
    (let ((v1-13 (-> self nav)))
      (set! (-> v1-13 sphere-mask) (the-as uint #x800fa))
      )
    0
    (set! (-> self next-path-point) 0)
    (let ((v1-15 (-> self nav)))
      (set! (-> v1-15 target-speed) 81920.0)
      )
    0
    (let ((v1-18 (-> self nav state))
          (a0-22 (-> *krew-boss-die-positions* (-> self next-path-point)))
          )
      (logclear! (-> v1-18 flags) (nav-state-flag directional-mode))
      (logior! (-> v1-18 flags) (nav-state-flag target-poly-dirty))
      (set! (-> v1-18 target-post quad) (-> a0-22 quad))
      )
    0
    (let ((v1-22 (-> self root root-prim)))
      (set! (-> v1-22 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-22 prim-core collide-with) (-> self root backup-collide-with))
      )
    (iterate-process-tree
      *entity-pool*
      (lambda ((arg0 collectable))
        (if (and (or (type? arg0 ammo-collectable) (type? arg0 health))
                 (and (nonzero? (-> arg0 root)) (>= 819200.0 (vector-vector-distance (-> arg0 root trans) (target-pos 0))))
                 )
            (deactivate arg0)
            )
        (none)
        )
      *null-kernel-context*
      )
    (logior! (-> self nav flags) (nav-control-flag update-heading-from-facing))
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy die) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-4 (-> self nav)))
      (set! (-> v1-4 sphere-mask) (the-as uint #x800f8))
      )
    0
    )
  :trans (behavior ()
    (let ((f30-0 (vector-vector-xz-distance (target-pos 0) (-> *krew-boss-die-positions* (-> self next-path-point)))))
      (when (and (< f30-0
                    (vector-vector-xz-distance (-> self root trans) (-> *krew-boss-die-positions* (-> self next-path-point)))
                    )
                 (< f30-0 40960.0)
                 )
        (set! (-> self next-path-point) (- 1 (-> self next-path-point)))
        (let ((v1-13 (-> self nav state))
              (a0-7 (-> *krew-boss-die-positions* (-> self next-path-point)))
              )
          (logclear! (-> v1-13 flags) (nav-state-flag directional-mode))
          (logior! (-> v1-13 flags) (nav-state-flag target-poly-dirty))
          (set! (-> v1-13 target-post quad) (-> a0-7 quad))
          )
        0
        )
      )
    )
  :code (behavior ()
    (while (< 81920.0
              (vector-vector-xz-distance (-> self root trans) (-> *krew-boss-die-positions* (-> self next-path-point)))
              )
      (ja :num! (loop! (-> self clock time-adjust-ratio)))
      (suspend)
      )
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! krew-lowres-death-land-ja
                :num! (seek! max (-> self clock time-adjust-ratio))
                :frame-num 0.0
                )
    (while (not (ja-done? 0))
      (ja-eval)
      (suspend)
      )
    (let ((v1-26 self))
      (set! (-> v1-26 enemy-flags) (the-as enemy-flag (logclear (-> v1-26 enemy-flags) (enemy-flag enemy-flag36))))
      (set! (-> v1-26 nav callback-info) *nav-enemy-null-callback-info*)
      )
    0
    (let ((v1-29 self))
      (set! (-> v1-29 enemy-flags) (the-as enemy-flag (logclear (-> v1-29 enemy-flags) (enemy-flag enemy-flag37))))
      )
    0
    (while (not (ja-done? 0))
      (ja-eval)
      (suspend)
      )
    (while (nonzero? (get-status *gui-control* (-> self id)))
      (suspend)
      )
    (set! (-> self movie-handle) (ppointer->handle (process-spawn
                                                     scene-player
                                                     :init scene-player-init
                                                     '("castle-krew-boss-fight-res" "city-ashelin-drop-off")
                                                     #t
                                                     #f
                                                     )
                                                   )
          )
    (send-event self 'death-end)
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  :post (behavior ()
    (nav-enemy-method-176 self)
    )
  )

;; definition for function casboss-deactivate
;; WARN: Return type mismatch int vs none.
(defun casboss-deactivate ()
  (set-height! *ocean-map-city* 0.0)
  (set! (-> *math-camera* f) 40960000.0)
  0
  (none)
  )

;; definition for function casboss-activate
;; WARN: Return type mismatch int vs none.
(defun casboss-activate ()
  (set-height! *ocean-map-city* 57344.0)
  (set! (-> *math-camera* f) 81920000.0)
  0
  (none)
  )
