;;-*-Lisp-*-
(in-package goal)

;; definition of type vehicle-lookup-info
(deftype vehicle-lookup-info (structure)
  ((turn-radius        meters)
   (throttle-turning   float)
   (throttle-straight  float)
   )
  )

;; definition for method 3 of type vehicle-lookup-info
(defmethod inspect ((this vehicle-lookup-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-lookup-info)
  (format #t "~1Tturn-radius: (meters ~m)~%" (-> this turn-radius))
  (format #t "~1Tthrottle-turning: ~f~%" (-> this throttle-turning))
  (format #t "~1Tthrottle-straight: ~f~%" (-> this throttle-straight))
  (label cfg-4)
  this
  )

;; definition of type vehicle-control-point
(deftype vehicle-control-point (structure)
  ((local-pos  vector  :inline)
   (normal     vector  :inline)
   )
  )

;; definition for method 3 of type vehicle-control-point
(defmethod inspect ((this vehicle-control-point))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-control-point)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (label cfg-4)
  this
  )

;; definition of type vehicle-section-info
(deftype vehicle-section-info (structure)
  ((damage-seg-array  uint64  3)
   (damage-seg-count  int8)
   )
  )

;; definition for method 3 of type vehicle-section-info
(defmethod inspect ((this vehicle-section-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-section-info)
  (format #t "~1Tdamage-seg-array[3] @ #x~X~%" (-> this damage-seg-array))
  (format #t "~1Tdamage-seg-count: ~D~%" (-> this damage-seg-count))
  (label cfg-4)
  this
  )

;; definition of type vehicle-seat-info
(deftype vehicle-seat-info (structure)
  ((data      uint8   16)
   (position  vector  :inline :overlay-at (-> data 0))
   (pos-x     float           :overlay-at (-> data 0))
   (pos-y     float           :overlay-at (-> data 4))
   (pos-z     float           :overlay-at (-> data 8))
   (angle     int16           :overlay-at (-> data 12))
   (flags     uint8           :overlay-at (-> data 14))
   )
  )

;; definition for method 3 of type vehicle-seat-info
(defmethod inspect ((this vehicle-seat-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-seat-info)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this position))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tpos-x: ~f~%" (-> this position x))
  (format #t "~1Tpos-y: ~f~%" (-> this position y))
  (format #t "~1Tpos-z: ~f~%" (-> this position z))
  (format #t "~1Tangle: ~D~%" (-> this angle))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type vehicle-explosion-info
(deftype vehicle-explosion-info (joint-exploder-static-params)
  ((skel       skeleton-group)
   (skel-name  string)
   (anim       int32)
   )
  )

;; definition for method 3 of type vehicle-explosion-info
(defmethod inspect ((this vehicle-explosion-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tjoints: ~A~%" (-> this joints))
  (format #t "~1Tcollide-spec: ~D~%" (-> this collide-spec))
  (format #t "~1Tart-level: ~A~%" (-> this art-level))
  (format #t "~1Tskel: ~A~%" (-> this skel))
  (format #t "~1Tskel-name: ~A~%" (-> this skel-name))
  (format #t "~1Tanim: ~D~%" (-> this anim))
  (label cfg-4)
  this
  )

;; definition of type vehicle-grab-rail-info
(deftype vehicle-grab-rail-info (structure)
  ((local-pos  vector  2 :inline)
   (normal     vector  :inline)
   )
  )

;; definition for method 3 of type vehicle-grab-rail-info
(defmethod inspect ((this vehicle-grab-rail-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-grab-rail-info)
  (format #t "~1Tlocal-pos[2] @ #x~X~%" (-> this local-pos))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (label cfg-4)
  this
  )

;; definition of type rigid-body-vehicle-constants
(deftype rigid-body-vehicle-constants (rigid-body-object-constants)
  ((flags                              uint32)
   (object-type                        uint8)
   (guard-type                         uint8)
   (max-engine-thrust                  meters)
   (inv-max-engine-thrust              float)
   (engine-response-rate               float)
   (engine-intake-factor               float)
   (brake-factor                       float)
   (turbo-boost-factor                 float)
   (max-xz-speed                       meters)
   (ground-probe-distance              meters)
   (ground-probe-offset                meters)
   (cos-ground-effect-angle            float)
   (spring-lift-factor                 float)
   (air-steering-factor                float)
   (air-drag-factor                    float)
   (steering-fin-angle                 float)
   (steering-thruster-factor           float)
   (steering-thruster-max-gain         float)
   (steering-thruster-half-gain-speed  meters)
   (tire-steering-angle                float)
   (tire-friction-factor               float)
   (tire-static-friction               float)
   (tire-static-friction-speed         meters)
   (tire-dynamic-friction              float)
   (tire-dynamic-friction-speed        meters)
   (tire-inv-max-friction-speed        float)
   (airfoil-factor                     float)
   (drag-force-factor                  float)
   (speed-scrubbing-drag               float)
   (speed-limiting-drag                float)
   (pitch-control-factor               float)
   (roll-control-factor                float)
   (roll-angle                         float)
   (jump-thrust-factor                 float)
   (buoyancy-factor                    float)
   (player-weight                      float)
   (player-shift-x                     meters)
   (player-shift-z                     meters)
   (target-speed-offset                meters)
   (turning-accel                      meters)
   (toughness-factor                   float)
   (damage-factor                      float)
   (camera-string-min-height           meters)
   (camera-string-max-height           meters)
   (camera-string-min-length           meters)
   (camera-string-max-length           meters)
   (camera-min-fov                     float)
   (camera-max-fov                     float)
   (camera-head-offset                 float)
   (camera-foot-offset                 float)
   (camera-normal-max-angle-offset     float)
   (camera-air-max-angle-offset        float)
   (camera-max-lookaround-speed        float)
   (seat-count                         int8)
   (section-count                      int8)
   (rider-stance                       uint8)
   (grab-rail-count                    int8)
   (grab-rail-array                    (inline-array vehicle-grab-rail-info))
   (seat-array                         vehicle-seat-info      4 :inline)
   (rider-hand-offset                  vector                 2 :inline)
   (section-array                      vehicle-section-info   4 :inline)
   (section-bike-front                 vehicle-section-info   :inline :overlay-at (-> section-array 0))
   (section-bike-rear                  vehicle-section-info   :inline :offset 560)
   (section-car-front-left             vehicle-section-info   :inline :overlay-at (-> section-array 0))
   (section-car-rear-left              vehicle-section-info   :inline :overlay-at section-bike-rear)
   (section-car-front-right            vehicle-section-info   :inline :offset 592)
   (section-car-rear-right             vehicle-section-info   :inline :offset 624)
   (explosion                          vehicle-explosion-info)
   (engine-pitch-scale                 float)
   (engine-pitch-offset                float)
   (engine-pitch-mod-amp               float)
   (engine-sound-select                int8)
   (engine-sound                       sound-name)
   (thrust-sound                       sound-name)
   (scrape-sound                       sound-name)
   (glance-sound                       sound-name)
   (impact-sound                       sound-name)
   (extra-sound                        sound-name)
   (explosion-part                     int32)
   (headlight-count                    int8)
   (taillight-count                    int8)
   (thruster-flame-width               meters)
   (thruster-flame-length              meters)
   (thruster-local-pos                 vector                 2 :inline)
   (exhaust-local-pos                  vector                 2 :inline)
   (exhaust-local-dir                  vector                 2 :inline)
   (smoke-local-pos                    vector                 2 :inline)
   (smoke-local-vel                    vector                 2 :inline)
   (headlight-local-pos                vector                 3 :inline)
   (taillight-local-pos                vector                 2 :inline)
   (lift-thruster-count                int8)
   (roll-thruster-count                int8)
   (steering-thruster-count            int8)
   (stabilizer-count                   int8)
   (inv-lift-thruster-count            float)
   (pad                                int8                   8)
   (lift-thruster-array                vehicle-control-point  2 :inline)
   (roll-thruster-array                vehicle-control-point  2 :inline)
   (steering-thruster-array            vehicle-control-point  2 :inline)
   (stabilizer-array                   vehicle-control-point  6 :inline)
   (engine-thrust-local-pos            vector                 :inline)
   (brake-local-pos                    vector                 :inline)
   (particle-system-2d                 basic)
   (particle-system-3d                 basic)
   (part-thruster                      basic)
   (part-thruster-scale-x              sp-field-init-spec)
   (part-thruster-scale-y              sp-field-init-spec)
   (part-quat                          quaternion)
   (part-vel                           vector)
   (color-option-count                 int8)
   (color-option-select                int8)
   (color-option-array                 (inline-array vector))
   (sample-dir                         vector                 :inline)
   (sample-time                        time-frame)
   (sample-index                       int32)
   )
  (:methods
    (rigid-body-vehicle-constants-method-9 (_type_) none)
    (rigid-body-vehicle-constants-method-10 (_type_) none)
    )
  )

;; definition for method 3 of type rigid-body-vehicle-constants
;; INFO: Used lq/sq
(defmethod inspect ((this rigid-body-vehicle-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-vehicle-constants)
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> this info))
  (format #t "~1Tmass: ~f~%" (-> this info mass))
  (format #t "~1Tinv-mass: ~f~%" (-> this info inv-mass))
  (format #t "~1Tcm-joint-x: (meters ~m)~%" (-> this info cm-offset-joint x))
  (format #t "~1Tcm-joint-y: (meters ~m)~%" (-> this info cm-offset-joint y))
  (format #t "~1Tcm-joint-z: (meters ~m)~%" (-> this info cm-offset-joint z))
  (format #t "~1Tlinear-damping: ~f~%" (-> this info linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> this info angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> this info bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> this info friction-factor))
  (format #t "~1Tinertial-tensor-x: (meters ~m)~%" (-> this inertial-tensor-x))
  (format #t "~1Tinertial-tensor-y: (meters ~m)~%" (-> this inertial-tensor-y))
  (format #t "~1Tinertial-tensor-z: (meters ~m)~%" (-> this inertial-tensor-z))
  (format #t "~1Textra: #<rigid-body-object-extra-info @ #x~X>~%" (-> this extra))
  (format #t "~1Tmax-time-step: ~f~%" (-> this extra max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> this extra gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> this extra idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> this extra attack-force-scale))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tobject-type: ~D~%" (-> this object-type))
  (format #t "~1Tguard-type: ~D~%" (-> this guard-type))
  (format #t "~1Tmax-engine-thrust: (meters ~m)~%" (-> this max-engine-thrust))
  (format #t "~1Tinv-max-engine-thrust: ~f~%" (-> this inv-max-engine-thrust))
  (format #t "~1Tengine-response-rate: ~f~%" (-> this engine-response-rate))
  (format #t "~1Tengine-intake-factor: ~f~%" (-> this engine-intake-factor))
  (format #t "~1Tbrake-factor: ~f~%" (-> this brake-factor))
  (format #t "~1Tturbo-boost-factor: ~f~%" (-> this turbo-boost-factor))
  (format #t "~1Tmax-xz-speed: (meters ~m)~%" (-> this max-xz-speed))
  (format #t "~1Tground-probe-distance: (meters ~m)~%" (-> this ground-probe-distance))
  (format #t "~1Tground-probe-offset: (meters ~m)~%" (-> this ground-probe-offset))
  (format #t "~1Tcos-ground-effect-angle: ~f~%" (-> this cos-ground-effect-angle))
  (format #t "~1Tspring-lift-factor: ~f~%" (-> this spring-lift-factor))
  (format #t "~1Tair-steering-factor: ~f~%" (-> this air-steering-factor))
  (format #t "~1Tair-drag-factor: ~f~%" (-> this air-drag-factor))
  (format #t "~1Tsteering-fin-angle: ~f~%" (-> this steering-fin-angle))
  (format #t "~1Tsteering-thruster-factor: ~f~%" (-> this steering-thruster-factor))
  (format #t "~1Tsteering-thruster-max-gain: ~f~%" (-> this steering-thruster-max-gain))
  (format #t "~1Tsteering-thruster-half-gain-speed: (meters ~m)~%" (-> this steering-thruster-half-gain-speed))
  (format #t "~1Ttire-steering-angle: ~f~%" (-> this tire-steering-angle))
  (format #t "~1Ttire-friction-factor: ~f~%" (-> this tire-friction-factor))
  (format #t "~1Ttire-static-friction: ~f~%" (-> this tire-static-friction))
  (format #t "~1Ttire-static-friction-speed: (meters ~m)~%" (-> this tire-static-friction-speed))
  (format #t "~1Ttire-dynamic-friction: ~f~%" (-> this tire-dynamic-friction))
  (format #t "~1Ttire-dynamic-friction-speed: (meters ~m)~%" (-> this tire-dynamic-friction-speed))
  (format #t "~1Ttire-inv-max-friction-speed: ~f~%" (-> this tire-inv-max-friction-speed))
  (format #t "~1Tairfoil-factor: ~f~%" (-> this airfoil-factor))
  (format #t "~1Tdrag-force-factor: ~f~%" (-> this drag-force-factor))
  (format #t "~1Tspeed-scrubbing-drag: ~f~%" (-> this speed-scrubbing-drag))
  (format #t "~1Tspeed-limiting-drag: ~f~%" (-> this speed-limiting-drag))
  (format #t "~1Tpitch-control-factor: ~f~%" (-> this pitch-control-factor))
  (format #t "~1Troll-control-factor: ~f~%" (-> this roll-control-factor))
  (format #t "~1Troll-angle: ~f~%" (-> this roll-angle))
  (format #t "~1Tjump-thrust-factor: ~f~%" (-> this jump-thrust-factor))
  (format #t "~1Tbuoyancy-factor: ~f~%" (-> this buoyancy-factor))
  (format #t "~1Tplayer-weight: ~f~%" (-> this player-weight))
  (format #t "~1Tplayer-shift-x: (meters ~m)~%" (-> this player-shift-x))
  (format #t "~1Tplayer-shift-z: (meters ~m)~%" (-> this player-shift-z))
  (format #t "~1Ttarget-speed-offset: (meters ~m)~%" (-> this target-speed-offset))
  (format #t "~1Tturning-accel: (meters ~m)~%" (-> this turning-accel))
  (format #t "~1Ttoughness-factor: ~f~%" (-> this toughness-factor))
  (format #t "~1Tdamage-factor: ~f~%" (-> this damage-factor))
  (format #t "~1Tcamera-string-min-height: (meters ~m)~%" (-> this camera-string-min-height))
  (format #t "~1Tcamera-string-max-height: (meters ~m)~%" (-> this camera-string-max-height))
  (format #t "~1Tcamera-string-min-length: (meters ~m)~%" (-> this camera-string-min-length))
  (format #t "~1Tcamera-string-max-length: (meters ~m)~%" (-> this camera-string-max-length))
  (format #t "~1Tcamera-min-fov: ~f~%" (-> this camera-min-fov))
  (format #t "~1Tcamera-max-fov: ~f~%" (-> this camera-max-fov))
  (format #t "~1Tcamera-head-offset: ~f~%" (-> this camera-head-offset))
  (format #t "~1Tcamera-foot-offset: ~f~%" (-> this camera-foot-offset))
  (format #t "~1Tcamera-normal-max-angle-offset: ~f~%" (-> this camera-normal-max-angle-offset))
  (format #t "~1Tcamera-air-max-angle-offset: ~f~%" (-> this camera-air-max-angle-offset))
  (format #t "~1Tcamera-max-lookaround-speed: ~f~%" (-> this camera-max-lookaround-speed))
  (format #t "~1Tseat-count: ~D~%" (-> this seat-count))
  (format #t "~1Tsection-count: ~D~%" (-> this section-count))
  (format #t "~1Trider-stance: ~D~%" (-> this rider-stance))
  (format #t "~1Tgrab-rail-count: ~D~%" (-> this grab-rail-count))
  (format #t "~1Tgrab-rail-array: #x~X~%" (-> this grab-rail-array))
  (format #t "~1Tseat-array[4] @ #x~X~%" (-> this seat-array))
  (format #t "~1Trider-hand-offset[2] @ #x~X~%" (-> this rider-hand-offset))
  (format #t "~1Tsection-array[4] @ #x~X~%" (-> this section-bike-front))
  (format #t "~1Tsection-bike-front: #<vehicle-section-info @ #x~X>~%" (-> this section-bike-front))
  (format #t "~1Tsection-bike-rear: #<vehicle-section-info @ #x~X>~%" (-> this section-bike-rear))
  (format #t "~1Tsection-car-front-left: #<vehicle-section-info @ #x~X>~%" (-> this section-bike-front))
  (format #t "~1Tsection-car-rear-left: #<vehicle-section-info @ #x~X>~%" (-> this section-bike-rear))
  (format #t "~1Tsection-car-front-right: #<vehicle-section-info @ #x~X>~%" (-> this section-car-front-right))
  (format #t "~1Tsection-car-rear-right: #<vehicle-section-info @ #x~X>~%" (-> this section-car-rear-right))
  (format #t "~1Texplosion: ~A~%" (-> this explosion))
  (format #t "~1Tengine-pitch-scale: ~f~%" (-> this engine-pitch-scale))
  (format #t "~1Tengine-pitch-offset: ~f~%" (-> this engine-pitch-offset))
  (format #t "~1Tengine-pitch-mod-amp: ~f~%" (-> this engine-pitch-mod-amp))
  (format #t "~1Tengine-sound-select: ~D~%" (-> this engine-sound-select))
  (format #t "~1Tengine-sound: ~D~%" (-> this engine-sound))
  (format #t "~1Tthrust-sound: ~D~%" (-> this thrust-sound))
  (format #t "~1Tscrape-sound: ~D~%" (-> this scrape-sound))
  (format #t "~1Tglance-sound: ~D~%" (-> this glance-sound))
  (format #t "~1Timpact-sound: ~D~%" (-> this impact-sound))
  (format #t "~1Textra-sound: ~D~%" (-> this extra-sound))
  (format #t "~1Texplosion-part: ~D~%" (-> this explosion-part))
  (format #t "~1Theadlight-count: ~D~%" (-> this headlight-count))
  (format #t "~1Ttaillight-count: ~D~%" (-> this taillight-count))
  (format #t "~1Tthruster-flame-width: (meters ~m)~%" (-> this thruster-flame-width))
  (format #t "~1Tthruster-flame-length: (meters ~m)~%" (-> this thruster-flame-length))
  (format #t "~1Tthruster-local-pos[2] @ #x~X~%" (-> this thruster-local-pos))
  (format #t "~1Texhaust-local-pos[2] @ #x~X~%" (-> this exhaust-local-pos))
  (format #t "~1Texhaust-local-dir[2] @ #x~X~%" (-> this exhaust-local-dir))
  (format #t "~1Tsmoke-local-pos[2] @ #x~X~%" (-> this smoke-local-pos))
  (format #t "~1Tsmoke-local-vel[2] @ #x~X~%" (-> this smoke-local-vel))
  (format #t "~1Theadlight-local-pos[3] @ #x~X~%" (-> this headlight-local-pos))
  (format #t "~1Ttaillight-local-pos[2] @ #x~X~%" (-> this taillight-local-pos))
  (format #t "~1Tlift-thruster-count: ~D~%" (-> this lift-thruster-count))
  (format #t "~1Troll-thruster-count: ~D~%" (-> this roll-thruster-count))
  (format #t "~1Tsteering-thruster-count: ~D~%" (-> this steering-thruster-count))
  (format #t "~1Tstabilizer-count: ~D~%" (-> this stabilizer-count))
  (format #t "~1Tinv-lift-thruster-count: ~f~%" (-> this inv-lift-thruster-count))
  (format #t "~1Tlift-thruster-array[2] @ #x~X~%" (-> this lift-thruster-array))
  (format #t "~1Troll-thruster-array[2] @ #x~X~%" (-> this roll-thruster-array))
  (format #t "~1Tsteering-thruster-array[2] @ #x~X~%" (-> this steering-thruster-array))
  (format #t "~1Tstabilizer-array[6] @ #x~X~%" (-> this stabilizer-array))
  (format #t "~1Tengine-thrust-local-pos: #<vector @ #x~X>~%" (-> this engine-thrust-local-pos))
  (format #t "~1Tbrake-local-pos: #<vector @ #x~X>~%" (-> this brake-local-pos))
  (format #t "~1Tparticle-system-2d: ~A~%" (-> this particle-system-2d))
  (format #t "~1Tparticle-system-3d: ~A~%" (-> this particle-system-3d))
  (format #t "~1Tpart-thruster: ~A~%" (-> this part-thruster))
  (format #t "~1Tpart-thruster-scale-x: #<sp-field-init-spec @ #x~X>~%" (-> this part-thruster-scale-x))
  (format #t "~1Tpart-thruster-scale-y: #<sp-field-init-spec @ #x~X>~%" (-> this part-thruster-scale-y))
  (format #t "~1Tpart-quat: #<quaternion @ #x~X>~%" (-> this part-quat))
  (format #t "~1Tpart-vel: #<vector @ #x~X>~%" (-> this part-vel))
  (format #t "~1Tcolor-option-count: ~D~%" (-> this color-option-count))
  (format #t "~1Tcolor-option-select: ~D~%" (-> this color-option-select))
  (format #t "~1Tcolor-option-array: #x~X~%" (-> this color-option-array))
  (format #t "~1Tsample-dir: #<vector @ #x~X>~%" (-> this sample-dir))
  (format #t "~1Tsample-time: ~D~%" (-> this sample-time))
  (format #t "~1Tsample-index: ~D~%" (-> this sample-index))
  (label cfg-4)
  this
  )

;; definition of type vehicle-controller
(deftype vehicle-controller (structure)
  ((flags                   vehicle-controller-flag)
   (traffic                 traffic-engine)
   (branch                  nav-branch)
   (target-speed-offset     meters)
   (target-speed            meters)
   (choose-branch-callback  (function vehicle-controller vehicle nav-branch))
   (turn-accel              meters)
   (max-turn-speed          meters)
   (path-prev-point         vector  :inline)
   (turn-enter-point        vector  :inline)
   (turn-exit-point         vector  :inline)
   (path-dest-point         vector  :inline :overlay-at turn-exit-point)
   (turn-enter-dir          vector  :inline)
   (turn-exit-dir           vector  :inline)
   (dest-circle             vector  :inline)
   (target-point            vector  :inline)
   )
  (:methods
    (vehicle-controller-method-9 (_type_) none)
    (vehicle-controller-method-10 (_type_ traffic-tracker) none)
    (vehicle-controller-method-11 (_type_) none)
    (vehicle-controller-method-12 (_type_ rigid-body-vehicle-constants vector float int float) none :behavior vehicle)
    (vehicle-controller-method-13 (_type_ nav-branch vector) none)
    (vehicle-controller-method-14 (_type_ vehicle) nav-branch)
    (vehicle-controller-method-15 (_type_) nav-branch)
    (vehicle-controller-method-16 (_type_ vector vector) none)
    (draw-debug-info (_type_) none)
    (vehicle-controller-method-18 (_type_ vector vector vehicle float) none)
    (vehicle-controller-method-19 (_type_ vector object vector vector) none)
    (vehicle-controller-method-20 (_type_ object float) none)
    (vehicle-controller-method-21 (_type_) none)
    )
  )

;; definition for method 3 of type vehicle-controller
(defmethod inspect ((this vehicle-controller))
  (when (not this)
    (set! this this)
    (goto cfg-28)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-controller)
  (format #t "~1Tflags: #x~X : (vehicle-controller-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (vehicle-controller-flag do-turn)) (vehicle-controller-flag do-turn))
        (format #t "do-turn ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag off-path)) (vehicle-controller-flag off-path))
        (format #t "off-path ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag attached)) (vehicle-controller-flag attached))
        (format #t "attached ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag no-slowing-for-turns))
           (vehicle-controller-flag no-slowing-for-turns)
           )
        (format #t "no-slowing-for-turns ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag recovery-mode)) (vehicle-controller-flag recovery-mode))
        (format #t "recovery-mode ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag blocking-dest-node)) (vehicle-controller-flag blocking-dest-node))
        (format #t "blocking-dest-node ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag direct-mode)) (vehicle-controller-flag direct-mode))
        (format #t "direct-mode ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag ignore-others)) (vehicle-controller-flag ignore-others))
        (format #t "ignore-others ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag debug)) (vehicle-controller-flag debug))
        (format #t "debug ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag on-straightaway)) (vehicle-controller-flag on-straightaway))
        (format #t "on-straightaway ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag draw-marks)) (vehicle-controller-flag draw-marks))
        (format #t "draw-marks ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag left-turn)) (vehicle-controller-flag left-turn))
        (format #t "left-turn ")
        )
    )
  (format #t ")~%")
  (format #t "~1Ttraffic: ~A~%" (-> this traffic))
  (format #t "~1Tbranch: #<nav-branch @ #x~X>~%" (-> this branch))
  (format #t "~1Ttarget-speed-offset: (meters ~m)~%" (-> this target-speed-offset))
  (format #t "~1Ttarget-speed: (meters ~m)~%" (-> this target-speed))
  (format #t "~1Tchoose-branch-callback: ~A~%" (-> this choose-branch-callback))
  (format #t "~1Tturn-accel: (meters ~m)~%" (-> this turn-accel))
  (format #t "~1Tmax-turn-speed: (meters ~m)~%" (-> this max-turn-speed))
  (format #t "~1Tpath-prev-point: ~`vector`P~%" (-> this path-prev-point))
  (format #t "~1Tturn-enter-point: ~`vector`P~%" (-> this turn-enter-point))
  (format #t "~1Tturn-exit-point: ~`vector`P~%" (-> this turn-exit-point))
  (format #t "~1Tpath-dest-point: #<vector @ #x~X>~%" (-> this turn-exit-point))
  (format #t "~1Tturn-enter-dir: ~`vector`P~%" (-> this turn-enter-dir))
  (format #t "~1Tturn-exit-dir: ~`vector`P~%" (-> this turn-exit-dir))
  (format #t "~1Tdest-circle: ~`vector`P~%" (-> this dest-circle))
  (format #t "~1Ttarget-point: ~`vector`P~%" (-> this target-point))
  (label cfg-28)
  this
  )

;; definition of type vehicle-section
(deftype vehicle-section (structure)
  ((damage  float)
   )
  )

;; definition for method 3 of type vehicle-section
(defmethod inspect ((this vehicle-section))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-section)
  (format #t "~1Tdamage: ~f~%" (-> this damage))
  (label cfg-4)
  this
  )

;; definition of type vehicle
(deftype vehicle (rigid-body-object)
  ((self                      vehicle                      :override)
   (info                      rigid-body-vehicle-constants :override)
   (pad                       uint32                        2)
   (vehicle-jkhn1b23jn1       int64)
   (controls                  vehicle-controls              :inline)
   (prev-controls             vehicle-controls              :inline)
   (up-dir                    vector                        :inline)
   (jump-time                 float)
   (jump-thrust               float)
   (engine-thrust             float)
   (engine-power-factor       float)
   (force-scale               float)
   (target-distance2          meters)
   (pad0                      uint32)
   (target-acceleration       vector                        :inline)
   (impact-pos                vector                        :inline)
   (lin-acceleration          vector                        :inline)
   (hit-points                float)
   (damage-factor             float)
   (crash-level               int8)
   (force-level               int8)
   (traffic-hash-id           int8)
   (traffic-priority-id       int8)
   (power-fluctuation-factor  float)
   (power-level               float)
   (flight-level-index        int8)
   (flight-level-index-prev   int8)
   (overlap-player-counter    uint8)
   (physics-counter           uint8)
   (flight-level              float)
   (brake-factor              float)
   (cam-speed-interp          float)
   (camera-dist2              float)
   (player-dist2              float)
   (bound-radius              float)
   (rider-array               handle                        4)
   (lift-thrust               float                         2)
   (roll-thrust               float                         2)
   (sent-attack-time          time-frame)
   (air-time                  time-frame)
   (turn-time                 time-frame)
   (crash-time                time-frame)
   (transition-time           time-frame)
   (transition-end-time       time-frame)
   (turbo-boost-time          time-frame)
   (crash-duration            uint16)
   (turbo-boost-duration      uint16)
   (turbo-boost-factor        float)
   (crash-impulse             float)
   (water-height              float)
   (lights-factor             float)
   (outgoing-attack-id        uint32)
   (scrape-sound-id           sound-id)
   (engine-sound-id           sound-id)
   (thrust-sound-id           sound-id)
   (roll-sound-id             sound-id)
   (damage-pop-sound-id       sound-id)
   (damage-zap-sound-id       sound-id)
   (extra-sound-id            sound-id)
   (fog-fade                  float)
   (scrape-sound-envelope     float)
   (engine-sound-envelope     float)
   (engine-sound-factor       float)
   (sputter-sound-envelope    float)
   (rudder-sound-envelope     float)
   (fins-sound-envelope       float)
   (exhaust-part-accum        basic                         2)
   (smoke-part-accum          basic                         2)
   (controller                vehicle-controller            :inline)
   (section-array             vehicle-section               4 :inline)
   )
  (:state-methods
    inactive
    waiting
    vehicle-state-55
    vehicle-state-56
    player-control
    crash
    explode
    die
    measure-control-parameters
    )
  (:methods
    (alloc-and-init-rigid-body-control (_type_ rigid-body-vehicle-constants) none :replace)
    (vehicle-method-62 (_type_ float) none)
    (vehicle-method-63 (_type_ float) none)
    (vehicle-method-64 () none)
    (start-jump (_type_) none)
    (vehicle-method-66 (_type_) none)
    (get-seat-count (_type_) int)
    (compute-seat-position (_type_ vector int) none)
    (get-rider-in-seat (_type_ int) process)
    (vehicle-method-70 (_type_) process)
    (put-rider-in-seat (_type_ int process-focusable) none)
    (vehicle-method-72 (_type_) uint)
    (get-best-seat-for-vehicle (_type_ vector int int) int)
    (remove-rider (_type_ process) none)
    (vehicle-method-75 (_type_) float)
    (vehicle-method-76 (_type_ int uint) none)
    (vehicle-method-77 (_type_) none)
    (vehicle-method-78 (_type_ int) none)
    (vehicle-method-79 (_type_) none)
    (vehicle-method-80 (_type_) none)
    (vehicle-method-81 (_type_) none)
    (vehicle-method-82 (_type_) none)
    (vehicle-method-83 (_type_) none)
    (draw-thruster (_type_ vector vector float float) none)
    (draw-thrusters (_type_) none)
    (update-joint-mods (_type_) none)
    (vehicle-method-87 (_type_) none)
    (vehicle-method-88 (_type_) none)
    (vehicle-method-89 (_type_) none)
    (vehicle-method-90 (_type_) none)
    (vehicle-method-91 (_type_) none)
    (vehicle-method-92 (_type_) none)
    (vehicle-method-93 (_type_) none)
    (vehicle-method-94 (_type_) none)
    (vehicle-method-95 (_type_ vector) none)
    (vehicle-method-96 (_type_) none)
    (vehicle-method-97 (_type_) none)
    (vehicle-method-98 (_type_ float) none)
    (vehicle-method-99 (_type_ float) none)
    (vehicle-method-100 (_type_ float vehicle-physics-work) none)
    (vehicle-method-101 (_type_) none)
    (shadow-enable (_type_) none)
    (shadow-disable (_type_) none)
    (vehicle-method-104 (_type_) none)
    (vehicle-method-105 (_type_) symbol)
    (vehicle-method-106 (_type_) none)
    (vehicle-method-107 (_type_) none)
    (vehicle-method-108 (_type_) none)
    (vehicle-method-109 (_type_) none)
    (vehicle-method-110 (_type_) none)
    (vehicle-method-111 (_type_ object target) none)
    (decrease-traffic-alert-level (_type_ int) int)
    (vehicle-method-113 (_type_) none)
    (vehicle-method-114 (_type_) none)
    (vehicle-method-115 (_type_ vector) none)
    (vehicle-method-116 (_type_ (pointer vehicle-controls)) none)
    (vehicle-method-117 (_type_ vector int int) none)
    (vehicle-method-118 (_type_ int) none)
    (vehicle-method-119 (_type_) none)
    (vehicle-method-120 (_type_) none)
    (vehicle-method-121 (_type_) none)
    (vehicle-method-122 (_type_) none)
    (vehicle-method-123 (_type_) none)
    (vehicle-method-124 (_type_) none)
    (vehicle-method-125 (_type_ float) none)
    (vehicle-method-126 (_type_ float) none)
    (vehicle-method-127 (_type_) none)
    (vehicle-method-128 (_type_) none)
    (vehicle-method-129 (_type_) none)
    (vehicle-method-130 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-131 (_type_) none)
    (vehicle-method-132 (_type_) none)
    (check-player-get-on (_type_) none)
    (vehicle-method-134 (_type_ process) none)
    (vehicle-method-135 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-136 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-137 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-138 (_type_) none)
    (vehicle-method-139 (_type_) none)
    (vehicle-method-140 (_type_) none)
    (vehicle-method-141 (_type_) none)
    (vehicle-method-142 (_type_) none)
    (vehicle-method-143 (_type_) none)
    )
  )

;; definition for method 3 of type vehicle
(defmethod inspect ((this vehicle))
  (when (not this)
    (set! this this)
    (goto cfg-92)
    )
  (let ((t9-0 (method-of-type rigid-body-object inspect)))
    (t9-0 this)
    )
  (format #t "~2Tflags: #x~X : (vehicle-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand (rigid-body-object-flag lights-update) s5-0) (shl 64 32))
        (format #t "lights-update ")
        )
    (if (= (logand (rigid-body-object-flag camera-bike-mode) s5-0) (rigid-body-object-flag camera-bike-mode))
        (format #t "camera-bike-mode ")
        )
    (if (= (logand (rigid-body-object-flag jump-sound) s5-0) (rigid-body-object-flag jump-sound))
        (format #t "jump-sound ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag dead)) (rigid-body-object-flag dead))
        (format #t "dead ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag waiting-for-player)) (rigid-body-object-flag waiting-for-player))
        (format #t "waiting-for-player ")
        )
    (if (= (logand (rigid-body-object-flag no-hijack) s5-0) (shl 256 32))
        (format #t "no-hijack ")
        )
    (if (= (logand (rigid-body-object-flag hard-turn) s5-0) (rigid-body-object-flag hard-turn))
        (format #t "hard-turn ")
        )
    (if (= (logand (rigid-body-object-flag turbo-boost) s5-0) (rigid-body-object-flag turbo-boost))
        (format #t "turbo-boost ")
        )
    (if (= (logand (rigid-body-object-flag in-pursuit) s5-0) (shl #x8000 16))
        (format #t "in-pursuit ")
        )
    (if (= (logand (rigid-body-object-flag traffic-managed) s5-0) (rigid-body-object-flag traffic-managed))
        (format #t "traffic-managed ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag damaged)) (rigid-body-object-flag damaged))
        (format #t "damaged ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-contact-force)) (rigid-body-object-flag player-contact-force))
        (format #t "player-contact-force ")
        )
    (if (= (logand (rigid-body-object-flag player-grabbed) s5-0) (shl 512 32))
        (format #t "player-grabbed ")
        )
    (if (= (logand (rigid-body-object-flag flight-level-transition-ending) s5-0)
           (rigid-body-object-flag flight-level-transition-ending)
           )
        (format #t "flight-level-transition-ending ")
        )
    (if (= (logand (rigid-body-object-flag alert) s5-0) (rigid-body-object-flag alert))
        (format #t "alert ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag disturbed)) (rigid-body-object-flag disturbed))
        (format #t "disturbed ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag enable-collision)) (rigid-body-object-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-edge-grabbing)) (rigid-body-object-flag player-edge-grabbing))
        (format #t "player-edge-grabbing ")
        )
    (if (= (logand (rigid-body-object-flag lights-on) s5-0) (shl 32 32))
        (format #t "lights-on ")
        )
    (if (= (logand (rigid-body-object-flag reverse-gear) s5-0) (rigid-body-object-flag reverse-gear))
        (format #t "reverse-gear ")
        )
    (if (= (logand (rigid-body-object-flag ai-driving) s5-0) (rigid-body-object-flag ai-driving))
        (format #t "ai-driving ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag persistent)) (rigid-body-object-flag persistent))
        (format #t "persistent ")
        )
    (if (= (logand (rigid-body-object-flag jump) s5-0) (rigid-body-object-flag jump))
        (format #t "jump ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag riding)) (rigid-body-object-flag riding))
        (format #t "riding ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag on-flight-level)) (rigid-body-object-flag on-flight-level))
        (format #t "on-flight-level ")
        )
    (if (= (logand (rigid-body-object-flag nav-spheres) s5-0) (shl 1024 32))
        (format #t "nav-spheres ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-driving)) (rigid-body-object-flag player-driving))
        (format #t "player-driving ")
        )
    (if (= (logand (rigid-body-object-flag hack-edit-graph-mode) s5-0) (shl 8 32))
        (format #t "hack-edit-graph-mode ")
        )
    (if (= (logand (rigid-body-object-flag camera-rapid-track-mode) s5-0)
           (rigid-body-object-flag camera-rapid-track-mode)
           )
        (format #t "camera-rapid-tracking-mode ")
        )
    (if (= (logand (rigid-body-object-flag ignition) s5-0) (rigid-body-object-flag ignition))
        (format #t "ignition ")
        )
    (if (= (logand (rigid-body-object-flag slide) s5-0) (rigid-body-object-flag slide))
        (format #t "slide ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag on-ground)) (rigid-body-object-flag on-ground))
        (format #t "on-ground ")
        )
    (if (= (logand (rigid-body-object-flag flight-level-transition) s5-0)
           (rigid-body-object-flag flight-level-transition)
           )
        (format #t "flight-level-transition ")
        )
    (if (= (logand (rigid-body-object-flag lights-dead) s5-0) (shl 128 32))
        (format #t "lights-dead ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-touching)) (rigid-body-object-flag player-touching))
        (format #t "player-touching ")
        )
    (if (= (logand (rigid-body-object-flag target-in-sight) s5-0) (shl 1 32))
        (format #t "target-in-sight ")
        )
    (if (= (logand (rigid-body-object-flag idle-sound) s5-0) (shl 2048 32))
        (format #t "idle-sound ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag in-air)) (rigid-body-object-flag in-air))
        (format #t "in-air ")
        )
    (if (= (logand (rigid-body-object-flag draw-marks) s5-0) (shl 4 32))
        (format #t "draw-marks ")
        )
    (if (= (logand (rigid-body-object-flag camera) s5-0) (rigid-body-object-flag camera))
        (format #t "camera ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-standing-on)) (rigid-body-object-flag player-standing-on))
        (format #t "player-standing-on ")
        )
    (if (= (logand (rigid-body-object-flag measure-control-parameters) s5-0) (shl 16 32))
        (format #t "measure-control-parameters ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-impulse-force)) (rigid-body-object-flag player-impulse-force))
        (format #t "player-impulse-force ")
        )
    (if (= (logand (rigid-body-object-flag rammed-target) s5-0) (shl 2 32))
        (format #t "rammed-target ")
        )
    )
  (format #t ")~%")
  (format #t "~2Tcontrols: #<vehicle-controls @ #x~X>~%" (-> this controls))
  (format #t "~2Tprev-controls: #<vehicle-controls @ #x~X>~%" (-> this prev-controls))
  (format #t "~2Tup-dir: #<vector @ #x~X>~%" (-> this up-dir))
  (format #t "~2Tjump-time: ~f~%" (-> this jump-time))
  (format #t "~2Tjump-thrust: ~f~%" (-> this jump-thrust))
  (format #t "~2Tengine-thrust: ~f~%" (-> this engine-thrust))
  (format #t "~2Tengine-power-factor: ~f~%" (-> this engine-power-factor))
  (format #t "~2Tforce-scale: ~f~%" (-> this force-scale))
  (format #t "~2Ttarget-distance2: (meters ~m)~%" (-> this target-distance2))
  (format #t "~2Tpad0: ~D~%" (-> this pad0))
  (format #t "~2Ttarget-acceleration: #<vector @ #x~X>~%" (-> this target-acceleration))
  (format #t "~2Timpact-pos: #<vector @ #x~X>~%" (-> this impact-pos))
  (format #t "~2Tlin-acceleration: #<vector @ #x~X>~%" (-> this lin-acceleration))
  (format #t "~2Thit-points: ~f~%" (-> this hit-points))
  (format #t "~2Tdamage-factor: ~f~%" (-> this damage-factor))
  (format #t "~2Tcrash-level: ~D~%" (-> this crash-level))
  (format #t "~2Tforce-level: ~D~%" (-> this force-level))
  (format #t "~2Ttraffic-hash-id: ~D~%" (-> this traffic-hash-id))
  (format #t "~2Ttraffic-priority-id: ~D~%" (-> this traffic-priority-id))
  (format #t "~2Tpower-fluctuation-factor: ~f~%" (-> this power-fluctuation-factor))
  (format #t "~2Tpower-level: ~f~%" (-> this power-level))
  (format #t "~2Tflight-level-index: ~D~%" (-> this flight-level-index))
  (format #t "~2Tflight-level-index-prev: ~D~%" (-> this flight-level-index-prev))
  (format #t "~2Toverlap-player-counter: ~D~%" (-> this overlap-player-counter))
  (format #t "~2Tphysics-counter: ~D~%" (-> this physics-counter))
  (format #t "~2Tflight-level: ~f~%" (-> this flight-level))
  (format #t "~2Tbrake-factor: ~f~%" (-> this brake-factor))
  (format #t "~2Tcam-speed-interp: ~f~%" (-> this cam-speed-interp))
  (format #t "~2Tcamera-dist2: ~f~%" (-> this camera-dist2))
  (format #t "~2Tplayer-dist2: ~f~%" (-> this player-dist2))
  (format #t "~2Tbound-radius: ~f~%" (-> this bound-radius))
  (format #t "~2Trider-array[4] @ #x~X~%" (-> this rider-array))
  (format #t "~2Tlift-thrust[2] @ #x~X~%" (-> this lift-thrust))
  (format #t "~2Troll-thrust[2] @ #x~X~%" (-> this roll-thrust))
  (format #t "~2Tsent-attack-time: ~D~%" (-> this sent-attack-time))
  (format #t "~2Tair-time: ~D~%" (-> this air-time))
  (format #t "~2Tturn-time: ~D~%" (-> this turn-time))
  (format #t "~2Tcrash-time: ~D~%" (-> this crash-time))
  (format #t "~2Ttransition-time: ~D~%" (-> this transition-time))
  (format #t "~2Ttransition-end-time: ~D~%" (-> this transition-end-time))
  (format #t "~2Tturbo-boost-time: ~D~%" (-> this turbo-boost-time))
  (format #t "~2Tcrash-duration: ~D~%" (-> this crash-duration))
  (format #t "~2Tturbo-boost-duration: ~D~%" (-> this turbo-boost-duration))
  (format #t "~2Tturbo-boost-factor: ~f~%" (-> this turbo-boost-factor))
  (format #t "~2Tcrash-impulse: ~f~%" (-> this crash-impulse))
  (format #t "~2Twater-height: ~f~%" (-> this water-height))
  (format #t "~2Tlights-factor: ~f~%" (-> this lights-factor))
  (format #t "~2Toutgoing-attack-id: ~D~%" (-> this outgoing-attack-id))
  (format #t "~2Tscrape-sound-id: ~D~%" (-> this scrape-sound-id))
  (format #t "~2Tengine-sound-id: ~D~%" (-> this engine-sound-id))
  (format #t "~2Tthrust-sound-id: ~D~%" (-> this thrust-sound-id))
  (format #t "~2Troll-sound-id: ~D~%" (-> this roll-sound-id))
  (format #t "~2Tdamage-pop-sound-id: ~D~%" (-> this damage-pop-sound-id))
  (format #t "~2Tdamage-zap-sound-id: ~D~%" (-> this damage-zap-sound-id))
  (format #t "~2Textra-sound-id: ~D~%" (-> this extra-sound-id))
  (format #t "~2Tfog-fade: ~f~%" (-> this fog-fade))
  (format #t "~2Tscrape-sound-envelope: ~f~%" (-> this scrape-sound-envelope))
  (format #t "~2Tengine-sound-envelope: ~f~%" (-> this engine-sound-envelope))
  (format #t "~2Tengine-sound-factor: ~f~%" (-> this engine-sound-factor))
  (format #t "~2Tsputter-sound-envelope: ~f~%" (-> this sputter-sound-envelope))
  (format #t "~2Trudder-sound-envelope: ~f~%" (-> this rudder-sound-envelope))
  (format #t "~2Tfins-sound-envelope: ~f~%" (-> this fins-sound-envelope))
  (format #t "~2Texhaust-part-accum[2] @ #x~X~%" (-> this exhaust-part-accum))
  (format #t "~2Tsmoke-part-accum[2] @ #x~X~%" (-> this smoke-part-accum))
  (format #t "~2Tcontroller: #<vehicle-controller @ #x~X>~%" (-> this controller))
  (format #t "~2Tsection-array[4] @ #x~X~%" (-> this section-array))
  (label cfg-92)
  this
  )

;; failed to figure out what this is:
0
