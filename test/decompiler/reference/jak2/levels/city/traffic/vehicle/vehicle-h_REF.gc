;;-*-Lisp-*-
(in-package goal)

;; definition of type vehicle-lookup-info
(deftype vehicle-lookup-info (structure)
  ((turn-radius       meters  :offset-assert   0)
   (throttle-turning  float   :offset-assert   4)
   (throttle-straight float   :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type vehicle-lookup-info
(defmethod inspect vehicle-lookup-info ((obj vehicle-lookup-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-lookup-info)
  (format #t "~1Tturn-radius: (meters ~m)~%" (-> obj turn-radius))
  (format #t "~1Tthrottle-turning: ~f~%" (-> obj throttle-turning))
  (format #t "~1Tthrottle-straight: ~f~%" (-> obj throttle-straight))
  (label cfg-4)
  obj
  )

;; definition of type vehicle-control-point
(deftype vehicle-control-point (structure)
  ((local-pos vector :inline :offset-assert   0)
   (normal    vector :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type vehicle-control-point
(defmethod inspect vehicle-control-point ((obj vehicle-control-point))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-control-point)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> obj local-pos))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> obj normal))
  (label cfg-4)
  obj
  )

;; definition of type vehicle-section-info
(deftype vehicle-section-info (structure)
  ((damage-seg-array uint64 3 :offset-assert   0)
   (damage-seg-count int8     :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x19
  :flag-assert         #x900000019
  )

;; definition for method 3 of type vehicle-section-info
(defmethod inspect vehicle-section-info ((obj vehicle-section-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-section-info)
  (format #t "~1Tdamage-seg-array[3] @ #x~X~%" (-> obj damage-seg-array))
  (format #t "~1Tdamage-seg-count: ~D~%" (-> obj damage-seg-count))
  (label cfg-4)
  obj
  )

;; definition of type vehicle-seat-info
(deftype vehicle-seat-info (structure)
  ((data     uint8  16      :offset-assert   0)
   (position vector :inline :offset          0)
   (pos-x    float          :offset          0)
   (pos-y    float          :offset          4)
   (pos-z    float          :offset          8)
   (angle    int16          :offset         12)
   (flags    uint8          :offset         14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type vehicle-seat-info
(defmethod inspect vehicle-seat-info ((obj vehicle-seat-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-seat-info)
  (format #t "~1Tdata[16] @ #x~X~%" (-> obj position))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> obj position))
  (format #t "~1Tpos-x: ~f~%" (-> obj position x))
  (format #t "~1Tpos-y: ~f~%" (-> obj position y))
  (format #t "~1Tpos-z: ~f~%" (-> obj position z))
  (format #t "~1Tangle: ~D~%" (-> obj angle))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (label cfg-4)
  obj
  )

;; definition of type vehicle-explosion-info
(deftype vehicle-explosion-info (joint-exploder-static-params)
  ((skel      skeleton-group  :offset-assert  16)
   (skel-name string          :offset-assert  20)
   (anim      int32           :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type vehicle-explosion-info
(defmethod inspect vehicle-explosion-info ((obj vehicle-explosion-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tjoints: ~A~%" (-> obj joints))
  (format #t "~1Tcollide-spec: ~D~%" (-> obj collide-spec))
  (format #t "~1Tart-level: ~A~%" (-> obj art-level))
  (format #t "~1Tskel: ~A~%" (-> obj skel))
  (format #t "~1Tskel-name: ~A~%" (-> obj skel-name))
  (format #t "~1Tanim: ~D~%" (-> obj anim))
  (label cfg-4)
  obj
  )

;; definition of type vehicle-grab-rail-info
(deftype vehicle-grab-rail-info (structure)
  ((local-pos vector 2 :inline :offset-assert   0)
   (normal    vector :inline   :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type vehicle-grab-rail-info
(defmethod inspect vehicle-grab-rail-info ((obj vehicle-grab-rail-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-grab-rail-info)
  (format #t "~1Tlocal-pos[2] @ #x~X~%" (-> obj local-pos))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> obj normal))
  (label cfg-4)
  obj
  )

;; definition of type rigid-body-vehicle-constants
(deftype rigid-body-vehicle-constants (rigid-body-object-constants)
  ((flags                             uint32                                          :offset-assert 208)
   (object-type                       uint8                                           :offset-assert 212)
   (guard-type                        uint8                                           :offset-assert 213)
   (max-engine-thrust                 meters                                          :offset-assert 216)
   (inv-max-engine-thrust             float                                           :offset-assert 220)
   (engine-response-rate              float                                           :offset-assert 224)
   (engine-intake-factor              float                                           :offset-assert 228)
   (brake-factor                      float                                           :offset-assert 232)
   (turbo-boost-factor                float                                           :offset-assert 236)
   (max-xz-speed                      meters                                          :offset-assert 240)
   (ground-probe-distance             meters                                          :offset-assert 244)
   (ground-probe-offset               meters                                          :offset-assert 248)
   (cos-ground-effect-angle           float                                           :offset-assert 252)
   (spring-lift-factor                float                                           :offset-assert 256)
   (air-steering-factor               float                                           :offset-assert 260)
   (air-drag-factor                   float                                           :offset-assert 264)
   (steering-fin-angle                float                                           :offset-assert 268)
   (steering-thruster-factor          float                                           :offset-assert 272)
   (steering-thruster-max-gain        float                                           :offset-assert 276)
   (steering-thruster-half-gain-speed meters                                          :offset-assert 280)
   (tire-steering-angle               float                                           :offset-assert 284)
   (tire-friction-factor              float                                           :offset-assert 288)
   (tire-static-friction              float                                           :offset-assert 292)
   (tire-static-friction-speed        meters                                          :offset-assert 296)
   (tire-dynamic-friction             float                                           :offset-assert 300)
   (tire-dynamic-friction-speed       meters                                          :offset-assert 304)
   (tire-inv-max-friction-speed       float                                           :offset-assert 308)
   (airfoil-factor                    float                                           :offset-assert 312)
   (drag-force-factor                 float                                           :offset-assert 316)
   (speed-scrubbing-drag              float                                           :offset-assert 320)
   (speed-limiting-drag               float                                           :offset-assert 324)
   (pitch-control-factor              float                                           :offset-assert 328)
   (roll-control-factor               float                                           :offset-assert 332)
   (roll-angle                        float                                           :offset-assert 336)
   (jump-thrust-factor                float                                           :offset-assert 340)
   (buoyancy-factor                   float                                           :offset-assert 344)
   (player-weight                     float                                           :offset-assert 348)
   (player-shift-x                    meters                                          :offset-assert 352)
   (player-shift-z                    meters                                          :offset-assert 356)
   (target-speed-offset               meters                                          :offset-assert 360)
   (turning-accel                     meters                                          :offset-assert 364)
   (toughness-factor                  float                                           :offset-assert 368)
   (damage-factor                     float                                           :offset-assert 372)
   (camera-string-min-height          meters                                          :offset-assert 376)
   (camera-string-max-height          meters                                          :offset-assert 380)
   (camera-string-min-length          meters                                          :offset-assert 384)
   (camera-string-max-length          meters                                          :offset-assert 388)
   (camera-min-fov                    float                                           :offset-assert 392)
   (camera-max-fov                    float                                           :offset-assert 396)
   (camera-head-offset                float                                           :offset-assert 400)
   (camera-foot-offset                float                                           :offset-assert 404)
   (camera-normal-max-angle-offset    float                                           :offset-assert 408)
   (camera-air-max-angle-offset       float                                           :offset-assert 412)
   (camera-max-lookaround-speed       float                                           :offset-assert 416)
   (seat-count                        int8                                            :offset-assert 420)
   (section-count                     int8                                            :offset-assert 421)
   (rider-stance                      uint8                                           :offset-assert 422)
   (grab-rail-count                   int8                                            :offset-assert 423)
   (grab-rail-array                   (inline-array vehicle-grab-rail-info)           :offset-assert 424)
   (seat-array                        vehicle-seat-info                     4 :inline :offset-assert 432)
   (rider-hand-offset                 vector                                2 :inline :offset-assert 496)
   (section-array                     vehicle-section-info                  4 :inline :offset-assert 528)
   (section-bike-front                vehicle-section-info                  :inline   :offset        528)
   (section-bike-rear                 vehicle-section-info                  :inline   :offset        560)
   (section-car-front-left            vehicle-section-info                  :inline   :offset        528)
   (section-car-rear-left             vehicle-section-info                  :inline   :offset        560)
   (section-car-front-right           vehicle-section-info                  :inline   :offset        592)
   (section-car-rear-right            vehicle-section-info                  :inline   :offset        624)
   (explosion                         vehicle-explosion-info                          :offset-assert 656)
   (engine-pitch-scale                float                                           :offset-assert 660)
   (engine-pitch-offset               float                                           :offset-assert 664)
   (engine-pitch-mod-amp              float                                           :offset-assert 668)
   (engine-sound-select               int8                                            :offset-assert 672)
   (engine-sound                      sound-name                                      :offset-assert 688)
   (thrust-sound                      sound-name                                      :offset-assert 704)
   (scrape-sound                      sound-name                                      :offset-assert 720)
   (glance-sound                      sound-name                                      :offset-assert 736)
   (impact-sound                      sound-name                                      :offset-assert 752)
   (extra-sound                       sound-name                                      :offset-assert 768)
   (explosion-part                    int32                                           :offset-assert 784)
   (headlight-count                   int8                                            :offset-assert 788)
   (taillight-count                   int8                                            :offset-assert 789)
   (thruster-flame-width              meters                                          :offset-assert 792)
   (thruster-flame-length             meters                                          :offset-assert 796)
   (thruster-local-pos                vector                                2 :inline :offset-assert 800)
   (exhaust-local-pos                 vector                                2 :inline :offset-assert 832)
   (exhaust-local-dir                 vector                                2 :inline :offset-assert 864)
   (smoke-local-pos                   vector                                2 :inline :offset-assert 896)
   (smoke-local-vel                   vector                                2 :inline :offset-assert 928)
   (headlight-local-pos               vector                                3 :inline :offset-assert 960)
   (taillight-local-pos               vector                                2 :inline :offset-assert 1008)
   (lift-thruster-count               int8                                            :offset-assert 1040)
   (roll-thruster-count               int8                                            :offset-assert 1041)
   (steering-thruster-count           int8                                            :offset-assert 1042)
   (stabilizer-count                  int8                                            :offset-assert 1043)
   (inv-lift-thruster-count           float                                           :offset-assert 1044)
   (pad                               int8                                  8         :offset-assert 1048)
   (lift-thruster-array               vehicle-control-point                 2 :inline :offset-assert 1056)
   (roll-thruster-array               vehicle-control-point                 2 :inline :offset-assert 1120)
   (steering-thruster-array           vehicle-control-point                 2 :inline :offset-assert 1184)
   (stabilizer-array                  vehicle-control-point                 6 :inline :offset-assert 1248)
   (engine-thrust-local-pos           vector                                :inline   :offset-assert 1440)
   (brake-local-pos                   vector                                :inline   :offset-assert 1456)
   (particle-system-2d                basic                                           :offset-assert 1472)
   (particle-system-3d                basic                                           :offset-assert 1476)
   (part-thruster                     basic                                           :offset-assert 1480)
   (part-thruster-scale-x             sp-field-init-spec                              :offset-assert 1484)
   (part-thruster-scale-y             sp-field-init-spec                              :offset-assert 1488)
   (part-quat                         quaternion                                      :offset-assert 1492)
   (part-vel                          vector                                          :offset-assert 1496)
   (color-option-count                int8                                            :offset-assert 1500)
   (color-option-select               int8                                            :offset-assert 1501)
   (color-option-array                (inline-array vector)                           :offset-assert 1504)
   (sample-dir                        vector                                :inline   :offset-assert 1520)
   (sample-time                       time-frame                                      :offset-assert 1536)
   (sample-index                      int32                                           :offset-assert 1544)
   )
  :method-count-assert 11
  :size-assert         #x60c
  :flag-assert         #xb0000060c
  (:methods
    (rigid-body-vehicle-constants-method-9 (_type_) none 9)
    (rigid-body-vehicle-constants-method-10 () none 10)
    )
  )

;; definition for method 3 of type rigid-body-vehicle-constants
;; INFO: Used lq/sq
(defmethod inspect rigid-body-vehicle-constants ((obj rigid-body-vehicle-constants))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body-vehicle-constants)
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> obj info))
  (format #t "~1Tmass: ~f~%" (-> obj info mass))
  (format #t "~1Tinv-mass: ~f~%" (-> obj info inv-mass))
  (format #t "~1Tcm-joint-x: (meters ~m)~%" (-> obj info cm-offset-joint x))
  (format #t "~1Tcm-joint-y: (meters ~m)~%" (-> obj info cm-offset-joint y))
  (format #t "~1Tcm-joint-z: (meters ~m)~%" (-> obj info cm-offset-joint z))
  (format #t "~1Tlinear-damping: ~f~%" (-> obj info linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> obj info angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> obj info bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> obj info friction-factor))
  (format #t "~1Tinertial-tensor-x: (meters ~m)~%" (-> obj inertial-tensor-x))
  (format #t "~1Tinertial-tensor-y: (meters ~m)~%" (-> obj inertial-tensor-y))
  (format #t "~1Tinertial-tensor-z: (meters ~m)~%" (-> obj inertial-tensor-z))
  (format #t "~1Textra: #<rigid-body-object-extra-info @ #x~X>~%" (-> obj extra))
  (format #t "~1Tmax-time-step: ~f~%" (-> obj extra max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> obj extra gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> obj extra idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> obj extra attack-force-scale))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tobject-type: ~D~%" (-> obj object-type))
  (format #t "~1Tguard-type: ~D~%" (-> obj guard-type))
  (format #t "~1Tmax-engine-thrust: (meters ~m)~%" (-> obj max-engine-thrust))
  (format #t "~1Tinv-max-engine-thrust: ~f~%" (-> obj inv-max-engine-thrust))
  (format #t "~1Tengine-response-rate: ~f~%" (-> obj engine-response-rate))
  (format #t "~1Tengine-intake-factor: ~f~%" (-> obj engine-intake-factor))
  (format #t "~1Tbrake-factor: ~f~%" (-> obj brake-factor))
  (format #t "~1Tturbo-boost-factor: ~f~%" (-> obj turbo-boost-factor))
  (format #t "~1Tmax-xz-speed: (meters ~m)~%" (-> obj max-xz-speed))
  (format #t "~1Tground-probe-distance: (meters ~m)~%" (-> obj ground-probe-distance))
  (format #t "~1Tground-probe-offset: (meters ~m)~%" (-> obj ground-probe-offset))
  (format #t "~1Tcos-ground-effect-angle: ~f~%" (-> obj cos-ground-effect-angle))
  (format #t "~1Tspring-lift-factor: ~f~%" (-> obj spring-lift-factor))
  (format #t "~1Tair-steering-factor: ~f~%" (-> obj air-steering-factor))
  (format #t "~1Tair-drag-factor: ~f~%" (-> obj air-drag-factor))
  (format #t "~1Tsteering-fin-angle: ~f~%" (-> obj steering-fin-angle))
  (format #t "~1Tsteering-thruster-factor: ~f~%" (-> obj steering-thruster-factor))
  (format #t "~1Tsteering-thruster-max-gain: ~f~%" (-> obj steering-thruster-max-gain))
  (format #t "~1Tsteering-thruster-half-gain-speed: (meters ~m)~%" (-> obj steering-thruster-half-gain-speed))
  (format #t "~1Ttire-steering-angle: ~f~%" (-> obj tire-steering-angle))
  (format #t "~1Ttire-friction-factor: ~f~%" (-> obj tire-friction-factor))
  (format #t "~1Ttire-static-friction: ~f~%" (-> obj tire-static-friction))
  (format #t "~1Ttire-static-friction-speed: (meters ~m)~%" (-> obj tire-static-friction-speed))
  (format #t "~1Ttire-dynamic-friction: ~f~%" (-> obj tire-dynamic-friction))
  (format #t "~1Ttire-dynamic-friction-speed: (meters ~m)~%" (-> obj tire-dynamic-friction-speed))
  (format #t "~1Ttire-inv-max-friction-speed: ~f~%" (-> obj tire-inv-max-friction-speed))
  (format #t "~1Tairfoil-factor: ~f~%" (-> obj airfoil-factor))
  (format #t "~1Tdrag-force-factor: ~f~%" (-> obj drag-force-factor))
  (format #t "~1Tspeed-scrubbing-drag: ~f~%" (-> obj speed-scrubbing-drag))
  (format #t "~1Tspeed-limiting-drag: ~f~%" (-> obj speed-limiting-drag))
  (format #t "~1Tpitch-control-factor: ~f~%" (-> obj pitch-control-factor))
  (format #t "~1Troll-control-factor: ~f~%" (-> obj roll-control-factor))
  (format #t "~1Troll-angle: ~f~%" (-> obj roll-angle))
  (format #t "~1Tjump-thrust-factor: ~f~%" (-> obj jump-thrust-factor))
  (format #t "~1Tbuoyancy-factor: ~f~%" (-> obj buoyancy-factor))
  (format #t "~1Tplayer-weight: ~f~%" (-> obj player-weight))
  (format #t "~1Tplayer-shift-x: (meters ~m)~%" (-> obj player-shift-x))
  (format #t "~1Tplayer-shift-z: (meters ~m)~%" (-> obj player-shift-z))
  (format #t "~1Ttarget-speed-offset: (meters ~m)~%" (-> obj target-speed-offset))
  (format #t "~1Tturning-accel: (meters ~m)~%" (-> obj turning-accel))
  (format #t "~1Ttoughness-factor: ~f~%" (-> obj toughness-factor))
  (format #t "~1Tdamage-factor: ~f~%" (-> obj damage-factor))
  (format #t "~1Tcamera-string-min-height: (meters ~m)~%" (-> obj camera-string-min-height))
  (format #t "~1Tcamera-string-max-height: (meters ~m)~%" (-> obj camera-string-max-height))
  (format #t "~1Tcamera-string-min-length: (meters ~m)~%" (-> obj camera-string-min-length))
  (format #t "~1Tcamera-string-max-length: (meters ~m)~%" (-> obj camera-string-max-length))
  (format #t "~1Tcamera-min-fov: ~f~%" (-> obj camera-min-fov))
  (format #t "~1Tcamera-max-fov: ~f~%" (-> obj camera-max-fov))
  (format #t "~1Tcamera-head-offset: ~f~%" (-> obj camera-head-offset))
  (format #t "~1Tcamera-foot-offset: ~f~%" (-> obj camera-foot-offset))
  (format #t "~1Tcamera-normal-max-angle-offset: ~f~%" (-> obj camera-normal-max-angle-offset))
  (format #t "~1Tcamera-air-max-angle-offset: ~f~%" (-> obj camera-air-max-angle-offset))
  (format #t "~1Tcamera-max-lookaround-speed: ~f~%" (-> obj camera-max-lookaround-speed))
  (format #t "~1Tseat-count: ~D~%" (-> obj seat-count))
  (format #t "~1Tsection-count: ~D~%" (-> obj section-count))
  (format #t "~1Trider-stance: ~D~%" (-> obj rider-stance))
  (format #t "~1Tgrab-rail-count: ~D~%" (-> obj grab-rail-count))
  (format #t "~1Tgrab-rail-array: #x~X~%" (-> obj grab-rail-array))
  (format #t "~1Tseat-array[4] @ #x~X~%" (-> obj seat-array))
  (format #t "~1Trider-hand-offset[2] @ #x~X~%" (-> obj rider-hand-offset))
  (format #t "~1Tsection-array[4] @ #x~X~%" (-> obj section-bike-front))
  (format #t "~1Tsection-bike-front: #<vehicle-section-info @ #x~X>~%" (-> obj section-bike-front))
  (format #t "~1Tsection-bike-rear: #<vehicle-section-info @ #x~X>~%" (-> obj section-bike-rear))
  (format #t "~1Tsection-car-front-left: #<vehicle-section-info @ #x~X>~%" (-> obj section-bike-front))
  (format #t "~1Tsection-car-rear-left: #<vehicle-section-info @ #x~X>~%" (-> obj section-bike-rear))
  (format #t "~1Tsection-car-front-right: #<vehicle-section-info @ #x~X>~%" (-> obj section-car-front-right))
  (format #t "~1Tsection-car-rear-right: #<vehicle-section-info @ #x~X>~%" (-> obj section-car-rear-right))
  (format #t "~1Texplosion: ~A~%" (-> obj explosion))
  (format #t "~1Tengine-pitch-scale: ~f~%" (-> obj engine-pitch-scale))
  (format #t "~1Tengine-pitch-offset: ~f~%" (-> obj engine-pitch-offset))
  (format #t "~1Tengine-pitch-mod-amp: ~f~%" (-> obj engine-pitch-mod-amp))
  (format #t "~1Tengine-sound-select: ~D~%" (-> obj engine-sound-select))
  (format #t "~1Tengine-sound: ~D~%" (-> obj engine-sound))
  (format #t "~1Tthrust-sound: ~D~%" (-> obj thrust-sound))
  (format #t "~1Tscrape-sound: ~D~%" (-> obj scrape-sound))
  (format #t "~1Tglance-sound: ~D~%" (-> obj glance-sound))
  (format #t "~1Timpact-sound: ~D~%" (-> obj impact-sound))
  (format #t "~1Textra-sound: ~D~%" (-> obj extra-sound))
  (format #t "~1Texplosion-part: ~D~%" (-> obj explosion-part))
  (format #t "~1Theadlight-count: ~D~%" (-> obj headlight-count))
  (format #t "~1Ttaillight-count: ~D~%" (-> obj taillight-count))
  (format #t "~1Tthruster-flame-width: (meters ~m)~%" (-> obj thruster-flame-width))
  (format #t "~1Tthruster-flame-length: (meters ~m)~%" (-> obj thruster-flame-length))
  (format #t "~1Tthruster-local-pos[2] @ #x~X~%" (-> obj thruster-local-pos))
  (format #t "~1Texhaust-local-pos[2] @ #x~X~%" (-> obj exhaust-local-pos))
  (format #t "~1Texhaust-local-dir[2] @ #x~X~%" (-> obj exhaust-local-dir))
  (format #t "~1Tsmoke-local-pos[2] @ #x~X~%" (-> obj smoke-local-pos))
  (format #t "~1Tsmoke-local-vel[2] @ #x~X~%" (-> obj smoke-local-vel))
  (format #t "~1Theadlight-local-pos[3] @ #x~X~%" (-> obj headlight-local-pos))
  (format #t "~1Ttaillight-local-pos[2] @ #x~X~%" (-> obj taillight-local-pos))
  (format #t "~1Tlift-thruster-count: ~D~%" (-> obj lift-thruster-count))
  (format #t "~1Troll-thruster-count: ~D~%" (-> obj roll-thruster-count))
  (format #t "~1Tsteering-thruster-count: ~D~%" (-> obj steering-thruster-count))
  (format #t "~1Tstabilizer-count: ~D~%" (-> obj stabilizer-count))
  (format #t "~1Tinv-lift-thruster-count: ~f~%" (-> obj inv-lift-thruster-count))
  (format #t "~1Tlift-thruster-array[2] @ #x~X~%" (-> obj lift-thruster-array))
  (format #t "~1Troll-thruster-array[2] @ #x~X~%" (-> obj roll-thruster-array))
  (format #t "~1Tsteering-thruster-array[2] @ #x~X~%" (-> obj steering-thruster-array))
  (format #t "~1Tstabilizer-array[6] @ #x~X~%" (-> obj stabilizer-array))
  (format #t "~1Tengine-thrust-local-pos: #<vector @ #x~X>~%" (-> obj engine-thrust-local-pos))
  (format #t "~1Tbrake-local-pos: #<vector @ #x~X>~%" (-> obj brake-local-pos))
  (format #t "~1Tparticle-system-2d: ~A~%" (-> obj particle-system-2d))
  (format #t "~1Tparticle-system-3d: ~A~%" (-> obj particle-system-3d))
  (format #t "~1Tpart-thruster: ~A~%" (-> obj part-thruster))
  (format #t "~1Tpart-thruster-scale-x: #<sp-field-init-spec @ #x~X>~%" (-> obj part-thruster-scale-x))
  (format #t "~1Tpart-thruster-scale-y: #<sp-field-init-spec @ #x~X>~%" (-> obj part-thruster-scale-y))
  (format #t "~1Tpart-quat: #<quaternion @ #x~X>~%" (-> obj part-quat))
  (format #t "~1Tpart-vel: #<vector @ #x~X>~%" (-> obj part-vel))
  (format #t "~1Tcolor-option-count: ~D~%" (-> obj color-option-count))
  (format #t "~1Tcolor-option-select: ~D~%" (-> obj color-option-select))
  (format #t "~1Tcolor-option-array: #x~X~%" (-> obj color-option-array))
  (format #t "~1Tsample-dir: #<vector @ #x~X>~%" (-> obj sample-dir))
  (format #t "~1Tsample-time: ~D~%" (-> obj sample-time))
  (format #t "~1Tsample-index: ~D~%" (-> obj sample-index))
  (label cfg-4)
  obj
  )

;; definition of type vehicle-controller
(deftype vehicle-controller (structure)
  ((flags                  vehicle-controller-flag                                  :offset-assert   0)
   (traffic                traffic-engine                                           :offset-assert   4)
   (branch                 nav-branch                                               :offset-assert   8)
   (target-speed-offset    meters                                                   :offset-assert  12)
   (target-speed           meters                                                   :offset-assert  16)
   (choose-branch-callback (function vehicle-controller vehicle nav-branch)         :offset-assert  20)
   (turn-accel             meters                                                   :offset-assert  24)
   (max-turn-speed         meters                                                   :offset-assert  28)
   (path-prev-point        vector                                           :inline :offset-assert  32)
   (turn-enter-point       vector                                           :inline :offset-assert  48)
   (turn-exit-point        vector                                           :inline :offset-assert  64)
   (path-dest-point        vector                                           :inline :offset         64)
   (turn-enter-dir         vector                                           :inline :offset-assert  80)
   (turn-exit-dir          vector                                           :inline :offset-assert  96)
   (dest-circle            vector                                           :inline :offset-assert 112)
   (target-point           vector                                           :inline :offset-assert 128)
   )
  :method-count-assert 22
  :size-assert         #x90
  :flag-assert         #x1600000090
  (:methods
    (vehicle-controller-method-9 (_type_) none 9)
    (vehicle-controller-method-10 (_type_ traffic-tracker) none 10)
    (vehicle-controller-method-11 (_type_) none 11)
    (vehicle-controller-method-12 (_type_ rigid-body-vehicle-constants vector float int float) none :behavior vehicle 12)
    (vehicle-controller-method-13 (_type_ nav-branch vector) none 13)
    (vehicle-controller-method-14 (_type_ vehicle) nav-branch 14)
    (vehicle-controller-method-15 (_type_) nav-branch 15)
    (vehicle-controller-method-16 (_type_ vector vector) none 16)
    (draw-debug-info (_type_) none 17)
    (vehicle-controller-method-18 (_type_ vector vector vehicle float) none 18)
    (vehicle-controller-method-19 (_type_ vector object vector vector) none 19)
    (vehicle-controller-method-20 (_type_ object float) none 20)
    (vehicle-controller-method-21 (_type_) none 21)
    )
  )

;; definition for method 3 of type vehicle-controller
(defmethod inspect vehicle-controller ((obj vehicle-controller))
  (when (not obj)
    (set! obj obj)
    (goto cfg-28)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-controller)
  (format #t "~1Tflags: #x~X : (vehicle-controller-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (vehicle-controller-flag do-turn)) (vehicle-controller-flag do-turn))
        (format #t "do-turn ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag off-path)) (vehicle-controller-flag off-path))
        (format #t "off-path ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag attached)) (vehicle-controller-flag attached))
        (format #t "attached ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag no-slowing-for-turns))
           (vehicle-controller-flag no-slowing-for-turns)
           )
        (format #t "no-slowing-for-turns ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag recovery-mode)) (vehicle-controller-flag recovery-mode))
        (format #t "recovery-mode ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag blocking-dest-node)) (vehicle-controller-flag blocking-dest-node))
        (format #t "blocking-dest-node ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag direct-mode)) (vehicle-controller-flag direct-mode))
        (format #t "direct-mode ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag ignore-others)) (vehicle-controller-flag ignore-others))
        (format #t "ignore-others ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag debug)) (vehicle-controller-flag debug))
        (format #t "debug ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag on-straightaway)) (vehicle-controller-flag on-straightaway))
        (format #t "on-straightaway ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag draw-marks)) (vehicle-controller-flag draw-marks))
        (format #t "draw-marks ")
        )
    (if (= (logand s5-0 (vehicle-controller-flag left-turn)) (vehicle-controller-flag left-turn))
        (format #t "left-turn ")
        )
    )
  (format #t ")~%")
  (format #t "~1Ttraffic: ~A~%" (-> obj traffic))
  (format #t "~1Tbranch: #<nav-branch @ #x~X>~%" (-> obj branch))
  (format #t "~1Ttarget-speed-offset: (meters ~m)~%" (-> obj target-speed-offset))
  (format #t "~1Ttarget-speed: (meters ~m)~%" (-> obj target-speed))
  (format #t "~1Tchoose-branch-callback: ~A~%" (-> obj choose-branch-callback))
  (format #t "~1Tturn-accel: (meters ~m)~%" (-> obj turn-accel))
  (format #t "~1Tmax-turn-speed: (meters ~m)~%" (-> obj max-turn-speed))
  (format #t "~1Tpath-prev-point: ~`vector`P~%" (-> obj path-prev-point))
  (format #t "~1Tturn-enter-point: ~`vector`P~%" (-> obj turn-enter-point))
  (format #t "~1Tturn-exit-point: ~`vector`P~%" (-> obj turn-exit-point))
  (format #t "~1Tpath-dest-point: #<vector @ #x~X>~%" (-> obj turn-exit-point))
  (format #t "~1Tturn-enter-dir: ~`vector`P~%" (-> obj turn-enter-dir))
  (format #t "~1Tturn-exit-dir: ~`vector`P~%" (-> obj turn-exit-dir))
  (format #t "~1Tdest-circle: ~`vector`P~%" (-> obj dest-circle))
  (format #t "~1Ttarget-point: ~`vector`P~%" (-> obj target-point))
  (label cfg-28)
  obj
  )

;; definition of type vehicle-section
(deftype vehicle-section (structure)
  ((damage float  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type vehicle-section
(defmethod inspect vehicle-section ((obj vehicle-section))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vehicle-section)
  (format #t "~1Tdamage: ~f~%" (-> obj damage))
  (label cfg-4)
  obj
  )

;; definition of type vehicle
(deftype vehicle (rigid-body-object)
  ((self                     vehicle                                :override)
   (info                     rigid-body-vehicle-constants           :override)
   (pad                      uint32                       2         :offset-assert 272)
   (vehicle-jkhn1b23jn1      int64                                  :offset-assert 280)
   (controls                 vehicle-controls             :inline   :offset-assert 288)
   (prev-controls            vehicle-controls             :inline   :offset-assert 304)
   (up-dir                   vector                       :inline   :offset-assert 320)
   (jump-time                float                                  :offset-assert 336)
   (jump-thrust              float                                  :offset-assert 340)
   (engine-thrust            float                                  :offset-assert 344)
   (engine-power-factor      float                                  :offset-assert 348)
   (force-scale              float                                  :offset-assert 352)
   (target-distance2         meters                                 :offset-assert 356)
   (pad0                     uint32                                 :offset-assert 360)
   (target-acceleration      vector                       :inline   :offset-assert 368)
   (impact-pos               vector                       :inline   :offset-assert 384)
   (lin-acceleration         vector                       :inline   :offset-assert 400)
   (hit-points               float                                  :offset-assert 416)
   (damage-factor            float                                  :offset-assert 420)
   (crash-level              int8                                   :offset-assert 424)
   (force-level              int8                                   :offset-assert 425)
   (traffic-hash-id          int8                                   :offset-assert 426)
   (traffic-priority-id      int8                                   :offset-assert 427)
   (power-fluctuation-factor float                                  :offset-assert 428)
   (power-level              float                                  :offset-assert 432)
   (flight-level-index       int8                                   :offset-assert 436)
   (flight-level-index-prev  int8                                   :offset-assert 437)
   (overlap-player-counter   uint8                                  :offset-assert 438)
   (physics-counter          uint8                                  :offset-assert 439)
   (flight-level             float                                  :offset-assert 440)
   (brake-factor             float                                  :offset-assert 444)
   (cam-speed-interp         float                                  :offset-assert 448)
   (camera-dist2             float                                  :offset-assert 452)
   (player-dist2             float                                  :offset-assert 456)
   (bound-radius             float                                  :offset-assert 460)
   (rider-array              handle                       4         :offset-assert 464)
   (lift-thrust              float                        2         :offset-assert 496)
   (roll-thrust              float                        2         :offset-assert 504)
   (sent-attack-time         time-frame                             :offset-assert 512)
   (air-time                 time-frame                             :offset-assert 520)
   (turn-time                time-frame                             :offset-assert 528)
   (crash-time               time-frame                             :offset-assert 536)
   (transition-time          time-frame                             :offset-assert 544)
   (transition-end-time      time-frame                             :offset-assert 552)
   (turbo-boost-time         time-frame                             :offset-assert 560)
   (crash-duration           uint16                                 :offset-assert 568)
   (turbo-boost-duration     uint16                                 :offset-assert 570)
   (turbo-boost-factor       float                                  :offset-assert 572)
   (crash-impulse            float                                  :offset-assert 576)
   (water-height             float                                  :offset-assert 580)
   (lights-factor            float                                  :offset-assert 584)
   (outgoing-attack-id       uint32                                 :offset-assert 588)
   (scrape-sound-id          sound-id                               :offset-assert 592)
   (engine-sound-id          sound-id                               :offset-assert 596)
   (thrust-sound-id          sound-id                               :offset-assert 600)
   (roll-sound-id            sound-id                               :offset-assert 604)
   (damage-pop-sound-id      sound-id                               :offset-assert 608)
   (damage-zap-sound-id      sound-id                               :offset-assert 612)
   (extra-sound-id           sound-id                               :offset-assert 616)
   (fog-fade                 float                                  :offset-assert 620)
   (scrape-sound-envelope    float                                  :offset-assert 624)
   (engine-sound-envelope    float                                  :offset-assert 628)
   (engine-sound-factor      float                                  :offset-assert 632)
   (sputter-sound-envelope   float                                  :offset-assert 636)
   (rudder-sound-envelope    float                                  :offset-assert 640)
   (fins-sound-envelope      float                                  :offset-assert 644)
   (exhaust-part-accum       basic                        2         :offset-assert 648)
   (smoke-part-accum         basic                        2         :offset-assert 656)
   (controller               vehicle-controller           :inline   :offset-assert 672)
   (section-array            vehicle-section              4 :inline :offset-assert 816)
   )
  :heap-base #x2f0
  :method-count-assert 144
  :size-assert         #x370
  :flag-assert         #x9002f00370
  (:methods
    (alloc-and-init-rigid-body-control (_type_ rigid-body-vehicle-constants) none :replace 31)
    (inactive () _type_ :state 53)
    (waiting () _type_ :state 54)
    (vehicle-method-55 () _type_ :state 55)
    (vehicle-method-56 () _type_ :state 56)
    (player-control () _type_ :state 57)
    (crash () _type_ :state 58)
    (explode () _type_ :state 59)
    (die () _type_ :state 60)
    (measure-control-parameters () _type_ :state 61)
    (vehicle-method-62 (_type_ float) none 62)
    (vehicle-method-63 (_type_ float) none 63)
    (vehicle-method-64 () none 64)
    (start-jump (_type_) none 65)
    (vehicle-method-66 (_type_) none 66)
    (get-seat-count (_type_) int 67)
    (compute-seat-position (_type_ vector int) none 68)
    (get-rider-in-seat (_type_ int) process 69)
    (vehicle-method-70 (_type_) process 70)
    (put-rider-in-seat (_type_ int process-focusable) none 71)
    (vehicle-method-72 (_type_) uint 72)
    (get-best-seat-for-vehicle (_type_ vector int int) int 73)
    (remove-rider (_type_ process) none 74)
    (vehicle-method-75 (_type_) float 75)
    (vehicle-method-76 (_type_ int uint) none 76)
    (vehicle-method-77 (_type_) none 77)
    (vehicle-method-78 (_type_ int) none 78)
    (vehicle-method-79 (_type_) none 79)
    (vehicle-method-80 (_type_) none 80)
    (vehicle-method-81 (_type_) none 81)
    (vehicle-method-82 (_type_) none 82)
    (vehicle-method-83 (_type_) none 83)
    (draw-thruster (_type_ vector vector float float) none 84)
    (draw-thrusters (_type_) none 85)
    (update-joint-mods (_type_) none 86)
    (vehicle-method-87 (_type_) none 87)
    (vehicle-method-88 (_type_) none 88)
    (vehicle-method-89 (_type_) none 89)
    (vehicle-method-90 (_type_) none 90)
    (vehicle-method-91 (_type_) none 91)
    (vehicle-method-92 (_type_) none 92)
    (vehicle-method-93 (_type_) none 93)
    (vehicle-method-94 (_type_) none 94)
    (vehicle-method-95 (_type_ vector) none 95)
    (vehicle-method-96 (_type_) none 96)
    (vehicle-method-97 (_type_) none 97)
    (vehicle-method-98 (_type_ float) none 98)
    (vehicle-method-99 (_type_ float) none 99)
    (vehicle-method-100 (_type_ float vehicle-physics-work) none 100)
    (vehicle-method-101 (_type_) none 101)
    (vehicle-method-102 (_type_) none 102)
    (vehicle-method-103 (_type_) none 103)
    (vehicle-method-104 (_type_) none 104)
    (vehicle-method-105 (_type_) symbol 105)
    (vehicle-method-106 (_type_) none 106)
    (vehicle-method-107 (_type_) none 107)
    (vehicle-method-108 (_type_) none 108)
    (vehicle-method-109 (_type_) none 109)
    (vehicle-method-110 (_type_) none 110)
    (vehicle-method-111 (_type_ object target) none 111)
    (vehicle-method-112 (_type_ object) none 112)
    (vehicle-method-113 (_type_) none 113)
    (vehicle-method-114 (_type_) none 114)
    (vehicle-method-115 (_type_ vector) none 115)
    (vehicle-method-116 (_type_ (pointer vehicle-controls)) none 116)
    (vehicle-method-117 (_type_ vector int int) none 117)
    (vehicle-method-118 (_type_ int) none 118)
    (vehicle-method-119 (_type_) none 119)
    (vehicle-method-120 (_type_) none 120)
    (vehicle-method-121 (_type_) none 121)
    (vehicle-method-122 (_type_) none 122)
    (vehicle-method-123 (_type_) none 123)
    (vehicle-method-124 (_type_) none 124)
    (vehicle-method-125 (_type_ float) none 125)
    (vehicle-method-126 (_type_ float) none 126)
    (vehicle-method-127 (_type_) none 127)
    (vehicle-method-128 (_type_) none 128)
    (vehicle-method-129 (_type_) none 129)
    (vehicle-method-130 (_type_ traffic-object-spawn-params) none 130)
    (vehicle-method-131 (_type_) none 131)
    (vehicle-method-132 (_type_) none 132)
    (check-player-get-on (_type_) none 133)
    (vehicle-method-134 (_type_ process) none 134)
    (vehicle-method-135 (_type_ traffic-object-spawn-params) none 135)
    (vehicle-method-136 (_type_ traffic-object-spawn-params) none 136)
    (vehicle-method-137 (_type_ traffic-object-spawn-params) none 137)
    (vehicle-method-138 (_type_) none 138)
    (vehicle-method-139 (_type_) none 139)
    (vehicle-method-140 (_type_) none 140)
    (vehicle-method-141 (_type_) none 141)
    (vehicle-method-142 (_type_) none 142)
    (vehicle-method-143 (_type_) none 143)
    )
  )

;; definition for method 3 of type vehicle
(defmethod inspect vehicle ((obj vehicle))
  (when (not obj)
    (set! obj obj)
    (goto cfg-92)
    )
  (let ((t9-0 (method-of-type rigid-body-object inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tflags: #x~X : (vehicle-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand (rigid-body-object-flag lights-update) s5-0) (shl 64 32))
        (format #t "lights-update ")
        )
    (if (= (logand (rigid-body-object-flag camera-bike-mode) s5-0) (rigid-body-object-flag camera-bike-mode))
        (format #t "camera-bike-mode ")
        )
    (if (= (logand (rigid-body-object-flag jump-sound) s5-0) (rigid-body-object-flag jump-sound))
        (format #t "jump-sound ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag dead)) (rigid-body-object-flag dead))
        (format #t "dead ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag waiting-for-player)) (rigid-body-object-flag waiting-for-player))
        (format #t "waiting-for-player ")
        )
    (if (= (logand (rigid-body-object-flag no-hijack) s5-0) (shl 256 32))
        (format #t "no-hijack ")
        )
    (if (= (logand (rigid-body-object-flag hard-turn) s5-0) (rigid-body-object-flag hard-turn))
        (format #t "hard-turn ")
        )
    (if (= (logand (rigid-body-object-flag turbo-boost) s5-0) (rigid-body-object-flag turbo-boost))
        (format #t "turbo-boost ")
        )
    (if (= (logand (rigid-body-object-flag in-pursuit) s5-0) (shl #x8000 16))
        (format #t "in-pursuit ")
        )
    (if (= (logand (rigid-body-object-flag traffic-managed) s5-0) (rigid-body-object-flag traffic-managed))
        (format #t "traffic-managed ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag damaged)) (rigid-body-object-flag damaged))
        (format #t "damaged ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-contact-force)) (rigid-body-object-flag player-contact-force))
        (format #t "player-contact-force ")
        )
    (if (= (logand (rigid-body-object-flag player-grabbed) s5-0) (shl 512 32))
        (format #t "player-grabbed ")
        )
    (if (= (logand (rigid-body-object-flag flight-level-transition-ending) s5-0)
           (rigid-body-object-flag flight-level-transition-ending)
           )
        (format #t "flight-level-transition-ending ")
        )
    (if (= (logand (rigid-body-object-flag alert) s5-0) (rigid-body-object-flag alert))
        (format #t "alert ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag disturbed)) (rigid-body-object-flag disturbed))
        (format #t "disturbed ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag enable-collision)) (rigid-body-object-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-edge-grabbing)) (rigid-body-object-flag player-edge-grabbing))
        (format #t "player-edge-grabbing ")
        )
    (if (= (logand (rigid-body-object-flag lights-on) s5-0) (shl 32 32))
        (format #t "lights-on ")
        )
    (if (= (logand (rigid-body-object-flag reverse-gear) s5-0) (rigid-body-object-flag reverse-gear))
        (format #t "reverse-gear ")
        )
    (if (= (logand (rigid-body-object-flag ai-driving) s5-0) (rigid-body-object-flag ai-driving))
        (format #t "ai-driving ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag persistent)) (rigid-body-object-flag persistent))
        (format #t "persistent ")
        )
    (if (= (logand (rigid-body-object-flag jump) s5-0) (rigid-body-object-flag jump))
        (format #t "jump ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag riding)) (rigid-body-object-flag riding))
        (format #t "riding ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag on-flight-level)) (rigid-body-object-flag on-flight-level))
        (format #t "on-flight-level ")
        )
    (if (= (logand (rigid-body-object-flag nav-spheres) s5-0) (shl 1024 32))
        (format #t "nav-spheres ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-driving)) (rigid-body-object-flag player-driving))
        (format #t "player-driving ")
        )
    (if (= (logand (rigid-body-object-flag hack-edit-graph-mode) s5-0) (shl 8 32))
        (format #t "hack-edit-graph-mode ")
        )
    (if (= (logand (rigid-body-object-flag camera-rapid-track-mode) s5-0)
           (rigid-body-object-flag camera-rapid-track-mode)
           )
        (format #t "camera-rapid-tracking-mode ")
        )
    (if (= (logand (rigid-body-object-flag ignition) s5-0) (rigid-body-object-flag ignition))
        (format #t "ignition ")
        )
    (if (= (logand (rigid-body-object-flag slide) s5-0) (rigid-body-object-flag slide))
        (format #t "slide ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag on-ground)) (rigid-body-object-flag on-ground))
        (format #t "on-ground ")
        )
    (if (= (logand (rigid-body-object-flag flight-level-transition) s5-0)
           (rigid-body-object-flag flight-level-transition)
           )
        (format #t "flight-level-transition ")
        )
    (if (= (logand (rigid-body-object-flag lights-dead) s5-0) (shl 128 32))
        (format #t "lights-dead ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-touching)) (rigid-body-object-flag player-touching))
        (format #t "player-touching ")
        )
    (if (= (logand (rigid-body-object-flag target-in-sight) s5-0) (shl 1 32))
        (format #t "target-in-sight ")
        )
    (if (= (logand (rigid-body-object-flag idle-sound) s5-0) (shl 2048 32))
        (format #t "idle-sound ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag in-air)) (rigid-body-object-flag in-air))
        (format #t "in-air ")
        )
    (if (= (logand (rigid-body-object-flag draw-marks) s5-0) (shl 4 32))
        (format #t "draw-marks ")
        )
    (if (= (logand (rigid-body-object-flag camera) s5-0) (rigid-body-object-flag camera))
        (format #t "camera ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-standing-on)) (rigid-body-object-flag player-standing-on))
        (format #t "player-standing-on ")
        )
    (if (= (logand (rigid-body-object-flag measure-control-parameters) s5-0) (shl 16 32))
        (format #t "measure-control-parameters ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-impulse-force)) (rigid-body-object-flag player-impulse-force))
        (format #t "player-impulse-force ")
        )
    (if (= (logand (rigid-body-object-flag rammed-target) s5-0) (shl 2 32))
        (format #t "rammed-target ")
        )
    )
  (format #t ")~%")
  (format #t "~2Tcontrols: #<vehicle-controls @ #x~X>~%" (-> obj controls))
  (format #t "~2Tprev-controls: #<vehicle-controls @ #x~X>~%" (-> obj prev-controls))
  (format #t "~2Tup-dir: #<vector @ #x~X>~%" (-> obj up-dir))
  (format #t "~2Tjump-time: ~f~%" (-> obj jump-time))
  (format #t "~2Tjump-thrust: ~f~%" (-> obj jump-thrust))
  (format #t "~2Tengine-thrust: ~f~%" (-> obj engine-thrust))
  (format #t "~2Tengine-power-factor: ~f~%" (-> obj engine-power-factor))
  (format #t "~2Tforce-scale: ~f~%" (-> obj force-scale))
  (format #t "~2Ttarget-distance2: (meters ~m)~%" (-> obj target-distance2))
  (format #t "~2Tpad0: ~D~%" (-> obj pad0))
  (format #t "~2Ttarget-acceleration: #<vector @ #x~X>~%" (-> obj target-acceleration))
  (format #t "~2Timpact-pos: #<vector @ #x~X>~%" (-> obj impact-pos))
  (format #t "~2Tlin-acceleration: #<vector @ #x~X>~%" (-> obj lin-acceleration))
  (format #t "~2Thit-points: ~f~%" (-> obj hit-points))
  (format #t "~2Tdamage-factor: ~f~%" (-> obj damage-factor))
  (format #t "~2Tcrash-level: ~D~%" (-> obj crash-level))
  (format #t "~2Tforce-level: ~D~%" (-> obj force-level))
  (format #t "~2Ttraffic-hash-id: ~D~%" (-> obj traffic-hash-id))
  (format #t "~2Ttraffic-priority-id: ~D~%" (-> obj traffic-priority-id))
  (format #t "~2Tpower-fluctuation-factor: ~f~%" (-> obj power-fluctuation-factor))
  (format #t "~2Tpower-level: ~f~%" (-> obj power-level))
  (format #t "~2Tflight-level-index: ~D~%" (-> obj flight-level-index))
  (format #t "~2Tflight-level-index-prev: ~D~%" (-> obj flight-level-index-prev))
  (format #t "~2Toverlap-player-counter: ~D~%" (-> obj overlap-player-counter))
  (format #t "~2Tphysics-counter: ~D~%" (-> obj physics-counter))
  (format #t "~2Tflight-level: ~f~%" (-> obj flight-level))
  (format #t "~2Tbrake-factor: ~f~%" (-> obj brake-factor))
  (format #t "~2Tcam-speed-interp: ~f~%" (-> obj cam-speed-interp))
  (format #t "~2Tcamera-dist2: ~f~%" (-> obj camera-dist2))
  (format #t "~2Tplayer-dist2: ~f~%" (-> obj player-dist2))
  (format #t "~2Tbound-radius: ~f~%" (-> obj bound-radius))
  (format #t "~2Trider-array[4] @ #x~X~%" (-> obj rider-array))
  (format #t "~2Tlift-thrust[2] @ #x~X~%" (-> obj lift-thrust))
  (format #t "~2Troll-thrust[2] @ #x~X~%" (-> obj roll-thrust))
  (format #t "~2Tsent-attack-time: ~D~%" (-> obj sent-attack-time))
  (format #t "~2Tair-time: ~D~%" (-> obj air-time))
  (format #t "~2Tturn-time: ~D~%" (-> obj turn-time))
  (format #t "~2Tcrash-time: ~D~%" (-> obj crash-time))
  (format #t "~2Ttransition-time: ~D~%" (-> obj transition-time))
  (format #t "~2Ttransition-end-time: ~D~%" (-> obj transition-end-time))
  (format #t "~2Tturbo-boost-time: ~D~%" (-> obj turbo-boost-time))
  (format #t "~2Tcrash-duration: ~D~%" (-> obj crash-duration))
  (format #t "~2Tturbo-boost-duration: ~D~%" (-> obj turbo-boost-duration))
  (format #t "~2Tturbo-boost-factor: ~f~%" (-> obj turbo-boost-factor))
  (format #t "~2Tcrash-impulse: ~f~%" (-> obj crash-impulse))
  (format #t "~2Twater-height: ~f~%" (-> obj water-height))
  (format #t "~2Tlights-factor: ~f~%" (-> obj lights-factor))
  (format #t "~2Toutgoing-attack-id: ~D~%" (-> obj outgoing-attack-id))
  (format #t "~2Tscrape-sound-id: ~D~%" (-> obj scrape-sound-id))
  (format #t "~2Tengine-sound-id: ~D~%" (-> obj engine-sound-id))
  (format #t "~2Tthrust-sound-id: ~D~%" (-> obj thrust-sound-id))
  (format #t "~2Troll-sound-id: ~D~%" (-> obj roll-sound-id))
  (format #t "~2Tdamage-pop-sound-id: ~D~%" (-> obj damage-pop-sound-id))
  (format #t "~2Tdamage-zap-sound-id: ~D~%" (-> obj damage-zap-sound-id))
  (format #t "~2Textra-sound-id: ~D~%" (-> obj extra-sound-id))
  (format #t "~2Tfog-fade: ~f~%" (-> obj fog-fade))
  (format #t "~2Tscrape-sound-envelope: ~f~%" (-> obj scrape-sound-envelope))
  (format #t "~2Tengine-sound-envelope: ~f~%" (-> obj engine-sound-envelope))
  (format #t "~2Tengine-sound-factor: ~f~%" (-> obj engine-sound-factor))
  (format #t "~2Tsputter-sound-envelope: ~f~%" (-> obj sputter-sound-envelope))
  (format #t "~2Trudder-sound-envelope: ~f~%" (-> obj rudder-sound-envelope))
  (format #t "~2Tfins-sound-envelope: ~f~%" (-> obj fins-sound-envelope))
  (format #t "~2Texhaust-part-accum[2] @ #x~X~%" (-> obj exhaust-part-accum))
  (format #t "~2Tsmoke-part-accum[2] @ #x~X~%" (-> obj smoke-part-accum))
  (format #t "~2Tcontroller: #<vehicle-controller @ #x~X>~%" (-> obj controller))
  (format #t "~2Tsection-array[4] @ #x~X~%" (-> obj section-array))
  (label cfg-92)
  obj
  )

;; failed to figure out what this is:
0
