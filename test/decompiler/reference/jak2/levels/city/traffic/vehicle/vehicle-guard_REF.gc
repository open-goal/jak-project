;;-*-Lisp-*-
(in-package goal)

;; definition of type turret-barrel-info
(deftype turret-barrel-info (structure)
  ((local-pos  vector  :inline)
   (local-dir  vector  :inline)
   )
  )

;; definition for method 3 of type turret-barrel-info
(defmethod inspect ((this turret-barrel-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'turret-barrel-info)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tlocal-dir: #<vector @ #x~X>~%" (-> this local-dir))
  (label cfg-4)
  this
  )

;; definition of type turret-control-info
(deftype turret-control-info (structure)
  ((joint-index   int8)
   (barrel-count  int8)
   (shot-speed    float)
   (attack-range  float)
   (rot-min       float               2)
   (rot-max       float               2)
   (rot-x-min     float               :overlay-at (-> rot-min 0))
   (rot-x-max     float               :overlay-at (-> rot-max 0))
   (rot-y-min     float               :overlay-at (-> rot-min 1))
   (rot-y-max     float               :overlay-at (-> rot-max 1))
   (local-pos     vector              :inline)
   (local-dir     vector              :inline)
   (barrel-array  turret-barrel-info  4 :inline)
   )
  )

;; definition for method 3 of type turret-control-info
(defmethod inspect ((this turret-control-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'turret-control-info)
  (format #t "~1Tjoint-index: ~D~%" (-> this joint-index))
  (format #t "~1Tbarrel-count: ~D~%" (-> this barrel-count))
  (format #t "~1Tshot-speed: ~f~%" (-> this shot-speed))
  (format #t "~1Tattack-range: ~f~%" (-> this attack-range))
  (format #t "~1Trot-min[2] @ #x~X~%" (-> this rot-min))
  (format #t "~1Trot-max[2] @ #x~X~%" (-> this rot-max))
  (format #t "~1Trot-x-min: ~f~%" (-> this rot-x-min))
  (format #t "~1Trot-x-max: ~f~%" (-> this rot-x-max))
  (format #t "~1Trot-y-min: ~f~%" (-> this rot-y-min))
  (format #t "~1Trot-y-max: ~f~%" (-> this rot-y-max))
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tlocal-dir: #<vector @ #x~X>~%" (-> this local-dir))
  (format #t "~1Tbarrel-array[4] @ #x~X~%" (-> this barrel-array))
  (label cfg-4)
  this
  )

;; definition of type turret-control
(deftype turret-control (structure)
  ((info                  turret-control-info)
   (guard-settings        traffic-guard-type-settings)
   (flags                 turret-flag)
   (shot-count            int8)
   (burst-count           int16)
   (target-dist           float)
   (inaccuracy            float)
   (aim-offset-angle      degrees)
   (aim-rot               float  2)
   (aim-rot-vel           float  2)
   (aim-rot-offset        float  2)
   (aim-rot-x             float  :overlay-at (-> aim-rot 0))
   (aim-rot-y             float  :overlay-at (-> aim-rot 1))
   (aim-rot-vel-x         float  :overlay-at (-> aim-rot-vel 0))
   (aim-rot-vel-y         float  :overlay-at (-> aim-rot-vel 1))
   (target-in-sight-time  time-frame)
   (aim-acquire-time      time-frame)
   (shoot-time            time-frame)
   (owner-handle          handle)
   )
  :pack-me
  (:methods
    (turret-control-method-9 (_type_ vehicle vector vector) none)
    (turret-control-method-10 (_type_ vehicle) none)
    (turret-control-method-11 (_type_ object object vector) none)
    (update-joint-mod (_type_ joint-mod-rotate-local) none)
    (turret-control-method-13 (_type_) none)
    (turret-control-method-14 (_type_) none)
    (set-info (_type_ turret-control-info) none)
    (turret-control-method-16 (_type_ float float) none)
    (turret-control-method-17 (_type_ vehicle) none)
    )
  )

;; definition for method 3 of type turret-control
(defmethod inspect ((this turret-control))
  (when (not this)
    (set! this this)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" this 'turret-control)
  (format #t "~1Tinfo: #<turret-control-info @ #x~X>~%" (-> this info))
  (format #t "~1Tguard-settings: #<traffic-guard-type-settings @ #x~X>~%" (-> this guard-settings))
  (format #t "~1Tflags: #x~X : (turret-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (turret-flag no-rot-y-clamp)) (turret-flag no-rot-y-clamp))
        (format #t "no-rot-y-clamp ")
        )
    (if (= (logand s5-0 (turret-flag should-shoot)) (turret-flag should-shoot))
        (format #t "should-shoot ")
        )
    (if (= (logand s5-0 (turret-flag aiming)) (turret-flag aiming))
        (format #t "aiming ")
        )
    (if (= (logand s5-0 (turret-flag display-marks)) (turret-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (turret-flag targetting-laser)) (turret-flag targetting-laser))
        (format #t "targetting-laser ")
        )
    (if (= (logand s5-0 (turret-flag firing)) (turret-flag firing))
        (format #t "firing ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tshot-count: ~D~%" (-> this shot-count))
  (format #t "~1Tburst-count: ~D~%" (-> this burst-count))
  (format #t "~1Ttarget-dist: ~f~%" (-> this target-dist))
  (format #t "~1Tinaccuracy: ~f~%" (-> this inaccuracy))
  (format #t "~1Taim-offset-angle: ~f~%" (-> this aim-offset-angle))
  (format #t "~1Taim-rot[2] @ #x~X~%" (-> this aim-rot))
  (format #t "~1Taim-rot-vel[2] @ #x~X~%" (-> this aim-rot-vel))
  (format #t "~1Taim-rot-offset[2] @ #x~X~%" (-> this aim-rot-offset))
  (format #t "~1Taim-rot-x: ~f~%" (-> this aim-rot-x))
  (format #t "~1Taim-rot-y: ~f~%" (-> this aim-rot-y))
  (format #t "~1Taim-rot-vel-x: ~f~%" (-> this aim-rot-vel-x))
  (format #t "~1Taim-rot-vel-y: ~f~%" (-> this aim-rot-vel-y))
  (format #t "~1Ttarget-in-sight-time: ~D~%" (-> this target-in-sight-time))
  (format #t "~1Taim-acquire-time: ~D~%" (-> this aim-acquire-time))
  (format #t "~1Tshoot-time: ~D~%" (-> this shoot-time))
  (format #t "~1Towner-handle: ~D~%" (-> this owner-handle))
  (label cfg-16)
  this
  )

;; definition for method 15 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod set-info ((this turret-control) (arg0 turret-control-info))
  (set! (-> this info) arg0)
  (set! (-> this owner-handle) (the-as handle #f))
  0
  (none)
  )

;; definition for method 12 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod update-joint-mod ((this turret-control) (arg0 joint-mod-rotate-local))
  (let ((v1-0 (new 'stack-no-clear 'vector)))
    (set! (-> v1-0 x) (- (-> this aim-rot-x)))
    (set! (-> v1-0 y) (-> this aim-rot-y))
    (set! (-> v1-0 z) 0.0)
    (quaternion-zxy! (-> arg0 rotation) v1-0)
    )
  0
  (none)
  )

;; definition for method 13 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-13 ((this turret-control))
  (let ((f30-0 (/ (* 298261630.0 (-> this inaccuracy) (-> this guard-settings inaccuracy))
                  (fmax 40960.0 (-> this target-dist))
                  )
               )
        )
    (set! (-> this aim-rot-offset 0) (* f30-0 (cos (-> this aim-offset-angle))))
    (set! (-> this aim-rot-offset 1) (* f30-0 (sin (-> this aim-offset-angle))))
    )
  (+! (-> this aim-offset-angle) (* 32768.0 (rand-vu)))
  0
  (none)
  )

;; definition for method 14 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-14 ((this turret-control))
  (logclear! (-> this flags) (turret-flag firing aiming))
  (set! (-> this burst-count) 0)
  (set! (-> this aim-offset-angle) (* 65536.0 (rand-vu)))
  0
  (none)
  )

;; definition for function vehicle-los-clear?
;; INFO: Used lq/sq
(defun vehicle-los-clear? ((arg0 vector) (arg1 vector))
  (let ((v1-0 (new 'stack-no-clear 'collide-query)))
    (set! (-> v1-0 start-pos quad) (-> arg0 quad))
    (vector-! (-> v1-0 move-dist) arg1 arg0)
    (let ((a0-1 v1-0))
      (set! (-> a0-1 radius) 2048.0)
      (set! (-> a0-1 collide-with) (collide-spec backgnd))
      (set! (-> a0-1 ignore-process0) #f)
      (set! (-> a0-1 ignore-process1) #f)
      (set! (-> a0-1 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
      (set! (-> a0-1 action-mask) (collide-action solid))
      )
    (< (fill-and-probe-using-line-sphere *collide-cache* v1-0) 0.0)
    )
  )

;; definition for function vehicle-draw-beam
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun vehicle-draw-beam ((arg0 sparticle-launcher) (arg1 vector) (arg2 vector) (arg3 object) (arg4 symbol))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((a1-2 (vector+! (new 'stack-no-clear 'vector) arg1 arg2)))
      (when (or (not arg4) (line-in-view-frustum? arg1 a1-2))
        (let ((s5-0 (new 'stack-no-clear 'vector))
              (s4-0 (new 'stack-no-clear 'quaternion))
              )
          (if (get-field-spec-by-id arg0 (sp-field-id spt-scale-y))
              (set! (-> *beam-info* y-scale) (vector-length arg2))
              )
          (let ((a0-4 s5-0))
            (let ((v1-10 arg2))
              (let ((a1-5 0.5))
                (.mov vf7 a1-5)
                )
              (.lvf vf5 (&-> v1-10 quad))
              )
            (.lvf vf4 (&-> arg1 quad))
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a0-4 quad) vf6)
            )
          (forward-up->quaternion s4-0 arg2 (new 'static 'vector :y 1.0 :w 1.0))
          (dotimes (s3-1 3)
            (quaternion-rotate-local-z! s4-0 s4-0 10922.667)
            (quaternion-copy! *particle-quat* s4-0)
            (let ((t9-5 sp-launch-particles-var)
                  (a0-8 *sp-particle-system-3d*)
                  (a1-9 arg0)
                  (a2-3 *launch-matrix*)
                  )
              (set! (-> a2-3 trans quad) (-> s5-0 quad))
              (t9-5 a0-8 a1-9 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

;; definition for function vehicle-draw-laser-spot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun vehicle-draw-laser-spot ((arg0 vector) (arg1 vector) (arg2 symbol))
  (vector+float*! (new 'stack-no-clear 'vector) arg0 arg1 -1638.4)
  (cond
    (arg2
      (launch-particles (-> *part-id-table* 771) arg0)
      (launch-particles (-> *part-id-table* 770) arg0)
      )
    (else
      (launch-particles (-> *part-id-table* 772) arg0)
      )
    )
  0
  (none)
  )

;; definition for function vehicle-draw-laser
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun vehicle-draw-laser ((arg0 vector) (arg1 vector))
  (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (camera-pos) arg0) 1.0)
  (set! (-> (new 'stack-no-clear 'vector) quad) (-> arg0 quad))
  (let ((s5-1 (-> *part-id-table* 769)))
    (get-field-spec-by-id s5-1 (sp-field-id spt-timer))
    (let* ((s4-3 (vector-! (new 'stack-no-clear 'vector) arg1 arg0))
           (f30-0 (vector-vector-distance (camera-pos) arg0))
           (s3-2 (get-field-spec-by-id s5-1 (sp-field-id spt-scale-x)))
           (f0-4 (cond
                   ((< f30-0 122.88)
                    0.0
                    )
                   ((< 65536.0 f30-0)
                    1.0
                    )
                   (else
                     (* 0.000015287453 (+ -122.88 f30-0))
                     )
                   )
                 )
           (f30-1 (-> s3-2 initial-valuef))
           (f28-0 (-> s3-2 random-rangef))
           )
      (set! (-> s3-2 initial-valuef) (* f30-1 f0-4))
      (set! (-> s3-2 random-rangef) (* f28-0 f0-4))
      (vehicle-draw-beam s5-1 arg0 s4-3 #f #t)
      (set! (-> s3-2 initial-valuef) f30-1)
      (set! (-> s3-2 random-rangef) f28-0)
      )
    )
  0
  (none)
  )

;; definition for method 9 of type turret-control
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-9 ((this turret-control) (arg0 vehicle) (arg1 vector) (arg2 vector))
  (let ((gp-0 (new 'stack-no-clear 'turret-unknown-stack-structure)))
    (set! (-> gp-0 vec-12 x) (seconds-per-frame))
    (let* ((v1-1 (-> gp-0 mat-1))
           (a3-1 (-> arg0 node-list data (-> this info joint-index) bone transform))
           (a0-4 (-> a3-1 quad 0))
           (a1-4 (-> a3-1 quad 1))
           (a2-1 (-> a3-1 quad 2))
           (a3-2 (-> a3-1 trans quad))
           )
      (set! (-> v1-1 quad 0) a0-4)
      (set! (-> v1-1 quad 1) a1-4)
      (set! (-> v1-1 quad 2) a2-1)
      (set! (-> v1-1 trans quad) a3-2)
      )
    (set! (-> this target-dist) (vector-vector-distance (-> gp-0 mat-1 trans) arg1))
    (let ((f0-3 (/ (-> this target-dist) (-> this info shot-speed))))
      (vector+float*! (-> gp-0 vec-1) arg1 arg2 f0-3)
      )
    (when (not (logtest? (-> this flags) (turret-flag aiming)))
      (logior! (-> this flags) (turret-flag aiming))
      (turret-control-method-13 this)
      )
    (vector-matrix*! (-> gp-0 vec-6) (-> this info local-pos) (-> gp-0 mat-1))
    (vector-! (-> gp-0 vec-5) (-> gp-0 vec-1) (-> gp-0 vec-6))
    (let* ((v1-14 (-> gp-0 mat-1))
           (a3-3 (-> arg0 node-list data 0 bone transform))
           (a0-11 (-> a3-3 quad 0))
           (a1-9 (-> a3-3 quad 1))
           (a2-3 (-> a3-3 quad 2))
           (a3-4 (-> a3-3 trans quad))
           )
      (set! (-> v1-14 quad 0) a0-11)
      (set! (-> v1-14 quad 1) a1-9)
      (set! (-> v1-14 quad 2) a2-3)
      (set! (-> v1-14 trans quad) a3-4)
      )
    (matrix-transpose! (the-as matrix (-> gp-0 vec-8)) (-> gp-0 mat-1))
    (vector-rotate*! (-> gp-0 vec-3) (-> gp-0 vec-5) (the-as matrix (-> gp-0 vec-8)))
    (set! (-> gp-0 vec-4 y) (atan (-> gp-0 vec-3 x) (-> gp-0 vec-3 z)))
    (let* ((v1-15 (-> gp-0 vec-3))
           (f0-11 (sqrtf (+ (* (-> v1-15 x) (-> v1-15 x)) (* (-> v1-15 z) (-> v1-15 z)))))
           )
      (set! (-> gp-0 vec-4 x) (atan (-> gp-0 vec-3 y) f0-11))
      )
    (+! (-> gp-0 vec-4 x) (-> this aim-rot-offset 0))
    (+! (-> gp-0 vec-4 y) (-> this aim-rot-offset 1))
    (dotimes (s3-1 2)
      (+! (-> this aim-rot-vel s3-1)
          (* 5.0
             (- (* 8.0 (if (or (zero? s3-1) (not (logtest? (-> this flags) (turret-flag no-rot-y-clamp))))
                           (- (-> gp-0 vec-4 data s3-1) (-> this aim-rot s3-1))
                           (deg- (-> gp-0 vec-4 data s3-1) (-> this aim-rot s3-1))
                           )
                   )
                (-> this aim-rot-vel s3-1)
                )
             (-> gp-0 vec-12 x)
             )
          )
      (set! (-> this aim-rot-vel s3-1) (* (-> this aim-rot-vel s3-1) (fmax 0.0 (- 1.0 (* 0.1 (-> gp-0 vec-12 x))))))
      (+! (-> this aim-rot s3-1) (* (-> this aim-rot-vel s3-1) (-> gp-0 vec-12 x)))
      (when (or (zero? s3-1) (not (logtest? (-> this flags) (turret-flag no-rot-y-clamp))))
        (let ((f0-31 (-> this info rot-min s3-1)))
          (when (< (-> this aim-rot s3-1) f0-31)
            (set! (-> this aim-rot s3-1) f0-31)
            (set! (-> this aim-rot-vel s3-1) 0.0)
            )
          )
        (let ((f0-33 (-> this info rot-max s3-1)))
          (when (< f0-33 (-> this aim-rot s3-1))
            (set! (-> this aim-rot s3-1) f0-33)
            (set! (-> this aim-rot-vel s3-1) 0.0)
            )
          )
        )
      )
    (logclear! (-> this flags) (turret-flag should-shoot))
    (when (and (< (fabs (deg- (-> this aim-rot-x) (-> gp-0 vec-4 x))) 2912.7112)
               (< (fabs (deg- (-> this aim-rot-y) (-> gp-0 vec-4 y))) 2912.7112)
               (< (-> this target-dist) (-> this info attack-range))
               )
      (logior! (-> this flags) (turret-flag should-shoot))
      (when (logtest? (-> this flags) (turret-flag targetting-laser))
        (let* ((v1-88 (-> gp-0 mat-1))
               (a3-5 (-> arg0 node-list data (-> this info joint-index) bone transform))
               (a0-29 (-> a3-5 quad 0))
               (a1-20 (-> a3-5 quad 1))
               (a2-5 (-> a3-5 quad 2))
               (a3-6 (-> a3-5 trans quad))
               )
          (set! (-> v1-88 quad 0) a0-29)
          (set! (-> v1-88 quad 1) a1-20)
          (set! (-> v1-88 quad 2) a2-5)
          (set! (-> v1-88 trans quad) a3-6)
          )
        (set! (-> gp-0 vec-7 quad) (-> gp-0 mat-1 vector 2 quad))
        (let ((s3-2 (new 'stack-no-clear 'collide-query)))
          (set! (-> s3-2 start-pos quad) (-> gp-0 vec-6 quad))
          (vector-float*! (-> s3-2 move-dist) (-> gp-0 vec-7) (-> this info attack-range))
          (let ((v1-93 s3-2))
            (set! (-> v1-93 radius) 409.6)
            (set! (-> v1-93 collide-with)
                  (collide-spec backgnd jak bot crate enemy obstacle hit-by-others-list player-list)
                  )
            (set! (-> v1-93 ignore-process0) arg0)
            (set! (-> v1-93 ignore-process1) #f)
            (set! (-> v1-93 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
            (set! (-> v1-93 action-mask) (collide-action solid))
            )
          (let ((f30-1 (fill-and-probe-using-line-sphere *collide-cache* s3-2))
                (s5-1 #f)
                )
            (cond
              ((< f30-1 0.0)
               (vector+! (-> gp-0 vec-2) (-> s3-2 start-pos) (-> s3-2 move-dist))
               )
              (else
                (let* ((s4-1 (-> s3-2 best-other-tri collide-ptr))
                       (a0-43 (if (type? s4-1 collide-shape-prim)
                                  s4-1
                                  )
                              )
                       )
                  (if (and a0-43 (logtest? (-> (the-as collide-shape-prim a0-43) prim-core collide-as) (collide-spec jak)))
                      (set! s5-1 #t)
                      )
                  )
                (vector+float*! (-> gp-0 vec-2) (-> s3-2 start-pos) (-> s3-2 move-dist) f30-1)
                (vehicle-draw-laser-spot (-> gp-0 vec-2) (-> gp-0 vec-7) s5-1)
                )
              )
            (when (not s5-1)
              )
            )
          )
        (let ((t9-13 vehicle-draw-laser)
              (a0-48 (-> gp-0 vec-6))
              (a1-27 (-> gp-0 vec-2))
              )
          (-> gp-0 vec-7)
          (t9-13 a0-48 a1-27)
          )
        )
      )
    )
  0
  (none)
  )

;; definition for method 10 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-10 ((this turret-control) (arg0 vehicle))
  (cond
    ((logtest? (-> this flags) (turret-flag should-shoot))
     (cond
       ((logtest? (-> this flags) (turret-flag firing))
        (cond
          ((> (-> this shot-count) 0)
           (if (time-elapsed? (-> this shoot-time) (the-as time-frame (-> this guard-settings shot-delay)))
               (turret-control-method-17 this arg0)
               )
           )
          (else
            (logclear! (-> this flags) (turret-flag firing))
            (+! (-> this burst-count) 1)
            (turret-control-method-13 this)
            )
          )
        )
       (else
         (when (and (time-elapsed? (-> this shoot-time) (the-as time-frame (-> this guard-settings burst-delay)))
                    (time-elapsed? (-> this aim-acquire-time) (the-as time-frame (-> this guard-settings acquire-delay)))
                    )
           (set! (-> this shot-count)
                 (+ (-> this guard-settings shot-count) (rand-vu-int-count (+ (-> this guard-settings rand-shot-count) 1)))
                 )
           (logior! (-> this flags) (turret-flag firing))
           )
         )
       )
     )
    (else
      (set-time! (-> this aim-acquire-time))
      (turret-control-method-14 this)
      )
    )
  0
  (none)
  )

;; definition for method 11 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-11 ((this turret-control) (arg0 object) (arg1 object) (arg2 vector))
  (when (nonzero? (-> this info))
    (set! (-> this inaccuracy) (* 0.000012207031 (+ 20480.0 (vector-length arg2))))
    (turret-control-method-9 this (the-as vehicle arg0) (the-as vector arg1) arg2)
    (turret-control-method-10 this (the-as vehicle arg0))
    )
  0
  (none)
  )

;; definition for method 17 of type turret-control
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-17 ((this turret-control) (arg0 vehicle))
  (let ((s4-0 (new 'stack-no-clear 'turret-unknown-stack-structure2)))
    (set! (-> s4-0 proj-params ent) (-> arg0 entity))
    (set! (-> s4-0 proj-params charge) 1.0)
    (set! (-> s4-0 proj-params options) (projectile-options))
    (set! (-> s4-0 proj-params notify-handle) (process->handle arg0))
    (set! (-> s4-0 proj-params owner-handle) (process->handle (handle->process (-> this owner-handle))))
    (set! (-> s4-0 proj-params ignore-handle) (process->handle arg0))
    (let* ((v1-14 *game-info*)
           (a0-16 (+ (-> v1-14 attack-id) 1))
           )
      (set! (-> v1-14 attack-id) a0-16)
      (set! (-> s4-0 proj-params attack-id) a0-16)
      )
    (set! (-> s4-0 proj-params timeout) (seconds 4))
    (let* ((v1-16 (-> s4-0 mat-1))
           (a3-0 (-> arg0 node-list data (-> this info joint-index) bone transform))
           (a0-20 (-> a3-0 quad 0))
           (a1-6 (-> a3-0 quad 1))
           (a2-0 (-> a3-0 quad 2))
           (a3-1 (-> a3-0 trans quad))
           )
      (set! (-> v1-16 quad 0) a0-20)
      (set! (-> v1-16 quad 1) a1-6)
      (set! (-> v1-16 quad 2) a2-0)
      (set! (-> v1-16 trans quad) a3-1)
      )
    (dotimes (s3-0 (-> this info barrel-count))
      (vector-matrix*! (-> s4-0 vec-1) (the-as vector (-> this info barrel-array s3-0)) (-> s4-0 mat-1))
      (set! (-> s4-0 vec-2 quad) (-> s4-0 mat-1 vector 2 quad))
      (set! (-> s4-0 proj-params pos quad) (-> s4-0 vec-1 quad))
      (vector-float*! (-> s4-0 proj-params vel) (-> s4-0 vec-2) (-> this info shot-speed))
      (spawn-projectile guard-shot (-> s4-0 proj-params) arg0 *default-dead-pool*)
      )
    )
  (set-time! (-> this shoot-time))
  (+! (-> this shot-count) -1)
  0
  (none)
  )

;; definition for method 16 of type turret-control
;; WARN: Return type mismatch int vs none.
(defmethod turret-control-method-16 ((this turret-control) (arg0 float) (arg1 float))
  (let ((f0-0 (seconds-per-frame)))
    (set! (-> this aim-rot-vel-x) arg1)
    (set! (-> this aim-rot-vel-y) arg0)
    (dotimes (v1-1 2)
      (+! (-> this aim-rot v1-1) (* f0-0 (-> this aim-rot-vel v1-1)))
      (let ((f1-4 (-> this info rot-min v1-1)))
        (when (< (-> this aim-rot v1-1) f1-4)
          (set! (-> this aim-rot v1-1) f1-4)
          (set! (-> this aim-rot-vel v1-1) 0.0)
          )
        )
      (let ((f1-6 (-> this info rot-max v1-1)))
        (when (< f1-6 (-> this aim-rot v1-1))
          (set! (-> this aim-rot v1-1) f1-6)
          (set! (-> this aim-rot-vel v1-1) 0.0)
          )
        )
      )
    )
  0
  (none)
  )

;; definition of type vehicle-guard-target-data
(deftype vehicle-guard-target-data (structure)
  ((tpos           vector  :inline)
   (spos           vector  :inline)
   (tvel           vector  :inline)
   (svel           vector  :inline)
   (tdir           vector  :inline)
   (sdir           vector  :inline)
   (to-target      vector  :inline)
   (to-target-dir  vector  :inline)
   (temp           vector  :inline)
   (target         target)
   (dist           float)
   (inv-dist       float)
   (attack-range   float)
   )
  )

;; definition for method 3 of type vehicle-guard-target-data
(defmethod inspect ((this vehicle-guard-target-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-guard-target-data)
  (format #t "~1Ttpos: #<vector @ #x~X>~%" (-> this tpos))
  (format #t "~1Tspos: #<vector @ #x~X>~%" (-> this spos))
  (format #t "~1Ttvel: #<vector @ #x~X>~%" (-> this tvel))
  (format #t "~1Tsvel: #<vector @ #x~X>~%" (-> this svel))
  (format #t "~1Ttdir: #<vector @ #x~X>~%" (-> this tdir))
  (format #t "~1Tsdir: #<vector @ #x~X>~%" (-> this sdir))
  (format #t "~1Tto-target: #<vector @ #x~X>~%" (-> this to-target))
  (format #t "~1Tto-target-dir: #<vector @ #x~X>~%" (-> this to-target-dir))
  (format #t "~1Ttemp: #<vector @ #x~X>~%" (-> this temp))
  (format #t "~1Ttarget: ~A~%" (-> this target))
  (format #t "~1Tdist: ~f~%" (-> this dist))
  (format #t "~1Tinv-dist: ~f~%" (-> this inv-dist))
  (format #t "~1Tattack-range: ~f~%" (-> this attack-range))
  (label cfg-4)
  this
  )

;; definition of type vehicle-guard
(deftype vehicle-guard (vehicle)
  ((ai-hook                       (function vehicle-guard none))
   (turret                        turret-control  :inline)
   (target-flags                  traffic-target-flag)
   (target-in-sight-time          time-frame)
   (minimap                       connection-minimap)
   (vehicle-guard-pad-k1jn23k1    uint32)
   (traffic-target-status         traffic-target-status)
   (pursuit-target                handle)
   (vehicle-guard-pad-0jkfdjslf   uint32          4)
   (vehicle-guard-vector0341413   vector          :inline)
   (vehicle-guard-pad-1kjh2nb3k1  uint32          8)
   (lod2                          symbol)
   )
  (:state-methods
    hostile
    stop-and-shoot
    slow-pursuit
    vehicle-guard-state-147
    vehicle-guard-state-148
    waiting-ambush
    )
  (:methods
    (vehicle-guard-method-150 (_type_) none)
    (vehicle-guard-method-151 (_type_ vehicle-guard-target-data) none)
    (vehicle-guard-method-152 (_type_ vehicle-guard-target-data) none)
    (vehicle-guard-method-153 (_type_ target) none)
    (vehicle-guard-method-154 (_type_) none)
    (vehicle-guard-method-155 (_type_ vector vector) none)
    (vehicle-guard-method-156 (_type_) none)
    (vehicle-guard-method-157 (_type_ vehicle-guard-target-data) symbol)
    (vehicle-guard-method-158 (_type_) none)
    )
  )

;; definition for method 3 of type vehicle-guard
(defmethod inspect ((this vehicle-guard))
  (when (not this)
    (set! this this)
    (goto cfg-14)
    )
  (let ((t9-0 (method-of-type vehicle inspect)))
    (t9-0 this)
    )
  (format #t "~2Tai-hook: ~A~%" (-> this ai-hook))
  (format #t "~2Tturret: #<turret-control @ #x~X>~%" (-> this turret))
  (format #t "~2Ttarget-flags: #x~X : (traffic-target-flag " (-> this target-flags))
  (let ((s5-0 (-> this target-flags)))
    (if (= (logand s5-0 (traffic-target-flag visible-now)) (traffic-target-flag visible-now))
        (format #t "visible-now ")
        )
    (if (= (logand s5-0 (traffic-target-flag visible-ever)) (traffic-target-flag visible-ever))
        (format #t "visible-ever ")
        )
    (if (= (logand s5-0 (traffic-target-flag force-visible)) (traffic-target-flag force-visible))
        (format #t "force-visible ")
        )
    (if (= (logand s5-0 (traffic-target-flag visible-recently)) (traffic-target-flag visible-recently))
        (format #t "visible-recently ")
        )
    (if (= (logand s5-0 (traffic-target-flag updated)) (traffic-target-flag updated))
        (format #t "updated ")
        )
    )
  (format #t ")~%")
  (format #t "~2Ttarget-in-sight-time: ~D~%" (-> this target-in-sight-time))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Ttraffic-target-status: #<traffic-target-status @ #x~X>~%" (&-> this traffic-target-status))
  (format #t "~2Tpursuit-target: ~D~%" (-> this pursuit-target))
  (format #t "~2Tlod2: ~A~%" (-> this lod2))
  (label cfg-14)
  this
  )

;; definition for method 153 of type vehicle-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-153 ((this vehicle-guard) (arg0 target))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 quad) (-> (get-trans arg0 3) quad))
    (turret-control-method-11 (-> this turret) this s5-0 (-> arg0 control transv))
    )
  0
  (none)
  )

;; definition for method 151 of type vehicle-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-151 ((this vehicle-guard) (arg0 vehicle-guard-target-data))
  (let ((s5-0 (handle->process (-> this pursuit-target))))
    (set! (-> arg0 target) (the-as target s5-0))
    (when s5-0
      (set! (-> arg0 tpos quad) (-> (the-as process-drawable s5-0) root trans quad))
      (set! (-> arg0 spos quad) (-> this root trans quad))
      (set! (-> arg0 tvel quad) (-> (the-as process-drawable s5-0) root transv quad))
      (set! (-> arg0 svel quad) (-> this root transv quad))
      (vector-normalize-copy! (-> arg0 tdir) (-> arg0 tvel) 1.0)
      (vector-normalize-copy! (-> arg0 sdir) (-> arg0 svel) 1.0)
      (+! (-> arg0 tpos y) 4096.0)
      (vector-! (-> arg0 to-target) (-> arg0 tpos) (-> arg0 spos))
      (let* ((f0-2 (vector-length (-> arg0 to-target)))
             (f1-2 (/ 1.0 f0-2))
             )
        (set! (-> arg0 dist) f0-2)
        (set! (-> arg0 inv-dist) f1-2)
        (vector-float*! (-> arg0 to-target-dir) (-> arg0 to-target) f1-2)
        )
      (let ((f0-3 204800.0))
        (if (focus-test? (the-as process-focusable s5-0) pilot)
            (set! f0-3 (+ 102400.0 f0-3))
            )
        (set! (-> arg0 attack-range) f0-3)
        )
      )
    )
  0
  (none)
  )

;; definition for method 152 of type vehicle-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-152 ((this vehicle-guard) (arg0 vehicle-guard-target-data))
  (let ((s4-0 (handle->process (-> this pursuit-target))))
    (cond
      ((logtest? (rigid-body-object-flag target-in-sight) (-> this flags))
       (logclear! (-> this controller flags) (vehicle-controller-flag direct-mode))
       (when (>= (- (vector-dot (-> arg0 to-target-dir) (-> arg0 tdir))) (cos 21845.334))
         (logior! (-> this controller flags) (vehicle-controller-flag direct-mode))
         (vector-! (-> arg0 temp) (-> arg0 svel) (-> arg0 tvel))
         (let* ((f2-0 (vector-dot (-> arg0 temp) (-> arg0 to-target-dir)))
                (f0-5 (fmax 0.0 (fmin 1.0 (/ (-> arg0 dist) (fmax 4096.0 f2-0)))))
                )
           (vector+float*! (-> arg0 tpos) (-> arg0 tpos) (-> arg0 tvel) f0-5)
           (cond
             ((or (< f0-5 0.05) (vehicle-los-clear? (-> arg0 tpos) (-> arg0 spos)))
              (vector-! (-> arg0 to-target) (-> arg0 tpos) (-> arg0 spos))
              (vector-normalize-copy! (-> arg0 to-target-dir) (-> arg0 to-target) 1.0)
              (vector-float*! (-> arg0 tvel) (-> arg0 tvel) -1.0)
              )
             (else
               (set! (-> arg0 tpos quad) (-> (the-as process-drawable s4-0) root trans quad))
               )
             )
           )
         )
       (vehicle-controller-method-19 (-> this controller) (-> arg0 spos) #x43cccccd (-> arg0 tpos) (-> arg0 tvel))
       (vector-! (-> arg0 to-target) (-> this controller target-point) (-> arg0 spos))
       (vector-normalize-copy! (-> arg0 to-target-dir) (-> arg0 to-target) 1.0)
       (cond
         ((< -12288.0 (- (-> arg0 tpos y) (-> arg0 spos y)))
          (logior! (-> this controller flags) (vehicle-controller-flag ignore-others no-slowing-for-turns))
          (let* ((f0-9 (* 2.0 (-> this info max-xz-speed)))
                 (f1-8 (fmax 0.0 (vector-dot (-> arg0 sdir) (-> arg0 to-target-dir))))
                 (f0-10 (* f0-9 (* f1-8 f1-8)))
                 )
            (+! (-> this controller target-speed) f0-10)
            )
          )
         (else
           (logclear! (-> this controller flags) (vehicle-controller-flag ignore-others no-slowing-for-turns))
           (let ((f0-13 (* (-> this info max-xz-speed) (fmax 0.0 (vector-dot (-> arg0 sdir) (-> arg0 to-target-dir))))))
             (+! (-> this controller target-speed) f0-13)
             )
           )
         )
       )
      (else
        )
      )
    )
  0
  (none)
  )

;; definition for method 150 of type vehicle-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-150 ((this vehicle-guard))
  (cond
    ((handle->process (-> this pursuit-target))
     (let ((v1-3 (new 'stack-no-clear 'vehicle-control-point)))
       (set! (-> v1-3 local-pos quad) (-> this root trans quad))
       (let ((v1-4 (traffic-engine-method-49
                     (-> this controller traffic)
                     (-> v1-3 local-pos)
                     (-> this traffic-priority-id)
                     (the-as traffic-target-status (&-> this traffic-target-status))
                     )
                   )
             )
         (when (logtest? (-> v1-4 flags) (traffic-target-flag updated))
           (set! (-> this flags)
                 (the-as rigid-body-object-flag (logclear (-> this flags) (rigid-body-object-flag target-in-sight)))
                 )
           (when (logtest? (-> v1-4 flags) (traffic-target-flag visible-now))
             (set! (-> this flags)
                   (the-as rigid-body-object-flag (logior (rigid-body-object-flag target-in-sight) (-> this flags)))
                   )
             (set-time! (-> this target-in-sight-time))
             )
           )
         (set! (-> this target-flags) (-> v1-4 flags))
         )
       )
     (when (not (logtest? (rigid-body-object-flag in-pursuit) (-> this flags)))
       (if (logtest? (rigid-body-object-flag target-in-sight) (-> this flags))
           (vehicle-method-108 this)
           )
       )
     )
    (else
      (vehicle-method-109 this)
      )
    )
  (let ((v1-22 (if (logtest? (rigid-body-object-flag in-pursuit) (-> this flags))
                   (-> this draw lod-set lod 1 geo)
                   (-> this lod2)
                   )
               )
        )
    (when (!= v1-22 (-> this draw lod-set lod 2 geo))
      (set! (-> this draw lod-set lod 2 geo) (the-as merc-ctrl v1-22))
      (set! (-> this draw cur-lod) -1)
      (lod-set! (-> this draw) (-> this draw desired-lod))
      )
    )
  0
  (none)
  )

;; definition for method 155 of type vehicle-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-155 ((this vehicle-guard) (arg0 vector) (arg1 vector))
  (cond
    (#f
      (let ((s5-0 (new 'stack-no-clear 'traj3d-params)))
        (let ((f0-2 (+ 0.5 (* 0.5 (rand-vu)))))
          (set! (-> s5-0 src quad) (-> this root trans quad))
          (vector+float*! (-> s5-0 dest) arg0 arg1 f0-2)
          )
        (set! (-> s5-0 initial-tilt) 8192.0)
        (set! (-> s5-0 gravity) 184320.0)
        (when (traj3d-calc-initial-velocity-using-tilt s5-0)
          (let ((a1-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> a1-1 ent) (-> this entity))
            (set! (-> a1-1 charge) 1.0)
            (set! (-> a1-1 options) (projectile-options))
            (set! (-> a1-1 pos quad) (-> s5-0 src quad))
            (set! (-> a1-1 vel quad) (-> s5-0 initial-velocity quad))
            (set! (-> a1-1 notify-handle) (the-as handle #f))
            (set! (-> a1-1 owner-handle) (the-as handle #f))
            (set! (-> a1-1 ignore-handle) (process->handle this))
            (let* ((v1-15 *game-info*)
                   (a0-14 (+ (-> v1-15 attack-id) 1))
                   )
              (set! (-> v1-15 attack-id) a0-14)
              (set! (-> a1-1 attack-id) a0-14)
              )
            (set! (-> a1-1 timeout) (seconds 4))
            (spawn-projectile vehicle-grenade a1-1 this *default-dead-pool*)
            )
          (let ((a1-2 (new 'stack-no-clear 'traffic-danger-info)))
            (set! (-> a1-2 sphere quad) (-> this root trans quad))
            (set! (-> a1-2 sphere r) 40960.0)
            (set! (-> a1-2 velocity quad) (-> s5-0 initial-velocity quad))
            (set! (-> a1-2 notify-radius) 122880.0)
            (set! (-> a1-2 danger-level) 1.0)
            (set! (-> a1-2 decay-rate) 0.0)
            (set! (-> a1-2 flags) (traffic-danger-flags tdf0))
            (set! (-> a1-2 danger-type) (traffic-danger-type tdt6))
            (set! (-> a1-2 handle) (the-as handle #f))
            (add-danger (-> this controller traffic) a1-2)
            )
          )
        )
      )
    (else
      (let ((s5-1 (new 'stack-no-clear 'turret-unknown-stack-structure2)))
        (set! (-> s5-1 mat-1 quad 0) (-> this root trans quad))
        (vector-! (-> s5-1 mat-1 vector 1) arg0 (the-as vector (-> s5-1 mat-1)))
        (vector-normalize! (-> s5-1 mat-1 vector 1) 1.0)
        (set! (-> s5-1 proj-params ent) (-> this entity))
        (set! (-> s5-1 proj-params charge) 1.0)
        (set! (-> s5-1 proj-params options) (projectile-options))
        (set! (-> s5-1 proj-params notify-handle) (process->handle this))
        (set! (-> s5-1 proj-params owner-handle) (the-as handle #f))
        (set! (-> s5-1 proj-params ignore-handle) (process->handle this))
        (let* ((v1-38 *game-info*)
               (a0-36 (+ (-> v1-38 attack-id) 1))
               )
          (set! (-> v1-38 attack-id) a0-36)
          (set! (-> s5-1 proj-params attack-id) a0-36)
          )
        (set! (-> s5-1 proj-params timeout) (seconds 4))
        (vector+float*! (-> s5-1 proj-params pos) (the-as vector (-> s5-1 mat-1)) (-> s5-1 mat-1 vector 1) 16384.0)
        (vector-float*! (-> s5-1 proj-params vel) (-> s5-1 mat-1 vector 1) 819200.0)
        (spawn-projectile guard-shot (-> s5-1 proj-params) this *default-dead-pool*)
        )
      )
    )
  0
  (none)
  )

;; definition for method 134 of type vehicle-guard
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-134 ((this vehicle-guard) (arg0 process))
  "Stubbed"
  (set! (-> this pursuit-target) (process->handle arg0))
  (logior! (-> this flags) (rigid-body-object-flag alert))
  (vehicle-method-111 this 2 (the-as target arg0))
  0
  (none)
  )

;; definition for method 46 of type vehicle-guard
;; WARN: disable def twice: 112. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod rigid-body-object-method-46 ((this vehicle-guard) (arg0 process-drawable) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('impact-impulse)
     (let ((s5-1 (the-as matrix (-> arg3 param 0))))
       (when (not (logtest? (-> this flags) (rigid-body-object-flag player-driving)))
         (let ((a1-2 (find-offending-process-focusable arg0 (the-as attack-info #f))))
           (when a1-2
             (cond
               ((logtest? (rigid-body-object-flag in-pursuit) (-> this flags))
                (if (= (handle->process (-> this pursuit-target)) a1-2)
                    (set! (-> this flags)
                          (the-as rigid-body-object-flag (logior (rigid-body-object-flag rammed-target) (-> this flags)))
                          )
                    )
                )
               (else
                 (if (and (< (* 49152.0 (-> this info info mass)) (-> s5-1 trans x))
                          (logtest? (-> a1-2 mask) (process-mask target))
                          )
                     (vehicle-method-134 this a1-2)
                     )
                 )
               )
             )
           )
         )
       (rigid-body-object-method-42 this)
       (rigid-body-object-method-45 this (the-as rigid-body-impact s5-1))
       )
     (if (and (-> this next-state) (= (-> this next-state name) 'idle))
         (go (method-of-object this waiting))
         )
     )
    (('track)
     (not (logtest? (-> this flags) (rigid-body-object-flag player-driving)))
     )
    (('alert-begin)
     (when (and (not (focus-test? this dead))
                (not (logtest? (rigid-body-object-flag alert) (-> this flags)))
                (logtest? (rigid-body-object-flag ai-driving) (-> this flags))
                (>= (the-as uint (get-alert-level (-> this controller traffic))) (the-as uint 2))
                )
       (logior! (-> this flags) (rigid-body-object-flag alert))
       (let ((v0-4 (the-as object (process->handle (the-as process (-> arg3 param 0))))))
         (set! (-> this pursuit-target) (the-as handle v0-4))
         v0-4
         )
       )
     )
    (('alert-end)
     (when (not (focus-test? this dead))
       (when (logtest? (rigid-body-object-flag alert) (-> this flags))
         (set! (-> this flags) (the-as
                                 rigid-body-object-flag
                                 (logclear (-> this flags) (rigid-body-object-flag persistent alert in-pursuit))
                                 )
               )
         (speech-control-method-12 *speech-control* this (speech-type speech-type-5))
         (vehicle-method-109 this)
         (go (method-of-object this active))
         )
       )
     )
    (('end-pursuit)
     (when (logtest? (rigid-body-object-flag alert) (-> this flags))
       (set! (-> this flags) (the-as
                               rigid-body-object-flag
                               (logclear (-> this flags) (rigid-body-object-flag persistent alert in-pursuit))
                               )
             )
       (vehicle-method-109 this)
       (go (method-of-object this active))
       )
     )
    (else
      ((method-of-type vehicle rigid-body-object-method-46) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 137 of type vehicle-guard
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-137 ((this vehicle-guard) (arg0 traffic-object-spawn-params))
  (vehicle-rider-spawn this crimson-guard-rider arg0)
  0
  (none)
  )

;; definition for function vehicle-guard-choose-branch
;; INFO: Used lq/sq
(defun vehicle-guard-choose-branch ((arg0 vehicle-controller) (arg1 vehicle-guard))
  (let ((gp-0 (the-as nav-branch #f)))
    (cond
      ((logtest? (rigid-body-object-flag alert) (-> arg1 flags))
       (let ((s5-0 (-> arg0 branch dest-node))
             (s4-0 (new 'stack-no-clear 'inline-array 'vector 5))
             )
         (set! (-> s4-0 4 x) -10000000000000000000000000000000000000.0)
         (set! (-> s4-0 3 quad) (-> arg1 root trans quad))
         (vector-! (-> s4-0 0) (-> s4-0 3) (-> arg1 vehicle-guard-vector0341413))
         (vector-normalize! (-> s4-0 0) 1.0)
         (dotimes (s3-0 (-> s5-0 branch-count))
           (let ((s2-0 (-> s5-0 branch-array s3-0)))
             (when (!= (-> s2-0 dest-node id) #xffff)
               (let ((a1-3 (-> s2-0 dest-node))
                     (v1-11 (-> s4-0 2))
                     )
                 (set! (-> v1-11 quad) (-> a1-3 position quad))
                 (set! (-> v1-11 w) 1.0)
                 )
               (vector-! (-> s4-0 1) (-> s4-0 2) (-> s4-0 3))
               (vector-normalize! (-> s4-0 1) 1.0)
               (let ((f0-3 (vector-dot (-> s4-0 0) (-> s4-0 1))))
                 (when (< (-> s4-0 4 x) f0-3)
                   (set! (-> s4-0 4 x) f0-3)
                   (set! gp-0 s2-0)
                   )
                 )
               )
             )
           )
         )
       )
      (else
        (set! gp-0 (vehicle-controller-method-15 arg0))
        )
      )
    gp-0
    )
  )

;; definition for method 31 of type vehicle-guard
;; WARN: Return type mismatch int vs none.
(defmethod alloc-and-init-rigid-body-control ((this vehicle-guard) (arg0 rigid-body-vehicle-constants))
  (let ((t9-0 (method-of-type vehicle alloc-and-init-rigid-body-control)))
    (t9-0 this arg0)
    )
  (logior! (-> this mask) (process-mask enemy guard))
  (set! (-> this pursuit-target) (the-as handle #f))
  (set! (-> this minimap) #f)
  (set! (-> this lod2) (the-as symbol (-> this draw lod-set lod 2 geo)))
  (set! (-> this controller choose-branch-callback) vehicle-guard-choose-branch)
  0
  (none)
  )

;; definition for method 82 of type vehicle-guard
;; WARN: Return type mismatch traffic-guard-type-settings vs none.
(defmethod vehicle-method-82 ((this vehicle-guard))
  (let ((t9-0 (method-of-type vehicle vehicle-method-82)))
    (t9-0 this)
    )
  (set! (-> this turret guard-settings)
        (get-traffic-guard-type-settings (-> this controller traffic) (the-as int (-> this info guard-type)))
        )
  (none)
  )

;; definition for method 128 of type vehicle-guard
(defmethod vehicle-method-128 ((this vehicle-guard))
  (if (not (-> this minimap))
      (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 14) (the-as int #f) (the-as vector #t) 0))
      )
  ((method-of-type vehicle vehicle-method-128) this)
  (none)
  )

;; definition for method 127 of type vehicle-guard
(defmethod vehicle-method-127 ((this vehicle-guard))
  (when (-> this minimap)
    (logior! (-> this minimap flags) (minimap-flag fade-out))
    (set! (-> this minimap) #f)
    )
  ((method-of-type vehicle vehicle-method-127) this)
  (none)
  )

;; definition for method 129 of type vehicle-guard
(defmethod vehicle-method-129 ((this vehicle-guard))
  (when (-> this minimap)
    (logior! (-> this minimap flags) (minimap-flag fade-out))
    (set! (-> this minimap) #f)
    )
  ((method-of-type vehicle vehicle-method-129) this)
  (none)
  )

;; definition for method 130 of type vehicle-guard
;; WARN: Return type mismatch object vs none.
(defmethod vehicle-method-130 ((this vehicle-guard) (arg0 traffic-object-spawn-params))
  (case (-> arg0 behavior)
    ((9)
     (vehicle-method-128 this)
     (logior! (-> this flags) (rigid-body-object-flag persistent alert))
     (set! (-> this pursuit-target) (-> arg0 handle))
     (go (method-of-object this waiting-ambush))
     )
    (else
      ((method-of-type vehicle vehicle-method-130) this arg0)
      )
    )
  (none)
  )

;; definition for method 157 of type vehicle-guard
(defmethod vehicle-guard-method-157 ((this vehicle-guard) (arg0 vehicle-guard-target-data))
  (local-vars (v1-11 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (and (logtest? (rigid-body-object-flag target-in-sight) (-> this flags))
         (or (and (not (logtest? (focus-status pilot) (-> arg0 target focus-status))) (< (-> arg0 dist) 184320.0))
             (and (< (-> arg0 tpos y) (+ -16384.0 (-> this root trans y)))
                  (begin
                    (.lvf vf1 (&-> (-> arg0 tvel) quad))
                    (.add.w.vf vf2 vf0 vf0 :mask #b1)
                    (.mul.vf vf1 vf1 vf1)
                    (.mul.x.vf acc vf2 vf1 :mask #b1)
                    (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                    (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                    (.mov v1-11 vf1)
                    (let ((f0-2 v1-11)
                          (f1-3 61440.0)
                          )
                      (< f0-2 (* f1-3 f1-3))
                      )
                    )
                  (< (-> arg0 dist) 122880.0)
                  )
             )
         )
    )
  )

;; definition for method 156 of type vehicle-guard
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-156 ((this vehicle-guard))
  (let ((f30-0 (seconds-per-frame)))
    (seek! (-> this controls throttle) 0.0 (* 4.0 f30-0))
    (+! (-> this controls brake) (* (- 1.0 (-> this controls brake)) (fmin 1.0 (* 8.0 f30-0))))
    (let ((s4-0 (-> this rbody state matrix))
          (s3-0 (-> this rbody state matrix vector 2))
          (s5-0 (new 'stack-no-clear 'vector))
          )
      (vector-reset! s5-0)
      (let ((v1-9 (handle->process (-> this pursuit-target)))
            (f28-0 0.0)
            )
        (when (and v1-9 (logtest? (rigid-body-object-flag target-in-sight) (-> this flags)))
          (vector-! s5-0 (-> (the-as process-drawable v1-9) root trans) (-> this root trans))
          (set! (-> s5-0 y) 0.0)
          (vector-normalize! s5-0 1.0)
          (if (< (vector-dot s3-0 s5-0) (cos 2730.6667))
              (set! f28-0 (vector-dot (the-as vector s4-0) s5-0))
              )
          )
        (+! (-> this controls steering) (* (- f28-0 (-> this controls steering)) (fmin 1.0 (* 8.0 f30-0))))
        )
      )
    )
  (when (zero? (-> this flight-level-index))
    (if (logtest? (-> this flags) (rigid-body-object-flag riding))
        (vehicle-method-80 this)
        )
    )
  0
  (none)
  )

;; definition for method 154 of type vehicle-guard
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-154 ((this vehicle-guard))
  (if (not (logtest? (-> this rbody state flags) (rigid-body-flag enable-physics)))
      (rigid-body-object-method-38 this)
      )
  (set! (-> this camera-dist2) (vector-vector-distance-squared (-> this root trans) (camera-pos)))
  (set! (-> this player-dist2) (vector-vector-distance-squared (-> this root trans) (target-pos 0)))
  (vehicle-controller-method-18
    (-> this controller)
    (-> this target-acceleration)
    (-> this root transv)
    this
    (/ 1.0 (seconds-per-frame))
    )
  ((-> this ai-hook) this)
  (vehicle-method-121 this)
  (vehicle-method-106 this)
  (when (not (logtest? (rigid-body-object-flag in-pursuit) (-> this flags)))
    (if (not (logtest? (-> this target-flags) (traffic-target-flag visible-recently)))
        (speech-control-method-12 *speech-control* this (speech-type speech-type-2))
        )
    (go (method-of-object this active))
    )
  0
  (none)
  )

;; definition for method 158 of type vehicle-guard
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-guard-method-158 ((this vehicle-guard))
  (vehicle-guard-method-150 this)
  (let ((s5-0 (new 'stack-no-clear 'vehicle-guard-target-data)))
    (vehicle-guard-method-151 this s5-0)
    (let ((a1-1 (-> s5-0 target)))
      (when a1-1
        (cond
          ((logtest? (rigid-body-object-flag target-in-sight) (-> this flags))
           (vehicle-guard-method-153 this a1-1)
           (speech-control-method-15 *speech-control* this)
           )
          (else
            (if (and (time-elapsed? (-> this target-in-sight-time) (seconds 4)) (< 368640.0 (-> s5-0 dist)))
                (vehicle-method-109 this)
                )
            )
          )
        )
      )
    )
  (if (not (logtest? (rigid-body-object-flag in-pursuit) (-> this flags)))
      (go (method-of-object this active))
      )
  (rigid-body-object-method-42 this)
  (vehicle-method-122 this)
  0
  (none)
  )

;; definition for method 94 of type vehicle-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-94 ((this vehicle-guard))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((v1-0 (new 'stack-no-clear 'camera-free-floating-move-info)))
      (let* ((a0-1 (-> v1-0 tm))
             (t0-0 (-> this rbody state matrix))
             (a1-1 (-> t0-0 quad 0))
             (a2-0 (-> t0-0 quad 1))
             (a3-0 (-> t0-0 quad 2))
             (t0-1 (-> t0-0 trans quad))
             )
        (set! (-> a0-1 quad 0) a1-1)
        (set! (-> a0-1 quad 1) a2-0)
        (set! (-> a0-1 quad 2) a3-0)
        (set! (-> a0-1 trans quad) t0-1)
        )
      (let ((a0-2 (-> v1-0 rv)))
        (let ((a1-3 (-> this rbody state position)))
          (let ((a2-1 (-> v1-0 tm vector 2)))
            (let ((a3-2 163840.0))
              (.mov vf7 a3-2)
              )
            (.lvf vf5 (&-> a2-1 quad))
            )
          (.lvf vf4 (&-> a1-3 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a0-2 quad) vf6)
        )
      (vector-reset! (-> v1-0 up))
      (set! (-> this turret inaccuracy) 0.0)
      (turret-control-method-9 (-> this turret) this (-> v1-0 rv) (-> v1-0 up))
      )
    (when (cpad-hold? 0 r1)
      (when (time-elapsed? (-> this turret shoot-time) (seconds 0.35))
        (set! (-> this turret owner-handle) (process->handle *target*))
        (turret-control-method-17 (-> this turret) this)
        (set! (-> this turret owner-handle) (the-as handle #f))
        )
      )
    ((method-of-type vehicle vehicle-method-94) this)
    0
    (none)
    )
  )

;; failed to figure out what this is:
(defstate active (vehicle-guard)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (let ((v1-0 (-> self controller branch)))
      (when (or (not v1-0) (zero? v1-0))
        (cond
          ((logtest? (-> self draw status) (draw-control-status on-screen))
           (set! (-> self hit-points) 0.0)
           (vehicle-method-76 self 2 (the-as uint 3000))
           (go-virtual crash)
           )
          (else
            (vehicle-method-113 self)
            )
          )
        )
      )
    (let ((t9-3 (-> (method-of-type vehicle active) enter)))
      (if t9-3
          (t9-3)
          )
      )
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (cond
      ((logtest? (rigid-body-object-flag alert) (-> self flags))
       (vehicle-guard-method-150 self)
       (when (logtest? (rigid-body-object-flag in-pursuit) (-> self flags))
         (logior! (-> self flags) (rigid-body-object-flag persistent))
         (go-virtual hostile)
         )
       (speech-control-method-12 *speech-control* self (speech-type speech-type-4))
       (if (or (time-elapsed? (-> self state-time) (seconds 8)) (let ((f0-0 409600.0))
                                                                  (< (* f0-0 f0-0) (-> self player-dist2))
                                                                  )
               )
           (logclear! (-> self flags) (rigid-body-object-flag persistent alert))
           )
       )
      (else
        (speech-control-method-12 *speech-control* self (speech-type speech-type-1))
        )
      )
    (check-player-get-on self)
    (vehicle-method-122 self)
    )
  )

;; failed to figure out what this is:
(defstate hostile (vehicle-guard)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set! (-> self ai-hook) (method-of-object self vehicle-method-93))
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (vehicle-guard-method-150 self)
    (when (logtest? (rigid-body-object-flag in-pursuit) (-> self flags))
      (if (or (time-elapsed? (-> self target-in-sight-time) (seconds 8))
              (and (>= (-> self controller traffic alert-state guards-in-sight-of-target) 2)
                   (time-elapsed? (-> self target-in-sight-time) (seconds 0.5))
                   )
              )
          (vehicle-method-109 self)
          )
      )
    (let ((gp-0 (new 'stack-no-clear 'vehicle-guard-target-data)))
      (vehicle-guard-method-151 self gp-0)
      (let ((a1-1 (-> gp-0 target)))
        (cond
          (a1-1
            (cond
              ((logtest? (rigid-body-object-flag target-in-sight) (-> self flags))
               (vehicle-guard-method-153 self a1-1)
               (if (vehicle-guard-method-157 self gp-0)
                   (go-virtual stop-and-shoot)
                   )
               (speech-control-method-15 *speech-control* self)
               )
              (else
                )
              )
            (vehicle-guard-method-152 self gp-0)
            )
          (else
            (vehicle-method-109 self)
            )
          )
        )
      )
    (if (logtest? (rigid-body-object-flag rammed-target) (-> self flags))
        (go-virtual slow-pursuit)
        )
    (vehicle-guard-method-154 self)
    )
  )

;; failed to figure out what this is:
(defstate stop-and-shoot (vehicle-guard)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set! (-> self ai-hook) (method-of-object self vehicle-guard-method-156))
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (vehicle-guard-method-150 self)
    (let ((s5-0 (new 'stack-no-clear 'vehicle-guard-target-data)))
      (vehicle-guard-method-151 self s5-0)
      (let ((gp-0 (-> s5-0 target)))
        (when gp-0
          (if (not (vehicle-guard-method-157 self s5-0))
              (go-virtual hostile)
              )
          (vehicle-guard-method-153 self gp-0)
          )
        )
      )
    (vehicle-guard-method-154 self)
    )
  )

;; failed to figure out what this is:
(defstate slow-pursuit (vehicle-guard)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self ai-hook) (method-of-object self vehicle-guard-method-156))
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (vehicle-guard-method-150 self)
    (let ((s5-0 (new 'stack-no-clear 'vehicle-guard-target-data)))
      (vehicle-guard-method-151 self s5-0)
      (let ((gp-0 (-> s5-0 target)))
        (when gp-0
          (when (or (< (-> s5-0 attack-range) (-> s5-0 dist))
                    (not (logtest? (rigid-body-object-flag target-in-sight) (-> self flags)))
                    (time-elapsed? (-> self state-time) (seconds 2))
                    )
            (set! (-> self flags)
                  (the-as rigid-body-object-flag (logclear (-> self flags) (rigid-body-object-flag rammed-target)))
                  )
            (go-virtual hostile)
            )
          (vehicle-guard-method-153 self gp-0)
          )
        )
      )
    (vehicle-guard-method-154 self)
    )
  )

;; failed to figure out what this is:
(defstate waiting-ambush (vehicle-guard)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (logior! (-> self flags) (rigid-body-object-flag riding ignition ai-driving))
    (set! (-> self ai-hook) (method-of-object self vehicle-guard-method-156))
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (vehicle-guard-method-150 self)
    (let ((gp-0 (new 'stack-no-clear 'vehicle-guard-target-data)))
      (vehicle-guard-method-151 self gp-0)
      (let ((s5-0 (-> gp-0 target)))
        (when s5-0
          (when (logtest? (rigid-body-object-flag target-in-sight) (-> self flags))
            (vehicle-guard-method-153 self s5-0)
            (vehicle-method-111 self 2 s5-0)
            (if (< (-> gp-0 dist) 122880.0)
                (go-virtual hostile)
                )
            )
          )
        )
      )
    (set! (-> self flags)
          (the-as rigid-body-object-flag (logior (rigid-body-object-flag in-pursuit) (-> self flags)))
          )
    (vehicle-guard-method-154 self)
    )
  )
