;;-*-Lisp-*-
(in-package goal)

;; definition of type citizen
(deftype citizen (nav-enemy)
  ((flags                citizen-flag)
   (traffic-id           int8)
   (hit-by-player-count  int8)
   (gnd-height           float)
   (speed-scale          float)
   (controller           vehicle-controller  :inline)
   (danger-pos           sphere              :inline)
   (vehicle              handle)
   (anim-shuffle         int32)
   (dist-walk-anim       float)
   (speed-walk           float)
   (anim-walk            int32)
   (dist-run-anim        float)
   (speed-run            float)
   (anim-run             int32)
   (water-anim           int32)
   (interp               float)
   (last-danger-time     time-frame)
   (next-time-look-at    time-frame)
   (stop-time-look-at    time-frame)
   (wait-return-state    (state citizen))
   (wait-time            time-frame)
   (cp-valid?            symbol)
   (cp-sphere            sphere              :inline)
   (cp-vec               vector              :inline)
   (cp-next-time         time-frame)
   (cp-exit-time         time-frame)
   (cp-force             vector              :inline)
   (cp-plane             plane               :inline)
   (cp-factor            float)
   )
  (:state-methods
    wait
    inactive
    in-ditch
    )
  (:methods
    (citizen-init! (_type_) none)
    (citizen-nav-init! (_type_) none)
    (go-inactive (_type_) none)
    (find-segment (_type_ vector vector) nav-segment)
    (nav-segment-callback (_type_ vector traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (citizen-method-186 (_type_ nav-segment) none)
    (citizen-method-187 (_type_) symbol)
    (citizen-method-188 (_type_ vector) none)
    (calc-danger-vec (_type_ vector vector) none)
    (citizen-method-190 (_type_ vector) none)
    (gen-clear-path (_type_) nav-segment)
    (citizen-method-192 (_type_) none)
    (throw-off-vehicle (_type_) none)
    (gen-new-dir (_type_ vector float) nav-segment)
    (citizen-method-195 (_type_ vector) symbol)
    (get-run-anim (_type_) int)
    (trigger-alert (_type_ int target) none)
    (decrease-alert (_type_ object) none)
    (set-behavior! (_type_ traffic-object-spawn-params) none)
    (citizen-method-200 (_type_) none)
    )
  )

;; definition for method 3 of type citizen
(defmethod inspect ((this citizen))
  (when (not this)
    (set! this this)
    (goto cfg-26)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Tflags: #x~X : (citizen-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (citizen-flag female)) (citizen-flag female))
        (format #t "female ")
        )
    (if (= (logand s5-0 (citizen-flag knocked-out-car)) (citizen-flag knocked-out-car))
        (format #t "knocked-out-car ")
        )
    (if (= (logand s5-0 (citizen-flag sticky-weapon)) (citizen-flag sticky-weapon))
        (format #t "sticky-weapon ")
        )
    (if (= (logand s5-0 (citizen-flag in-pursuit)) (citizen-flag in-pursuit))
        (format #t "in-pursuit ")
        )
    (if (= (logand s5-0 (citizen-flag dark-guard)) (citizen-flag dark-guard))
        (format #t "dark-guard ")
        )
    (if (= (logand s5-0 (citizen-flag hostile)) (citizen-flag hostile))
        (format #t "hostile ")
        )
    (if (= (logand s5-0 (citizen-flag persistent)) (citizen-flag persistent))
        (format #t "persistent ")
        )
    (if (= (logand s5-0 (citizen-flag shuffle-mode)) (citizen-flag shuffle-mode))
        (format #t "shuffle-mode ")
        )
    (if (= (logand s5-0 (citizen-flag knocked-out-bike)) (citizen-flag knocked-out-bike))
        (format #t "knocked-out-bike ")
        )
    (if (= (logand s5-0 (citizen-flag target-in-sight)) (citizen-flag target-in-sight))
        (format #t "target-in-sight ")
        )
    (if (= (logand s5-0 (citizen-flag run-mode)) (citizen-flag run-mode))
        (format #t "run-mode ")
        )
    )
  (format #t ")~%")
  (format #t "~2Ttraffic-id: ~D~%" (-> this traffic-id))
  (format #t "~2Thit-by-player-count: ~D~%" (-> this hit-by-player-count))
  (format #t "~2Tgnd-height: ~f~%" (-> this gnd-height))
  (format #t "~2Tspeed-scale: ~f~%" (-> this speed-scale))
  (format #t "~2Tcontroller: #<vehicle-controller @ #x~X>~%" (-> this controller))
  (format #t "~2Tdanger-pos: #<sphere @ #x~X>~%" (-> this danger-pos))
  (format #t "~2Tdest-point: #<vector @ #x~X>~%" (-> this controller turn-exit-point))
  (format #t "~2Tvehicle: ~D~%" (-> this vehicle))
  (format #t "~2Tanim-shuffle: ~D~%" (-> this anim-shuffle))
  (format #t "~2Tdist-walk-anim: ~f~%" (-> this dist-walk-anim))
  (format #t "~2Tspeed-walk: ~f~%" (-> this speed-walk))
  (format #t "~2Tanim-walk: ~D~%" (-> this anim-walk))
  (format #t "~2Tdist-run-anim: ~f~%" (-> this dist-run-anim))
  (format #t "~2Tspeed-run: ~f~%" (-> this speed-run))
  (format #t "~2Tanim-run: ~D~%" (-> this anim-run))
  (format #t "~2Twater-anim: ~D~%" (-> this water-anim))
  (format #t "~2Tinterp: ~f~%" (-> this interp))
  (format #t "~2Tlast-danger-time: ~D~%" (-> this last-danger-time))
  (format #t "~2Tnext-time-look-at: ~D~%" (-> this next-time-look-at))
  (format #t "~2Tstop-time-look-at: ~D~%" (-> this stop-time-look-at))
  (format #t "~2Twait-return-state: ~A~%" (-> this wait-return-state))
  (format #t "~2Twait-time: ~D~%" (-> this wait-time))
  (format #t "~2Tcp-valid?: ~A~%" (-> this cp-valid?))
  (format #t "~2Tcp-sphere: #<sphere @ #x~X>~%" (-> this cp-sphere))
  (format #t "~2Tcp-vec: #<vector @ #x~X>~%" (-> this cp-vec))
  (format #t "~2Tcp-next-time: ~D~%" (-> this cp-next-time))
  (format #t "~2Tcp-exit-time: ~D~%" (-> this cp-exit-time))
  (format #t "~2Tcp-force: #<vector @ #x~X>~%" (-> this cp-force))
  (format #t "~2Tcp-plane: #<plane @ #x~X>~%" (-> this cp-plane))
  (format #t "~2Tcp-factor: ~f~%" (-> this cp-factor))
  (label cfg-26)
  this
  )

;; failed to figure out what this is:
0
