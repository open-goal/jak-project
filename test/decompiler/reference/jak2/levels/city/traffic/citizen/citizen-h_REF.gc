;;-*-Lisp-*-
(in-package goal)

;; definition of type citizen
(deftype citizen (nav-enemy)
  ((flags               citizen-flag               :offset-assert 604)
   (traffic-id          int8                       :offset-assert 606)
   (hit-by-player-count int8                       :offset-assert 607)
   (gnd-height          float                      :offset-assert 608)
   (speed-scale         float                      :offset-assert 612)
   (controller          vehicle-controller :inline :offset-assert 624)
   (danger-pos          sphere             :inline :offset-assert 768)
   (vehicle             handle                     :offset-assert 784)
   (anim-shuffle        int32                      :offset-assert 792)
   (dist-walk-anim      float                      :offset-assert 796)
   (speed-walk          float                      :offset-assert 800)
   (anim-walk           int32                      :offset-assert 804)
   (dist-run-anim       float                      :offset-assert 808)
   (speed-run           float                      :offset-assert 812)
   (anim-run            int32                      :offset-assert 816)
   (water-anim          int32                      :offset-assert 820)
   (interp              float                      :offset-assert 824)
   (last-danger-time    time-frame                 :offset-assert 832)
   (next-time-look-at   time-frame                 :offset-assert 840)
   (stop-time-look-at   time-frame                 :offset-assert 848)
   (wait-return-state   (state citizen)            :offset-assert 856)
   (wait-time           time-frame                 :offset-assert 864)
   (cp-valid?           symbol                     :offset-assert 872)
   (cp-sphere           sphere             :inline :offset-assert 880)
   (cp-vec              vector             :inline :offset-assert 896)
   (cp-next-time        time-frame                 :offset-assert 912)
   (cp-exit-time        time-frame                 :offset-assert 920)
   (cp-force            vector             :inline :offset-assert 928)
   (cp-plane            plane              :inline :offset-assert 944)
   (cp-factor           float                      :offset-assert 960)
   )
  :heap-base #x350
  :method-count-assert 201
  :size-assert         #x3c4
  :flag-assert         #xc9035003c4
  (:methods
    (wait () _type_ :state 178)
    (inactive () _type_ :state 179)
    (in-ditch () _type_ :state 180)
    (citizen-init! (_type_) none 181)
    (citizen-nav-init! (_type_) none 182)
    (go-inactive (_type_) none 183)
    (find-segment (_type_ vector vector) nav-segment 184)
    (nav-segment-callback (_type_ vector traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none 185)
    (citizen-method-186 (_type_ nav-segment) none 186)
    (citizen-method-187 (_type_) symbol 187)
    (citizen-method-188 (_type_ vector) none 188)
    (calc-danger-vec (_type_ vector vector) none 189)
    (citizen-method-190 (_type_ vector) none 190)
    (gen-clear-path (_type_) nav-segment 191)
    (citizen-method-192 (_type_) none 192)
    (throw-off-vehicle (_type_) none 193)
    (gen-new-dir (_type_ vector float) nav-segment 194)
    (citizen-method-195 (_type_ vector) symbol 195)
    (get-run-anim (_type_) int 196)
    (trigger-alert (_type_ int target) none 197)
    (decrease-alert (_type_ object) none 198)
    (set-behavior! (_type_ traffic-object-spawn-params) none 199)
    (citizen-method-200 (_type_) none 200)
    )
  )

;; definition for method 3 of type citizen
(defmethod inspect citizen ((this citizen))
  (when (not this)
    (set! this this)
    (goto cfg-26)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Tflags: #x~X : (citizen-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (citizen-flag female)) (citizen-flag female))
        (format #t "female ")
        )
    (if (= (logand s5-0 (citizen-flag knocked-out-car)) (citizen-flag knocked-out-car))
        (format #t "knocked-out-car ")
        )
    (if (= (logand s5-0 (citizen-flag sticky-weapon)) (citizen-flag sticky-weapon))
        (format #t "sticky-weapon ")
        )
    (if (= (logand s5-0 (citizen-flag in-pursuit)) (citizen-flag in-pursuit))
        (format #t "in-pursuit ")
        )
    (if (= (logand s5-0 (citizen-flag dark-guard)) (citizen-flag dark-guard))
        (format #t "dark-guard ")
        )
    (if (= (logand s5-0 (citizen-flag hostile)) (citizen-flag hostile))
        (format #t "hostile ")
        )
    (if (= (logand s5-0 (citizen-flag persistent)) (citizen-flag persistent))
        (format #t "persistent ")
        )
    (if (= (logand s5-0 (citizen-flag shuffle-mode)) (citizen-flag shuffle-mode))
        (format #t "shuffle-mode ")
        )
    (if (= (logand s5-0 (citizen-flag knocked-out-bike)) (citizen-flag knocked-out-bike))
        (format #t "knocked-out-bike ")
        )
    (if (= (logand s5-0 (citizen-flag target-in-sight)) (citizen-flag target-in-sight))
        (format #t "target-in-sight ")
        )
    (if (= (logand s5-0 (citizen-flag run-mode)) (citizen-flag run-mode))
        (format #t "run-mode ")
        )
    )
  (format #t ")~%")
  (format #t "~2Ttraffic-id: ~D~%" (-> this traffic-id))
  (format #t "~2Thit-by-player-count: ~D~%" (-> this hit-by-player-count))
  (format #t "~2Tgnd-height: ~f~%" (-> this gnd-height))
  (format #t "~2Tspeed-scale: ~f~%" (-> this speed-scale))
  (format #t "~2Tcontroller: #<vehicle-controller @ #x~X>~%" (-> this controller))
  (format #t "~2Tdanger-pos: #<sphere @ #x~X>~%" (-> this danger-pos))
  (format #t "~2Tdest-point: #<vector @ #x~X>~%" (-> this controller turn-exit-point))
  (format #t "~2Tvehicle: ~D~%" (-> this vehicle))
  (format #t "~2Tanim-shuffle: ~D~%" (-> this anim-shuffle))
  (format #t "~2Tdist-walk-anim: ~f~%" (-> this dist-walk-anim))
  (format #t "~2Tspeed-walk: ~f~%" (-> this speed-walk))
  (format #t "~2Tanim-walk: ~D~%" (-> this anim-walk))
  (format #t "~2Tdist-run-anim: ~f~%" (-> this dist-run-anim))
  (format #t "~2Tspeed-run: ~f~%" (-> this speed-run))
  (format #t "~2Tanim-run: ~D~%" (-> this anim-run))
  (format #t "~2Twater-anim: ~D~%" (-> this water-anim))
  (format #t "~2Tinterp: ~f~%" (-> this interp))
  (format #t "~2Tlast-danger-time: ~D~%" (-> this last-danger-time))
  (format #t "~2Tnext-time-look-at: ~D~%" (-> this next-time-look-at))
  (format #t "~2Tstop-time-look-at: ~D~%" (-> this stop-time-look-at))
  (format #t "~2Twait-return-state: ~A~%" (-> this wait-return-state))
  (format #t "~2Twait-time: ~D~%" (-> this wait-time))
  (format #t "~2Tcp-valid?: ~A~%" (-> this cp-valid?))
  (format #t "~2Tcp-sphere: #<sphere @ #x~X>~%" (-> this cp-sphere))
  (format #t "~2Tcp-vec: #<vector @ #x~X>~%" (-> this cp-vec))
  (format #t "~2Tcp-next-time: ~D~%" (-> this cp-next-time))
  (format #t "~2Tcp-exit-time: ~D~%" (-> this cp-exit-time))
  (format #t "~2Tcp-force: #<vector @ #x~X>~%" (-> this cp-force))
  (format #t "~2Tcp-plane: #<plane @ #x~X>~%" (-> this cp-plane))
  (format #t "~2Tcp-factor: ~f~%" (-> this cp-factor))
  (label cfg-26)
  this
  )

;; failed to figure out what this is:
0
