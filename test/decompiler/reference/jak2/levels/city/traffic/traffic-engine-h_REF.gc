;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-segment
(deftype nav-segment (structure)
  ((vertex         vector  2 :inline)
   (length         float   :overlay-at (-> vertex 0 data 3))
   (spawn-spacing  float   :offset  28)
   (branch         nav-branch)
   (nav-mesh-id    uint32)
   (id             uint16)
   (cell-id        uint16)
   (from-cell-id   uint16)
   (tracker-id     int8)
   (pad0           int8)
   )
  )

;; definition for method 3 of type nav-segment
(defmethod inspect ((this nav-segment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'nav-segment)
  (format #t "~1Tvertex[2] @ #x~X~%" (-> this vertex))
  (format #t "~1Tlength: ~f~%" (-> this length))
  (format #t "~1Tspawn-spacing: ~f~%" (-> this spawn-spacing))
  (format #t "~1Tbranch: #<nav-branch @ #x~X>~%" (-> this branch))
  (format #t "~1Tnav-mesh-id: ~D~%" (-> this nav-mesh-id))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tcell-id: ~D~%" (-> this cell-id))
  (format #t "~1Tfrom-cell-id: ~D~%" (-> this from-cell-id))
  (format #t "~1Ttracker-id: ~D~%" (-> this tracker-id))
  (format #t "~1Tpad0: ~D~%" (-> this pad0))
  (label cfg-4)
  this
  )

;; definition of type vis-cell
(deftype vis-cell (structure)
  ((sphere                  sphere  :inline)
   (segment-array           (inline-array nav-segment))
   (vis-id                  uint16)
   (id                      uint16)
   (incoming-segment-count  int8)
   (segment-count           int8)
   (flags                   vis-cell-flag)
   (alloc-segment-count     int8    :overlay-at flags)
   (prev-flags              vis-cell-flag)
   (pad0                    uint32  :offset  28)
   )
  (:methods
    (reset-segment-counts (_type_) none)
    (debug-draw (_type_) none)
    )
  )

;; definition for method 3 of type vis-cell
(defmethod inspect ((this vis-cell))
  (when (not this)
    (set! this this)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" this 'vis-cell)
  (format #t "~1Tsphere: #<sphere @ #x~X>~%" (-> this sphere))
  (format #t "~1Tsegment-array: #x~X~%" (-> this segment-array))
  (format #t "~1Tvis-id: ~D~%" (-> this vis-id))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tincoming-segment-count: ~D~%" (-> this incoming-segment-count))
  (format #t "~1Tsegment-count: ~D~%" (-> this segment-count))
  (format #t "~1Tflags: #x~X : (vis-cell-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (vis-cell-flag active-pedestrian)) (vis-cell-flag active-pedestrian))
        (format #t "active-pedestrian ")
        )
    (if (= (logand s5-0 (vis-cell-flag suppress)) (vis-cell-flag suppress))
        (format #t "suppress ")
        )
    (if (= (logand s5-0 (vis-cell-flag active-vehicle)) (vis-cell-flag active-vehicle))
        (format #t "active-vehicle ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tprev-flags: #x~X : (vis-cell-flag " (-> this prev-flags))
  (let ((s5-1 (-> this prev-flags)))
    (if (= (logand s5-1 (vis-cell-flag active-pedestrian)) (vis-cell-flag active-pedestrian))
        (format #t "active-pedestrian ")
        )
    (if (= (logand s5-1 (vis-cell-flag suppress)) (vis-cell-flag suppress))
        (format #t "suppress ")
        )
    (if (= (logand s5-1 (vis-cell-flag active-vehicle)) (vis-cell-flag active-vehicle))
        (format #t "active-vehicle ")
        )
    )
  (format #t ")~%")
  (format #t "~1Talloc-segment-count: ~D~%" (-> this alloc-segment-count))
  (format #t "~1Tpad0: ~D~%" (-> this pad0))
  (label cfg-16)
  this
  )

;; definition of type vis-grid-pos
(deftype vis-grid-pos (structure)
  ((data  int8  3)
   (x     int8  :overlay-at (-> data 0))
   (y     int8  :overlay-at (-> data 1))
   (z     int8  :overlay-at (-> data 2))
   )
  :pack-me
  )

;; definition for method 3 of type vis-grid-pos
(defmethod inspect ((this vis-grid-pos))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vis-grid-pos)
  (format #t "~1Tdata[3] @ #x~X~%" (&-> this x))
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Ty: ~D~%" (-> this y))
  (format #t "~1Tz: ~D~%" (-> this z))
  (label cfg-4)
  this
  )

;; definition of type vis-grid-box
(deftype vis-grid-box (structure)
  ((min  vis-grid-pos  :inline)
   (max  vis-grid-pos  :inline)
   )
  )

;; definition for method 3 of type vis-grid-box
(defmethod inspect ((this vis-grid-box))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vis-grid-box)
  (format #t "~1Tmin: #<vis-grid-pos @ #x~X>~%" (-> this min))
  (format #t "~1Tmax: #<vis-grid-pos @ #x~X>~%" (-> this max))
  (label cfg-4)
  this
  )

;; definition of type vis-ray
(deftype vis-ray (structure)
  ((pos       vector        :inline)
   (dir       vector        :inline)
   (dest-pos  vector        :inline)
   (plane     plane         :inline)
   (grid-pos  vis-grid-pos  :inline)
   (len       float)
   (cell      vis-cell)
   )
  )

;; definition for method 3 of type vis-ray
(defmethod inspect ((this vis-ray))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vis-ray)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tdir: #<vector @ #x~X>~%" (-> this dir))
  (format #t "~1Tdest-pos: #<vector @ #x~X>~%" (-> this dest-pos))
  (format #t "~1Tplane: #<plane @ #x~X>~%" (-> this plane))
  (format #t "~1Tgrid-pos: #<vis-grid-pos @ #x~X>~%" (-> this grid-pos))
  (format #t "~1Tlen: ~f~%" (-> this len))
  (format #t "~1Tcell: #<vis-cell @ #x~X>~%" (-> this cell))
  (label cfg-4)
  this
  )

;; definition of type grid-info
(deftype grid-info (structure)
  ((axis-scale       float         3)
   (dimension-array  int8          3)
   (pad0             uint8         1)
   (box              bounding-box  :inline)
   (cell-size        vector        :inline)
   )
  (:methods
    (setup-grid-from-bounding-box (_type_ (pointer bounding-box) int int) none)
    (lookup-cell-for-point (_type_ vis-grid-pos vector) none)
    (lookup-box-for-sphere (_type_ vis-grid-box vector) none)
    (debug-draw-grid (_type_ rgba) none)
    (debug-draw-cell (_type_ vis-grid-pos rgba) none)
    )
  )

;; definition for method 3 of type grid-info
(defmethod inspect ((this grid-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'grid-info)
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> this axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> this dimension-array))
  (format #t "~1Tpad0[1] @ #x~X~%" (-> this pad0))
  (format #t "~1Tbox: #<bounding-box @ #x~X>~%" (-> this box))
  (format #t "~1Tcell-size: #<vector @ #x~X>~%" (-> this cell-size))
  (label cfg-4)
  this
  )

;; definition of type city-level-info
(deftype city-level-info (structure)
  ((grid-info       grid-info  :inline)
   (cell-array      (inline-array vis-cell))
   (segment-count   int16)
   (cell-count      uint16)
   (segment-array   (inline-array nav-segment))
   (nav-graph       nav-graph)
   (camera-ceiling  meters)
   (pad-array       int8       56)
   )
  (:methods
    (city-level-info-method-9 (_type_) symbol)
    (init-vis-ray (_type_ vis-ray vector vector) none)
    (city-level-info-method-11 (_type_ vis-ray) none)
    (city-level-info-method-12 (_type_ vector nav-branch vector) vector)
    (lookup-cell-by-position (_type_ vector) vis-cell)
    (get-first-cell-in-box (_type_ vis-grid-box) vis-cell)
    (sphere-in-grid? (_type_ vector int) symbol)
    (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (update-suppressions-from-traffic-engine (_type_ traffic-engine) none)
    (city-level-info-method-18 (_type_) none)
    )
  )

;; definition for method 3 of type city-level-info
(defmethod inspect ((this city-level-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'city-level-info)
  (format #t "~1Tgrid-info: #<grid-info @ #x~X>~%" (-> this grid-info))
  (format #t "~1Tcell-array: #x~X~%" (-> this cell-array))
  (format #t "~1Tsegment-count: ~D~%" (-> this segment-count))
  (format #t "~1Tcell-count: ~D~%" (-> this cell-count))
  (format #t "~1Tsegment-array: #x~X~%" (-> this segment-array))
  (format #t "~1Tnav-graph: ~A~%" (-> this nav-graph))
  (format #t "~1Tcamera-ceiling: (meters ~m)~%" (-> this camera-ceiling))
  (format #t "~1Tpad-array[56] @ #x~X~%" (-> this pad-array))
  (label cfg-4)
  this
  )

;; definition of type traffic-level-data
(deftype traffic-level-data (structure)
  ((city-info                city-level-info)
   (active-cell-count        uint8)
   (newly-active-cell-count  uint8)
   (active-cell-list         vis-cell      255)
   (newly-active-cell-list   vis-cell      255)
   (active-cell-box          bounding-box  :inline)
   )
  (:methods
    (reset (_type_) none)
    (add-active-cell (_type_ vis-cell) none)
    (remove-active-cell (_type_ int) none)
    (add-newly-active-cell (_type_ vis-cell) none)
    (per-frame-cell-update (_type_) none)
    (debug-draw (_type_) none)
    )
  )

;; definition for method 3 of type traffic-level-data
(defmethod inspect ((this traffic-level-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-level-data)
  (format #t "~1Tcity-info: #<city-level-info @ #x~X>~%" (-> this city-info))
  (format #t "~1Tactive-cell-count: ~D~%" (-> this active-cell-count))
  (format #t "~1Tnewly-active-cell-count: ~D~%" (-> this newly-active-cell-count))
  (format #t "~1Tactive-cell-list[255] @ #x~X~%" (-> this active-cell-list))
  (format #t "~1Tnewly-active-cell-list[255] @ #x~X~%" (-> this newly-active-cell-list))
  (format #t "~1Tactive-cell-box: #<bounding-box @ #x~X>~%" (-> this active-cell-box))
  (label cfg-4)
  this
  )

;; definition of type traffic-suppression-box
(deftype traffic-suppression-box (structure)
  ((data      uint8                          32)
   (bbox      bounding-box                   :inline :overlay-at (-> data 0))
   (flags     traffic-suppression-box-flags          :overlay-at (-> data 12))
   (duration  uint32                                 :overlay-at (-> data 28))
   )
  )

;; definition for method 3 of type traffic-suppression-box
(defmethod inspect ((this traffic-suppression-box))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-suppression-box)
  (format #t "~1Tdata[32] @ #x~X~%" (-> this bbox))
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> this bbox))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tduration: ~D~%" (-> this duration))
  (label cfg-4)
  this
  )

;; definition of type traffic-guard-type-info
(deftype traffic-guard-type-info (structure)
  ((object-type       traffic-type)
   (max-target-count  int8)
   (min-target-count  int8)
   (target-count      int8)
   (count             int8)
   (change-to-type    uint8)
   )
  )

;; definition for method 3 of type traffic-guard-type-info
(defmethod inspect ((this traffic-guard-type-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-guard-type-info)
  (format #t "~1Tobject-type: ~D~%" (-> this object-type))
  (format #t "~1Tmax-target-count: ~D~%" (-> this max-target-count))
  (format #t "~1Tmin-target-count: ~D~%" (-> this min-target-count))
  (format #t "~1Ttarget-count: ~D~%" (-> this target-count))
  (format #t "~1Tcount: ~D~%" (-> this count))
  (format #t "~1Tchange-to-type: ~D~%" (-> this change-to-type))
  (label cfg-4)
  this
  )

;; definition of type traffic-guard-type-settings
(deftype traffic-guard-type-settings (structure)
  ((target-count     int8)
   (inaccuracy       float)
   (acquire-delay    uint16)
   (shot-delay       uint16)
   (burst-delay      uint16)
   (shot-count       int8)
   (rand-shot-count  int8)
   )
  )

;; definition for method 3 of type traffic-guard-type-settings
(defmethod inspect ((this traffic-guard-type-settings))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-guard-type-settings)
  (format #t "~1Ttarget-count: ~D~%" (-> this target-count))
  (format #t "~1Tinaccuracy: ~f~%" (-> this inaccuracy))
  (format #t "~1Tacquire-delay: ~D~%" (-> this acquire-delay))
  (format #t "~1Tshot-delay: ~D~%" (-> this shot-delay))
  (format #t "~1Tburst-delay: ~D~%" (-> this burst-delay))
  (format #t "~1Tshot-count: ~D~%" (-> this shot-count))
  (format #t "~1Trand-shot-count: ~D~%" (-> this rand-shot-count))
  (label cfg-4)
  this
  )

;; definition of type traffic-alert-state-settings
(deftype traffic-alert-state-settings (structure)
  ((guard-settings-array  traffic-guard-type-settings  6 :inline)
   (ped-tazer             traffic-guard-type-settings  :inline :overlay-at (-> guard-settings-array 0))
   (ped-rifle             traffic-guard-type-settings  :inline :overlay-at (-> guard-settings-array 1))
   (ped-grenade           traffic-guard-type-settings  :inline :overlay-at (-> guard-settings-array 2))
   (ped-roboguard         traffic-guard-type-settings  :inline :overlay-at (-> guard-settings-array 3))
   (bike-turret           traffic-guard-type-settings  :inline :overlay-at (-> guard-settings-array 4))
   (hellcat-turret        traffic-guard-type-settings  :inline :overlay-at (-> guard-settings-array 5))
   )
  )

;; definition for method 3 of type traffic-alert-state-settings
(defmethod inspect ((this traffic-alert-state-settings))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-alert-state-settings)
  (format #t "~1Tguard-settings-array[6] @ #x~X~%" (-> this ped-tazer))
  (format #t "~1Tped-tazer: #<traffic-guard-type-settings @ #x~X>~%" (-> this ped-tazer))
  (format #t "~1Tped-rifle: #<traffic-guard-type-settings @ #x~X>~%" (-> this ped-rifle))
  (format #t "~1Tped-grenade: #<traffic-guard-type-settings @ #x~X>~%" (-> this ped-grenade))
  (format #t "~1Tped-roboguard: #<traffic-guard-type-settings @ #x~X>~%" (-> this ped-roboguard))
  (format #t "~1Tbike-turret: #<traffic-guard-type-settings @ #x~X>~%" (-> this bike-turret))
  (format #t "~1Thellcat-turret: #<traffic-guard-type-settings @ #x~X>~%" (-> this hellcat-turret))
  (label cfg-4)
  this
  )

;; definition of type traffic-target-status
(deftype traffic-target-status (structure)
  ((flags           traffic-target-flag)
   (handle          handle)
   (last-seen-time  time-frame)
   (position        vector  :inline)
   (velocity        vector  :inline)
   (move-position   vector  :inline)
   )
  )

;; definition for method 3 of type traffic-target-status
(defmethod inspect ((this traffic-target-status))
  (when (not this)
    (set! this this)
    (goto cfg-14)
    )
  (format #t "[~8x] ~A~%" this 'traffic-target-status)
  (format #t "~1Tflags: #x~X : (traffic-target-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (traffic-target-flag visible-now)) (traffic-target-flag visible-now))
        (format #t "visible-now ")
        )
    (if (= (logand s5-0 (traffic-target-flag visible-ever)) (traffic-target-flag visible-ever))
        (format #t "visible-ever ")
        )
    (if (= (logand s5-0 (traffic-target-flag force-visible)) (traffic-target-flag force-visible))
        (format #t "force-visible ")
        )
    (if (= (logand s5-0 (traffic-target-flag visible-recently)) (traffic-target-flag visible-recently))
        (format #t "visible-recently ")
        )
    (if (= (logand s5-0 (traffic-target-flag updated)) (traffic-target-flag updated))
        (format #t "updated ")
        )
    )
  (format #t ")~%")
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tlast-seen-time: ~D~%" (-> this last-seen-time))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Tmove-position: #<vector @ #x~X>~%" (-> this move-position))
  (label cfg-14)
  this
  )

;; definition of type traffic-alert-state
(deftype traffic-alert-state (structure)
  ((flags                             traffic-alert-flag)
   (level                             uint8)
   (max-level                         uint8)
   (guards-in-sight-of-target         int8)
   (guard-aim-count                   int8)
   (guard-inaccuracy-factor           float)
   (guard-target-level                float)
   (duration                          uint32)
   (start-time                        time-frame)
   (notify-time                       time-frame)
   (alarm-sound-id                    sound-id)
   (target-status-array               traffic-target-status         3 :inline)
   (settings                          traffic-alert-state-settings  :inline)
   (guard-type-info-array             traffic-guard-type-info       6 :inline)
   (guard-type-mask-from-object-type  uint32                        126)
   )
  (:methods
    (reset (_type_) none)
    )
  )

;; definition for method 3 of type traffic-alert-state
(defmethod inspect ((this traffic-alert-state))
  (when (not this)
    (set! this this)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" this 'traffic-alert-state)
  (format #t "~1Tflags: #x~X : (traffic-alert-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (traffic-alert-flag disable-pursuit-control)) (traffic-alert-flag disable-pursuit-control))
        (format #t "disable-pursuit-control ")
        )
    (if (= (logand s5-0 (traffic-alert-flag sticky-guard-settings)) (traffic-alert-flag sticky-guard-settings))
        (format #t "sticky-guard-settings ")
        )
    (if (= (logand s5-0 (traffic-alert-flag alarm-on)) (traffic-alert-flag alarm-on))
        (format #t "alarm-on ")
        )
    (if (= (logand s5-0 (traffic-alert-flag alert-ending)) (traffic-alert-flag alert-ending))
        (format #t "alert-ending ")
        )
    (if (= (logand s5-0 (traffic-alert-flag target-jak)) (traffic-alert-flag target-jak))
        (format #t "target-jak ")
        )
    (if (= (logand s5-0 (traffic-alert-flag guard-multi-focus)) (traffic-alert-flag guard-multi-focus))
        (format #t "guard-multi-focus ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tlevel: ~D~%" (-> this level))
  (format #t "~1Tmax-level: ~D~%" (-> this max-level))
  (format #t "~1Tguards-in-sight-of-target: ~D~%" (-> this guards-in-sight-of-target))
  (format #t "~1Tguard-aim-count: ~D~%" (-> this guard-aim-count))
  (format #t "~1Tguard-inaccuracy-factor: ~f~%" (-> this guard-inaccuracy-factor))
  (format #t "~1Tguard-target-level: ~f~%" (-> this guard-target-level))
  (format #t "~1Tduration: ~D~%" (-> this duration))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Tnotify-time: ~D~%" (-> this notify-time))
  (format #t "~1Talarm-sound-id: ~D~%" (-> this alarm-sound-id))
  (format #t "~1Ttarget-status-array[3] @ #x~X~%" (-> this target-status-array))
  (format #t "~1Tsettings: #<traffic-alert-state-settings @ #x~X>~%" (-> this settings))
  (format #t "~1Tguard-type-info-array[6] @ #x~X~%" (-> this guard-type-info-array))
  (format #t "~1Tguard-type-mask-from-object-type[126] @ #x~X~%" (-> this guard-type-mask-from-object-type))
  (label cfg-16)
  this
  )

;; definition of type traffic-object-type-info
(deftype traffic-object-type-info (structure)
  ((flags              traffic-type-flags)
   (target-count       int8)
   (active-count       int8)
   (inactive-count     int8)
   (reserve-count      uint16)
   (killed-count       uint16)
   (want-count         int8)
   (tracker-index      uint8)
   (parking-spot-prob  uint8)
   (guard-type         uint8)
   (array              (pointer handle))
   (level              symbol)
   )
  )

;; definition for method 3 of type traffic-object-type-info
(defmethod inspect ((this traffic-object-type-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-object-type-info)
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttarget-count: ~D~%" (-> this target-count))
  (format #t "~1Tactive-count: ~D~%" (-> this active-count))
  (format #t "~1Tinactive-count: ~D~%" (-> this inactive-count))
  (format #t "~1Treserve-count: ~D~%" (-> this reserve-count))
  (format #t "~1Tkilled-count: ~D~%" (-> this killed-count))
  (format #t "~1Twant-count: ~D~%" (-> this want-count))
  (format #t "~1Ttracker-index: ~D~%" (-> this tracker-index))
  (format #t "~1Tparking-spot-prob: ~D~%" (-> this parking-spot-prob))
  (format #t "~1Tguard-type: ~D~%" (-> this guard-type))
  (format #t "~1Tarray: #x~X~%" (-> this array))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (label cfg-4)
  this
  )

;; definition of type traffic-suppressor
(deftype traffic-suppressor (structure)
  ((flags  traffic-suppression-flags)
   (bbox   bounding-box             :inline)
   (array  traffic-suppression-box  16 :inline)
   )
  (:methods
    (reset-boxes (_type_) none)
    (add-new-supression-box (_type_ traffic-suppression-params) none)
    (remove-box-by-id (_type_ int) none)
    (update-box-from-params (_type_ traffic-suppression-params) none)
    (debug-draw (_type_) none)
    )
  )

;; definition for method 3 of type traffic-suppressor
(defmethod inspect ((this traffic-suppressor))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-suppressor)
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> this bbox))
  (format #t "~1Tarray[16] @ #x~X~%" (-> this array))
  (label cfg-4)
  this
  )

;; definition of type traffic-tracker
(deftype traffic-tracker (structure)
  ((traffic                  traffic-engine)
   (object-hash              spatial-hash)
   (rand                     float)
   (id                       uint8)
   (active-object-count      uint8)
   (inactive-object-count    int8)
   (active-object-list       handle        126)
   (active-object-type-list  traffic-type  126)
   )
  (:methods
    (traffic-tracker-method-9 (_type_) none)
    (traffic-tracker-method-10 (_type_) none)
    (traffic-tracker-method-11 (_type_) none)
    (add-active-process (_type_ traffic-type handle) none)
    (remove-active-process (_type_ int) handle)
    (add-reserved-process (_type_ traffic-type handle) none)
    (get-from-inactive-by-type (_type_ traffic-type) handle)
    (get-from-inactive-by-handle (_type_ traffic-type handle) handle)
    (deactivate-object (_type_ int symbol) none)
    (set-process-to-killed (_type_ process) none)
    (deactivate-all (_type_ symbol) none)
    (deactivate-all-of-type (_type_ traffic-type symbol) none)
    (activate-from-params (_type_ traffic-object-spawn-params) none)
    (activate-by-type (_type_ traffic-type nav-segment float) none)
    (activate-by-handle (_type_ traffic-object-spawn-params) none)
    (reset (_type_ uint traffic-engine) none)
    (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none)
    (for-all-active-processes-of-type (_type_ traffic-type (function process-focusable traffic-object-type-info none)) none)
    )
  )

;; definition for method 3 of type traffic-tracker
(defmethod inspect ((this traffic-tracker))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-tracker)
  (format #t "~1Ttraffic: ~A~%" (-> this traffic))
  (format #t "~1Tobject-hash: ~A~%" (-> this object-hash))
  (format #t "~1Trand: ~f~%" (-> this rand))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tactive-object-count: ~D~%" (-> this active-object-count))
  (format #t "~1Tinactive-object-count: ~D~%" (-> this inactive-object-count))
  (format #t "~1Tactive-object-list[126] @ #x~X~%" (-> this active-object-list))
  (format #t "~1Tactive-object-type-list[126] @ #x~X~%" (-> this active-object-type-list))
  (label cfg-4)
  this
  )

;; definition of type traffic-engine
(deftype traffic-engine (basic)
  ((object-hash             spatial-hash)
   (manager                 handle)
   (inv-density-factor      float)
   (sync-clock              uint8)
   (sync-mask-8             uint8)
   (sync-mask-16            uint16)
   (sync-mask-32            uint32)
   (sync-array              uint8                     4)
   (flags                   uint8)
   (alert-state             traffic-alert-state       :inline)
   (level-data-array        traffic-level-data        2 :inline)
   (object-type-info-array  traffic-object-type-info  21 :inline)
   (tracker-array           traffic-tracker           2 :inline)
   (citizen-tracker-array   traffic-tracker           :inline :overlay-at (-> tracker-array 0))
   (vehicle-tracker-array   traffic-tracker           :inline :offset 7024)
   (inactive-object-array   handle                    420)
   (suppressor              traffic-suppressor        :inline)
   (danger-sphere-count     int8)
   (pad                     int8                      15)
   (danger-sphere-array     traffic-danger-info       4 :inline)
   )
  (:methods
    (new (symbol type) _type_)
    (update-traffic (_type_) none)
    (reset-and-init-from-manager (_type_ process) none)
    (stop-alarm-sound (_type_) none)
    (debug-unused (_type_) none)
    (add-object (_type_ traffic-type process) none)
    (sphere-in-loaded-city-infos? (_type_ vector int) symbol)
    (activate-one-citizen (_type_ nav-segment float) none)
    (activate-one-vehicle (_type_ nav-segment float) none)
    (can-dest-be-used? (_type_ nav-branch) symbol)
    (child-killed (_type_ process) none)
    (deactivate-all-from-level (_type_ symbol) none)
    (find-best-segment (_type_ vector vector int) nav-segment)
    (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none)
    (add-danger (_type_ traffic-danger-info) none)
    (guard-count (_type_) int)
    (set-target-level (_type_ float) none)
    (set-guard-target-level (_type_ float) none)
    (deactivate-all (_type_) none)
    (deactivate-by-type (_type_ traffic-type) none)
    (maybe-increase-guard-aim-count (_type_) symbol)
    (restore-default-settings (_type_) none)
    (increase-alert-level (_type_ int target) none)
    (decrease-alert-level (_type_ int) none)
    (set-alert-level (_type_ int) none)
    (set-max-alert-level (_type_ int) none)
    (set-alert-duration (_type_ time-frame) none)
    (get-alert-level (_type_) int)
    (get-target (_type_) target)
    (set-object-target-level (_type_ int float) none)
    (set-object-target-count (_type_ int int) none)
    (set-object-reserve-count (_type_ int uint) none)
    (get-object-reserve-count (_type_ int) int)
    (get-object-remaining-count (_type_ int) int)
    (activate-object (_type_ traffic-object-spawn-params) none)
    (activate-by-handle (_type_ traffic-object-spawn-params) none)
    (set-parking-spot-prob (_type_ int float) none)
    (get-random-parking-spot-type (_type_) traffic-type)
    (new-suppression-box (_type_ traffic-suppression-params) none)
    (remove-suppression-box (_type_ traffic-suppression-params) none)
    (update-suppression-box (_type_ traffic-suppression-params) none)
    (traffic-engine-method-49 (_type_ vector int traffic-target-status) traffic-target-status)
    (find-closest-to-with-collide-lists (_type_ process-drawable collide-spec) process-focusable)
    (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none)
    (send-alert-events (_type_) none)
    (end-pursuit-by-type (_type_ traffic-type) none)
    (get-traffic-guard-type-settings (_type_ int) traffic-guard-type-settings)
    (get-guard-type-for-traffic-obj (_type_ int) uint)
    (get-traffic-guard-change-to-type (_type_ int) uint)
    (set-guard-target-count-range (_type_ int int int) none)
    (set-object-auto-activate (_type_ int object) none)
    (debug-check-proc-in-tracker (_type_ process int) none)
    (kill-traffic-sphere (_type_ sphere) none)
    (level-link (_type_ level) none)
    (level-unlink (_type_ level) none)
    (traffic-engine-method-63 (_type_) none)
    (traffic-engine-method-64 (_type_) none)
    (handle-new-vis-cell (_type_ vis-cell) none)
    (update-sync-from-frame-counter (_type_) none)
    (update-guards (_type_) none)
    (update-traffic-amount (_type_) none)
    (update-danger (_type_) none)
    (update-danger-from-target (_type_) none)
    (update-alert-state (_type_) none)
    (update-suppressor (_type_) none)
    (recompute-supressions (_type_) none)
    )
  )

;; definition for method 3 of type traffic-engine
(defmethod inspect ((this traffic-engine))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tobject-hash: ~A~%" (-> this object-hash))
  (format #t "~1Tmanager: ~D~%" (-> this manager))
  (format #t "~1Tinv-density-factor: ~f~%" (-> this inv-density-factor))
  (format #t "~1Tsync-clock: ~D~%" (-> this sync-clock))
  (format #t "~1Tsync-mask-8: ~D~%" (-> this sync-mask-8))
  (format #t "~1Tsync-mask-16: ~D~%" (-> this sync-mask-16))
  (format #t "~1Tsync-mask-32: ~D~%" (-> this sync-mask-32))
  (format #t "~1Tsync-array[4] @ #x~X~%" (-> this sync-array))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Talert-state: #<traffic-alert-state @ #x~X>~%" (-> this alert-state))
  (format #t "~1Tlevel-data-array[2] @ #x~X~%" (-> this level-data-array))
  (format #t "~1Tobject-type-info-array[21] @ #x~X~%" (-> this object-type-info-array))
  (format #t "~1Ttracker-array[2] @ #x~X~%" (-> this citizen-tracker-array))
  (format #t "~1Tinactive-object-array[420] @ #x~X~%" (-> this inactive-object-array))
  (format #t "~1Tsuppressor: #<traffic-suppressor @ #x~X>~%" (-> this suppressor))
  (format #t "~1Tdanger-sphere-count: ~D~%" (-> this danger-sphere-count))
  (format #t "~1Tdanger-sphere-array[4] @ #x~X~%" (-> this danger-sphere-array))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
