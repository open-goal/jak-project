;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-branch
(deftype nav-branch (structure)
  ((node               nav-node  2)
   (src-node           nav-node  :overlay-at (-> node 0))
   (dest-node          nav-node  :overlay-at (-> node 1))
   (temp-dest-node-id  int32     :overlay-at (-> node 1))
   (speed-limit        uint8)
   (density            uint8)
   (clock-type         nav-branch-clock-type)
   (clock-mask         nav-branch-clock-mask)
   (max-user-count     uint8)
   (user-count         uint8)
   (width              uint8)
   (flags              nav-branch-flags)
   )
  (:methods
    (set-default-density-speed-and-width (_type_) none)
    (debug-print (_type_ object int) none)
    (get-density (_type_) float)
    (get-speed-limit (_type_) float)
    (get-width (_type_) float)
    (user-limit-reached? (_type_) symbol)
    (dest-node-id-at-max? (_type_) symbol)
    (set-density (_type_ float) none)
    (set-speed-limit (_type_ float) none)
    (set-width (_type_ float) none)
    (set-src-node (_type_ nav-node) none)
    (set-dst-node (_type_ nav-node) none)
    )
  )

;; definition for method 3 of type nav-branch
(defmethod inspect ((this nav-branch))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'nav-branch)
  (format #t "~1Tnode[2] @ #x~X~%" (-> this node))
  (format #t "~1Tsrc-node: ~A~%" (-> this src-node))
  (format #t "~1Tdest-node: ~A~%" (-> this dest-node))
  (format #t "~1Ttemp-dest-node-id: ~D~%" (-> this dest-node))
  (format #t "~1Tspeed-limit: ~D~%" (-> this speed-limit))
  (format #t "~1Tdensity: ~D~%" (-> this density))
  (format #t "~1Tclock-type: ~D~%" (-> this clock-type))
  (format #t "~1Tclock-mask: ~D~%" (-> this clock-mask))
  (format #t "~1Tmax-user-count: ~D~%" (-> this max-user-count))
  (format #t "~1Tuser-count: ~D~%" (-> this user-count))
  (format #t "~1Twidth: ~D~%" (-> this width))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type nav-node
(deftype nav-node (structure)
  ((data          uint32                     8)
   (position      vector                     :inline :overlay-at (-> data 0))
   (pos-x         float                              :overlay-at (-> data 0))
   (pos-y         float                              :overlay-at (-> data 1))
   (pos-z         float                              :overlay-at (-> data 2))
   (angle         uint16                             :overlay-at (-> data 3))
   (id            uint16                             :offset  14)
   (radius        uint8                              :overlay-at (-> data 4))
   (branch-count  int8                               :offset  17)
   (flags         nav-node-flag-byte                 :offset  18)
   (pad0          int8                       1       :offset  19)
   (branch-array  (inline-array nav-branch)          :overlay-at (-> data 5))
   (nav-mesh-id   uint32                             :overlay-at (-> data 6))
   (level         symbol                             :overlay-at (-> data 7))
   )
  (:methods
    (debug-draw (_type_) none)
    (debug-print (_type_ symbol string) none)
    (remove-branch-by-idx (_type_ int) none)
    (init-from-pt-and-heading (_type_ vector vector) none)
    (set-pos-xyz (_type_ vector) none)
    (set-angle-from-heading (_type_ vector) none)
    (set-id-and-link-branches-back (_type_ uint) none)
    (set-radius (_type_ float) none)
    (set-angle (_type_ float) none)
    (get-position (_type_ vector) vector)
    (calc-sine-and-cosine! (_type_ vector) vector)
    (get-angle (_type_) float)
    (get-radius (_type_) float)
    )
  )

;; definition for method 3 of type nav-node
(defmethod inspect ((this nav-node))
  (when (not this)
    (set! this this)
    (goto cfg-14)
    )
  (format #t "[~8x] ~A~%" this 'nav-node)
  (format #t "~1Tdata[32] @ #x~X~%" (-> this position))
  (format #t "~1Tposition: ~`vector`P~%" (-> this position))
  (format #t "~1Tpos-x: ~f~%" (-> this position x))
  (format #t "~1Tpos-y: ~f~%" (-> this position y))
  (format #t "~1Tpos-z: ~f~%" (-> this position z))
  (format #t "~1Tangle: ~D~%" (-> this angle))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tradius: ~D~%" (-> this radius))
  (format #t "~1Tbranch-count: ~D~%" (-> this branch-count))
  (format #t "~1Tflags: #x~X : (nav-node-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (nav-node-flag-byte blocked)) (nav-node-flag-byte blocked))
        (format #t "blocked ")
        )
    (if (= (logand s5-0 (nav-node-flag-byte selected)) (nav-node-flag-byte selected))
        (format #t "selected ")
        )
    (if (= (logand s5-0 (nav-node-flag-byte pedestrian)) (nav-node-flag-byte pedestrian))
        (format #t "pedestrian ")
        )
    (if (= (logand s5-0 (nav-node-flag-byte visited)) (nav-node-flag-byte visited))
        (format #t "visited ")
        )
    (if (= (logand s5-0 (nav-node-flag-byte hidden)) (nav-node-flag-byte hidden))
        (format #t "hidden ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tpad0[1] @ #x~X~%" (-> this pad0))
  (format #t "~1Tbranch-array: #x~X~%" (-> this branch-array))
  (format #t "~1Tnav-mesh-id: ~D~%" (-> this nav-mesh-id))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (label cfg-14)
  this
  )

;; definition for method 11 of type nav-branch
(defmethod get-density ((this nav-branch))
  "TODO
@returns `density * 0.0078125` - is this some kind of trick?"
  (* 0.0078125 (the float (-> this density)))
  )

;; definition for method 12 of type nav-branch
(defmethod get-speed-limit ((this nav-branch))
  "TODO
@returns `speed-limit * 1024.0`"
  (* 1024.0 (the float (-> this speed-limit)))
  )

;; definition for method 13 of type nav-branch
(defmethod get-width ((this nav-branch))
  "TODO
@returns `width * 256.0`"
  (* 256.0 (the float (-> this width)))
  )

;; definition for method 14 of type nav-branch
(defmethod user-limit-reached? ((this nav-branch))
  (>= (-> this user-count) (-> this max-user-count))
  )

;; definition for method 15 of type nav-branch
(defmethod dest-node-id-at-max? ((this nav-branch))
  "@returns if `dest-node`'s `id` is equal to `#FFFF`
@see [[nav-node]]"
  (!= (-> this dest-node id) #xffff)
  )

;; definition for method 21 of type nav-node
(defmethod get-radius ((this nav-node))
  "TODO
@returns `radius * 1024.0"
  (* 1024.0 (the float (-> this radius)))
  )

;; definition for method 20 of type nav-node
(defmethod get-angle ((this nav-node))
  (the float (-> this angle))
  )

;; definition for method 19 of type nav-node
(defmethod calc-sine-and-cosine! ((this nav-node) (ret vector))
  "Computes the sine and cosine of the `angle`.
@param! ret The result <cosine, 0.0, -(sine), 1.0>
@returns Nothing, the result will be in `ret`"
  (let ((angle (the float (-> this angle)))
        (sin-cos-result (new 'stack-no-clear 'vector))
        )
    (sincos! sin-cos-result angle)
    (set! (-> ret x) (-> sin-cos-result y))
    (set! (-> ret y) 0.0)
    (set! (-> ret z) (- (-> sin-cos-result x)))
    )
  (set! (-> ret w) 1.0)
  ret
  )

;; definition for method 18 of type nav-node
;; INFO: Used lq/sq
(defmethod get-position ((this nav-node) (ret vector))
  "@param! ret The [[vector]] that is modified to hold the result
@returns the `position` [[vector]] with a `w` component of `1.0`"
  (set! (-> ret quad) (-> this position quad))
  (set! (-> ret w) 1.0)
  ret
  )

;; definition of type nav-graph-link
(deftype nav-graph-link (structure)
  ((id             uint32)
   (dest-graph-id  uint32)
   (src-branch-id  uint16)
   (dest-node-id   uint16)
   (dest-graph     basic)
   (dummy-node     nav-node  :inline)
   )
  )

;; definition for method 3 of type nav-graph-link
(defmethod inspect ((this nav-graph-link))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'nav-graph-link)
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tdest-graph-id: ~D~%" (-> this dest-graph-id))
  (format #t "~1Tsrc-branch-id: ~D~%" (-> this src-branch-id))
  (format #t "~1Tdest-node-id: ~D~%" (-> this dest-node-id))
  (format #t "~1Tdest-graph: ~A~%" (-> this dest-graph))
  (format #t "~1Tdummy-node: #<nav-node @ #x~X>~%" (-> this dummy-node))
  (label cfg-4)
  this
  )

;; definition of type nav-graph
(deftype nav-graph (basic)
  ((node-count    int16)
   (branch-count  int16)
   (node-array    (inline-array nav-node))
   (branch-array  (inline-array nav-branch))
   (link-count    int16)
   (pad2          uint16)
   (link-array    (inline-array nav-graph-link))
   (first-node    int16)
   (pad0          uint16)
   (patched       symbol)
   (id            uint32)
   (pad1          uint32  6)
   )
  (:methods
    (new (symbol type int int int uint) _type_)
    (debug-draw-nodes (_type_) none)
    (nav-graph-method-10 (_type_ vector int) none)
    (nav-graph-method-11 (_type_) none)
    (nav-graph-method-12 (_type_) none)
    (nav-graph-method-13 (_type_ int int) none)
    (nav-graph-method-14 (_type_ int int) none)
    (debug-reset (_type_) none)
    (debug-add-node (_type_ int) nav-node)
    (debug-link-node-to-graph (_type_ nav-node) none)
    (debug-reset-branch-array (_type_ nav-node int) none)
    (nav-graph-method-19 (_type_ int int int int int int) none)
    (nav-graph-method-20 (_type_ int int) none)
    (move-selected-to-height-map-height (_type_) none)
    (select-nodes-in-range (_type_ int int) none)
    (deselect-nodes-in-range (_type_ int int) none)
    (toggle-select-nodes-in-range (_type_ int int) none)
    (select-nodes-in-level (_type_ symbol symbol) none)
    (select-nodes-by-nav-mesh-id (_type_ int symbol) none)
    (select-nodes-by-flags (_type_ nav-node-flag-byte nav-node-flag-byte symbol) none)
    (print-selected-nodes (_type_) none)
    (assign-selected-nodes-to-level (_type_ symbol) none)
    (assign-selected-nodes-to-nav-mesh (_type_ uint) none)
    (set-radius-of-selected-nodes (_type_ float) none)
    (set-speed-limit-of-selected (_type_ float) none)
    (set-density-of-selected (_type_ float) none)
    (set-width-of-selected (_type_ float) none)
    (or-flags-of-selected-nodes (_type_ nav-node-flag-byte) none)
    (and-flags-of-selected-nodes (_type_ nav-node-flag-byte) none)
    (offset-pos-of-selected (_type_ vector) none)
    (nav-graph-method-38 (_type_) none)
    (nav-graph-method-39 (_type_) none)
    (nav-graph-method-40 (_type_ int) int)
    (node-at-idx (_type_ int) nav-node)
    (patch-nodes (_type_) none)
    (copy-to-mysql-graph (_type_ mysql-nav-graph string) none)
    (from-editor (_type_ mysql-nav-graph symbol) none)
    )
  )

;; definition for method 3 of type nav-graph
(defmethod inspect ((this nav-graph))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnode-count: ~D~%" (-> this node-count))
  (format #t "~1Tbranch-count: ~D~%" (-> this branch-count))
  (format #t "~1Tnode-array: #x~X~%" (-> this node-array))
  (format #t "~1Tbranch-array: #x~X~%" (-> this branch-array))
  (format #t "~1Tlink-count: ~D~%" (-> this link-count))
  (format #t "~1Tpad2: ~D~%" (-> this pad2))
  (format #t "~1Tlink-array: #x~X~%" (-> this link-array))
  (format #t "~1Tfirst-node: ~D~%" (-> this first-node))
  (format #t "~1Tpad0: ~D~%" (-> this pad0))
  (format #t "~1Tpatched: ~A~%" (-> this patched))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tpad1[6] @ #x~X~%" (-> this pad1))
  (label cfg-4)
  this
  )

;; definition for method 41 of type nav-graph
(defmethod node-at-idx ((this nav-graph) (idx int))
  "Get the `nav-node` at a given position.
@param idx The position in the `node-array` to return
@returns the [[nav-node]] if it can be found, otherwise return [[#f]]"
  (let ((v0-0 (the-as nav-node #f)))
    (if (and (>= idx 0) (< idx (-> this node-count)))
        (set! v0-0 (-> this node-array idx))
        )
    v0-0
    )
  )

;; failed to figure out what this is:
0
