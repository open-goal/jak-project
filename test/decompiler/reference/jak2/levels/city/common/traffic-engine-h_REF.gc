;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-segment
(deftype nav-segment (structure)
  ((vertex        vector     2 :inline :offset-assert   0)
   (length        float                :offset         12)
   (spawn-spacing float                :offset         28)
   (branch        nav-branch           :offset-assert  32)
   (nav-mesh-id   uint32               :offset-assert  36)
   (id            uint16               :offset-assert  40)
   (cell-id       uint16               :offset-assert  42)
   (from-cell-id  uint16               :offset-assert  44)
   (tracker-id    int8                 :offset-assert  46)
   (pad0          int8                 :offset-assert  47)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type nav-segment
(defmethod inspect nav-segment ((obj nav-segment))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'nav-segment)
  (format #t "~1Tvertex[2] @ #x~X~%" (-> obj vertex))
  (format #t "~1Tlength: ~f~%" (-> obj length))
  (format #t "~1Tspawn-spacing: ~f~%" (-> obj spawn-spacing))
  (format #t "~1Tbranch: #<nav-branch @ #x~X>~%" (-> obj branch))
  (format #t "~1Tnav-mesh-id: ~D~%" (-> obj nav-mesh-id))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tcell-id: ~D~%" (-> obj cell-id))
  (format #t "~1Tfrom-cell-id: ~D~%" (-> obj from-cell-id))
  (format #t "~1Ttracker-id: ~D~%" (-> obj tracker-id))
  (format #t "~1Tpad0: ~D~%" (-> obj pad0))
  (label cfg-4)
  obj
  )

;; definition of type vis-cell
(deftype vis-cell (structure)
  ((sphere                 sphere                     :inline :offset-assert   0)
   (segment-array          (inline-array nav-segment)         :offset-assert  16)
   (vis-id                 uint16                             :offset-assert  20)
   (id                     uint16                             :offset-assert  22)
   (incoming-segment-count int8                               :offset-assert  24)
   (segment-count          int8                               :offset-assert  25)
   (flags                  vis-cell-flag                      :offset-assert  26)
   (alloc-segment-count    int8                               :offset         26)
   (prev-flags             vis-cell-flag                      :offset-assert  27)
   (pad0                   uint32                             :offset         28)
   )
  :method-count-assert 11
  :size-assert         #x20
  :flag-assert         #xb00000020
  (:methods
    (reset-segment-counts (_type_) none 9)
    (debug-draw (_type_) none 10)
    )
  )

;; definition for method 3 of type vis-cell
(defmethod inspect vis-cell ((obj vis-cell))
  (when (not obj)
    (set! obj obj)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" obj 'vis-cell)
  (format #t "~1Tsphere: #<sphere @ #x~X>~%" (-> obj sphere))
  (format #t "~1Tsegment-array: #x~X~%" (-> obj segment-array))
  (format #t "~1Tvis-id: ~D~%" (-> obj vis-id))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tincoming-segment-count: ~D~%" (-> obj incoming-segment-count))
  (format #t "~1Tsegment-count: ~D~%" (-> obj segment-count))
  (format #t "~1Tflags: #x~X : (vis-cell-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (vis-cell-flag active-pedestrian)) (vis-cell-flag active-pedestrian))
        (format #t "active-pedestrian ")
        )
    (if (= (logand s5-0 (vis-cell-flag suppress)) (vis-cell-flag suppress))
        (format #t "suppress ")
        )
    (if (= (logand s5-0 (vis-cell-flag active-vehicle)) (vis-cell-flag active-vehicle))
        (format #t "active-vehicle ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tprev-flags: #x~X : (vis-cell-flag " (-> obj prev-flags))
  (let ((s5-1 (-> obj prev-flags)))
    (if (= (logand s5-1 (vis-cell-flag active-pedestrian)) (vis-cell-flag active-pedestrian))
        (format #t "active-pedestrian ")
        )
    (if (= (logand s5-1 (vis-cell-flag suppress)) (vis-cell-flag suppress))
        (format #t "suppress ")
        )
    (if (= (logand s5-1 (vis-cell-flag active-vehicle)) (vis-cell-flag active-vehicle))
        (format #t "active-vehicle ")
        )
    )
  (format #t ")~%")
  (format #t "~1Talloc-segment-count: ~D~%" (-> obj alloc-segment-count))
  (format #t "~1Tpad0: ~D~%" (-> obj pad0))
  (label cfg-16)
  obj
  )

;; definition of type vis-grid-pos
(deftype vis-grid-pos (structure)
  ((data int8 3 :offset-assert   0)
   (x    int8   :offset          0)
   (y    int8   :offset          1)
   (z    int8   :offset          2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x3
  :flag-assert         #x900000003
  )

;; definition for method 3 of type vis-grid-pos
(defmethod inspect vis-grid-pos ((obj vis-grid-pos))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vis-grid-pos)
  (format #t "~1Tdata[3] @ #x~X~%" (&-> obj x))
  (format #t "~1Tx: ~D~%" (-> obj x))
  (format #t "~1Ty: ~D~%" (-> obj y))
  (format #t "~1Tz: ~D~%" (-> obj z))
  (label cfg-4)
  obj
  )

;; definition of type vis-grid-box
(deftype vis-grid-box (structure)
  ((min vis-grid-pos :inline :offset-assert   0)
   (max vis-grid-pos :inline :offset-assert   3)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

;; definition for method 3 of type vis-grid-box
(defmethod inspect vis-grid-box ((obj vis-grid-box))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vis-grid-box)
  (format #t "~1Tmin: #<vis-grid-pos @ #x~X>~%" (-> obj min))
  (format #t "~1Tmax: #<vis-grid-pos @ #x~X>~%" (-> obj max))
  (label cfg-4)
  obj
  )

;; definition of type vis-ray
(deftype vis-ray (structure)
  ((pos      vector       :inline :offset-assert   0)
   (dir      vector       :inline :offset-assert  16)
   (dest-pos vector       :inline :offset-assert  32)
   (plane    plane        :inline :offset-assert  48)
   (grid-pos vis-grid-pos :inline :offset-assert  64)
   (len      float                :offset-assert  68)
   (cell     vis-cell             :offset-assert  72)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

;; definition for method 3 of type vis-ray
(defmethod inspect vis-ray ((obj vis-ray))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'vis-ray)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> obj pos))
  (format #t "~1Tdir: #<vector @ #x~X>~%" (-> obj dir))
  (format #t "~1Tdest-pos: #<vector @ #x~X>~%" (-> obj dest-pos))
  (format #t "~1Tplane: #<plane @ #x~X>~%" (-> obj plane))
  (format #t "~1Tgrid-pos: #<vis-grid-pos @ #x~X>~%" (-> obj grid-pos))
  (format #t "~1Tlen: ~f~%" (-> obj len))
  (format #t "~1Tcell: #<vis-cell @ #x~X>~%" (-> obj cell))
  (label cfg-4)
  obj
  )

;; definition of type grid-info
(deftype grid-info (structure)
  ((axis-scale      float        3       :offset-assert   0)
   (dimension-array int8         3       :offset-assert  12)
   (pad0            uint8        1       :offset-assert  15)
   (box             bounding-box :inline :offset-assert  16)
   (cell-size       vector       :inline :offset-assert  48)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (setup-grid-from-bounding-box (_type_ (pointer bounding-box) int int) none 9)
    (lookup-cell-for-point (_type_ vis-grid-pos vector) none 10)
    (lookup-box-for-sphere (_type_ vis-grid-box vector) none 11)
    (debug-draw-grid (_type_ rgba) none 12)
    (debug-draw-cell (_type_ vis-grid-pos rgba) none 13)
    )
  )

;; definition for method 3 of type grid-info
(defmethod inspect grid-info ((obj grid-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'grid-info)
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tpad0[1] @ #x~X~%" (-> obj pad0))
  (format #t "~1Tbox: #<bounding-box @ #x~X>~%" (-> obj box))
  (format #t "~1Tcell-size: #<vector @ #x~X>~%" (-> obj cell-size))
  (label cfg-4)
  obj
  )

;; definition of type city-level-info
(deftype city-level-info (structure)
  ((grid-info      grid-info                  :inline :offset-assert   0)
   (cell-array     (inline-array vis-cell)            :offset-assert  64)
   (segment-count  int16                              :offset-assert  68)
   (cell-count     uint16                             :offset-assert  70)
   (segment-array  (inline-array nav-segment)         :offset-assert  72)
   (nav-graph      nav-graph                          :offset-assert  76)
   (camera-ceiling meters                             :offset-assert  80)
   (pad-array      int8                       56      :offset-assert  84)
   )
  :method-count-assert 19
  :size-assert         #x8c
  :flag-assert         #x130000008c
  (:methods
    (city-level-info-method-9 (_type_) symbol 9)
    (init-vis-ray (_type_ vis-ray vector vector) none 10)
    (city-level-info-method-11 (_type_ vis-ray) none 11)
    (city-level-info-method-12 (_type_ vector nav-branch vector) vector 12)
    (lookup-cell-by-position (_type_ vector) vis-cell 13)
    (get-first-cell-in-box (_type_ vis-grid-box) vis-cell 14)
    (sphere-in-grid? (_type_ vector int) symbol 15)
    (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none 16)
    (update-suppressions-from-traffic-engine (_type_ traffic-engine) none 17)
    (city-level-info-method-18 (_type_) none 18)
    )
  )

;; definition for method 3 of type city-level-info
(defmethod inspect city-level-info ((obj city-level-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'city-level-info)
  (format #t "~1Tgrid-info: #<grid-info @ #x~X>~%" (-> obj grid-info))
  (format #t "~1Tcell-array: #x~X~%" (-> obj cell-array))
  (format #t "~1Tsegment-count: ~D~%" (-> obj segment-count))
  (format #t "~1Tcell-count: ~D~%" (-> obj cell-count))
  (format #t "~1Tsegment-array: #x~X~%" (-> obj segment-array))
  (format #t "~1Tnav-graph: ~A~%" (-> obj nav-graph))
  (format #t "~1Tcamera-ceiling: (meters ~m)~%" (-> obj camera-ceiling))
  (format #t "~1Tpad-array[56] @ #x~X~%" (-> obj pad-array))
  (label cfg-4)
  obj
  )

;; definition of type traffic-level-data
(deftype traffic-level-data (structure)
  ((city-info               city-level-info         :offset-assert   0)
   (active-cell-count       uint8                   :offset-assert   4)
   (newly-active-cell-count uint8                   :offset-assert   5)
   (active-cell-list        vis-cell        255     :offset-assert   8)
   (newly-active-cell-list  vis-cell        255     :offset-assert 1028)
   (active-cell-box         bounding-box    :inline :offset-assert 2048)
   )
  :method-count-assert 15
  :size-assert         #x820
  :flag-assert         #xf00000820
  (:methods
    (reset (_type_) none 9)
    (add-active-cell (_type_ vis-cell) none 10)
    (remove-active-cell (_type_ int) none 11)
    (add-newly-active-cell (_type_ vis-cell) none 12)
    (per-frame-cell-update (_type_) none 13)
    (debug-draw (_type_) none 14)
    )
  )

;; definition for method 3 of type traffic-level-data
(defmethod inspect traffic-level-data ((obj traffic-level-data))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-level-data)
  (format #t "~1Tcity-info: #<city-level-info @ #x~X>~%" (-> obj city-info))
  (format #t "~1Tactive-cell-count: ~D~%" (-> obj active-cell-count))
  (format #t "~1Tnewly-active-cell-count: ~D~%" (-> obj newly-active-cell-count))
  (format #t "~1Tactive-cell-list[255] @ #x~X~%" (-> obj active-cell-list))
  (format #t "~1Tnewly-active-cell-list[255] @ #x~X~%" (-> obj newly-active-cell-list))
  (format #t "~1Tactive-cell-box: #<bounding-box @ #x~X>~%" (-> obj active-cell-box))
  (label cfg-4)
  obj
  )

;; definition of type traffic-suppression-box
(deftype traffic-suppression-box (structure)
  ((data     uint8                         32      :offset-assert   0)
   (bbox     bounding-box                  :inline :offset          0)
   (flags    traffic-suppression-box-flags         :offset         12)
   (duration uint32                                :offset         28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type traffic-suppression-box
(defmethod inspect traffic-suppression-box ((obj traffic-suppression-box))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-suppression-box)
  (format #t "~1Tdata[32] @ #x~X~%" (-> obj bbox))
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> obj bbox))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tduration: ~D~%" (-> obj duration))
  (label cfg-4)
  obj
  )

;; definition of type traffic-guard-type-info
(deftype traffic-guard-type-info (structure)
  ((object-type      traffic-type  :offset-assert   0)
   (max-target-count int8          :offset-assert   1)
   (min-target-count int8          :offset-assert   2)
   (target-count     int8          :offset-assert   3)
   (count            int8          :offset-assert   4)
   (change-to-type   uint8         :offset-assert   5)
   )
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

;; definition for method 3 of type traffic-guard-type-info
(defmethod inspect traffic-guard-type-info ((obj traffic-guard-type-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-guard-type-info)
  (format #t "~1Tobject-type: ~D~%" (-> obj object-type))
  (format #t "~1Tmax-target-count: ~D~%" (-> obj max-target-count))
  (format #t "~1Tmin-target-count: ~D~%" (-> obj min-target-count))
  (format #t "~1Ttarget-count: ~D~%" (-> obj target-count))
  (format #t "~1Tcount: ~D~%" (-> obj count))
  (format #t "~1Tchange-to-type: ~D~%" (-> obj change-to-type))
  (label cfg-4)
  obj
  )

;; definition of type traffic-guard-type-settings
(deftype traffic-guard-type-settings (structure)
  ((target-count    int8    :offset-assert   0)
   (inaccuracy      float   :offset-assert   4)
   (acquire-delay   uint16  :offset-assert   8)
   (shot-delay      uint16  :offset-assert  10)
   (burst-delay     uint16  :offset-assert  12)
   (shot-count      int8    :offset-assert  14)
   (rand-shot-count int8    :offset-assert  15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type traffic-guard-type-settings
(defmethod inspect traffic-guard-type-settings ((obj traffic-guard-type-settings))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-guard-type-settings)
  (format #t "~1Ttarget-count: ~D~%" (-> obj target-count))
  (format #t "~1Tinaccuracy: ~f~%" (-> obj inaccuracy))
  (format #t "~1Tacquire-delay: ~D~%" (-> obj acquire-delay))
  (format #t "~1Tshot-delay: ~D~%" (-> obj shot-delay))
  (format #t "~1Tburst-delay: ~D~%" (-> obj burst-delay))
  (format #t "~1Tshot-count: ~D~%" (-> obj shot-count))
  (format #t "~1Trand-shot-count: ~D~%" (-> obj rand-shot-count))
  (label cfg-4)
  obj
  )

;; definition of type traffic-alert-state-settings
(deftype traffic-alert-state-settings (structure)
  ((guard-settings-array traffic-guard-type-settings 6 :inline :offset-assert   0)
   (ped-tazer            traffic-guard-type-settings :inline   :offset          0)
   (ped-rifle            traffic-guard-type-settings :inline   :offset         16)
   (ped-grenade          traffic-guard-type-settings :inline   :offset         32)
   (ped-roboguard        traffic-guard-type-settings :inline   :offset         48)
   (bike-turret          traffic-guard-type-settings :inline   :offset         64)
   (hellcat-turret       traffic-guard-type-settings :inline   :offset         80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; definition for method 3 of type traffic-alert-state-settings
(defmethod inspect traffic-alert-state-settings ((obj traffic-alert-state-settings))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-alert-state-settings)
  (format #t "~1Tguard-settings-array[6] @ #x~X~%" (-> obj ped-tazer))
  (format #t "~1Tped-tazer: #<traffic-guard-type-settings @ #x~X>~%" (-> obj ped-tazer))
  (format #t "~1Tped-rifle: #<traffic-guard-type-settings @ #x~X>~%" (-> obj ped-rifle))
  (format #t "~1Tped-grenade: #<traffic-guard-type-settings @ #x~X>~%" (-> obj ped-grenade))
  (format #t "~1Tped-roboguard: #<traffic-guard-type-settings @ #x~X>~%" (-> obj ped-roboguard))
  (format #t "~1Tbike-turret: #<traffic-guard-type-settings @ #x~X>~%" (-> obj bike-turret))
  (format #t "~1Thellcat-turret: #<traffic-guard-type-settings @ #x~X>~%" (-> obj hellcat-turret))
  (label cfg-4)
  obj
  )

;; definition of type traffic-target-status
(deftype traffic-target-status (structure)
  ((flags          traffic-target-flag         :offset-assert   0)
   (handle         handle                      :offset-assert   8)
   (last-seen-time time-frame                  :offset-assert  16)
   (position       vector              :inline :offset-assert  32)
   (velocity       vector              :inline :offset-assert  48)
   (move-position  vector              :inline :offset-assert  64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; definition for method 3 of type traffic-target-status
(defmethod inspect traffic-target-status ((obj traffic-target-status))
  (when (not obj)
    (set! obj obj)
    (goto cfg-14)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-target-status)
  (format #t "~1Tflags: #x~X : (traffic-target-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (traffic-target-flag visible-now)) (traffic-target-flag visible-now))
        (format #t "visible-now ")
        )
    (if (= (logand s5-0 (traffic-target-flag visible-ever)) (traffic-target-flag visible-ever))
        (format #t "visible-ever ")
        )
    (if (= (logand s5-0 (traffic-target-flag force-visible)) (traffic-target-flag force-visible))
        (format #t "force-visible ")
        )
    (if (= (logand s5-0 (traffic-target-flag visible-recently)) (traffic-target-flag visible-recently))
        (format #t "visible-recently ")
        )
    (if (= (logand s5-0 (traffic-target-flag updated)) (traffic-target-flag updated))
        (format #t "updated ")
        )
    )
  (format #t ")~%")
  (format #t "~1Thandle: ~D~%" (-> obj handle))
  (format #t "~1Tlast-seen-time: ~D~%" (-> obj last-seen-time))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> obj position))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> obj velocity))
  (format #t "~1Tmove-position: #<vector @ #x~X>~%" (-> obj move-position))
  (label cfg-14)
  obj
  )

;; definition of type traffic-alert-state
(deftype traffic-alert-state (structure)
  ((flags                            traffic-alert-flag                     :offset-assert   0)
   (level                            uint8                                  :offset-assert   1)
   (max-level                        uint8                                  :offset-assert   2)
   (guards-in-sight-of-target        int8                                   :offset-assert   3)
   (guard-aim-count                  int8                                   :offset-assert   4)
   (guard-inaccuracy-factor          float                                  :offset-assert   8)
   (guard-target-level               float                                  :offset-assert  12)
   (duration                         uint32                                 :offset-assert  16)
   (start-time                       time-frame                             :offset-assert  24)
   (notify-time                      time-frame                             :offset-assert  32)
   (alarm-sound-id                   sound-id                               :offset-assert  40)
   (target-status-array              traffic-target-status        3 :inline :offset-assert  48)
   (settings                         traffic-alert-state-settings :inline   :offset-assert 288)
   (guard-type-info-array            traffic-guard-type-info      6 :inline :offset-assert 384)
   (guard-type-mask-from-object-type uint32                       126       :offset-assert 480)
   )
  :method-count-assert 10
  :size-assert         #x3d8
  :flag-assert         #xa000003d8
  (:methods
    (reset (_type_) none 9)
    )
  )

;; definition for method 3 of type traffic-alert-state
(defmethod inspect traffic-alert-state ((obj traffic-alert-state))
  (when (not obj)
    (set! obj obj)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-alert-state)
  (format #t "~1Tflags: #x~X : (traffic-alert-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (traffic-alert-flag disable-pursuit-control)) (traffic-alert-flag disable-pursuit-control))
        (format #t "disable-pursuit-control ")
        )
    (if (= (logand s5-0 (traffic-alert-flag sticky-guard-settings)) (traffic-alert-flag sticky-guard-settings))
        (format #t "sticky-guard-settings ")
        )
    (if (= (logand s5-0 (traffic-alert-flag alarm-on)) (traffic-alert-flag alarm-on))
        (format #t "alarm-on ")
        )
    (if (= (logand s5-0 (traffic-alert-flag alert-ending)) (traffic-alert-flag alert-ending))
        (format #t "alert-ending ")
        )
    (if (= (logand s5-0 (traffic-alert-flag target-jak)) (traffic-alert-flag target-jak))
        (format #t "target-jak ")
        )
    (if (= (logand s5-0 (traffic-alert-flag guard-multi-focus)) (traffic-alert-flag guard-multi-focus))
        (format #t "guard-multi-focus ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tlevel: ~D~%" (-> obj level))
  (format #t "~1Tmax-level: ~D~%" (-> obj max-level))
  (format #t "~1Tguards-in-sight-of-target: ~D~%" (-> obj guards-in-sight-of-target))
  (format #t "~1Tguard-aim-count: ~D~%" (-> obj guard-aim-count))
  (format #t "~1Tguard-inaccuracy-factor: ~f~%" (-> obj guard-inaccuracy-factor))
  (format #t "~1Tguard-target-level: ~f~%" (-> obj guard-target-level))
  (format #t "~1Tduration: ~D~%" (-> obj duration))
  (format #t "~1Tstart-time: ~D~%" (-> obj start-time))
  (format #t "~1Tnotify-time: ~D~%" (-> obj notify-time))
  (format #t "~1Talarm-sound-id: ~D~%" (-> obj alarm-sound-id))
  (format #t "~1Ttarget-status-array[3] @ #x~X~%" (-> obj target-status-array))
  (format #t "~1Tsettings: #<traffic-alert-state-settings @ #x~X>~%" (-> obj settings))
  (format #t "~1Tguard-type-info-array[6] @ #x~X~%" (-> obj guard-type-info-array))
  (format #t "~1Tguard-type-mask-from-object-type[126] @ #x~X~%" (-> obj guard-type-mask-from-object-type))
  (label cfg-16)
  obj
  )

;; definition of type traffic-object-type-info
(deftype traffic-object-type-info (structure)
  ((flags             traffic-type-flags  :offset-assert   0)
   (target-count      int8                :offset-assert   1)
   (active-count      int8                :offset-assert   2)
   (inactive-count    int8                :offset-assert   3)
   (reserve-count     uint16              :offset-assert   4)
   (killed-count      uint16              :offset-assert   6)
   (want-count        int8                :offset-assert   8)
   (tracker-index     uint8               :offset-assert   9)
   (parking-spot-prob uint8               :offset-assert  10)
   (guard-type        uint8               :offset-assert  11)
   (array             (pointer handle)    :offset-assert  12)
   (level             symbol              :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type traffic-object-type-info
(defmethod inspect traffic-object-type-info ((obj traffic-object-type-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-object-type-info)
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ttarget-count: ~D~%" (-> obj target-count))
  (format #t "~1Tactive-count: ~D~%" (-> obj active-count))
  (format #t "~1Tinactive-count: ~D~%" (-> obj inactive-count))
  (format #t "~1Treserve-count: ~D~%" (-> obj reserve-count))
  (format #t "~1Tkilled-count: ~D~%" (-> obj killed-count))
  (format #t "~1Twant-count: ~D~%" (-> obj want-count))
  (format #t "~1Ttracker-index: ~D~%" (-> obj tracker-index))
  (format #t "~1Tparking-spot-prob: ~D~%" (-> obj parking-spot-prob))
  (format #t "~1Tguard-type: ~D~%" (-> obj guard-type))
  (format #t "~1Tarray: #x~X~%" (-> obj array))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (label cfg-4)
  obj
  )

;; definition of type traffic-suppressor
(deftype traffic-suppressor (structure)
  ((flags traffic-suppression-flags            :offset-assert   0)
   (bbox  bounding-box              :inline    :offset-assert  16)
   (array traffic-suppression-box   16 :inline :offset-assert  48)
   )
  :method-count-assert 14
  :size-assert         #x230
  :flag-assert         #xe00000230
  (:methods
    (reset-boxes (_type_) none 9)
    (add-new-supression-box (_type_ traffic-suppression-params) none 10)
    (remove-box-by-id (_type_ int) none 11)
    (update-box-from-params (_type_ traffic-suppression-params) none 12)
    (debug-draw (_type_) none 13)
    )
  )

;; definition for method 3 of type traffic-suppressor
(defmethod inspect traffic-suppressor ((obj traffic-suppressor))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-suppressor)
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> obj bbox))
  (format #t "~1Tarray[16] @ #x~X~%" (-> obj array))
  (label cfg-4)
  obj
  )

;; definition of type traffic-tracker
(deftype traffic-tracker (structure)
  ((traffic                 traffic-engine     :offset-assert   0)
   (object-hash             spatial-hash       :offset-assert   4)
   (rand                    float              :offset-assert   8)
   (id                      uint8              :offset-assert  12)
   (active-object-count     uint8              :offset-assert  13)
   (inactive-object-count   int8               :offset-assert  14)
   (active-object-list      handle         126 :offset-assert  16)
   (active-object-type-list traffic-type   126 :offset-assert 1024)
   )
  :method-count-assert 27
  :size-assert         #x47e
  :flag-assert         #x1b0000047e
  (:methods
    (traffic-tracker-method-9 (_type_) none 9)
    (traffic-tracker-method-10 (_type_) none 10)
    (traffic-tracker-method-11 (_type_) none 11)
    (add-active-process (_type_ traffic-type handle) none 12)
    (remove-active-process (_type_ int) handle 13)
    (add-reserved-process (_type_ traffic-type handle) none 14)
    (get-from-inactive-by-type (_type_ traffic-type) handle 15)
    (get-from-inactive-by-handle (_type_ traffic-type handle) handle 16)
    (deactivate-object (_type_ int symbol) none 17)
    (set-process-to-killed (_type_ process) none 18)
    (deactivate-all (_type_ symbol) none 19)
    (deactivate-all-of-type (_type_ traffic-type symbol) none 20)
    (activate-from-params (_type_ traffic-object-spawn-params) none 21)
    (activate-by-type (_type_ traffic-type nav-segment float) none 22)
    (activate-by-handle (_type_ traffic-object-spawn-params) none 23)
    (reset (_type_ uint traffic-engine) none 24)
    (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none 25)
    (for-all-active-processes-of-type (_type_ traffic-type (function process-focusable traffic-object-type-info none)) none 26)
    )
  )

;; definition for method 3 of type traffic-tracker
(defmethod inspect traffic-tracker ((obj traffic-tracker))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-tracker)
  (format #t "~1Ttraffic: ~A~%" (-> obj traffic))
  (format #t "~1Tobject-hash: ~A~%" (-> obj object-hash))
  (format #t "~1Trand: ~f~%" (-> obj rand))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tactive-object-count: ~D~%" (-> obj active-object-count))
  (format #t "~1Tinactive-object-count: ~D~%" (-> obj inactive-object-count))
  (format #t "~1Tactive-object-list[126] @ #x~X~%" (-> obj active-object-list))
  (format #t "~1Tactive-object-type-list[126] @ #x~X~%" (-> obj active-object-type-list))
  (label cfg-4)
  obj
  )

;; definition of type traffic-engine
(deftype traffic-engine (basic)
  ((object-hash            spatial-hash                        :offset-assert   4)
   (manager                handle                              :offset-assert   8)
   (inv-density-factor     float                               :offset-assert  16)
   (sync-clock             uint8                               :offset-assert  20)
   (sync-mask-8            uint8                               :offset-assert  21)
   (sync-mask-16           uint16                              :offset-assert  22)
   (sync-mask-32           uint32                              :offset-assert  24)
   (sync-array             uint8                    4          :offset-assert  28)
   (flags                  uint8                               :offset-assert  32)
   (alert-state            traffic-alert-state      :inline    :offset-assert  48)
   (level-data-array       traffic-level-data       2 :inline  :offset-assert 1040)
   (object-type-info-array traffic-object-type-info 21 :inline :offset-assert 5200)
   (tracker-array          traffic-tracker          2 :inline  :offset-assert 5872)
   (citizen-tracker-array  traffic-tracker          :inline    :offset        5872)
   (vehicle-tracker-array  traffic-tracker          :inline    :offset        7024)
   (inactive-object-array  handle                   420        :offset-assert 8176)
   (suppressor             traffic-suppressor       :inline    :offset-assert 11536)
   (danger-sphere-count    int8                                :offset-assert 12096)
   (pad                    int8                     15         :offset-assert 12097)
   (danger-sphere-array    traffic-danger-info      4 :inline  :offset-assert 12112)
   )
  :method-count-assert 74
  :size-assert         #x3050
  :flag-assert         #x4a00003050
  (:methods
    (new (symbol type) _type_ 0)
    (update-traffic (_type_) none 9)
    (reset-and-init-from-manager (_type_ process) none 10)
    (stop-alarm-sound (_type_) none 11)
    (debug-unused (_type_) none 12)
    (add-object (_type_ traffic-type process) none 13)
    (sphere-in-loaded-city-infos? (_type_ vector int) symbol 14)
    (activate-one-citizen (_type_ nav-segment float) none 15)
    (activate-one-vehicle (_type_ nav-segment float) none 16)
    (can-dest-be-used? (_type_ nav-branch) symbol 17)
    (child-killed (_type_ process) none 18)
    (deactivate-all-from-level (_type_ symbol) none 19)
    (find-best-segment (_type_ vector vector int) nav-segment 20)
    (callback-on-nav-segments-in-sphere (_type_ vector int traffic-find-segment-struct (function traffic-find-segment-struct nav-segment none)) none 21)
    (add-danger (_type_ traffic-danger-info) none 22)
    (guard-count (_type_) int 23)
    (set-target-level (_type_ float) none 24)
    (set-guard-target-level (_type_ float) none 25)
    (deactivate-all (_type_) none 26)
    (deactivate-by-type (_type_ traffic-type) none 27)
    (maybe-increase-guard-aim-count (_type_) symbol 28)
    (restore-default-settings (_type_) none 29)
    (increase-alert-level (_type_ int target) none 30)
    (decrease-alert-level (_type_ int) none 31)
    (set-alert-level (_type_ int) none 32)
    (set-max-alert-level (_type_ int) none 33)
    (set-alert-duration (_type_ time-frame) none 34)
    (get-alert-level (_type_) int 35)
    (get-target (_type_) target 36)
    (set-object-target-level (_type_ int float) none 37)
    (set-object-target-count (_type_ int int) none 38)
    (set-object-reserve-count (_type_ int uint) none 39)
    (get-object-reserve-count (_type_ int) int 40)
    (get-object-remaining-count (_type_ int) int 41)
    (activate-object (_type_ traffic-object-spawn-params) none 42)
    (activate-by-handle (_type_ traffic-object-spawn-params) none 43)
    (set-parking-spot-prob (_type_ int float) none 44)
    (get-random-parking-spot-type (_type_) traffic-type 45)
    (new-suppression-box (_type_ traffic-suppression-params) none 46)
    (remove-suppression-box (_type_ traffic-suppression-params) none 47)
    (update-suppression-box (_type_ traffic-suppression-params) none 48)
    (traffic-engine-method-49 (_type_ vector int traffic-target-status) traffic-target-status 49)
    (find-closest-to-with-collide-lists (_type_ process-drawable collide-spec) process-focusable 50)
    (for-all-active-processes (_type_ (function process-focusable traffic-object-type-info none)) none 51)
    (send-alert-events (_type_) none 52)
    (end-pursuit-by-type (_type_ traffic-type) none 53)
    (get-traffic-guard-type-settings (_type_ int) traffic-guard-type-settings 54)
    (get-guard-type-for-traffic-obj (_type_ int) uint 55)
    (get-traffic-guard-change-to-type (_type_ int) uint 56)
    (set-guard-target-count-range (_type_ int int int) none 57)
    (set-object-auto-activate (_type_ int object) none 58)
    (debug-check-proc-in-tracker (_type_ process int) none 59)
    (kill-traffic-sphere (_type_ sphere) none 60)
    (level-link (_type_ level) none 61)
    (level-unlink (_type_ level) none 62)
    (traffic-engine-method-63 (_type_) none 63)
    (traffic-engine-method-64 (_type_) none 64)
    (handle-new-vis-cell (_type_ vis-cell) none 65)
    (update-sync-from-frame-counter (_type_) none 66)
    (update-guards (_type_) none 67)
    (update-traffic-amount (_type_) none 68)
    (update-danger (_type_) none 69)
    (update-danger-from-target (_type_) none 70)
    (update-alert-state (_type_) none 71)
    (update-suppressor (_type_) none 72)
    (recompute-supressions (_type_) none 73)
    )
  )

;; definition for method 3 of type traffic-engine
(defmethod inspect traffic-engine ((obj traffic-engine))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tobject-hash: ~A~%" (-> obj object-hash))
  (format #t "~1Tmanager: ~D~%" (-> obj manager))
  (format #t "~1Tinv-density-factor: ~f~%" (-> obj inv-density-factor))
  (format #t "~1Tsync-clock: ~D~%" (-> obj sync-clock))
  (format #t "~1Tsync-mask-8: ~D~%" (-> obj sync-mask-8))
  (format #t "~1Tsync-mask-16: ~D~%" (-> obj sync-mask-16))
  (format #t "~1Tsync-mask-32: ~D~%" (-> obj sync-mask-32))
  (format #t "~1Tsync-array[4] @ #x~X~%" (-> obj sync-array))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Talert-state: #<traffic-alert-state @ #x~X>~%" (-> obj alert-state))
  (format #t "~1Tlevel-data-array[2] @ #x~X~%" (-> obj level-data-array))
  (format #t "~1Tobject-type-info-array[21] @ #x~X~%" (-> obj object-type-info-array))
  (format #t "~1Ttracker-array[2] @ #x~X~%" (-> obj citizen-tracker-array))
  (format #t "~1Tinactive-object-array[420] @ #x~X~%" (-> obj inactive-object-array))
  (format #t "~1Tsuppressor: #<traffic-suppressor @ #x~X>~%" (-> obj suppressor))
  (format #t "~1Tdanger-sphere-count: ~D~%" (-> obj danger-sphere-count))
  (format #t "~1Tdanger-sphere-array[4] @ #x~X~%" (-> obj danger-sphere-array))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
