;;-*-Lisp-*-
(in-package goal)

;; definition of type citizen
(deftype citizen (nav-enemy)
  ((flags               citizen-flag               :offset-assert 604)
   (traffic-id          int8                       :offset-assert 606)
   (hit-by-player-count int8                       :offset-assert 607)
   (gnd-height          float                      :offset-assert 608)
   (speed-scale         float                      :offset-assert 612)
   (controller          vehicle-controller :inline :offset-assert 624)
   (danger-pos          sphere             :inline :offset-assert 768)
   (vehicle             int64                      :offset-assert 784)
   (anim-shuffle        int32                      :offset-assert 792)
   (dist-walk-anim      float                      :offset-assert 796)
   (speed-walk          float                      :offset-assert 800)
   (anim-walk           int32                      :offset-assert 804)
   (dist-run-anim       float                      :offset-assert 808)
   (speed-run           float                      :offset-assert 812)
   (anim-run            int32                      :offset-assert 816)
   (water-anim          int32                      :offset-assert 820)
   (interp              float                      :offset-assert 824)
   (last-danger-time    time-frame                 :offset-assert 832)
   (next-time-look-at   time-frame                 :offset-assert 840)
   (stop-time-look-at   time-frame                 :offset-assert 848)
   (wait-return-state   symbol                     :offset-assert 856)
   (wait-time           time-frame                 :offset-assert 864)
   (cp-valid?           symbol                     :offset-assert 872)
   (cp-sphere           sphere             :inline :offset-assert 880)
   (cp-vec              vector             :inline :offset-assert 896)
   (cp-next-time        time-frame                 :offset-assert 912)
   (cp-exit-time        time-frame                 :offset-assert 920)
   (cp-force            vector             :inline :offset-assert 928)
   (cp-plane            plane              :inline :offset-assert 944)
   (cp-factor           float                      :offset-assert 960)
   )
  :heap-base #x350
  :method-count-assert 201
  :size-assert         #x3c4
  :flag-assert         #xc9035003c4
  (:methods
    (citizen-method-178 () none 178)
    (citizen-method-179 () none 179)
    (citizen-method-180 () none 180)
    (citizen-method-181 () none 181)
    (citizen-method-182 () none 182)
    (citizen-method-183 () none 183)
    (citizen-method-184 () none 184)
    (citizen-method-185 () none 185)
    (citizen-method-186 () none 186)
    (citizen-method-187 () none 187)
    (citizen-method-188 () none 188)
    (citizen-method-189 () none 189)
    (citizen-method-190 () none 190)
    (citizen-method-191 () none 191)
    (citizen-method-192 () none 192)
    (citizen-method-193 () none 193)
    (citizen-method-194 () none 194)
    (citizen-method-195 () none 195)
    (citizen-method-196 () none 196)
    (citizen-method-197 () none 197)
    (citizen-method-198 () none 198)
    (citizen-method-199 () none 199)
    (citizen-method-200 () none 200)
    )
  )

;; definition for method 3 of type citizen
(defmethod inspect citizen ((obj citizen))
  (when (not obj)
    (set! obj obj)
    (goto cfg-26)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tflags: #x~X : (citizen-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (citizen-flag female)) (citizen-flag female))
        (format #t "female ")
        )
    (if (= (logand s5-0 (citizen-flag knocked-out-car)) (citizen-flag knocked-out-car))
        (format #t "knocked-out-car ")
        )
    (if (= (logand s5-0 (citizen-flag sticky-weapon)) (citizen-flag sticky-weapon))
        (format #t "sticky-weapon ")
        )
    (if (= (logand s5-0 (citizen-flag in-pursuit)) (citizen-flag in-pursuit))
        (format #t "in-pursuit ")
        )
    (if (= (logand s5-0 (citizen-flag dark-guard)) (citizen-flag dark-guard))
        (format #t "dark-guard ")
        )
    (if (= (logand s5-0 (citizen-flag hostile)) (citizen-flag hostile))
        (format #t "hostile ")
        )
    (if (= (logand s5-0 (citizen-flag persistent)) (citizen-flag persistent))
        (format #t "persistent ")
        )
    (if (= (logand s5-0 (citizen-flag shuffle-mode)) (citizen-flag shuffle-mode))
        (format #t "shuffle-mode ")
        )
    (if (= (logand s5-0 (citizen-flag knocked-out-bike)) (citizen-flag knocked-out-bike))
        (format #t "knocked-out-bike ")
        )
    (if (= (logand s5-0 (citizen-flag target-in-sight)) (citizen-flag target-in-sight))
        (format #t "target-in-sight ")
        )
    (if (= (logand s5-0 (citizen-flag run-mode)) (citizen-flag run-mode))
        (format #t "run-mode ")
        )
    )
  (format #t ")~%")
  (format #t "~2Ttraffic-id: ~D~%" (-> obj traffic-id))
  (format #t "~2Thit-by-player-count: ~D~%" (-> obj hit-by-player-count))
  (format #t "~2Tgnd-height: ~f~%" (-> obj gnd-height))
  (format #t "~2Tspeed-scale: ~f~%" (-> obj speed-scale))
  (format #t "~2Tcontroller: #<vehicle-controller @ #x~X>~%" (-> obj controller))
  (format #t "~2Tdanger-pos: #<sphere @ #x~X>~%" (-> obj danger-pos))
  (format #t "~2Tdest-point: #<vector @ #x~X>~%" (-> obj controller turn-exit-point))
  (format #t "~2Tvehicle: ~D~%" (-> obj vehicle))
  (format #t "~2Tanim-shuffle: ~D~%" (-> obj anim-shuffle))
  (format #t "~2Tdist-walk-anim: ~f~%" (-> obj dist-walk-anim))
  (format #t "~2Tspeed-walk: ~f~%" (-> obj speed-walk))
  (format #t "~2Tanim-walk: ~D~%" (-> obj anim-walk))
  (format #t "~2Tdist-run-anim: ~f~%" (-> obj dist-run-anim))
  (format #t "~2Tspeed-run: ~f~%" (-> obj speed-run))
  (format #t "~2Tanim-run: ~D~%" (-> obj anim-run))
  (format #t "~2Twater-anim: ~D~%" (-> obj water-anim))
  (format #t "~2Tinterp: ~f~%" (-> obj interp))
  (format #t "~2Tlast-danger-time: ~D~%" (-> obj last-danger-time))
  (format #t "~2Tnext-time-look-at: ~D~%" (-> obj next-time-look-at))
  (format #t "~2Tstop-time-look-at: ~D~%" (-> obj stop-time-look-at))
  (format #t "~2Twait-return-state: ~A~%" (-> obj wait-return-state))
  (format #t "~2Twait-time: ~D~%" (-> obj wait-time))
  (format #t "~2Tcp-valid?: ~A~%" (-> obj cp-valid?))
  (format #t "~2Tcp-sphere: #<sphere @ #x~X>~%" (-> obj cp-sphere))
  (format #t "~2Tcp-vec: #<vector @ #x~X>~%" (-> obj cp-vec))
  (format #t "~2Tcp-next-time: ~D~%" (-> obj cp-next-time))
  (format #t "~2Tcp-exit-time: ~D~%" (-> obj cp-exit-time))
  (format #t "~2Tcp-force: #<vector @ #x~X>~%" (-> obj cp-force))
  (format #t "~2Tcp-plane: #<plane @ #x~X>~%" (-> obj cp-plane))
  (format #t "~2Tcp-factor: ~f~%" (-> obj cp-factor))
  (label cfg-26)
  obj
  )

;; failed to figure out what this is:
0




