;;-*-Lisp-*-
(in-package goal)

;; definition of type trail-node
(deftype trail-node (structure)
  ((next-id         int16            :offset-assert   0)
   (prev-id         int16            :offset-assert   2)
   (parent-id       int16            :offset-assert   4)
   (x               int16            :offset-assert   6)
   (z               int16            :offset-assert   8)
   (first-conn      uint16           :offset-assert  10)
   (cost-from-start uint16           :offset-assert  12)
   (cost-to-goal    uint16           :offset-assert  14)
   (flags           trail-node-flag  :offset-assert  16)
   (conn-count      uint8            :offset-assert  17)
   )
  :pack-me
  :method-count-assert 12
  :size-assert         #x12
  :flag-assert         #xc00000012
  (:methods
    (get-dist-score (_type_ vector) uint 9)
    (debug-draw (_type_ int) none 10)
    (get-position (_type_ vector) vector 11)
    )
  )

;; definition for method 3 of type trail-node
(defmethod inspect trail-node ((this trail-node))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-node)
  (format #t "~1Tnext-id: ~D~%" (-> this next-id))
  (format #t "~1Tprev-id: ~D~%" (-> this prev-id))
  (format #t "~1Tparent-id: ~D~%" (-> this parent-id))
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Tz: ~D~%" (-> this z))
  (format #t "~1Tfirst-conn: ~D~%" (-> this first-conn))
  (format #t "~1Tcost-from-start: ~D~%" (-> this cost-from-start))
  (format #t "~1Tcost-to-goal: ~D~%" (-> this cost-to-goal))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tconn-count: ~D~%" (-> this conn-count))
  (label cfg-4)
  this
  )

;; definition of type trail-visgroup
(deftype trail-visgroup (structure)
  ((first-node uint16  :offset-assert   0)
   (node-count uint8   :offset-assert   2)
   (pad        uint8   :offset-assert   3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type trail-visgroup
(defmethod inspect trail-visgroup ((this trail-visgroup))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-visgroup)
  (format #t "~1Tfirst-node: ~D~%" (-> this first-node))
  (format #t "~1Tnode-count: ~D~%" (-> this node-count))
  (format #t "~1Tpad: ~D~%" (-> this pad))
  (label cfg-4)
  this
  )

;; definition of type trail-conn
(deftype trail-conn (structure)
  ((head-id     uint16     :offset-assert   0)
   (tail-id     uint16     :offset-assert   2)
   (flags       conn-flag  :offset-assert   4)
   (visgroup-id uint8      :offset-assert   5)
   (cost        uint16     :offset-assert   6)
   )
  :pack-me
  :method-count-assert 10
  :size-assert         #x8
  :flag-assert         #xa00000008
  (:methods
    (debug-draw (_type_ trail-graph int) none 9)
    )
  )

;; definition for method 3 of type trail-conn
(defmethod inspect trail-conn ((this trail-conn))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-conn)
  (format #t "~1Thead-id: ~D~%" (-> this head-id))
  (format #t "~1Ttail-id: ~D~%" (-> this tail-id))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tvisgroup-id: ~D~%" (-> this visgroup-id))
  (format #t "~1Tcost: ~D~%" (-> this cost))
  (label cfg-4)
  this
  )

;; definition of type trail-conn-hash-cell
(deftype trail-conn-hash-cell (structure)
  ((first-conn uint16  :offset-assert   0)
   (conn-count uint8   :offset-assert   2)
   (pad        uint8   :offset-assert   3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type trail-conn-hash-cell
(defmethod inspect trail-conn-hash-cell ((this trail-conn-hash-cell))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-conn-hash-cell)
  (format #t "~1Tfirst-conn: ~D~%" (-> this first-conn))
  (format #t "~1Tconn-count: ~D~%" (-> this conn-count))
  (format #t "~1Tpad: ~D~%" (-> this pad))
  (label cfg-4)
  this
  )

;; definition of type trail-conn-search
(deftype trail-conn-search (structure)
  ((best-conn-id         int32                    :offset-assert   0)
   (best-dist            float                    :offset-assert   4)
   (src-pos              vector                   :offset-assert   8)
   (conn-pos             vector                   :offset-assert  12)
   (debug-cells-searched int32                    :offset-assert  16)
   (debug-conns-searched int32                    :offset-assert  20)
   (bounds               bounding-box4w :inline   :offset-assert  32)
   (cell-quads           qword          2 :inline :offset-assert  64)
   (conn-quads           qword          7 :inline :offset-assert  96)
   (cell-bits            vector16ub     2 :inline :offset         64)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

;; definition for method 3 of type trail-conn-search
(defmethod inspect trail-conn-search ((this trail-conn-search))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-conn-search)
  (format #t "~1Tbest-conn-id: ~D~%" (-> this best-conn-id))
  (format #t "~1Tbest-dist: ~f~%" (-> this best-dist))
  (format #t "~1Tsrc-pos: #<vector @ #x~X>~%" (-> this src-pos))
  (format #t "~1Tconn-pos: #<vector @ #x~X>~%" (-> this conn-pos))
  (format #t "~1Tdebug-cells-searched: ~D~%" (-> this debug-cells-searched))
  (format #t "~1Tdebug-conns-searched: ~D~%" (-> this debug-conns-searched))
  (format #t "~1Tbounds: #<bounding-box4w @ #x~X>~%" (-> this bounds))
  (format #t "~1Tcell-quads[2] @ #x~X~%" (-> this cell-quads))
  (format #t "~1Tconn-quads[7] @ #x~X~%" (-> this conn-quads))
  (format #t "~1Tcell-bits[2] @ #x~X~%" (-> this cell-quads))
  (format #t "~1Tconn-bits[2] @ #x~X~%" (-> this conn-quads))
  (label cfg-4)
  this
  )

;; definition of type trail-conn-hash
(deftype trail-conn-hash (basic)
  ((cell-width meters                                      :offset-assert   4)
   (origin     vector                              :inline :offset-assert  16)
   (cell       (inline-array trail-conn-hash-cell)         :offset-assert  32)
   (conn-ids   (pointer uint16)                            :offset-assert  36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; definition for method 3 of type trail-conn-hash
(defmethod inspect trail-conn-hash ((this trail-conn-hash))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tcell-width: (meters ~m)~%" (-> this cell-width))
  (format #t "~1Torigin: #<vector @ #x~X>~%" (-> this origin))
  (format #t "~1Tcell: #x~X~%" (-> this cell))
  (format #t "~1Tconn-ids: #x~X~%" (-> this conn-ids))
  (label cfg-4)
  this
  )

;; definition of type trail-cached-search-info
(deftype trail-cached-search-info (structure)
  ((goal-conn-id  int16          :offset-assert   0)
   (orig-goal-pos vector :inline :offset-assert  16)
   (conn-goal-pos vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type trail-cached-search-info
(defmethod inspect trail-cached-search-info ((this trail-cached-search-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-cached-search-info)
  (format #t "~1Tgoal-conn-id: ~D~%" (-> this goal-conn-id))
  (format #t "~1Torig-goal-pos: #<vector @ #x~X>~%" (-> this orig-goal-pos))
  (format #t "~1Tconn-goal-pos: #<vector @ #x~X>~%" (-> this conn-goal-pos))
  (label cfg-4)
  this
  )

;; definition of type trail-graph
(deftype trail-graph (basic)
  ((mode           uint8                                         :offset-assert   4)
   (search-id      uint32                                        :offset-assert   8)
   (open-head-id   int16                                         :offset-assert  12)
   (goal-conn-id   int16                                         :offset-assert  14)
   (goal-node-id   int16                                         :offset-assert  16)
   (node-count     uint16                                        :offset-assert  18)
   (conn-count     uint16                                        :offset-assert  20)
   (conn-mask      uint8                                         :offset-assert  22)
   (node           (inline-array trail-node)                     :offset-assert  24)
   (conn           (inline-array trail-conn)                     :offset-assert  28)
   (conn-ids       (pointer uint16)                              :offset-assert  32)
   (visgroup       (inline-array trail-conn-hash-cell)           :offset-assert  36)
   (visnode-ids    (pointer uint16)                              :offset-assert  40)
   (conn-hash      trail-conn-hash                               :offset-assert  44)
   (orig-start-pos vector                              :inline   :offset-assert  48)
   (orig-goal-pos  vector                              :inline   :offset-assert  64)
   (conn-start-pos vector                              :inline   :offset-assert  80)
   (conn-goal-pos  vector                              :inline   :offset-assert  96)
   (open-quads     qword                               6 :inline :offset-assert 112)
   (closed-quads   qword                               6 :inline :offset-assert 208)
   )
  :method-count-assert 29
  :size-assert         #x130
  :flag-assert         #x1d00000130
  (:methods
    (trail-graph-method-9 (_type_ int) none 9)
    (trail-graph-method-10 (_type_ int) none 10)
    (trail-graph-method-11 (_type_ int int) trail-node 11)
    (debug-draw (_type_) none 12)
    (debug-draw-cell (_type_ int) none 13)
    (debug-draw-path (_type_ int (pointer uint16) vector vector rgba float) symbol 14)
    (do-path (_type_ vector vector) int 15)
    (trail-graph-method-16 () none 16)
    (get-node-location-by-id (_type_ uint vector) vector 17)
    (get-path-to-root (_type_ (pointer uint16) int (pointer int32) (pointer float)) int 18)
    (trail-graph-method-19 (_type_ int int) symbol 19)
    (try-initialize (_type_) symbol 20)
    (update-node-flags-for-conn (_type_ int trail-node-flag trail-node-flag) none 21)
    (trail-graph-method-22 (_type_ int) none 22)
    (reset-search-state (_type_) none 23)
    (get-next-to-explore (_type_) int 24)
    (trail-graph-method-25 (_type_ trail-conn-search int int) none 25)
    (do-search! (_type_ vector vector trail-cached-search-info) none 26)
    (do-some-work (_type_) int 27)
    (run-until-done-or-timeout (_type_ int) none 28)
    )
  )

;; definition for method 3 of type trail-graph
(defmethod inspect trail-graph ((this trail-graph))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmode: ~D~%" (-> this mode))
  (format #t "~1Tsearch-id: ~D~%" (-> this search-id))
  (format #t "~1Topen-head-id: ~D~%" (-> this open-head-id))
  (format #t "~1Tgoal-conn-id: ~D~%" (-> this goal-conn-id))
  (format #t "~1Tgoal-node-id: ~D~%" (-> this goal-node-id))
  (format #t "~1Tnode-count: ~D~%" (-> this node-count))
  (format #t "~1Tconn-count: ~D~%" (-> this conn-count))
  (format #t "~1Tconn-mask: ~D~%" (-> this conn-mask))
  (format #t "~1Tnode: #x~X~%" (-> this node))
  (format #t "~1Tconn: #x~X~%" (-> this conn))
  (format #t "~1Tconn-ids: #x~X~%" (-> this conn-ids))
  (format #t "~1Tvisgroup: #x~X~%" (-> this visgroup))
  (format #t "~1Tvisnode-ids: #x~X~%" (-> this visnode-ids))
  (format #t "~1Tconn-hash: ~A~%" (-> this conn-hash))
  (format #t "~1Torig-start-pos: #<vector @ #x~X>~%" (-> this orig-start-pos))
  (format #t "~1Torig-goal-pos: #<vector @ #x~X>~%" (-> this orig-goal-pos))
  (format #t "~1Tconn-start-pos: #<vector @ #x~X>~%" (-> this conn-start-pos))
  (format #t "~1Tconn-goal-pos: #<vector @ #x~X>~%" (-> this conn-goal-pos))
  (format #t "~1Topen-quads[6] @ #x~X~%" (-> this open-quads))
  (format #t "~1Tclosed-quads[6] @ #x~X~%" (-> this closed-quads))
  (format #t "~1Topen-bits[2] @ #x~X~%" (-> this open-quads))
  (format #t "~1Tclosed-bits[2] @ #x~X~%" (-> this closed-quads))
  (label cfg-4)
  this
  )

;; definition for symbol *trail-graph*, type trail-graph
(define *trail-graph* (the-as trail-graph #f))
