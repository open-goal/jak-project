;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *vehicle-control-debug-obj*, type object
(define *vehicle-control-debug-obj* (the-as object #f))

;; definition for method 21 of type vehicle-controller
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-21 vehicle-controller ((obj vehicle-controller))
  (when (logtest? (-> obj flags) (vehicle-controller-flag attached))
    (let ((v1-3 (-> obj branch)))
      (when (or (not v1-3) (zero? v1-3))
        (break!)
        0
        )
      (when (logtest? (the-as int v1-3) 15)
        (break!)
        0
        )
      (let ((v1-4 (-> v1-3 src-node)))
        (when (or (not v1-4) (zero? v1-4))
          (break!)
          0
          )
        (when (< (the-as uint #x8000000) (the-as uint v1-4))
          (break!)
          0
          )
        )
      )
    )
  0
  (none)
  )

;; definition for method 20 of type vehicle-controller
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-20 vehicle-controller ((obj vehicle-controller) (arg0 object) (arg1 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (set! (-> obj max-turn-speed) (sqrtf (* (fmax 16384.0 arg1) (-> obj turn-accel))))
    (let ((v1-1 (new 'stack-no-clear 'vehicle-control-point)))
      (vector-! (-> v1-1 normal) (-> obj turn-exit-point) (the-as vector arg0))
      (set! (-> v1-1 local-pos quad) (-> obj turn-exit-dir quad))
      (set! (-> v1-1 local-pos x) (-> obj turn-exit-dir z))
      (set! (-> v1-1 local-pos z) (- (-> obj turn-exit-dir x)))
      (logior! (-> obj flags) (vehicle-controller-flag left-turn))
      (when (< 0.0 (vector-dot (-> v1-1 normal) (-> v1-1 local-pos)))
        (logclear! (-> obj flags) (vehicle-controller-flag left-turn))
        (vector-float*! (-> v1-1 local-pos) (-> v1-1 local-pos) -1.0)
        )
      (let ((a1-6 (-> obj dest-circle)))
        (let ((a0-12 (-> obj turn-exit-point)))
          (let ((v1-2 (-> v1-1 local-pos)))
            (let ((a3-3 arg1))
              (.mov vf7 a3-3)
              )
            (.lvf vf5 (&-> v1-2 quad))
            )
          (.lvf vf4 (&-> a0-12 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a1-6 quad) vf6)
        )
      )
    (set! (-> obj dest-circle w) arg1)
    0
    (vehicle-controller-method-16 obj (-> obj path-prev-point) (-> obj turn-enter-point))
    (set! (-> obj target-point quad) (-> obj turn-enter-point quad))
    (vector-! (-> obj turn-enter-dir) (-> obj turn-enter-point) (-> obj path-prev-point))
    (set! (-> obj turn-enter-dir y) 0.0)
    (vector-normalize! (-> obj turn-enter-dir) 1.0)
    (let ((f0-12 (cos 8192.0))
          (f30-0 (vector-dot (-> obj turn-enter-dir) (-> obj turn-exit-dir)))
          )
      (set! (-> obj max-turn-speed)
            (* (-> obj max-turn-speed) (+ 1.0 (fmax 0.0 (/ (- f30-0 f0-12) (- 1.0 f0-12)))))
            )
      (if (>= f30-0 (cos 1820.4445))
          (set! (-> obj max-turn-speed) 409600.0)
          )
      )
    0
    (none)
    )
  )

;; definition for method 19 of type vehicle-controller
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-19 vehicle-controller ((obj vehicle-controller) (arg0 vector) (arg1 object) (arg2 vector) (arg3 vector))
  (set! (-> obj path-prev-point quad) (-> arg0 quad))
  (vector-vector-distance arg0 arg2)
  (set! (-> obj target-speed) (vector-length arg3))
  (set! (-> obj turn-exit-point quad) (-> arg2 quad))
  (set! (-> obj turn-exit-dir quad) (-> arg3 quad))
  (set! (-> obj turn-exit-dir y) 0.0)
  (vector-normalize! (-> obj turn-exit-dir) 1.0)
  (vehicle-controller-method-20 obj arg0 (the-as float arg1))
  (logior! (-> obj flags) (vehicle-controller-flag on-straightaway))
  0
  (none)
  )

;; definition for method 13 of type vehicle-controller
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-13 vehicle-controller ((obj vehicle-controller) (arg0 nav-branch) (arg1 vector))
  (vehicle-controller-method-10 obj (the-as traffic-tracker arg0))
  (set! (-> obj path-prev-point quad) (-> arg1 quad))
  (set! (-> obj branch) arg0)
  (let ((v1-3 arg0))
    (set! (-> obj target-speed) (* 1024.0 (the float (-> v1-3 speed-limit))))
    )
  (let ((s4-1 (-> arg0 dest-node)))
    (let ((a1-2 s4-1)
          (v1-6 (-> obj turn-exit-point))
          )
      (set! (-> v1-6 quad) (-> a1-2 position quad))
      (set! (-> v1-6 w) 1.0)
      )
    (let ((v1-7 s4-1)
          (s3-0 (-> obj turn-exit-dir))
          )
      (let ((f0-5 (the float (-> v1-7 angle)))
            (s2-0 (new 'stack-no-clear 'vector))
            )
        (sincos! s2-0 f0-5)
        (set! (-> s3-0 x) (-> s2-0 y))
        (set! (-> s3-0 y) 0.0)
        (set! (-> s3-0 z) (- (-> s2-0 x)))
        )
      (set! (-> s3-0 w) 1.0)
      )
    (vehicle-controller-method-20 obj arg1 (* 1024.0 (the float (-> s4-1 radius))))
    )
  (logior! (-> obj flags) (vehicle-controller-flag on-straightaway))
  0
  (none)
  )

;; definition for method 15 of type vehicle-controller
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for method 14 of type vehicle-controller
;; INFO: Used lq/sq
(defmethod vehicle-controller-method-14 vehicle-controller ((obj vehicle-controller) (arg0 vehicle))
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (gp-0 ((-> obj choose-branch-callback) obj arg0))
        )
    (when gp-0
      (vehicle-controller-method-11 obj)
      (set! (-> s4-0 quad) (-> obj turn-exit-point quad))
      (vehicle-controller-method-13 obj gp-0 s4-0)
      )
    gp-0
    )
  )

;; definition for method 16 of type vehicle-controller
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-16 vehicle-controller ((obj vehicle-controller) (arg0 vector) (arg1 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'vehicle-control-point)))
      (vector-! (-> s4-0 local-pos) (-> obj dest-circle) arg0)
      (set! (-> s4-0 local-pos y) 0.0)
      (let* ((v1-1 (-> s4-0 local-pos))
             (f30-0 (sqrtf (+ (* (-> v1-1 x) (-> v1-1 x)) (* (-> v1-1 z) (-> v1-1 z)))))
             (f28-0 (-> obj dest-circle w))
             )
        (vector-xz-normalize! (-> s4-0 local-pos) 1.0)
        (set! (-> s4-0 normal x) (-> s4-0 local-pos z))
        (set! (-> s4-0 normal y) 0.0)
        (set! (-> s4-0 normal z) (- (-> s4-0 local-pos x)))
        (if (logtest? (-> obj flags) (vehicle-controller-flag left-turn))
            (vector-float*! (-> s4-0 normal) (-> s4-0 normal) -1.0)
            )
        (let* ((f0-10 f30-0)
               (f0-12 (* f0-10 f0-10))
               (f1-3 f28-0)
               (f1-6 (sqrtf (- f0-12 (* f1-3 f1-3))))
               (f0-15 (/ (* f28-0 f1-6) f30-0))
               )
          (let ((f1-9 (/ (* f1-6 f1-6) f30-0)))
            (set! (-> arg1 quad) (-> arg0 quad))
            (let ((a1-5 arg1))
              (let ((v1-12 arg1))
                (let ((a0-5 (-> s4-0 local-pos)))
                  (let ((a2-1 f1-9))
                    (.mov vf7 a2-1)
                    )
                  (.lvf vf5 (&-> a0-5 quad))
                  )
                (.lvf vf4 (&-> v1-12 quad))
                )
              (.add.x.vf vf6 vf0 vf0 :mask #b1000)
              (.mul.x.vf acc vf5 vf7 :mask #b111)
              (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
              (.svf (&-> a1-5 quad) vf6)
              )
            )
          (let ((a0-6 arg1))
            (let ((v1-13 arg1))
              (let ((a1-6 (-> s4-0 normal)))
                (let ((a2-2 f0-15))
                  (.mov vf7 a2-2)
                  )
                (.lvf vf5 (&-> a1-6 quad))
                )
              (.lvf vf4 (&-> v1-13 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a0-6 quad) vf6)
            )
          )
        )
      )
    (set! (-> arg1 y) (-> obj turn-exit-point y))
    0
    (none)
    )
  )

;; definition for function nearest-dist2-between-moving-points
(defun nearest-dist2-between-moving-points ((arg0 vector) (arg1 vector) (arg2 vector) (arg3 vector) (arg4 float))
  (let ((t1-0 (new 'stack-no-clear 'vector))
        (v1-0 (new 'stack-no-clear 'vector))
        )
    (vector-! t1-0 arg2 arg0)
    (vector-! v1-0 arg3 arg1)
    (let ((f0-1 (vector-dot t1-0 t1-0))
          (f1-1 (vector-dot v1-0 v1-0))
          (f2-1 (vector-dot t1-0 v1-0))
          (f3-0 0.0)
          )
      (if (< 0.0 f1-1)
          (set! f3-0 (fmax 0.0 (fmin (/ (- f2-1) f1-1) arg4)))
          )
      (+ f0-1 (* 2.0 f2-1 f3-0) (* f3-0 f3-0 f1-1))
      )
    )
  )

;; definition for method 18 of type vehicle-controller
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for method 10 of type vehicle-controller
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-10 vehicle-controller ((obj vehicle-controller) (arg0 traffic-tracker))
  (when (not (logtest? (-> obj flags) (vehicle-controller-flag attached)))
    (logior! (-> obj flags) (vehicle-controller-flag attached))
    (+! (-> arg0 active-object-count) 1)
    )
  0
  (none)
  )

;; definition for method 11 of type vehicle-controller
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-11 vehicle-controller ((obj vehicle-controller))
  (when (logtest? (-> obj flags) (vehicle-controller-flag attached))
    (logclear! (-> obj flags) (vehicle-controller-flag attached))
    (let ((v1-5 (-> obj branch)))
      (if (> (-> v1-5 user-count) 0)
          (+! (-> v1-5 user-count) -1)
          )
      )
    (when (logtest? (-> obj flags) (vehicle-controller-flag blocking-dest-node))
      (logclear! (-> obj flags) (vehicle-controller-flag blocking-dest-node))
      (logclear! (-> obj branch dest-node flags) (nav-node-flag-byte blocked))
      )
    )
  (set! (-> obj branch) (the-as nav-branch 0))
  (if (logtest? (-> obj flags) (vehicle-controller-flag blocking-dest-node))
      (format #t "blocking-dest-node bit set after detach~%")
      )
  0
  (none)
  )

;; definition for method 12 of type vehicle-controller
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-12 vehicle-controller ((obj vehicle-controller)
                                                          (arg0 rigid-body-vehicle-constants)
                                                          (arg1 vector)
                                                          (arg2 float)
                                                          (arg3 int)
                                                          (arg4 float)
                                                          )
  (let ((s3-0 (new 'stack-no-clear 'vector)))
    (set! (-> s3-0 quad) (-> arg1 quad))
    (set! (-> s3-0 y) 0.0)
    (vector-xz-normalize! s3-0 1.0)
    (cond
      ((= arg3 (-> arg0 sample-index))
       (let* ((f30-0 (* 0.0033333334 (the float (- (-> self clock frame-counter) (-> arg0 sample-time)))))
              (f0-3 (acos-rad (vector-dot s3-0 (-> arg0 sample-dir))))
              (f28-0 (/ (* arg4 f30-0) f0-3))
              )
         (when (and (>= arg3 0) (< arg3 30))
           (format #t "sample ~d (~M m/s) angle ~f deg, time ~f sec~%" arg3 arg4 (* 57.29747 f0-3) f30-0)
           (format #t "sample ~d (~M m/s) radius ~M throttle ~f~%" arg3 arg4 f28-0 arg2)
           )
         )
       )
      (else
        (set! (-> arg0 sample-index) arg3)
        (set! (-> arg0 sample-time) (-> self clock frame-counter))
        (set! (-> arg0 sample-dir quad) (-> s3-0 quad))
        )
      )
    )
  0
  (none)
  )

;; definition for method 17 of type vehicle-controller
;; WARN: Return type mismatch int vs none.
(defmethod draw-debug-info vehicle-controller ((obj vehicle-controller))
  (add-debug-sphere #t (bucket-id debug2) (-> obj dest-circle) (-> obj dest-circle w) *color-green*)
  (add-debug-x #t (bucket-id debug-no-zbuf1) (-> obj target-point) *color-white*)
  (add-debug-vector
    #t
    (bucket-id debug-no-zbuf1)
    (-> obj turn-exit-point)
    (-> obj turn-exit-dir)
    (meters 2)
    *color-red*
    )
  (add-debug-x #t (bucket-id debug-no-zbuf1) (-> obj turn-enter-point) *color-dark-red*)
  (add-debug-vector
    #t
    (bucket-id debug-no-zbuf1)
    (-> obj turn-enter-point)
    (-> obj turn-enter-dir)
    (meters 2)
    *color-dark-red*
    )
  (when (logtest? (-> obj flags) (vehicle-controller-flag on-straightaway))
    (let ((a3-5 (new 'stack-no-clear 'vector)))
      (vector-! a3-5 (-> obj target-point) (-> obj path-prev-point))
      (add-debug-line-sphere
        #t
        (bucket-id debug2)
        (-> obj path-prev-point)
        a3-5
        (-> obj dest-circle w)
        *color-yellow*
        )
      )
    )
  0
  (none)
  )

;; definition for method 9 of type vehicle-controller
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-controller-method-9 vehicle-controller ((obj vehicle-controller))
  (set! (-> obj traffic) *traffic-engine*)
  (set! (-> obj choose-branch-callback) (the-as
                                          (function vehicle-controller vehicle nav-branch)
                                          (method-of-type vehicle-controller vehicle-controller-method-15)
                                          )
        )
  (set! (-> obj turn-accel) 49152.0)
  0
  (none)
  )
