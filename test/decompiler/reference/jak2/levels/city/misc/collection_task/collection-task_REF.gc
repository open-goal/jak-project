;;-*-Lisp-*-
(in-package goal)

;; definition for method 15 of type hud-moneybag
;; WARN: Return type mismatch int vs none.
(defmethod draw hud-moneybag ((obj hud-moneybag))
  (set-hud-piece-position!
    (the-as hud-sprite (-> obj sprites))
    (the int (+ 462.0 (* 130.0 (-> obj offset))))
    210
    )
  (format (clear (-> obj strings 0 text)) "~D" (-> obj values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> obj strings 0 pos)) (the-as vector4w (-> obj sprites)) -25 25)
  ((method-of-type hud draw) obj)
  0
  (none)
  )

;; definition for method 16 of type hud-moneybag
;; WARN: Return type mismatch int vs none.
(defmethod update-values hud-moneybag ((obj hud-moneybag))
  (set! (-> obj values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) obj)
  0
  (none)
  )

;; definition for method 17 of type hud-moneybag
;; WARN: Return type mismatch int vs none.
(defmethod init-callback hud-moneybag ((obj hud-moneybag))
  (set! (-> obj level) (level-get *level* 'ctywide))
  (set! (-> obj gui-id)
        (add-process *gui-control* obj (gui-channel hud-middle-right) (gui-action hidden) (-> obj name) 81920.0 0)
        )
  (logior! (-> obj flags) (hud-flags show))
  (set! (-> obj sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x7 :page #x679)))
  (set! (-> obj sprites 0 flags) (the-as uint 4))
  (set! (-> obj sprites 0 scale-x) 1.2)
  (set! (-> obj sprites 0 scale-y) 1.2)
  (alloc-string-if-needed obj 0)
  (set! (-> obj strings 0 scale) 0.6)
  (set! (-> obj strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-krew-collection-item krew-moneybag 0 3
              ((1 (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :shadow 2
              )

;; definition of type krew-collection-item
(deftype krew-collection-item (process-drawable)
  ()
  :heap-base #x50
  :method-count-assert 23
  :size-assert         #xc8
  :flag-assert         #x17005000c8
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    (find-ground (_type_) symbol 22)
    )
  )

;; definition for method 3 of type krew-collection-item
(defmethod inspect krew-collection-item ((obj krew-collection-item))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 22 of type krew-collection-item
;; INFO: Used lq/sq
(defmethod find-ground krew-collection-item ((obj krew-collection-item))
  (let ((s4-0 #f))
    (let ((gp-0 (new 'stack-no-clear 'collide-query-with-2vec)))
      (set! (-> gp-0 vec quad) (-> obj root trans quad))
      (set! (-> gp-0 cquery start-pos quad) (-> gp-0 vec quad))
      (vector-reset! (-> gp-0 vec2))
      (set! (-> gp-0 vec2 y) 1.0)
      (set-vector! (-> gp-0 cquery move-dist) 0.0 -40960.0 0.0 1.0)
      (let ((v1-5 (-> gp-0 cquery)))
        (set! (-> v1-5 radius) 1024.0)
        (set! (-> v1-5 collide-with) (collide-spec backgnd))
        (set! (-> v1-5 ignore-process0) #f)
        (set! (-> v1-5 ignore-process1) #f)
        (set! (-> v1-5 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
        (set! (-> v1-5 action-mask) (collide-action solid))
        )
      (let ((f0-6 (fill-and-probe-using-line-sphere *collide-cache* (-> gp-0 cquery))))
        (when (>= f0-6 0.0)
          (vector+float*! (-> gp-0 vec) (-> gp-0 cquery start-pos) (-> gp-0 cquery move-dist) f0-6)
          (set! (-> gp-0 vec2 quad) (-> gp-0 cquery best-other-tri normal quad))
          (set! (-> gp-0 vec y) (+ 4915.2 (-> gp-0 vec y)))
          (set! s4-0 #t)
          (format #t "krew-collection-item::find-ground: ground y ~M~%" (-> gp-0 vec y))
          )
        )
      (set! (-> obj root trans quad) (-> gp-0 vec quad))
      (forward-up-nopitch->quaternion (-> obj root quat) (new 'static 'vector :z 1.0 :w 1.0) (-> gp-0 vec2))
      )
    s4-0
    )
  )

;; failed to figure out what this is:
(defstate idle (krew-collection-item)
  :virtual #t
  :trans (behavior ()
    (let ((v1-0 *target*)
          (gp-0 (new 'stack-no-clear 'vector))
          )
      (when v1-0
        (set! (-> gp-0 quad) (-> v1-0 control trans quad))
        (set! (-> gp-0 w) 4096.0)
        (when (logtest? (focus-status pilot) (-> v1-0 focus-status))
          (let ((a1-4 (handle->process (-> v1-0 pilot vehicle))))
            (set! (-> gp-0 quad)
                  (-> (the-as collide-shape (-> (the-as process-drawable a1-4) root)) root-prim prim-core world-sphere quad)
                  )
            )
          )
        (let ((f0-1 (vector-vector-distance-squared (-> self root trans) gp-0))
              (f1-1 (+ 12288.0 (-> gp-0 w)))
              )
          (when (>= (* f1-1 f1-1) f0-1)
            (sound-play "skill-pickup")
            (set! (-> *game-info* counter) (+ -1.0 (-> *game-info* counter)))
            (go-virtual die)
            )
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (let ((v1-0 (new 'stack-no-clear 'vector)))
        (set! (-> v1-0 quad) (-> self root trans quad))
        (set! (-> v1-0 y) (+ -6144.0 (-> v1-0 y)))
        (set! (-> gp-0 pos quad) (-> v1-0 quad))
        )
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags))
      (set! (-> gp-0 map-icon) (the-as uint 15))
      (task-arrow-spawn gp-0 (the-as task-arrow self))
      )
    (until #f
      (ja-no-eval :group! (ja-group)
                  :num! (seek! (the float (+ (-> (ja-group) frames num-frames) -1)))
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (none)
    )
  :post (the-as (function none :behavior krew-collection-item) ja-post)
  )

;; failed to figure out what this is:
(defstate die (krew-collection-item)
  :virtual #t
  :code (behavior ()
    (cleanup-for-death self)
    (none)
    )
  )

;; definition for function krew-collection-item-init-by-other
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs krew-collection-item.
(defbehavior krew-collection-item-init-by-other krew-collection-item ((arg0 vector))
  (set! (-> self level) (level-get *level* 'lsack))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 3.0 3.0 3.0 1.0)
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-krew-collection-item" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  (if (-> self draw shadow)
      (set! (-> self draw shadow-ctrl)
            (new 'process 'shadow-control -12288.0 12288.0 614400.0 (shadow-flags shdf00 shdf04) 245760.0)
            )
      )
  (the-as krew-collection-item (go-virtual idle))
  )

;; definition for function krew-collection-item-spawn
;; WARN: Return type mismatch process vs krew-collection-item.
(defun krew-collection-item-spawn ((arg0 process) (arg1 vector))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn krew-collection-item arg1 :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as krew-collection-item gp-0)
    )
  )

;; failed to figure out what this is:
(set-subtask-hook!
  *game-info*
  73
  0
  (lambda :behavior task-manager
    ()
    (set! (-> self begin-pos quad) (-> (new 'static 'vector :x -245760.0 :y 45056.0 :z 5468160.0 :w 1.0) quad))
    (set-setting! 'exclusive-task #f 0 (-> self node-info task))
    (let ((gp-0 *traffic-manager*)
          (s5-0 (new 'stack 'traffic-object-spawn-params))
          )
      (set! (-> s5-0 position quad) (-> self begin-pos quad))
      (quaternion-axis-angle! (-> s5-0 rotation) 0.0 1.0 0.0 16384.0)
      (set! (-> s5-0 object-type) (the-as uint 13))
      (set! (-> s5-0 behavior) (the-as uint 0))
      (set! (-> s5-0 id) (the-as uint 0))
      (set! (-> s5-0 proc) #f)
      (send-event gp-0 'spawn-object s5-0)
      )
    (set! (-> self start-time) 0)
    (set! (-> self count) -1)
    (set! (-> self max-count) 14)
    (set! (-> self data-vector 0 quad)
          (-> (new 'static 'vector :x 1282048.0 :y 37925.273 :z 5492736.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 1 quad)
          (-> (new 'static 'vector :x 2392064.0 :y 23235.379 :z 5980160.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 2 quad)
          (-> (new 'static 'vector :x 3231744.0 :y 38680.984 :z 4788224.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 3 quad)
          (-> (new 'static 'vector :x 3829760.0 :y 38680.984 :z 3682304.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 4 quad)
          (-> (new 'static 'vector :x 4325376.0 :y 38680.984 :z 2564096.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 5 quad)
          (-> (new 'static 'vector :x 4014080.0 :y 38680.984 :z 1822720.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 6 quad)
          (-> (new 'static 'vector :x 3698688.0 :y 38680.984 :z 1728512.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 7 quad)
          (-> (new 'static 'vector :x 3792896.0 :y 38680.984 :z 2387968.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 8 quad)
          (-> (new 'static 'vector :x 4616192.0 :y 38680.984 :z 2863104.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 9 quad)
          (-> (new 'static 'vector :x 3633152.0 :y 38680.984 :z 3477504.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 10 quad)
          (-> (new 'static 'vector :x 3993600.0 :y 38680.984 :z 4378624.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 11 quad)
          (-> (new 'static 'vector :x 3112960.0 :y 23472.947 :z 5390336.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 12 quad)
          (-> (new 'static 'vector :x 1789952.0 :y 37616.027 :z 5455872.0 :w 1.0) quad)
          )
    (set! (-> self data-vector 13 quad)
          (-> (new 'static 'vector :x 237568.0 :y 37541.477 :z 5439488.0 :w 1.0) quad)
          )
    (set! (-> self data-int32 0) #x2904)
    (set! (-> self data-int32 1) 9000)
    (set! (-> self data-int32 2) 9000)
    (set! (-> self data-int32 3) 9000)
    (set! (-> self data-int32 4) 9000)
    (set! (-> self data-int32 5) 9000)
    (set! (-> self data-int32 6) 3000)
    (set! (-> self data-int32 7) 6000)
    (set! (-> self data-int32 8) 9000)
    (set! (-> self data-int32 9) 9000)
    (set! (-> self data-int32 10) 9000)
    (set! (-> self data-int32 11) 9000)
    (set! (-> self data-int32 12) 7500)
    (set! (-> self data-int32 13) 7500)
    (let ((f0-1 (the float (-> self max-count))))
      (set! (-> *game-info* counter) f0-1)
      (the-as object f0-1)
      )
    )
  )

;; failed to figure out what this is:
(set-subtask-hook!
  *game-info*
  73
  1
  (lambda :behavior task-manager () (send-event *traffic-manager* 'restore-default-settings))
  )

;; failed to figure out what this is:
(set-subtask-hook!
  *game-info*
  73
  2
  (lambda :behavior task-manager
    ()
    (check-time self)
    (when (>= (-> self count) 0)
      (cond
        ((handle->process (-> self slave 0))
         #f
         )
        (else
          (let ((gp-0 (-> self count)))
            (cond
              ((< gp-0 (-> self max-count))
               (let ((a0-6 (krew-collection-item-spawn self (-> self data-vector gp-0))))
                 (when a0-6
                   (set! (-> self slave 0) (process->handle a0-6))
                   (set! (-> self time-limit) (the-as time-frame (-> self data-int32 gp-0)))
                   (set! (-> self start-time) (-> self clock frame-counter))
                   (let ((v0-1 (the-as object (+ (-> self count) 1))))
                     (set! (-> self count) (the-as int v0-1))
                     v0-1
                     )
                   )
                 )
               )
              (else
                (go-virtual complete)
                )
              )
            )
          )
        )
      )
    )
  )

;; failed to figure out what this is:
(set-subtask-hook!
  *game-info*
  73
  3
  (lambda :behavior task-manager
    ()
    (local-vars (v1-2 symbol))
    (until (or v1-2 (and *target* (logtest? (focus-status pilot) (-> *target* focus-status))))
      (suspend)
      (let ((f0-0 122880.0))
        (set! v1-2 (< (* f0-0 f0-0) (vector-vector-distance-squared (-> self begin-pos) (target-pos 0))))
        )
      )
    (set-setting! 'airlock #f 0 0)
    (set! (-> self count) 0)
    (set! (-> self hud-counter)
          (ppointer->handle (process-spawn hud-moneybag :init hud-init-by-other :to *target*))
          )
    (send-event *traffic-manager* 'set-target-level #x3f800000)
    (set! (-> self state-time) (-> self clock frame-counter))
    (while (< (- (-> self clock frame-counter) (-> self state-time)) (seconds 5))
      (suspend)
      )
    (send-event *traffic-manager* 'set-alert-level 2)
    (send-event *traffic-manager* 'set-alert-duration #xa4cb80)
    )
  )

;; failed to figure out what this is:
(set-subtask-hook!
  *game-info*
  73
  5
  (lambda :behavior task-manager () (the-as object (kill-all-children self)))
  )

;; failed to figure out what this is:
(set-subtask-hook!
  *game-info*
  73
  4
  (lambda :behavior task-manager
    ()
    (send-event *traffic-manager* 'decrease-alert-level 0)
    (send-event *traffic-manager* 'set-alert-duration 9000)
    (set! (-> self state-time) (-> self clock frame-counter))
    (while (< (- (-> self clock frame-counter) (-> self state-time)) (seconds 2))
      (suspend)
      )
    (the-as object (talker-spawn-func (-> *talker-speech* 88) *entity-pool* (target-pos 0) (the-as region #f)))
    )
  )




