;;-*-Lisp-*-
(in-package goal)

;; definition of type kid-escort
(deftype kid-escort (bot)
  ((travel-anim-interp  float              :offset-assert 992)
   (arrest-attempt-time time-frame         :offset-assert 1000)
   (arrestor-handle     handle             :offset-assert 1008)
   (crocadog-handle     handle             :offset-assert 1016)
   (exit-vehicle-dest   vector     :inline :offset        368)
   )
  :heap-base #x380
  :method-count-assert 240
  :size-assert         #x400
  :flag-assert         #xf003800400
  (:methods
    (kid-escort-method-225 () none 225)
    (kid-escort-method-226 () none 226)
    (kid-escort-method-227 () none 227)
    (kid-escort-method-228 () none 228)
    (kid-escort-method-229 () none 229)
    (kid-escort-method-230 () none 230)
    (kid-escort-method-231 () none 231)
    (kid-escort-method-232 () none 232)
    (kid-escort-method-233 () none 233)
    (kid-escort-method-234 () none 234)
    (kid-escort-method-235 () none 235)
    (kid-escort-method-236 () none 236)
    (kid-escort-method-237 () none 237)
    (kid-escort-method-238 () none 238)
    (kid-escort-method-239 () none 239)
    )
  )

;; definition for method 3 of type kid-escort
(defmethod inspect kid-escort ((obj kid-escort))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bot inspect)))
    (t9-0 obj)
    )
  (format #t "~2Ttravel-anim-interp: ~f~%" (-> obj travel-anim-interp))
  (format #t "~2Tarrest-attempt-time: ~D~%" (-> obj arrest-attempt-time))
  (format #t "~2Tarrestor-handle: ~D~%" (-> obj arrestor-handle))
  (format #t "~2Tcrocadog-handle: ~D~%" (-> obj crocadog-handle))
  (format #t "~2Texit-vehicle-dest: ~`vector`P~%" (-> obj exit-vehicle-dest))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(defskelgroup skel-kid-escort kid-escort kid-escort-lod0-jg kid-escort-idle0-ja
              ((kid-escort-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2)
              :shadow kid-escort-shadow-mg
              :origin-joint-index 13
              )

;; definition of type kidesct-wait-spot
(deftype kidesct-wait-spot (ai-task)
  ((check-done   basic   :offset  32)
   (which-spot   int8    :offset  36)
   (num-spots    uint8   :offset  37)
   (spot-indexes int8  6 :offset  38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type kidesct-wait-spot
(defmethod inspect kidesct-wait-spot ((obj kidesct-wait-spot))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[6] @ #x~X~%" (-> obj spot-indexes))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
