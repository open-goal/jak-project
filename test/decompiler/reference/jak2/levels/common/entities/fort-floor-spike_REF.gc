;;-*-Lisp-*-
(in-package goal)

;; definition of type spike-row-info
(deftype spike-row-info (structure)
  ((sync      sync-linear           :inline :offset-assert   0)
   (table-ptr (inline-array vector)         :offset-assert  16)
   (on-ratio  float                         :offset-assert  20)
   (state     int32                         :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type spike-row-info
(defmethod inspect spike-row-info ((obj spike-row-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'spike-row-info)
  (format #t "~1Tsync: #<sync-linear @ #x~X>~%" (-> obj sync))
  (format #t "~1Ttable-ptr: #x~X~%" (-> obj table-ptr))
  (format #t "~1Ton-ratio: ~f~%" (-> obj on-ratio))
  (format #t "~1Tstate: ~D~%" (-> obj state))
  (label cfg-4)
  obj
  )

;; definition of type spike-row-info-array
(deftype spike-row-info-array (inline-array-class)
  ((data spike-row-info :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type spike-row-info-array
(defmethod inspect spike-row-info-array ((obj spike-row-info-array))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(set! (-> spike-row-info-array heap-base) (the-as uint 32))

;; definition of type fort-floor-spike
(deftype fort-floor-spike (process-drawable)
  ((pos-table        (inline-array vector)   :offset-assert 200)
   (spike-row        spike-row-info-array    :offset-assert 204)
   (spike-dim        basic                 2 :offset-assert 208)
   (attack-id        int32                   :offset-assert 216)
   (no-overlap-timer uint64                  :offset-assert 224)
   )
  :heap-base #x70
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  (:methods
    (idle () _type_ :state 20)
    (fort-floor-spike-method-21 (_type_) none 21)
    (fort-floor-spike-method-22 (_type_) collide-shape-moving 22)
    (fort-floor-spike-method-23 (_type_) symbol 23)
    )
  )

;; definition for method 3 of type fort-floor-spike
(defmethod inspect fort-floor-spike ((obj fort-floor-spike))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tpos-table: #x~X~%" (-> obj pos-table))
  (format #t "~2Tspike-row: ~A~%" (-> obj spike-row))
  (format #t "~2Tspike-dim[2] @ #x~X~%" (-> obj spike-dim))
  (format #t "~2Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~2Tno-overlap-timer: ~D~%" (-> obj no-overlap-timer))
  (label cfg-4)
  obj
  )

;; definition for function joint-mod-set-y-callback
;; INFO: Used lq/sq
(defun joint-mod-set-y-callback ((arg0 cspace) (arg1 transformq))
  "TODO - investigate weird casting"
  (let ((a2-0 (-> arg0 param1))
        (a3-0 (the-as object (-> arg0 param2)))
        (v1-0 (new 'stack-no-clear 'transformq))
        )
    (set! (-> v1-0 trans quad) (-> arg1 trans quad))
    (set! (-> v1-0 quat quad) (-> arg1 quat quad))
    (set! (-> v1-0 scale quad) (-> arg1 scale quad))
    (set! (-> v1-0 trans y) (fmin -4096.0 (-> (the-as vector (+ (* (the-as int a3-0) 16) (the-as int a2-0))) y)))
    (cspace<-parented-transformq-joint! arg0 v1-0)
    )
  (none)
  )

;; definition for method 21 of type fort-floor-spike
;; WARN: Return type mismatch int vs none.
(defmethod fort-floor-spike-method-21 fort-floor-spike ((obj fort-floor-spike))
  0
  (none)
  )

;; definition for method 22 of type fort-floor-spike
;; WARN: Return type mismatch int vs collide-shape-moving.
(defmethod fort-floor-spike-method-22 fort-floor-spike ((obj fort-floor-spike))
  (the-as collide-shape-moving 0)
  )

;; definition for method 23 of type fort-floor-spike
;; WARN: Return type mismatch int vs symbol.
(defmethod fort-floor-spike-method-23 fort-floor-spike ((obj fort-floor-spike))
  (the-as symbol 0)
  )

;; failed to figure out what this is:
(defstate idle (fort-floor-spike)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as
      object
      (case event-type
        (('touched)
         (when (+ (-> self clock frame-counter) (seconds -2))
           (let* ((s3-0 proc)
                  (s4-0 (if (type? s3-0 process-drawable)
                            (the-as process-drawable s3-0)
                            )
                        )
                  )
             (when s4-0
               (let ((s3-1 (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> self root quat)))
                     (s4-1
                       (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> s4-0 root trans) (-> self root trans)) 1.0)
                       )
                     )
                 (vector-flatten! s4-1 s4-1 s3-1)
                 (set! (-> s4-1 y) 0.0)
                 (vector-normalize! s4-1 1.0)
                 (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
                   (set! (-> a1-8 from) (process->ppointer self))
                   (set! (-> a1-8 num-params) 2)
                   (set! (-> a1-8 message) 'attack)
                   (set! (-> a1-8 param 0) (-> event param 0))
                   (let ((v1-11 (new 'static 'attack-info :mask (attack-info-mask vector mode shove-back shove-up id))))
                     (set! (-> v1-11 id) (the-as uint (-> self attack-id)))
                     (set! (-> v1-11 mode) 'deadly)
                     (set! (-> v1-11 shove-up) 24576.0)
                     (set! (-> v1-11 shove-back) 16384.0)
                     (set! (-> v1-11 vector quad) (-> s4-1 quad))
                     (set! (-> a1-8 param 1) (the-as uint v1-11))
                     )
                   (send-event-function proc a1-8)
                   )
                 )
               (let ((v0-0 (-> self clock frame-counter)))
                 (set! (-> self no-overlap-timer) (the-as uint v0-0))
                 v0-0
                 )
               )
             )
           )
         )
        )
      )
    )
  :enter (behavior ()
    (set! (-> self no-overlap-timer) (the-as uint 0))
    0
    (none)
    )
  :code (the-as (function none :behavior fort-floor-spike) sleep-code)
  :post (behavior ()
    (dotimes (gp-0 (the-as int (-> self spike-dim 0)))
      (let ((s5-0 (-> self spike-row data gp-0)))
        (let ((f0-0 (get-norm! (-> s5-0 sync) 0)))
          (cond
            ((< (-> s5-0 on-ratio) f0-0)
             (set! (-> s5-0 state) 0)
             0
             )
            (else
              (set! (-> s5-0 state) 1)
              )
            )
          )
        (dotimes (s4-0 (the-as int (-> self spike-dim 1)))
          (cond
            ((zero? (-> s5-0 state))
             (seek!
               (-> s5-0 table-ptr s4-0 y)
               (* 4096.0 (- -4.0 (the float s4-0)))
               (* 131072.0 (-> self clock seconds-per-frame))
               )
             )
            (else
              (let ((f30-0 (-> s5-0 table-ptr s4-0 y))
                    (f28-0 (* 4096.0 (+ -1.0 (the float s4-0))))
                    )
                (seek! (-> s5-0 table-ptr s4-0 y) f28-0 (* 131072.0 (-> self clock seconds-per-frame)))
                (if (and (< f30-0 f28-0) (= (-> s5-0 table-ptr gp-0 y) f28-0))
                    (sound-play "floor-spike" :position (-> s5-0 table-ptr gp-0))
                    )
                )
              )
            )
          )
        )
      )
    (transform-post)
    (none)
    )
  )

;; definition for method 7 of type fort-floor-spike
;; WARN: Return type mismatch process-drawable vs fort-floor-spike.
(defmethod relocate fort-floor-spike ((obj fort-floor-spike) (arg0 int))
  (if (nonzero? (-> obj spike-row))
      (&+! (-> obj spike-row) arg0)
      )
  (the-as fort-floor-spike ((method-of-type process-drawable relocate) obj arg0))
  )

;; definition for method 11 of type fort-floor-spike
;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! fort-floor-spike ((obj fort-floor-spike) (arg0 entity-actor))
  (fort-floor-spike-method-22 obj)
  (process-drawable-from-entity! obj arg0)
  (fort-floor-spike-method-21 obj)
  (fort-floor-spike-method-23 obj)
  (let* ((v1-6 *game-info*)
         (a0-6 (+ (-> v1-6 attack-id) 1))
         )
    (set! (-> v1-6 attack-id) a0-6)
    (set! (-> obj attack-id) (the-as int a0-6))
    )
  (go (method-of-object obj idle))
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-fort-floor-spike-a fort-floor-spike-a 0 4
              ((1 (meters 20)) (2 (meters 40)) (3 (meters 999999)))
              :bounds (static-spherem 0 0 0 12)
              )

;; failed to figure out what this is:
(defskelgroup skel-fort-floor-spike-b fort-floor-spike-b fort-floor-spike-b-lod0-jg fort-floor-spike-b-idle-ja
              ((fort-floor-spike-b-lod0-mg (meters 20))
               (fort-floor-spike-b-lod1-mg (meters 40))
               (fort-floor-spike-b-lod2-mg (meters 999999))
               )
              :bounds (static-spherem 0 0 0 12)
              )

;; failed to figure out what this is:
(defskelgroup skel-fort-floor-spike-c fort-floor-spike-c fort-floor-spike-c-lod0-jg fort-floor-spike-c-idle-ja
              ((fort-floor-spike-c-lod0-mg (meters 20))
               (fort-floor-spike-c-lod1-mg (meters 40))
               (fort-floor-spike-c-lod2-mg (meters 999999))
               )
              :bounds (static-spherem 0 0 0 12)
              )

;; definition of type fort-floor-spike-a
(deftype fort-floor-spike-a (fort-floor-spike)
  ()
  :heap-base #x70
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  )

;; definition for method 3 of type fort-floor-spike-a
(defmethod inspect fort-floor-spike-a ((obj fort-floor-spike-a))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type fort-floor-spike inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 21 of type fort-floor-spike-a
;; WARN: Return type mismatch int vs none.
(defmethod fort-floor-spike-method-21 fort-floor-spike-a ((obj fort-floor-spike-a))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fort-floor-spike-a" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((a0-3 (-> obj skel root-channel 0)))
    (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 4)))
    (set! (-> a0-3 frame-num) 0.0)
    (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim (-> obj draw art-group data 4))
      num-func-identity
      )
    )
  (transform-post)
  (none)
  )

;; definition for method 22 of type fort-floor-spike-a
;; INFO: Used lq/sq
(defmethod fort-floor-spike-method-22 fort-floor-spike-a ((obj fort-floor-spike-a))
  (local-vars (sv-16 collide-shape-prim-mesh) (sv-32 type) (sv-48 collide-shape-moving))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 8) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 9))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak bot enemy hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 49152.0)
      (set! (-> s5-0 root-prim) s4-0)
      (let* ((s3-0 '((0 4 17203) (1 5 17203) (2 6 17203) (3 7 17203) (4 8 17203) (5 9 17203) (6 10 17203) (7 11 17203)))
             (s2-0 (car s3-0))
             )
        (while (not (null? s3-0))
          (let ((s1-0 (method-of-type collide-shape-prim-mesh new))
                (s0-0 'process)
                )
            (set! sv-32 collide-shape-prim-mesh)
            (set! sv-48 s5-0)
            (let ((a3-2 (command-get-int (car s2-0) 0))
                  (t0-1 0)
                  )
              (set! sv-16 (s1-0 s0-0 sv-32 sv-48 (the-as uint a3-2) (the-as uint t0-1)))
              )
            )
          (let ((s1-1 sv-16))
            (set! (-> s1-1 prim-core collide-as) (-> s4-0 prim-core collide-as))
            (set! (-> s1-1 prim-core collide-with) (-> s4-0 prim-core collide-with))
            (set! (-> s1-1 prim-core action) (-> s4-0 prim-core action))
            (set! (-> s1-1 transform-index) (command-get-int (car (cdr s2-0)) 0))
            )
          (set-vector! (-> sv-16 local-sphere) 0.0 0.0 0.0 (command-get-float (car (cdr (cdr s2-0))) 0.0))
          (set! s3-0 (cdr s3-0))
          (set! s2-0 (car s3-0))
          )
        )
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-24 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-24 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-24 prim-core collide-with))
      )
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root) s5-0)
    s5-0
    )
  )

;; definition for method 23 of type fort-floor-spike-a
;; INFO: Used lq/sq
(defmethod fort-floor-spike-method-23 fort-floor-spike-a ((obj fort-floor-spike-a))
  (local-vars (sv-64 cspace))
  (let ((s5-0 2)
        (s4-0 4)
        )
    (set! (-> obj spike-dim 0) (the-as basic s5-0))
    (set! (-> obj spike-dim 1) (the-as basic s4-0))
    (set! (-> obj spike-row) (new 'process 'spike-row-info-array s5-0))
    (set! (-> obj pos-table) (new 'static 'inline-array vector 8
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               )
          )
    (let ((s3-0 (-> obj pos-table))
          (s2-0 4)
          (s1-0 11)
          )
      (dotimes (s0-0 (+ (- 1 s2-0) s1-0))
        (set! sv-64 (-> obj node-list data (+ s2-0 s0-0)))
        (vector<-cspace! (-> s3-0 s0-0) sv-64)
        (set! (-> s3-0 s0-0 y) 0.0)
        (set! (-> sv-64 param0) joint-mod-set-y-callback)
        (set! (-> sv-64 param1) (the-as basic s3-0))
        (set! (-> sv-64 param2) (the-as basic s0-0))
        )
      )
    (dotimes (s3-1 s5-0)
      (let ((s2-1 (-> obj spike-row data s3-1)))
        (let ((a1-2 (new 'stack-no-clear 'sync-info-params)))
          (let ((v1-19 0))
            (if #t
                (set! v1-19 (logior v1-19 1))
                )
            (set! (-> a1-2 sync-type) (the-as basic 'sync-linear))
            (set! (-> a1-2 sync-flags) (the-as sync-flags v1-19))
            )
          (set! (-> a1-2 entity) #f)
          (set! (-> a1-2 period) (the-as uint 1200))
          (let ((f0-2 (* 0.25 (the float s3-1))))
            (set! (-> a1-2 percent) (- f0-2 (* (the float (the int (/ f0-2 1.0))) 1.0)))
            )
          (initialize! (-> s2-1 sync) a1-2)
          )
        (set! (-> s2-1 on-ratio) 0.375)
        (set! (-> s2-1 state) 0)
        (set! (-> s2-1 table-ptr) (the-as (inline-array vector) (-> obj pos-table (* s3-1 s4-0))))
        )
      )
    )
  #f
  )

;; definition of type fort-floor-spike-b
(deftype fort-floor-spike-b (fort-floor-spike)
  ()
  :heap-base #x70
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  )

;; definition for method 3 of type fort-floor-spike-b
(defmethod inspect fort-floor-spike-b ((obj fort-floor-spike-b))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type fort-floor-spike inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 21 of type fort-floor-spike-b
;; WARN: Return type mismatch int vs none.
(defmethod fort-floor-spike-method-21 fort-floor-spike-b ((obj fort-floor-spike-b))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fort-floor-spike-b" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((a0-3 (-> obj skel root-channel 0)))
    (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 4)))
    (set! (-> a0-3 frame-num) 0.0)
    (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim (-> obj draw art-group data 4))
      num-func-identity
      )
    )
  (transform-post)
  (none)
  )

;; definition for method 22 of type fort-floor-spike-b
;; INFO: Used lq/sq
(defmethod fort-floor-spike-method-22 fort-floor-spike-b ((obj fort-floor-spike-b))
  (local-vars (sv-16 collide-shape-prim-mesh) (sv-32 type) (sv-48 collide-shape-moving))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 10) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 11))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak bot enemy hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 49152.0)
      (set! (-> s5-0 root-prim) s4-0)
      (let* ((s3-0 '((0 4 16384)
                     (1 5 16384)
                     (2 6 16384)
                     (3 7 16384)
                     (4 8 16384)
                     (5 9 16384)
                     (6 10 16384)
                     (7 11 16384)
                     (8 12 16384)
                     (9 13 16384)
                     )
                   )
             (s2-0 (car s3-0))
             )
        (while (not (null? s3-0))
          (let ((s1-0 (method-of-type collide-shape-prim-mesh new))
                (s0-0 'process)
                )
            (set! sv-32 collide-shape-prim-mesh)
            (set! sv-48 s5-0)
            (let ((a3-2 (command-get-int (car s2-0) 0))
                  (t0-1 0)
                  )
              (set! sv-16 (s1-0 s0-0 sv-32 sv-48 (the-as uint a3-2) (the-as uint t0-1)))
              )
            )
          (let ((s1-1 sv-16))
            (set! (-> s1-1 prim-core collide-as) (-> s4-0 prim-core collide-as))
            (set! (-> s1-1 prim-core collide-with) (-> s4-0 prim-core collide-with))
            (set! (-> s1-1 prim-core action) (-> s4-0 prim-core action))
            (set! (-> s1-1 transform-index) (command-get-int (car (cdr s2-0)) 0))
            )
          (set-vector! (-> sv-16 local-sphere) 0.0 0.0 0.0 (command-get-float (car (cdr (cdr s2-0))) 0.0))
          (set! s3-0 (cdr s3-0))
          (set! s2-0 (car s3-0))
          )
        )
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-24 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-24 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-24 prim-core collide-with))
      )
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root) s5-0)
    s5-0
    )
  )

;; definition for method 23 of type fort-floor-spike-b
;; INFO: Used lq/sq
(defmethod fort-floor-spike-method-23 fort-floor-spike-b ((obj fort-floor-spike-b))
  (local-vars (sv-64 cspace))
  (let ((s5-0 2)
        (s4-0 5)
        )
    (set! (-> obj spike-dim 0) (the-as basic s5-0))
    (set! (-> obj spike-dim 1) (the-as basic s4-0))
    (set! (-> obj spike-row) (new 'process 'spike-row-info-array s5-0))
    (set! (-> obj pos-table) (new 'static 'inline-array vector 8
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               )
          )
    (let ((s3-0 (-> obj pos-table))
          (s2-0 4)
          (s1-0 13)
          )
      (dotimes (s0-0 (+ (- 1 s2-0) s1-0))
        (set! sv-64 (-> obj node-list data (+ s2-0 s0-0)))
        (vector<-cspace! (-> s3-0 s0-0) sv-64)
        (set! (-> s3-0 s0-0 y) 0.0)
        (set! (-> sv-64 param0) joint-mod-set-y-callback)
        (set! (-> sv-64 param1) (the-as basic s3-0))
        (set! (-> sv-64 param2) (the-as basic s0-0))
        )
      )
    (dotimes (s3-1 s5-0)
      (let ((s2-1 (-> obj spike-row data s3-1)))
        (let ((a1-2 (new 'stack-no-clear 'sync-info-params)))
          (let ((v1-19 0))
            (if #t
                (set! v1-19 (logior v1-19 1))
                )
            (set! (-> a1-2 sync-type) (the-as basic 'sync-linear))
            (set! (-> a1-2 sync-flags) (the-as sync-flags v1-19))
            )
          (set! (-> a1-2 entity) #f)
          (set! (-> a1-2 period) (the-as uint 1200))
          (let ((f0-2 (* 0.25 (the float s3-1))))
            (set! (-> a1-2 percent) (- f0-2 (* (the float (the int (/ f0-2 1.0))) 1.0)))
            )
          (initialize! (-> s2-1 sync) a1-2)
          )
        (set! (-> s2-1 on-ratio) 0.375)
        (set! (-> s2-1 state) 0)
        (set! (-> s2-1 table-ptr) (the-as (inline-array vector) (-> obj pos-table (* s3-1 s4-0))))
        )
      )
    )
  #f
  )

;; definition of type fort-floor-spike-c
(deftype fort-floor-spike-c (fort-floor-spike)
  ()
  :heap-base #x70
  :method-count-assert 24
  :size-assert         #xe8
  :flag-assert         #x18007000e8
  )

;; definition for method 3 of type fort-floor-spike-c
(defmethod inspect fort-floor-spike-c ((obj fort-floor-spike-c))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type fort-floor-spike inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 21 of type fort-floor-spike-c
;; WARN: Return type mismatch int vs none.
(defmethod fort-floor-spike-method-21 fort-floor-spike-c ((obj fort-floor-spike-c))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fort-floor-spike-c" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((a0-3 (-> obj skel root-channel 0)))
    (set! (-> a0-3 frame-group) (the-as art-joint-anim (-> obj draw art-group data 4)))
    (set! (-> a0-3 frame-num) 0.0)
    (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim (-> obj draw art-group data 4))
      num-func-identity
      )
    )
  (transform-post)
  (none)
  )

;; definition for method 22 of type fort-floor-spike-c
;; INFO: Used lq/sq
(defmethod fort-floor-spike-method-22 fort-floor-spike-c ((obj fort-floor-spike-c))
  (local-vars (sv-16 collide-shape-prim-mesh) (sv-32 type) (sv-48 collide-shape-moving))
  (let ((s5-0 (new 'process 'collide-shape-moving obj (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 15) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 16))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak bot enemy hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 49152.0)
      (set! (-> s5-0 root-prim) s4-0)
      (let* ((s3-0 '((0 4 16384)
                     (1 5 16384)
                     (2 6 16384)
                     (3 7 16384)
                     (4 8 16384)
                     (5 9 16384)
                     (6 10 16384)
                     (7 11 16384)
                     (8 12 16384)
                     (9 13 16384)
                     (10 15 16384)
                     (11 16 16384)
                     (12 14 16384)
                     (13 15 16384)
                     (14 16 16384)
                     )
                   )
             (s2-0 (car s3-0))
             )
        (while (not (null? s3-0))
          (let ((s1-0 (method-of-type collide-shape-prim-mesh new))
                (s0-0 'process)
                )
            (set! sv-32 collide-shape-prim-mesh)
            (set! sv-48 s5-0)
            (let ((a3-2 (command-get-int (car s2-0) 0))
                  (t0-1 0)
                  )
              (set! sv-16 (s1-0 s0-0 sv-32 sv-48 (the-as uint a3-2) (the-as uint t0-1)))
              )
            )
          (let ((s1-1 sv-16))
            (set! (-> s1-1 prim-core collide-as) (-> s4-0 prim-core collide-as))
            (set! (-> s1-1 prim-core collide-with) (-> s4-0 prim-core collide-with))
            (set! (-> s1-1 prim-core action) (-> s4-0 prim-core action))
            (set! (-> s1-1 transform-index) (command-get-int (car (cdr s2-0)) 0))
            )
          (set-vector! (-> sv-16 local-sphere) 0.0 0.0 0.0 (command-get-float (car (cdr (cdr s2-0))) 0.0))
          (set! s3-0 (cdr s3-0))
          (set! s2-0 (car s3-0))
          )
        )
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-24 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-24 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-24 prim-core collide-with))
      )
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> obj root) s5-0)
    s5-0
    )
  )

;; definition for method 23 of type fort-floor-spike-c
;; INFO: Used lq/sq
(defmethod fort-floor-spike-method-23 fort-floor-spike-c ((obj fort-floor-spike-c))
  (local-vars (sv-64 cspace))
  (let ((s5-0 3)
        (s4-0 5)
        )
    (set! (-> obj spike-dim 0) (the-as basic s5-0))
    (set! (-> obj spike-dim 1) (the-as basic s4-0))
    (set! (-> obj spike-row) (new 'process 'spike-row-info-array s5-0))
    (set! (-> obj pos-table) (new 'static 'inline-array vector 8
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               )
          )
    (let ((s3-0 (-> obj pos-table))
          (s2-0 4)
          (s1-0 18)
          )
      (dotimes (s0-0 (+ (- 1 s2-0) s1-0))
        (set! sv-64 (-> obj node-list data (+ s2-0 s0-0)))
        (vector<-cspace! (-> s3-0 s0-0) sv-64)
        (set! (-> s3-0 s0-0 y) 0.0)
        (set! (-> sv-64 param0) joint-mod-set-y-callback)
        (set! (-> sv-64 param1) (the-as basic s3-0))
        (set! (-> sv-64 param2) (the-as basic s0-0))
        )
      )
    (dotimes (s3-1 s5-0)
      (let ((s2-1 (-> obj spike-row data s3-1)))
        (let ((a1-2 (new 'stack-no-clear 'sync-info-params)))
          (let ((v1-19 0))
            (if #t
                (set! v1-19 (logior v1-19 1))
                )
            (set! (-> a1-2 sync-type) (the-as basic 'sync-linear))
            (set! (-> a1-2 sync-flags) (the-as sync-flags v1-19))
            )
          (set! (-> a1-2 entity) #f)
          (set! (-> a1-2 period) (the-as uint 1200))
          (let ((f0-2 (* 0.25 (the float s3-1))))
            (set! (-> a1-2 percent) (- f0-2 (* (the float (the int (/ f0-2 1.0))) 1.0)))
            )
          (initialize! (-> s2-1 sync) a1-2)
          )
        (set! (-> s2-1 on-ratio) 0.375)
        (set! (-> s2-1 state) 0)
        (set! (-> s2-1 table-ptr) (the-as (inline-array vector) (-> obj pos-table (* s3-1 s4-0))))
        )
      )
    )
  #f
  )
