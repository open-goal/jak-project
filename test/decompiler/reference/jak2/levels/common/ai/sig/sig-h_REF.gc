;;-*-Lisp-*-
(in-package goal)

;; definition of type sig-plasma
(deftype sig-plasma (structure)
  ((flags            plasma-flags  :offset-assert   0)
   (level            float         :offset-assert   4)
   (min-level        float         :offset-assert   8)
   (charge-speed     float         :offset-assert  12)
   (powerup-sound-id sound-id      :offset-assert  16)
   (plasma-sound-id  sound-id      :offset-assert  20)
   )
  :pack-me
  :method-count-assert 15
  :size-assert         #x18
  :flag-assert         #xf00000018
  (:methods
    (sig-plasma-method-9 (_type_) none 9)
    (sig-plasma-method-10 (_type_) symbol 10)
    (sig-plasma-method-11 (_type_ symbol) none 11)
    (sig-plasma-method-12 (_type_) none 12)
    (sig-plasma-method-13 (_type_) symbol 13)
    (sig-plasma-method-14 (_type_ process-focusable) none 14)
    )
  )

;; definition for method 3 of type sig-plasma
(defmethod inspect sig-plasma ((obj sig-plasma))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sig-plasma)
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tlevel: ~f~%" (-> obj level))
  (format #t "~1Tmin-level: ~f~%" (-> obj min-level))
  (format #t "~1Tcharge-speed: ~f~%" (-> obj charge-speed))
  (format #t "~1Tpowerup-sound-id: ~D~%" (-> obj powerup-sound-id))
  (format #t "~1Tplasma-sound-id: ~D~%" (-> obj plasma-sound-id))
  (label cfg-4)
  obj
  )

;; definition of type sig-path-sample
(deftype sig-path-sample (structure)
  ((bytes  uint8      32      :offset-assert   0)
   (pos    vector     :inline :offset-assert  32)
   (quat   quaternion :inline :offset-assert  48)
   (flags  uint8              :offset         12)
   (pos-x  float              :offset         32)
   (pos-y  float              :offset         36)
   (pos-z  float              :offset         40)
   (quat-x float              :offset         48)
   (quat-y float              :offset         52)
   (quat-z float              :offset         56)
   (quat-w float              :offset         60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type sig-path-sample
;; ERROR: failed type prop at 14: add failed: sig-path-sample <integer 0>

(defmethod inspect sig-path-sample ((a0-0 sig-path-sample))
  (local-vars
    (v0-0 object)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 sig-path-sample)
    (a0-1 symbol)
    (a0-2 symbol)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a1-0 string)
    (a1-1 string)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-6 none)
    (a1-7 none)
    (a1-8 none)
    (a1-9 none)
    (a1-10 none)
    (a1-11 none)
    (a2-0 sig-path-sample)
    (a2-1 none)
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a3-0 symbol)
    (t9-0 (function _varargs_ object))
    (t9-1 (function _varargs_ object))
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    (f0-4 none)
    (f0-5 none)
    (f0-6 none)
    )
  (if (begin (not a0-0))
      (begin (set! a0-0 a0-0) (goto cfg-4))
      )
  (set! t9-0 format)
  (set! a0-1 #t)
  (set! a1-0 L77)
  (set! a2-0 a0-0)
  (set! a3-0 'sig-path-sample)
  (call! a0-1 a1-0 a2-0 a3-0)
  (set! t9-1 format)
  (set! a0-2 #t)
  (set! a1-1 L70)
  (set! a2-1 (the-as none (+ a0-0 0)))
  (call!)
  (set! t9-2 (the-as none format))
  (set! a0-3 (the-as none #t))
  (set! a1-2 (the-as none L69))
  (set! a2-2 (the-as none (-> a0-0 pos)))
  (call!)
  (set! t9-3 (the-as none format))
  (set! a0-4 (the-as none #t))
  (set! a1-3 (the-as none L68))
  (set! a2-3 (the-as none (-> a0-0 quat)))
  (call!)
  (set! t9-4 (the-as none format))
  (set! a0-5 (the-as none #t))
  (set! a1-4 (the-as none L76))
  (set! a2-4 (the-as none (-> a0-0 flags)))
  (call!)
  (set! t9-5 (the-as none format))
  (set! a0-6 (the-as none #t))
  (set! a1-5 (the-as none L67))
  (set! f0-0 (the-as none (-> a0-0 pos x)))
  (set! a2-5 (the-as none (fpr->gpr f0-0)))
  (call!)
  (set! t9-6 (the-as none format))
  (set! a0-7 (the-as none #t))
  (set! a1-6 (the-as none L66))
  (set! f0-1 (the-as none (-> a0-0 pos y)))
  (set! a2-6 (the-as none (fpr->gpr f0-1)))
  (call!)
  (set! t9-7 (the-as none format))
  (set! a0-8 (the-as none #t))
  (set! a1-7 (the-as none L65))
  (set! f0-2 (the-as none (-> a0-0 pos z)))
  (set! a2-7 (the-as none (fpr->gpr f0-2)))
  (call!)
  (set! t9-8 (the-as none format))
  (set! a0-9 (the-as none #t))
  (set! a1-8 (the-as none L64))
  (set! f0-3 (the-as none (-> a0-0 quat x)))
  (set! a2-8 (the-as none (fpr->gpr f0-3)))
  (call!)
  (set! t9-9 (the-as none format))
  (set! a0-10 (the-as none #t))
  (set! a1-9 (the-as none L63))
  (set! f0-4 (the-as none (-> a0-0 quat y)))
  (set! a2-9 (the-as none (fpr->gpr f0-4)))
  (call!)
  (set! t9-10 (the-as none format))
  (set! a0-11 (the-as none #t))
  (set! a1-10 (the-as none L62))
  (set! f0-5 (the-as none (-> a0-0 quat z)))
  (set! a2-10 (the-as none (fpr->gpr f0-5)))
  (call!)
  (set! t9-11 (the-as none format))
  (set! a0-12 (the-as none #t))
  (set! a1-11 (the-as none L61))
  (set! f0-6 (the-as none (-> a0-0 quat w)))
  (set! a2-11 (the-as none (fpr->gpr f0-6)))
  (call!)
  (label cfg-4)
  (set! v0-12 a0-0)
  (ret-value v0-12)
  )

;; definition of type sig-path
(deftype sig-path (basic)
  ((sample-count int32                           :offset-assert   4)
   (samples      (inline-array sig-path-sample)  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type sig-path
(defmethod inspect sig-path ((obj sig-path))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tsample-count: ~D~%" (-> obj sample-count))
  (format #t "~1Tsamples: #x~X~%" (-> obj samples))
  (label cfg-4)
  obj
  )

;; definition of type sig
(deftype sig (bot)
  ((fired-gun-count     uint32             :offset-assert 992)
   (sig-path            sig-path           :offset-assert 996)
   (sig-path-clock      clock              :offset-assert 1000)
   (travel-anim-interp  float              :offset-assert 1004)
   (platform-index      uint8              :offset-assert 1008)
   (played-unjam-time   time-frame         :offset-assert 1016)
   (sig-path-start-time time-frame         :offset-assert 1024)
   (sig-path-cur-time   time-frame         :offset-assert 1032)
   (sig-path-prev-time  time-frame         :offset-assert 1040)
   (plasma              sig-plasma :inline :offset        1048)
   (sig-path-prev-pos   vector     :inline :offset        368)
   )
  :heap-base #x3b0
  :method-count-assert 259
  :size-assert         #x430
  :flag-assert         #x10303b00430
  (:methods
    (whip () _type_ :state 225)
    (blast () _type_ :state 226)
    (chase () _type_ :state 227)
    (chase-attack () _type_ :state 228)
    (traveling () _type_ :state 229)
    (traveling-blocked () _type_ :state 230)
    (waiting-far () _type_ :state 231)
    (waiting-close () _type_ :state 232)
    (waiting-turn () _type_ :state 233)
    (waiting-crouched () _type_ :state 234)
    (charge-plasma () _type_ :state 235)
    (gun-jam () _type_ :state 236)
    (repair-gun () _type_ :state 237)
    (clean-gun () _type_ :state 238)
    (sig-path-run () _type_ :state 239)
    (sig-path-jump () _type_ :state 240)
    (sig-path-jump-land () _type_ :state 241)
    (sig-path-shoot-jump () _type_ :state 242)
    (sig-path-shoot-jump-land () _type_ :state 243)
    (sig-path-idle () _type_ :state 244)
    (sig-method-245 (_type_) symbol 245)
    (sig-method-246 (_type_) symbol 246)
    (fire-gun (_type_ vector) (pointer process) 247)
    (sig-method-248 (_type_ sig-path-sample) none 248)
    (sig-method-249 (_type_ sig-path) none 249)
    (sig-method-250 (_type_) symbol 250)
    (sig-method-251 (_type_) symbol 251)
    (sig-method-252 (_type_) symbol 252)
    (sig-method-253 (_type_) none 253)
    (sig-method-254 (_type_) symbol 254)
    (sig-method-255 (_type_) symbol 255)
    (sig-method-256 (_type_) none 256)
    (sig-method-257 (_type_) symbol 257)
    (sig-method-258 (_type_) none 258)
    )
  )

;; definition for method 3 of type sig
(defmethod inspect sig ((obj sig))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bot inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tfired-gun-count: ~D~%" (-> obj fired-gun-count))
  (format #t "~2Tsig-path: ~A~%" (-> obj sig-path))
  (format #t "~2Tsig-path-clock: ~A~%" (-> obj sig-path-clock))
  (format #t "~2Ttravel-anim-interp: ~f~%" (-> obj travel-anim-interp))
  (format #t "~2Tplatform-index: ~D~%" (-> obj platform-index))
  (format #t "~2Tplayed-unjam-time: ~D~%" (-> obj played-unjam-time))
  (format #t "~2Tsig-path-start-time: ~D~%" (-> obj sig-path-start-time))
  (format #t "~2Tsig-path-cur-time: ~D~%" (-> obj sig-path-cur-time))
  (format #t "~2Tsig-path-prev-time: ~D~%" (-> obj sig-path-prev-time))
  (format #t "~2Tplasma: #<sig-plasma @ #x~X>~%" (-> obj plasma))
  (format #t "~2Tsig-path-prev-pos: ~`vector`P~%" (-> obj event-param-point))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(defskelgroup skel-sig sig sig-lod0-jg sig-ready0-ja
              ((sig-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow sig-shadow-mg
              :origin-joint-index 25
              )

;; definition of type sigt-wait-spot
(deftype sigt-wait-spot (ai-task)
  ((check-done   (function sigt-wait-spot sig symbol)   :offset  32)
   (which-spot   int8                                   :offset  36)
   (num-spots    uint8                                  :offset  37)
   (spot-indexes uint8                                6 :offset  38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type sigt-wait-spot
(defmethod inspect sigt-wait-spot ((obj sigt-wait-spot))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[6] @ #x~X~%" (-> obj spot-indexes))
  (label cfg-4)
  obj
  )

;; definition of type sigt-choose-piston
(deftype sigt-choose-piston (ai-task)
  ((check-done    (function sigt-choose-piston sig symbol)   :offset  32)
   (which-spot    int8                                       :offset  36)
   (num-spots     uint8                                      :offset  37)
   (spot-indexes  uint8                                    4 :offset  38)
   (actor-indexes uint8                                    4 :offset  42)
   )
  :method-count-assert 15
  :size-assert         #x30
  :flag-assert         #xf00000030
  (:methods
    (sigt-choose-piston-method-12 (_type_ sig) symbol 12)
    (sigt-choose-piston-method-13 (_type_ sig) none 13)
    (sigt-choose-piston-method-14 (_type_ sig int) symbol 14)
    )
  )

;; definition for method 3 of type sigt-choose-piston
(defmethod inspect sigt-choose-piston ((obj sigt-choose-piston))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[4] @ #x~X~%" (-> obj spot-indexes))
  (format #t "~1Tactor-indexes[4] @ #x~X~%" (-> obj actor-indexes))
  (label cfg-4)
  obj
  )

;; definition of type sigt-riding-piston
(deftype sigt-riding-piston (ai-task)
  ((check-done   (function sigt-riding-piston sig symbol)   :offset  32)
   (which-spot   int8                                       :offset  36)
   (num-spots    uint8                                      :offset  37)
   (spot-indexes uint8                                    4 :offset  38)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (sigt-riding-piston-method-12 (_type_ sig) symbol 12)
    )
  )

;; definition for method 3 of type sigt-riding-piston
(defmethod inspect sigt-riding-piston ((obj sigt-riding-piston))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[4] @ #x~X~%" (-> obj spot-indexes))
  (label cfg-4)
  obj
  )

;; definition of type sigt-charge-plasma
(deftype sigt-charge-plasma (ai-task)
  ((check-done   (function sigt-charge-plasma sig symbol)   :offset  32)
   (which-spot   int8                                       :offset  36)
   (num-spots    uint8                                      :offset  37)
   (spot-indexes uint8                                    4 :offset  38)
   (actor-index  uint8                                      :offset  42)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type sigt-charge-plasma
(defmethod inspect sigt-charge-plasma ((obj sigt-charge-plasma))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[4] @ #x~X~%" (-> obj spot-indexes))
  (format #t "~1Tactor-index: ~D~%" (-> obj actor-index))
  (label cfg-4)
  obj
  )

;; definition of type sigt-fight-focus
(deftype sigt-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type sigt-fight-focus
(defmethod inspect sigt-fight-focus ((obj sigt-fight-focus))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (label cfg-4)
  obj
  )

;; definition of type sigt-repair-gun
(deftype sigt-repair-gun (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type sigt-repair-gun
(defmethod inspect sigt-repair-gun ((obj sigt-repair-gun))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
