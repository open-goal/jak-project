;;-*-Lisp-*-
(in-package goal)

;; definition of type sig-plasma
(deftype sig-plasma (structure)
  ((flags             plasma-flags)
   (level             float)
   (min-level         float)
   (charge-speed      float)
   (powerup-sound-id  sound-id)
   (plasma-sound-id   sound-id)
   )
  :pack-me
  (:methods
    (sig-plasma-method-9 (_type_) none)
    (sig-plasma-method-10 (_type_) symbol)
    (sig-plasma-method-11 (_type_ symbol) none)
    (sig-plasma-method-12 (_type_) none)
    (sig-plasma-method-13 (_type_) symbol)
    (sig-plasma-method-14 (_type_ process-focusable) none)
    )
  )

;; definition for method 3 of type sig-plasma
(defmethod inspect ((this sig-plasma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sig-plasma)
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tlevel: ~f~%" (-> this level))
  (format #t "~1Tmin-level: ~f~%" (-> this min-level))
  (format #t "~1Tcharge-speed: ~f~%" (-> this charge-speed))
  (format #t "~1Tpowerup-sound-id: ~D~%" (-> this powerup-sound-id))
  (format #t "~1Tplasma-sound-id: ~D~%" (-> this plasma-sound-id))
  (label cfg-4)
  this
  )

;; definition of type sig-path-sample
(deftype sig-path-sample (structure)
  ((bytes   uint8       32)
   (pos     vector      :inline)
   (quat    quaternion  :inline)
   (flags   uint8       :overlay-at (-> bytes 12))
   (pos-x   float       :overlay-at (-> pos data 0))
   (pos-y   float       :overlay-at (-> pos data 1))
   (pos-z   float       :overlay-at (-> pos data 2))
   (quat-x  float       :overlay-at (-> quat data 0))
   (quat-y  float       :overlay-at (-> quat data 1))
   (quat-z  float       :overlay-at (-> quat data 2))
   (quat-w  float       :overlay-at (-> quat data 3))
   )
  )

;; definition for method 3 of type sig-path-sample
;; ERROR: failed type prop at 14: add failed: sig-path-sample <integer 0>

(defmethod inspect ((a0-0 sig-path-sample))
  (local-vars
    (v0-0 object)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 sig-path-sample)
    (a0-1 symbol)
    (a0-2 symbol)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a1-0 string)
    (a1-1 string)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-6 none)
    (a1-7 none)
    (a1-8 none)
    (a1-9 none)
    (a1-10 none)
    (a1-11 none)
    (a2-0 sig-path-sample)
    (a2-1 none)
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a3-0 symbol)
    (t9-0 (function _varargs_ object))
    (t9-1 (function _varargs_ object))
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    (f0-4 none)
    (f0-5 none)
    (f0-6 none)
    )
  (if (begin (not a0-0))
      (begin (set! a0-0 a0-0) (goto cfg-4))
      )
  (set! t9-0 format)
  (set! a0-1 #t)
  (set! a1-0 L77)
  (set! a2-0 a0-0)
  (set! a3-0 'sig-path-sample)
  (call! a0-1 a1-0 a2-0 a3-0)
  (set! t9-1 format)
  (set! a0-2 #t)
  (set! a1-1 L70)
  (set! a2-1 (the-as none (+ a0-0 0)))
  (call!)
  (set! t9-2 (the-as none format))
  (set! a0-3 (the-as none #t))
  (set! a1-2 (the-as none L69))
  (set! a2-2 (the-as none (-> a0-0 pos)))
  (call!)
  (set! t9-3 (the-as none format))
  (set! a0-4 (the-as none #t))
  (set! a1-3 (the-as none L68))
  (set! a2-3 (the-as none (-> a0-0 quat)))
  (call!)
  (set! t9-4 (the-as none format))
  (set! a0-5 (the-as none #t))
  (set! a1-4 (the-as none L76))
  (set! a2-4 (the-as none (-> a0-0 flags)))
  (call!)
  (set! t9-5 (the-as none format))
  (set! a0-6 (the-as none #t))
  (set! a1-5 (the-as none L67))
  (set! f0-0 (the-as none (-> a0-0 pos x)))
  (set! a2-5 (the-as none (fpr->gpr f0-0)))
  (call!)
  (set! t9-6 (the-as none format))
  (set! a0-7 (the-as none #t))
  (set! a1-6 (the-as none L66))
  (set! f0-1 (the-as none (-> a0-0 pos y)))
  (set! a2-6 (the-as none (fpr->gpr f0-1)))
  (call!)
  (set! t9-7 (the-as none format))
  (set! a0-8 (the-as none #t))
  (set! a1-7 (the-as none L65))
  (set! f0-2 (the-as none (-> a0-0 pos z)))
  (set! a2-7 (the-as none (fpr->gpr f0-2)))
  (call!)
  (set! t9-8 (the-as none format))
  (set! a0-9 (the-as none #t))
  (set! a1-8 (the-as none L64))
  (set! f0-3 (the-as none (-> a0-0 quat x)))
  (set! a2-8 (the-as none (fpr->gpr f0-3)))
  (call!)
  (set! t9-9 (the-as none format))
  (set! a0-10 (the-as none #t))
  (set! a1-9 (the-as none L63))
  (set! f0-4 (the-as none (-> a0-0 quat y)))
  (set! a2-9 (the-as none (fpr->gpr f0-4)))
  (call!)
  (set! t9-10 (the-as none format))
  (set! a0-11 (the-as none #t))
  (set! a1-10 (the-as none L62))
  (set! f0-5 (the-as none (-> a0-0 quat z)))
  (set! a2-10 (the-as none (fpr->gpr f0-5)))
  (call!)
  (set! t9-11 (the-as none format))
  (set! a0-12 (the-as none #t))
  (set! a1-11 (the-as none L61))
  (set! f0-6 (the-as none (-> a0-0 quat w)))
  (set! a2-11 (the-as none (fpr->gpr f0-6)))
  (call!)
  (label cfg-4)
  (set! v0-12 a0-0)
  (ret-value v0-12)
  )

;; definition of type sig-path
(deftype sig-path (basic)
  ((sample-count  int32)
   (samples       (inline-array sig-path-sample))
   )
  )

;; definition for method 3 of type sig-path
(defmethod inspect ((this sig-path))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tsample-count: ~D~%" (-> this sample-count))
  (format #t "~1Tsamples: #x~X~%" (-> this samples))
  (label cfg-4)
  this
  )

;; definition of type sig
(deftype sig (bot)
  ((fired-gun-count      uint32)
   (sig-path             sig-path)
   (sig-path-clock       clock)
   (travel-anim-interp   float)
   (platform-index       uint8)
   (played-unjam-time    time-frame)
   (sig-path-start-time  time-frame)
   (sig-path-cur-time    time-frame)
   (sig-path-prev-time   time-frame)
   (plasma               sig-plasma  :inline :offset 1048)
   (sig-path-prev-pos    vector      :inline :overlay-at event-param-point)
   )
  (:state-methods
    whip
    blast
    chase
    chase-attack
    traveling
    traveling-blocked
    waiting-far
    waiting-close
    waiting-turn
    waiting-crouched
    charge-plasma
    gun-jam
    repair-gun
    clean-gun
    sig-path-run
    sig-path-jump
    sig-path-jump-land
    sig-path-shoot-jump
    sig-path-shoot-jump-land
    sig-path-idle
    )
  (:methods
    (sig-method-245 (_type_) symbol)
    (sig-method-246 (_type_) symbol)
    (fire-gun (_type_ vector) (pointer process))
    (sig-method-248 (_type_ sig-path-sample) none)
    (sig-method-249 (_type_ sig-path) none)
    (sig-method-250 (_type_) symbol)
    (sig-method-251 (_type_) symbol)
    (sig-method-252 (_type_) symbol)
    (sig-method-253 (_type_) none)
    (sig-method-254 (_type_) symbol)
    (sig-method-255 (_type_) symbol)
    (sig-method-256 (_type_) none)
    (sig-method-257 (_type_) symbol)
    (sig-method-258 (_type_) none)
    )
  )

;; definition for method 3 of type sig
(defmethod inspect ((this sig))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bot inspect)))
    (t9-0 this)
    )
  (format #t "~2Tfired-gun-count: ~D~%" (-> this fired-gun-count))
  (format #t "~2Tsig-path: ~A~%" (-> this sig-path))
  (format #t "~2Tsig-path-clock: ~A~%" (-> this sig-path-clock))
  (format #t "~2Ttravel-anim-interp: ~f~%" (-> this travel-anim-interp))
  (format #t "~2Tplatform-index: ~D~%" (-> this platform-index))
  (format #t "~2Tplayed-unjam-time: ~D~%" (-> this played-unjam-time))
  (format #t "~2Tsig-path-start-time: ~D~%" (-> this sig-path-start-time))
  (format #t "~2Tsig-path-cur-time: ~D~%" (-> this sig-path-cur-time))
  (format #t "~2Tsig-path-prev-time: ~D~%" (-> this sig-path-prev-time))
  (format #t "~2Tplasma: #<sig-plasma @ #x~X>~%" (-> this plasma))
  (format #t "~2Tsig-path-prev-pos: ~`vector`P~%" (-> this event-param-point))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-sig sig sig-lod0-jg sig-ready0-ja
              ((sig-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow sig-shadow-mg
              :origin-joint-index 25
              )

;; definition of type sigt-wait-spot
(deftype sigt-wait-spot (ai-task)
  ((check-done    (function sigt-wait-spot sig symbol)    :overlay-at (-> bytes 0))
   (which-spot    int8                                    :overlay-at (-> bytes 4))
   (num-spots     uint8                                   :overlay-at (-> bytes 5))
   (spot-indexes  uint8                                 6 :overlay-at (-> bytes 6))
   )
  )

;; definition for method 3 of type sigt-wait-spot
(defmethod inspect ((this sigt-wait-spot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnext: ~A~%" (-> this next))
  (format #t "~1Tprev: ~A~%" (-> this prev))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tunique-id: ~D~%" (-> this unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> this bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> this check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> this which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> this num-spots))
  (format #t "~1Tspot-indexes[6] @ #x~X~%" (-> this spot-indexes))
  (label cfg-4)
  this
  )

;; definition of type sigt-choose-piston
(deftype sigt-choose-piston (ai-task)
  ((check-done     (function sigt-choose-piston sig symbol)    :overlay-at (-> bytes 0))
   (which-spot     int8                                        :overlay-at (-> bytes 4))
   (num-spots      uint8                                       :overlay-at (-> bytes 5))
   (spot-indexes   uint8                                     4 :overlay-at (-> bytes 6))
   (actor-indexes  uint8                                     4 :overlay-at (-> bytes 10))
   )
  (:methods
    (sigt-choose-piston-method-12 (_type_ sig) symbol)
    (sigt-choose-piston-method-13 (_type_ sig) none)
    (sigt-choose-piston-method-14 (_type_ sig int) symbol)
    )
  )

;; definition for method 3 of type sigt-choose-piston
(defmethod inspect ((this sigt-choose-piston))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnext: ~A~%" (-> this next))
  (format #t "~1Tprev: ~A~%" (-> this prev))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tunique-id: ~D~%" (-> this unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> this bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> this check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> this which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> this num-spots))
  (format #t "~1Tspot-indexes[4] @ #x~X~%" (-> this spot-indexes))
  (format #t "~1Tactor-indexes[4] @ #x~X~%" (-> this actor-indexes))
  (label cfg-4)
  this
  )

;; definition of type sigt-riding-piston
(deftype sigt-riding-piston (ai-task)
  ((check-done    (function sigt-riding-piston sig symbol)    :overlay-at (-> bytes 0))
   (which-spot    int8                                        :overlay-at (-> bytes 4))
   (num-spots     uint8                                       :overlay-at (-> bytes 5))
   (spot-indexes  uint8                                     4 :overlay-at (-> bytes 6))
   )
  (:methods
    (sigt-riding-piston-method-12 (_type_ sig) symbol)
    )
  )

;; definition for method 3 of type sigt-riding-piston
(defmethod inspect ((this sigt-riding-piston))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnext: ~A~%" (-> this next))
  (format #t "~1Tprev: ~A~%" (-> this prev))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tunique-id: ~D~%" (-> this unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> this bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> this check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> this which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> this num-spots))
  (format #t "~1Tspot-indexes[4] @ #x~X~%" (-> this spot-indexes))
  (label cfg-4)
  this
  )

;; definition of type sigt-charge-plasma
(deftype sigt-charge-plasma (ai-task)
  ((check-done    (function sigt-charge-plasma sig symbol)    :overlay-at (-> bytes 0))
   (which-spot    int8                                        :overlay-at (-> bytes 4))
   (num-spots     uint8                                       :overlay-at (-> bytes 5))
   (spot-indexes  uint8                                     4 :overlay-at (-> bytes 6))
   (actor-index   uint8                                       :overlay-at (-> bytes 10))
   )
  )

;; definition for method 3 of type sigt-charge-plasma
(defmethod inspect ((this sigt-charge-plasma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnext: ~A~%" (-> this next))
  (format #t "~1Tprev: ~A~%" (-> this prev))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tunique-id: ~D~%" (-> this unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> this bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> this check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> this which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> this num-spots))
  (format #t "~1Tspot-indexes[4] @ #x~X~%" (-> this spot-indexes))
  (format #t "~1Tactor-index: ~D~%" (-> this actor-index))
  (label cfg-4)
  this
  )

;; definition of type sigt-fight-focus
(deftype sigt-fight-focus (ai-task)
  ()
  )

;; definition for method 3 of type sigt-fight-focus
(defmethod inspect ((this sigt-fight-focus))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnext: ~A~%" (-> this next))
  (format #t "~1Tprev: ~A~%" (-> this prev))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tunique-id: ~D~%" (-> this unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> this bytes))
  (label cfg-4)
  this
  )

;; definition of type sigt-repair-gun
(deftype sigt-repair-gun (ai-task)
  ()
  )

;; definition for method 3 of type sigt-repair-gun
(defmethod inspect ((this sigt-repair-gun))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tnext: ~A~%" (-> this next))
  (format #t "~1Tprev: ~A~%" (-> this prev))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tunique-id: ~D~%" (-> this unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> this bytes))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
