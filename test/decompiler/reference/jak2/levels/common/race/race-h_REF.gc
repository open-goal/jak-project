;;-*-Lisp-*-
(in-package goal)

;; definition of type race-turbo-pad
(deftype race-turbo-pad (structure)
  ((position  vector  :inline)
   (handle    handle)
   )
  )

;; definition for method 3 of type race-turbo-pad
(defmethod inspect ((this race-turbo-pad))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-turbo-pad)
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (label cfg-4)
  this
  )

;; definition of type race-decision-point
(deftype race-decision-point (structure)
  ((pos            float)
   (decision-type  uint8)
   (shortcuts      uint8)
   (safe-paths     uint8)
   )
  )

;; definition for method 3 of type race-decision-point
(defmethod inspect ((this race-decision-point))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-decision-point)
  (format #t "~1Tpos: ~f~%" (-> this pos))
  (format #t "~1Tdecision-type: ~D~%" (-> this decision-type))
  (format #t "~1Tshortcuts: ~D~%" (-> this shortcuts))
  (format #t "~1Tsafe-paths: ~D~%" (-> this safe-paths))
  (label cfg-4)
  this
  )

;; definition of type race-racer-info
(deftype race-racer-info (structure)
  ((rider        uint8)
   (vehicle      uint8)
   (flags        racer-info-flags)
   (seek-offset  int8)
   )
  )

;; definition for method 3 of type race-racer-info
(defmethod inspect ((this race-racer-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-racer-info)
  (format #t "~1Trider: ~D~%" (-> this rider))
  (format #t "~1Tvehicle: ~D~%" (-> this vehicle))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tseek-offset: ~D~%" (-> this seek-offset))
  (label cfg-4)
  this
  )

;; definition of type race-info
(deftype race-info (basic)
  ((race-mesh-name            string)
   (path-group-name           string)
   (task-node                 game-task-node)
   (mesh                      race-mesh)
   (ai-min-speed-factor       float)
   (ai-max-speed-factor       float)
   (ai-spread-factor          float)
   (start-sphere              sphere  :inline)
   (start-dir                 vector  :inline)
   (finish-sphere             sphere  :inline)
   (finish-dir                vector  :inline)
   (player-intro-pos          vector  :inline)
   (flags                     race-info-flags)
   (score                     uint8)
   (lap-count                 int8)
   (racer-count               int8)
   (turbo-pad-count           int8)
   (map-index                 int8)
   (decision-point-count      int8)
   (safe-paths                uint8)
   (turbo-pad-array           (inline-array race-turbo-pad))
   (racer-array               (inline-array race-racer-info))
   (decision-point-array      (inline-array race-decision-point))
   (level                     symbol)
   (borrow-level              symbol)
   (borrow                    pair)
   (manager                   handle)
   (manager-handle-init-hack  basic   :overlay-at manager)
   (hatch-actor-name          string)
   (countdown-scene           string)
   (complete-continue         string)
   (start-camera              string)
   (go-speech                 uint16)
   )
  (:methods
    (initialize-mesh (_type_) none)
    )
  )

;; definition for method 3 of type race-info
(defmethod inspect ((this race-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Trace-mesh-name: ~A~%" (-> this race-mesh-name))
  (format #t "~1Tpath-group-name: ~A~%" (-> this path-group-name))
  (format #t "~1Ttask-node: ~D~%" (-> this task-node))
  (format #t "~1Tmesh: ~A~%" (-> this mesh))
  (format #t "~1Tai-min-speed-factor: ~f~%" (-> this ai-min-speed-factor))
  (format #t "~1Tai-max-speed-factor: ~f~%" (-> this ai-max-speed-factor))
  (format #t "~1Tai-spread-factor: ~f~%" (-> this ai-spread-factor))
  (format #t "~1Tstart-sphere: #<sphere @ #x~X>~%" (-> this start-sphere))
  (format #t "~1Tstart-dir: #<vector @ #x~X>~%" (-> this start-dir))
  (format #t "~1Tfinish-sphere: #<sphere @ #x~X>~%" (-> this finish-sphere))
  (format #t "~1Tfinish-dir: #<vector @ #x~X>~%" (-> this finish-dir))
  (format #t "~1Tplayer-intro-pos: #<vector @ #x~X>~%" (-> this player-intro-pos))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tscore: ~D~%" (-> this score))
  (format #t "~1Tlap-count: ~D~%" (-> this lap-count))
  (format #t "~1Tracer-count: ~D~%" (-> this racer-count))
  (format #t "~1Tturbo-pad-count: ~D~%" (-> this turbo-pad-count))
  (format #t "~1Tmap-index: ~D~%" (-> this map-index))
  (format #t "~1Tdecision-point-count: ~D~%" (-> this decision-point-count))
  (format #t "~1Tsafe-paths: ~D~%" (-> this safe-paths))
  (format #t "~1Tturbo-pad-array: #x~X~%" (-> this turbo-pad-array))
  (format #t "~1Tracer-array: #x~X~%" (-> this racer-array))
  (format #t "~1Tdecision-point-array: #x~X~%" (-> this decision-point-array))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (format #t "~1Tborrow-level: ~A~%" (-> this borrow-level))
  (format #t "~1Tborrow: ~A~%" (-> this borrow))
  (format #t "~1Tmanager: ~D~%" (-> this manager))
  (format #t "~1Tmanager-handle-init-hack: ~A~%" (-> this manager-handle-init-hack))
  (format #t "~1Thatch-actor-name: ~A~%" (-> this hatch-actor-name))
  (format #t "~1Tcountdown-scene: ~A~%" (-> this countdown-scene))
  (format #t "~1Tcomplete-continue: ~A~%" (-> this complete-continue))
  (format #t "~1Tstart-camera: ~A~%" (-> this start-camera))
  (format #t "~1Tgo-speech: ~D~%" (-> this go-speech))
  (label cfg-4)
  this
  )

;; definition of type racer-state
(deftype racer-state (structure)
  ((position           vector  :inline)
   (racer              handle)
   (flags              racer-flags)
   (rank               int8)
   (finish-count       int8)
   (lap-count          int8)
   (lap-quadrant       int8)
   (rider              uint8)
   (lap-distance       float)
   (lap-distance-prev  float)
   (pos                float)
   (target-pos-offset  float)
   (speed-factor       float)
   (finish-time        uint32)
   (lap-start          uint32)
   (best-lap-time      uint32)
   (lap-time-array     float   5)
   (start-position     vector  :inline)
   )
  (:methods
    (update-lap-distance (_type_ race-state) none)
    (begin-lap (_type_ race-state) none)
    (end-lap (_type_ race-state) none)
    (print-laps (_type_ race-state string) none)
    (init-racer! (_type_ process-drawable) none)
    )
  )

;; definition for method 3 of type racer-state
(defmethod inspect ((this racer-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'racer-state)
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tracer: ~D~%" (-> this racer))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Trank: ~D~%" (-> this rank))
  (format #t "~1Tfinish-count: ~D~%" (-> this finish-count))
  (format #t "~1Tlap-count: ~D~%" (-> this lap-count))
  (format #t "~1Tlap-quadrant: ~D~%" (-> this lap-quadrant))
  (format #t "~1Trider: ~D~%" (-> this rider))
  (format #t "~1Tlap-distance: ~f~%" (-> this lap-distance))
  (format #t "~1Tlap-distance-prev: ~f~%" (-> this lap-distance-prev))
  (format #t "~1Tpos: ~f~%" (-> this pos))
  (format #t "~1Ttarget-pos-offset: ~f~%" (-> this target-pos-offset))
  (format #t "~1Tspeed-factor: ~f~%" (-> this speed-factor))
  (format #t "~1Tfinish-time: ~D~%" (-> this finish-time))
  (format #t "~1Tlap-start: ~D~%" (-> this lap-start))
  (format #t "~1Tbest-lap-time: ~D~%" (-> this best-lap-time))
  (format #t "~1Tlap-time-array[5] @ #x~X~%" (-> this lap-time-array))
  (format #t "~1Tstart-position: #<vector @ #x~X>~%" (-> this start-position))
  (label cfg-4)
  this
  )

;; definition of type race-state
(deftype race-state (structure)
  ((info                  race-info)
   (flags                 race-flags)
   (state                 race-state-enum)
   (racer-count           int8)
   (finished-count        int8)
   (i-player              int8)
   (i-countdown           int8)
   (manager               handle)
   (scene-player          handle)
   (race-signal           handle)
   (arrow                 handle)
   (hud-timer             handle)
   (hud-lap-counter       handle)
   (hud-turbo-counter     handle)
   (hud-position          handle)
   (current-time          uint32)
   (countdown-start-time  uint32)
   (race-start-time       uint32)
   (rankings              int8         10)
   (target-pos            float)
   (suck-factor           float)
   (racer-array           racer-state  10 :inline)
   (player-intro-curve    cubic-curve  :inline)
   )
  (:methods
    (init-racers! (_type_ process-drawable) none)
    (begin-race (_type_) none)
    (update (_type_) none)
    (update-rankings (_type_) none)
    (debug-print-rankings (_type_) none)
    (update-racers (_type_) none)
    (spawn-race-signal (_type_) none)
    (initialize (_type_ process race-info) none)
    (set-speech-tables! (_type_) none)
    (setup-race (_type_) none)
    )
  )

;; definition for method 3 of type race-state
(defmethod inspect ((this race-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-state)
  (format #t "~1Tinfo: ~A~%" (-> this info))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tstate: ~D~%" (-> this state))
  (format #t "~1Tracer-count: ~D~%" (-> this racer-count))
  (format #t "~1Tfinished-count: ~D~%" (-> this finished-count))
  (format #t "~1Ti-player: ~D~%" (-> this i-player))
  (format #t "~1Ti-countdown: ~D~%" (-> this i-countdown))
  (format #t "~1Tmanager: #x~X~%" (-> this manager))
  (format #t "~1Tscene-player: #x~X~%" (-> this scene-player))
  (format #t "~1Trace-signal: #x~X~%" (-> this race-signal))
  (format #t "~1Tarrow: #x~X~%" (-> this arrow))
  (format #t "~1Thud-timer: #x~X~%" (-> this hud-timer))
  (format #t "~1Thud-lap-counter: #x~X~%" (-> this hud-lap-counter))
  (format #t "~1Thud-turbo-counter: #x~X~%" (-> this hud-turbo-counter))
  (format #t "~1Thud-position: #x~X~%" (-> this hud-position))
  (format #t "~1Tcurrent-time: ~D~%" (-> this current-time))
  (format #t "~1Tcountdown-start-time: ~D~%" (-> this countdown-start-time))
  (format #t "~1Trace-start-time: ~D~%" (-> this race-start-time))
  (format #t "~1Trankings[10] @ #x~X~%" (-> this rankings))
  (format #t "~1Ttarget-pos: ~f~%" (-> this target-pos))
  (format #t "~1Tsuck-factor: ~f~%" (-> this suck-factor))
  (format #t "~1Tracer-array[10] @ #x~X~%" (-> this racer-array))
  (format #t "~1Tplayer-intro-curve: #<cubic-curve @ #x~X>~%" (-> this player-intro-curve))
  (label cfg-4)
  this
  )

;; definition of type race-manager
(deftype race-manager (process)
  ((race-state            race-state)
   (state-time            time-frame)
   (player-on-track-time  time-frame)
   (message-id            sound-id)
   (finish-sound-id       sound-id)
   )
  (:state-methods
    idle
    active
    fail
    win
    lose
    die
    )
  (:methods
    (update (_type_) int)
    (initialize-state (_type_) none)
    (race-manager-method-22 (_type_) none)
    (initialize-race-state (_type_) none)
    (draw-message-continue (_type_) none)
    (draw-message-retry (_type_) none)
    (save-score (_type_ float) none)
    (stop-speech (_type_) none)
    )
  )

;; definition for method 3 of type race-manager
(defmethod inspect ((this race-manager))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Trace-state: #<race-state @ #x~X>~%" (-> this race-state))
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (format #t "~2Tplayer-on-track-time: ~D~%" (-> this player-on-track-time))
  (format #t "~2Tmessage-id: ~D~%" (-> this message-id))
  (format #t "~2Tfinish-sound-id: ~D~%" (-> this finish-sound-id))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
