;;-*-Lisp-*-
(in-package goal)

;; definition of type race-turbo-pad
(deftype race-turbo-pad (structure)
  ((position vector :inline :offset-assert   0)
   (handle   handle         :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type race-turbo-pad
(defmethod inspect race-turbo-pad ((this race-turbo-pad))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-turbo-pad)
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (label cfg-4)
  this
  )

;; definition of type race-decision-point
(deftype race-decision-point (structure)
  ((pos           float  :offset-assert   0)
   (decision-type uint8  :offset-assert   4)
   (shortcuts     uint8  :offset-assert   5)
   (safe-paths    uint8  :offset-assert   6)
   )
  :method-count-assert 9
  :size-assert         #x7
  :flag-assert         #x900000007
  )

;; definition for method 3 of type race-decision-point
(defmethod inspect race-decision-point ((this race-decision-point))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-decision-point)
  (format #t "~1Tpos: ~f~%" (-> this pos))
  (format #t "~1Tdecision-type: ~D~%" (-> this decision-type))
  (format #t "~1Tshortcuts: ~D~%" (-> this shortcuts))
  (format #t "~1Tsafe-paths: ~D~%" (-> this safe-paths))
  (label cfg-4)
  this
  )

;; definition of type race-racer-info
(deftype race-racer-info (structure)
  ((rider       uint8             :offset-assert   0)
   (vehicle     uint8             :offset-assert   1)
   (flags       racer-info-flags  :offset-assert   2)
   (seek-offset int8              :offset-assert   3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type race-racer-info
(defmethod inspect race-racer-info ((this race-racer-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-racer-info)
  (format #t "~1Trider: ~D~%" (-> this rider))
  (format #t "~1Tvehicle: ~D~%" (-> this vehicle))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tseek-offset: ~D~%" (-> this seek-offset))
  (label cfg-4)
  this
  )

;; definition of type race-info
(deftype race-info (basic)
  ((race-mesh-name           string                                     :offset-assert   4)
   (path-group-name          string                                     :offset-assert   8)
   (task-node                game-task-node                             :offset-assert  12)
   (mesh                     race-mesh                                  :offset-assert  16)
   (ai-min-speed-factor      float                                      :offset-assert  20)
   (ai-max-speed-factor      float                                      :offset-assert  24)
   (ai-spread-factor         float                                      :offset-assert  28)
   (start-sphere             sphere                             :inline :offset-assert  32)
   (start-dir                vector                             :inline :offset-assert  48)
   (finish-sphere            sphere                             :inline :offset-assert  64)
   (finish-dir               vector                             :inline :offset-assert  80)
   (player-intro-pos         vector                             :inline :offset-assert  96)
   (flags                    race-info-flags                            :offset-assert 112)
   (score                    uint8                                      :offset-assert 113)
   (lap-count                int8                                       :offset-assert 114)
   (racer-count              int8                                       :offset-assert 115)
   (turbo-pad-count          int8                                       :offset-assert 116)
   (map-index                int8                                       :offset-assert 117)
   (decision-point-count     int8                                       :offset-assert 118)
   (safe-paths               uint8                                      :offset-assert 119)
   (turbo-pad-array          (inline-array race-turbo-pad)              :offset-assert 120)
   (racer-array              (inline-array race-racer-info)             :offset-assert 124)
   (decision-point-array     (inline-array race-decision-point)         :offset-assert 128)
   (level                    symbol                                     :offset-assert 132)
   (borrow-level             symbol                                     :offset-assert 136)
   (borrow                   pair                                       :offset-assert 140)
   (manager                  handle                                     :offset-assert 144)
   (manager-handle-init-hack basic                                      :offset        144)
   (hatch-actor-name         string                                     :offset-assert 152)
   (countdown-scene          string                                     :offset-assert 156)
   (complete-continue        string                                     :offset-assert 160)
   (start-camera             string                                     :offset-assert 164)
   (go-speech                uint16                                     :offset-assert 168)
   )
  :method-count-assert 10
  :size-assert         #xaa
  :flag-assert         #xa000000aa
  (:methods
    (initialize-mesh (_type_) none 9)
    )
  )

;; definition for method 3 of type race-info
(defmethod inspect race-info ((this race-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Trace-mesh-name: ~A~%" (-> this race-mesh-name))
  (format #t "~1Tpath-group-name: ~A~%" (-> this path-group-name))
  (format #t "~1Ttask-node: ~D~%" (-> this task-node))
  (format #t "~1Tmesh: ~A~%" (-> this mesh))
  (format #t "~1Tai-min-speed-factor: ~f~%" (-> this ai-min-speed-factor))
  (format #t "~1Tai-max-speed-factor: ~f~%" (-> this ai-max-speed-factor))
  (format #t "~1Tai-spread-factor: ~f~%" (-> this ai-spread-factor))
  (format #t "~1Tstart-sphere: #<sphere @ #x~X>~%" (-> this start-sphere))
  (format #t "~1Tstart-dir: #<vector @ #x~X>~%" (-> this start-dir))
  (format #t "~1Tfinish-sphere: #<sphere @ #x~X>~%" (-> this finish-sphere))
  (format #t "~1Tfinish-dir: #<vector @ #x~X>~%" (-> this finish-dir))
  (format #t "~1Tplayer-intro-pos: #<vector @ #x~X>~%" (-> this player-intro-pos))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tscore: ~D~%" (-> this score))
  (format #t "~1Tlap-count: ~D~%" (-> this lap-count))
  (format #t "~1Tracer-count: ~D~%" (-> this racer-count))
  (format #t "~1Tturbo-pad-count: ~D~%" (-> this turbo-pad-count))
  (format #t "~1Tmap-index: ~D~%" (-> this map-index))
  (format #t "~1Tdecision-point-count: ~D~%" (-> this decision-point-count))
  (format #t "~1Tsafe-paths: ~D~%" (-> this safe-paths))
  (format #t "~1Tturbo-pad-array: #x~X~%" (-> this turbo-pad-array))
  (format #t "~1Tracer-array: #x~X~%" (-> this racer-array))
  (format #t "~1Tdecision-point-array: #x~X~%" (-> this decision-point-array))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (format #t "~1Tborrow-level: ~A~%" (-> this borrow-level))
  (format #t "~1Tborrow: ~A~%" (-> this borrow))
  (format #t "~1Tmanager: ~D~%" (-> this manager))
  (format #t "~1Tmanager-handle-init-hack: ~A~%" (-> this manager-handle-init-hack))
  (format #t "~1Thatch-actor-name: ~A~%" (-> this hatch-actor-name))
  (format #t "~1Tcountdown-scene: ~A~%" (-> this countdown-scene))
  (format #t "~1Tcomplete-continue: ~A~%" (-> this complete-continue))
  (format #t "~1Tstart-camera: ~A~%" (-> this start-camera))
  (format #t "~1Tgo-speech: ~D~%" (-> this go-speech))
  (label cfg-4)
  this
  )

;; definition of type racer-state
(deftype racer-state (structure)
  ((position          vector      :inline :offset-assert   0)
   (racer             handle              :offset-assert  16)
   (flags             racer-flags         :offset-assert  24)
   (rank              int8                :offset-assert  25)
   (finish-count      int8                :offset-assert  26)
   (lap-count         int8                :offset-assert  27)
   (lap-quadrant      int8                :offset-assert  28)
   (rider             uint8               :offset-assert  29)
   (lap-distance      float               :offset-assert  32)
   (lap-distance-prev float               :offset-assert  36)
   (pos               float               :offset-assert  40)
   (target-pos-offset float               :offset-assert  44)
   (speed-factor      float               :offset-assert  48)
   (finish-time       uint32              :offset-assert  52)
   (lap-start         uint32              :offset-assert  56)
   (best-lap-time     uint32              :offset-assert  60)
   (lap-time-array    float       5       :offset-assert  64)
   (start-position    vector      :inline :offset-assert  96)
   )
  :method-count-assert 14
  :size-assert         #x70
  :flag-assert         #xe00000070
  (:methods
    (update-lap-distance (_type_ race-state) none 9)
    (begin-lap (_type_ race-state) none 10)
    (end-lap (_type_ race-state) none 11)
    (print-laps (_type_ race-state string) none 12)
    (init-racer! (_type_ process-drawable) none 13)
    )
  )

;; definition for method 3 of type racer-state
(defmethod inspect racer-state ((this racer-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'racer-state)
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tracer: ~D~%" (-> this racer))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Trank: ~D~%" (-> this rank))
  (format #t "~1Tfinish-count: ~D~%" (-> this finish-count))
  (format #t "~1Tlap-count: ~D~%" (-> this lap-count))
  (format #t "~1Tlap-quadrant: ~D~%" (-> this lap-quadrant))
  (format #t "~1Trider: ~D~%" (-> this rider))
  (format #t "~1Tlap-distance: ~f~%" (-> this lap-distance))
  (format #t "~1Tlap-distance-prev: ~f~%" (-> this lap-distance-prev))
  (format #t "~1Tpos: ~f~%" (-> this pos))
  (format #t "~1Ttarget-pos-offset: ~f~%" (-> this target-pos-offset))
  (format #t "~1Tspeed-factor: ~f~%" (-> this speed-factor))
  (format #t "~1Tfinish-time: ~D~%" (-> this finish-time))
  (format #t "~1Tlap-start: ~D~%" (-> this lap-start))
  (format #t "~1Tbest-lap-time: ~D~%" (-> this best-lap-time))
  (format #t "~1Tlap-time-array[5] @ #x~X~%" (-> this lap-time-array))
  (format #t "~1Tstart-position: #<vector @ #x~X>~%" (-> this start-position))
  (label cfg-4)
  this
  )

;; definition of type race-state
(deftype race-state (structure)
  ((info                 race-info                  :offset-assert   0)
   (flags                race-flags                 :offset-assert   4)
   (state                race-state-enum            :offset-assert   5)
   (racer-count          int8                       :offset-assert   6)
   (finished-count       int8                       :offset-assert   7)
   (i-player             int8                       :offset-assert   8)
   (i-countdown          int8                       :offset-assert   9)
   (manager              handle                     :offset-assert  16)
   (scene-player         handle                     :offset-assert  24)
   (race-signal          handle                     :offset-assert  32)
   (arrow                handle                     :offset-assert  40)
   (hud-timer            handle                     :offset-assert  48)
   (hud-lap-counter      handle                     :offset-assert  56)
   (hud-turbo-counter    handle                     :offset-assert  64)
   (hud-position         handle                     :offset-assert  72)
   (current-time         uint32                     :offset-assert  80)
   (countdown-start-time uint32                     :offset-assert  84)
   (race-start-time      uint32                     :offset-assert  88)
   (rankings             int8            10         :offset-assert  92)
   (target-pos           float                      :offset-assert 104)
   (suck-factor          float                      :offset-assert 108)
   (racer-array          racer-state     10 :inline :offset-assert 112)
   (player-intro-curve   cubic-curve     :inline    :offset-assert 1232)
   )
  :method-count-assert 19
  :size-assert         #x510
  :flag-assert         #x1300000510
  (:methods
    (init-racers! (_type_ process-drawable) none 9)
    (begin-race (_type_) none 10)
    (update (_type_) none 11)
    (update-rankings (_type_) none 12)
    (debug-print-rankings (_type_) none 13)
    (update-racers (_type_) none 14)
    (spawn-race-signal (_type_) none 15)
    (initialize (_type_ process race-info) none 16)
    (set-speech-tables! (_type_) none 17)
    (setup-race (_type_) none 18)
    )
  )

;; definition for method 3 of type race-state
(defmethod inspect race-state ((this race-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'race-state)
  (format #t "~1Tinfo: ~A~%" (-> this info))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tstate: ~D~%" (-> this state))
  (format #t "~1Tracer-count: ~D~%" (-> this racer-count))
  (format #t "~1Tfinished-count: ~D~%" (-> this finished-count))
  (format #t "~1Ti-player: ~D~%" (-> this i-player))
  (format #t "~1Ti-countdown: ~D~%" (-> this i-countdown))
  (format #t "~1Tmanager: #x~X~%" (-> this manager))
  (format #t "~1Tscene-player: #x~X~%" (-> this scene-player))
  (format #t "~1Trace-signal: #x~X~%" (-> this race-signal))
  (format #t "~1Tarrow: #x~X~%" (-> this arrow))
  (format #t "~1Thud-timer: #x~X~%" (-> this hud-timer))
  (format #t "~1Thud-lap-counter: #x~X~%" (-> this hud-lap-counter))
  (format #t "~1Thud-turbo-counter: #x~X~%" (-> this hud-turbo-counter))
  (format #t "~1Thud-position: #x~X~%" (-> this hud-position))
  (format #t "~1Tcurrent-time: ~D~%" (-> this current-time))
  (format #t "~1Tcountdown-start-time: ~D~%" (-> this countdown-start-time))
  (format #t "~1Trace-start-time: ~D~%" (-> this race-start-time))
  (format #t "~1Trankings[10] @ #x~X~%" (-> this rankings))
  (format #t "~1Ttarget-pos: ~f~%" (-> this target-pos))
  (format #t "~1Tsuck-factor: ~f~%" (-> this suck-factor))
  (format #t "~1Tracer-array[10] @ #x~X~%" (-> this racer-array))
  (format #t "~1Tplayer-intro-curve: #<cubic-curve @ #x~X>~%" (-> this player-intro-curve))
  (label cfg-4)
  this
  )

;; definition of type race-manager
(deftype race-manager (process)
  ((race-state           race-state  :offset-assert 128)
   (state-time           time-frame  :offset-assert 136)
   (player-on-track-time time-frame  :offset-assert 144)
   (message-id           sound-id    :offset-assert 152)
   (finish-sound-id      sound-id    :offset-assert 156)
   )
  :heap-base #x20
  :method-count-assert 28
  :size-assert         #xa0
  :flag-assert         #x1c002000a0
  (:methods
    (idle () _type_ :state 14)
    (active () _type_ :state 15)
    (fail () _type_ :state 16)
    (win () _type_ :state 17)
    (lose () _type_ :state 18)
    (die () _type_ :state 19)
    (update (_type_) int 20)
    (initialize-state (_type_) none 21)
    (race-manager-method-22 (_type_) none 22)
    (initialize-race-state (_type_) none 23)
    (draw-message-continue (_type_) none 24)
    (draw-message-retry (_type_) none 25)
    (save-score (_type_ float) none 26)
    (stop-speech (_type_) none 27)
    )
  )

;; definition for method 3 of type race-manager
(defmethod inspect race-manager ((this race-manager))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Trace-state: #<race-state @ #x~X>~%" (-> this race-state))
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (format #t "~2Tplayer-on-track-time: ~D~%" (-> this player-on-track-time))
  (format #t "~2Tmessage-id: ~D~%" (-> this message-id))
  (format #t "~2Tfinish-sound-id: ~D~%" (-> this finish-sound-id))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
