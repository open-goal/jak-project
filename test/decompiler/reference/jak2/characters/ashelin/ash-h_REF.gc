;;-*-Lisp-*-
(in-package goal)

;; definition of type ashelin-course
(deftype ashelin-course (bot-course)
  ((ouch-speeches    bot-speech-list-shuffle  :offset-assert  48)
   (victory-speeches bot-speech-list-shuffle  :offset-assert  52)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

;; definition for method 3 of type ashelin-course
(defmethod inspect ashelin-course ((obj ashelin-course))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tcourse-id: ~D~%" (-> obj course-id))
  (format #t "~1Tspeech-count: ~D~%" (-> obj speech-count))
  (format #t "~1Tspot-count: ~D~%" (-> obj spot-count))
  (format #t "~1Tretry-cookie: ~D~%" (-> obj retry-cookie))
  (format #t "~1Ttoo-far-warn-speeches: ~A~%" (-> obj too-far-warn-speeches))
  (format #t "~1Ttoo-far-fail-speeches: ~A~%" (-> obj too-far-fail-speeches))
  (format #t "~1Tattack-player-speeches: ~A~%" (-> obj attack-player-speeches))
  (format #t "~1Tdefault-check-too-far: ~A~%" (-> obj default-check-too-far))
  (format #t "~1Twaypoints: ~A~%" (-> obj waypoints))
  (format #t "~1Tspeeches: #x~X~%" (-> obj speeches))
  (format #t "~1Tspeech-tunings: #x~X~%" (-> obj speech-tunings))
  (format #t "~1Tdirs: #x~X~%" (-> obj dirs))
  (format #t "~1Tspots: #x~X~%" (-> obj spots))
  (format #t "~1Touch-speeches: ~A~%" (-> obj ouch-speeches))
  (format #t "~1Tvictory-speeches: ~A~%" (-> obj victory-speeches))
  (label cfg-4)
  obj
  )

;; definition of type ashelin
(deftype ashelin (bot)
  ((ash-course          ashelin-course         :offset        652)
   (knocked-anim        art-joint-anim         :offset-assert 992)
   (travel-anim-interp  float                  :offset-assert 996)
   (fired-gun-count     uint32                 :offset-assert 1000)
   (last-fire-time      time-frame             :offset-assert 1008)
   (victory-speech-time time-frame             :offset-assert 1016)
   (frontline           plane          :inline :offset-assert 1024)
   )
  :heap-base #x390
  :method-count-assert 251
  :size-assert         #x410
  :flag-assert         #xfb03900410
  (:methods
    (back-spring () _type_ :state 225)
    (cartwheel-left () _type_ :state 226)
    (tumble-right () _type_ :state 227)
    (chase () _type_ :state 228)
    (traveling () _type_ :state 229)
    (traveling-blocked () _type_ :state 230)
    (waiting-idle () _type_ :state 231)
    (standing-idle () _type_ :state 232)
    (standing-turn () _type_ :state 233)
    (standing-blast () _type_ :state 234)
    (ashelin-method-235 (_type_ symbol) symbol 235)
    (ashelin-method-236 (_type_ vector float float float float) symbol 236)
    (fire-projectile (_type_ vector) none 237)
    (ashelin-method-238 (_type_ symbol symbol) symbol 238)
    (ashelin-method-239 (_type_) none 239)
    (ashelin-method-240 (_type_ int) none 240)
    (ashelin-method-241 (_type_) int 241)
    (ashelin-method-242 (_type_) int 242)
    (ashelin-method-243 (_type_ float) int 243)
    (ashelin-method-244 (_type_) none 244)
    (ashelin-method-245 (_type_) none 245)
    (ashelin-method-246 (_type_) int 246)
    (ashelin-method-247 (_type_) symbol 247)
    (ashelin-method-248 (_type_) symbol 248)
    (ashelin-method-249 (_type_) none 249)
    (ashelin-method-250 (_type_ symbol) none 250)
    )
  )

;; definition for method 3 of type ashelin
(defmethod inspect ashelin ((obj ashelin))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bot inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tknocked-anim: ~A~%" (-> obj knocked-anim))
  (format #t "~2Ttravel-anim-interp: ~f~%" (-> obj travel-anim-interp))
  (format #t "~2Tfired-gun-count: ~D~%" (-> obj fired-gun-count))
  (format #t "~2Tlast-fire-time: ~D~%" (-> obj last-fire-time))
  (format #t "~2Tvictory-speech-time: ~D~%" (-> obj victory-speech-time))
  (format #t "~2Tfrontline: #<plane @ #x~X>~%" (-> obj frontline))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(defskelgroup skel-ashelin ashelin ashelin-lod0-jg ashelin-idle0-ja
              ((ashelin-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2.7)
              :shadow ashelin-shadow-mg
              :origin-joint-index 13
              )

;; definition of type asht-wait-spot
(deftype asht-wait-spot (ai-task)
  ((check-done   (function asht-wait-spot ashelin symbol)   :offset  32)
   (which-spot   int8                                       :offset  36)
   (num-spots    uint8                                      :offset  37)
   (spot-indexes uint8                                    6 :offset  38)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type asht-wait-spot
(defmethod inspect asht-wait-spot ((obj asht-wait-spot))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (format #t "~1Tcheck-done: ~A~%" (-> obj check-done))
  (format #t "~1Twhich-spot: ~D~%" (-> obj which-spot))
  (format #t "~1Tnum-spots: ~D~%" (-> obj num-spots))
  (format #t "~1Tspot-indexes[6] @ #x~X~%" (-> obj spot-indexes))
  (label cfg-4)
  obj
  )

;; definition of type asht-fight-focus
(deftype asht-fight-focus (ai-task)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type asht-fight-focus
(defmethod inspect asht-fight-focus ((obj asht-fight-focus))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tnext: ~A~%" (-> obj next))
  (format #t "~1Tprev: ~A~%" (-> obj prev))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tunique-id: ~D~%" (-> obj unique-id))
  (format #t "~1Tbytes[16] @ #x~X~%" (-> obj bytes))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
