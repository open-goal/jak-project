;;-*-Lisp-*-
(in-package goal)

;; definition of type speech-type-info
(deftype speech-type-info (structure)
  ((channel         uint8             :offset-assert   0)
   (flags           speech-type-flag  :offset-assert   1)
   (priority        int8              :offset-assert   2)
   (request-timeout uint16            :offset-assert   4)
   (min-delay       uint16            :offset-assert   6)
   (max-delay       uint16            :offset-assert   8)
   (delay           uint16            :offset-assert  10)
   (play-index      int16             :offset-assert  12)
   (list            (array string)    :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type speech-type-info
(defmethod inspect speech-type-info ((this speech-type-info))
  (when (not this)
    (set! this this)
    (goto cfg-6)
    )
  (format #t "[~8x] ~A~%" this 'speech-type-info)
  (format #t "~1Tchannel: ~D~%" (-> this channel))
  (format #t "~1Tflags: #x~X : (speech-type-flag " (-> this flags))
  (let ((a0-4 (-> this flags)))
    (if (= (logand a0-4 (speech-type-flag random-order)) (speech-type-flag random-order))
        (format #t "random-order ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tpriority: ~D~%" (-> this priority))
  (format #t "~1Trequest-timeout: ~D~%" (-> this request-timeout))
  (format #t "~1Tmin-delay: ~D~%" (-> this min-delay))
  (format #t "~1Tmax-delay: ~D~%" (-> this max-delay))
  (format #t "~1Tdelay: ~D~%" (-> this delay))
  (format #t "~1Tplay-index: ~D~%" (-> this play-index))
  (format #t "~1Tlist: ~A~%" (-> this list))
  (label cfg-6)
  this
  )

;; definition of type speech-request
(deftype speech-request (structure)
  ((handle      handle       :offset-assert   0)
   (time        time-frame   :offset-assert   8)
   (priority    float        :offset-assert  16)
   (speech-type speech-type  :offset-assert  20)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x15
  :flag-assert         #x900000015
  )

;; definition for method 3 of type speech-request
(defmethod inspect speech-request ((this speech-request))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'speech-request)
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Ttime: ~D~%" (-> this time))
  (format #t "~1Tpriority: ~f~%" (-> this priority))
  (format #t "~1Tspeech-type: ~D~%" (-> this speech-type))
  (label cfg-4)
  this
  )

;; definition of type speech-channel
(deftype speech-channel (structure)
  ((flags        speech-channel-flag                :offset-assert   0)
   (gui-channel  gui-channel                        :offset-assert   1)
   (delay        uint16                             :offset-assert   2)
   (id           sound-id                           :offset-assert   4)
   (update-time  time-frame                         :offset-assert   8)
   (start-time   time-frame                         :offset-assert  16)
   (end-time     time-frame                         :offset-assert  24)
   (request      speech-request             :inline :offset-assert  32)
   (last-request speech-request             :inline :offset-assert  56)
   (target-pos   vector                     :inline :offset-assert  80)
   (speech-table (pointer speech-type-info)         :offset-assert  96)
   )
  :method-count-assert 14
  :size-assert         #x64
  :flag-assert         #xe00000064
  (:methods
    (speech-channel-method-9 (_type_ process-drawable speech-type) none 9)
    (speech-channel-method-10 (_type_ handle) none 10)
    (speech-channel-method-11 (_type_) none 11)
    (speech-channel-method-12 (_type_) none 12)
    (speech-channel-method-13 (_type_) none 13)
    )
  )

;; definition for method 3 of type speech-channel
(defmethod inspect speech-channel ((this speech-channel))
  (when (not this)
    (set! this this)
    (goto cfg-6)
    )
  (format #t "[~8x] ~A~%" this 'speech-channel)
  (format #t "~1Tflags: #x~X : (speech-channel-flag " (-> this flags))
  (let ((a0-3 (-> this flags)))
    (if (= (logand a0-3 (speech-channel-flag disable)) (speech-channel-flag disable))
        (format #t "disable ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tgui-channel: ~D~%" (-> this gui-channel))
  (format #t "~1Tdelay: ~D~%" (-> this delay))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tupdate-time: ~D~%" (-> this update-time))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Tend-time: ~D~%" (-> this end-time))
  (format #t "~1Trequest: #<speech-request @ #x~X>~%" (-> this request))
  (format #t "~1Tlast-request: #<speech-request @ #x~X>~%" (-> this last-request))
  (format #t "~1Ttarget-pos: #<vector @ #x~X>~%" (-> this target-pos))
  (format #t "~1Tspeech-table: #x~X~%" (-> this speech-table))
  (label cfg-6)
  this
  )

;; definition of type speech-control
(deftype speech-control (structure)
  ((channel-array speech-channel   2 :inline :offset-assert   0)
   (speech-table  speech-type-info 57        :offset-assert 224)
   )
  :method-count-assert 17
  :size-assert         #x1c4
  :flag-assert         #x11000001c4
  (:methods
    (speech-control-method-9 (_type_) none 9)
    (speech-table-set! (_type_ speech-type speech-type-info) none 10)
    (speech-control-method-11 (_type_) none 11)
    (speech-control-method-12 (_type_ process-drawable speech-type) none 12)
    (speech-control-method-13 (_type_ handle) none 13)
    (speech-control-method-14 (_type_) none 14)
    (speech-control-method-15 (_type_ process-drawable) none 15)
    (speech-control-method-16 (_type_) none 16)
    )
  )

;; definition for method 3 of type speech-control
(defmethod inspect speech-control ((this speech-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'speech-control)
  (format #t "~1Tchannel-array[2] @ #x~X~%" (-> this channel-array))
  (format #t "~1Tspeech-table[57] @ #x~X~%" (-> this speech-table))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
