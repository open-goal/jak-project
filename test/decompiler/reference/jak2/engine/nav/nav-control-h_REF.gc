;;-*-Lisp-*-
(in-package goal)

;; definition of type check-vector-collision-with-nav-spheres-info
(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u          float)
   (intersect  vector  :inline)
   (normal     vector  :inline)
   )
  )

;; definition for method 3 of type check-vector-collision-with-nav-spheres-info
(defmethod inspect ((this check-vector-collision-with-nav-spheres-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'check-vector-collision-with-nav-spheres-info)
  (format #t "~1Tu: ~f~%" (-> this u))
  (format #t "~1Tintersect: #<vector @ #x~X>~%" (-> this intersect))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (label cfg-4)
  this
  )

;; definition of type nav-gap-info
(deftype nav-gap-info (structure)
  ((dest  vector  :inline)
   (poly  nav-poly)
   )
  )

;; definition for method 3 of type nav-gap-info
(defmethod inspect ((this nav-gap-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'nav-gap-info)
  (format #t "~1Tdest: ~`vector`P~%" (-> this dest))
  (format #t "~1Tpoly: #<nav-poly @ #x~X>~%" (-> this poly))
  (label cfg-4)
  this
  )

;; definition of type nav-avoid-spheres-params
(deftype nav-avoid-spheres-params (structure)
  ((current-pos           vector  :inline)
   (travel                vector  :inline)
   (pref-dir              vector  :inline)
   (out-travel            vector  2 :inline)
   (closest-sphere-dist2  float)
   (avoiding-sphere?      symbol)
   )
  )

;; definition for method 3 of type nav-avoid-spheres-params
(defmethod inspect ((this nav-avoid-spheres-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'nav-avoid-spheres-params)
  (format #t "~1Tcurrent-pos: #<vector @ #x~X>~%" (-> this current-pos))
  (format #t "~1Ttravel: #<vector @ #x~X>~%" (-> this travel))
  (format #t "~1Tpref-dir: #<vector @ #x~X>~%" (-> this pref-dir))
  (format #t "~1Tout-travel[2] @ #x~X~%" (-> this out-travel))
  (format #t "~1Tclosest-sphere-dist2: ~f~%" (-> this closest-sphere-dist2))
  (format #t "~1Tavoiding-sphere?: ~A~%" (-> this avoiding-sphere?))
  (label cfg-4)
  this
  )

;; definition of type nav-callback-info
(deftype nav-callback-info (structure)
  ((callback-count  int32)
   (callback-array  (function object nav-control none)  10)
   )
  )

;; definition for method 3 of type nav-callback-info
(defmethod inspect ((this nav-callback-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'nav-callback-info)
  (format #t "~1Tcallback-count: ~D~%" (-> this callback-count))
  (format #t "~1Tcallback-array[10] @ #x~X~%" (-> this callback-array))
  (label cfg-4)
  this
  )

;; definition of type nav-state
(deftype nav-state (structure)
  ((flags                      nav-state-flag)
   (nav                        nav-control)
   (user-poly                  nav-poly)
   (mesh                       nav-mesh)
   (current-poly               nav-poly)
   (virtual-current-poly       nav-poly)
   (next-poly                  nav-poly)
   (target-poly                nav-poly)
   (rotation-rate              float)
   (speed                      meters)
   (prev-speed                 meters)
   (pad0                       uint32  1)
   (travel                     vector  :inline)
   (target-post                vector  :inline)
   (current-pos                vector  :inline)
   (current-pos-local          vector  :inline)
   (virtual-current-pos-local  vector  :inline)
   (velocity                   vector  :inline)
   (heading                    vector  :inline)
   (target-dir                 vector  :inline)
   (accel                      vector  :inline :overlay-at target-dir)
   )
  (:methods
    (debug-draw (_type_) none)
    (nav-state-method-10 (_type_) none)
    (plan-over-pat1-polys-using-route (_type_ nav-gap-info) symbol)
    (get-velocity (_type_ vector) vector)
    (get-travel (_type_ vector) vector)
    (get-heading (_type_ vector) vector)
    (get-target-post (_type_ vector) vector)
    (get-speed (_type_) meters)
    (get-rotation-rate (_type_) float)
    (try-projecting-to-current-poly (_type_ vector object vector) symbol)
    (get-current-poly (_type_) nav-poly)
    (copy-nav-state! (_type_ (pointer nav-state)) none)
    (nav-state-method-21 () none)
    (nav-state-method-22 () none)
    (nav-state-method-23 () none)
    (turn-and-navigate-to-destination (_type_) none)
    (navigate-using-route-portals-wrapper (_type_) none)
    (navigate-using-best-dir-recompute-avoid-spheres-1-wrapper (_type_) none)
    (navigate-within-poly-wrapper (_type_) none)
    (compute-travel-speed (_type_) none)
    (nav-state-method-29 (_type_) none)
    (nav-state-method-30 (_type_) none)
    (navigate-using-best-dir-recompute-avoid-spheres-2 (_type_) none)
    (update-travel-dir-from-spheres (_type_) none)
    (compute-speed-simple (_type_) none)
    (navigate-v1! (_type_) none)
    (reset-target! (_type_) none)
    (add-offset-to-target! (_type_ vector) none)
    (navigate-v2! (_type_) none)
    (set-current-poly! (_type_ nav-poly) none)
    (nav-state-method-39 (_type_) symbol)
    (do-navigation-to-destination (_type_ vector) none)
    (clamp-vector-to-mesh-cross-gaps (_type_ vector) symbol)
    (set-target-post! (_type_ vector) none)
    (set-travel! (_type_ vector) none)
    (set-velocity! (_type_ vector) none)
    (set-heading! (_type_ vector) none)
    (set-speed! (_type_ meters) none)
    (reset! (_type_ nav-control) none)
    (nav-state-method-48 () none)
    (navigate-using-best-dir-use-existing-avoid-spheres (_type_ nav-avoid-spheres-params) none)
    (nav-state-method-50 (_type_) none)
    (navigate-using-route-portals (_type_) none)
    (navigate-using-best-dir-recompute-avoid-spheres-1 (_type_) none)
    (navigate-within-poly (_type_) none)
    (clamp-travel-vector (_type_) none)
    )
  )

;; definition for method 3 of type nav-state
(defmethod inspect ((this nav-state))
  (when (not this)
    (set! this this)
    (goto cfg-34)
    )
  (format #t "[~8x] ~A~%" this 'nav-state)
  (format #t "~1Tflags: #x~X : (nav-state-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (nav-state-flag in-target-poly)) (nav-state-flag in-target-poly))
        (format #t "in-target-poly ")
        )
    (if (= (logand s5-0 (nav-state-flag directional-mode)) (nav-state-flag directional-mode))
        (format #t "directional-mode ")
        )
    (if (= (logand s5-0 (nav-state-flag initialized)) (nav-state-flag initialized))
        (format #t "initialized ")
        )
    (if (= (logand s5-0 (nav-state-flag display-marks)) (nav-state-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (nav-state-flag recovery-mode)) (nav-state-flag recovery-mode))
        (format #t "recovery-mode ")
        )
    (if (= (logand s5-0 (nav-state-flag touching-sphere)) (nav-state-flag touching-sphere))
        (format #t "touching-sphere ")
        )
    (if (= (logand s5-0 (nav-state-flag trapped-by-sphere)) (nav-state-flag trapped-by-sphere))
        (format #t "trapped-by-sphere ")
        )
    (if (= (logand s5-0 (nav-state-flag blocked)) (nav-state-flag blocked))
        (format #t "blocked ")
        )
    (if (= (logand s5-0 (nav-state-flag avoiding-sphere)) (nav-state-flag avoiding-sphere))
        (format #t "avoiding-sphere ")
        )
    (if (= (logand s5-0 (nav-state-flag target-inside)) (nav-state-flag target-inside))
        (format #t "target-inside ")
        )
    (if (= (logand s5-0 (nav-state-flag debug)) (nav-state-flag debug))
        (format #t "debug ")
        )
    (if (= (logand s5-0 (nav-state-flag at-gap)) (nav-state-flag at-gap))
        (format #t "at-gap ")
        )
    (if (= (logand s5-0 (nav-state-flag in-mesh)) (nav-state-flag in-mesh))
        (format #t "in-mesh ")
        )
    (if (= (logand s5-0 (nav-state-flag at-target)) (nav-state-flag at-target))
        (format #t "at-target ")
        )
    (if (= (logand s5-0 (nav-state-flag target-poly-dirty)) (nav-state-flag target-poly-dirty))
        (format #t "target-poly-dirty ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tnav: ~A~%" (-> this nav))
  (format #t "~1Tuser-poly: #<nav-poly @ #x~X>~%" (-> this user-poly))
  (format #t "~1Tmesh: ~A~%" (-> this mesh))
  (format #t "~1Tcurrent-poly: #<nav-poly @ #x~X>~%" (-> this current-poly))
  (format #t "~1Tvirtual-current-poly: #<nav-poly @ #x~X>~%" (-> this virtual-current-poly))
  (format #t "~1Tnext-poly: #<nav-poly @ #x~X>~%" (-> this next-poly))
  (format #t "~1Ttarget-poly: #<nav-poly @ #x~X>~%" (-> this target-poly))
  (format #t "~1Trotation-rate: ~f~%" (-> this rotation-rate))
  (format #t "~1Tspeed: (meters ~m)~%" (-> this speed))
  (format #t "~1Tprev-speed: (meters ~m)~%" (-> this prev-speed))
  (format #t "~1Tpad0[1] @ #x~X~%" (-> this pad0))
  (format #t "~1Ttravel: ~`vector`P~%" (-> this travel))
  (format #t "~1Ttarget-pos: ~`vector`P~%" (-> this target-post))
  (format #t "~1Tcurrent-pos: ~`vector`P~%" (-> this current-pos))
  (format #t "~1Tcurrent-pos-local: ~`vector`P~%" (-> this current-pos-local))
  (format #t "~1Tvirtual-current-pos-local: ~`vector`P~%" (-> this virtual-current-pos-local))
  (format #t "~1Tvelocity: ~`vector`P~%" (-> this velocity))
  (format #t "~1Theading: ~`vector`P~%" (-> this heading))
  (format #t "~1Ttarget-dir: ~`vector`P~%" (-> this target-dir))
  (format #t "~1Taccel: #<vector @ #x~X>~%" (-> this target-dir))
  (label cfg-34)
  this
  )

;; definition of type nav-control
(deftype nav-control (structure)
  ((flags                 nav-control-flag)
   (callback-info         nav-callback-info)
   (process               process)
   (pad0                  uint32)
   (shape                 collide-shape)
   (nearest-y-threshold   meters)
   (nav-cull-radius       meters)
   (sec-per-frame         float)
   (target-speed          meters)
   (acceleration          meters)
   (turning-acceleration  meters)
   (max-rotation-rate     float)
   (speed-scale           float)
   (sphere-count          int32)
   (sphere-array          (inline-array sphere))
   (root-sphere-id        uint8)
   (sphere-mask           uint8)
   (pad1                  uint8      2)
   (sphere-id-array       uint8      16)
   (extra-nav-sphere      vector     :inline)
   (root-nav-sphere       vector     :inline)
   (state                 nav-state  :inline)
   )
  (:methods
    (debug-draw (_type_) none)
    (point-in-bsphere? (_type_ vector) symbol)
    (find-poly-containing-point-1 (_type_ vector) nav-poly)
    (cloest-point-on-mesh (_type_ vector vector nav-poly) nav-poly)
    (find-nearest-poly-to-point (_type_ vector) nav-poly)
    (project-point-onto-plane-of-poly (_type_ nav-poly vector vector vector) none)
    (find-poly-containing-point-2 (_type_ vector) nav-poly)
    (is-above-poly-max-height? (_type_ vector float) symbol)
    (is-in-mesh? (_type_ vector float) symbol)
    (avoid-spheres-1! (_type_ nav-avoid-spheres-params) symbol)
    (avoid-spheres-2! (_type_ nav-avoid-spheres-params) symbol)
    (clamp-vector-to-mesh-cross-gaps (_type_ vector nav-poly vector float symbol clamp-travel-vector-to-mesh-return-info) none)
    (clamp-vector-to-mesh-no-gaps (_type_ vector nav-poly vector clamp-travel-vector-to-mesh-return-info) none)
    (find-first-sphere-and-update-avoid-params (_type_ vector nav-avoid-spheres-params) float)
    (set-spheres-from-nav-ids (_type_) none)
    (add-root-sphere-to-hash! (_type_ vector int) symbol)
    (get-max-rotation-rate (_type_) float)
    (get-sphere-mask (_type_) uint)
    (get-target-speed (_type_) meters)
    (enable-extra-sphere! (_type_) none)
    (disable-extra-sphere! (_type_) none)
    (copy-extra-nav-sphere! (_type_ sphere) none)
    (set-extra-nav-sphere-xyz! (_type_ sphere) none)
    (set-extra-nav-sphere-radius! (_type_ float) none)
    (set-nearest-y-thres! (_type_ float) none)
    (set-nav-cull-radius! (_type_ meters) none)
    (set-speed-scale! (_type_ float) none)
    (set-target-speed! (_type_ meters) none)
    (set-acceleration! (_type_ meters) none)
    (set-turning-acceleration! (_type_ meters) none)
    (set-max-rotation-rate! (_type_ float) none)
    (set-sphere-mask! (_type_ uint) none)
    (remove! (_type_) none)
    (init! (_type_ collide-shape) none)
    (display-marks? (_type_) symbol)
    (nav-control-method-44 () none)
    (find-first-sphere-intersecting-ray (_type_ vector vector vector) sphere)
    (find-sphere-ids-from-sphere-hash (_type_ symbol) none)
    )
  )

;; definition for method 3 of type nav-control
(defmethod inspect ((this nav-control))
  (when (not this)
    (set! this this)
    (goto cfg-25)
    )
  (format #t "[~8x] ~A~%" this 'nav-control)
  (format #t "~1Tflags: #x~X : (nav-control-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (nav-control-flag display-marks)) (nav-control-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (nav-control-flag limit-rotation-rate)) (nav-control-flag limit-rotation-rate))
        (format #t "limit-rotation-rate ")
        )
    (if (= (logand s5-0 (nav-control-flag update-heading-from-facing)) (nav-control-flag update-heading-from-facing))
        (format #t "update-heading-from-facing ")
        )
    (if (= (logand s5-0 (nav-control-flag use-momentum)) (nav-control-flag use-momentum))
        (format #t "use-momentum ")
        )
    (if (= (logand s5-0 (nav-control-flag output-sphere-hash)) (nav-control-flag output-sphere-hash))
        (format #t "output-sphere-hash ")
        )
    (if (= (logand s5-0 (nav-control-flag no-redirect-in-clamp)) (nav-control-flag no-redirect-in-clamp))
        (format #t "no-redirect-in-clamp ")
        )
    (if (= (logand s5-0 (nav-control-flag momentum-ignore-heading)) (nav-control-flag momentum-ignore-heading))
        (format #t "momentum-ignore-heading ")
        )
    (if (= (logand s5-0 (nav-control-flag debug)) (nav-control-flag debug))
        (format #t "debug ")
        )
    (if (= (logand s5-0 (nav-control-flag kernel-run)) (nav-control-flag kernel-run))
        (format #t "kernel-run ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tcallback-info: #<nav-callback-info @ #x~X>~%" (-> this callback-info))
  (format #t "~1Tprocess: ~A~%" (-> this process))
  (format #t "~1Tpad0: ~D~%" (-> this pad0))
  (format #t "~1Tshape: ~A~%" (-> this shape))
  (format #t "~1Tnearest-y-threshold: (meters ~m)~%" (-> this nearest-y-threshold))
  (format #t "~1Tnav-cull-radius: (meters ~m)~%" (-> this nav-cull-radius))
  (format #t "~1Tsec-per-frame: ~f~%" (-> this sec-per-frame))
  (format #t "~1Ttarget-speed: (meters ~m)~%" (-> this target-speed))
  (format #t "~1Tacceleration: (meters ~m)~%" (-> this acceleration))
  (format #t "~1Tturning-acceleration: (meters ~m)~%" (-> this turning-acceleration))
  (format #t "~1Tmax-rotation-rate: ~f~%" (-> this max-rotation-rate))
  (format #t "~1Tspeed-scale: ~f~%" (-> this speed-scale))
  (format #t "~1Tsphere-count: ~D~%" (-> this sphere-count))
  (format #t "~1Tsphere-array: #x~X~%" (-> this sphere-array))
  (format #t "~1Troot-sphere-id: ~D~%" (-> this root-sphere-id))
  (format #t "~1Tsphere-mask: ~D~%" (-> this sphere-mask))
  (format #t "~1Tpad1[2] @ #x~X~%" (-> this pad1))
  (format #t "~1Tsphere-id-array[16] @ #x~X~%" (-> this sphere-id-array))
  (dotimes (s5-1 (-> this sphere-count))
    (format #t "~T  [~D]~1Tsphere-id-array: ~D~%" s5-1 (-> this sphere-id-array s5-1))
    )
  (format #t "~1Textra-nav-sphere: ~`vector`P~%" (-> this extra-nav-sphere))
  (format #t "~1Troot-nav-sphere: ~`vector`P~%" (-> this root-nav-sphere))
  (format #t "~1Tstate: #<nav-state @ #x~X>~%" (-> this state))
  (format #t "~1Tmesh: ~A~%" (-> this state mesh))
  (label cfg-25)
  this
  )

;; failed to figure out what this is:
0
