;;-*-Lisp-*-
(in-package goal)

;; definition of type check-vector-collision-with-nav-spheres-info
(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u         float          :offset-assert   0)
   (intersect vector :inline :offset-assert  16)
   (normal    vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type check-vector-collision-with-nav-spheres-info
(defmethod inspect check-vector-collision-with-nav-spheres-info ((obj check-vector-collision-with-nav-spheres-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'check-vector-collision-with-nav-spheres-info)
  (format #t "~1Tu: ~f~%" (-> obj u))
  (format #t "~1Tintersect: #<vector @ #x~X>~%" (-> obj intersect))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> obj normal))
  (label cfg-4)
  obj
  )

;; definition of type nav-gap-info
(deftype nav-gap-info (structure)
  ((dest vector   :inline :offset-assert   0)
   (poly nav-poly         :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type nav-gap-info
(defmethod inspect nav-gap-info ((obj nav-gap-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'nav-gap-info)
  (format #t "~1Tdest: ~`vector`P~%" (-> obj dest))
  (format #t "~1Tpoly: #<nav-poly @ #x~X>~%" (-> obj poly))
  (label cfg-4)
  obj
  )

;; definition of type nav-avoid-spheres-params
(deftype nav-avoid-spheres-params (structure)
  ((current-pos          vector :inline   :offset-assert   0)
   (travel               vector :inline   :offset-assert  16)
   (pref-dir             vector :inline   :offset-assert  32)
   (out-travel           vector 2 :inline :offset-assert  48)
   (closest-sphere-dist2 float            :offset-assert  80)
   (avoiding-sphere?     basic            :offset-assert  84)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

;; definition for method 3 of type nav-avoid-spheres-params
(defmethod inspect nav-avoid-spheres-params ((obj nav-avoid-spheres-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'nav-avoid-spheres-params)
  (format #t "~1Tcurrent-pos: #<vector @ #x~X>~%" (-> obj current-pos))
  (format #t "~1Ttravel: #<vector @ #x~X>~%" (-> obj travel))
  (format #t "~1Tpref-dir: #<vector @ #x~X>~%" (-> obj pref-dir))
  (format #t "~1Tout-travel[2] @ #x~X~%" (-> obj out-travel))
  (format #t "~1Tclosest-sphere-dist2: ~f~%" (-> obj closest-sphere-dist2))
  (format #t "~1Tavoiding-sphere?: ~A~%" (-> obj avoiding-sphere?))
  (label cfg-4)
  obj
  )

;; definition of type nav-callback-info
(deftype nav-callback-info (structure)
  ((callback-count int32     :offset-assert   0)
   (callback-array uint32 10 :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; definition for method 3 of type nav-callback-info
(defmethod inspect nav-callback-info ((obj nav-callback-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'nav-callback-info)
  (format #t "~1Tcallback-count: ~D~%" (-> obj callback-count))
  (format #t "~1Tcallback-array[10] @ #x~X~%" (-> obj callback-array))
  (label cfg-4)
  obj
  )

;; definition of type nav-state
(deftype nav-state (structure)
  ((flags                     nav-state-flag         :offset-assert   0)
   (nav                       basic                  :offset-assert   4)
   (user-poly                 nav-poly               :offset-assert   8)
   (mesh                      nav-mesh               :offset-assert  12)
   (current-poly              nav-poly               :offset-assert  16)
   (virtual-current-poly      nav-poly               :offset-assert  20)
   (next-poly                 nav-poly               :offset-assert  24)
   (target-poly               nav-poly               :offset-assert  28)
   (rotation-rate             float                  :offset-assert  32)
   (speed                     meters                 :offset-assert  36)
   (prev-speed                meters                 :offset-assert  40)
   (pad0                      uint32         1       :offset-assert  44)
   (travel                    vector         :inline :offset-assert  48)
   (target-post               vector         :inline :offset-assert  64)
   (current-pos               vector         :inline :offset-assert  80)
   (current-pos-local         vector         :inline :offset-assert  96)
   (virtual-current-pos-local vector         :inline :offset-assert 112)
   (velocity                  vector         :inline :offset-assert 128)
   (heading                   vector         :inline :offset-assert 144)
   (target-dir                vector         :inline :offset-assert 160)
   (accel                     vector         :inline :offset        160)
   )
  :method-count-assert 55
  :size-assert         #xb0
  :flag-assert         #x37000000b0
  (:methods
    (nav-state-method-9 () none 9)
    (nav-state-method-10 () none 10)
    (nav-state-method-11 () none 11)
    (nav-state-method-12 () none 12)
    (nav-state-method-13 () none 13)
    (nav-state-method-14 () none 14)
    (nav-state-method-15 () none 15)
    (nav-state-method-16 () none 16)
    (nav-state-method-17 () none 17)
    (nav-state-method-18 () none 18)
    (nav-state-method-19 () none 19)
    (nav-state-method-20 () none 20)
    (nav-state-method-21 () none 21)
    (nav-state-method-22 () none 22)
    (nav-state-method-23 () none 23)
    (nav-state-method-24 () none 24)
    (nav-state-method-25 () none 25)
    (nav-state-method-26 () none 26)
    (nav-state-method-27 () none 27)
    (nav-state-method-28 () none 28)
    (nav-state-method-29 () none 29)
    (nav-state-method-30 () none 30)
    (nav-state-method-31 () none 31)
    (nav-state-method-32 () none 32)
    (nav-state-method-33 () none 33)
    (nav-state-method-34 () none 34)
    (nav-state-method-35 () none 35)
    (nav-state-method-36 () none 36)
    (nav-state-method-37 () none 37)
    (nav-state-method-38 () none 38)
    (nav-state-method-39 () none 39)
    (nav-state-method-40 () none 40)
    (nav-state-method-41 () none 41)
    (nav-state-method-42 () none 42)
    (nav-state-method-43 () none 43)
    (nav-state-method-44 () none 44)
    (nav-state-method-45 () none 45)
    (nav-state-method-46 () none 46)
    (nav-state-method-47 () none 47)
    (nav-state-method-48 () none 48)
    (nav-state-method-49 () none 49)
    (nav-state-method-50 () none 50)
    (nav-state-method-51 () none 51)
    (nav-state-method-52 () none 52)
    (nav-state-method-53 () none 53)
    (nav-state-method-54 () none 54)
    )
  )

;; definition for method 3 of type nav-state
(defmethod inspect nav-state ((obj nav-state))
  (when (not obj)
    (set! obj obj)
    (goto cfg-34)
    )
  (format #t "[~8x] ~A~%" obj 'nav-state)
  (format #t "~1Tflags: #x~X : (nav-state-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (nav-state-flag in-target-poly)) (nav-state-flag in-target-poly))
        (format #t "in-target-poly ")
        )
    (if (= (logand s5-0 (nav-state-flag directional-mode)) (nav-state-flag directional-mode))
        (format #t "directional-mode ")
        )
    (if (= (logand s5-0 (nav-state-flag initialized)) (nav-state-flag initialized))
        (format #t "initialized ")
        )
    (if (= (logand s5-0 (nav-state-flag display-marks)) (nav-state-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (nav-state-flag recovery-mode)) (nav-state-flag recovery-mode))
        (format #t "recovery-mode ")
        )
    (if (= (logand s5-0 (nav-state-flag touching-sphere)) (nav-state-flag touching-sphere))
        (format #t "touching-sphere ")
        )
    (if (= (logand s5-0 (nav-state-flag trapped-by-sphere)) (nav-state-flag trapped-by-sphere))
        (format #t "trapped-by-sphere ")
        )
    (if (= (logand s5-0 (nav-state-flag blocked)) (nav-state-flag blocked))
        (format #t "blocked ")
        )
    (if (= (logand s5-0 (nav-state-flag avoiding-sphere)) (nav-state-flag avoiding-sphere))
        (format #t "avoiding-sphere ")
        )
    (if (= (logand s5-0 (nav-state-flag target-inside)) (nav-state-flag target-inside))
        (format #t "target-inside ")
        )
    (if (= (logand s5-0 (nav-state-flag debug)) (nav-state-flag debug))
        (format #t "debug ")
        )
    (if (= (logand s5-0 (nav-state-flag at-gap)) (nav-state-flag at-gap))
        (format #t "at-gap ")
        )
    (if (= (logand s5-0 (nav-state-flag in-mesh)) (nav-state-flag in-mesh))
        (format #t "in-mesh ")
        )
    (if (= (logand s5-0 (nav-state-flag at-target)) (nav-state-flag at-target))
        (format #t "at-target ")
        )
    (if (= (logand s5-0 (nav-state-flag target-poly-dirty)) (nav-state-flag target-poly-dirty))
        (format #t "target-poly-dirty ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tnav: ~A~%" (-> obj nav))
  (format #t "~1Tuser-poly: #<nav-poly @ #x~X>~%" (-> obj user-poly))
  (format #t "~1Tmesh: ~A~%" (-> obj mesh))
  (format #t "~1Tcurrent-poly: #<nav-poly @ #x~X>~%" (-> obj current-poly))
  (format #t "~1Tvirtual-current-poly: #<nav-poly @ #x~X>~%" (-> obj virtual-current-poly))
  (format #t "~1Tnext-poly: #<nav-poly @ #x~X>~%" (-> obj next-poly))
  (format #t "~1Ttarget-poly: #<nav-poly @ #x~X>~%" (-> obj target-poly))
  (format #t "~1Trotation-rate: ~f~%" (-> obj rotation-rate))
  (format #t "~1Tspeed: (meters ~m)~%" (-> obj speed))
  (format #t "~1Tprev-speed: (meters ~m)~%" (-> obj prev-speed))
  (format #t "~1Tpad0[1] @ #x~X~%" (-> obj pad0))
  (format #t "~1Ttravel: ~`vector`P~%" (-> obj travel))
  (format #t "~1Ttarget-pos: ~`vector`P~%" (-> obj target-post))
  (format #t "~1Tcurrent-pos: ~`vector`P~%" (-> obj current-pos))
  (format #t "~1Tcurrent-pos-local: ~`vector`P~%" (-> obj current-pos-local))
  (format #t "~1Tvirtual-current-pos-local: ~`vector`P~%" (-> obj virtual-current-pos-local))
  (format #t "~1Tvelocity: ~`vector`P~%" (-> obj velocity))
  (format #t "~1Theading: ~`vector`P~%" (-> obj heading))
  (format #t "~1Ttarget-dir: ~`vector`P~%" (-> obj target-dir))
  (format #t "~1Taccel: #<vector @ #x~X>~%" (-> obj target-dir))
  (label cfg-34)
  obj
  )

;; definition of type nav-control
(deftype nav-control (structure)
  ((flags                nav-control-flag              :offset-assert   0)
   (callback-info        nav-callback-info             :offset-assert   4)
   (process              process                       :offset-assert   8)
   (pad0                 uint32                        :offset-assert  12)
   (shape                basic                         :offset-assert  16)
   (nearest-y-threshold  meters                        :offset-assert  20)
   (nav-cull-radius      meters                        :offset-assert  24)
   (sec-per-frame        float                         :offset-assert  28)
   (target-speed         meters                        :offset-assert  32)
   (acceleration         meters                        :offset-assert  36)
   (turning-acceleration meters                        :offset-assert  40)
   (max-rotation-rate    float                         :offset-assert  44)
   (speed-scale          float                         :offset-assert  48)
   (sphere-count         int32                         :offset-assert  52)
   (sphere-array         (inline-array sphere)         :offset-assert  56)
   (root-sphere-id       uint8                         :offset-assert  60)
   (sphere-mask          uint8                         :offset-assert  61)
   (pad1                 uint8                 2       :offset-assert  62)
   (sphere-id-array      uint8                 16      :offset-assert  64)
   (extra-nav-sphere     vector                :inline :offset-assert  80)
   (root-nav-sphere      vector                :inline :offset-assert  96)
   (state                nav-state             :inline :offset-assert 112)
   )
  :method-count-assert 47
  :size-assert         #x120
  :flag-assert         #x2f00000120
  (:methods
    (nav-control-method-9 () none 9)
    (nav-control-method-10 () none 10)
    (nav-control-method-11 () none 11)
    (nav-control-method-12 () none 12)
    (nav-control-method-13 () none 13)
    (nav-control-method-14 () none 14)
    (nav-control-method-15 () none 15)
    (nav-control-method-16 () none 16)
    (nav-control-method-17 () none 17)
    (nav-control-method-18 () none 18)
    (nav-control-method-19 () none 19)
    (nav-control-method-20 () none 20)
    (nav-control-method-21 () none 21)
    (nav-control-method-22 () none 22)
    (nav-control-method-23 () none 23)
    (nav-control-method-24 () none 24)
    (nav-control-method-25 () none 25)
    (nav-control-method-26 () none 26)
    (nav-control-method-27 () none 27)
    (nav-control-method-28 () none 28)
    (nav-control-method-29 () none 29)
    (nav-control-method-30 () none 30)
    (nav-control-method-31 () none 31)
    (nav-control-method-32 () none 32)
    (nav-control-method-33 () none 33)
    (nav-control-method-34 () none 34)
    (nav-control-method-35 () none 35)
    (nav-control-method-36 () none 36)
    (nav-control-method-37 () none 37)
    (nav-control-method-38 () none 38)
    (nav-control-method-39 () none 39)
    (nav-control-method-40 () none 40)
    (nav-control-method-41 () none 41)
    (nav-control-method-42 () none 42)
    (nav-control-method-43 () none 43)
    (nav-control-method-44 () none 44)
    (nav-control-method-45 () none 45)
    (nav-control-method-46 () none 46)
    )
  )

;; definition for method 3 of type nav-control
(defmethod inspect nav-control ((obj nav-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-25)
    )
  (format #t "[~8x] ~A~%" obj 'nav-control)
  (format #t "~1Tflags: #x~X : (nav-control-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (nav-control-flag display-marks)) (nav-control-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (nav-control-flag limit-rotation-rate)) (nav-control-flag limit-rotation-rate))
        (format #t "limit-rotation-rate ")
        )
    (if (= (logand s5-0 (nav-control-flag update-heading-from-facing)) (nav-control-flag update-heading-from-facing))
        (format #t "update-heading-from-facing ")
        )
    (if (= (logand s5-0 (nav-control-flag use-momentum)) (nav-control-flag use-momentum))
        (format #t "use-momentum ")
        )
    (if (= (logand s5-0 (nav-control-flag output-sphere-hash)) (nav-control-flag output-sphere-hash))
        (format #t "output-sphere-hash ")
        )
    (if (= (logand s5-0 (nav-control-flag no-redirect-in-clamp)) (nav-control-flag no-redirect-in-clamp))
        (format #t "no-redirect-in-clamp ")
        )
    (if (= (logand s5-0 (nav-control-flag momentum-ignore-heading)) (nav-control-flag momentum-ignore-heading))
        (format #t "momentum-ignore-heading ")
        )
    (if (= (logand s5-0 (nav-control-flag debug)) (nav-control-flag debug))
        (format #t "debug ")
        )
    (if (= (logand s5-0 (nav-control-flag kernel-run)) (nav-control-flag kernel-run))
        (format #t "kernel-run ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tcallback-info: #<nav-callback-info @ #x~X>~%" (-> obj callback-info))
  (format #t "~1Tprocess: ~A~%" (-> obj process))
  (format #t "~1Tpad0: ~D~%" (-> obj pad0))
  (format #t "~1Tshape: ~A~%" (-> obj shape))
  (format #t "~1Tnearest-y-threshold: (meters ~m)~%" (-> obj nearest-y-threshold))
  (format #t "~1Tnav-cull-radius: (meters ~m)~%" (-> obj nav-cull-radius))
  (format #t "~1Tsec-per-frame: ~f~%" (-> obj sec-per-frame))
  (format #t "~1Ttarget-speed: (meters ~m)~%" (-> obj target-speed))
  (format #t "~1Tacceleration: (meters ~m)~%" (-> obj acceleration))
  (format #t "~1Tturning-acceleration: (meters ~m)~%" (-> obj turning-acceleration))
  (format #t "~1Tmax-rotation-rate: ~f~%" (-> obj max-rotation-rate))
  (format #t "~1Tspeed-scale: ~f~%" (-> obj speed-scale))
  (format #t "~1Tsphere-count: ~D~%" (-> obj sphere-count))
  (format #t "~1Tsphere-array: #x~X~%" (-> obj sphere-array))
  (format #t "~1Troot-sphere-id: ~D~%" (-> obj root-sphere-id))
  (format #t "~1Tsphere-mask: ~D~%" (-> obj sphere-mask))
  (format #t "~1Tpad1[2] @ #x~X~%" (-> obj pad1))
  (format #t "~1Tsphere-id-array[16] @ #x~X~%" (-> obj sphere-id-array))
  (dotimes (s5-1 (-> obj sphere-count))
    (format #t "~T  [~D]~1Tsphere-id-array: ~D~%" s5-1 (-> obj sphere-id-array s5-1))
    )
  (format #t "~1Textra-nav-sphere: ~`vector`P~%" (-> obj extra-nav-sphere))
  (format #t "~1Troot-nav-sphere: ~`vector`P~%" (-> obj root-nav-sphere))
  (format #t "~1Tstate: #<nav-state @ #x~X>~%" (-> obj state))
  (format #t "~1Tmesh: ~A~%" (-> obj state mesh))
  (label cfg-25)
  obj
  )

;; failed to figure out what this is:
0




