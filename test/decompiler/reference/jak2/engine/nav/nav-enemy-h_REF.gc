;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-enemy-info
(deftype nav-enemy-info (enemy-info)
  ((callback-info              nav-callback-info)
   (use-momentum               symbol)
   (use-frustration            symbol)
   (use-stop-chase             symbol)
   (use-circling               symbol)
   (use-pacing                 symbol)
   (walk-anim                  int32)
   (turn-anim                  int32)
   (run-anim                   int32)
   (taunt-anim                 int32)
   (run-travel-speed           meters)
   (run-acceleration           meters)
   (run-turning-acceleration   meters)
   (walk-travel-speed          meters)
   (walk-acceleration          meters)
   (walk-turning-acceleration  meters)
   (maximum-rotation-rate      degrees)
   (notice-nav-radius          meters)
   (frustration-distance       meters)
   (frustration-time           time-frame)
   (blocked-time               time-frame)
   (circle-dist-lo             float)
   (circle-dist-hi             float)
   (nav-mesh                   nav-mesh)
   )
  (:methods
    (copy-nav-enemy-info! (_type_ nav-enemy-info) none)
    )
  )

;; definition for method 3 of type nav-enemy-info
;; INFO: Used lq/sq
(defmethod inspect ((this nav-enemy-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tfact-defaults: ~A~%" (-> this fact-defaults))
  (format #t "~1Tuse-die-falling: ~A~%" (-> this use-die-falling))
  (format #t "~1Tuse-victory: ~A~%" (-> this use-victory))
  (format #t "~1Tuse-jump-blocked: ~A~%" (-> this use-jump-blocked))
  (format #t "~1Tdebug-draw-neck: ~A~%" (-> this debug-draw-neck))
  (format #t "~1Tjump-debug-draw: ~A~%" (-> this jump-debug-draw))
  (format #t "~1Tmove-to-ground: ~A~%" (-> this move-to-ground))
  (format #t "~1Thover-if-no-ground: ~A~%" (-> this hover-if-no-ground))
  (format #t "~1Tidle-anim-script: #x~X~%" (-> this idle-anim-script))
  (format #t "~1Tidle-anim: ~D~%" (-> this idle-anim))
  (format #t "~1Tnotice-anim: ~D~%" (-> this notice-anim))
  (format #t "~1Thostile-anim: ~D~%" (-> this hostile-anim))
  (format #t "~1Thit-anim: ~D~%" (-> this hit-anim))
  (format #t "~1Tknocked-anim: ~D~%" (-> this knocked-anim))
  (format #t "~1Tknocked-land-anim: ~D~%" (-> this knocked-land-anim))
  (format #t "~1Tdie-anim: ~D~%" (-> this die-anim))
  (format #t "~1Tdie-falling-anim: ~D~%" (-> this die-falling-anim))
  (format #t "~1Tvictory-anim: ~D~%" (-> this victory-anim))
  (format #t "~1Tjump-wind-up-anim: ~D~%" (-> this jump-wind-up-anim))
  (format #t "~1Tjump-in-air-anim: ~D~%" (-> this jump-in-air-anim))
  (format #t "~1Tjump-land-anim: ~D~%" (-> this jump-land-anim))
  (format #t "~1Tneck-joint: ~D~%" (-> this neck-joint))
  (format #t "~1Tlook-at-joint: ~D~%" (-> this look-at-joint))
  (format #t "~1Tbullseye-joint: ~D~%" (-> this bullseye-joint))
  (format #t "~1Tsound-hit: ~D~%" (-> this sound-hit))
  (format #t "~1Tsound-die: ~D~%" (-> this sound-die))
  (format #t "~1Tnotice-distance: (meters ~m)~%" (-> this notice-distance))
  (format #t "~1Tnotice-distance-delta: (meters ~m)~%" (-> this notice-distance-delta))
  (format #t "~1Tproximity-notice-distance: (meters ~m)~%" (-> this proximity-notice-distance))
  (format #t "~1Tdefault-hit-points: ~D~%" (-> this default-hit-points))
  (format #t "~1Tgnd-collide-with: ~D~%" (-> this gnd-collide-with))
  (format #t "~1Toverlaps-others-collide-with-filter: ~D~%" (-> this overlaps-others-collide-with-filter))
  (format #t "~1Tpenetrate-flinch: ~D~%" (-> this penetrate-flinch))
  (format #t "~1Tpenetrate-knocked: ~D~%" (-> this penetrate-knocked))
  (format #t "~1Tmovement-gravity: (meters ~m)~%" (-> this movement-gravity))
  (format #t "~1Tfriction: ~f~%" (-> this friction))
  (format #t "~1Tslip-factor: ~f~%" (-> this slip-factor))
  (format #t "~1Tattack-shove-back: (meters ~m)~%" (-> this attack-shove-back))
  (format #t "~1Tattack-shove-up: (meters ~m)~%" (-> this attack-shove-up))
  (format #t "~1Tattack-mode: ~A~%" (-> this attack-mode))
  (format #t "~1Tattack-damage: ~D~%" (-> this attack-damage))
  (format #t "~1Trecover-gnd-collide-with: ~D~%" (-> this recover-gnd-collide-with))
  (format #t "~1Tjump-height-min: (meters ~m)~%" (-> this jump-height-min))
  (format #t "~1Tjump-height-factor: ~f~%" (-> this jump-height-factor))
  (format #t "~1Tknocked-seek-ry-clamp: ~f~%" (-> this knocked-seek-ry-clamp))
  (format #t "~1Tknocked-soft-vxz-lo: ~f~%" (-> this knocked-soft-vxz-lo))
  (format #t "~1Tknocked-soft-vxz-hi: ~f~%" (-> this knocked-soft-vxz-hi))
  (format #t "~1Tknocked-soft-vy-lo: ~f~%" (-> this knocked-soft-vy-lo))
  (format #t "~1Tknocked-soft-vy-hi: ~f~%" (-> this knocked-soft-vy-hi))
  (format #t "~1Tknocked-medium-vxz-lo: ~f~%" (-> this knocked-medium-vxz-lo))
  (format #t "~1Tknocked-medium-vxz-hi: ~f~%" (-> this knocked-medium-vxz-hi))
  (format #t "~1Tknocked-medium-vy-lo: ~f~%" (-> this knocked-medium-vy-lo))
  (format #t "~1Tknocked-medium-vy-hi: ~f~%" (-> this knocked-medium-vy-hi))
  (format #t "~1Tknocked-hard-vxz-lo: ~f~%" (-> this knocked-hard-vxz-lo))
  (format #t "~1Tknocked-hard-vxz-hi: ~f~%" (-> this knocked-hard-vxz-hi))
  (format #t "~1Tknocked-hard-vy-lo: ~f~%" (-> this knocked-hard-vy-lo))
  (format #t "~1Tknocked-hard-vy-hi: ~f~%" (-> this knocked-hard-vy-hi))
  (format #t "~1Tknocked-huge-vxz-lo: ~f~%" (-> this knocked-huge-vxz-lo))
  (format #t "~1Tknocked-huge-vxz-hi: ~f~%" (-> this knocked-huge-vxz-hi))
  (format #t "~1Tknocked-huge-vy-lo: ~f~%" (-> this knocked-huge-vy-lo))
  (format #t "~1Tknocked-huge-vy-hi: ~f~%" (-> this knocked-huge-vy-hi))
  (format #t "~1Tknocked-yellow-vxz-lo: ~f~%" (-> this knocked-yellow-vxz-lo))
  (format #t "~1Tknocked-yellow-vxz-hi: ~f~%" (-> this knocked-yellow-vxz-hi))
  (format #t "~1Tknocked-yellow-vy-lo: ~f~%" (-> this knocked-yellow-vy-lo))
  (format #t "~1Tknocked-yellow-vy-hi: ~f~%" (-> this knocked-yellow-vy-hi))
  (format #t "~1Tknocked-red-vxz-lo: ~f~%" (-> this knocked-red-vxz-lo))
  (format #t "~1Tknocked-red-vxz-hi: ~f~%" (-> this knocked-red-vxz-hi))
  (format #t "~1Tknocked-red-vy-lo: ~f~%" (-> this knocked-red-vy-lo))
  (format #t "~1Tknocked-red-vy-hi: ~f~%" (-> this knocked-red-vy-hi))
  (format #t "~1Tknocked-blue-vxz-lo: ~f~%" (-> this knocked-blue-vxz-lo))
  (format #t "~1Tknocked-blue-vxz-hi: ~f~%" (-> this knocked-blue-vxz-hi))
  (format #t "~1Tknocked-blue-vy-lo: ~f~%" (-> this knocked-blue-vy-lo))
  (format #t "~1Tknocked-blue-vy-hi: ~f~%" (-> this knocked-blue-vy-hi))
  (format #t "~1Tshadow-size: (meters ~m)~%" (-> this shadow-size))
  (format #t "~1Tshadow-max-y: (meters ~m)~%" (-> this shadow-max-y))
  (format #t "~1Tshadow-min-y: (meters ~m)~%" (-> this shadow-min-y))
  (format #t "~1Tshadow-locus-dist: (meters ~m)~%" (-> this shadow-locus-dist))
  (format #t "~1Tgem-joint: ~D~%" (-> this gem-joint))
  (format #t "~1Tgem-seg: ~D~%" (-> this gem-seg))
  (format #t "~1Tgem-no-seg: ~D~%" (-> this gem-no-seg))
  (format #t "~1Tgem-offset: #<sphere @ #x~X>~%" (-> this gem-offset))
  (format #t "~1Tcallback-info: #<nav-callback-info @ #x~X>~%" (-> this callback-info))
  (format #t "~1Tuse-momentum: ~A~%" (-> this use-momentum))
  (format #t "~1Tuse-frustration: ~A~%" (-> this use-frustration))
  (format #t "~1Tuse-stop-chase: ~A~%" (-> this use-stop-chase))
  (format #t "~1Tuse-circling: ~A~%" (-> this use-circling))
  (format #t "~1Tuse-pacing: ~A~%" (-> this use-pacing))
  (format #t "~1Twalk-anim: ~D~%" (-> this walk-anim))
  (format #t "~1Tturn-anim: ~D~%" (-> this turn-anim))
  (format #t "~1Trun-anim: ~D~%" (-> this run-anim))
  (format #t "~1Ttaunt-anim: ~D~%" (-> this taunt-anim))
  (format #t "~1Trun-travel-speed: (meters ~m)~%" (-> this run-travel-speed))
  (format #t "~1Trun-acceleration: (meters ~m)~%" (-> this run-acceleration))
  (format #t "~1Trun-turning-acceleration: (meters ~m)~%" (-> this run-turning-acceleration))
  (format #t "~1Twalk-travel-speed: (meters ~m)~%" (-> this walk-travel-speed))
  (format #t "~1Twalk-acceleration: (meters ~m)~%" (-> this walk-acceleration))
  (format #t "~1Twalk-turning-acceleration: (meters ~m)~%" (-> this walk-turning-acceleration))
  (format #t "~1Tmaximum-rotation-rate: (deg ~r)~%" (-> this maximum-rotation-rate))
  (format #t "~1Tnotice-nav-radius: (meters ~m)~%" (-> this notice-nav-radius))
  (format #t "~1Tfrustration-distance: (meters ~m)~%" (-> this frustration-distance))
  (format #t "~1Tfrustration-time: ~D~%" (-> this frustration-time))
  (format #t "~1Tblocked-time: ~D~%" (-> this blocked-time))
  (format #t "~1Tcircle-dist-lo: ~f~%" (-> this circle-dist-lo))
  (format #t "~1Tcircle-dist-hi: ~f~%" (-> this circle-dist-hi))
  (format #t "~1Tnav-mesh: ~A~%" (-> this nav-mesh))
  (label cfg-4)
  this
  )

;; definition of type nav-enemy
(deftype nav-enemy (enemy)
  ((enemy-info               nav-enemy-info :override)
   (frustration-point        vector          :inline)
   (move-dest                vector          :inline)
   (frustration-time         time-frame)
   (blocked-start-time       time-frame)
   (restore-nav-radius-time  time-frame)
   (nav-radius-backup        float)
   )
  (:state-methods
    taunt
    pacing
    circling
    stop-chase
    debug-control
    )
  (:methods
    (set-enemy-info! (_type_ nav-enemy-info) none :replace)
    (init-enemy-behaviour-and-stats! (_type_ nav-enemy-info) none :replace)
    (nav-enemy-method-142 (_type_ nav-control) none)
    (nav-enemy-method-143 (_type_ nav-control) none)
    (nav-enemy-method-144 (_type_) time-frame :behavior nav-enemy)
    (nav-enemy-method-145 (_type_ nav-control) none)
    (nav-enemy-method-146 (_type_ nav-control) none)
    (nav-enemy-method-147 (_type_ nav-control) none)
    (nav-enemy-method-148 (_type_ nav-control) none)
    (nav-enemy-method-149 (_type_ nav-control) none)
    (nav-enemy-method-150 (_type_ nav-control) none)
    (nav-enemy-method-151 (_type_ nav-control) none)
    (nav-enemy-method-152 (_type_ nav-control) none)
    (nav-enemy-method-153 (_type_ nav-control) none)
    (nav-enemy-method-154 (_type_ nav-control) none)
    (nav-enemy-method-155 (_type_) none)
    (nav-enemy-method-156 (_type_) none)
    (nav-enemy-method-157 (_type_ vector) nav-poly)
    (nav-enemy-method-158 (_type_ vector) object)
    (nav-enemy-method-159 (_type_ vector) symbol)
    (nav-enemy-method-160 (_type_) none)
    (nav-enemy-method-161 (_type_) none)
    (nav-enemy-method-162 (_type_) none)
    (nav-enemy-method-163 (_type_) symbol)
    (nav-enemy-method-164 (_type_) none)
    (nav-enemy-method-165 (_type_) none)
    (nav-enemy-method-166 (_type_) none)
    (nav-enemy-method-167 (_type_) none)
    (nav-enemy-method-168 (_type_) float)
    (nav-enemy-method-169 (_type_ float symbol) float)
    (nav-enemy-method-170 (_type_) none)
    (nav-enemy-method-171 (_type_) none)
    (nav-enemy-method-172 (_type_) none)
    (nav-enemy-method-173 (_type_) none)
    (nav-enemy-method-174 (_type_) symbol)
    (nav-enemy-method-175 (_type_) symbol)
    (nav-enemy-method-176 (_type_) none :behavior nav-enemy)
    (nav-enemy-method-177 (_type_) none)
    )
  )

;; definition for method 3 of type nav-enemy
(defmethod inspect ((this nav-enemy))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Tfrustration-point: ~`vector`P~%" (-> this frustration-point))
  (format #t "~2Tmove-dest: ~`vector`P~%" (-> this move-dest))
  (format #t "~2Tfrustration-time: ~D~%" (-> this frustration-time))
  (format #t "~2Tblocked-start-time: ~D~%" (-> this blocked-start-time))
  (format #t "~2Trestore-nav-radius-time: ~D~%" (-> this restore-nav-radius-time))
  (format #t "~2Tnav-radius-backup: ~f~%" (-> this nav-radius-backup))
  (format #t "~2Tcircle-radial-dist: ~f~%" (-> this desired-angle))
  (label cfg-4)
  this
  )

;; definition of type nav-enemy-debug-control-info
(deftype nav-enemy-debug-control-info (basic)
  ((enable    basic)
   (steering  float)
   (throttle  float)
   )
  )

;; definition for method 3 of type nav-enemy-debug-control-info
(defmethod inspect ((this nav-enemy-debug-control-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tenable: ~A~%" (-> this enable))
  (format #t "~1Tsteering: ~f~%" (-> this steering))
  (format #t "~1Tthrottle: ~f~%" (-> this throttle))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
