;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-enemy-info
(deftype nav-enemy-info (enemy-info)
  ((callback-info             nav-callback-info  :offset-assert 384)
   (use-momentum              symbol             :offset-assert 388)
   (use-frustration           symbol             :offset-assert 392)
   (use-stop-chase            symbol             :offset-assert 396)
   (use-circling              symbol             :offset-assert 400)
   (use-pacing                symbol             :offset-assert 404)
   (walk-anim                 int32              :offset-assert 408)
   (turn-anim                 int32              :offset-assert 412)
   (run-anim                  int32              :offset-assert 416)
   (taunt-anim                int32              :offset-assert 420)
   (run-travel-speed          meters             :offset-assert 424)
   (run-acceleration          meters             :offset-assert 428)
   (run-turning-acceleration  meters             :offset-assert 432)
   (walk-travel-speed         meters             :offset-assert 436)
   (walk-acceleration         meters             :offset-assert 440)
   (walk-turning-acceleration meters             :offset-assert 444)
   (maximum-rotation-rate     degrees            :offset-assert 448)
   (notice-nav-radius         meters             :offset-assert 452)
   (frustration-distance      meters             :offset-assert 456)
   (frustration-time          time-frame         :offset-assert 464)
   (blocked-time              time-frame         :offset-assert 472)
   (circle-dist-lo            float              :offset-assert 480)
   (circle-dist-hi            float              :offset-assert 484)
   (nav-mesh                  nav-mesh           :offset-assert 488)
   )
  :method-count-assert 11
  :size-assert         #x1ec
  :flag-assert         #xb000001ec
  (:methods
    (copy-nav-enemy-info! (_type_ nav-enemy-info) none 10)
    )
  )

;; definition for method 3 of type nav-enemy-info
;; INFO: Used lq/sq
(defmethod inspect nav-enemy-info ((obj nav-enemy-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tfact-defaults: ~A~%" (-> obj fact-defaults))
  (format #t "~1Tuse-die-falling: ~A~%" (-> obj use-die-falling))
  (format #t "~1Tuse-victory: ~A~%" (-> obj use-victory))
  (format #t "~1Tuse-jump-blocked: ~A~%" (-> obj use-jump-blocked))
  (format #t "~1Tdebug-draw-neck: ~A~%" (-> obj debug-draw-neck))
  (format #t "~1Tjump-debug-draw: ~A~%" (-> obj jump-debug-draw))
  (format #t "~1Tmove-to-ground: ~A~%" (-> obj move-to-ground))
  (format #t "~1Thover-if-no-ground: ~A~%" (-> obj hover-if-no-ground))
  (format #t "~1Tidle-anim-script: #x~X~%" (-> obj idle-anim-script))
  (format #t "~1Tidle-anim: ~D~%" (-> obj idle-anim))
  (format #t "~1Tnotice-anim: ~D~%" (-> obj notice-anim))
  (format #t "~1Thostile-anim: ~D~%" (-> obj hostile-anim))
  (format #t "~1Thit-anim: ~D~%" (-> obj hit-anim))
  (format #t "~1Tknocked-anim: ~D~%" (-> obj knocked-anim))
  (format #t "~1Tknocked-land-anim: ~D~%" (-> obj knocked-land-anim))
  (format #t "~1Tdie-anim: ~D~%" (-> obj die-anim))
  (format #t "~1Tdie-falling-anim: ~D~%" (-> obj die-falling-anim))
  (format #t "~1Tvictory-anim: ~D~%" (-> obj victory-anim))
  (format #t "~1Tjump-wind-up-anim: ~D~%" (-> obj jump-wind-up-anim))
  (format #t "~1Tjump-in-air-anim: ~D~%" (-> obj jump-in-air-anim))
  (format #t "~1Tjump-land-anim: ~D~%" (-> obj jump-land-anim))
  (format #t "~1Tneck-joint: ~D~%" (-> obj neck-joint))
  (format #t "~1Tlook-at-joint: ~D~%" (-> obj look-at-joint))
  (format #t "~1Tbullseye-joint: ~D~%" (-> obj bullseye-joint))
  (format #t "~1Tsound-hit: ~D~%" (-> obj sound-hit))
  (format #t "~1Tsound-die: ~D~%" (-> obj sound-die))
  (format #t "~1Tnotice-distance: (meters ~m)~%" (-> obj notice-distance))
  (format #t "~1Tnotice-distance-delta: (meters ~m)~%" (-> obj notice-distance-delta))
  (format #t "~1Tproximity-notice-distance: (meters ~m)~%" (-> obj proximity-notice-distance))
  (format #t "~1Tdefault-hit-points: ~D~%" (-> obj default-hit-points))
  (format #t "~1Tgnd-collide-with: ~D~%" (-> obj gnd-collide-with))
  (format #t "~1Toverlaps-others-collide-with-filter: ~D~%" (-> obj overlaps-others-collide-with-filter))
  (format #t "~1Tpenetrate-flinch: ~D~%" (-> obj penetrate-flinch))
  (format #t "~1Tpenetrate-knocked: ~D~%" (-> obj penetrate-knocked))
  (format #t "~1Tmovement-gravity: (meters ~m)~%" (-> obj movement-gravity))
  (format #t "~1Tfriction: ~f~%" (-> obj friction))
  (format #t "~1Tslip-factor: ~f~%" (-> obj slip-factor))
  (format #t "~1Tattack-shove-back: (meters ~m)~%" (-> obj attack-shove-back))
  (format #t "~1Tattack-shove-up: (meters ~m)~%" (-> obj attack-shove-up))
  (format #t "~1Tattack-mode: ~A~%" (-> obj attack-mode))
  (format #t "~1Tattack-damage: ~D~%" (-> obj attack-damage))
  (format #t "~1Trecover-gnd-collide-with: ~D~%" (-> obj recover-gnd-collide-with))
  (format #t "~1Tjump-height-min: (meters ~m)~%" (-> obj jump-height-min))
  (format #t "~1Tjump-height-factor: ~f~%" (-> obj jump-height-factor))
  (format #t "~1Tknocked-seek-ry-clamp: ~f~%" (-> obj knocked-seek-ry-clamp))
  (format #t "~1Tknocked-soft-vxz-lo: ~f~%" (-> obj knocked-soft-vxz-lo))
  (format #t "~1Tknocked-soft-vxz-hi: ~f~%" (-> obj knocked-soft-vxz-hi))
  (format #t "~1Tknocked-soft-vy-lo: ~f~%" (-> obj knocked-soft-vy-lo))
  (format #t "~1Tknocked-soft-vy-hi: ~f~%" (-> obj knocked-soft-vy-hi))
  (format #t "~1Tknocked-medium-vxz-lo: ~f~%" (-> obj knocked-medium-vxz-lo))
  (format #t "~1Tknocked-medium-vxz-hi: ~f~%" (-> obj knocked-medium-vxz-hi))
  (format #t "~1Tknocked-medium-vy-lo: ~f~%" (-> obj knocked-medium-vy-lo))
  (format #t "~1Tknocked-medium-vy-hi: ~f~%" (-> obj knocked-medium-vy-hi))
  (format #t "~1Tknocked-hard-vxz-lo: ~f~%" (-> obj knocked-hard-vxz-lo))
  (format #t "~1Tknocked-hard-vxz-hi: ~f~%" (-> obj knocked-hard-vxz-hi))
  (format #t "~1Tknocked-hard-vy-lo: ~f~%" (-> obj knocked-hard-vy-lo))
  (format #t "~1Tknocked-hard-vy-hi: ~f~%" (-> obj knocked-hard-vy-hi))
  (format #t "~1Tknocked-huge-vxz-lo: ~f~%" (-> obj knocked-huge-vxz-lo))
  (format #t "~1Tknocked-huge-vxz-hi: ~f~%" (-> obj knocked-huge-vxz-hi))
  (format #t "~1Tknocked-huge-vy-lo: ~f~%" (-> obj knocked-huge-vy-lo))
  (format #t "~1Tknocked-huge-vy-hi: ~f~%" (-> obj knocked-huge-vy-hi))
  (format #t "~1Tknocked-yellow-vxz-lo: ~f~%" (-> obj knocked-yellow-vxz-lo))
  (format #t "~1Tknocked-yellow-vxz-hi: ~f~%" (-> obj knocked-yellow-vxz-hi))
  (format #t "~1Tknocked-yellow-vy-lo: ~f~%" (-> obj knocked-yellow-vy-lo))
  (format #t "~1Tknocked-yellow-vy-hi: ~f~%" (-> obj knocked-yellow-vy-hi))
  (format #t "~1Tknocked-red-vxz-lo: ~f~%" (-> obj knocked-red-vxz-lo))
  (format #t "~1Tknocked-red-vxz-hi: ~f~%" (-> obj knocked-red-vxz-hi))
  (format #t "~1Tknocked-red-vy-lo: ~f~%" (-> obj knocked-red-vy-lo))
  (format #t "~1Tknocked-red-vy-hi: ~f~%" (-> obj knocked-red-vy-hi))
  (format #t "~1Tknocked-blue-vxz-lo: ~f~%" (-> obj knocked-blue-vxz-lo))
  (format #t "~1Tknocked-blue-vxz-hi: ~f~%" (-> obj knocked-blue-vxz-hi))
  (format #t "~1Tknocked-blue-vy-lo: ~f~%" (-> obj knocked-blue-vy-lo))
  (format #t "~1Tknocked-blue-vy-hi: ~f~%" (-> obj knocked-blue-vy-hi))
  (format #t "~1Tshadow-size: (meters ~m)~%" (-> obj shadow-size))
  (format #t "~1Tshadow-max-y: (meters ~m)~%" (-> obj shadow-max-y))
  (format #t "~1Tshadow-min-y: (meters ~m)~%" (-> obj shadow-min-y))
  (format #t "~1Tshadow-locus-dist: (meters ~m)~%" (-> obj shadow-locus-dist))
  (format #t "~1Tgem-joint: ~D~%" (-> obj gem-joint))
  (format #t "~1Tgem-seg: ~D~%" (-> obj gem-seg))
  (format #t "~1Tgem-no-seg: ~D~%" (-> obj gem-no-seg))
  (format #t "~1Tgem-offset: #<sphere @ #x~X>~%" (-> obj gem-offset))
  (format #t "~1Tcallback-info: #<nav-callback-info @ #x~X>~%" (-> obj callback-info))
  (format #t "~1Tuse-momentum: ~A~%" (-> obj use-momentum))
  (format #t "~1Tuse-frustration: ~A~%" (-> obj use-frustration))
  (format #t "~1Tuse-stop-chase: ~A~%" (-> obj use-stop-chase))
  (format #t "~1Tuse-circling: ~A~%" (-> obj use-circling))
  (format #t "~1Tuse-pacing: ~A~%" (-> obj use-pacing))
  (format #t "~1Twalk-anim: ~D~%" (-> obj walk-anim))
  (format #t "~1Tturn-anim: ~D~%" (-> obj turn-anim))
  (format #t "~1Trun-anim: ~D~%" (-> obj run-anim))
  (format #t "~1Ttaunt-anim: ~D~%" (-> obj taunt-anim))
  (format #t "~1Trun-travel-speed: (meters ~m)~%" (-> obj run-travel-speed))
  (format #t "~1Trun-acceleration: (meters ~m)~%" (-> obj run-acceleration))
  (format #t "~1Trun-turning-acceleration: (meters ~m)~%" (-> obj run-turning-acceleration))
  (format #t "~1Twalk-travel-speed: (meters ~m)~%" (-> obj walk-travel-speed))
  (format #t "~1Twalk-acceleration: (meters ~m)~%" (-> obj walk-acceleration))
  (format #t "~1Twalk-turning-acceleration: (meters ~m)~%" (-> obj walk-turning-acceleration))
  (format #t "~1Tmaximum-rotation-rate: (deg ~r)~%" (-> obj maximum-rotation-rate))
  (format #t "~1Tnotice-nav-radius: (meters ~m)~%" (-> obj notice-nav-radius))
  (format #t "~1Tfrustration-distance: (meters ~m)~%" (-> obj frustration-distance))
  (format #t "~1Tfrustration-time: ~D~%" (-> obj frustration-time))
  (format #t "~1Tblocked-time: ~D~%" (-> obj blocked-time))
  (format #t "~1Tcircle-dist-lo: ~f~%" (-> obj circle-dist-lo))
  (format #t "~1Tcircle-dist-hi: ~f~%" (-> obj circle-dist-hi))
  (format #t "~1Tnav-mesh: ~A~%" (-> obj nav-mesh))
  (label cfg-4)
  obj
  )

;; definition of type nav-enemy
(deftype nav-enemy (enemy)
  ((enemy-info              nav-enemy-info         :override)
   (frustration-point       vector         :inline :offset-assert 544)
   (move-dest               vector         :inline :offset-assert 560)
   (frustration-time        time-frame             :offset-assert 576)
   (blocked-start-time      time-frame             :offset-assert 584)
   (restore-nav-radius-time time-frame             :offset-assert 592)
   (nav-radius-backup       float                  :offset-assert 600)
   )
  :heap-base #x1e0
  :method-count-assert 178
  :size-assert         #x25c
  :flag-assert         #xb201e0025c
  (:methods
    (set-enemy-info! (_type_ nav-enemy-info) none :replace 112)
    (init-enemy-behaviour-and-stats! (_type_ nav-enemy-info) none :replace 113)
    (taunt () _type_ :state 137)
    (pacing () _type_ :state 138)
    (circling () _type_ :state 139)
    (stop-chase () _type_ :state 140)
    (debug-control () _type_ :state 141)
    (nav-enemy-method-142 (_type_ nav-control) none 142)
    (nav-enemy-method-143 (_type_ nav-control) none 143)
    (nav-enemy-method-144 (_type_) time-frame :behavior nav-enemy 144)
    (nav-enemy-method-145 (_type_ nav-control) none 145)
    (nav-enemy-method-146 (_type_ nav-control) none 146)
    (nav-enemy-method-147 (_type_ nav-control) none 147)
    (nav-enemy-method-148 (_type_ nav-control) none 148)
    (nav-enemy-method-149 (_type_ nav-control) none 149)
    (nav-enemy-method-150 (_type_ nav-control) none 150)
    (nav-enemy-method-151 (_type_ nav-control) none 151)
    (nav-enemy-method-152 (_type_ nav-control) none 152)
    (nav-enemy-method-153 (_type_ nav-control) none 153)
    (nav-enemy-method-154 (_type_ nav-control) none 154)
    (nav-enemy-method-155 (_type_) none 155)
    (nav-enemy-method-156 (_type_) none 156)
    (nav-enemy-method-157 (_type_ vector) nav-poly 157)
    (nav-enemy-method-158 (_type_ vector) object 158)
    (nav-enemy-method-159 (_type_ vector) symbol 159)
    (nav-enemy-method-160 (_type_) none 160)
    (nav-enemy-method-161 (_type_) none 161)
    (nav-enemy-method-162 (_type_) none 162)
    (nav-enemy-method-163 (_type_) symbol 163)
    (nav-enemy-method-164 (_type_) none 164)
    (nav-enemy-method-165 (_type_) none 165)
    (nav-enemy-method-166 (_type_) none 166)
    (nav-enemy-method-167 (_type_) none 167)
    (nav-enemy-method-168 (_type_) float 168)
    (nav-enemy-method-169 (_type_ float symbol) float 169)
    (nav-enemy-method-170 (_type_) none 170)
    (nav-enemy-method-171 (_type_) none 171)
    (nav-enemy-method-172 (_type_) none 172)
    (nav-enemy-method-173 (_type_) none 173)
    (nav-enemy-method-174 (_type_) symbol 174)
    (nav-enemy-method-175 (_type_) symbol 175)
    (nav-enemy-method-176 (_type_) none :behavior nav-enemy 176)
    (nav-enemy-method-177 (_type_) none 177)
    )
  )

;; definition for method 3 of type nav-enemy
(defmethod inspect nav-enemy ((obj nav-enemy))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type enemy inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tfrustration-point: ~`vector`P~%" (-> obj frustration-point))
  (format #t "~2Tmove-dest: ~`vector`P~%" (-> obj move-dest))
  (format #t "~2Tfrustration-time: ~D~%" (-> obj frustration-time))
  (format #t "~2Tblocked-start-time: ~D~%" (-> obj blocked-start-time))
  (format #t "~2Trestore-nav-radius-time: ~D~%" (-> obj restore-nav-radius-time))
  (format #t "~2Tnav-radius-backup: ~f~%" (-> obj nav-radius-backup))
  (format #t "~2Tcircle-radial-dist: ~f~%" (-> obj desired-angle))
  (label cfg-4)
  obj
  )

;; definition of type nav-enemy-debug-control-info
(deftype nav-enemy-debug-control-info (basic)
  ((enable   basic  :offset-assert   4)
   (steering float  :offset-assert   8)
   (throttle float  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type nav-enemy-debug-control-info
(defmethod inspect nav-enemy-debug-control-info ((obj nav-enemy-debug-control-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tenable: ~A~%" (-> obj enable))
  (format #t "~1Tsteering: ~f~%" (-> obj steering))
  (format #t "~1Tthrottle: ~f~%" (-> obj throttle))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
