;;-*-Lisp-*-
(in-package goal)

;; definition of type collide-frag-vertex
(deftype collide-frag-vertex (vector)
  ()
  )

;; definition for method 3 of type collide-frag-vertex
;; INFO: Used lq/sq
(defmethod inspect ((this collide-frag-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'collide-frag-vertex)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this x))
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tz: ~f~%" (-> this z))
  (format #t "~1Tw: ~f~%" (-> this w))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (label cfg-4)
  this
  )

;; definition of type collide-frag-mesh
(deftype collide-frag-mesh (basic)
  ((packed-data      uint32)
   (pat-array        uint32)
   (strip-data-len   uint16)
   (poly-count       uint16)
   (base-trans       vector4w  :inline)
   (vertex-count     uint8     :overlay-at (-> base-trans data 3))
   (vertex-data-qwc  uint8     :offset  29)
   (total-qwc        uint8     :offset  30)
   (unused           uint8     :offset  31)
   )
  )

;; definition for method 3 of type collide-frag-mesh
(defmethod inspect ((this collide-frag-mesh))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tpacked-data: #x~X~%" (-> this packed-data))
  (format #t "~1Tpat-array: #x~X~%" (-> this pat-array))
  (format #t "~1Tstrip-data-len: ~D~%" (-> this strip-data-len))
  (format #t "~1Tpoly-count: ~D~%" (-> this poly-count))
  (format #t "~1Tbase-trans: #<vector4w @ #x~X>~%" (-> this base-trans))
  (format #t "~1Tvertex-count: ~D~%" (-> this vertex-count))
  (format #t "~1Tvertex-data-qwc: ~D~%" (-> this vertex-data-qwc))
  (format #t "~1Ttotal-qwc: ~D~%" (-> this total-qwc))
  (format #t "~1Tunused: ~D~%" (-> this unused))
  (label cfg-4)
  this
  )

;; definition of type collide-fragment
(deftype collide-fragment (drawable)
  ((mesh         collide-frag-mesh  :offset   8)
   (collide-new  basic              :offset  12)
   )
  )

;; definition for method 3 of type collide-fragment
(defmethod inspect ((this collide-fragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tmesh: ~A~%" (-> this mesh))
  (format #t "~1Tcollide-new: ~A~%" (-> this collide-new))
  (label cfg-4)
  this
  )

;; definition of type drawable-inline-array-collide-fragment
(deftype drawable-inline-array-collide-fragment (drawable-inline-array)
  ((data  collide-fragment  1 :inline)
   (pad   uint32)
   )
  )

;; definition for method 3 of type drawable-inline-array-collide-fragment
(defmethod inspect ((this drawable-inline-array-collide-fragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tdata[1] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type drawable-tree-collide-fragment
(deftype drawable-tree-collide-fragment (drawable-tree)
  ()
  )

;; failed to figure out what this is:
0
