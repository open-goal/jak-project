;;-*-Lisp-*-
(in-package goal)

;; definition of type pat-surface
(deftype pat-surface (uint32)
  ((skip          uint8        :offset   0 :size   7)
   (mode          pat-mode     :offset   7 :size   3)
   (material      pat-material :offset  10 :size   6)
   (camera        uint8        :offset  16 :size   1)
   (event         pat-event    :offset  18 :size   6)
   (skip2         uint8        :offset  24 :size   5)
   (noentity      uint8        :offset   0 :size   1)
   (nocamera      uint8        :offset   1 :size   1)
   (noedge        uint8        :offset   2 :size   1)
   (nogrind       uint8        :offset   3 :size   1)
   (nojak         uint8        :offset   4 :size   1)
   (noboard       uint8        :offset   5 :size   1)
   (nopilot       uint8        :offset   6 :size   1)
   (probe         uint8        :offset  24 :size   1)
   (nomech        uint8        :offset  25 :size   1)
   (noproj        uint8        :offset  26 :size   1)
   (noendlessfall uint8        :offset  27 :size   1)
   (noprobe       uint8        :offset  28 :size   1)
   (nolineofsight uint8        :offset  16 :size   1)
   )
  )

;; definition for method 3 of type pat-surface
(defmethod inspect ((this pat-surface))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'pat-surface)
  (format #t "~1Tskip: ~D~%" (-> this skip))
  (format #t "~1Tmode: ~D~%" (-> this mode))
  (format #t "~1Tmaterial: ~D~%" (-> this material))
  (format #t "~1Tcamera: ~D~%" (-> this camera))
  (format #t "~1Tevent: ~D~%" (-> this event))
  (format #t "~1Tskip2: ~D~%" (-> this skip2))
  (format #t "~1Tnoentity: ~D~%" (-> this noentity))
  (format #t "~1Tnocamera: ~D~%" (-> this nocamera))
  (format #t "~1Tnoedge: ~D~%" (-> this noedge))
  (format #t "~1Tnogrind: ~D~%" (-> this nogrind))
  (format #t "~1Tnojak: ~D~%" (-> this nojak))
  (format #t "~1Tnoboard: ~D~%" (-> this noboard))
  (format #t "~1Tnopilot: ~D~%" (-> this nopilot))
  (format #t "~1Tprobe: ~D~%" (-> this probe))
  (format #t "~1Tnomech: ~D~%" (-> this nomech))
  (format #t "~1Tnoproj: ~D~%" (-> this noproj))
  (format #t "~1Tnoendlessfall: ~D~%" (-> this noendlessfall))
  (format #t "~1Tnoprobe: ~D~%" (-> this noprobe))
  (format #t "~1Tnolineofsight: ~D~%" (-> this camera))
  (format #t "~1Tboard: ~D~%" (-> this nojak))
  (label cfg-4)
  this
  )

;; definition (debug) for function pat-material->string
(defun-debug pat-material->string ((arg0 pat-surface))
  (case (-> arg0 material)
    (((pat-material deepsnow))
     "deepsnow"
     )
    (((pat-material neutral))
     "neutral"
     )
    (((pat-material carpet))
     "carpet"
     )
    (((pat-material shmetal))
     "shmetal"
     )
    (((pat-material grmetal))
     "grmetal"
     )
    (((pat-material lava))
     "lava"
     )
    (((pat-material crmetal))
     "crmetal"
     )
    (((pat-material pcmetal))
     "pcmetal"
     )
    (((pat-material grass))
     "grass"
     )
    (((pat-material snow))
     "snow"
     )
    (((pat-material swamp))
     "swamp"
     )
    (((pat-material stone))
     "stone"
     )
    (((pat-material hotcoals))
     "hotcoals"
     )
    (((pat-material unknown))
     "unknown"
     )
    (((pat-material dirt))
     "dirt"
     )
    (((pat-material tube))
     "tube"
     )
    (((pat-material stopproj))
     "stopproj"
     )
    (((pat-material tar))
     "tar"
     )
    (((pat-material straw))
     "straw"
     )
    (((pat-material wood))
     "wood"
     )
    (((pat-material quicksand))
     "quicksand"
     )
    (((pat-material ice))
     "ice"
     )
    (((pat-material rotate))
     "rotate"
     )
    (((pat-material crwood))
     "crwood"
     )
    (((pat-material waterbottom))
     "waterbottom"
     )
    (((pat-material hdwood))
     "hdwood"
     )
    (((pat-material sand))
     "sand"
     )
    (((pat-material gravel))
     "gravel"
     )
    (((pat-material metal))
     "metal"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition (debug) for function pat-mode->string
(defun-debug pat-mode->string ((arg0 pat-surface))
  (case (-> arg0 mode)
    (((pat-mode wall))
     "wall"
     )
    (((pat-mode halfpipe))
     "halfpipe"
     )
    (((pat-mode obstacle))
     "obstacle"
     )
    (((pat-mode ground))
     "ground"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition (debug) for function pat-event->string
(defun-debug pat-event->string ((arg0 pat-surface))
  (case (-> arg0 event)
    (((pat-event burn))
     "burn"
     )
    (((pat-event deadly))
     "deadly"
     )
    (((pat-event slippery))
     "slippery"
     )
    (((pat-event melt))
     "melt"
     )
    (((pat-event endlessfall))
     "endlessfall"
     )
    (((pat-event burnup))
     "burnup"
     )
    (((pat-event hide))
     "hide"
     )
    (((pat-event deadlyup))
     "deadlyup"
     )
    (((pat-event shockup))
     "shockup"
     )
    (((pat-event slide))
     "slide"
     )
    (((pat-event lipramp))
     "lipramp"
     )
    (((pat-event rail))
     "rail"
     )
    (((pat-event none))
     "none"
     )
    (((pat-event lip))
     "lip"
     )
    (((pat-event shock))
     "shock"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition of type pat-mode-info
(deftype pat-mode-info (structure)
  ((name          string)
   (wall-angle    float)
   (color         rgba)
   (hilite-color  rgba)
   )
  )

;; definition for method 3 of type pat-mode-info
(defmethod inspect ((this pat-mode-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'pat-mode-info)
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Twall-angle: ~f~%" (-> this wall-angle))
  (format #t "~1Tcolor: ~D~%" (-> this color))
  (format #t "~1Thilite-color: ~D~%" (-> this hilite-color))
  (label cfg-4)
  this
  )

;; definition for symbol *pat-mode-info*, type (inline-array pat-mode-info)
(define *pat-mode-info* (new 'static 'inline-array pat-mode-info 4
                          (new 'static 'pat-mode-info
                            :name "ground"
                            :wall-angle 0.2
                            :color (new 'static 'rgba :r #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :r #xff :a #x80)
                            )
                          (new 'static 'pat-mode-info
                            :name "wall"
                            :wall-angle 2.0
                            :color (new 'static 'rgba :b #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :b #xff :a #x80)
                            )
                          (new 'static 'pat-mode-info
                            :name "obstacle"
                            :wall-angle 0.82
                            :color (new 'static 'rgba :r #x7f :b #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :r #xff :b #xff :a #x80)
                            )
                          (new 'static 'pat-mode-info
                            :name "halfpipe"
                            :wall-angle -2.0
                            :color (new 'static 'rgba :r #x7f :g #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :r #xff :g #xff :a #x80)
                            )
                          )
        )

;; failed to figure out what this is:
0
