;;-*-Lisp-*-
(in-package goal)

;; definition of type collide-query
(deftype collide-query (structure)
  ((best-other-tri   collide-tri-result    :inline   :offset-assert   0)
   (best-my-tri      collide-tri-result    :inline   :offset          0)
   (ignore-processes process-tree          2         :offset-assert  88)
   (ignore-process0  process-tree                    :offset         88)
   (ignore-process1  process-tree                    :offset         92)
   (ignore-pat       pat-surface                     :offset-assert  96)
   (ignore-pat-s32   int32                           :offset         96)
   (collide-with     collide-spec                    :offset-assert 100)
   (collide-with-s32 int32                           :offset        100)
   (overlay-params   uint32                3         :offset        112)
   (bbox             bounding-box          :inline   :offset-assert 128)
   (bbox4w           bounding-box4w        :inline   :offset-assert 160)
   (bsphere          sphere                :inline   :offset-assert 192)
   (start-pos        vector                :inline   :offset-assert 208)
   (move-dist        vector                :inline   :offset-assert 224)
   (rlength          vector                :inline   :offset-assert 240)
   (exit-planes      plane                 2 :inline :offset-assert 256)
   (radius           float                           :offset        268)
   (inv-mat          matrix                :inline   :offset        288)
   (spheres          (inline-array sphere)           :offset        112)
   (num-spheres      uint32                          :offset        116)
   (solid-only       symbol                          :offset        120)
   (best-dist        float                           :offset        112)
   (best-other-prim  collide-shape-prim              :offset        116)
   (best-my-prim     collide-shape-prim              :offset        120)
   (move-vec         vector                :inline   :offset        224)
   (best-u           float                           :offset        112)
   (action-mask      collide-action                  :offset-assert 352)
   (local-box4w      bounding-box4w        :inline   :offset-assert 368)
   (search-box       bounding-box4w        :inline   :offset-assert 400)
   (search-vector    vector4w              :inline   :offset-assert 432)
   (instance-mat     matrix                :inline   :offset-assert 448)
   (instance-ptr     basic                           :offset-assert 512)
   (x-addr           uint32                          :offset-assert 516)
   (x-step           uint32                          :offset-assert 520)
   (y-addr           uint32                          :offset-assert 524)
   (y-step           uint32                          :offset-assert 528)
   (z-addr           uint32                          :offset-assert 532)
   (z-step           uint32                          :offset-assert 536)
   )
  :method-count-assert 9
  :size-assert         #x21c
  :flag-assert         #x90000021c
  )

;; definition for method 3 of type collide-query
(defmethod inspect collide-query ((this collide-query))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'collide-query)
  (format #t "~1Tbest-other-tri: #<collide-tri-result @ #x~X>~%" (-> this best-other-tri))
  (format #t "~1Tbest-my-tri: #<collide-tri-result @ #x~X>~%" (-> this best-other-tri))
  (format #t "~1Tignore-processes[2] @ #x~X~%" (-> this ignore-processes))
  (format #t "~1Tignore-process0: ~A~%" (-> this ignore-process0))
  (format #t "~1Tignore-process1: ~A~%" (-> this ignore-process1))
  (format #t "~1Tignore-pat: ~D~%" (-> this ignore-pat))
  (format #t "~1Tcollide-with: ~D~%" (-> this collide-with))
  (format #t "~1Toverlay-params[3] @ #x~X~%" (&-> this best-dist))
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> this bbox))
  (format #t "~1Tbbox4w: #<bounding-box4w @ #x~X>~%" (-> this bbox4w))
  (format #t "~1Tbsphere: #<sphere @ #x~X>~%" (-> this bsphere))
  (format #t "~1Tstart-pos: #<vector @ #x~X>~%" (-> this start-pos))
  (format #t "~1Tmove-dist: #<vector @ #x~X>~%" (-> this move-dist))
  (format #t "~1Trlength: #<vector @ #x~X>~%" (-> this rlength))
  (format #t "~1Texit-planes[2] @ #x~X~%" (-> this exit-planes))
  (format #t "~1Tradius: ~f~%" (-> this radius))
  (format #t "~1Tinv-mat: #<matrix @ #x~X>~%" (-> this inv-mat))
  (format #t "~1Tspheres: #x~X~%" (-> this best-dist))
  (format #t "~1Tnum-spheres: ~D~%" (-> this num-spheres))
  (format #t "~1Tsolid-only: ~A~%" (-> this best-my-prim))
  (format #t "~1Tbest-dist: ~f~%" (the-as float (-> this best-dist)))
  (format #t "~1Tbest-other-prim: ~A~%" (-> this num-spheres))
  (format #t "~1Tbest-my-prim: ~A~%" (-> this best-my-prim))
  (format #t "~1Tmove-vec: #<vector @ #x~X>~%" (-> this move-dist))
  (format #t "~1Tbest-u: ~f~%" (the-as float (-> this best-dist)))
  (format #t "~1Taction-mask: ~D~%" (-> this action-mask))
  (format #t "~1Tlocal-box4w: #<bounding-box4w @ #x~X>~%" (-> this local-box4w))
  (format #t "~1Tsearch-box: #<bounding-box4w @ #x~X>~%" (-> this search-box))
  (format #t "~1Tsearch-vector: #<vector4w @ #x~X>~%" (-> this search-vector))
  (format #t "~1Tinstance-mat: #<matrix @ #x~X>~%" (-> this instance-mat))
  (format #t "~1Tinstance-ptr: ~A~%" (-> this instance-ptr))
  (format #t "~1Tx-addr: ~D~%" (-> this x-addr))
  (format #t "~1Tx-step: ~D~%" (-> this x-step))
  (format #t "~1Ty-addr: ~D~%" (-> this y-addr))
  (format #t "~1Ty-step: ~D~%" (-> this y-step))
  (format #t "~1Tz-addr: ~D~%" (-> this z-addr))
  (format #t "~1Tz-step: ~D~%" (-> this z-step))
  (label cfg-4)
  this
  )

;; definition for symbol *collide-test-flag*, type symbol
(define *collide-test-flag* #f)

;; failed to figure out what this is:
0
