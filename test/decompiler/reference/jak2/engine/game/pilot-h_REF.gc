;;-*-Lisp-*-
(in-package goal)

;; definition of type vehicle-controls
(deftype vehicle-controls (structure)
  ((steering float  :offset-assert   0)
   (throttle float  :offset-assert   4)
   (brake    float  :offset-assert   8)
   (lean-z   float  :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type vehicle-controls
(defmethod inspect vehicle-controls ((this vehicle-controls))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-controls)
  (format #t "~1Tsteering: ~f~%" (-> this steering))
  (format #t "~1Tthrottle: ~f~%" (-> this throttle))
  (format #t "~1Tbrake: ~f~%" (-> this brake))
  (format #t "~1Tlean-z: ~f~%" (-> this lean-z))
  (label cfg-4)
  this
  )

;; definition of type pilot-info
(deftype pilot-info (basic)
  ((entity                  basic                      :offset-assert   4)
   (vehicle                 handle                     :offset-assert   8)
   (left-right-interp       float                      :offset-assert  16)
   (front-back-interp       float                      :offset-assert  20)
   (up-down-interp          float                      :offset-assert  24)
   (up-down-accel-factor    float                      :offset-assert  28)
   (front-back-accel-factor float                      :offset-assert  32)
   (left-right-accel-factor float                      :offset-assert  36)
   (stance                  uint8                      :offset-assert  40)
   (seat-index              int8                       :offset-assert  41)
   (backup-nav-radius       float                      :offset-assert  44)
   (cam-side-shift          float                      :offset-assert  48)
   (enable-cam-side-shift   symbol                     :offset-assert  52)
   (gun?                    symbol                     :offset-assert  56)
   (controls                vehicle-controls :inline   :offset-assert  60)
   (accel-array             vector           8 :inline :offset-assert  80)
   (local-accel             vector           :inline   :offset-assert 208)
   (pilot-trans             vector           :inline   :offset-assert 224)
   (pilot-quat              vector           :inline   :offset-assert 240)
   (pilot-scale             vector           :inline   :offset-assert 256)
   (pilot-time              time-frame                 :offset-assert 272)
   (as-daxter?              symbol                     :offset-assert 280)
   (art-group-backup        basic                      :offset-assert 284)
   )
  :method-count-assert 9
  :size-assert         #x120
  :flag-assert         #x900000120
  )

;; definition for method 3 of type pilot-info
(defmethod inspect pilot-info ((this pilot-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Tvehicle: #x~X~%" (-> this vehicle))
  (format #t "~1Tleft-right-interp: ~f~%" (-> this left-right-interp))
  (format #t "~1Tfront-back-interp: ~f~%" (-> this front-back-interp))
  (format #t "~1Tup-down-interp: ~f~%" (-> this up-down-interp))
  (format #t "~1Tup-down-accel-factor: ~f~%" (-> this up-down-accel-factor))
  (format #t "~1Tfront-back-accel-factor: ~f~%" (-> this front-back-accel-factor))
  (format #t "~1Tleft-right-accel-factor: ~f~%" (-> this left-right-accel-factor))
  (format #t "~1Tstance: ~D~%" (-> this stance))
  (format #t "~1Tseat-index: ~D~%" (-> this seat-index))
  (format #t "~1Tbackup-nav-radius: ~f~%" (-> this backup-nav-radius))
  (format #t "~1Tcam-side-shift: ~f~%" (-> this cam-side-shift))
  (format #t "~1Tenable-cam-side-shift: ~A~%" (-> this enable-cam-side-shift))
  (format #t "~1Tgun?: ~A~%" (-> this gun?))
  (format #t "~1Tcontrols: #<vehicle-controls @ #x~X>~%" (-> this controls))
  (format #t "~1Taccel-array: ~`vector`P~%" (-> this accel-array))
  (format #t "~1Tlocal-accel: ~`vector`P~%" (-> this local-accel))
  (format #t "~1Tpilot-trans: ~`vector`P~%" (-> this pilot-trans))
  (format #t "~1Tpilot-quat: ~`vector`P~%" (-> this pilot-quat))
  (format #t "~1Tpilot-scale: ~`vector`P~%" (-> this pilot-scale))
  (format #t "~1Tpilot-time: ~D~%" (-> this pilot-time))
  (format #t "~1Tas-daxter?: ~A~%" (-> this as-daxter?))
  (format #t "~1Tart-group-backup: ~A~%" (-> this art-group-backup))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
