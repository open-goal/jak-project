;;-*-Lisp-*-
(in-package goal)

(local-vars (gp-0 game-info))

;; definition of type game-bank
(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert   4)
   (life-start-default float  :offset-assert   8)
   (life-single-inc    float  :offset-assert  12)
   (money-task-inc     float  :offset-assert  16)
   (money-oracle-inc   float  :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type game-bank
(defmethod inspect game-bank ((obj game-bank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlife-max-default: ~f~%" (-> obj life-max-default))
  (format #t "~1Tlife-start-default: ~f~%" (-> obj life-start-default))
  (format #t "~1Tlife-single-inc: ~f~%" (-> obj life-single-inc))
  (format #t "~1Tmoney-task-inc: ~f~%" (-> obj money-task-inc))
  (format #t "~1Tmoney-oracle-inc: ~f~%" (-> obj money-oracle-inc))
  (label cfg-4)
  obj
  )

;; definition for symbol *GAME-bank*, type game-bank
(define *GAME-bank* (new 'static 'game-bank
                      :life-max-default 99.0
                      :life-start-default 5.0
                      :life-single-inc 1.0
                      :money-task-inc 90.0
                      :money-oracle-inc 120.0
                      )
        )

;; definition of type actor-id
(deftype actor-id (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition of type highscore-info
(deftype highscore-info (structure)
  ((flags        uint8   :offset-assert   0)
   (award-scores float 3 :offset-assert   4)
   (bronze-score float   :offset          4)
   (silver-score float   :offset          8)
   (gold-score   float   :offset         12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (highscore-info-method-9 () none 9)
    )
  )

;; definition for method 3 of type highscore-info
(defmethod inspect highscore-info ((obj highscore-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'highscore-info)
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Taward-scores[3] @ #x~X~%" (-> obj award-scores))
  (format #t "~1Tbronze-score: ~f~%" (-> obj bronze-score))
  (format #t "~1Tsilver-score: ~f~%" (-> obj silver-score))
  (format #t "~1Tgold-score: ~f~%" (-> obj gold-score))
  (label cfg-4)
  obj
  )

;; definition of type level-buffer-state
(deftype level-buffer-state (structure)
  ((name          symbol  :offset-assert   0)
   (display?      symbol  :offset-assert   4)
   (force-vis?    symbol  :offset-assert   8)
   (force-inside? symbol  :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type level-buffer-state
(defmethod inspect level-buffer-state ((obj level-buffer-state))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'level-buffer-state)
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tdisplay?: ~A~%" (-> obj display?))
  (format #t "~1Tforce-vis?: ~A~%" (-> obj force-vis?))
  (format #t "~1Tforce-inside?: ~A~%" (-> obj force-inside?))
  (label cfg-4)
  obj
  )

;; definition of type load-state
(deftype load-state (basic)
  ((want          level-buffer-state 6 :inline :offset-assert   4)
   (want-sound    symbol             3         :offset-assert 100)
   (vis-nick      symbol                       :offset-assert 112)
   (command-list  pair                         :offset-assert 116)
   (object-name   string             256       :offset-assert 120)
   (object-status basic              256       :offset-assert 1144)
   )
  :method-count-assert 22
  :size-assert         #x878
  :flag-assert         #x1600000878
  (:methods
    (new (symbol type) _type_ 0)
    (reset! (_type_) _type_ 9)
    (update! (_type_) int 10)
    (want-levels (_type_ (pointer symbol)) int 11)
    (want-sound-banks (_type_ (pointer symbol)) none 12)
    (want-display-level (_type_ symbol symbol) int 13)
    (want-vis-level (_type_ symbol) none 14)
    (load-state-method-15 () none 15)
    (load-state-method-16 () none 16)
    (load-state-method-17 () none 17)
    (load-state-method-18 () none 18)
    (load-state-method-19 () none 19)
    (load-state-method-20 () none 20)
    (load-state-method-21 () none 21)
    )
  )

;; definition for method 3 of type load-state
(defmethod inspect load-state ((obj load-state))
  (when (not obj)
    (set! obj obj)
    (goto cfg-10)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twant[6] @ #x~X~%" (-> obj want))
  (dotimes (s5-0 6)
    (format #t "~T  [~D]~1Twant: ~`level-buffer-state`P~%" s5-0 (-> obj want s5-0))
    )
  (format #t "~1Twant-sound[3] @ #x~X~%" (-> obj want-sound))
  (dotimes (s5-1 3)
    (format #t "~T  [~D]~1Twant-sound: ~`symbol`P~%" s5-1 (-> obj want-sound s5-1))
    )
  (format #t "~1Tvis-nick: ~A~%" (-> obj vis-nick))
  (format #t "~1Tcommand-list: ~A~%" (-> obj command-list))
  (format #t "~1Tobject-name[256] @ #x~X~%" (-> obj object-name))
  (format #t "~1Tobject-status[256] @ #x~X~%" (-> obj object-status))
  (label cfg-10)
  obj
  )

;; definition for method 0 of type load-state
(defmethod new load-state ((allocation symbol) (type-to-make type))
  (reset! (object-new allocation type-to-make (the-as int (-> type-to-make size))))
  )

;; definition of type continue-point
(deftype continue-point (basic)
  ((name         string                       :offset-assert   4)
   (level        symbol                       :offset-assert   8)
   (flags        continue-flags               :offset-assert  12)
   (trans        vector             :inline   :offset-assert  16)
   (quat         vector             :inline   :offset-assert  32)
   (camera-trans vector             :inline   :offset-assert  48)
   (camera-rot   float              9         :offset-assert  64)
   (on-goto      pair                         :offset-assert 100)
   (vis-nick     symbol                       :offset-assert 104)
   (want         level-buffer-state 6 :inline :offset-assert 108)
   (want-sound   symbol             3         :offset-assert 204)
   )
  :method-count-assert 12
  :size-assert         #xd8
  :flag-assert         #xc000000d8
  (:methods
    (continue-point-method-9 () none 9)
    (continue-point-method-10 () none 10)
    (continue-point-method-11 (_type_) none 11)
    )
  )

;; definition for method 3 of type continue-point
(defmethod inspect continue-point ((obj continue-point))
  (when (not obj)
    (set! obj obj)
    (goto cfg-10)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ttrans: ~`vector`P~%" (-> obj trans))
  (format #t "~1Tquat: ~`vector`P~%" (-> obj quat))
  (format #t "~1Tcamera-trans: ~`vector`P~%" (-> obj camera-trans))
  (format #t "~1Tcamera-rot[9] @ #x~X~%" (-> obj camera-rot))
  (format #t "~1Ton-goto: ~A~%" (-> obj on-goto))
  (format #t "~1Tvis-nick: ~A~%" (-> obj vis-nick))
  (format #t "~1Twant[6] @ #x~X~%" (-> obj want))
  (dotimes (s5-0 6)
    (format #t "~T  [~D]~1Twant: ~`level-buffer-state`P~%" s5-0 (-> obj want s5-0))
    )
  (format #t "~1Twant-sound[3] @ #x~X~%" (-> obj want-sound))
  (dotimes (s5-1 3)
    (format #t "~T  [~D]~1Twant-sound: ~`symbol`P~%" s5-1 (-> obj want-sound s5-1))
    )
  (label cfg-10)
  obj
  )

;; definition of type game-info
(deftype game-info (basic)
  ((mode                   symbol                    :offset-assert   4)
   (save-name              string                    :offset-assert   8)
   (life                   float                     :offset-assert  12)
   (life-max               float                     :offset-assert  16)
   (money                  float                     :offset-assert  20)
   (money-total            float                     :offset-assert  24)
   (money-per-level        uint8                  32 :offset-assert  28)
   (deaths-per-level       uint8                  32 :offset-assert  60)
   (buzzer-total           float                     :offset-assert  92)
   (fuel                   float                     :offset-assert  96)
   (gem                    float                     :offset-assert 100)
   (gem-total              float                     :offset-assert 104)
   (skill                  float                     :offset-assert 108)
   (skill-total            float                     :offset-assert 112)
   (karma                  float                     :offset-assert 116)
   (eco-pill-dark          float                     :offset-assert 120)
   (eco-pill-dark-total    float                     :offset-assert 124)
   (features               game-feature              :offset-assert 128)
   (debug-features         game-feature              :offset-assert 136)
   (secrets                game-secrets              :offset-assert 144)
   (unknown-pad1           uint32                    :offset-assert 148)
   (purchase-secrets       uint32                    :offset-assert 152)
   (unknown-pad2           uint32                    :offset-assert 156)
   (gun-type               int32                     :offset-assert 160)
   (gun-ammo               float                  4  :offset-assert 164)
   (shield                 float                     :offset-assert 180)
   (score                  float                     :offset-assert 184)
   (score-owner            uint64                    :offset-assert 192)
   (timer                  uint64                    :offset-assert 200)
   (timer-owner            uint64                    :offset-assert 208)
   (timer-flash            basic                     :offset-assert 216)
   (counter                float                     :offset-assert 220)
   (counter-flash          basic                     :offset-assert 224)
   (attack-id              uint32                    :offset-assert 228)
   (perm-list              entity-perm-array         :offset-assert 232)
   (task-perm-list         entity-perm-array         :offset-assert 236)
   (current-continue       continue-point            :offset-assert 240)
   (last-continue          continue-point            :offset-assert 244)
   (unknown-pad3           array                     :offset-assert 248)
   (unknown-pad4           array                     :offset-assert 252)
   (unknown-pad5           array                     :offset-assert 256)
   (task-counter           uint32                    :offset-assert 260)
   (unknown-pad6           uint32                    :offset-assert 264)
   (level-opened           uint8                  32 :offset-assert 268)
   (total-deaths           int32                     :offset-assert 300)
   (continue-deaths        int32                     :offset-assert 304)
   (task-deaths            int32                     :offset-assert 308)
   (total-trys             int32                     :offset-assert 312)
   (game-start-time        time-frame                :offset-assert 320)
   (continue-time          time-frame                :offset-assert 328)
   (death-time             time-frame                :offset-assert 336)
   (hit-time               time-frame                :offset-assert 344)
   (task-pickup-time       time-frame                :offset-assert 352)
   (unknown-array1         (array uint64)            :offset-assert 360)
   (unknown-array2         (array uint64)            :offset-assert 364)
   (unknown-array3         (array uint64)            :offset-assert 368)
   (death-pos              vector-array              :offset        372)
   (stop-watch-start       uint64                    :offset-assert 376)
   (stop-watch-stop        uint64                    :offset-assert 384)
   (blackout-time          time-frame                :offset-assert 392)
   (letterbox-time         time-frame                :offset-assert 400)
   (hint-play-time         time-frame                :offset-assert 408)
   (display-text-time      time-frame                :offset-assert 416)
   (display-text-handle    uint64                    :offset-assert 424)
   (death-movie-tick       int32                     :offset-assert 432)
   (want-auto-save         symbol                    :offset-assert 436)
   (auto-save-proc         handle                    :offset-assert 440)
   (auto-save-status       mc-status-code            :offset-assert 448)
   (auto-save-card         int32                     :offset-assert 452)
   (auto-save-which        int32                     :offset-assert 456)
   (auto-save-count        int32                     :offset-assert 460)
   (pov-camera-handle      uint64                    :offset-assert 464)
   (other-camera-handle    uint64                    :offset-assert 472)
   (controller             uint64                 2  :offset-assert 480)
   (race-timer             uint64                    :offset-assert 496)
   (race-current-lap-count int32                     :offset-assert 504)
   (race-total-lap-count   int32                     :offset-assert 508)
   (race-position          int32                     :offset-assert 512)
   (race-number-turbos     int32                     :offset-assert 516)
   (bot-health             uint32                 3  :offset-assert 520)
   (demo-state             uint32                    :offset-assert 532)
   (wanted-flash           basic                     :offset-assert 536)
   (distance               float                     :offset-assert 540)
   (kiosk-timeout          uint64                    :offset-assert 544)
   (pause-start-time       time-frame                :offset-assert 552)
   (game-score             (array highscore-info)    :offset-assert 560)
   (goal                   float                     :offset-assert 564)
   (miss                   float                     :offset-assert 568)
   (miss-max               float                     :offset-assert 572)
   (unknown-array4         (array uint64)            :offset-assert 576)
   (live-eco-pill-count    int32                     :offset-assert 580)
   (live-gem-count         int32                     :offset-assert 584)
   (air-supply             float                     :offset-assert 588)
   (homing-beacon          int32                     :offset-assert 592)
   (dark-eco-pickup        int32                     :offset-assert 596)
   (green-eco-pickup       int32                     :offset-assert 600)
   )
  :method-count-assert 31
  :size-assert         #x25c
  :flag-assert         #x1f0000025c
  (:methods
    (initialize! (_type_ symbol game-save string) _type_ 9)
    (game-info-method-10 () none 10)
    (task-complete? (_type_ game-task) symbol 11)
    (game-info-method-12 (_type_) none 12)
    (game-info-method-13 () none 13)
    (game-info-method-14 () none 14)
    (game-info-method-15 () none 15)
    (copy-perms-from-level! (_type_ level) none 16)
    (copy-perms-to-level! (_type_ level) none 17)
    (game-info-method-18 () none 18)
    (get-current-continue-point (_type_) continue-point 19)
    (get-continue-by-name (_type_ string) continue-point 20)
    (set-continue! (_type_ basic) continue-point 21)
    (game-info-method-22 () none 22)
    (game-info-method-23 () none 23)
    (game-info-method-24 () none 24)
    (game-info-method-25 () none 25)
    (game-info-method-26 () none 26)
    (get-next-attack-id (_type_) uint 27)
    (game-info-method-28 () none 28)
    (game-info-method-29 () none 29)
    (game-info-method-30 () none 30)
    )
  )

;; definition for method 3 of type game-info
(defmethod inspect game-info ((obj game-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tmode: ~A~%" (-> obj mode))
  (format #t "~1Tsave-name: ~A~%" (-> obj save-name))
  (format #t "~1Tlife: ~f~%" (-> obj life))
  (format #t "~1Tlife-max: ~f~%" (-> obj life-max))
  (format #t "~1Tmoney: ~f~%" (-> obj money))
  (format #t "~1Tmoney-total: ~f~%" (-> obj money-total))
  (format #t "~1Tmoney-per-level[32] @ #x~X~%" (-> obj money-per-level))
  (format #t "~1Tdeaths-per-level[32] @ #x~X~%" (-> obj deaths-per-level))
  (format #t "~1Tbuzzer-total: ~f~%" (-> obj buzzer-total))
  (format #t "~1Tfuel: ~f~%" (-> obj fuel))
  (format #t "~1Tgem: ~f~%" (-> obj gem))
  (format #t "~1Tgem-total: ~f~%" (-> obj gem-total))
  (format #t "~1Tskill: ~f~%" (-> obj skill))
  (format #t "~1Tskill-total: ~f~%" (-> obj skill-total))
  (format #t "~1Tkarma: ~f~%" (-> obj karma))
  (format #t "~1Teco-pill-dark: ~f~%" (-> obj eco-pill-dark))
  (format #t "~1Teco-pill-dark-total: ~f~%" (-> obj eco-pill-dark-total))
  (format #t "~1Tfeatures: ~D~%" (-> obj features))
  (format #t "~1Tdebug-features: ~D~%" (-> obj debug-features))
  (format #t "~1Tsecrets: ~D~%" (-> obj secrets))
  (format #t "~1Tpurchase-secrets: ~D~%" (-> obj purchase-secrets))
  (format #t "~1Tgun-type: ~D~%" (-> obj gun-type))
  (format #t "~1Tgun-ammo[4] @ #x~X~%" (-> obj gun-ammo))
  (format #t "~1Tshield: ~f~%" (-> obj shield))
  (format #t "~1Tscore: ~f~%" (-> obj score))
  (format #t "~1Tscore-owner: ~D~%" (-> obj score-owner))
  (format #t "~1Ttimer: ~D~%" (-> obj timer))
  (format #t "~1Ttimer-owner: ~D~%" (-> obj timer-owner))
  (format #t "~1Ttimer-flash: ~A~%" (-> obj timer-flash))
  (format #t "~1Tcounter: ~f~%" (-> obj counter))
  (format #t "~1Tcounter-flash: ~A~%" (-> obj counter-flash))
  (format #t "~1Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~1Tperm-list: ~A~%" (-> obj perm-list))
  (format #t "~1Ttask-perm-list: ~A~%" (-> obj task-perm-list))
  (format #t "~1Tcurrent-continue: ~A~%" (-> obj current-continue))
  (format #t "~1Tlast-continue: ~A~%" (-> obj last-continue))
  (format #t "~1Ttask-counter: ~D~%" (-> obj task-counter))
  (format #t "~1Tlevel-opened[32] @ #x~X~%" (-> obj level-opened))
  (format #t "~1Ttotal-deaths: ~D~%" (-> obj total-deaths))
  (format #t "~1Tcontinue-deaths: ~D~%" (-> obj continue-deaths))
  (format #t "~1Ttask-deaths: ~D~%" (-> obj task-deaths))
  (format #t "~1Ttotal-trys: ~D~%" (-> obj total-trys))
  (format #t "~1Tgame-start-time: ~D~%" (-> obj game-start-time))
  (format #t "~1Tcontinue-time: ~D~%" (-> obj continue-time))
  (format #t "~1Tdeath-time: ~D~%" (-> obj death-time))
  (format #t "~1Thit-time: ~D~%" (-> obj hit-time))
  (format #t "~1Ttask-pickup-time: ~D~%" (-> obj task-pickup-time))
  (format #t "~1Tdeath-pos: ~A~%" (-> obj death-pos))
  (format #t "~1Tstop-watch-start: ~D~%" (-> obj stop-watch-start))
  (format #t "~1Tstop-watch-stop: ~D~%" (-> obj stop-watch-stop))
  (format #t "~1Tblackout-time: ~D~%" (-> obj blackout-time))
  (format #t "~1Tletterbox-time: ~D~%" (-> obj letterbox-time))
  (format #t "~1Thint-play-time: ~D~%" (-> obj hint-play-time))
  (format #t "~1Tdisplay-text-time: ~D~%" (-> obj display-text-time))
  (format #t "~1Tdisplay-text-handle: ~D~%" (-> obj display-text-handle))
  (format #t "~1Tdeath-movie-tick: ~D~%" (-> obj death-movie-tick))
  (format #t "~1Twant-auto-save: ~A~%" (-> obj want-auto-save))
  (format #t "~1Tauto-save-proc: ~D~%" (-> obj auto-save-proc))
  (format #t "~1Tauto-save-status: ~D~%" (-> obj auto-save-status))
  (format #t "~1Tauto-save-card: ~D~%" (-> obj auto-save-card))
  (format #t "~1Tauto-save-which: ~D~%" (-> obj auto-save-which))
  (format #t "~1Tauto-save-count: ~D~%" (-> obj auto-save-count))
  (format #t "~1Tpov-camera-handle: ~D~%" (-> obj pov-camera-handle))
  (format #t "~1Tother-camera-handle: ~D~%" (-> obj other-camera-handle))
  (format #t "~1Tcontroller[2] @ #x~X~%" (-> obj controller))
  (format #t "~1Trace-timer: ~D~%" (-> obj race-timer))
  (format #t "~1Trace-current-lap-count: ~D~%" (-> obj race-current-lap-count))
  (format #t "~1Trace-total-lap-count: ~D~%" (-> obj race-total-lap-count))
  (format #t "~1Trace-position: ~D~%" (-> obj race-position))
  (format #t "~1Trace-number-turbos: ~D~%" (-> obj race-number-turbos))
  (format #t "~1Tbot-health[3] @ #x~X~%" (-> obj bot-health))
  (format #t "~1Tdemo-state: ~D~%" (-> obj demo-state))
  (format #t "~1Twanted-flash: ~A~%" (-> obj wanted-flash))
  (format #t "~1Tdistance: ~f~%" (-> obj distance))
  (format #t "~1Tkiosk-timeout: ~D~%" (-> obj kiosk-timeout))
  (format #t "~1Tpause-start-time: ~D~%" (-> obj pause-start-time))
  (format #t "~1Tgame-score: ~A~%" (-> obj game-score))
  (format #t "~1Tgoal: ~f~%" (-> obj goal))
  (format #t "~1Tmiss: ~f~%" (-> obj miss))
  (format #t "~1Tmiss-max: ~f~%" (-> obj miss-max))
  (format #t "~1Tlive-eco-pill-count: ~D~%" (-> obj live-eco-pill-count))
  (format #t "~1Tlive-gem-count: ~D~%" (-> obj live-gem-count))
  (format #t "~1Tair-supply: ~f~%" (-> obj air-supply))
  (format #t "~1Thoming-beacon: ~D~%" (-> obj homing-beacon))
  (format #t "~1Tdark-eco-pickup: ~D~%" (-> obj dark-eco-pickup))
  (format #t "~1Tgreen-eco-pickup: ~D~%" (-> obj green-eco-pickup))
  (label cfg-4)
  obj
  )

;; definition for method 27 of type game-info
(defmethod get-next-attack-id game-info ((obj game-info))
  (let ((v0-0 (+ (-> obj attack-id) 1)))
    (set! (-> obj attack-id) v0-0)
    v0-0
    )
  )

;; failed to figure out what this is:
(set! gp-0 (when (or (not *game-info*) (zero? *game-info*))
             (set! gp-0 (new 'static 'game-info :mode 'debug :current-continue #f :last-continue #f))
             (set! (-> gp-0 unknown-array1) (the-as (array uint64) (new 'global 'boxed-array uint64 110)))
             (set! (-> gp-0 unknown-array4) (the-as (array uint64) (new 'global 'boxed-array uint64 110)))
             (set! (-> gp-0 unknown-array2) (the-as (array uint64) (new 'global 'boxed-array uint64 32)))
             (set! (-> gp-0 unknown-array3) (the-as (array uint64) (new 'global 'boxed-array uint64 32)))
             (set! *game-info* gp-0)
             gp-0
             )
      )
