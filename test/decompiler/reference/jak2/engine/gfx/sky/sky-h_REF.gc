;;-*-Lisp-*-
(in-package goal)

;; definition of type sky-color-hour
(deftype sky-color-hour (structure)
  ((snapshot1   int32  :offset-assert   0)
   (snapshot2   int32  :offset-assert   4)
   (morph-start float  :offset-assert   8)
   (morph-end   float  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type sky-color-hour
(defmethod inspect sky-color-hour ((obj sky-color-hour))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-color-hour)
  (format #t "~1Tsnapshot1: ~D~%" (-> obj snapshot1))
  (format #t "~1Tsnapshot2: ~D~%" (-> obj snapshot2))
  (format #t "~1Tmorph-start: ~f~%" (-> obj morph-start))
  (format #t "~1Tmorph-end: ~f~%" (-> obj morph-end))
  (label cfg-4)
  obj
  )

;; definition of type sky-color-day
(deftype sky-color-day (structure)
  ((hour sky-color-hour 24 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; definition for method 3 of type sky-color-day
(defmethod inspect sky-color-day ((obj sky-color-day))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-color-day)
  (format #t "~1Thour[24] @ #x~X~%" (-> obj hour))
  (label cfg-4)
  obj
  )

;; definition of type sky-sun-data
(deftype sky-sun-data (structure)
  ((data           uint128 4       :offset-assert   0)
   (pos            vector  :inline :offset          0)
   (r-sun          float           :offset         16)
   (r-halo         float           :offset         20)
   (r-aurora       float           :offset         24)
   (c-sun-start    rgba            :offset         32)
   (c-sun-end      rgba            :offset         48)
   (c-halo-start   rgba            :offset         36)
   (c-halo-end     rgba            :offset         52)
   (c-aurora-start rgba            :offset         40)
   (c-aurora-end   rgba            :offset         56)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type sky-sun-data
(defmethod inspect sky-sun-data ((obj sky-sun-data))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-sun-data)
  (format #t "~1Tdata[4] @ #x~X~%" (-> obj data))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> obj data))
  (format #t "~1Tr-sun: ~f~%" (-> obj r-sun))
  (format #t "~1Tr-halo: ~f~%" (-> obj r-halo))
  (format #t "~1Tr-aurora: ~f~%" (-> obj r-aurora))
  (format #t "~1Tc-sun-start: ~D~%" (-> obj c-sun-start))
  (format #t "~1Tc-sun-end: ~D~%" (-> obj c-sun-end))
  (format #t "~1Tc-halo-start: ~D~%" (-> obj c-halo-start))
  (format #t "~1Tc-halo-end: ~D~%" (-> obj c-halo-end))
  (format #t "~1Tc-aurora-start: ~D~%" (-> obj c-aurora-start))
  (format #t "~1Tc-aurora-end: ~D~%" (-> obj c-aurora-end))
  (label cfg-4)
  obj
  )

;; definition of type sky-moon-data
(deftype sky-moon-data (structure)
  ((data  uint128 2       :offset-assert   0)
   (pos   vector  :inline :offset          0)
   (scale vector  :inline :offset         16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type sky-moon-data
(defmethod inspect sky-moon-data ((obj sky-moon-data))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-moon-data)
  (format #t "~1Tdata[2] @ #x~X~%" (-> obj data))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> obj data))
  (format #t "~1Tscale: #<vector @ #x~X>~%" (-> obj scale))
  (label cfg-4)
  obj
  )

;; definition of type sky-orbit
(deftype sky-orbit (structure)
  ((high-noon float  :offset-assert   0)
   (tilt      float  :offset-assert   4)
   (rise      float  :offset-assert   8)
   (dist      float  :offset-assert  12)
   (min-halo  float  :offset-assert  16)
   (max-halo  float  :offset-assert  20)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type sky-orbit
(defmethod inspect sky-orbit ((obj sky-orbit))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-orbit)
  (format #t "~1Thigh-noon: ~f~%" (-> obj high-noon))
  (format #t "~1Ttilt: ~f~%" (-> obj tilt))
  (format #t "~1Trise: ~f~%" (-> obj rise))
  (format #t "~1Tdist: ~f~%" (-> obj dist))
  (format #t "~1Tmin-halo: ~f~%" (-> obj min-halo))
  (format #t "~1Tmax-halo: ~f~%" (-> obj max-halo))
  (label cfg-4)
  obj
  )

;; definition of type sky-upload-data
(deftype sky-upload-data (structure)
  ((data uint128       10        :offset-assert   0)
   (sun  sky-sun-data  2 :inline :offset          0)
   (moon sky-moon-data :inline   :offset        128)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

;; definition for method 3 of type sky-upload-data
(defmethod inspect sky-upload-data ((obj sky-upload-data))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-upload-data)
  (format #t "~1Tdata[10] @ #x~X~%" (-> obj data))
  (format #t "~1Tsun[2] @ #x~X~%" (-> obj data))
  (format #t "~1Tmoon: #<sky-moon-data @ #x~X>~%" (-> obj moon))
  (label cfg-4)
  obj
  )

;; definition of type sky-vertex
(deftype sky-vertex (structure)
  ((pos vector :inline :offset-assert   0)
   (stq vector :inline :offset-assert  16)
   (col vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type sky-vertex
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect sky-vertex ((obj sky-vertex))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-vertex)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> obj pos))
  (format #t "~1Tstq: #<vector @ #x~X>~%" (-> obj stq))
  (format #t "~1Tcol: #<vector @ #x~X>~%" (-> obj col))
  (label cfg-4)
  obj
  )

;; definition for method 3 of type sky-vertex
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect sky-vertex ((obj sky-vertex))
  (format #t "sky-vertex [~X]:~%" obj)
  (format #t "~TPos: [~F ~F ~F ~F]~%" (-> obj pos x) (-> obj pos y) (-> obj pos z) (-> obj pos w))
  (format #t "~TSTQ: [~F ~F ~F ~F]~%" (-> obj stq x) (-> obj stq y) (-> obj stq z) (-> obj stq w))
  (format #t "~TCol: [~F ~F ~F ~F]~%" (-> obj col x) (-> obj col y) (-> obj col z) (-> obj col w))
  obj
  )

;; definition of type cloud-vertex
(deftype cloud-vertex (structure)
  ((pos  vector :inline :offset-assert   0)
   (stq  vector :inline :offset-assert  16)
   (col  vector :inline :offset-assert  32)
   (nrm  vector :inline :offset-assert  48)
   (stq2 vector :inline :offset-assert  64)
   (col2 vector :inline :offset-assert  80)
   (nrm2 vector :inline :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type cloud-vertex
(defmethod inspect cloud-vertex ((obj cloud-vertex))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'cloud-vertex)
  (format #t "~1Tpos: ~`vector`P~%" (-> obj pos))
  (format #t "~1Tstq: ~`vector`P~%" (-> obj stq))
  (format #t "~1Tcol: ~`vector`P~%" (-> obj col))
  (format #t "~1Tnrm: ~`vector`P~%" (-> obj nrm))
  (format #t "~1Tstq2: ~`vector`P~%" (-> obj stq2))
  (format #t "~1Tcol2: ~`vector`P~%" (-> obj col2))
  (format #t "~1Tnrm2: ~`vector`P~%" (-> obj nrm2))
  (label cfg-4)
  obj
  )

;; definition of type cloud-vert-array
(deftype cloud-vert-array (structure)
  ((data cloud-vertex 100 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x2bc0
  :flag-assert         #x900002bc0
  )

;; definition for method 3 of type cloud-vert-array
(defmethod inspect cloud-vert-array ((obj cloud-vert-array))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'cloud-vert-array)
  (format #t "~1Tdata[100] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type haze-vertex
(deftype haze-vertex (structure)
  ((pos vector :inline :offset-assert   0)
   (nrm vector :inline :offset-assert  16)
   (col vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type haze-vertex
(defmethod inspect haze-vertex ((obj haze-vertex))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'haze-vertex)
  (format #t "~1Tpos: ~`vector`P~%" (-> obj pos))
  (format #t "~1Tnrm: ~`vector`P~%" (-> obj nrm))
  (format #t "~1Tcol: ~`vector`P~%" (-> obj col))
  (label cfg-4)
  obj
  )

;; definition of type haze-vert-array
(deftype haze-vert-array (structure)
  ((data haze-vertex 36 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x6c0
  :flag-assert         #x9000006c0
  )

;; definition for method 3 of type haze-vert-array
(defmethod inspect haze-vert-array ((obj haze-vert-array))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'haze-vert-array)
  (format #t "~1Tdata[36] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type cloud-lights
(deftype cloud-lights (structure)
  ((sun0-normal      vector :inline :offset-assert   0)
   (sun1-normal      vector :inline :offset-assert  16)
   (moon-normal      vector :inline :offset-assert  32)
   (ambi-color       vector :inline :offset-assert  48)
   (ambi-color-lower vector :inline :offset-assert  64)
   (sun0-color       vector :inline :offset-assert  80)
   (sun1-color       vector :inline :offset-assert  96)
   (moon-color       vector :inline :offset-assert 112)
   (sun0-color-lower vector :inline :offset-assert 128)
   (sun0-scale       float          :offset-assert 144)
   (sun1-scale       float          :offset-assert 148)
   (moon-scale       float          :offset-assert 152)
   )
  :method-count-assert 9
  :size-assert         #x9c
  :flag-assert         #x90000009c
  )

;; definition for method 3 of type cloud-lights
(defmethod inspect cloud-lights ((obj cloud-lights))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'cloud-lights)
  (format #t "~1Tsun0-normal: #<vector @ #x~X>~%" (-> obj sun0-normal))
  (format #t "~1Tsun1-normal: #<vector @ #x~X>~%" (-> obj sun1-normal))
  (format #t "~1Tmoon-normal: #<vector @ #x~X>~%" (-> obj moon-normal))
  (format #t "~1Tambi-color: #<vector @ #x~X>~%" (-> obj ambi-color))
  (format #t "~1Tambi-color-lower: #<vector @ #x~X>~%" (-> obj ambi-color-lower))
  (format #t "~1Tsun0-color: #<vector @ #x~X>~%" (-> obj sun0-color))
  (format #t "~1Tsun1-color: #<vector @ #x~X>~%" (-> obj sun1-color))
  (format #t "~1Tmoon-color: #<vector @ #x~X>~%" (-> obj moon-color))
  (format #t "~1Tsun0-color-lower: #<vector @ #x~X>~%" (-> obj sun0-color-lower))
  (format #t "~1Tsun0-scale: ~f~%" (-> obj sun0-scale))
  (format #t "~1Tsun1-scale: ~f~%" (-> obj sun1-scale))
  (format #t "~1Tmoon-scale: ~f~%" (-> obj moon-scale))
  (label cfg-4)
  obj
  )

;; definition of type haze-lights
(deftype haze-lights (structure)
  ((sun0-normal vector :inline :offset-assert   0)
   (sun1-normal vector :inline :offset-assert  16)
   (moon-normal vector :inline :offset-assert  32)
   (ambi-color  vector :inline :offset-assert  48)
   (sun0-color  vector :inline :offset-assert  64)
   (sun1-color  vector :inline :offset-assert  80)
   (moon-color  vector :inline :offset-assert  96)
   (sun0-scale  float          :offset-assert 112)
   (sun1-scale  float          :offset-assert 116)
   (moon-scale  float          :offset-assert 120)
   )
  :method-count-assert 9
  :size-assert         #x7c
  :flag-assert         #x90000007c
  )

;; definition for method 3 of type haze-lights
(defmethod inspect haze-lights ((obj haze-lights))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'haze-lights)
  (format #t "~1Tsun0-normal: #<vector @ #x~X>~%" (-> obj sun0-normal))
  (format #t "~1Tsun1-normal: #<vector @ #x~X>~%" (-> obj sun1-normal))
  (format #t "~1Tmoon-normal: #<vector @ #x~X>~%" (-> obj moon-normal))
  (format #t "~1Tambi-color: #<vector @ #x~X>~%" (-> obj ambi-color))
  (format #t "~1Tsun0-color: #<vector @ #x~X>~%" (-> obj sun0-color))
  (format #t "~1Tsun1-color: #<vector @ #x~X>~%" (-> obj sun1-color))
  (format #t "~1Tmoon-color: #<vector @ #x~X>~%" (-> obj moon-color))
  (format #t "~1Tsun0-scale: ~f~%" (-> obj sun0-scale))
  (format #t "~1Tsun1-scale: ~f~%" (-> obj sun1-scale))
  (format #t "~1Tmoon-scale: ~f~%" (-> obj moon-scale))
  (label cfg-4)
  obj
  )

;; definition of type sky-work
(deftype sky-work (structure)
  ((adgif-tmpl       dma-gif-packet  :inline     :offset-assert   0)
   (draw-tmpl        dma-gif-packet  :inline     :offset-assert  32)
   (draw-tmpl2       dma-gif-packet  :inline     :offset-assert  64)
   (fog-tmpl         dma-gif-packet  :inline     :offset-assert  96)
   (blend-tmpl       dma-gif-packet  :inline     :offset-assert 128)
   (sprite-tmpl      dma-gif-packet  :inline     :offset-assert 160)
   (sprite-tmpl2     dma-gif-packet  :inline     :offset-assert 192)
   (sun-coords       vector          2 :inline   :offset-assert 224)
   (green-coords     vector          2 :inline   :offset-assert 256)
   (moon0-coords     vector          2 :inline   :offset-assert 288)
   (moon1-coords     vector          2 :inline   :offset-assert 320)
   (moon2-coords     vector          2 :inline   :offset-assert 352)
   (star-coords      vector          2 :inline   :offset-assert 384)
   (sun-colors       vector          2 :inline   :offset-assert 416)
   (green-colors     vector          2 :inline   :offset-assert 448)
   (moon-colors      vector          3 :inline   :offset-assert 480)
   (star-colors      vector          16 :inline  :offset-assert 528)
   (st-coords        vector          2 :inline   :offset-assert 784)
   (random           vector          8 :inline   :offset-assert 816)
   (giftag-base      dma-gif         :inline     :offset-assert 944)
   (giftag-haze      dma-gif         :inline     :offset-assert 960)
   (giftag-roof      dma-gif         :inline     :offset-assert 976)
   (giftag-ocean     dma-gif         :inline     :offset-assert 992)
   (fog              vector          :inline     :offset-assert 1008)
   (sky              float           8           :offset-assert 1024)
   (time             float                       :offset-assert 1056)
   (off-s            uint16                      :offset-assert 1060)
   (off-t            uint16                      :offset-assert 1062)
   (orbit            sky-orbit       3 :inline   :offset-assert 1064)
   (upload-data      sky-upload-data :inline     :offset-assert 1168)
   (ambi-color       vector          :inline     :offset-assert 1328)
   (ambi-color-lower vector          :inline     :offset-assert 1344)
   (sun0-color       vector          :inline     :offset-assert 1360)
   (sun1-color       vector          :inline     :offset-assert 1376)
   (moon-color       vector          :inline     :offset-assert 1392)
   (sun0-color-lower vector          :inline     :offset-assert 1408)
   (cam-mat          matrix          :inline     :offset-assert 1424)
   (star-mat         matrix          :inline     :offset-assert 1488)
   (vec0             vector4w        :inline     :offset-assert 1552)
   (vec1             vector4w        :inline     :offset-assert 1568)
   (cloud-lights     cloud-lights    :inline     :offset-assert 1584)
   (haze-lights      haze-lights     :inline     :offset-assert 1744)
   (buf              basic                       :offset-assert 1868)
   (draw-vortex      basic                       :offset-assert 1872)
   (stars            vector          512 :inline :offset-assert 1888)
   )
  :method-count-assert 37
  :size-assert         #x2760
  :flag-assert         #x2500002760
  (:methods
    (sky-work-method-9 () none 9)
    (sky-work-method-10 () none 10)
    (sky-work-method-11 () none 11)
    (sky-work-method-12 () none 12)
    (sky-work-method-13 () none 13)
    (sky-work-method-14 () none 14)
    (sky-work-method-15 () none 15)
    (sky-work-method-16 () none 16)
    (sky-work-method-17 () none 17)
    (sky-work-method-18 () none 18)
    (sky-work-method-19 () none 19)
    (sky-work-method-20 () none 20)
    (sky-work-method-21 () none 21)
    (sky-work-method-22 () none 22)
    (sky-work-method-23 () none 23)
    (sky-work-method-24 () none 24)
    (sky-work-method-25 () none 25)
    (sky-work-method-26 () none 26)
    (sky-work-method-27 () none 27)
    (sky-work-method-28 () none 28)
    (sky-work-method-29 () none 29)
    (sky-work-method-30 () none 30)
    (sky-work-method-31 () none 31)
    (sky-work-method-32 () none 32)
    (sky-work-method-33 () none 33)
    (sky-work-method-34 () none 34)
    (sky-work-method-35 () none 35)
    (sky-work-method-36 () none 36)
    )
  )

;; definition for method 3 of type sky-work
(defmethod inspect sky-work ((obj sky-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sky-work)
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj adgif-tmpl))
  (format #t "~1Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw-tmpl))
  (format #t "~1Tdraw-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> obj draw-tmpl2))
  (format #t "~1Tfog-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj fog-tmpl))
  (format #t "~1Tblend-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj blend-tmpl))
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj sprite-tmpl))
  (format #t "~1Tsprite-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> obj sprite-tmpl2))
  (format #t "~1Tsun-coords[2] @ #x~X~%" (-> obj sun-coords))
  (format #t "~1Tgreen-coords[2] @ #x~X~%" (-> obj green-coords))
  (format #t "~1Tmoon0-coords[2] @ #x~X~%" (-> obj moon0-coords))
  (format #t "~1Tmoon1-coords[2] @ #x~X~%" (-> obj moon1-coords))
  (format #t "~1Tmoon2-coords[2] @ #x~X~%" (-> obj moon2-coords))
  (format #t "~1Tstar-coords[2] @ #x~X~%" (-> obj star-coords))
  (format #t "~1Tsun-colors[2] @ #x~X~%" (-> obj sun-colors))
  (format #t "~1Tgreen-colors[2] @ #x~X~%" (-> obj green-colors))
  (format #t "~1Tmoon-colors[3] @ #x~X~%" (-> obj moon-colors))
  (format #t "~1Tstar-colors[16] @ #x~X~%" (-> obj star-colors))
  (format #t "~1Tst-coords[2] @ #x~X~%" (-> obj st-coords))
  (format #t "~1Trandom[8] @ #x~X~%" (-> obj random))
  (format #t "~1Tgiftag-base: #<dma-gif @ #x~X>~%" (-> obj giftag-base))
  (format #t "~1Tgiftag-haze: #<dma-gif @ #x~X>~%" (-> obj giftag-haze))
  (format #t "~1Tgiftag-roof: #<dma-gif @ #x~X>~%" (-> obj giftag-roof))
  (format #t "~1Tgiftag-ocean: #<dma-gif @ #x~X>~%" (-> obj giftag-ocean))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> obj fog))
  (format #t "~1Tsky[8] @ #x~X~%" (-> obj sky))
  (format #t "~1Ttime: ~f~%" (-> obj time))
  (format #t "~1Toff-s: ~D~%" (-> obj off-s))
  (format #t "~1Toff-t: ~D~%" (-> obj off-t))
  (format #t "~1Torbit[3] @ #x~X~%" (-> obj orbit))
  (format #t "~1Tupload-data: #<sky-upload-data @ #x~X>~%" (-> obj upload-data))
  (format #t "~1Tambi-color: #<vector @ #x~X>~%" (-> obj ambi-color))
  (format #t "~1Tambi-color-lower: #<vector @ #x~X>~%" (-> obj ambi-color-lower))
  (format #t "~1Tsun0-color: #<vector @ #x~X>~%" (-> obj sun0-color))
  (format #t "~1Tsun1-color: #<vector @ #x~X>~%" (-> obj sun1-color))
  (format #t "~1Tmoon-color: #<vector @ #x~X>~%" (-> obj moon-color))
  (format #t "~1Tsun0-color-lower: #<vector @ #x~X>~%" (-> obj sun0-color-lower))
  (format #t "~1Tcam-mat: #<matrix @ #x~X>~%" (-> obj cam-mat))
  (format #t "~1Tstar-mat: #<matrix @ #x~X>~%" (-> obj star-mat))
  (format #t "~1Tvec0: #<vector4w @ #x~X>~%" (-> obj vec0))
  (format #t "~1Tvec1: #<vector4w @ #x~X>~%" (-> obj vec1))
  (format #t "~1Tcloud-lights: #<cloud-lights @ #x~X>~%" (-> obj cloud-lights))
  (format #t "~1Thaze-lights: #<haze-lights @ #x~X>~%" (-> obj haze-lights))
  (format #t "~1Tbuf: ~A~%" (-> obj buf))
  (format #t "~1Tdraw-vortex: ~A~%" (-> obj draw-vortex))
  (format #t "~1Tstars[512] @ #x~X~%" (-> obj stars))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




