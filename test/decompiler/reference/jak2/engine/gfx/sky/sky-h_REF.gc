;;-*-Lisp-*-
(in-package goal)

;; definition of type sky-color-hour
(deftype sky-color-hour (structure)
  ((snapshot1    int32)
   (snapshot2    int32)
   (morph-start  float)
   (morph-end    float)
   )
  )

;; definition for method 3 of type sky-color-hour
(defmethod inspect ((this sky-color-hour))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-color-hour)
  (format #t "~1Tsnapshot1: ~D~%" (-> this snapshot1))
  (format #t "~1Tsnapshot2: ~D~%" (-> this snapshot2))
  (format #t "~1Tmorph-start: ~f~%" (-> this morph-start))
  (format #t "~1Tmorph-end: ~f~%" (-> this morph-end))
  (label cfg-4)
  this
  )

;; definition of type sky-color-day
(deftype sky-color-day (structure)
  ((hour  sky-color-hour  24 :inline)
   )
  )

;; definition for method 3 of type sky-color-day
(defmethod inspect ((this sky-color-day))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-color-day)
  (format #t "~1Thour[24] @ #x~X~%" (-> this hour))
  (label cfg-4)
  this
  )

;; definition of type sky-sun-data
(deftype sky-sun-data (structure)
  ((data            uint128  4)
   (pos             vector   :inline :overlay-at (-> data 0))
   (r-sun           float            :overlay-at (-> data 1))
   (r-halo          float            :offset  20)
   (r-aurora        float            :offset  24)
   (c-sun-start     rgba             :overlay-at (-> data 2))
   (c-sun-end       rgba             :overlay-at (-> data 3))
   (c-halo-start    rgba             :offset  36)
   (c-halo-end      rgba             :offset  52)
   (c-aurora-start  rgba             :offset  40)
   (c-aurora-end    rgba             :offset  56)
   )
  )

;; definition for method 3 of type sky-sun-data
(defmethod inspect ((this sky-sun-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-sun-data)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this pos))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tr-sun: ~f~%" (-> this r-sun))
  (format #t "~1Tr-halo: ~f~%" (-> this r-halo))
  (format #t "~1Tr-aurora: ~f~%" (-> this r-aurora))
  (format #t "~1Tc-sun-start: ~D~%" (-> this c-sun-start))
  (format #t "~1Tc-sun-end: ~D~%" (-> this c-sun-end))
  (format #t "~1Tc-halo-start: ~D~%" (-> this c-halo-start))
  (format #t "~1Tc-halo-end: ~D~%" (-> this c-halo-end))
  (format #t "~1Tc-aurora-start: ~D~%" (-> this c-aurora-start))
  (format #t "~1Tc-aurora-end: ~D~%" (-> this c-aurora-end))
  (label cfg-4)
  this
  )

;; definition of type sky-moon-data
(deftype sky-moon-data (structure)
  ((data   uint128  2)
   (pos    vector   :inline :overlay-at (-> data 0))
   (scale  vector   :inline :overlay-at (-> data 1))
   )
  )

;; definition for method 3 of type sky-moon-data
(defmethod inspect ((this sky-moon-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-moon-data)
  (format #t "~1Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this data))
  (format #t "~1Tscale: #<vector @ #x~X>~%" (-> this scale))
  (label cfg-4)
  this
  )

;; definition of type sky-orbit
(deftype sky-orbit (structure)
  ((high-noon  float)
   (tilt       float)
   (rise       float)
   (dist       float)
   (min-halo   float)
   (max-halo   float)
   )
  :allow-misaligned
  )

;; definition for method 3 of type sky-orbit
(defmethod inspect ((this sky-orbit))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-orbit)
  (format #t "~1Thigh-noon: ~f~%" (-> this high-noon))
  (format #t "~1Ttilt: ~f~%" (-> this tilt))
  (format #t "~1Trise: ~f~%" (-> this rise))
  (format #t "~1Tdist: ~f~%" (-> this dist))
  (format #t "~1Tmin-halo: ~f~%" (-> this min-halo))
  (format #t "~1Tmax-halo: ~f~%" (-> this max-halo))
  (label cfg-4)
  this
  )

;; definition of type sky-upload-data
(deftype sky-upload-data (structure)
  ((data  uint128        10)
   (sun   sky-sun-data   2 :inline :overlay-at (-> data 0))
   (moon  sky-moon-data  :inline   :overlay-at (-> data 8))
   )
  )

;; definition for method 3 of type sky-upload-data
(defmethod inspect ((this sky-upload-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-upload-data)
  (format #t "~1Tdata[10] @ #x~X~%" (-> this sun))
  (format #t "~1Tsun[2] @ #x~X~%" (-> this sun))
  (format #t "~1Tmoon: #<sky-moon-data @ #x~X>~%" (-> this moon))
  (label cfg-4)
  this
  )

;; definition of type sky-vertex
(deftype sky-vertex (structure)
  ((pos  vector  :inline)
   (stq  vector  :inline)
   (col  vector  :inline)
   )
  )

;; definition for method 3 of type sky-vertex
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this sky-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-vertex)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tstq: #<vector @ #x~X>~%" (-> this stq))
  (format #t "~1Tcol: #<vector @ #x~X>~%" (-> this col))
  (label cfg-4)
  this
  )

;; definition for method 3 of type sky-vertex
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this sky-vertex))
  (format #t "sky-vertex [~X]:~%" this)
  (format #t "~TPos: [~F ~F ~F ~F]~%" (-> this pos x) (-> this pos y) (-> this pos z) (-> this pos w))
  (format #t "~TSTQ: [~F ~F ~F ~F]~%" (-> this stq x) (-> this stq y) (-> this stq z) (-> this stq w))
  (format #t "~TCol: [~F ~F ~F ~F]~%" (-> this col x) (-> this col y) (-> this col z) (-> this col w))
  this
  )

;; definition of type cloud-vertex
(deftype cloud-vertex (structure)
  ((pos   vector  :inline)
   (stq   vector  :inline)
   (col   vector  :inline)
   (nrm   vector  :inline)
   (stq2  vector  :inline)
   (col2  vector  :inline)
   (nrm2  vector  :inline)
   )
  )

;; definition for method 3 of type cloud-vertex
(defmethod inspect ((this cloud-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'cloud-vertex)
  (format #t "~1Tpos: ~`vector`P~%" (-> this pos))
  (format #t "~1Tstq: ~`vector`P~%" (-> this stq))
  (format #t "~1Tcol: ~`vector`P~%" (-> this col))
  (format #t "~1Tnrm: ~`vector`P~%" (-> this nrm))
  (format #t "~1Tstq2: ~`vector`P~%" (-> this stq2))
  (format #t "~1Tcol2: ~`vector`P~%" (-> this col2))
  (format #t "~1Tnrm2: ~`vector`P~%" (-> this nrm2))
  (label cfg-4)
  this
  )

;; definition of type cloud-vert-array
(deftype cloud-vert-array (structure)
  ((data  cloud-vertex  100 :inline)
   )
  )

;; definition for method 3 of type cloud-vert-array
(defmethod inspect ((this cloud-vert-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'cloud-vert-array)
  (format #t "~1Tdata[100] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type haze-vertex
(deftype haze-vertex (structure)
  ((pos  vector  :inline)
   (nrm  vector  :inline)
   (col  vector  :inline)
   )
  )

;; definition for method 3 of type haze-vertex
(defmethod inspect ((this haze-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'haze-vertex)
  (format #t "~1Tpos: ~`vector`P~%" (-> this pos))
  (format #t "~1Tnrm: ~`vector`P~%" (-> this nrm))
  (format #t "~1Tcol: ~`vector`P~%" (-> this col))
  (label cfg-4)
  this
  )

;; definition of type haze-vert-array
(deftype haze-vert-array (structure)
  ((data  haze-vertex  36 :inline)
   )
  )

;; definition for method 3 of type haze-vert-array
(defmethod inspect ((this haze-vert-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'haze-vert-array)
  (format #t "~1Tdata[36] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type cloud-lights
(deftype cloud-lights (structure)
  ((sun0-normal       vector  :inline)
   (sun1-normal       vector  :inline)
   (moon-normal       vector  :inline)
   (ambi-color        vector  :inline)
   (ambi-color-lower  vector  :inline)
   (sun0-color        vector  :inline)
   (sun1-color        vector  :inline)
   (moon-color        vector  :inline)
   (sun0-color-lower  vector  :inline)
   (sun0-scale        float)
   (sun1-scale        float)
   (moon-scale        float)
   )
  )

;; definition for method 3 of type cloud-lights
(defmethod inspect ((this cloud-lights))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'cloud-lights)
  (format #t "~1Tsun0-normal: #<vector @ #x~X>~%" (-> this sun0-normal))
  (format #t "~1Tsun1-normal: #<vector @ #x~X>~%" (-> this sun1-normal))
  (format #t "~1Tmoon-normal: #<vector @ #x~X>~%" (-> this moon-normal))
  (format #t "~1Tambi-color: #<vector @ #x~X>~%" (-> this ambi-color))
  (format #t "~1Tambi-color-lower: #<vector @ #x~X>~%" (-> this ambi-color-lower))
  (format #t "~1Tsun0-color: #<vector @ #x~X>~%" (-> this sun0-color))
  (format #t "~1Tsun1-color: #<vector @ #x~X>~%" (-> this sun1-color))
  (format #t "~1Tmoon-color: #<vector @ #x~X>~%" (-> this moon-color))
  (format #t "~1Tsun0-color-lower: #<vector @ #x~X>~%" (-> this sun0-color-lower))
  (format #t "~1Tsun0-scale: ~f~%" (-> this sun0-scale))
  (format #t "~1Tsun1-scale: ~f~%" (-> this sun1-scale))
  (format #t "~1Tmoon-scale: ~f~%" (-> this moon-scale))
  (label cfg-4)
  this
  )

;; definition of type haze-lights
(deftype haze-lights (structure)
  ((sun0-normal  vector  :inline)
   (sun1-normal  vector  :inline)
   (moon-normal  vector  :inline)
   (ambi-color   vector  :inline)
   (sun0-color   vector  :inline)
   (sun1-color   vector  :inline)
   (moon-color   vector  :inline)
   (sun0-scale   float)
   (sun1-scale   float)
   (moon-scale   float)
   )
  )

;; definition for method 3 of type haze-lights
(defmethod inspect ((this haze-lights))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'haze-lights)
  (format #t "~1Tsun0-normal: #<vector @ #x~X>~%" (-> this sun0-normal))
  (format #t "~1Tsun1-normal: #<vector @ #x~X>~%" (-> this sun1-normal))
  (format #t "~1Tmoon-normal: #<vector @ #x~X>~%" (-> this moon-normal))
  (format #t "~1Tambi-color: #<vector @ #x~X>~%" (-> this ambi-color))
  (format #t "~1Tsun0-color: #<vector @ #x~X>~%" (-> this sun0-color))
  (format #t "~1Tsun1-color: #<vector @ #x~X>~%" (-> this sun1-color))
  (format #t "~1Tmoon-color: #<vector @ #x~X>~%" (-> this moon-color))
  (format #t "~1Tsun0-scale: ~f~%" (-> this sun0-scale))
  (format #t "~1Tsun1-scale: ~f~%" (-> this sun1-scale))
  (format #t "~1Tmoon-scale: ~f~%" (-> this moon-scale))
  (label cfg-4)
  this
  )

;; definition of type sky-work
(deftype sky-work (structure)
  ((adgif-tmpl        dma-gif-packet   :inline)
   (draw-tmpl         dma-gif-packet   :inline)
   (draw-tmpl2        dma-gif-packet   :inline)
   (fog-tmpl          dma-gif-packet   :inline)
   (blend-tmpl        dma-gif-packet   :inline)
   (sprite-tmpl       dma-gif-packet   :inline)
   (sprite-tmpl2      dma-gif-packet   :inline)
   (sun-coords        vector           2 :inline)
   (green-coords      vector           2 :inline)
   (moon0-coords      vector           2 :inline)
   (moon1-coords      vector           2 :inline)
   (moon2-coords      vector           2 :inline)
   (star-coords       vector           2 :inline)
   (sun-colors        vector4w         2 :inline)
   (green-colors      vector4w         2 :inline)
   (moon-colors       vector4w         3 :inline)
   (star-colors       vector4w         16 :inline)
   (st-coords         vector           2 :inline)
   (random            vector4w         8 :inline)
   (giftag-base       dma-gif          :inline)
   (giftag-haze       dma-gif          :inline)
   (giftag-roof       dma-gif          :inline)
   (giftag-ocean      dma-gif          :inline)
   (fog               vector           :inline)
   (sky               float            8)
   (time              float)
   (off-s             uint16)
   (off-t             uint16)
   (orbit             sky-orbit        3 :inline)
   (upload-data       sky-upload-data  :inline)
   (ambi-color        vector4w         :inline)
   (ambi-color-lower  vector4w         :inline)
   (sun0-color        vector4w         :inline)
   (sun1-color        vector4w         :inline)
   (moon-color        vector4w         :inline)
   (sun0-color-lower  vector4w         :inline)
   (cam-mat           matrix           :inline)
   (star-mat          matrix           :inline)
   (vec0              vector4w         :inline)
   (vec1              vector4w         :inline)
   (cloud-lights      cloud-lights     :inline)
   (haze-lights       haze-lights      :inline)
   (buf               dma-buffer)
   (draw-vortex       basic)
   (stars             vector           512 :inline)
   )
  (:methods
    (init-sun-data! (_type_ int float float float) none)
    (init-orbit-settings! (_type_ int float float float float float float) none)
    (update-colors-for-time (_type_ float) none)
    (update-time-and-speed (_type_ float float) none)
    (draw (_type_) none)
    (update-matrix (_type_ matrix) none)
    (update-template-colors (_type_) none)
    (init-regs-for-large-polygon-draw (_type_) none)
    (init-regs-for-sky-asm (_type_) none)
    (cloud-vtx-light-update (_type_ vector vector cloud-lights vector vector) none)
    (cloud-vtx-tex-update (_type_ vector vector vector cloud-lights) none)
    (adjust-cloud-lighting (_type_) none)
    (cloud-vtx1-to-sky (_type_ sky-vertex cloud-vertex) none)
    (cloud-vtx2-to-sky (_type_ sky-vertex cloud-vertex) none)
    (draw-clouds (_type_ dma-buffer) none)
    (apply-haze-light (_type_ vector vector haze-lights) none)
    (adjust-haze-lighting (_type_) none)
    (haze-vtx-to-sky (_type_ sky-vertex sky-vertex haze-vertex) none)
    (draw-haze (_type_ dma-buffer) none)
    (sun-dma (_type_ dma-buffer) none)
    (green-sun-dma (_type_ dma-buffer) none)
    (moon-dma (_type_ dma-buffer) none)
    (setup-stars (_type_ matrix sky-upload-data) none)
    (stars-transform-asm (_type_) none)
    (stars-dma (_type_ dma-buffer) none)
    (draw-roof (_type_ dma-buffer) none)
    (draw-base (_type_ dma-buffer) none)
    (draw-fog (_type_ dma-buffer) none)
    )
  )

;; definition for method 3 of type sky-work
(defmethod inspect ((this sky-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sky-work)
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this draw-tmpl))
  (format #t "~1Tdraw-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> this draw-tmpl2))
  (format #t "~1Tfog-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this fog-tmpl))
  (format #t "~1Tblend-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this blend-tmpl))
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl))
  (format #t "~1Tsprite-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl2))
  (format #t "~1Tsun-coords[2] @ #x~X~%" (-> this sun-coords))
  (format #t "~1Tgreen-coords[2] @ #x~X~%" (-> this green-coords))
  (format #t "~1Tmoon0-coords[2] @ #x~X~%" (-> this moon0-coords))
  (format #t "~1Tmoon1-coords[2] @ #x~X~%" (-> this moon1-coords))
  (format #t "~1Tmoon2-coords[2] @ #x~X~%" (-> this moon2-coords))
  (format #t "~1Tstar-coords[2] @ #x~X~%" (-> this star-coords))
  (format #t "~1Tsun-colors[2] @ #x~X~%" (-> this sun-colors))
  (format #t "~1Tgreen-colors[2] @ #x~X~%" (-> this green-colors))
  (format #t "~1Tmoon-colors[3] @ #x~X~%" (-> this moon-colors))
  (format #t "~1Tstar-colors[16] @ #x~X~%" (-> this star-colors))
  (format #t "~1Tst-coords[2] @ #x~X~%" (-> this st-coords))
  (format #t "~1Trandom[8] @ #x~X~%" (-> this random))
  (format #t "~1Tgiftag-base: #<dma-gif @ #x~X>~%" (-> this giftag-base))
  (format #t "~1Tgiftag-haze: #<dma-gif @ #x~X>~%" (-> this giftag-haze))
  (format #t "~1Tgiftag-roof: #<dma-gif @ #x~X>~%" (-> this giftag-roof))
  (format #t "~1Tgiftag-ocean: #<dma-gif @ #x~X>~%" (-> this giftag-ocean))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~1Tsky[8] @ #x~X~%" (-> this sky))
  (format #t "~1Ttime: ~f~%" (-> this time))
  (format #t "~1Toff-s: ~D~%" (-> this off-s))
  (format #t "~1Toff-t: ~D~%" (-> this off-t))
  (format #t "~1Torbit[3] @ #x~X~%" (-> this orbit))
  (format #t "~1Tupload-data: #<sky-upload-data @ #x~X>~%" (-> this upload-data))
  (format #t "~1Tambi-color: #<vector @ #x~X>~%" (-> this ambi-color))
  (format #t "~1Tambi-color-lower: #<vector @ #x~X>~%" (-> this ambi-color-lower))
  (format #t "~1Tsun0-color: #<vector @ #x~X>~%" (-> this sun0-color))
  (format #t "~1Tsun1-color: #<vector @ #x~X>~%" (-> this sun1-color))
  (format #t "~1Tmoon-color: #<vector @ #x~X>~%" (-> this moon-color))
  (format #t "~1Tsun0-color-lower: #<vector @ #x~X>~%" (-> this sun0-color-lower))
  (format #t "~1Tcam-mat: #<matrix @ #x~X>~%" (-> this cam-mat))
  (format #t "~1Tstar-mat: #<matrix @ #x~X>~%" (-> this star-mat))
  (format #t "~1Tvec0: #<vector4w @ #x~X>~%" (-> this vec0))
  (format #t "~1Tvec1: #<vector4w @ #x~X>~%" (-> this vec1))
  (format #t "~1Tcloud-lights: #<cloud-lights @ #x~X>~%" (-> this cloud-lights))
  (format #t "~1Thaze-lights: #<haze-lights @ #x~X>~%" (-> this haze-lights))
  (format #t "~1Tbuf: ~A~%" (-> this buf))
  (format #t "~1Tdraw-vortex: ~A~%" (-> this draw-vortex))
  (format #t "~1Tstars[512] @ #x~X~%" (-> this stars))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
