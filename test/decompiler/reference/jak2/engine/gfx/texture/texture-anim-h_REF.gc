;;-*-Lisp-*-
(in-package goal)

;; definition of type texture-anim-layer
(deftype texture-anim-layer (structure)
  ((extra           vector  :inline :offset 240)
   (func            basic           :offset 256)
   (func-id         basic           :offset 256)
   (init-func       basic           :offset 260)
   (init-func-id    basic           :offset 260)
   (tex             basic           :offset 264)
   (start-time      float           :offset 268)
   (end-time        float           :offset 272)
   (tex-name        basic           :offset 276)
   (test            uint64          :offset 280)
   (alpha           uint64          :offset 288)
   (clamp           uint64          :offset 296)
   (start-color     vector  :inline :offset  80)
   (start-scale     vector2 :inline :offset  96)
   (start-offset    vector2 :inline :offset 104)
   (start-st-scale  vector2 :inline :offset 112)
   (start-st-offset vector2 :inline :offset 120)
   (start-qs        vector  :inline :offset 128)
   (start-rot       degrees         :offset 144)
   (start-st-rot    degrees         :offset 148)
   (end-color       vector  :inline :offset 160)
   (end-scale       vector2 :inline :offset 176)
   (end-offset      vector2 :inline :offset 184)
   (end-st-scale    vector2 :inline :offset 192)
   (end-st-offset   vector2 :inline :offset 200)
   (end-qs          vector  :inline :offset 208)
   (end-rot         degrees         :offset 224)
   (end-st-rot      degrees         :offset 228)
   )
  :method-count-assert 11
  :size-assert         #x130
  :flag-assert         #xb00000130
  (:methods
    (texture-anim-layer-method-9 () none 9)
    (texture-anim-layer-method-10 () none 10)
    )
  )

;; definition for method 3 of type texture-anim-layer
(defmethod inspect texture-anim-layer ((obj texture-anim-layer))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'texture-anim-layer)
  (format #t "~1Textra: #<vector @ #x~X>~%" (-> obj extra))
  (format #t "~1Tfunc: ~A~%" (-> obj func))
  (format #t "~1Tfunc-id: ~A~%" (-> obj func))
  (format #t "~1Tinit-func: ~A~%" (-> obj init-func))
  (format #t "~1Tinit-func-id: ~A~%" (-> obj init-func))
  (format #t "~1Ttex: ~A~%" (-> obj tex))
  (format #t "~1Tstart-time: ~f~%" (-> obj start-time))
  (format #t "~1Tend-time: ~f~%" (-> obj end-time))
  (format #t "~1Ttex-name: ~A~%" (-> obj tex-name))
  (format #t "~1Ttest: #x~X~%" (-> obj test))
  (format #t "~1Talpha: #x~X~%" (-> obj alpha))
  (format #t "~1Tclamp: #x~X~%" (-> obj clamp))
  (format #t "~1Tstart-color: ~`vector`P~%" (-> obj start-color))
  (format #t "~1Tstart-scale: ~`vector2`P~%" (-> obj start-scale))
  (format #t "~1Tstart-offset: ~`vector2`P~%" (-> obj start-offset))
  (format #t "~1Tstart-st-scale: ~`vector2`P~%" (-> obj start-st-scale))
  (format #t "~1Tstart-st-offset: ~`vector2`P~%" (-> obj start-st-offset))
  (format #t "~1Tstart-qs: ~`vector`P~%" (-> obj start-qs))
  (format #t "~1Tstart-rot: (deg ~r)~%" (-> obj start-rot))
  (format #t "~1Tstart-st-rot: (deg ~r)~%" (-> obj start-st-rot))
  (format #t "~1Tend-color: ~`vector`P~%" (-> obj end-color))
  (format #t "~1Tend-scale: ~`vector2`P~%" (-> obj end-scale))
  (format #t "~1Tend-offset: ~`vector2`P~%" (-> obj end-offset))
  (format #t "~1Tend-st-scale: ~`vector2`P~%" (-> obj end-st-scale))
  (format #t "~1Tend-st-offset: ~`vector2`P~%" (-> obj end-st-offset))
  (format #t "~1Tend-qs: ~`vector`P~%" (-> obj end-qs))
  (format #t "~1Tend-rot: (deg ~r)~%" (-> obj end-rot))
  (format #t "~1Tend-st-rot: (deg ~r)~%" (-> obj end-st-rot))
  (label cfg-4)
  obj
  )

;; definition of type texture-anim
(deftype texture-anim (structure)
  ((num-layers   uint32          :offset-assert   0)
   (func         basic           :offset-assert   4)
   (func-id      basic           :offset          4)
   (init-func    basic           :offset-assert   8)
   (init-func-id basic           :offset          8)
   (tex          basic           :offset-assert  12)
   (tex-name     basic           :offset-assert  16)
   (extra        vector :inline  :offset-assert  32)
   (color        uint32          :offset-assert  48)
   (frame-time   float           :offset-assert  52)
   (frame-delta  float           :offset-assert  56)
   (frame-mod    float           :offset-assert  60)
   (test         uint64          :offset-assert  64)
   (alpha        uint64          :offset-assert  72)
   (clamp        uint64          :offset-assert  80)
   (data         uint8  :dynamic :offset-assert  88)
   )
  :method-count-assert 11
  :size-assert         #x58
  :flag-assert         #xb00000058
  (:methods
    (texture-anim-method-9 () none 9)
    (texture-anim-method-10 () none 10)
    )
  )

;; definition for method 3 of type texture-anim
(defmethod inspect texture-anim ((obj texture-anim))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'texture-anim)
  (format #t "~1Tnum-layers: ~D~%" (-> obj num-layers))
  (format #t "~1Tfunc: ~A~%" (-> obj func))
  (format #t "~1Tfunc-id: ~A~%" (-> obj func))
  (format #t "~1Tinit-func: ~A~%" (-> obj init-func))
  (format #t "~1Tinit-func-id: ~A~%" (-> obj init-func))
  (format #t "~1Ttex: ~A~%" (-> obj tex))
  (format #t "~1Ttex-name: ~A~%" (-> obj tex-name))
  (format #t "~1Textra: #<vector @ #x~X>~%" (-> obj extra))
  (format #t "~1Tcolor: #x~X~%" (-> obj color))
  (format #t "~1Tframe-time: ~f~%" (-> obj frame-time))
  (format #t "~1Tframe-delta: ~f~%" (-> obj frame-delta))
  (format #t "~1Tframe-mod: ~f~%" (-> obj frame-mod))
  (format #t "~1Ttest: #x~X~%" (-> obj test))
  (format #t "~1Talpha: #x~X~%" (-> obj alpha))
  (format #t "~1Tclamp: #x~X~%" (-> obj clamp))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type texture-anim-array
(deftype texture-anim-array (array)
  ()
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (texture-anim-array-method-9 () none 9)
    (texture-anim-array-method-10 () none 10)
    )
  )

;; definition for method 3 of type texture-anim-array
(defmethod inspect texture-anim-array ((obj texture-anim-array))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Ttype: ~A~%" (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tcontent-type: ~A~%" (-> obj content-type))
  (label cfg-4)
  obj
  )

;; definition of type texture-anim-work
(deftype texture-anim-work (structure)
  ((erase-tmpl   dma-gif-packet :inline   :offset-assert   0)
   (draw-tmpl    dma-gif-packet :inline   :offset-assert  32)
   (draw2-tmpl   dma-gif-packet :inline   :offset-assert  64)
   (fill-tmpl    dma-gif-packet :inline   :offset-assert  96)
   (adgif-tmpl   dma-gif-packet :inline   :offset-assert 128)
   (corner0      vector         :inline   :offset-assert 160)
   (corner1      vector         :inline   :offset-assert 176)
   (corner2      vector         :inline   :offset-assert 192)
   (corner3      vector         :inline   :offset-assert 208)
   (const        vector         :inline   :offset-assert 224)
   (random       vector         8 :inline :offset-assert 240)
   (random-index uint8                    :offset-assert 368)
   )
  :method-count-assert 9
  :size-assert         #x171
  :flag-assert         #x900000171
  )

;; definition for method 3 of type texture-anim-work
(defmethod inspect texture-anim-work ((obj texture-anim-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'texture-anim-work)
  (format #t "~1Terase-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj erase-tmpl))
  (format #t "~1Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw-tmpl))
  (format #t "~1Tdraw2-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw2-tmpl))
  (format #t "~1Tfill-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj fill-tmpl))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj adgif-tmpl))
  (format #t "~1Tcorner0: #<vector @ #x~X>~%" (-> obj corner0))
  (format #t "~1Tcorner1: #<vector @ #x~X>~%" (-> obj corner1))
  (format #t "~1Tcorner2: #<vector @ #x~X>~%" (-> obj corner2))
  (format #t "~1Tcorner3: #<vector @ #x~X>~%" (-> obj corner3))
  (format #t "~1Tconst: #<vector @ #x~X>~%" (-> obj const))
  (format #t "~1Trandom[8] @ #x~X~%" (-> obj random))
  (format #t "~1Trandom-index: ~D~%" (-> obj random-index))
  (label cfg-4)
  obj
  )

;; definition of type clut16x16
(deftype clut16x16 (structure)
  ((clut rgba 256 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

;; definition for method 3 of type clut16x16
(defmethod inspect clut16x16 ((obj clut16x16))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'clut16x16)
  (format #t "~1Tclut[256] @ #x~X~%" (-> obj clut))
  (label cfg-4)
  obj
  )

;; definition of type noise8x8
(deftype noise8x8 (structure)
  ((image uint8 64 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type noise8x8
(defmethod inspect noise8x8 ((obj noise8x8))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'noise8x8)
  (format #t "~1Timage[64] @ #x~X~%" (-> obj image))
  (label cfg-4)
  obj
  )

;; definition of type noise16x16
(deftype noise16x16 (structure)
  ((image uint8 256 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; definition for method 3 of type noise16x16
(defmethod inspect noise16x16 ((obj noise16x16))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'noise16x16)
  (format #t "~1Timage[256] @ #x~X~%" (-> obj image))
  (label cfg-4)
  obj
  )

;; definition of type noise32x32
(deftype noise32x32 (structure)
  ((image uint8 1024 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

;; definition for method 3 of type noise32x32
(defmethod inspect noise32x32 ((obj noise32x32))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'noise32x32)
  (format #t "~1Timage[1024] @ #x~X~%" (-> obj image))
  (label cfg-4)
  obj
  )

;; definition of type noise64x64
(deftype noise64x64 (structure)
  ((image uint8 4096 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

;; definition for method 3 of type noise64x64
(defmethod inspect noise64x64 ((obj noise64x64))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'noise64x64)
  (format #t "~1Timage[4096] @ #x~X~%" (-> obj image))
  (label cfg-4)
  obj
  )

;; definition of type noise128x128
(deftype noise128x128 (structure)
  ((image uint8 16384 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4000
  :flag-assert         #x900004000
  )

;; definition for method 3 of type noise128x128
(defmethod inspect noise128x128 ((obj noise128x128))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'noise128x128)
  (format #t "~1Timage[16384] @ #x~X~%" (-> obj image))
  (label cfg-4)
  obj
  )

;; definition of type fog8x256
(deftype fog8x256 (structure)
  ((image uint8 256 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; definition for method 3 of type fog8x256
(defmethod inspect fog8x256 ((obj fog8x256))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'fog8x256)
  (format #t "~1Timage[256] @ #x~X~%" (-> obj image))
  (label cfg-4)
  obj
  )

;; definition of type fog-texture-work
(deftype fog-texture-work (structure)
  ((corner      vector 4 :inline :offset-assert   0)
   (const       vector :inline   :offset-assert  64)
   (min-corner  vector :inline   :offset-assert  80)
   (max-corner  vector :inline   :offset-assert  96)
   (fog-near    float            :offset-assert 112)
   (fog-far     float            :offset-assert 116)
   (fog-delta   float            :offset-assert 120)
   (alpha-near  float            :offset-assert 124)
   (alpha-far   float            :offset-assert 128)
   (alpha-delta float            :offset-assert 132)
   (color       uint32           :offset-assert 136)
   )
  :method-count-assert 9
  :size-assert         #x8c
  :flag-assert         #x90000008c
  )

;; definition for method 3 of type fog-texture-work
(defmethod inspect fog-texture-work ((obj fog-texture-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'fog-texture-work)
  (format #t "~1Tcorner[4] @ #x~X~%" (-> obj corner))
  (format #t "~1Tconst: #<vector @ #x~X>~%" (-> obj const))
  (format #t "~1Tmin-corner: #<vector @ #x~X>~%" (-> obj min-corner))
  (format #t "~1Tmax-corner: #<vector @ #x~X>~%" (-> obj max-corner))
  (format #t "~1Tfog-near: ~f~%" (-> obj fog-near))
  (format #t "~1Tfog-far: ~f~%" (-> obj fog-far))
  (format #t "~1Tfog-delta: ~f~%" (-> obj fog-delta))
  (format #t "~1Talpha-near: ~f~%" (-> obj alpha-near))
  (format #t "~1Talpha-far: ~f~%" (-> obj alpha-far))
  (format #t "~1Talpha-delta: ~f~%" (-> obj alpha-delta))
  (format #t "~1Tcolor: ~D~%" (-> obj color))
  (label cfg-4)
  obj
  )

;; definition for symbol *clut-translate*, type (pointer uint32)
(define *clut-translate* (new 'static 'array uint32 64
                           #x3020100
                           #x7060504
                           #x13121110
                           #x17161514
                           #xb0a0908
                           #xf0e0d0c
                           #x1b1a1918
                           #x1f1e1d1c
                           #x23222120
                           #x27262524
                           #x33323130
                           #x37363534
                           #x2b2a2928
                           #x2f2e2d2c
                           #x3b3a3938
                           #x3f3e3d3c
                           #x43424140
                           #x47464544
                           #x53525150
                           #x57565554
                           #x4b4a4948
                           #x4f4e4d4c
                           #x5b5a5958
                           #x5f5e5d5c
                           #x63626160
                           #x67666564
                           #x73727170
                           #x77767574
                           #x6b6a6968
                           #x6f6e6d6c
                           #x7b7a7978
                           #x7f7e7d7c
                           #x83828180
                           #x87868584
                           #x93929190
                           #x97969594
                           #x8b8a8988
                           #x8f8e8d8c
                           #x9b9a9998
                           #x9f9e9d9c
                           #xa3a2a1a0
                           #xa7a6a5a4
                           #xb3b2b1b0
                           #xb7b6b5b4
                           #xabaaa9a8
                           #xafaeadac
                           #xbbbab9b8
                           #xbfbebdbc
                           #xc3c2c1c0
                           #xc7c6c5c4
                           #xd3d2d1d0
                           #xd7d6d5d4
                           #xcbcac9c8
                           #xcfcecdcc
                           #xdbdad9d8
                           #xdfdedddc
                           #xe3e2e1e0
                           #xe7e6e5e4
                           #xf3f2f1f0
                           #xf7f6f5f4
                           #xebeae9e8
                           #xefeeedec
                           #xfbfaf9f8
                           #xfffefdfc
                           )
        )

;; failed to figure out what this is:
0




