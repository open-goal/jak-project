;;-*-Lisp-*-
(in-package goal)

;; definition of type texture-anim-layer
(deftype texture-anim-layer (structure)
  ((interpolated-color            vector                                                           :inline)
   (interpolated-scale-offset     vector                                                           :inline)
   (interpolated-st-scale-offset  vector                                                           :inline)
   (interpolated-qs               vector                                                           :inline)
   (interpolated-rot              vector                                                           :inline)
   (extra                         vector                                                           :inline   :offset 240)
   (func                          (function dma-buffer uint int int texture-anim-layer float int)            :offset 256)
   (func-id                       symbol                                                                     :overlay-at func)
   (init-func                     (function texture-anim-layer int)                                          :offset 260)
   (init-func-id                  symbol                                                                     :overlay-at init-func)
   (tex                           texture                                                                    :offset 264)
   (start-time                    float                                                                      :offset 268)
   (end-time                      float                                                                      :offset 272)
   (tex-name                      string                                                                     :offset 276)
   (test                          gs-test                                                                    :offset 280)
   (alpha                         gs-alpha                                                                   :offset 288)
   (clamp                         gs-clamp                                                                   :offset 296)
   (start-vectors                 vector                                                           5 :inline :offset  80)
   (start-color                   vector                                                           :inline   :overlay-at (-> start-vectors 0))
   (start-scale                   vector2                                                          :inline   :offset  96)
   (start-offset                  vector2                                                          :inline   :offset 104)
   (start-st-scale                vector2                                                          :inline   :offset 112)
   (start-st-offset               vector2                                                          :inline   :offset 120)
   (start-qs                      vector                                                           :inline   :overlay-at (-> start-vectors 3))
   (start-rot                     degrees                                                                    :offset 144)
   (start-st-rot                  degrees                                                                    :offset 148)
   (end-vectors                   vector                                                           5 :inline :offset 160)
   (end-color                     vector                                                           :inline   :overlay-at (-> end-vectors 0))
   (end-scale                     vector2                                                          :inline   :offset 176)
   (end-offset                    vector2                                                          :inline   :offset 184)
   (end-scale-offset              vector                                                           :inline   :overlay-at (-> end-vectors 1))
   (end-st-scale                  vector2                                                          :inline   :offset 192)
   (end-st-offset                 vector2                                                          :inline   :offset 200)
   (end-qs                        vector                                                           :inline   :overlay-at (-> end-vectors 3))
   (end-rot                       degrees                                                                    :offset 224)
   (end-st-rot                    degrees                                                                    :offset 228)
   )
  (:methods
    (initialize-texture! (_type_) _type_)
    (clear-texture! (_type_) _type_)
    )
  )

;; definition for method 3 of type texture-anim-layer
(defmethod inspect ((this texture-anim-layer))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'texture-anim-layer)
  (format #t "~1Textra: #<vector @ #x~X>~%" (-> this extra))
  (format #t "~1Tfunc: ~A~%" (-> this func))
  (format #t "~1Tfunc-id: ~A~%" (-> this func))
  (format #t "~1Tinit-func: ~A~%" (-> this init-func))
  (format #t "~1Tinit-func-id: ~A~%" (-> this init-func))
  (format #t "~1Ttex: ~A~%" (-> this tex))
  (format #t "~1Tstart-time: ~f~%" (-> this start-time))
  (format #t "~1Tend-time: ~f~%" (-> this end-time))
  (format #t "~1Ttex-name: ~A~%" (-> this tex-name))
  (format #t "~1Ttest: #x~X~%" (-> this test))
  (format #t "~1Talpha: #x~X~%" (-> this alpha))
  (format #t "~1Tclamp: #x~X~%" (-> this clamp))
  (format #t "~1Tstart-color: ~`vector`P~%" (-> this start-color))
  (format #t "~1Tstart-scale: ~`vector2`P~%" (-> this start-scale))
  (format #t "~1Tstart-offset: ~`vector2`P~%" (-> this start-offset))
  (format #t "~1Tstart-st-scale: ~`vector2`P~%" (-> this start-st-scale))
  (format #t "~1Tstart-st-offset: ~`vector2`P~%" (-> this start-st-offset))
  (format #t "~1Tstart-qs: ~`vector`P~%" (-> this start-qs))
  (format #t "~1Tstart-rot: (deg ~r)~%" (-> this start-rot))
  (format #t "~1Tstart-st-rot: (deg ~r)~%" (-> this start-st-rot))
  (format #t "~1Tend-color: ~`vector`P~%" (-> this end-color))
  (format #t "~1Tend-scale: ~`vector2`P~%" (-> this end-scale))
  (format #t "~1Tend-offset: ~`vector2`P~%" (-> this end-offset))
  (format #t "~1Tend-st-scale: ~`vector2`P~%" (-> this end-st-scale))
  (format #t "~1Tend-st-offset: ~`vector2`P~%" (-> this end-st-offset))
  (format #t "~1Tend-qs: ~`vector`P~%" (-> this end-qs))
  (format #t "~1Tend-rot: (deg ~r)~%" (-> this end-rot))
  (format #t "~1Tend-st-rot: (deg ~r)~%" (-> this end-st-rot))
  (label cfg-4)
  this
  )

;; definition of type texture-anim
(deftype texture-anim (structure)
  ((num-layers    uint32)
   (func          (function dma-buffer texture-anim int))
   (func-id       symbol              :overlay-at func)
   (init-func     (function texture-anim int))
   (init-func-id  symbol              :overlay-at init-func)
   (tex           texture)
   (tex-name      string)
   (extra         vector              :inline)
   (color         rgba)
   (frame-time    float)
   (frame-delta   float)
   (frame-mod     float)
   (test          gs-test)
   (alpha         gs-alpha)
   (clamp         gs-clamp)
   (data          texture-anim-layer  :dynamic)
   )
  (:methods
    (init-textures! (_type_) _type_)
    (clear-textures! (_type_) _type_)
    )
  )

;; definition for method 3 of type texture-anim
(defmethod inspect ((this texture-anim))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'texture-anim)
  (format #t "~1Tnum-layers: ~D~%" (-> this num-layers))
  (format #t "~1Tfunc: ~A~%" (-> this func))
  (format #t "~1Tfunc-id: ~A~%" (-> this func))
  (format #t "~1Tinit-func: ~A~%" (-> this init-func))
  (format #t "~1Tinit-func-id: ~A~%" (-> this init-func))
  (format #t "~1Ttex: ~A~%" (-> this tex))
  (format #t "~1Ttex-name: ~A~%" (-> this tex-name))
  (format #t "~1Textra: #<vector @ #x~X>~%" (-> this extra))
  (format #t "~1Tcolor: #x~X~%" (-> this color))
  (format #t "~1Tframe-time: ~f~%" (-> this frame-time))
  (format #t "~1Tframe-delta: ~f~%" (-> this frame-delta))
  (format #t "~1Tframe-mod: ~f~%" (-> this frame-mod))
  (format #t "~1Ttest: #x~X~%" (-> this test))
  (format #t "~1Talpha: #x~X~%" (-> this alpha))
  (format #t "~1Tclamp: #x~X~%" (-> this clamp))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type texture-anim-array
(deftype texture-anim-array (array)
  ((array-data  texture-anim  :dynamic)
   )
  (:methods
    (init! (_type_) _type_)
    (clear! (_type_) _type_)
    )
  )

;; definition for method 3 of type texture-anim-array
(defmethod inspect ((this texture-anim-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Ttype: ~A~%" (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tcontent-type: ~A~%" (-> this content-type))
  (label cfg-4)
  this
  )

;; definition of type texture-anim-work
(deftype texture-anim-work (structure)
  ((erase-tmpl    dma-gif-packet  :inline)
   (draw-tmpl     dma-gif-packet  :inline)
   (draw2-tmpl    dma-gif-packet  :inline)
   (fill-tmpl     dma-gif-packet  :inline)
   (adgif-tmpl    dma-gif-packet  :inline)
   (corner0       vector          :inline)
   (corner1       vector          :inline)
   (corner2       vector          :inline)
   (corner3       vector          :inline)
   (const         vector          :inline)
   (random        vector4w        8 :inline)
   (random-index  uint8)
   )
  )

;; definition for method 3 of type texture-anim-work
(defmethod inspect ((this texture-anim-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'texture-anim-work)
  (format #t "~1Terase-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this erase-tmpl))
  (format #t "~1Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this draw-tmpl))
  (format #t "~1Tdraw2-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this draw2-tmpl))
  (format #t "~1Tfill-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this fill-tmpl))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tcorner0: #<vector @ #x~X>~%" (-> this corner0))
  (format #t "~1Tcorner1: #<vector @ #x~X>~%" (-> this corner1))
  (format #t "~1Tcorner2: #<vector @ #x~X>~%" (-> this corner2))
  (format #t "~1Tcorner3: #<vector @ #x~X>~%" (-> this corner3))
  (format #t "~1Tconst: #<vector @ #x~X>~%" (-> this const))
  (format #t "~1Trandom[8] @ #x~X~%" (-> this random))
  (format #t "~1Trandom-index: ~D~%" (-> this random-index))
  (label cfg-4)
  this
  )

;; definition of type clut16x16
(deftype clut16x16 (structure)
  ((clut  rgba  256)
   )
  )

;; definition for method 3 of type clut16x16
(defmethod inspect ((this clut16x16))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'clut16x16)
  (format #t "~1Tclut[256] @ #x~X~%" (-> this clut))
  (label cfg-4)
  this
  )

;; definition of type noise8x8
(deftype noise8x8 (structure)
  ((image  uint8  64)
   )
  )

;; definition for method 3 of type noise8x8
(defmethod inspect ((this noise8x8))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'noise8x8)
  (format #t "~1Timage[64] @ #x~X~%" (-> this image))
  (label cfg-4)
  this
  )

;; definition of type noise16x16
(deftype noise16x16 (structure)
  ((image  uint8  256)
   )
  )

;; definition for method 3 of type noise16x16
(defmethod inspect ((this noise16x16))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'noise16x16)
  (format #t "~1Timage[256] @ #x~X~%" (-> this image))
  (label cfg-4)
  this
  )

;; definition of type noise32x32
(deftype noise32x32 (structure)
  ((image  uint8  1024)
   )
  )

;; definition for method 3 of type noise32x32
(defmethod inspect ((this noise32x32))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'noise32x32)
  (format #t "~1Timage[1024] @ #x~X~%" (-> this image))
  (label cfg-4)
  this
  )

;; definition of type noise64x64
(deftype noise64x64 (structure)
  ((image  uint8  4096)
   )
  )

;; definition for method 3 of type noise64x64
(defmethod inspect ((this noise64x64))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'noise64x64)
  (format #t "~1Timage[4096] @ #x~X~%" (-> this image))
  (label cfg-4)
  this
  )

;; definition of type noise128x128
(deftype noise128x128 (structure)
  ((image  uint8  16384)
   )
  )

;; definition for method 3 of type noise128x128
(defmethod inspect ((this noise128x128))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'noise128x128)
  (format #t "~1Timage[16384] @ #x~X~%" (-> this image))
  (label cfg-4)
  this
  )

;; definition of type fog8x256
(deftype fog8x256 (structure)
  ((image  uint8  256)
   )
  )

;; definition for method 3 of type fog8x256
(defmethod inspect ((this fog8x256))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'fog8x256)
  (format #t "~1Timage[256] @ #x~X~%" (-> this image))
  (label cfg-4)
  this
  )

;; definition of type fog-texture-work
(deftype fog-texture-work (structure)
  ((corner       vector  4 :inline)
   (const        vector  :inline)
   (min-corner   vector  :inline)
   (max-corner   vector  :inline)
   (fog-near     float)
   (fog-far      float)
   (fog-delta    float)
   (alpha-near   float)
   (alpha-far    float)
   (alpha-delta  float)
   (color        uint32)
   )
  )

;; definition for method 3 of type fog-texture-work
(defmethod inspect ((this fog-texture-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'fog-texture-work)
  (format #t "~1Tcorner[4] @ #x~X~%" (-> this corner))
  (format #t "~1Tconst: #<vector @ #x~X>~%" (-> this const))
  (format #t "~1Tmin-corner: #<vector @ #x~X>~%" (-> this min-corner))
  (format #t "~1Tmax-corner: #<vector @ #x~X>~%" (-> this max-corner))
  (format #t "~1Tfog-near: ~f~%" (-> this fog-near))
  (format #t "~1Tfog-far: ~f~%" (-> this fog-far))
  (format #t "~1Tfog-delta: ~f~%" (-> this fog-delta))
  (format #t "~1Talpha-near: ~f~%" (-> this alpha-near))
  (format #t "~1Talpha-far: ~f~%" (-> this alpha-far))
  (format #t "~1Talpha-delta: ~f~%" (-> this alpha-delta))
  (format #t "~1Tcolor: ~D~%" (-> this color))
  (label cfg-4)
  this
  )

;; definition for symbol *clut-translate*, type (pointer uint8)
(define *clut-translate* (new 'static 'array uint8 256
                           #x0
                           #x1
                           #x2
                           #x3
                           #x4
                           #x5
                           #x6
                           #x7
                           #x10
                           #x11
                           #x12
                           #x13
                           #x14
                           #x15
                           #x16
                           #x17
                           #x8
                           #x9
                           #xa
                           #xb
                           #xc
                           #xd
                           #xe
                           #xf
                           #x18
                           #x19
                           #x1a
                           #x1b
                           #x1c
                           #x1d
                           #x1e
                           #x1f
                           #x20
                           #x21
                           #x22
                           #x23
                           #x24
                           #x25
                           #x26
                           #x27
                           #x30
                           #x31
                           #x32
                           #x33
                           #x34
                           #x35
                           #x36
                           #x37
                           #x28
                           #x29
                           #x2a
                           #x2b
                           #x2c
                           #x2d
                           #x2e
                           #x2f
                           #x38
                           #x39
                           #x3a
                           #x3b
                           #x3c
                           #x3d
                           #x3e
                           #x3f
                           #x40
                           #x41
                           #x42
                           #x43
                           #x44
                           #x45
                           #x46
                           #x47
                           #x50
                           #x51
                           #x52
                           #x53
                           #x54
                           #x55
                           #x56
                           #x57
                           #x48
                           #x49
                           #x4a
                           #x4b
                           #x4c
                           #x4d
                           #x4e
                           #x4f
                           #x58
                           #x59
                           #x5a
                           #x5b
                           #x5c
                           #x5d
                           #x5e
                           #x5f
                           #x60
                           #x61
                           #x62
                           #x63
                           #x64
                           #x65
                           #x66
                           #x67
                           #x70
                           #x71
                           #x72
                           #x73
                           #x74
                           #x75
                           #x76
                           #x77
                           #x68
                           #x69
                           #x6a
                           #x6b
                           #x6c
                           #x6d
                           #x6e
                           #x6f
                           #x78
                           #x79
                           #x7a
                           #x7b
                           #x7c
                           #x7d
                           #x7e
                           #x7f
                           #x80
                           #x81
                           #x82
                           #x83
                           #x84
                           #x85
                           #x86
                           #x87
                           #x90
                           #x91
                           #x92
                           #x93
                           #x94
                           #x95
                           #x96
                           #x97
                           #x88
                           #x89
                           #x8a
                           #x8b
                           #x8c
                           #x8d
                           #x8e
                           #x8f
                           #x98
                           #x99
                           #x9a
                           #x9b
                           #x9c
                           #x9d
                           #x9e
                           #x9f
                           #xa0
                           #xa1
                           #xa2
                           #xa3
                           #xa4
                           #xa5
                           #xa6
                           #xa7
                           #xb0
                           #xb1
                           #xb2
                           #xb3
                           #xb4
                           #xb5
                           #xb6
                           #xb7
                           #xa8
                           #xa9
                           #xaa
                           #xab
                           #xac
                           #xad
                           #xae
                           #xaf
                           #xb8
                           #xb9
                           #xba
                           #xbb
                           #xbc
                           #xbd
                           #xbe
                           #xbf
                           #xc0
                           #xc1
                           #xc2
                           #xc3
                           #xc4
                           #xc5
                           #xc6
                           #xc7
                           #xd0
                           #xd1
                           #xd2
                           #xd3
                           #xd4
                           #xd5
                           #xd6
                           #xd7
                           #xc8
                           #xc9
                           #xca
                           #xcb
                           #xcc
                           #xcd
                           #xce
                           #xcf
                           #xd8
                           #xd9
                           #xda
                           #xdb
                           #xdc
                           #xdd
                           #xde
                           #xdf
                           #xe0
                           #xe1
                           #xe2
                           #xe3
                           #xe4
                           #xe5
                           #xe6
                           #xe7
                           #xf0
                           #xf1
                           #xf2
                           #xf3
                           #xf4
                           #xf5
                           #xf6
                           #xf7
                           #xe8
                           #xe9
                           #xea
                           #xeb
                           #xec
                           #xed
                           #xee
                           #xef
                           #xf8
                           #xf9
                           #xfa
                           #xfb
                           #xfc
                           #xfd
                           #xfe
                           #xff
                           )
        )

;; failed to figure out what this is:
0
