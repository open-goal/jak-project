;;-*-Lisp-*-
(in-package goal)

;; definition of type ocean-corner
(deftype ocean-corner (structure)
  ((bsphere      sphere :inline :offset-assert   0)
   (start-corner vector :inline :offset-assert  16)
   (y-scales     vector :inline :offset-assert  32)
   (alphas       vector :inline :offset-assert  48)
   (colors       uint32 4       :offset-assert  64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; definition for method 3 of type ocean-corner
(defmethod inspect ocean-corner ((this ocean-corner))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-corner)
  (format #t "~1Tbsphere: #<sphere @ #x~X>~%" (-> this bsphere))
  (format #t "~1Tstart-corner: #<vector @ #x~X>~%" (-> this start-corner))
  (format #t "~1Ty-scales: #<vector @ #x~X>~%" (-> this y-scales))
  (format #t "~1Talphas: #<vector @ #x~X>~%" (-> this alphas))
  (format #t "~1Tcolors[4] @ #x~X~%" (-> this colors))
  (label cfg-4)
  this
  )

;; definition of type ocean-wave-info
(deftype ocean-wave-info (structure)
  ((frequency  float  :offset-assert   0)
   (amplitude  float  :offset-assert   4)
   (wave-speed float  :offset-assert   8)
   (angle      float  :offset-assert  12)
   (kx         float  :offset-assert  16)
   (ky         float  :offset-assert  20)
   (w          float  :offset-assert  24)
   (flags      int32  :offset-assert  28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type ocean-wave-info
(defmethod inspect ocean-wave-info ((this ocean-wave-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-wave-info)
  (format #t "~1Tfrequency: ~f~%" (-> this frequency))
  (format #t "~1Tamplitude: ~f~%" (-> this amplitude))
  (format #t "~1Twave-speed: ~f~%" (-> this wave-speed))
  (format #t "~1Tangle: ~f~%" (-> this angle))
  (format #t "~1Tkx: ~f~%" (-> this kx))
  (format #t "~1Tky: ~f~%" (-> this ky))
  (format #t "~1Tw: ~f~%" (-> this w))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type ocean-vertex
(deftype ocean-vertex (structure)
  ((pos vector :inline :offset-assert   0)
   (stq vector :inline :offset-assert  16)
   (col vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type ocean-vertex
(defmethod inspect ocean-vertex ((this ocean-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-vertex)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tstq: #<vector @ #x~X>~%" (-> this stq))
  (format #t "~1Tcol: #<vector @ #x~X>~%" (-> this col))
  (label cfg-4)
  this
  )

;; definition of type ocean-spheres
(deftype ocean-spheres (structure)
  ((spheres sphere 36 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

;; definition for method 3 of type ocean-spheres
(defmethod inspect ocean-spheres ((this ocean-spheres))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-spheres)
  (format #t "~1Tspheres[36] @ #x~X~%" (-> this spheres))
  (label cfg-4)
  this
  )

;; definition of type ocean-colors
(deftype ocean-colors (structure)
  ((colors rgba 2548 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x27d0
  :flag-assert         #x9000027d0
  )

;; definition for method 3 of type ocean-colors
(defmethod inspect ocean-colors ((this ocean-colors))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-colors)
  (format #t "~1Tcolors[2548] @ #x~X~%" (-> this colors))
  (label cfg-4)
  this
  )

;; definition of type ocean-colors-float
(deftype ocean-colors-float (structure)
  ((colors vector 2548 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x9f40
  :flag-assert         #x900009f40
  )

;; definition for method 3 of type ocean-colors-float
(defmethod inspect ocean-colors-float ((this ocean-colors-float))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-colors-float)
  (format #t "~1Tcolors[2548] @ #x~X~%" (-> this colors))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-mask
(deftype ocean-mid-mask (structure)
  ((mask  uint8  8 :offset-assert   0)
   (dword uint64   :offset          0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type ocean-mid-mask
(defmethod inspect ocean-mid-mask ((this ocean-mid-mask))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-mid-mask)
  (format #t "~1Tmask[8] @ #x~X~%" (-> this mask))
  (format #t "~1Tdword: #x~X~%" (-> this dword))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-indices
(deftype ocean-mid-indices (basic)
  ((data uint16 36 :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

;; definition for method 3 of type ocean-mid-indices
(defmethod inspect ocean-mid-indices ((this ocean-mid-indices))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdata[36] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-masks
(deftype ocean-mid-masks (basic)
  ((data (inline-array ocean-mid-mask)  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type ocean-mid-masks
(defmethod inspect ocean-mid-masks ((this ocean-mid-masks))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdata: #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-trans-mask
(deftype ocean-trans-mask (structure)
  ((mask uint8 4 :offset-assert   0)
   (word int32   :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type ocean-trans-mask
(defmethod inspect ocean-trans-mask ((this ocean-trans-mask))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-trans-mask)
  (format #t "~1Tmask[4] @ #x~X~%" (-> this mask))
  (format #t "~1Tword: #x~X~%" (-> this word))
  (label cfg-4)
  this
  )

;; definition of type ocean-trans-index
(deftype ocean-trans-index (structure)
  ((parent int16  :offset-assert   0)
   (child  int16  :offset-assert   2)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type ocean-trans-index
(defmethod inspect ocean-trans-index ((this ocean-trans-index))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-trans-index)
  (format #t "~1Tparent: ~D~%" (-> this parent))
  (format #t "~1Tchild: ~D~%" (-> this child))
  (label cfg-4)
  this
  )

;; definition of type ocean-trans-indices
(deftype ocean-trans-indices (basic)
  ((data ocean-trans-index 2304 :inline :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x2404
  :flag-assert         #x900002404
  )

;; definition for method 3 of type ocean-trans-indices
(defmethod inspect ocean-trans-indices ((this ocean-trans-indices))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdata[2304] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-index
(deftype ocean-near-index (structure)
  ((data uint16 16 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type ocean-near-index
(defmethod inspect ocean-near-index ((this ocean-near-index))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-near-index)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-indices
(deftype ocean-near-indices (basic)
  ((data (inline-array ocean-near-index)  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type ocean-near-indices
(defmethod inspect ocean-near-indices ((this ocean-near-indices))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdata: #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-colors
(deftype ocean-near-colors (structure)
  ((color0 vector :inline :offset-assert   0)
   (color1 vector :inline :offset-assert  16)
   (color2 vector :inline :offset-assert  32)
   (color3 vector :inline :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type ocean-near-colors
(defmethod inspect ocean-near-colors ((this ocean-near-colors))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-near-colors)
  (format #t "~1Tcolor0: #<vector @ #x~X>~%" (-> this color0))
  (format #t "~1Tcolor1: #<vector @ #x~X>~%" (-> this color1))
  (format #t "~1Tcolor2: #<vector @ #x~X>~%" (-> this color2))
  (format #t "~1Tcolor3: #<vector @ #x~X>~%" (-> this color3))
  (label cfg-4)
  this
  )

;; definition of type ocean-trans-strip
(deftype ocean-trans-strip (structure)
  ((verts uint128 10 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

;; definition for method 3 of type ocean-trans-strip
(defmethod inspect ocean-trans-strip ((this ocean-trans-strip))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-trans-strip)
  (format #t "~1Tverts[10] @ #x~X~%" (-> this verts))
  (label cfg-4)
  this
  )

;; definition of type ocean-trans-strip-array
(deftype ocean-trans-strip-array (structure)
  ((data ocean-trans-strip 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x280
  :flag-assert         #x900000280
  )

;; definition for method 3 of type ocean-trans-strip-array
(defmethod inspect ocean-trans-strip-array ((this ocean-trans-strip-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-trans-strip-array)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-wave-data
(deftype ocean-wave-data (structure)
  ((data uint8 1024 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x400
  :flag-assert         #x900000400
  )

;; definition for method 3 of type ocean-wave-data
(defmethod inspect ocean-wave-data ((this ocean-wave-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-wave-data)
  (format #t "~1Tdata[1024] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-wave-frames
(deftype ocean-wave-frames (structure)
  ((frame ocean-wave-data 64 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x10000
  :flag-assert         #x900000000
  )

;; definition for method 3 of type ocean-wave-frames
(defmethod inspect ocean-wave-frames ((this ocean-wave-frames))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-wave-frames)
  (format #t "~1Tframe[64] @ #x~X~%" (-> this frame))
  (label cfg-4)
  this
  )

;; definition of type ocean-texture-constants
(deftype ocean-texture-constants (structure)
  ((giftag    gs-gif-tag :inline :offset-assert   0)
   (buffers   vector4w   :inline :offset-assert  16)
   (dests     vector4w   :inline :offset-assert  32)
   (start     vector     :inline :offset-assert  48)
   (offsets   vector     :inline :offset-assert  64)
   (constants vector     :inline :offset-assert  80)
   (cam-nrm   vector     :inline :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type ocean-texture-constants
(defmethod inspect ocean-texture-constants ((this ocean-texture-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-texture-constants)
  (format #t "~1Tgiftag: #<qword @ #x~X>~%" (-> this giftag))
  (format #t "~1Tbuffers: #<vector4w @ #x~X>~%" (-> this buffers))
  (format #t "~1Tdests: #<vector4w @ #x~X>~%" (-> this dests))
  (format #t "~1Tstart: #<vector @ #x~X>~%" (-> this start))
  (format #t "~1Toffsets: #<vector @ #x~X>~%" (-> this offsets))
  (format #t "~1Tconstants: #<vector @ #x~X>~%" (-> this constants))
  (format #t "~1Tcam-nrm: #<vector @ #x~X>~%" (-> this cam-nrm))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-vertex
(deftype ocean-mid-vertex (structure)
  ((stq vector :inline :offset-assert   0)
   (col vector :inline :offset-assert  16)
   (pos vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type ocean-mid-vertex
(defmethod inspect ocean-mid-vertex ((this ocean-mid-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-mid-vertex)
  (format #t "~1Tstq: #<vector @ #x~X>~%" (-> this stq))
  (format #t "~1Tcol: #<vector @ #x~X>~%" (-> this col))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-constants
(deftype ocean-mid-constants (structure)
  ((hmge-scale     vector       :inline   :offset-assert   0)
   (inv-hmge-scale vector       :inline   :offset-assert  16)
   (hvdf-offset    vector       :inline   :offset-assert  32)
   (fog            vector       :inline   :offset-assert  48)
   (constants      vector       :inline   :offset-assert  64)
   (constants2     vector       :inline   :offset-assert  80)
   (drw-fan        gs-gif-tag   :inline   :offset-assert  96)
   (env-fan        gs-gif-tag   :inline   :offset-assert 112)
   (drw-adgif      gs-gif-tag   :inline   :offset-assert 128)
   (drw-texture    adgif-shader :inline   :offset-assert 144)
   (drw-strip-0    gs-gif-tag   :inline   :offset-assert 224)
   (drw-strip-1    gs-gif-tag   :inline   :offset-assert 240)
   (env-adgif      gs-gif-tag   :inline   :offset-assert 256)
   (env-texture    adgif-shader :inline   :offset-assert 272)
   (env-strip      gs-gif-tag   :inline   :offset-assert 352)
   (env-color      vector       :inline   :offset-assert 368)
   (index-table    vector4w     8 :inline :offset-assert 384)
   (pos0           vector       :inline   :offset-assert 512)
   (pos1           vector       :inline   :offset-assert 528)
   (pos2           vector       :inline   :offset-assert 544)
   (pos3           vector       :inline   :offset-assert 560)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

;; definition for method 3 of type ocean-mid-constants
(defmethod inspect ocean-mid-constants ((this ocean-mid-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-mid-constants)
  (format #t "~1Thmge-scale: #<vector @ #x~X>~%" (-> this hmge-scale))
  (format #t "~1Tinv-hmge-scale: #<vector @ #x~X>~%" (-> this inv-hmge-scale))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~1Tconstants: #<vector @ #x~X>~%" (-> this constants))
  (format #t "~1Tconstants2: #<vector @ #x~X>~%" (-> this constants2))
  (format #t "~1Tdrw-fan: #<qword @ #x~X>~%" (-> this drw-fan))
  (format #t "~1Tenv-fan: #<qword @ #x~X>~%" (-> this env-fan))
  (format #t "~1Tdrw-adgif: #<qword @ #x~X>~%" (-> this drw-adgif))
  (format #t "~1Tdrw-texture: #<adgif-shader @ #x~X>~%" (-> this drw-texture))
  (format #t "~1Tdrw-strip-0: #<qword @ #x~X>~%" (-> this drw-strip-0))
  (format #t "~1Tdrw-strip-1: #<qword @ #x~X>~%" (-> this drw-strip-1))
  (format #t "~1Tenv-adgif: #<qword @ #x~X>~%" (-> this env-adgif))
  (format #t "~1Tenv-texture: #<adgif-shader @ #x~X>~%" (-> this env-texture))
  (format #t "~1Tenv-strip: #<qword @ #x~X>~%" (-> this env-strip))
  (format #t "~1Tenv-color: #<vector @ #x~X>~%" (-> this env-color))
  (format #t "~1Tindex-table[8] @ #x~X~%" (-> this index-table))
  (format #t "~1Tpos0: #<vector @ #x~X>~%" (-> this pos0))
  (format #t "~1Tpos1: #<vector @ #x~X>~%" (-> this pos1))
  (format #t "~1Tpos2: #<vector @ #x~X>~%" (-> this pos2))
  (format #t "~1Tpos3: #<vector @ #x~X>~%" (-> this pos3))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-upload
(deftype ocean-mid-upload (structure)
  ((rot    matrix  :inline :offset-assert   0)
   (matrix matrix  :inline :offset-assert  64)
   (colors uint128 108     :offset-assert 128)
   (masks  uint128 2       :offset-assert 1856)
   )
  :method-count-assert 9
  :size-assert         #x760
  :flag-assert         #x900000760
  )

;; definition for method 3 of type ocean-mid-upload
(defmethod inspect ocean-mid-upload ((this ocean-mid-upload))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-mid-upload)
  (format #t "~1Trot: #<matrix @ #x~X>~%" (-> this rot))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tcolors[108] @ #x~X~%" (-> this colors))
  (format #t "~1Tmasks[2] @ #x~X~%" (-> this masks))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-upload2
(deftype ocean-mid-upload2 (structure)
  ((rot    matrix   :inline :offset-assert   0)
   (matrix matrix   :inline :offset-assert  64)
   (count  vector4w :inline :offset-assert 128)
   (tex0   vector   :inline :offset-assert 144)
   (tex1   vector   :inline :offset-assert 160)
   (tex2   vector   :inline :offset-assert 176)
   (tex3   vector   :inline :offset-assert 192)
   (clr0   vector   :inline :offset-assert 208)
   (clr1   vector   :inline :offset-assert 224)
   (clr2   vector   :inline :offset-assert 240)
   (clr3   vector   :inline :offset-assert 256)
   (verts  uint128  18      :offset-assert 272)
   )
  :method-count-assert 9
  :size-assert         #x230
  :flag-assert         #x900000230
  )

;; definition for method 3 of type ocean-mid-upload2
(defmethod inspect ocean-mid-upload2 ((this ocean-mid-upload2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-mid-upload2)
  (format #t "~1Trot: #<matrix @ #x~X>~%" (-> this rot))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tcount: #<vector4w @ #x~X>~%" (-> this count))
  (format #t "~1Ttex0: #<vector @ #x~X>~%" (-> this tex0))
  (format #t "~1Ttex1: #<vector @ #x~X>~%" (-> this tex1))
  (format #t "~1Ttex2: #<vector @ #x~X>~%" (-> this tex2))
  (format #t "~1Ttex3: #<vector @ #x~X>~%" (-> this tex3))
  (format #t "~1Tclr0: #<vector @ #x~X>~%" (-> this clr0))
  (format #t "~1Tclr1: #<vector @ #x~X>~%" (-> this clr1))
  (format #t "~1Tclr2: #<vector @ #x~X>~%" (-> this clr2))
  (format #t "~1Tclr3: #<vector @ #x~X>~%" (-> this clr3))
  (format #t "~1Tverts[18] @ #x~X~%" (-> this verts))
  (label cfg-4)
  this
  )

;; definition of type ocean-mid-work
(deftype ocean-mid-work (structure)
  ((env0    vector  :inline :offset-assert   0)
   (env1    vector  :inline :offset-assert  16)
   (env2    vector  :inline :offset-assert  32)
   (hmg0    vector  :inline :offset-assert  48)
   (hmg1    vector  :inline :offset-assert  64)
   (hmg2    vector  :inline :offset-assert  80)
   (indices uint128 16      :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x160
  :flag-assert         #x900000160
  )

;; definition for method 3 of type ocean-mid-work
(defmethod inspect ocean-mid-work ((this ocean-mid-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-mid-work)
  (format #t "~1Tenv0: #<vector @ #x~X>~%" (-> this env0))
  (format #t "~1Tenv1: #<vector @ #x~X>~%" (-> this env1))
  (format #t "~1Tenv2: #<vector @ #x~X>~%" (-> this env2))
  (format #t "~1Thmg0: #<vector @ #x~X>~%" (-> this hmg0))
  (format #t "~1Thmg1: #<vector @ #x~X>~%" (-> this hmg1))
  (format #t "~1Thmg2: #<vector @ #x~X>~%" (-> this hmg2))
  (format #t "~1Tindices[16] @ #x~X~%" (-> this indices))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-constants
(deftype ocean-near-constants (structure)
  ((hmge-scale     vector       :inline   :offset-assert   0)
   (inv-hmge-scale vector       :inline   :offset-assert  16)
   (hvdf-offset    vector       :inline   :offset-assert  32)
   (fog            vector       :inline   :offset-assert  48)
   (constants      vector       :inline   :offset-assert  64)
   (constants2     vector       :inline   :offset-assert  80)
   (constants3     vector       :inline   :offset-assert  96)
   (constants4     vector       :inline   :offset-assert 112)
   (constants5     vector       :inline   :offset-assert 128)
   (drw-fan        gs-gif-tag   :inline   :offset-assert 144)
   (drw2-fan       gs-gif-tag   :inline   :offset-assert 160)
   (env-fan        gs-gif-tag   :inline   :offset-assert 176)
   (drw-adgif      gs-gif-tag   :inline   :offset-assert 192)
   (drw-texture    adgif-shader :inline   :offset-assert 208)
   (drw-strip      gs-gif-tag   :inline   :offset-assert 288)
   (env-adgif      gs-gif-tag   :inline   :offset-assert 304)
   (env-texture    adgif-shader :inline   :offset-assert 320)
   (env-strip      gs-gif-tag   :inline   :offset-assert 400)
   (env-color      vector       :inline   :offset-assert 416)
   (drw2-adgif     gs-gif-tag   :inline   :offset-assert 432)
   (drw2-tex0      qword        :inline   :offset-assert 448)
   (drw2-frame     qword        :inline   :offset-assert 464)
   (drw2-strip     gs-gif-tag   :inline   :offset-assert 480)
   (drw3-adgif     gs-gif-tag   :inline   :offset-assert 496)
   (drw3-frame     gs-adcmd     :inline   :offset-assert 512)
   (index-table    vector4w     4 :inline :offset-assert 528)
   )
  :method-count-assert 9
  :size-assert         #x250
  :flag-assert         #x900000250
  )

;; definition for method 3 of type ocean-near-constants
(defmethod inspect ocean-near-constants ((this ocean-near-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-near-constants)
  (format #t "~1Thmge-scale: #<vector @ #x~X>~%" (-> this hmge-scale))
  (format #t "~1Tinv-hmge-scale: #<vector @ #x~X>~%" (-> this inv-hmge-scale))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~1Tconstants: #<vector @ #x~X>~%" (-> this constants))
  (format #t "~1Tconstants2: #<vector @ #x~X>~%" (-> this constants2))
  (format #t "~1Tconstants3: #<vector @ #x~X>~%" (-> this constants3))
  (format #t "~1Tconstants4: #<vector @ #x~X>~%" (-> this constants4))
  (format #t "~1Tconstants5: #<vector @ #x~X>~%" (-> this constants5))
  (format #t "~1Tdrw-fan: #<qword @ #x~X>~%" (-> this drw-fan))
  (format #t "~1Tdrw2-fan: #<qword @ #x~X>~%" (-> this drw2-fan))
  (format #t "~1Tenv-fan: #<qword @ #x~X>~%" (-> this env-fan))
  (format #t "~1Tdrw-adgif: #<qword @ #x~X>~%" (-> this drw-adgif))
  (format #t "~1Tdrw-texture: #<adgif-shader @ #x~X>~%" (-> this drw-texture))
  (format #t "~1Tdrw-strip: #<qword @ #x~X>~%" (-> this drw-strip))
  (format #t "~1Tenv-adgif: #<qword @ #x~X>~%" (-> this env-adgif))
  (format #t "~1Tenv-texture: #<adgif-shader @ #x~X>~%" (-> this env-texture))
  (format #t "~1Tenv-strip: #<qword @ #x~X>~%" (-> this env-strip))
  (format #t "~1Tenv-color: #<vector @ #x~X>~%" (-> this env-color))
  (format #t "~1Tdrw2-adgif: #<qword @ #x~X>~%" (-> this drw2-adgif))
  (format #t "~1Tdrw2-tex0: #<qword @ #x~X>~%" (-> this drw2-tex0))
  (format #t "~1Tdrw2-frame: #<qword @ #x~X>~%" (-> this drw2-frame))
  (format #t "~1Tdrw2-strip: #<qword @ #x~X>~%" (-> this drw2-strip))
  (format #t "~1Tdrw3-adgif: #<qword @ #x~X>~%" (-> this drw3-adgif))
  (format #t "~1Tdrw3-frame: #<qword @ #x~X>~%" (-> this drw3-frame))
  (format #t "~1Tindex-table[4] @ #x~X~%" (-> this index-table))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-upload
(deftype ocean-near-upload (structure)
  ((rot          matrix            :inline :offset-assert   0)
   (matrix       matrix            :inline :offset-assert  64)
   (masks        uint128           2       :offset-assert 128)
   (start-height vector4w          :inline :offset-assert 160)
   (start-st     vector            :inline :offset-assert 176)
   (near-colors  ocean-near-colors :inline :offset-assert 192)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; definition for method 3 of type ocean-near-upload
(defmethod inspect ocean-near-upload ((this ocean-near-upload))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-near-upload)
  (format #t "~1Trot: #<matrix @ #x~X>~%" (-> this rot))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tmasks[2] @ #x~X~%" (-> this masks))
  (format #t "~1Tstart-height: #<vector4w @ #x~X>~%" (-> this start-height))
  (format #t "~1Tstart-st: #<vector @ #x~X>~%" (-> this start-st))
  (format #t "~1Tnear-colors: #<ocean-near-colors @ #x~X>~%" (-> this near-colors))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-vertex
(deftype ocean-near-vertex (structure)
  ((stq vector :inline :offset-assert   0)
   (clr vector :inline :offset-assert  16)
   (pos vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type ocean-near-vertex
(defmethod inspect ocean-near-vertex ((this ocean-near-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-near-vertex)
  (format #t "~1Tstq: #<vector @ #x~X>~%" (-> this stq))
  (format #t "~1Tclr: #<vector @ #x~X>~%" (-> this clr))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (label cfg-4)
  this
  )

;; definition of type ocean-near-work
(deftype ocean-near-work (structure)
  ((verts-ptr vector  :inline :offset-assert   0)
   (indices   uint128 16      :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x110
  :flag-assert         #x900000110
  )

;; definition for method 3 of type ocean-near-work
(defmethod inspect ocean-near-work ((this ocean-near-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-near-work)
  (format #t "~1Tverts-ptr: #<vector @ #x~X>~%" (-> this verts-ptr))
  (format #t "~1Tindices[16] @ #x~X~%" (-> this indices))
  (label cfg-4)
  this
  )

;; definition of type ocean-height-array
(deftype ocean-height-array (structure)
  ((data float 1024 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

;; definition for method 3 of type ocean-height-array
(defmethod inspect ocean-height-array ((this ocean-height-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-height-array)
  (format #t "~1Tdata[1024] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-vert-array
(deftype ocean-vert-array (structure)
  ((data vector 2048 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x8000
  :flag-assert         #x900008000
  )

;; definition for method 3 of type ocean-vert-array
(defmethod inspect ocean-vert-array ((this ocean-vert-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-vert-array)
  (format #t "~1Tdata[2048] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type ocean-map
(deftype ocean-map (structure)
  ((start-corner        vector              :inline :offset-assert   0)
   (far-color           vector              :inline :offset-assert  16)
   (ocean-spheres       ocean-spheres               :offset-assert  32)
   (ocean-colors        ocean-colors                :offset-assert  36)
   (ocean-mid-indices   ocean-mid-indices           :offset-assert  40)
   (ocean-trans-indices ocean-trans-indices         :offset-assert  44)
   (ocean-near-indices  ocean-near-indices          :offset-assert  48)
   (ocean-mid-masks     ocean-mid-masks             :offset-assert  52)
   )
  :method-count-assert 11
  :size-assert         #x38
  :flag-assert         #xb00000038
  (:methods
    (set-height! (_type_ float) none 9)
    (get-base-height (_type_) float 10)
    )
  )

;; definition for method 3 of type ocean-map
(defmethod inspect ocean-map ((this ocean-map))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean-map)
  (format #t "~1Tstart-corner: #<vector @ #x~X>~%" (-> this start-corner))
  (format #t "~1Tfar-color: #<vector @ #x~X>~%" (-> this far-color))
  (format #t "~1Tocean-spheres: #<ocean-spheres @ #x~X>~%" (-> this ocean-spheres))
  (format #t "~1Tocean-colors: #<ocean-colors @ #x~X>~%" (-> this ocean-colors))
  (format #t "~1Tocean-mid-indices: ~A~%" (-> this ocean-mid-indices))
  (format #t "~1Tocean-trans-indices: ~A~%" (-> this ocean-trans-indices))
  (format #t "~1Tocean-near-indices: ~A~%" (-> this ocean-near-indices))
  (format #t "~1Tocean-mid-masks: ~A~%" (-> this ocean-mid-masks))
  (label cfg-4)
  this
  )

;; definition of type ocean
(deftype ocean (ocean-map)
  ((off                     symbol                        :offset-assert  56)
   (near-off                symbol                        :offset-assert  60)
   (mid-off                 symbol                        :offset-assert  64)
   (far-on                  symbol                        :offset-assert  68)
   (ocean-facing            uint32                        :offset-assert  72)
   (heights                 ocean-height-array            :offset-assert  76)
   (heights2                ocean-height-array            :offset-assert  80)
   (verts                   ocean-vert-array              :offset-assert  84)
   (ocean-near-translucent? symbol                        :offset-assert  88)
   (deltas                  vector             :inline    :offset-assert  96)
   (map-min                 vector             :inline    :offset-assert 112)
   (map-max                 vector             :inline    :offset-assert 128)
   (interp                  vector             :inline    :offset-assert 144)
   (corner-array            ocean-corner       25 :inline :offset-assert 160)
   (corner-count            int32                         :offset-assert 2160)
   (temp-vecs               vector             4 :inline  :offset-assert 2176)
   (mid-mask-ptrs           pointer            36         :offset-assert 2240)
   (mid-camera-masks        uint64             36         :offset-assert 2384)
   (trans-mask-ptrs         pointer            64         :offset-assert 2672)
   (trans-camera-masks      ocean-trans-mask   16         :offset-assert 2928)
   (trans-temp-masks        uint32             16         :offset-assert 2992)
   (sprite-tmpl             dma-gif-packet     :inline    :offset-assert 3056)
   (sprite-tmpl2            dma-gif-packet     :inline    :offset-assert 3088)
   (sprite-tmpl3            dma-gif-packet     :inline    :offset-assert 3120)
   (adgif-tmpl              dma-gif-packet     :inline    :offset-assert 3152)
   (line-tmpl               dma-gif-packet     :inline    :offset-assert 3184)
   (sun-tmpl                dma-gif-packet     :inline    :offset-assert 3216)
   (erase-tmpl              dma-gif-packet     :inline    :offset-assert 3248)
   (haze-tmpl               dma-gif-packet     :inline    :offset-assert 3280)
   (cloud-tmpl              dma-gif-packet     :inline    :offset-assert 3312)
   (clut-tmpl               dma-gif-packet     :inline    :offset-assert 3344)
   (cloud-lights            cloud-lights       :inline    :offset-assert 3376)
   (haze-lights             haze-lights        :inline    :offset-assert 3536)
   (constant                vector             :inline    :offset-assert 3664)
   (sky-color               vector             :inline    :offset-assert 3680)
   (haze-verts              vector4w           32 :inline :offset-assert 3696)
   (cloud-verts             vector4w           36 :inline :offset-assert 4208)
   (cloud-nrms              vector             36 :inline :offset-assert 4784)
   (cloud-col0              vector             36 :inline :offset-assert 5360)
   (cloud-col1              vector             36 :inline :offset-assert 5936)
   (cloud-st0               vector             36 :inline :offset-assert 6512)
   (cloud-st1               vector             36 :inline :offset-assert 7088)
   (color80808080           vector4w           :inline    :offset-assert 7664)
   (color80808040           vector4w           :inline    :offset-assert 7680)
   (color80808000           vector4w           :inline    :offset-assert 7696)
   (st0000                  vector             :inline    :offset-assert 7712)
   (st0505                  vector             :inline    :offset-assert 7728)
   (st1010                  vector             :inline    :offset-assert 7744)
   (uv00                    vector4w           :inline    :offset-assert 7760)
   (uv44                    vector4w           :inline    :offset-assert 7776)
   (uv88                    vector4w           :inline    :offset-assert 7792)
   (uv1010                  vector4w           :inline    :offset-assert 7808)
   (uv2020                  vector4w           :inline    :offset-assert 7824)
   (uv4040                  vector4w           :inline    :offset-assert 7840)
   (uv8080                  vector4w           :inline    :offset-assert 7856)
   (xy00                    vector4w           :inline    :offset-assert 7872)
   (xy88                    vector4w           :inline    :offset-assert 7888)
   (xy1010                  vector4w           :inline    :offset-assert 7904)
   (xy2020                  vector4w           :inline    :offset-assert 7920)
   (xy4040                  vector4w           :inline    :offset-assert 7936)
   (xy8080                  vector4w           :inline    :offset-assert 7952)
   (cloud-alpha             uint8              36         :offset-assert 7968)
   (near-mask-indices       uint16             16         :offset-assert 8004)
   (mid-minx                uint8                         :offset-assert 8036)
   (mid-maxx                uint8                         :offset-assert 8037)
   (mid-minz                uint8                         :offset-assert 8038)
   (mid-maxz                uint8                         :offset-assert 8039)
   (near-minx               uint8                         :offset-assert 8040)
   (near-maxx               uint8                         :offset-assert 8041)
   (near-minz               uint8                         :offset-assert 8042)
   (near-maxz               uint8                         :offset-assert 8043)
   (temp-minx               uint8                         :offset-assert 8044)
   (temp-maxx               uint8                         :offset-assert 8045)
   (temp-minz               uint8                         :offset-assert 8046)
   (temp-maxz               uint8                         :offset-assert 8047)
   (tex1                    gs-tex1                       :offset-assert 8048)
   (tex1-near               gs-tex1                       :offset-assert 8056)
   (corner00                float                         :offset-assert 8064)
   (corner01                float                         :offset-assert 8068)
   (corner10                float                         :offset-assert 8072)
   (corner11                float                         :offset-assert 8076)
   (frame-num               float                         :offset-assert 8080)
   (frame-speed             float                         :offset-assert 8084)
   (frame-num2              float                         :offset-assert 8088)
   (frame-speed2            float                         :offset-assert 8092)
   (cloud-interp            float                         :offset        3676)
   (scales                  vector             :inline    :offset-assert 8096)
   (mask-hi                 vector4w           :inline    :offset-assert 8112)
   (mask-lo                 vector4w           :inline    :offset-assert 8128)
   (lights                  vu-lights          :inline    :offset-assert 8144)
   (uv-scroll-0             vector4w           :inline    :offset-assert 8256)
   (uv-scroll-1             vector4w           :inline    :offset-assert 8272)
   (st-scroll               vector2            :inline    :offset-assert 8288)
   (wait-to-vu0             uint32                        :offset-assert 8296)
   )
  :method-count-assert 92
  :size-assert         #x206c
  :flag-assert         #x5c0000206c
  (:methods
    (get-height (_type_ vector symbol) float 11)
    (draw! (_type_) none 12)
    (update-map (_type_) none 13)
    (interp-wave (_type_ ocean-wave-info uint float) none 14)
    (ocean-method-15 (_type_ matrix matrix) none 15)
    (generate-verts (_type_ ocean-vert-array ocean-height-array) none 16)
    (add-colors! (_type_ vector ocean-vertex) none 17)
    (ocean-method-18 (_type_ (pointer ocean-colors) (pointer ocean-colors)) none 18)
    (init-buffer! (_type_ dma-buffer) none 19)
    (end-buffer! (_type_ dma-buffer) none 20)
    (set-corners! (_type_ float float) float 21)
    (ocean-near-add-call (_type_ dma-buffer int) none 22)
    (ocean-near-add-call-flush (_type_ dma-buffer int) none 23)
    (ocean-near-setup-constants (_type_ ocean-near-constants) none 24)
    (ocean-near-add-constants (_type_ dma-buffer) none 25)
    (ocean-near-add-heights (_type_ dma-buffer) none 26)
    (ocean-near-add-matrices (_type_ dma-buffer vector) none 27)
    (ocean-near-add-upload (_type_ dma-buffer uint uint) none 28)
    (draw-ocean-near (_type_ dma-buffer) none 29)
    (ocean-trans-camera-masks-bit? (_type_ uint uint) symbol 30)
    (ocean-trans-mask-ptrs-bit? (_type_ int int) symbol 31)
    (ocean-trans-mask-ptrs-set! (_type_ uint uint) symbol 32)
    (ocean-trans-add-upload-table (_type_ dma-buffer uint uint int int symbol) none 33)
    (ocean-trans-add-upload-strip (_type_ dma-buffer uint uint int int int) none 34)
    (ocean-transition-check (_type_ ocean-trans-mask int int vector) none 35)
    (ocean-make-trans-camera-masks (_type_ uint uint uint uint) none 36)
    (ocean-trans-add-upload (_type_ dma-buffer uint uint) none 37)
    (draw-ocean-transition-seams (_type_ dma-buffer) none 38)
    (ocean-trans-add-constants (_type_ dma-buffer) none 39)
    (draw-ocean-transition (_type_ dma-buffer) none 40)
    (ocean-mid-add-call (_type_ dma-buffer int) none 41)
    (ocean-mid-add-call-flush (_type_ dma-buffer uint) none 42)
    (ocean-matrix*! (_type_ matrix matrix matrix) matrix 43)
    (ocean-vector-matrix*! (_type_ vector vector matrix) vector 44)
    (ocean-mid-add-matrices (_type_ dma-buffer vector) none 45)
    (ocean-mid-check (_type_ pointer int int vector) symbol 46)
    (ocean-mid-setup-constants (_type_ ocean-mid-constants) none 47)
    (ocean-mid-add-constants (_type_ dma-buffer) none 48)
    (ocean-mid-camera-masks-bit? (_type_ uint uint) symbol 49)
    (ocean-mid-mask-ptrs-bit? (_type_ uint uint) symbol 50)
    (ocean-mid-camera-masks-set! (_type_ uint uint) symbol 51)
    (ocean-mid-add-upload (_type_ dma-buffer int int int int float) none 52)
    (ocean-mid-add-upload-table (_type_ dma-buffer uint uint (pointer float) int symbol) none 53)
    (ocean-mid-add-upload-top (_type_ dma-buffer uint uint) none 54)
    (ocean-mid-add-upload-middle (_type_ dma-buffer uint uint) none 55)
    (ocean-mid-add-upload-bottom (_type_ dma-buffer uint uint) none 56)
    (ocean-seams-add-constants (_type_ dma-buffer) none 57)
    (draw-ocean-mid-seams (_type_ dma-buffer) none 58)
    (draw-ocean-mid (_type_ dma-buffer) none 59)
    (ocean-method-60 (_type_ dma-buffer) none 60)
    (ocean-method-61 (_type_ dma-buffer) none 61)
    (ocean-method-62 (_type_ dma-buffer) none 62)
    (ocean-method-63 (_type_ dma-buffer) none 63)
    (ocean-method-64 (_type_ dma-buffer) none 64)
    (ocean-method-65 (_type_ dma-buffer) none 65)
    (ocean-method-66 (_type_ dma-buffer) none 66)
    (ocean-method-67 (_type_ dma-buffer) none 67)
    (render-ocean-far (_type_ dma-buffer int) none 68)
    (draw-ocean-far (_type_ dma-buffer) none 69)
    (ocean-texture-setup-constants (_type_ ocean-texture-constants) none 70)
    (ocean-texture-add-constants (_type_ dma-buffer) none 71)
    (ocean-texture-add-envmap (_type_ dma-buffer) none 72)
    (ocean-texture-add-verts (_type_ dma-buffer int) none 73)
    (ocean-texture-add-verts-last (_type_ dma-buffer int int) none 74)
    (ocean-texture-add-call-start (_type_ dma-buffer) none 75)
    (ocean-texture-add-call-rest (_type_ dma-buffer) none 76)
    (ocean-texture-add-call-done (_type_ dma-buffer) none 77)
    (draw-ocean-texture (_type_ dma-buffer int) none 78)
    (ocean-method-79 (_type_ dma-buffer) none 79)
    (ocean-method-80 (_type_ (pointer rgba)) none 80)
    (ocean-method-81 (_type_ dma-buffer) int 81)
    (draw-envmap-debug (_type_ dma-buffer) none 82)
    (ocean-method-83 (_type_ dma-buffer float) none 83)
    (ocean-method-84 (_type_ dma-buffer sky-upload-data vector4w float) none 84)
    (ocean-method-85 (_type_ dma-buffer) none 85)
    (ocean-method-86 (_type_ vector vector vector vector) none 86)
    (ocean-method-87 (_type_ vector vector vector) none 87)
    (ocean-method-88 (_type_ dma-buffer) none 88)
    (ocean-method-89 (_type_ dma-buffer) none 89)
    (rgba-to-vector! (_type_ vector (pointer rgba)) none 90)
    (do-tex-scroll! (_type_) none 91)
    )
  )

;; definition for method 3 of type ocean
(defmethod inspect ocean ((this ocean))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ocean)
  (format #t "~1Tstart-corner: #<vector @ #x~X>~%" (-> this start-corner))
  (format #t "~1Tfar-color: #<vector @ #x~X>~%" (-> this far-color))
  (format #t "~1Tocean-spheres: #<ocean-spheres @ #x~X>~%" (-> this ocean-spheres))
  (format #t "~1Tocean-colors: #<ocean-colors @ #x~X>~%" (-> this ocean-colors))
  (format #t "~1Tocean-mid-indices: ~A~%" (-> this ocean-mid-indices))
  (format #t "~1Tocean-trans-indices: ~A~%" (-> this ocean-trans-indices))
  (format #t "~1Tocean-near-indices: ~A~%" (-> this ocean-near-indices))
  (format #t "~1Tocean-mid-masks: ~A~%" (-> this ocean-mid-masks))
  (format #t "~1Toff: ~A~%" (-> this off))
  (format #t "~1Tnear-off: ~A~%" (-> this near-off))
  (format #t "~1Tmid-off: ~A~%" (-> this mid-off))
  (format #t "~1Tfar-on: ~A~%" (-> this far-on))
  (format #t "~1Tocean-facing: ~D~%" (-> this ocean-facing))
  (format #t "~1Theights: #<ocean-height-array @ #x~X>~%" (-> this heights))
  (format #t "~1Theights2: #<ocean-height-array @ #x~X>~%" (-> this heights2))
  (format #t "~1Tverts: #<ocean-vert-array @ #x~X>~%" (-> this verts))
  (format #t "~1Tocean-near-translucent?: ~A~%" (-> this ocean-near-translucent?))
  (format #t "~1Tdeltas: #<vector @ #x~X>~%" (-> this deltas))
  (format #t "~1Tmap-min: #<vector @ #x~X>~%" (-> this map-min))
  (format #t "~1Tmap-max: #<vector @ #x~X>~%" (-> this map-max))
  (format #t "~1Tinterp: #<vector @ #x~X>~%" (-> this interp))
  (format #t "~1Tcorner-array[25] @ #x~X~%" (-> this corner-array))
  (format #t "~1Tcorner-count: ~D~%" (-> this corner-count))
  (format #t "~1Ttemp-vecs[4] @ #x~X~%" (-> this temp-vecs))
  (format #t "~1Tmid-mask-ptrs[36] @ #x~X~%" (-> this mid-mask-ptrs))
  (format #t "~1Tmid-camera-masks[36] @ #x~X~%" (-> this mid-camera-masks))
  (format #t "~1Ttrans-mask-ptrs[64] @ #x~X~%" (-> this trans-mask-ptrs))
  (format #t "~1Ttrans-camera-masks[16] @ #x~X~%" (-> this trans-camera-masks))
  (format #t "~1Ttrans-temp-masks[16] @ #x~X~%" (-> this trans-temp-masks))
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl))
  (format #t "~1Tsprite-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl2))
  (format #t "~1Tsprite-tmpl3: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl3))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tline-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this line-tmpl))
  (format #t "~1Tsun-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sun-tmpl))
  (format #t "~1Terase-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this erase-tmpl))
  (format #t "~1Thaze-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this haze-tmpl))
  (format #t "~1Tcloud-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this cloud-tmpl))
  (format #t "~1Tclut-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this clut-tmpl))
  (format #t "~1Tcloud-lights: #<cloud-lights @ #x~X>~%" (-> this cloud-lights))
  (format #t "~1Thaze-lights: #<haze-lights @ #x~X>~%" (-> this haze-lights))
  (format #t "~1Tconstant: #<vector @ #x~X>~%" (-> this constant))
  (format #t "~1Tsky-color: #<vector @ #x~X>~%" (-> this sky-color))
  (format #t "~1Thaze-verts[32] @ #x~X~%" (-> this haze-verts))
  (format #t "~1Tcloud-verts[36] @ #x~X~%" (-> this cloud-verts))
  (format #t "~1Tcloud-nrms[36] @ #x~X~%" (-> this cloud-nrms))
  (format #t "~1Tcloud-col0[36] @ #x~X~%" (-> this cloud-col0))
  (format #t "~1Tcloud-col1[36] @ #x~X~%" (-> this cloud-col1))
  (format #t "~1Tcloud-st0[36] @ #x~X~%" (-> this cloud-st0))
  (format #t "~1Tcloud-st1[36] @ #x~X~%" (-> this cloud-st1))
  (format #t "~1Tcolor80808080: #<vector4w @ #x~X>~%" (-> this color80808080))
  (format #t "~1Tcolor80808040: #<vector4w @ #x~X>~%" (-> this color80808040))
  (format #t "~1Tcolor80808000: #<vector4w @ #x~X>~%" (-> this color80808000))
  (format #t "~1Tst0000: #<vector @ #x~X>~%" (-> this st0000))
  (format #t "~1Tst0505: #<vector @ #x~X>~%" (-> this st0505))
  (format #t "~1Tst1010: #<vector @ #x~X>~%" (-> this st1010))
  (format #t "~1Tuv00: #<vector4w @ #x~X>~%" (-> this uv00))
  (format #t "~1Tuv44: #<vector4w @ #x~X>~%" (-> this uv44))
  (format #t "~1Tuv88: #<vector4w @ #x~X>~%" (-> this uv88))
  (format #t "~1Tuv1010: #<vector4w @ #x~X>~%" (-> this uv1010))
  (format #t "~1Tuv2020: #<vector4w @ #x~X>~%" (-> this uv2020))
  (format #t "~1Tuv4040: #<vector4w @ #x~X>~%" (-> this uv4040))
  (format #t "~1Tuv8080: #<vector4w @ #x~X>~%" (-> this uv8080))
  (format #t "~1Txy00: #<vector4w @ #x~X>~%" (-> this xy00))
  (format #t "~1Txy88: #<vector4w @ #x~X>~%" (-> this xy88))
  (format #t "~1Txy1010: #<vector4w @ #x~X>~%" (-> this xy1010))
  (format #t "~1Txy2020: #<vector4w @ #x~X>~%" (-> this xy2020))
  (format #t "~1Txy4040: #<vector4w @ #x~X>~%" (-> this xy4040))
  (format #t "~1Txy8080: #<vector4w @ #x~X>~%" (-> this xy8080))
  (format #t "~1Tcloud-alpha[36] @ #x~X~%" (-> this cloud-alpha))
  (format #t "~1Tnear-mask-indices[16] @ #x~X~%" (-> this near-mask-indices))
  (format #t "~1Tmid-minx: ~D~%" (-> this mid-minx))
  (format #t "~1Tmid-maxx: ~D~%" (-> this mid-maxx))
  (format #t "~1Tmid-minz: ~D~%" (-> this mid-minz))
  (format #t "~1Tmid-maxz: ~D~%" (-> this mid-maxz))
  (format #t "~1Tnear-minx: ~D~%" (-> this near-minx))
  (format #t "~1Tnear-maxx: ~D~%" (-> this near-maxx))
  (format #t "~1Tnear-minz: ~D~%" (-> this near-minz))
  (format #t "~1Tnear-maxz: ~D~%" (-> this near-maxz))
  (format #t "~1Ttemp-minx: ~D~%" (-> this temp-minx))
  (format #t "~1Ttemp-maxx: ~D~%" (-> this temp-maxx))
  (format #t "~1Ttemp-minz: ~D~%" (-> this temp-minz))
  (format #t "~1Ttemp-maxz: ~D~%" (-> this temp-maxz))
  (format #t "~1Ttex1: ~D~%" (-> this tex1))
  (format #t "~1Ttex1-near: ~D~%" (-> this tex1-near))
  (format #t "~1Tcorner00: ~f~%" (-> this corner00))
  (format #t "~1Tcorner01: ~f~%" (-> this corner01))
  (format #t "~1Tcorner10: ~f~%" (-> this corner10))
  (format #t "~1Tcorner11: ~f~%" (-> this corner11))
  (format #t "~1Tframe-num: ~f~%" (-> this frame-num))
  (format #t "~1Tframe-speed: ~f~%" (-> this frame-speed))
  (format #t "~1Tframe-num2: ~f~%" (-> this frame-num2))
  (format #t "~1Tframe-speed2: ~f~%" (-> this frame-speed2))
  (format #t "~1Tcloud-interp: ~f~%" (-> this constant w))
  (format #t "~1Tscales: #<vector @ #x~X>~%" (-> this scales))
  (format #t "~1Tmask-hi: #<vector4w @ #x~X>~%" (-> this mask-hi))
  (format #t "~1Tmask-lo: #<vector4w @ #x~X>~%" (-> this mask-lo))
  (format #t "~1Tlights: #<vu-lights @ #x~X>~%" (-> this lights))
  (format #t "~1Tuv-scroll-0: #<vector4w @ #x~X>~%" (-> this uv-scroll-0))
  (format #t "~1Tuv-scroll-1: #<vector4w @ #x~X>~%" (-> this uv-scroll-1))
  (format #t "~1Tst-scroll: #<vector2 @ #x~X>~%" (-> this st-scroll))
  (format #t "~1Twait-to-vu0: ~D~%" (-> this wait-to-vu0))
  (label cfg-4)
  this
  )

;; definition for symbol *ocean-map*, type ocean-map
(define *ocean-map* (the-as ocean-map #f))

;; definition for symbol *ocean*, type ocean
(define *ocean*
  (new 'static 'ocean
    :sprite-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x1
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type sprite) :tme #x1 :fst #x1)
        :nreg #x5
        )
      :gif1 (new 'static 'gif-tag-regs
        :regs0 (gif-reg-id rgbaq)
        :regs1 (gif-reg-id uv)
        :regs2 (gif-reg-id xyz2)
        :regs3 (gif-reg-id uv)
        :regs4 (gif-reg-id xyz2)
        )
      )
    :sprite-tmpl2 (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x1
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type sprite) :abe #x1)
        :nreg #x3
        )
      :gif1 (new 'static 'gif-tag-regs :regs0 (gif-reg-id rgbaq) :regs1 (gif-reg-id xyz2) :regs2 (gif-reg-id xyz2))
      )
    :sprite-tmpl3 (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x1
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type sprite) :tme #x1 :abe #x1 :fst #x1)
        :nreg #x5
        )
      :gif1 (new 'static 'gif-tag-regs
        :regs0 (gif-reg-id rgbaq)
        :regs1 (gif-reg-id uv)
        :regs2 (gif-reg-id xyz2)
        :regs3 (gif-reg-id uv)
        :regs4 (gif-reg-id xyz2)
        )
      )
    :adgif-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64 :nloop #x5 :eop #x1 :nreg #x1)
      :gif1 (new 'static 'gif-tag-regs :regs0 (gif-reg-id a+d))
      )
    :line-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x141 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x141 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x40
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type line) :tme #x1)
        :nreg #x5
        )
      :gif1 (new 'static 'gif-tag-regs
        :regs0 (gif-reg-id rgbaq)
        :regs1 (gif-reg-id st)
        :regs2 (gif-reg-id xyz2)
        :regs3 (gif-reg-id st)
        :regs4 (gif-reg-id xyz2)
        )
      )
    :sun-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x6 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x6 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x1
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type sprite) :tme #x1 :abe #x1)
        :nreg #x5
        )
      :gif1 (new 'static 'gif-tag-regs
        :regs0 (gif-reg-id rgbaq)
        :regs1 (gif-reg-id st)
        :regs2 (gif-reg-id xyz2)
        :regs3 (gif-reg-id st)
        :regs4 (gif-reg-id xyz2)
        )
      )
    :erase-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x4 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x4 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x1
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type sprite))
        :nreg #x3
        )
      :gif1 (new 'static 'gif-tag-regs :regs0 (gif-reg-id rgbaq) :regs1 (gif-reg-id xyz2) :regs2 (gif-reg-id xyz2))
      )
    :haze-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x45 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x45 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x11
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type tri-strip) :iip #x1 :abe #x1)
        :nreg #x4
        )
      :gif1 (new 'static 'gif-tag-regs
        :regs0 (gif-reg-id rgbaq)
        :regs1 (gif-reg-id xyzf2)
        :regs2 (gif-reg-id rgbaq)
        :regs3 (gif-reg-id xyzf2)
        )
      )
    :cloud-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x25 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x25 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64
        :nloop #x6
        :eop #x1
        :pre #x1
        :prim (new 'static 'gs-prim :prim (gs-prim-type tri-strip) :iip #x1 :tme #x1 :abe #x1)
        :nreg #x6
        )
      :gif1 (new 'static 'gif-tag-regs
        :regs0 (gif-reg-id rgbaq)
        :regs1 (gif-reg-id st)
        :regs2 (gif-reg-id xyzf2)
        :regs3 (gif-reg-id rgbaq)
        :regs4 (gif-reg-id st)
        :regs5 (gif-reg-id xyzf2)
        )
      )
    :clut-tmpl (new 'static 'dma-gif-packet
      :dma-vif (new 'static 'dma-packet
        :dma (new 'static 'dma-tag :qwc #x41 :id (dma-tag-id cnt))
        :vif1 (new 'static 'vif-tag :imm #x41 :cmd (vif-cmd direct) :msk #x1)
        )
      :gif0 (new 'static 'gif-tag64 :nloop #x40 :eop #x1 :flg (gif-flag image))
      )
    :constant (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
    :haze-verts (new 'static 'inline-array vector4w 32
      (new 'static 'vector4w :x #x400 :y #x5c0 :z #xffffff)
      (new 'static 'vector4w :x #x400 :y #x600 :z #xffffff)
      (new 'static 'vector4w :x #x4a0 :y #x590 :z #xffffff)
      (new 'static 'vector4w :x #x4c0 :y #x5e0 :z #xffffff)
      (new 'static 'vector4w :x #x530 :y #x530 :z #xffffff)
      (new 'static 'vector4w :x #x560 :y #x560 :z #xffffff)
      (new 'static 'vector4w :x #x590 :y #x4a0 :z #xffffff)
      (new 'static 'vector4w :x #x5e0 :y #x4c0 :z #xffffff)
      (new 'static 'vector4w :x #x5c0 :y #x3f0 :z #xffffff)
      (new 'static 'vector4w :x #x600 :y #x3f0 :z #xffffff)
      (new 'static 'vector4w :x #x590 :y #x350 :z #xffffff)
      (new 'static 'vector4w :x #x5e0 :y #x330 :z #xffffff)
      (new 'static 'vector4w :x #x530 :y #x2c0 :z #xffffff)
      (new 'static 'vector4w :x #x560 :y #x290 :z #xffffff)
      (new 'static 'vector4w :x #x4a0 :y #x260 :z #xffffff)
      (new 'static 'vector4w :x #x4c0 :y #x210 :z #xffffff)
      (new 'static 'vector4w :x #x3f0 :y #x240 :z #xffffff)
      (new 'static 'vector4w :x #x3f0 :y #x1f0 :z #xffffff)
      (new 'static 'vector4w :x #x350 :y #x260 :z #xffffff)
      (new 'static 'vector4w :x #x330 :y #x210 :z #xffffff)
      (new 'static 'vector4w :x #x2c0 :y #x2c0 :z #xffffff)
      (new 'static 'vector4w :x #x290 :y #x290 :z #xffffff)
      (new 'static 'vector4w :x #x260 :y #x350 :z #xffffff)
      (new 'static 'vector4w :x #x210 :y #x330 :z #xffffff)
      (new 'static 'vector4w :x #x240 :y #x400 :z #xffffff)
      (new 'static 'vector4w :x #x1f0 :y #x400 :z #xffffff)
      (new 'static 'vector4w :x #x260 :y #x4a0 :z #xffffff)
      (new 'static 'vector4w :x #x210 :y #x4c0 :z #xffffff)
      (new 'static 'vector4w :x #x2c0 :y #x530 :z #xffffff)
      (new 'static 'vector4w :x #x290 :y #x560 :z #xffffff)
      (new 'static 'vector4w :x #x350 :y #x590 :z #xffffff)
      (new 'static 'vector4w :x #x330 :y #x5e0 :z #xffffff)
      )
    :cloud-verts (new 'static 'inline-array vector4w 36
      (new 'static 'vector4w :x #x290 :y #x290 :z #xffffff)
      (new 'static 'vector4w :x #x310 :y #x230 :z #xffffff)
      (new 'static 'vector4w :x #x3a0 :y #x200 :z #xffffff)
      (new 'static 'vector4w :x #x450 :y #x200 :z #xffffff)
      (new 'static 'vector4w :x #x4e0 :y #x230 :z #xffffff)
      (new 'static 'vector4w :x #x560 :y #x290 :z #xffffff)
      (new 'static 'vector4w :x #x230 :y #x310 :z #xffffff)
      (new 'static 'vector4w :x #x300 :y #x300 :z #xffffff)
      (new 'static 'vector4w :x #x3a0 :y #x2b0 :z #xffffff)
      (new 'static 'vector4w :x #x450 :y #x2b0 :z #xffffff)
      (new 'static 'vector4w :x #x4f0 :y #x300 :z #xffffff)
      (new 'static 'vector4w :x #x5c0 :y #x310 :z #xffffff)
      (new 'static 'vector4w :x #x200 :y #x3a0 :z #xffffff)
      (new 'static 'vector4w :x #x2b0 :y #x3a0 :z #xffffff)
      (new 'static 'vector4w :x #x380 :y #x380 :z #xffffff)
      (new 'static 'vector4w :x #x470 :y #x380 :z #xffffff)
      (new 'static 'vector4w :x #x540 :y #x3a0 :z #xffffff)
      (new 'static 'vector4w :x #x5f0 :y #x3a0 :z #xffffff)
      (new 'static 'vector4w :x #x200 :y #x450 :z #xffffff)
      (new 'static 'vector4w :x #x2b0 :y #x450 :z #xffffff)
      (new 'static 'vector4w :x #x380 :y #x470 :z #xffffff)
      (new 'static 'vector4w :x #x470 :y #x470 :z #xffffff)
      (new 'static 'vector4w :x #x540 :y #x450 :z #xffffff)
      (new 'static 'vector4w :x #x5f0 :y #x450 :z #xffffff)
      (new 'static 'vector4w :x #x230 :y #x4e0 :z #xffffff)
      (new 'static 'vector4w :x #x300 :y #x4f0 :z #xffffff)
      (new 'static 'vector4w :x #x3a0 :y #x540 :z #xffffff)
      (new 'static 'vector4w :x #x450 :y #x540 :z #xffffff)
      (new 'static 'vector4w :x #x4f0 :y #x4f0 :z #xffffff)
      (new 'static 'vector4w :x #x5c0 :y #x4e0 :z #xffffff)
      (new 'static 'vector4w :x #x290 :y #x560 :z #xffffff)
      (new 'static 'vector4w :x #x310 :y #x5c0 :z #xffffff)
      (new 'static 'vector4w :x #x3a0 :y #x5f0 :z #xffffff)
      (new 'static 'vector4w :x #x450 :y #x5f0 :z #xffffff)
      (new 'static 'vector4w :x #x4e0 :y #x5c0 :z #xffffff)
      (new 'static 'vector4w :x #x560 :y #x560 :z #xffffff)
      )
    :cloud-nrms (new 'static 'inline-array vector 36
      (new 'static 'vector :x -0.4999 :y 0.7071 :z -0.5)
      (new 'static 'vector :x -0.3209 :y 0.7071 :z -0.63)
      (new 'static 'vector :x -0.1105 :y 0.7071 :z -0.6984)
      (new 'static 'vector :x 0.1105 :y 0.7071 :z -0.6983)
      (new 'static 'vector :x 0.321 :y 0.7071 :z -0.63)
      (new 'static 'vector :x 0.5 :y 0.7071 :z -0.4999)
      (new 'static 'vector :x -0.63 :y 0.7071 :z -0.321)
      (new 'static 'vector :x -0.3921 :y 0.832 :z -0.3922)
      (new 'static 'vector :x -0.1434 :y 0.832 :z -0.5358)
      (new 'static 'vector :x 0.1435 :y 0.832 :z -0.5357)
      (new 'static 'vector :x 0.3922 :y 0.832 :z -0.3921)
      (new 'static 'vector :x 0.63 :y 0.7071 :z -0.3209)
      (new 'static 'vector :x -0.6983 :y 0.7071 :z -0.1106)
      (new 'static 'vector :x -0.5357 :y 0.832 :z -0.1435)
      (new 'static 'vector :x -0.334 :y 0.8814 :z -0.334)
      (new 'static 'vector :x 0.334 :y 0.8814 :z -0.334)
      (new 'static 'vector :x 0.5358 :y 0.832 :z -0.1434)
      (new 'static 'vector :x 0.6984 :y 0.7071 :z -0.1105)
      (new 'static 'vector :x -0.6984 :y 0.7071 :z 0.1105)
      (new 'static 'vector :x -0.5358 :y 0.832 :z 0.1435)
      (new 'static 'vector :x -0.334 :y 0.8814 :z 0.334)
      (new 'static 'vector :x 0.334 :y 0.8814 :z 0.334)
      (new 'static 'vector :x 0.5357 :y 0.832 :z 0.1435)
      (new 'static 'vector :x 0.6983 :y 0.7071 :z 0.1105)
      (new 'static 'vector :x -0.63 :y 0.7071 :z 0.321)
      (new 'static 'vector :x -0.3922 :y 0.832 :z 0.3921)
      (new 'static 'vector :x -0.1435 :y 0.832 :z 0.5357)
      (new 'static 'vector :x 0.1435 :y 0.832 :z 0.5358)
      (new 'static 'vector :x 0.3922 :y 0.832 :z 0.3922)
      (new 'static 'vector :x 0.63 :y 0.7071 :z 0.321)
      (new 'static 'vector :x -0.5 :y 0.7071 :z 0.4999)
      (new 'static 'vector :x -0.321 :y 0.7071 :z 0.63)
      (new 'static 'vector :x -0.1106 :y 0.7071 :z 0.6983)
      (new 'static 'vector :x 0.1105 :y 0.7071 :z 0.6984)
      (new 'static 'vector :x 0.321 :y 0.7071 :z 0.63)
      (new 'static 'vector :x 0.4999 :y 0.7071 :z 0.5)
      )
    :color80808080 (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w #x80)
    :color80808040 (new 'static 'vector4w :x #x80 :y #x80 :z #x80 :w 64)
    :color80808000 (new 'static 'vector4w :x #x80 :y #x80 :z #x80)
    :st0000 (new 'static 'vector :z 1.0)
    :st0505 (new 'static 'vector :x 0.5 :y 0.5 :z 1.0)
    :st1010 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
    :uv44 (new 'static 'vector4w :x 64 :y 64)
    :uv88 (new 'static 'vector4w :x #x80 :y #x80)
    :uv1010 (new 'static 'vector4w :x #x100 :y #x100)
    :uv2020 (new 'static 'vector4w :x #x200 :y #x200)
    :uv4040 (new 'static 'vector4w :x #x400 :y #x400)
    :uv8080 (new 'static 'vector4w :x #x800 :y #x800)
    :xy00 (new 'static 'vector4w :z #xffffff)
    :xy88 (new 'static 'vector4w :x #x80 :y #x80 :z #xffffff)
    :xy1010 (new 'static 'vector4w :x #x100 :y #x100 :z #xffffff)
    :xy2020 (new 'static 'vector4w :x #x200 :y #x200 :z #xffffff)
    :xy4040 (new 'static 'vector4w :x #x400 :y #x400 :z #xffffff)
    :xy8080 (new 'static 'vector4w :x #x800 :y #x800 :z #xffffff)
    :cloud-alpha (new 'static 'array uint8 36
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      #x80
      )
    :tex1 (new 'static 'gs-tex1 :mxl #x6 :mmag #x1 :mmin #x5 :l #x1 :k #xeed)
    :tex1-near (new 'static 'gs-tex1 :mxl #x3 :mmag #x1 :mmin #x5 :l #x1 :k #xeed)
    :scales (new 'static 'vector :x -0.00012207031 :y 255.0 :z -0.00012207031 :w 128.0)
    :mask-hi (new 'static 'vector4w :x -65536 :y -65536 :z -65536 :w -65536)
    :mask-lo (new 'static 'vector4w :x #xffff :y #xffff :z #xffff :w #xffff)
    )
  )

;; failed to figure out what this is:
0
