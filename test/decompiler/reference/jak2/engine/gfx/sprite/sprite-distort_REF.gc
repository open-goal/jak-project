;;-*-Lisp-*-
(in-package goal)

;; definition of type sprite-distorter-sine-tables
(deftype sprite-distorter-sine-tables (basic)
  ((aspx    float)
   (aspy    float)
   (entry   vector      128 :inline)
   (ientry  qword       9 :inline)
   (giftag  gs-gif-tag  :inline)
   (color   qword       :inline)
   )
  )

;; definition for method 3 of type sprite-distorter-sine-tables
(defmethod inspect ((this sprite-distorter-sine-tables))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Taspx: ~f~%" (-> this aspx))
  (format #t "~1Taspy: ~f~%" (-> this aspy))
  (format #t "~1Tentry[128] @ #x~X~%" (-> this entry))
  (format #t "~1Tientry[9] @ #x~X~%" (-> this ientry))
  (format #t "~1Tgiftag: #<qword @ #x~X>~%" (-> this giftag))
  (format #t "~1Tcolor: #<qword @ #x~X>~%" (-> this color))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(kmemopen global "sprite-distort-tables")

;; definition for symbol *sprite-distorter-sine-tables*, type sprite-distorter-sine-tables
(define *sprite-distorter-sine-tables* (new 'global 'sprite-distorter-sine-tables))

;; failed to figure out what this is:
(kmemclose)

;; definition for function sprite-distorter-generate-tables
;; WARN: Return type mismatch int vs none.
(defun sprite-distorter-generate-tables ()
  (let ((tbls *sprite-distorter-sine-tables*))
    (let ((entry-idx 0)
          (ientry-idx 0)
          (turns 3)
          (cam-aspx (- (-> *math-camera* perspective vector 0 x)))
          (cam-aspy (- (-> *math-camera* perspective vector 1 y)))
          )
      (when (or (!= cam-aspx (-> tbls aspx)) (!= cam-aspy (-> tbls aspy)))
        (set! (-> tbls aspx) cam-aspx)
        (set! (-> tbls aspy) cam-aspy)
        (while (< turns 12)
          (set! (-> tbls ientry ientry-idx vector4w x) (+ entry-idx 352))
          (+! ientry-idx 1)
          (dotimes (turn turns)
            (let ((rot (* 65536.0 (/ (the float turn) (the float turns)))))
              (set-vector! (-> tbls entry entry-idx) (* (sin rot) cam-aspx) (* (cos rot) cam-aspy) 0.0 0.0)
              (let ((s3-1 (+ entry-idx 1)))
                (set-vector!
                  (-> tbls entry s3-1)
                  (* 0.001953125 cam-aspx (sin rot))
                  (* 0.001953125 cam-aspy (cos rot))
                  0.0
                  0.0
                  )
                (set! entry-idx (+ s3-1 1))
                )
              )
            )
          (+! turns 1)
          )
        (set-vector! (-> tbls entry entry-idx) 0.0 cam-aspy 0.0 0.0)
        (let ((v1-20 (+ entry-idx 1)))
          (set-vector! (-> tbls entry v1-20) 0.0 (* 0.001953125 cam-aspy) 0.0 0.0)
          (+ v1-20 1)
          )
        )
      )
    (set! (-> tbls giftag tag) (new 'static 'gif-tag64
                                 :nloop #x1
                                 :eop #x1
                                 :pre #x1
                                 :prim (new 'static 'gs-prim :prim (gs-prim-type tri-strip) :tme #x1)
                                 :nreg #xf
                                 )
          )
    (set! (-> tbls giftag regs) (new 'static 'gif-tag-regs
                                  :regs0 (gif-reg-id st)
                                  :regs1 (gif-reg-id rgbaq)
                                  :regs2 (gif-reg-id xyzf2)
                                  :regs3 (gif-reg-id st)
                                  :regs4 (gif-reg-id rgbaq)
                                  :regs5 (gif-reg-id xyzf2)
                                  :regs6 (gif-reg-id st)
                                  :regs7 (gif-reg-id rgbaq)
                                  :regs8 (gif-reg-id xyzf2)
                                  :regs9 (gif-reg-id st)
                                  :regs10 (gif-reg-id rgbaq)
                                  :regs11 (gif-reg-id xyzf2)
                                  :regs12 (gif-reg-id st)
                                  :regs13 (gif-reg-id rgbaq)
                                  :regs14 (gif-reg-id xyzf2)
                                  )
          )
    (set! (-> tbls color vector4w x) 128)
    (set! (-> tbls color vector4w y) 128)
    (set! (-> tbls color vector4w z) 128)
    (set! (-> tbls color vector4w w) 128)
    )
  0
  (none)
  )

;; definition for symbol sprite-distort-vu1-block, type vu-function
(define sprite-distort-vu1-block (new 'static 'vu-function :length 63 :qlength 32))

;; definition for function sprite-init-distorter
;; WARN: Return type mismatch int vs none.
(defun sprite-init-distorter ((dma-buff dma-buffer))
  (dma-buffer-add-gs-set dma-buff
                         (zbuf-1 (new 'static 'gs-zbuf :zbp #x130 :psm (gs-psm ct24) :zmsk #x1))
                         (tex0-1 (new 'static 'gs-tex0 :tbp0 #x3300 :tbw #x8 :tw #x9 :th #x9))
                         (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
                         (miptbp1-1 (new 'static 'gs-miptbp))
                         (clamp-1 (new 'static 'gs-clamp
                                    :wms (gs-tex-wrap-mode region-clamp)
                                    :wmt (gs-tex-wrap-mode region-clamp)
                                    :maxu #x1ff
                                    :maxv #x19f
                                    )
                                  )
                         (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
                         )
  (let* ((v1-3 dma-buff)
         (a1-6 (the-as object (-> v1-3 base)))
         )
    (set! (-> (the-as dma-packet a1-6) dma)
          (new 'static 'dma-tag
            :qwc #x8b
            :id (dma-tag-id ref)
            :addr (the-as uint (-> *sprite-distorter-sine-tables* entry))
            )
          )
    (set! (-> (the-as dma-packet a1-6) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a1-6) vif1)
          (new 'static 'vif-tag :imm #x160 :num #x8b :cmd (vif-cmd unpack-v4-32))
          )
    (set! (-> v1-3 base) (&+ (the-as pointer a1-6) 16))
    )
  (dma-buffer-add-vu-function dma-buff sprite-distort-vu1-block 1)
  0
  (none)
  )

;; definition for function sprite-draw-distorters
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; ERROR: Inline assembly instruction marked with TODO - [TODO.VCLIP]
;; ERROR: Unsupported inline assembly instruction kind - [cfc2.i v1, Clipping]
(defun sprite-draw-distorters ((dma-buff dma-buffer))
  (local-vars
    (v1-15 float)
    (v1-21 float)
    (clip-result int)
    (v1-63 float)
    (sprite sprite-vec-data-2d)
    (dma-st-flag pointer)
    (dma-color pointer)
    )
  (rlet ((acc :class vf)
         (Q :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf10 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf8 :class vf)
         (vf9 :class vf)
         )
    (init-vf0-vector)
    (.lvf vf8 (&-> *math-camera* hmge-scale quad))
    (let ((dma-chunk-start (-> dma-buff base))
          (chunk-sprite-count 0)
          (draw-sprite-count 0)
          )
      (&+! (-> dma-buff base) 16)
      (let* ((s3-0 *sprite-aux-list*)
             (num-entries (-> s3-0 entry))
             )
        (dotimes (i num-entries)
          (let ((aux-elem (-> s3-0 data i)))
            (when (= (-> aux-elem aux-type) (sprite-aux-type distort))
              (set! sprite (-> aux-elem vec-data))
              (let ((dma-position (the-as object (-> dma-buff base))))
                (set! dma-st-flag (&+ (the-as pointer dma-position) 16))
                (set! dma-color (&+ (the-as pointer dma-position) 32))
                (cond
                  ((= (the-as int (-> sprite flag-rot-sy y)) 1)
                   (.lvf vf3 (&-> *math-camera* sprite-2d quad 0))
                   (.lvf vf4 (&-> *math-camera* sprite-2d quad 1))
                   (.lvf vf5 (&-> *math-camera* sprite-2d quad 2))
                   (.lvf vf6 (&-> *math-camera* sprite-2d trans quad))
                   (.lvf vf9 (&-> *math-camera* sprite-2d-hvdf quad))
                   (.mov v1-15 vf9)
                   )
                  (else
                    (.lvf vf3 (&-> *math-camera* camera-temp quad 0))
                    (.lvf vf4 (&-> *math-camera* camera-temp quad 1))
                    (.lvf vf5 (&-> *math-camera* camera-temp quad 2))
                    (.lvf vf6 (&-> *math-camera* camera-temp trans quad))
                    (.lvf vf9 (&-> *math-camera* hvdf-off quad))
                    (.mov v1-21 vf9)
                    )
                  )
                (.lvf vf1 (&-> sprite x-y-z-sx quad))
                (.lvf vf2 (&-> sprite r-g-b-a quad))
                (.mul.w.vf acc vf6 vf0)
                (.add.mul.x.vf acc vf3 vf1 acc)
                (.add.mul.y.vf acc vf4 vf1 acc)
                (.add.mul.z.vf vf1 vf5 vf1 acc)
                (.mul.vf vf10 vf1 vf8)
                (.div.vf Q vf0 vf10 :fsf #b11 :ftf #b11)
                (TODO.VCLIP vf10 vf10)
                (b! (zero? (-> sprite flag-rot-sy x)) cfg-22 :delay (nop!))
                (.wait.vf)
                (.mul.vf vf1 vf1 Q :mask #b111)
                (.mul.vf vf2 vf2 Q :mask #b111)
                (.cfc2.i clip-result Clipping)
                (b! (logtest? clip-result 63) cfg-22 :delay (.add.vf vf1 vf1 vf9))
                (.max.x.vf vf1 vf1 vf0 :mask #b1000)
                (.svf (&-> (the-as vector dma-position) quad) vf1)
                (.svf (&-> (the-as vector dma-color) quad) vf2)
                (set! (-> (the-as vector dma-position) w) 255.0)
                (set! (-> (the-as vector dma-st-flag) x) (* 0.001953125 (+ -1792.0 (-> (the-as vector dma-position) x))))
                (set! (-> (the-as vector dma-st-flag) y) (* 0.001953125 (+ -1840.0 (-> (the-as vector dma-position) y))))
                )
              (set! (-> (the-as vector dma-st-flag) z) 1.0)
              (when (or (< (the-as int (-> sprite flag-rot-sy x)) 3) (< 11 (the-as int (-> sprite flag-rot-sy x))))
                (format 0 "Turns = ~D!!!~%" (-> sprite flag-rot-sy x))
                (set! (-> sprite flag-rot-sy x) (the-as float #xb))
                )
              (set! (-> (the-as (pointer int32) dma-st-flag) 3) (the-as int (-> sprite flag-rot-sy x)))
              (let* ((f1-4 (- (-> *math-camera* perspective vector 1 y)))
                     (f2-2 (-> (the-as vector dma-st-flag) y))
                     (f4-0 (+ f2-2 (* (-> (the-as vector dma-color) x) f1-4)))
                     (f3-0 256.0)
                     (f0-9 (-> (the-as vector dma-color) x))
                     )
                (if (< 416.0 f4-0)
                    (set! f3-0 (/ (- 416.0 f2-2) f1-4))
                    )
                (if (< 128.0 f3-0)
                    (set! f3-0 128.0)
                    )
                (when (< f3-0 f0-9)
                  (let ((v1-61 (/ f3-0 f0-9)))
                    (.mov vf1 v1-61)
                    )
                  (.mul.x.vf vf2 vf2 vf1)
                  (.svf (&-> (the-as vector dma-color) quad) vf2)
                  (.mov v1-63 vf2)
                  )
                )
              (&+! (-> dma-buff base) 48)
              (+! chunk-sprite-count 1)
              (when (= chunk-sprite-count 85)
                (let ((v1-68 (-> dma-buff base)))
                  (set! (-> dma-buff base) dma-chunk-start)
                  (let* ((a0-10 dma-buff)
                         (a1-3 (the-as object (-> a0-10 base)))
                         )
                    (set! (-> (the-as dma-packet a1-3) dma)
                          (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc (* 3 chunk-sprite-count))
                          )
                    (set! (-> (the-as dma-packet a1-3) vif0) (new 'static 'vif-tag))
                    (set! (-> (the-as dma-packet a1-3) vif1) (new 'static 'vif-tag
                                                               :cmd (vif-cmd unpack-v4-32)
                                                               :imm (shr (shl (+ (* 3 draw-sprite-count) 512) 54) 54)
                                                               :num (* 3 chunk-sprite-count)
                                                               )
                          )
                    (set! (-> a0-10 base) (&+ (the-as pointer a1-3) 16))
                    )
                  (set! (-> dma-buff base) v1-68)
                  )
                (set! chunk-sprite-count 0)
                (+! draw-sprite-count 85)
                (when (= draw-sprite-count 170)
                  (let* ((v1-71 dma-buff)
                         (a0-11 (the-as object (-> v1-71 base)))
                         )
                    (set! (-> (the-as dma-packet a0-11) dma) (new 'static 'dma-tag :qwc #x1 :id (dma-tag-id cnt)))
                    (set! (-> (the-as dma-packet a0-11) vif0) (new 'static 'vif-tag))
                    (set! (-> (the-as dma-packet a0-11) vif1)
                          (new 'static 'vif-tag :imm #x1ff :num #x1 :cmd (vif-cmd unpack-v4-32))
                          )
                    (set! (-> v1-71 base) (&+ (the-as pointer a0-11) 16))
                    )
                  (let* ((v1-72 dma-buff)
                         (a0-13 (the-as object (-> v1-72 base)))
                         )
                    (set! (-> (the-as vector4w a0-13) x) draw-sprite-count)
                    (set! (-> (the-as vector4w a0-13) y) 0)
                    (set! (-> (the-as vector4w a0-13) z) 0)
                    (set! (-> (the-as vector4w a0-13) w) 0)
                    (set! (-> v1-72 base) (&+ (the-as pointer a0-13) 16))
                    )
                  (let* ((v1-73 dma-buff)
                         (a0-15 (the-as object (-> v1-73 base)))
                         )
                    (set! (-> (the-as dma-packet a0-15) dma) (new 'static 'dma-tag :id (dma-tag-id cnt)))
                    (set! (-> (the-as dma-packet a0-15) vif0) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1))
                    (set! (-> (the-as dma-packet a0-15) vif1) (new 'static 'vif-tag :cmd (vif-cmd flush) :msk #x1))
                    (set! (-> v1-73 base) (&+ (the-as pointer a0-15) 16))
                    )
                  (set! draw-sprite-count 0)
                  )
                (set! dma-chunk-start (-> dma-buff base))
                (&+! (-> dma-buff base) 16)
                )
              )
            )
          (label cfg-22)
          0
          )
        )
      (cond
        ((zero? chunk-sprite-count)
         (set! (-> dma-buff base) dma-chunk-start)
         (nop!)
         0
         )
        (else
          (let ((v1-81 (-> dma-buff base)))
            (set! (-> dma-buff base) dma-chunk-start)
            (let* ((a0-17 dma-buff)
                   (a1-10 (the-as object (-> a0-17 base)))
                   )
              (set! (-> (the-as dma-packet a1-10) dma)
                    (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc (* 3 chunk-sprite-count))
                    )
              (set! (-> (the-as dma-packet a1-10) vif0) (new 'static 'vif-tag))
              (set! (-> (the-as dma-packet a1-10) vif1) (new 'static 'vif-tag
                                                          :cmd (vif-cmd unpack-v4-32)
                                                          :imm (shr (shl (+ (* 3 draw-sprite-count) 512) 54) 54)
                                                          :num (* 3 chunk-sprite-count)
                                                          )
                    )
              (set! (-> a0-17 base) (&+ (the-as pointer a1-10) 16))
              )
            (set! (-> dma-buff base) v1-81)
            )
          )
        )
      (let ((v1-82 (+ chunk-sprite-count draw-sprite-count)))
        (when (nonzero? v1-82)
          (let* ((a0-19 dma-buff)
                 (a1-12 (the-as object (-> a0-19 base)))
                 )
            (set! (-> (the-as dma-packet a1-12) dma) (new 'static 'dma-tag :qwc #x1 :id (dma-tag-id cnt)))
            (set! (-> (the-as dma-packet a1-12) vif0) (new 'static 'vif-tag))
            (set! (-> (the-as dma-packet a1-12) vif1)
                  (new 'static 'vif-tag :imm #x1ff :num #x1 :cmd (vif-cmd unpack-v4-32))
                  )
            (set! (-> a0-19 base) (&+ (the-as pointer a1-12) 16))
            )
          (let* ((a0-20 dma-buff)
                 (a1-14 (the-as object (-> a0-20 base)))
                 )
            (set! (-> (the-as vector4w a1-14) x) v1-82)
            (set! (-> (the-as vector4w a1-14) y) 0)
            (set! (-> (the-as vector4w a1-14) z) 0)
            (set! (-> (the-as vector4w a1-14) w) 0)
            (set! (-> a0-20 base) (&+ (the-as pointer a1-14) 16))
            )
          (let ((v1-84 (the-as object (-> dma-buff base))))
            (set! (-> (the-as dma-packet v1-84) dma) (new 'static 'dma-tag :id (dma-tag-id cnt)))
            (set! (-> (the-as dma-packet v1-84) vif0) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1))
            (set! (-> (the-as dma-packet v1-84) vif1) (new 'static 'vif-tag :cmd (vif-cmd flush) :msk #x1))
            (set! (-> dma-buff base) (&+ (the-as pointer v1-84) 16))
            )
          )
        )
      )
    0
    (none)
    )
  )
