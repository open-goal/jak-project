;;-*-Lisp-*-
(in-package goal)

;; definition of type sprite-glow-data
(deftype sprite-glow-data (structure)
  ((position   vector :inline :offset-assert   0)
   (size-x     float          :offset         12)
   (size-probe float          :offset-assert  16)
   (z-offset   float          :offset-assert  20)
   (rot-angle  float          :offset-assert  24)
   (size-y     float          :offset-assert  28)
   (color      rgbaf  :inline :offset-assert  32)
   (fade-a     float          :offset-assert  48)
   (fade-b     float          :offset-assert  52)
   (tex-id     uint32         :offset-assert  56)
   (dummy      uint32         :offset-assert  60)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (set-trans (_type_ vector) none 9)
    )
  )

;; definition for method 3 of type sprite-glow-data
(defmethod inspect sprite-glow-data ((obj sprite-glow-data))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sprite-glow-data)
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> obj position))
  (format #t "~1Tsize-x: ~f~%" (-> obj position w))
  (format #t "~1Tsize-probe: ~f~%" (-> obj size-probe))
  (format #t "~1Tz-offset: ~f~%" (-> obj z-offset))
  (format #t "~1Trot-angle: ~f~%" (-> obj rot-angle))
  (format #t "~1Tsize-y: ~f~%" (-> obj size-y))
  (format #t "~1Tcolor: #<rgbaf @ #x~X>~%" (-> obj color))
  (format #t "~1Tfade-a: ~f~%" (-> obj fade-a))
  (format #t "~1Tfade-b: ~f~%" (-> obj fade-b))
  (format #t "~1Ttex-id: ~D~%" (-> obj tex-id))
  (format #t "~1Tdummy: ~D~%" (-> obj dummy))
  (label cfg-4)
  obj
  )

;; definition for method 9 of type sprite-glow-data
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defmethod set-trans sprite-glow-data ((obj sprite-glow-data) (arg0 vector))
  (let ((f0-0 (-> obj position w)))
    (set! (-> obj position quad) (-> arg0 quad))
    (set! (-> obj position w) f0-0)
    )
  0
  (none)
  )

;; definition of type simple-sprite-system
(deftype simple-sprite-system (structure)
  ((count     int16   :offset-assert   0)
   (max-count int16   :offset-assert   2)
   (data      uint32  :offset-assert   4)
   )
  :method-count-assert 12
  :size-assert         #x8
  :flag-assert         #xc00000008
  (:methods
    (add! () none 9)
    (simple-sprite-system-method-10 (_type_ dma-buffer) none 10)
    (clear! (_type_) none 11)
    )
  )

;; definition for method 3 of type simple-sprite-system
(defmethod inspect simple-sprite-system ((obj simple-sprite-system))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'simple-sprite-system)
  (format #t "~1Tcount: ~D~%" (-> obj count))
  (format #t "~1Tmax-count: ~D~%" (-> obj max-count))
  (format #t "~1Tdata: #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
