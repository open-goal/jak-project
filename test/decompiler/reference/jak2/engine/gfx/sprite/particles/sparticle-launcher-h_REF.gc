;;-*-Lisp-*-
(in-package goal)

;; definition of type sparticle-birthinfo
(deftype sparticle-birthinfo (structure)
  ((sprite       uint32   :offset-assert   0)
   (anim         int32    :offset-assert   4)
   (anim-speed   float    :offset-assert   8)
   (birth-func   basic    :offset-assert  12)
   (joint-ppoint int32    :offset-assert  16)
   (num-to-birth float    :offset-assert  20)
   (sound        basic    :offset-assert  24)
   (dataf        float  1 :offset          0)
   (data         uint32 1 :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type sparticle-birthinfo
(defmethod inspect sparticle-birthinfo ((obj sparticle-birthinfo))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sparticle-birthinfo)
  (format #t "~1Tsprite: ~D~%" (-> obj sprite))
  (format #t "~1Tanim: ~D~%" (-> obj anim))
  (format #t "~1Tanim-speed: ~f~%" (-> obj anim-speed))
  (format #t "~1Tbirth-func: ~A~%" (-> obj birth-func))
  (format #t "~1Tjoint-ppoint: ~D~%" (-> obj joint-ppoint))
  (format #t "~1Tnum-to-birth: ~f~%" (-> obj num-to-birth))
  (format #t "~1Tsound: ~A~%" (-> obj sound))
  (format #t "~1Tdataf[1] @ #x~X~%" (&-> obj sprite))
  (format #t "~1Tdata[1] @ #x~X~%" (&-> obj sprite))
  (label cfg-4)
  obj
  )

;; definition of type sp-field-init-spec
(deftype sp-field-init-spec (structure)
  ((field          sp-field-id  :offset-assert   0)
   (flags          sp-flag      :offset-assert   2)
   (initial-valuef float        :offset-assert   4)
   (random-rangef  float        :offset-assert   8)
   (random-multf   float        :offset-assert  12)
   (initial-value  int32        :offset          4)
   (random-range   int32        :offset          8)
   (random-mult    int32        :offset         12)
   (func           symbol       :offset          4)
   (tex            texture-id   :offset          4)
   (pntr           pointer      :offset          4)
   (object         basic        :offset          4)
   (sym            symbol       :offset          4)
   (sound          sound-spec   :offset          4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type sp-field-init-spec
(defmethod inspect sp-field-init-spec ((obj sp-field-init-spec))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sp-field-init-spec)
  (format #t "~1Tfield: ~D~%" (-> obj field))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tinitial-valuef: ~f~%" (-> obj initial-valuef))
  (format #t "~1Trandom-rangef: ~f~%" (-> obj random-rangef))
  (format #t "~1Trandom-multf: ~f~%" (-> obj random-multf))
  (format #t "~1Tinitial-value: ~D~%" (-> obj initial-valuef))
  (format #t "~1Trandom-range: ~D~%" (-> obj random-rangef))
  (format #t "~1Trandom-mult: ~D~%" (-> obj random-multf))
  (format #t "~1Tfunc: ~A~%" (-> obj initial-valuef))
  (format #t "~1Ttex: ~D~%" (-> obj initial-valuef))
  (format #t "~1Tpntr: #x~X~%" (-> obj initial-valuef))
  (format #t "~1Tobject: ~A~%" (-> obj initial-valuef))
  (format #t "~1Tsym: ~A~%" (-> obj initial-valuef))
  (format #t "~1Tsound: ~A~%" (-> obj initial-valuef))
  (label cfg-4)
  obj
  )

;; definition of type sparticle-launcher
(deftype sparticle-launcher (basic)
  ((birthaccum float                              :offset-assert   4)
   (soundaccum float                              :offset-assert   8)
   (init-specs (inline-array sp-field-init-spec)  :offset-assert  12)
   )
  :method-count-assert 11
  :size-assert         #x10
  :flag-assert         #xb00000010
  (:methods
    (sparticle-launcher-method-9 (_type_ int) uint 9)
    (sparticle-launcher-method-10 (_type_) none 10)
    )
  )

;; definition for method 3 of type sparticle-launcher
(defmethod inspect sparticle-launcher ((obj sparticle-launcher))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tbirthaccum: ~f~%" (-> obj birthaccum))
  (format #t "~1Tsoundaccum: ~f~%" (-> obj soundaccum))
  (format #t "~1Tinit-specs: #x~X~%" (-> obj init-specs))
  (label cfg-4)
  obj
  )

;; definition of type sparticle-group-item
(deftype sparticle-group-item (structure)
  ((launcher   uint32              :offset-assert   0)
   (fade-after meters              :offset-assert   4)
   (falloff-to meters              :offset-assert   8)
   (flags      sp-group-item-flag  :offset-assert  12)
   (period     uint16              :offset-assert  14)
   (length     uint16              :offset-assert  16)
   (offset     int16               :offset-assert  18)
   (hour-mask  uint32              :offset-assert  20)
   (binding    uint32              :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type sparticle-group-item
(defmethod inspect sparticle-group-item ((obj sparticle-group-item))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sparticle-group-item)
  (format #t "~1Tlauncher: ~D~%" (-> obj launcher))
  (format #t "~1Tfade-after: (meters ~m)~%" (-> obj fade-after))
  (format #t "~1Tfalloff-to: (meters ~m)~%" (-> obj falloff-to))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tperiod: ~D~%" (-> obj period))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Toffset: ~D~%" (-> obj offset))
  (format #t "~1Thour-mask: ~D~%" (-> obj hour-mask))
  (format #t "~1Tbinding: ~D~%" (-> obj binding))
  (label cfg-4)
  obj
  )

;; definition of type sparticle-launch-state
(deftype sparticle-launch-state (structure)
  ((group-item sparticle-group-item   :offset-assert   0)
   (flags      sp-launch-state-flags  :offset-assert   4)
   (randomize  uint16                 :offset-assert   6)
   (center     vector                 :offset-assert   8)
   (sprite3d   sprite-vec-data-3d     :offset-assert  12)
   (sprite     sparticle-cpuinfo      :offset-assert  16)
   (offset     uint32                 :offset-assert  20)
   (accum      float                  :offset-assert  24)
   (spawn-time uint32                 :offset-assert  28)
   (control    basic                  :offset-assert  32)
   (swarm      basic                  :offset         20)
   (seed       uint32                 :offset         24)
   (time       uint32                 :offset         28)
   (spec       basic                  :offset         16)
   (id         uint32                 :offset         12)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; definition for method 3 of type sparticle-launch-state
(defmethod inspect sparticle-launch-state ((obj sparticle-launch-state))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sparticle-launch-state)
  (format #t "~1Tgroup-item: #<sparticle-group-item @ #x~X>~%" (-> obj group-item))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Trandomize: ~D~%" (-> obj randomize))
  (format #t "~1Tcenter: #<vector @ #x~X>~%" (-> obj center))
  (format #t "~1Tsprite3d: #<sprite-vec-data-3d @ #x~X>~%" (-> obj sprite3d))
  (format #t "~1Tsprite: ~A~%" (-> obj sprite))
  (format #t "~1Toffset: ~D~%" (-> obj offset))
  (format #t "~1Taccum: ~f~%" (-> obj accum))
  (format #t "~1Tspawn-time: ~D~%" (-> obj spawn-time))
  (format #t "~1Tcontrol: ~A~%" (-> obj control))
  (format #t "~1Tswarm: ~A~%" (-> obj offset))
  (format #t "~1Tseed: ~D~%" (-> obj accum))
  (format #t "~1Ttime: ~D~%" (-> obj spawn-time))
  (format #t "~1Tspec: ~A~%" (-> obj sprite))
  (format #t "~1Tid: ~D~%" (-> obj sprite3d))
  (label cfg-4)
  obj
  )

;; definition of type sparticle-launch-group
(deftype sparticle-launch-group (basic)
  ((length          int16                                       :offset-assert   4)
   (duration        uint16                                      :offset-assert   6)
   (linger-duration uint16                                      :offset-assert   8)
   (flags           sp-group-flag                               :offset-assert  10)
   (name            string                                      :offset-assert  12)
   (launcher        (inline-array sparticle-group-item)         :offset-assert  16)
   (rotate-x        degrees                                     :offset-assert  20)
   (rotate-y        degrees                                     :offset-assert  24)
   (rotate-z        degrees                                     :offset-assert  28)
   (scale-x         float                                       :offset-assert  32)
   (scale-y         float                                       :offset-assert  36)
   (scale-z         float                                       :offset-assert  40)
   (bounds          sphere                              :inline :offset-assert  48)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (sparticle-launch-group-method-9 () none 9)
    )
  )

;; definition for method 3 of type sparticle-launch-group
(defmethod inspect sparticle-launch-group ((obj sparticle-launch-group))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tduration: ~D~%" (-> obj duration))
  (format #t "~1Tlinger-duration: ~D~%" (-> obj linger-duration))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlauncher: #x~X~%" (-> obj launcher))
  (format #t "~1Trotate-x: (deg ~r)~%" (-> obj rotate-x))
  (format #t "~1Trotate-y: (deg ~r)~%" (-> obj rotate-y))
  (format #t "~1Trotate-z: (deg ~r)~%" (-> obj rotate-z))
  (format #t "~1Tscale-x: ~f~%" (-> obj scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> obj scale-y))
  (format #t "~1Tscale-z: ~f~%" (-> obj scale-z))
  (format #t "~1Tbounds: #<sphere @ #x~X>~%" (-> obj bounds))
  (label cfg-4)
  obj
  )

;; definition for symbol *launch-matrix*, type matrix
(define *launch-matrix* (matrix-identity! (new 'global 'matrix)))

;; definition of type sparticle-launch-control
(deftype sparticle-launch-control (inline-array-class)
  ((group            sparticle-launch-group                  :offset-assert  16)
   (proc             process                                 :offset-assert  20)
   (local-clock      int32                                   :offset-assert  24)
   (fade             float                                   :offset-assert  28)
   (matrix           int8                                    :offset-assert  32)
   (state-mode       uint8                  3                :offset-assert  33)
   (state-counter    uint32                                  :offset-assert  36)
   (last-spawn-frame int32                                   :offset-assert  40)
   (last-spawn-time  int32                                   :offset-assert  44)
   (origin           matrix                 :inline          :offset-assert  48)
   (center           vector                 :inline          :offset         96)
   (data             sparticle-launch-state :inline :dynamic :offset-assert 112)
   )
  :method-count-assert 16
  :size-assert         #x70
  :flag-assert         #x1000000070
  (:methods
    (sparticle-launch-control-method-9 () none 9)
    (sparticle-launch-control-method-10 () none 10)
    (sparticle-launch-control-method-11 () none 11)
    (sparticle-launch-control-method-12 () none 12)
    (sparticle-launch-control-method-13 () none 13)
    (sparticle-launch-control-method-14 () none 14)
    (sparticle-launch-control-method-15 () none 15)
    )
  )

;; definition for method 3 of type sparticle-launch-control
(defmethod inspect sparticle-launch-control ((obj sparticle-launch-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tgroup: ~A~%" (-> obj group))
  (format #t "~1Tproc: ~A~%" (-> obj proc))
  (format #t "~1Tlocal-clock: ~D~%" (-> obj local-clock))
  (format #t "~1Tfade: ~f~%" (-> obj fade))
  (format #t "~1Tmatrix: ~D~%" (-> obj matrix))
  (format #t "~1Tstate-mode[3] @ #x~X~%" (-> obj state-mode))
  (format #t "~1Tstate-counter: ~D~%" (-> obj state-counter))
  (format #t "~1Tlast-spawn-frame: ~D~%" (-> obj last-spawn-frame))
  (format #t "~1Tlast-spawn-time: ~D~%" (-> obj last-spawn-time))
  (format #t "~1Torigin: #<matrix @ #x~X>~%" (-> obj origin))
  (format #t "~1Tcenter: ~`vector`P~%" (-> obj origin trans))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(set! (-> sparticle-launch-control heap-base) (the-as uint 48))

;; failed to figure out what this is:
0
