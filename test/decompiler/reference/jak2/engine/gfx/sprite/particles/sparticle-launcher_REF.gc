;;-*-Lisp-*-
(in-package goal)

;; definition for method 3 of type sparticle-launcher
;; INFO: this function exists in multiple non-identical object files
;; WARN: Return type mismatch int vs sparticle-launcher.
(defmethod inspect sparticle-launcher ((obj sparticle-launcher))
  (format #t "~X: sparticle-launcher~%" obj)
  (let ((s5-0 0))
    (while (!= (-> obj init-specs s5-0 field) (sp-field-id spt-end))
      (let* ((v1-1 (-> obj init-specs s5-0))
             (t9-1 format)
             (a0-3 #t)
             (a1-1 "~T~S : ~F / #x~X / ~D~%")
             (a2-1 (-> v1-1 field))
             )
        (t9-1
          a0-3
          a1-1
          (cond
            ((= a2-1 (sp-field-id spt-rotate-x))
             "spt-rotate-x"
             )
            ((= a2-1 (sp-field-id sprite-fields-end))
             "sprite-fields-end"
             )
            ((= a2-1 (sp-field-id spt-quat-z))
             "spt-quat-z"
             )
            ((= a2-1 (sp-field-id spt-next-launcher))
             "spt-next-launcher"
             )
            ((= a2-1 (sp-field-id cpu-fields-start))
             "cpu-fields-start"
             )
            ((= a2-1 (sp-field-id spt-rotvel-z))
             "spt-rotvel-z"
             )
            ((= a2-1 (sp-field-id launch-fields-end))
             "launch-fields-end"
             )
            ((= a2-1 (sp-field-id spt-conerot-w))
             "spt-conerot-w"
             )
            ((= a2-1 (sp-field-id spt-fade-a))
             "spt-fade-a"
             )
            ((= a2-1 (sp-field-id spt-a))
             "spt-a"
             )
            ((= a2-1 (sp-field-id spt-friction))
             "spt-friction"
             )
            ((= a2-1 (sp-field-id spt-b))
             "spt-b"
             )
            ((= a2-1 (sp-field-id spt-launchrot-x))
             "spt-launchrot-x"
             )
            ((= a2-1 (sp-field-id spt-rotate-z))
             "spt-rotate-z"
             )
            ((= a2-1 (sp-field-id spt-anim))
             "spt-anim"
             )
            ((= a2-1 (sp-field-id spt-fade-g))
             "spt-fade-g"
             )
            ((= a2-1 (sp-field-id spt-g))
             "spt-g"
             )
            ((= a2-1 (sp-field-id spt-mat-scale-z))
             "spt-mat-scale-z"
             )
            ((= a2-1 (sp-field-id spt-scale))
             "spt-scale"
             )
            ((= a2-1 (sp-field-id spt-vel-z))
             "spt-vel-z"
             )
            ((= a2-1 (sp-field-id spt-dummy))
             "spt-dummy"
             )
            ((= a2-1 (sp-field-id spt-accel-z))
             "spt-accel-z"
             )
            ((= a2-1 (sp-field-id spt-fade-r))
             "spt-fade-r"
             )
            ((= a2-1 (sp-field-id spt-quat-x))
             "spt-quat-x"
             )
            ((= a2-1 (sp-field-id spt-rot-y))
             "spt-rot-y"
             )
            ((= a2-1 (sp-field-id cpu-fields-end))
             "cpu-fields-end"
             )
            ((= a2-1 (sp-field-id spt-accel-y))
             "spt-accel-y"
             )
            ((= a2-1 (sp-field-id spt-vel-x))
             "spt-vel-x"
             )
            ((= a2-1 (sp-field-id spt-x))
             "spt-x"
             )
            ((= a2-1 (sp-field-id spt-omega))
             "spt-omega"
             )
            ((= a2-1 (sp-field-id spt-accel-x))
             "spt-accel-x"
             )
            ((= a2-1 (sp-field-id spt-y))
             "spt-y"
             )
            ((= a2-1 (sp-field-id spt-sound))
             "spt-sound"
             )
            ((= a2-1 (sp-field-id spt-z))
             "spt-z"
             )
            ((= a2-1 (sp-field-id spt-r))
             "spt-r"
             )
            ((= a2-1 (sp-field-id misc-fields-end))
             "misc-fields-end"
             )
            ((= a2-1 (sp-field-id spt-birth-func))
             "spt-birth-func"
             )
            ((= a2-1 (sp-field-id spt-rotvel-y))
             "spt-rotvel-y"
             )
            ((= a2-1 (sp-field-id spt-userdata))
             "spt-userdata"
             )
            ((= a2-1 (sp-field-id spt-launchrot-w))
             "spt-launchrot-w"
             )
            ((= a2-1 (sp-field-id spt-quad-w))
             "spt-quad-w"
             )
            ((= a2-1 (sp-field-id spt-fade-b))
             "spt-fade-b"
             )
            ((= a2-1 (sp-field-id spt-anim-speed))
             "spt-anim-speed"
             )
            ((= a2-1 (sp-field-id spt-timer))
             "spt-timer"
             )
            ((= a2-1 (sp-field-id spt-mat-scale-y))
             "spt-mat-scale-y"
             )
            ((= a2-1 (sp-field-id spt-rotate-y))
             "spt-rotate-y"
             )
            ((= a2-1 (sp-field-id spt-joint/refpoint))
             "spt-joint/refpoint"
             )
            ((= a2-1 (sp-field-id spt-next-time))
             "spt-next-time"
             )
            ((= a2-1 (sp-field-id spt-launchrot-z))
             "spt-launchrot-z"
             )
            ((= a2-1 (sp-field-id spt-conerot-z))
             "spt-conerot-z"
             )
            ((= a2-1 (sp-field-id spt-scale-y))
             "spt-scale-y"
             )
            ((= a2-1 (sp-field-id spt-flags))
             "spt-flags"
             )
            ((= a2-1 (sp-field-id spt-scale-x))
             "spt-scale-x"
             )
            ((= a2-1 (sp-field-id spt-quat-y))
             "spt-quat-y"
             )
            ((= a2-1 (sp-field-id spt-scalevel-y))
             "spt-scalevel-y"
             )
            ((= a2-1 (sp-field-id spt-mat-scale-x))
             "spt-mat-scale-x"
             )
            ((= a2-1 (sp-field-id spt-conerot-y))
             "spt-conerot-y"
             )
            ((= a2-1 (sp-field-id launch-fields-start))
             "launch-fields-start"
             )
            ((= a2-1 (sp-field-id sprite-fields-start))
             "sprite-fields-start"
             )
            ((= a2-1 (sp-field-id spt-vel-y))
             "spt-vel-y"
             )
            ((= a2-1 (sp-field-id spt-rot-z))
             "spt-rot-z"
             )
            ((= a2-1 (sp-field-id misc-fields-start))
             "misc-fields-start"
             )
            ((= a2-1 (sp-field-id spt-rot-x))
             "spt-rot-x"
             )
            ((= a2-1 (sp-field-id spt-scalevel))
             "spt-scalevel"
             )
            ((= a2-1 (sp-field-id spt-conerot-x))
             "spt-conerot-x"
             )
            ((= a2-1 (sp-field-id spt-num))
             "spt-num"
             )
            ((= a2-1 (sp-field-id spt-launchrot-y))
             "spt-launchrot-y"
             )
            ((= a2-1 (sp-field-id spt-end))
             "spt-end"
             )
            ((= a2-1 (sp-field-id spt-texture))
             "spt-texture"
             )
            ((= a2-1 (sp-field-id spt-rotvel-x))
             "spt-rotvel-x"
             )
            ((= a2-1 (sp-field-id spt-scalevel-x))
             "spt-scalevel-x"
             )
            ((= a2-1 (sp-field-id spt-conerot-radius))
             "spt-conerot-radius"
             )
            ((= a2-1 (sp-field-id spt-func))
             "spt-func"
             )
            (else
              "*unknown*"
              )
            )
          (-> v1-1 initial-valuef)
          (-> v1-1 initial-valuef)
          (-> v1-1 initial-valuef)
          )
        )
      (+! s5-0 1)
      )
    )
  (the-as sparticle-launcher 0)
  )

;; failed to figure out what this is:
(kmemopen global "part-tables")

;; definition for symbol *part-id-table*, type (array sparticle-launcher)
(define *part-id-table*
  (the-as (array sparticle-launcher) (new 'global 'boxed-array sparticle-launcher 5760))
  )

;; definition for symbol *part-group-id-table*, type (array sparticle-launch-group)
(define *part-group-id-table*
  (the-as (array sparticle-launch-group) (new 'global 'boxed-array sparticle-launch-group 1408))
  )

;; definition for symbol *sp-temp*, type int
(define *sp-temp* 0)

;; failed to figure out what this is:
(kmemclose)

;; definition for function lookup-part-group-by-name
(defun lookup-part-group-by-name ((arg0 string))
  "Iterate through the [[*part-group-id-table*]] and return the matching [[sparticle-launch-group]], or [[#f]] otherwise"
  (let* ((s5-0 *part-group-id-table*)
         (s4-0 (-> s5-0 length))
         )
    (dotimes (s3-0 s4-0)
      (let ((s2-0 (-> s5-0 s3-0)))
        (if (and (nonzero? s2-0) (string= arg0 (-> s2-0 name)))
            (return s2-0)
            )
        )
      )
    )
  (the-as sparticle-launch-group #f)
  )

;; definition for function lookup-part-group-pointer-by-name
;; WARN: Return type mismatch (pointer sparticle-launch-group) vs (pointer object).
(defun lookup-part-group-pointer-by-name ((arg0 string))
  "Similar to [[lookup-part-group-by-name]] but returns a pointer instead"
  (let* ((s4-0 *part-group-id-table*)
         (s3-0 (-> s4-0 length))
         )
    (dotimes (gp-0 s3-0)
      (let ((v1-2 (-> s4-0 gp-0)))
        (if (and (nonzero? v1-2) (string= arg0 (-> v1-2 name)))
            (return (the-as (pointer object) (&+ (-> s4-0 data) (* gp-0 4))))
            )
        )
      )
    )
  (the-as (pointer sparticle-launch-group) #f)
  )

;; definition for function part-group-pointer?
(defun part-group-pointer? ((arg0 pointer))
  "Verifies if the given pointer, points to a [[sparticle-launch-group]]"
  (let ((v1-0 *part-group-id-table*))
    (and (>= (the-as int arg0) (the-as int (-> v1-0 data))) (< (the-as int arg0) (the-as int (&-> v1-0 1408))))
    )
  )

;; definition for function unlink-part-group-by-heap
(defun unlink-part-group-by-heap ((arg0 kheap))
  (let* ((v1-0 *part-group-id-table*)
         (a2-0 (-> v1-0 length))
         (a1-0 (-> arg0 base))
         (a0-1 (-> arg0 top-base))
         )
    (while (nonzero? a2-0)
      (+! a2-0 -1)
      (let ((a3-2 (-> v1-0 a2-0)))
        (when (and (>= (the-as int a3-2) (the-as int a1-0)) (< (the-as int a3-2) (the-as int a0-1)))
          (set! (-> v1-0 a2-0) (the-as sparticle-launch-group 0))
          0
          )
        )
      )
    )
  0
  )

;; definition for function sp-init-fields!
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition of type sp-queued-launch-particles
(deftype sp-queued-launch-particles (structure)
  ((sp-system   sparticle-system           :offset-assert   0)
   (sp-launcher sparticle-launcher         :offset-assert   4)
   (pos         vector             :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type sp-queued-launch-particles
(defmethod inspect sp-queued-launch-particles ((obj sp-queued-launch-particles))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sp-queued-launch-particles)
  (format #t "~1Tsp-system: ~A~%" (-> obj sp-system))
  (format #t "~1Tsp-launcher: ~A~%" (-> obj sp-launcher))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> obj pos))
  (label cfg-4)
  obj
  )

;; definition of type sp-launch-queue
(deftype sp-launch-queue (basic)
  ((in-use int32                                  :offset-assert   4)
   (queue  sp-queued-launch-particles 256 :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x2010
  :flag-assert         #x900002010
  )

;; definition for method 3 of type sp-launch-queue
(defmethod inspect sp-launch-queue ((obj sp-launch-queue))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tin-use: ~D~%" (-> obj in-use))
  (format #t "~1Tqueue[256] @ #x~X~%" (-> obj queue))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(kmemopen global "launcher-queue")

;; definition for symbol *sp-launcher-lock*, type symbol
(define *sp-launcher-lock* #f)

;; definition for symbol *sp-launch-queue*, type sp-launch-queue
(define *sp-launch-queue* (new 'global 'sp-launch-queue))

;; definition for symbol *sp-launcher-enable*, type symbol
(define *sp-launcher-enable* #t)

;; failed to figure out what this is:
(kmemclose)

;; definition for function particle-setup-adgif
;; ERROR: function has no type analysis. Cannot decompile.

;; definition of type particle-adgif-cache
(deftype particle-adgif-cache (basic)
  ((used    int32                   :offset-assert   4)
   (last    uint16                  :offset-assert   8)
   (lastgif adgif-shader            :offset-assert  12)
   (tidhash uint16       80         :offset-assert  16)
   (spadgif adgif-shader 80 :inline :offset-assert 176)
   )
  :method-count-assert 9
  :size-assert         #x19b0
  :flag-assert         #x9000019b0
  )

;; definition for method 3 of type particle-adgif-cache
(defmethod inspect particle-adgif-cache ((obj particle-adgif-cache))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tused: ~D~%" (-> obj used))
  (format #t "~1Tlast: ~D~%" (-> obj last))
  (format #t "~1Tlastgif: #<adgif-shader @ #x~X>~%" (-> obj lastgif))
  (format #t "~1Ttidhash[80] @ #x~X~%" (-> obj tidhash))
  (format #t "~1Tspadgif[80] @ #x~X~%" (-> obj spadgif))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(kmemopen global "part-adgif-cache")

;; definition for symbol *particle-adgif-cache*, type particle-adgif-cache
(define *particle-adgif-cache* (new 'global 'particle-adgif-cache))

;; failed to figure out what this is:
(set! (-> *particle-adgif-cache* used) 0)

;; failed to figure out what this is:
(kmemclose)

;; definition for function particle-adgif-cache-flush
;; WARN: Return type mismatch int vs none.
(defun particle-adgif-cache-flush ()
  "Clear [[*particle-adgif-cache*]]"
  (set! (-> *particle-adgif-cache* used) 0)
  (set! (-> *particle-adgif-cache* last) (the-as uint 0))
  0
  (none)
  )

;; definition for function particle-adgif
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function particle-adgif-callback
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function sp-queue-launch
;; INFO: Used lq/sq
(defun sp-queue-launch ((arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 matrix))
  (let ((v1-0 *sp-launch-queue*))
    (when (= (-> v1-0 in-use) 256)
      (format 0 "ERROR: sp-launch-particles called during processing, and queue is full~%")
      (return 0)
      )
    (let ((a3-5 (-> v1-0 queue (-> v1-0 in-use))))
      (set! (-> a3-5 sp-system) arg0)
      (set! (-> a3-5 sp-launcher) arg1)
      (set! (-> a3-5 pos quad) (-> arg2 trans quad))
      )
    (let ((v0-1 (+ (-> v1-0 in-use) 1)))
      (set! (-> v1-0 in-use) v0-1)
      v0-1
      )
    )
  )

;; definition for function sp-adjust-launch
;; WARN: Return type mismatch int vs none.
(defun sp-adjust-launch ((arg0 sparticle-launchinfo)
                (arg1 sparticle-cpuinfo)
                (arg2 (inline-array sp-field-init-spec))
                (arg3 matrix)
                (arg4 symbol)
                )
  (let ((s2-0 (new 'stack-no-clear 'matrix))
        (s5-0 (new 'stack-no-clear 'matrix))
        )
    (let ((s0-0 (new 'stack-no-clear 'vector)))
      (sp-init-fields! (-> s2-0 vector) arg2 (sp-field-id launch-fields-start) (sp-field-id launch-fields-end) #t)
      (matrix-rotate-xyz! s5-0 (the-as vector (-> s2-0 vector)))
      (vector3s-matrix*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
      (matrix-rotate-xyz! s5-0 (-> s2-0 vector 1))
      (vector3s-matrix*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
      (matrix*! s5-0 s5-0 arg3)
      (set-vector! s0-0 0.0 (-> s2-0 vector 2 w) 0.0 1.0)
      (vector-matrix*! s0-0 s0-0 s5-0)
      (+! (-> arg0 launchrot x) (-> s0-0 x))
      (+! (-> arg0 launchrot y) (-> s0-0 y))
      (+! (-> arg0 launchrot z) (-> s0-0 z))
      )
    (when (logtest? (sp-cpuinfo-flag sp-cpuinfo-flag-21) (-> arg1 flags))
      (set! (-> arg0 launchrot w) (* (-> arg0 launchrot w) (vector-length (the-as vector (-> arg3 vector)))))
      (set! (-> arg0 conerot w) (* (-> arg0 conerot w) (vector-length (-> arg3 vector 1))))
      )
    (matrix-rotate-xyz! s5-0 (-> s2-0 vector 2))
    (matrix*! s5-0 s5-0 arg3)
    (vector3s-rotate*! (the-as vector3s (-> arg0 launchrot)) (the-as vector3s (-> arg0 launchrot)) s5-0)
    (vector3s-rotate*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
    (if (zero? (logand (sp-cpuinfo-flag use-global-acc) (-> arg1 flags)))
        (vector3s-rotate*! (the-as vector3s (-> arg1 acc)) (the-as vector3s (-> arg1 acc)) s5-0)
        )
    (if (logtest? (sp-cpuinfo-flag set-conerot) (-> arg1 flags))
        (set! (-> arg0 conerot y) (+ 16384.0 (vector-y-angle (-> s5-0 vector 2))))
        )
    (when arg4
      (let ((s4-1 (new 'stack-no-clear 'euler-angles)))
        (matrix->eul s4-1 s5-0 13)
        (set! (-> arg0 conerot x) (- (-> arg0 conerot x) (-> s4-1 y)))
        (set! (-> arg0 conerot y) (- (-> arg0 conerot y) (-> s4-1 z)))
        (set! (-> arg0 conerot z) (- (-> arg0 conerot z) (-> s4-1 x)))
        )
      )
    )
  0
  (none)
  )

;; definition for function sp-euler-convert
;; WARN: Return type mismatch int vs none.
(defun sp-euler-convert ((arg0 sparticle-launchinfo) (arg1 sparticle-cpuinfo))
  (local-vars (v1-1 float) (v1-2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a1-1 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'quaternion))
          )
      (set-vector! a1-1 (-> arg0 conerot x) (-> arg0 conerot y) (-> arg0 conerot z) 1.0)
      (quaternion-zxy! s5-0 a1-1)
      (cond
        ((< (-> s5-0 w) 0.0)
         (.lvf vf1 (&-> arg0 conerot quad))
         (.lvf vf2 (&-> s5-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg0 conerot quad) vf1)
         (.mov v1-1 vf1)
         )
        (else
          (.lvf vf1 (&-> arg0 conerot quad))
          (.lvf vf2 (&-> s5-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg0 conerot quad) vf1)
          (.mov v1-2 vf1)
          )
        )
      )
    (cond
      (*sp-60-hz*
        (set! (-> arg1 rot-syvel x) (* 5.0 (-> arg1 rot-syvel x)))
        (set! (-> arg1 rot-syvel y) (* 5.0 (-> arg1 rot-syvel y)))
        (set! (-> arg1 rot-syvel z) (* 5.0 (-> arg1 rot-syvel z)))
        )
      (else
        (set! (-> arg1 rot-syvel x) (* 6.0 (-> arg1 rot-syvel x)))
        (set! (-> arg1 rot-syvel y) (* 6.0 (-> arg1 rot-syvel y)))
        (set! (-> arg1 rot-syvel z) (* 6.0 (-> arg1 rot-syvel z)))
        )
      )
    (quaternion-zxy! (-> arg1 rotvel3d) (-> arg1 rot-syvel))
    0
    (none)
    )
  )

;; definition for function sp-rotate-system
;; WARN: Return type mismatch int vs none.
(defun sp-rotate-system ((arg0 sparticle-launchinfo) (arg1 sparticle-cpuinfo) (arg2 transformq))
  (let ((s5-0 (new 'stack-no-clear 'matrix)))
    (let ((a1-1 (new 'stack-no-clear 'quaternion)))
      (let* ((v1-0 a1-1)
             (a0-1 arg2)
             (f0-0 (-> a0-1 quat x))
             (f1-0 (-> a0-1 quat y))
             (f2-0 (-> a0-1 quat z))
             )
        (set! (-> v1-0 x) f0-0)
        (set! (-> v1-0 y) f1-0)
        (set! (-> v1-0 z) f2-0)
        (set! (-> v1-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
        )
      (quaternion->matrix s5-0 a1-1)
      )
    (vector3s-rotate*! (the-as vector3s (-> arg0 launchrot)) (the-as vector3s (-> arg0 launchrot)) s5-0)
    (vector3s-rotate*! (the-as vector3s (-> arg1 vel-sxvel)) (the-as vector3s (-> arg1 vel-sxvel)) s5-0)
    (if (zero? (logand (sp-cpuinfo-flag use-global-acc) (-> arg1 flags)))
        (vector3s-rotate*! (the-as vector3s (-> arg1 acc)) (the-as vector3s (-> arg1 acc)) s5-0)
        )
    )
  0
  (none)
  )

;; definition of type sp-launch-stack
(deftype sp-launch-stack (structure)
  ((ra         basic                       :offset-assert   0)
   (dummy0     basic                       :offset-assert   4)
   (dummy1     basic                       :offset-assert   8)
   (b-spfic    basic                       :offset-assert  12)
   (r16        uint128                     :offset-assert  16)
   (r17        uint128                     :offset-assert  32)
   (r18        uint128                     :offset-assert  48)
   (pos        uint128                     :offset-assert  64)
   (matrix     matrix              :inline :offset-assert  80)
   (l-spfic    basic                       :offset-assert 144)
   (birth-info sparticle-birthinfo :inline :offset-assert 160)
   (sprite     sprite-vec-data-2d  :inline :offset-assert 192)
   (r19        uint128                     :offset-assert 240)
   (r20        uint128                     :offset-assert 256)
   (r21        uint128                     :offset-assert 272)
   (r22        uint128                     :offset-assert 288)
   )
  :method-count-assert 9
  :size-assert         #x130
  :flag-assert         #x900000130
  )

;; definition for method 3 of type sp-launch-stack
;; INFO: Used lq/sq
(defmethod inspect sp-launch-stack ((obj sp-launch-stack))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sp-launch-stack)
  (format #t "~1Tra: ~A~%" (-> obj ra))
  (format #t "~1Tdummy0: ~A~%" (-> obj dummy0))
  (format #t "~1Tdummy1: ~A~%" (-> obj dummy1))
  (format #t "~1Tb-spfic: ~A~%" (-> obj b-spfic))
  (format #t "~1Tr16: ~D~%" (-> obj r16))
  (format #t "~1Tr17: ~D~%" (-> obj r17))
  (format #t "~1Tr18: ~D~%" (-> obj r18))
  (format #t "~1Tpos: ~D~%" (-> obj pos))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> obj matrix))
  (format #t "~1Tl-spfic: ~A~%" (-> obj l-spfic))
  (format #t "~1Tbirth-info: #<sparticle-birthinfo @ #x~X>~%" (-> obj birth-info))
  (format #t "~1Tsprite: #<sprite-vec-data-2d @ #x~X>~%" (-> obj sprite))
  (format #t "~1Tr19: ~D~%" (-> obj r19))
  (format #t "~1Tr20: ~D~%" (-> obj r20))
  (format #t "~1Tr21: ~D~%" (-> obj r21))
  (format #t "~1Tr22: ~D~%" (-> obj r22))
  (label cfg-4)
  obj
  )

;; definition for function sp-launch-particles-var
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for symbol *death-adgif*, type adgif-shader
(define *death-adgif* (the-as adgif-shader #f))

;; definition for function sp-launch-particles-death
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; WARN: Function sp-launch-particles-death has a return type of none, but the expression builder found a return statement.
(defun sp-launch-particles-death ((arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 vector))
  (local-vars (v1-26 float) (v1-28 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf30 :class vf)
         (vf31 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (.lvf vf30 (&-> arg2 quad))
    (let ((v1-0 #x437f0000))
      (.mov vf31 v1-0)
      )
    (let ((s5-0 (new 'stack-no-clear 'matrix))
          (gp-0 (sp-get-particle arg0 0 (the-as sparticle-launch-state #f)))
          )
      (if (not gp-0)
          (return 0)
          )
      (let* ((a1-2 (-> arg1 init-specs 0))
             (a1-3
               (sp-init-fields!
                 (-> s5-0 vector)
                 (the-as (inline-array sp-field-init-spec) a1-2)
                 (sp-field-id sprite-fields-start)
                 (sp-field-id sprite-fields-end)
                 #t
                 )
               )
             )
        (sp-init-fields!
          (&-> gp-0 omega)
          (the-as (inline-array sp-field-init-spec) a1-3)
          (sp-field-id cpu-fields-start)
          (sp-field-id cpu-fields-end)
          #t
          )
        )
      (set! (-> s5-0 vector 1 y) 0.0)
      (set! (-> s5-0 vector 1 z) (the float (sar (shl (the int (-> s5-0 vector 1 z)) 48) 48)))
      (.lvf vf4 (&-> s5-0 vector 2 quad))
      (.lvf vf5 (&-> s5-0 vector 0 quad))
      (.min.x.vf vf4 vf4 vf31 :mask #b111)
      (.add.vf vf5 vf5 vf30 :mask #b111)
      (.svf (&-> s5-0 vector 2 quad) vf4)
      (.svf (&-> s5-0 vector 0 quad) vf5)
      (when (not *death-adgif*)
        (set! *death-adgif* (new 'static 'adgif-shader))
        (particle-adgif *death-adgif* (new 'static 'texture-id :index #xc9 :page #xc))
        (set! (-> *death-adgif* alpha) (new 'static 'gs-alpha :b #x2 :d #x1))
        )
      (let ((v1-14 (-> *death-adgif* quad 0 quad)))
        (set! (-> gp-0 adgif quad 0 quad) v1-14)
        )
      (let ((v1-16 (-> *death-adgif* quad 1 quad)))
        (set! (-> gp-0 adgif quad 1 quad) v1-16)
        )
      (let ((v1-18 (-> *death-adgif* quad 2 quad)))
        (set! (-> gp-0 adgif quad 2 quad) v1-18)
        )
      (let ((v1-20 (-> *death-adgif* quad 3 quad)))
        (set! (-> gp-0 adgif quad 3 quad) v1-20)
        )
      (let ((v1-22 (-> *death-adgif* quad 4 quad)))
        (set! (-> gp-0 adgif quad 4 quad) v1-22)
        )
      (set! (-> gp-0 clock-index) (the-as uint 8))
      (.lvf vf4 (&-> (-> *time-of-day-context* current-prt-color) quad))
      (.lvf vf5 (&-> s5-0 vector 2 quad))
      (.lvf vf6 (&-> gp-0 fade quad))
      (.mul.vf vf5 vf5 vf4 :mask #b111)
      (.mul.vf vf6 vf6 vf4 :mask #b111)
      (.svf (&-> s5-0 vector 2 quad) vf5)
      (.svf (&-> gp-0 fade quad) vf6)
      (.mov v1-26 vf6)
      (set! (-> gp-0 key) (the-as sparticle-launch-control 0))
      (set! (-> gp-0 binding) #f)
      (let ((v1-27 (-> gp-0 sprite)))
        (.lvf vf1 (&-> s5-0 vector 0 quad))
        (.lvf vf2 (&-> s5-0 vector 1 quad))
        (.lvf vf3 (&-> s5-0 vector 2 quad))
        (.svf (&-> v1-27 x-y-z-sx quad) vf1)
        (.svf (&-> v1-27 flag-rot-sy quad) vf2)
        (.sub.w.vf vf3 vf0 vf0 :mask #b1000)
        (.svf (&-> v1-27 r-g-b-a quad) vf3)
        )
      (.mov v1-28 vf3)
      (logior! (-> gp-0 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-5))
      (set! (-> gp-0 cache-alpha) (-> s5-0 vector 2 w))
      )
    0
    (none)
    )
  )

;; definition for function sp-clear-queue
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun sp-clear-queue ()
  (let ((gp-0 *sp-launch-queue*)
        (s5-0 *launch-matrix*)
        )
    (when (> (-> gp-0 in-use) 0)
      (dotimes (s4-0 (-> gp-0 in-use))
        (let ((v1-4 (-> gp-0 queue s4-0)))
          (set! (-> s5-0 trans quad) (-> v1-4 pos quad))
          (sp-launch-particles-var
            (-> v1-4 sp-system)
            (-> v1-4 sp-launcher)
            s5-0
            (the-as sparticle-launch-state #f)
            (the-as sparticle-launch-control #f)
            1.0
            )
          )
        )
      (set! (-> gp-0 in-use) 0)
      0
      )
    )
  0
  (none)
  )

;; definition for function sp-relaunch-setup-fields
;; WARN: Return type mismatch int vs none.
(defun sp-relaunch-setup-fields ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (let ((a1-1 (-> arg1 init-specs 0))
        (s4-0 (logand (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-9 level0 level1)))
        )
    (set! (-> arg2 next-launcher) (the-as basic 0))
    (cond
      ((and (logtest? (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-12))
            (zero? (logand (-> arg2 flags) (sp-cpuinfo-flag distort)))
            (zero? (logand (-> arg2 flags) (sp-cpuinfo-flag glow)))
            )
       (let ((f20-0 (-> arg3 r-g-b-a x))
             (f22-0 (-> arg3 r-g-b-a y))
             (f24-0 (-> arg3 r-g-b-a z))
             (f26-0 (-> arg2 fade x))
             (f28-0 (-> arg2 fade y))
             (f30-0 (-> arg2 fade z))
             )
         (set! (-> arg3 r-g-b-a x) 99999.0)
         (set! (-> arg3 r-g-b-a y) 99999.0)
         (set! (-> arg3 r-g-b-a z) 99999.0)
         (set! (-> arg2 fade x) 99999.0)
         (set! (-> arg2 fade y) 99999.0)
         (set! (-> arg2 fade z) 99999.0)
         (let ((a1-2
                 (sp-init-fields!
                   (-> arg3 x-y-z-sx)
                   (the-as (inline-array sp-field-init-spec) a1-1)
                   (sp-field-id sprite-fields-start)
                   (sp-field-id sprite-fields-end)
                   #f
                   )
                 )
               )
           (sp-init-fields!
             (&-> arg2 omega)
             (the-as (inline-array sp-field-init-spec) a1-2)
             (sp-field-id cpu-fields-start)
             (sp-field-id cpu-fields-end)
             #f
             )
           )
         (logior! (-> arg2 flags) s4-0)
         (let ((v1-18 (-> *time-of-day-context* current-prt-color)))
           (if (= (-> arg3 r-g-b-a x) 99999.0)
               (set! (-> arg3 r-g-b-a x) f20-0)
               (set! (-> arg3 r-g-b-a x) (* (-> arg3 r-g-b-a x) (-> v1-18 x)))
               )
           (if (= (-> arg3 r-g-b-a y) 99999.0)
               (set! (-> arg3 r-g-b-a y) f22-0)
               (set! (-> arg3 r-g-b-a y) (* (-> arg3 r-g-b-a y) (-> v1-18 y)))
               )
           (if (= (-> arg3 r-g-b-a z) 99999.0)
               (set! (-> arg3 r-g-b-a z) f24-0)
               (set! (-> arg3 r-g-b-a z) (* (-> arg3 r-g-b-a z) (-> v1-18 z)))
               )
           (if (= (-> arg2 fade x) 99999.0)
               (set! (-> arg2 fade x) f26-0)
               (set! (-> arg2 fade x) (* (-> arg2 fade x) (-> v1-18 x)))
               )
           (if (= (-> arg2 fade y) 99999.0)
               (set! (-> arg2 fade y) f28-0)
               (set! (-> arg2 fade y) (* (-> arg2 fade y) (-> v1-18 y)))
               )
           (if (= (-> arg2 fade z) 99999.0)
               (set! (-> arg2 fade z) f30-0)
               (set! (-> arg2 fade z) (* (-> arg2 fade z) (-> v1-18 z)))
               )
           )
         )
       )
      (else
        (let ((a1-3
                (sp-init-fields!
                  (-> arg3 x-y-z-sx)
                  (the-as (inline-array sp-field-init-spec) a1-1)
                  (sp-field-id sprite-fields-start)
                  (sp-field-id sprite-fields-end)
                  #f
                  )
                )
              )
          (sp-init-fields!
            (&-> arg2 omega)
            (the-as (inline-array sp-field-init-spec) a1-3)
            (sp-field-id cpu-fields-start)
            (sp-field-id cpu-fields-end)
            #f
            )
          )
        )
      )
    )
  0
  0
  (none)
  )

;; definition for function sp-relaunch-particle-2d
;; WARN: Return type mismatch int vs none.
(defun sp-relaunch-particle-2d ((arg0 object) (arg1 sparticle-launcher) (arg2 sparticle-cpuinfo) (arg3 sprite-vec-data-3d))
  (sp-relaunch-setup-fields arg0 arg1 arg2 arg3)
  (when (logtest? (-> arg2 flags) (sp-cpuinfo-flag distort))
    (set! (-> arg3 r-g-b-a w) 0.0)
    (set! (-> arg2 fade w) 0.0)
    (logclear! (-> arg2 flags) (sp-cpuinfo-flag sp-cpuinfo-flag-2))
    )
  (when (logtest? (-> arg2 flags) (sp-cpuinfo-flag glow))
    )
  0
  (none)
  )

;; definition for function sp-relaunch-particle-3d
;; ERROR: failed type prop at 32: Could not figure out load: (set! a1 (l.w (+ gp 104)))
(defun sp-relaunch-particle-3d ((a0-0 object) (a1-0 sparticle-launcher) (a2-0 sparticle-cpuinfo) (a3-0 sprite-vec-data-3d))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v1-0 quaternion)
    (v1-1 none)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-6 none)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (v1-14 none)
    (v1-16 none)
    (v1-17 none)
    (v1-18 none)
    (a0-1 none)
    (a0-2 none)
    (a0-4 none)
    (a0-6 none)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-6 none)
    (a2-1 sprite-vec-data-3d)
    (a2-2 int)
    (a2-4 sparticle-cpuinfo)
    (a2-5 none)
    (a3-1 sprite-vec-data-3d)
    (s3-0 none)
    (s4-0 quaternion)
    (t9-0 (function object sparticle-launcher sparticle-cpuinfo sprite-vec-data-3d none))
    (t9-1 none)
    (t9-2 none)
    (t9-3 none)
    (sp-0 none)
    (f0-0 float)
    (f0-1 float)
    (f0-2 float)
    (f0-3 float)
    (f0-4 float)
    (f0-5 float)
    (f0-6 float)
    (f0-7 none)
    (f0-8 none)
    (f0-9 none)
    (f0-10 none)
    (f0-11 none)
    (f0-12 none)
    (f0-13 none)
    (f0-14 none)
    (f0-15 none)
    (f0-16 none)
    (f0-17 none)
    (f0-18 none)
    (f0-19 none)
    (f0-20 none)
    (f0-21 none)
    (f0-22 none)
    (f0-23 none)
    (f1-0 float)
    (f1-1 float)
    (f1-2 float)
    (f1-3 none)
    (f1-4 none)
    (f1-5 none)
    (f1-6 none)
    (f1-7 none)
    (f1-8 none)
    (f1-9 none)
    (f2-0 float)
    (f2-1 float)
    (f2-2 float)
    (f3-0 float)
    )
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (when (begin
            (set! s4-0 (new 'stack-no-clear 'quaternion))
            (set! v1-0 s4-0)
            (set! a2-1 a3-0)
            (set! f0-0 (-> a2-1 qx-qy-qz-sy x))
            (set! f1-0 (-> a2-1 qx-qy-qz-sy y))
            (set! f2-0 (-> a2-1 qx-qy-qz-sy z))
            (set! (-> v1-0 x) f0-0)
            (set! (-> v1-0 y) f1-0)
            (set! (-> v1-0 z) f2-0)
            (set! a2-2 #x3f800000)
            (set! f3-0 (the-as float (gpr->fpr a2-2)))
            (set! f2-1 (*.s f2-0 f2-0))
            (set! f2-2 (-.s f3-0 f2-1))
            (set! f1-1 (*.s f1-0 f1-0))
            (set! f1-2 (-.s f2-2 f1-1))
            (set! f0-1 (*.s f0-0 f0-0))
            (set! f0-2 (-.s f1-2 f0-1))
            (set! f0-3 (sqrt.s f0-2))
            (set! (-> v1-0 w) f0-3)
            (set! a2-3 (fpr->gpr f0-3))
            (set! f0-4 (the-as float 0))
            (set! (-> a3-0 qx-qy-qz-sy x) f0-4)
            (set! f0-5 (the-as float 0))
            (set! (-> a3-0 qx-qy-qz-sy y) f0-5)
            (set! f0-6 (the-as float 0))
            (set! (-> a3-0 qx-qy-qz-sy z) f0-6)
            (set! t9-0 sp-relaunch-setup-fields)
            (set! a2-4 a2-0)
            (set! a3-1 a3-0)
            (call! a0-0 a1-0 a2-4 a3-1)
            (set! a1-1 (the-as none (l.w (+ a2-0 104))))
            (set! v1-1 (the-as none -2))
            (set! a0-1 (the-as none (-> a3-0 r-g-b-a x)))
            (set! a1-2 (the-as none (logand a1-1 #x4000)))
            (set! a2-5 (the-as none 1))
            (set! a1-3 (the-as none (sra a1-2 14)))
            (set! v1-2 (the-as none (logand a0-1 v1-1)))
            (set! v1-3 (the-as none (logior v1-2 a1-3)))
            (set! (-> a3-0 r-g-b-a x) (the-as float v1-3))
            (set! a1-4 (the-as none (+ sp-0 32)))
            (set! s3-0 (the-as none (+ sp-0 48)))
            (set! v1-4 (the-as none a1-4))
            (set! f0-7 (the-as none (-> a3-0 qx-qy-qz-sy x)))
            (s.f! v1-4 f0-7)
            (set! f0-8 (the-as none (-> a3-0 qx-qy-qz-sy y)))
            (s.f! (+ v1-4 4) f0-8)
            (set! f0-9 (the-as none (-> a3-0 qx-qy-qz-sy z)))
            (s.f! (+ v1-4 8) f0-9)
            (set! a0-2 (the-as none #x3f800000))
            (set! f0-10 (the-as none (gpr->fpr a0-2)))
            (s.f! (+ v1-4 12) f0-10)
            (set! t9-1 (the-as none quaternion-zxy!))
            (set! a0-3 (the-as none s3-0))
            (call!)
            (set! v1-5 (the-as none #x40000))
            (set! a0-4 (the-as none (-> a2-0 flags)))
            (set! v1-6 (the-as none (logand v1-5 a0-4)))
            (nonzero? v1-6)
            )
      (set! t9-2 (the-as none quaternion*!))
      (set! a0-5 (the-as none s3-0))
      (set! a2-6 (the-as none s3-0))
      (set! a1-5 (the-as none s4-0))
      (call!)
      (set! v1-8 (the-as none v0-2))
      )
    (cond
      ((begin (set! f0-11 (the-as none (l.f (+ s3-0 12)))) (set! f1-3 (the-as none 0)) (<.s f0-11 f1-3))
       (.lvf vf1 (+ a3-0 16))
       (.lvf vf2 s3-0)
       (.sub.vf vf1 vf0 vf2 :mask #b111)
       (s.vf! (+ a3-0 16) vf1)
       (.mov v1-9 vf1)
       )
      (else
        (.lvf vf1 (+ a3-0 16))
        (.lvf vf2 s3-0)
        (.add.vf vf1 vf0 vf2 :mask #b111)
        (s.vf! (+ a3-0 16) vf1)
        (.mov v1-10 vf1)
        )
      )
    (cond
      ((begin (set! v1-11 (the-as none *sp-60-hz*)) v1-11)
       (set! v1-12 (the-as none #x40a00000))
       (set! f0-12 (the-as none (gpr->fpr v1-12)))
       (set! f1-4 (the-as none (l.f (+ a2-0 32))))
       (set! f0-13 (the-as none (*.s f0-12 f1-4)))
       (s.f! (+ a2-0 32) f0-13)
       (set! v1-13 (the-as none #x40a00000))
       (set! f0-14 (the-as none (gpr->fpr v1-13)))
       (set! f1-5 (the-as none (l.f (+ a2-0 36))))
       (set! f0-15 (the-as none (*.s f0-14 f1-5)))
       (s.f! (+ a2-0 36) f0-15)
       (set! v1-14 (the-as none #x40a00000))
       (set! f0-16 (the-as none (gpr->fpr v1-14)))
       (set! f1-6 (the-as none (l.f (+ a2-0 40))))
       (set! f0-17 (the-as none (*.s f0-16 f1-6)))
       (s.f! (+ a2-0 40) f0-17)
       (set! v1-15 (the-as none (fpr->gpr f0-17)))
       )
      (else
        (set! v1-16 (the-as none #x40c00000))
        (set! f0-18 (the-as none (gpr->fpr v1-16)))
        (set! f1-7 (the-as none (l.f (+ a2-0 32))))
        (set! f0-19 (the-as none (*.s f0-18 f1-7)))
        (s.f! (+ a2-0 32) f0-19)
        (set! v1-17 (the-as none #x40c00000))
        (set! f0-20 (the-as none (gpr->fpr v1-17)))
        (set! f1-8 (the-as none (l.f (+ a2-0 36))))
        (set! f0-21 (the-as none (*.s f0-20 f1-8)))
        (s.f! (+ a2-0 36) f0-21)
        (set! v1-18 (the-as none #x40c00000))
        (set! f0-22 (the-as none (gpr->fpr v1-18)))
        (set! f1-9 (the-as none (l.f (+ a2-0 40))))
        (set! f0-23 (the-as none (*.s f0-22 f1-9)))
        (s.f! (+ a2-0 40) f0-23)
        (set! v1-19 (the-as none (fpr->gpr f0-23)))
        )
      )
    (set! t9-3 (the-as none quaternion-zxy!))
    (set! a0-6 (the-as none (+ a2-0 80)))
    (set! a1-6 (the-as none (+ a2-0 32)))
    (call!)
    (set! v1-20 (the-as none v0-3))
    (set! v0-4 (the-as none 0))
    (ret-none)
    )
  )

;; definition for method 9 of type sparticle-launch-control
;; WARN: Return type mismatch int vs none.
(defmethod initialize sparticle-launch-control ((obj sparticle-launch-control) (arg0 sparticle-launch-group) (arg1 process))
  (with-pp
    (let ((s5-0 0))
      (set! (-> obj group) arg0)
      (set! (-> obj proc) (the-as process-drawable arg1))
      (set! (-> obj local-clock) 0)
      (set! (-> obj fade) 1.0)
      (set! (-> obj matrix) 0)
      (set! (-> obj last-spawn-frame) (the-as int (+ (-> *display* real-frame-clock integral-frame-counter) -2)))
      (set! (-> obj last-spawn-time) 0)
      (if (logtest? (-> obj group flags) (sp-group-flag unk-4))
          (quaternion->matrix (-> obj origin) (-> (the-as process-drawable arg1) root quat))
          (matrix-identity! (-> obj origin))
          )
      (when (logtest? (-> arg0 flags) (sp-group-flag unk-6))
        (let ((f0-1 (-> arg0 rotate-x))
              (f1-0 (-> arg0 rotate-y))
              (f2-0 (-> arg0 rotate-z))
              (t9-2 matrix-rotate-xyz!)
              (a0-3 (new 'stack-no-clear 'matrix))
              (a1-2 (new 'stack-no-clear 'vector))
              )
          (set! (-> a1-2 x) f0-1)
          (set! (-> a1-2 y) f1-0)
          (set! (-> a1-2 z) f2-0)
          (set! (-> a1-2 w) 1.0)
          (let ((a1-3 (t9-2 a0-3 a1-2)))
            (matrix*! (-> obj origin) a1-3 (-> obj origin))
            )
          )
        )
      (when (logtest? (-> arg0 flags) (sp-group-flag unk-7))
        (let ((a1-4 (new 'stack-no-clear 'vector)))
          (set! (-> a1-4 x) (-> arg0 scale-x))
          (set! (-> a1-4 y) (-> arg0 scale-y))
          (set! (-> a1-4 z) (-> arg0 scale-z))
          (set! (-> a1-4 w) 1.0)
          (set! (-> a1-4 w) 1.0)
          (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
          )
        )
      (dotimes (s3-0 (-> arg0 length))
        (let* ((a0-7 (-> arg0 launcher s3-0))
               (a1-6 (-> *part-id-table* (-> a0-7 launcher)))
               (v1-29 (-> obj data s5-0))
               )
          (when (nonzero? a1-6)
            (set! (-> v1-29 group-item) a0-7)
            (cond
              ((= (-> a1-6 type) sparticle-launcher)
               (set! (-> v1-29 accum) 0.0)
               (set! (-> v1-29 spawn-time) (the-as uint (+ (-> pp clock frame-counter) (seconds -100))))
               (set! (-> v1-29 offset) (the-as uint (-> a0-7 offset)))
               (set! (-> v1-29 randomize) (the-as uint 0))
               (cond
                 ((logtest? (-> a0-7 flags) (sp-group-item-flag start-dead))
                  (logclear! (-> v1-29 flags) (sp-launch-state-flags launcher-active))
                  (set! (-> v1-29 center) #f)
                  (set! (-> v1-29 sprite3d) #f)
                  (set! (-> v1-29 sprite) #f)
                  )
                 (else
                   (logior! (-> v1-29 flags) (sp-launch-state-flags launcher-active))
                   (set! (-> v1-29 center) (-> obj origin trans))
                   (set! (-> v1-29 sprite3d) #f)
                   (set! (-> v1-29 sprite) #f)
                   )
                 )
               (+! s5-0 1)
               )
              (else
                (format 0 "initialize called with non-particle-launcher~%")
                )
              )
            )
          )
        )
      (set! (-> obj length) s5-0)
      )
    0
    (none)
    )
  )

;; definition for method 9 of type sparticle-launch-group
;; WARN: Return type mismatch object vs sparticle-launch-control.
(defmethod create-launch-control sparticle-launch-group ((obj sparticle-launch-group) (arg0 process))
  (let ((gp-0 (the-as object (new 'process 'sparticle-launch-control (-> obj length)))))
    (when (zero? (the-as sparticle-launch-control gp-0))
      (go process-drawable-art-error "memory")
      (set! gp-0 0)
      (goto cfg-4)
      )
    (initialize (the-as sparticle-launch-control gp-0) obj arg0)
    (label cfg-4)
    (the-as sparticle-launch-control gp-0)
    )
  )

;; definition for method 14 of type sparticle-launch-control
;; WARN: Return type mismatch int vs none.
(defmethod kill-and-free-particles sparticle-launch-control ((obj sparticle-launch-control))
  (countdown (v1-0 (-> obj length))
    (let ((a0-4 (-> obj data v1-0)))
      (logclear! (-> a0-4 flags) (sp-launch-state-flags particles-active))
      )
    )
  (set! (-> obj local-clock) 0)
  (set! (-> obj fade) 1.0)
  (kill-all-particles-with-key obj)
  (if (> (-> obj matrix) 0)
      (sprite-release-user-hvdf (-> obj matrix))
      )
  0
  (none)
  )

;; definition for method 15 of type sparticle-launch-control
;; WARN: Return type mismatch int vs none.
(defmethod kill-particles sparticle-launch-control ((obj sparticle-launch-control))
  (kill-all-particles-with-key obj)
  0
  (none)
  )

;; definition for method 10 of type sparticle-launch-control
(defmethod sparticle-launch-control-method-10 sparticle-launch-control ((obj sparticle-launch-control) (arg0 vector))
  (let* ((v1-0 (-> obj group))
         (f0-0 (-> v1-0 bounds r))
         )
    (cond
      ((= f0-0 0.0)
       #t
       )
      ((nonzero? (-> obj matrix))
       #t
       )
      (else
        (let ((s5-1 (vector+! (new 'stack-no-clear 'vector) arg0 (the-as vector (-> v1-0 bounds)))))
          (set! (-> s5-1 w) f0-0)
          (when (or *display-sprite-marks* *display-sprite-spheres* (and *display-actor-vis* (= (-> obj proc) *debug-actor*)))
            (add-debug-sphere
              *display-sprite-spheres*
              (bucket-id bucket-324)
              s5-1
              (-> s5-1 w)
              (new 'static 'rgba :g #xff :a #x80)
              )
            (add-debug-matrix *display-sprite-marks* (bucket-id bucket-324) (-> obj origin) (meters 2.0))
            )
          (sphere-in-view-frustum? (the-as sphere s5-1))
          )
        )
      )
    )
  )

;; definition for method 12 of type sparticle-launch-control
;; INFO: Used lq/sq
(defmethod sparticle-launch-control-method-12 sparticle-launch-control ((obj sparticle-launch-control) (arg0 matrix))
  (let* ((a2-0 (-> obj origin))
         (a3-0 arg0)
         (v1-0 (-> a3-0 vector 0 quad))
         (a0-1 (-> a3-0 vector 1 quad))
         (a1-1 (-> a3-0 vector 2 quad))
         (a3-1 (-> a3-0 trans quad))
         )
    (set! (-> a2-0 vector 0 quad) v1-0)
    (set! (-> a2-0 vector 1 quad) a0-1)
    (set! (-> a2-0 vector 2 quad) a1-1)
    (set! (-> a2-0 trans quad) a3-1)
    )
  (let ((s4-0 (-> obj group)))
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-6))
      (let ((f0-0 (-> s4-0 rotate-x))
            (f1-0 (-> s4-0 rotate-y))
            (f2-0 (-> s4-0 rotate-z))
            (t9-0 matrix-rotate-xyz!)
            (a0-2 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-0)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-0 a0-2 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> s4-0 scale-x))
        (set! (-> a1-4 y) (-> s4-0 scale-y))
        (set! (-> a1-4 z) (-> s4-0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    )
  (sparticle-launch-control-method-11 obj (-> arg0 trans))
  (none)
  )

;; definition for method 13 of type sparticle-launch-control
;; INFO: Used lq/sq
(defmethod sparticle-launch-control-method-13 sparticle-launch-control ((obj sparticle-launch-control) (arg0 cspace))
  (let* ((v1-0 (-> obj origin))
         (a3-0 (-> arg0 bone transform))
         (a0-2 (-> a3-0 vector 0 quad))
         (a1-1 (-> a3-0 vector 1 quad))
         (a2-0 (-> a3-0 vector 2 quad))
         (a3-1 (-> a3-0 trans quad))
         )
    (set! (-> v1-0 vector 0 quad) a0-2)
    (set! (-> v1-0 vector 1 quad) a1-1)
    (set! (-> v1-0 vector 2 quad) a2-0)
    (set! (-> v1-0 trans quad) a3-1)
    )
  (let ((s4-0 (-> obj group)))
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-6))
      (let ((f0-0 (-> s4-0 rotate-x))
            (f1-0 (-> s4-0 rotate-y))
            (f2-0 (-> s4-0 rotate-z))
            (t9-0 matrix-rotate-xyz!)
            (a0-3 (new 'stack-no-clear 'matrix))
            (a1-2 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-2 x) f0-0)
        (set! (-> a1-2 y) f1-0)
        (set! (-> a1-2 z) f2-0)
        (set! (-> a1-2 w) 1.0)
        (let ((a1-3 (t9-0 a0-3 a1-2)))
          (matrix*! (-> obj origin) a1-3 (-> obj origin))
          )
        )
      )
    (when (logtest? (-> s4-0 flags) (sp-group-flag unk-7))
      (let ((a1-4 (new 'stack-no-clear 'vector)))
        (set! (-> a1-4 x) (-> s4-0 scale-x))
        (set! (-> a1-4 y) (-> s4-0 scale-y))
        (set! (-> a1-4 z) (-> s4-0 scale-z))
        (set! (-> a1-4 w) 1.0)
        (set! (-> a1-4 w) 1.0)
        (scale-matrix! (-> obj origin) a1-4 (-> obj origin))
        )
      )
    )
  (sparticle-launch-control-method-11 obj (vector<-cspace! (-> obj origin trans) arg0))
  (none)
  )

;; definition for method 11 of type sparticle-launch-control
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function execute-part-engine
;; INFO: Used lq/sq
;; ERROR: failed type prop at 12: Could not figure out load: (set! a1 (l.wu (+ a0 132)))
;; WARN: Return type mismatch int vs none.
(defun execute-part-engine ()
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v0-3 vector)
    (v0-4 float)
    (v0-5 none)
    (v0-6 int)
    (v1-0 engine)
    (v1-1 connectable)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-6 none)
    (v1-7 none)
    (v1-8 none)
    (v1-9 none)
    (v1-12 int)
    (v1-13 int)
    (v1-14 int)
    (v1-15 int)
    (v1-16 level)
    (v1-17 int)
    (v1-18 int)
    (v1-19 int)
    (v1-20 symbol)
    (v1-21 int)
    (v1-22 symbol)
    (v1-23 symbol)
    (v1-25 vector)
    (v1-28 level-group)
    (v1-29 int)
    (a0-1 connectable)
    (a0-2 int)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-11 none)
    (a0-12 engine)
    (a0-13 connectable)
    (a0-14 (pointer time-of-day-proc))
    (a0-15 time-of-day-proc)
    (a0-16 int)
    (a0-18 level-group)
    (a0-19 symbol)
    (a0-22 vector)
    (a0-23 connectable)
    (a0-24 int)
    (a0-25 sparticle-system)
    (a1-0 none)
    (a1-1 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-6 none)
    (a1-8 none)
    (a1-10 none)
    (a1-12 symbol)
    (a1-13 (pointer basic))
    (a1-14 connectable)
    (a2-0 none)
    (a2-1 none)
    (a2-2 none)
    (a2-5 matrix)
    (a3-0 none)
    (a3-2 vector)
    (a3-3 uint128)
    (a3-4 symbol)
    (t0-0 none)
    (t0-1 none)
    (t0-3 symbol)
    (t1-0 none)
    (t1-1 float)
    (s0-0 none)
    (s0-1 connection)
    (s1-0 connectable)
    (s1-1 int)
    (s2-0 vector)
    (s2-1 engine)
    (s3-0 matrix)
    (s3-1 int)
    (s4-0 (array sparticle-launcher))
    (s4-1 int)
    (s5-0 engine)
    (s5-1 vector)
    (t9-0 none)
    (t9-1 none)
    (t9-2 none)
    (t9-3 (function vector))
    (t9-4 (function vector vector float))
    (t9-5
      (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none)
      )
    (gp-0 sparticle-system)
    (f0-0 none)
    (f0-1 none)
    (f0-2 float)
    (f1-0 none)
    (f1-1 int)
    (sv-96 none)
    (sv-104 none)
    )
  (set! gp-0 *sp-particle-system-2d*)
  (set! s5-0 *part-engine*)
  (set! s4-0 *part-id-table*)
  (set! s3-0 (new 'stack-no-clear 'matrix))
  (set! s2-0 (new 'stack-no-clear 'vector))
  (set! v1-0 s5-0)
  (set! v1-1 (-> v1-0 alive-list next0))
  (set! a0-0 s5-0)
  (set! a0-1 v1-1)
  (set! s1-0 (-> a0-1 next0))
  (while (begin (set! a0-12 s5-0) (set! a0-13 (-> a0-12 alive-list-end)) (!= v1-1 a0-13))
    (when (begin
            (and (begin
                   (set! a0-2 (-> v1-1 param1))
                   (set! a1-0 (the-as none (l.wu (+ a0-2 132))))
                   (set! s0-0 (the-as none (l.w (+ v1-1 28))))
                   (set! a2-0 (the-as none (l.hu (+ a1-0 4))))
                   (set! a2-1 (the-as none (logand a2-0 8)))
                   (nonzero? a2-1)
                   )
                 (begin
                   (set! f0-0 (the-as none (l.f (+ a1-0 108))))
                   (set! f1-0 (the-as none (l.f (+ s0-0 12))))
                   (set! a1-1 (the-as none (<.s f0-0 f1-0)))
                   )
                 )
            a1-1
            )
      (when (begin
              (set! a1-3 (the-as none (l.w (+ v1-1 24))))
              (set! a1-4 (the-as none (sll a1-3 2)))
              (set! a1-5 (the-as none (+ a1-4 s4-0)))
              (set! a1-6 (the-as none (l.wu (+ a1-5 12))))
              (set! sv-96 a1-6)
              (set! v1-2 (the-as none (l.wu (+ v1-1 16))))
              (set! sv-104 v1-2)
              (set! v1-3 sv-96)
              (nonzero? v1-3)
              )
        (set! v1-4 sv-104)
        (set! v1-5 (the-as none (sll v1-4 5)))
        (set! v1-6 (the-as none (+ v1-5 12)))
        (set! a0-3 (the-as none (l.wu (+ a0-2 128))))
        (set! a1-8 (the-as none (+ v1-6 a0-3)))
        (set! v1-7 (the-as none s3-0))
        (set! a0-4 (the-as none (l.wu (+ a1-8 16))))
        (set! t0-0 (the-as none (+ a0-4 0)))
        (set! a0-5 (the-as none (l.q t0-0)))
        (set! a2-2 (the-as none (l.q (+ t0-0 16))))
        (set! a3-0 (the-as none (l.q (+ t0-0 32))))
        (set! t0-1 (the-as none (l.q (+ t0-0 48))))
        (s.q! v1-7 a0-5)
        (s.q! (+ v1-7 16) a2-2)
        (s.q! (+ v1-7 32) a3-0)
        (s.q! (+ v1-7 48) t0-1)
        (set! t9-0 (the-as none vector<-cspace!))
        (set! a0-6 (the-as none (+ s3-0 48)))
        (call!)
        (set! v1-8 (the-as none s2-0))
        (set! a0-7 (the-as none (l.q s0-0)))
        (s.q! v1-8 a0-7)
        (set! v1-9 (the-as none #x3f800000))
        (set! f0-1 (the-as none (gpr->fpr v1-9)))
        (s.f! (+ s2-0 12) f0-1)
        (set! t9-1 (the-as none vector-matrix*!))
        (set! a0-8 (the-as none (+ s3-0 48)))
        (set! a1-9 (the-as none s2-0))
        (set! a2-3 (the-as none s3-0))
        (call!)
        (set! t9-2 (the-as none sp-launch-particles-var))
        (set! a0-9 (the-as none gp-0))
        (set! a1-10 sv-96)
        (set! a2-4 (the-as none s3-0))
        (set! t1-0 (the-as none #x3f800000))
        (call!)
        (set! a1-11 (the-as none v0-2))
        )
      )
    (set! v1-1 (the-as connectable s1-0))
    (set! a0-10 (the-as none s5-0))
    (set! a0-11 (the-as none (l.wu s1-0)))
    (set! s1-0 (the-as connectable a0-11))
    )
  (cond
    ((begin
       (set! t9-3 camera-pos)
       (set! v0-3 (call!))
       (set! s5-1 v0-3)
       (set! v1-12 1)
       (set! a0-14 *time-of-day*)
       a0-14
       )
     (set! a0-15 (-> a0-14 0))
     (set! a0-16 (-> a0-15 hours))
     )
    (else
      (set! a0-16 0)
      )
    )
  (set! s4-1 (ash.si v1-12 a0-16))
  (set! s3-1 0)
  (while (begin (set! v1-28 *level*) (set! v1-29 (-> v1-28 length)) (<.si s3-1 v1-29))
    (when (begin
            (set! v1-13 5232)
            (set! v1-14 (*.si v1-13 s3-1))
            (set! v1-15 (+ v1-14 256))
            (set! a0-18 *level*)
            (set! v1-16 (+ v1-15 a0-18))
            (set! a0-19 'active)
            (set! a1-12 (-> v1-16 status))
            (= a1-12 a0-19)
            )
      (when (begin (set! s2-1 (-> v1-16 part-engine)) s2-1)
        (set! s1-1 (-> s2-1 length))
        (while (nonzero? s1-1)
          (when (begin
                  (or (begin
                        (set! s1-1 (+ s1-1 -1))
                        (set! v1-17 (sll s1-1 5))
                        (set! v1-18 (+ v1-17 92))
                        (set! s0-1 (+ v1-18 s2-1))
                        (set! v1-19 (-> s0-1 param3))
                        (zero? v1-19)
                        )
                      (begin
                        (set! t9-4 vector-vector-distance)
                        (set! a0-22 s5-1)
                        (set! a1-13 (&-> s0-1 param0))
                        (set! v0-4 (call! a0-22 a1-13))
                        (set! f0-2 (gpr->fpr v0-4))
                        (set! v1-21 (-> s0-1 param3))
                        (set! f1-1 (gpr->fpr v1-21))
                        (set! v1-20 (<.s f0-2 f1-1))
                        )
                      )
                  (and v1-20 (begin
                               (set! v1-23 #t)
                               (set! a0-23 (-> s0-1 prev1))
                               (set! a0-24 (logand s4-1 a0-23))
                               (cmove-#f-nonzero v1-22 a0-24 v1-23)
                               )
                       )
                  v1-22
                  )
            (set! a1-14 (-> s0-1 next1))
            (set! t9-5 sp-launch-particles-var)
            (set! a0-25 gp-0)
            (set! a2-5 *launch-matrix*)
            (set! v1-25 (-> a2-5 trans))
            (set! a3-2 (the-as vector (&-> s0-1 param0)))
            (set! a3-3 (-> a3-2 quad))
            (set! (-> v1-25 quad) a3-3)
            (set! a3-4 #f)
            (set! t0-3 #f)
            (set! t1-1 (the-as float #x3f800000))
            (call! a0-25 a1-14 a2-5 a3-4 t0-3 t1-1)
            (set! v1-26 v0-5)
            )
          )
        )
      )
    (set! s3-1 (+ s3-1 1))
    )
  (set! v0-6 0)
  (ret-none)
  )

;; definition for function sparticle-track-root
;; WARN: Return type mismatch int vs none.
(defun sparticle-track-root ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-3 (-> arg1 key proc root trans)))
    (set! (-> arg2 x) (-> v1-3 x))
    (set! (-> arg2 y) (-> v1-3 y))
    (set! (-> arg2 z) (-> v1-3 z))
    )
  0
  (none)
  )

;; definition for function sparticle-track-root-prim
;; WARN: Return type mismatch int vs none.
(defun sparticle-track-root-prim ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let ((v1-4 (-> (the-as collide-shape (-> arg1 key proc root)) root-prim prim-core)))
    (set! (-> arg2 x) (-> v1-4 world-sphere x))
    (set! (-> arg2 y) (-> v1-4 world-sphere y))
    (set! (-> arg2 z) (-> v1-4 world-sphere z))
    )
  0
  (none)
  )

;; definition for function sparticle-track-joint
;; WARN: Return type mismatch int vs none.
(defun sparticle-track-joint ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (let* ((v1-1 (-> arg1 key proc))
         (a1-1 (the int (-> arg1 user-float)))
         (v1-3 (vector<-cspace! (new 'stack-no-clear 'vector) (-> v1-1 node-list data a1-1)))
         )
    (set! (-> arg2 x) (-> v1-3 x))
    (set! (-> arg2 y) (-> v1-3 y))
    (set! (-> arg2 z) (-> v1-3 z))
    )
  0
  (none)
  )

;; definition for function sparticle-turn-to-vel
;; WARN: Return type mismatch int vs none.
(defun sparticle-turn-to-vel ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-3d))
  (local-vars (v1-1 float) (v1-2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-axis-angle! gp-0 0.0 1.0 0.0 (+ 32768.0 (vector-y-angle (-> arg1 vel-sxvel))))
      (cond
        ((< (-> gp-0 w) 0.0)
         (.lvf vf1 (&-> arg2 qx-qy-qz-sy quad))
         (.lvf vf2 (&-> gp-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg2 qx-qy-qz-sy quad) vf1)
         (.mov v1-1 vf1)
         )
        (else
          (.lvf vf1 (&-> arg2 qx-qy-qz-sy quad))
          (.lvf vf2 (&-> gp-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg2 qx-qy-qz-sy quad) vf1)
          (.mov v1-2 vf1)
          )
        )
      )
    0
    (none)
    )
  )

;; definition for function birth-func-copy-rot-color
;; WARN: Return type mismatch int vs none.
(defun birth-func-copy-rot-color ((arg0 sparticle-system)
                         (arg1 sparticle-cpuinfo)
                         (arg2 sprite-vec-data-3d)
                         (arg3 sparticle-launcher)
                         (arg4 sparticle-launch-state)
                         )
  (local-vars (v1-5 float) (v1-6 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> arg4 sprite)))
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (let* ((v1-0 arg2)
               (f0-0 (-> v1-0 qx-qy-qz-sy x))
               (f1-0 (-> v1-0 qx-qy-qz-sy y))
               (f2-0 (-> v1-0 qx-qy-qz-sy z))
               )
          (set! (-> s4-0 x) f0-0)
          (set! (-> s4-0 y) f1-0)
          (set! (-> s4-0 z) f2-0)
          (set! (-> s4-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
          )
        (quaternion-rotate-y! s4-0 s4-0 (-> s5-0 sprite flag-rot-sy z))
        (let ((v1-4 arg2))
          (cond
            ((< (-> s4-0 w) 0.0)
             (.lvf vf1 (&-> v1-4 qx-qy-qz-sy quad))
             (.lvf vf2 (&-> s4-0 vec quad))
             (.sub.vf vf1 vf0 vf2 :mask #b111)
             (.svf (&-> v1-4 qx-qy-qz-sy quad) vf1)
             (.mov v1-5 vf1)
             )
            (else
              (.lvf vf1 (&-> v1-4 qx-qy-qz-sy quad))
              (.lvf vf2 (&-> s4-0 vec quad))
              (.add.vf vf1 vf0 vf2 :mask #b111)
              (.svf (&-> v1-4 qx-qy-qz-sy quad) vf1)
              (.mov v1-6 vf1)
              )
            )
          )
        )
      (set! (-> arg2 r-g-b-a x) (-> s5-0 sprite r-g-b-a x))
      (set! (-> arg2 r-g-b-a y) (-> s5-0 sprite r-g-b-a y))
      (set! (-> arg2 r-g-b-a z) (-> s5-0 sprite r-g-b-a z))
      )
    0
    (none)
    )
  )

;; definition for symbol *global-toggle*, type int
(define *global-toggle* 0)

;; definition for function birth-func-copy2-rot-color
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun birth-func-copy2-rot-color ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (local-vars (v1-18 float) (v1-19 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (-> arg4 sprite)))
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (let* ((v1-0 arg2)
               (f0-0 (-> v1-0 qx-qy-qz-sy x))
               (f1-0 (-> v1-0 qx-qy-qz-sy y))
               (f2-0 (-> v1-0 qx-qy-qz-sy z))
               )
          (set! (-> s4-0 x) f0-0)
          (set! (-> s4-0 y) f1-0)
          (set! (-> s4-0 z) f2-0)
          (set! (-> s4-0 w) (sqrtf (- (- (- 1.0 (* f2-0 f2-0)) (* f1-0 f1-0)) (* f0-0 f0-0))))
          )
        (let ((a1-1 (new-stack-vector0)))
          (set! (-> a1-1 y) (-> s5-0 sprite flag-rot-sy z))
          (set! (-> a1-1 z) (if (logtest? *global-toggle* 1)
                                (the float (sar (shl (the int (- 16384.0 (-> s5-0 sprite x-y-z-sx w))) 48) 48))
                                (the float (sar (shl (the int (+ 16384.0 (-> s5-0 sprite x-y-z-sx w))) 48) 48))
                                )
                )
          (quaternion-zxy! s4-0 a1-1)
          )
        (let ((v1-17 arg2))
          (cond
            ((< (-> s4-0 w) 0.0)
             (.lvf vf1 (&-> v1-17 qx-qy-qz-sy quad))
             (.lvf vf2 (&-> s4-0 vec quad))
             (.sub.vf vf1 vf0 vf2 :mask #b111)
             (.svf (&-> v1-17 qx-qy-qz-sy quad) vf1)
             (.mov v1-18 vf1)
             )
            (else
              (.lvf vf1 (&-> v1-17 qx-qy-qz-sy quad))
              (.lvf vf2 (&-> s4-0 vec quad))
              (.add.vf vf1 vf0 vf2 :mask #b111)
              (.svf (&-> v1-17 qx-qy-qz-sy quad) vf1)
              (.mov v1-19 vf1)
              )
            )
          )
        )
      (set! (-> arg2 r-g-b-a x) (-> s5-0 sprite r-g-b-a x))
      (set! (-> arg2 r-g-b-a y) (-> s5-0 sprite r-g-b-a y))
      (set! (-> arg2 r-g-b-a z) (-> s5-0 sprite r-g-b-a z))
      )
    (set! *global-toggle* (+ *global-toggle* 1))
    0
    (none)
    )
  )

;; definition for function birth-func-copy-omega-to-z
;; WARN: Return type mismatch int vs none.
(defun birth-func-copy-omega-to-z ((arg0 sparticle-system)
                          (arg1 sparticle-cpuinfo)
                          (arg2 sprite-vec-data-3d)
                          (arg3 sparticle-launcher)
                          (arg4 sparticle-launch-state)
                          )
  (set! (-> arg2 qx-qy-qz-sy z) (+ -16384.0 (-> arg1 omega)))
  (set! (-> arg1 next-time) (-> arg4 sprite next-time))
  (set! (-> arg2 x-y-z-sx w) (* 163.85638 (the float (-> arg4 sprite next-time))))
  0
  (none)
  )

;; definition for function birth-func-random-next-time
;; WARN: Return type mismatch int vs none.
(defun birth-func-random-next-time ((arg0 sparticle-system)
                           (arg1 sparticle-cpuinfo)
                           (arg2 sprite-vec-data-3d)
                           (arg3 sparticle-launcher)
                           (arg4 sparticle-launch-state)
                           )
  (set! (-> arg1 next-time) (the-as uint (the int (rand-vu-float-range 0.0 (-> arg1 user-float)))))
  0
  (none)
  )

;; definition for function sparticle-respawn-heights
;; INFO: Used lq/sq
;; ERROR: failed type prop at 12: Could not figure out load: (set! v1 (l.w (+ gp 16)))
(defun sparticle-respawn-heights ((a0-0 sparticle-system) (a1-0 sparticle-cpuinfo) (a2-0 vector))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v1-0 none)
    (v1-1 symbol)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-7 none)
    (v1-8 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (v1-14 none)
    (v1-15 none)
    (v1-16 none)
    (v1-17 none)
    (a0-1 none)
    (a1-2 none)
    (a1-3 none)
    (a2-1 none)
    (a3-0 none)
    (a3-1 none)
    (t1-0 none)
    (s1-0 none)
    (s2-0 none)
    (s3-0 none)
    (s5-1 none)
    (t9-0 none)
    (t9-1 none)
    (gp-0 float)
    (sp-0 none)
    (f0-0 float)
    (f0-1 float)
    (f0-2 none)
    (f0-3 none)
    (f0-4 none)
    (f0-5 none)
    (f0-6 none)
    (f0-7 none)
    (f1-0 float)
    (f1-1 none)
    (f1-2 none)
    (f1-3 none)
    )
  (when (begin
          (and (begin (set! gp-0 (-> a1-0 user-float)) (nonzero? gp-0))
               (or (begin
                     (and (begin (set! f0-0 (-> a1-0 vel-sxvel y)) (set! f1-0 (the-as float 0)) (set! v1-1 (<.s f0-0 f1-0)) v1-1)
                          (begin
                            (set! f0-1 (-> a2-0 y))
                            (set! v1-3 (the-as none (l.w (+ gp-0 16))))
                            (set! f1-1 (the-as none (gpr->fpr v1-3)))
                            (set! v1-2 (the-as none (<.s f0-1 f1-1)))
                            )
                          )
                     v1-2
                     )
                   (and (begin
                          (set! f0-2 (the-as none 0))
                          (set! f1-2 (the-as none (l.f (+ a1-0 20))))
                          (set! v1-4 (the-as none (<.s f0-2 f1-2)))
                          v1-4
                          )
                        (begin
                          (set! v1-5 (the-as none (l.w (+ gp-0 20))))
                          (set! f0-3 (the-as none (gpr->fpr v1-5)))
                          (set! f1-3 (the-as none (l.f (+ a2-0 4))))
                          (set! v1-0 (the-as none (<.s f0-3 f1-3)))
                          )
                        )
                   )
               )
          v1-0
          )
    (when (begin
            (set! t9-0 (the-as none sp-kill-particle))
            (set! a1-1 (the-as none a1-0))
            (call!)
            (set! v1-7 (the-as none (l.w gp-0)))
            (set! s3-0 (the-as none (+ v1-7 -1)))
            (set! v1-8 (the-as none 2))
            (<.si v1-8 s3-0)
            )
      (if (begin (set! s2-0 (the-as none (+ sp-0 16))) (set! v1-10 (the-as none (l.w (+ gp-0 12)))) (zero? v1-10))
          (set! s1-0 (the-as none *sp-particle-system-2d*))
          (set! s1-0 (the-as none *sp-particle-system-3d*))
          )
      (set! v1-11 (the-as none s2-0))
      (set! f0-4 (the-as none (l.f a2-0)))
      (s.f! v1-11 f0-4)
      (set! f0-5 (the-as none (l.f (+ a1-0 108))))
      (s.f! (+ v1-11 4) f0-5)
      (set! f0-6 (the-as none (l.f (+ a2-0 8))))
      (s.f! (+ v1-11 8) f0-6)
      (set! a0-1 (the-as none #x3f800000))
      (set! f0-7 (the-as none (gpr->fpr a0-1)))
      (s.f! (+ v1-11 12) f0-7)
      (set! s5-1 (the-as none 3))
      (while (>=.si s3-0 s5-1)
        (set! t9-1 (the-as none sp-launch-particles-var))
        (set! a0-2 (the-as none s1-0))
        (set! v1-12 (the-as none (sll s5-1 2)))
        (set! v1-13 (the-as none (+ v1-12 gp-0)))
        (set! v1-14 (the-as none (l.w (+ v1-13 12))))
        (set! v1-15 (the-as none (sll v1-14 2)))
        (set! a1-2 (the-as none *part-id-table*))
        (set! v1-16 (the-as none (+ v1-15 a1-2)))
        (set! a1-3 (the-as none (l.wu (+ v1-16 12))))
        (set! a2-1 (the-as none *launch-matrix*))
        (set! v1-17 (the-as none (+ a2-1 48)))
        (set! a3-0 (the-as none s2-0))
        (set! a3-1 (the-as none (l.q a3-0)))
        (s.q! v1-17 a3-1)
        (set! t1-0 (the-as none #x3f800000))
        (call!)
        (set! s5-1 (the-as none (+ s5-1 1)))
        )
      )
    )
  (set! v0-2 (the-as none 0))
  (ret-none)
  )

;; definition for function sparticle-respawn-timer
;; INFO: Used lq/sq
;; ERROR: failed type prop at 9: Could not figure out load: (set! v1 (l.w gp))
(defun sparticle-respawn-timer ((a0-0 sparticle-system) (a1-0 sparticle-cpuinfo) (a2-0 vector))
  (local-vars
    (v0-0 symbol)
    (v0-1 none)
    (v0-2 none)
    (v1-0 int)
    (v1-3 none)
    (v1-4 none)
    (v1-6 none)
    (v1-7 none)
    (v1-8 none)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (a0-1 none)
    (a1-1 sparticle-cpuinfo)
    (a1-2 none)
    (a1-3 none)
    (a2-1 none)
    (a3-0 none)
    (a3-1 none)
    (t1-0 none)
    (s2-1 none)
    (s3-0 none)
    (s4-0 none)
    (s5-0 none)
    (t9-0 (function sparticle-system sparticle-cpuinfo symbol))
    (t9-1 none)
    (gp-0 float)
    (sp-0 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    )
  (when (begin (set! v1-0 (-> a1-0 timer)) (<=0.si v1-0))
    (when (begin (set! gp-0 (-> a1-0 user-float)) (nonzero? gp-0))
      (when (begin
              (set! t9-0 sp-kill-particle)
              (set! a1-1 a1-0)
              (call! a0-0 a1-1)
              (set! v1-3 (the-as none (l.w gp-0)))
              (set! s5-0 (the-as none (+ v1-3 -1)))
              (set! v1-4 (the-as none 2))
              (<.si v1-4 s5-0)
              )
        (if (begin (set! s4-0 (the-as none (+ sp-0 16))) (set! v1-6 (the-as none (l.w (+ gp-0 12)))) (zero? v1-6))
            (set! s3-0 (the-as none *sp-particle-system-2d*))
            (set! s3-0 (the-as none *sp-particle-system-3d*))
            )
        (set! v1-7 (the-as none s4-0))
        (set! f0-0 (the-as none (l.f a2-0)))
        (s.f! v1-7 f0-0)
        (set! f0-1 (the-as none (l.f (+ a1-0 108))))
        (s.f! (+ v1-7 4) f0-1)
        (set! f0-2 (the-as none (l.f (+ a2-0 8))))
        (s.f! (+ v1-7 8) f0-2)
        (set! a0-1 (the-as none #x3f800000))
        (set! f0-3 (the-as none (gpr->fpr a0-1)))
        (s.f! (+ v1-7 12) f0-3)
        (set! s2-1 (the-as none 3))
        (while (>=.si s5-0 s2-1)
          (set! t9-1 (the-as none sp-launch-particles-var))
          (set! a0-2 (the-as none s3-0))
          (set! v1-8 (the-as none (sll s2-1 2)))
          (set! v1-9 (the-as none (+ v1-8 gp-0)))
          (set! v1-10 (the-as none (l.w (+ v1-9 12))))
          (set! v1-11 (the-as none (sll v1-10 2)))
          (set! a1-2 (the-as none *part-id-table*))
          (set! v1-12 (the-as none (+ v1-11 a1-2)))
          (set! a1-3 (the-as none (l.wu (+ v1-12 12))))
          (set! a2-1 (the-as none *launch-matrix*))
          (set! v1-13 (the-as none (+ a2-1 48)))
          (set! a3-0 (the-as none s4-0))
          (set! a3-1 (the-as none (l.q a3-0)))
          (s.q! v1-13 a3-1)
          (set! t1-0 (the-as none #x3f800000))
          (call!)
          (set! s2-1 (the-as none (+ s2-1 1)))
          )
        )
      )
    )
  (set! v0-2 (the-as none 0))
  (ret-none)
  )

;; definition for function sparticle-texture-animate
;; ERROR: failed type prop at 2: Could not figure out load: (set! a0 (l.w (+ v1 20)))
(defun sparticle-texture-animate ((a0-0 sparticle-system) (a1-0 sparticle-cpuinfo) (a2-0 vector))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v1-0 float)
    (v1-1 none)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (a0-2 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-9 none)
    (a0-11 none)
    (a0-13 none)
    (a0-14 none)
    (a0-15 none)
    (a0-17 none)
    (a2-1 none)
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a2-5 none)
    (a2-6 none)
    (a2-7 none)
    (a3-0 none)
    (a3-1 none)
    (a3-2 none)
    (a3-3 none)
    (a3-4 none)
    (a3-5 none)
    (a3-6 none)
    (a3-7 none)
    (t0-0 none)
    (t0-1 none)
    (t0-2 none)
    (t0-3 none)
    (t0-4 none)
    (t9-0 none)
    (t9-1 none)
    )
  (when (begin (set! v1-0 (-> a1-0 user-float)) (nonzero? v1-0))
    (cond
      ((begin
         (when (begin (set! a0-2 (the-as none (l.w (+ v1-0 20)))) (zero? a0-2))
           (set! a0-4 (the-as none (l.w (+ a1-0 100))))
           (s.w! (+ v1-0 20) a0-4)
           )
         (cond
           ((begin
              (set! a0-5 (the-as none (l.w v1-0)))
              (set! a0-6 (the-as none (+ a0-5 -3)))
              (set! a2-1 (the-as none (l.w (+ v1-0 12))))
              (set! a3-0 (the-as none (l.w (+ v1-0 20))))
              (set! t0-0 (the-as none (l.w (+ a1-0 100))))
              (<0.si t0-0)
              )
            (set! a3-1 (the-as none *display*))
            (set! a3-2 (the-as none (l.wu (+ a3-1 44))))
            (set! t0-1 (the-as none (l.d (+ a3-2 20))))
            )
           (else
             (set! t0-2 (the-as none (l.w (+ a1-0 100))))
             (set! t0-1 (the-as none (- a3-0 t0-2)))
             )
           )
         (set! a3-3 (the-as none (l.w (+ v1-0 16))))
         (zero? a3-3)
         )
       (when (begin
               (set! a3-4 (the-as none 0))
               (set! a2-2 (the-as none (/.si t0-1 a2-1)))
               (set! t0-3 (the-as none (l.hu (+ a1-0 130))))
               (set! a2-3 (the-as none (+ a2-2 t0-3)))
               (set! a2-4 (the-as none a2-3))
               (set! a0-7 (the-as none (+ a0-6 -1)))
               (set! a2-5 (the-as none (min.si a2-4 a0-7)))
               (set! a3-5 (the-as none (max.si a3-4 a2-5)))
               (set! a0-8 (the-as none (+ a3-5 3)))
               (set! a0-9 (the-as none (sll a0-8 2)))
               (set! v1-1 (the-as none (+ a0-9 v1-0)))
               (set! v1-2 (the-as none (l.w (+ v1-1 12))))
               (nonzero? v1-2)
               )
         (set! t9-0 (the-as none particle-adgif-callback))
         (set! a0-11 (the-as none (l.wu (+ a1-0 4))))
         (set! a1-1 (the-as none v1-2))
         (call!)
         (set! a0-12 (the-as none v0-0))
         )
       )
      (else
        (when (begin
                (set! a3-6 (the-as none 0))
                (set! a2-6 (the-as none (/.si t0-1 a2-1)))
                (set! t0-4 (the-as none (l.hu (+ a1-0 130))))
                (set! a2-7 (the-as none (+ a2-6 t0-4)))
                (set! a3-7 (the-as none (max.si a3-6 a2-7)))
                (set! a0-13 (the-as none (mod.si a3-7 a0-6)))
                (set! a0-14 (the-as none (+ a0-13 3)))
                (set! a0-15 (the-as none (sll a0-14 2)))
                (set! v1-3 (the-as none (+ a0-15 v1-0)))
                (set! v1-4 (the-as none (l.w (+ v1-3 12))))
                (nonzero? v1-4)
                )
          (set! t9-1 (the-as none particle-adgif-callback))
          (set! a0-17 (the-as none (l.wu (+ a1-0 4))))
          (set! a1-2 (the-as none v1-4))
          (call!)
          (set! a0-18 (the-as none v0-1))
          )
        )
      )
    )
  (ret-none)
  )

;; definition for function sparticle-texture-day-night
;; INFO: Used lq/sq
;; ERROR: failed type prop at 21: Could not figure out load: (set! a1 (l.w (+ s2 40)))
;; ERROR: Bad vector register dependency: vf1
;; ERROR: Bad vector register dependency: vf2
(defun sparticle-texture-day-night ((a0-0 sparticle-system) (a1-0 sparticle-cpuinfo) (a2-0 vector))
  (local-vars
    (v0-0 float)
    (v0-1 none)
    (v0-2 none)
    (v1-1 (pointer time-of-day-proc))
    (v1-2 time-of-day-proc)
    (v1-3 symbol)
    (v1-4 int)
    (v1-6 none)
    (v1-7 none)
    (v1-8 uint128)
    (v1-9 uint128)
    (v1-10 uint128)
    (v1-11 none)
    (v1-12 uint128)
    (v1-13 uint128)
    (v1-14 uint128)
    (v1-15 none)
    (v1-16 none)
    (v1-17 none)
    (v1-20 none)
    (v1-21 none)
    (v1-22 uint128)
    (v1-23 uint128)
    (v1-24 uint128)
    (v1-25 none)
    (v1-26 uint128)
    (v1-27 uint128)
    (v1-28 uint128)
    (v1-29 none)
    (v1-30 none)
    (v1-31 none)
    (v1-33 none)
    (a0-1 symbol)
    (a0-2 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a0-13 none)
    (a1-1 none)
    (a1-2 none)
    (t7-0 none)
    (t7-1 none)
    (t7-2 none)
    (t7-3 none)
    (t7-4 none)
    (t7-5 none)
    (s1-0 int)
    (s2-0 float)
    (s3-0 float)
    (s4-0 float)
    (t9-0 (function float))
    (t9-1 none)
    (t9-2 none)
    (f0-0 float)
    )
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         )
    (when (begin (set! s2-0 (-> a1-0 user-float)) (nonzero? s2-0))
      (cond
        ((begin
           (or (begin
                 (cond
                   ((begin (set! v1-1 *time-of-day*) v1-1)
                    (set! v1-2 (-> v1-1 0))
                    (set! s1-0 (-> v1-2 hours))
                    )
                   (else
                     (set! s1-0 (the-as int 0))
                     )
                   )
                 (set! t9-0 rand-vu)
                 (set! v0-0 (call!))
                 (set! f0-0 (gpr->fpr v0-0))
                 (.mov s4-0 vf1)
                 (.mov s3-0 vf2)
                 (set! a0-1 (<.si s1-0 6))
                 a0-1
                 )
               (begin (set! v1-4 18) (set! v1-3 (<.si v1-4 s1-0)))
               )
           v1-3
           )
         (when (begin (set! a1-1 (the-as none (l.w (+ s2-0 40)))) (nonzero? a1-1))
           (when (begin
                   (set! v1-6 (the-as none (fpr->gpr f0-0)))
                   (.mov vf2 v1-6)
                   (set! v1-7 (the-as none (l.w (+ s2-0 48))))
                   (set! v1-8 (the-as uint128 (pcypld 0 v1-7)))
                   (.pextlb v1-9 0 v1-8)
                   (.pextlb v1-10 0 v1-9)
                   (.mov vf1 v1-10)
                   (.itof.vf vf1 vf1)
                   (.mul.x.vf vf1 vf1 vf2)
                   (set! v1-11 (the-as none (l.w (+ s2-0 44))))
                   (set! v1-12 (the-as uint128 (pcypld 0 v1-11)))
                   (.pextlb v1-13 0 v1-12)
                   (.pextlb v1-14 0 v1-13)
                   (.mov vf2 v1-14)
                   (.itof.vf vf2 vf2)
                   (.add.vf vf1 vf1 vf2)
                   (set! v1-15 (the-as none (l.w (+ a1-0 104))))
                   (set! a0-2 (the-as none (l.w (+ s2-0 52))))
                   (nonzero? a0-2)
                   )
             (set! a0-4 (the-as none *time-of-day-context*))
             (.lvf vf2 (+ a0-4 108))
             (.mul.vf vf1 vf1 vf2)
             (.mov a0-5 vf1)
             )
           (set! v1-16 (the-as none (logand v1-15 #x4000)))
           (.mov t7-0 vf1)
           (set! v1-17 (the-as none (sra v1-16 14)))
           (set! a0-6 (the-as none -2))
           (set! t7-1 (the-as none (logand t7-0 a0-6)))
           (set! t7-2 (the-as none (logior t7-1 v1-17)))
           (s.q! (+ a2-0 32) t7-2)
           (set! t9-1 (the-as none particle-adgif-callback))
           (set! a0-7 (the-as none (l.wu (+ a1-0 4))))
           (call!)
           (set! v1-18 (the-as none v0-1))
           )
         )
        (else
          (when (begin (set! a1-2 (the-as none (l.w (+ s2-0 24)))) (nonzero? a1-2))
            (when (begin
                    (set! v1-20 (the-as none (fpr->gpr f0-0)))
                    (.mov vf2 v1-20)
                    (set! v1-21 (the-as none (l.w (+ s2-0 32))))
                    (set! v1-22 (the-as uint128 (pcypld 0 v1-21)))
                    (.pextlb v1-23 0 v1-22)
                    (.pextlb v1-24 0 v1-23)
                    (.mov vf1 v1-24)
                    (.itof.vf vf1 vf1)
                    (.mul.x.vf vf1 vf1 vf2)
                    (set! v1-25 (the-as none (l.w (+ s2-0 28))))
                    (set! v1-26 (the-as uint128 (pcypld 0 v1-25)))
                    (.pextlb v1-27 0 v1-26)
                    (.pextlb v1-28 0 v1-27)
                    (.mov vf2 v1-28)
                    (.itof.vf vf2 vf2)
                    (.add.vf vf1 vf1 vf2)
                    (set! v1-29 (the-as none (l.w (+ a1-0 104))))
                    (set! a0-8 (the-as none (l.w (+ s2-0 36))))
                    (nonzero? a0-8)
                    )
              (set! a0-10 (the-as none *time-of-day-context*))
              (.lvf vf2 (+ a0-10 108))
              (.mul.vf vf1 vf1 vf2)
              (.mov a0-11 vf1)
              )
            (set! v1-30 (the-as none (logand v1-29 #x4000)))
            (.mov t7-3 vf1)
            (set! v1-31 (the-as none (sra v1-30 14)))
            (set! a0-12 (the-as none -2))
            (set! t7-4 (the-as none (logand t7-3 a0-12)))
            (set! t7-5 (the-as none (logior t7-4 v1-31)))
            (s.q! (+ a2-0 32) t7-5)
            (set! t9-2 (the-as none particle-adgif-callback))
            (set! a0-13 (the-as none (l.wu (+ a1-0 4))))
            (call!)
            (set! v1-32 (the-as none v0-2))
            )
          )
        )
      (.mov vf1 s4-0)
      (.mov vf2 s3-0)
      (.mov v1-33 vf2)
      )
    (ret-none)
    )
  )

;; definition for function sparticle-mode-animate
;; ERROR: failed type prop at 5: Could not figure out load: (set! a1 (l.w (+ v1 12)))
(defun sparticle-mode-animate ((a0-0 sparticle-system) (a1-0 sparticle-cpuinfo) (a2-0 vector))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v1-0 float)
    (a0-1 sparticle-launch-control)
    (a0-2 none)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a0-13 none)
    (a0-14 none)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-6 none)
    (a1-7 none)
    (a1-8 none)
    (a1-10 none)
    (a1-11 none)
    (a1-12 none)
    (a2-3 none)
    (a2-4 none)
    (a2-5 none)
    (a2-6 none)
    (a2-7 none)
    (a2-8 none)
    (a2-9 none)
    (a2-10 none)
    (a2-11 none)
    (a2-12 none)
    (a2-13 none)
    (a2-14 none)
    (a3-0 none)
    (a3-1 none)
    (a3-2 none)
    (s4-0 none)
    (t9-0 none)
    (t9-1 none)
    (t9-2 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    )
  (when (begin (set! a0-1 (-> a1-0 key)) (set! v1-0 (-> a1-0 user-float)) (nonzero? v1-0))
    (when (begin
            (set! a1-1 (the-as none (l.w (+ v1-0 12))))
            (set! a1-2 (the-as none (l.w (+ a1-1 -1))))
            (nonzero? a1-2)
            )
      (when (begin
              (set! a2-3 (the-as none (l.bu (+ a0-1 29))))
              (set! a2-4 (the-as none (+ a2-3 1)))
              (set! a2-5 (the-as none a2-4))
              (set! a3-0 (the-as none (l.w a1-2)))
              (set! a3-1 (the-as none (+ a3-0 -1)))
              (set! a2-6 (the-as none (min.si a2-5 a3-1)))
              (set! a2-7 (the-as none (sll a2-6 2)))
              (set! a1-3 (the-as none (+ a2-7 a1-2)))
              (set! a1-4 (the-as none (l.wu (+ a1-3 12))))
              (set! a0-2 (the-as none (l.wu (+ a0-1 32))))
              (set! a2-8 (the-as none (l.w (+ a1-4 12))))
              (set! a2-9 (the-as none (sra a2-8 3)))
              (set! a0-3 (the-as none (/.ui a0-2 a2-9)))
              (set! a2-10 (the-as none (l.w a1-4)))
              (set! a2-11 (the-as none (+ a2-10 -1)))
              (set! a0-4 (the-as none (mod.si a0-3 a2-11)))
              (set! a0-5 (the-as none (+ a0-4 1)))
              (set! a0-6 (the-as none (sll a0-5 2)))
              (set! a0-7 (the-as none (+ a0-6 a1-4)))
              (set! a0-8 (the-as none (l.w (+ a0-7 12))))
              (set! a1-5 (the-as none (l.w (+ v1-0 16))))
              (set! a1-6 (the-as none (sra a1-5 3)))
              (set! a2-12 (the-as none (sra a1-6 6)))
              (set! a2-13 (the-as none (sll a2-12 3)))
              (set! a0-9 (the-as none (+ a0-8 a2-13)))
              (set! a2-14 (the-as none (l.d a0-9)))
              (set! a0-10 (the-as none #t))
              (set! a3-2 (the-as none 1))
              (set! a1-7 (the-as none (logand a1-6 63)))
              (set! a1-8 (the-as none (ash.si a3-2 a1-7)))
              (if (begin (set! a1-10 (the-as none (logand a2-14 a1-8))) (cmove-#f-zero a0-11 a1-10 a0-10) a0-11)
                  (set! s4-0 (the-as none (l.w (+ v1-0 24))))
                  (set! s4-0 (the-as none (l.w (+ v1-0 20))))
                  )
              (cond
                (a0-11
                  (set! t9-0 (the-as none rand-vu-float-range))
                  (set! a0-12 (the-as none #x42800000))
                  (set! a1-11 (the-as none #x43400000))
                  (set! v0-0 (the-as none (call!)))
                  (set! f0-0 (the-as none (gpr->fpr v0-0)))
                  (s.f! (+ a2-0 32) f0-0)
                  (set! v1-1 (the-as none (fpr->gpr f0-0)))
                  )
                (else
                  (set! t9-1 (the-as none rand-vu-float-range))
                  (set! a0-13 (the-as none #x42000000))
                  (set! a1-12 (the-as none #x42400000))
                  (set! v0-1 (the-as none (call!)))
                  (set! f0-1 (the-as none (gpr->fpr v0-1)))
                  (s.f! (+ a2-0 32) f0-1)
                  (set! v1-2 (the-as none (fpr->gpr f0-1)))
                  )
                )
              (set! f0-2 (the-as none (l.f (+ a2-0 32))))
              (s.f! (+ a2-0 36) f0-2)
              (set! f0-3 (the-as none (l.f (+ a2-0 32))))
              (s.f! (+ a2-0 40) f0-3)
              (nonzero? s4-0)
              )
        (set! t9-2 (the-as none particle-adgif-callback))
        (set! a0-14 (the-as none (l.wu (+ a1-0 4))))
        (set! a1-13 (the-as none s4-0))
        (call!)
        (set! a2-16 (the-as none v0-2))
        )
      )
    )
  (set! v0-3 (the-as none 0))
  (ret-none)
  )

;; definition for function sparticle-motion-blur
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; ERROR: Expression building failed: In sparticle-motion-blur: [OP: 78] - Floating point math attempted on invalid types: uint and float in op (-.s f2-0 f3-0).
;; ERROR: Inline assembly instruction marked with TODO - [TODO.VCLIP]
;; ERROR: Unsupported inline assembly instruction kind - [cfc2.i v1, Clipping]
;; ERROR: Inline assembly instruction marked with TODO - [TODO.VCLIP]
;; ERROR: Unsupported inline assembly instruction kind - [cfc2.i v1, Clipping]
;; ERROR: Unsupported inline assembly instruction kind - [mula.s f3, f3]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f3, f4, f4]
;; ERROR: Unsupported inline assembly instruction kind - [mula.s f0, f3]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f0, f2, f5]
(defun sparticle-motion-blur ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (local-vars
    (v0-0 float)
    (v0-1 int)
    (v1-0 math-camera)
    (v1-1 int)
    (v1-2 int)
    (v1-3 int)
    (v1-4 int)
    (v1-5 float)
    (a0-1 int)
    (a0-2 uint128)
    (a0-3 int)
    (a0-4 float)
    (a0-5 float)
    (a0-6 uint)
    (a0-7 float)
    (a0-8 int)
    (a1-1 int)
    (a1-2 uint128)
    (a1-3 uint128)
    (a1-4 uint)
    (a1-5 float)
    (a1-6 float)
    (a1-7 int)
    (a2-1 uint128)
    (a2-2 uint128)
    (a2-3 float)
    (s4-0 float)
    (s5-0 uint)
    (t9-0 (function float float float))
    (f0-0 float)
    (f0-1 float)
    (f0-2 float)
    (f0-3 float)
    (f0-4 float)
    (f0-5 float)
    (f0-6 float)
    (f0-7 float)
    (f0-8 float)
    (f1-0 float)
    (f1-1 float)
    (f1-2 float)
    (f1-3 float)
    (f2-0 uint)
    (f2-1 float)
    (f2-2 float)
    (f2-3 float)
    (f2-4 float)
    (f3-0 float)
    (f3-1 float)
    (f3-2 float)
    (f3-3 float)
    (f3-4 int)
    (f4-0 float)
    (f4-1 uint)
    (f4-2 float)
    (f5-0 int)
    )
  (rlet ((acc :class vf)
         (Q :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf10 :class vf)
         (vf11 :class vf)
         (vf12 :class vf)
         (vf13 :class vf)
         (vf2 :class vf)
         (vf24 :class vf)
         (vf25 :class vf)
         (vf26 :class vf)
         (vf27 :class vf)
         (vf29 :class vf)
         (vf3 :class vf)
         (vf30 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         (vf9 :class vf)
         )
    (init-vf0-vector)
    (set! a0-1 #xffff)
    (set! v1-0 *math-camera*)
    (set! a1-1 (shl a0-1 48))
    (set! a0-2 (-> arg1 vel-sxvel quad))
    (.lvf vf1 (&-> arg2 quad))
    (.pceqw a2-1 a0-2 0)
    (.lvf vf24 (&-> v1-0 camera-temp vector 0 quad))
    (.ppach a2-2 (the-as uint128 0) a2-1)
    (.lvf vf25 (&-> v1-0 camera-temp vector 1 quad))
    (set! a1-2 (logior a2-2 a1-1))
    (.lvf vf26 (&-> v1-0 camera-temp vector 2 quad))
    (set! a1-3 (+ a1-2 1))
    (.lvf vf27 (&-> v1-0 camera-temp trans quad))
    ((b! (zero? a1-3) L36 (.qmtc2.i vf4 a0-2)) (.mov vf4 a0-2))
    (set! a0-3 #x42000000)
    (.lvf vf30 (&-> v1-0 hvdf-off quad))
    (.lvf vf29 (&-> v1-0 hmge-scale quad))
    (.mul.x.vf acc vf24 vf1)
    (.add.mul.y.vf acc vf25 vf1 acc)
    (.add.mul.z.vf acc vf26 vf1 acc)
    (.add.mul.w.vf vf10 vf27 vf0 acc)
    (.mov vf5 a0-3)
    (.mul.vf vf12 vf10 vf29)
    (.mul.w.vf acc vf1 vf0)
    (.add.mul.x.vf vf1 vf4 vf5 acc)
    (.div.vf Q vf0 vf12 :fsf #b11 :ftf #b11)
    (TODO.VCLIP vf12 vf12)
    (.mul.x.vf acc vf24 vf1)
    (.add.mul.y.vf acc vf25 vf1 acc)
    (.add.mul.z.vf acc vf26 vf1 acc)
    (.add.mul.w.vf vf11 vf27 vf0 acc)
    (.wait.vf)
    (.cfc2.i v1-1 Clipping)
    (.mul.vf vf10 vf10 Q :mask #b111)
    (.mul.vf vf13 vf11 vf29)
    (set! v1-2 (logand v1-1 63))
    ((b! (nonzero? v1-2) L36 (.vadd.xyzw vf10 vf10 vf30)) (.add.vf vf10 vf10 vf30))
    (.div.vf Q vf0 vf13 :fsf #b11 :ftf #b11)
    (TODO.VCLIP vf13 vf13)
    (.max.x.vf vf10 vf10 vf0 :mask #b1000)
    (vftoi4.xyzw vf2 vf10)
    (.wait.vf)
    (.mul.vf vf11 vf11 Q :mask #b111)
    (.cfc2.i v1-3 Clipping)
    (.itof.vf vf6 vf2)
    (.add.vf vf11 vf11 vf30)
    (set! v1-4 (logand v1-3 63))
    ((b! (nonzero? v1-4) L36 (.vdiv Q vf0 .w vf6 .z)) (.div.vf Q vf0 vf6 :fsf #b11 :ftf #b10))
    (.max.x.vf vf11 vf11 vf0 :mask #b1000)
    (.add.w.vf vf9 vf0 vf0 :mask #b1)
    (vftoi4.xyzw vf3 vf11)
    (.itof.vf vf7 vf3)
    (.sub.vf vf8 vf7 vf6 :mask #b11)
    (.mov s4-0 vf8)
    (set! s5-0 (sar (the-as int s4-0) 32))
    (.mul.vf vf9 vf9 Q :mask #b1)
    (set! t9-0 atan)
    (set! a0-4 s4-0)
    (set! a1-4 s5-0)
    (set! v0-0 (atan s4-0 (the-as float s5-0)))
    (set! a0-5 v0-0)
    (set! v1-5 (-> arg1 omega))
    (set! a1-5 -16384.0)
    (set! f0-0 -16384.0)
    (set! f1-0 a0-5)
    (set! f0-1 (+ -16384.0 a0-5))
    (s.f! (+ arg2 24) f0-1)
    ((b! (zero? v1-5) L37 (.qmfc2.i a0-6 vf9)) (.mov a0-6 vf9))
    (set! f2-0 (gpr->fpr a0-6))
    (set! a0-7 1.0)
    (set! f1-1 0.0)
    (set! a1-6 0.000001)
    (set! a2-3 0.00000014285715)
    (set! f0-2 a0-7)
    (set! f3-0 a1-6)
    (set! f4-0 a2-3)
    (set! f2-1 (-.s f2-0 f3-0))
    (set! f3-1 (-.s f4-0 f3-0))
    (set! f2-2 (/.s f2-1 f3-1))
    (set! f3-2 (gpr->fpr s4-0))
    (set! f4-1 (gpr->fpr s5-0))
    (.mula.s f3-2 f3-2)
    (.madd.s f3-3 f4-1 f4-1)
    (set! f2-3 (max.s f2-2 f1-1))
    (set! f1-2 (sqrt.s f3-3))
    (set! f2-4 (min.s f2-3 f0-2))
    (set! a0-8 #x40400000)
    (set! f0-3 (-.s f0-2 f2-4))
    (set! a1-7 #x3e800000)
    (set! f3-4 (gpr->fpr a0-8))
    (set! f5-0 (gpr->fpr a1-7))
    (set! f4-2 (gpr->fpr v1-5))
    (.mula.s f0-3 f3-4)
    (.madd.s f0-4 f2-4 f5-0)
    (set! f0-5 (*.s f0-4 f1-2))
    (set! f0-6 (*.s f0-5 f4-2))
    ((b! #t L37 (s.f! (+ arg2 12) f0-6)) (set! (-> arg2 w) f0-6))
    (when (begin (label cfg-5) (set! f0-7 (-> arg1 omega)) (set! f1-3 0.0) (!=.s f0-7 f1-3))
      (set! f0-8 0.0)
      (set! (-> arg2 w) f0-8)
      (set! v1-7 (fpr->gpr f0-8))
      )
    (label cfg-7)
    (set! v0-1 0)
    (ret-none)
    )
  )

;; definition (debug) for function sparticle-motion-blur-old
;; WARN: Return type mismatch int vs object.
(defun-debug sparticle-motion-blur-old ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-3d))
  "Unused"
  (let ((s2-0 (new 'stack-no-clear 'vector))
        (s5-0 (new 'stack-no-clear 'vector4w))
        (s3-0 (new 'stack-no-clear 'vector4w))
        )
    (set! (-> s2-0 x) (-> arg2 x-y-z-sx x))
    (set! (-> s2-0 y) (-> arg2 x-y-z-sx y))
    (set! (-> s2-0 z) (-> arg2 x-y-z-sx z))
    (set! (-> s2-0 w) 1.0)
    (when (and (or (!= (-> arg1 vel-sxvel x) 0.0) (!= (-> arg1 vel-sxvel y) 0.0) (!= (-> arg1 vel-sxvel z) 0.0))
               (transform-point-qword! s5-0 s2-0)
               )
      (+! (-> s2-0 x) (* 32.0 (-> arg1 vel-sxvel x)))
      (+! (-> s2-0 y) (* 32.0 (-> arg1 vel-sxvel y)))
      (+! (-> s2-0 z) (* 32.0 (-> arg1 vel-sxvel z)))
      (when (transform-point-qword! s3-0 s2-0)
        (let* ((f0-14 (the float (+ (-> s5-0 x) -28672)))
               (f1-10 (the float (+ (-> s5-0 y) -29440)))
               (f2-4 (the float (+ (-> s3-0 x) -28672)))
               (f3-1 (the float (+ (-> s3-0 y) -29440)))
               (f30-0 (- f2-4 f0-14))
               (f28-0 (- f3-1 f1-10))
               )
          (set! (-> arg2 qx-qy-qz-sy z) (+ -16384.0 (atan f30-0 f28-0)))
          (let ((f0-17 (-> arg1 omega)))
            (if (!= f0-17 0.0)
                (set! (-> arg2 x-y-z-sx w) (* (sqrtf (+ (* f30-0 f30-0) (* f28-0 f28-0)))
                                              f0-17
                                              (lerp-scale 3.0 0.25 (/ 1.0 (the float (-> s5-0 z))) 0.000001 0.00000014285715)
                                              )
                      )
                )
            )
          )
        (return (the-as object #f))
        )
      )
    )
  (if (!= (-> arg1 omega) 0.0)
      (set! (-> arg2 x-y-z-sx w) 0.0)
      )
  0
  )

;; definition for function sparticle-set-conerot
;; WARN: Return type mismatch int vs none.
(defun sparticle-set-conerot ((arg0 sparticle-launcher) (arg1 vector))
  (let ((s5-0 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-x)))
        (s4-0 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-y)))
        (v1-3 (get-field-spec-by-id arg0 (sp-field-id spt-conerot-z)))
        )
    (set! (-> s5-0 initial-valuef) (-> arg1 x))
    (set! (-> s4-0 initial-valuef) (-> arg1 y))
    (set! (-> v1-3 initial-valuef) (-> arg1 z))
    )
  0
  (none)
  )

;; definition for function sparticle-next-on-mode-1
(defun sparticle-next-on-mode-1 ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (if (zero? (-> arg1 key state-mode 0))
      (set! (-> arg1 next-time)
            (the-as uint (* (max 1 (the-as int (-> *display* clock (-> arg1 clock-index) sparticle-data x))) 2))
            )
      )
  0.0
  )

;; definition for function check-ground-bounce
(defun check-ground-bounce ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((f0-1 (+ (-> arg1 key origin trans y) (-> arg1 user-float))))
    (when (and (< (-> arg2 launchrot y) f0-1) (< (-> arg1 vel-sxvel y) 0.0))
      (set! (-> arg2 launchrot y) f0-1)
      (set! (-> arg1 vel-sxvel y) (* (-> arg1 vel-sxvel y) (- (rand-vu-float-range 0.6 0.8))))
      )
    )
  )

;; definition for function check-drop-group-center
;; WARN: Return type mismatch symbol vs none.
(defun check-drop-group-center ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((f0-0 (-> arg1 key origin trans y)))
    (if (< (-> arg2 launchrot y) f0-0)
        (sp-kill-particle arg0 arg1)
        )
    )
  (none)
  )

;; definition for function birth-func-y->userdata
;; WARN: Return type mismatch int vs none.
(defun birth-func-y->userdata ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (+! (-> arg1 user-float) (-> arg2 vector 0 y))
  0
  (none)
  )

;; definition for function birth-func-ocean-height
;; WARN: Return type mismatch int vs none.
(defun birth-func-ocean-height ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (set! (-> arg2 vector 0 y) (+ (ocean-method-11 *ocean* (-> arg2 vector) #t) (-> arg1 user-float)))
  0
  (none)
  )

;; definition for function birth-func-camera-orient
;; WARN: Return type mismatch int vs none.
(defun birth-func-camera-orient ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (v1-0 float) (v1-1 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-1 (forward-up-nopitch->quaternion
                  (new 'stack-no-clear 'quaternion)
                  (-> (math-camera-matrix) vector 2)
                  *up-vector*
                  )
                )
          )
      (quaternion-rotate-x! s5-1 s5-1 16384.0)
      (cond
        ((< (-> s5-1 w) 0.0)
         (.lvf vf1 (&-> arg2 conerot quad))
         (.lvf vf2 (&-> s5-1 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> arg2 conerot quad) vf1)
         (.mov v1-0 vf1)
         )
        (else
          (.lvf vf1 (&-> arg2 conerot quad))
          (.lvf vf2 (&-> s5-1 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> arg2 conerot quad) vf1)
          (.mov v1-1 vf1)
          )
        )
      )
    0
    (none)
    )
  )

;; definition for symbol *particle-quat*, type quaternion
(define *particle-quat* (new 'static 'quaternion :w 1.0))

;; definition for function birth-func-set-quat
;; WARN: Return type mismatch int vs none.
(defun birth-func-set-quat ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (a0-2 float) (a0-3 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a0-1 arg2)
          (v1-0 *particle-quat*)
          )
      (cond
        ((< (-> v1-0 w) 0.0)
         (.lvf vf1 (&-> a0-1 conerot quad))
         (.lvf vf2 (&-> v1-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> a0-1 conerot quad) vf1)
         (.mov a0-2 vf1)
         )
        (else
          (.lvf vf1 (&-> a0-1 conerot quad))
          (.lvf vf2 (&-> v1-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> a0-1 conerot quad) vf1)
          (.mov a0-3 vf1)
          )
        )
      )
    0
    (none)
    )
  )

;; definition for symbol *particle-vel*, type vector
(define *particle-vel* (new 'static 'vector :w 1.0))

;; definition for function birth-func-set-vel
;; WARN: Return type mismatch int vs none.
(defun birth-func-set-vel ((arg0 object) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((v1-0 *particle-vel*))
    (set! (-> arg1 vel-sxvel x) (-> v1-0 x))
    (set! (-> arg1 vel-sxvel y) (-> v1-0 y))
    (set! (-> arg1 vel-sxvel z) (-> v1-0 z))
    )
  0
  (none)
  )

;; definition for function birth-func-texture-group
;; WARN: Return type mismatch int vs none.
(defun birth-func-texture-group ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s5-0 (the-as object (-> arg1 user-float))))
    (when (nonzero? (the-as float s5-0))
      (let ((a0-1 (+ (-> (the-as (pointer int32) s5-0) 0) -3)))
        (if (nonzero? (l.w (+ (* (+ (rand-vu-int-count a0-1) 3) 4) (the-as int s5-0) 12)))
            (particle-adgif-callback (-> arg1 adgif))
            )
        )
      )
    )
  0
  (none)
  )

;; definition for method 9 of type sparticle-launcher
;; WARN: new jak 2 until loop case, check carefully
(defmethod get-field-spec-by-id sparticle-launcher ((obj sparticle-launcher) (arg0 sp-field-id))
  "Returns the [[sp-field-init-spec]] that has the matching [[sp-field-id]]"
  (let ((v1-0 0))
    (until #f
      (let ((a2-2 (-> obj init-specs v1-0 field)))
        (cond
          ((= a2-2 arg0)
           (return (-> obj init-specs v1-0))
           )
          ((or (< (the-as uint arg0) (the-as uint a2-2)) (= a2-2 (sp-field-id spt-end)))
           (return (the-as sp-field-init-spec #f))
           )
          (else
            (+! v1-0 1)
            )
          )
        )
      )
    )
  (the-as sp-field-init-spec #f)
  )

;; definition for method 10 of type sparticle-launcher
;; ERROR: failed type prop at 45: Could not figure out load: (set! v1 (l.w (+ gp 12)))
(defmethod sparticle-launcher-method-10 sparticle-launcher ((a0-0 sparticle-launcher) (a1-0 string))
  (local-vars
    (v0-0 sp-field-init-spec)
    (v0-1 texture-id)
    (v0-2 sp-field-init-spec)
    (v0-3 symbol)
    (v0-4 none)
    (v0-5 none)
    (v1-0 type)
    (v1-1 texture-id)
    (v1-2 type)
    (v1-3 sp-field-init-spec)
    (v1-4 int)
    (v1-5 int)
    (v1-6 symbol)
    (v1-7 symbol)
    (v1-8 none)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (v1-14 none)
    (v1-15 none)
    (v1-16 none)
    (v1-17 none)
    (v1-18 none)
    (v1-19 none)
    (v1-20 none)
    (v1-21 none)
    (v1-22 none)
    (v1-23 none)
    (a0-1 sparticle-launcher)
    (a0-2 string)
    (a0-5 sparticle-launcher)
    (a0-6 symbol)
    (a0-7 sp-flag)
    (a0-9 symbol)
    (a0-10 float)
    (a0-11 float)
    (a0-12 int)
    (a0-14 none)
    (a1-1 int)
    (a1-2 symbol)
    (a1-3 int)
    (a1-4 sp-flag)
    (a1-5 type)
    (s5-0 sp-field-init-spec)
    (s5-1 none)
    (t9-0 (function sparticle-launcher sp-field-id sp-field-init-spec))
    (t9-1 (function string string texture-id))
    (t9-2 (function sparticle-launcher sp-field-id sp-field-init-spec))
    (t9-3 (function object type symbol))
    (t9-4 none)
    (gp-1 object)
    )
  (when (begin
          (when (begin
                  (set! a0-1 a0-0)
                  (set! v1-0 (-> a0-1 type))
                  (set! t9-0 (method-of-type v1-0 get-field-spec-by-id))
                  (set! a1-1 1)
                  (set! v0-0 (call! a0-1 a1-1))
                  (set! s5-0 v0-0)
                  (set! t9-1 lookup-texture-id-by-name)
                  (set! a1-2 #f)
                  (set! a0-2 a1-0)
                  (set! v0-1 (call! a0-2 a1-2))
                  (set! v1-1 v0-1)
                  s5-0
                  )
            (set! (-> s5-0 initial-valuef) (the-as float v1-1))
            (set! a0-4 v1-1)
            )
          (and (begin
                 (set! v1-2 (-> a0-0 type))
                 (set! t9-2 (method-of-type v1-2 get-field-spec-by-id))
                 (set! a1-3 48)
                 (set! a0-5 a0-0)
                 (set! v0-2 (call! a0-5 a1-3))
                 (set! v1-3 v0-2)
                 v1-3
                 )
               (begin (set! a0-7 (-> v1-3 flags)) (set! a1-4 (+ a0-7 -4)) (set! a0-6 (zero? a1-4)))
               )
          a0-6
          )
    (when (begin
            (and (begin
                   (set! gp-1 (-> v1-3 initial-valuef))
                   (set! v1-4 (logand gp-1 7))
                   (set! v1-5 (+ v1-4 -4))
                   (set! a0-9 (zero? v1-5))
                   a0-9
                   )
                 (begin (set! t9-3 type?) (set! a0-10 gp-1) (set! a1-5 array) (set! v0-3 (call! a0-10 a1-5)) v0-3)
                 (begin
                   (set! v1-7 #t)
                   (set! a0-11 (-> gp-1 1))
                   (set! a0-12 (logand a0-11 128))
                   (cmove-#f-zero v1-6 a0-12 v1-7)
                   )
                 )
            v1-6
            )
      (set! v1-8 (the-as none (l.w (+ gp-1 12))))
      (set! v1-9 (the-as none (sra v1-8 3)))
      (s.w! (+ gp-1 12) v1-9)
      (set! v1-10 (the-as none (l.w (+ gp-1 16))))
      (set! v1-11 (the-as none (logand v1-10 8)))
      (set! v1-12 (the-as none (sra v1-11 3)))
      (s.w! (+ gp-1 16) v1-12)
      (set! v1-13 (the-as none (l.w (+ gp-1 20))))
      (set! v1-14 (the-as none (sra v1-13 3)))
      (s.w! (+ gp-1 20) v1-14)
      (set! v1-15 (the-as none int32))
      (s.w! (+ gp-1 8) v1-15)
      (set! s5-1 (the-as none 0))
      (while (begin (set! v1-22 (the-as none (l.w gp-1))) (set! v1-23 (the-as none (+ v1-22 -3))) (<.si s5-1 v1-23))
        (set! t9-4 (the-as none lookup-texture-id-by-name))
        (set! v1-16 (the-as none (+ s5-1 3)))
        (set! v1-17 (the-as none (sll v1-16 2)))
        (set! v1-18 (the-as none (+ v1-17 gp-1)))
        (set! a0-14 (the-as none (l.w (+ v1-18 12))))
        (set! v0-4 (the-as none (call!)))
        (set! v1-19 (the-as none (+ s5-1 3)))
        (set! v1-20 (the-as none (sll v1-19 2)))
        (set! v1-21 (the-as none (+ v1-20 gp-1)))
        (s.w! (+ v1-21 12) v0-4)
        (set! s5-1 (the-as none (+ s5-1 1)))
        )
      )
    )
  (set! v0-5 (the-as none 0))
  (ret-none)
  )
