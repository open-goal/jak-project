;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *sp-60-hz*, type symbol
(define *sp-60-hz* #t)

;; definition of type sparticle-cpuinfo
(deftype sparticle-cpuinfo (structure)
  ((sprite         sprite-vec-data-2d)
   (adgif          adgif-shader)
   (radius         float)
   (omega          float)
   (vel-sxvel      vector                  :inline)
   (rot-syvel      vector                  :inline)
   (fade           rgbaf                   :inline)
   (acc            vector                  :inline)
   (rotvel3d       quaternion              :inline)
   (vel            vector                  :inline :overlay-at vel-sxvel)
   (accel          vector                  :inline :overlay-at acc)
   (scalevelx      float                           :overlay-at (-> vel-sxvel data 3))
   (scalevely      float                           :overlay-at (-> rot-syvel data 3))
   (friction       float)
   (timer          int32)
   (flags          sp-cpuinfo-flag)
   (flags-s32      sp-cpuinfo-flag-s32             :overlay-at flags)
   (user-int32     int32)
   (user-uint32    uint32                          :overlay-at user-int32)
   (user-float     float                           :overlay-at user-int32)
   (user-pntr      uint32                          :overlay-at user-int32)
   (user-object    basic                           :overlay-at user-int32)
   (user-sprite    sprite-vec-data-2d              :overlay-at user-int32)
   (sp-func        (function sparticle-system sparticle-cpuinfo sprite-vec-data-3d uint none))
   (next-time      uint32)
   (next-launcher  basic)
   (cache-alpha    float)
   (valid          uint8)
   (clock-index    uint8)
   (user1-int16    uint16)
   (key            sparticle-launch-control)
   (key-alt        sparticle-launch-state          :overlay-at key)
   (binding        sparticle-launch-state)
   (data           uint32                  1       :overlay-at omega)
   (datab          int8                    4       :overlay-at omega)
   (dataf          float                   1       :overlay-at omega)
   (datac          uint8                   1       :overlay-at omega)
   )
  )

;; definition for method 3 of type sparticle-cpuinfo
(defmethod inspect ((this sparticle-cpuinfo))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sparticle-cpuinfo)
  (format #t "~1Tsprite: #<sprite-vec-data-2d @ #x~X>~%" (-> this sprite))
  (format #t "~1Tadgif: #<adgif-shader @ #x~X>~%" (-> this adgif))
  (format #t "~1Tradius: ~f~%" (-> this radius))
  (format #t "~1Tomega: ~f~%" (-> this omega))
  (format #t "~1Tvel-sxvel: #<vector @ #x~X>~%" (-> this vel-sxvel))
  (format #t "~1Trot-syvel: #<vector @ #x~X>~%" (-> this rot-syvel))
  (format #t "~1Tfade: #<rgbaf @ #x~X>~%" (-> this fade))
  (format #t "~1Tacc: #<vector @ #x~X>~%" (-> this acc))
  (format #t "~1Trotvel3d: #<quaternion @ #x~X>~%" (-> this rotvel3d))
  (format #t "~1Tvel: #<vector3s @ #x~X>~%" (-> this vel-sxvel))
  (format #t "~1Taccel: #<vector3s @ #x~X>~%" (-> this acc))
  (format #t "~1Tscalevelx: ~f~%" (-> this vel-sxvel w))
  (format #t "~1Tscalevely: ~f~%" (-> this rot-syvel w))
  (format #t "~1Tfriction: ~f~%" (-> this friction))
  (format #t "~1Ttimer: ~D~%" (-> this timer))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tuser-int32: ~D~%" (-> this user-float))
  (format #t "~1Tuser-uint32: ~D~%" (-> this user-float))
  (format #t "~1Tuser-float: ~f~%" (-> this user-float))
  (format #t "~1Tuser-pntr: #x~X~%" (-> this user-float))
  (format #t "~1Tuser-object: ~A~%" (-> this user-float))
  (format #t "~1Tuser-sprite: #<sprite-vec-data-2d @ #x~X>~%" (-> this user-float))
  (format #t "~1Tsp-func: ~A~%" (-> this sp-func))
  (format #t "~1Tnext-time: ~D~%" (-> this next-time))
  (format #t "~1Tnext-launcher: ~A~%" (-> this next-launcher))
  (format #t "~1Tcache-alpha: ~f~%" (-> this cache-alpha))
  (format #t "~1Tvalid: ~D~%" (-> this valid))
  (format #t "~1Tclock-index: ~D~%" (-> this clock-index))
  (format #t "~1Tuser1-int16: ~D~%" (-> this user1-int16))
  (format #t "~1Tkey: ~A~%" (-> this key))
  (format #t "~1Tbinding: #<sparticle-launch-state @ #x~X>~%" (-> this binding))
  (format #t "~1Tdata[1] @ #x~X~%" (&-> this omega))
  (format #t "~1Tdatab[4] @ #x~X~%" (&-> this omega))
  (format #t "~1Tdataf[1] @ #x~X~%" (&-> this omega))
  (format #t "~1Tdatac[1] @ #x~X~%" (&-> this omega))
  (label cfg-4)
  this
  )

;; definition of type sparticle-launchinfo
(deftype sparticle-launchinfo (structure)
  ((launchrot   vector  :inline)
   (conerot     vector  :inline)
   (rotate-x    float)
   (rotate-y    float)
   (rotate-z    float)
   (coneradius  float)
   (rotate      vector  :inline :overlay-at rotate-x)
   (scale-x     float           :offset  48)
   (scale-y     float           :offset  52)
   (scale-z     float           :offset  56)
   (dummy       float           :offset  60)
   (scale       vector  :inline :overlay-at scale-x)
   (data        uint8   1       :overlay-at (-> launchrot data 0))
   )
  )

;; definition for method 3 of type sparticle-launchinfo
(defmethod inspect ((this sparticle-launchinfo))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sparticle-launchinfo)
  (format #t "~1Tlaunchrot: ~`vector`P~%" (-> this launchrot))
  (format #t "~1Tconerot: ~`vector`P~%" (-> this conerot))
  (format #t "~1Trotate-x: ~f~%" (-> this rotate-x))
  (format #t "~1Trotate-y: ~f~%" (-> this rotate-y))
  (format #t "~1Trotate-z: ~f~%" (-> this rotate-z))
  (format #t "~1Tconeradius: ~f~%" (-> this coneradius))
  (format #t "~1Trotate: ~`vector`P~%" (&-> this rotate-x))
  (format #t "~1Tscale-x: ~f~%" (-> this scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> this scale-y))
  (format #t "~1Tscale-z: ~f~%" (-> this scale-z))
  (format #t "~1Tdummy: ~f~%" (-> this dummy))
  (format #t "~1Tscale: ~`vector`P~%" (&-> this scale-x))
  (format #t "~1Tdata[1] @ #x~X~%" (-> this launchrot))
  (label cfg-4)
  this
  )

;; definition of type sparticle-system
(deftype sparticle-system (basic)
  ((blocks           int32  2)
   (length           int32  2)
   (num-alloc        int32  2)
   (is-3d            basic)
   (flags            uint32)
   (alloc-table      (pointer uint64))
   (cpuinfo-table    (inline-array sparticle-cpuinfo))
   (vecdata-table    pointer)
   (adgifdata-table  (inline-array adgif-shader))
   )
  (:methods
    (new (symbol type int int symbol pointer (inline-array adgif-shader)) _type_)
    )
  )

;; definition for method 3 of type sparticle-system
(defmethod inspect ((this sparticle-system))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tblocks[2] @ #x~X~%" (-> this blocks))
  (format #t "~1Tlength[2] @ #x~X~%" (-> this length))
  (format #t "~1Tnum-alloc[2] @ #x~X~%" (-> this num-alloc))
  (format #t "~1Tis-3d: ~A~%" (-> this is-3d))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Talloc-table: #x~X~%" (-> this alloc-table))
  (format #t "~1Tcpuinfo-table: #x~X~%" (-> this cpuinfo-table))
  (format #t "~1Tvecdata-table: #x~X~%" (-> this vecdata-table))
  (format #t "~1Tadgifdata-table: #x~X~%" (-> this adgifdata-table))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
