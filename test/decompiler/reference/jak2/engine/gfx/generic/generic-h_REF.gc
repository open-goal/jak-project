;;-*-Lisp-*-
(in-package goal)

;; definition of type gsf-vertex
(deftype gsf-vertex (structure)
  ((data  uint32     8)
   (byte  uint8      32      :overlay-at (-> data 0))
   (quad  uint128    2       :overlay-at (-> data 0))
   (vt    qword      :inline :overlay-at (-> data 0))
   (pos   vector3s   :inline :overlay-at (-> data 0))
   (tex   vector2uh  :inline :overlay-at (-> data 3))
   (nrm   vector3s   :inline :overlay-at (-> data 4))
   (nc    qword      :inline :overlay-at (-> data 4))
   (clr   vector4ub  :inline :overlay-at (-> data 7))
   (dtex  vector2uh  :inline :overlay-at (-> data 4))
   (dclr  vector4ub  :inline :overlay-at (-> data 5))
   )
  :pack-me
  )

;; definition for method 3 of type gsf-vertex
(defmethod inspect ((this gsf-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-vertex)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (format #t "~1Tbyte[32] @ #x~X~%" (-> this data))
  (format #t "~1Tquad[2] @ #x~X~%" (-> this data))
  (format #t "~1Tvt: #<qword @ #x~X>~%" (-> this data))
  (format #t "~1Tpos: #<vector3s @ #x~X>~%" (-> this data))
  (format #t "~1Ttex: #<vector2uh @ #x~X>~%" (&-> this vt vector4w w))
  (format #t "~1Tnrm: #<vector3s @ #x~X>~%" (-> this nrm))
  (format #t "~1Tnc: #<qword @ #x~X>~%" (-> this nrm))
  (format #t "~1Tclr: #<vector4ub @ #x~X>~%" (&-> this nc vector4w w))
  (format #t "~1Tdtex: #<vector2uh @ #x~X>~%" (-> this nrm))
  (format #t "~1Tdclr: #<vector4ub @ #x~X>~%" (&-> this nrm y))
  (label cfg-4)
  this
  )

;; definition of type gsf-vertex-array
(deftype gsf-vertex-array (structure)
  ((vtx  gsf-vertex  :dynamic)
   )
  )

;; definition for method 3 of type gsf-vertex-array
(defmethod inspect ((this gsf-vertex-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-vertex-array)
  (format #t "~1Tvtx[0] @ #x~X~%" (-> this vtx))
  (label cfg-4)
  this
  )

;; definition of type gsf-fx-vertex
(deftype gsf-fx-vertex (structure)
  ((clr  vector4ub  :inline)
   (tex  vector2uh  :inline)
   )
  )

;; definition for method 3 of type gsf-fx-vertex
(defmethod inspect ((this gsf-fx-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-fx-vertex)
  (format #t "~1Tclr: #<vector4ub @ #x~X>~%" (-> this clr))
  (format #t "~1Ttex: #<vector2uh @ #x~X>~%" (-> this tex))
  (label cfg-4)
  this
  )

;; definition of type gsf-fx-vertex-array
(deftype gsf-fx-vertex-array (structure)
  ((data  gsf-fx-vertex  :dynamic)
   )
  )

;; definition for method 3 of type gsf-fx-vertex-array
(defmethod inspect ((this gsf-fx-vertex-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-fx-vertex-array)
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type gsf-header
(deftype gsf-header (structure)
  ((num-strips    uint8)
   (num-new-vtxs  uint8)
   (num-dps       uint16)
   (num-vtxs      uint16)
   (strip-table   uint8  10)
   )
  )

;; definition for method 3 of type gsf-header
(defmethod inspect ((this gsf-header))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-header)
  (format #t "~1Tnum-strips: ~D~%" (-> this num-strips))
  (format #t "~1Tnum-new-vtxs: ~D~%" (-> this num-new-vtxs))
  (format #t "~1Tnum-dps: ~D~%" (-> this num-dps))
  (format #t "~1Tnum-vtxs: ~D~%" (-> this num-vtxs))
  (format #t "~1Tstrip-table[10] @ #x~X~%" (-> this strip-table))
  (label cfg-4)
  this
  )

;; definition of type gsf-ik
(deftype gsf-ik (structure)
  ((index    uint8)
   (no-kick  uint8)
   )
  )

;; definition for method 3 of type gsf-ik
(defmethod inspect ((this gsf-ik))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-ik)
  (format #t "~1Tindex: ~D~%" (-> this index))
  (format #t "~1Tno-kick: ~D~%" (-> this no-kick))
  (label cfg-4)
  this
  )

;; definition of type gsf-info
(deftype gsf-info (structure)
  ((ptr-iks    uint32)
   (ptr-verts  uint32)
   (ptr-fx     uint32)
   (dummy2     uint32)
   )
  )

;; definition for method 3 of type gsf-info
(defmethod inspect ((this gsf-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-info)
  (format #t "~1Tptr-iks: #x~X~%" (-> this ptr-iks))
  (format #t "~1Tptr-verts: #x~X~%" (-> this ptr-verts))
  (format #t "~1Tptr-fx: #x~X~%" (-> this ptr-fx))
  (format #t "~1Tdummy2: ~D~%" (-> this dummy2))
  (label cfg-4)
  this
  )

;; definition of type gsf-buffer
(deftype gsf-buffer (structure)
  ((data       uint8       8192)
   (info       gsf-info    :inline  :overlay-at (-> data 0))
   (header     gsf-header  :inline  :overlay-at (-> data 16))
   (work-area  uint8       :dynamic :overlay-at (-> data 32))
   )
  )

;; definition for method 3 of type gsf-buffer
(defmethod inspect ((this gsf-buffer))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gsf-buffer)
  (format #t "~1Tdata[8192] @ #x~X~%" (-> this data))
  (format #t "~1Tinfo: #<gsf-info @ #x~X>~%" (-> this data))
  (format #t "~1Theader: #<gsf-header @ #x~X>~%" (-> this header))
  (format #t "~1Twork-area[0] @ #x~X~%" (-> this work-area))
  (label cfg-4)
  this
  )

;; definition of type generic-frag
(deftype generic-frag (structure)
  ((start-pos  uint16)
   (end-pos    uint16)
   )
  )

;; definition for method 3 of type generic-frag
(defmethod inspect ((this generic-frag))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-frag)
  (format #t "~1Tstart-pos: ~D~%" (-> this start-pos))
  (format #t "~1Tend-pos: ~D~%" (-> this end-pos))
  (label cfg-4)
  this
  )

;; definition of type generic-strip
(deftype generic-strip (structure)
  ((pos  uint16)
   (len  uint16)
   )
  )

;; definition for method 3 of type generic-strip
(defmethod inspect ((this generic-strip))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-strip)
  (format #t "~1Tpos: ~D~%" (-> this pos))
  (format #t "~1Tlen: ~D~%" (-> this len))
  (label cfg-4)
  this
  )

;; definition of type generic-envmap-saves
(deftype generic-envmap-saves (structure)
  ((index-mask  vector4w  :inline)
   (verts       uint128   12)
   (kicks       uint128   4)
   )
  )

;; definition for method 3 of type generic-envmap-saves
(defmethod inspect ((this generic-envmap-saves))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-envmap-saves)
  (format #t "~1Tindex-mask: #<vector4w @ #x~X>~%" (-> this index-mask))
  (format #t "~1Tverts[12] @ #x~X~%" (-> this verts))
  (format #t "~1Tkicks[4] @ #x~X~%" (-> this kicks))
  (label cfg-4)
  this
  )

;; definition of type generic-interp-job
(deftype generic-interp-job (structure)
  ((job-type  uint16)
   (num       uint16)
   (first     uint16)
   (pad       uint16)
   (ptr-data  uint32)
   (morph-z   uint16)
   (morph-w   uint16)
   )
  :pack-me
  )

;; definition for method 3 of type generic-interp-job
(defmethod inspect ((this generic-interp-job))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-interp-job)
  (format #t "~1Tjob-type: ~D~%" (-> this job-type))
  (format #t "~1Tnum: ~D~%" (-> this num))
  (format #t "~1Tfirst: ~D~%" (-> this first))
  (format #t "~1Tpad: ~D~%" (-> this pad))
  (format #t "~1Tptr-data: #x~X~%" (-> this ptr-data))
  (format #t "~1Tmorph-z: ~D~%" (-> this morph-z))
  (format #t "~1Tmorph-w: ~D~%" (-> this morph-w))
  (label cfg-4)
  this
  )

;; definition of type generic-saves
(deftype generic-saves (structure)
  ((ptr-dma            uint32)
   (ptr-vtxs           uint32)
   (ptr-clrs           uint32)
   (ptr-texs           uint32)
   (ptr-env-clrs       uint32)
   (ptr-env-texs       uint32)
   (cur-outbuf         uint32)
   (ptr-fx-buf         uint32)
   (xor-outbufs        uint32)
   (num-dps            uint32)
   (qwc                uint32)
   (gsf-buf            gsf-buffer)
   (ptr-shaders        uint32)
   (ptr-env-shader     uint32)
   (is-envmap          uint16)
   (is-translucent     uint16)
   (basep              uint32)
   (ptr-interp-job     generic-interp-job)
   (gifbuf-adr         uint32)
   (inbuf-adr          uint32)
   (fade-val           uint32)
   (time-of-day-color  rgba)
   (to-vu0-waits       uint32)
   (to-spr-waits       uint32)
   (from-spr-waits     uint32)
   (envmap             generic-envmap-saves  :inline)
   )
  )

;; definition for method 3 of type generic-saves
(defmethod inspect ((this generic-saves))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-saves)
  (format #t "~1Tptr-dma: #x~X~%" (-> this ptr-dma))
  (format #t "~1Tptr-vtxs: #x~X~%" (-> this ptr-vtxs))
  (format #t "~1Tptr-clrs: #x~X~%" (-> this ptr-clrs))
  (format #t "~1Tptr-texs: #x~X~%" (-> this ptr-texs))
  (format #t "~1Tptr-env-clrs: #x~X~%" (-> this ptr-env-clrs))
  (format #t "~1Tptr-env-texs: #x~X~%" (-> this ptr-env-texs))
  (format #t "~1Tcur-outbuf: #x~X~%" (-> this cur-outbuf))
  (format #t "~1Tptr-fx-buf: ~D~%" (-> this ptr-fx-buf))
  (format #t "~1Txor-outbufs: ~D~%" (-> this xor-outbufs))
  (format #t "~1Tnum-dps: ~D~%" (-> this num-dps))
  (format #t "~1Tqwc: ~D~%" (-> this qwc))
  (format #t "~1Tgsf-buf: #<gsf-buffer @ #x~X>~%" (-> this gsf-buf))
  (format #t "~1Tptr-shaders: #x~X~%" (-> this ptr-shaders))
  (format #t "~1Tptr-env-shader: ~D~%" (-> this ptr-env-shader))
  (format #t "~1Tis-envmap: ~D~%" (-> this is-envmap))
  (format #t "~1Tis-translucent: ~D~%" (-> this is-translucent))
  (format #t "~1Tbasep: #x~X~%" (-> this basep))
  (format #t "~1Tptr-interp-job: #<generic-interp-job @ #x~X>~%" (-> this ptr-interp-job))
  (format #t "~1Tgifbuf-adr: ~D~%" (-> this gifbuf-adr))
  (format #t "~1Tinbuf-adr: ~D~%" (-> this inbuf-adr))
  (format #t "~1Tfade-val: ~D~%" (-> this fade-val))
  (format #t "~1Ttime-of-day-color: ~D~%" (-> this time-of-day-color))
  (format #t "~1Tto-vu0-waits: ~D~%" (-> this to-vu0-waits))
  (format #t "~1Tto-spr-waits: ~D~%" (-> this to-spr-waits))
  (format #t "~1Tfrom-spr-waits: ~D~%" (-> this from-spr-waits))
  (format #t "~1Tenvmap: #<generic-envmap-saves @ #x~X>~%" (-> this envmap))
  (label cfg-4)
  this
  )

;; definition of type generic-gif-tag
(deftype generic-gif-tag (structure)
  ((data        uint32           4)
   (qword       qword            :inline :overlay-at (-> data 0))
   (fan-prim    gif-tag-prim             :overlay-at (-> data 0))
   (str-prim    gif-tag-prim             :overlay-at (-> data 1))
   (regs        gif-tag-regs-32          :overlay-at (-> data 2))
   (num-strips  uint32                   :overlay-at (-> data 3))
   )
  )

;; definition for method 3 of type generic-gif-tag
(defmethod inspect ((this generic-gif-tag))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-gif-tag)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this fan-prim))
  (format #t "~1Tqword: #<qword @ #x~X>~%" (&-> this fan-prim))
  (format #t "~1Tfan-prim: ~D~%" (-> this fan-prim))
  (format #t "~1Tstr-prim: ~D~%" (-> this str-prim))
  (format #t "~1Tregs: ~D~%" (-> this regs))
  (format #t "~1Tnum-strips: ~D~%" (-> this num-strips))
  (label cfg-4)
  this
  )

;; definition of type generic-envmap-consts
(deftype generic-envmap-consts (structure)
  ((consts  vector           :inline)
   (strgif  generic-gif-tag  :inline)
   (colors  vector4w         :inline)
   (shader  adgif-shader     :inline)
   )
  )

;; definition for method 3 of type generic-envmap-consts
(defmethod inspect ((this generic-envmap-consts))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-envmap-consts)
  (format #t "~1Tconsts: #<vector @ #x~X>~%" (-> this consts))
  (format #t "~1Tstrgif: #<generic-gif-tag @ #x~X>~%" (-> this strgif))
  (format #t "~1Tcolors: #<vector4w @ #x~X>~%" (-> this colors))
  (format #t "~1Tshader: #<adgif-shader @ #x~X>~%" (-> this shader))
  (label cfg-4)
  this
  )

;; definition of type generic-consts
(deftype generic-consts (structure)
  ((dma-header         dma-packet             :inline)
   (vif-header         uint32                 4)
   (dma-ref-vtxs       dma-packet             :inline)
   (dma-cnt-call       dma-packet             :inline)
   (matrix             matrix                 :inline)
   (base-strgif        generic-gif-tag        :inline)
   (alpha-opaque       gs-adcmd               :inline)
   (alpha-translucent  gs-adcmd               :inline)
   (ztest-normal       gs-adcmd               :inline)
   (ztest-opaque       gs-adcmd               :inline)
   (adcmd-offsets      uint8                  16)
   (stcycle-tag        uint32)
   (unpack-vtx-tag     uint32)
   (unpack-clr-tag     uint32)
   (unpack-tex-tag     uint32)
   (mscal-tag          uint32)
   (flush-tag          uint32)
   (reset-cycle-tag    uint32)
   (dummy0             uint32)
   (dma-tag-cnt        uint64)
   (envmap             generic-envmap-consts  :inline)
   (light-consts       vector                 :inline)
   (texture-offset     uint16                 8)
   )
  )

;; definition for method 3 of type generic-consts
(defmethod inspect ((this generic-consts))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-consts)
  (format #t "~1Tdma-header: #<dma-packet @ #x~X>~%" (-> this dma-header))
  (format #t "~1Tvif-header[4] @ #x~X~%" (-> this vif-header))
  (format #t "~1Tdma-ref-vtxs: #<dma-packet @ #x~X>~%" (-> this dma-ref-vtxs))
  (format #t "~1Tdma-cnt-call: #<dma-packet @ #x~X>~%" (-> this dma-cnt-call))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tbase-strgif: #<generic-gif-tag @ #x~X>~%" (-> this base-strgif))
  (format #t "~1Talpha-opaque: #<gs-adcmd @ #x~X>~%" (-> this alpha-opaque))
  (format #t "~1Talpha-translucent: #<gs-adcmd @ #x~X>~%" (-> this alpha-translucent))
  (format #t "~1Tztest-normal: #<gs-adcmd @ #x~X>~%" (-> this ztest-normal))
  (format #t "~1Tztest-opaque: #<gs-adcmd @ #x~X>~%" (-> this ztest-opaque))
  (format #t "~1Tadcmd-offsets[16] @ #x~X~%" (-> this adcmd-offsets))
  (format #t "~1Tadcmds[4] @ #x~X~%" (-> this alpha-opaque))
  (format #t "~1Tstcycle-tag: ~D~%" (-> this stcycle-tag))
  (format #t "~1Tunpack-vtx-tag: ~D~%" (-> this unpack-vtx-tag))
  (format #t "~1Tunpack-clr-tag: ~D~%" (-> this unpack-clr-tag))
  (format #t "~1Tunpack-tex-tag: ~D~%" (-> this unpack-tex-tag))
  (format #t "~1Tmscal-tag: ~D~%" (-> this mscal-tag))
  (format #t "~1Tflush-tag: ~D~%" (-> this flush-tag))
  (format #t "~1Treset-cycle-tag: ~D~%" (-> this reset-cycle-tag))
  (format #t "~1Tdummy0: ~D~%" (-> this dummy0))
  (format #t "~1Tdma-tag-cnt: ~D~%" (-> this dma-tag-cnt))
  (format #t "~1Tenvmap: #<generic-envmap-consts @ #x~X>~%" (-> this envmap))
  (format #t "~1Tlight-consts: #<vector @ #x~X>~%" (-> this light-consts))
  (format #t "~1Ttexture-offset[8] @ #x~X~%" (-> this texture-offset))
  (label cfg-4)
  this
  )

;; definition of type generic-storage
(deftype generic-storage (structure)
  ((data  uint128  16)
   )
  )

;; definition for method 3 of type generic-storage
(defmethod inspect ((this generic-storage))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-storage)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(kmemopen global "gsf-buffer")

;; definition for symbol *gsf-buffer*, type gsf-buffer
(define *gsf-buffer* (the-as gsf-buffer (kmalloc global 9216 (kmalloc-flags align-64) "malloc")))

;; failed to figure out what this is:
(kmemclose)
