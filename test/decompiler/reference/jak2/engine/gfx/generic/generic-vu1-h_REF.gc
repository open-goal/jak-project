;;-*-Lisp-*-
(in-package goal)

;; definition of type pris-mtx
(deftype pris-mtx (structure)
  ((data   float   32      :offset-assert   0)
   (vector vector  8       :offset          0)
   (t-mtx  matrix  :inline :offset          0)
   (n-mtx  matrix3 :inline :offset         64)
   (scale  vector  :inline :offset        112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type pris-mtx
(defmethod inspect pris-mtx ((obj pris-mtx))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'pris-mtx)
  (format #t "~1Tdata[32] @ #x~X~%" (-> obj data))
  (format #t "~1Tvector[8] @ #x~X~%" (-> obj data))
  (format #t "~1Tt-mtx: #<matrix @ #x~X>~%" (-> obj data))
  (format #t "~1Tn-mtx: #<matrix3 @ #x~X>~%" (-> obj n-mtx))
  (format #t "~1Tscale: #<vector @ #x~X>~%" (-> obj scale))
  (label cfg-4)
  obj
  )

;; definition of type generic-pris-mtx-save
(deftype generic-pris-mtx-save (structure)
  ((loc-mtx pris-mtx :inline :offset-assert   0)
   (par-mtx pris-mtx :inline :offset-assert 128)
   (dif-mtx pris-mtx :inline :offset-assert 256)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; definition for method 3 of type generic-pris-mtx-save
(defmethod inspect generic-pris-mtx-save ((obj generic-pris-mtx-save))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-pris-mtx-save)
  (format #t "~1Tloc-mtx: #<pris-mtx @ #x~X>~%" (-> obj loc-mtx))
  (format #t "~1Tpar-mtx: #<pris-mtx @ #x~X>~%" (-> obj par-mtx))
  (format #t "~1Tdif-mtx: #<pris-mtx @ #x~X>~%" (-> obj dif-mtx))
  (label cfg-4)
  obj
  )

;; definition of type generic-constants
(deftype generic-constants (structure)
  ((fog         vector     :inline :offset-assert   0)
   (adgif       gs-gif-tag :inline :offset-assert  16)
   (hvdf-offset vector     :inline :offset-assert  32)
   (hmge-scale  vector     :inline :offset-assert  48)
   (invh-scale  vector     :inline :offset-assert  64)
   (guard       vector     :inline :offset-assert  80)
   (flush       qword      :inline :offset-assert  96)
   (stores      qword      :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type generic-constants
(defmethod inspect generic-constants ((obj generic-constants))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-constants)
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> obj fog))
  (format #t "~1Tadgif: #<qword @ #x~X>~%" (-> obj adgif))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> obj hvdf-offset))
  (format #t "~1Thmge-scale: #<vector @ #x~X>~%" (-> obj hmge-scale))
  (format #t "~1Tinvh-scale: #<vector @ #x~X>~%" (-> obj invh-scale))
  (format #t "~1Tguard: #<vector @ #x~X>~%" (-> obj guard))
  (format #t "~1Tflush: #<qword @ #x~X>~%" (-> obj flush))
  (format #t "~1Tstores: #<qword @ #x~X>~%" (-> obj stores))
  (label cfg-4)
  obj
  )

;; definition of type generic-shrub-constants
(deftype generic-shrub-constants (structure)
  ((shrub-giftag generic-gif-tag :inline :offset-assert   0)
   (shrub-adnop  qword           :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type generic-shrub-constants
(defmethod inspect generic-shrub-constants ((obj generic-shrub-constants))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-shrub-constants)
  (format #t "~1Tshrub-giftag: #<generic-gif-tag @ #x~X>~%" (-> obj shrub-giftag))
  (format #t "~1Tshrub-adnop: #<qword @ #x~X>~%" (-> obj shrub-adnop))
  (label cfg-4)
  obj
  )

;; definition of type gcf-shader
(deftype gcf-shader (structure)
  ((adgif  uint128      5       :offset-assert   0)
   (shader adgif-shader :inline :offset          0)
   (pos    uint32               :offset         12)
   (num    uint32               :offset         28)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; definition for method 3 of type gcf-shader
(defmethod inspect gcf-shader ((obj gcf-shader))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'gcf-shader)
  (format #t "~1Tadgif[5] @ #x~X~%" (-> obj adgif))
  (format #t "~1Tshader: #<adgif-shader @ #x~X>~%" (-> obj adgif))
  (format #t "~1Tpos: ~D~%" (-> obj pos))
  (format #t "~1Tnum: ~D~%" (-> obj num))
  (label cfg-4)
  obj
  )

;; definition of type gcf-control
(deftype gcf-control (structure)
  ((matrix      matrix          :inline          :offset-assert   0)
   (giftag      generic-gif-tag :inline          :offset-assert  64)
   (adnops      uint32          2                :offset-assert  80)
   (num-strips  uint32                           :offset         76)
   (num-dps     uint32                           :offset         92)
   (kick-offset uint32                           :offset        108)
   (shader      gcf-shader      :inline :dynamic :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type gcf-control
(defmethod inspect gcf-control ((obj gcf-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'gcf-control)
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> obj matrix))
  (format #t "~1Tgiftag: #<generic-gif-tag @ #x~X>~%" (-> obj giftag))
  (format #t "~1Tadnops[2] @ #x~X~%" (-> obj adnops))
  (format #t "~1Tnum-strips: ~D~%" (-> obj giftag num-strips))
  (format #t "~1Tnum-dps: ~D~%" (-> obj num-dps))
  (format #t "~1Tkick-offset: ~D~%" (-> obj kick-offset))
  (format #t "~1Tshader[0] @ #x~X~%" (-> obj shader))
  (label cfg-4)
  obj
  )

;; definition of type gcf-vertex
(deftype gcf-vertex (structure)
  ((tex vector4w       :inline :offset-assert   0)
   (clr gs-packed-rgba :inline :offset-assert  16)
   (pos gs-packed-xyzw :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type gcf-vertex
(defmethod inspect gcf-vertex ((obj gcf-vertex))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'gcf-vertex)
  (format #t "~1Ttex: #<vector4w @ #x~X>~%" (-> obj tex))
  (format #t "~1Tclr: #<gs-packed-rgba @ #x~X>~%" (-> obj clr))
  (format #t "~1Tpos: #<gs-packed-xyzw @ #x~X>~%" (-> obj pos))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
