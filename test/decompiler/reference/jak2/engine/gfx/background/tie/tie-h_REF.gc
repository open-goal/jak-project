;;-*-Lisp-*-
(in-package goal)

;; definition of type tie-fragment-debug
(deftype tie-fragment-debug (structure)
  ((num-tris     uint16)
   (num-dverts   uint16)
   (debug-lines  (array vector-array))
   )
  )

;; definition for method 3 of type tie-fragment-debug
(defmethod inspect ((this tie-fragment-debug))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tie-fragment-debug)
  (format #t "~1Tnum-tris: ~D~%" (-> this num-tris))
  (format #t "~1Tnum-dverts: ~D~%" (-> this num-dverts))
  (format #t "~1Tdebug-lines: ~A~%" (-> this debug-lines))
  (label cfg-4)
  this
  )

;; definition of type tie-fragment
(deftype tie-fragment (drawable)
  ((gif-ref        (inline-array adgif-shader)  :overlay-at id)
   (point-ref      uint32                       :offset   8)
   (color-index    uint16                       :offset  12)
   (base-colors    uint8                        :offset  14)
   (tex-count      uint16                       :offset  32)
   (gif-count      uint16                       :offset  34)
   (vertex-count   uint16                       :offset  36)
   (color-count    uint16                       :offset  38)
   (dp-ref         uint32                       :offset  40)
   (dp-qwc         uint32                       :offset  44)
   (generic-ref    uint32                       :offset  48)
   (generic-count  uint16                       :offset  52)
   (normal-count   uint16                       :offset  54)
   (normal-ref     uint32                       :offset  56)
   (debug          tie-fragment-debug           :offset  60)
   )
  )

;; definition for method 3 of type tie-fragment
(defmethod inspect ((this tie-fragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tgif-ref: #x~X~%" (-> this gif-ref))
  (format #t "~1Tpoint-ref: #x~X~%" (-> this point-ref))
  (format #t "~1Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~1Tbase-colors: ~D~%" (-> this base-colors))
  (format #t "~1Ttex-count: ~D~%" (-> this tex-count))
  (format #t "~1Tgif-count: ~D~%" (-> this gif-count))
  (format #t "~1Tvertex-count: ~D~%" (-> this vertex-count))
  (format #t "~1Tcolor-count: ~D~%" (-> this color-count))
  (format #t "~1Tdp-ref: #x~X~%" (-> this dp-ref))
  (format #t "~1Tdp-qwc: ~D~%" (-> this dp-qwc))
  (format #t "~1Tgeneric-ref: #x~X~%" (-> this generic-ref))
  (format #t "~1Tgeneric-count: ~D~%" (-> this generic-count))
  (format #t "~1Tnormal-count: ~D~%" (-> this normal-count))
  (format #t "~1Tnormal-ref: #x~X~%" (-> this normal-ref))
  (format #t "~1Tdebug: #<tie-fragment-debug @ #x~X>~%" (-> this debug))
  (label cfg-4)
  this
  )

;; definition of type instance-tie
(deftype instance-tie (instance)
  ((color-indices  uint32                :offset   8)
   (bucket-ptr     prototype-bucket-tie  :offset  12)
   (max-scale      uint16                :overlay-at (-> origin data 3))
   (rmin-scale     uint16                :overlay-at (-> origin data 11))
   )
  )

;; definition for method 3 of type instance-tie
(defmethod inspect ((this instance-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tbucket-index: ~D~%" (-> this bucket-index))
  (format #t "~1Torigin: #<matrix4h @ #x~X>~%" (-> this origin))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Twind-index: ~D~%" (-> this wind-index))
  (format #t "~1Tcolor-indices: #x~X~%" (-> this color-indices))
  (format #t "~1Tbucket-ptr: ~A~%" (-> this bucket-ptr))
  (format #t "~1Tmax-scale: ~D~%" (-> this max-scale))
  (format #t "~1Trmin-scale: ~D~%" (-> this rmin-scale))
  (label cfg-4)
  this
  )

;; definition of type drawable-inline-array-instance-tie
(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((data  instance-tie  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type drawable-tree-instance-tie
(deftype drawable-tree-instance-tie (drawable-tree)
  ((prototypes  proxy-prototype-array-tie  :offset   8)
   )
  )

;; definition for method 3 of type drawable-tree-instance-tie
(defmethod inspect ((this drawable-tree-instance-tie))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (dotimes (s5-0 (-> this length))
    (format #t "~T  [~D]~1Tdata: ~A~%" s5-0 (-> this data s5-0))
    )
  (format #t "~1Tprototypes: ~A~%" (-> this prototypes))
  (label cfg-7)
  this
  )

;; definition of type prototype-tie
(deftype prototype-tie (drawable-inline-array)
  ((data  tie-fragment  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type tie-matrix
(deftype tie-matrix (structure)
  ((mat           matrix  :inline)
   (morph         qword   :inline)
   (fog           qword   :inline)
   (envmap-flag   uint32  :overlay-at (-> fog data 0))
   (guard-flag    uint32  :overlay-at (-> fog data 1))
   (vertex-alpha  float   :overlay-at (-> fog data 2))
   (fog-value     float   :overlay-at (-> fog data 3))
   (fixed-alpha   float   :overlay-at (-> morph data 1))
   )
  )

;; definition for method 3 of type tie-matrix
(defmethod inspect ((this tie-matrix))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tie-matrix)
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (format #t "~1Tmorph: #<qword @ #x~X>~%" (-> this morph))
  (format #t "~1Tfog: #<qword @ #x~X>~%" (-> this fog))
  (format #t "~1Tenvmap-flag: ~D~%" (-> this envmap-flag))
  (format #t "~1Tguard-flag: ~D~%" (-> this guard-flag))
  (format #t "~1Tvertex-alpha: ~f~%" (-> this vertex-alpha))
  (format #t "~1Tfog-value: ~f~%" (-> this fog-value))
  (format #t "~1Tfixed-alpha: ~f~%" (-> this fixed-alpha))
  (label cfg-4)
  this
  )

;; definition of type instance-tie-work
(deftype instance-tie-work (structure)
  ((wind-const                      vector      :inline)
   (hmge-d                          vector      :inline)
   (hvdf-offset                     vector      :inline)
   (wind-force                      vector      :inline)
   (constant                        vector      :inline)
   (far-morph                       vector      :inline)
   (dist-test                       vector      :inline)
   (min-dist                        vector      :inline)
   (guard-plane                     plane       4 :inline)
   (upload-color-0                  dma-packet  :inline)
   (upload-color-1                  dma-packet  :inline)
   (upload-color-2                  dma-packet  :inline)
   (upload-color-ret                dma-packet  :inline)
   (upload-color-temp               dma-packet  :inline)
   (generic-color-0                 dma-packet  :inline)
   (generic-color-1                 dma-packet  :inline)
   (generic-color-end               dma-packet  :inline)
   (envmap-color-0                  dma-packet  :inline)
   (envmap-color-1                  dma-packet  :inline)
   (tie-scissor-perspective-matrix  matrix      :inline)
   (tod-env-color                   vector      :inline)
   (morph-temp                      vector      :inline)
   (fog-temp                        vector      :inline)
   (fade-temp                       float)
   (wind-vectors                    uint32)
   (test-id                         uint32)
   (test-id2                        uint32)
   (dma-buffer                      basic)
   (to-spr                          uint32)
   (from-spr                        uint32)
   (wind-work                       uint32)
   (cur-vis-bits                    uint32)
   (end-vis-bits                    uint32)
   (refl-fade-fac                   float)
   (refl-fade-end                   float)
   (flags                           uint32)
   (vanish-flag                     uint32)
   (translucent-flag                uint32)
   (wait-from-spr                   uint32)
   (wait-to-spr                     uint32)
   (use-etie                        symbol)
   (buffer-start                    uint32)
   (buffer-end                      uint32)
   (tfrag-dists                     uint32)
   (alpha-dists                     uint32)
   (water-dists                     uint32)
   )
  )

;; definition for method 3 of type instance-tie-work
(defmethod inspect ((this instance-tie-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'instance-tie-work)
  (format #t "~1Twind-const: #<vector @ #x~X>~%" (-> this wind-const))
  (format #t "~1Thmge-d: #<vector @ #x~X>~%" (-> this hmge-d))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~1Twind-force: #<vector @ #x~X>~%" (-> this wind-force))
  (format #t "~1Tconstant: #<vector @ #x~X>~%" (-> this constant))
  (format #t "~1Tfar-morph: #<vector @ #x~X>~%" (-> this far-morph))
  (format #t "~1Tdist-test: #<vector @ #x~X>~%" (-> this dist-test))
  (format #t "~1Tmin-dist: #<vector @ #x~X>~%" (-> this min-dist))
  (format #t "~1Tguard-plane[4] @ #x~X~%" (-> this guard-plane))
  (format #t "~1Tupload-color-0: #<dma-packet @ #x~X>~%" (-> this upload-color-0))
  (format #t "~1Tupload-color-1: #<dma-packet @ #x~X>~%" (-> this upload-color-1))
  (format #t "~1Tupload-color-2: #<dma-packet @ #x~X>~%" (-> this upload-color-2))
  (format #t "~1Tupload-color-ret: #<dma-packet @ #x~X>~%" (-> this upload-color-ret))
  (format #t "~1Tupload-color-temp: #<dma-packet @ #x~X>~%" (-> this upload-color-temp))
  (format #t "~1Tgeneric-color-0: #<dma-packet @ #x~X>~%" (-> this generic-color-0))
  (format #t "~1Tgeneric-color-1: #<dma-packet @ #x~X>~%" (-> this generic-color-1))
  (format #t "~1Tgeneric-color-end: #<dma-packet @ #x~X>~%" (-> this generic-color-end))
  (format #t "~1Tenvmap-color-0: #<dma-packet @ #x~X>~%" (-> this envmap-color-0))
  (format #t "~1Tenvmap-color-1: #<dma-packet @ #x~X>~%" (-> this envmap-color-1))
  (format #t "~1Ttie-scissor-perspective-matrix: #<matrix @ #x~X>~%" (-> this tie-scissor-perspective-matrix))
  (format #t "~1Ttod-env-color: #<vector @ #x~X>~%" (-> this tod-env-color))
  (format #t "~1Tmorph-temp: #<vector @ #x~X>~%" (-> this morph-temp))
  (format #t "~1Tfog-temp: #<vector @ #x~X>~%" (-> this fog-temp))
  (format #t "~1Tfade-temp: ~f~%" (-> this fade-temp))
  (format #t "~1Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~1Ttest-id: ~D~%" (-> this test-id))
  (format #t "~1Ttest-id2: ~D~%" (-> this test-id2))
  (format #t "~1Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~1Tto-spr: ~D~%" (-> this to-spr))
  (format #t "~1Tfrom-spr: ~D~%" (-> this from-spr))
  (format #t "~1Twind-work: ~D~%" (-> this wind-work))
  (format #t "~1Tcur-vis-bits: ~D~%" (-> this cur-vis-bits))
  (format #t "~1Tend-vis-bits: ~D~%" (-> this end-vis-bits))
  (format #t "~1Trefl-fade-fac: ~f~%" (-> this refl-fade-fac))
  (format #t "~1Trefl-fade-end: ~f~%" (-> this refl-fade-end))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tvanish-flag: ~D~%" (-> this vanish-flag))
  (format #t "~1Ttranslucent-flag: ~D~%" (-> this translucent-flag))
  (format #t "~1Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~1Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~1Tuse-etie: ~A~%" (-> this use-etie))
  (format #t "~1Tbuffer-start: #x~X~%" (-> this buffer-start))
  (format #t "~1Tbuffer-end: #x~X~%" (-> this buffer-end))
  (format #t "~1Ttfrag-dists: #x~X~%" (-> this tfrag-dists))
  (format #t "~1Talpha-dists: #x~X~%" (-> this alpha-dists))
  (format #t "~1Twater-dists: #x~X~%" (-> this water-dists))
  (label cfg-4)
  this
  )

;; definition of type instance-tie-dma
(deftype instance-tie-dma (structure)
  ((banka  instance-tie       32 :inline)
   (bankb  instance-tie       32 :inline)
   (outa   uint128            256)
   (outb   uint128            256)
   (work   instance-tie-work  :dynamic)
   )
  )

;; definition for method 3 of type instance-tie-dma
(defmethod inspect ((this instance-tie-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'instance-tie-dma)
  (format #t "~1Tbanka[32] @ #x~X~%" (-> this banka))
  (format #t "~1Tbankb[32] @ #x~X~%" (-> this bankb))
  (format #t "~1Touta[256] @ #x~X~%" (-> this outa))
  (format #t "~1Toutb[256] @ #x~X~%" (-> this outb))
  (format #t "~1Twork: #<instance-tie-work @ #x~X>~%" (-> this work 0))
  (label cfg-4)
  this
  )

;; definition of type prototype-tie-work
(deftype prototype-tie-work (structure)
  ((upload-flushe               dma-packet  :inline)
   (upload-palette              dma-packet  :inline)
   (upload-model-0              dma-packet  :inline)
   (upload-model-1              dma-packet  :inline)
   (upload-model-2              dma-packet  :inline)
   (upload-model-3              dma-packet  :inline)
   (upload-model-near-0         dma-packet  :inline)
   (upload-model-near-1         dma-packet  :inline)
   (upload-model-near-2         dma-packet  :inline)
   (upload-model-near-3         dma-packet  :inline)
   (upload-model-near-4         dma-packet  :inline)
   (envmap-palette              dma-packet  :inline)
   (envmap-shader               dma-packet  :inline)
   (upload-envmap-0             dma-packet  :inline)
   (upload-envmap-1             dma-packet  :inline)
   (upload-envmap-2             dma-packet  :inline)
   (upload-envmap-3             dma-packet  :inline)
   (upload-envmap-4             dma-packet  :inline)
   (upload-envmap-scissor-4     dma-packet  :inline)
   (generic-palette             dma-packet  :inline)
   (generic-model-0             dma-packet  :inline)
   (generic-model-1             dma-packet  :inline)
   (generic-model-2             dma-packet  :inline)
   (model-next                  dma-packet  :inline)
   (clamp                       uint64)
   (prototype-array             basic)
   (wait-from-spr               uint32)
   (wait-to-spr                 uint32)
   (mood                        mood-context)
   (last                        uint32      16 :offset 416)
   (next                        uint32      16)
   (count                       uint16      16)
   (tie-last                    uint32         :overlay-at (-> last 0))
   (tie-next                    uint32         :overlay-at (-> next 0))
   (tie-count                   uint16         :overlay-at (-> count 0))
   (trans-last                  uint32         :overlay-at (-> last 1))
   (trans-next                  uint32         :overlay-at (-> next 1))
   (trans-count                 uint16         :overlay-at (-> count 1))
   (water-last                  uint32         :overlay-at (-> last 2))
   (water-next                  uint32         :overlay-at (-> next 2))
   (water-count                 uint16         :overlay-at (-> count 2))
   (scissor-last                uint32         :overlay-at (-> last 3))
   (scissor-next                uint32         :overlay-at (-> next 3))
   (scissor-count               uint16         :overlay-at (-> count 3))
   (scissor-trans-last          uint32         :overlay-at (-> last 4))
   (scissor-trans-next          uint32         :overlay-at (-> next 4))
   (scissor-trans-count         uint16         :overlay-at (-> count 4))
   (scissor-water-last          uint32         :overlay-at (-> last 5))
   (scissor-water-next          uint32         :overlay-at (-> next 5))
   (scissor-water-count         uint16         :overlay-at (-> count 5))
   (envmap-last                 uint32         :overlay-at (-> last 6))
   (envmap-next                 uint32         :overlay-at (-> next 6))
   (envmap-count                uint16         :overlay-at (-> count 6))
   (envmap-trans-last           uint32         :overlay-at (-> last 7))
   (envmap-trans-next           uint32         :overlay-at (-> next 7))
   (envmap-trans-count          uint16         :overlay-at (-> count 7))
   (envmap-water-last           uint32         :overlay-at (-> last 8))
   (envmap-water-next           uint32         :overlay-at (-> next 8))
   (envmap-water-count          uint16         :overlay-at (-> count 8))
   (envmap-scissor-last         uint32         :overlay-at (-> last 9))
   (envmap-scissor-next         uint32         :overlay-at (-> next 9))
   (envmap-scissor-count        uint16         :overlay-at (-> count 9))
   (envmap-scissor-trans-last   uint32         :overlay-at (-> last 10))
   (envmap-scissor-trans-next   uint32         :overlay-at (-> next 10))
   (envmap-scissor-trans-count  uint16         :overlay-at (-> count 10))
   (envmap-scissor-water-last   uint32         :overlay-at (-> last 11))
   (envmap-scissor-water-next   uint32         :overlay-at (-> next 11))
   (envmap-scissor-water-count  uint16         :overlay-at (-> count 11))
   (generic-last                uint32         :overlay-at (-> last 12))
   (generic-next                uint32         :overlay-at (-> next 12))
   (generic-count               uint16         :overlay-at (-> count 12))
   (generic-trans-last          uint32         :overlay-at (-> last 13))
   (generic-trans-next          uint32         :overlay-at (-> next 13))
   (generic-trans-count         uint16         :overlay-at (-> count 13))
   (generic-water-last          uint32         :overlay-at (-> last 14))
   (generic-water-next          uint32         :overlay-at (-> next 14))
   (generic-water-count         uint16         :overlay-at (-> count 14))
   (vanish-last                 uint32         :overlay-at (-> last 15))
   (vanish-next                 uint32         :overlay-at (-> next 15))
   (vanish-count                uint16         :overlay-at (-> count 15))
   )
  )

;; definition for method 3 of type prototype-tie-work
(defmethod inspect ((this prototype-tie-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'prototype-tie-work)
  (format #t "~1Tupload-flushe: #<dma-packet @ #x~X>~%" (-> this upload-flushe))
  (format #t "~1Tupload-palette: #<dma-packet @ #x~X>~%" (-> this upload-palette))
  (format #t "~1Tupload-model-0: #<dma-packet @ #x~X>~%" (-> this upload-model-0))
  (format #t "~1Tupload-model-1: #<dma-packet @ #x~X>~%" (-> this upload-model-1))
  (format #t "~1Tupload-model-2: #<dma-packet @ #x~X>~%" (-> this upload-model-2))
  (format #t "~1Tupload-model-3: #<dma-packet @ #x~X>~%" (-> this upload-model-3))
  (format #t "~1Tupload-model-near-0: #<dma-packet @ #x~X>~%" (-> this upload-model-near-0))
  (format #t "~1Tupload-model-near-1: #<dma-packet @ #x~X>~%" (-> this upload-model-near-1))
  (format #t "~1Tupload-model-near-2: #<dma-packet @ #x~X>~%" (-> this upload-model-near-2))
  (format #t "~1Tupload-model-near-3: #<dma-packet @ #x~X>~%" (-> this upload-model-near-3))
  (format #t "~1Tupload-model-near-4: #<dma-packet @ #x~X>~%" (-> this upload-model-near-4))
  (format #t "~1Tenvmap-palette: #<dma-packet @ #x~X>~%" (-> this envmap-palette))
  (format #t "~1Tenvmap-shader: #<dma-packet @ #x~X>~%" (-> this envmap-shader))
  (format #t "~1Tupload-envmap-0: #<dma-packet @ #x~X>~%" (-> this upload-envmap-0))
  (format #t "~1Tupload-envmap-1: #<dma-packet @ #x~X>~%" (-> this upload-envmap-1))
  (format #t "~1Tupload-envmap-2: #<dma-packet @ #x~X>~%" (-> this upload-envmap-2))
  (format #t "~1Tupload-envmap-3: #<dma-packet @ #x~X>~%" (-> this upload-envmap-3))
  (format #t "~1Tupload-envmap-4: #<dma-packet @ #x~X>~%" (-> this upload-envmap-4))
  (format #t "~1Tupload-envmap-scissor-4: #<dma-packet @ #x~X>~%" (-> this upload-envmap-scissor-4))
  (format #t "~1Tgeneric-palette: #<dma-packet @ #x~X>~%" (-> this generic-palette))
  (format #t "~1Tgeneric-model-0: #<dma-packet @ #x~X>~%" (-> this generic-model-0))
  (format #t "~1Tgeneric-model-1: #<dma-packet @ #x~X>~%" (-> this generic-model-1))
  (format #t "~1Tgeneric-model-2: #<dma-packet @ #x~X>~%" (-> this generic-model-2))
  (format #t "~1Tmodel-next: #<dma-packet @ #x~X>~%" (-> this model-next))
  (format #t "~1Tclamp: ~D~%" (-> this clamp))
  (format #t "~1Tprototype-array: ~A~%" (-> this prototype-array))
  (format #t "~1Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~1Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~1Tmood: #<mood-context @ #x~X>~%" (-> this mood))
  (format #t "~1Tlast[16] @ #x~X~%" (-> this last))
  (format #t "~1Tnext[16] @ #x~X~%" (-> this next))
  (format #t "~1Tcount[16] @ #x~X~%" (-> this count))
  (format #t "~1Ttie-last: #x~X~%" (-> this tie-last))
  (format #t "~1Ttie-next: #x~X~%" (-> this tie-next))
  (format #t "~1Ttie-count: ~D~%" (-> this tie-count))
  (format #t "~1Ttrans-last: #x~X~%" (-> this trans-last))
  (format #t "~1Ttrans-next: #x~X~%" (-> this trans-next))
  (format #t "~1Ttrans-count: ~D~%" (-> this trans-count))
  (format #t "~1Twater-last: #x~X~%" (-> this water-last))
  (format #t "~1Twater-next: #x~X~%" (-> this water-next))
  (format #t "~1Twater-count: ~D~%" (-> this water-count))
  (format #t "~1Tscissor-last: #x~X~%" (-> this scissor-last))
  (format #t "~1Tscissor-next: #x~X~%" (-> this scissor-next))
  (format #t "~1Tscissor-count: ~D~%" (-> this scissor-count))
  (format #t "~1Tscissor-trans-last: #x~X~%" (-> this scissor-trans-last))
  (format #t "~1Tscissor-trans-next: #x~X~%" (-> this scissor-trans-next))
  (format #t "~1Tscissor-trans-count: ~D~%" (-> this scissor-trans-count))
  (format #t "~1Tscissor-water-last: #x~X~%" (-> this scissor-water-last))
  (format #t "~1Tscissor-water-next: #x~X~%" (-> this scissor-water-next))
  (format #t "~1Tscissor-water-count: ~D~%" (-> this scissor-water-count))
  (format #t "~1Tenvmap-last: #x~X~%" (-> this envmap-last))
  (format #t "~1Tenvmap-next: #x~X~%" (-> this envmap-next))
  (format #t "~1Tenvmap-count: ~D~%" (-> this envmap-count))
  (format #t "~1Tenvmap-trans-last: #x~X~%" (-> this envmap-trans-last))
  (format #t "~1Tenvmap-trans-next: #x~X~%" (-> this envmap-trans-next))
  (format #t "~1Tenvmap-trans-count: ~D~%" (-> this envmap-trans-count))
  (format #t "~1Tenvmap-water-last: #x~X~%" (-> this envmap-water-last))
  (format #t "~1Tenvmap-water-next: #x~X~%" (-> this envmap-water-next))
  (format #t "~1Tenvmap-water-count: ~D~%" (-> this envmap-water-count))
  (format #t "~1Tenvmap-scissor-last: #x~X~%" (-> this envmap-scissor-last))
  (format #t "~1Tenvmap-scissor-next: #x~X~%" (-> this envmap-scissor-next))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> this envmap-scissor-count))
  (format #t "~1Tenvmap-scissor-trans-last: #x~X~%" (-> this envmap-scissor-trans-last))
  (format #t "~1Tenvmap-scissor-trans-next: #x~X~%" (-> this envmap-scissor-trans-next))
  (format #t "~1Tenvmap-scissor-trans-count: ~D~%" (-> this envmap-scissor-trans-count))
  (format #t "~1Tenvmap-scissor-water-last: #x~X~%" (-> this envmap-scissor-water-last))
  (format #t "~1Tenvmap-scissor-water-next: #x~X~%" (-> this envmap-scissor-water-next))
  (format #t "~1Tenvmap-scissor-water-count: ~D~%" (-> this envmap-scissor-water-count))
  (format #t "~1Tgeneric-last: #x~X~%" (-> this generic-last))
  (format #t "~1Tgeneric-next: #x~X~%" (-> this generic-next))
  (format #t "~1Tgeneric-count: ~D~%" (-> this generic-count))
  (format #t "~1Tgeneric-trans-last: #x~X~%" (-> this generic-trans-last))
  (format #t "~1Tgeneric-trans-next: #x~X~%" (-> this generic-trans-next))
  (format #t "~1Tgeneric-trans-count: ~D~%" (-> this generic-trans-count))
  (format #t "~1Tgeneric-water-last: #x~X~%" (-> this generic-water-last))
  (format #t "~1Tgeneric-water-next: #x~X~%" (-> this generic-water-next))
  (format #t "~1Tgeneric-water-count: ~D~%" (-> this generic-water-count))
  (format #t "~1Tvanish-last: #x~X~%" (-> this vanish-last))
  (format #t "~1Tvanish-next: #x~X~%" (-> this vanish-next))
  (format #t "~1Tvanish-count: ~D~%" (-> this vanish-count))
  (label cfg-4)
  this
  )

;; definition of type prototype-tie-dma
(deftype prototype-tie-dma (structure)
  ((colora                rgba     256)
   (colorb                rgba     256)
   (outa                  uint128  256)
   (outb                  uint128  256)
   (geometry              uint32   4)
   (next                  uint32   12 :offset 10256)
   (count                 uint16   12 :offset 10304)
   (counts                uint32   4  :offset 10328)
   (palette-ptr           uint32      :overlay-at (-> counts 2))
   (model-ptr             uint32      :overlay-at (-> counts 3))
   (ret-ptr               uint32      :offset 10344)
   (length                uint32      :offset 10348)
   (flags                 uint32      :offset 10352)
   (dma-buffer            basic       :offset 10356)
   (this-frag-count       uint32      :offset 10360)
   (frag-count            uint8    4  :offset 10364)
   (from-spr              uint32      :offset 10368)
   (to-spr                uint32      :offset 10372)
   (spr-out               uint32      :offset 10376)
   (this-count            uint32      :offset 10380)
   (scissor-geometry      uint32      :overlay-at (-> geometry 0))
   (near-geometry         uint32      :overlay-at (-> geometry 1))
   (mid-geometry          uint32      :overlay-at (-> geometry 2))
   (far-geometry          uint32      :overlay-at (-> geometry 3))
   (scissor-frag-count    uint8       :overlay-at (-> frag-count 0))
   (near-frag-count       uint8       :overlay-at (-> frag-count 1))
   (mid-frag-count        uint8       :overlay-at (-> frag-count 2))
   (far-frag-count        uint8       :overlay-at (-> frag-count 3))
   (tie-scissor-next      uint32      :overlay-at (-> next 0))
   (tie-near-next         uint32      :overlay-at (-> next 1))
   (tie-mid-next          uint32      :overlay-at (-> next 2))
   (tie-far-next          uint32      :overlay-at (-> next 3))
   (trans-scissor-next    uint32   4  :overlay-at tie-scissor-next)
   (trans-near-next       uint32      :overlay-at tie-near-next)
   (trans-mid-next        uint32      :overlay-at tie-mid-next)
   (trans-far-next        uint32      :overlay-at tie-far-next)
   (water-scissor-next    uint32   4  :overlay-at tie-scissor-next)
   (water-near-next       uint32      :overlay-at trans-near-next)
   (water-mid-next        uint32      :overlay-at trans-mid-next)
   (water-far-next        uint32      :overlay-at trans-far-next)
   (envmap-scissor-next   uint32   4  :overlay-at (-> next 4))
   (envmap-near-next      uint32      :overlay-at (-> envmap-scissor-next 1))
   (envmap-mid-next       uint32      :overlay-at (-> envmap-scissor-next 2))
   (envmap-far-next       uint32      :overlay-at (-> envmap-scissor-next 3))
   (generic-near-next     uint32      :overlay-at (-> next 8))
   (generic-mid-next      uint32      :overlay-at (-> next 9))
   (generic-far-next      uint32      :overlay-at (-> next 10))
   (vanish-next           uint32      :overlay-at (-> next 11))
   (tie-count             uint16      :overlay-at (-> count 0))
   (tie-scissor-count     uint16      :overlay-at tie-count)
   (tie-near-count        uint16      :overlay-at (-> count 1))
   (tie-mid-count         uint16      :overlay-at (-> count 2))
   (tie-far-count         uint16      :overlay-at (-> count 3))
   (trans-count           uint16      :overlay-at tie-scissor-count)
   (trans-scissor-count   uint16      :overlay-at trans-count)
   (trans-near-count      uint16      :overlay-at tie-near-count)
   (trans-mid-count       uint16      :overlay-at tie-mid-count)
   (trans-far-count       uint16      :overlay-at tie-far-count)
   (water-count           uint16      :overlay-at trans-scissor-count)
   (water-scissor-count   uint16      :overlay-at water-count)
   (water-near-count      uint16      :overlay-at trans-near-count)
   (water-mid-count       uint16      :overlay-at trans-mid-count)
   (water-far-count       uint16      :overlay-at trans-far-count)
   (envmap-count          uint16      :overlay-at (-> count 4))
   (envmap-scissor-count  uint16      :overlay-at envmap-count)
   (envmap-near-count     uint16      :overlay-at (-> count 5))
   (envmap-mid-count      uint16      :overlay-at (-> count 6))
   (envmap-far-count      uint16      :overlay-at (-> count 7))
   (generic-count         uint16      :overlay-at (-> count 8))
   (generic-near-count    uint16      :overlay-at generic-count)
   (generic-mid-count     uint16      :overlay-at (-> count 9))
   (generic-far-count     uint16      :overlay-at (-> count 10))
   (vanish-count          uint16      :overlay-at (-> count 11))
   (next-clear            uint32   3  :overlay-at tie-scissor-next)
   (count-clear           uint16   3  :overlay-at water-scissor-count)
   )
  )

;; definition for method 3 of type prototype-tie-dma
(defmethod inspect ((this prototype-tie-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'prototype-tie-dma)
  (format #t "~1Tcolora[256] @ #x~X~%" (-> this colora))
  (format #t "~1Tcolorb[256] @ #x~X~%" (-> this colorb))
  (format #t "~1Touta[256] @ #x~X~%" (-> this outa))
  (format #t "~1Toutb[256] @ #x~X~%" (-> this outb))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~1Tnext[12] @ #x~X~%" (-> this next))
  (format #t "~1Tcount[12] @ #x~X~%" (-> this count))
  (format #t "~1Tcounts[4] @ #x~X~%" (-> this counts))
  (format #t "~1Tpalette-ptr: #x~X~%" (-> this palette-ptr))
  (format #t "~1Tmodel-ptr: #x~X~%" (-> this model-ptr))
  (format #t "~1Tret-ptr: #x~X~%" (-> this ret-ptr))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~1Tthis-frag-count: ~D~%" (-> this this-frag-count))
  (format #t "~1Tfrag-count[4] @ #x~X~%" (-> this frag-count))
  (format #t "~1Tfrom-spr: #x~X~%" (-> this from-spr))
  (format #t "~1Tto-spr: #x~X~%" (-> this to-spr))
  (format #t "~1Tspr-out: #x~X~%" (-> this spr-out))
  (format #t "~1Tthis-count: ~D~%" (-> this this-count))
  (format #t "~1Tscissor-geometry: #x~X~%" (-> this scissor-geometry))
  (format #t "~1Tnear-geometry: #x~X~%" (-> this near-geometry))
  (format #t "~1Tmid-geometry: #x~X~%" (-> this mid-geometry))
  (format #t "~1Tfar-geometry: #x~X~%" (-> this far-geometry))
  (format #t "~1Tscissor-frag-count: ~D~%" (-> this scissor-frag-count))
  (format #t "~1Tnear-frag-count: ~D~%" (-> this near-frag-count))
  (format #t "~1Tmid-frag-count: ~D~%" (-> this mid-frag-count))
  (format #t "~1Tfar-frag-count: ~D~%" (-> this far-frag-count))
  (format #t "~1Ttie-scissor-next: #x~X~%" (-> this tie-scissor-next))
  (format #t "~1Ttie-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Ttie-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Ttie-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Ttrans-scissor-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttrans-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Ttrans-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Ttrans-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Twater-scissor-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Twater-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Twater-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Twater-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Tenvmap-scissor-next[4] @ #x~X~%" (-> this envmap-scissor-next))
  (format #t "~1Tenvmap-near-next: #x~X~%" (-> this envmap-near-next))
  (format #t "~1Tenvmap-mid-next: #x~X~%" (-> this envmap-mid-next))
  (format #t "~1Tenvmap-far-next: #x~X~%" (-> this envmap-far-next))
  (format #t "~1Tgeneric-near-next: #x~X~%" (-> this generic-near-next))
  (format #t "~1Tgeneric-mid-next: #x~X~%" (-> this generic-mid-next))
  (format #t "~1Tgeneric-far-next: #x~X~%" (-> this generic-far-next))
  (format #t "~1Tvanish-next: #x~X~%" (-> this vanish-next))
  (format #t "~1Ttie-count: ~D~%" (-> this tie-count))
  (format #t "~1Ttie-scissor-count: ~D~%" (-> this tie-count))
  (format #t "~1Ttie-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Ttie-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Ttie-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Ttrans-count: ~D~%" (-> this tie-count))
  (format #t "~1Ttrans-scissor-count: ~D~%" (-> this tie-count))
  (format #t "~1Ttrans-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Ttrans-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Ttrans-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Twater-count: ~D~%" (-> this tie-count))
  (format #t "~1Twater-scissor-count: ~D~%" (-> this tie-count))
  (format #t "~1Twater-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Twater-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Twater-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Tenvmap-count: ~D~%" (-> this envmap-count))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> this envmap-count))
  (format #t "~1Tenvmap-near-count: ~D~%" (-> this envmap-near-count))
  (format #t "~1Tenvmap-mid-count: ~D~%" (-> this envmap-mid-count))
  (format #t "~1Tenvmap-far-count: ~D~%" (-> this envmap-far-count))
  (format #t "~1Tgeneric-count: ~D~%" (-> this generic-count))
  (format #t "~1Tgeneric-near-count: ~D~%" (-> this generic-count))
  (format #t "~1Tgeneric-mid-count: ~D~%" (-> this generic-mid-count))
  (format #t "~1Tgeneric-far-count: ~D~%" (-> this generic-far-count))
  (format #t "~1Tvanish-count: ~D~%" (-> this vanish-count))
  (format #t "~1Tnext-clear[3] @ #x~X~%" (-> this next))
  (format #t "~1Tcount-clear[3] @ #x~X~%" (-> this count))
  (label cfg-4)
  this
  )

;; definition for symbol *instance-tie-work-copy*, type instance-tie-work
(define *instance-tie-work-copy* (the-as instance-tie-work #f))

;; failed to figure out what this is:
0
