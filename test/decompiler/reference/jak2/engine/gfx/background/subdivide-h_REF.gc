;;-*-Lisp-*-
(in-package goal)

;; definition of type subdivide-settings
(deftype subdivide-settings (basic)
  ((dist   float 5 :offset-assert   4)
   (meters float 5 :offset-assert  24)
   (close  float 8 :offset-assert  44)
   (far    float 8 :offset-assert  76)
   )
  :method-count-assert 9
  :size-assert         #x6c
  :flag-assert         #x90000006c
  (:methods
    (new (symbol type meters meters) _type_ 0)
    )
  )

;; definition for method 3 of type subdivide-settings
(defmethod inspect subdivide-settings ((obj subdivide-settings))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tdist[5] @ #x~X~%" (-> obj dist))
  (format #t "~1Tmeters[5] @ #x~X~%" (-> obj meters))
  (format #t "~1Tclose[8] @ #x~X~%" (-> obj close))
  (format #t "~1Tfar[8] @ #x~X~%" (-> obj far))
  (label cfg-4)
  obj
  )

;; definition for method 0 of type subdivide-settings
(defmethod new subdivide-settings ((allocation symbol) (type-to-make type) (arg0 meters) (arg1 meters))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (dotimes (v1-2 6)
      (set! (-> v0-0 close v1-2) arg0)
      (set! (-> v0-0 far v1-2) arg1)
      )
    v0-0
    )
  )

;; definition of type subdivide-dists
(deftype subdivide-dists (structure)
  ((data   uint32  32        :offset-assert   0)
   (vector vector  8 :inline :offset          0)
   (k0s    uint128 4         :offset          0)
   (k1s    uint128 4         :offset         64)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type subdivide-dists
(defmethod inspect subdivide-dists ((obj subdivide-dists))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'subdivide-dists)
  (format #t "~1Tdata[32] @ #x~X~%" (-> obj data))
  (format #t "~1Tvector[8] @ #x~X~%" (-> obj data))
  (format #t "~1Tk0s[4] @ #x~X~%" (-> obj data))
  (format #t "~1Tk1s[4] @ #x~X~%" (-> obj k1s))
  (label cfg-4)
  obj
  )

;; definition of type terrain-stats
(deftype terrain-stats (structure)
  ((pris                     tr-stat :inline :offset-assert   0)
   (tie-generic              tr-stat :inline :offset-assert  16)
   (tie-vanish               tr-stat :inline :offset-assert  32)
   (tie                      tr-stat :inline :offset-assert  48)
   (tie-scissor              tr-stat :inline :offset-assert  64)
   (tie-envmap               tr-stat :inline :offset-assert  80)
   (tie-envmap-scissor       tr-stat :inline :offset-assert  96)
   (tie-trans                tr-stat :inline :offset-assert 112)
   (tie-scissor-trans        tr-stat :inline :offset-assert 128)
   (tie-envmap-trans         tr-stat :inline :offset-assert 144)
   (tie-envmap-scissor-trans tr-stat :inline :offset-assert 160)
   (tie-water                tr-stat :inline :offset-assert 176)
   (tie-scissor-water        tr-stat :inline :offset-assert 192)
   (tie-envmap-water         tr-stat :inline :offset-assert 208)
   (tie-envmap-scissor-water tr-stat :inline :offset-assert 224)
   (shrub-near               tr-stat :inline :offset-assert 240)
   (shrub                    tr-stat :inline :offset-assert 256)
   (tfrag-scissor            tr-stat :inline :offset-assert 272)
   (tfrag                    tr-stat :inline :offset-assert 288)
   (billboard                tr-stat :inline :offset-assert 304)
   (tfrag-trans              tr-stat :inline :offset-assert 320)
   (tfrag-scissor-trans      tr-stat :inline :offset-assert 336)
   (tfrag-water              tr-stat :inline :offset-assert 352)
   (tfrag-scissor-water      tr-stat :inline :offset-assert 368)
   (trans-pris               tr-stat :inline :offset-assert 384)
   (trans-shrub              tr-stat :inline :offset-assert 400)
   (ocean-mid                tr-stat :inline :offset-assert 416)
   (ocean-near               tr-stat :inline :offset-assert 432)
   (shadow                   tr-stat :inline :offset-assert 448)
   (total                    tr-stat :inline :offset-assert 464)
   )
  :method-count-assert 9
  :size-assert         #x1e0
  :flag-assert         #x9000001e0
  )

;; definition for method 3 of type terrain-stats
(defmethod inspect terrain-stats ((obj terrain-stats))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'terrain-stats)
  (format #t "~1Tpris: #<tr-stat @ #x~X>~%" (-> obj pris))
  (format #t "~1Ttie-generic: #<tr-stat @ #x~X>~%" (-> obj tie-generic))
  (format #t "~1Ttie-vanish: #<tr-stat @ #x~X>~%" (-> obj tie-vanish))
  (format #t "~1Ttie: #<tr-stat @ #x~X>~%" (-> obj tie))
  (format #t "~1Ttie-scissor: #<tr-stat @ #x~X>~%" (-> obj tie-scissor))
  (format #t "~1Ttie-envmap: #<tr-stat @ #x~X>~%" (-> obj tie-envmap))
  (format #t "~1Ttie-envmap-scissor: #<tr-stat @ #x~X>~%" (-> obj tie-envmap-scissor))
  (format #t "~1Ttie-trans: #<tr-stat @ #x~X>~%" (-> obj tie-trans))
  (format #t "~1Ttie-scissor-trans: #<tr-stat @ #x~X>~%" (-> obj tie-scissor-trans))
  (format #t "~1Ttie-envmap-trans: #<tr-stat @ #x~X>~%" (-> obj tie-envmap-trans))
  (format #t "~1Ttie-envmap-scissor-trans: #<tr-stat @ #x~X>~%" (-> obj tie-envmap-scissor-trans))
  (format #t "~1Ttie-water: #<tr-stat @ #x~X>~%" (-> obj tie-water))
  (format #t "~1Ttie-scissor-water: #<tr-stat @ #x~X>~%" (-> obj tie-scissor-water))
  (format #t "~1Ttie-envmap-water: #<tr-stat @ #x~X>~%" (-> obj tie-envmap-water))
  (format #t "~1Ttie-envmap-scissor-water: #<tr-stat @ #x~X>~%" (-> obj tie-envmap-scissor-water))
  (format #t "~1Tshrub-near: #<tr-stat @ #x~X>~%" (-> obj shrub-near))
  (format #t "~1Tshrub: #<tr-stat @ #x~X>~%" (-> obj shrub))
  (format #t "~1Ttfrag-scissor: #<tr-stat @ #x~X>~%" (-> obj tfrag-scissor))
  (format #t "~1Ttfrag: #<tr-stat @ #x~X>~%" (-> obj tfrag))
  (format #t "~1Tbillboard: #<tr-stat @ #x~X>~%" (-> obj billboard))
  (format #t "~1Ttfrag-trans: #<tr-stat @ #x~X>~%" (-> obj tfrag-trans))
  (format #t "~1Ttfrag-scissor-trans: #<tr-stat @ #x~X>~%" (-> obj tfrag-scissor-trans))
  (format #t "~1Ttfrag-water: #<tr-stat @ #x~X>~%" (-> obj tfrag-water))
  (format #t "~1Ttfrag-scissor-water: #<tr-stat @ #x~X>~%" (-> obj tfrag-scissor-water))
  (format #t "~1Ttrans-pris: #<tr-stat @ #x~X>~%" (-> obj trans-pris))
  (format #t "~1Ttrans-shrub: #<tr-stat @ #x~X>~%" (-> obj trans-shrub))
  (format #t "~1Tocean-mid: #<tr-stat @ #x~X>~%" (-> obj ocean-mid))
  (format #t "~1Tocean-near: #<tr-stat @ #x~X>~%" (-> obj ocean-near))
  (format #t "~1Tshadow: #<tr-stat @ #x~X>~%" (-> obj shadow))
  (format #t "~1Ttotal: #<tr-stat @ #x~X>~%" (-> obj total))
  (label cfg-4)
  obj
  )

;; definition of type dma-area
(deftype dma-area (structure)
  ((instance-shrub-dma instance-shrub-dma :inline :offset   0)
   (draw-node-dma      draw-node-dma      :inline :offset   0)
   (tfrag-dma          tfrag-dma          :inline :offset   0)
   (instance-tie-dma   instance-tie-dma   :inline :offset   0)
   (prototype-tie-dma  prototype-tie-dma  :inline :offset   0)
   (wind-dma           wind-dma           :inline :offset   0)
   (time-of-day-dma    time-of-day-dma    :inline :offset   0)
   (decomp-work        decomp-work        :inline :offset   0)
   (ocean-vertex       ocean-vertex       4       :offset   0)
   )
  :method-count-assert 9
  :size-assert         #x38a0
  :flag-assert         #x9000038a0
  )

;; definition for method 3 of type dma-area
(defmethod inspect dma-area ((obj dma-area))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'dma-area)
  (format #t "~1Tinstance-shrub-dma: #<instance-shrub-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Tdraw-node-dma: #<draw-node-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Ttfrag-dma: #<tfrag-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Tinstance-tie-dma: #<instance-tie-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Tprototype-tie-dma: #<prototype-tie-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Twind-dma: #<wind-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Ttime-of-day-dma: #<time-of-day-dma @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Tdecomp-work: #<decomp-work @ #x~X>~%" (-> obj instance-shrub-dma))
  (format #t "~1Tocean-vertex[4] @ #x~X~%" (-> obj instance-shrub-dma))
  (label cfg-4)
  obj
  )

;; definition of type background-area
(deftype background-area (structure)
  ((dma-area dma-area :inline :offset-assert   0)
   (vis-list uint8    2048    :offset-assert 14496)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

;; definition for method 3 of type background-area
(defmethod inspect background-area ((obj background-area))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'background-area)
  (format #t "~1Tdma-area: #<dma-area @ #x~X>~%" (-> obj dma-area))
  (format #t "~1Tvis-list[2048] @ #x~X~%" (-> obj vis-list))
  (label cfg-4)
  obj
  )

;; definition of type foreground-area
(deftype foreground-area (structure)
  ((generic-work    generic-work    :inline :offset-assert   0)
   (foreground-work foreground-work :inline :offset          0)
   (joint-work      joint-work      :inline :offset          0)
   (bone-mem        bone-memory     :inline :offset          0)
   (shadow-work     shadow-work     :inline :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x3fe0
  :flag-assert         #x900003fe0
  )

;; definition for method 3 of type foreground-area
(defmethod inspect foreground-area ((obj foreground-area))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'foreground-area)
  (format #t "~1Tgeneric-work: #<generic-work @ #x~X>~%" (-> obj generic-work))
  (format #t "~1Tforeground-work: #<foreground-work @ #x~X>~%" (-> obj generic-work))
  (format #t "~1Tjoint-work: #<joint-work @ #x~X>~%" (-> obj generic-work))
  (format #t "~1Tbone-mem: #<bone-memory @ #x~X>~%" (-> obj generic-work))
  (format #t "~1Tshadow-work: #<shadow-work @ #x~X>~%" (-> obj generic-work))
  (label cfg-4)
  obj
  )

;; definition of type region-prim-area
(deftype region-prim-area (structure)
  ((region-prim-list        region-prim-list :inline :offset-assert   0)
   (pos                     vector           :inline :offset-assert 1296)
   (ray                     vector           :inline :offset        1328)
   (region-enter-count      int32                    :offset        1360)
   (region-enter-list       uint32           320     :offset-assert 1364)
   (region-enter-prim-list  uint32           320     :offset-assert 2644)
   (region-exit-count       int32                    :offset-assert 3924)
   (region-exit-list        uint32           320     :offset-assert 3928)
   (region-exit-prim-list   uint32           320     :offset-assert 5208)
   (region-inside-count     int32                    :offset-assert 6488)
   (region-inside-list      uint32           320     :offset-assert 6492)
   (region-inside-prim-list uint32           320     :offset-assert 7772)
   (region-start-count      int32                    :offset-assert 9052)
   (region-start-list       uint32           320     :offset-assert 9056)
   (region-start-prim-list  uint32           320     :offset-assert 10336)
   )
  :method-count-assert 13
  :size-assert         #x2d60
  :flag-assert         #xd00002d60
  (:methods
    (region-prim-area-method-9 () none 9)
    (region-prim-area-method-10 () none 10)
    (region-prim-area-method-11 () none 11)
    (region-prim-area-method-12 () none 12)
    )
  )

;; definition for method 3 of type region-prim-area
(defmethod inspect region-prim-area ((obj region-prim-area))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'region-prim-area)
  (format #t "~1Tregion-prim-list: #<region-prim-list @ #x~X>~%" (-> obj region-prim-list))
  (format #t "~1Tpos: ~`vector`P~%" (-> obj pos))
  (format #t "~1Tray: ~`vector`P~%" (-> obj ray))
  (format #t "~1Tregion-enter-count: ~D~%" (-> obj region-enter-count))
  (format #t "~1Tregion-enter-list[320] @ #x~X~%" (-> obj region-enter-list))
  (format #t "~1Tregion-enter-prim-list[320] @ #x~X~%" (-> obj region-enter-prim-list))
  (format #t "~1Tregion-exit-count: ~D~%" (-> obj region-exit-count))
  (format #t "~1Tregion-exit-list[320] @ #x~X~%" (-> obj region-exit-list))
  (format #t "~1Tregion-exit-prim-list[320] @ #x~X~%" (-> obj region-exit-prim-list))
  (format #t "~1Tregion-inside-count: ~D~%" (-> obj region-inside-count))
  (format #t "~1Tregion-inside-list[320] @ #x~X~%" (-> obj region-inside-list))
  (format #t "~1Tregion-inside-prim-list[320] @ #x~X~%" (-> obj region-inside-prim-list))
  (format #t "~1Tregion-start-count: ~D~%" (-> obj region-start-count))
  (format #t "~1Tregion-start-list[320] @ #x~X~%" (-> obj region-start-list))
  (format #t "~1Tregion-start-prim-list[320] @ #x~X~%" (-> obj region-start-prim-list))
  (label cfg-4)
  obj
  )

;; definition of type sprite-area
(deftype sprite-area (structure)
  ((clock-data vector 13 :inline :offset-assert   0)
   (buffer     uint8  :dynamic   :offset-assert 208)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

;; definition for method 3 of type sprite-area
(defmethod inspect sprite-area ((obj sprite-area))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'sprite-area)
  (format #t "~1Tclock-data[13] @ #x~X~%" (-> obj clock-data))
  (format #t "~1Tbuffer[0] @ #x~X~%" (-> obj buffer))
  (label cfg-4)
  obj
  )

;; definition of type work-area
(deftype work-area (structure)
  ((background  background-area  :inline :offset-assert   0)
   (foreground  foreground-area  :inline :offset          0)
   (region-prim region-prim-area :inline :offset          0)
   (sprite      sprite-area      :inline :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

;; definition for method 3 of type work-area
(defmethod inspect work-area ((obj work-area))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'work-area)
  (format #t "~1Tbackground: #<background-area @ #x~X>~%" (-> obj background))
  (format #t "~1Tforeground: #<foreground-area @ #x~X>~%" (-> obj background))
  (format #t "~1Tregion-prim: #<region-prim-area @ #x~X>~%" (-> obj background))
  (format #t "~1Tsprite: #<sprite-area @ #x~X>~%" (-> obj background))
  (label cfg-4)
  obj
  )

;; definition of type terrain-context
(deftype terrain-context (structure)
  ((work work-area :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x40a0
  :flag-assert         #x9000040a0
  )

;; definition for method 3 of type terrain-context
(defmethod inspect terrain-context ((obj terrain-context))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'terrain-context)
  (format #t "~1Twork: #<work-area @ #x~X>~%" (-> obj work))
  (label cfg-4)
  obj
  )

;; definition for symbol *terrain-stats*, type terrain-stats
(define *terrain-stats* (new 'global 'terrain-stats))

;; definition for symbol *collide-stats*, type collide-stats
(define *collide-stats* (new 'global 'collide-stats))

;; failed to figure out what this is:
0




