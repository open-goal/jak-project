;;-*-Lisp-*-
(in-package goal)

;; definition of type subdivide-settings
(deftype subdivide-settings (basic)
  ((dist    float  5)
   (meters  float  5)
   (close   float  8)
   (far     float  8)
   )
  (:methods
    (new (symbol type meters meters) _type_)
    )
  )

;; definition for method 3 of type subdivide-settings
(defmethod inspect ((this subdivide-settings))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdist[5] @ #x~X~%" (-> this dist))
  (format #t "~1Tmeters[5] @ #x~X~%" (-> this meters))
  (format #t "~1Tclose[8] @ #x~X~%" (-> this close))
  (format #t "~1Tfar[8] @ #x~X~%" (-> this far))
  (label cfg-4)
  this
  )

;; definition for method 0 of type subdivide-settings
(defmethod new subdivide-settings ((allocation symbol) (type-to-make type) (arg0 meters) (arg1 meters))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (dotimes (v1-2 6)
      (set! (-> v0-0 close v1-2) arg0)
      (set! (-> v0-0 far v1-2) arg1)
      )
    v0-0
    )
  )

;; definition of type subdivide-dists
(deftype subdivide-dists (structure)
  ((data    uint32   32)
   (vector  vector   8 :inline :overlay-at (-> data 0))
   (k0s     uint128  4         :overlay-at (-> data 0))
   (k1s     uint128  4         :overlay-at (-> data 16))
   )
  )

;; definition for method 3 of type subdivide-dists
(defmethod inspect ((this subdivide-dists))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'subdivide-dists)
  (format #t "~1Tdata[32] @ #x~X~%" (-> this data))
  (format #t "~1Tvector[8] @ #x~X~%" (-> this data))
  (format #t "~1Tk0s[4] @ #x~X~%" (-> this data))
  (format #t "~1Tk1s[4] @ #x~X~%" (-> this k1s))
  (label cfg-4)
  this
  )

;; definition of type terrain-stats
(deftype terrain-stats (structure)
  ((pris                      tr-stat  :inline)
   (tie-generic               tr-stat  :inline)
   (tie-vanish                tr-stat  :inline)
   (tie                       tr-stat  :inline)
   (tie-scissor               tr-stat  :inline)
   (tie-envmap                tr-stat  :inline)
   (tie-envmap-scissor        tr-stat  :inline)
   (tie-trans                 tr-stat  :inline)
   (tie-scissor-trans         tr-stat  :inline)
   (tie-envmap-trans          tr-stat  :inline)
   (tie-envmap-scissor-trans  tr-stat  :inline)
   (tie-water                 tr-stat  :inline)
   (tie-scissor-water         tr-stat  :inline)
   (tie-envmap-water          tr-stat  :inline)
   (tie-envmap-scissor-water  tr-stat  :inline)
   (shrub-near                tr-stat  :inline)
   (shrub                     tr-stat  :inline)
   (tfrag-scissor             tr-stat  :inline)
   (tfrag                     tr-stat  :inline)
   (billboard                 tr-stat  :inline)
   (tfrag-trans               tr-stat  :inline)
   (tfrag-scissor-trans       tr-stat  :inline)
   (tfrag-water               tr-stat  :inline)
   (tfrag-scissor-water       tr-stat  :inline)
   (trans-pris                tr-stat  :inline)
   (trans-shrub               tr-stat  :inline)
   (ocean-mid                 tr-stat  :inline)
   (ocean-near                tr-stat  :inline)
   (shadow                    tr-stat  :inline)
   (total                     tr-stat  :inline)
   )
  )

;; definition for method 3 of type terrain-stats
(defmethod inspect ((this terrain-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'terrain-stats)
  (format #t "~1Tpris: #<tr-stat @ #x~X>~%" (-> this pris))
  (format #t "~1Ttie-generic: #<tr-stat @ #x~X>~%" (-> this tie-generic))
  (format #t "~1Ttie-vanish: #<tr-stat @ #x~X>~%" (-> this tie-vanish))
  (format #t "~1Ttie: #<tr-stat @ #x~X>~%" (-> this tie))
  (format #t "~1Ttie-scissor: #<tr-stat @ #x~X>~%" (-> this tie-scissor))
  (format #t "~1Ttie-envmap: #<tr-stat @ #x~X>~%" (-> this tie-envmap))
  (format #t "~1Ttie-envmap-scissor: #<tr-stat @ #x~X>~%" (-> this tie-envmap-scissor))
  (format #t "~1Ttie-trans: #<tr-stat @ #x~X>~%" (-> this tie-trans))
  (format #t "~1Ttie-scissor-trans: #<tr-stat @ #x~X>~%" (-> this tie-scissor-trans))
  (format #t "~1Ttie-envmap-trans: #<tr-stat @ #x~X>~%" (-> this tie-envmap-trans))
  (format #t "~1Ttie-envmap-scissor-trans: #<tr-stat @ #x~X>~%" (-> this tie-envmap-scissor-trans))
  (format #t "~1Ttie-water: #<tr-stat @ #x~X>~%" (-> this tie-water))
  (format #t "~1Ttie-scissor-water: #<tr-stat @ #x~X>~%" (-> this tie-scissor-water))
  (format #t "~1Ttie-envmap-water: #<tr-stat @ #x~X>~%" (-> this tie-envmap-water))
  (format #t "~1Ttie-envmap-scissor-water: #<tr-stat @ #x~X>~%" (-> this tie-envmap-scissor-water))
  (format #t "~1Tshrub-near: #<tr-stat @ #x~X>~%" (-> this shrub-near))
  (format #t "~1Tshrub: #<tr-stat @ #x~X>~%" (-> this shrub))
  (format #t "~1Ttfrag-scissor: #<tr-stat @ #x~X>~%" (-> this tfrag-scissor))
  (format #t "~1Ttfrag: #<tr-stat @ #x~X>~%" (-> this tfrag))
  (format #t "~1Tbillboard: #<tr-stat @ #x~X>~%" (-> this billboard))
  (format #t "~1Ttfrag-trans: #<tr-stat @ #x~X>~%" (-> this tfrag-trans))
  (format #t "~1Ttfrag-scissor-trans: #<tr-stat @ #x~X>~%" (-> this tfrag-scissor-trans))
  (format #t "~1Ttfrag-water: #<tr-stat @ #x~X>~%" (-> this tfrag-water))
  (format #t "~1Ttfrag-scissor-water: #<tr-stat @ #x~X>~%" (-> this tfrag-scissor-water))
  (format #t "~1Ttrans-pris: #<tr-stat @ #x~X>~%" (-> this trans-pris))
  (format #t "~1Ttrans-shrub: #<tr-stat @ #x~X>~%" (-> this trans-shrub))
  (format #t "~1Tocean-mid: #<tr-stat @ #x~X>~%" (-> this ocean-mid))
  (format #t "~1Tocean-near: #<tr-stat @ #x~X>~%" (-> this ocean-near))
  (format #t "~1Tshadow: #<tr-stat @ #x~X>~%" (-> this shadow))
  (format #t "~1Ttotal: #<tr-stat @ #x~X>~%" (-> this total))
  (label cfg-4)
  this
  )

;; definition of type dma-area
(deftype dma-area (structure)
  ((instance-shrub-dma  instance-shrub-dma  :inline :offset   0)
   (draw-node-dma       draw-node-dma       :inline :offset   0)
   (tfrag-dma           tfrag-dma           :inline :offset   0)
   (instance-tie-dma    instance-tie-dma    :inline :offset   0)
   (prototype-tie-dma   prototype-tie-dma   :inline :offset   0)
   (wind-dma            wind-dma            :inline :offset   0)
   (time-of-day-dma     time-of-day-dma     :inline :offset   0)
   (decomp-work         decomp-work         :inline :offset   0)
   (ocean-vertex        ocean-vertex        4       :offset   0)
   )
  )

;; definition for method 3 of type dma-area
(defmethod inspect ((this dma-area))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'dma-area)
  (format #t "~1Tinstance-shrub-dma: #<instance-shrub-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Tdraw-node-dma: #<draw-node-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Ttfrag-dma: #<tfrag-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Tinstance-tie-dma: #<instance-tie-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Tprototype-tie-dma: #<prototype-tie-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Twind-dma: #<wind-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Ttime-of-day-dma: #<time-of-day-dma @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Tdecomp-work: #<decomp-work @ #x~X>~%" (-> this instance-shrub-dma))
  (format #t "~1Tocean-vertex[4] @ #x~X~%" (-> this instance-shrub-dma))
  (label cfg-4)
  this
  )

;; definition of type background-area
(deftype background-area (structure)
  ((dma-area  dma-area  :inline)
   (vis-list  uint8     2048)
   )
  )

;; definition for method 3 of type background-area
(defmethod inspect ((this background-area))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'background-area)
  (format #t "~1Tdma-area: #<dma-area @ #x~X>~%" (-> this dma-area))
  (format #t "~1Tvis-list[2048] @ #x~X~%" (-> this vis-list))
  (label cfg-4)
  this
  )

;; definition of type foreground-area
(deftype foreground-area (structure)
  ((generic-work     generic-work     :inline)
   (foreground-work  foreground-work  :inline :overlay-at (-> generic-work saves ptr-dma))
   (joint-work       joint-work       :inline :overlay-at (-> generic-work saves ptr-dma))
   (bone-mem         bone-memory      :inline :overlay-at (-> generic-work saves ptr-dma))
   (shadow-work      shadow-work      :inline :overlay-at (-> generic-work saves ptr-dma))
   )
  )

;; definition for method 3 of type foreground-area
(defmethod inspect ((this foreground-area))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'foreground-area)
  (format #t "~1Tgeneric-work: #<generic-work @ #x~X>~%" (-> this generic-work))
  (format #t "~1Tforeground-work: #<foreground-work @ #x~X>~%" (-> this generic-work))
  (format #t "~1Tjoint-work: #<joint-work @ #x~X>~%" (-> this generic-work))
  (format #t "~1Tbone-mem: #<bone-memory @ #x~X>~%" (-> this generic-work))
  (format #t "~1Tshadow-work: #<shadow-work @ #x~X>~%" (-> this generic-work))
  (label cfg-4)
  this
  )

;; definition of type region-prim-area
(deftype region-prim-area (structure)
  ((region-prim-list         region-prim-list        :inline)
   (pos                      vector                  :inline)
   (unknown-vector-uiyb1     vector                  :inline)
   (ray                      vector                  :inline :offset 1328)
   (unknown-vector-t3edh     vector                  :inline)
   (region-enter-count       int32                           :offset 1360)
   (region-enter-list        region                  320)
   (region-enter-prim-list   drawable-region-sphere  320)
   (region-exit-count        int32)
   (region-exit-list         region                  320)
   (region-exit-prim-list    drawable-region-sphere  320)
   (region-inside-count      int32)
   (region-inside-list       region                  320)
   (region-inside-prim-list  drawable-region-sphere  320)
   (region-start-count       int32)
   (region-start-list        region                  320)
   (region-start-prim-list   drawable-region-sphere  320)
   )
  (:methods
    (track-entered-region! (_type_ drawable-region-sphere) none)
    (track-exited-region! (_type_ drawable-region-sphere) none)
    (track-inside-region! (_type_ drawable-region-sphere) none)
    (track-start-region! (_type_ drawable-region-sphere) none)
    )
  )

;; definition for method 3 of type region-prim-area
(defmethod inspect ((this region-prim-area))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'region-prim-area)
  (format #t "~1Tregion-prim-list: #<region-prim-list @ #x~X>~%" (-> this region-prim-list))
  (format #t "~1Tpos: ~`vector`P~%" (-> this pos))
  (format #t "~1Tray: ~`vector`P~%" (-> this ray))
  (format #t "~1Tregion-enter-count: ~D~%" (-> this region-enter-count))
  (format #t "~1Tregion-enter-list[320] @ #x~X~%" (-> this region-enter-list))
  (format #t "~1Tregion-enter-prim-list[320] @ #x~X~%" (-> this region-enter-prim-list))
  (format #t "~1Tregion-exit-count: ~D~%" (-> this region-exit-count))
  (format #t "~1Tregion-exit-list[320] @ #x~X~%" (-> this region-exit-list))
  (format #t "~1Tregion-exit-prim-list[320] @ #x~X~%" (-> this region-exit-prim-list))
  (format #t "~1Tregion-inside-count: ~D~%" (-> this region-inside-count))
  (format #t "~1Tregion-inside-list[320] @ #x~X~%" (-> this region-inside-list))
  (format #t "~1Tregion-inside-prim-list[320] @ #x~X~%" (-> this region-inside-prim-list))
  (format #t "~1Tregion-start-count: ~D~%" (-> this region-start-count))
  (format #t "~1Tregion-start-list[320] @ #x~X~%" (-> this region-start-list))
  (format #t "~1Tregion-start-prim-list[320] @ #x~X~%" (-> this region-start-prim-list))
  (label cfg-4)
  this
  )

;; definition of type sprite-area
(deftype sprite-area (structure)
  ((clock-data  vector  13 :inline)
   (buffer      uint8   :dynamic)
   )
  )

;; definition for method 3 of type sprite-area
(defmethod inspect ((this sprite-area))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sprite-area)
  (format #t "~1Tclock-data[13] @ #x~X~%" (-> this clock-data))
  (format #t "~1Tbuffer[0] @ #x~X~%" (-> this buffer))
  (label cfg-4)
  this
  )

;; definition of type work-area
(deftype work-area (structure)
  ((background   background-area   :inline)
   (foreground   foreground-area   :inline :overlay-at (-> background dma-area ocean-vertex 0))
   (region-prim  region-prim-area  :inline :overlay-at (-> background dma-area ocean-vertex 0))
   (sprite       sprite-area       :inline :overlay-at (-> background dma-area ocean-vertex 0))
   )
  )

;; definition for method 3 of type work-area
(defmethod inspect ((this work-area))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'work-area)
  (format #t "~1Tbackground: #<background-area @ #x~X>~%" (-> this background))
  (format #t "~1Tforeground: #<foreground-area @ #x~X>~%" (-> this background))
  (format #t "~1Tregion-prim: #<region-prim-area @ #x~X>~%" (-> this background))
  (format #t "~1Tsprite: #<sprite-area @ #x~X>~%" (-> this background))
  (label cfg-4)
  this
  )

;; definition of type terrain-context
(deftype terrain-context (structure)
  ((work  work-area  :inline)
   )
  )

;; definition for method 3 of type terrain-context
(defmethod inspect ((this terrain-context))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'terrain-context)
  (format #t "~1Twork: #<work-area @ #x~X>~%" (-> this work))
  (label cfg-4)
  this
  )

;; definition for symbol *terrain-stats*, type terrain-stats
(define *terrain-stats* (new 'global 'terrain-stats))

;; definition for symbol *collide-stats*, type collide-stats
(define *collide-stats* (new 'global 'collide-stats))

;; failed to figure out what this is:
0
