;;-*-Lisp-*-
(in-package goal)

;; definition of type prototype-bucket
(deftype prototype-bucket (basic)
  ((name                string           :offset-assert   4)
   (flags               uint16           :offset-assert   8)
   (texture-masks-index uint16           :offset-assert  10)
   (in-level            uint16           :offset-assert  12)
   (utextures           uint16           :offset-assert  14)
   (geometry            drawable 4       :offset-assert  16)
   (dists               vector   :inline :offset-assert  32)
   (rdists              vector   :inline :offset-assert  48)
   (near-plane          meters           :offset         32)
   (near-stiff          meters           :offset         36)
   (mid-plane           meters           :offset         40)
   (far-plane           meters           :offset         44)
   (rlength-near        float            :offset         48)
   (rlength-stiff       float            :offset         52)
   (rlength-mid         float            :offset         56)
   (stiffness           float            :offset         60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type prototype-bucket
(defmethod inspect prototype-bucket ((obj prototype-bucket))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> obj texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> obj in-level))
  (format #t "~1Tutextures: ~D~%" (-> obj utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> obj geometry))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> obj dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> obj rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> obj dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> obj dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> obj dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> obj dists w))
  (format #t "~1Trlength-near: ~f~%" (-> obj rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> obj rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> obj rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> obj rdists w))
  (label cfg-4)
  obj
  )

;; definition of type prototype-bucket-shrub
(deftype prototype-bucket-shrub (prototype-bucket)
  ((next        uint32     4 :offset-assert  64)
   (count       uint16     4 :offset-assert  80)
   (mod-count   uint16     4 :offset-assert  88)
   (last        dma-packet 4 :offset-assert  96)
   (next-clear  uint128      :offset         64)
   (count-clear uint64       :offset         80)
   (last-clear  uint128      :offset         96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type prototype-bucket-shrub
;; INFO: Used lq/sq
(defmethod inspect prototype-bucket-shrub ((obj prototype-bucket-shrub))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> obj texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> obj in-level))
  (format #t "~1Tutextures: ~D~%" (-> obj utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> obj geometry))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> obj dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> obj rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> obj dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> obj dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> obj dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> obj dists w))
  (format #t "~1Trlength-near: ~f~%" (-> obj rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> obj rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> obj rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> obj rdists w))
  (format #t "~1Tnext[4] @ #x~X~%" (-> obj next))
  (format #t "~1Tcount[4] @ #x~X~%" (-> obj count))
  (format #t "~1Tmod-count[4] @ #x~X~%" (-> obj mod-count))
  (format #t "~1Tlast[4] @ #x~X~%" (-> obj last))
  (format #t "~1Tnext-clear: ~D~%" (-> obj next-clear))
  (format #t "~1Tcount-clear: ~D~%" (-> obj count-clear))
  (format #t "~1Tlast-clear: ~D~%" (-> obj last-clear))
  (label cfg-4)
  obj
  )

;; definition of type prototype-inline-array-shrub
(deftype prototype-inline-array-shrub (drawable)
  ((length int16                            :offset          6)
   (data   prototype-bucket-shrub 1 :inline :offset         32)
   (_pad   uint32                           :offset-assert 144)
   )
  :method-count-assert 17
  :size-assert         #x94
  :flag-assert         #x1100000094
  )

;; definition for method 3 of type prototype-inline-array-shrub
(defmethod inspect prototype-inline-array-shrub ((obj prototype-inline-array-shrub))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tdata[1] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type prototype-array-shrub-info
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub prototype-inline-array-shrub  :offset-assert   4)
   (wind-vectors                 uint32                        :offset-assert   8)
   (wind-count                   int32                         :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type prototype-array-shrub-info
(defmethod inspect prototype-array-shrub-info ((obj prototype-array-shrub-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tprototype-inline-array-shrub: ~A~%" (-> obj prototype-inline-array-shrub))
  (format #t "~1Twind-vectors: #x~X~%" (-> obj wind-vectors))
  (format #t "~1Twind-count: ~D~%" (-> obj wind-count))
  (label cfg-4)
  obj
  )

;; definition of type prototype-bucket-tie
(deftype prototype-bucket-tie (prototype-bucket)
  ((next                        uint32              12       :offset-assert  64)
   (count                       uint16              12       :offset-assert 112)
   (frag-count                  uint8               4        :offset-assert 136)
   (index-start                 uint8               4        :offset-assert 140)
   (base-qw                     uint16              4        :offset-assert 144)
   (tie-rvanish                 float                        :offset-assert 152)
   (tie-vanish-far              float                        :offset-assert 156)
   (envmap-rfade                float                        :offset-assert 160)
   (envmap-fade-far             float                        :offset-assert 164)
   (envmap-shader               adgif-shader                 :offset-assert 168)
   (tint-color                  uint32                       :offset-assert 172)
   (collide-hash-fragment-array basic                        :offset-assert 176)
   (tie-colors                  time-of-day-palette          :offset-assert 180)
   (data                        uint32              :dynamic :offset-assert 184)
   (color-index-qwc             uint32              :dynamic :offset-assert 184)
   (scissor-frag-count          uint8                        :offset        136)
   (near-frag-count             uint8                        :offset        137)
   (mid-frag-count              uint8                        :offset        138)
   (far-frag-count              uint8                        :offset        139)
   (scissor-index-start         uint8                        :offset        140)
   (near-index-start            uint8                        :offset        141)
   (mid-index-start             uint8                        :offset        142)
   (far-index-start             uint8                        :offset        143)
   (scissor-base-qw             uint16                       :offset        144)
   (near-base-qw                uint16                       :offset        146)
   (mid-base-qw                 uint16                       :offset        148)
   (far-base-qw                 uint16                       :offset        150)
   (tie-next                    uint32              4        :offset         64)
   (tie-scissor-next            uint32                       :offset         64)
   (tie-near-next               uint32                       :offset         68)
   (tie-mid-next                uint32                       :offset         72)
   (tie-far-next                uint32                       :offset         76)
   (trans-next                  uint32              4        :offset         64)
   (trans-scissor-next          uint32              4        :offset         64)
   (trans-near-next             uint32                       :offset         68)
   (trans-mid-next              uint32                       :offset         72)
   (trans-far-next              uint32                       :offset         76)
   (water-next                  uint32              4        :offset         64)
   (water-scissor-next          uint32              4        :offset         64)
   (water-near-next             uint32                       :offset         68)
   (water-mid-next              uint32                       :offset         72)
   (water-far-next              uint32                       :offset         76)
   (envmap-next                 uint32              4        :offset         80)
   (envmap-scissor-next         uint32              4        :offset         80)
   (envmap-near-next            uint32                       :offset         84)
   (envmap-mid-next             uint32                       :offset         88)
   (envmap-far-next             uint32                       :offset         92)
   (generic-next                uint32              3        :offset         96)
   (generic-near-next           uint32                       :offset         96)
   (generic-mid-next            uint32                       :offset        100)
   (generic-far-next            uint32                       :offset        104)
   (vanish-next                 uint32                       :offset        108)
   (tie-count                   uint16              4        :offset        112)
   (tie-scissor-count           uint16                       :offset        112)
   (tie-near-count              uint16                       :offset        114)
   (tie-mid-count               uint16                       :offset        116)
   (tie-far-count               uint16                       :offset        118)
   (trans-count                 uint16              4        :offset        112)
   (trans-scissor-count         uint16                       :offset        112)
   (trans-near-count            uint16                       :offset        114)
   (trans-mid-count             uint16                       :offset        116)
   (trans-far-count             uint16                       :offset        118)
   (water-count                 uint16              4        :offset        112)
   (water-scissor-count         uint16                       :offset        112)
   (water-near-count            uint16                       :offset        114)
   (water-mid-count             uint16                       :offset        116)
   (water-far-count             uint16                       :offset        118)
   (envmap-count                uint16              4        :offset        120)
   (envmap-scissor-count        uint16                       :offset        120)
   (envmap-near-count           uint16                       :offset        122)
   (envmap-mid-count            uint16                       :offset        124)
   (envmap-far-count            uint16                       :offset        126)
   (generic-count               uint16              3        :offset        128)
   (generic-near-count          uint16                       :offset        128)
   (generic-mid-count           uint16                       :offset        130)
   (generic-far-count           uint16                       :offset        132)
   (vanish-count                uint16                       :offset        134)
   (next-clear                  uint128             3        :offset         64)
   (count-clear                 uint64              3        :offset        112)
   (tie-geom                    prototype-tie       4        :offset         16)
   )
  :method-count-assert 9
  :size-assert         #xb8
  :flag-assert         #x9000000b8
  )

;; definition for method 3 of type prototype-bucket-tie
(defmethod inspect prototype-bucket-tie ((obj prototype-bucket-tie))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> obj texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> obj in-level))
  (format #t "~1Tutextures: ~D~%" (-> obj utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> obj tie-geom))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> obj dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> obj rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> obj dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> obj dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> obj dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> obj dists w))
  (format #t "~1Trlength-near: ~f~%" (-> obj rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> obj rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> obj rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> obj rdists w))
  (format #t "~1Tnext[12] @ #x~X~%" (-> obj next))
  (format #t "~1Tcount[12] @ #x~X~%" (-> obj count))
  (format #t "~1Tfrag-count[4] @ #x~X~%" (-> obj frag-count))
  (format #t "~1Tindex-start[4] @ #x~X~%" (-> obj index-start))
  (format #t "~1Tbase-qw[4] @ #x~X~%" (-> obj base-qw))
  (format #t "~1Ttie-rvanish: ~f~%" (-> obj tie-rvanish))
  (format #t "~1Ttie-vanish-far: ~f~%" (-> obj tie-vanish-far))
  (format #t "~1Tenvmap-rfade: ~f~%" (-> obj envmap-rfade))
  (format #t "~1Tenvmap-fade-far: ~f~%" (-> obj envmap-fade-far))
  (format #t "~1Tenvmap-shader: #<adgif-shader @ #x~X>~%" (-> obj envmap-shader))
  (format #t "~1Ttint-color: ~D~%" (-> obj tint-color))
  (format #t "~1Tcollide-hash-fragment-array: ~A~%" (-> obj collide-hash-fragment-array))
  (format #t "~1Ttie-colors: ~A~%" (-> obj tie-colors))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (format #t "~1Tcolor-index-qwc[0] @ #x~X~%" (-> obj data))
  (format #t "~1Tscissor-frag-count: ~D~%" (-> obj scissor-frag-count))
  (format #t "~1Tnear-frag-count: ~D~%" (-> obj near-frag-count))
  (format #t "~1Tmid-frag-count: ~D~%" (-> obj mid-frag-count))
  (format #t "~1Tfar-frag-count: ~D~%" (-> obj far-frag-count))
  (format #t "~1Tscissor-index-start: ~D~%" (-> obj scissor-index-start))
  (format #t "~1Tnear-index-start: ~D~%" (-> obj near-index-start))
  (format #t "~1Tmid-index-start: ~D~%" (-> obj mid-index-start))
  (format #t "~1Tfar-index-start: ~D~%" (-> obj far-index-start))
  (format #t "~1Tscissor-base-qw: ~D~%" (-> obj scissor-base-qw))
  (format #t "~1Tnear-base-qw: ~D~%" (-> obj near-base-qw))
  (format #t "~1Tmid-base-qw: ~D~%" (-> obj mid-base-qw))
  (format #t "~1Tfar-base-qw: ~D~%" (-> obj far-base-qw))
  (format #t "~1Ttie-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Ttie-scissor-next: #x~X~%" (-> obj tie-scissor-next))
  (format #t "~1Ttie-near-next: #x~X~%" (-> obj tie-near-next))
  (format #t "~1Ttie-mid-next: #x~X~%" (-> obj tie-mid-next))
  (format #t "~1Ttie-far-next: #x~X~%" (-> obj tie-far-next))
  (format #t "~1Ttrans-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Ttrans-scissor-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Ttrans-near-next: #x~X~%" (-> obj tie-near-next))
  (format #t "~1Ttrans-mid-next: #x~X~%" (-> obj tie-mid-next))
  (format #t "~1Ttrans-far-next: #x~X~%" (-> obj tie-far-next))
  (format #t "~1Twater-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Twater-scissor-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Twater-near-next: #x~X~%" (-> obj tie-near-next))
  (format #t "~1Twater-mid-next: #x~X~%" (-> obj tie-mid-next))
  (format #t "~1Twater-far-next: #x~X~%" (-> obj tie-far-next))
  (format #t "~1Tenvmap-next[4] @ #x~X~%" (-> obj envmap-next))
  (format #t "~1Tenvmap-scissor-next[4] @ #x~X~%" (-> obj envmap-next))
  (format #t "~1Tenvmap-near-next: #x~X~%" (-> obj envmap-near-next))
  (format #t "~1Tenvmap-mid-next: #x~X~%" (-> obj envmap-mid-next))
  (format #t "~1Tenvmap-far-next: #x~X~%" (-> obj envmap-far-next))
  (format #t "~1Tgeneric-next[3] @ #x~X~%" (-> obj generic-next))
  (format #t "~1Tgeneric-near-next: #x~X~%" (-> obj generic-near-next))
  (format #t "~1Tgeneric-mid-next: #x~X~%" (-> obj generic-mid-next))
  (format #t "~1Tgeneric-far-next: #x~X~%" (-> obj generic-far-next))
  (format #t "~1Tvanish-next: #x~X~%" (-> obj vanish-next))
  (format #t "~1Ttie-count[4] @ #x~X~%" (-> obj count))
  (format #t "~1Ttie-scissor-count: ~D~%" (-> obj tie-scissor-count))
  (format #t "~1Ttie-near-count: ~D~%" (-> obj tie-near-count))
  (format #t "~1Ttie-mid-count: ~D~%" (-> obj tie-mid-count))
  (format #t "~1Ttie-far-count: ~D~%" (-> obj tie-far-count))
  (format #t "~1Ttrans-count[4] @ #x~X~%" (-> obj count))
  (format #t "~1Ttrans-scissor-count: ~D~%" (-> obj tie-scissor-count))
  (format #t "~1Ttrans-near-count: ~D~%" (-> obj tie-near-count))
  (format #t "~1Ttrans-mid-count: ~D~%" (-> obj tie-mid-count))
  (format #t "~1Ttrans-far-count: ~D~%" (-> obj tie-far-count))
  (format #t "~1Twater-count[4] @ #x~X~%" (-> obj count))
  (format #t "~1Twater-scissor-count: ~D~%" (-> obj tie-scissor-count))
  (format #t "~1Twater-near-count: ~D~%" (-> obj tie-near-count))
  (format #t "~1Twater-mid-count: ~D~%" (-> obj tie-mid-count))
  (format #t "~1Twater-far-count: ~D~%" (-> obj tie-far-count))
  (format #t "~1Tenvmap-count[4] @ #x~X~%" (-> obj envmap-count))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> obj envmap-scissor-count))
  (format #t "~1Tenvmap-near-count: ~D~%" (-> obj envmap-near-count))
  (format #t "~1Tenvmap-mid-count: ~D~%" (-> obj envmap-mid-count))
  (format #t "~1Tenvmap-far-count: ~D~%" (-> obj envmap-far-count))
  (format #t "~1Tgeneric-count[3] @ #x~X~%" (-> obj generic-count))
  (format #t "~1Tgeneric-near-count: ~D~%" (-> obj generic-near-count))
  (format #t "~1Tgeneric-mid-count: ~D~%" (-> obj generic-mid-count))
  (format #t "~1Tgeneric-far-count: ~D~%" (-> obj generic-far-count))
  (format #t "~1Tvanish-count: ~D~%" (-> obj vanish-count))
  (format #t "~1Tnext-clear[3] @ #x~X~%" (-> obj next))
  (format #t "~1Tcount-clear[3] @ #x~X~%" (-> obj count))
  (label cfg-4)
  obj
  )

;; definition of type prototype-array-tie
(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset  16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (login (_type_) none 9)
    )
  )

;; definition for method 3 of type prototype-array-tie
(defmethod inspect prototype-array-tie ((obj prototype-array-tie))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Ttype: ~A~%" (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tcontent-type: ~A~%" (-> obj content-type))
  (label cfg-4)
  obj
  )

;; definition of type proxy-prototype-array-tie
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie  :offset-assert   4)
   (wind-vectors        uint32               :offset-assert   8)
   (wind-count          uint16               :offset-assert  12)
   (prototype-max-qwc   uint16               :offset-assert  14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type proxy-prototype-array-tie
(defmethod inspect proxy-prototype-array-tie ((obj proxy-prototype-array-tie))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tprototype-array-tie: ~A~%" (-> obj prototype-array-tie))
  (format #t "~1Twind-vectors: #x~X~%" (-> obj wind-vectors))
  (format #t "~1Twind-count: ~D~%" (-> obj wind-count))
  (format #t "~1Tprototype-max-qwc: ~D~%" (-> obj prototype-max-qwc))
  (label cfg-4)
  obj
  )

;; definition of type instance
(deftype instance (drawable)
  ((bucket-index uint16           :offset          6)
   (origin       matrix4h :inline :offset-assert  32)
   (flags        uint16           :offset         46)
   (wind-index   uint16           :offset         62)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

;; definition for method 3 of type instance
(defmethod inspect instance ((obj instance))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~1Tbucket-index: ~D~%" (-> obj bucket-index))
  (format #t "~1Torigin: #<matrix4h @ #x~X>~%" (-> obj origin))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Twind-index: ~D~%" (-> obj wind-index))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
