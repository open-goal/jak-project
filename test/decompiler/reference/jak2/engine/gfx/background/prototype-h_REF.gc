;;-*-Lisp-*-
(in-package goal)

;; definition of type prototype-bucket
(deftype prototype-bucket (basic)
  ((name                 string)
   (flags                prototype-flags)
   (texture-masks-index  uint16)
   (in-level             uint16)
   (utextures            uint16)
   (geometry             drawable  4)
   (dists                vector    :inline)
   (rdists               vector    :inline)
   (near-plane           meters    :overlay-at (-> dists data 0))
   (near-stiff           meters    :overlay-at (-> dists data 1))
   (mid-plane            meters    :overlay-at (-> dists data 2))
   (far-plane            meters    :overlay-at (-> dists data 3))
   (rlength-near         float     :overlay-at (-> rdists data 0))
   (rlength-stiff        float     :overlay-at (-> rdists data 1))
   (rlength-mid          float     :overlay-at (-> rdists data 2))
   (stiffness            float     :overlay-at (-> rdists data 3))
   )
  )

;; definition for method 3 of type prototype-bucket
(defmethod inspect ((this prototype-bucket))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> this in-level))
  (format #t "~1Tutextures: ~D~%" (-> this utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~1Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> this rdists w))
  (label cfg-4)
  this
  )

;; definition of type prototype-bucket-shrub
(deftype prototype-bucket-shrub (prototype-bucket)
  ((next               uint32      4)
   (count              uint16      4)
   (mod-count          uint16      4)
   (last               dma-packet  4)
   (next-clear         uint128     :overlay-at (-> next 0))
   (count-clear        uint64      :overlay-at (-> count 0))
   (count-clear-qword  uint128     :overlay-at (-> count 0))
   (last-clear         uint128     :overlay-at (-> last 0))
   )
  )

;; definition for method 3 of type prototype-bucket-shrub
;; INFO: Used lq/sq
(defmethod inspect ((this prototype-bucket-shrub))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> this in-level))
  (format #t "~1Tutextures: ~D~%" (-> this utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~1Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~1Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~1Tcount[4] @ #x~X~%" (-> this count))
  (format #t "~1Tmod-count[4] @ #x~X~%" (-> this mod-count))
  (format #t "~1Tlast[4] @ #x~X~%" (-> this last))
  (format #t "~1Tnext-clear: ~D~%" (-> this next-clear))
  (format #t "~1Tcount-clear: ~D~%" (-> this count-clear))
  (format #t "~1Tlast-clear: ~D~%" (-> this last-clear))
  (label cfg-4)
  this
  )

;; definition of type prototype-inline-array-shrub
(deftype prototype-inline-array-shrub (drawable)
  ((length  int16                             :offset   6)
   (data    prototype-bucket-shrub  1 :inline :offset  32)
   (_pad    uint32)
   )
  )

;; definition for method 3 of type prototype-inline-array-shrub
(defmethod inspect ((this prototype-inline-array-shrub))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tdata[1] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type prototype-array-shrub-info
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub  prototype-inline-array-shrub)
   (wind-vectors                  uint32)
   (wind-count                    int32)
   )
  )

;; definition for method 3 of type prototype-array-shrub-info
(defmethod inspect ((this prototype-array-shrub-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tprototype-inline-array-shrub: ~A~%" (-> this prototype-inline-array-shrub))
  (format #t "~1Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~1Twind-count: ~D~%" (-> this wind-count))
  (label cfg-4)
  this
  )

;; definition of type prototype-bucket-tie
(deftype prototype-bucket-tie (prototype-bucket)
  ((next                         uint32         12)
   (count                        uint16         12)
   (frag-count                   uint8          4)
   (index-start                  uint8          4)
   (base-qw                      uint16         4)
   (tie-rvanish                  float)
   (tie-vanish-far               float)
   (envmap-rfade                 float)
   (envmap-fade-far              float)
   (envmap-shader                adgif-shader)
   (tint-color                   uint32)
   (collide-hash-fragment-array  collide-hash-fragment-array)
   (tie-colors                   time-of-day-palette)
   (data                         uint32         :dynamic)
   (color-index-qwc              uint32         :dynamic)
   (scissor-frag-count           uint8            :overlay-at (-> frag-count 0))
   (near-frag-count              uint8            :overlay-at (-> frag-count 1))
   (mid-frag-count               uint8            :overlay-at (-> frag-count 2))
   (far-frag-count               uint8            :overlay-at (-> frag-count 3))
   (scissor-index-start          uint8            :overlay-at (-> index-start 0))
   (near-index-start             uint8            :overlay-at (-> index-start 1))
   (mid-index-start              uint8            :overlay-at (-> index-start 2))
   (far-index-start              uint8            :overlay-at (-> index-start 3))
   (scissor-base-qw              uint16           :overlay-at (-> base-qw 0))
   (near-base-qw                 uint16           :overlay-at (-> base-qw 1))
   (mid-base-qw                  uint16           :overlay-at (-> base-qw 2))
   (far-base-qw                  uint16           :overlay-at (-> base-qw 3))
   (tie-next                     uint32         4 :overlay-at (-> next 0))
   (tie-scissor-next             uint32           :overlay-at (-> next 0))
   (tie-near-next                uint32           :overlay-at (-> next 1))
   (tie-mid-next                 uint32           :overlay-at (-> next 2))
   (tie-far-next                 uint32           :overlay-at (-> next 3))
   (trans-next                   uint32         4 :overlay-at (-> next 0))
   (trans-scissor-next           uint32         4 :overlay-at (-> next 0))
   (trans-near-next              uint32           :overlay-at (-> next 1))
   (trans-mid-next               uint32           :overlay-at (-> next 2))
   (trans-far-next               uint32           :overlay-at (-> next 3))
   (water-next                   uint32         4 :overlay-at (-> next 0))
   (water-scissor-next           uint32         4 :overlay-at (-> next 0))
   (water-near-next              uint32           :overlay-at (-> next 1))
   (water-mid-next               uint32           :overlay-at (-> next 2))
   (water-far-next               uint32           :overlay-at (-> next 3))
   (envmap-next                  uint32         4 :overlay-at (-> next 4))
   (envmap-scissor-next          uint32         4 :overlay-at (-> next 4))
   (envmap-near-next             uint32           :overlay-at (-> next 5))
   (envmap-mid-next              uint32           :overlay-at (-> next 6))
   (envmap-far-next              uint32           :overlay-at (-> next 7))
   (generic-next                 uint32         3 :overlay-at (-> next 8))
   (generic-near-next            uint32           :overlay-at (-> next 8))
   (generic-mid-next             uint32           :overlay-at (-> next 9))
   (generic-far-next             uint32           :overlay-at (-> next 10))
   (vanish-next                  uint32           :overlay-at (-> next 11))
   (tie-count                    uint16         4 :overlay-at (-> count 0))
   (tie-scissor-count            uint16           :overlay-at (-> count 0))
   (tie-near-count               uint16           :overlay-at (-> count 1))
   (tie-mid-count                uint16           :overlay-at (-> count 2))
   (tie-far-count                uint16           :overlay-at (-> count 3))
   (trans-count                  uint16         4 :overlay-at (-> count 0))
   (trans-scissor-count          uint16           :overlay-at (-> count 0))
   (trans-near-count             uint16           :overlay-at (-> count 1))
   (trans-mid-count              uint16           :overlay-at (-> count 2))
   (trans-far-count              uint16           :overlay-at (-> count 3))
   (water-count                  uint16         4 :overlay-at (-> count 0))
   (water-scissor-count          uint16           :overlay-at (-> count 0))
   (water-near-count             uint16           :overlay-at (-> count 1))
   (water-mid-count              uint16           :overlay-at (-> count 2))
   (water-far-count              uint16           :overlay-at (-> count 3))
   (envmap-count                 uint16         4 :overlay-at (-> count 4))
   (envmap-scissor-count         uint16           :overlay-at (-> count 4))
   (envmap-near-count            uint16           :overlay-at (-> count 5))
   (envmap-mid-count             uint16           :overlay-at (-> count 6))
   (envmap-far-count             uint16           :overlay-at (-> count 7))
   (generic-count                uint16         3 :overlay-at (-> count 8))
   (generic-near-count           uint16           :overlay-at (-> count 8))
   (generic-mid-count            uint16           :overlay-at (-> count 9))
   (generic-far-count            uint16           :overlay-at (-> count 10))
   (vanish-count                 uint16           :overlay-at (-> count 11))
   (next-clear                   uint128        3 :overlay-at (-> next 0))
   (count-clear                  uint64         3 :overlay-at (-> count 0))
   (tie-geom                     prototype-tie  4 :overlay-at (-> geometry 0))
   )
  )

;; definition for method 3 of type prototype-bucket-tie
(defmethod inspect ((this prototype-bucket-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> this in-level))
  (format #t "~1Tutextures: ~D~%" (-> this utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this tie-geom))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~1Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~1Tnext[12] @ #x~X~%" (-> this next))
  (format #t "~1Tcount[12] @ #x~X~%" (-> this count))
  (format #t "~1Tfrag-count[4] @ #x~X~%" (-> this frag-count))
  (format #t "~1Tindex-start[4] @ #x~X~%" (-> this index-start))
  (format #t "~1Tbase-qw[4] @ #x~X~%" (-> this base-qw))
  (format #t "~1Ttie-rvanish: ~f~%" (-> this tie-rvanish))
  (format #t "~1Ttie-vanish-far: ~f~%" (-> this tie-vanish-far))
  (format #t "~1Tenvmap-rfade: ~f~%" (-> this envmap-rfade))
  (format #t "~1Tenvmap-fade-far: ~f~%" (-> this envmap-fade-far))
  (format #t "~1Tenvmap-shader: #<adgif-shader @ #x~X>~%" (-> this envmap-shader))
  (format #t "~1Ttint-color: ~D~%" (-> this tint-color))
  (format #t "~1Tcollide-hash-fragment-array: ~A~%" (-> this collide-hash-fragment-array))
  (format #t "~1Ttie-colors: ~A~%" (-> this tie-colors))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (format #t "~1Tcolor-index-qwc[0] @ #x~X~%" (-> this data))
  (format #t "~1Tscissor-frag-count: ~D~%" (-> this scissor-frag-count))
  (format #t "~1Tnear-frag-count: ~D~%" (-> this near-frag-count))
  (format #t "~1Tmid-frag-count: ~D~%" (-> this mid-frag-count))
  (format #t "~1Tfar-frag-count: ~D~%" (-> this far-frag-count))
  (format #t "~1Tscissor-index-start: ~D~%" (-> this scissor-index-start))
  (format #t "~1Tnear-index-start: ~D~%" (-> this near-index-start))
  (format #t "~1Tmid-index-start: ~D~%" (-> this mid-index-start))
  (format #t "~1Tfar-index-start: ~D~%" (-> this far-index-start))
  (format #t "~1Tscissor-base-qw: ~D~%" (-> this scissor-base-qw))
  (format #t "~1Tnear-base-qw: ~D~%" (-> this near-base-qw))
  (format #t "~1Tmid-base-qw: ~D~%" (-> this mid-base-qw))
  (format #t "~1Tfar-base-qw: ~D~%" (-> this far-base-qw))
  (format #t "~1Ttie-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttie-scissor-next: #x~X~%" (-> this tie-scissor-next))
  (format #t "~1Ttie-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Ttie-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Ttie-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Ttrans-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttrans-scissor-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttrans-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Ttrans-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Ttrans-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Twater-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Twater-scissor-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Twater-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Twater-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Twater-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Tenvmap-next[4] @ #x~X~%" (-> this envmap-next))
  (format #t "~1Tenvmap-scissor-next[4] @ #x~X~%" (-> this envmap-next))
  (format #t "~1Tenvmap-near-next: #x~X~%" (-> this envmap-near-next))
  (format #t "~1Tenvmap-mid-next: #x~X~%" (-> this envmap-mid-next))
  (format #t "~1Tenvmap-far-next: #x~X~%" (-> this envmap-far-next))
  (format #t "~1Tgeneric-next[3] @ #x~X~%" (-> this generic-next))
  (format #t "~1Tgeneric-near-next: #x~X~%" (-> this generic-near-next))
  (format #t "~1Tgeneric-mid-next: #x~X~%" (-> this generic-mid-next))
  (format #t "~1Tgeneric-far-next: #x~X~%" (-> this generic-far-next))
  (format #t "~1Tvanish-next: #x~X~%" (-> this vanish-next))
  (format #t "~1Ttie-count[4] @ #x~X~%" (-> this count))
  (format #t "~1Ttie-scissor-count: ~D~%" (-> this tie-scissor-count))
  (format #t "~1Ttie-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Ttie-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Ttie-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Ttrans-count[4] @ #x~X~%" (-> this count))
  (format #t "~1Ttrans-scissor-count: ~D~%" (-> this tie-scissor-count))
  (format #t "~1Ttrans-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Ttrans-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Ttrans-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Twater-count[4] @ #x~X~%" (-> this count))
  (format #t "~1Twater-scissor-count: ~D~%" (-> this tie-scissor-count))
  (format #t "~1Twater-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Twater-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Twater-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Tenvmap-count[4] @ #x~X~%" (-> this envmap-count))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> this envmap-scissor-count))
  (format #t "~1Tenvmap-near-count: ~D~%" (-> this envmap-near-count))
  (format #t "~1Tenvmap-mid-count: ~D~%" (-> this envmap-mid-count))
  (format #t "~1Tenvmap-far-count: ~D~%" (-> this envmap-far-count))
  (format #t "~1Tgeneric-count[3] @ #x~X~%" (-> this generic-count))
  (format #t "~1Tgeneric-near-count: ~D~%" (-> this generic-near-count))
  (format #t "~1Tgeneric-mid-count: ~D~%" (-> this generic-mid-count))
  (format #t "~1Tgeneric-far-count: ~D~%" (-> this generic-far-count))
  (format #t "~1Tvanish-count: ~D~%" (-> this vanish-count))
  (format #t "~1Tnext-clear[3] @ #x~X~%" (-> this next))
  (format #t "~1Tcount-clear[3] @ #x~X~%" (-> this count))
  (label cfg-4)
  this
  )

;; definition of type prototype-array-tie
(deftype prototype-array-tie (array)
  ((array-data  prototype-bucket-tie  :dynamic :offset  16)
   )
  (:methods
    (login (_type_) none)
    )
  )

;; definition for method 3 of type prototype-array-tie
(defmethod inspect ((this prototype-array-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Ttype: ~A~%" (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tcontent-type: ~A~%" (-> this content-type))
  (label cfg-4)
  this
  )

;; definition of type proxy-prototype-array-tie
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie  prototype-array-tie)
   (wind-vectors         uint32)
   (wind-count           uint16)
   (prototype-max-qwc    uint16)
   )
  )

;; definition for method 3 of type proxy-prototype-array-tie
(defmethod inspect ((this proxy-prototype-array-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tprototype-array-tie: ~A~%" (-> this prototype-array-tie))
  (format #t "~1Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~1Twind-count: ~D~%" (-> this wind-count))
  (format #t "~1Tprototype-max-qwc: ~D~%" (-> this prototype-max-qwc))
  (label cfg-4)
  this
  )

;; definition of type instance
(deftype instance (drawable)
  ((bucket-index  uint16          :offset   6)
   (origin        matrix4h        :inline)
   (flags         instance-flags  :overlay-at (-> origin data 7))
   (wind-index    uint16          :overlay-at (-> origin data 15))
   )
  )

;; definition for method 3 of type instance
(defmethod inspect ((this instance))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tbucket-index: ~D~%" (-> this bucket-index))
  (format #t "~1Torigin: #<matrix4h @ #x~X>~%" (-> this origin))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Twind-index: ~D~%" (-> this wind-index))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
