;;-*-Lisp-*-
(in-package goal)

;; definition of type prototype-bucket
(deftype prototype-bucket (basic)
  ((name                string                  :offset-assert   4)
   (flags               prototype-flags         :offset-assert   8)
   (texture-masks-index uint16                  :offset-assert  10)
   (in-level            uint16                  :offset-assert  12)
   (utextures           uint16                  :offset-assert  14)
   (geometry            drawable        4       :offset-assert  16)
   (dists               vector          :inline :offset-assert  32)
   (rdists              vector          :inline :offset-assert  48)
   (near-plane          meters                  :offset         32)
   (near-stiff          meters                  :offset         36)
   (mid-plane           meters                  :offset         40)
   (far-plane           meters                  :offset         44)
   (rlength-near        float                   :offset         48)
   (rlength-stiff       float                   :offset         52)
   (rlength-mid         float                   :offset         56)
   (stiffness           float                   :offset         60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type prototype-bucket
(defmethod inspect prototype-bucket ((this prototype-bucket))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> this in-level))
  (format #t "~1Tutextures: ~D~%" (-> this utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~1Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> this rdists w))
  (label cfg-4)
  this
  )

;; definition of type prototype-bucket-shrub
(deftype prototype-bucket-shrub (prototype-bucket)
  ((next              uint32     4 :offset-assert  64)
   (count             uint16     4 :offset-assert  80)
   (mod-count         uint16     4 :offset-assert  88)
   (last              dma-packet 4 :offset-assert  96)
   (next-clear        uint128      :offset         64)
   (count-clear       uint64       :offset         80)
   (count-clear-qword uint128      :offset         80)
   (last-clear        uint128      :offset         96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type prototype-bucket-shrub
;; INFO: Used lq/sq
(defmethod inspect prototype-bucket-shrub ((this prototype-bucket-shrub))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> this in-level))
  (format #t "~1Tutextures: ~D~%" (-> this utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~1Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~1Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~1Tcount[4] @ #x~X~%" (-> this count))
  (format #t "~1Tmod-count[4] @ #x~X~%" (-> this mod-count))
  (format #t "~1Tlast[4] @ #x~X~%" (-> this last))
  (format #t "~1Tnext-clear: ~D~%" (-> this next-clear))
  (format #t "~1Tcount-clear: ~D~%" (-> this count-clear))
  (format #t "~1Tlast-clear: ~D~%" (-> this last-clear))
  (label cfg-4)
  this
  )

;; definition of type prototype-inline-array-shrub
(deftype prototype-inline-array-shrub (drawable)
  ((length int16                            :offset          6)
   (data   prototype-bucket-shrub 1 :inline :offset         32)
   (_pad   uint32                           :offset-assert 144)
   )
  :method-count-assert 17
  :size-assert         #x94
  :flag-assert         #x1100000094
  )

;; definition for method 3 of type prototype-inline-array-shrub
(defmethod inspect prototype-inline-array-shrub ((this prototype-inline-array-shrub))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tdata[1] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type prototype-array-shrub-info
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub prototype-inline-array-shrub  :offset-assert   4)
   (wind-vectors                 uint32                        :offset-assert   8)
   (wind-count                   int32                         :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type prototype-array-shrub-info
(defmethod inspect prototype-array-shrub-info ((this prototype-array-shrub-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tprototype-inline-array-shrub: ~A~%" (-> this prototype-inline-array-shrub))
  (format #t "~1Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~1Twind-count: ~D~%" (-> this wind-count))
  (label cfg-4)
  this
  )

;; definition of type prototype-bucket-tie
(deftype prototype-bucket-tie (prototype-bucket)
  ((next                        uint32                      12       :offset-assert  64)
   (count                       uint16                      12       :offset-assert 112)
   (frag-count                  uint8                       4        :offset-assert 136)
   (index-start                 uint8                       4        :offset-assert 140)
   (base-qw                     uint16                      4        :offset-assert 144)
   (tie-rvanish                 float                                :offset-assert 152)
   (tie-vanish-far              float                                :offset-assert 156)
   (envmap-rfade                float                                :offset-assert 160)
   (envmap-fade-far             float                                :offset-assert 164)
   (envmap-shader               adgif-shader                         :offset-assert 168)
   (tint-color                  uint32                               :offset-assert 172)
   (collide-hash-fragment-array collide-hash-fragment-array          :offset-assert 176)
   (tie-colors                  time-of-day-palette                  :offset-assert 180)
   (data                        uint32                      :dynamic :offset-assert 184)
   (color-index-qwc             uint32                      :dynamic :offset-assert 184)
   (scissor-frag-count          uint8                                :offset        136)
   (near-frag-count             uint8                                :offset        137)
   (mid-frag-count              uint8                                :offset        138)
   (far-frag-count              uint8                                :offset        139)
   (scissor-index-start         uint8                                :offset        140)
   (near-index-start            uint8                                :offset        141)
   (mid-index-start             uint8                                :offset        142)
   (far-index-start             uint8                                :offset        143)
   (scissor-base-qw             uint16                               :offset        144)
   (near-base-qw                uint16                               :offset        146)
   (mid-base-qw                 uint16                               :offset        148)
   (far-base-qw                 uint16                               :offset        150)
   (tie-next                    uint32                      4        :offset         64)
   (tie-scissor-next            uint32                               :offset         64)
   (tie-near-next               uint32                               :offset         68)
   (tie-mid-next                uint32                               :offset         72)
   (tie-far-next                uint32                               :offset         76)
   (trans-next                  uint32                      4        :offset         64)
   (trans-scissor-next          uint32                      4        :offset         64)
   (trans-near-next             uint32                               :offset         68)
   (trans-mid-next              uint32                               :offset         72)
   (trans-far-next              uint32                               :offset         76)
   (water-next                  uint32                      4        :offset         64)
   (water-scissor-next          uint32                      4        :offset         64)
   (water-near-next             uint32                               :offset         68)
   (water-mid-next              uint32                               :offset         72)
   (water-far-next              uint32                               :offset         76)
   (envmap-next                 uint32                      4        :offset         80)
   (envmap-scissor-next         uint32                      4        :offset         80)
   (envmap-near-next            uint32                               :offset         84)
   (envmap-mid-next             uint32                               :offset         88)
   (envmap-far-next             uint32                               :offset         92)
   (generic-next                uint32                      3        :offset         96)
   (generic-near-next           uint32                               :offset         96)
   (generic-mid-next            uint32                               :offset        100)
   (generic-far-next            uint32                               :offset        104)
   (vanish-next                 uint32                               :offset        108)
   (tie-count                   uint16                      4        :offset        112)
   (tie-scissor-count           uint16                               :offset        112)
   (tie-near-count              uint16                               :offset        114)
   (tie-mid-count               uint16                               :offset        116)
   (tie-far-count               uint16                               :offset        118)
   (trans-count                 uint16                      4        :offset        112)
   (trans-scissor-count         uint16                               :offset        112)
   (trans-near-count            uint16                               :offset        114)
   (trans-mid-count             uint16                               :offset        116)
   (trans-far-count             uint16                               :offset        118)
   (water-count                 uint16                      4        :offset        112)
   (water-scissor-count         uint16                               :offset        112)
   (water-near-count            uint16                               :offset        114)
   (water-mid-count             uint16                               :offset        116)
   (water-far-count             uint16                               :offset        118)
   (envmap-count                uint16                      4        :offset        120)
   (envmap-scissor-count        uint16                               :offset        120)
   (envmap-near-count           uint16                               :offset        122)
   (envmap-mid-count            uint16                               :offset        124)
   (envmap-far-count            uint16                               :offset        126)
   (generic-count               uint16                      3        :offset        128)
   (generic-near-count          uint16                               :offset        128)
   (generic-mid-count           uint16                               :offset        130)
   (generic-far-count           uint16                               :offset        132)
   (vanish-count                uint16                               :offset        134)
   (next-clear                  uint128                     3        :offset         64)
   (count-clear                 uint64                      3        :offset        112)
   (tie-geom                    prototype-tie               4        :offset         16)
   )
  :method-count-assert 9
  :size-assert         #xb8
  :flag-assert         #x9000000b8
  )

;; definition for method 3 of type prototype-bucket-tie
(defmethod inspect prototype-bucket-tie ((this prototype-bucket-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tin-level: ~D~%" (-> this in-level))
  (format #t "~1Tutextures: ~D~%" (-> this utextures))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> this tie-geom))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~1Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~1Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~1Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~1Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~1Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~1Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~1Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~1Tnext[12] @ #x~X~%" (-> this next))
  (format #t "~1Tcount[12] @ #x~X~%" (-> this count))
  (format #t "~1Tfrag-count[4] @ #x~X~%" (-> this frag-count))
  (format #t "~1Tindex-start[4] @ #x~X~%" (-> this index-start))
  (format #t "~1Tbase-qw[4] @ #x~X~%" (-> this base-qw))
  (format #t "~1Ttie-rvanish: ~f~%" (-> this tie-rvanish))
  (format #t "~1Ttie-vanish-far: ~f~%" (-> this tie-vanish-far))
  (format #t "~1Tenvmap-rfade: ~f~%" (-> this envmap-rfade))
  (format #t "~1Tenvmap-fade-far: ~f~%" (-> this envmap-fade-far))
  (format #t "~1Tenvmap-shader: #<adgif-shader @ #x~X>~%" (-> this envmap-shader))
  (format #t "~1Ttint-color: ~D~%" (-> this tint-color))
  (format #t "~1Tcollide-hash-fragment-array: ~A~%" (-> this collide-hash-fragment-array))
  (format #t "~1Ttie-colors: ~A~%" (-> this tie-colors))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (format #t "~1Tcolor-index-qwc[0] @ #x~X~%" (-> this data))
  (format #t "~1Tscissor-frag-count: ~D~%" (-> this scissor-frag-count))
  (format #t "~1Tnear-frag-count: ~D~%" (-> this near-frag-count))
  (format #t "~1Tmid-frag-count: ~D~%" (-> this mid-frag-count))
  (format #t "~1Tfar-frag-count: ~D~%" (-> this far-frag-count))
  (format #t "~1Tscissor-index-start: ~D~%" (-> this scissor-index-start))
  (format #t "~1Tnear-index-start: ~D~%" (-> this near-index-start))
  (format #t "~1Tmid-index-start: ~D~%" (-> this mid-index-start))
  (format #t "~1Tfar-index-start: ~D~%" (-> this far-index-start))
  (format #t "~1Tscissor-base-qw: ~D~%" (-> this scissor-base-qw))
  (format #t "~1Tnear-base-qw: ~D~%" (-> this near-base-qw))
  (format #t "~1Tmid-base-qw: ~D~%" (-> this mid-base-qw))
  (format #t "~1Tfar-base-qw: ~D~%" (-> this far-base-qw))
  (format #t "~1Ttie-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttie-scissor-next: #x~X~%" (-> this tie-scissor-next))
  (format #t "~1Ttie-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Ttie-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Ttie-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Ttrans-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttrans-scissor-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Ttrans-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Ttrans-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Ttrans-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Twater-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Twater-scissor-next[4] @ #x~X~%" (-> this next))
  (format #t "~1Twater-near-next: #x~X~%" (-> this tie-near-next))
  (format #t "~1Twater-mid-next: #x~X~%" (-> this tie-mid-next))
  (format #t "~1Twater-far-next: #x~X~%" (-> this tie-far-next))
  (format #t "~1Tenvmap-next[4] @ #x~X~%" (-> this envmap-next))
  (format #t "~1Tenvmap-scissor-next[4] @ #x~X~%" (-> this envmap-next))
  (format #t "~1Tenvmap-near-next: #x~X~%" (-> this envmap-near-next))
  (format #t "~1Tenvmap-mid-next: #x~X~%" (-> this envmap-mid-next))
  (format #t "~1Tenvmap-far-next: #x~X~%" (-> this envmap-far-next))
  (format #t "~1Tgeneric-next[3] @ #x~X~%" (-> this generic-next))
  (format #t "~1Tgeneric-near-next: #x~X~%" (-> this generic-near-next))
  (format #t "~1Tgeneric-mid-next: #x~X~%" (-> this generic-mid-next))
  (format #t "~1Tgeneric-far-next: #x~X~%" (-> this generic-far-next))
  (format #t "~1Tvanish-next: #x~X~%" (-> this vanish-next))
  (format #t "~1Ttie-count[4] @ #x~X~%" (-> this count))
  (format #t "~1Ttie-scissor-count: ~D~%" (-> this tie-scissor-count))
  (format #t "~1Ttie-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Ttie-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Ttie-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Ttrans-count[4] @ #x~X~%" (-> this count))
  (format #t "~1Ttrans-scissor-count: ~D~%" (-> this tie-scissor-count))
  (format #t "~1Ttrans-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Ttrans-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Ttrans-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Twater-count[4] @ #x~X~%" (-> this count))
  (format #t "~1Twater-scissor-count: ~D~%" (-> this tie-scissor-count))
  (format #t "~1Twater-near-count: ~D~%" (-> this tie-near-count))
  (format #t "~1Twater-mid-count: ~D~%" (-> this tie-mid-count))
  (format #t "~1Twater-far-count: ~D~%" (-> this tie-far-count))
  (format #t "~1Tenvmap-count[4] @ #x~X~%" (-> this envmap-count))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> this envmap-scissor-count))
  (format #t "~1Tenvmap-near-count: ~D~%" (-> this envmap-near-count))
  (format #t "~1Tenvmap-mid-count: ~D~%" (-> this envmap-mid-count))
  (format #t "~1Tenvmap-far-count: ~D~%" (-> this envmap-far-count))
  (format #t "~1Tgeneric-count[3] @ #x~X~%" (-> this generic-count))
  (format #t "~1Tgeneric-near-count: ~D~%" (-> this generic-near-count))
  (format #t "~1Tgeneric-mid-count: ~D~%" (-> this generic-mid-count))
  (format #t "~1Tgeneric-far-count: ~D~%" (-> this generic-far-count))
  (format #t "~1Tvanish-count: ~D~%" (-> this vanish-count))
  (format #t "~1Tnext-clear[3] @ #x~X~%" (-> this next))
  (format #t "~1Tcount-clear[3] @ #x~X~%" (-> this count))
  (label cfg-4)
  this
  )

;; definition of type prototype-array-tie
(deftype prototype-array-tie (array)
  ((array-data prototype-bucket-tie :dynamic :offset  16)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (login (_type_) none 9)
    )
  )

;; definition for method 3 of type prototype-array-tie
(defmethod inspect prototype-array-tie ((this prototype-array-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Ttype: ~A~%" (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tcontent-type: ~A~%" (-> this content-type))
  (label cfg-4)
  this
  )

;; definition of type proxy-prototype-array-tie
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie prototype-array-tie  :offset-assert   4)
   (wind-vectors        uint32               :offset-assert   8)
   (wind-count          uint16               :offset-assert  12)
   (prototype-max-qwc   uint16               :offset-assert  14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type proxy-prototype-array-tie
(defmethod inspect proxy-prototype-array-tie ((this proxy-prototype-array-tie))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tprototype-array-tie: ~A~%" (-> this prototype-array-tie))
  (format #t "~1Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~1Twind-count: ~D~%" (-> this wind-count))
  (format #t "~1Tprototype-max-qwc: ~D~%" (-> this prototype-max-qwc))
  (label cfg-4)
  this
  )

;; definition of type instance
(deftype instance (drawable)
  ((bucket-index uint16                 :offset          6)
   (origin       matrix4h       :inline :offset-assert  32)
   (flags        instance-flags         :offset         46)
   (wind-index   uint16                 :offset         62)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

;; definition for method 3 of type instance
(defmethod inspect instance ((this instance))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tbucket-index: ~D~%" (-> this bucket-index))
  (format #t "~1Torigin: #<matrix4h @ #x~X>~%" (-> this origin))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Twind-index: ~D~%" (-> this wind-index))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
