;;-*-Lisp-*-
(in-package goal)

;; definition of type wind-vector
(deftype wind-vector (structure)
  ((wind-pos  vector4w :inline :offset-assert   0)
   (wind-vel  vector4w :inline :offset-assert  16)
   (stiffness float            :offset         28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type wind-vector
(defmethod inspect wind-vector ((this wind-vector))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wind-vector)
  (format #t "~1Twind-pos: #<vector4w @ #x~X>~%" (-> this wind-pos))
  (format #t "~1Twind-vel: #<vector4w @ #x~X>~%" (-> this wind-vel))
  (format #t "~1Tstiffness: ~f~%" (-> this stiffness))
  (label cfg-4)
  this
  )

;; definition for symbol *wind-scales*, type (array uint8)
(define *wind-scales* (new 'static 'boxed-array :type uint8
                        #x2
                        #x5
                        #x2
                        #x3
                        #x2
                        #x2
                        #x3
                        #x10
                        #xa
                        #x2
                        #x4
                        #x2
                        #x8
                        #x2
                        #x2
                        #x10
                        #x2
                        #x2
                        #x8
                        #x2
                        #x10
                        #x2
                        #x4
                        #x10
                        #xa
                        #x2
                        #x4
                        #x2
                        #x8
                        #x2
                        #x2
                        #x10
                        )
        )

;; definition of type wind-work
(deftype wind-work (basic)
  ((wind-array    vector 64 :inline :offset-assert  16)
   (wind-normal   vector :inline    :offset-assert 1040)
   (wind-temp     vector :inline    :offset-assert 1056)
   (wind-force    float  64         :offset-assert 1072)
   (wind-const    vector :inline    :offset-assert 1328)
   (wind-time     uint32            :offset-assert 1344)
   (wait-to-vu0   uint32            :offset-assert 1348)
   (wait-to-spr   uint32            :offset-assert 1352)
   (wait-from-spr uint32            :offset-assert 1356)
   (spr-index     uint32            :offset-assert 1360)
   (count         uint32            :offset-assert 1364)
   (next-count    uint32            :offset-assert 1368)
   (last-count    uint32            :offset-assert 1372)
   (to-spr        uint32            :offset-assert 1376)
   (from-spr      uint32            :offset-assert 1380)
   (next-mem      uint32            :offset-assert 1384)
   (last-mem      uint32            :offset-assert 1388)
   (next-spr      uint32            :offset-assert 1392)
   (last-spr      uint32            :offset-assert 1396)
   (to-ptrs       uint32 3          :offset-assert 1400)
   )
  :method-count-assert 9
  :size-assert         #x584
  :flag-assert         #x900000584
  )

;; definition for method 3 of type wind-work
(defmethod inspect wind-work ((this wind-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Twind-array[64] @ #x~X~%" (-> this wind-array))
  (format #t "~1Twind-normal: ~`vector`P~%" (-> this wind-normal))
  (format #t "~1Twind-temp: ~`vector`P~%" (-> this wind-temp))
  (format #t "~1Twind-force[64] @ #x~X~%" (-> this wind-force))
  (format #t "~1Twind-const: ~`vector`P~%" (-> this wind-const))
  (format #t "~1Twind-time: ~D~%" (-> this wind-time))
  (format #t "~1Twait-to-vu0: ~D~%" (-> this wait-to-vu0))
  (format #t "~1Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~1Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~1Tspr-index: ~D~%" (-> this spr-index))
  (format #t "~1Tcount: ~D~%" (-> this count))
  (format #t "~1Tnext-count: ~D~%" (-> this next-count))
  (format #t "~1Tlast-count: ~D~%" (-> this last-count))
  (format #t "~1Tto-spr: ~D~%" (-> this to-spr))
  (format #t "~1Tfrom-spr: ~D~%" (-> this from-spr))
  (format #t "~1Tnext-mem: #x~X~%" (-> this next-mem))
  (format #t "~1Tlast-mem: #x~X~%" (-> this last-mem))
  (format #t "~1Tnext-spr: #x~X~%" (-> this next-spr))
  (format #t "~1Tlast-spr: #x~X~%" (-> this last-spr))
  (format #t "~1Tto-ptrs[3] @ #x~X~%" (-> this to-ptrs))
  (label cfg-4)
  this
  )

;; definition of type wind-dma
(deftype wind-dma (structure)
  ((buffer0 wind-vector 128 :inline :offset-assert   0)
   (buffer1 wind-vector 128 :inline :offset-assert 4096)
   (buffer2 wind-vector 128 :inline :offset-assert 8192)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

;; definition for method 3 of type wind-dma
(defmethod inspect wind-dma ((this wind-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wind-dma)
  (format #t "~1Tbuffer0[128] @ #x~X~%" (-> this buffer0))
  (format #t "~1Tbuffer1[128] @ #x~X~%" (-> this buffer1))
  (format #t "~1Tbuffer2[128] @ #x~X~%" (-> this buffer2))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
