;;-*-Lisp-*-
(in-package goal)

;; definition of type tfragment-stats
(deftype tfragment-stats (structure)
  ((num-tris    uint16  4)
   (num-dverts  uint16  4)
   )
  )

;; definition for method 3 of type tfragment-stats
(defmethod inspect ((this tfragment-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfragment-stats)
  (format #t "~1Tnum-tris[4] @ #x~X~%" (-> this num-tris))
  (format #t "~1Tnum-dverts[4] @ #x~X~%" (-> this num-dverts))
  (label cfg-4)
  this
  )

;; definition of type tfragment-debug-data
(deftype tfragment-debug-data (structure)
  ((stats        tfragment-stats  :inline)
   (debug-lines  (array vector-array))
   )
  )

;; definition for method 3 of type tfragment-debug-data
(defmethod inspect ((this tfragment-debug-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfragment-debug-data)
  (format #t "~1Tstats: #<tfragment-stats @ #x~X>~%" (-> this stats))
  (format #t "~1Tdebug-lines: ~A~%" (-> this debug-lines))
  (label cfg-4)
  this
  )

;; definition of type generic-tfragment
(deftype generic-tfragment (structure)
  ((dummy  int32)
   )
  )

;; definition for method 3 of type generic-tfragment
(defmethod inspect ((this generic-tfragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tfragment)
  (format #t "~1Tdummy: ~D~%" (-> this dummy))
  (label cfg-4)
  this
  )

;; definition of type tfragment
(deftype tfragment (drawable)
  ((color-index          uint16                         :offset   6)
   (debug-data           tfragment-debug-data           :offset   8)
   (color-indices        uint32                         :offset  12)
   (colors               uint32                         :overlay-at color-indices)
   (dma-chain            uint32                       3 :offset  32)
   (dma-common           uint32                         :overlay-at (-> dma-chain 0))
   (dma-level-0          uint32                         :overlay-at dma-common)
   (dma-base             uint32                         :overlay-at (-> dma-chain 1))
   (dma-level-1          uint32                         :overlay-at (-> dma-chain 2))
   (dma-qwc              uint8                        4 :offset  44)
   (dma-u32              uint32                         :overlay-at (-> dma-qwc 0))
   (shader               (inline-array adgif-shader)    :offset  48)
   (num-shaders          uint8                          :offset  52)
   (num-base-colors      uint8                          :offset  53)
   (num-level0-colors    uint8                          :offset  54)
   (num-level1-colors    uint8                          :offset  55)
   (color-offset         uint8                          :offset  56)
   (color-count          uint8                          :offset  57)
   (texture-masks-index  uint16                         :offset  58)
   (generic              generic-tfragment              :offset  60)
   (generic-u32          uint32                         :overlay-at generic)
   )
  )

;; definition for method 3 of type tfragment
(defmethod inspect ((this tfragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~1Tdebug-data: #<tfragment-debug-data @ #x~X>~%" (-> this debug-data))
  (format #t "~1Tcolor-indices: #x~X~%" (-> this color-indices))
  (format #t "~1Tcolors: #x~X~%" (-> this color-indices))
  (format #t "~1Tdma-chain[3] @ #x~X~%" (-> this dma-chain))
  (format #t "~1Tdma-common: #x~X~%" (-> this dma-common))
  (format #t "~1Tdma-level-0: #x~X~%" (-> this dma-common))
  (format #t "~1Tdma-base: #x~X~%" (-> this dma-base))
  (format #t "~1Tdma-level-1: #x~X~%" (-> this dma-level-1))
  (format #t "~1Tdma-qwc[4] @ #x~X~%" (-> this dma-qwc))
  (format #t "~1Tshader: #x~X~%" (-> this shader))
  (format #t "~1Tnum-shaders: ~D~%" (-> this num-shaders))
  (format #t "~1Tnum-base-colors: ~D~%" (-> this num-base-colors))
  (format #t "~1Tnum-level0-colors: ~D~%" (-> this num-level0-colors))
  (format #t "~1Tnum-level1-colors: ~D~%" (-> this num-level1-colors))
  (format #t "~1Tcolor-offset: ~D~%" (-> this color-offset))
  (format #t "~1Tcolor-count: ~D~%" (-> this color-count))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tgeneric: #<generic-tfragment @ #x~X>~%" (-> this generic))
  (label cfg-4)
  this
  )

;; definition of type drawable-inline-array-tfrag
(deftype drawable-inline-array-tfrag (drawable-inline-array)
  ((data  tfragment  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type drawable-inline-array-tfrag-trans
(deftype drawable-inline-array-tfrag-trans (drawable-inline-array-tfrag)
  ((data2  tfragment  1 :inline)
   (pad2   uint32)
   )
  )

;; definition of type drawable-inline-array-tfrag-water
(deftype drawable-inline-array-tfrag-water (drawable-inline-array-tfrag)
  ((data2  tfragment  1 :inline)
   (pad2   uint32)
   )
  )

;; definition of type drawable-tree-tfrag
(deftype drawable-tree-tfrag (drawable-tree)
  ((time-of-day-pal  time-of-day-palette             :offset  12)
   (arrays           drawable-inline-array  :dynamic :offset  32)
   )
  )

;; definition of type drawable-tree-tfrag-trans
(deftype drawable-tree-tfrag-trans (drawable-tree-tfrag)
  ()
  )

;; definition of type drawable-tree-tfrag-water
(deftype drawable-tree-tfrag-water (drawable-tree-tfrag-trans)
  ()
  )

;; definition of type tfrag-dists
(deftype tfrag-dists (structure)
  ((data    uint32  16)
   (vector  vector  4 :inline :overlay-at (-> data 0))
   (k0s     vector  2 :inline :overlay-at (-> data 0))
   (k1s     vector  2 :inline :overlay-at (-> data 8))
   )
  )

;; definition for method 3 of type tfrag-dists
(defmethod inspect ((this tfrag-dists))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-dists)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this k0s))
  (format #t "~1Tvector[4] @ #x~X~%" (-> this k0s))
  (format #t "~1Tk0s[2] @ #x~X~%" (-> this k0s))
  (format #t "~1Tk1s[2] @ #x~X~%" (-> this k1s))
  (label cfg-4)
  this
  )

;; definition of type tfrag-data
(deftype tfrag-data (structure)
  ((data         uint32       56         :offset   0)
   (vector       vector       14 :inline :overlay-at (-> data 0))
   (fog          vector       :inline    :overlay-at (-> vector 0))
   (val          vector       :inline    :overlay-at (-> vector 1))
   (strgif       gs-gif-tag   :inline    :overlay-at (-> data 8))
   (fangif       gs-gif-tag   :inline    :overlay-at (-> data 12))
   (adgif        gs-gif-tag   :inline    :overlay-at (-> data 16))
   (hvdf-offset  vector       :inline    :overlay-at (-> vector 5))
   (hmge-scale   vector       :inline    :overlay-at (-> vector 6))
   (invh-scale   vector       :inline    :overlay-at (-> vector 7))
   (ambient      vector       :inline    :overlay-at (-> vector 8))
   (guard        vector       :inline    :overlay-at (-> vector 9))
   (dists        tfrag-dists  :inline    :overlay-at (-> data 40))
   (k0s          uint128      2          :overlay-at (-> data 40))
   (k1s          uint128      2          :overlay-at (-> data 48))
   )
  )

;; definition for method 3 of type tfrag-data
(defmethod inspect ((this tfrag-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-data)
  (format #t "~1Tdata[56] @ #x~X~%" (-> this fog))
  (format #t "~1Tvector[14] @ #x~X~%" (-> this fog))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~1Tval: #<vector @ #x~X>~%" (-> this val))
  (format #t "~1Tstrgif: #<qword @ #x~X>~%" (-> this strgif))
  (format #t "~1Tfangif: #<qword @ #x~X>~%" (-> this fangif))
  (format #t "~1Tadgif: #<qword @ #x~X>~%" (-> this adgif))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~1Thmge-scale: #<vector @ #x~X>~%" (-> this hmge-scale))
  (format #t "~1Tinvh-scale: #<vector @ #x~X>~%" (-> this invh-scale))
  (format #t "~1Tambient: #<vector @ #x~X>~%" (-> this ambient))
  (format #t "~1Tguard: #<vector @ #x~X>~%" (-> this guard))
  (format #t "~1Tdists: #<tfrag-dists @ #x~X>~%" (-> this dists))
  (format #t "~1Tk0s[2] @ #x~X~%" (-> this dists))
  (format #t "~1Tk1s[2] @ #x~X~%" (-> this dists k1s))
  (label cfg-4)
  this
  )

;; definition of type tfrag-control
(deftype tfrag-control (structure)
  ((num-base-points            uint32)
   (num-shared-base-points     uint32)
   (num-level0-points          uint32)
   (num-shared-level0-points   uint32)
   (num-level1-points          uint32)
   (num-shared-level1-points   uint32)
   (ptr-vtxdata                uint32)
   (ptr-base-points            uint32)
   (ptr-shared-base-points     uint32)
   (ptr-level0-points          uint32)
   (ptr-shared-level0-points   uint32)
   (ptr-level1-points          uint32)
   (ptr-shared-level1-points   uint32)
   (ptr-draw-points            uint32)
   (ptr-interpolated-0         uint32)
   (ptr-shared-interpolated-0  uint32)
   (ptr-interpolated1          uint32)
   (ptr-shared-interpolated1   uint32)
   (ptr-strip-data             uint32)
   (ptr-texture-data           uint32)
   )
  )

;; definition for method 3 of type tfrag-control
(defmethod inspect ((this tfrag-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-control)
  (format #t "~1Tnum-base-points: ~D~%" (-> this num-base-points))
  (format #t "~1Tnum-shared-base-points: ~D~%" (-> this num-shared-base-points))
  (format #t "~1Tnum-level0-points: ~D~%" (-> this num-level0-points))
  (format #t "~1Tnum-shared-level0-points: ~D~%" (-> this num-shared-level0-points))
  (format #t "~1Tnum-level1-points: ~D~%" (-> this num-level1-points))
  (format #t "~1Tnum-shared-level1-points: ~D~%" (-> this num-shared-level1-points))
  (format #t "~1Tptr-vtxdata: ~D~%" (-> this ptr-vtxdata))
  (format #t "~1Tptr-base-points: ~D~%" (-> this ptr-base-points))
  (format #t "~1Tptr-shared-base-points: ~D~%" (-> this ptr-shared-base-points))
  (format #t "~1Tptr-level0-points: ~D~%" (-> this ptr-level0-points))
  (format #t "~1Tptr-shared-level0-points: ~D~%" (-> this ptr-shared-level0-points))
  (format #t "~1Tptr-level1-points: ~D~%" (-> this ptr-level1-points))
  (format #t "~1Tptr-shared-level1-points: ~D~%" (-> this ptr-shared-level1-points))
  (format #t "~1Tptr-draw-points: ~D~%" (-> this ptr-draw-points))
  (format #t "~1Tptr-interpolated-0: ~D~%" (-> this ptr-interpolated-0))
  (format #t "~1Tptr-shared-interpolated-0: ~D~%" (-> this ptr-shared-interpolated-0))
  (format #t "~1Tptr-interpolated1: ~D~%" (-> this ptr-interpolated1))
  (format #t "~1Tptr-shared-interpolated1: ~D~%" (-> this ptr-shared-interpolated1))
  (format #t "~1Tptr-strip-data: ~D~%" (-> this ptr-strip-data))
  (format #t "~1Tptr-texture-data: ~D~%" (-> this ptr-texture-data))
  (label cfg-4)
  this
  )

;; definition of type tfrag-stats
(deftype tfrag-stats (structure)
  ((from          int32)
   (to            int32)
   (cnt           int32)
   (tris          int32)
   (tfaces        int32)
   (tfrags        int32)
   (dtris         int32)
   (base-verts    int32)
   (level0-verts  int32)
   (level1-verts  int32)
   (dma-cnt       int32)
   (dma-dta       int32)
   (dma-tex       int32)
   (strips        int32)
   (drawpoints    int32)
   (vif           int32)
   )
  )

;; definition for method 3 of type tfrag-stats
(defmethod inspect ((this tfrag-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-stats)
  (format #t "~1Tfrom: ~D~%" (-> this from))
  (format #t "~1Tto: ~D~%" (-> this to))
  (format #t "~1Tcnt: ~D~%" (-> this cnt))
  (format #t "~1Ttris: ~D~%" (-> this tris))
  (format #t "~1Ttfaces: ~D~%" (-> this tfaces))
  (format #t "~1Ttfrags: ~D~%" (-> this tfrags))
  (format #t "~1Tdtris: ~D~%" (-> this dtris))
  (format #t "~1Tbase-verts: ~D~%" (-> this base-verts))
  (format #t "~1Tlevel0-verts: ~D~%" (-> this level0-verts))
  (format #t "~1Tlevel1-verts: ~D~%" (-> this level1-verts))
  (format #t "~1Tdma-cnt: ~D~%" (-> this dma-cnt))
  (format #t "~1Tdma-dta: ~D~%" (-> this dma-dta))
  (format #t "~1Tdma-tex: ~D~%" (-> this dma-tex))
  (format #t "~1Tstrips: ~D~%" (-> this strips))
  (format #t "~1Tdrawpoints: ~D~%" (-> this drawpoints))
  (format #t "~1Tvif: ~D~%" (-> this vif))
  (label cfg-4)
  this
  )

;; definition of type tfrag-packet
(deftype tfrag-packet (structure)
  ((tag  uint128  2)
   )
  )

;; definition for method 3 of type tfrag-packet
(defmethod inspect ((this tfrag-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-packet)
  (format #t "~1Ttag[2] @ #x~X~%" (-> this tag))
  (label cfg-4)
  this
  )

;; definition of type tfrag-work
(deftype tfrag-work (structure)
  ((base-tmpl                 dma-packet  :inline)
   (level-0-tmpl              dma-packet  :inline)
   (common-tmpl               dma-packet  :inline)
   (level-1-tmpl              dma-packet  :inline)
   (color-tmpl                dma-packet  :inline)
   (frag-dists                vector      :inline)
   (min-dist                  vector      :inline)
   (color-ptr                 vector4w    :inline)
   (tr-stat-tfrag             tr-stat)
   (tr-stat-tfrag-scissor     tr-stat)
   (vu1-enable-tfrag          int32)
   (vu1-enable-tfrag-scissor  int32)
   (cur-vis-bits              uint32)
   (end-vis-bits              uint32)
   (src-ptr                   uint32)
   (last-call                 uint32)
   (dma-buffer                basic)
   (test-id                   uint32)
   (wait-from-spr             uint32)
   (wait-to-spr               uint32)
   (near-wait-from-spr        uint32)
   (near-wait-to-spr          uint32)
   (max-fragment              uint16)
   (min-fragment              uint16)
   (texture-dists             uint32)
   )
  )

;; definition for method 3 of type tfrag-work
(defmethod inspect ((this tfrag-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-work)
  (format #t "~1Tbase-tmpl: #<dma-packet @ #x~X>~%" (-> this base-tmpl))
  (format #t "~1Tlevel-0-tmpl: #<dma-packet @ #x~X>~%" (-> this level-0-tmpl))
  (format #t "~1Tcommon-tmpl: #<dma-packet @ #x~X>~%" (-> this common-tmpl))
  (format #t "~1Tlevel-1-tmpl: #<dma-packet @ #x~X>~%" (-> this level-1-tmpl))
  (format #t "~1Tcolor-tmpl: #<dma-packet @ #x~X>~%" (-> this color-tmpl))
  (format #t "~1Tfrag-dists: #<vector @ #x~X>~%" (-> this frag-dists))
  (format #t "~1Tmin-dist: #<vector @ #x~X>~%" (-> this min-dist))
  (format #t "~1Tcolor-ptr: #<vector4w @ #x~X>~%" (-> this color-ptr))
  (format #t "~1Ttr-stat-tfrag: #<tr-stat @ #x~X>~%" (-> this tr-stat-tfrag))
  (format #t "~1Ttr-stat-tfrag-scissor: #<tr-stat @ #x~X>~%" (-> this tr-stat-tfrag-scissor))
  (format #t "~1Tvu1-enable-tfrag: ~D~%" (-> this vu1-enable-tfrag))
  (format #t "~1Tvu1-enable-tfrag-scissor: ~D~%" (-> this vu1-enable-tfrag-scissor))
  (format #t "~1Tcur-vis-bits: ~D~%" (-> this cur-vis-bits))
  (format #t "~1Tend-vis-bits: ~D~%" (-> this end-vis-bits))
  (format #t "~1Tsrc-ptr: ~D~%" (-> this src-ptr))
  (format #t "~1Tlast-call: ~D~%" (-> this last-call))
  (format #t "~1Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~1Ttest-id: ~D~%" (-> this test-id))
  (format #t "~1Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~1Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~1Tnear-wait-from-spr: ~D~%" (-> this near-wait-from-spr))
  (format #t "~1Tnear-wait-to-spr: ~D~%" (-> this near-wait-to-spr))
  (format #t "~1Tmax-fragment: ~D~%" (-> this max-fragment))
  (format #t "~1Tmin-fragment: ~D~%" (-> this min-fragment))
  (format #t "~1Ttexture-dists: #x~X~%" (-> this texture-dists))
  (label cfg-4)
  this
  )

;; definition of type tfrag-dma
(deftype tfrag-dma (structure)
  ((banka   tfragment  16 :inline)
   (bankb   tfragment  16 :inline)
   (outa    uint128    128)
   (outb    uint128    128)
   (colors  rgba       2047)
   )
  )

;; definition for method 3 of type tfrag-dma
(defmethod inspect ((this tfrag-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-dma)
  (format #t "~1Tbanka[16] @ #x~X~%" (-> this banka))
  (format #t "~1Tbankb[16] @ #x~X~%" (-> this bankb))
  (format #t "~1Touta[128] @ #x~X~%" (-> this outa))
  (format #t "~1Toutb[128] @ #x~X~%" (-> this outb))
  (format #t "~1Tcolors[2048] @ #x~X~%" (-> this colors))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
