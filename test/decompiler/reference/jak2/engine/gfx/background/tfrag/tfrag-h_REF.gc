;;-*-Lisp-*-
(in-package goal)

;; definition of type tfragment-stats
(deftype tfragment-stats (structure)
  ((num-tris   uint16 4 :offset-assert   0)
   (num-dverts uint16 4 :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type tfragment-stats
(defmethod inspect tfragment-stats ((this tfragment-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfragment-stats)
  (format #t "~1Tnum-tris[4] @ #x~X~%" (-> this num-tris))
  (format #t "~1Tnum-dverts[4] @ #x~X~%" (-> this num-dverts))
  (label cfg-4)
  this
  )

;; definition of type tfragment-debug-data
(deftype tfragment-debug-data (structure)
  ((stats       tfragment-stats      :inline :offset-assert   0)
   (debug-lines (array vector-array)         :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type tfragment-debug-data
(defmethod inspect tfragment-debug-data ((this tfragment-debug-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfragment-debug-data)
  (format #t "~1Tstats: #<tfragment-stats @ #x~X>~%" (-> this stats))
  (format #t "~1Tdebug-lines: ~A~%" (-> this debug-lines))
  (label cfg-4)
  this
  )

;; definition of type generic-tfragment
(deftype generic-tfragment (structure)
  ((dummy int32  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type generic-tfragment
(defmethod inspect generic-tfragment ((this generic-tfragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tfragment)
  (format #t "~1Tdummy: ~D~%" (-> this dummy))
  (label cfg-4)
  this
  )

;; definition of type tfragment
(deftype tfragment (drawable)
  ((color-index         uint16                        :offset   6)
   (debug-data          tfragment-debug-data          :offset   8)
   (color-indices       uint32                        :offset  12)
   (colors              uint32                        :offset  12)
   (dma-chain           uint32                      3 :offset  32)
   (dma-common          uint32                        :offset  32)
   (dma-level-0         uint32                        :offset  32)
   (dma-base            uint32                        :offset  36)
   (dma-level-1         uint32                        :offset  40)
   (dma-qwc             uint8                       4 :offset  44)
   (dma-u32             uint32                        :offset  44)
   (shader              (inline-array adgif-shader)   :offset  48)
   (num-shaders         uint8                         :offset  52)
   (num-base-colors     uint8                         :offset  53)
   (num-level0-colors   uint8                         :offset  54)
   (num-level1-colors   uint8                         :offset  55)
   (color-offset        uint8                         :offset  56)
   (color-count         uint8                         :offset  57)
   (texture-masks-index uint16                        :offset  58)
   (generic             generic-tfragment             :offset  60)
   (generic-u32         uint32                        :offset  60)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

;; definition for method 3 of type tfragment
(defmethod inspect tfragment ((this tfragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~1Tdebug-data: #<tfragment-debug-data @ #x~X>~%" (-> this debug-data))
  (format #t "~1Tcolor-indices: #x~X~%" (-> this color-indices))
  (format #t "~1Tcolors: #x~X~%" (-> this color-indices))
  (format #t "~1Tdma-chain[3] @ #x~X~%" (-> this dma-chain))
  (format #t "~1Tdma-common: #x~X~%" (-> this dma-common))
  (format #t "~1Tdma-level-0: #x~X~%" (-> this dma-common))
  (format #t "~1Tdma-base: #x~X~%" (-> this dma-base))
  (format #t "~1Tdma-level-1: #x~X~%" (-> this dma-level-1))
  (format #t "~1Tdma-qwc[4] @ #x~X~%" (-> this dma-qwc))
  (format #t "~1Tshader: #x~X~%" (-> this shader))
  (format #t "~1Tnum-shaders: ~D~%" (-> this num-shaders))
  (format #t "~1Tnum-base-colors: ~D~%" (-> this num-base-colors))
  (format #t "~1Tnum-level0-colors: ~D~%" (-> this num-level0-colors))
  (format #t "~1Tnum-level1-colors: ~D~%" (-> this num-level1-colors))
  (format #t "~1Tcolor-offset: ~D~%" (-> this color-offset))
  (format #t "~1Tcolor-count: ~D~%" (-> this color-count))
  (format #t "~1Ttexture-masks-index: ~D~%" (-> this texture-masks-index))
  (format #t "~1Tgeneric: #<generic-tfragment @ #x~X>~%" (-> this generic))
  (label cfg-4)
  this
  )

;; definition of type drawable-inline-array-tfrag
(deftype drawable-inline-array-tfrag (drawable-inline-array)
  ((data tfragment 1 :inline :offset-assert  32)
   (pad  uint32              :offset-assert  96)
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  )

;; definition of type drawable-inline-array-tfrag-trans
(deftype drawable-inline-array-tfrag-trans (drawable-inline-array-tfrag)
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2  uint32              :offset-assert 176)
   )
  :method-count-assert 17
  :size-assert         #xb4
  :flag-assert         #x11000000b4
  )

;; definition of type drawable-inline-array-tfrag-water
(deftype drawable-inline-array-tfrag-water (drawable-inline-array-tfrag)
  ((data2 tfragment 1 :inline :offset-assert 112)
   (pad2  uint32              :offset-assert 176)
   )
  :method-count-assert 17
  :size-assert         #xb4
  :flag-assert         #x11000000b4
  )

;; definition of type drawable-tree-tfrag
(deftype drawable-tree-tfrag (drawable-tree)
  ((time-of-day-pal time-of-day-palette            :offset  12)
   (arrays          drawable-inline-array :dynamic :offset  32)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

;; definition of type drawable-tree-tfrag-trans
(deftype drawable-tree-tfrag-trans (drawable-tree-tfrag)
  ()
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

;; definition of type drawable-tree-tfrag-water
(deftype drawable-tree-tfrag-water (drawable-tree-tfrag-trans)
  ()
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

;; definition of type tfrag-dists
(deftype tfrag-dists (structure)
  ((data   uint32 16        :offset-assert   0)
   (vector vector 4 :inline :offset          0)
   (k0s    vector 2 :inline :offset          0)
   (k1s    vector 2 :inline :offset         32)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type tfrag-dists
(defmethod inspect tfrag-dists ((this tfrag-dists))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-dists)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this k0s))
  (format #t "~1Tvector[4] @ #x~X~%" (-> this k0s))
  (format #t "~1Tk0s[2] @ #x~X~%" (-> this k0s))
  (format #t "~1Tk1s[2] @ #x~X~%" (-> this k1s))
  (label cfg-4)
  this
  )

;; definition of type tfrag-data
(deftype tfrag-data (structure)
  ((data        uint32      56         :offset   0)
   (vector      vector      14 :inline :offset   0)
   (fog         vector      :inline    :offset   0)
   (val         vector      :inline    :offset  16)
   (strgif      gs-gif-tag  :inline    :offset  32)
   (fangif      gs-gif-tag  :inline    :offset  48)
   (adgif       gs-gif-tag  :inline    :offset  64)
   (hvdf-offset vector      :inline    :offset  80)
   (hmge-scale  vector      :inline    :offset  96)
   (invh-scale  vector      :inline    :offset 112)
   (ambient     vector      :inline    :offset 128)
   (guard       vector      :inline    :offset 144)
   (dists       tfrag-dists :inline    :offset 160)
   (k0s         uint128     2          :offset 160)
   (k1s         uint128     2          :offset 192)
   )
  :method-count-assert 9
  :size-assert         #xe0
  :flag-assert         #x9000000e0
  )

;; definition for method 3 of type tfrag-data
(defmethod inspect tfrag-data ((this tfrag-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-data)
  (format #t "~1Tdata[56] @ #x~X~%" (-> this fog))
  (format #t "~1Tvector[14] @ #x~X~%" (-> this fog))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~1Tval: #<vector @ #x~X>~%" (-> this val))
  (format #t "~1Tstrgif: #<qword @ #x~X>~%" (-> this strgif))
  (format #t "~1Tfangif: #<qword @ #x~X>~%" (-> this fangif))
  (format #t "~1Tadgif: #<qword @ #x~X>~%" (-> this adgif))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~1Thmge-scale: #<vector @ #x~X>~%" (-> this hmge-scale))
  (format #t "~1Tinvh-scale: #<vector @ #x~X>~%" (-> this invh-scale))
  (format #t "~1Tambient: #<vector @ #x~X>~%" (-> this ambient))
  (format #t "~1Tguard: #<vector @ #x~X>~%" (-> this guard))
  (format #t "~1Tdists: #<tfrag-dists @ #x~X>~%" (-> this dists))
  (format #t "~1Tk0s[2] @ #x~X~%" (-> this dists))
  (format #t "~1Tk1s[2] @ #x~X~%" (-> this dists k1s))
  (label cfg-4)
  this
  )

;; definition of type tfrag-control
(deftype tfrag-control (structure)
  ((num-base-points           uint32  :offset-assert   0)
   (num-shared-base-points    uint32  :offset-assert   4)
   (num-level0-points         uint32  :offset-assert   8)
   (num-shared-level0-points  uint32  :offset-assert  12)
   (num-level1-points         uint32  :offset-assert  16)
   (num-shared-level1-points  uint32  :offset-assert  20)
   (ptr-vtxdata               uint32  :offset-assert  24)
   (ptr-base-points           uint32  :offset-assert  28)
   (ptr-shared-base-points    uint32  :offset-assert  32)
   (ptr-level0-points         uint32  :offset-assert  36)
   (ptr-shared-level0-points  uint32  :offset-assert  40)
   (ptr-level1-points         uint32  :offset-assert  44)
   (ptr-shared-level1-points  uint32  :offset-assert  48)
   (ptr-draw-points           uint32  :offset-assert  52)
   (ptr-interpolated-0        uint32  :offset-assert  56)
   (ptr-shared-interpolated-0 uint32  :offset-assert  60)
   (ptr-interpolated1         uint32  :offset-assert  64)
   (ptr-shared-interpolated1  uint32  :offset-assert  68)
   (ptr-strip-data            uint32  :offset-assert  72)
   (ptr-texture-data          uint32  :offset-assert  76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; definition for method 3 of type tfrag-control
(defmethod inspect tfrag-control ((this tfrag-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-control)
  (format #t "~1Tnum-base-points: ~D~%" (-> this num-base-points))
  (format #t "~1Tnum-shared-base-points: ~D~%" (-> this num-shared-base-points))
  (format #t "~1Tnum-level0-points: ~D~%" (-> this num-level0-points))
  (format #t "~1Tnum-shared-level0-points: ~D~%" (-> this num-shared-level0-points))
  (format #t "~1Tnum-level1-points: ~D~%" (-> this num-level1-points))
  (format #t "~1Tnum-shared-level1-points: ~D~%" (-> this num-shared-level1-points))
  (format #t "~1Tptr-vtxdata: ~D~%" (-> this ptr-vtxdata))
  (format #t "~1Tptr-base-points: ~D~%" (-> this ptr-base-points))
  (format #t "~1Tptr-shared-base-points: ~D~%" (-> this ptr-shared-base-points))
  (format #t "~1Tptr-level0-points: ~D~%" (-> this ptr-level0-points))
  (format #t "~1Tptr-shared-level0-points: ~D~%" (-> this ptr-shared-level0-points))
  (format #t "~1Tptr-level1-points: ~D~%" (-> this ptr-level1-points))
  (format #t "~1Tptr-shared-level1-points: ~D~%" (-> this ptr-shared-level1-points))
  (format #t "~1Tptr-draw-points: ~D~%" (-> this ptr-draw-points))
  (format #t "~1Tptr-interpolated-0: ~D~%" (-> this ptr-interpolated-0))
  (format #t "~1Tptr-shared-interpolated-0: ~D~%" (-> this ptr-shared-interpolated-0))
  (format #t "~1Tptr-interpolated1: ~D~%" (-> this ptr-interpolated1))
  (format #t "~1Tptr-shared-interpolated1: ~D~%" (-> this ptr-shared-interpolated1))
  (format #t "~1Tptr-strip-data: ~D~%" (-> this ptr-strip-data))
  (format #t "~1Tptr-texture-data: ~D~%" (-> this ptr-texture-data))
  (label cfg-4)
  this
  )

;; definition of type tfrag-stats
(deftype tfrag-stats (structure)
  ((from         int32  :offset-assert   0)
   (to           int32  :offset-assert   4)
   (cnt          int32  :offset-assert   8)
   (tris         int32  :offset-assert  12)
   (tfaces       int32  :offset-assert  16)
   (tfrags       int32  :offset-assert  20)
   (dtris        int32  :offset-assert  24)
   (base-verts   int32  :offset-assert  28)
   (level0-verts int32  :offset-assert  32)
   (level1-verts int32  :offset-assert  36)
   (dma-cnt      int32  :offset-assert  40)
   (dma-dta      int32  :offset-assert  44)
   (dma-tex      int32  :offset-assert  48)
   (strips       int32  :offset-assert  52)
   (drawpoints   int32  :offset-assert  56)
   (vif          int32  :offset-assert  60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type tfrag-stats
(defmethod inspect tfrag-stats ((this tfrag-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-stats)
  (format #t "~1Tfrom: ~D~%" (-> this from))
  (format #t "~1Tto: ~D~%" (-> this to))
  (format #t "~1Tcnt: ~D~%" (-> this cnt))
  (format #t "~1Ttris: ~D~%" (-> this tris))
  (format #t "~1Ttfaces: ~D~%" (-> this tfaces))
  (format #t "~1Ttfrags: ~D~%" (-> this tfrags))
  (format #t "~1Tdtris: ~D~%" (-> this dtris))
  (format #t "~1Tbase-verts: ~D~%" (-> this base-verts))
  (format #t "~1Tlevel0-verts: ~D~%" (-> this level0-verts))
  (format #t "~1Tlevel1-verts: ~D~%" (-> this level1-verts))
  (format #t "~1Tdma-cnt: ~D~%" (-> this dma-cnt))
  (format #t "~1Tdma-dta: ~D~%" (-> this dma-dta))
  (format #t "~1Tdma-tex: ~D~%" (-> this dma-tex))
  (format #t "~1Tstrips: ~D~%" (-> this strips))
  (format #t "~1Tdrawpoints: ~D~%" (-> this drawpoints))
  (format #t "~1Tvif: ~D~%" (-> this vif))
  (label cfg-4)
  this
  )

;; definition of type tfrag-packet
(deftype tfrag-packet (structure)
  ((tag uint128 2 :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type tfrag-packet
(defmethod inspect tfrag-packet ((this tfrag-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-packet)
  (format #t "~1Ttag[2] @ #x~X~%" (-> this tag))
  (label cfg-4)
  this
  )

;; definition of type tfrag-work
(deftype tfrag-work (structure)
  ((base-tmpl                dma-packet :inline :offset-assert   0)
   (level-0-tmpl             dma-packet :inline :offset-assert  16)
   (common-tmpl              dma-packet :inline :offset-assert  32)
   (level-1-tmpl             dma-packet :inline :offset-assert  48)
   (color-tmpl               dma-packet :inline :offset-assert  64)
   (frag-dists               vector     :inline :offset-assert  80)
   (min-dist                 vector     :inline :offset-assert  96)
   (color-ptr                vector4w   :inline :offset-assert 112)
   (tr-stat-tfrag            tr-stat            :offset-assert 128)
   (tr-stat-tfrag-scissor    tr-stat            :offset-assert 132)
   (vu1-enable-tfrag         int32              :offset-assert 136)
   (vu1-enable-tfrag-scissor int32              :offset-assert 140)
   (cur-vis-bits             uint32             :offset-assert 144)
   (end-vis-bits             uint32             :offset-assert 148)
   (src-ptr                  uint32             :offset-assert 152)
   (last-call                uint32             :offset-assert 156)
   (dma-buffer               basic              :offset-assert 160)
   (test-id                  uint32             :offset-assert 164)
   (wait-from-spr            uint32             :offset-assert 168)
   (wait-to-spr              uint32             :offset-assert 172)
   (near-wait-from-spr       uint32             :offset-assert 176)
   (near-wait-to-spr         uint32             :offset-assert 180)
   (max-fragment             uint16             :offset-assert 184)
   (min-fragment             uint16             :offset-assert 186)
   (texture-dists            uint32             :offset-assert 188)
   )
  :method-count-assert 9
  :size-assert         #xc0
  :flag-assert         #x9000000c0
  )

;; definition for method 3 of type tfrag-work
(defmethod inspect tfrag-work ((this tfrag-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-work)
  (format #t "~1Tbase-tmpl: #<dma-packet @ #x~X>~%" (-> this base-tmpl))
  (format #t "~1Tlevel-0-tmpl: #<dma-packet @ #x~X>~%" (-> this level-0-tmpl))
  (format #t "~1Tcommon-tmpl: #<dma-packet @ #x~X>~%" (-> this common-tmpl))
  (format #t "~1Tlevel-1-tmpl: #<dma-packet @ #x~X>~%" (-> this level-1-tmpl))
  (format #t "~1Tcolor-tmpl: #<dma-packet @ #x~X>~%" (-> this color-tmpl))
  (format #t "~1Tfrag-dists: #<vector @ #x~X>~%" (-> this frag-dists))
  (format #t "~1Tmin-dist: #<vector @ #x~X>~%" (-> this min-dist))
  (format #t "~1Tcolor-ptr: #<vector4w @ #x~X>~%" (-> this color-ptr))
  (format #t "~1Ttr-stat-tfrag: #<tr-stat @ #x~X>~%" (-> this tr-stat-tfrag))
  (format #t "~1Ttr-stat-tfrag-scissor: #<tr-stat @ #x~X>~%" (-> this tr-stat-tfrag-scissor))
  (format #t "~1Tvu1-enable-tfrag: ~D~%" (-> this vu1-enable-tfrag))
  (format #t "~1Tvu1-enable-tfrag-scissor: ~D~%" (-> this vu1-enable-tfrag-scissor))
  (format #t "~1Tcur-vis-bits: ~D~%" (-> this cur-vis-bits))
  (format #t "~1Tend-vis-bits: ~D~%" (-> this end-vis-bits))
  (format #t "~1Tsrc-ptr: ~D~%" (-> this src-ptr))
  (format #t "~1Tlast-call: ~D~%" (-> this last-call))
  (format #t "~1Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~1Ttest-id: ~D~%" (-> this test-id))
  (format #t "~1Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~1Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~1Tnear-wait-from-spr: ~D~%" (-> this near-wait-from-spr))
  (format #t "~1Tnear-wait-to-spr: ~D~%" (-> this near-wait-to-spr))
  (format #t "~1Tmax-fragment: ~D~%" (-> this max-fragment))
  (format #t "~1Tmin-fragment: ~D~%" (-> this min-fragment))
  (format #t "~1Ttexture-dists: #x~X~%" (-> this texture-dists))
  (label cfg-4)
  this
  )

;; definition of type tfrag-dma
(deftype tfrag-dma (structure)
  ((banka  tfragment 16 :inline :offset-assert   0)
   (bankb  tfragment 16 :inline :offset-assert 1024)
   (outa   uint128   128        :offset-assert 2048)
   (outb   uint128   128        :offset-assert 4096)
   (colors rgba      2047       :offset-assert 6144)
   )
  :method-count-assert 9
  :size-assert         #x37fc
  :flag-assert         #x9000037fc
  )

;; definition for method 3 of type tfrag-dma
(defmethod inspect tfrag-dma ((this tfrag-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tfrag-dma)
  (format #t "~1Tbanka[16] @ #x~X~%" (-> this banka))
  (format #t "~1Tbankb[16] @ #x~X~%" (-> this bankb))
  (format #t "~1Touta[128] @ #x~X~%" (-> this outa))
  (format #t "~1Toutb[128] @ #x~X~%" (-> this outb))
  (format #t "~1Tcolors[2048] @ #x~X~%" (-> this colors))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
