;;-*-Lisp-*-
(in-package goal)

;; definition of type merc-matrix
(deftype merc-matrix (structure)
  ((quad    uint128  8)
   (vector  vector   8 :inline :overlay-at (-> quad 0))
   (tag     uint64             :overlay-at (-> quad 0))
   )
  )

;; definition for method 3 of type merc-matrix
(defmethod inspect ((this merc-matrix))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'merc-matrix)
  (format #t "~1Tquad[8] @ #x~X~%" (-> this vector))
  (format #t "~1Tvector[8] @ #x~X~%" (-> this vector))
  (format #t "~1Ttag: ~D~%" (-> this tag))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-tag
(deftype generic-merc-tag (dma-packet)
  ((next-ptr  uint32  :overlay-at vif1)
   (size      uint32  :overlay-at vif0)
   )
  )

;; definition for method 3 of type generic-merc-tag
;; INFO: Used lq/sq
(defmethod inspect ((this generic-merc-tag))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-tag)
  (format #t "~1Tdma: #x~X~%" (-> this dma))
  (format #t "~1Tvif0: #x~X~%" (-> this vif0))
  (format #t "~1Tvif1: #x~X~%" (-> this vif1))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tnext-ptr: ~D~%" (-> this vif1))
  (format #t "~1Tsize: ~D~%" (-> this vif0))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-ctrl
(deftype generic-merc-ctrl (structure)
  ((tag     generic-merc-tag  :inline)
   (lights  vu-lights         :inline)
   (header  merc-ctrl-header  :inline)
   (effect  merc-effect       :inline)
   )
  )

;; definition for method 3 of type generic-merc-ctrl
(defmethod inspect ((this generic-merc-ctrl))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-ctrl)
  (format #t "~1Ttag: #<generic-merc-tag @ #x~X>~%" (-> this tag))
  (format #t "~1Tlights: #<vu-lights @ #x~X>~%" (-> this lights))
  (format #t "~1Theader: #<merc-ctrl-header @ #x~X>~%" (-> this header))
  (format #t "~1Teffect: #<merc-effect @ #x~X>~%" (-> this effect))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-ctrl-with-sfx
(deftype generic-merc-ctrl-with-sfx (generic-merc-ctrl)
  ((sfx-data  uint128  11)
   )
  )

;; definition for method 3 of type generic-merc-ctrl-with-sfx
(defmethod inspect ((this generic-merc-ctrl-with-sfx))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-ctrl-with-sfx)
  (format #t "~1Ttag: #<generic-merc-tag @ #x~X>~%" (-> this tag))
  (format #t "~1Tlights: #<vu-lights @ #x~X>~%" (-> this lights))
  (format #t "~1Theader: #<merc-ctrl-header @ #x~X>~%" (-> this header))
  (format #t "~1Teffect: #<merc-effect @ #x~X>~%" (-> this effect))
  (format #t "~1Tsfx-data[11] @ #x~X~%" (-> this sfx-data))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-input
(deftype generic-merc-input (structure)
  ((geo-tag      generic-merc-tag            :inline)
   (geo-block    uint8                       1296)
   (byte-header  merc-byte-header            :inline :overlay-at (-> geo-block 0))
   (matrix       merc-matrix                 9 :inline)
   (control      generic-merc-ctrl-with-sfx  :inline)
   (end-tag      generic-merc-tag            :inline)
   (shader       adgif-shader                :inline)
   )
  )

;; definition for method 3 of type generic-merc-input
(defmethod inspect ((this generic-merc-input))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-input)
  (format #t "~1Tgeo-tag: #<generic-merc-tag @ #x~X>~%" (-> this geo-tag))
  (format #t "~1Tgeo-block[1296] @ #x~X~%" (-> this geo-block))
  (format #t "~1Tbyte-header: #<merc-byte-header @ #x~X>~%" (-> this geo-block))
  (format #t "~1Tmatrix[9] @ #x~X~%" (-> this matrix))
  (format #t "~1Tcontrol: #<generic-merc-ctrl-with-sfx @ #x~X>~%" (-> this control))
  (format #t "~1Tend-tag: #<generic-merc-tag @ #x~X>~%" (-> this end-tag))
  (format #t "~1Tshader: #<adgif-shader @ #x~X>~%" (-> this shader))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-output
(deftype generic-merc-output (structure)
  ((info              gsf-info    :inline)
   (header            gsf-header  :inline)
   (index-kick-table  uint16      80)
   (index-table       uint8       160 :overlay-at (-> index-kick-table 0))
   (inverse-table     uint8       256)
   (vertex-table      gsf-vertex  72 :inline)
   )
  )

;; definition for method 3 of type generic-merc-output
(defmethod inspect ((this generic-merc-output))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-output)
  (format #t "~1Tinfo: #<gsf-info @ #x~X>~%" (-> this info))
  (format #t "~1Theader: #<gsf-header @ #x~X>~%" (-> this header))
  (format #t "~1Tindex-kick-table[80] @ #x~X~%" (-> this index-kick-table))
  (format #t "~1Tindex-table[160] @ #x~X~%" (-> this index-kick-table))
  (format #t "~1Tinverse-table[256] @ #x~X~%" (-> this inverse-table))
  (format #t "~1Tvertex-table[72] @ #x~X~%" (-> this vertex-table))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-dcache
(deftype generic-merc-dcache (structure)
  ((output-a     generic-merc-output  :inline)
   (output-b     generic-merc-output  :inline)
   (inv-table-1  uint8                544)
   (inv-table-7  uint8                544)
   (inv-safety   uint8                16)
   (effect-data  uint8                1584)
   )
  )

;; definition for method 3 of type generic-merc-dcache
(defmethod inspect ((this generic-merc-dcache))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-dcache)
  (format #t "~1Toutput-a: #<generic-merc-output @ #x~X>~%" (-> this output-a))
  (format #t "~1Toutput-b: #<generic-merc-output @ #x~X>~%" (-> this output-b))
  (format #t "~1Tinv-table-1[544] @ #x~X~%" (-> this inv-table-1))
  (format #t "~1Tinv-table-7[544] @ #x~X~%" (-> this inv-table-7))
  (format #t "~1Tinv-safety[16] @ #x~X~%" (-> this inv-safety))
  (format #t "~1Teffect-data[1584] @ #x~X~%" (-> this effect-data))
  (label cfg-4)
  this
  )

;; definition of type gm-shadow
(deftype gm-shadow (structure)
  ((perspective                 matrix        :inline)
   (isometric                   matrix        :inline)
   (inv-camera-rot              matrix        :inline)
   (envmap-shader               adgif-shader  :inline)
   (current-chain               uint32)
   (next-chain                  uint32)
   (buf-index                   uint32)
   (fragment-count              uint32)
   (write-limit                 int32)
   (indexed-input-base          generic-merc-input)
   (other-input-base            generic-merc-input)
   (indexed-output-base         generic-merc-output)
   (other-output-base           generic-merc-output)
   (p-input                     uint32)
   (gsf-buf                     generic-merc-dcache)
   (p-fheader                   merc-fp-header)
   (curr-chain                  basic)
   (mercneric-convert           basic)
   (generic-prepare-dma-single  basic)
   (generic-prepare-dma-double  basic)
   (generic-light-proc          basic)
   (generic-envmap-proc         basic)
   (high-speed-reject           basic)
   (dummy-0                     uint32)
   (hsr-xmult                   vector        :inline)
   (hsr-ymult                   vector        :inline)
   (warp-consts                 vector        :inline)
   )
  )

;; definition for method 3 of type gm-shadow
(defmethod inspect ((this gm-shadow))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gm-shadow)
  (format #t "~1Tperspective: #<matrix @ #x~X>~%" (-> this perspective))
  (format #t "~1Tisometric: #<matrix @ #x~X>~%" (-> this isometric))
  (format #t "~1Tinv-camera-rot: #<matrix @ #x~X>~%" (-> this inv-camera-rot))
  (format #t "~1Tenvmap-shader: #<adgif-shader @ #x~X>~%" (-> this envmap-shader))
  (format #t "~1Tcurrent-chain: ~D~%" (-> this current-chain))
  (format #t "~1Tnext-chain: ~D~%" (-> this next-chain))
  (format #t "~1Tbuf-index: ~D~%" (-> this buf-index))
  (format #t "~1Tfragment-count: ~D~%" (-> this fragment-count))
  (format #t "~1Twrite-limit: ~D~%" (-> this write-limit))
  (format #t "~1Tindexed-input-base: #<generic-merc-input @ #x~X>~%" (-> this indexed-input-base))
  (format #t "~1Tother-input-base: #<generic-merc-input @ #x~X>~%" (-> this other-input-base))
  (format #t "~1Tindexed-output-base: #<generic-merc-output @ #x~X>~%" (-> this indexed-output-base))
  (format #t "~1Tother-output-base: #<generic-merc-output @ #x~X>~%" (-> this other-output-base))
  (format #t "~1Tp-input: #x~X~%" (-> this p-input))
  (format #t "~1Tgsf-buf: #<generic-merc-dcache @ #x~X>~%" (-> this gsf-buf))
  (format #t "~1Tp-fheader: #<merc-fp-header @ #x~X>~%" (-> this p-fheader))
  (format #t "~1Tcurr-chain: ~A~%" (-> this curr-chain))
  (format #t "~1Tmercneric-convert: ~A~%" (-> this mercneric-convert))
  (format #t "~1Tgeneric-prepare-dma-single: ~A~%" (-> this generic-prepare-dma-single))
  (format #t "~1Tgeneric-prepare-dma-double: ~A~%" (-> this generic-prepare-dma-double))
  (format #t "~1Tgeneric-light-proc: ~A~%" (-> this generic-light-proc))
  (format #t "~1Tgeneric-envmap-proc: ~A~%" (-> this generic-envmap-proc))
  (format #t "~1Thigh-speed-reject: ~A~%" (-> this high-speed-reject))
  (format #t "~1Tdummy-0: ~D~%" (-> this dummy-0))
  (format #t "~1Thsr-xmult: #<vector @ #x~X>~%" (-> this hsr-xmult))
  (format #t "~1Thsr-ymult: #<vector @ #x~X>~%" (-> this hsr-ymult))
  (format #t "~1Twarp-consts: #<vector @ #x~X>~%" (-> this warp-consts))
  (label cfg-4)
  this
  )

;; definition of type generic-merc-work
(deftype generic-merc-work (structure)
  ((input-a  generic-merc-input          :inline)
   (input-b  generic-merc-input          :inline)
   (ctrl     generic-merc-ctrl-with-sfx  :inline)
   (shadow   gm-shadow                   :inline)
   (stack    uint128                     16)
   )
  )

;; definition for method 3 of type generic-merc-work
(defmethod inspect ((this generic-merc-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-merc-work)
  (format #t "~1Tinput-a: #<generic-merc-input @ #x~X>~%" (-> this input-a))
  (format #t "~1Tinput-b: #<generic-merc-input @ #x~X>~%" (-> this input-b))
  (format #t "~1Tctrl: #<generic-merc-ctrl-with-sfx @ #x~X>~%" (-> this ctrl))
  (format #t "~1Tshadow: #<gm-shadow @ #x~X>~%" (-> this shadow))
  (format #t "~1Tstack[16] @ #x~X~%" (-> this stack))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
