;;-*-Lisp-*-
(in-package goal)

;; definition of type lightning-spec
(deftype lightning-spec (basic)
  ((name              string                :offset-assert   4)
   (flags             lightning-spec-flags  :offset-assert   8)
   (rand-func         uint8                 :offset-assert  10)
   (adjust-distance   uint8                 :offset-assert  11)
   (start-color       rgba                  :offset-assert  12)
   (end-color         rgba                  :offset-assert  16)
   (fade-to-color     rgba                  :offset-assert  20)
   (fade-start-factor float                 :offset-assert  24)
   (fade-time         float                 :offset-assert  28)
   (texture           texture-id            :offset-assert  32)
   (reduction         float                 :offset-assert  36)
   (num-points        int32                 :offset-assert  40)
   (box-size          float                 :offset-assert  44)
   (merge-factor      float                 :offset-assert  48)
   (merge-count       int32                 :offset-assert  52)
   (radius            float                 :offset-assert  56)
   (duration          float                 :offset-assert  60)
   (duration-rand     float                 :offset-assert  64)
   (sound             basic                 :offset-assert  68)
   (delay             float                 :offset-assert  72)
   (delay-rand        float                 :offset-assert  76)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; definition for method 3 of type lightning-spec
(defmethod inspect lightning-spec ((this lightning-spec))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Trand-func: ~D~%" (-> this rand-func))
  (format #t "~1Tadjust-distance: ~D~%" (-> this adjust-distance))
  (format #t "~1Tstart-color: ~D~%" (-> this start-color))
  (format #t "~1Tend-color: ~D~%" (-> this end-color))
  (format #t "~1Tfade-to-color: ~D~%" (-> this fade-to-color))
  (format #t "~1Tfade-start-factor: ~f~%" (-> this fade-start-factor))
  (format #t "~1Tfade-time: ~f~%" (-> this fade-time))
  (format #t "~1Ttexture: ~D~%" (-> this texture))
  (format #t "~1Treduction: ~f~%" (-> this reduction))
  (format #t "~1Tnum-points: ~D~%" (-> this num-points))
  (format #t "~1Tbox-size: ~f~%" (-> this box-size))
  (format #t "~1Tmerge-factor: ~f~%" (-> this merge-factor))
  (format #t "~1Tmerge-count: ~D~%" (-> this merge-count))
  (format #t "~1Tradius: ~f~%" (-> this radius))
  (format #t "~1Tduration: ~f~%" (-> this duration))
  (format #t "~1Tduration-rand: ~f~%" (-> this duration-rand))
  (format #t "~1Tsound: ~A~%" (-> this sound))
  (format #t "~1Tdelay: ~f~%" (-> this delay))
  (format #t "~1Tdelay-rand: ~f~%" (-> this delay-rand))
  (label cfg-4)
  this
  )

;; definition for function lookup-lightning-spec-by-name
(defun lookup-lightning-spec-by-name ((arg0 string))
  (let* ((s5-0 *lightning-spec-id-table*)
         (s4-0 (-> s5-0 length))
         )
    (dotimes (s3-0 s4-0)
      (let ((s2-0 (-> s5-0 s3-0)))
        (if (and (nonzero? s2-0) (string= arg0 (-> s2-0 name)))
            (return s2-0)
            )
        )
      )
    )
  (the-as lightning-spec #f)
  )

;; definition of type lightning-state
(deftype lightning-state (structure)
  ((mode           lightning-mode         :offset-assert   0)
   (counter        float                  :offset-assert   4)
   (points-to-draw int32                  :offset-assert   8)
   (box-size       float                  :offset-assert  12)
   (gcf-control    gcf-control    :inline :offset-assert  16)
   (line           vector-array           :offset-assert 128)
   (meet           vector-array           :offset-assert 132)
   (path           vector-array           :offset-assert 136)
   (start-color    rgba                   :offset-assert 140)
   (end-color      rgba                   :offset-assert 144)
   )
  :method-count-assert 9
  :size-assert         #x94
  :flag-assert         #x900000094
  )

;; definition for method 3 of type lightning-state
(defmethod inspect lightning-state ((this lightning-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'lightning-state)
  (format #t "~1Tmode: ~D~%" (-> this mode))
  (format #t "~1Tcounter: ~f~%" (-> this counter))
  (format #t "~1Tpoints-to-draw: ~D~%" (-> this points-to-draw))
  (format #t "~1Tbox-size: ~f~%" (-> this box-size))
  (format #t "~1Tgcf-control: #<gcf-control @ #x~X>~%" (-> this gcf-control))
  (format #t "~1Tline: ~A~%" (-> this line))
  (format #t "~1Tmeet: ~A~%" (-> this meet))
  (format #t "~1Tpath: ~A~%" (-> this path))
  (format #t "~1Tstart-color: ~D~%" (-> this start-color))
  (format #t "~1Tend-color: ~D~%" (-> this end-color))
  (label cfg-4)
  this
  )

;; definition of type lightning-control
(deftype lightning-control (basic)
  ((spec    lightning-spec            :offset-assert   4)
   (process (pointer process)         :offset-assert   8)
   (state   lightning-state   :inline :offset-assert  16)
   )
  :method-count-assert 14
  :size-assert         #xa4
  :flag-assert         #xe000000a4
  (:methods
    (new (symbol type lightning-spec process float) _type_ 0)
    (change-mode (_type_ lightning-mode) lightning-mode 9)
    (get-mode (_type_) lightning-mode 10)
    (set-point! (_type_ int vector) none 11)
    (set-first-meet-point (_type_ vector) none 12)
    (set-last-meet-point (_type_ vector) none 13)
    )
  )

;; definition for method 3 of type lightning-control
(defmethod inspect lightning-control ((this lightning-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tspec: ~A~%" (-> this spec))
  (format #t "~1Tprocess: #x~X~%" (-> this process))
  (format #t "~1Tstate: #<lightning-state @ #x~X>~%" (-> this state))
  (label cfg-4)
  this
  )

;; definition for method 9 of type lightning-control
(defmethod change-mode lightning-control ((this lightning-control) (arg0 lightning-mode))
  (let ((v1-1 (!= arg0 (-> this state mode))))
    (case arg0
      (((lightning-mode lm3))
       (if v1-1
           (set! (-> this state counter) 0.0)
           )
       )
      (((lightning-mode lm1))
       (set! (-> this state start-color) (-> this spec start-color))
       (set! (-> this state end-color) (-> this spec end-color))
       )
      )
    )
  (set! (-> this state mode) arg0)
  arg0
  )

;; definition for method 10 of type lightning-control
(defmethod get-mode lightning-control ((this lightning-control))
  (-> this state mode)
  )

;; definition for method 11 of type lightning-control
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod set-point! lightning-control ((this lightning-control) (arg0 int) (arg1 vector))
  (let ((v1-0 (-> this state)))
    (when (and (-> v1-0 path) (>= arg0 0) (< arg0 (-> v1-0 path length)))
      (set! (-> v1-0 path data arg0 quad) (-> arg1 quad))
      (when (and (< (+ (-> v1-0 points-to-draw) -1) arg0) (case (-> v1-0 mode)
                                                            (((lightning-mode lm2) (lightning-mode lm3))
                                                             #t
                                                             )
                                                            (else
                                                              #f
                                                              )
                                                            )
                 )
        (set! (-> v1-0 line data arg0 quad) (-> arg1 quad))
        (set! (-> v1-0 meet data arg0 quad) (-> arg1 quad))
        )
      )
    )
  0
  (none)
  )

;; definition for method 12 of type lightning-control
;; INFO: Used lq/sq
;; WARN: Return type mismatch (inline-array vector) vs none.
(defmethod set-first-meet-point lightning-control ((this lightning-control) (arg0 vector))
  (set! (-> this state meet data 0 quad) (-> arg0 quad))
  (none)
  )

;; definition for method 13 of type lightning-control
;; INFO: Used lq/sq
;; WARN: Return type mismatch vector vs none.
(defmethod set-last-meet-point lightning-control ((this lightning-control) (arg0 vector))
  (set! (-> this state meet data (+ (-> this state points-to-draw) -1) quad) (-> arg0 quad))
  (none)
  )

;; definition for method 7 of type lightning-control
(defmethod relocate lightning-control ((this lightning-control) (arg0 int))
  (&+! (-> this state line) arg0)
  (&+! (-> this state meet) arg0)
  (if (-> this state path)
      (&+! (-> this state path) arg0)
      )
  (let ((v1-8 (-> this spec)))
    (if (and (>= (the-as int v1-8) (-> *kernel-context* relocating-min))
             (< (the-as int v1-8) (-> *kernel-context* relocating-max))
             )
        (&+! (-> this spec) arg0)
        )
    )
  this
  )

;; definition for method 0 of type lightning-control
;; WARN: Return type mismatch object vs lightning-control.
(defmethod new lightning-control ((allocation symbol) (type-to-make type) (arg0 lightning-spec) (arg1 process) (arg2 float))
  (with-pp
    (let ((this (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
      (when (zero? this)
        (go process-drawable-art-error "memory")
        (set! this (the-as lightning-control 0))
        (goto cfg-14)
        )
      (let ((s3-0 (-> arg0 num-points)))
        (let ((f0-0 (-> arg0 box-size)))
          (when (logtest? (-> arg0 flags) (lightning-spec-flags size-from-adjust-dist))
            (let ((f1-1 (fmax 1.0 (fmin 5.0 (/ arg2 (* 4096.0 (the float (-> arg0 adjust-distance))))))))
              (set! s3-0 (* s3-0 (the int f1-1)))
              (set! f0-0 (* f0-0 f1-1))
              )
            )
          (set! (-> this state box-size) f0-0)
          )
        (set! (-> this process) (process->ppointer arg1))
        (set! (-> this state mode) (lightning-mode lm1))
        (set! (-> this state line) ((method-of-type vector-array new) allocation vector-array s3-0))
        (set! (-> this state meet) ((method-of-type vector-array new) allocation vector-array s3-0))
        (let ((v1-18 (-> arg0 rand-func)))
          (set! (-> this state path) (if (or (= v1-18 2) (= v1-18 3))
                                         ((method-of-type vector-array new) allocation vector-array s3-0)
                                         (the-as vector-array #f)
                                         )
                )
          )
        (set! (-> this state counter) 0.0)
        (set! (-> this state points-to-draw) s3-0)
        )
      (set! (-> this spec) arg0)
      (set! (-> this state start-color) (-> arg0 start-color))
      (set! (-> this state end-color) (-> arg0 end-color))
      (add-connection *lightning-engine* pp nothing this #f #f)
      (label cfg-14)
      (the-as lightning-control this)
      )
    )
  )

;; definition of type lightning-probe-vars
(deftype lightning-probe-vars (basic)
  ((src-joint-index uint32                          :offset-assert   4)
   (next-spawn-time time-frame                      :offset-assert   8)
   (last-valid-time time-frame                      :offset-assert  16)
   (point           vector                2 :inline :offset-assert  32)
   (start-pos       vector                :inline   :offset         32)
   (end-pos         vector                :inline   :offset         48)
   (probe-dirs      (inline-array vector)           :offset-assert  64)
   )
  :method-count-assert 9
  :size-assert         #x44
  :flag-assert         #x900000044
  )

;; definition for method 3 of type lightning-probe-vars
(defmethod inspect lightning-probe-vars ((this lightning-probe-vars))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tsrc-joint-index: ~D~%" (-> this src-joint-index))
  (format #t "~1Tnext-spawn-time: ~D~%" (-> this next-spawn-time))
  (format #t "~1Tlast-valid-time: ~D~%" (-> this last-valid-time))
  (format #t "~1Tpoint[2] @ #x~X~%" (-> this point))
  (format #t "~1Tstart-pos: #<vector @ #x~X>~%" (-> this point))
  (format #t "~1Tend-pos: #<vector @ #x~X>~%" (-> this end-pos))
  (format #t "~1Tprobe-dirs: #x~X~%" (-> this probe-dirs))
  (label cfg-4)
  this
  )

;; definition for symbol *lightning-probe-vars*, type lightning-probe-vars
(define *lightning-probe-vars*
  (new 'static 'lightning-probe-vars :probe-dirs (new 'static 'inline-array vector 6
                                                   (new 'static 'vector :z 1.0 :w 1.0)
                                                   (new 'static 'vector :x 1.0 :w 1.0)
                                                   (new 'static 'vector :z -1.0 :w 1.0)
                                                   (new 'static 'vector :x -1.0 :w 1.0)
                                                   (new 'static 'vector :y 1.0 :w 1.0)
                                                   (new 'static 'vector :y -1.0 :w 1.0)
                                                   )
                                     )
  )
