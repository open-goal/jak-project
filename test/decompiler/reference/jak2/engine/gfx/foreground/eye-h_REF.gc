;;-*-Lisp-*-
(in-package goal)

;; definition of type eye
(deftype eye (structure)
  ((data         vector  2 :inline)
   (x            float   :overlay-at (-> data 0 data 0))
   (y            float   :overlay-at (-> data 0 data 1))
   (lid          float   :overlay-at (-> data 0 data 2))
   (iris-scale   float   :offset  16)
   (pupil-scale  float   :offset  20)
   (lid-scale    float   :offset  24)
   )
  )

;; definition for method 3 of type eye
(defmethod inspect ((this eye))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'eye)
  (format #t "~1Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tlid: ~f~%" (-> this lid))
  (format #t "~1Tiris-scale: ~f~%" (-> this iris-scale))
  (format #t "~1Tpupil-scale: ~f~%" (-> this pupil-scale))
  (format #t "~1Tlid-scale: ~f~%" (-> this lid-scale))
  (label cfg-4)
  this
  )

;; definition of type eye-control
(deftype eye-control (structure)
  ((process         handle)
   (draw-flag       symbol)
   (different-eyes  symbol)
   (random-time     uint16)
   (bucket          uint16)
   (blink           float)
   (shaders         (inline-array adgif-shader))
   (left            eye  :inline)
   (right           eye  :inline)
   )
  )

;; definition for method 3 of type eye-control
(defmethod inspect ((this eye-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'eye-control)
  (format #t "~1Tprocess: ~D~%" (-> this process))
  (format #t "~1Tdraw-flag: ~A~%" (-> this draw-flag))
  (format #t "~1Tdifferent-eyes: ~A~%" (-> this different-eyes))
  (format #t "~1Trandom-time: ~D~%" (-> this random-time))
  (format #t "~1Tbucket: ~D~%" (-> this bucket))
  (format #t "~1Tblink: ~f~%" (-> this blink))
  (format #t "~1Tshaders: #x~X~%" (-> this shaders))
  (format #t "~1Tleft: #<eye @ #x~X>~%" (-> this left))
  (format #t "~1Tright: #<eye @ #x~X>~%" (-> this right))
  (label cfg-4)
  this
  )

;; definition of type eye-control-array
(deftype eye-control-array (basic)
  ((data  eye-control  16 :inline)
   )
  )

;; definition for method 3 of type eye-control-array
(defmethod inspect ((this eye-control-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdata[16] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type eye-control-arrays
(deftype eye-control-arrays (basic)
  ((data  eye-control-array  6 :inline)
   (pad   uint32)
   )
  )

;; definition for method 3 of type eye-control-arrays
(defmethod inspect ((this eye-control-arrays))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdata[6] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type eye-work
(deftype eye-work (structure)
  ((sprite-tmpl   dma-gif-packet  :inline)
   (sprite-tmpl2  dma-gif-packet  :inline)
   (adgif-tmpl    dma-gif-packet  :inline)
   (blink-table   float           10)
   )
  )

;; definition for method 3 of type eye-work
(defmethod inspect ((this eye-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'eye-work)
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl))
  (format #t "~1Tsprite-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl2))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tblink-table[10] @ #x~X~%" (-> this blink-table))
  (label cfg-4)
  this
  )

;; definition for symbol *eye-control-arrays*, type eye-control-arrays
(define *eye-control-arrays*
  (new 'static 'eye-control-arrays :data (new 'static 'inline-array eye-control-array 6
                                           (new 'static 'eye-control-array)
                                           (new 'static 'eye-control-array)
                                           (new 'static 'eye-control-array)
                                           (new 'static 'eye-control-array)
                                           (new 'static 'eye-control-array)
                                           (new 'static 'eye-control-array)
                                           )
                                   )
  )

;; failed to figure out what this is:
(dotimes (v1-6 6)
  (dotimes (a0-10 16)
    (let ((a1-14 (the-as eye-control (+ (+ (* 96 a0-10) 28 (* 1552 v1-6)) (the-as int *eye-control-arrays*)))))
      (set! (-> a1-14 process) (the-as handle #f))
      (set! (-> a1-14 draw-flag) #t)
      (set! (-> a1-14 shaders) (the-as (inline-array adgif-shader) #f))
      (set! (-> a1-14 random-time) (the-as uint 60))
      (set! (-> a1-14 blink) 0.0)
      )
    )
  )

;; failed to figure out what this is:
0
