;;-*-Lisp-*-
(in-package goal)

;; definition of type bone-calculation-list
(deftype bone-calculation-list (structure)
  ((first  bone-calculation)
   (next   bone-calculation)
   )
  )

;; definition for method 3 of type bone-calculation-list
(defmethod inspect ((this bone-calculation-list))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bone-calculation-list)
  (format #t "~1Tfirst: #<bone-calculation @ #x~X>~%" (-> this first))
  (format #t "~1Tnext: #<bone-calculation @ #x~X>~%" (-> this next))
  (label cfg-4)
  this
  )

;; definition for symbol *bone-calculation-list*, type bone-calculation-list
(define *bone-calculation-list* (new 'global 'bone-calculation-list))

;; definition for function bone-list-init
;; WARN: Return type mismatch int vs none.
(defun bone-list-init ()
  (let ((v1-0 *bone-calculation-list*))
    (set! (-> v1-0 first) (the-as bone-calculation 0))
    (set! (-> v1-0 next) (the-as bone-calculation 0))
    )
  0
  0
  (none)
  )

;; failed to figure out what this is:
(bone-list-init)

;; definition for symbol bones-vu0-block, type vu-function
(define bones-vu0-block (new 'static 'vu-function :length 54 :qlength 27))

;; definition for function bones-set-sqwc
;; WARN: Return type mismatch int vs none.
(defun bones-set-sqwc ()
  (set! (-> (the-as dma-bank-control #x1000e000) sqwc) (new 'static 'dma-sqwc :sqwc #x1 :tqwc #x4))
  (none)
  )

;; definition for function bones-reset-sqwc
;; WARN: Return type mismatch int vs none.
(defun bones-reset-sqwc ()
  (set! (-> (the-as dma-bank-control #x1000e000) sqwc) (new 'static 'dma-sqwc :sqwc #x1 :tqwc #x1))
  (none)
  )

;; definition for function bones-init
;; WARN: Return type mismatch int vs none.
(defun bones-init ((arg0 dma-buffer))
  (let ((v1-1 (-> (the-as bone-memory #x70000000) work)))
    (+ #x70000000 0)
    (set! (-> v1-1 layout joint 0) (the-as (inline-array matrix) (-> (the-as bone-memory #x70000000) buffer)))
    (set! (-> v1-1 layout joint 1) (the-as (inline-array matrix) (-> (the-as bone-memory #x70000000) buffer 1)))
    (set! (-> v1-1 layout bone 0) (-> (the-as bone-memory #x70000000) buffer 0 bone))
    (set! (-> v1-1 layout bone 1) (-> (the-as bone-memory #x70000000) buffer 1 bone))
    (set! (-> v1-1 layout output 0) (-> (the-as bone-memory #x70000000) buffer 0 output))
    (set! (-> v1-1 layout output 1) (-> (the-as bone-memory #x70000000) buffer 1 output))
    )
  (let ((gp-0 *vu0-dma-list*))
    (let ((v1-2 gp-0))
      (set! (-> v1-2 base) (-> v1-2 data))
      (set! (-> v1-2 end) (&-> v1-2 data-buffer (-> v1-2 allocated-length)))
      )
    (dma-buffer-add-vu-function gp-0 bones-vu0-block 0)
    (let* ((v1-3 gp-0)
           (a0-20 (the-as object (-> v1-3 base)))
           )
      (set! (-> (the-as dma-packet a0-20) dma) (new 'static 'dma-tag :id (dma-tag-id end)))
      (set! (-> (the-as (pointer uint64) a0-20) 1) (the-as uint 0))
      (set! (-> v1-3 base) (&+ (the-as pointer a0-20) 16))
      )
    (.sync.l)
    (dma-buffer-send-chain (the-as dma-bank-source #x10008000) gp-0)
    )
  0
  (none)
  )

;; definition for function bones-mtx-calc
;; INFO: function output is handled by mips2c
(def-mips2c bones-mtx-calc (function (inline-array pris-mtx) (inline-array joint) (inline-array bone) uint object none))

;; definition for function bones-mtx-calc-execute
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; ERROR: Function may read a register that is not set: t0
;; ERROR: Unsupported inline assembly instruction kind - [addiu a0, a0, 128]
;; ERROR: Unsupported inline assembly instruction kind - [addiu a1, a1, 128]
(defun bones-mtx-calc-execute ()
  (local-vars (v1-30 float) (a0-29 int) (a0-31 int) (t0-0 none))
  (rlet ((vf1 :class vf)
         (vf25 :class vf)
         (vf26 :class vf)
         (vf27 :class vf)
         (vf28 :class vf)
         (vf29 :class vf)
         (vf30 :class vf)
         (vf31 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         )
    (when *debug-segment*
      (let ((gp-0 (-> *display* frames (-> *display* on-screen) profile-array data 0))
            (v1-7 'bones)
            (s5-0 *profile-bones-color*)
            )
        (when (and *dproc* *debug-segment*)
          (let ((s4-0 (-> gp-0 data (-> gp-0 count))))
            (let ((s3-0 (-> gp-0 base-time)))
              (set! (-> s4-0 name) v1-7)
              (set! (-> s4-0 start-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s3-0))))
              )
            (set! (-> s4-0 depth) (the-as uint (-> gp-0 depth)))
            (set! (-> s4-0 color) s5-0)
            (set! (-> gp-0 segment (-> gp-0 depth)) s4-0)
            )
          (+! (-> gp-0 count) 1)
          (+! (-> gp-0 depth) 1)
          (set! (-> gp-0 max-depth) (max (-> gp-0 max-depth) (-> gp-0 depth)))
          )
        )
      0
      )
    (let* ((v1-21 (-> *perf-stats* data 48))
           (a0-8 (-> v1-21 ctrl))
           )
      (+! (-> v1-21 count) 1)
      (b! (zero? a0-8) cfg-9 :delay (nop!))
      (.mtc0 Perf 0)
      (.sync.l)
      (.sync.p)
      (.mtpc pcr0 0)
      (.mtpc pcr1 0)
      (.sync.l)
      (.sync.p)
      (.mtc0 Perf a0-8)
      )
    (.sync.l)
    (.sync.p)
    (label cfg-9)
    0
    (let ((v1-24 (-> (the-as bone-memory #x70000000) work)))
      (+ #x70000000 0)
      (set! (-> v1-24 layout joint 0) (the-as (inline-array matrix) (-> (the-as bone-memory #x70000000) buffer)))
      (set! (-> v1-24 layout joint 1) (the-as (inline-array matrix) (-> (the-as bone-memory #x70000000) buffer 1)))
      (set! (-> v1-24 layout bone 0) (-> (the-as bone-memory #x70000000) buffer 0 bone))
      (set! (-> v1-24 layout bone 1) (-> (the-as bone-memory #x70000000) buffer 1 bone))
      (set! (-> v1-24 layout output 0) (-> (the-as bone-memory #x70000000) buffer 0 output))
      (set! (-> v1-24 layout output 1) (-> (the-as bone-memory #x70000000) buffer 1 output))
      )
    (set! (-> (the-as dma-bank-control #x1000e000) sqwc) (new 'static 'dma-sqwc :sqwc #x1 :tqwc #x4))
    (let* ((v1-26 *bone-calculation-list*)
           (gp-1 *identity-matrix*)
           (s5-1 (-> *math-camera* camera-rot))
           (s4-1 (-> v1-26 first))
           )
      (while (nonzero? s4-1)
        (let ((v1-29 (if (logtest? (-> s4-1 flags) (bone-calc-flags no-cam-rot))
                         gp-1
                         s5-1
                         )
                     )
              )
          (.lvf vf28 (&-> v1-29 quad 0))
          (.lvf vf29 (&-> v1-29 quad 1))
          (.lvf vf30 (&-> v1-29 quad 2))
          (.lvf vf31 (&-> v1-29 trans quad))
          (.lvf vf25 (&-> v1-29 quad 0))
          (.lvf vf26 (&-> v1-29 quad 1))
          (.lvf vf27 (&-> v1-29 quad 2))
          )
        (.mov v1-30 vf27)
        (bones-mtx-calc (-> s4-1 matrix-area) (-> s4-1 joints) (-> s4-1 bones) (-> s4-1 num-bones) t0-0)
        (when (logtest? (-> s4-1 flags) (bone-calc-flags write-ripple-data))
          (let* ((a2-1 s4-1)
                 (v1-34 (-> a2-1 num-bones))
                 (a0-26 (the-as pris-mtx (-> a2-1 matrix-area)))
                 (a1-11 (the-as pris-mtx (-> a2-1 ripple-area)))
                 )
            (.lvf vf1 (&-> a2-1 ripple-vec quad))
            (label cfg-15)
            (.lvf vf5 (&-> a0-26 t-mtx quad 1))
            (.lvf vf6 (&-> a0-26 t-mtx trans quad))
            (.lvf vf7 (&-> a0-26 n-mtx quad 0))
            (.lvf vf8 (&-> a0-26 n-mtx quad 2))
            (.mul.x.vf vf4 vf5 vf1)
            (.mul.y.vf vf5 vf5 vf1)
            (let ((a3-1 (-> a0-26 t-mtx quad 0)))
              (.mul.z.vf vf7 vf7 vf1)
              (let ((a2-2 (-> a0-26 t-mtx quad 2)))
                (.mul.z.vf vf8 vf8 vf1)
                (set! (-> a1-11 t-mtx quad 0) a3-1)
                (let ((a3-2 (-> a0-26 n-mtx quad 1)))
                  (.sub.vf vf6 vf6 vf4)
                  (set! (-> a1-11 t-mtx quad 2) a2-2)
                  (.svf (&-> a1-11 t-mtx quad 1) vf5)
                  (set! (-> a1-11 n-mtx quad 1) a3-2)
                  )
                )
              )
            (+! v1-34 -1)
            (.svf (&-> a1-11 n-mtx quad 0) vf7)
            (.addiu a0-26 a0-26 128)
            (.svf (&-> a1-11 t-mtx trans quad) vf6)
            (.addiu a1-11 a1-11 128)
            (b! (nonzero? v1-34) cfg-15 :delay (s.vf! (+ a1-11 -32) vf8))
            )
          0
          )
        (set! s4-1 (-> s4-1 next))
        )
      )
    (set! (-> (the-as dma-bank-control #x1000e000) sqwc) (new 'static 'dma-sqwc :sqwc #x1 :tqwc #x1))
    (bone-list-init)
    (let ((v1-39 (-> *perf-stats* data 48)))
      (b! (zero? (-> v1-39 ctrl)) cfg-21 :delay (nop!))
      (.mtc0 Perf 0)
      (.sync.l)
      (.sync.p)
      (.mfpc a0-29 pcr0)
      (+! (-> v1-39 accum0) a0-29)
      (.mfpc a0-31 pcr1)
      (+! (-> v1-39 accum1) a0-31)
      )
    (label cfg-21)
    0
    (when *debug-segment*
      (let ((gp-2 (-> *display* frames (-> *display* on-screen) profile-array data 0)))
        (when (and *dproc* *debug-segment*)
          (let* ((v1-52 (+ (-> gp-2 depth) -1))
                 (s5-2 (-> gp-2 segment v1-52))
                 (s4-2 (-> gp-2 base-time))
                 )
            (when (>= v1-52 0)
              (set! (-> s5-2 end-time) (the-as int (- (timer-count (the-as timer-bank #x10000800)) (the-as uint s4-2))))
              (+! (-> gp-2 depth) -1)
              )
            )
          )
        )
      0
      )
    0
    (none)
    )
  )

;; definition (debug) for function dump-qword
;; WARN: Return type mismatch int vs none.
(defun-debug dump-qword ((arg0 qword))
  (let ((v1-0 arg0))
    (format
      0
      "~8,'0X: ~8,'0X ~8,'0X ~8,'0X ~8,'0X~%"
      v1-0
      (-> v1-0 data 0)
      (-> v1-0 data 1)
      (-> v1-0 data 2)
      (-> v1-0 data 3)
      )
    )
  0
  (none)
  )

;; definition (debug) for function dump-mem
;; WARN: Return type mismatch int vs none.
(defun-debug dump-mem ((arg0 pointer) (arg1 int))
  (dotimes (s4-0 arg1)
    (format
      0
      "~8,'0X: ~8,'0X ~8,'0X ~8,'0X ~8,'0X"
      (&+ arg0 (* (* s4-0 4) 4))
      (-> (the-as (pointer uint32) (&+ arg0 (* (* s4-0 4) 4))))
      (-> (the-as (pointer uint32) (&+ arg0 (* (+ (* s4-0 4) 1) 4))))
      (-> (the-as (pointer uint32) (&+ arg0 (* (+ (* s4-0 4) 2) 4))))
      (-> (the-as (pointer uint32) (&+ arg0 (* (+ (* s4-0 4) 3) 4))))
      )
    (format
      0
      "      ~F ~F ~F ~F ~%"
      (-> (the-as (pointer uint32) (&+ arg0 (* (* s4-0 4) 4))))
      (-> (the-as (pointer uint32) (&+ arg0 (* (+ (* s4-0 4) 1) 4))))
      (-> (the-as (pointer uint32) (&+ arg0 (* (+ (* s4-0 4) 2) 4))))
      (-> (the-as (pointer uint32) (&+ arg0 (* (+ (* s4-0 4) 3) 4))))
      )
    )
  0
  (none)
  )

;; definition (debug) for function bones-debug
;; WARN: Return type mismatch int vs none.
(defun-debug bones-debug ()
  0
  (none)
  )

;; definition (debug) for function dump-bone-mem
;; WARN: Return type mismatch int vs none.
(defun-debug dump-bone-mem ()
  (format 0 "==  joints 0 ===========~%")
  (dump-mem (the-as pointer (+ 80 #x70000000)) 64)
  (format 0 "==  bones 0 ============~%")
  (dump-mem (the-as pointer (+ 1104 #x70000000)) 80)
  (format 0 "==  output 0 ===========~%")
  (dump-mem (the-as pointer (+ 2384 #x70000000)) 128)
  (format 0 "~%~%~%")
  (format 0 "==  joints 1 ===========~%")
  (dump-mem (the-as pointer (+ 4432 #x70000000)) 64)
  (format 0 "==  bones 1 ============~%")
  (dump-mem (the-as pointer (+ 5456 #x70000000)) 80)
  (format 0 "==  output 1 ===========~%")
  (dump-mem (the-as pointer (+ 6736 #x70000000)) 128)
  (format 0 "========================~%~%")
  0
  (none)
  )
