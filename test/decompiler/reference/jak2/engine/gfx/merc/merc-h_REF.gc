;;-*-Lisp-*-
(in-package goal)

;; definition of type ripple-merc-query
(deftype ripple-merc-query (inline-array-class)
  ((start-vertex int32                   :offset-assert  16)
   (vertex-skip  int32                   :offset-assert  20)
   (vertex-count int32                   :offset-assert  24)
   (current-loc  int32                   :offset-assert  28)
   (data         vector :inline :dynamic :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type ripple-merc-query
(defmethod inspect ripple-merc-query ((obj ripple-merc-query))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tstart-vertex: ~D~%" (-> obj start-vertex))
  (format #t "~1Tvertex-skip: ~D~%" (-> obj vertex-skip))
  (format #t "~1Tvertex-count: ~D~%" (-> obj vertex-count))
  (format #t "~1Tcurrent-loc: ~D~%" (-> obj current-loc))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(set! (-> ripple-merc-query heap-base) (the-as uint 16))

;; definition of type merc-byte-header
(deftype merc-byte-header (structure)
  ((srcdest-off        uint8    :offset-assert   0)
   (rgba-off           uint8    :offset-assert   1)
   (lump-off           uint8    :offset-assert   2)
   (fp-off             uint8    :offset-assert   3)
   (mat1-cnt           uint8    :offset-assert   4)
   (mat2-cnt           uint8    :offset-assert   5)
   (mat3-cnt           uint8    :offset-assert   6)
   (samecopy-cnt       uint8    :offset-assert   7)
   (crosscopy-cnt      uint8    :offset-assert   8)
   (strip-len          uint8    :offset-assert   9)
   (mm-quadword-fp-off uint8    :offset-assert  10)
   (mm-quadword-size   uint8    :offset-assert  11)
   (perc-off           uint8    :offset-assert  12)
   (mat-slot           uint8 10 :offset-assert  13)
   )
  :method-count-assert 9
  :size-assert         #x17
  :flag-assert         #x900000017
  )

;; definition for method 3 of type merc-byte-header
(defmethod inspect merc-byte-header ((obj merc-byte-header))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-byte-header)
  (format #t "~1Tsrcdest-off: ~D~%" (-> obj srcdest-off))
  (format #t "~1Trgba-off: ~D~%" (-> obj rgba-off))
  (format #t "~1Tlump-off: ~D~%" (-> obj lump-off))
  (format #t "~1Tfp-off: ~D~%" (-> obj fp-off))
  (format #t "~1Tmat1-cnt: ~D~%" (-> obj mat1-cnt))
  (format #t "~1Tmat2-cnt: ~D~%" (-> obj mat2-cnt))
  (format #t "~1Tmat3-cnt: ~D~%" (-> obj mat3-cnt))
  (format #t "~1Tsamecopy-cnt: ~D~%" (-> obj samecopy-cnt))
  (format #t "~1Tcrosscopy-cnt: ~D~%" (-> obj crosscopy-cnt))
  (format #t "~1Tstrip-len: ~D~%" (-> obj strip-len))
  (format #t "~1Tmm-quadword-fp-off: ~D~%" (-> obj mm-quadword-fp-off))
  (format #t "~1Tmm-quadword-size: ~D~%" (-> obj mm-quadword-size))
  (format #t "~1Tperc-off: ~D~%" (-> obj perc-off))
  (format #t "~1Tmat-slot[10] @ #x~X~%" (-> obj mat-slot))
  (label cfg-4)
  obj
  )

;; definition of type merc-fragment
(deftype merc-fragment (structure)
  ((header merc-byte-header :inline :offset-assert   0)
   (rest   uint8            1       :offset-assert  23)
   )
  :method-count-assert 10
  :size-assert         #x18
  :flag-assert         #xa00000018
  (:methods
    (login-adgifs (_type_) none 9)
    )
  )

;; definition for method 3 of type merc-fragment
(defmethod inspect merc-fragment ((obj merc-fragment))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-fragment)
  (format #t "~1Theader: #<merc-byte-header @ #x~X>~%" (-> obj header))
  (format #t "~1Trest[1] @ #x~X~%" (-> obj rest))
  (label cfg-4)
  obj
  )

;; definition of type merc-vtx
(deftype merc-vtx (structure)
  ((mat-0 uint8  :offset-assert   0)
   (mat-1 uint8  :offset-assert   1)
   (nrm-x uint8  :offset-assert   2)
   (pos-x uint8  :offset-assert   3)
   (dst-0 uint8  :offset-assert   4)
   (dst-1 uint8  :offset-assert   5)
   (nrm-y uint8  :offset-assert   6)
   (pos-y uint8  :offset-assert   7)
   (tex-s uint8  :offset-assert   8)
   (tex-t uint8  :offset-assert   9)
   (nrm-z uint8  :offset-assert  10)
   (pos-z uint8  :offset-assert  11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type merc-vtx
(defmethod inspect merc-vtx ((obj merc-vtx))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-vtx)
  (format #t "~1Tmat-0: ~D~%" (-> obj mat-0))
  (format #t "~1Tmat-1: ~D~%" (-> obj mat-1))
  (format #t "~1Tnrm-x: ~D~%" (-> obj nrm-x))
  (format #t "~1Tpos-x: ~D~%" (-> obj pos-x))
  (format #t "~1Tdst-0: ~D~%" (-> obj dst-0))
  (format #t "~1Tdst-1: ~D~%" (-> obj dst-1))
  (format #t "~1Tnrm-y: ~D~%" (-> obj nrm-y))
  (format #t "~1Tpos-y: ~D~%" (-> obj pos-y))
  (format #t "~1Ttex-s: ~D~%" (-> obj tex-s))
  (format #t "~1Ttex-t: ~D~%" (-> obj tex-t))
  (format #t "~1Tnrm-z: ~D~%" (-> obj nrm-z))
  (format #t "~1Tpos-z: ~D~%" (-> obj pos-z))
  (label cfg-4)
  obj
  )

;; definition of type merc-fp-header
(deftype merc-fp-header (structure)
  ((x-add            float  :offset-assert   0)
   (y-add            float  :offset-assert   4)
   (z-add            float  :offset-assert   8)
   (shader-cnt       uint8  :offset-assert  12)
   (kick-info-offset uint8  :offset-assert  13)
   (kick-info-step   uint8  :offset-assert  14)
   (hword-cnt        uint8  :offset-assert  15)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type merc-fp-header
(defmethod inspect merc-fp-header ((obj merc-fp-header))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-fp-header)
  (format #t "~1Tx-add: ~f~%" (-> obj x-add))
  (format #t "~1Ty-add: ~f~%" (-> obj y-add))
  (format #t "~1Tz-add: ~f~%" (-> obj z-add))
  (format #t "~1Tshader-cnt: ~D~%" (-> obj shader-cnt))
  (format #t "~1Tkick-info-offset: ~D~%" (-> obj kick-info-offset))
  (format #t "~1Tkick-info-step: ~D~%" (-> obj kick-info-step))
  (format #t "~1Thword-cnt: ~D~%" (-> obj hword-cnt))
  (label cfg-4)
  obj
  )

;; definition for function merc-fragment-fp-data
;; INFO: Return type mismatch int vs merc-fp-header.
(defun merc-fragment-fp-data ((arg0 merc-fragment))
  (the-as merc-fp-header (+ (the-as uint arg0) (* (-> arg0 header mm-quadword-fp-off) 16)))
  )

;; definition of type merc-mat-dest
(deftype merc-mat-dest (structure)
  ((matrix-number uint8  :offset-assert   0)
   (matrix-dest   uint8  :offset-assert   1)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; definition for method 3 of type merc-mat-dest
(defmethod inspect merc-mat-dest ((obj merc-mat-dest))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-mat-dest)
  (format #t "~1Tmatrix-number: ~D~%" (-> obj matrix-number))
  (format #t "~1Tmatrix-dest: ~D~%" (-> obj matrix-dest))
  (label cfg-4)
  obj
  )

;; definition of type merc-fragment-control
(deftype merc-fragment-control (structure)
  ((unsigned-four-count uint8                          :offset-assert   0)
   (lump-four-count     uint8                          :offset-assert   1)
   (fp-qwc              uint8                          :offset-assert   2)
   (mat-xfer-count      uint8                          :offset-assert   3)
   (mat-dest-data       merc-mat-dest :inline :dynamic :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type merc-fragment-control
(defmethod inspect merc-fragment-control ((obj merc-fragment-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-fragment-control)
  (format #t "~1Tunsigned-four-count: ~D~%" (-> obj unsigned-four-count))
  (format #t "~1Tlump-four-count: ~D~%" (-> obj lump-four-count))
  (format #t "~1Tfp-qwc: ~D~%" (-> obj fp-qwc))
  (format #t "~1Tmat-xfer-count: ~D~%" (-> obj mat-xfer-count))
  (format #t "~1Tmat-dest-data[0] @ #x~X~%" (-> obj mat-dest-data))
  (label cfg-4)
  obj
  )

;; definition of type merc-blend-data
(deftype merc-blend-data (structure)
  ((int8-data int8 :dynamic :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x0
  :flag-assert         #x900000000
  )

;; definition for method 3 of type merc-blend-data
(defmethod inspect merc-blend-data ((obj merc-blend-data))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-blend-data)
  (format #t "~1Tint8-data[0] @ #x~X~%" (-> obj int8-data))
  (label cfg-4)
  obj
  )

;; definition of type merc-blend-ctrl
(deftype merc-blend-ctrl (structure)
  ((blend-vtx-count     uint8          :offset-assert   0)
   (nonzero-index-count uint8          :offset-assert   1)
   (bt-index            uint8 :dynamic :offset-assert   2)
   )
  :method-count-assert 9
  :size-assert         #x2
  :flag-assert         #x900000002
  )

;; definition for method 3 of type merc-blend-ctrl
(defmethod inspect merc-blend-ctrl ((obj merc-blend-ctrl))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-blend-ctrl)
  (format #t "~1Tblend-vtx-count: ~D~%" (-> obj blend-vtx-count))
  (format #t "~1Tnonzero-index-count: ~D~%" (-> obj nonzero-index-count))
  (format #t "~1Tbt-index[0] @ #x~X~%" (-> obj bt-index))
  (label cfg-4)
  obj
  )

;; definition of type mei-envmap-tint
(deftype mei-envmap-tint (structure)
  ((fade0 float   :offset-assert   0)
   (fade1 float   :offset-assert   4)
   (tint  uint32  :offset-assert   8)
   (dummy int32   :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type mei-envmap-tint
(defmethod inspect mei-envmap-tint ((obj mei-envmap-tint))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mei-envmap-tint)
  (format #t "~1Tfade0: ~f~%" (-> obj fade0))
  (format #t "~1Tfade1: ~f~%" (-> obj fade1))
  (format #t "~1Ttint: ~D~%" (-> obj tint))
  (format #t "~1Tdummy: ~D~%" (-> obj dummy))
  (label cfg-4)
  obj
  )

;; definition of type mei-texture-scroll
(deftype mei-texture-scroll (structure)
  ((max-dist     float   :offset-assert   0)
   (st-int-scale uint8   :offset-assert   4)
   (time-factor  uint8   :offset-assert   5)
   (scroll-dir   uint8   :offset-assert   6)
   (cached-time  uint8   :offset-assert   7)
   (time-delta   uint8   :offset-assert   8)
   (dummy        uint8 7 :offset-assert   9)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type mei-texture-scroll
(defmethod inspect mei-texture-scroll ((obj mei-texture-scroll))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mei-texture-scroll)
  (format #t "~1Tmax-dist: ~f~%" (-> obj max-dist))
  (format #t "~1Tst-int-scale: ~D~%" (-> obj st-int-scale))
  (format #t "~1Ttime-factor: ~D~%" (-> obj time-factor))
  (format #t "~1Tscroll-dir: ~D~%" (-> obj scroll-dir))
  (format #t "~1Tcached-time: ~D~%" (-> obj cached-time))
  (format #t "~1Ttime-delta: ~D~%" (-> obj time-delta))
  (format #t "~1Tdummy[7] @ #x~X~%" (-> obj dummy))
  (label cfg-4)
  obj
  )

;; definition of type mei-ripple
(deftype mei-ripple (structure)
  ((x-base    float  :offset-assert   0)
   (z-base    float  :offset-assert   4)
   (grid-size float  :offset-assert   8)
   (angle     float  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type mei-ripple
(defmethod inspect mei-ripple ((obj mei-ripple))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mei-ripple)
  (format #t "~1Tx-base: ~f~%" (-> obj x-base))
  (format #t "~1Tz-base: ~f~%" (-> obj z-base))
  (format #t "~1Tgrid-size: ~f~%" (-> obj grid-size))
  (format #t "~1Tangle: ~f~%" (-> obj angle))
  (label cfg-4)
  obj
  )

;; definition of type merc-extra-info
(deftype merc-extra-info (structure)
  ((envmap-tint-offset    uint8    :offset-assert   0)
   (shader-offset         uint8    :offset-assert   1)
   (texture-scroll-offset uint8    :offset-assert   2)
   (ripple-offset         uint8    :offset-assert   3)
   (dummy                 uint8 12 :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type merc-extra-info
(defmethod inspect merc-extra-info ((obj merc-extra-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-extra-info)
  (format #t "~1Tenvmap-tint-offset: ~D~%" (-> obj envmap-tint-offset))
  (format #t "~1Tshader-offset: ~D~%" (-> obj shader-offset))
  (format #t "~1Ttexture-scroll-offset: ~D~%" (-> obj texture-scroll-offset))
  (format #t "~1Tripple-offset: ~D~%" (-> obj ripple-offset))
  (format #t "~1Tdummy[12] @ #x~X~%" (-> obj dummy))
  (label cfg-4)
  obj
  )

;; definition of type merc-effect
(deftype merc-effect (structure)
  ((frag-geo            merc-fragment          :offset-assert   0)
   (frag-ctrl           merc-fragment-control  :offset-assert   4)
   (blend-data          merc-blend-data        :offset-assert   8)
   (blend-ctrl          merc-blend-ctrl        :offset-assert  12)
   (merc-effect-version uint8                  :offset-assert  16)
   (effect-bits         uint8                  :offset-assert  17)
   (frag-count          uint16                 :offset-assert  18)
   (blend-frag-count    uint16                 :offset-assert  20)
   (tri-count           uint16                 :offset-assert  22)
   (dvert-count         uint16                 :offset-assert  24)
   (texture-index       uint8                  :offset-assert  26)
   (effect-usage        uint8                  :offset-assert  27)
   (extra-info          merc-extra-info        :offset-assert  28)
   )
  :method-count-assert 10
  :size-assert         #x20
  :flag-assert         #xa00000020
  (:methods
    (login-adgifs (_type_) none 9)
    )
  )

;; definition for method 3 of type merc-effect
(defmethod inspect merc-effect ((obj merc-effect))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-effect)
  (format #t "~1Tfrag-geo: #<merc-fragment @ #x~X>~%" (-> obj frag-geo))
  (format #t "~1Tfrag-ctrl: #<merc-fragment-control @ #x~X>~%" (-> obj frag-ctrl))
  (format #t "~1Tblend-data: #<merc-blend-data @ #x~X>~%" (-> obj blend-data))
  (format #t "~1Tblend-ctrl: #<merc-blend-ctrl @ #x~X>~%" (-> obj blend-ctrl))
  (format #t "~1Tmerc-effect-version: ~D~%" (-> obj merc-effect-version))
  (format #t "~1Teffect-bits: ~D~%" (-> obj effect-bits))
  (format #t "~1Tfrag-count: ~D~%" (-> obj frag-count))
  (format #t "~1Tblend-frag-count: ~D~%" (-> obj blend-frag-count))
  (format #t "~1Ttri-count: ~D~%" (-> obj tri-count))
  (format #t "~1Tdvert-count: ~D~%" (-> obj dvert-count))
  (format #t "~1Ttexture-index: ~D~%" (-> obj texture-index))
  (format #t "~1Teffect-usage: ~D~%" (-> obj effect-usage))
  (format #t "~1Textra-info: #<merc-extra-info @ #x~X>~%" (-> obj extra-info))
  (label cfg-4)
  obj
  )

;; definition of type merc-eye-ctrl
(deftype merc-eye-ctrl (structure)
  ((eye-slot           int8                   :offset-assert   0)
   (shader-offset      int8                   :offset-assert   1)
   (shader-count       int8                   :offset-assert   2)
   (shader             adgif-shader 6 :inline :offset-assert  16)
   (left-iris-shader   adgif-shader :inline   :offset         16)
   (left-pupil-shader  adgif-shader :inline   :offset         96)
   (left-lid-shader    adgif-shader :inline   :offset        176)
   (right-iris-shader  adgif-shader :inline   :offset        256)
   (right-pupil-shader adgif-shader :inline   :offset        336)
   (right-lid-shader   adgif-shader :inline   :offset        416)
   )
  :method-count-assert 9
  :size-assert         #x1f0
  :flag-assert         #x9000001f0
  )

;; definition for method 3 of type merc-eye-ctrl
(defmethod inspect merc-eye-ctrl ((obj merc-eye-ctrl))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-eye-ctrl)
  (format #t "~1Teye-slot: ~D~%" (-> obj eye-slot))
  (format #t "~1Tshader-offset: ~D~%" (-> obj shader-offset))
  (format #t "~1Tshader-count: ~D~%" (-> obj shader-count))
  (format #t "~1Tshader[6] @ #x~X~%" (-> obj left-iris-shader))
  (format #t "~1Tleft-iris-shader: #<adgif-shader @ #x~X>~%" (-> obj left-iris-shader))
  (format #t "~1Tleft-pupil-shader: #<adgif-shader @ #x~X>~%" (-> obj left-pupil-shader))
  (format #t "~1Tleft-lid-shader: #<adgif-shader @ #x~X>~%" (-> obj left-lid-shader))
  (format #t "~1Tright-iris-shader: #<adgif-shader @ #x~X>~%" (-> obj right-iris-shader))
  (format #t "~1Tright-pupil-shader: #<adgif-shader @ #x~X>~%" (-> obj right-pupil-shader))
  (format #t "~1Tright-lid-shader: #<adgif-shader @ #x~X>~%" (-> obj right-lid-shader))
  (label cfg-4)
  obj
  )

;; definition of type merc-eye-anim-frame
(deftype merc-eye-anim-frame (structure)
  ((pupil-trans-x int8    :offset-assert   0)
   (pupil-trans-y int8    :offset-assert   1)
   (blink         int8    :offset-assert   2)
   (iris-scale    int8    :offset          4)
   (pupil-scale   int8    :offset          5)
   (lid-scale     int8    :offset          6)
   (dword         uint64  :offset          0)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type merc-eye-anim-frame
(defmethod inspect merc-eye-anim-frame ((obj merc-eye-anim-frame))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-eye-anim-frame)
  (format #t "~1Tpupil-trans-x: ~D~%" (-> obj pupil-trans-x))
  (format #t "~1Tpupil-trans-y: ~D~%" (-> obj pupil-trans-y))
  (format #t "~1Tblink: ~D~%" (-> obj blink))
  (format #t "~1Tiris-scale: ~D~%" (-> obj iris-scale))
  (format #t "~1Tpupil-scale: ~D~%" (-> obj pupil-scale))
  (format #t "~1Tlid-scale: ~D~%" (-> obj lid-scale))
  (format #t "~1Tdword: ~D~%" (-> obj dword))
  (label cfg-4)
  obj
  )

;; definition of type merc-eye-anim-block
(deftype merc-eye-anim-block (structure)
  ((max-frame int16                                :offset-assert   0)
   (data      merc-eye-anim-frame :inline :dynamic :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type merc-eye-anim-block
(defmethod inspect merc-eye-anim-block ((obj merc-eye-anim-block))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-eye-anim-block)
  (format #t "~1Tmax-frame: ~D~%" (-> obj max-frame))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type texture-usage-group
(deftype texture-usage-group (structure)
  ((data texture-masks 7 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x150
  :flag-assert         #x900000150
  )

;; definition for method 3 of type texture-usage-group
(defmethod inspect texture-usage-group ((obj texture-usage-group))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'texture-usage-group)
  (format #t "~1Tdata[7] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type merc-ctrl-header
(deftype merc-ctrl-header (structure)
  ((xyz-scale              float                        :offset-assert   0)
   (st-magic               uint32                       :offset-assert   4)
   (st-out-a               uint32                       :offset-assert   8)
   (st-out-b               uint32                       :offset-assert  12)
   (st-vif-add             uint32                       :offset-assert  16)
   (st-int-off             uint16                       :offset-assert  20)
   (st-int-scale           uint16                       :offset-assert  22)
   (effect-count           uint32                       :offset-assert  24)
   (blend-target-count     uint32                       :offset-assert  28)
   (fragment-count         uint16                       :offset-assert  32)
   (tri-count              uint16                       :offset-assert  34)
   (matrix-count           uint8                        :offset-assert  36)
   (shader-count           uint8                        :offset-assert  37)
   (transform-vertex-count uint16                       :offset-assert  38)
   (dvert-count            uint16                       :offset-assert  40)
   (one-mat-count          uint16                       :offset-assert  42)
   (two-mat-count          uint16                       :offset-assert  44)
   (two-mat-reuse-count    uint16                       :offset-assert  46)
   (three-mat-count        uint16                       :offset-assert  48)
   (three-mat-reuse-count  uint16                       :offset-assert  50)
   (shader-upload-count    uint8                        :offset-assert  52)
   (matrix-upload-count    uint8                        :offset-assert  53)
   (same-copy-count        uint16                       :offset-assert  54)
   (cross-copy-count       uint16                       :offset-assert  56)
   (num-verts              uint16                       :offset-assert  58)
   (longest-edge           float                        :offset-assert  60)
   (eye-ctrl               merc-eye-ctrl                :offset-assert  64)
   (pad                    uint32              3        :offset-assert  68)
   (masks-padding          texture-masks       :inline  :offset-assert  80)
   (texture-usage-group    texture-usage-group          :offset         80)
   (dummy-bytes            uint8               :dynamic :offset         32)
   (envmap-tint            uint32                       :offset         32)
   (query                  basic                        :offset         36)
   (needs-clip             uint8                        :offset         40)
   (use-isometric          uint8                        :offset         41)
   (use-attached-shader    uint8                        :offset         42)
   (display-triangles      uint8                        :offset         43)
   (death-vertex-skip      uint16                       :offset         44)
   (death-start-vertex     uint16                       :offset         46)
   (death-effect           uint32                       :offset         48)
   (use-translucent        uint8                        :offset         52)
   (display-this-fragment  uint8                        :offset         53)
   (use-warp               uint8                        :offset         54)
   (ignore-alpha           uint8                        :offset         55)
   (force-fade             uint8                        :offset         56)
   (disable-fog            uint8                        :offset         57)
   (disable-envmap         uint8                        :offset         58)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type merc-ctrl-header
(defmethod inspect merc-ctrl-header ((obj merc-ctrl-header))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-ctrl-header)
  (format #t "~1Txyz-scale: #x~X~%" (-> obj xyz-scale))
  (format #t "~1Tst-magic: #x~X~%" (-> obj st-magic))
  (format #t "~1Tst-out-a: #x~X~%" (-> obj st-out-a))
  (format #t "~1Tst-out-b: #x~X~%" (-> obj st-out-b))
  (format #t "~1Tst-vif-add: #x~X~%" (-> obj st-vif-add))
  (format #t "~1Tst-int-off: ~D~%" (-> obj st-int-off))
  (format #t "~1Tst-int-scale: ~D~%" (-> obj st-int-scale))
  (format #t "~1Teffect-count: ~D~%" (-> obj effect-count))
  (format #t "~1Tblend-target-count: ~D~%" (-> obj blend-target-count))
  (format #t "~1Tfragment-count: ~D~%" (-> obj fragment-count))
  (format #t "~1Ttri-count: ~D~%" (-> obj tri-count))
  (format #t "~1Tmatrix-count: ~D~%" (-> obj matrix-count))
  (format #t "~1Tshader-count: ~D~%" (-> obj shader-count))
  (format #t "~1Ttransform-vertex-count: ~D~%" (-> obj transform-vertex-count))
  (format #t "~1Tdvert-count: ~D~%" (-> obj dvert-count))
  (format #t "~1Tone-mat-count: ~D~%" (-> obj one-mat-count))
  (format #t "~1Ttwo-mat-count: ~D~%" (-> obj two-mat-count))
  (format #t "~1Ttwo-mat-reuse-count: ~D~%" (-> obj two-mat-reuse-count))
  (format #t "~1Tthree-mat-count: ~D~%" (-> obj three-mat-count))
  (format #t "~1Tthree-mat-reuse-count: ~D~%" (-> obj three-mat-reuse-count))
  (format #t "~1Tshader-upload-count: ~D~%" (-> obj shader-upload-count))
  (format #t "~1Tmatrix-upload-count: ~D~%" (-> obj matrix-upload-count))
  (format #t "~1Tsame-copy-count: ~D~%" (-> obj same-copy-count))
  (format #t "~1Tcross-copy-count: ~D~%" (-> obj cross-copy-count))
  (format #t "~1Tnum-verts: ~D~%" (-> obj num-verts))
  (format #t "~1Tlongest-edge: ~f~%" (-> obj longest-edge))
  (format #t "~1Teye-ctrl: #<merc-eye-ctrl @ #x~X>~%" (-> obj eye-ctrl))
  (format #t "~1Tpad[3] @ #x~X~%" (-> obj pad))
  (format #t "~1Tmasks-padding: #<texture-masks @ #x~X>~%" (-> obj masks-padding))
  (format #t "~1Ttexture-usage-group: #<texture-usage-group @ #x~X>~%" (-> obj texture-usage-group))
  (format #t "~1Tdummy-bytes[0] @ #x~X~%" (&-> obj fragment-count))
  (format #t "~1Tenvmap-tint: ~D~%" (-> obj envmap-tint))
  (format #t "~1Tquery: ~A~%" (-> obj query))
  (format #t "~1Tneeds-clip: ~D~%" (-> obj needs-clip))
  (format #t "~1Tuse-isometric: ~D~%" (-> obj use-isometric))
  (format #t "~1Tuse-attached-shader: ~D~%" (-> obj use-attached-shader))
  (format #t "~1Tdisplay-triangles: ~D~%" (-> obj display-triangles))
  (format #t "~1Tdeath-vertex-skip: ~D~%" (-> obj two-mat-count))
  (format #t "~1Tdeath-start-vertex: ~D~%" (-> obj two-mat-reuse-count))
  (format #t "~1Tdeath-effect: ~D~%" (-> obj death-effect))
  (format #t "~1Tuse-translucent: ~D~%" (-> obj shader-upload-count))
  (format #t "~1Tdisplay-this-fragment: ~D~%" (-> obj matrix-upload-count))
  (format #t "~1Tuse-warp: ~D~%" (-> obj use-warp))
  (format #t "~1Tignore-alpha: ~D~%" (-> obj ignore-alpha))
  (format #t "~1Tforce-fade: ~D~%" (-> obj force-fade))
  (format #t "~1Tdisable-fog: ~D~%" (-> obj disable-fog))
  (format #t "~1Tdisable-envmap: ~D~%" (-> obj disable-envmap))
  (label cfg-4)
  obj
  )

;; definition of type merc-ctrl
(deftype merc-ctrl (art-element)
  ((num-joints int32                             :offset         20)
   (seg-table  basic                             :offset         24)
   (header     merc-ctrl-header :inline          :offset-assert  32)
   (effect     merc-effect      :inline :dynamic :offset-assert 160)
   )
  :method-count-assert 13
  :size-assert         #xa0
  :flag-assert         #xd000000a0
  )

;; definition for method 3 of type merc-ctrl
(defmethod inspect merc-ctrl ((obj merc-ctrl))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Textra: ~A~%" (-> obj extra))
  (format #t "~1Tnum-joints: ~D~%" (-> obj num-joints))
  (format #t "~1Tseg-table: ~A~%" (-> obj seg-table))
  (format #t "~1Theader: #<merc-ctrl-header @ #x~X>~%" (-> obj header))
  (format #t "~1Teffect[0] @ #x~X~%" (-> obj effect))
  (label cfg-4)
  obj
  )

;; definition of type merc-vu1-low-mem
(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif gs-gif-tag :inline :offset-assert   0)
   (ad-gif        gs-gif-tag :inline :offset-assert  16)
   (hvdf-offset   vector     :inline :offset-assert  32)
   (perspective   uint128    4       :offset-assert  48)
   (fog           vector     :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type merc-vu1-low-mem
(defmethod inspect merc-vu1-low-mem ((obj merc-vu1-low-mem))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'merc-vu1-low-mem)
  (format #t "~1Ttri-strip-gif: #<qword @ #x~X>~%" (-> obj tri-strip-gif))
  (format #t "~1Tad-gif: #<qword @ #x~X>~%" (-> obj ad-gif))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> obj hvdf-offset))
  (format #t "~1Tperspective[4] @ #x~X~%" (-> obj perspective))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> obj fog))
  (label cfg-4)
  obj
  )

;; definition of type emerc-vu1-low-mem
(deftype emerc-vu1-low-mem (structure)
  ((tri-strip-gif qword  :inline   :offset-assert   0)
   (ad-gif        qword  :inline   :offset-assert  16)
   (hvdf-offset   vector :inline   :offset-assert  32)
   (perspective   vector 4 :inline :offset-assert  48)
   (fog           vector :inline   :offset-assert 112)
   (unperspect    vector :inline   :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x90
  :flag-assert         #x900000090
  )

;; definition for method 3 of type emerc-vu1-low-mem
(defmethod inspect emerc-vu1-low-mem ((obj emerc-vu1-low-mem))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'emerc-vu1-low-mem)
  (format #t "~1Ttri-strip-gif: #<qword @ #x~X>~%" (-> obj tri-strip-gif))
  (format #t "~1Tad-gif: #<qword @ #x~X>~%" (-> obj ad-gif))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> obj hvdf-offset))
  (format #t "~1Tperspective[4] @ #x~X~%" (-> obj perspective))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> obj fog))
  (format #t "~1Tunperspect: #<vector @ #x~X>~%" (-> obj unperspect))
  (label cfg-4)
  obj
  )

;; definition of type ripple-wave
(deftype ripple-wave (structure)
  ((scale float  :offset-assert   0)
   (offs  float  :offset-assert   4)
   (xdiv  int16  :offset-assert   8)
   (zdiv  int16  :offset-assert  10)
   (speed float  :offset-assert  12)
   (xmul  float  :offset-assert  16)
   (zmul  float  :offset-assert  20)
   (delta float  :offset-assert  24)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type ripple-wave
(defmethod inspect ripple-wave ((obj ripple-wave))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'ripple-wave)
  (format #t "~1Tscale: ~f~%" (-> obj scale))
  (format #t "~1Toffs: ~f~%" (-> obj offs))
  (format #t "~1Txdiv: ~D~%" (-> obj xdiv))
  (format #t "~1Tzdiv: ~D~%" (-> obj zdiv))
  (format #t "~1Tspeed: ~f~%" (-> obj speed))
  (format #t "~1Txmul: ~f~%" (-> obj xmul))
  (format #t "~1Tzmul: ~f~%" (-> obj zmul))
  (format #t "~1Tdelta: ~f~%" (-> obj delta))
  (label cfg-4)
  obj
  )

;; definition of type ripple-wave-set
(deftype ripple-wave-set (basic)
  ((count        int32                 :offset-assert   4)
   (converted    basic                 :offset-assert   8)
   (normal-scale float                 :offset-assert  12)
   (wave         ripple-wave 4 :inline :offset-assert  16)
   (frame-save   uint64                :offset-assert 128)
   )
  :method-count-assert 9
  :size-assert         #x88
  :flag-assert         #x900000088
  )

;; definition for method 3 of type ripple-wave-set
(defmethod inspect ripple-wave-set ((obj ripple-wave-set))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tcount: ~D~%" (-> obj count))
  (format #t "~1Tconverted: ~A~%" (-> obj converted))
  (format #t "~1Tnormal-scale: ~f~%" (-> obj normal-scale))
  (format #t "~1Twave[4] @ #x~X~%" (-> obj wave))
  (format #t "~1Tframe-save: ~D~%" (-> obj frame-save))
  (label cfg-4)
  obj
  )

;; definition of type ripple-control
(deftype ripple-control (basic)
  ((global-scale            float              :offset-assert   4)
   (last-frame-scale        float              :offset-assert   8)
   (close-fade-dist         float              :offset-assert  12)
   (far-fade-dist           float              :offset-assert  16)
   (faded-scale             float              :offset-assert  20)
   (individual-normal-scale float              :offset-assert  24)
   (waveform                ripple-wave-set    :offset-assert  28)
   (send-query              symbol             :offset-assert  32)
   (query                   ripple-merc-query  :offset-assert  36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  (:methods
    (new (symbol type) _type_ 0)
    )
  )

;; definition for method 3 of type ripple-control
(defmethod inspect ripple-control ((obj ripple-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tglobal-scale: ~f~%" (-> obj global-scale))
  (format #t "~1Tlast-frame-scale: ~f~%" (-> obj last-frame-scale))
  (format #t "~1Tclose-fade-dist: ~f~%" (-> obj close-fade-dist))
  (format #t "~1Tfar-fade-dist: ~f~%" (-> obj far-fade-dist))
  (format #t "~1Tfaded-scale: ~f~%" (-> obj faded-scale))
  (format #t "~1Tindividual-normal-scale: ~f~%" (-> obj individual-normal-scale))
  (format #t "~1Twaveform: ~A~%" (-> obj waveform))
  (format #t "~1Tsend-query: ~A~%" (-> obj send-query))
  (format #t "~1Tquery: ~A~%" (-> obj query))
  (label cfg-4)
  obj
  )

;; definition for method 0 of type ripple-control
(defmethod new ripple-control ((allocation symbol) (type-to-make type))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 global-scale) 0.0)
    (set! (-> v0-0 last-frame-scale) -0.001)
    (set! (-> v0-0 close-fade-dist) 4096000000.0)
    (set! (-> v0-0 far-fade-dist) 8192000000.0)
    (set! (-> v0-0 faded-scale) -0.001)
    (set! (-> v0-0 waveform) #f)
    (set! (-> v0-0 individual-normal-scale) 1.0)
    (set! (-> v0-0 send-query) #f)
    (set! (-> v0-0 query) #f)
    v0-0
    )
  )

;; failed to figure out what this is:
0




