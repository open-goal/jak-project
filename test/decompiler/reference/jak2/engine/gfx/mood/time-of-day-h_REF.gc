;;-*-Lisp-*-
(in-package goal)

;; definition of type palette-fade-control
(deftype palette-fade-control (structure)
  ((trans      vector :inline :offset-assert   0)
   (fade       float          :offset-assert  16)
   (actor-dist float          :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type palette-fade-control
(defmethod inspect palette-fade-control ((this palette-fade-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'palette-fade-control)
  (format #t "~1Ttrans: #<vector @ #x~X>~%" (-> this trans))
  (format #t "~1Tfade: ~f~%" (-> this fade))
  (format #t "~1Tactor-dist: ~f~%" (-> this actor-dist))
  (label cfg-4)
  this
  )

;; definition of type palette-fade-controls
(deftype palette-fade-controls (basic)
  ((control palette-fade-control 8 :inline :offset-assert  16)
   )
  :method-count-assert 11
  :size-assert         #x110
  :flag-assert         #xb00000110
  (:methods
    (reset! (_type_) none 9)
    (set-fade! (_type_ int float float vector) object 10)
    )
  )

;; definition for method 3 of type palette-fade-controls
(defmethod inspect palette-fade-controls ((this palette-fade-controls))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tcontrol[8] @ #x~X~%" (-> this control))
  (label cfg-4)
  this
  )

;; definition (perm) for symbol *palette-fade-controls*, type palette-fade-controls
(define-perm *palette-fade-controls* palette-fade-controls (new 'global 'palette-fade-controls))

;; definition of type time-of-day-proc
(deftype time-of-day-proc (process)
  ((hours           int32                     :offset-assert 128)
   (minutes         int32                     :offset-assert 132)
   (seconds         int32                     :offset-assert 136)
   (old-frame       uint64                    :offset-assert 144)
   (current-frame   uint64                    :offset-assert 152)
   (frames          uint64                    :offset-assert 160)
   (time-of-day     float                     :offset-assert 168)
   (time-ratio      float                     :offset-assert 172)
   (dest-time-ratio float                     :offset-assert 176)
   (dest-time-delta float                     :offset-assert 180)
   (sun-count       int32                     :offset-assert 184)
   (sun             sparticle-launch-control  :offset-assert 188)
   (green-sun-count int32                     :offset-assert 192)
   (green-sun       sparticle-launch-control  :offset-assert 196)
   (moon-count      int32                     :offset-assert 200)
   (moon            sparticle-launch-control  :offset-assert 204)
   )
  :heap-base #x50
  :method-count-assert 14
  :size-assert         #xd0
  :flag-assert         #xe005000d0
  (:states
    time-of-day-tick
    )
  )

;; definition for method 3 of type time-of-day-proc
(defmethod inspect time-of-day-proc ((this time-of-day-proc))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Thours: ~D~%" (-> this hours))
  (format #t "~2Tminutes: ~D~%" (-> this minutes))
  (format #t "~2Tseconds: ~D~%" (-> this seconds))
  (format #t "~2Told-frame: ~D~%" (-> this old-frame))
  (format #t "~2Tcurrent-frame: ~D~%" (-> this current-frame))
  (format #t "~2Tframes: ~D~%" (-> this frames))
  (format #t "~2Ttime-of-day: ~f~%" (-> this time-of-day))
  (format #t "~2Ttime-ratio: ~f~%" (-> this time-ratio))
  (format #t "~2Tdest-time-ratio: ~f~%" (-> this dest-time-ratio))
  (format #t "~2Tdest-time-delta: ~f~%" (-> this dest-time-delta))
  (format #t "~2Tsun-count: ~D~%" (-> this sun-count))
  (format #t "~2Tsun: ~A~%" (-> this sun))
  (format #t "~2Tgreen-sun-count: ~D~%" (-> this green-sun-count))
  (format #t "~2Tgreen-sun: ~A~%" (-> this green-sun))
  (format #t "~2Tmoon-count: ~D~%" (-> this moon-count))
  (format #t "~2Tmoon: ~A~%" (-> this moon))
  (label cfg-4)
  this
  )

;; definition of type time-of-day-palette
(deftype time-of-day-palette (basic)
  ((width  int32   :offset-assert   4)
   (height int32   :offset-assert   8)
   (pad    int32   :offset-assert  12)
   (data   int32 1 :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type time-of-day-palette
(defmethod inspect time-of-day-palette ((this time-of-day-palette))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Twidth: ~D~%" (-> this width))
  (format #t "~1Theight: ~D~%" (-> this height))
  (format #t "~1Tpad: ~D~%" (-> this pad))
  (format #t "~1Tdata[1] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type time-of-day-context
(deftype time-of-day-context (basic)
  ((interp               float                  6         :offset-assert   4)
   (current-fog          mood-fog               :inline   :offset-assert  32)
   (current-sky-color    vector                 :inline   :offset-assert  80)
   (current-env-color    vector                 :inline   :offset-assert  96)
   (current-prt-color    vector                 :inline   :offset-assert 112)
   (current-shadow-color vector                 :inline   :offset-assert 128)
   (light-group          light-group            8 :inline :offset-assert 144)
   (current-clouds       mood-clouds            :inline   :offset-assert 1680)
   (times                vector                 8 :inline :offset-assert 1696)
   (title-light-group    light-group            :inline   :offset-assert 1824)
   (filter               vector                 :inline   :offset-assert 2016)
   (filter-color         vector                 :inline   :offset-assert 2032)
   (time                 float                            :offset-assert 2048)
   (target-interp        float                            :offset-assert 2052)
   (erase-color          rgba                             :offset-assert 2056)
   (sky                  symbol                           :offset-assert 2060)
   (use-camera-other     basic                            :offset-assert 2064)
   (title-updated        symbol                           :offset-assert 2068)
   (mode                 time-of-day-palette-id           :offset-assert 2072)
   (overide-enable       symbol                           :offset-assert 2076)
   (overide-palette      time-of-day-palette-id           :offset-assert 2080)
   (max-rain             float                            :offset-assert 2084)
   (fog-mult             float                            :offset-assert 2088)
   (exterior-level       basic                            :offset-assert 2092)
   (ocean-alpha          float                            :offset-assert 2096)
   )
  :method-count-assert 9
  :size-assert         #x834
  :flag-assert         #x900000834
  )

;; definition for method 3 of type time-of-day-context
(defmethod inspect time-of-day-context ((this time-of-day-context))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tinterp[6] @ #x~X~%" (-> this interp))
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (format #t "~1Tcurrent-clouds: #<mood-clouds @ #x~X>~%" (-> this current-clouds))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> this times))
  (format #t "~1Ttitle-light-group: #<light-group @ #x~X>~%" (-> this title-light-group))
  (format #t "~1Tfilter: #<vector @ #x~X>~%" (-> this filter))
  (format #t "~1Tfilter-color: #<vector @ #x~X>~%" (-> this filter-color))
  (format #t "~1Ttime: ~f~%" (-> this time))
  (format #t "~1Ttarget-interp: ~f~%" (-> this target-interp))
  (format #t "~1Terase-color: ~D~%" (-> this erase-color))
  (format #t "~1Tsky: ~A~%" (-> this sky))
  (format #t "~1Tuse-camera-other: ~A~%" (-> this use-camera-other))
  (format #t "~1Ttitle-updated: ~A~%" (-> this title-updated))
  (format #t "~1Tmode: ~D~%" (-> this mode))
  (format #t "~1Toveride-enable: ~A~%" (-> this overide-enable))
  (format #t "~1Toveride-palette: ~D~%" (-> this overide-palette))
  (format #t "~1Tmax-rain: ~f~%" (-> this max-rain))
  (format #t "~1Tfog-mult: ~f~%" (-> this fog-mult))
  (format #t "~1Texterior-level: ~A~%" (-> this exterior-level))
  (format #t "~1Tocean-alpha: ~f~%" (-> this ocean-alpha))
  (label cfg-4)
  this
  )

;; definition of type time-of-day-dma
(deftype time-of-day-dma (structure)
  ((outa  uint32 256 :offset-assert   0)
   (outb  uint32 256 :offset-assert 1024)
   (banka uint32 256 :offset-assert 2048)
   (bankb uint32 256 :offset-assert 3072)
   )
  :method-count-assert 9
  :size-assert         #x1000
  :flag-assert         #x900001000
  )

;; definition for method 3 of type time-of-day-dma
(defmethod inspect time-of-day-dma ((this time-of-day-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'time-of-day-dma)
  (format #t "~1Touta[256] @ #x~X~%" (-> this outa))
  (format #t "~1Toutb[256] @ #x~X~%" (-> this outb))
  (format #t "~1Tbanka[256] @ #x~X~%" (-> this banka))
  (format #t "~1Tbankb[256] @ #x~X~%" (-> this bankb))
  (label cfg-4)
  this
  )

;; definition for symbol *time-of-day-context*, type time-of-day-context
(define *time-of-day-context* (new 'static 'time-of-day-context))

;; failed to figure out what this is:
0
