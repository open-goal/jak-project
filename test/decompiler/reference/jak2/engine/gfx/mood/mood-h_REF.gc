;;-*-Lisp-*-
(in-package goal)

;; definition of type mood-channel
(deftype mood-channel (structure)
  ((data float   24        :offset-assert   0)
   (vecs vector4 6 :inline :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; definition for method 3 of type mood-channel
(defmethod inspect mood-channel ((obj mood-channel))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-channel)
  (format #t "~1Tdata[24] @ #x~X~%" (-> obj data))
  (format #t "~1Tvecs[6] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-channel-group
(deftype mood-channel-group (structure)
  ((data mood-channel 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; definition for method 3 of type mood-channel-group
(defmethod inspect mood-channel-group ((obj mood-channel-group))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-channel-group)
  (format #t "~1Tdata[4] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-fog
(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert   0)
   (fog-dists   vector :inline :offset-assert  16)
   (fog-start   meters         :offset         16)
   (fog-end     meters         :offset         20)
   (fog-max     float          :offset         24)
   (fog-min     float          :offset         28)
   (erase-color vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type mood-fog
(defmethod inspect mood-fog ((obj mood-fog))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-fog)
  (format #t "~1Tfog-color: #<vector @ #x~X>~%" (-> obj fog-color))
  (format #t "~1Tfog-dists: #<vector @ #x~X>~%" (-> obj fog-dists))
  (format #t "~1Tfog-start: (meters ~m)~%" (-> obj fog-dists x))
  (format #t "~1Tfog-end: (meters ~m)~%" (-> obj fog-dists y))
  (format #t "~1Tfog-max: ~f~%" (-> obj fog-dists z))
  (format #t "~1Tfog-min: ~f~%" (-> obj fog-dists w))
  (format #t "~1Terase-color: #<vector @ #x~X>~%" (-> obj erase-color))
  (label cfg-4)
  obj
  )

;; definition of type mood-fog-table
(deftype mood-fog-table (structure)
  ((data mood-fog 8 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; definition for method 3 of type mood-fog-table
(defmethod inspect mood-fog-table ((obj mood-fog-table))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-fog-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-color
(deftype mood-color (structure)
  ((lgt-color vector :inline :offset-assert   0)
   (amb-color vector :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type mood-color
(defmethod inspect mood-color ((obj mood-color))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-color)
  (format #t "~1Tlgt-color: #<vector @ #x~X>~%" (-> obj lgt-color))
  (format #t "~1Tamb-color: #<vector @ #x~X>~%" (-> obj amb-color))
  (label cfg-4)
  obj
  )

;; definition of type mood-direction-table
(deftype mood-direction-table (structure)
  ((data vector 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type mood-direction-table
(defmethod inspect mood-direction-table ((obj mood-direction-table))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-direction-table)
  (format #t "~1Tdata[4] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-color-table
(deftype mood-color-table (structure)
  ((data mood-color 8 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; definition for method 3 of type mood-color-table
(defmethod inspect mood-color-table ((obj mood-color-table))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-color-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-sky-table
(deftype mood-sky-table (structure)
  ((data vector 8 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type mood-sky-table
(defmethod inspect mood-sky-table ((obj mood-sky-table))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-sky-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-clouds
(deftype mood-clouds (structure)
  ((cloud-min float  :offset-assert   0)
   (cloud-max float  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type mood-clouds
(defmethod inspect mood-clouds ((obj mood-clouds))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-clouds)
  (format #t "~1Tcloud-min: ~f~%" (-> obj cloud-min))
  (format #t "~1Tcloud-max: ~f~%" (-> obj cloud-max))
  (label cfg-4)
  obj
  )

;; definition of type mood-weather
(deftype mood-weather (structure)
  ((data  float 2 :offset-assert   0)
   (cloud float   :offset          0)
   (fog   float   :offset          4)
   )
  :pack-me
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type mood-weather
(defmethod inspect mood-weather ((obj mood-weather))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-weather)
  (format #t "~1Tdata[2] @ #x~X~%" (-> obj data))
  (format #t "~1Tcloud: ~f~%" (-> obj cloud))
  (format #t "~1Tfog: ~f~%" (-> obj fog))
  (label cfg-4)
  obj
  )

;; definition of type mood-iweather
(deftype mood-iweather (structure)
  ((data  int32 2 :offset-assert   0)
   (cloud int32   :offset          0)
   (fog   int32   :offset          4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type mood-iweather
(defmethod inspect mood-iweather ((obj mood-iweather))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-iweather)
  (format #t "~1Tdata[2] @ #x~X~%" (-> obj data))
  (format #t "~1Tcloud: ~D~%" (-> obj cloud))
  (format #t "~1Tfog: ~D~%" (-> obj fog))
  (label cfg-4)
  obj
  )

;; definition of type mood-range
(deftype mood-range (structure)
  ((data      float   4 :offset-assert   0)
   (min-cloud float     :offset          0)
   (max-cloud float     :offset          4)
   (min-fog   float     :offset          8)
   (max-fog   float     :offset         12)
   (quad      uint128   :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type mood-range
;; INFO: Used lq/sq
(defmethod inspect mood-range ((obj mood-range))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-range)
  (format #t "~1Tdata[4] @ #x~X~%" (-> obj data))
  (format #t "~1Tmin-cloud: ~f~%" (-> obj min-cloud))
  (format #t "~1Tmax-cloud: ~f~%" (-> obj max-cloud))
  (format #t "~1Tmin-fog: ~f~%" (-> obj min-fog))
  (format #t "~1Tmax-fog: ~f~%" (-> obj max-fog))
  (format #t "~1Tquad: ~D~%" (-> obj quad))
  (label cfg-4)
  obj
  )

;; definition of type mood-filters-table
(deftype mood-filters-table (structure)
  ((data vector 8 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type mood-filters-table
(defmethod inspect mood-filters-table ((obj mood-filters-table))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-filters-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type mood-table
(deftype mood-table (basic)
  ((mood-fog-table       mood-fog-table        :offset-assert   4)
   (mood-color-table     mood-color-table      :offset-assert   8)
   (mood-channel-group   mood-channel-group    :offset-assert  12)
   (mood-direction-table mood-direction-table  :offset-assert  16)
   (mood-sky-table       mood-sky-table        :offset-assert  20)
   (mood-interp-table    basic                 :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type mood-table
(defmethod inspect mood-table ((obj mood-table))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> obj mood-fog-table))
  (format #t "~1Tmood-color-table: #<mood-color-table @ #x~X>~%" (-> obj mood-color-table))
  (format #t "~1Tmood-channel-group: #<mood-channel-group @ #x~X>~%" (-> obj mood-channel-group))
  (format #t "~1Tmood-direction-table: #<mood-direction-table @ #x~X>~%" (-> obj mood-direction-table))
  (format #t "~1Tmood-sky-table: #<mood-sky-table @ #x~X>~%" (-> obj mood-sky-table))
  (format #t "~1Tmood-interp-table: ~A~%" (-> obj mood-interp-table))
  (label cfg-4)
  obj
  )

;; definition of type mood-context-core
(deftype mood-context-core (structure)
  ((current-fog          mood-fog :inline :offset-assert   0)
   (current-sky-color    vector   :inline :offset-assert  48)
   (current-env-color    vector   :inline :offset-assert  64)
   (current-prt-color    vector   :inline :offset-assert  80)
   (current-shadow-color vector   :inline :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type mood-context-core
(defmethod inspect mood-context-core ((obj mood-context-core))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-context-core)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> obj current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> obj current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> obj current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> obj current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> obj current-shadow-color))
  (label cfg-4)
  obj
  )

;; definition of type mood-context-core2
(deftype mood-context-core2 (mood-context-core)
  ((light-group light-group 8 :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x670
  :flag-assert         #x900000670
  )

;; definition for method 3 of type mood-context-core2
(defmethod inspect mood-context-core2 ((obj mood-context-core2))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-context-core2)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> obj current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> obj current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> obj current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> obj current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> obj current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> obj light-group))
  (label cfg-4)
  obj
  )

;; definition of type mood-context-core3
(deftype mood-context-core3 (mood-context-core2)
  ((times vector 8 :inline :offset-assert 1648)
   )
  :method-count-assert 9
  :size-assert         #x6f0
  :flag-assert         #x9000006f0
  )

;; definition for method 3 of type mood-context-core3
(defmethod inspect mood-context-core3 ((obj mood-context-core3))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-context-core3)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> obj current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> obj current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> obj current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> obj current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> obj current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> obj light-group))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> obj times))
  (label cfg-4)
  obj
  )

;; definition of type mood-context
(deftype mood-context (mood-context-core3)
  ((itimes vector4w 4 :inline :offset-assert 1776)
   (state  uint32   32        :offset-assert 1840)
   )
  :method-count-assert 9
  :size-assert         #x7b0
  :flag-assert         #x9000007b0
  )

;; definition for method 3 of type mood-context
(defmethod inspect mood-context ((obj mood-context))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-context)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> obj current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> obj current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> obj current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> obj current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> obj current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> obj light-group))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> obj times))
  (format #t "~1Titimes[4] @ #x~X~%" (-> obj itimes))
  (format #t "~1Tstate[32] @ #x~X~%" (-> obj state))
  (label cfg-4)
  obj
  )

;; definition of type mood-control-work
(deftype mood-control-work (structure)
  ((weather        mood-weather  :inline :offset-assert   0)
   (iweather       mood-iweather :inline :offset-assert   8)
   (interp         mood-weather  :inline :offset-assert  16)
   (index          int32         4       :offset-assert  24)
   (color-interp   float                 :offset-assert  40)
   (color-index    int32         2       :offset-assert  44)
   (channel-interp float                 :offset-assert  52)
   (channel-index  int32         2       :offset-assert  56)
   (cloud-interp   float                 :offset-assert  64)
   (cloud-index    int32         2       :offset-assert  68)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

;; definition for method 3 of type mood-control-work
(defmethod inspect mood-control-work ((obj mood-control-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'mood-control-work)
  (format #t "~1Tweather: #<mood-weather @ #x~X>~%" (-> obj weather))
  (format #t "~1Tiweather: #<mood-iweather @ #x~X>~%" (-> obj iweather))
  (format #t "~1Tinterp: #<mood-weather @ #x~X>~%" (-> obj interp))
  (format #t "~1Tindex[4] @ #x~X~%" (-> obj index))
  (format #t "~1Tcolor-interp: ~f~%" (-> obj color-interp))
  (format #t "~1Tcolor-index[2] @ #x~X~%" (-> obj color-index))
  (format #t "~1Tchannel-interp: ~f~%" (-> obj channel-interp))
  (format #t "~1Tchannel-index[2] @ #x~X~%" (-> obj channel-index))
  (format #t "~1Tcloud-interp: ~f~%" (-> obj cloud-interp))
  (format #t "~1Tcloud-index[2] @ #x~X~%" (-> obj cloud-index))
  (label cfg-4)
  obj
  )

;; definition of type mood-control
(deftype mood-control (mood-table)
  ((mood-clouds           mood-clouds          :offset-assert  28)
   (current-interp        mood-weather :inline :offset-assert  32)
   (target-interp         mood-weather :inline :offset-assert  40)
   (speed-interp          mood-weather :inline :offset-assert  48)
   (range                 mood-range   :inline :offset-assert  64)
   (time-until-random     mood-weather :inline :offset-assert  80)
   (time-until-random-min mood-weather :inline :offset-assert  88)
   (time-until-random-max mood-weather :inline :offset-assert  96)
   (display-flag          basic                :offset-assert 104)
   (overide-weather-flag  basic                :offset-assert 108)
   (overide               mood-weather :inline :offset-assert 112)
   (lightning-index       int32                :offset-assert 120)
   (lightning-val         int32                :offset-assert 124)
   (lightning-time        int32                :offset-assert 128)
   (lightning-time2       float                :offset-assert 132)
   (lightning-flash       float                :offset-assert 136)
   (lightning-id          uint32               :offset-assert 140)
   (lightning-count0      uint32               :offset-assert 144)
   (lightning-count1      uint32               :offset-assert 148)
   (lightning-count2      uint32               :offset-assert 152)
   (rain-id               uint32               :offset-assert 156)
   (sound-pitch           float                :offset-assert 160)
   (fogs                  mood-fog     9       :offset-assert 164)
   (colors                mood-color   3       :offset-assert 200)
   (channels              mood-channel 3       :offset-assert 212)
   (clouds                mood-clouds  9       :offset-assert 224)
   )
  :method-count-assert 19
  :size-assert         #x104
  :flag-assert         #x1300000104
  (:methods
    (mood-control-method-9 () none 9)
    (mood-control-method-10 () none 10)
    (mood-control-method-11 () none 11)
    (mood-control-method-12 () none 12)
    (mood-control-method-13 () none 13)
    (mood-control-method-14 () none 14)
    (mood-control-method-15 () none 15)
    (mood-control-method-16 () none 16)
    (mood-control-method-17 () none 17)
    (mood-control-method-18 () none 18)
    )
  )

;; definition for method 3 of type mood-control
(defmethod inspect mood-control ((obj mood-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> obj mood-fog-table))
  (format #t "~1Tmood-color-table: #<mood-color-table @ #x~X>~%" (-> obj mood-color-table))
  (format #t "~1Tmood-channel-group: #<mood-channel-group @ #x~X>~%" (-> obj mood-channel-group))
  (format #t "~1Tmood-direction-table: #<mood-direction-table @ #x~X>~%" (-> obj mood-direction-table))
  (format #t "~1Tmood-sky-table: #<mood-sky-table @ #x~X>~%" (-> obj mood-sky-table))
  (format #t "~1Tmood-interp-table: ~A~%" (-> obj mood-interp-table))
  (format #t "~1Tmood-clouds: #<mood-clouds @ #x~X>~%" (-> obj mood-clouds))
  (format #t "~1Tcurrent-interp: #<mood-weather @ #x~X>~%" (-> obj current-interp))
  (format #t "~1Ttarget-interp: #<mood-weather @ #x~X>~%" (-> obj target-interp))
  (format #t "~1Tspeed-interp: #<mood-weather @ #x~X>~%" (-> obj speed-interp))
  (format #t "~1Trange: #<mood-range @ #x~X>~%" (-> obj range))
  (format #t "~1Ttime-until-random: #<mood-weather @ #x~X>~%" (-> obj time-until-random))
  (format #t "~1Ttime-until-random-min: #<mood-weather @ #x~X>~%" (-> obj time-until-random-min))
  (format #t "~1Ttime-until-random-max: #<mood-weather @ #x~X>~%" (-> obj time-until-random-max))
  (format #t "~1Tdisplay-flag: ~A~%" (-> obj display-flag))
  (format #t "~1Toveride-weather-flag: ~A~%" (-> obj overide-weather-flag))
  (format #t "~1Toveride: #<mood-weather @ #x~X>~%" (-> obj overide))
  (format #t "~1Tlightning-index: ~D~%" (-> obj lightning-index))
  (format #t "~1Tlightning-val: ~D~%" (-> obj lightning-val))
  (format #t "~1Tlightning-time: ~D~%" (-> obj lightning-time))
  (format #t "~1Tlightning-time2: ~f~%" (-> obj lightning-time2))
  (format #t "~1Tlightning-flash: ~f~%" (-> obj lightning-flash))
  (format #t "~1Tlightning-id: ~D~%" (-> obj lightning-id))
  (format #t "~1Tlightning-count0: ~D~%" (-> obj lightning-count0))
  (format #t "~1Tlightning-count1: ~D~%" (-> obj lightning-count1))
  (format #t "~1Tlightning-count2: ~D~%" (-> obj lightning-count2))
  (format #t "~1Train-id: ~D~%" (-> obj rain-id))
  (format #t "~1Tsound-pitch: ~f~%" (-> obj sound-pitch))
  (format #t "~1Tfogs[9] @ #x~X~%" (-> obj fogs))
  (format #t "~1Tcolors[3] @ #x~X~%" (-> obj colors))
  (format #t "~1Tchannels[3] @ #x~X~%" (-> obj channels))
  (format #t "~1Tclouds[9] @ #x~X~%" (-> obj clouds))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




