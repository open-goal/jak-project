;;-*-Lisp-*-
(in-package goal)

;; definition of type mood-channel
(deftype mood-channel (structure)
  ((data float   24        :offset-assert   0)
   (vecs vector4 6 :inline :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; definition for method 3 of type mood-channel
(defmethod inspect mood-channel ((this mood-channel))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-channel)
  (format #t "~1Tdata[24] @ #x~X~%" (-> this vecs))
  (format #t "~1Tvecs[6] @ #x~X~%" (-> this vecs))
  (label cfg-4)
  this
  )

;; definition of type mood-channel-group
(deftype mood-channel-group (structure)
  ((data mood-channel 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; definition for method 3 of type mood-channel-group
(defmethod inspect mood-channel-group ((this mood-channel-group))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-channel-group)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-fog
(deftype mood-fog (structure)
  ((fog-color   vector :inline :offset-assert   0)
   (fog-dists   vector :inline :offset-assert  16)
   (fog-start   meters         :offset         16)
   (fog-end     meters         :offset         20)
   (fog-max     float          :offset         24)
   (fog-min     float          :offset         28)
   (erase-color vector :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type mood-fog
(defmethod inspect mood-fog ((this mood-fog))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-fog)
  (format #t "~1Tfog-color: #<vector @ #x~X>~%" (-> this fog-color))
  (format #t "~1Tfog-dists: #<vector @ #x~X>~%" (-> this fog-dists))
  (format #t "~1Tfog-start: (meters ~m)~%" (-> this fog-dists x))
  (format #t "~1Tfog-end: (meters ~m)~%" (-> this fog-dists y))
  (format #t "~1Tfog-max: ~f~%" (-> this fog-dists z))
  (format #t "~1Tfog-min: ~f~%" (-> this fog-dists w))
  (format #t "~1Terase-color: #<vector @ #x~X>~%" (-> this erase-color))
  (label cfg-4)
  this
  )

;; definition of type mood-fog-table
(deftype mood-fog-table (structure)
  ((data     mood-fog 8 :inline :offset-assert   0)
   (data-raw uint128  24        :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x180
  :flag-assert         #x900000180
  )

;; definition for method 3 of type mood-fog-table
(defmethod inspect mood-fog-table ((this mood-fog-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-fog-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-color
(deftype mood-color (structure)
  ((lgt-color vector :inline :offset-assert   0)
   (amb-color vector :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type mood-color
(defmethod inspect mood-color ((this mood-color))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-color)
  (format #t "~1Tlgt-color: #<vector @ #x~X>~%" (-> this lgt-color))
  (format #t "~1Tamb-color: #<vector @ #x~X>~%" (-> this amb-color))
  (label cfg-4)
  this
  )

;; definition of type mood-direction-table
(deftype mood-direction-table (structure)
  ((data vector 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type mood-direction-table
(defmethod inspect mood-direction-table ((this mood-direction-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-direction-table)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-color-table
(deftype mood-color-table (structure)
  ((data     mood-color 8 :inline :offset-assert   0)
   (data-raw uint128    16        :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x100
  :flag-assert         #x900000100
  )

;; definition for method 3 of type mood-color-table
(defmethod inspect mood-color-table ((this mood-color-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-color-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-sky-table
(deftype mood-sky-table (structure)
  ((data vector 8 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type mood-sky-table
(defmethod inspect mood-sky-table ((this mood-sky-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-sky-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-clouds
(deftype mood-clouds (structure)
  ((cloud-min float  :offset-assert   0)
   (cloud-max float  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type mood-clouds
(defmethod inspect mood-clouds ((this mood-clouds))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-clouds)
  (format #t "~1Tcloud-min: ~f~%" (-> this cloud-min))
  (format #t "~1Tcloud-max: ~f~%" (-> this cloud-max))
  (label cfg-4)
  this
  )

;; definition of type mood-weather
(deftype mood-weather (structure)
  ((data  float 2 :offset-assert   0)
   (cloud float   :offset          0)
   (fog   float   :offset          4)
   )
  :pack-me
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type mood-weather
(defmethod inspect mood-weather ((this mood-weather))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-weather)
  (format #t "~1Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~1Tcloud: ~f~%" (-> this cloud))
  (format #t "~1Tfog: ~f~%" (-> this fog))
  (label cfg-4)
  this
  )

;; definition of type mood-iweather
(deftype mood-iweather (structure)
  ((data  int32 2 :offset-assert   0)
   (cloud int32   :offset          0)
   (fog   int32   :offset          4)
   )
  :allow-misaligned
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type mood-iweather
(defmethod inspect mood-iweather ((this mood-iweather))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-iweather)
  (format #t "~1Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~1Tcloud: ~D~%" (-> this cloud))
  (format #t "~1Tfog: ~D~%" (-> this fog))
  (label cfg-4)
  this
  )

;; definition of type mood-range
(deftype mood-range (structure)
  ((data      float   4 :offset-assert   0)
   (min-cloud float     :offset          0)
   (max-cloud float     :offset          4)
   (min-fog   float     :offset          8)
   (max-fog   float     :offset         12)
   (quad      uint128   :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type mood-range
;; INFO: Used lq/sq
(defmethod inspect mood-range ((this mood-range))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-range)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (format #t "~1Tmin-cloud: ~f~%" (-> this min-cloud))
  (format #t "~1Tmax-cloud: ~f~%" (-> this max-cloud))
  (format #t "~1Tmin-fog: ~f~%" (-> this min-fog))
  (format #t "~1Tmax-fog: ~f~%" (-> this max-fog))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (label cfg-4)
  this
  )

;; definition of type mood-filters-table
(deftype mood-filters-table (structure)
  ((data vector 8 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type mood-filters-table
(defmethod inspect mood-filters-table ((this mood-filters-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-filters-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-table
(deftype mood-table (basic)
  ((mood-fog-table       mood-fog-table        :offset-assert   4)
   (mood-color-table     mood-color-table      :offset-assert   8)
   (mood-channel-group   mood-channel-group    :offset-assert  12)
   (mood-direction-table mood-direction-table  :offset-assert  16)
   (mood-sky-table       mood-sky-table        :offset-assert  20)
   (mood-interp-table    sky-color-day         :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type mood-table
(defmethod inspect mood-table ((this mood-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> this mood-fog-table))
  (format #t "~1Tmood-color-table: #<mood-color-table @ #x~X>~%" (-> this mood-color-table))
  (format #t "~1Tmood-channel-group: #<mood-channel-group @ #x~X>~%" (-> this mood-channel-group))
  (format #t "~1Tmood-direction-table: #<mood-direction-table @ #x~X>~%" (-> this mood-direction-table))
  (format #t "~1Tmood-sky-table: #<mood-sky-table @ #x~X>~%" (-> this mood-sky-table))
  (format #t "~1Tmood-interp-table: ~A~%" (-> this mood-interp-table))
  (label cfg-4)
  this
  )

;; definition of type mood-context-core
(deftype mood-context-core (structure)
  ((current-fog          mood-fog :inline :offset-assert   0)
   (current-sky-color    vector   :inline :offset-assert  48)
   (current-env-color    vector   :inline :offset-assert  64)
   (current-prt-color    vector   :inline :offset-assert  80)
   (current-shadow-color vector   :inline :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type mood-context-core
(defmethod inspect mood-context-core ((this mood-context-core))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context-core)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (label cfg-4)
  this
  )

;; definition of type mood-context-core2
(deftype mood-context-core2 (mood-context-core)
  ((light-group light-group 8 :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x670
  :flag-assert         #x900000670
  )

;; definition for method 3 of type mood-context-core2
(defmethod inspect mood-context-core2 ((this mood-context-core2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context-core2)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (label cfg-4)
  this
  )

;; definition of type mood-context-core3
(deftype mood-context-core3 (mood-context-core2)
  ((times vector 8 :inline :offset-assert 1648)
   )
  :method-count-assert 9
  :size-assert         #x6f0
  :flag-assert         #x9000006f0
  )

;; definition for method 3 of type mood-context-core3
(defmethod inspect mood-context-core3 ((this mood-context-core3))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context-core3)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> this times))
  (label cfg-4)
  this
  )

;; definition of type mood-context
(deftype mood-context (mood-context-core3)
  "`state` holds an arbitrary state structure, ie `[[sewer-states]]` and is used
when updating the mood.  This means that an individual state structure must be less than 128 bytes"
  ((itimes vector4w 4 :inline :offset-assert 1776)
   (state  uint32   32        :offset-assert 1840)
   (data   uint128  123       :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x7b0
  :flag-assert         #x9000007b0
  )

;; definition for method 3 of type mood-context
(defmethod inspect mood-context ((this mood-context))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> this times))
  (format #t "~1Titimes[4] @ #x~X~%" (-> this itimes))
  (format #t "~1Tstate[32] @ #x~X~%" (-> this state))
  (label cfg-4)
  this
  )

;; definition of type mood-control-work
(deftype mood-control-work (structure)
  ((weather        mood-weather  :inline :offset-assert   0)
   (iweather       mood-iweather :inline :offset-assert   8)
   (interp         mood-weather  :inline :offset-assert  16)
   (index          int32         4       :offset-assert  24)
   (color-interp   float                 :offset-assert  40)
   (color-index    int32         2       :offset-assert  44)
   (channel-interp float                 :offset-assert  52)
   (channel-index  int32         2       :offset-assert  56)
   (cloud-interp   float                 :offset-assert  64)
   (cloud-index    int32         2       :offset-assert  68)
   )
  :method-count-assert 9
  :size-assert         #x4c
  :flag-assert         #x90000004c
  )

;; definition for method 3 of type mood-control-work
(defmethod inspect mood-control-work ((this mood-control-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-control-work)
  (format #t "~1Tweather: #<mood-weather @ #x~X>~%" (-> this weather))
  (format #t "~1Tiweather: #<mood-iweather @ #x~X>~%" (-> this iweather))
  (format #t "~1Tinterp: #<mood-weather @ #x~X>~%" (-> this interp))
  (format #t "~1Tindex[4] @ #x~X~%" (-> this index))
  (format #t "~1Tcolor-interp: ~f~%" (-> this color-interp))
  (format #t "~1Tcolor-index[2] @ #x~X~%" (-> this color-index))
  (format #t "~1Tchannel-interp: ~f~%" (-> this channel-interp))
  (format #t "~1Tchannel-index[2] @ #x~X~%" (-> this channel-index))
  (format #t "~1Tcloud-interp: ~f~%" (-> this cloud-interp))
  (format #t "~1Tcloud-index[2] @ #x~X~%" (-> this cloud-index))
  (label cfg-4)
  this
  )

;; definition of type mood-control
(deftype mood-control (mood-table)
  ((mood-clouds           mood-clouds                :offset-assert  28)
   (current-interp        mood-weather       :inline :offset-assert  32)
   (target-interp         mood-weather       :inline :offset-assert  40)
   (speed-interp          mood-weather       :inline :offset-assert  48)
   (range                 mood-range         :inline :offset-assert  64)
   (time-until-random     mood-weather       :inline :offset-assert  80)
   (time-until-random-min mood-weather       :inline :offset-assert  88)
   (time-until-random-max mood-weather       :inline :offset-assert  96)
   (display-flag          symbol                     :offset-assert 104)
   (overide-weather-flag  symbol                     :offset-assert 108)
   (overide               mood-weather       :inline :offset-assert 112)
   (lightning-index       int32                      :offset-assert 120)
   (lightning-val         int32                      :offset-assert 124)
   (lightning-time        int32                      :offset-assert 128)
   (lightning-time2       float                      :offset-assert 132)
   (lightning-flash       float                      :offset-assert 136)
   (lightning-id          sound-id                   :offset-assert 140)
   (lightning-count0      uint32                     :offset-assert 144)
   (lightning-count1      uint32                     :offset-assert 148)
   (lightning-count2      uint32                     :offset-assert 152)
   (rain-id               sound-id                   :offset-assert 156)
   (sound-pitch           float                      :offset-assert 160)
   (fogs                  mood-fog-table     9       :offset-assert 164)
   (colors                mood-color-table   3       :offset-assert 200)
   (channels              mood-channel-group 3       :offset-assert 212)
   (clouds                mood-clouds        9       :offset-assert 224)
   )
  :method-count-assert 19
  :size-assert         #x104
  :flag-assert         #x1300000104
  (:methods
    (init-weather! (_type_) none :behavior process 9)
    (update-mood-weather! (_type_ float float float float) none 10)
    (update-mood-range! (_type_ float float float float) none 11)
    (set-time-for-random-weather! (_type_ float float) none 12)
    (apply-mood-clouds-and-fog (_type_ mood-control-work) none 13)
    (apply-mood-color (_type_ mood-control-work) none 14)
    (apply-mood-channels (_type_ mood-control-work) none 15)
    (adjust-num-clouds! (_type_ mood-control-work) none 16)
    (gen-lightning-and-thunder! (_type_) number 17)
    (play-or-stop-lightning! (_type_ sound-spec vector) sound-id 18)
    )
  )

;; definition for method 3 of type mood-control
(defmethod inspect mood-control ((this mood-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> this mood-fog-table))
  (format #t "~1Tmood-color-table: #<mood-color-table @ #x~X>~%" (-> this mood-color-table))
  (format #t "~1Tmood-channel-group: #<mood-channel-group @ #x~X>~%" (-> this mood-channel-group))
  (format #t "~1Tmood-direction-table: #<mood-direction-table @ #x~X>~%" (-> this mood-direction-table))
  (format #t "~1Tmood-sky-table: #<mood-sky-table @ #x~X>~%" (-> this mood-sky-table))
  (format #t "~1Tmood-interp-table: ~A~%" (-> this mood-interp-table))
  (format #t "~1Tmood-clouds: #<mood-clouds @ #x~X>~%" (-> this mood-clouds))
  (format #t "~1Tcurrent-interp: #<mood-weather @ #x~X>~%" (-> this current-interp))
  (format #t "~1Ttarget-interp: #<mood-weather @ #x~X>~%" (-> this target-interp))
  (format #t "~1Tspeed-interp: #<mood-weather @ #x~X>~%" (-> this speed-interp))
  (format #t "~1Trange: #<mood-range @ #x~X>~%" (-> this range))
  (format #t "~1Ttime-until-random: #<mood-weather @ #x~X>~%" (-> this time-until-random))
  (format #t "~1Ttime-until-random-min: #<mood-weather @ #x~X>~%" (-> this time-until-random-min))
  (format #t "~1Ttime-until-random-max: #<mood-weather @ #x~X>~%" (-> this time-until-random-max))
  (format #t "~1Tdisplay-flag: ~A~%" (-> this display-flag))
  (format #t "~1Toveride-weather-flag: ~A~%" (-> this overide-weather-flag))
  (format #t "~1Toveride: #<mood-weather @ #x~X>~%" (-> this overide))
  (format #t "~1Tlightning-index: ~D~%" (-> this lightning-index))
  (format #t "~1Tlightning-val: ~D~%" (-> this lightning-val))
  (format #t "~1Tlightning-time: ~D~%" (-> this lightning-time))
  (format #t "~1Tlightning-time2: ~f~%" (-> this lightning-time2))
  (format #t "~1Tlightning-flash: ~f~%" (-> this lightning-flash))
  (format #t "~1Tlightning-id: ~D~%" (-> this lightning-id))
  (format #t "~1Tlightning-count0: ~D~%" (-> this lightning-count0))
  (format #t "~1Tlightning-count1: ~D~%" (-> this lightning-count1))
  (format #t "~1Tlightning-count2: ~D~%" (-> this lightning-count2))
  (format #t "~1Train-id: ~D~%" (-> this rain-id))
  (format #t "~1Tsound-pitch: ~f~%" (-> this sound-pitch))
  (format #t "~1Tfogs[9] @ #x~X~%" (-> this fogs))
  (format #t "~1Tcolors[3] @ #x~X~%" (-> this colors))
  (format #t "~1Tchannels[3] @ #x~X~%" (-> this channels))
  (format #t "~1Tclouds[9] @ #x~X~%" (-> this clouds))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
