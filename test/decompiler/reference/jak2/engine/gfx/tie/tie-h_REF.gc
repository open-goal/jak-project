;;-*-Lisp-*-
(in-package goal)

;; definition of type tie-fragment-debug
(deftype tie-fragment-debug (structure)
  ((num-tris    uint16                :offset-assert   0)
   (num-dverts  uint16                :offset-assert   2)
   (debug-lines (array vector-array)  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type tie-fragment-debug
(defmethod inspect tie-fragment-debug ((obj tie-fragment-debug))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'tie-fragment-debug)
  (format #t "~1Tnum-tris: ~D~%" (-> obj num-tris))
  (format #t "~1Tnum-dverts: ~D~%" (-> obj num-dverts))
  (format #t "~1Tdebug-lines: ~A~%" (-> obj debug-lines))
  (label cfg-4)
  obj
  )

;; definition of type tie-fragment
(deftype tie-fragment (drawable)
  ((gif-ref       (inline-array adgif-shader)  :offset   4)
   (point-ref     uint32                       :offset   8)
   (color-index   uint16                       :offset  12)
   (base-colors   uint8                        :offset  14)
   (tex-count     uint16                       :offset  32)
   (gif-count     uint16                       :offset  34)
   (vertex-count  uint16                       :offset  36)
   (color-count   uint16                       :offset  38)
   (dp-ref        uint32                       :offset  40)
   (dp-qwc        uint32                       :offset  44)
   (generic-ref   uint32                       :offset  48)
   (generic-count uint16                       :offset  52)
   (normal-count  uint16                       :offset  54)
   (normal-ref    uint32                       :offset  56)
   (debug         tie-fragment-debug           :offset  60)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

;; definition for method 3 of type tie-fragment
(defmethod inspect tie-fragment ((obj tie-fragment))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~1Tgif-ref: #x~X~%" (-> obj gif-ref))
  (format #t "~1Tpoint-ref: #x~X~%" (-> obj point-ref))
  (format #t "~1Tcolor-index: ~D~%" (-> obj color-index))
  (format #t "~1Tbase-colors: ~D~%" (-> obj base-colors))
  (format #t "~1Ttex-count: ~D~%" (-> obj tex-count))
  (format #t "~1Tgif-count: ~D~%" (-> obj gif-count))
  (format #t "~1Tvertex-count: ~D~%" (-> obj vertex-count))
  (format #t "~1Tcolor-count: ~D~%" (-> obj color-count))
  (format #t "~1Tdp-ref: #x~X~%" (-> obj dp-ref))
  (format #t "~1Tdp-qwc: ~D~%" (-> obj dp-qwc))
  (format #t "~1Tgeneric-ref: #x~X~%" (-> obj generic-ref))
  (format #t "~1Tgeneric-count: ~D~%" (-> obj generic-count))
  (format #t "~1Tnormal-count: ~D~%" (-> obj normal-count))
  (format #t "~1Tnormal-ref: #x~X~%" (-> obj normal-ref))
  (format #t "~1Tdebug: #<tie-fragment-debug @ #x~X>~%" (-> obj debug))
  (label cfg-4)
  obj
  )

;; definition of type instance-tie
(deftype instance-tie (instance)
  ((color-indices uint32                :offset   8)
   (bucket-ptr    prototype-bucket-tie  :offset  12)
   (max-scale     uint16                :offset  38)
   (rmin-scale    uint16                :offset  54)
   )
  :method-count-assert 17
  :size-assert         #x40
  :flag-assert         #x1100000040
  )

;; definition for method 3 of type instance-tie
(defmethod inspect instance-tie ((obj instance-tie))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~1Tbucket-index: ~D~%" (-> obj bucket-index))
  (format #t "~1Torigin: #<matrix4h @ #x~X>~%" (-> obj origin))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Twind-index: ~D~%" (-> obj wind-index))
  (format #t "~1Tcolor-indices: #x~X~%" (-> obj color-indices))
  (format #t "~1Tbucket-ptr: ~A~%" (-> obj bucket-ptr))
  (format #t "~1Tmax-scale: ~D~%" (-> obj max-scale))
  (format #t "~1Trmin-scale: ~D~%" (-> obj rmin-scale))
  (label cfg-4)
  obj
  )

;; definition of type drawable-inline-array-instance-tie
(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((data instance-tie 1 :inline :offset-assert  32)
   (pad  uint32                 :offset-assert  96)
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  )

;; definition of type drawable-tree-instance-tie
(deftype drawable-tree-instance-tie (drawable-tree)
  ((prototypes proxy-prototype-array-tie  :offset   8)
   )
  :method-count-assert 17
  :size-assert         #x20
  :flag-assert         #x1100000020
  )

;; definition for method 3 of type drawable-tree-instance-tie
(defmethod inspect drawable-tree-instance-tie ((obj drawable-tree-instance-tie))
  (when (not obj)
    (set! obj obj)
    (goto cfg-7)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> obj bsphere))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (dotimes (s5-0 (-> obj length))
    (format #t "~T  [~D]~1Tdata: ~A~%" s5-0 (-> obj data s5-0))
    )
  (format #t "~1Tprototypes: ~A~%" (-> obj prototypes))
  (label cfg-7)
  obj
  )

;; definition of type prototype-tie
(deftype prototype-tie (drawable-inline-array)
  ((data tie-fragment 1 :inline :offset-assert  32)
   (pad  uint32                 :offset-assert  96)
   )
  :method-count-assert 17
  :size-assert         #x64
  :flag-assert         #x1100000064
  )

;; definition of type tie-matrix
(deftype tie-matrix (structure)
  ((mat          matrix :inline :offset-assert   0)
   (morph        qword  :inline :offset-assert  64)
   (fog          qword  :inline :offset-assert  80)
   (envmap-flag  uint32         :offset         80)
   (guard-flag   uint32         :offset         84)
   (vertex-alpha float          :offset         88)
   (fog-value    float          :offset         92)
   (fixed-alpha  float          :offset         68)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; definition for method 3 of type tie-matrix
(defmethod inspect tie-matrix ((obj tie-matrix))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'tie-matrix)
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> obj mat))
  (format #t "~1Tmorph: #<qword @ #x~X>~%" (-> obj morph))
  (format #t "~1Tfog: #<qword @ #x~X>~%" (-> obj fog))
  (format #t "~1Tenvmap-flag: ~D~%" (-> obj envmap-flag))
  (format #t "~1Tguard-flag: ~D~%" (-> obj guard-flag))
  (format #t "~1Tvertex-alpha: ~f~%" (-> obj vertex-alpha))
  (format #t "~1Tfog-value: ~f~%" (-> obj fog-value))
  (format #t "~1Tfixed-alpha: ~f~%" (-> obj fixed-alpha))
  (label cfg-4)
  obj
  )

;; definition of type instance-tie-work
(deftype instance-tie-work (structure)
  ((wind-const                     vector     :inline   :offset-assert   0)
   (hmge-d                         vector     :inline   :offset-assert  16)
   (hvdf-offset                    vector     :inline   :offset-assert  32)
   (wind-force                     vector     :inline   :offset-assert  48)
   (constant                       vector     :inline   :offset-assert  64)
   (far-morph                      vector     :inline   :offset-assert  80)
   (dist-test                      vector     :inline   :offset-assert  96)
   (min-dist                       vector     :inline   :offset-assert 112)
   (guard-plane                    plane      4 :inline :offset-assert 128)
   (upload-color-0                 dma-packet :inline   :offset-assert 192)
   (upload-color-1                 dma-packet :inline   :offset-assert 208)
   (upload-color-2                 dma-packet :inline   :offset-assert 224)
   (upload-color-ret               dma-packet :inline   :offset-assert 240)
   (upload-color-temp              dma-packet :inline   :offset-assert 256)
   (generic-color-0                dma-packet :inline   :offset-assert 272)
   (generic-color-1                dma-packet :inline   :offset-assert 288)
   (generic-color-end              dma-packet :inline   :offset-assert 304)
   (envmap-color-0                 dma-packet :inline   :offset-assert 320)
   (envmap-color-1                 dma-packet :inline   :offset-assert 336)
   (tie-scissor-perspective-matrix matrix     :inline   :offset-assert 352)
   (tod-env-color                  vector     :inline   :offset-assert 416)
   (morph-temp                     vector     :inline   :offset-assert 432)
   (fog-temp                       vector     :inline   :offset-assert 448)
   (fade-temp                      float                :offset-assert 464)
   (wind-vectors                   uint32               :offset-assert 468)
   (test-id                        uint32               :offset-assert 472)
   (test-id2                       uint32               :offset-assert 476)
   (dma-buffer                     basic                :offset-assert 480)
   (to-spr                         uint32               :offset-assert 484)
   (from-spr                       uint32               :offset-assert 488)
   (wind-work                      uint32               :offset-assert 492)
   (cur-vis-bits                   uint32               :offset-assert 496)
   (end-vis-bits                   uint32               :offset-assert 500)
   (refl-fade-fac                  float                :offset-assert 504)
   (refl-fade-end                  float                :offset-assert 508)
   (flags                          uint32               :offset-assert 512)
   (vanish-flag                    uint32               :offset-assert 516)
   (translucent-flag               uint32               :offset-assert 520)
   (wait-from-spr                  uint32               :offset-assert 524)
   (wait-to-spr                    uint32               :offset-assert 528)
   (use-etie                       basic                :offset-assert 532)
   (buffer-start                   uint32               :offset-assert 536)
   (buffer-end                     uint32               :offset-assert 540)
   (tfrag-dists                    uint32               :offset-assert 544)
   (alpha-dists                    uint32               :offset-assert 548)
   (water-dists                    uint32               :offset-assert 552)
   )
  :method-count-assert 9
  :size-assert         #x22c
  :flag-assert         #x90000022c
  )

;; definition for method 3 of type instance-tie-work
(defmethod inspect instance-tie-work ((obj instance-tie-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'instance-tie-work)
  (format #t "~1Twind-const: #<vector @ #x~X>~%" (-> obj wind-const))
  (format #t "~1Thmge-d: #<vector @ #x~X>~%" (-> obj hmge-d))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> obj hvdf-offset))
  (format #t "~1Twind-force: #<vector @ #x~X>~%" (-> obj wind-force))
  (format #t "~1Tconstant: #<vector @ #x~X>~%" (-> obj constant))
  (format #t "~1Tfar-morph: #<vector @ #x~X>~%" (-> obj far-morph))
  (format #t "~1Tdist-test: #<vector @ #x~X>~%" (-> obj dist-test))
  (format #t "~1Tmin-dist: #<vector @ #x~X>~%" (-> obj min-dist))
  (format #t "~1Tguard-plane[4] @ #x~X~%" (-> obj guard-plane))
  (format #t "~1Tupload-color-0: #<dma-packet @ #x~X>~%" (-> obj upload-color-0))
  (format #t "~1Tupload-color-1: #<dma-packet @ #x~X>~%" (-> obj upload-color-1))
  (format #t "~1Tupload-color-2: #<dma-packet @ #x~X>~%" (-> obj upload-color-2))
  (format #t "~1Tupload-color-ret: #<dma-packet @ #x~X>~%" (-> obj upload-color-ret))
  (format #t "~1Tupload-color-temp: #<dma-packet @ #x~X>~%" (-> obj upload-color-temp))
  (format #t "~1Tgeneric-color-0: #<dma-packet @ #x~X>~%" (-> obj generic-color-0))
  (format #t "~1Tgeneric-color-1: #<dma-packet @ #x~X>~%" (-> obj generic-color-1))
  (format #t "~1Tgeneric-color-end: #<dma-packet @ #x~X>~%" (-> obj generic-color-end))
  (format #t "~1Tenvmap-color-0: #<dma-packet @ #x~X>~%" (-> obj envmap-color-0))
  (format #t "~1Tenvmap-color-1: #<dma-packet @ #x~X>~%" (-> obj envmap-color-1))
  (format #t "~1Ttie-scissor-perspective-matrix: #<matrix @ #x~X>~%" (-> obj tie-scissor-perspective-matrix))
  (format #t "~1Ttod-env-color: #<vector @ #x~X>~%" (-> obj tod-env-color))
  (format #t "~1Tmorph-temp: #<vector @ #x~X>~%" (-> obj morph-temp))
  (format #t "~1Tfog-temp: #<vector @ #x~X>~%" (-> obj fog-temp))
  (format #t "~1Tfade-temp: ~f~%" (-> obj fade-temp))
  (format #t "~1Twind-vectors: #x~X~%" (-> obj wind-vectors))
  (format #t "~1Ttest-id: ~D~%" (-> obj test-id))
  (format #t "~1Ttest-id2: ~D~%" (-> obj test-id2))
  (format #t "~1Tdma-buffer: ~A~%" (-> obj dma-buffer))
  (format #t "~1Tto-spr: ~D~%" (-> obj to-spr))
  (format #t "~1Tfrom-spr: ~D~%" (-> obj from-spr))
  (format #t "~1Twind-work: ~D~%" (-> obj wind-work))
  (format #t "~1Tcur-vis-bits: ~D~%" (-> obj cur-vis-bits))
  (format #t "~1Tend-vis-bits: ~D~%" (-> obj end-vis-bits))
  (format #t "~1Trefl-fade-fac: ~f~%" (-> obj refl-fade-fac))
  (format #t "~1Trefl-fade-end: ~f~%" (-> obj refl-fade-end))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tvanish-flag: ~D~%" (-> obj vanish-flag))
  (format #t "~1Ttranslucent-flag: ~D~%" (-> obj translucent-flag))
  (format #t "~1Twait-from-spr: ~D~%" (-> obj wait-from-spr))
  (format #t "~1Twait-to-spr: ~D~%" (-> obj wait-to-spr))
  (format #t "~1Tuse-etie: ~A~%" (-> obj use-etie))
  (format #t "~1Tbuffer-start: #x~X~%" (-> obj buffer-start))
  (format #t "~1Tbuffer-end: #x~X~%" (-> obj buffer-end))
  (format #t "~1Ttfrag-dists: #x~X~%" (-> obj tfrag-dists))
  (format #t "~1Talpha-dists: #x~X~%" (-> obj alpha-dists))
  (format #t "~1Twater-dists: #x~X~%" (-> obj water-dists))
  (label cfg-4)
  obj
  )

;; definition of type instance-tie-dma
(deftype instance-tie-dma (structure)
  ((banka instance-tie      32 :inline :offset-assert   0)
   (bankb instance-tie      32 :inline :offset-assert 2048)
   (outa  uint128           256        :offset-assert 4096)
   (outb  uint128           256        :offset-assert 8192)
   (work  instance-tie-work :dynamic   :offset-assert 12288)
   )
  :method-count-assert 9
  :size-assert         #x3000
  :flag-assert         #x900003000
  )

;; definition for method 3 of type instance-tie-dma
(defmethod inspect instance-tie-dma ((obj instance-tie-dma))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'instance-tie-dma)
  (format #t "~1Tbanka[32] @ #x~X~%" (-> obj banka))
  (format #t "~1Tbankb[32] @ #x~X~%" (-> obj bankb))
  (format #t "~1Touta[256] @ #x~X~%" (-> obj outa))
  (format #t "~1Toutb[256] @ #x~X~%" (-> obj outb))
  (format #t "~1Twork: #<instance-tie-work @ #x~X>~%" (-> obj work 0))
  (label cfg-4)
  obj
  )

;; definition of type prototype-tie-work
(deftype prototype-tie-work (structure)
  ((upload-flushe              dma-packet   :inline :offset-assert   0)
   (upload-palette             dma-packet   :inline :offset-assert  16)
   (upload-model-0             dma-packet   :inline :offset-assert  32)
   (upload-model-1             dma-packet   :inline :offset-assert  48)
   (upload-model-2             dma-packet   :inline :offset-assert  64)
   (upload-model-3             dma-packet   :inline :offset-assert  80)
   (upload-model-near-0        dma-packet   :inline :offset-assert  96)
   (upload-model-near-1        dma-packet   :inline :offset-assert 112)
   (upload-model-near-2        dma-packet   :inline :offset-assert 128)
   (upload-model-near-3        dma-packet   :inline :offset-assert 144)
   (upload-model-near-4        dma-packet   :inline :offset-assert 160)
   (envmap-palette             dma-packet   :inline :offset-assert 176)
   (envmap-shader              dma-packet   :inline :offset-assert 192)
   (upload-envmap-0            dma-packet   :inline :offset-assert 208)
   (upload-envmap-1            dma-packet   :inline :offset-assert 224)
   (upload-envmap-2            dma-packet   :inline :offset-assert 240)
   (upload-envmap-3            dma-packet   :inline :offset-assert 256)
   (upload-envmap-4            dma-packet   :inline :offset-assert 272)
   (upload-envmap-scissor-4    dma-packet   :inline :offset-assert 288)
   (generic-palette            dma-packet   :inline :offset-assert 304)
   (generic-model-0            dma-packet   :inline :offset-assert 320)
   (generic-model-1            dma-packet   :inline :offset-assert 336)
   (generic-model-2            dma-packet   :inline :offset-assert 352)
   (model-next                 dma-packet   :inline :offset-assert 368)
   (clamp                      uint64               :offset-assert 384)
   (prototype-array            basic                :offset-assert 392)
   (wait-from-spr              uint32               :offset-assert 396)
   (wait-to-spr                uint32               :offset-assert 400)
   (mood                       mood-context         :offset-assert 404)
   (last                       uint32       16      :offset        416)
   (next                       uint32       16      :offset-assert 480)
   (count                      uint16       16      :offset-assert 544)
   (tie-last                   uint32               :offset        416)
   (tie-next                   uint32               :offset        480)
   (tie-count                  uint16               :offset        544)
   (trans-last                 uint32               :offset        420)
   (trans-next                 uint32               :offset        484)
   (trans-count                uint16               :offset        546)
   (water-last                 uint32               :offset        424)
   (water-next                 uint32               :offset        488)
   (water-count                uint16               :offset        548)
   (scissor-last               uint32               :offset        428)
   (scissor-next               uint32               :offset        492)
   (scissor-count              uint16               :offset        550)
   (scissor-trans-last         uint32               :offset        432)
   (scissor-trans-next         uint32               :offset        496)
   (scissor-trans-count        uint16               :offset        552)
   (scissor-water-last         uint32               :offset        436)
   (scissor-water-next         uint32               :offset        500)
   (scissor-water-count        uint16               :offset        554)
   (envmap-last                uint32               :offset        440)
   (envmap-next                uint32               :offset        504)
   (envmap-count               uint16               :offset        556)
   (envmap-trans-last          uint32               :offset        444)
   (envmap-trans-next          uint32               :offset        508)
   (envmap-trans-count         uint16               :offset        558)
   (envmap-water-last          uint32               :offset        448)
   (envmap-water-next          uint32               :offset        512)
   (envmap-water-count         uint16               :offset        560)
   (envmap-scissor-last        uint32               :offset        452)
   (envmap-scissor-next        uint32               :offset        516)
   (envmap-scissor-count       uint16               :offset        562)
   (envmap-scissor-trans-last  uint32               :offset        456)
   (envmap-scissor-trans-next  uint32               :offset        520)
   (envmap-scissor-trans-count uint16               :offset        564)
   (envmap-scissor-water-last  uint32               :offset        460)
   (envmap-scissor-water-next  uint32               :offset        524)
   (envmap-scissor-water-count uint16               :offset        566)
   (generic-last               uint32               :offset        464)
   (generic-next               uint32               :offset        528)
   (generic-count              uint16               :offset        568)
   (generic-trans-last         uint32               :offset        468)
   (generic-trans-next         uint32               :offset        532)
   (generic-trans-count        uint16               :offset        570)
   (generic-water-last         uint32               :offset        472)
   (generic-water-next         uint32               :offset        536)
   (generic-water-count        uint16               :offset        572)
   (vanish-last                uint32               :offset        476)
   (vanish-next                uint32               :offset        540)
   (vanish-count               uint16               :offset        574)
   )
  :method-count-assert 9
  :size-assert         #x240
  :flag-assert         #x900000240
  )

;; definition for method 3 of type prototype-tie-work
(defmethod inspect prototype-tie-work ((obj prototype-tie-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'prototype-tie-work)
  (format #t "~1Tupload-flushe: #<dma-packet @ #x~X>~%" (-> obj upload-flushe))
  (format #t "~1Tupload-palette: #<dma-packet @ #x~X>~%" (-> obj upload-palette))
  (format #t "~1Tupload-model-0: #<dma-packet @ #x~X>~%" (-> obj upload-model-0))
  (format #t "~1Tupload-model-1: #<dma-packet @ #x~X>~%" (-> obj upload-model-1))
  (format #t "~1Tupload-model-2: #<dma-packet @ #x~X>~%" (-> obj upload-model-2))
  (format #t "~1Tupload-model-3: #<dma-packet @ #x~X>~%" (-> obj upload-model-3))
  (format #t "~1Tupload-model-near-0: #<dma-packet @ #x~X>~%" (-> obj upload-model-near-0))
  (format #t "~1Tupload-model-near-1: #<dma-packet @ #x~X>~%" (-> obj upload-model-near-1))
  (format #t "~1Tupload-model-near-2: #<dma-packet @ #x~X>~%" (-> obj upload-model-near-2))
  (format #t "~1Tupload-model-near-3: #<dma-packet @ #x~X>~%" (-> obj upload-model-near-3))
  (format #t "~1Tupload-model-near-4: #<dma-packet @ #x~X>~%" (-> obj upload-model-near-4))
  (format #t "~1Tenvmap-palette: #<dma-packet @ #x~X>~%" (-> obj envmap-palette))
  (format #t "~1Tenvmap-shader: #<dma-packet @ #x~X>~%" (-> obj envmap-shader))
  (format #t "~1Tupload-envmap-0: #<dma-packet @ #x~X>~%" (-> obj upload-envmap-0))
  (format #t "~1Tupload-envmap-1: #<dma-packet @ #x~X>~%" (-> obj upload-envmap-1))
  (format #t "~1Tupload-envmap-2: #<dma-packet @ #x~X>~%" (-> obj upload-envmap-2))
  (format #t "~1Tupload-envmap-3: #<dma-packet @ #x~X>~%" (-> obj upload-envmap-3))
  (format #t "~1Tupload-envmap-4: #<dma-packet @ #x~X>~%" (-> obj upload-envmap-4))
  (format #t "~1Tupload-envmap-scissor-4: #<dma-packet @ #x~X>~%" (-> obj upload-envmap-scissor-4))
  (format #t "~1Tgeneric-palette: #<dma-packet @ #x~X>~%" (-> obj generic-palette))
  (format #t "~1Tgeneric-model-0: #<dma-packet @ #x~X>~%" (-> obj generic-model-0))
  (format #t "~1Tgeneric-model-1: #<dma-packet @ #x~X>~%" (-> obj generic-model-1))
  (format #t "~1Tgeneric-model-2: #<dma-packet @ #x~X>~%" (-> obj generic-model-2))
  (format #t "~1Tmodel-next: #<dma-packet @ #x~X>~%" (-> obj model-next))
  (format #t "~1Tclamp: ~D~%" (-> obj clamp))
  (format #t "~1Tprototype-array: ~A~%" (-> obj prototype-array))
  (format #t "~1Twait-from-spr: ~D~%" (-> obj wait-from-spr))
  (format #t "~1Twait-to-spr: ~D~%" (-> obj wait-to-spr))
  (format #t "~1Tmood: #<mood-context @ #x~X>~%" (-> obj mood))
  (format #t "~1Tlast[16] @ #x~X~%" (-> obj last))
  (format #t "~1Tnext[16] @ #x~X~%" (-> obj next))
  (format #t "~1Tcount[16] @ #x~X~%" (-> obj count))
  (format #t "~1Ttie-last: #x~X~%" (-> obj tie-last))
  (format #t "~1Ttie-next: #x~X~%" (-> obj tie-next))
  (format #t "~1Ttie-count: ~D~%" (-> obj tie-count))
  (format #t "~1Ttrans-last: #x~X~%" (-> obj trans-last))
  (format #t "~1Ttrans-next: #x~X~%" (-> obj trans-next))
  (format #t "~1Ttrans-count: ~D~%" (-> obj trans-count))
  (format #t "~1Twater-last: #x~X~%" (-> obj water-last))
  (format #t "~1Twater-next: #x~X~%" (-> obj water-next))
  (format #t "~1Twater-count: ~D~%" (-> obj water-count))
  (format #t "~1Tscissor-last: #x~X~%" (-> obj scissor-last))
  (format #t "~1Tscissor-next: #x~X~%" (-> obj scissor-next))
  (format #t "~1Tscissor-count: ~D~%" (-> obj scissor-count))
  (format #t "~1Tscissor-trans-last: #x~X~%" (-> obj scissor-trans-last))
  (format #t "~1Tscissor-trans-next: #x~X~%" (-> obj scissor-trans-next))
  (format #t "~1Tscissor-trans-count: ~D~%" (-> obj scissor-trans-count))
  (format #t "~1Tscissor-water-last: #x~X~%" (-> obj scissor-water-last))
  (format #t "~1Tscissor-water-next: #x~X~%" (-> obj scissor-water-next))
  (format #t "~1Tscissor-water-count: ~D~%" (-> obj scissor-water-count))
  (format #t "~1Tenvmap-last: #x~X~%" (-> obj envmap-last))
  (format #t "~1Tenvmap-next: #x~X~%" (-> obj envmap-next))
  (format #t "~1Tenvmap-count: ~D~%" (-> obj envmap-count))
  (format #t "~1Tenvmap-trans-last: #x~X~%" (-> obj envmap-trans-last))
  (format #t "~1Tenvmap-trans-next: #x~X~%" (-> obj envmap-trans-next))
  (format #t "~1Tenvmap-trans-count: ~D~%" (-> obj envmap-trans-count))
  (format #t "~1Tenvmap-water-last: #x~X~%" (-> obj envmap-water-last))
  (format #t "~1Tenvmap-water-next: #x~X~%" (-> obj envmap-water-next))
  (format #t "~1Tenvmap-water-count: ~D~%" (-> obj envmap-water-count))
  (format #t "~1Tenvmap-scissor-last: #x~X~%" (-> obj envmap-scissor-last))
  (format #t "~1Tenvmap-scissor-next: #x~X~%" (-> obj envmap-scissor-next))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> obj envmap-scissor-count))
  (format #t "~1Tenvmap-scissor-trans-last: #x~X~%" (-> obj envmap-scissor-trans-last))
  (format #t "~1Tenvmap-scissor-trans-next: #x~X~%" (-> obj envmap-scissor-trans-next))
  (format #t "~1Tenvmap-scissor-trans-count: ~D~%" (-> obj envmap-scissor-trans-count))
  (format #t "~1Tenvmap-scissor-water-last: #x~X~%" (-> obj envmap-scissor-water-last))
  (format #t "~1Tenvmap-scissor-water-next: #x~X~%" (-> obj envmap-scissor-water-next))
  (format #t "~1Tenvmap-scissor-water-count: ~D~%" (-> obj envmap-scissor-water-count))
  (format #t "~1Tgeneric-last: #x~X~%" (-> obj generic-last))
  (format #t "~1Tgeneric-next: #x~X~%" (-> obj generic-next))
  (format #t "~1Tgeneric-count: ~D~%" (-> obj generic-count))
  (format #t "~1Tgeneric-trans-last: #x~X~%" (-> obj generic-trans-last))
  (format #t "~1Tgeneric-trans-next: #x~X~%" (-> obj generic-trans-next))
  (format #t "~1Tgeneric-trans-count: ~D~%" (-> obj generic-trans-count))
  (format #t "~1Tgeneric-water-last: #x~X~%" (-> obj generic-water-last))
  (format #t "~1Tgeneric-water-next: #x~X~%" (-> obj generic-water-next))
  (format #t "~1Tgeneric-water-count: ~D~%" (-> obj generic-water-count))
  (format #t "~1Tvanish-last: #x~X~%" (-> obj vanish-last))
  (format #t "~1Tvanish-next: #x~X~%" (-> obj vanish-next))
  (format #t "~1Tvanish-count: ~D~%" (-> obj vanish-count))
  (label cfg-4)
  obj
  )

;; definition of type prototype-tie-dma
(deftype prototype-tie-dma (structure)
  ((colora               rgba    256 :offset-assert   0)
   (colorb               rgba    256 :offset-assert 1024)
   (outa                 uint128 256 :offset-assert 2048)
   (outb                 uint128 256 :offset-assert 6144)
   (geometry             uint32  4   :offset-assert 10240)
   (next                 uint32  12  :offset        10256)
   (count                uint16  12  :offset        10304)
   (counts               uint32  4   :offset        10328)
   (palette-ptr          uint32      :offset        10336)
   (model-ptr            uint32      :offset        10340)
   (ret-ptr              uint32      :offset        10344)
   (length               uint32      :offset        10348)
   (flags                uint32      :offset        10352)
   (dma-buffer           basic       :offset        10356)
   (this-frag-count      uint32      :offset        10360)
   (frag-count           uint8   4   :offset        10364)
   (from-spr             uint32      :offset        10368)
   (to-spr               uint32      :offset        10372)
   (spr-out              uint32      :offset        10376)
   (this-count           uint32      :offset        10380)
   (scissor-geometry     uint32      :offset        10240)
   (near-geometry        uint32      :offset        10244)
   (mid-geometry         uint32      :offset        10248)
   (far-geometry         uint32      :offset        10252)
   (scissor-frag-count   uint8       :offset        10364)
   (near-frag-count      uint8       :offset        10365)
   (mid-frag-count       uint8       :offset        10366)
   (far-frag-count       uint8       :offset        10367)
   (tie-scissor-next     uint32      :offset        10256)
   (tie-near-next        uint32      :offset        10260)
   (tie-mid-next         uint32      :offset        10264)
   (tie-far-next         uint32      :offset        10268)
   (trans-scissor-next   uint32  4   :offset        10256)
   (trans-near-next      uint32      :offset        10260)
   (trans-mid-next       uint32      :offset        10264)
   (trans-far-next       uint32      :offset        10268)
   (water-scissor-next   uint32  4   :offset        10256)
   (water-near-next      uint32      :offset        10260)
   (water-mid-next       uint32      :offset        10264)
   (water-far-next       uint32      :offset        10268)
   (envmap-scissor-next  uint32  4   :offset        10272)
   (envmap-near-next     uint32      :offset        10276)
   (envmap-mid-next      uint32      :offset        10280)
   (envmap-far-next      uint32      :offset        10284)
   (generic-near-next    uint32      :offset        10288)
   (generic-mid-next     uint32      :offset        10292)
   (generic-far-next     uint32      :offset        10296)
   (vanish-next          uint32      :offset        10300)
   (tie-count            uint16      :offset        10304)
   (tie-scissor-count    uint16      :offset        10304)
   (tie-near-count       uint16      :offset        10306)
   (tie-mid-count        uint16      :offset        10308)
   (tie-far-count        uint16      :offset        10310)
   (trans-count          uint16      :offset        10304)
   (trans-scissor-count  uint16      :offset        10304)
   (trans-near-count     uint16      :offset        10306)
   (trans-mid-count      uint16      :offset        10308)
   (trans-far-count      uint16      :offset        10310)
   (water-count          uint16      :offset        10304)
   (water-scissor-count  uint16      :offset        10304)
   (water-near-count     uint16      :offset        10306)
   (water-mid-count      uint16      :offset        10308)
   (water-far-count      uint16      :offset        10310)
   (envmap-count         uint16      :offset        10312)
   (envmap-scissor-count uint16      :offset        10312)
   (envmap-near-count    uint16      :offset        10314)
   (envmap-mid-count     uint16      :offset        10316)
   (envmap-far-count     uint16      :offset        10318)
   (generic-count        uint16      :offset        10320)
   (generic-near-count   uint16      :offset        10320)
   (generic-mid-count    uint16      :offset        10322)
   (generic-far-count    uint16      :offset        10324)
   (vanish-count         uint16      :offset        10326)
   (next-clear           uint32  3   :offset        10256)
   (count-clear          uint16  3   :offset        10304)
   )
  :method-count-assert 9
  :size-assert         #x2890
  :flag-assert         #x900002890
  )

;; definition for method 3 of type prototype-tie-dma
(defmethod inspect prototype-tie-dma ((obj prototype-tie-dma))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'prototype-tie-dma)
  (format #t "~1Tcolora[256] @ #x~X~%" (-> obj colora))
  (format #t "~1Tcolorb[256] @ #x~X~%" (-> obj colorb))
  (format #t "~1Touta[256] @ #x~X~%" (-> obj outa))
  (format #t "~1Toutb[256] @ #x~X~%" (-> obj outb))
  (format #t "~1Tgeometry[4] @ #x~X~%" (-> obj geometry))
  (format #t "~1Tnext[12] @ #x~X~%" (-> obj next))
  (format #t "~1Tcount[12] @ #x~X~%" (-> obj count))
  (format #t "~1Tcounts[4] @ #x~X~%" (-> obj counts))
  (format #t "~1Tpalette-ptr: #x~X~%" (-> obj palette-ptr))
  (format #t "~1Tmodel-ptr: #x~X~%" (-> obj model-ptr))
  (format #t "~1Tret-ptr: #x~X~%" (-> obj ret-ptr))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tdma-buffer: ~A~%" (-> obj dma-buffer))
  (format #t "~1Tthis-frag-count: ~D~%" (-> obj this-frag-count))
  (format #t "~1Tfrag-count[4] @ #x~X~%" (-> obj frag-count))
  (format #t "~1Tfrom-spr: #x~X~%" (-> obj from-spr))
  (format #t "~1Tto-spr: #x~X~%" (-> obj to-spr))
  (format #t "~1Tspr-out: #x~X~%" (-> obj spr-out))
  (format #t "~1Tthis-count: ~D~%" (-> obj this-count))
  (format #t "~1Tscissor-geometry: #x~X~%" (-> obj scissor-geometry))
  (format #t "~1Tnear-geometry: #x~X~%" (-> obj near-geometry))
  (format #t "~1Tmid-geometry: #x~X~%" (-> obj mid-geometry))
  (format #t "~1Tfar-geometry: #x~X~%" (-> obj far-geometry))
  (format #t "~1Tscissor-frag-count: ~D~%" (-> obj scissor-frag-count))
  (format #t "~1Tnear-frag-count: ~D~%" (-> obj near-frag-count))
  (format #t "~1Tmid-frag-count: ~D~%" (-> obj mid-frag-count))
  (format #t "~1Tfar-frag-count: ~D~%" (-> obj far-frag-count))
  (format #t "~1Ttie-scissor-next: #x~X~%" (-> obj tie-scissor-next))
  (format #t "~1Ttie-near-next: #x~X~%" (-> obj tie-near-next))
  (format #t "~1Ttie-mid-next: #x~X~%" (-> obj tie-mid-next))
  (format #t "~1Ttie-far-next: #x~X~%" (-> obj tie-far-next))
  (format #t "~1Ttrans-scissor-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Ttrans-near-next: #x~X~%" (-> obj tie-near-next))
  (format #t "~1Ttrans-mid-next: #x~X~%" (-> obj tie-mid-next))
  (format #t "~1Ttrans-far-next: #x~X~%" (-> obj tie-far-next))
  (format #t "~1Twater-scissor-next[4] @ #x~X~%" (-> obj next))
  (format #t "~1Twater-near-next: #x~X~%" (-> obj tie-near-next))
  (format #t "~1Twater-mid-next: #x~X~%" (-> obj tie-mid-next))
  (format #t "~1Twater-far-next: #x~X~%" (-> obj tie-far-next))
  (format #t "~1Tenvmap-scissor-next[4] @ #x~X~%" (-> obj envmap-scissor-next))
  (format #t "~1Tenvmap-near-next: #x~X~%" (-> obj envmap-near-next))
  (format #t "~1Tenvmap-mid-next: #x~X~%" (-> obj envmap-mid-next))
  (format #t "~1Tenvmap-far-next: #x~X~%" (-> obj envmap-far-next))
  (format #t "~1Tgeneric-near-next: #x~X~%" (-> obj generic-near-next))
  (format #t "~1Tgeneric-mid-next: #x~X~%" (-> obj generic-mid-next))
  (format #t "~1Tgeneric-far-next: #x~X~%" (-> obj generic-far-next))
  (format #t "~1Tvanish-next: #x~X~%" (-> obj vanish-next))
  (format #t "~1Ttie-count: ~D~%" (-> obj tie-count))
  (format #t "~1Ttie-scissor-count: ~D~%" (-> obj tie-count))
  (format #t "~1Ttie-near-count: ~D~%" (-> obj tie-near-count))
  (format #t "~1Ttie-mid-count: ~D~%" (-> obj tie-mid-count))
  (format #t "~1Ttie-far-count: ~D~%" (-> obj tie-far-count))
  (format #t "~1Ttrans-count: ~D~%" (-> obj tie-count))
  (format #t "~1Ttrans-scissor-count: ~D~%" (-> obj tie-count))
  (format #t "~1Ttrans-near-count: ~D~%" (-> obj tie-near-count))
  (format #t "~1Ttrans-mid-count: ~D~%" (-> obj tie-mid-count))
  (format #t "~1Ttrans-far-count: ~D~%" (-> obj tie-far-count))
  (format #t "~1Twater-count: ~D~%" (-> obj tie-count))
  (format #t "~1Twater-scissor-count: ~D~%" (-> obj tie-count))
  (format #t "~1Twater-near-count: ~D~%" (-> obj tie-near-count))
  (format #t "~1Twater-mid-count: ~D~%" (-> obj tie-mid-count))
  (format #t "~1Twater-far-count: ~D~%" (-> obj tie-far-count))
  (format #t "~1Tenvmap-count: ~D~%" (-> obj envmap-count))
  (format #t "~1Tenvmap-scissor-count: ~D~%" (-> obj envmap-count))
  (format #t "~1Tenvmap-near-count: ~D~%" (-> obj envmap-near-count))
  (format #t "~1Tenvmap-mid-count: ~D~%" (-> obj envmap-mid-count))
  (format #t "~1Tenvmap-far-count: ~D~%" (-> obj envmap-far-count))
  (format #t "~1Tgeneric-count: ~D~%" (-> obj generic-count))
  (format #t "~1Tgeneric-near-count: ~D~%" (-> obj generic-count))
  (format #t "~1Tgeneric-mid-count: ~D~%" (-> obj generic-mid-count))
  (format #t "~1Tgeneric-far-count: ~D~%" (-> obj generic-far-count))
  (format #t "~1Tvanish-count: ~D~%" (-> obj vanish-count))
  (format #t "~1Tnext-clear[3] @ #x~X~%" (-> obj next))
  (format #t "~1Tcount-clear[3] @ #x~X~%" (-> obj count))
  (label cfg-4)
  obj
  )

;; definition for symbol *instance-tie-work-copy*, type instance-tie-work
(define *instance-tie-work-copy* (the-as instance-tie-work #f))

;; failed to figure out what this is:
0




