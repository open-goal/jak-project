;;-*-Lisp-*-
(in-package goal)

;; definition of type generic-tie-instance
(deftype generic-tie-instance (structure)
  ((matrix-tag  dma-packet :inline   :offset-assert   0)
   (matrix-data vector     6 :inline :offset-assert  16)
   (index-tag   dma-packet :inline   :offset-assert 112)
   (indices     uint8      224       :offset-assert 128)
   (end-tag     dma-packet :inline   :offset-assert 352)
   )
  :method-count-assert 9
  :size-assert         #x170
  :flag-assert         #x900000170
  )

;; definition for method 3 of type generic-tie-instance
(defmethod inspect generic-tie-instance ((obj generic-tie-instance))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-instance)
  (format #t "~1Tmatrix-tag: #<dma-packet @ #x~X>~%" (-> obj matrix-tag))
  (format #t "~1Tmatrix-data[6] @ #x~X~%" (-> obj matrix-data))
  (format #t "~1Tindex-tag: #<dma-packet @ #x~X>~%" (-> obj index-tag))
  (format #t "~1Tindices[224] @ #x~X~%" (-> obj indices))
  (format #t "~1Tend-tag: #<dma-packet @ #x~X>~%" (-> obj end-tag))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-input
(deftype generic-tie-input (structure)
  ((palette-tag dma-packet :inline     :offset-assert   0)
   (palette     rgba       128         :offset-assert  16)
   (model-tag   dma-packet :inline     :offset-assert 528)
   (model       vector     146 :inline :offset-assert 544)
   (matrix-tag  dma-packet :inline     :offset-assert 2880)
   (matrix-data vector     6 :inline   :offset-assert 2896)
   (index-tag   dma-packet :inline     :offset-assert 2992)
   (indices     uint8      224         :offset-assert 3008)
   (end-tag     dma-packet :inline     :offset-assert 3232)
   )
  :method-count-assert 9
  :size-assert         #xcb0
  :flag-assert         #x900000cb0
  )

;; definition for method 3 of type generic-tie-input
(defmethod inspect generic-tie-input ((obj generic-tie-input))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-input)
  (format #t "~1Tpalette-tag: #<dma-packet @ #x~X>~%" (-> obj palette-tag))
  (format #t "~1Tpalette[128] @ #x~X~%" (-> obj palette))
  (format #t "~1Tmodel-tag: #<dma-packet @ #x~X>~%" (-> obj model-tag))
  (format #t "~1Tmodel[146] @ #x~X~%" (-> obj model))
  (format #t "~1Tmatrix-tag: #<dma-packet @ #x~X>~%" (-> obj matrix-tag))
  (format #t "~1Tmatrix-data[6] @ #x~X~%" (-> obj matrix-data))
  (format #t "~1Tindex-tag: #<dma-packet @ #x~X>~%" (-> obj index-tag))
  (format #t "~1Tindices[224] @ #x~X~%" (-> obj indices))
  (format #t "~1Tend-tag: #<dma-packet @ #x~X>~%" (-> obj end-tag))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-run-control
(deftype generic-tie-run-control (structure)
  ((skip-bp2    uint8  :offset-assert   0)
   (skip-ips    uint8  :offset-assert   1)
   (gifbuf-skip uint8  :offset-assert   2)
   (strips      uint8  :offset-assert   3)
   (target-bp1  uint8  :offset-assert   4)
   (target-bp2  uint8  :offset-assert   5)
   (target-ip1  uint8  :offset-assert   6)
   (target-ip2  uint8  :offset-assert   7)
   (target-bps  uint8  :offset-assert   8)
   (target-ips  uint8  :offset-assert   9)
   (is-generic  uint8  :offset-assert  10)
   (reserved    uint8  :offset-assert  11)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type generic-tie-run-control
(defmethod inspect generic-tie-run-control ((obj generic-tie-run-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-run-control)
  (format #t "~1Tskip-bp2: ~D~%" (-> obj skip-bp2))
  (format #t "~1Tskip-ips: ~D~%" (-> obj skip-ips))
  (format #t "~1Tgifbuf-skip: ~D~%" (-> obj gifbuf-skip))
  (format #t "~1Tstrips: ~D~%" (-> obj strips))
  (format #t "~1Ttarget-bp1: ~D~%" (-> obj target-bp1))
  (format #t "~1Ttarget-bp2: ~D~%" (-> obj target-bp2))
  (format #t "~1Ttarget-ip1: ~D~%" (-> obj target-ip1))
  (format #t "~1Ttarget-ip2: ~D~%" (-> obj target-ip2))
  (format #t "~1Ttarget-bps: ~D~%" (-> obj target-bps))
  (format #t "~1Ttarget-ips: ~D~%" (-> obj target-ips))
  (format #t "~1Tis-generic: ~D~%" (-> obj is-generic))
  (format #t "~1Treserved: ~D~%" (-> obj reserved))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-base-point
(deftype generic-tie-base-point (structure)
  ((data uint16  8 :offset-assert   0)
   (quad uint128   :offset          0)
   (x    int16     :offset          0)
   (y    int16     :offset          2)
   (z    int16     :offset          4)
   (d0   int16     :offset          6)
   (vtx  uint64    :offset          0)
   (u    int16     :offset          8)
   (v    int16     :offset         10)
   (tex  uint32    :offset          8)
   (w    int16     :offset         12)
   (d1   int16     :offset         14)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type generic-tie-base-point
;; INFO: Used lq/sq
(defmethod inspect generic-tie-base-point ((obj generic-tie-base-point))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-base-point)
  (format #t "~1Tdata[8] @ #x~X~%" (-> obj data))
  (format #t "~1Tquad: ~D~%" (-> obj quad))
  (format #t "~1Tx: ~D~%" (-> obj x))
  (format #t "~1Ty: ~D~%" (-> obj y))
  (format #t "~1Tz: ~D~%" (-> obj z))
  (format #t "~1Td0: ~D~%" (-> obj d0))
  (format #t "~1Tvtx: ~D~%" (-> obj vtx))
  (format #t "~1Tu: ~D~%" (-> obj u))
  (format #t "~1Tv: ~D~%" (-> obj v))
  (format #t "~1Ttex: ~D~%" (-> obj tex))
  (format #t "~1Tw: ~D~%" (-> obj w))
  (format #t "~1Td1: ~D~%" (-> obj d1))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-bps
(deftype generic-tie-bps (structure)
  ((bp generic-tie-base-point 4 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type generic-tie-bps
(defmethod inspect generic-tie-bps ((obj generic-tie-bps))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-bps)
  (format #t "~1Tbp[4] @ #x~X~%" (-> obj bp))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-interp-point
(deftype generic-tie-interp-point (structure)
  ((data   uint16 12 :offset-assert   0)
   (x      int16     :offset          0)
   (y      int16     :offset          2)
   (z      int16     :offset          4)
   (d0     int16     :offset          6)
   (vtx0   uint64    :offset          0)
   (dx     int16     :offset          8)
   (dy     int16     :offset         10)
   (dz     int16     :offset         12)
   (unused int16     :offset         14)
   (vtx1   uint64    :offset          8)
   (u      int16     :offset         16)
   (v      int16     :offset         18)
   (tex    uint32    :offset         16)
   (w      int16     :offset         20)
   (d1     int16     :offset         22)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type generic-tie-interp-point
;; INFO: Used lq/sq
(defmethod inspect generic-tie-interp-point ((obj generic-tie-interp-point))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-interp-point)
  (format #t "~1Tdata[12] @ #x~X~%" (-> obj data))
  (format #t "~1Tquad: ~D~%" (-> (the-as (pointer uint128) obj) 0))
  (format #t "~1Tx: ~D~%" (-> obj x))
  (format #t "~1Ty: ~D~%" (-> obj y))
  (format #t "~1Tz: ~D~%" (-> obj z))
  (format #t "~1Td0: ~D~%" (-> obj d0))
  (format #t "~1Tvtx0: ~D~%" (-> obj vtx0))
  (format #t "~1Tdx: ~D~%" (-> obj dx))
  (format #t "~1Tdy: ~D~%" (-> obj dy))
  (format #t "~1Tdz: ~D~%" (-> obj dz))
  (format #t "~1Tunused: ~D~%" (-> obj unused))
  (format #t "~1Tvtx1: ~D~%" (-> obj vtx1))
  (format #t "~1Tu: ~D~%" (-> obj u))
  (format #t "~1Tv: ~D~%" (-> obj v))
  (format #t "~1Ttex: ~D~%" (-> obj tex))
  (format #t "~1Tw: ~D~%" (-> obj w))
  (format #t "~1Td1: ~D~%" (-> obj d1))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-ips
(deftype generic-tie-ips (structure)
  ((ip generic-tie-interp-point 2 :inline :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type generic-tie-ips
(defmethod inspect generic-tie-ips ((obj generic-tie-ips))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-ips)
  (format #t "~1Tip[2] @ #x~X~%" (-> obj ip))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-header
(deftype generic-tie-header (structure)
  ((effect              uint8              :offset-assert   0)
   (interp-table-size   uint8              :offset-assert   1)
   (num-bps             uint8              :offset-assert   2)
   (num-ips             uint8              :offset-assert   3)
   (tint-color          uint32             :offset-assert   4)
   (index-table-offset  uint16             :offset-assert   8)
   (kick-table-offset   uint16             :offset-assert  10)
   (normal-table-offset uint16             :offset-assert  12)
   (interp-table-offset uint16             :offset-assert  14)
   (gsf-header          gsf-header :inline :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type generic-tie-header
(defmethod inspect generic-tie-header ((obj generic-tie-header))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-header)
  (format #t "~1Teffect: ~D~%" (-> obj effect))
  (format #t "~1Tinterp-table-size: ~D~%" (-> obj interp-table-size))
  (format #t "~1Tnum-bps: ~D~%" (-> obj num-bps))
  (format #t "~1Tnum-ips: ~D~%" (-> obj num-ips))
  (format #t "~1Ttint-color: ~D~%" (-> obj tint-color))
  (format #t "~1Tindex-table-offset: ~D~%" (-> obj index-table-offset))
  (format #t "~1Tkick-table-offset: ~D~%" (-> obj kick-table-offset))
  (format #t "~1Tnormal-table-offset: ~D~%" (-> obj normal-table-offset))
  (format #t "~1Tinterp-table-offset: ~D~%" (-> obj interp-table-offset))
  (format #t "~1Tgsf-header: #<gsf-header @ #x~X>~%" (-> obj gsf-header))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-matrix
(deftype generic-tie-matrix (structure)
  ((matrix matrix :inline :offset-assert   0)
   (morph  vector :inline :offset-assert  64)
   (fog    qword  :inline :offset-assert  80)
   )
  :method-count-assert 9
  :size-assert         #x60
  :flag-assert         #x900000060
  )

;; definition for method 3 of type generic-tie-matrix
(defmethod inspect generic-tie-matrix ((obj generic-tie-matrix))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-matrix)
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> obj matrix))
  (format #t "~1Tmorph: #<vector @ #x~X>~%" (-> obj morph))
  (format #t "~1Tfog: #<qword @ #x~X>~%" (-> obj fog))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-normal
(deftype generic-tie-normal (structure)
  ((x     int8  :offset-assert   0)
   (y     int8  :offset-assert   1)
   (z     int8  :offset-assert   2)
   (dummy int8  :offset-assert   3)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type generic-tie-normal
(defmethod inspect generic-tie-normal ((obj generic-tie-normal))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-normal)
  (format #t "~1Tx: ~D~%" (-> obj x))
  (format #t "~1Ty: ~D~%" (-> obj y))
  (format #t "~1Tz: ~D~%" (-> obj z))
  (format #t "~1Tdummy: ~D~%" (-> obj dummy))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-control
(deftype generic-tie-control (structure)
  ((ptr-palette   uint32                   :offset-assert   0)
   (ptr-shaders   uint32                   :offset-assert   4)
   (ptr-runctrl   generic-tie-run-control  :offset-assert   8)
   (ptr-verts     uint32                   :offset-assert  12)
   (ptr-generic   generic-tie-header       :offset-assert  16)
   (ptr-dps       uint32                   :offset-assert  20)
   (ptr-kicks     uint32                   :offset-assert  24)
   (ptr-normals   uint32                   :offset-assert  28)
   (ptr-interp    uint32                   :offset-assert  32)
   (ptr-mtxs      generic-tie-matrix       :offset-assert  36)
   (ptr-cinds     uint32                   :offset-assert  40)
   (next-instance uint32                   :offset-assert  44)
   (next-model    uint32                   :offset-assert  48)
   (next-is-model uint32                   :offset-assert  52)
   (tie-type      uint32                   :offset-assert  56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

;; definition for method 3 of type generic-tie-control
(defmethod inspect generic-tie-control ((obj generic-tie-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-control)
  (format #t "~1Tptr-palette: #x~X~%" (-> obj ptr-palette))
  (format #t "~1Tptr-shaders: #x~X~%" (-> obj ptr-shaders))
  (format #t "~1Tptr-runctrl: #<generic-tie-run-control @ #x~X>~%" (-> obj ptr-runctrl))
  (format #t "~1Tptr-verts: #x~X~%" (-> obj ptr-verts))
  (format #t "~1Tptr-generic: #<generic-tie-header @ #x~X>~%" (-> obj ptr-generic))
  (format #t "~1Tptr-dps: #x~X~%" (-> obj ptr-dps))
  (format #t "~1Tptr-kicks: #x~X~%" (-> obj ptr-kicks))
  (format #t "~1Tptr-normals: #x~X~%" (-> obj ptr-normals))
  (format #t "~1Tptr-interp: #x~X~%" (-> obj ptr-interp))
  (format #t "~1Tptr-mtxs: #<generic-tie-matrix @ #x~X>~%" (-> obj ptr-mtxs))
  (format #t "~1Tptr-cinds: #x~X~%" (-> obj ptr-cinds))
  (format #t "~1Tnext-instance: #x~X~%" (-> obj next-instance))
  (format #t "~1Tnext-model: #x~X~%" (-> obj next-model))
  (format #t "~1Tnext-is-model: ~D~%" (-> obj next-is-model))
  (format #t "~1Ttie-type: ~D~%" (-> obj tie-type))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-stats
(deftype generic-tie-stats (structure)
  ((num-bps       uint32  :offset-assert   0)
   (num-ips       uint32  :offset-assert   4)
   (num-dps       uint32  :offset-assert   8)
   (num-shaders   uint32  :offset-assert  12)
   (num-models    uint32  :offset-assert  16)
   (num-instances uint32  :offset-assert  20)
   (num-waits     uint32  :offset-assert  24)
   (num-qwc       uint32  :offset-assert  28)
   (max-qwc       uint32  :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; definition for method 3 of type generic-tie-stats
(defmethod inspect generic-tie-stats ((obj generic-tie-stats))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-stats)
  (format #t "~1Tnum-bps: ~D~%" (-> obj num-bps))
  (format #t "~1Tnum-ips: ~D~%" (-> obj num-ips))
  (format #t "~1Tnum-dps: ~D~%" (-> obj num-dps))
  (format #t "~1Tnum-shaders: ~D~%" (-> obj num-shaders))
  (format #t "~1Tnum-models: ~D~%" (-> obj num-models))
  (format #t "~1Tnum-instances: ~D~%" (-> obj num-instances))
  (format #t "~1Tnum-waits: ~D~%" (-> obj num-waits))
  (format #t "~1Tnum-qwc: ~D~%" (-> obj num-qwc))
  (format #t "~1Tmax-qwc: ~D~%" (-> obj max-qwc))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-calls
(deftype generic-tie-calls (structure)
  ((generic-prepare-dma-double basic  :offset-assert   0)
   (generic-envmap-dproc       basic  :offset-assert   4)
   (generic-interp-dproc       basic  :offset-assert   8)
   (generic-no-light-dproc     basic  :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type generic-tie-calls
(defmethod inspect generic-tie-calls ((obj generic-tie-calls))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-calls)
  (format #t "~1Tgeneric-prepare-dma-double: ~A~%" (-> obj generic-prepare-dma-double))
  (format #t "~1Tgeneric-envmap-dproc: ~A~%" (-> obj generic-envmap-dproc))
  (format #t "~1Tgeneric-interp-dproc: ~A~%" (-> obj generic-interp-dproc))
  (format #t "~1Tgeneric-no-light-dproc: ~A~%" (-> obj generic-no-light-dproc))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-shadow
(deftype generic-tie-shadow (structure)
  ((out-buf      gsf-buffer                :offset-assert   0)
   (cur-buf      uint32                    :offset-assert   4)
   (tie-type     int32                     :offset-assert   8)
   (ptr-inst     uint32                    :offset-assert  12)
   (ptr-buf      uint32                    :offset-assert  16)
   (inst-xor     int32                     :offset-assert  20)
   (end-of-chain uint32                    :offset-assert  24)
   (write-limit  uint32                    :offset-assert  28)
   (calls        generic-tie-calls :inline :offset-assert  32)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type generic-tie-shadow
(defmethod inspect generic-tie-shadow ((obj generic-tie-shadow))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-shadow)
  (format #t "~1Tout-buf: #<gsf-buffer @ #x~X>~%" (-> obj out-buf))
  (format #t "~1Tcur-buf: #x~X~%" (-> obj cur-buf))
  (format #t "~1Ttie-type: ~D~%" (-> obj tie-type))
  (format #t "~1Tptr-inst: #x~X~%" (-> obj ptr-inst))
  (format #t "~1Tptr-buf: #x~X~%" (-> obj ptr-buf))
  (format #t "~1Tinst-xor: ~D~%" (-> obj inst-xor))
  (format #t "~1Tend-of-chain: ~D~%" (-> obj end-of-chain))
  (format #t "~1Twrite-limit: ~D~%" (-> obj write-limit))
  (format #t "~1Tcalls: #<generic-tie-calls @ #x~X>~%" (-> obj calls))
  (label cfg-4)
  obj
  )

;; definition of type generic-tie-work
(deftype generic-tie-work (structure)
  ((control     generic-tie-control  :inline :offset-assert   0)
   (interp-job  generic-interp-job   :inline :offset-assert  60)
   (shadow      generic-tie-shadow   :inline :offset-assert  76)
   (input-a     generic-tie-input    :inline :offset-assert 128)
   (input-b     generic-tie-input    :inline :offset-assert 3376)
   (inst-buf    generic-tie-instance :inline :offset-assert 6624)
   (palette-buf rgba                 128     :offset-assert 6992)
   )
  :method-count-assert 9
  :size-assert         #x1d50
  :flag-assert         #x900001d50
  )

;; definition for method 3 of type generic-tie-work
(defmethod inspect generic-tie-work ((obj generic-tie-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'generic-tie-work)
  (format #t "~1Tcontrol: #<generic-tie-control @ #x~X>~%" (-> obj control))
  (format #t "~1Tinterp-job: #<generic-interp-job @ #x~X>~%" (-> obj interp-job))
  (format #t "~1Tshadow: #<generic-tie-shadow @ #x~X>~%" (-> obj shadow))
  (format #t "~1Tinput-a: #<generic-tie-input @ #x~X>~%" (-> obj input-a))
  (format #t "~1Tinput-b: #<generic-tie-input @ #x~X>~%" (-> obj input-b))
  (format #t "~1Tinst-buf: #<generic-tie-instance @ #x~X>~%" (-> obj inst-buf))
  (format #t "~1Tpalette-buf[128] @ #x~X~%" (-> obj palette-buf))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




