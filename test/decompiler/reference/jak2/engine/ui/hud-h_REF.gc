;;-*-Lisp-*-
(in-package goal)

;; definition of type hud-string
(deftype hud-string (basic)
  ((text  string           :offset-assert   4)
   (scale float            :offset-assert   8)
   (color uint32           :offset-assert  12)
   (flags uint32           :offset-assert  16)
   (pos   vector4w :inline :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type hud-string
(defmethod inspect hud-string ((obj hud-string))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Ttext: ~A~%" (-> obj text))
  (format #t "~1Tscale: ~f~%" (-> obj scale))
  (format #t "~1Tcolor: ~D~%" (-> obj color))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> obj pos))
  (label cfg-4)
  obj
  )

;; definition of type hud-sprite
(deftype hud-sprite (structure)
  ((pos     vector4w :inline :offset-assert   0)
   (color   vector4w :inline :offset-assert  16)
   (flags   uint32           :offset-assert  32)
   (scale-x float            :offset-assert  36)
   (scale-y float            :offset-assert  40)
   (angle   float            :offset-assert  44)
   (tex     basic            :offset-assert  48)
   )
  :method-count-assert 11
  :size-assert         #x34
  :flag-assert         #xb00000034
  (:methods
    (hud-sprite-method-9 () none 9)
    (hud-sprite-method-10 () none 10)
    )
  )

;; definition for method 3 of type hud-sprite
(defmethod inspect hud-sprite ((obj hud-sprite))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'hud-sprite)
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> obj pos))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> obj color))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tscale-x: ~f~%" (-> obj scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> obj scale-y))
  (format #t "~1Tangle: ~f~%" (-> obj angle))
  (format #t "~1Ttex: ~A~%" (-> obj tex))
  (label cfg-4)
  obj
  )

;; definition of type hud-box
(deftype hud-box (structure)
  ((min   vector2  :inline :offset-assert   0)
   (max   vector2  :inline :offset-assert   8)
   (color vector4w :inline :offset-assert  16)
   )
  :method-count-assert 16
  :size-assert         #x20
  :flag-assert         #x1000000020
  (:methods
    (hud-box-method-9 () none 9)
    (hud-box-method-10 () none 10)
    (hud-box-method-11 () none 11)
    (hud-box-method-12 () none 12)
    (hud-box-method-13 () none 13)
    (hud-box-method-14 () none 14)
    (hud-box-method-15 () none 15)
    )
  )

;; definition for method 3 of type hud-box
(defmethod inspect hud-box ((obj hud-box))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'hud-box)
  (format #t "~1Tmin: #<vector2 @ #x~X>~%" (-> obj min))
  (format #t "~1Tmax: #<vector2 @ #x~X>~%" (-> obj max))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> obj color))
  (label cfg-4)
  obj
  )

;; definition of type hud-icon
(deftype hud-icon (basic)
  ((icon    (pointer manipy)         :offset-assert   4)
   (pos     vector4w         :inline :offset-assert  16)
   (scale-x float                    :offset-assert  32)
   (scale-y float                    :offset-assert  36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; definition for method 3 of type hud-icon
(defmethod inspect hud-icon ((obj hud-icon))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Ticon: #x~X~%" (-> obj icon))
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> obj pos))
  (format #t "~1Tscale-x: ~f~%" (-> obj scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> obj scale-y))
  (label cfg-4)
  obj
  )

;; definition of type hud-value
(deftype hud-value (basic)
  ((current int32   :offset-assert   4)
   (target  int32   :offset-assert   8)
   (flags   uint16  :offset-assert  12)
   (counter uint16  :offset-assert  14)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type hud-value
(defmethod inspect hud-value ((obj hud-value))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tcurrent: ~D~%" (-> obj current))
  (format #t "~1Ttarget: ~D~%" (-> obj target))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tcounter: ~D~%" (-> obj counter))
  (label cfg-4)
  obj
  )

;; definition of type hud
(deftype hud (process)
  ((trigger-time   time-frame            :offset-assert 128)
   (last-hide-time time-frame            :offset-assert 136)
   (offset         float                 :offset-assert 144)
   (flags          hud-flags             :offset-assert 148)
   (values         hud-value  8 :inline  :offset-assert 152)
   (strings        hud-string 14 :inline :offset-assert 288)
   (sprites        hud-sprite 30 :inline :offset-assert 960)
   (icons          hud-icon   2 :inline  :offset-assert 2880)
   (gui-id         uint32                :offset-assert 2976)
   )
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  (:methods
    (hud-method-14 () none 14)
    (hud-method-15 () none 15)
    (hud-method-16 () none 16)
    (hud-method-17 () none 17)
    (hud-method-18 () none 18)
    (hud-method-19 () none 19)
    (hud-method-20 () none 20)
    (hud-method-21 () none 21)
    (hud-method-22 () none 22)
    (hud-method-23 () none 23)
    (hud-method-24 () none 24)
    (hud-method-25 () none 25)
    (hud-method-26 () none 26)
    )
  )

;; definition for method 3 of type hud
(defmethod inspect hud ((obj hud))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 obj)
    )
  (format #t "~2Ttrigger-time: ~D~%" (-> obj trigger-time))
  (format #t "~2Tlast-hide-time: ~D~%" (-> obj last-hide-time))
  (format #t "~2Toffset: ~f~%" (-> obj offset))
  (format #t "~2Tflags: ~D~%" (-> obj flags))
  (format #t "~2Tvalues[8] @ #x~X~%" (&-> obj stack 24))
  (format #t "~2Tstrings[14] @ #x~X~%" (&-> obj stack 160))
  (format #t "~2Tsprites[30] @ #x~X~%" (-> obj sprites))
  (format #t "~2Ticons[2] @ #x~X~%" (&-> obj stack 2752))
  (format #t "~2Tgui-id: ~D~%" (-> obj gui-id))
  (label cfg-4)
  obj
  )

;; definition of type hud-ashelin
(deftype hud-ashelin (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-ashelin
(defmethod inspect hud-ashelin ((obj hud-ashelin))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-cargo
(deftype hud-cargo (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-cargo
(defmethod inspect hud-cargo ((obj hud-cargo))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-citizen
(deftype hud-citizen (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-citizen
(defmethod inspect hud-citizen ((obj hud-citizen))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-cpanel
(deftype hud-cpanel (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-cpanel
(defmethod inspect hud-cpanel ((obj hud-cpanel))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-dig-clasp
(deftype hud-dig-clasp (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-dig-clasp
(defmethod inspect hud-dig-clasp ((obj hud-dig-clasp))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-gun
(deftype hud-gun (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-gun
(defmethod inspect hud-gun ((obj hud-gun))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-health
(deftype hud-health (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-health
(defmethod inspect hud-health ((obj hud-health))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-dark-eco-symbol
(deftype hud-dark-eco-symbol (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-dark-eco-symbol
(defmethod inspect hud-dark-eco-symbol ((obj hud-dark-eco-symbol))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-helldog
(deftype hud-helldog (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-helldog
(defmethod inspect hud-helldog ((obj hud-helldog))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-lurker
(deftype hud-lurker (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-lurker
(defmethod inspect hud-lurker ((obj hud-lurker))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-map
(deftype hud-map (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-map
(defmethod inspect hud-map ((obj hud-map))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-moneybag
(deftype hud-moneybag (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-moneybag
(defmethod inspect hud-moneybag ((obj hud-moneybag))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-pegasus
(deftype hud-pegasus (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-pegasus
(defmethod inspect hud-pegasus ((obj hud-pegasus))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-plasmite
(deftype hud-plasmite (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-plasmite
(defmethod inspect hud-plasmite ((obj hud-plasmite))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-dig-button
(deftype hud-dig-button (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-dig-button
(defmethod inspect hud-dig-button ((obj hud-dig-button))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-predator
(deftype hud-predator (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-predator
(defmethod inspect hud-predator ((obj hud-predator))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-heatmeter
(deftype hud-heatmeter (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-heatmeter
(defmethod inspect hud-heatmeter ((obj hud-heatmeter))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-progress
(deftype hud-progress (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-progress
(defmethod inspect hud-progress ((obj hud-progress))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-rocketsensor
(deftype hud-rocketsensor (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-rocketsensor
(defmethod inspect hud-rocketsensor ((obj hud-rocketsensor))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-ruffians
(deftype hud-ruffians (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-ruffians
(defmethod inspect hud-ruffians ((obj hud-ruffians))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-score
(deftype hud-score (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-score
(defmethod inspect hud-score ((obj hud-score))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-sig
(deftype hud-sig (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-sig
(defmethod inspect hud-sig ((obj hud-sig))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-skill
(deftype hud-skill (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-skill
(defmethod inspect hud-skill ((obj hud-skill))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-skullgem
(deftype hud-skullgem (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-skullgem
(defmethod inspect hud-skullgem ((obj hud-skullgem))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-timer
(deftype hud-timer (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-timer
(defmethod inspect hud-timer ((obj hud-timer))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-turret
(deftype hud-turret (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-turret
(defmethod inspect hud-turret ((obj hud-turret))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-squid
(deftype hud-squid (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-squid
(defmethod inspect hud-squid ((obj hud-squid))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-gunturret
(deftype hud-gunturret (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-gunturret
(defmethod inspect hud-gunturret ((obj hud-gunturret))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-gruntegg
(deftype hud-gruntegg (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-gruntegg
(defmethod inspect hud-gruntegg ((obj hud-gruntegg))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-crimsonhover
(deftype hud-crimsonhover (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-crimsonhover
(defmethod inspect hud-crimsonhover ((obj hud-crimsonhover))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-metalkor
(deftype hud-metalkor (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-metalkor
(defmethod inspect hud-metalkor ((obj hud-metalkor))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-big-score
(deftype hud-big-score (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-big-score
(defmethod inspect hud-big-score ((obj hud-big-score))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-goal
(deftype hud-goal (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-goal
(defmethod inspect hud-goal ((obj hud-goal))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-miss
(deftype hud-miss (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-miss
(defmethod inspect hud-miss ((obj hud-miss))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-race-timer
(deftype hud-race-timer (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-race-timer
(defmethod inspect hud-race-timer ((obj hud-race-timer))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-race-lap-counter
(deftype hud-race-lap-counter (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-race-lap-counter
(defmethod inspect hud-race-lap-counter ((obj hud-race-lap-counter))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-race-turbo-counter
(deftype hud-race-turbo-counter (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-race-turbo-counter
(defmethod inspect hud-race-turbo-counter ((obj hud-race-turbo-counter))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-race-position
(deftype hud-race-position (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-race-position
(defmethod inspect hud-race-position ((obj hud-race-position))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-race-map
(deftype hud-race-map (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-race-map
(defmethod inspect hud-race-map ((obj hud-race-map))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-samos-old
(deftype hud-samos-old (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-samos-old
(defmethod inspect hud-samos-old ((obj hud-samos-old))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-samos-young
(deftype hud-samos-young (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-samos-young
(defmethod inspect hud-samos-young ((obj hud-samos-young))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-lurker-button
(deftype hud-lurker-button (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-lurker-button
(defmethod inspect hud-lurker-button ((obj hud-lurker-button))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-widow
(deftype hud-widow (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-widow
(defmethod inspect hud-widow ((obj hud-widow))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-race-final-stats
(deftype hud-race-final-stats (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-race-final-stats
(defmethod inspect hud-race-final-stats ((obj hud-race-final-stats))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-mech-air-tank
(deftype hud-mech-air-tank (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-mech-air-tank
(defmethod inspect hud-mech-air-tank ((obj hud-mech-air-tank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-homing-beacon
(deftype hud-homing-beacon (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-homing-beacon
(defmethod inspect hud-homing-beacon ((obj hud-homing-beacon))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-dark-eco-pickup
(deftype hud-dark-eco-pickup (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-dark-eco-pickup
(defmethod inspect hud-dark-eco-pickup ((obj hud-dark-eco-pickup))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition of type hud-green-eco-pickup
(deftype hud-green-eco-pickup (hud)
  ()
  :heap-base #xb30
  :method-count-assert 27
  :size-assert         #xba4
  :flag-assert         #x1b0b300ba4
  )

;; definition for method 3 of type hud-green-eco-pickup
(defmethod inspect hud-green-eco-pickup ((obj hud-green-eco-pickup))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




