;;-*-Lisp-*-
(in-package goal)

;; definition of type minimap-class-node
(deftype minimap-class-node (structure)
  ((default-position vector        :inline :offset-assert   0)
   (flags            minimap-flag          :offset-assert  16)
   (class            minimap-class         :offset-assert  18)
   (name             basic                 :offset-assert  20)
   (icon-xy          vector2ub     :inline :offset-assert  24)
   (scale            float                 :offset-assert  28)
   (color            rgba                  :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; definition for method 3 of type minimap-class-node
(defmethod inspect minimap-class-node ((obj minimap-class-node))
  (when (not obj)
    (set! obj obj)
    (goto cfg-179)
    )
  (format #t "[~8x] ~A~%" obj 'minimap-class-node)
  (format #t "~1Tdefault-position: ~`vector`P~%" (-> obj default-position))
  (format #t "~1Tflags: #x~X : (minimap-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (minimap-flag active)) (minimap-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (minimap-flag bigmap)) (minimap-flag bigmap))
        (format #t "bigmap ")
        )
    (if (= (logand s5-0 (minimap-flag fade-in)) (minimap-flag fade-in))
        (format #t "fade-in ")
        )
    (if (= (logand s5-0 (minimap-flag racer)) (minimap-flag racer))
        (format #t "racer ")
        )
    (if (= (logand s5-0 (minimap-flag task)) (minimap-flag task))
        (format #t "task ")
        )
    (if (= (logand s5-0 (minimap-flag enemy)) (minimap-flag enemy))
        (format #t "enemy ")
        )
    (if (= (logand s5-0 (minimap-flag clamp)) (minimap-flag clamp))
        (format #t "clamp ")
        )
    (if (= (logand s5-0 (minimap-flag minimap)) (minimap-flag minimap))
        (format #t "minimap ")
        )
    (if (= (logand s5-0 (minimap-flag flash)) (minimap-flag flash))
        (format #t "flash ")
        )
    (if (= (logand s5-0 (minimap-flag task-graph)) (minimap-flag task-graph))
        (format #t "task-graph ")
        )
    (if (= (logand s5-0 (minimap-flag trail)) (minimap-flag trail))
        (format #t "trail ")
        )
    (if (= (logand s5-0 (minimap-flag frustum)) (minimap-flag frustum))
        (format #t "frustum ")
        )
    (if (= (logand s5-0 (minimap-flag background)) (minimap-flag background))
        (format #t "background ")
        )
    (if (= (logand s5-0 (minimap-flag goal)) (minimap-flag goal))
        (format #t "goal ")
        )
    (if (= (logand s5-0 (minimap-flag fade-out)) (minimap-flag fade-out))
        (format #t "fade-out ")
        )
    (if (= (logand s5-0 (minimap-flag city-only)) (minimap-flag city-only))
        (format #t "city-only ")
        )
    )
  (format #t ")~%")
  (let ((t9-20 format)
        (a0-37 #t)
        (a1-20 "~1Tclass: #x~X : ~S~%")
        (a2-3 (-> obj class))
        (v1-50 (-> obj class))
        )
    (t9-20 a0-37 a1-20 a2-3 (cond
                              ((= v1-50 (minimap-class onintent))
                               "onintent"
                               )
                              ((= v1-50 (minimap-class slumc-seal))
                               "slumc-seal"
                               )
                              ((= v1-50 (minimap-class bbush-gena-2))
                               "bbush-gena-2"
                               )
                              ((= v1-50 (minimap-class forest-samos))
                               "forest-samos"
                               )
                              ((= v1-50 (minimap-class mountain-lens))
                               "mountain-lens"
                               )
                              ((= v1-50 (minimap-class atoll))
                               "atoll"
                               )
                              ((= v1-50 (minimap-class guard))
                               "guard"
                               )
                              ((= v1-50 (minimap-class garage))
                               "garage"
                               )
                              ((= v1-50 (minimap-class bbush-slumb-2))
                               "bbush-slumb-2"
                               )
                              ((= v1-50 (minimap-class bbush-genb))
                               "bbush-genb"
                               )
                              ((= v1-50 (minimap-class ruins-hut))
                               "ruins-hut"
                               )
                              ((= v1-50 (minimap-class mountain-gear))
                               "mountain-gear"
                               )
                              ((= v1-50 (minimap-class bbush-stadium))
                               "bbush-stadium"
                               )
                              ((= v1-50 (minimap-class racer-target))
                               "racer-target"
                               )
                              ((= v1-50 (minimap-class bbush-port-3))
                               "bbush-port-3"
                               )
                              ((= v1-50 (minimap-class mountain))
                               "mountain"
                               )
                              ((= v1-50 (minimap-class none))
                               "none"
                               )
                              ((= v1-50 (minimap-class racer-errol))
                               "racer-errol"
                               )
                              ((= v1-50 (minimap-class goal))
                               "goal"
                               )
                              ((= v1-50 (minimap-class goal-no-trail))
                               "goal-no-trail"
                               )
                              ((= v1-50 (minimap-class hideout))
                               "hideout"
                               )
                              ((= v1-50 (minimap-class vinroom))
                               "vinroom"
                               )
                              ((= v1-50 (minimap-class castle))
                               "castle"
                               )
                              ((= v1-50 (minimap-class racer))
                               "racer"
                               )
                              ((= v1-50 (minimap-class tanker))
                               "tanker"
                               )
                              ((= v1-50 (minimap-class dig))
                               "dig"
                               )
                              ((= v1-50 (minimap-class bbush-genb-2))
                               "bbush-genb-2"
                               )
                              ((= v1-50 (minimap-class canyon))
                               "canyon"
                               )
                              ((= v1-50 (minimap-class consite))
                               "consite"
                               )
                              ((= v1-50 (minimap-class bbush-markb))
                               "bbush-markb"
                               )
                              ((= v1-50 (minimap-class gungame))
                               "gungame"
                               )
                              ((= v1-50 (minimap-class port-turret))
                               "port-turret"
                               )
                              ((= v1-50 (minimap-class kiosk))
                               "kiosk"
                               )
                              ((= v1-50 (minimap-class bbush-marka))
                               "bbush-marka"
                               )
                              ((= v1-50 (minimap-class bbush-inda))
                               "bbush-inda"
                               )
                              ((= v1-50 (minimap-class burning-bush))
                               "burning-bush"
                               )
                              ((= v1-50 (minimap-class palace-cable))
                               "palace-cable"
                               )
                              ((= v1-50 (minimap-class bbush-genc))
                               "bbush-genc"
                               )
                              ((= v1-50 (minimap-class atoll-ashelin))
                               "atoll-ashelin"
                               )
                              ((= v1-50 (minimap-class forest))
                               "forest"
                               )
                              ((= v1-50 (minimap-class bbush-pal))
                               "bbush-pal"
                               )
                              ((= v1-50 (minimap-class tomb))
                               "tomb"
                               )
                              ((= v1-50 (minimap-class mountain-shard))
                               "mountain-shard"
                               )
                              ((= v1-50 (minimap-class ruins))
                               "ruins"
                               )
                              ((= v1-50 (minimap-class bbush-farmb))
                               "bbush-farmb"
                               )
                              ((= v1-50 (minimap-class kid))
                               "kid"
                               )
                              ((= v1-50 (minimap-class atoll-valve))
                               "atoll-valve"
                               )
                              ((= v1-50 (minimap-class bbush-farma))
                               "bbush-farma"
                               )
                              ((= v1-50 (minimap-class parking-spot))
                               "parking-spot"
                               )
                              ((= v1-50 (minimap-class bbush-slumc))
                               "bbush-slumc"
                               )
                              ((= v1-50 (minimap-class palace))
                               "palace"
                               )
                              ((= v1-50 (minimap-class bbush-genc-2))
                               "bbush-genc-2"
                               )
                              ((= v1-50 (minimap-class bbush-markb-2))
                               "bbush-markb-2"
                               )
                              ((= v1-50 (minimap-class hiphog))
                               "hiphog"
                               )
                              ((= v1-50 (minimap-class gun-dark))
                               "gun-dark"
                               )
                              ((= v1-50 (minimap-class flag))
                               "flag"
                               )
                              ((= v1-50 (minimap-class guard-frustum))
                               "guard-frustum"
                               )
                              ((= v1-50 (minimap-class bbush-port-2))
                               "bbush-port-2"
                               )
                              ((= v1-50 (minimap-class bbush-port))
                               "bbush-port"
                               )
                              ((= v1-50 (minimap-class bbush-slumb))
                               "bbush-slumb"
                               )
                              ((= v1-50 (minimap-class bbush-gena))
                               "bbush-gena"
                               )
                              ((= v1-50 (minimap-class fortress))
                               "fortress"
                               )
                              ((= v1-50 (minimap-class sewer))
                               "sewer"
                               )
                              ((= v1-50 (minimap-class bbush-sluma))
                               "bbush-sluma"
                               )
                              ((= v1-50 (minimap-class metalhead))
                               "metalhead"
                               )
                              ((= v1-50 (minimap-class underport))
                               "underport"
                               )
                              ((= v1-50 (minimap-class bbush-indb))
                               "bbush-indb"
                               )
                              ((= v1-50 (minimap-class oracle))
                               "oracle"
                               )
                              ((= v1-50 (minimap-class gun-yellow))
                               "gun-yellow"
                               )
                              ((= v1-50 (minimap-class bbush-pal-2))
                               "bbush-pal-2"
                               )
                              ((= v1-50 (minimap-class stadium))
                               "stadium"
                               )
                              (else
                                "*unknown*"
                                )
                              )
           )
    )
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Ticon-xy: #<vector2ub @ #x~X>~%" (-> obj icon-xy))
  (format #t "~1Tscale: ~f~%" (-> obj scale))
  (format #t "~1Tcolor: #x~X~%" (-> obj color))
  (label cfg-179)
  obj
  )

;; definition of type connection-minimap
(deftype connection-minimap (connection-pers)
  ((handle            handle                     :offset          8)
   (position          vector                     :offset         16)
   (alpha             float                      :offset         20)
   (class             minimap-class-node         :offset         24)
   (flags             minimap-flag               :offset         28)
   (node              uint16                     :offset         30)
   (edge-ry           float                      :offset-assert  32)
   (last-world-pos    vector             :inline :offset-assert  48)
   (last-relative-pos vector             :inline :offset-assert  64)
   )
  :method-count-assert 9
  :size-assert         #x50
  :flag-assert         #x900000050
  )

;; definition for method 3 of type connection-minimap
;; INFO: Used lq/sq
(defmethod inspect connection-minimap ((obj connection-minimap))
  (when (not obj)
    (set! obj obj)
    (goto cfg-48)
    )
  (format #t "[~8x] ~A~%" obj 'connection-minimap)
  (format #t "~1Tnext: #<connection-minimap @ #x~X>~%" (-> obj next))
  (format #t "~1Tkey: ~A~%" (-> obj key))
  (format #t "~1Tupdate-time: ~D~%" (-> obj update-time))
  (format #t "~1Tparam[4] @ #x~X~%" (-> obj param))
  (dotimes (s5-0 4)
    (format #t "~T  [~D]~1Tparam: ~A~%" s5-0 (-> obj param s5-0))
    )
  (format #t "~1Tparam-int32[4] @ #x~X~%" (-> obj param))
  (dotimes (s5-1 4)
    (format #t "~T  [~D]~1Tparam-int32: ~D~%" s5-1 (-> obj param s5-1))
    )
  (format #t "~1Tparam-int64[2] @ #x~X~%" (-> obj param))
  (dotimes (s5-2 2)
    (format #t "~T  [~D]~1Tparam-int64: ~D~%" s5-2 (-> obj param-int64 s5-2))
    )
  (format #t "~1Tparam-float[4] @ #x~X~%" (-> obj param))
  (dotimes (s5-3 4)
    (format #t "~T  [~D]~1Tparam-float: ~f~%" s5-3 (the-as float (-> obj param s5-3)))
    )
  (format #t "~1Tparam-quat: #x~X~%" (-> obj param-quat))
  (format #t "~1Thandle: ~D~%" (-> obj update-time))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> obj position))
  (format #t "~1Talpha: ~f~%" (-> obj alpha))
  (format #t "~1Tclass: #<minimap-class-node @ #x~X>~%" (-> obj class))
  (format #t "~1Tflags: #x~X : (minimap-flag " (-> obj flags))
  (let ((s5-4 (-> obj flags)))
    (if (= (logand s5-4 (minimap-flag active)) (minimap-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-4 (minimap-flag bigmap)) (minimap-flag bigmap))
        (format #t "bigmap ")
        )
    (if (= (logand s5-4 (minimap-flag fade-in)) (minimap-flag fade-in))
        (format #t "fade-in ")
        )
    (if (= (logand s5-4 (minimap-flag racer)) (minimap-flag racer))
        (format #t "racer ")
        )
    (if (= (logand s5-4 (minimap-flag task)) (minimap-flag task))
        (format #t "task ")
        )
    (if (= (logand s5-4 (minimap-flag enemy)) (minimap-flag enemy))
        (format #t "enemy ")
        )
    (if (= (logand s5-4 (minimap-flag clamp)) (minimap-flag clamp))
        (format #t "clamp ")
        )
    (if (= (logand s5-4 (minimap-flag minimap)) (minimap-flag minimap))
        (format #t "minimap ")
        )
    (if (= (logand s5-4 (minimap-flag flash)) (minimap-flag flash))
        (format #t "flash ")
        )
    (if (= (logand s5-4 (minimap-flag task-graph)) (minimap-flag task-graph))
        (format #t "task-graph ")
        )
    (if (= (logand s5-4 (minimap-flag trail)) (minimap-flag trail))
        (format #t "trail ")
        )
    (if (= (logand s5-4 (minimap-flag frustum)) (minimap-flag frustum))
        (format #t "frustum ")
        )
    (if (= (logand s5-4 (minimap-flag background)) (minimap-flag background))
        (format #t "background ")
        )
    (if (= (logand s5-4 (minimap-flag goal)) (minimap-flag goal))
        (format #t "goal ")
        )
    (if (= (logand s5-4 (minimap-flag fade-out)) (minimap-flag fade-out))
        (format #t "fade-out ")
        )
    (if (= (logand s5-4 (minimap-flag city-only)) (minimap-flag city-only))
        (format #t "city-only ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tnode: ~D~%" (-> obj node))
  (format #t "~1Tedge-ry: ~f~%" (-> obj edge-ry))
  (format #t "~1Tlast-world-pos: ~`vector`P~%" (-> obj last-world-pos))
  (format #t "~1Tlast-relative-pos: ~`vector`P~%" (-> obj last-relative-pos))
  (label cfg-48)
  obj
  )

;; definition of type engine-minimap
(deftype engine-minimap (engine-pers)
  ((alive-list-override connection-minimap  :offset  24)
   (dead-list-override  connection-minimap  :offset  28)
   )
  :method-count-assert 15
  :size-assert         #x20
  :flag-assert         #xf00000020
  )

;; definition for method 3 of type engine-minimap
(defmethod inspect engine-minimap ((obj engine-minimap))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Telement-type: ~A~%" (-> obj element-type))
  (format #t "~1Texecute-time: ~D~%" (-> obj execute-time))
  (format #t "~1Talive-list: #<connection-minimap @ #x~X>~%" (-> obj alive-list))
  (format #t "~1Tdead-list: #<connection-minimap @ #x~X>~%" (-> obj dead-list))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; definition of type minimap-trail
(deftype minimap-trail (structure)
  ((used-by        connection-minimap               :offset-assert   0)
   (search-id      uint32                           :offset-assert   4)
   (node-count     int16                            :offset-assert   8)
   (goal-node-id   int32                            :offset-assert  12)
   (node-path-dist float                            :offset-assert  16)
   (last-updated   uint64                           :offset-assert  24)
   (cached-info    trail-cached-search-info :inline :offset-assert  32)
   (node-id        uint16                   64      :offset-assert  80)
   )
  :method-count-assert 11
  :size-assert         #xd0
  :flag-assert         #xb000000d0
  (:methods
    (minimap-trail-method-9 () none 9)
    (minimap-trail-method-10 () none 10)
    )
  )

;; definition for method 3 of type minimap-trail
(defmethod inspect minimap-trail ((obj minimap-trail))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'minimap-trail)
  (format #t "~1Tused-by: ~`connection-minimap`P~%" (-> obj used-by))
  (format #t "~1Tsearch-id: ~D~%" (-> obj search-id))
  (format #t "~1Tnode-count: ~D~%" (-> obj node-count))
  (format #t "~1Tgoal-node-id: ~D~%" (-> obj goal-node-id))
  (format #t "~1Tnode-path-dist: ~f~%" (-> obj node-path-dist))
  (format #t "~1Tlast-updated: ~D~%" (-> obj last-updated))
  (format #t "~1Tcached-info: #<trail-cached-search-info @ #x~X>~%" (-> obj cached-info))
  (format #t "~1Tnode-id[64] @ #x~X~%" (-> obj node-id))
  (label cfg-4)
  obj
  )

;; definition of type minimap-draw-work
(deftype minimap-draw-work (structure)
  ((buf           basic              :offset-assert   0)
   (justify-right basic              :offset-assert   4)
   (draw-pos      vector4w :inline   :offset-assert  16)
   (mat           matrix   :inline   :offset-assert  32)
   (corner        vector4w 4 :inline :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #xa0
  :flag-assert         #x9000000a0
  )

;; definition for method 3 of type minimap-draw-work
(defmethod inspect minimap-draw-work ((obj minimap-draw-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'minimap-draw-work)
  (format #t "~1Tbuf: ~A~%" (-> obj buf))
  (format #t "~1Tjustify-right: ~A~%" (-> obj justify-right))
  (format #t "~1Tdraw-pos: #<vector4w @ #x~X>~%" (-> obj draw-pos))
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> obj mat))
  (format #t "~1Tcorner[4] @ #x~X~%" (-> obj corner))
  (label cfg-4)
  obj
  )

;; definition of type minimap
(deftype minimap (structure)
  ((draw-tmpl        dma-gif-packet :inline   :offset-assert   0)
   (draw2-tmpl       dma-gif-packet :inline   :offset-assert  32)
   (draw3-tmpl       dma-gif-packet :inline   :offset-assert  64)
   (draw4-tmpl       dma-gif-packet :inline   :offset-assert  96)
   (sprite-tmpl      dma-gif-packet :inline   :offset-assert 128)
   (adgif-tmpl       dma-gif-packet :inline   :offset-assert 160)
   (color            vector4w       :inline   :offset-assert 192)
   (offset           vector         :inline   :offset-assert 208)
   (minimap-corner   vector         :inline   :offset-assert 224)
   (last-name        basic                    :offset-assert 240)
   (last-tex         basic                    :offset-assert 244)
   (target-inv-scale float                    :offset-assert 248)
   (map-bits         uint64                   :offset-assert 256)
   (level            basic                    :offset-assert 264)
   (ctywide          basic                    :offset-assert 268)
   (inv-scale        float                    :offset        212)
   (fade             float                    :offset        220)
   (engine           basic                    :offset-assert 272)
   (engine-key       uint32                   :offset-assert 276)
   (trail            minimap-trail  6 :inline :offset-assert 288)
   (race-tex         basic                    :offset-assert 1536)
   (race-scale       float                    :offset-assert 1540)
   (race-level       basic                    :offset-assert 1544)
   (sprite2-tmpl     dma-gif-packet :inline   :offset-assert 1552)
   (race-corner      vector         :inline   :offset-assert 1584)
   (goal-time        float                    :offset-assert 1600)
   (frustum-alpha    float                    :offset-assert 1604)
   )
  :method-count-assert 28
  :size-assert         #x648
  :flag-assert         #x1c00000648
  (:methods
    (minimap-method-9 () none 9)
    (minimap-method-10 () none 10)
    (minimap-method-11 () none 11)
    (minimap-method-12 () none 12)
    (minimap-method-13 () none 13)
    (minimap-method-14 () none 14)
    (minimap-method-15 () none 15)
    (minimap-method-16 () none 16)
    (minimap-method-17 () none 17)
    (minimap-method-18 () none 18)
    (minimap-method-19 () none 19)
    (minimap-method-20 () none 20)
    (minimap-method-21 () none 21)
    (minimap-method-22 () none 22)
    (minimap-method-23 () none 23)
    (minimap-method-24 () none 24)
    (minimap-method-25 () none 25)
    (minimap-method-26 () none 26)
    (minimap-method-27 () none 27)
    )
  )

;; definition for method 3 of type minimap
(defmethod inspect minimap ((obj minimap))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'minimap)
  (format #t "~1Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw-tmpl))
  (format #t "~1Tdraw2-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw2-tmpl))
  (format #t "~1Tdraw3-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw3-tmpl))
  (format #t "~1Tdraw4-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj draw4-tmpl))
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj sprite-tmpl))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj adgif-tmpl))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> obj color))
  (format #t "~1Toffset: #<vector @ #x~X>~%" (-> obj offset))
  (format #t "~1Tminimap-corner: #<vector @ #x~X>~%" (-> obj minimap-corner))
  (format #t "~1Tlast-name: ~A~%" (-> obj last-name))
  (format #t "~1Tlast-tex: ~A~%" (-> obj last-tex))
  (format #t "~1Ttarget-inv-scale: ~f~%" (-> obj target-inv-scale))
  (format #t "~1Tmap-bits: ~D~%" (-> obj map-bits))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tctywide: ~A~%" (-> obj ctywide))
  (format #t "~1Tinv-scale: ~f~%" (-> obj offset y))
  (format #t "~1Tfade: ~f~%" (-> obj offset w))
  (format #t "~1Tengine: ~A~%" (-> obj engine))
  (format #t "~1Tengine-key: ~D~%" (-> obj engine-key))
  (format #t "~1Ttrail[6] @ #x~X~%" (-> obj trail))
  (format #t "~1Trace-tex: ~A~%" (-> obj race-tex))
  (format #t "~1Trace-scale: ~f~%" (-> obj race-scale))
  (format #t "~1Trace-level: ~A~%" (-> obj race-level))
  (format #t "~1Tsprite2-tmpl: #<dma-gif-packet @ #x~X>~%" (-> obj sprite2-tmpl))
  (format #t "~1Trace-corner: #<vector @ #x~X>~%" (-> obj race-corner))
  (format #t "~1Tgoal-time: ~f~%" (-> obj goal-time))
  (format #t "~1Tfrustum-alpha: ~f~%" (-> obj frustum-alpha))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




