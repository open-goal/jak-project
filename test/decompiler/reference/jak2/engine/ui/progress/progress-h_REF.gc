;;-*-Lisp-*-
(in-package goal)

;; definition of type progress
(deftype progress (process-drawable)
  ((current-options    basic              :offset-assert 200)
   (menu-transition    float              :offset-assert 204)
   (option-index       int32              :offset-assert 208)
   (want-option-index  int32              :offset-assert 212)
   (next-option-index  int32              :offset-assert 216)
   (graphic-index      int32              :offset-assert 220)
   (selected-option    basic              :offset-assert 224)
   (current            basic              :offset-assert 228)
   (next               basic              :offset-assert 232)
   (ring-angle         float              :offset-assert 236)
   (ring-want-angle    float              :offset-assert 240)
   (init-quat          quaternion :inline :offset-assert 256)
   (pos-transition     float              :offset-assert 272)
   (anim-frame         float              :offset-assert 276)
   (swing              float              :offset-assert 280)
   (main-menu          basic              :offset-assert 284)
   (state-stack        int32      5       :offset-assert 288)
   (option-index-stack int32      5       :offset-assert 308)
   (state-pos          int32              :offset-assert 328)
   (secret-buying      basic              :offset-assert 332)
   (secret-buy-choice  basic              :offset-assert 336)
   (sliding            float              :offset-assert 340)
   (sliding-off        float              :offset-assert 344)
   (scanlines-alpha    float              :offset-assert 348)
   (sliding-height     float              :offset-assert 352)
   )
  :heap-base #xf0
  :method-count-assert 33
  :size-assert         #x164
  :flag-assert         #x2100f00164
  (:methods
    (progress-method-20 () none 20)
    (progress-method-21 () none 21)
    (progress-method-22 () none 22)
    (progress-method-23 () none 23)
    (progress-method-24 () none 24)
    (progress-method-25 () none 25)
    (progress-method-26 () none 26)
    (progress-method-27 () none 27)
    (progress-method-28 () none 28)
    (progress-method-29 () none 29)
    (progress-method-30 () none 30)
    (progress-method-31 () none 31)
    (progress-method-32 () none 32)
    )
  )

;; definition for method 3 of type progress
(defmethod inspect progress ((obj progress))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tcurrent-options: ~A~%" (-> obj current-options))
  (format #t "~2Tmenu-transition: ~f~%" (-> obj menu-transition))
  (format #t "~2Toption-index: ~D~%" (-> obj option-index))
  (format #t "~2Twant-option-index: ~D~%" (-> obj want-option-index))
  (format #t "~2Tnext-option-index: ~D~%" (-> obj next-option-index))
  (format #t "~2Tgraphic-index: ~D~%" (-> obj graphic-index))
  (format #t "~2Tselected-option: ~A~%" (-> obj selected-option))
  (format #t "~2Tcurrent: ~A~%" (-> obj current))
  (format #t "~2Tnext: ~A~%" (-> obj next))
  (format #t "~2Tring-angle: ~f~%" (-> obj ring-angle))
  (format #t "~2Tring-want-angle: ~f~%" (-> obj ring-want-angle))
  (format #t "~2Tinit-quat: #<quaternion @ #x~X>~%" (-> obj init-quat))
  (format #t "~2Tpos-transition: ~f~%" (-> obj pos-transition))
  (format #t "~2Tanim-frame: ~f~%" (-> obj anim-frame))
  (format #t "~2Tswing: ~f~%" (-> obj swing))
  (format #t "~2Tmain-menu: ~A~%" (-> obj main-menu))
  (format #t "~2Tstate-stack[5] @ #x~X~%" (-> obj state-stack))
  (format #t "~2Toption-index-stack[5] @ #x~X~%" (-> obj option-index-stack))
  (format #t "~2Tstate-pos: ~D~%" (-> obj state-pos))
  (format #t "~2Tsecret-buying: ~A~%" (-> obj secret-buying))
  (format #t "~2Tsecret-buy-choice: ~A~%" (-> obj secret-buy-choice))
  (format #t "~2Tsliding: ~f~%" (-> obj sliding))
  (format #t "~2Tsliding-off: ~f~%" (-> obj sliding-off))
  (format #t "~2Tscanlines-alpha: ~f~%" (-> obj scanlines-alpha))
  (format #t "~2Tsliding-height: ~f~%" (-> obj sliding-height))
  (label cfg-4)
  obj
  )

;; definition of type menu-option
(deftype menu-option (basic)
  ((name  uint32                 :offset-assert   4)
   (scale basic                  :offset-assert   8)
   (box   bounding-box 1 :inline :offset-assert  16)
   )
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  (:methods
    (menu-option-method-9 () none 9)
    (menu-option-method-10 () none 10)
    (menu-option-method-11 () none 11)
    )
  )

;; definition for method 3 of type menu-option
(defmethod inspect menu-option ((obj menu-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-on-off-option
(deftype menu-on-off-option (menu-option)
  ((value-to-modify uint32  :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

;; definition for method 3 of type menu-on-off-option
(defmethod inspect menu-on-off-option ((obj menu-on-off-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-yes-no-option
(deftype menu-yes-no-option (menu-option)
  ((value-to-modify uint32  :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

;; definition for method 3 of type menu-yes-no-option
(defmethod inspect menu-yes-no-option ((obj menu-yes-no-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-language-option
(deftype menu-language-option (menu-option)
  ((language-selection  uint64  :offset-assert  48)
   (language-direction  basic   :offset-assert  56)
   (language-transition basic   :offset-assert  60)
   (language-x-offset   int32   :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

;; definition for method 3 of type menu-language-option
(defmethod inspect menu-language-option ((obj menu-language-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlanguage-selection: ~D~%" (-> obj language-selection))
  (format #t "~1Tlanguage-direction: ~A~%" (-> obj language-direction))
  (format #t "~1Tlanguage-transition: ~A~%" (-> obj language-transition))
  (format #t "~1Tlanguage-x-offset: ~D~%" (-> obj language-x-offset))
  (label cfg-4)
  obj
  )

;; definition of type menu-quit-option
(deftype menu-quit-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-quit-option
(defmethod inspect menu-quit-option ((obj menu-quit-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-slider-option
(deftype menu-slider-option (menu-option)
  ((value-to-modify uint32               :offset-assert  48)
   (sprites         hud-sprite 5 :inline :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x180
  :flag-assert         #xc00000180
  )

;; definition for method 3 of type menu-slider-option
(defmethod inspect menu-slider-option ((obj menu-slider-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tsprites[5] @ #x~X~%" (-> obj sprites))
  (label cfg-4)
  obj
  )

;; definition of type menu-sub-menu-option
(deftype menu-sub-menu-option (menu-option)
  ((next-state basic    :offset-assert  48)
   (pad        uint8 44 :offset-assert  52)
   )
  :method-count-assert 12
  :size-assert         #x60
  :flag-assert         #xc00000060
  )

;; definition for method 3 of type menu-sub-menu-option
(defmethod inspect menu-sub-menu-option ((obj menu-sub-menu-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-sub-menu-sound-option
(deftype menu-sub-menu-sound-option (menu-option)
  ((next-state basic  :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

;; definition for method 3 of type menu-sub-menu-sound-option
(defmethod inspect menu-sub-menu-sound-option ((obj menu-sub-menu-sound-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-stereo-mode-sound-option
(deftype menu-stereo-mode-sound-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-stereo-mode-sound-option
(defmethod inspect menu-stereo-mode-sound-option ((obj menu-stereo-mode-sound-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-sub-menu-graphic-option
(deftype menu-sub-menu-graphic-option (menu-option)
  ((next-state basic  :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

;; definition for method 3 of type menu-sub-menu-graphic-option
(defmethod inspect menu-sub-menu-graphic-option ((obj menu-sub-menu-graphic-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-unlocked-menu-option
(deftype menu-unlocked-menu-option (menu-sub-menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x60
  :flag-assert         #xc00000060
  )

;; definition for method 3 of type menu-unlocked-menu-option
(defmethod inspect menu-unlocked-menu-option ((obj menu-unlocked-menu-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-main-menu-option
(deftype menu-main-menu-option (menu-option)
  ((next-state basic  :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #x34
  :flag-assert         #xc00000034
  )

;; definition for method 3 of type menu-main-menu-option
(defmethod inspect menu-main-menu-option ((obj menu-main-menu-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-memcard-slot-option
(deftype menu-memcard-slot-option (menu-option)
  ((sprites hud-sprite 5 :inline :offset-assert  48)
   (pad     uint8      32        :offset-assert 368)
   )
  :method-count-assert 12
  :size-assert         #x190
  :flag-assert         #xc00000190
  )

;; definition for method 3 of type menu-memcard-slot-option
(defmethod inspect menu-memcard-slot-option ((obj menu-memcard-slot-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tsprites[5] @ #x~X~%" (-> obj sprites))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-loading-option
(deftype menu-loading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-loading-option
(defmethod inspect menu-loading-option ((obj menu-loading-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-insufficient-space-option
(deftype menu-insufficient-space-option (menu-option)
  ((last-move uint64  :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #x38
  :flag-assert         #xc00000038
  )

;; definition for method 3 of type menu-insufficient-space-option
(defmethod inspect menu-insufficient-space-option ((obj menu-insufficient-space-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (label cfg-4)
  obj
  )

;; definition of type menu-secrets-insufficient-space-option
(deftype menu-secrets-insufficient-space-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-secrets-insufficient-space-option
(defmethod inspect menu-secrets-insufficient-space-option ((obj menu-secrets-insufficient-space-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-insert-card-option
(deftype menu-insert-card-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-insert-card-option
(defmethod inspect menu-insert-card-option ((obj menu-insert-card-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-error-loading-option
(deftype menu-error-loading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-error-loading-option
(defmethod inspect menu-error-loading-option ((obj menu-error-loading-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-error-auto-saving-option
(deftype menu-error-auto-saving-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-error-auto-saving-option
(defmethod inspect menu-error-auto-saving-option ((obj menu-error-auto-saving-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-card-removed-option
(deftype menu-card-removed-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-card-removed-option
(defmethod inspect menu-card-removed-option ((obj menu-card-removed-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-error-disc-removed-option
(deftype menu-error-disc-removed-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-error-disc-removed-option
(defmethod inspect menu-error-disc-removed-option ((obj menu-error-disc-removed-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-error-reading-option
(deftype menu-error-reading-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-error-reading-option
(defmethod inspect menu-error-reading-option ((obj menu-error-reading-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-icon-info-option
(deftype menu-icon-info-option (menu-option)
  ((sprites hud-sprite 2 :inline :offset-assert  48)
   )
  :method-count-assert 12
  :size-assert         #xb0
  :flag-assert         #xc000000b0
  )

;; definition for method 3 of type menu-icon-info-option
(defmethod inspect menu-icon-info-option ((obj menu-icon-info-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tsprites[2] @ #x~X~%" (-> obj sprites))
  (label cfg-4)
  obj
  )

;; definition of type menu-format-card-option
(deftype menu-format-card-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-format-card-option
(defmethod inspect menu-format-card-option ((obj menu-format-card-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-already-exists-option
(deftype menu-already-exists-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-already-exists-option
(defmethod inspect menu-already-exists-option ((obj menu-already-exists-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-create-game-option
(deftype menu-create-game-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-create-game-option
(defmethod inspect menu-create-game-option ((obj menu-create-game-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-video-mode-warning-option
(deftype menu-video-mode-warning-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-video-mode-warning-option
(defmethod inspect menu-video-mode-warning-option ((obj menu-video-mode-warning-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-video-mode-ok-option
(deftype menu-video-mode-ok-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-video-mode-ok-option
(defmethod inspect menu-video-mode-ok-option ((obj menu-video-mode-ok-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-progressive-mode-warning-option
(deftype menu-progressive-mode-warning-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-progressive-mode-warning-option
(defmethod inspect menu-progressive-mode-warning-option ((obj menu-progressive-mode-warning-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-progressive-mode-ok-option
(deftype menu-progressive-mode-ok-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-progressive-mode-ok-option
(defmethod inspect menu-progressive-mode-ok-option ((obj menu-progressive-mode-ok-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type menu-select-start-option
(deftype menu-select-start-option (menu-option)
  ((task-index      int32   :offset-assert  48)
   (real-task-index int32   :offset-assert  52)
   (last-move       uint64  :offset-assert  56)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-select-start-option
(defmethod inspect menu-select-start-option ((obj menu-select-start-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Ttask-index: ~D~%" (-> obj task-index))
  (format #t "~1Treal-task-index: ~D~%" (-> obj real-task-index))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (label cfg-4)
  obj
  )

;; definition of type menu-select-scene-option
(deftype menu-select-scene-option (menu-option)
  ((task-index int32   :offset-assert  48)
   (last-move  uint64  :offset-assert  56)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-select-scene-option
(defmethod inspect menu-select-scene-option ((obj menu-select-scene-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Ttask-index: ~D~%" (-> obj task-index))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (label cfg-4)
  obj
  )

;; definition of type menu-bigmap-option
(deftype menu-bigmap-option (menu-option)
  ()
  :method-count-assert 12
  :size-assert         #x30
  :flag-assert         #xc00000030
  )

;; definition for method 3 of type menu-bigmap-option
(defmethod inspect menu-bigmap-option ((obj menu-bigmap-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (label cfg-4)
  obj
  )

;; definition of type paged-menu-option
(deftype paged-menu-option (menu-option)
  ((page-index      int32  :offset-assert  48)
   (prev-page-index int32  :offset-assert  52)
   (num-pages       int32  :offset-assert  56)
   (slide-dir       float  :offset-assert  60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type paged-menu-option
(defmethod inspect paged-menu-option ((obj paged-menu-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tpage-index: ~D~%" (-> obj page-index))
  (format #t "~1Tprev-page-index: ~D~%" (-> obj prev-page-index))
  (format #t "~1Tnum-pages: ~D~%" (-> obj num-pages))
  (format #t "~1Tslide-dir: ~f~%" (-> obj slide-dir))
  (label cfg-4)
  obj
  )

;; definition of type menu-missions-option
(deftype menu-missions-option (paged-menu-option)
  ((task-line-index int32   :offset-assert  64)
   (last-move       uint64  :offset-assert  72)
   )
  :method-count-assert 12
  :size-assert         #x50
  :flag-assert         #xc00000050
  )

;; definition for method 3 of type menu-missions-option
(defmethod inspect menu-missions-option ((obj menu-missions-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tpage-index: ~D~%" (-> obj page-index))
  (format #t "~1Tprev-page-index: ~D~%" (-> obj prev-page-index))
  (format #t "~1Tnum-pages: ~D~%" (-> obj num-pages))
  (format #t "~1Tslide-dir: ~f~%" (-> obj slide-dir))
  (format #t "~1Ttask-line-index: ~D~%" (-> obj task-line-index))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (label cfg-4)
  obj
  )

;; definition of type menu-highscores-option
(deftype menu-highscores-option (paged-menu-option)
  ((last-move uint64               :offset-assert  64)
   (sprites   hud-sprite 2 :inline :offset-assert  80)
   )
  :method-count-assert 12
  :size-assert         #xd0
  :flag-assert         #xc000000d0
  )

;; definition for method 3 of type menu-highscores-option
(defmethod inspect menu-highscores-option ((obj menu-highscores-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tpage-index: ~D~%" (-> obj page-index))
  (format #t "~1Tprev-page-index: ~D~%" (-> obj prev-page-index))
  (format #t "~1Tnum-pages: ~D~%" (-> obj num-pages))
  (format #t "~1Tslide-dir: ~f~%" (-> obj slide-dir))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tsprites[2] @ #x~X~%" (-> obj sprites))
  (label cfg-4)
  obj
  )

;; definition of type secret-item-option
(deftype secret-item-option (menu-option)
  ((cost        int32   :offset-assert  48)
   (can-toggle  basic   :offset-assert  52)
   (flag        uint32  :offset-assert  56)
   (avail-after uint16  :offset-assert  60)
   )
  :method-count-assert 12
  :size-assert         #x3e
  :flag-assert         #xc0000003e
  )

;; definition for method 3 of type secret-item-option
(defmethod inspect secret-item-option ((obj secret-item-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tcost: ~D~%" (-> obj cost))
  (format #t "~1Tcan-toggle: ~A~%" (-> obj can-toggle))
  (format #t "~1Tflag: ~D~%" (-> obj flag))
  (format #t "~1Tavail-after: ~D~%" (-> obj avail-after))
  (label cfg-4)
  obj
  )

;; definition of type menu-secret-option
(deftype menu-secret-option (menu-option)
  ((item-index      int32                :offset-assert  48)
   (prev-item-index int32                :offset-assert  52)
   (num-items       int32                :offset-assert  56)
   (num-hero-items  int32                :offset-assert  60)
   (secret-items    basic                :offset-assert  64)
   (last-move       uint64               :offset-assert  72)
   (sprites         hud-sprite 2 :inline :offset-assert  80)
   )
  :method-count-assert 12
  :size-assert         #xd0
  :flag-assert         #xc000000d0
  )

;; definition for method 3 of type menu-secret-option
(defmethod inspect menu-secret-option ((obj menu-secret-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Titem-index: ~D~%" (-> obj item-index))
  (format #t "~1Tprev-item-index: ~D~%" (-> obj prev-item-index))
  (format #t "~1Tnum-items: ~D~%" (-> obj num-items))
  (format #t "~1Tnum-hero-items: ~D~%" (-> obj num-hero-items))
  (format #t "~1Tsecret-items: ~A~%" (-> obj secret-items))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tsprites[2] @ #x~X~%" (-> obj sprites))
  (label cfg-4)
  obj
  )

;; definition of type menu-option-list
(deftype menu-option-list (basic)
  ((y-center int32  :offset-assert   4)
   (y-space  int32  :offset-assert   8)
   (scale    float  :offset-assert  12)
   (options  basic  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type menu-option-list
(defmethod inspect menu-option-list ((obj menu-option-list))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Ty-center: ~D~%" (-> obj y-center))
  (format #t "~1Ty-space: ~D~%" (-> obj y-space))
  (format #t "~1Tscale: ~f~%" (-> obj scale))
  (format #t "~1Toptions: ~A~%" (-> obj options))
  (label cfg-4)
  obj
  )

;; definition of type menu-qr-option
(deftype menu-qr-option (menu-option)
  ((last-move       uint64  :offset-assert  48)
   (value-to-modify uint32  :offset         60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-qr-option
(defmethod inspect menu-qr-option ((obj menu-qr-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-restart-mission-qr-option
(deftype menu-restart-mission-qr-option (menu-qr-option)
  ((next-state basic  :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

;; definition for method 3 of type menu-restart-mission-qr-option
(defmethod inspect menu-restart-mission-qr-option ((obj menu-restart-mission-qr-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-quit-qr-option
(deftype menu-quit-qr-option (menu-qr-option)
  ((next-state basic  :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

;; definition for method 3 of type menu-quit-qr-option
(defmethod inspect menu-quit-qr-option ((obj menu-quit-qr-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-sub-menu-qr-option
(deftype menu-sub-menu-qr-option (menu-qr-option)
  ((next-state basic  :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

;; definition for method 3 of type menu-sub-menu-qr-option
(defmethod inspect menu-sub-menu-qr-option ((obj menu-sub-menu-qr-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-graphic-option
(deftype menu-graphic-option (menu-option)
  ((last-move       uint64  :offset-assert  48)
   (value-to-modify uint32  :offset         60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-graphic-option
(defmethod inspect menu-graphic-option ((obj menu-graphic-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-on-off-progressive-scan-graphic-option
(deftype menu-on-off-progressive-scan-graphic-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-on-off-progressive-scan-graphic-option
(defmethod inspect menu-on-off-progressive-scan-graphic-option ((obj menu-on-off-progressive-scan-graphic-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-aspect-ratio-option
(deftype menu-aspect-ratio-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-aspect-ratio-option
(defmethod inspect menu-aspect-ratio-option ((obj menu-aspect-ratio-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-center-screen-graphic-option
(deftype menu-center-screen-graphic-option (menu-graphic-option)
  ((next-state basic  :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

;; definition for method 3 of type menu-center-screen-graphic-option
(defmethod inspect menu-center-screen-graphic-option ((obj menu-center-screen-graphic-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-video-mode-option
(deftype menu-video-mode-option (menu-graphic-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-video-mode-option
(defmethod inspect menu-video-mode-option ((obj menu-video-mode-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-game-option
(deftype menu-game-option (menu-option)
  ((last-move       uint64  :offset-assert  48)
   (value-to-modify uint32  :offset         60)
   )
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-game-option
(defmethod inspect menu-game-option ((obj menu-game-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-on-off-game-vibrations-option
(deftype menu-on-off-game-vibrations-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-on-off-game-vibrations-option
(defmethod inspect menu-on-off-game-vibrations-option ((obj menu-on-off-game-vibrations-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-on-off-game-subtitles-option
(deftype menu-on-off-game-subtitles-option (menu-game-option)
  ()
  :method-count-assert 12
  :size-assert         #x40
  :flag-assert         #xc00000040
  )

;; definition for method 3 of type menu-on-off-game-subtitles-option
(defmethod inspect menu-on-off-game-subtitles-option ((obj menu-on-off-game-subtitles-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (label cfg-4)
  obj
  )

;; definition of type menu-sub-menu-game-option
(deftype menu-sub-menu-game-option (menu-game-option)
  ((next-state basic  :offset-assert  64)
   )
  :method-count-assert 12
  :size-assert         #x44
  :flag-assert         #xc00000044
  )

;; definition for method 3 of type menu-sub-menu-game-option
(defmethod inspect menu-sub-menu-game-option ((obj menu-sub-menu-game-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (label cfg-4)
  obj
  )

;; definition of type menu-language-game-option
(deftype menu-language-game-option (menu-game-option)
  ((language-selection  uint64  :offset-assert  64)
   (language-direction  basic   :offset-assert  72)
   (language-transition basic   :offset-assert  76)
   (language-x-offset   int32   :offset-assert  80)
   )
  :method-count-assert 12
  :size-assert         #x54
  :flag-assert         #xc00000054
  )

;; definition for method 3 of type menu-language-game-option
(defmethod inspect menu-language-game-option ((obj menu-language-game-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tlanguage-selection: ~D~%" (-> obj language-selection))
  (format #t "~1Tlanguage-direction: ~A~%" (-> obj language-direction))
  (format #t "~1Tlanguage-transition: ~A~%" (-> obj language-transition))
  (format #t "~1Tlanguage-x-offset: ~D~%" (-> obj language-x-offset))
  (label cfg-4)
  obj
  )

;; definition of type menu-subtitle-language-game-option
(deftype menu-subtitle-language-game-option (menu-game-option)
  ((language-selection  uint64  :offset-assert  64)
   (language-direction  basic   :offset-assert  72)
   (language-transition basic   :offset-assert  76)
   (language-x-offset   int32   :offset-assert  80)
   )
  :method-count-assert 12
  :size-assert         #x54
  :flag-assert         #xc00000054
  )

;; definition for method 3 of type menu-subtitle-language-game-option
(defmethod inspect menu-subtitle-language-game-option ((obj menu-subtitle-language-game-option))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tscale: ~A~%" (-> obj scale))
  (format #t "~1Tbox[1] @ #x~X~%" (-> obj box))
  (format #t "~1Tlast-move: ~D~%" (-> obj last-move))
  (format #t "~1Tname: ~D~%" (-> obj name))
  (format #t "~1Tvalue-to-modify: #x~X~%" (-> obj value-to-modify))
  (format #t "~1Tlanguage-selection: ~D~%" (-> obj language-selection))
  (format #t "~1Tlanguage-direction: ~A~%" (-> obj language-direction))
  (format #t "~1Tlanguage-transition: ~A~%" (-> obj language-transition))
  (format #t "~1Tlanguage-x-offset: ~D~%" (-> obj language-x-offset))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




