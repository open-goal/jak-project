;;-*-Lisp-*-
(in-package goal)

;; definition of type rigid-body-info
(deftype rigid-body-info (structure)
  ((mass                float          :offset-assert   0)
   (inv-mass            float          :offset-assert   4)
   (linear-damping      float          :offset-assert   8)
   (angular-damping     float          :offset-assert  12)
   (bounce-factor       float          :offset-assert  16)
   (friction-factor     float          :offset-assert  20)
   (bounce-mult-factor  float          :offset-assert  24)
   (cm-offset-joint     vector :inline :offset-assert  32)
   (inv-inertial-tensor matrix :inline :offset-assert  48)
   (inertial-tensor     matrix :inline :offset-assert 112)
   (inertial-tensor-box meters 3       :offset-assert 176)
   )
  :method-count-assert 10
  :size-assert         #xbc
  :flag-assert         #xa000000bc
  (:methods
    (rigid-body-info-method-9 (_type_) none 9)
    )
  )

;; definition for method 3 of type rigid-body-info
(defmethod inspect rigid-body-info ((obj rigid-body-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body-info)
  (format #t "~1Tmass: ~f~%" (-> obj mass))
  (format #t "~1Tinv-mass: ~f~%" (-> obj inv-mass))
  (format #t "~1Tlinear-damping: ~f~%" (-> obj linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> obj angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> obj bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> obj friction-factor))
  (format #t "~1Tbounce-mult-factor: ~f~%" (-> obj bounce-mult-factor))
  (format #t "~1Tcm-offset-joint: ~`vector`P~%" (-> obj cm-offset-joint))
  (format #t "~1Tinv-inertial-tensor: #<matrix @ #x~X>~%" (-> obj inv-inertial-tensor))
  (format #t "~1Tinertial-tensor: #<matrix @ #x~X>~%" (-> obj inertial-tensor))
  (format #t "~1Tinertial-tensor-box[3] @ #x~X~%" (-> obj inertial-tensor-box))
  (label cfg-4)
  obj
  )

;; definition of type rigid-body-object-extra-info
(deftype rigid-body-object-extra-info (structure)
  ((max-time-step      float   :offset-assert   0)
   (gravity            meters  :offset-assert   4)
   (idle-distance      meters  :offset-assert   8)
   (attack-force-scale float   :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type rigid-body-object-extra-info
(defmethod inspect rigid-body-object-extra-info ((obj rigid-body-object-extra-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body-object-extra-info)
  (format #t "~1Tmax-time-step: ~f~%" (-> obj max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> obj gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> obj idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> obj attack-force-scale))
  (label cfg-4)
  obj
  )

;; definition of type rigid-body-object-constants
(deftype rigid-body-object-constants (structure)
  ((info               rigid-body-info              :inline :offset-assert   0)
   (mass               float                                :offset          0)
   (inv-mass           float                                :offset          4)
   (cm-joint-x         meters                               :offset         32)
   (cm-joint-y         meters                               :offset         36)
   (cm-joint-z         meters                               :offset         40)
   (cm-joint-w         float                                :offset         44)
   (linear-damping     float                                :offset          8)
   (angular-damping    float                                :offset         12)
   (bounce-factor      float                                :offset         16)
   (friction-factor    float                                :offset         20)
   (inertial-tensor-x  meters                               :offset        176)
   (inertial-tensor-y  meters                               :offset        180)
   (inertial-tensor-z  meters                               :offset        184)
   (extra              rigid-body-object-extra-info :inline :offset-assert 188)
   (max-time-step      float                                :offset        188)
   (gravity            meters                               :offset        192)
   (idle-distance      meters                               :offset        196)
   (attack-force-scale float                                :offset        200)
   (name               symbol                               :offset-assert 204)
   )
  :method-count-assert 9
  :size-assert         #xd0
  :flag-assert         #x9000000d0
  )

;; definition for method 3 of type rigid-body-object-constants
(defmethod inspect rigid-body-object-constants ((obj rigid-body-object-constants))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body-object-constants)
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (&-> obj mass))
  (format #t "~1Tmass: ~f~%" (-> obj mass))
  (format #t "~1Tinv-mass: ~f~%" (-> obj inv-mass))
  (format #t "~1Tcm-joint-x: (meters ~m)~%" (-> obj cm-joint-x))
  (format #t "~1Tcm-joint-y: (meters ~m)~%" (-> obj cm-joint-y))
  (format #t "~1Tcm-joint-z: (meters ~m)~%" (-> obj cm-joint-z))
  (format #t "~1Tlinear-damping: ~f~%" (-> obj linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> obj angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> obj bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> obj friction-factor))
  (format #t "~1Tinertial-tensor-x: (meters ~m)~%" (-> obj inertial-tensor-x))
  (format #t "~1Tinertial-tensor-y: (meters ~m)~%" (-> obj inertial-tensor-y))
  (format #t "~1Tinertial-tensor-z: (meters ~m)~%" (-> obj inertial-tensor-z))
  (format #t "~1Textra: #<rigid-body-object-extra-info @ #x~X>~%" (&-> obj max-time-step))
  (format #t "~1Tmax-time-step: ~f~%" (-> obj max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> obj gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> obj idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> obj attack-force-scale))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (label cfg-4)
  obj
  )

;; definition of type rigid-body-impact
(deftype rigid-body-impact (structure)
  ((point    vector :inline :offset-assert   0)
   (normal   vector :inline :offset-assert  16)
   (velocity vector :inline :offset-assert  32)
   (impulse  float          :offset-assert  48)
   (pat      uint32         :offset-assert  52)
   (rbody    basic          :offset-assert  56)
   (prim-id  uint32         :offset-assert  60)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type rigid-body-impact
(defmethod inspect rigid-body-impact ((obj rigid-body-impact))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body-impact)
  (format #t "~1Tpoint: ~`vector`P~%" (-> obj point))
  (format #t "~1Tnormal: ~`vector`P~%" (-> obj normal))
  (format #t "~1Tvelocity: ~`vector`P~%" (-> obj velocity))
  (format #t "~1Timpulse: ~f~%" (-> obj impulse))
  (format #t "~1Tpat: ~D~%" (-> obj pat))
  (format #t "~1Trbody: ~A~%" (-> obj rbody))
  (format #t "~1Tprim-id: ~D~%" (-> obj prim-id))
  (label cfg-4)
  obj
  )

;; definition of type rigid-body
(deftype rigid-body (structure)
  ((work           rigid-body-work                      :offset-assert   0)
   (info           rigid-body-info                      :offset-assert   4)
   (flags          rigid-body-flag                      :offset-assert   8)
   (force-callback (function object float none)         :offset-assert  12)
   (blocked-by     basic                                :offset-assert  16)
   (time-remaining float                                :offset-assert  20)
   (step-count     int16                                :offset-assert  24)
   (position       vector                       :inline :offset-assert  32)
   (rot            vector                       :inline :offset-assert  48)
   (rotation       quaternion                   :inline :offset         48)
   (lin-momentum   vector                       :inline :offset-assert  64)
   (ang-momentum   vector                       :inline :offset-assert  80)
   (force          vector                       :inline :offset-assert  96)
   (torque         vector                       :inline :offset-assert 112)
   (lin-velocity   vector                       :inline :offset-assert 128)
   (ang-velocity   vector                       :inline :offset-assert 144)
   (matrix         matrix                       :inline :offset-assert 160)
   (inv-i-world    matrix                       :inline :offset-assert 224)
   )
  :method-count-assert 32
  :size-assert         #x120
  :flag-assert         #x2000000120
  (:methods
    (rigid-body-method-9 (_type_ collide-shape-moving float) none 9)
    (rigid-body-method-10 (_type_) none 10)
    (rigid-body-method-11 (_type_ collide-shape-moving) none 11)
    (rigid-body-method-12 (_type_ float) none 12)
    (rigid-body-method-13 (_type_) none 13)
    (rigid-body-method-14 (_type_ float) none 14)
    (rigid-body-method-15 () none 15)
    (clear-force-torque! (_type_) none 16)
    (clear-momentum! (_type_) none 17)
    (rigid-body-method-18 (_type_ vector vector) none 18)
    (rigid-body-method-19 (_type_ vector vector) none 19)
    (rigid-body-method-20 (_type_ vector) none 20)
    (rigid-body-method-21 (_type_ vector vector float) none 21)
    (rigid-body-method-22 (_type_ vector vector) vector 22)
    (rigid-body-method-23 (_type_ vector) vector 23)
    (rigid-body-method-24 (_type_) none 24)
    (rigid-body-method-25 (_type_ rigid-body-info vector quaternion function) none 25)
    (rigid-body-method-26 (_type_ vector quaternion) none 26)
    (print-physics (_type_ object) none 27)
    (print-force-torque (_type_ object) none 28)
    (print-position-rotation (_type_ object) none 29)
    (print-momentum (_type_ object) none 30)
    (print-velocity (_type_ object) none 31)
    )
  )

;; definition for method 3 of type rigid-body
(defmethod inspect rigid-body ((obj rigid-body))
  (when (not obj)
    (set! obj obj)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body)
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> obj info))
  (format #t "~1Tflags: #x~X : (rigid-body-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (rigid-body-flag active)) (rigid-body-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (rigid-body-flag blocker)) (rigid-body-flag blocker))
        (format #t "blocker ")
        )
    (if (= (logand s5-0 (rigid-body-flag enable-physics)) (rigid-body-flag enable-physics))
        (format #t "enable-physics ")
        )
    (if (= (logand s5-0 (rigid-body-flag display-marks)) (rigid-body-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (rigid-body-flag enable-collision)) (rigid-body-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-flag debug)) (rigid-body-flag debug))
        (format #t "debug ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tforce-callback: ~A~%" (-> obj force-callback))
  (format #t "~1Tblocked-by: ~A~%" (-> obj blocked-by))
  (format #t "~1Ttime-remaining: ~f~%" (-> obj time-remaining))
  (format #t "~1Tstep-count: ~D~%" (-> obj step-count))
  (format #t "~1Tposition: ~`vector`P~%" (-> obj position))
  (format #t "~1Trot: ~`vector`P~%" (-> obj rotation))
  (format #t "~1Trotation: #<quaternion @ #x~X>~%" (-> obj rotation))
  (format #t "~1Tlin-momentum: ~`vector`P~%" (-> obj lin-momentum))
  (format #t "~1Tang-momentum: ~`vector`P~%" (-> obj ang-momentum))
  (format #t "~1Tforce: ~`vector`P~%" (-> obj force))
  (format #t "~1Ttorque: ~`vector`P~%" (-> obj torque))
  (format #t "~1Tlin-velocity: ~`vector`P~%" (-> obj lin-velocity))
  (format #t "~1Tang-velocity: ~`vector`P~%" (-> obj ang-velocity))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> obj matrix))
  (format #t "~1Tinv-i-world: #<matrix @ #x~X>~%" (-> obj inv-i-world))
  (label cfg-16)
  obj
  )

;; definition of type rigid-body-control
(deftype rigid-body-control (basic)
  ((process        process                 :offset-assert   4)
   (state          rigid-body      :inline :offset-assert  16)
   (work           basic                   :offset         16)
   (info           rigid-body-info         :offset         20)
   (flags          rigid-body-flag         :offset         24)
   (force-callback basic                   :offset         28)
   (blocked-by     basic                   :offset         32)
   (time-remaining float                   :offset         36)
   (step-count     int16                   :offset         40)
   (position       vector          :inline :offset         48)
   (rot            vector          :inline :offset         64)
   (rotation       quaternion      :inline :offset         64)
   (lin-momentum   vector          :inline :offset         80)
   (ang-momentum   vector          :inline :offset         96)
   (force          vector          :inline :offset        112)
   (torque         vector          :inline :offset        128)
   (lin-velocity   vector          :inline :offset        144)
   (ang-velocity   vector          :inline :offset        160)
   (matrix         matrix          :inline :offset        176)
   (inv-i-world    matrix          :inline :offset        240)
   )
  :method-count-assert 26
  :size-assert         #x130
  :flag-assert         #x1a00000130
  (:methods
    (new (symbol type process) _type_ 0)
    (rigid-body-control-method-9 (_type_ collide-shape-moving float) none 9)
    (rigid-body-control-method-10 (_type_ rigid-body-object float float) object 10)
    (rigid-body-control-method-11 (_type_ collide-shape-moving) none 11)
    (rigid-body-control-method-12 (_type_ float) none 12)
    (rigid-body-control-method-13 (_type_) none 13)
    (rigid-body-control-method-14 (_type_ float) none 14)
    (clear-force-torque! (_type_) none 15)
    (clear-momentum! (_type_) none 16)
    (rigid-body-control-method-17 (_type_ vector vector) none 17)
    (rigid-body-control-method-18 (_type_ vector vector) none 18)
    (rigid-body-control-method-19 (_type_ vector) none 19)
    (rigid-body-control-method-20 (_type_ vector vector float) none 20)
    (rigid-body-control-method-21 (_type_ vector vector) vector 21)
    (rigid-body-control-method-22 (_type_ vector) vector 22)
    (rigid-body-control-method-23 (_type_) none 23)
    (rigid-body-control-method-24 (_type_ rigid-body-info vector quaternion basic) none 24)
    (rigid-body-control-method-25 (_type_ vector quaternion) none 25)
    )
  )

;; definition for method 3 of type rigid-body-control
(defmethod inspect rigid-body-control ((obj rigid-body-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tprocess: ~A~%" (-> obj process))
  (format #t "~1Tstate: #<rigid-body @ #x~X>~%" (-> obj state))
  (format #t "~1Twork: ~A~%" (-> obj state work))
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> obj state info))
  (format #t "~1Tflags: #x~X : (rigid-body-flag " (-> obj state flags))
  (let ((s5-0 (-> obj state flags)))
    (if (= (logand s5-0 (rigid-body-flag active)) (rigid-body-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (rigid-body-flag blocker)) (rigid-body-flag blocker))
        (format #t "blocker ")
        )
    (if (= (logand s5-0 (rigid-body-flag enable-physics)) (rigid-body-flag enable-physics))
        (format #t "enable-physics ")
        )
    (if (= (logand s5-0 (rigid-body-flag display-marks)) (rigid-body-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (rigid-body-flag enable-collision)) (rigid-body-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-flag debug)) (rigid-body-flag debug))
        (format #t "debug ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tforce-callback: ~A~%" (-> obj state force-callback))
  (format #t "~1Tblocked-by: ~A~%" (-> obj state blocked-by))
  (format #t "~1Ttime-remaining: ~f~%" (-> obj state time-remaining))
  (format #t "~1Tstep-count: ~D~%" (-> obj state step-count))
  (format #t "~1Tposition: ~`vector`P~%" (-> obj state position))
  (format #t "~1Trot: ~`vector`P~%" (-> obj state rotation))
  (format #t "~1Trotation: #<quaternion @ #x~X>~%" (-> obj state rotation))
  (format #t "~1Tlin-momentum: ~`vector`P~%" (-> obj state lin-momentum))
  (format #t "~1Tang-momentum: ~`vector`P~%" (-> obj state ang-momentum))
  (format #t "~1Tforce: ~`vector`P~%" (-> obj state force))
  (format #t "~1Ttorque: ~`vector`P~%" (-> obj state torque))
  (format #t "~1Tlin-velocity: ~`vector`P~%" (-> obj state lin-velocity))
  (format #t "~1Tang-velocity: ~`vector`P~%" (-> obj state ang-velocity))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> obj state matrix))
  (format #t "~1Tinv-i-world: #<matrix @ #x~X>~%" (-> obj state inv-i-world))
  (label cfg-16)
  obj
  )

;; definition for method 9 of type rigid-body-control
(defmethod rigid-body-control-method-9 rigid-body-control ((obj rigid-body-control) (arg0 collide-shape-moving) (arg1 float))
  (rigid-body-method-9 (-> obj state) arg0 arg1)
  (none)
  )

;; definition for method 10 of type rigid-body-control
;; WARN: Return type mismatch none vs object.
(defmethod rigid-body-control-method-10 rigid-body-control ((obj rigid-body-control) (arg0 rigid-body-object) (arg1 float) (arg2 float))
  (the-as object (rigid-body-method-10 (-> obj state)))
  )

;; definition for method 11 of type rigid-body-control
(defmethod rigid-body-control-method-11 rigid-body-control ((obj rigid-body-control) (arg0 collide-shape-moving))
  (rigid-body-method-11 (-> obj state) arg0)
  (none)
  )

;; definition for method 12 of type rigid-body-control
(defmethod rigid-body-control-method-12 rigid-body-control ((obj rigid-body-control) (arg0 float))
  (rigid-body-method-12 (-> obj state) arg0)
  (none)
  )

;; definition for method 13 of type rigid-body-control
(defmethod rigid-body-control-method-13 rigid-body-control ((obj rigid-body-control))
  (rigid-body-method-13 (-> obj state))
  (none)
  )

;; definition for method 14 of type rigid-body-control
(defmethod rigid-body-control-method-14 rigid-body-control ((obj rigid-body-control) (arg0 float))
  (rigid-body-method-14 (-> obj state) arg0)
  (none)
  )

;; definition for method 15 of type rigid-body-control
(defmethod clear-force-torque! rigid-body-control ((obj rigid-body-control))
  (clear-force-torque! (-> obj state))
  (none)
  )

;; definition for method 16 of type rigid-body-control
(defmethod clear-momentum! rigid-body-control ((obj rigid-body-control))
  (clear-momentum! (-> obj state))
  (none)
  )

;; definition for method 17 of type rigid-body-control
(defmethod rigid-body-control-method-17 rigid-body-control ((obj rigid-body-control) (arg0 vector) (arg1 vector))
  (rigid-body-method-18 (-> obj state) arg0 arg1)
  (none)
  )

;; definition for method 18 of type rigid-body-control
(defmethod rigid-body-control-method-18 rigid-body-control ((obj rigid-body-control) (arg0 vector) (arg1 vector))
  (rigid-body-method-19 (-> obj state) arg0 arg1)
  (none)
  )

;; definition for method 19 of type rigid-body-control
(defmethod rigid-body-control-method-19 rigid-body-control ((obj rigid-body-control) (arg0 vector))
  (rigid-body-method-20 (-> obj state) arg0)
  (none)
  )

;; definition for method 20 of type rigid-body-control
(defmethod rigid-body-control-method-20 rigid-body-control ((obj rigid-body-control) (arg0 vector) (arg1 vector) (arg2 float))
  (rigid-body-method-21 (-> obj state) arg0 arg1 arg2)
  (none)
  )

;; definition for method 21 of type rigid-body-control
(defmethod rigid-body-control-method-21 rigid-body-control ((obj rigid-body-control) (arg0 vector) (arg1 vector))
  (rigid-body-method-22 (-> obj state) arg0 arg1)
  )

;; definition for method 22 of type rigid-body-control
(defmethod rigid-body-control-method-22 rigid-body-control ((obj rigid-body-control) (arg0 vector))
  (rigid-body-method-23 (-> obj state) arg0)
  )

;; definition for method 23 of type rigid-body-control
(defmethod rigid-body-control-method-23 rigid-body-control ((obj rigid-body-control))
  (rigid-body-method-24 (-> obj state))
  (none)
  )

;; definition for method 24 of type rigid-body-control
(defmethod rigid-body-control-method-24 rigid-body-control ((obj rigid-body-control) (arg0 rigid-body-info) (arg1 vector) (arg2 quaternion) (arg3 basic))
  (rigid-body-method-25 (-> obj state) arg0 arg1 arg2 (the-as function arg3))
  (none)
  )

;; definition for method 25 of type rigid-body-control
(defmethod rigid-body-control-method-25 rigid-body-control ((obj rigid-body-control) (arg0 vector) (arg1 quaternion))
  (rigid-body-method-26 (-> obj state) arg0 arg1)
  (none)
  )

;; definition of type rigid-body-object
(deftype rigid-body-object (process-focusable)
  ((root-override-2       collide-shape-moving                :offset        128)
   (info                  rigid-body-object-constants         :offset-assert 204)
   (flags                 rigid-body-object-flag              :offset-assert 208)
   (max-time-step         float                               :offset-assert 216)
   (incoming-attack-id    uint32                              :offset-assert 220)
   (player-touch-time     time-frame                          :offset-assert 224)
   (disturbed-time        time-frame                          :offset-assert 232)
   (player-force-position vector                      :inline :offset-assert 240)
   (player-force          vector                      :inline :offset-assert 256)
   )
  :heap-base #x90
  :method-count-assert 53
  :size-assert         #x110
  :flag-assert         #x3500900110
  (:methods
    (idle () _type_ :state 27)
    (active () _type_ :state 28)
    (rigid-body-object-method-29 (_type_ float) none 29)
    (rigid-body-object-method-30 (_type_) none 30)
    (rigid-body-object-method-31 (_type_ rigid-body-object-constants) none 31)
    (rigid-body-object-method-32 (_type_) none 32)
    (rigid-body-object-method-33 (_type_) none 33)
    (rigid-body-object-method-34 (_type_) none 34)
    (rigid-body-object-method-35 (_type_) none 35)
    (rigid-body-object-method-36 () none 36)
    (rigid-body-object-method-37 (_type_) none 37)
    (rigid-body-object-method-38 (_type_) none 38)
    (rigid-body-object-method-39 (_type_) none 39)
    (rigid-body-object-method-40 (_type_) none 40)
    (rigid-body-object-method-41 (_type_) none 41)
    (rigid-body-object-method-42 (_type_) none :behavior rigid-body-object 42)
    (rigid-body-object-method-43 (_type_) none 43)
    (rigid-body-object-method-44 (_type_ float) none 44)
    (rigid-body-object-method-45 (_type_ rigid-body-object-constants) sound-id 45)
    (rigid-body-object-method-46 (_type_ process-drawable int symbol event-message-block) none :behavior rigid-body-object 46)
    (rigid-body-object-method-47 (_type_ process-drawable attack-info object penetrate) symbol 47)
    (rigid-body-object-method-48 (_type_ object object) none 48)
    (rigid-body-object-method-49 (_type_ matrix touching-shapes-entry) none 49)
    (rigid-body-object-method-50 (_type_ float) none 50)
    (rigid-body-object-method-51 (_type_) none 51)
    (rigid-body-object-method-52 (_type_) none 52)
    )
  )

;; definition for method 3 of type rigid-body-object
(defmethod inspect rigid-body-object ((obj rigid-body-object))
  (when (not obj)
    (set! obj obj)
    (goto cfg-22)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tinfo: #<rigid-body-object-constants @ #x~X>~%" (-> obj info))
  (format #t "~2Tflags: #x~X : (rigid-body-object-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (rigid-body-object-flag dead)) (rigid-body-object-flag dead))
        (format #t "dead ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag damaged)) (rigid-body-object-flag damaged))
        (format #t "damaged ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-contact-force)) (rigid-body-object-flag player-contact-force))
        (format #t "player-contact-force ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag disturbed)) (rigid-body-object-flag disturbed))
        (format #t "disturbed ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag enable-collision)) (rigid-body-object-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-edge-grabbing)) (rigid-body-object-flag player-edge-grabbing))
        (format #t "player-edge-grabbing ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-touching)) (rigid-body-object-flag player-touching))
        (format #t "player-touching ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-standing-on)) (rigid-body-object-flag player-standing-on))
        (format #t "player-standing-on ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-impulse-force)) (rigid-body-object-flag player-impulse-force))
        (format #t "player-impulse-force ")
        )
    )
  (format #t ")~%")
  (format #t "~2Tmax-time-step: ~f~%" (-> obj max-time-step))
  (format #t "~2Tincoming-attack-id: ~D~%" (-> obj incoming-attack-id))
  (format #t "~2Tplayer-touch-time: ~D~%" (-> obj player-touch-time))
  (format #t "~2Tdisturbed-time: ~D~%" (-> obj disturbed-time))
  (format #t "~2Tplayer-force-position: #<vector @ #x~X>~%" (-> obj player-force-position))
  (format #t "~2Tplayer-force: #<vector @ #x~X>~%" (-> obj player-force))
  (label cfg-22)
  obj
  )

;; definition of type rigid-body-queue
(deftype rigid-body-queue (structure)
  ((count int8       :offset-assert   0)
   (array uint64 128 :offset          8)
   )
  :method-count-assert 17
  :size-assert         #x408
  :flag-assert         #x1100000408
  (:methods
    (rigid-body-queue-method-9 (_type_) none 9)
    (rigid-body-queue-method-10 (_type_) none 10)
    (rigid-body-queue-method-11 (_type_) none 11)
    (rigid-body-queue-method-12 (_type_ int int) none 12)
    (rigid-body-queue-method-13 (_type_) none 13)
    (rigid-body-queue-method-14 (_type_ int) none 14)
    (rigid-body-queue-method-15 (_type_) none 15)
    (validate (_type_) symbol 16)
    )
  )

;; definition for method 3 of type rigid-body-queue
(defmethod inspect rigid-body-queue ((obj rigid-body-queue))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'rigid-body-queue)
  (format #t "~1Tcount: ~D~%" (-> obj count))
  (format #t "~1Tarray[128] @ #x~X~%" (-> obj array))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
