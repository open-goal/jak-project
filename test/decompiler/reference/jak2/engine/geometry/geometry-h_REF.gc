;;-*-Lisp-*-
(in-package goal)

;; definition of type curve
(deftype curve (structure)
  ((cverts     (inline-array vector)  :offset-assert   0)
   (num-cverts int32                  :offset-assert   4)
   (knots      (pointer float)        :offset-assert   8)
   (num-knots  int32                  :offset-assert  12)
   (length     float                  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type curve
(defmethod inspect curve ((this curve))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'curve)
  (format #t "~1Tcverts: #x~X~%" (-> this cverts))
  (format #t "~1Tnum-cverts: ~D~%" (-> this num-cverts))
  (format #t "~1Tknots: #x~X~%" (-> this knots))
  (format #t "~1Tnum-knots: ~D~%" (-> this num-knots))
  (format #t "~1Tlength: ~f~%" (-> this length))
  (label cfg-4)
  this
  )

;; definition of type border-plane
(deftype border-plane (basic)
  ((name   symbol         :offset-assert   4)
   (action basic          :offset-assert   8)
   (slot   int8           :offset-assert  12)
   (trans  vector :inline :offset-assert  16)
   (normal vector :inline :offset-assert  32)
   )
  :method-count-assert 11
  :size-assert         #x30
  :flag-assert         #xb00000030
  (:methods
    (debug-draw (_type_) int 9)
    (point-past-plane? (_type_ vector) symbol 10)
    )
  )

;; definition for method 3 of type border-plane
(defmethod inspect border-plane ((this border-plane))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Taction: ~A~%" (-> this action))
  (format #t "~1Tslot: ~D~%" (-> this slot))
  (format #t "~1Ttrans: ~`vector`P~%" (-> this trans))
  (format #t "~1Tnormal: ~`vector`P~%" (-> this normal))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
