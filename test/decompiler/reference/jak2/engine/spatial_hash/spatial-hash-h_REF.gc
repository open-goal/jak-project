;;-*-Lisp-*-
(in-package goal)

;; definition of type grid-hash-word
(deftype grid-hash-word (uint8)
  ()
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

;; definition of type grid-hash-box
(deftype grid-hash-box (structure)
  ((min uint8 3 :offset-assert   0)
   (max uint8 3 :offset-assert   3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

;; definition for method 3 of type grid-hash-box
(defmethod inspect grid-hash-box ((obj grid-hash-box))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'grid-hash-box)
  (format #t "~1Tmin[3] @ #x~X~%" (-> obj min))
  (format #t "~1Tmax[3] @ #x~X~%" (-> obj max))
  (label cfg-4)
  obj
  )

;; definition of type grid-hash
(deftype grid-hash (basic)
  ((work                basic                 :offset-assert   4)
   (search-box          grid-hash-box :inline :offset-assert   8)
   (bucket-size         int16                 :offset-assert  14)
   (axis-scale          uint32        3       :offset-assert  16)
   (dimension-array     uint8         3       :offset-assert  28)
   (vertical-cell-count int8                  :offset-assert  31)
   (bucket-array        uint32                :offset-assert  32)
   (box-min             uint32        3       :offset-assert  36)
   (box-max             uint32        3       :offset-assert  48)
   (object-count        int16                 :offset-assert  60)
   (bucket-count        int16                 :offset-assert  62)
   (min-cell-size       float                 :offset-assert  64)
   (bucket-memory-size  int32                 :offset-assert  68)
   (mem-bucket-array    uint32                :offset-assert  72)
   (spr-bucket-array    uint32                :offset-assert  76)
   (debug-draw          basic                 :offset-assert  80)
   (use-scratch-ram     basic                 :offset-assert  84)
   )
  :method-count-assert 25
  :size-assert         #x58
  :flag-assert         #x1900000058
  (:methods
    (grid-hash-method-9 () none 9)
    (grid-hash-method-10 () none 10)
    (grid-hash-method-11 () none 11)
    (grid-hash-method-12 () none 12)
    (grid-hash-method-13 () none 13)
    (grid-hash-method-14 () none 14)
    (grid-hash-method-15 () none 15)
    (grid-hash-method-16 () none 16)
    (grid-hash-method-17 () none 17)
    (grid-hash-method-18 () none 18)
    (grid-hash-method-19 () none 19)
    (grid-hash-method-20 () none 20)
    (grid-hash-method-21 () none 21)
    (grid-hash-method-22 () none 22)
    (grid-hash-method-23 () none 23)
    (grid-hash-method-24 () none 24)
    )
  )

;; definition for method 3 of type grid-hash
(defmethod inspect grid-hash ((obj grid-hash))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tsearch-box: #<grid-hash-box @ #x~X>~%" (-> obj search-box))
  (format #t "~1Tbucket-size: ~D~%" (-> obj bucket-size))
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tvertical-cell-count: ~D~%" (-> obj vertical-cell-count))
  (format #t "~1Tbucket-array: #x~X~%" (-> obj bucket-array))
  (format #t "~1Tbox-min[3] @ #x~X~%" (-> obj box-min))
  (format #t "~1Tbox-max[3] @ #x~X~%" (-> obj box-max))
  (format #t "~1Tobject-count: ~D~%" (-> obj object-count))
  (format #t "~1Tbucket-count: ~D~%" (-> obj bucket-count))
  (format #t "~1Tmin-cell-size: ~f~%" (-> obj min-cell-size))
  (format #t "~1Tbucket-memory-size: ~D~%" (-> obj bucket-memory-size))
  (format #t "~1Tmem-bucket-array: #x~X~%" (-> obj mem-bucket-array))
  (format #t "~1Tspr-bucket-array: #x~X~%" (-> obj spr-bucket-array))
  (format #t "~1Tdebug-draw: ~A~%" (-> obj debug-draw))
  (format #t "~1Tuse-scratch-ram: ~A~%" (-> obj use-scratch-ram))
  (label cfg-4)
  obj
  )

;; definition of type find-nav-sphere-ids-params
(deftype find-nav-sphere-ids-params (structure)
  ((bsphere     sphere :inline :offset-assert   0)
   (y-threshold float          :offset-assert  16)
   (len         int16          :offset-assert  20)
   (max-len     int16          :offset-assert  22)
   (mask        uint8          :offset-assert  24)
   (array       uint32         :offset-assert  28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type find-nav-sphere-ids-params
(defmethod inspect find-nav-sphere-ids-params ((obj find-nav-sphere-ids-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'find-nav-sphere-ids-params)
  (format #t "~1Tbsphere: #<sphere @ #x~X>~%" (-> obj bsphere))
  (format #t "~1Ty-threshold: ~f~%" (-> obj y-threshold))
  (format #t "~1Tlen: ~D~%" (-> obj len))
  (format #t "~1Tmax-len: ~D~%" (-> obj max-len))
  (format #t "~1Tmask: ~D~%" (-> obj mask))
  (format #t "~1Tarray: #x~X~%" (-> obj array))
  (label cfg-4)
  obj
  )

;; definition of type sphere-hash
(deftype sphere-hash (grid-hash)
  ((sphere-array     uint32  :offset-assert  88)
   (max-object-count int16   :offset-assert  92)
   (pad              int16   :offset-assert  94)
   (mem-sphere-array uint32  :offset-assert  96)
   (spr-sphere-array uint32  :offset-assert 100)
   )
  :method-count-assert 34
  :size-assert         #x68
  :flag-assert         #x2200000068
  (:methods
    (sphere-hash-method-25 () none 25)
    (sphere-hash-method-26 () none 26)
    (sphere-hash-method-27 () none 27)
    (sphere-hash-method-28 () none 28)
    (sphere-hash-method-29 () none 29)
    (sphere-hash-method-30 () none 30)
    (sphere-hash-method-31 () none 31)
    (sphere-hash-method-32 () none 32)
    (sphere-hash-method-33 () none 33)
    )
  )

;; definition for method 3 of type sphere-hash
(defmethod inspect sphere-hash ((obj sphere-hash))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tsearch-box: #<grid-hash-box @ #x~X>~%" (-> obj search-box))
  (format #t "~1Tbucket-size: ~D~%" (-> obj bucket-size))
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tvertical-cell-count: ~D~%" (-> obj vertical-cell-count))
  (format #t "~1Tbucket-array: #x~X~%" (-> obj bucket-array))
  (format #t "~1Tbox-min[3] @ #x~X~%" (-> obj box-min))
  (format #t "~1Tbox-max[3] @ #x~X~%" (-> obj box-max))
  (format #t "~1Tobject-count: ~D~%" (-> obj object-count))
  (format #t "~1Tbucket-count: ~D~%" (-> obj bucket-count))
  (format #t "~1Tmin-cell-size: ~f~%" (-> obj min-cell-size))
  (format #t "~1Tbucket-memory-size: ~D~%" (-> obj bucket-memory-size))
  (format #t "~1Tmem-bucket-array: #x~X~%" (-> obj mem-bucket-array))
  (format #t "~1Tspr-bucket-array: #x~X~%" (-> obj spr-bucket-array))
  (format #t "~1Tdebug-draw: ~A~%" (-> obj debug-draw))
  (format #t "~1Tuse-scratch-ram: ~A~%" (-> obj use-scratch-ram))
  (format #t "~1Tsphere-array: #x~X~%" (-> obj sphere-array))
  (format #t "~1Tmax-object-count: ~D~%" (-> obj max-object-count))
  (format #t "~1Tpad: ~D~%" (-> obj pad))
  (format #t "~1Tmem-sphere-array: #x~X~%" (-> obj mem-sphere-array))
  (format #t "~1Tspr-sphere-array: #x~X~%" (-> obj spr-sphere-array))
  (label cfg-4)
  obj
  )

;; definition of type hash-object-info
(deftype hash-object-info (structure)
  ((object basic  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type hash-object-info
(defmethod inspect hash-object-info ((obj hash-object-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'hash-object-info)
  (format #t "~1Tobject: ~A~%" (-> obj object))
  (label cfg-4)
  obj
  )

;; definition of type spatial-hash
(deftype spatial-hash (sphere-hash)
  ((object-array     uint32  :offset-assert 104)
   (mem-object-array uint32  :offset-assert 108)
   (spr-object-array uint32  :offset-assert 112)
   )
  :method-count-assert 41
  :size-assert         #x74
  :flag-assert         #x2900000074
  (:methods
    (spatial-hash-method-34 () none 34)
    (spatial-hash-method-35 () none 35)
    (spatial-hash-method-36 () none 36)
    (spatial-hash-method-37 () none 37)
    (spatial-hash-method-38 () none 38)
    (spatial-hash-method-39 () none 39)
    (spatial-hash-method-40 () none 40)
    )
  )

;; definition for method 3 of type spatial-hash
(defmethod inspect spatial-hash ((obj spatial-hash))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tsearch-box: #<grid-hash-box @ #x~X>~%" (-> obj search-box))
  (format #t "~1Tbucket-size: ~D~%" (-> obj bucket-size))
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tvertical-cell-count: ~D~%" (-> obj vertical-cell-count))
  (format #t "~1Tbucket-array: #x~X~%" (-> obj bucket-array))
  (format #t "~1Tbox-min[3] @ #x~X~%" (-> obj box-min))
  (format #t "~1Tbox-max[3] @ #x~X~%" (-> obj box-max))
  (format #t "~1Tobject-count: ~D~%" (-> obj object-count))
  (format #t "~1Tbucket-count: ~D~%" (-> obj bucket-count))
  (format #t "~1Tmin-cell-size: ~f~%" (-> obj min-cell-size))
  (format #t "~1Tbucket-memory-size: ~D~%" (-> obj bucket-memory-size))
  (format #t "~1Tmem-bucket-array: #x~X~%" (-> obj mem-bucket-array))
  (format #t "~1Tspr-bucket-array: #x~X~%" (-> obj spr-bucket-array))
  (format #t "~1Tdebug-draw: ~A~%" (-> obj debug-draw))
  (format #t "~1Tuse-scratch-ram: ~A~%" (-> obj use-scratch-ram))
  (format #t "~1Tsphere-array: #x~X~%" (-> obj sphere-array))
  (format #t "~1Tmax-object-count: ~D~%" (-> obj max-object-count))
  (format #t "~1Tpad: ~D~%" (-> obj pad))
  (format #t "~1Tmem-sphere-array: #x~X~%" (-> obj mem-sphere-array))
  (format #t "~1Tspr-sphere-array: #x~X~%" (-> obj spr-sphere-array))
  (format #t "~1Tobject-array: #x~X~%" (-> obj object-array))
  (format #t "~1Tmem-object-array: #x~X~%" (-> obj mem-object-array))
  (format #t "~1Tspr-object-array: #x~X~%" (-> obj spr-object-array))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0




