;;-*-Lisp-*-
(in-package goal)

;; definition (debug) for function game-task->string
(defun-debug game-task->string ((arg0 game-task))
  (case arg0
    (((game-task forest-protect))
     "forest-protect"
     )
    (((game-task strip-drop))
     "strip-drop"
     )
    (((game-task fortress-dump))
     "fortress-dump"
     )
    (((game-task ruins-tower))
     "ruins-tower"
     )
    (((game-task city-burning-bush-race-errol))
     "city-burning-bush-race-errol"
     )
    (((game-task canyon-insert-items))
     "canyon-insert-items"
     )
    (((game-task city-win))
     "city-win"
     )
    (((game-task city-burning-bush-get-to-5))
     "city-burning-bush-get-to-5"
     )
    (((game-task tomb-water))
     "tomb-water"
     )
    (((game-task stadium-race-class3))
     "stadium-race-class3"
     )
    (((game-task city-burning-bush-ring-2))
     "city-burning-bush-ring-2"
     )
    (((game-task eco-blue-button))
     "eco-blue-button"
     )
    (((game-task stadium-burning-bush-race-class1-r))
     "stadium-burning-bush-race-class1-r"
     )
    (((game-task ruins-enemy))
     "ruins-enemy"
     )
    (((game-task city-burning-bush-shuttle-1))
     "city-burning-bush-shuttle-1"
     )
    (((game-task eco-red-button))
     "eco-red-button"
     )
    (((game-task city-burning-bush-ring-1))
     "city-burning-bush-ring-1"
     )
    (((game-task city-krew-delivery))
     "city-krew-delivery"
     )
    (((game-task stadium-burning-bush-race-class3-r))
     "stadium-burning-bush-race-class3-r"
     )
    (((game-task stadium-burning-bush-race-class3))
     "stadium-burning-bush-race-class3"
     )
    (((game-task city-burning-bush-get-to-15))
     "city-burning-bush-get-to-15"
     )
    (((game-task city-help-kid))
     "city-help-kid"
     )
    (((game-task under-mech))
     "under-mech"
     )
    (((game-task city-escort-kid))
     "city-escort-kid"
     )
    (((game-task mountain-gear))
     "mountain-gear"
     )
    (((game-task max))
     "max"
     )
    (((game-task city-defend-stadium))
     "city-defend-stadium"
     )
    (((game-task city-burning-bush-get-to-12))
     "city-burning-bush-get-to-12"
     )
    (((game-task city-burning-bush-bombbot-1))
     "city-burning-bush-bombbot-1"
     )
    (((game-task drill-ship))
     "drill-ship"
     )
    (((game-task city-yellow-gun-training))
     "city-yellow-gun-training"
     )
    (((game-task sewer-enemy))
     "sewer-enemy"
     )
    (((game-task palace-cable))
     "palace-cable"
     )
    (((game-task city-burning-bush-get-to-10))
     "city-burning-bush-get-to-10"
     )
    (((game-task castle-break-in))
     "castle-break-in"
     )
    (((game-task tomb-poles))
     "tomb-poles"
     )
    (((game-task city-vehicle-training))
     "city-vehicle-training"
     )
    (((game-task sewer-escort))
     "sewer-escort"
     )
    (((game-task city-errol-challenge))
     "city-errol-challenge"
     )
    (((game-task strip-grenade))
     "strip-grenade"
     )
    (((game-task atoll-sig))
     "atoll-sig"
     )
    (((game-task stadium-burning-bush-race-class1))
     "stadium-burning-bush-race-class1"
     )
    (((game-task nest-boss))
     "nest-boss"
     )
    (((game-task forest-hunt))
     "forest-hunt"
     )
    (((game-task stadium-race-class2))
     "stadium-race-class2"
     )
    (((game-task city-play-onin-game))
     "city-play-onin-game"
     )
    (((game-task city-burning-bush-collection-2))
     "city-burning-bush-collection-2"
     )
    (((game-task none))
     "none"
     )
    (((game-task eco-yellow-button))
     "eco-yellow-button"
     )
    (((game-task drill-eggs))
     "drill-eggs"
     )
    (((game-task city-burning-bush-get-to-2))
     "city-burning-bush-get-to-2"
     )
    (((game-task city-burning-bush-racepoint-1))
     "city-burning-bush-racepoint-1"
     )
    (((game-task city-burning-bush-get-to-11))
     "city-burning-bush-get-to-11"
     )
    (((game-task under-sig))
     "under-sig"
     )
    (((game-task stadium-burning-bush-race-class2))
     "stadium-burning-bush-race-class2"
     )
    (((game-task stadium-burning-bush-race-board))
     "stadium-burning-bush-race-board"
     )
    (((game-task city-burning-bush-race-port))
     "city-burning-bush-race-port"
     )
    (((game-task city-burning-bush-get-to-7))
     "city-burning-bush-get-to-7"
     )
    (((game-task atoll-battle))
     "atoll-battle"
     )
    (((game-task drill-mech))
     "drill-mech"
     )
    (((game-task ruins-mech))
     "ruins-mech"
     )
    (((game-task city-burning-bush-get-to-13))
     "city-burning-bush-get-to-13"
     )
    (((game-task city-destroy-guard-vehicles))
     "city-destroy-guard-vehicles"
     )
    (((game-task tomb-boss))
     "tomb-boss"
     )
    (((game-task dummy0))
     "dummy0"
     )
    (((game-task dig-find-totem))
     "dig-find-totem"
     )
    (((game-task dig-knock-down))
     "dig-knock-down"
     )
    (((game-task city-protect-water-slums))
     "city-protect-water-slums"
     )
    (((game-task city-whack))
     "city-whack"
     )
    (((game-task city-burning-bush-ring-3))
     "city-burning-bush-ring-3"
     )
    (((game-task city-shuttle))
     "city-shuttle"
     )
    (((game-task fortress-save-friends))
     "fortress-save-friends"
     )
    (((game-task city-intercept-tanker))
     "city-intercept-tanker"
     )
    (((game-task forest-scouts))
     "forest-scouts"
     )
    (((game-task nest-get-to-gun))
     "nest-get-to-gun"
     )
    (((game-task stadium-race-class))
     "stadium-race-class1"
     )
    (((game-task stadium-burning-bush-race-class2-r))
     "stadium-burning-bush-race-class2-r"
     )
    (((game-task palace-sneak-in))
     "palace-sneak-in"
     )
    (((game-task strip-rescue))
     "strip-rescue"
     )
    (((game-task city-burning-bush-get-to-1))
     "city-burning-bush-get-to-1"
     )
    (((game-task consite-find-baron))
     "consite-find-baron"
     )
    (((game-task city-burning-bush-get-to-3))
     "city-burning-bush-get-to-3"
     )
    (((game-task stadium-board1))
     "stadium-board1"
     )
    (((game-task city-burning-bush-get-to-4))
     "city-burning-bush-get-to-4"
     )
    (((game-task city-burning-bush-collection-3))
     "city-burning-bush-collection-3"
     )
    (((game-task city-port-run))
     "city-port-run"
     )
    (((game-task sewer-board))
     "sewer-board"
     )
    (((game-task city-dark-gun-training))
     "city-dark-gun-training"
     )
    (((game-task city-oracle))
     "city-oracle"
     )
    (((game-task city-burning-bush-collection-1))
     "city-burning-bush-collection-1"
     )
    (((game-task city-keira-delivery))
     "city-keira-delivery"
     )
    (((game-task city-burning-bush-get-to-6))
     "city-burning-bush-get-to-6"
     )
    (((game-task mountain-lens))
     "mountain-lens"
     )
    (((game-task atoll-water))
     "atoll-water"
     )
    (((game-task city-stop-bomb-bots))
     "city-stop-bomb-bots"
     )
    (((game-task mountain-collection))
     "mountain-collection"
     )
    (((game-task nest-enter))
     "nest-enter"
     )
    (((game-task city-burning-bush-get-to-9))
     "city-burning-bush-get-to-9"
     )
    (((game-task mountain-shard))
     "mountain-shard"
     )
    (((game-task city-power))
     "city-power"
     )
    (((game-task complete))
     "complete"
     )
    (((game-task palace-boss))
     "palace-boss"
     )
    (((game-task castle-boss))
     "castle-boss"
     )
    (((game-task city-burning-bush-get-to-8))
     "city-burning-bush-get-to-8"
     )
    (((game-task city-blue-gun-training))
     "city-blue-gun-training"
     )
    (((game-task fortress-escape))
     "fortress-escape"
     )
    (((game-task city-red-gun-training))
     "city-red-gun-training"
     )
    (((game-task city-save-lurkers))
     "city-save-lurkers"
     )
    (((game-task city-krew-collection))
     "city-krew-collection"
     )
    (((game-task city-burning-bush-get-to-14))
     "city-burning-bush-get-to-14"
     )
    (((game-task city-meet-brutter))
     "city-meet-brutter"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition for function c-string->game-task
;; INFO: Return type mismatch int vs game-task.
(defun c-string->game-task ((arg0 string))
  (the-as game-task (cond
                      ((string= arg0 "GAME_TASK_FOREST_PROTECT")
                       60
                       )
                      ((string= arg0 "GAME_TASK_STRIP_DROP")
                       58
                       )
                      ((string= arg0 "GAME_TASK_FORTRESS_DUMP")
                       11
                       )
                      ((string= arg0 "GAME_TASK_RUINS_TOWER")
                       9
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_RACE_ERROL")
                       101
                       )
                      ((string= arg0 "GAME_TASK_CANYON_INSERT_ITEMS")
                       48
                       )
                      ((string= arg0 "GAME_TASK_CITY_WIN")
                       75
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_5")
                       85
                       )
                      ((string= arg0 "GAME_TASK_TOMB_WATER")
                       50
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_RACE_CLASS3")
                       43
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_RING_2")
                       84
                       )
                      ((string= arg0 "GAME_TASK_ECO_BLUE_BUTTON")
                       3
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_CLASS1_R")
                       109
                       )
                      ((string= arg0 "GAME_TASK_RUINS_ENEMY")
                       31
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_SHUTTLE_1")
                       87
                       )
                      ((string= arg0 "GAME_TASK_ECO_RED_BUTTON")
                       5
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_RING_1")
                       77
                       )
                      ((string= arg0 "GAME_TASK_CITY_KREW_DELIVERY")
                       12
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_CLASS3_R")
                       107
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_CLASS3")
                       104
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_15")
                       99
                       )
                      ((string= arg0 "GAME_TASK_CITY_HELP_KID")
                       7
                       )
                      ((string= arg0 "GAME_TASK_UNDER_MECH")
                       68
                       )
                      ((string= arg0 "GAME_TASK_CITY_ESCORT_KID")
                       34
                       )
                      ((string= arg0 "GAME_TASK_MOUNTAIN_GEAR")
                       19
                       )
                      ((string= arg0 "GAME_TASK_MAX")
                       110
                       )
                      ((string= arg0 "GAME_TASK_CITY_DEFEND_STADIUM")
                       70
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_12")
                       95
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_BOMBBOT_1")
                       96
                       )
                      ((string= arg0 "GAME_TASK_DRILL_SHIP")
                       37
                       )
                      ((string= arg0 "GAME_TASK_CITY_YELLOW_GUN_TRAINING")
                       25
                       )
                      ((string= arg0 "GAME_TASK_SEWER_ENEMY")
                       15
                       )
                      ((string= arg0 "GAME_TASK_PALACE_CABLE")
                       28
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_10")
                       92
                       )
                      ((string= arg0 "GAME_TASK_CASTLE_BREAK_IN")
                       65
                       )
                      ((string= arg0 "GAME_TASK_TOMB_POLES")
                       49
                       )
                      ((string= arg0 "GAME_TASK_CITY_VEHICLE_TRAINING")
                       8
                       )
                      ((string= arg0 "GAME_TASK_SEWER_ESCORT")
                       53
                       )
                      ((string= arg0 "GAME_TASK_CITY_ERROL_CHALLENGE")
                       57
                       )
                      ((string= arg0 "GAME_TASK_STRIP_GRENADE")
                       36
                       )
                      ((string= arg0 "GAME_TASK_ATOLL_SIG")
                       14
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_CLASS1")
                       106
                       )
                      ((string= arg0 "GAME_TASK_NEST_BOSS")
                       74
                       )
                      ((string= arg0 "GAME_TASK_FOREST_HUNT")
                       41
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_RACE_CLASS2")
                       55
                       )
                      ((string= arg0 "GAME_TASK_CITY_PLAY_ONIN_GAME")
                       47
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_COLLECTION_2")
                       91
                       )
                      ((string= arg0 "GAME_TASK_NONE")
                       0
                       )
                      ((string= arg0 "GAME_TASK_ECO_YELLOW_BUTTON")
                       4
                       )
                      ((string= arg0 "GAME_TASK_DRILL_EGGS")
                       26
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_2")
                       79
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_RACEPOINT_1")
                       83
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_11")
                       93
                       )
                      ((string= arg0 "GAME_TASK_UNDER_SIG")
                       69
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_CLASS2")
                       105
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_BOARD")
                       103
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_RACE_PORT")
                       102
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_7")
                       88
                       )
                      ((string= arg0 "GAME_TASK_ATOLL_BATTLE")
                       17
                       )
                      ((string= arg0 "GAME_TASK_DRILL_MECH")
                       61
                       )
                      ((string= arg0 "GAME_TASK_RUINS_MECH")
                       59
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_13")
                       97
                       )
                      ((string= arg0 "GAME_TASK_CITY_DESTROY_GUARD_VEHICLES")
                       46
                       )
                      ((string= arg0 "GAME_TASK_TOMB_BOSS")
                       51
                       )
                      ((string= arg0 "GAME_TASK_DUMMY0")
                       2
                       )
                      ((string= arg0 "GAME_TASK_DIG_FIND_TOTEM")
                       45
                       )
                      ((string= arg0 "GAME_TASK_DIG_KNOCK_DOWN")
                       35
                       )
                      ((string= arg0 "GAME_TASK_CITY_PROTECT_WATER_SLUMS")
                       44
                       )
                      ((string= arg0 "GAME_TASK_CITY_WHACK")
                       67
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_RING_3")
                       94
                       )
                      ((string= arg0 "GAME_TASK_CITY_SHUTTLE")
                       30
                       )
                      ((string= arg0 "GAME_TASK_FORTRESS_SAVE_FRIENDS")
                       52
                       )
                      ((string= arg0 "GAME_TASK_CITY_INTERCEPT_TANKER")
                       42
                       )
                      ((string= arg0 "GAME_TASK_FOREST_SCOUTS")
                       33
                       )
                      ((string= arg0 "GAME_TASK_NEST_GET_TO_GUN")
                       72
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_RACE_CLASS1")
                       63
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BURNING_BUSH_RACE_CLASS2_R")
                       108
                       )
                      ((string= arg0 "GAME_TASK_PALACE_SNEAK_IN")
                       64
                       )
                      ((string= arg0 "GAME_TASK_STRIP_RESCUE")
                       16
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_1")
                       78
                       )
                      ((string= arg0 "GAME_TASK_CONSITE_FIND_BARON")
                       71
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_3")
                       80
                       )
                      ((string= arg0 "GAME_TASK_STADIUM_BOARD1")
                       23
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_4")
                       81
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_COLLECTION_3")
                       100
                       )
                      ((string= arg0 "GAME_TASK_CITY_PORT_RUN")
                       38
                       )
                      ((string= arg0 "GAME_TASK_SEWER_BOARD")
                       40
                       )
                      ((string= arg0 "GAME_TASK_CITY_DARK_GUN_TRAINING")
                       54
                       )
                      ((string= arg0 "GAME_TASK_CITY_ORACLE")
                       76
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_COLLECTION_1")
                       82
                       )
                      ((string= arg0 "GAME_TASK_CITY_KEIRA_DELIVERY")
                       22
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_6")
                       86
                       )
                      ((string= arg0 "GAME_TASK_MOUNTAIN_LENS")
                       18
                       )
                      ((string= arg0 "GAME_TASK_ATOLL_WATER")
                       10
                       )
                      ((string= arg0 "GAME_TASK_CITY_STOP_BOMB_BOTS")
                       56
                       )
                      ((string= arg0 "GAME_TASK_MOUNTAIN_COLLECTION")
                       21
                       )
                      ((string= arg0 "GAME_TASK_NEST_ENTER")
                       73
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_9")
                       90
                       )
                      ((string= arg0 "GAME_TASK_MOUNTAIN_SHARD")
                       20
                       )
                      ((string= arg0 "GAME_TASK_CITY_POWER")
                       27
                       )
                      ((string= arg0 "GAME_TASK_COMPLETE")
                       1
                       )
                      ((string= arg0 "GAME_TASK_PALACE_BOSS")
                       29
                       )
                      ((string= arg0 "GAME_TASK_CASTLE_BOSS")
                       66
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_8")
                       89
                       )
                      ((string= arg0 "GAME_TASK_CITY_BLUE_GUN_TRAINING")
                       32
                       )
                      ((string= arg0 "GAME_TASK_FORTRESS_ESCAPE")
                       6
                       )
                      ((string= arg0 "GAME_TASK_CITY_RED_GUN_TRAINING")
                       13
                       )
                      ((string= arg0 "GAME_TASK_CITY_SAVE_LURKERS")
                       62
                       )
                      ((string= arg0 "GAME_TASK_CITY_KREW_COLLECTION")
                       24
                       )
                      ((string= arg0 "GAME_TASK_CITY_BURNING_BUSH_GET_TO_14")
                       98
                       )
                      ((string= arg0 "GAME_TASK_CITY_MEET_BRUTTER")
                       39
                       )
                      (else
                        -1
                        )
                      )
          )
  )

;; definition (debug) for function game-task-actor->string
(defun-debug game-task-actor->string ((arg0 game-task-actor))
  (case arg0
    (((game-task-actor burning-bush-genc))
     "burning-bush-genc"
     )
    (((game-task-actor minimap))
     "minimap"
     )
    (((game-task-actor youngsamos-tomb))
     "youngsamos-tomb"
     )
    (((game-task-actor youngsamos-onintent))
     "youngsamos-onintent"
     )
    (((game-task-actor baron-consite))
     "baron-consite"
     )
    (((game-task-actor burning-bush-markb))
     "burning-bush-markb"
     )
    (((game-task-actor keira-garage))
     "keira-garage"
     )
    (((game-task-actor burning-bush-genc-2))
     "burning-bush-genc-2"
     )
    (((game-task-actor samos-garage))
     "samos-garage"
     )
    (((game-task-actor kid-hideout))
     "kid-hideout"
     )
    (((game-task-actor krew-hiphog))
     "krew-hiphog"
     )
    (((game-task-actor burning-bush-port-2))
     "burning-bush-port-2"
     )
    (((game-task-actor none))
     "none"
     )
    (((game-task-actor burning-bush-port-3))
     "burning-bush-port-3"
     )
    (((game-task-actor brutter-kiosk))
     "brutter-kiosk"
     )
    (((game-task-actor tess-alley))
     "tess-alley"
     )
    (((game-task-actor whack-a-metal-hiphog))
     "whack-a-metal-hiphog"
     )
    (((game-task-actor burning-bush-gena))
     "burning-bush-gena"
     )
    (((game-task-actor vin-vinroom))
     "vin-vinroom"
     )
    (((game-task-actor kor-hideout))
     "kor-hideout"
     )
    (((game-task-actor burning-bush-pal-2))
     "burning-bush-pal-2"
     )
    (((game-task-actor kid-alley))
     "kid-alley"
     )
    (((game-task-actor burning-bush-stadium))
     "burning-bush-stadium"
     )
    (((game-task-actor ashelin-market))
     "ashelin-market"
     )
    (((game-task-actor kid-tomb))
     "kid-tomb"
     )
    (((game-task-actor burning-bush-farma))
     "burning-bush-farma"
     )
    (((game-task-actor baron-tomb))
     "baron-tomb"
     )
    (((game-task-actor burning-bush-slumc))
     "burning-bush-slumc"
     )
    (((game-task-actor burning-bush-slumb-2))
     "burning-bush-slumb-2"
     )
    (((game-task-actor baron-palace))
     "baron-palace"
     )
    (((game-task-actor crocadog-alley))
     "crocadog-alley"
     )
    (((game-task-actor baron-castle))
     "baron-castle"
     )
    (((game-task-actor crocadog-vinroom))
     "crocadog-vinroom"
     )
    (((game-task-actor burning-bush-gena-2))
     "burning-bush-gena-2"
     )
    (((game-task-actor daxter-tomb))
     "daxter-tomb"
     )
    (((game-task-actor burning-bush-port))
     "burning-bush-port"
     )
    (((game-task-actor burning-bush-marka))
     "burning-bush-marka"
     )
    (((game-task-actor crocadog-tomb))
     "crocadog-tomb"
     )
    (((game-task-actor keira-stadium))
     "keira-stadium"
     )
    (((game-task-actor sig-hiphog))
     "sig-hiphog"
     )
    (((game-task-actor youngsamos-hideout))
     "youngsamos-hideout"
     )
    (((game-task-actor burning-bush-genb-2))
     "burning-bush-genb-2"
     )
    (((game-task-actor burning-bush-inda))
     "burning-bush-inda"
     )
    (((game-task-actor kor-tomb))
     "kor-tomb"
     )
    (((game-task-actor kor-consite))
     "kor-consite"
     )
    (((game-task-actor torn-hideout))
     "torn-hideout"
     )
    (((game-task-actor onin-onintent))
     "onin-onintent"
     )
    (((game-task-actor kor-alley))
     "kor-alley"
     )
    (((game-task-actor kid-vinroom))
     "kid-vinroom"
     )
    (((game-task-actor ashelin-atoll))
     "ashelin-atoll"
     )
    (((game-task-actor burning-bush-sluma))
     "burning-bush-sluma"
     )
    (((game-task-actor burning-bush-slumb))
     "burning-bush-slumb"
     )
    (((game-task-actor youngsamos-alley))
     "youngsamos-alley"
     )
    (((game-task-actor youngsamos-forest))
     "youngsamos-forest"
     )
    (((game-task-actor samos-hideout))
     "samos-hideout"
     )
    (((game-task-actor burning-bush-genb))
     "burning-bush-genb"
     )
    (((game-task-actor oracle-oracle))
     "oracle-oracle"
     )
    (((game-task-actor torn-alley))
     "torn-alley"
     )
    (((game-task-actor kor-onintent))
     "kor-onintent"
     )
    (((game-task-actor tess-hiphog))
     "tess-hiphog"
     )
    (((game-task-actor burning-bush-markb-2))
     "burning-bush-markb-2"
     )
    (((game-task-actor ashelin-throne))
     "ashelin-throne"
     )
    (((game-task-actor burning-bush-indb))
     "burning-bush-indb"
     )
    (((game-task-actor pecker-onintent))
     "pecker-onintent"
     )
    (((game-task-actor kor-vinroom))
     "kor-vinroom"
     )
    (((game-task-actor sig-atoll))
     "sig-atoll"
     )
    (((game-task-actor burning-bush-pal))
     "burning-bush-pal"
     )
    (((game-task-actor burning-bush-farmb))
     "burning-bush-farmb"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition (debug) for function game-task-action->string
(defun-debug game-task-action->string ((arg0 game-task-action))
  (case arg0
    (((game-task-action idle))
     "idle"
     )
    (((game-task-action play))
     "play"
     )
    (((game-task-action show))
     "show"
     )
    (((game-task-action talk))
     "talk"
     )
    (((game-task-action hide))
     "hide"
     )
    (((game-task-action say))
     "say"
     )
    (((game-task-action shade))
     "trade"
     )
    (((game-task-action menu))
     "menu"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition of type game-task-event
(deftype game-task-event (basic)
  ((actor    game-task-actor   :offset-assert   4)
   (action   game-task-action  :offset-assert   5)
   (icon     game-task-icon    :offset          6)
   (flags    game-task-flags   :offset          7)
   (scene    basic             :offset          8)
   (distance meters            :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type game-task-event
(defmethod inspect game-task-event ((obj game-task-event))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tactor: #x~X : ~S~%" (-> obj actor) (game-task-actor->string (-> obj actor)))
  (format #t "~1Taction: #x~X : ~S~%" (-> obj action) (game-task-action->string (-> obj action)))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Ticon: ~D~%" (-> obj icon))
  (format #t "~1Tscene: ~A~%" (-> obj scene))
  (format #t "~1Tdistance: (meters ~m)~%" (-> obj distance))
  (label cfg-4)
  obj
  )

;; definition of type task-manager-info
(deftype task-manager-info (structure)
  ((mask                      task-manager-mask         :offset-assert   0)
   (level                     basic                     :offset-assert   4)
   (manager                   handle                    :offset-assert   8)
   (fail-message              uint32                    :offset-assert  16)
   (retry-message             uint32                    :offset-assert  20)
   (intro-scene               basic                     :offset-assert  24)
   (resolution-scene          basic                     :offset-assert  28)
   (resolution-scene-continue basic                     :offset-assert  32)
   (retry-continue            basic                     :offset-assert  36)
   (fail-continue             basic                     :offset-assert  40)
   (init-hook                 basic                     :offset-assert  44)
   (cleanup-hook              basic                     :offset-assert  48)
   (update-hook               basic                     :offset-assert  52)
   (code-hook                 basic                     :offset-assert  56)
   (complete-hook             basic                     :offset-assert  60)
   (fail-hook                 basic                     :offset-assert  64)
   (event-hook                basic                     :offset-assert  68)
   (final-node                uint16                    :offset-assert  72)
   (time-limit                int32                     :offset-assert  76)
   (sphere-count              int8                      :offset-assert  80)
   (index                     int8                      :offset-assert  81)
   (intro-delay               uint16                    :offset-assert  82)
   (sphere-array              uint32                    :offset-assert  84)
   (on-complete               basic                     :offset-assert  88)
   (on-fail                   basic                     :offset-assert  92)
   (begin-sphere              sphere            :inline :offset-assert  96)
   (end-sphere                sphere            :inline :offset-assert 112)
   )
  :method-count-assert 9
  :size-assert         #x80
  :flag-assert         #x900000080
  )

;; definition for method 3 of type task-manager-info
(defmethod inspect task-manager-info ((obj task-manager-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" obj 'task-manager-info)
  (format #t "~1Tmask: #x~X : (task-manager-mask " (-> obj mask))
  (let ((s5-0 (-> obj mask)))
    (if (= (logand s5-0 (task-manager-mask intro-scene)) (task-manager-mask intro-scene))
        (format #t "intro-scene ")
        )
    (if (= (logand s5-0 (task-manager-mask resolution-scene)) (task-manager-mask resolution-scene))
        (format #t "resolution-scene ")
        )
    (if (= (logand s5-0 (task-manager-mask fail-message)) (task-manager-mask fail-message))
        (format #t "fail-message ")
        )
    (if (= (logand s5-0 (task-manager-mask begin-sphere)) (task-manager-mask begin-sphere))
        (format #t "begin-sphere ")
        )
    (if (= (logand s5-0 (task-manager-mask retry-message)) (task-manager-mask retry-message))
        (format #t "retry-message ")
        )
    (if (= (logand s5-0 (task-manager-mask end-sphere)) (task-manager-mask end-sphere))
        (format #t "end-sphere ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tmanager: ~`handle`P~%" (-> obj manager))
  (format #t "~1Tfail-message: ~D~%" (-> obj fail-message))
  (format #t "~1Tretry-message: ~D~%" (-> obj retry-message))
  (format #t "~1Tintro-scene: ~A~%" (-> obj intro-scene))
  (format #t "~1Tresolution-scene: ~A~%" (-> obj resolution-scene))
  (format #t "~1Tresolution-scene-continue: ~A~%" (-> obj resolution-scene-continue))
  (format #t "~1Tretry-continue: ~A~%" (-> obj retry-continue))
  (format #t "~1Tfail-continue: ~A~%" (-> obj fail-continue))
  (format #t "~1Tinit-hook: ~A~%" (-> obj init-hook))
  (format #t "~1Tcleanup-hook: ~A~%" (-> obj cleanup-hook))
  (format #t "~1Tupdate-hook: ~A~%" (-> obj update-hook))
  (format #t "~1Tcode-hook: ~A~%" (-> obj code-hook))
  (format #t "~1Tcomplete-hook: ~A~%" (-> obj complete-hook))
  (format #t "~1Tfail-hook: ~A~%" (-> obj fail-hook))
  (format #t "~1Tevent-hook: ~A~%" (-> obj event-hook))
  (format #t "~1Tfinal-node: ~D~%" (-> obj final-node))
  (format #t "~1Ttime-limit: ~D~%" (-> obj time-limit))
  (format #t "~1Tsphere-count: ~D~%" (-> obj sphere-count))
  (format #t "~1Tindex: ~D~%" (-> obj index))
  (format #t "~1Tintro-delay: ~D~%" (-> obj intro-delay))
  (format #t "~1Tsphere-array: #x~X~%" (-> obj sphere-array))
  (format #t "~1Ton-complete: ~A~%" (-> obj on-complete))
  (format #t "~1Ton-fail: ~A~%" (-> obj on-fail))
  (format #t "~1Tbegin-sphere: #<sphere @ #x~X>~%" (-> obj begin-sphere))
  (format #t "~1Tend-sphere: #<sphere @ #x~X>~%" (-> obj end-sphere))
  (label cfg-16)
  obj
  )

;; definition (debug) for function game-task-node-flag->string
;; INFO: Return type mismatch object vs none.
(defun-debug game-task-node-flag->string ((arg0 game-task-node-flag))
  (if (= (logand arg0 (game-task-node-flag clear-task-mask)) (game-task-node-flag clear-task-mask))
      (format #t "clear-task-mask ")
      )
  (if (= (logand arg0 (game-task-node-flag city-wait)) (game-task-node-flag city-wait))
      (format #t "city-wait ")
      )
  (if (= (logand arg0 (game-task-node-flag intro-wait)) (game-task-node-flag intro-wait))
      (format #t "intro-wait ")
      )
  (if (= (logand arg0 (game-task-node-flag task-manager)) (game-task-node-flag task-manager))
      (format #t "task-manager ")
      )
  (if (= (logand arg0 (game-task-node-flag task-retry)) (game-task-node-flag task-retry))
      (format #t "task-retry ")
      )
  (if (= (logand arg0 (game-task-node-flag reset-on-try)) (game-task-node-flag reset-on-try))
      (format #t "reset-on-try ")
      )
  (if (= (logand arg0 (game-task-node-flag exclusive)) (game-task-node-flag exclusive))
      (format #t "exclusive ")
      )
  (if (= (logand (game-task-node-flag utility-node) arg0) (game-task-node-flag utility-node))
      (format #t "utility-node ")
      )
  (if (= (logand arg0 (game-task-node-flag set-task-mask)) (game-task-node-flag set-task-mask))
      (format #t "set-task-mask ")
      )
  (if (= (logand arg0 (game-task-node-flag closed)) (game-task-node-flag closed))
      (format #t "closed ")
      )
  (if (= (logand arg0 (game-task-node-flag no-fail-on-death)) (game-task-node-flag no-fail-on-death))
      (format #t "no-fail-on-death ")
      )
  (if (= (logand arg0 (game-task-node-flag data)) (game-task-node-flag data))
      (format #t "data ")
      )
  (if (= (logand arg0 (game-task-node-flag save-on-life)) (game-task-node-flag save-on-life))
      (format #t "save-on-life ")
      )
  (if (= (logand arg0 (game-task-node-flag close-task)) (game-task-node-flag close-task))
      (format #t "close-task ")
      )
  (if (= (logand arg0 (game-task-node-flag save-on-try)) (game-task-node-flag save-on-try))
      (format #t "save-on-try ")
      )
  (if (= (logand arg0 (game-task-node-flag auto-close)) (game-task-node-flag auto-close))
      (format #t "auto-close ")
      )
  (if (= (logand (game-task-node-flag no-slow-down) arg0) (game-task-node-flag no-slow-down))
      (format #t "no-slow-down ")
      )
  (if (= (logand arg0 (game-task-node-flag abs-task-mask)) (game-task-node-flag abs-task-mask))
      (format #t "abs-task-mask ")
      )
  (if (= (logand (game-task-node-flag no-restart) arg0) (game-task-node-flag no-restart))
      (format #t "no-restart ")
      )
  (if (= (logand (game-task-node-flag no-audio) arg0) (game-task-node-flag no-audio))
      (format #t "no-audio ")
      )
  (none)
  )

;; definition (debug) for function game-task-node-command->string
(defun-debug game-task-node-command->string ((arg0 game-task-node-command))
  (case arg0
    (((game-task-node-command add-gun-up-1))
     "add-gun-up-1"
     )
    (((game-task-node-command add-darkjak-1))
     "add-darkjak-1"
     )
    (((game-task-node-command add-pass-yellow))
     "add-pass-yellow"
     )
    (((game-task-node-command add-pass-red))
     "add-pass-red"
     )
    (((game-task-node-command sub-board))
     "sub-board"
     )
    (((game-task-node-command add-board))
     "add-board"
     )
    (((game-task-node-command add-darkjak))
     "add-darkjak"
     )
    (((game-task-node-command add-darkjak-2))
     "add-darkjak-2"
     )
    (((game-task-node-command add-gun-up-3))
     "add-gun-up-3"
     )
    (((game-task-node-command add-gun-up-2))
     "add-gun-up-2"
     )
    (((game-task-node-command add-darkjak-3))
     "add-darkjak-3"
     )
    (((game-task-node-command add-darkjak-0))
     "add-darkjak-0"
     )
    (((game-task-node-command add-gun-blue))
     "add-gun-blue"
     )
    (((game-task-node-command add-gun-yellow))
     "add-gun-yellow"
     )
    (((game-task-node-command none))
     "none"
     )
    (((game-task-node-command add-gun-dark))
     "add-gun-dark"
     )
    (((game-task-node-command add-pass-green))
     "add-pass-green"
     )
    (((game-task-node-command add-board-training))
     "add-board-training"
     )
    (((game-task-node-command add-gun-up-4))
     "add-gun-up-4"
     )
    (((game-task-node-command add-gun-red))
     "add-gun-red"
     )
    (((game-task-node-command add-pass-blue))
     "add-pass-blue"
     )
    (((game-task-node-command sub-sidekick))
     "sub-sidekick"
     )
    (((game-task-node-command add-sidekick))
     "add-sidekick"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition of type game-task-node-info
(deftype game-task-node-info (basic)
  ((level            basic                    :offset-assert   4)
   (task             game-task                :offset-assert   8)
   (name             basic                    :offset-assert  12)
   (when-open        basic                    :offset-assert  16)
   (flags            game-task-node-flag      :offset-assert  20)
   (parent-node      uint16                 4 :offset-assert  24)
   (task-mask        task-mask                :offset-assert  32)
   (on-open          basic                    :offset-assert  36)
   (info             task-manager-info        :offset-assert  40)
   (borrow           basic                    :offset-assert  44)
   (open?            symbol                   :offset-assert  48)
   (on-close         basic                    :offset-assert  52)
   (close-time       time-frame               :offset-assert  56)
   (death-count      uint16                   :offset-assert  64)
   (gem-count        uint16                   :offset-assert  66)
   (skill-count      uint16                   :offset-assert  68)
   (suck-death-count uint8                    :offset-assert  70)
   (add              game-task-node-command   :offset-assert  71)
   (description      uint32                   :offset-assert  72)
   )
  :method-count-assert 14
  :size-assert         #x4c
  :flag-assert         #xe0000004c
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    (dummy-12 () none 12)
    (dummy-13 () none 13)
    )
  )

;; definition for method 3 of type game-task-node-info
(defmethod inspect game-task-node-info ((obj game-task-node-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-45)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Ttask: #x~X : ~S~%" (-> obj task) (game-task->string (-> obj task)))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Twhen-open: ~A~%" (-> obj when-open))
  (format #t "~1Tflags: #x~X : (game-task-node-flag " (-> obj flags))
  (game-task-node-flag->string (-> obj flags))
  (format #t ")~%")
  (format #t "~1Tparent-node[4] @ #x~X~%" (-> obj parent-node))
  (dotimes (s5-1 4)
    (format #t "~T  [~D]~1Tparent-node: ~D~%" s5-1 (-> obj parent-node s5-1))
    )
  (format #t "~1Ttask-mask: #x~X : (task-mask " (-> obj task-mask))
  (let ((s5-2 (-> obj task-mask)))
    (if (= (logand s5-2 (task-mask task0)) (task-mask task0))
        (format #t "task0 ")
        )
    (if (= (logand s5-2 (task-mask task2)) (task-mask task2))
        (format #t "task2 ")
        )
    (if (= (logand s5-2 (task-mask task4)) (task-mask task4))
        (format #t "task4 ")
        )
    (if (= (logand s5-2 (task-mask task6)) (task-mask task6))
        (format #t "task6 ")
        )
    (if (= (logand s5-2 (task-mask ctywide)) (task-mask ctywide))
        (format #t "ctywide ")
        )
    (if (= (logand s5-2 (task-mask never)) (task-mask never))
        (format #t "never ")
        )
    (if (= (logand (task-mask movie1) s5-2) (task-mask movie1))
        (format #t "movie1 ")
        )
    (if (= (logand s5-2 (task-mask dummy1)) (task-mask dummy1))
        (format #t "dummy1 ")
        )
    (if (= (logand s5-2 (task-mask primary0)) (task-mask primary0))
        (format #t "primary0 ")
        )
    (if (= (logand s5-2 (task-mask task1)) (task-mask task1))
        (format #t "task1 ")
        )
    (if (= (logand s5-2 (task-mask task3)) (task-mask task3))
        (format #t "task3 ")
        )
    (if (= (logand s5-2 (task-mask task5)) (task-mask task5))
        (format #t "task5 ")
        )
    (if (= (logand s5-2 (task-mask task7)) (task-mask task7))
        (format #t "task7 ")
        )
    (if (= (logand (task-mask movie2) s5-2) (task-mask movie2))
        (format #t "movie2 ")
        )
    (if (= (logand s5-2 (task-mask dummy2)) (task-mask dummy2))
        (format #t "dummy2 ")
        )
    (if (= (logand s5-2 (task-mask done)) (task-mask done))
        (format #t "done ")
        )
    (if (= (logand s5-2 (task-mask special)) (task-mask special))
        (format #t "special ")
        )
    (if (= (logand (task-mask movie0) s5-2) (task-mask movie0))
        (format #t "movie0 ")
        )
    (if (= (logand s5-2 (task-mask dummy0)) (task-mask dummy0))
        (format #t "dummy0 ")
        )
    )
  (format #t ")~%")
  (format #t "~1Ton-open: ~A~%" (-> obj on-open))
  (format #t "~1Tinfo: #<task-manager-info @ #x~X>~%" (-> obj info))
  (format #t "~1Tborrow: ~A~%" (-> obj borrow))
  (format #t "~1Topen?: ~A~%" (-> obj open?))
  (format #t "~1Ton-close: ~A~%" (-> obj on-close))
  (format #t "~1Tclose-time: ~D~%" (-> obj close-time))
  (format #t "~1Tdeath-count: ~D~%" (-> obj death-count))
  (format #t "~1Tgem-count: ~D~%" (-> obj gem-count))
  (format #t "~1Tskill-count: ~D~%" (-> obj skill-count))
  (format #t "~1Tsuck-death-count: ~D~%" (-> obj suck-death-count))
  (format #t "~1Tadd: #x~X : ~S~%" (-> obj add) (game-task-node-command->string (-> obj add)))
  (format #t "~1Tdescription: ~D~%" (-> obj description))
  (label cfg-45)
  obj
  )

;; definition of type game-task-info
(deftype game-task-info (basic)
  ((name                basic   :offset-assert   4)
   (text-name           uint32  :offset-assert   8)
   (pre-play-node       uint16  :offset-assert  12)
   (kiosk-play-node     uint16  :offset-assert  14)
   (pre-play-continue   basic   :offset-assert  16)
   (play-node           uint16  :offset-assert  20)
   (play-continue       basic   :offset-assert  24)
   (kiosk-play-continue basic   :offset-assert  28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type game-task-info
(defmethod inspect game-task-info ((obj game-task-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Ttext-name: ~D~%" (-> obj text-name))
  (format #t "~1Tpre-play-node: ~D~%" (-> obj pre-play-node))
  (format #t "~1Tkiosk-play-node: ~D~%" (-> obj kiosk-play-node))
  (format #t "~1Tpre-play-continue: ~A~%" (-> obj pre-play-continue))
  (format #t "~1Tplay-node: ~D~%" (-> obj play-node))
  (format #t "~1Tplay-continue: ~A~%" (-> obj play-continue))
  (format #t "~1Tkiosk-play-continue: ~A~%" (-> obj kiosk-play-continue))
  (label cfg-4)
  obj
  )

;; definition of type game-task-control
(deftype game-task-control (basic)
  ((counter       uint32           :offset-assert   4)
   (actor         game-task-actor  :offset-assert   8)
   (current-node  uint16           :offset-assert  10)
   (current-event uint32           :offset-assert  12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (dummy-9 () none 9)
    )
  )

;; definition for method 3 of type game-task-control
(defmethod inspect game-task-control ((obj game-task-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tcounter: ~D~%" (-> obj counter))
  (format #t "~1Tactor: #x~X : ~S~%" (-> obj actor) (game-task-actor->string (-> obj actor)))
  (format #t "~1Tcurrent-node: ~D~%" (-> obj current-node))
  (format #t "~1Tcurrent-event: ~A~%" (-> obj current-event))
  (label cfg-4)
  obj
  )

;; definition of type task-manager
(deftype task-manager (process)
  ((node-info      basic                        :offset-assert 128)
   (info           task-manager-info            :offset-assert 132)
   (lev-name       basic                        :offset-assert 136)
   (fail-on-death? symbol                       :offset-assert 140)
   (fail-now       basic                        :offset-assert 144)
   (retry-now      basic                        :offset-assert 148)
   (allow-fail     basic                        :offset-assert 152)
   (state-time     time-frame                   :offset-assert 160)
   (count          int16                        :offset-assert 168)
   (max-count      int16                        :offset-assert 170)
   (sub-state      uint32                       :offset-assert 172)
   (slave          uint64            32         :offset-assert 176)
   (arrow          uint64                       :offset-assert 432)
   (link           uint32                       :offset-assert 440)
   (start-time     time-frame                   :offset-assert 448)
   (total-time     time-frame                   :offset-assert 456)
   (beep-time      time-frame                   :offset-assert 464)
   (time-limit     time-frame                   :offset-assert 472)
   (begin-pos      vector            :inline    :offset-assert 480)
   (end-pos        vector            :inline    :offset-assert 496)
   (data-int8      int8              32         :offset-assert 512)
   (data-int32     int32             32         :offset-assert 544)
   (data-float     float             32         :offset-assert 672)
   (data-vector    vector            32 :inline :offset-assert 800)
   (actor-group    uint32            4          :offset-assert 1312)
   (minimap        uint32            8          :offset-assert 1328)
   (hud            uint64            4          :offset-assert 1360)
   (hud-timer      time-frame                   :offset        1360)
   (hud-counter    int64                        :offset        1368)
   (sound-id       uint32            4          :offset-assert 1392)
   (intro-time     time-frame                   :offset-assert 1408)
   )
  :heap-base #x510
  :method-count-assert 23
  :size-assert         #x588
  :flag-assert         #x1705100588
  (:methods
    (dummy-14 () none 14)
    (dummy-15 () none 15)
    (dummy-16 () none 16)
    (dummy-17 () none 17)
    (dummy-18 () none 18)
    (dummy-19 () none 19)
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    )
  )

;; definition for method 3 of type task-manager
(defmethod inspect task-manager ((obj task-manager))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tnode-info: ~A~%" (-> obj node-info))
  (format #t "~2Tinfo: #<task-manager-info @ #x~X>~%" (-> obj info))
  (format #t "~2Tlev-name: ~A~%" (-> obj lev-name))
  (format #t "~2Tfail-on-death?: ~A~%" (-> obj fail-on-death?))
  (format #t "~2Tfail-now: ~A~%" (-> obj fail-now))
  (format #t "~2Tretry-now: ~A~%" (-> obj retry-now))
  (format #t "~2Tallow-fail: ~A~%" (-> obj allow-fail))
  (format #t "~2Tstate-time: ~D~%" (-> obj state-time))
  (format #t "~2Tcount: ~D~%" (-> obj count))
  (format #t "~2Tmax-count: ~D~%" (-> obj max-count))
  (format #t "~2Tsub-state: ~D~%" (-> obj sub-state))
  (format #t "~2Tslave[32] @ #x~X~%" (-> obj slave))
  (format #t "~2Tarrow: ~D~%" (-> obj arrow))
  (format #t "~2Tlink: ~A~%" (-> obj link))
  (format #t "~2Tstart-time: ~D~%" (-> obj start-time))
  (format #t "~2Ttotal-time: ~D~%" (-> obj total-time))
  (format #t "~2Tbeep-time: ~D~%" (-> obj beep-time))
  (format #t "~2Ttime-limit: ~D~%" (-> obj time-limit))
  (format #t "~2Tbegin-pos: #<vector @ #x~X>~%" (-> obj begin-pos))
  (format #t "~2Tend-pos: #<vector @ #x~X>~%" (-> obj end-pos))
  (format #t "~2Tdata-int8[32] @ #x~X~%" (-> obj data-int8))
  (format #t "~2Tdata-int32[32] @ #x~X~%" (-> obj data-int32))
  (format #t "~2Tdata-float[32] @ #x~X~%" (-> obj data-float))
  (format #t "~2Tdata-vector[32] @ #x~X~%" (-> obj data-vector))
  (format #t "~2Tactor-group[4] @ #x~X~%" (-> obj actor-group))
  (format #t "~2Tminimap[8] @ #x~X~%" (-> obj minimap))
  (format #t "~2Thud[4] @ #x~X~%" (-> obj hud))
  (format #t "~2Thud-timer: ~D~%" (-> obj hud-timer))
  (format #t "~2Thud-counter: ~D~%" (-> obj hud-counter))
  (format #t "~2Tsound-id[4] @ #x~X~%" (-> obj sound-id))
  (format #t "~2Tintro-time: ~D~%" (-> obj intro-time))
  (label cfg-4)
  obj
  )

;; definition of type ambient-control
(deftype ambient-control (structure)
  ((last-ambient-time time-frame  :offset-assert   0)
   (last-ambient      string      :offset-assert   8)
   (last-ambient-id   sound-id    :offset-assert  12)
   )
  :method-count-assert 12
  :size-assert         #x10
  :flag-assert         #xc00000010
  (:methods
    (dummy-9 () none 9)
    (dummy-10 () none 10)
    (dummy-11 () none 11)
    )
  )

;; definition for method 3 of type ambient-control
(defmethod inspect ambient-control ((obj ambient-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'ambient-control)
  (format #t "~1Tlast-ambient-time: ~D~%" (-> obj last-ambient-time))
  (format #t "~1Tlast-ambient: ~A~%" (-> obj last-ambient))
  (format #t "~1Tlast-ambient-id: ~D~%" (-> obj last-ambient-id))
  (label cfg-4)
  obj
  )

;; definition for symbol *traffic-engine*, type object
(define *traffic-engine* (the-as object #f))

;; failed to figure out what this is:
0
