;;-*-Lisp-*-
(in-package goal)

;; definition of type scene-actor
(deftype scene-actor (basic)
  ((name                basic   :offset-assert   4)
   (level               basic   :offset-assert   8)
   (art-group           basic   :offset-assert  12)
   (prefix              basic   :offset-assert  16)
   (draw-frames         basic   :offset-assert  20)
   (scissor-frames      basic   :offset-assert  24)
   (camera              int16   :offset-assert  28)
   (light-index         uint8   :offset-assert  30)
   (shadow-mask         uint8   :offset-assert  31)
   (shadow-values       uint32  :offset-assert  32)
   (flags               uint32  :offset-assert  36)
   (command-list        basic   :offset-assert  40)
   (shadow-flags        int32   :offset-assert  44)
   (shadow-volume-joint basic   :offset-assert  48)
   (draw-seg            uint64  :offset-assert  56)
   (no-draw-seg         uint64  :offset-assert  64)
   (process             uint64  :offset-assert  72)
   )
  :method-count-assert 10
  :size-assert         #x50
  :flag-assert         #xa00000050
  (:methods
    (scene-actor-method-9 () none 9)
    )
  )

;; definition for method 3 of type scene-actor
(defmethod inspect scene-actor ((obj scene-actor))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tart-group: ~A~%" (-> obj art-group))
  (format #t "~1Tprefix: ~A~%" (-> obj prefix))
  (format #t "~1Tdraw-frames: ~A~%" (-> obj draw-frames))
  (format #t "~1Tscissor-frames: ~A~%" (-> obj scissor-frames))
  (format #t "~1Tcamera: ~D~%" (-> obj camera))
  (format #t "~1Tlight-index: ~D~%" (-> obj light-index))
  (format #t "~1Tshadow-mask: ~D~%" (-> obj shadow-mask))
  (format #t "~1Tshadow-values: ~D~%" (-> obj shadow-values))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tcommand-list: ~A~%" (-> obj command-list))
  (format #t "~1Tshadow-flags: ~D~%" (-> obj shadow-flags))
  (format #t "~1Tshadow-volume-joint: ~A~%" (-> obj shadow-volume-joint))
  (format #t "~1Tdraw-seg: ~D~%" (-> obj draw-seg))
  (format #t "~1Tno-draw-seg: ~D~%" (-> obj no-draw-seg))
  (format #t "~1Tprocess: ~D~%" (-> obj process))
  (label cfg-4)
  obj
  )

;; definition of type scene
(deftype scene (art-group)
  ((mask-to-clear    uint32      :offset-assert  32)
   (entity           basic       :offset-assert  36)
   (art-group        basic       :offset-assert  40)
   (anim             basic       :offset-assert  44)
   (parts            int32       :offset-assert  48)
   (command-list     basic       :offset-assert  52)
   (cut-list         basic       :offset-assert  56)
   (wait-max-time    time-frame  :offset-assert  64)
   (wait-air-time    time-frame  :offset-assert  72)
   (wait-ground-time time-frame  :offset-assert  80)
   (draw-target      basic       :offset-assert  88)
   (abort            basic       :offset-assert  92)
   (actor            basic       :offset-assert  96)
   (load-point       basic       :offset-assert 100)
   (end-point        basic       :offset-assert 104)
   (borrow           basic       :offset-assert 108)
   (sfx-volume       float       :offset-assert 112)
   (ambient-volume   float       :offset-assert 116)
   (music-volume     float       :offset-assert 120)
   (blackout-end     basic       :offset-assert 124)
   (peaceful         basic       :offset-assert 128)
   (music-delay      float       :offset-assert 132)
   (save             basic       :offset-assert 136)
   (scene-task       uint16      :offset-assert 140)
   )
  :method-count-assert 17
  :size-assert         #x8e
  :flag-assert         #x110000008e
  (:methods
    (scene-method-15 () none 15)
    (scene-method-16 () none 16)
    )
  )

;; definition for method 3 of type scene
(defmethod inspect scene ((obj scene))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Textra: ~A~%" (-> obj extra))
  (format #t "~1Tinfo: ~A~%" (-> obj info))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (format #t "~1Tmask-to-clear: ~D~%" (-> obj mask-to-clear))
  (format #t "~1Tentity: ~A~%" (-> obj entity))
  (format #t "~1Tart-group: ~A~%" (-> obj art-group))
  (format #t "~1Tanim: ~A~%" (-> obj anim))
  (format #t "~1Tparts: ~D~%" (-> obj parts))
  (format #t "~1Tcommand-list: ~A~%" (-> obj command-list))
  (format #t "~1Tcut-list: ~A~%" (-> obj cut-list))
  (format #t "~1Twait-max-time: ~D~%" (-> obj wait-max-time))
  (format #t "~1Twait-air-time: ~D~%" (-> obj wait-air-time))
  (format #t "~1Twait-ground-time: ~D~%" (-> obj wait-ground-time))
  (format #t "~1Tdraw-target: ~A~%" (-> obj draw-target))
  (format #t "~1Tabort: ~A~%" (-> obj abort))
  (format #t "~1Tactor: ~A~%" (-> obj actor))
  (format #t "~1Tload-point: ~A~%" (-> obj load-point))
  (format #t "~1Tend-point: ~A~%" (-> obj end-point))
  (format #t "~1Tborrow: ~A~%" (-> obj borrow))
  (format #t "~1Tsfx-volume: ~f~%" (-> obj sfx-volume))
  (format #t "~1Tambient-volume: ~f~%" (-> obj ambient-volume))
  (format #t "~1Tmusic-volume: ~f~%" (-> obj music-volume))
  (format #t "~1Tblackout-end: ~A~%" (-> obj blackout-end))
  (format #t "~1Tpeaceful: ~A~%" (-> obj peaceful))
  (format #t "~1Tmusic-delay: ~f~%" (-> obj music-delay))
  (format #t "~1Tsave: ~A~%" (-> obj save))
  (format #t "~1Tscene-task: ~D~%" (-> obj scene-task))
  (label cfg-4)
  obj
  )

;; definition of type scene-player
(deftype scene-player (process-drawable)
  ((scene-list           basic              :offset-assert 200)
   (scene                basic              :offset-assert 204)
   (scene-index          int32              :offset-assert 208)
   (anim                 basic              :offset-assert 212)
   (next-anim            basic              :offset-assert 216)
   (camera               uint64             :offset-assert 224)
   (main-entity          basic              :offset-assert 232)
   (wait                 basic              :offset-assert 236)
   (old-target-pos       transformq :inline :offset-assert 240)
   (pre-cut-frame        basic              :offset-assert 288)
   (preload-continue     basic              :offset-assert 292)
   (dma-max              uint32             :offset-assert 296)
   (gui-id               uint32             :offset-assert 300)
   (aborted?             basic              :offset-assert 304)
   (scene-start-time     time-frame         :offset-assert 312)
   (targ-speed           float              :offset-assert 320)
   (cur-speed            float              :offset-assert 324)
   (speed-change-time    time-frame         :offset-assert 328)
   (speed-press-time     time-frame         :offset-assert 336)
   (speed-change-speed   float              :offset-assert 344)
   (subtitle-change-time time-frame         :offset-assert 352)
   (user-sound           uint32     4       :offset-assert 360)
   )
  :heap-base #x100
  :method-count-assert 26
  :size-assert         #x178
  :flag-assert         #x1a01000178
  (:methods
    (scene-player-method-20 () none 20)
    (scene-player-method-21 () none 21)
    (scene-player-method-22 () none 22)
    (scene-player-method-23 () none 23)
    (scene-player-method-24 () none 24)
    (scene-player-method-25 () none 25)
    )
  )

;; definition for method 3 of type scene-player
(defmethod inspect scene-player ((obj scene-player))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tscene-list: ~A~%" (-> obj scene-list))
  (format #t "~2Tscene: ~A~%" (-> obj scene))
  (format #t "~2Tscene-index: ~D~%" (-> obj scene-index))
  (format #t "~2Tanim: ~A~%" (-> obj anim))
  (format #t "~2Tnext-anim: ~A~%" (-> obj next-anim))
  (format #t "~2Tcamera: ~D~%" (-> obj camera))
  (format #t "~2Tmain-entity: ~A~%" (-> obj main-entity))
  (format #t "~2Twait: ~A~%" (-> obj wait))
  (format #t "~2Told-target-pos: #<transformq @ #x~X>~%" (-> obj old-target-pos))
  (format #t "~2Tpre-cut-frame: ~A~%" (-> obj pre-cut-frame))
  (format #t "~2Tpreload-continue: ~A~%" (-> obj preload-continue))
  (format #t "~2Tdma-max: ~D~%" (-> obj dma-max))
  (format #t "~2Tgui-id: ~D~%" (-> obj gui-id))
  (format #t "~2Taborted?: ~A~%" (-> obj aborted?))
  (format #t "~2Tscene-start-time: ~D~%" (-> obj scene-start-time))
  (format #t "~2Ttarg-speed: ~f~%" (-> obj targ-speed))
  (format #t "~2Tcur-speed: ~f~%" (-> obj cur-speed))
  (format #t "~2Tspeed-change-time: ~D~%" (-> obj speed-change-time))
  (format #t "~2Tspeed-press-time: ~D~%" (-> obj speed-press-time))
  (format #t "~2Tspeed-change-speed: ~f~%" (-> obj speed-change-speed))
  (format #t "~2Tsubtitle-change-time: ~D~%" (-> obj subtitle-change-time))
  (format #t "~2Tuser-sound[4] @ #x~X~%" (-> obj user-sound))
  (label cfg-4)
  obj
  )

;; definition for symbol *scene-player*, type scene-player
(define *scene-player* (the-as scene-player #f))

;; failed to figure out what this is:
0




