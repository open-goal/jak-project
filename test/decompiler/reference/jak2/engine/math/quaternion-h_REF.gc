;;-*-Lisp-*-
(in-package goal)

;; definition of type quaternion
(deftype quaternion (structure)
  ((data float   4       :offset-assert   0)
   (x    float           :offset          0)
   (y    float           :offset          4)
   (z    float           :offset          8)
   (w    float           :offset         12)
   (vec  vector  :inline :offset          0)
   (quad uint128         :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type quaternion
;; INFO: this function exists in multiple non-identical object files
;; INFO: Used lq/sq
(defmethod inspect quaternion ((obj quaternion))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'quaternion)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> obj x))
  (format #t "~1Tx: ~f~%" (-> obj x))
  (format #t "~1Ty: ~f~%" (-> obj y))
  (format #t "~1Tz: ~f~%" (-> obj z))
  (format #t "~1Tw: ~f~%" (-> obj w))
  (format #t "~1Tvec: #<vector @ #x~X>~%" (&-> obj x))
  (format #t "~1Tquad: ~D~%" (-> obj vec quad))
  (label cfg-4)
  obj
  )

;; definition for symbol *unity-quaternion*, type quaternion
(define *unity-quaternion* (new 'static 'quaternion :w 1.0))

;; failed to figure out what this is:
0




