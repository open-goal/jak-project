;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defstate cam-really-fixed (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self saved-pt quad) (-> self trans quad))
      (set! (-> self blend-from-type) (the-as uint 1))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-0))
      0
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-fixed (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self saved-pt quad) (-> self trans quad))
      (set! (-> self blend-from-type) (the-as uint 1))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-0))
      0
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (set! (-> self trans quad) (-> self saved-pt quad))
          (cam-curve-pos (-> self trans) gp-0 (the-as curve #f) #f)
          (when (!= (-> gp-0 w) 0.0)
            (vector-normalize! gp-0 1.0)
            (forward-down->inv-matrix (the-as matrix (-> self tracking)) gp-0 (-> *camera* local-down))
            )
          )
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-fixed-read-entity (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (cond
      ((-> self enter-has-run)
       )
      ((-> self cam-entity)
       (cam-slave-get-vector-with-offset (the-as entity-actor (-> self cam-entity)) (-> self trans) 'trans)
       (cam-slave-get-rot (the-as entity-actor (-> self cam-entity)) (the-as matrix (-> self tracking)))
       (set! (-> self fov) (cam-slave-get-fov (-> self cam-entity)))
       (cam-curve-setup (-> self trans))
       ((-> cam-fixed enter))
       )
      (else
        (format #t "ERROR <GMJ>: cam-fixed-read-entity enter without entity~%")
        )
      )
    (go cam-fixed)
    (none)
    )
  :code (behavior ()
    (until #f
      (format *stdcon* "ERROR <GMJ>: stayed in cam-fixed-read-entity~%")
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-pov (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self blend-from-type) (the-as uint 1))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-1))
      )
    (none)
    )
  :trans (behavior ()
    (when (not (handle->process (-> *camera* settings pov-handle)))
      (set! (-> self blend-from-type) (the-as uint 0))
      (cam-slave-go cam-fixed)
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (vector<-cspace! (-> self trans) (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                                             node-list
                                             data
                                             (-> *camera* settings pov-bone)
                                             )
                         )
        (let* ((v1-6 (-> self tracking))
               (a3-0 (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                         node-list
                         data
                         (-> *camera* settings pov-bone)
                         bone
                         transform
                         )
                     )
               (a0-9 (-> a3-0 vector 0 quad))
               (a1-11 (-> a3-0 vector 1 quad))
               (a2-0 (-> a3-0 vector 2 quad))
               (a3-1 (-> a3-0 trans quad))
               )
          (set! (-> v1-6 inv-mat vector 0 quad) a0-9)
          (set! (-> v1-6 inv-mat vector 1 quad) a1-11)
          (set! (-> v1-6 inv-mat vector 2 quad) a2-0)
          (set! (-> v1-6 inv-mat trans quad) a3-1)
          )
        (vector-reset! (-> self tracking inv-mat trans))
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (vector-matrix*! gp-0 (-> *camera* settings pov-offset) (the-as matrix (-> self tracking)))
          (vector+! (-> self trans) (-> self trans) gp-0)
          )
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-pov180 (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self blend-from-type) (the-as uint 1))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-1))
      )
    (none)
    )
  :trans (behavior ()
    (when (not (handle->process (-> *camera* settings pov-handle)))
      (set! (-> self blend-from-type) (the-as uint 0))
      (cam-slave-go cam-fixed)
      )
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'vector))
          (s4-0 #t)
          )
      (vector<-cspace! gp-0 (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                                node-list
                                data
                                (-> *camera* settings pov-bone)
                                )
                       )
      (let ((v1-13 (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                       node-list
                       data
                       (-> *camera* settings pov-bone)
                       bone
                       transform
                       )
                   )
            )
        (vector-normalize-copy! s5-0 (-> v1-13 vector 2) 1.0)
        )
      (until #f
        (when (not (paused?))
          (let ((s0-0 (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                          node-list
                          data
                          (-> *camera* settings pov-bone)
                          bone
                          transform
                          )
                      )
                (s1-0 (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                          node-list
                          data
                          (-> *camera* settings pov-bone)
                          bone
                          scale
                          )
                      )
                (s3-0 (new 'stack-no-clear 'vector))
                )
            (let ((s2-0 (new 'stack-no-clear 'vector)))
              (vector<-cspace!
                s2-0
                (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                    node-list
                    data
                    (-> *camera* settings pov-bone)
                    )
                )
              (vector-normalize-copy! s3-0 (-> s0-0 vector 2) 1.0)
              (set! s4-0
                    (cond
                      ((and (< (vector-vector-distance s2-0 gp-0) 40960.0) (< (cos 3640.889) (vector-dot s5-0 s3-0)))
                       (set! (-> self trans quad) (-> s2-0 quad))
                       (vector-negate! (the-as vector (-> self tracking)) (the-as vector (-> s0-0 vector)))
                       (set! (-> (the-as vector (&-> self stack 96)) quad) (-> s0-0 vector 1 quad))
                       (vector-negate! (the-as vector (&-> self stack 112)) (-> s0-0 vector 2))
                       (set! (-> self fov) (* 2.0 (atan (/ 12.700255 (* 20.3 (-> s1-0 x))) 1.0)))
                       (vector-float*! (the-as vector (-> self tracking)) (the-as vector (-> self tracking)) (/ 1.0 (-> s1-0 x)))
                       (vector-reset! (-> self tracking inv-mat trans))
                       (if s4-0
                           (set! s4-0 #f)
                           )
                       s4-0
                       )
                      (else
                        #t
                        )
                      )
                    )
              (set! (-> gp-0 quad) (-> s2-0 quad))
              )
            (set! (-> s5-0 quad) (-> s3-0 quad))
            )
          )
        (suspend)
        )
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-pov-track (camera-slave)
  :event (the-as
    (function process int symbol event-message-block object :behavior camera-slave)
    cam-standard-event-handler
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self blend-from-type) (the-as uint 2))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
      )
    (none)
    )
  :trans (behavior ()
    (if (or (not (handle->process (-> *camera* settings pov-handle))) (zero? (logand (-> *camera* master-options) 1)))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (set! (-> self fov) (-> *camera* settings fov))
        (vector<-cspace! (-> self trans) (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                                             node-list
                                             data
                                             (-> *camera* settings pov-bone)
                                             )
                         )
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (let ((a2-0 (new 'stack-no-clear 'matrix)))
            (let* ((v1-8 a2-0)
                   (t0-0 (-> (the-as pov-camera (-> *camera* settings pov-handle process 0))
                             node-list
                             data
                             (-> *camera* settings pov-bone)
                             bone
                             transform
                             )
                         )
                   (a0-9 (-> t0-0 vector 0 quad))
                   (a1-11 (-> t0-0 vector 1 quad))
                   (a3-0 (-> t0-0 vector 2 quad))
                   (t0-1 (-> t0-0 trans quad))
                   )
              (set! (-> v1-8 vector 0 quad) a0-9)
              (set! (-> v1-8 vector 1 quad) a1-11)
              (set! (-> v1-8 vector 2 quad) a3-0)
              (set! (-> v1-8 trans quad) t0-1)
              )
            (vector-reset! (-> a2-0 trans))
            (vector-matrix*! gp-0 (-> *camera* settings pov-offset) a2-0)
            )
          (vector+! (-> self trans) (-> self trans) gp-0)
          )
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; definition for function cam-standoff-calc-trans
(defbehavior cam-standoff-calc-trans camera-slave ()
  (if (-> self tracking no-follow)
      (vector+! (-> self trans) (-> *camera* tpos-curr-adj) (-> self pivot-pt))
      (vector+! (-> self trans) (-> self tracking follow-pt) (-> self pivot-pt))
      )
  )

;; failed to figure out what this is:
(defstate cam-standoff (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (cond
                       ((= v1-0 'set-standoff-dist)
                        (vector-normalize! (-> self pivot-pt) (the-as float (-> arg3 param 0)))
                        (cam-standoff-calc-trans)
                        )
                       ((= v1-0 'set-standoff-height)
                        (vector-flatten! (-> self pivot-pt) (-> self pivot-pt) (-> *camera* local-down))
                        (vector--float*!
                          (-> self pivot-pt)
                          (-> self pivot-pt)
                          (-> *camera* local-down)
                          (the-as float (-> arg3 param 0))
                          )
                        (cam-standoff-calc-trans)
                        )
                       (else
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
                       )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (vector-! (-> self pivot-pt) (-> self trans) (-> *camera* tpos-curr-adj))
      (cond
        ((logtest? (-> self options) #x4000)
         (set! (-> self blend-from-type) (the-as uint 0))
         (set! (-> self blend-to-type) (camera-blend-to-type unknown-0))
         0
         )
        (else
          (set! (-> self blend-from-type) (the-as uint 2))
          (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
          )
        )
      )
    (cam-calc-follow! (-> self tracking) (-> self trans) #f)
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (cam-calc-follow! (-> self tracking) (-> self trans) #t)
        (cam-standoff-calc-trans)
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-standoff-read-entity (camera-slave)
  :event (the-as
    (function process int symbol event-message-block object :behavior camera-slave)
    cam-standard-event-handler
    )
  :enter (behavior ()
    (cond
      ((-> self enter-has-run)
       )
      ((-> self cam-entity)
       (let ((gp-0 (new-stack-vector0))
             (s5-0 (new-stack-vector0))
             )
         (cam-slave-get-vector-with-offset (the-as entity-actor (-> self cam-entity)) gp-0 'trans)
         (cam-slave-get-vector-with-offset (the-as entity-actor (-> self cam-entity)) s5-0 'align)
         (vector-! (-> self pivot-pt) gp-0 s5-0)
         )
       (vector+! (-> self trans) (-> *camera* tpos-curr-adj) (-> self pivot-pt))
       (set! (-> self fov) (cam-slave-get-fov (-> self cam-entity)))
       (logior! (-> self options) (cam-slave-get-flags (-> self cam-entity) 'flags))
       (if (logtest? (-> self options) #x4000)
           (cam-slave-get-rot (the-as entity-actor (-> self cam-entity)) (the-as matrix (-> self tracking)))
           (set! (-> self tracking tilt-adjust target)
                 (cam-slave-get-float (-> self cam-entity) 'tiltAdjust (-> *CAMERA-bank* default-tilt-adjust))
                 )
           )
       ((-> cam-standoff enter))
       )
      (else
        (format #t "ERROR <GMJ>: cam-standoff-read-entity enter without entity~%")
        )
      )
    (go cam-standoff)
    (none)
    )
  :code (behavior ()
    (until #f
      (format *stdcon* "ERROR <GMJ>: stayed in cam-standoff-read-entity~%")
      (suspend)
      )
    #f
    (none)
    )
  )

;; definition of type cam-eye-bank
(deftype cam-eye-bank (basic)
  ((rot-speed   float  :offset-assert   4)
   (max-degrees float  :offset-assert   8)
   (max-fov     float  :offset-assert  12)
   (min-fov     float  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type cam-eye-bank
(defmethod inspect cam-eye-bank ((obj cam-eye-bank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Trot-speed: ~f~%" (-> obj rot-speed))
  (format #t "~1Tmax-degrees: ~f~%" (-> obj max-degrees))
  (format #t "~1Tmax-fov: ~f~%" (-> obj max-fov))
  (format #t "~1Tmin-fov: ~f~%" (-> obj min-fov))
  (label cfg-4)
  obj
  )

;; definition for symbol *CAM_EYE-bank*, type cam-eye-bank
(define *CAM_EYE-bank*
  (new 'static 'cam-eye-bank :rot-speed 364.0889 :max-degrees 12743.111 :max-fov 11650.845 :min-fov 6189.511)
  )

;; failed to figure out what this is:
(defstate cam-eye (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (let ((v1-3
              (vector-float*! (new-stack-vector0) (-> *camera* local-down) (+ 1024.0 (-> *camera* settings target-height)))
              )
            )
        (vector-! (-> self trans) (-> *camera* tpos-curr) (the-as vector v1-3))
        )
      (set! (-> self blend-from-type) (the-as uint 0))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-0))
      0
      )
    (set! (-> self fov) 11650.845)
    (none)
    )
  :exit (behavior ()
    (if (and *target*
             (logtest? (-> *camera* master-options) 1)
             (logtest? (-> *target* focus-status) (focus-status fs8))
             )
        (send-event *target* 'end-mode)
        )
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf1 :class vf)
           (vf2 :class vf)
           (vf3 :class vf)
           (vf4 :class vf)
           )
      (init-vf0-vector)
      (let ((gp-0 (-> self clock frame-counter)))
        (until #f
          (when (not (paused?))
            (let ((s4-0 (vector-reset! (new-stack-vector0)))
                  (s5-0 (new-stack-matrix0))
                  )
              (when (zero? (logand (-> *camera* settings master-options) (cam-master-options IGNORE_ANALOG)))
                (let ((f30-0 (analog-input
                               (the-as int (+ (-> *cpad-list* cpads 0 rightx) -256 (-> *cpad-list* cpads 0 leftx)))
                               0.0
                               48.0
                               110.0
                               -1.0
                               )
                             )
                      (f0-0 (analog-input
                              (the-as int (+ (-> *cpad-list* cpads 0 righty) -256 (-> *cpad-list* cpads 0 lefty)))
                              0.0
                              48.0
                              110.0
                              -1.0
                              )
                            )
                      )
                  (set! (-> s4-0 y) (- (-> s4-0 y) (* (- f30-0) (-> *CAM_EYE-bank* rot-speed))))
                  (set! (-> s4-0 x) (- (-> s4-0 x) (* (- f0-0) (-> *CAM_EYE-bank* rot-speed))))
                  )
                )
              (cond
                ((< (-> *CAM_EYE-bank* rot-speed) (-> s4-0 x))
                 (set! (-> s4-0 x) (-> *CAM_EYE-bank* rot-speed))
                 )
                ((< (-> s4-0 x) (- (-> *CAM_EYE-bank* rot-speed)))
                 (set! (-> s4-0 x) (- (-> *CAM_EYE-bank* rot-speed)))
                 )
                )
              (cond
                ((< (-> *CAM_EYE-bank* rot-speed) (-> s4-0 y))
                 (set! (-> s4-0 y) (-> *CAM_EYE-bank* rot-speed))
                 )
                ((< (-> s4-0 y) (- (-> *CAM_EYE-bank* rot-speed)))
                 (set! (-> s4-0 y) (- (-> *CAM_EYE-bank* rot-speed)))
                 )
                )
              (cond
                ((and (= (-> s4-0 x) 0.0) (= (-> s4-0 y) 0.0))
                 (set! gp-0 (-> self clock frame-counter))
                 )
                (else
                  (let ((v1-39 (min 10 (max 1 (- (-> self clock frame-counter) gp-0)))))
                    (vector-float*! s4-0 s4-0 (* 0.1 (the float v1-39)))
                    )
                  )
                )
              (matrix-axis-angle! s5-0 (-> *camera* local-down) (-> s4-0 y))
              (matrix*! (the-as matrix (-> self tracking)) (the-as matrix (-> self tracking)) s5-0)
              (when (zero? (logand (-> self options) 8))
                (if (< (vector-dot (the-as vector (&-> self stack 96)) (-> *camera* local-down)) 0.0)
                    (forward-down->inv-matrix
                      (the-as matrix (-> self tracking))
                      (the-as vector (&-> self stack 112))
                      (-> *camera* local-down)
                      )
                    (forward-down->inv-matrix
                      (the-as matrix (-> self tracking))
                      (the-as vector (&-> self stack 112))
                      (vector-negate! (new-stack-vector0) (-> *camera* local-down))
                      )
                    )
                )
              (matrix-axis-angle! s5-0 (the-as vector (-> self tracking)) (- (-> s4-0 x)))
              (matrix*! (the-as matrix (-> self tracking)) (the-as matrix (-> self tracking)) s5-0)
              )
            (when (zero? (logand (-> self options) 8))
              (let ((f30-1 (vector-dot (-> *camera* local-down) (the-as vector (&-> self stack 112)))))
                (set! (-> (new 'stack-no-clear 'vector) quad) (the-as uint128 0))
                (when (< (sin (-> *CAM_EYE-bank* max-degrees)) (fabs f30-1))
                  (vector--float*!
                    (the-as vector (&-> self stack 112))
                    (the-as vector (&-> self stack 112))
                    (-> *camera* local-down)
                    f30-1
                    )
                  (vector-normalize! (the-as vector (&-> self stack 112)) (cos (-> *CAM_EYE-bank* max-degrees)))
                  (cond
                    ((< f30-1 0.0)
                     (vector--float*!
                       (the-as vector (&-> self stack 112))
                       (the-as vector (&-> self stack 112))
                       (-> *camera* local-down)
                       (sin (-> *CAM_EYE-bank* max-degrees))
                       )
                     )
                    (else
                      (let ((s5-3 (&-> self stack 112)))
                        (let ((s4-3 (&-> self stack 112))
                              (s3-2 (-> *camera* local-down))
                              (f0-30 (sin (-> *CAM_EYE-bank* max-degrees)))
                              )
                          (.lvf vf2 (&-> s3-2 quad))
                          (.lvf vf1 s4-3)
                          (let ((v1-67 f0-30))
                            (.mov vf3 v1-67)
                            )
                          )
                        (.add.x.vf vf4 vf0 vf0 :mask #b1000)
                        (.mul.x.vf acc vf2 vf3)
                        (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
                        (.svf (the-as (pointer uint128) (&-> s5-3 0)) vf4)
                        )
                      )
                    )
                  (vector-cross!
                    (the-as vector (&-> self stack 96))
                    (the-as vector (&-> self stack 112))
                    (the-as vector (-> self tracking))
                    )
                  (set! (-> self tracking inv-mat vector 1 w) 0.0)
                  )
                )
              )
            )
          (let ((v1-71
                  (vector-float*! (new-stack-vector0) (-> *camera* local-down) (+ 1024.0 (-> *camera* settings target-height)))
                  )
                )
            (vector-! (-> self trans) (-> *camera* tpos-curr) (the-as vector v1-71))
            )
          (suspend)
          )
        )
      #f
      (none)
      )
    )
  )

;; failed to figure out what this is:
(defstate cam-spline (camera-slave)
  :event (the-as
    (function process int symbol event-message-block object :behavior camera-slave)
    cam-standard-event-handler
    )
  :enter (behavior ()
    (cond
      ((-> self enter-has-run)
       )
      ((-> self cam-entity)
       (let ((gp-0 (new-stack-vector0)))
         (set! (-> self fov) (cam-slave-get-fov (-> self cam-entity)))
         (logior! (-> self options) (cam-slave-get-flags (-> self cam-entity) 'flags))
         (if (logtest? (-> self options) #x4000)
             (cam-slave-get-rot (the-as entity-actor (-> self cam-entity)) (the-as matrix (-> self tracking)))
             (set! (-> self tracking tilt-adjust target)
                   (cam-slave-get-float (-> self cam-entity) 'tiltAdjust (-> *CAMERA-bank* default-tilt-adjust))
                   )
             )
         (cam-slave-get-vector-with-offset (the-as entity-actor (-> self cam-entity)) gp-0 'trans)
         (cam-curve-setup gp-0)
         )
       (vector-negate! (-> self saved-pt) (-> self spline-offset))
       (let ((a0-8 (res-lump-struct (-> self cam-entity) 'spline-offset structure)))
         (if a0-8
             (vector+! (-> self spline-offset) (-> self spline-offset) (the-as vector a0-8))
             )
         )
       (set! (-> self trans quad) (-> self saved-pt quad))
       (cam-calc-follow! (-> self tracking) (-> self trans) #f)
       (set! (-> self spline-follow-dist) (cam-slave-get-float (-> self cam-entity) 'spline-follow-dist 0.0))
       (cond
         ((< 0.0 (-> self spline-follow-dist))
          (let ((s5-1 (new 'stack-no-clear 'vector))
                (gp-1 (new 'stack-no-clear 'vector))
                )
            (curve-get-pos! s5-1 0.0 (-> self spline-curve))
            (curve-get-pos! gp-1 1.0 (-> self spline-curve))
            (if (< (vector-vector-distance-squared s5-1 (-> self tracking follow-pt))
                   (vector-vector-distance-squared gp-1 (-> self tracking follow-pt))
                   )
                (set! (-> self spline-follow-dist) (- (-> self spline-follow-dist)))
                )
            )
          (set! (-> self spline-tt) (curve-closest-point
                                      (-> self spline-curve)
                                      (-> self tracking follow-pt)
                                      0.5
                                      -4096.0
                                      10
                                      (-> self spline-follow-dist)
                                      )
                )
          )
         (else
           (set! (-> self spline-follow-dist) 0.0)
           )
         )
       (cam-curve-pos (-> self trans) (the-as vector #f) (the-as curve #f) #t)
       (cond
         ((logtest? (-> self options) #x4000)
          (set! (-> self blend-from-type) (the-as uint 0))
          (set! (-> self blend-to-type) (camera-blend-to-type unknown-0))
          0
          )
         (else
           (set! (-> self blend-from-type) (the-as uint 2))
           (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
           )
         )
       )
      (else
        (format #t "ERROR <GMJ>: cam-spline enter without entity~%")
        )
      )
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (cam-calc-follow! (-> self tracking) (-> self trans) #t)
        (new 'stack 'curve)
        (set! (-> self trans quad) (-> self saved-pt quad))
        (cam-curve-pos (-> self trans) (the-as vector #f) (the-as curve #f) #t)
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-decel (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self saved-pt quad) (-> self trans quad))
      (set! (-> self blend-from-type) (the-as uint 1))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-1))
      )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (let ((s5-0 (new-stack-vector0))
              (gp-0 (new-stack-vector0))
              )
          (when (!= (-> *camera* outro-t-step) 0.0)
            (curve-get-pos! s5-0 (parameter-ease-sin-clamp (-> *camera* outro-t)) (-> *camera* outro-curve))
            (+! (-> *camera* outro-t) (* (-> *camera* outro-t-step) (-> self clock time-adjust-ratio)))
            (curve-get-pos! gp-0 (parameter-ease-sin-clamp (-> *camera* outro-t)) (-> *camera* outro-curve))
            (vector-! gp-0 gp-0 s5-0)
            (cond
              ((or (and (< (-> *camera* outro-t-step) 0.0) (>= (-> *camera* outro-exit-value) (-> *camera* outro-t)))
                   (and (< 0.0 (-> *camera* outro-t-step)) (>= (-> *camera* outro-t) (-> *camera* outro-exit-value)))
                   )
               (set! (-> *camera* outro-t) (-> *camera* outro-exit-value))
               (set! (-> *camera* outro-t-step) 0.0)
               (vector+! (-> self velocity) (-> self velocity) gp-0)
               (send-event *camera* 'outro-done)
               )
              (else
                (vector+! (-> self trans) (-> self trans) gp-0)
                )
              )
            )
          )
        (vector-float*! (-> self velocity) (-> self velocity) 0.9)
        (vector+! (-> self trans) (-> self trans) (-> self velocity))
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-endlessfall (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (let ((v1-0 arg2))
      (the-as object (if (= v1-0 'teleport)
                         #f
                         (cam-standard-event-handler arg0 arg1 arg2 arg3)
                         )
              )
      )
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self blend-from-type) (the-as uint 2))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
      )
    (none)
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'cam-vector-seeker))
          (f30-0 (-> self velocity y))
          )
      (let ((a1-0 (new 'stack-no-clear 'vector))
            (s5-0 (new 'stack-no-clear 'vector))
            )
        (set! (-> a1-0 quad) (-> self trans quad))
        (set! (-> a1-0 y) 0.0)
        (set! (-> s5-0 quad) (-> self velocity quad))
        (set! (-> s5-0 y) 0.0)
        (init gp-0 a1-0 81.92 (fmax 819.2 (vector-length s5-0)) 0.75)
        (set! (-> gp-0 vel quad) (-> s5-0 quad))
        )
      (until #f
        (when (not (paused?))
          (set! (-> gp-0 target x) (-> (target-pos 0) x))
          (set! (-> gp-0 target z) (-> (target-pos 0) z))
          (update! gp-0 (the-as vector #f))
          (when (< 819.2 (-> gp-0 max-vel))
            (set! (-> gp-0 max-vel) (* 0.9 (-> gp-0 max-vel)))
            (if (< (-> gp-0 max-vel) 819.2)
                (set! (-> gp-0 max-vel) 819.2)
                )
            )
          (set! f30-0 (* 0.9 f30-0))
          (+! (-> self trans y) f30-0)
          (set! (-> self trans x) (-> gp-0 value x))
          (set! (-> self trans z) (-> gp-0 value z))
          )
        (suspend)
        )
      )
    #f
    (none)
    )
  )

;; definition for function cam-circular-position-into-max-angle
;; INFO: Used lq/sq
(defbehavior cam-circular-position-into-max-angle camera-slave ((arg0 vector) (arg1 vector) (arg2 float))
  (let* ((f30-0 (vector-normalize-ret-len! arg0 1.0))
         (f26-0 (vector-normalize-ret-len! arg1 1.0))
         (f0-1 (vector-dot arg0 arg1))
         (f28-0 (acos f0-1))
         (s4-0 (new 'stack-no-clear 'matrix))
         )
    (when (zero? (logand (-> *camera* settings master-options) (cam-master-options IGNORE_ANALOG)))
      (let ((f24-0 (analog-input
                     (the-as int (-> *cpad-list* cpads 0 rightx))
                     128.0
                     32.0
                     110.0
                     (* 8192.0 (-> self clock seconds-per-frame))
                     )
                   )
            (f1-2 (analog-input
                    (the-as int (-> *cpad-list* cpads 0 righty))
                    128.0
                    32.0
                    110.0
                    (* 8192.0 (-> self clock seconds-per-frame))
                    )
                  )
            (s2-0 (new-stack-matrix0))
            )
        (let ((v1-15 (new 'stack-no-clear 'vector)))
          0.0
          (when (< (-> self max-angle-offset) 1820.4445)
            (set! f24-0 0.0)
            (set! f1-2 0.0)
            )
          (if (< (-> self pivot-rad) f30-0)
              (set! f24-0 (- f24-0))
              )
          (vector-cross! v1-15 arg1 arg0)
          (let ((f0-10 (vector-dot v1-15 (-> *camera* local-down))))
            (if (< f1-2 0.0)
                (set! f1-2 (fmax f1-2 (* -0.15 f28-0)))
                )
            (if (< f0-10 0.0)
                (set! f1-2 (- f1-2))
                )
            (let* ((f1-3 (+ f24-0 f1-2))
                   (f1-5
                     (fmin (* 8192.0 (-> self clock seconds-per-frame)) (fmax (* -8192.0 (-> self clock seconds-per-frame)) f1-3))
                     )
                   )
              (cond
                ((and (< 0.0 f1-5) (< 0.0 f0-10) (< (-> self max-angle-curr) f28-0))
                 (set! f1-5 0.0)
                 )
                ((and (< 0.0 f1-5) (< 0.0 f0-10))
                 (set! f1-5 (fmin f1-5 (* 0.15 (- (-> self max-angle-curr) f28-0))))
                 )
                ((and (< f1-5 0.0) (< f0-10 0.0) (< (-> self max-angle-curr) f28-0))
                 (set! f1-5 0.0)
                 )
                ((and (< f1-5 0.0) (< f0-10 0.0))
                 (set! f1-5 (fmax f1-5 (* 0.15 (- f28-0 (-> self max-angle-curr)))))
                 )
                )
              (matrix-axis-angle! s2-0 (-> *camera* local-down) f1-5)
              )
            )
          )
        (vector-matrix*! arg1 arg1 s2-0)
        )
      (let ((f0-16 (vector-dot arg0 arg1)))
        (set! f28-0 (acos f0-16))
        )
      )
    (cond
      ((< (-> self max-angle-curr) f28-0)
       (matrix-from-two-vectors-max-angle!
         s4-0
         arg1
         arg0
         (* (fmin 1.0 (* arg2 (-> self clock time-adjust-ratio))) (- f28-0 (-> self max-angle-curr)))
         )
       (vector-matrix*! arg0 arg1 s4-0)
       )
      ((and (logtest? (-> self options) 2)
            (or (and (>= f26-0 (+ -8192.0 f30-0)) (>= f30-0 (+ -8192.0 (-> self pivot-rad))))
                (and (>= (+ 8192.0 f30-0) f26-0) (>= (+ 8192.0 (-> self pivot-rad)) f30-0))
                )
            )
       (let ((s2-1 (new 'stack-no-clear 'vector)))
         (vector-cross! s2-1 arg1 arg0)
         (vector-normalize! s2-1 1.0)
         (matrix-axis-angle!
           s4-0
           s2-1
           (* (fmin 1.0 (* arg2 (-> self clock time-adjust-ratio))) (- (-> self max-angle-curr) f28-0))
           )
         )
       (vector-matrix*! arg0 arg1 s4-0)
       )
      (else
        (set! (-> arg0 quad) (-> arg1 quad))
        (if (logtest? (-> self options) 2048)
            (set! (-> self max-angle-curr) f28-0)
            )
        )
      )
    )
  (vector-normalize! arg0 (-> self pivot-rad))
  )

;; definition for function cam-circular-position
;; ERROR: function has no type analysis. Cannot decompile.

;; definition for function cam-circular-code
;; INFO: Used lq/sq
;; ERROR: failed type prop at 56: Called a function, but we do not know its type
;; INFO: Return type mismatch none vs float.
(defbehavior cam-circular-code camera-slave ()
  (local-vars
    (v0-0 vector)
    (v0-1 vector)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v1-0 vector)
    (v1-1 none)
    (v1-2 vector)
    (v1-3 vector)
    (v1-4 uint)
    (v1-5 uint)
    (v1-6 int)
    (v1-7 clock)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-13 vector)
    (v1-14 none)
    (v1-15 none)
    (a0-0 vector)
    (a0-1 uint128)
    (a0-2 vector)
    (a0-3 camera-master)
    (a0-4 vector)
    (a0-5 vector)
    (a0-6 vector)
    (a0-7 none)
    (a0-8 vector)
    (a0-9 symbol)
    (a0-10 none)
    (a1-0 symbol)
    (a1-1 vector)
    (a1-2 vector)
    (a1-3 vector)
    (a1-4 vector)
    (a1-5 none)
    (a1-6 vector)
    (a1-7 vector)
    (a1-8 none)
    (a2-0 symbol)
    (a2-1 none)
    (a3-0 symbol)
    (a3-1 symbol)
    (a3-2 none)
    (t0-0 float)
    (s3-0 none)
    (t9-0 (function vector vector curve symbol vector :behavior camera-slave))
    (t9-1 (function vector vector vector vector float vector))
    (t9-2 none)
    (t9-3 function)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (gp-0 none)
    (f0-0 float)
    (f0-1 float)
    (f0-2 none)
    (f0-3 none)
    (f0-4 none)
    (f0-5 none)
    (f0-6 none)
    (f0-7 none)
    (f1-0 float)
    (f1-1 none)
    (f1-2 none)
    )
  (when (begin
          (cond
            ((begin
               (set! v1-0 (-> s6-0 pivot-pt))
               (set! a0-0 (-> s6-0 saved-pt))
               (set! a0-1 (-> a0-0 quad))
               (set! (-> v1-0 quad) a0-1)
               (set! t9-0 cam-curve-pos)
               (set! a0-2 (-> s6-0 pivot-pt))
               (set! a1-0 #f)
               (set! a2-0 #f)
               (set! a3-0 #f)
               (call! a0-2 a1-0 a2-0 a3-0)
               (set! a2-1 (the-as none (new 'stack-no-clear 'vector)))
               (s.q! a2-1 0)
               (set! v1-1 (the-as none a2-1))
               (set! a0-3 *camera*)
               (set! a0-4 (-> a0-3 tpos-curr-adj))
               (set! a1-1 (-> s6-0 pivot-pt))
               (set! v1-2 (vector-!2 v1-1 a0-4 a1-1))
               (set! a1-2 (-> s6-0 circular-follow))
               (set! v1-3 (-> s6-0 circular-follow))
               (set! a0-5 (-> s6-0 pivot-pt))
               (set! a1-3 (vector-!2 a1-2 v1-3 a0-5))
               (set! v1-4 (-> s6-0 options))
               (set! v1-5 (logand v1-4 4))
               (nonzero? v1-5)
               )
             (set! t9-1 v-slrp3!)
             (set! a0-6 (-> s6-0 circular-follow))
             (set! a1-4 (-> s6-0 circular-follow))
             (set! a3-1 #f)
             (set! v1-6 #x43360b61)
             (set! f0-0 (the-as float (gpr->fpr v1-6)))
             (set! v1-7 (-> s6-0 clock))
             (set! f1-0 (-> v1-7 time-adjust-ratio))
             (set! f0-1 (*.s f0-0 f1-0))
             (set! t0-0 (fpr->gpr f0-1))
             (call! a0-6 a1-4 a2-1 a3-1 t0-0)
             (set! v1-8 v0-1)
             )
            (else
              (set! t9-2 (the-as none v-slrp3!))
              (set! a0-7 (the-as none (-> s6-0 circular-follow)))
              (set! a1-5 (the-as none (-> s6-0 circular-follow)))
              (set! v1-9 (the-as none *camera*))
              (set! a3-2 (the-as none (+ v1-9 284)))
              (set! v1-10 (the-as none #x43360b61))
              (set! f0-2 (the-as none (gpr->fpr v1-10)))
              (set! v1-11 (the-as none (-> s6-0 clock)))
              (set! f1-1 (the-as none (l.f (+ v1-11 84))))
              (set! f0-3 (the-as none (*.s f0-2 f1-1)))
              (set! t0-1 (the-as none (fpr->gpr f0-3)))
              (call!)
              (set! v1-12 (the-as none v0-2))
              )
            )
          (set! a1-6 (-> s6-0 circular-follow))
          (set! v1-13 (-> s6-0 circular-follow))
          (set! a0-8 (-> s6-0 pivot-pt))
          (set! a1-7 (vector+!2 a1-6 v1-13 a0-8))
          (set! t9-3 cam-circular-position)
          (set! a0-9 #t)
          (call!)
          (set! f0-4 (the-as none (-> s6-0 fov1)))
          (set! f1-2 (the-as none 0))
          (!=.s f0-4 f1-2)
          )
    (set! gp-0 (the-as none lerp-clamp))
    (set! f0-5 (the-as none (l.f (+ s6-0 144))))
    (set! s5-0 (the-as none (fpr->gpr f0-5)))
    (set! f0-6 (the-as none (l.f (+ s6-0 148))))
    (set! s4-0 (the-as none (fpr->gpr f0-6)))
    (set! s3-0 (the-as none parameter-ease-sin-clamp))
    (set! a0-10 (the-as none (+ s6-0 156)))
    (set! v1-14 (the-as none cam-index))
    (set! t9-4 (the-as none (l.wu (+ v1-14 56))))
    (set! v1-15 (the-as none *camera*))
    (set! a1-8 (the-as none (+ v1-15 524)))
    (call!)
    (set! a0-11 (the-as none v0-5))
    (set! t9-5 (the-as none s3-0))
    (call!)
    (set! a2-2 (the-as none v0-6))
    (set! t9-6 (the-as none gp-0))
    (set! a0-12 (the-as none s5-0))
    (set! a1-9 (the-as none s4-0))
    (set! v0-7 (the-as none (call!)))
    (set! f0-7 (the-as none (gpr->fpr v0-7)))
    (s.f! (+ s6-0 140) f0-7)
    (set! v0-4 (the-as none (fpr->gpr f0-7)))
    )
  (ret-value v0-4)
  )

;; failed to figure out what this is:
(defstate cam-circular (camera-slave)
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (if (not (paused?))
          (cam-circular-code)
          )
      (suspend)
      )
    #f
    (none)
    )
  )

;; failed to figure out what this is:
(defstate cam-lookat (camera-slave)
  :event (the-as
    (function process int symbol event-message-block object :behavior camera-slave)
    cam-standard-event-handler
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self blend-from-type) (the-as uint 2))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
      )
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (suspend)
      )
    #f
    (none)
    )
  )

;; definition of type cam-string-bank
(deftype cam-string-bank (basic)
  ((los-coll-rad  meters  :offset-assert   4)
   (los-coll-rad2 meters  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type cam-string-bank
(defmethod inspect cam-string-bank ((obj cam-string-bank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlos-coll-rad: (meters ~m)~%" (-> obj los-coll-rad))
  (format #t "~1Tlos-coll-rad2: (meters ~m)~%" (-> obj los-coll-rad2))
  (label cfg-4)
  obj
  )

;; definition for symbol *CAM_STRING-bank*, type cam-string-bank
(define *CAM_STRING-bank* (new 'static 'cam-string-bank :los-coll-rad (meters 1) :los-coll-rad2 (meters 0.5)))

;; definition for function cam-string-find-position-rel!
;; INFO: Used lq/sq
;; ERROR: Function may read a register that is not set: t0
;; ERROR: Function may read a register that is not set: t1
;; ERROR: Function may read a register that is not set: t2
;; ERROR: Function may read a register that is not set: t3
;; WARN: new jak 2 until loop case, check carefully
(defun cam-string-find-position-rel! ((arg0 vector))
  (local-vars (t0-0 none) (t1-0 none) (t2-0 none) (t3-0 none))
  (let ((s5-0 (new 'stack-no-clear 'vector))
        (s4-0 (new 'stack-no-clear 'vector))
        (s3-0 (new 'stack-no-clear 'collide-query))
        (f30-0 0.0)
        (s2-0 (new 'stack-no-clear 'matrix))
        )
    (let ((s1-0 s3-0))
      (set! (-> s1-0 radius) 409.6)
      (set! (-> s1-0 collide-with) (collide-spec backgnd obstacle hit-by-others-list camera-blocker pusher))
      (set! (-> s1-0 ignore-process0) #f)
      (set! (-> s1-0 ignore-process1) #f)
      (set! (-> s1-0 ignore-pat) (the-as pat-surface (camera-master-method-16 *camera* #f)))
      (set! (-> s1-0 action-mask) (the-as uint 1))
      )
    (vector-flatten! s5-0 (-> *camera-combiner* inv-camera-rot vector 2) (-> *camera* local-down))
    (if (= (vector-normalize-ret-len! s5-0 (- (+ 1024.0 (-> *CAMERA-bank* default-string-min-z)))) 0.0)
        (set! (-> s5-0 z) (+ 1024.0 (-> *CAMERA-bank* default-string-min-z)))
        )
    (vector--float*! s5-0 s5-0 (-> *camera* local-down) (-> *CAMERA-bank* default-string-min-y))
    (set! (-> arg0 quad) (-> s5-0 quad))
    (until #f
      (let ((t9-4 vector--float*!)
            (a0-7 s4-0)
            (a1-4 arg0)
            (a2-2 (-> *camera* local-down))
            (a3-1 (-> *camera* settings target-height))
            )
        (t9-4 a0-7 a1-4 a2-2 a3-1)
        (set! (-> s3-0 start-pos quad) (-> *camera* tpos-curr-adj quad))
        (set! (-> s3-0 move-dist quad) (-> arg0 quad))
        (if (< (fill-and-probe-using-line-sphere
                 *collide-cache*
                 (the-as vector s3-0)
                 a2-2
                 (the-as float a3-1)
                 (the-as collide-spec t0-0)
                 (the-as process t1-0)
                 (the-as collide-tri-result t2-0)
                 (the-as pat-surface t3-0)
                 )
               0.0
               )
            (return #t)
            )
        )
      (set! f30-0 (cond
                    ((>= -32768.0 f30-0)
                     (format #t "cam-string didn't find a spot~%")
                     (set! (-> arg0 quad) (-> s5-0 quad))
                     (return #f)
                     f30-0
                     )
                    ((< 0.0 f30-0)
                     (- f30-0)
                     )
                    (else
                      (- 5461.3335 f30-0)
                      )
                    )
            )
      (matrix-axis-angle! s2-0 (-> *camera* local-down) f30-0)
      (vector-matrix*! arg0 s5-0 s2-0)
      )
    )
  #f
  )

;; definition for function cam-string-set-position-rel!
;; INFO: Used lq/sq
;; INFO: Return type mismatch uint vs cam-slave-options.
(defbehavior cam-string-set-position-rel! camera-slave ((arg0 vector))
  (vector-flatten! (-> self view-flat) arg0 (-> *camera* local-down))
  (set! (-> self min-z-override) (vector-length (-> self view-flat)))
  (vector+! (-> self desired-pos) arg0 (-> *camera* tpos-curr-adj))
  (set! (-> self string-trans quad) (-> self desired-pos quad))
  (tracking-spline-method-10 (-> self position-spline) (-> self desired-pos))
  (vector-reset! (-> self velocity))
  (let ((v0-2 (logand -4097 (-> self options))))
    (set! (-> self options) v0-2)
    (the-as cam-slave-options v0-2)
    )
  )

;; definition for function string-push-help
(defun string-push-help ()
  409.6
  )

;; definition (debug) for function cam-draw-collide-cache
;; INFO: Return type mismatch int vs none.
(defun-debug cam-draw-collide-cache ((arg0 collide-cache))
  (let ((gp-0 (the-as object (-> arg0 tris))))
    (countdown (s5-0 (-> arg0 num-tris))
      (let ((t1-0 #x40000080))
        (add-debug-flat-triangle
          #t
          (bucket-id bucket-318)
          (the-as vector (-> (the-as (inline-array collide-cache-tri) gp-0) 0))
          (-> (the-as (inline-array collide-cache-tri) gp-0) 0 vertex 1)
          (-> (the-as (inline-array collide-cache-tri) gp-0) 0 vertex 2)
          (the-as rgba t1-0)
          )
        )
      (set! gp-0 (-> (the-as (inline-array collide-cache-tri) gp-0) 1))
      )
    )
  0
  (none)
  )

;; definition of type los-dist
(deftype los-dist (structure)
  ((par-dist  float  :offset-assert   0)
   (lat-dist  float  :offset-assert   4)
   (vert-dist float  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type los-dist
(defmethod inspect los-dist ((obj los-dist))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'los-dist)
  (format #t "~1Tpar-dist: ~f~%" (-> obj par-dist))
  (format #t "~1Tlat-dist: ~f~%" (-> obj lat-dist))
  (format #t "~1Tvert-dist: ~f~%" (-> obj vert-dist))
  (label cfg-4)
  obj
  )

;; definition of type collide-los-dist-info
(deftype collide-los-dist-info (structure)
  ((min-par float  :offset-assert   0)
   (max-par float  :offset-assert   4)
   (min-lat float  :offset-assert   8)
   (max-lat float  :offset-assert  12)
   (min-vp  float  :offset-assert  16)
   (max-vp  float  :offset-assert  20)
   (min-vn  float  :offset-assert  24)
   (max-vn  float  :offset-assert  28)
   (count   int32  :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; definition for method 3 of type collide-los-dist-info
(defmethod inspect collide-los-dist-info ((obj collide-los-dist-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'collide-los-dist-info)
  (format #t "~1Tmin-par: ~f~%" (-> obj min-par))
  (format #t "~1Tmax-par: ~f~%" (-> obj max-par))
  (format #t "~1Tmin-lat: ~f~%" (-> obj min-lat))
  (format #t "~1Tmax-lat: ~f~%" (-> obj max-lat))
  (format #t "~1Tmin-vp: ~f~%" (-> obj min-vp))
  (format #t "~1Tmax-vp: ~f~%" (-> obj max-vp))
  (format #t "~1Tmin-vn: ~f~%" (-> obj min-vn))
  (format #t "~1Tmax-vn: ~f~%" (-> obj max-vn))
  (format #t "~1Tcount: ~D~%" (-> obj count))
  (label cfg-4)
  obj
  )

;; definition for function dist-info-init
;; INFO: Return type mismatch int vs none.
(defun dist-info-init ((arg0 collide-los-dist-info))
  (set! (-> arg0 min-par) 1.0)
  (set! (-> arg0 max-par) 0.0)
  (set! (-> arg0 count) 0)
  0
  (none)
  )

;; definition for function dist-info-valid?
(defun dist-info-valid? ((arg0 collide-los-dist-info))
  (>= (-> arg0 max-par) (-> arg0 min-par))
  )

;; definition for function dist-info-append
;; INFO: Return type mismatch int vs none.
(defun dist-info-append ((arg0 collide-los-dist-info) (arg1 vector))
  (cond
    ((dist-info-valid? arg0)
     (if (< (-> arg1 x) (-> arg0 min-par))
         (set! (-> arg0 min-par) (-> arg1 x))
         )
     (if (< (-> arg0 max-par) (-> arg1 x))
         (set! (-> arg0 max-par) (-> arg1 x))
         )
     (if (< (-> arg1 y) (-> arg0 min-lat))
         (set! (-> arg0 min-lat) (-> arg1 y))
         )
     (if (< (-> arg0 max-lat) (-> arg1 y))
         (set! (-> arg0 max-lat) (-> arg1 y))
         )
     (cond
       ((< (-> arg1 y) 0.0)
        (if (< (-> arg1 z) (-> arg0 min-vn))
            (set! (-> arg0 min-vn) (-> arg1 z))
            )
        (if (< (-> arg0 max-vn) (-> arg1 z))
            (set! (-> arg0 max-vn) (-> arg1 z))
            )
        )
       (else
         (if (< (-> arg1 z) (-> arg0 min-vp))
             (set! (-> arg0 min-vp) (-> arg1 z))
             )
         (if (< (-> arg0 max-vp) (-> arg1 z))
             (set! (-> arg0 max-vp) (-> arg1 z))
             )
         )
       )
     )
    (else
      (set! (-> arg0 min-par) (-> arg1 x))
      (set! (-> arg0 max-par) (-> arg1 x))
      (set! (-> arg0 min-lat) (-> arg1 y))
      (set! (-> arg0 max-lat) (-> arg1 y))
      (set! (-> arg0 min-vp) 0.0)
      (set! (-> arg0 max-vp) 0.0)
      (set! (-> arg0 min-vn) 0.0)
      (set! (-> arg0 max-vn) 0.0)
      (cond
        ((< (-> arg1 y) 0.0)
         (set! (-> arg0 min-vn) (-> arg1 z))
         (set! (-> arg0 max-vn) (-> arg1 z))
         )
        (else
          (set! (-> arg0 min-vp) (-> arg1 z))
          (set! (-> arg0 max-vp) (-> arg1 z))
          )
        )
      )
    )
  (+! (-> arg0 count) 1)
  (none)
  )

;; definition for function dist-info-print
(defun dist-info-print ((arg0 collide-los-dist-info) (arg1 string))
  (cond
    ((dist-info-valid? arg0)
     (format
       *stdcon*
       "~S ~2,D mn ~,,2M mx ~,,2M mnl ~,,2M mxl ~,,2M~%"
       arg1
       (-> arg0 count)
       (-> arg0 min-par)
       (-> arg0 max-par)
       (-> arg0 min-lat)
       (-> arg0 max-lat)
       )
     (format
       *stdcon*
       "   mnvp ~,,2M mxvp ~,,2M mnvn ~,,2M mxvn ~,,2M~%"
       (-> arg0 min-vp)
       (-> arg0 max-vp)
       (-> arg0 min-vn)
       (-> arg0 max-vn)
       )
     )
    (else
      (format *stdcon* "~S invalid~%" arg1)
      )
    )
  )

;; definition of type collide-los-result
(deftype collide-los-result (structure)
  ((lateral       vector                :inline :offset-assert   0)
   (cw            collide-los-dist-info :inline :offset-assert  16)
   (ccw           collide-los-dist-info :inline :offset-assert  64)
   (straddle      collide-los-dist-info :inline :offset-assert 112)
   (lateral-valid symbol                        :offset-assert 148)
   )
  :method-count-assert 9
  :size-assert         #x98
  :flag-assert         #x900000098
  )

;; definition for method 3 of type collide-los-result
(defmethod inspect collide-los-result ((obj collide-los-result))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'collide-los-result)
  (format #t "~1Tlateral: ~`vector`P~%" (-> obj lateral))
  (format #t "~1Tcw: #<collide-los-dist-info @ #x~X>~%" (-> obj cw))
  (format #t "~1Tccw: #<collide-los-dist-info @ #x~X>~%" (-> obj ccw))
  (format #t "~1Tstraddle: #<collide-los-dist-info @ #x~X>~%" (-> obj straddle))
  (format #t "~1Tlateral-valid: ~A~%" (-> obj lateral-valid))
  (label cfg-4)
  obj
  )

;; definition for function los-cw-ccw
;; INFO: Used lq/sq
;; WARN: Stack slot offset 128 signed mismatch
;; WARN: Stack slot offset 128 signed mismatch
;; WARN: Stack slot offset 128 signed mismatch
;; WARN: Stack slot offset 128 signed mismatch
;; WARN: Stack slot offset 128 signed mismatch
;; WARN: Stack slot offset 128 signed mismatch
;; WARN: Stack slot offset 128 signed mismatch
(defun los-cw-ccw ((arg0 (inline-array collide-cache-tri))
          (arg1 vector)
          (arg2 vector)
          (arg3 float)
          (arg4 collide-los-result)
          (arg5 vector)
          (arg6 float)
          )
  (local-vars (sv-128 float) (sv-144 vector) (sv-160 vector) (sv-176 vector) (sv-192 vector) (sv-208 int))
  (with-pp
    (set! sv-128 arg3)
    (let ((gp-0 arg4))
      (set! sv-144 arg5)
      (let ((s4-0 arg6))
        (set! sv-160 (new 'stack-no-clear 'vector))
        (set! sv-176 (new 'stack-no-clear 'vector))
        (let ((s5-0 (new 'stack-no-clear 'matrix)))
          (set! sv-192 (new 'stack-no-clear 'vector))
          (let ((f30-0 0.0)
                (s0-0 #f)
                )
            (set! sv-208 0)
            (while (< sv-208 4)
              (cond
                ((= sv-208 3)
                 (vector-! sv-160 sv-144 (the-as vector (&-> pp stack 432)))
                 (set! (-> s5-0 vector sv-208 z) 0.0)
                 )
                (else
                  (vector-! sv-160 sv-144 (-> arg0 0 vertex sv-208))
                  (set! (-> s5-0 vector sv-208 z) (vector-dot sv-160 (-> *camera* local-down)))
                  (vector-! sv-160 (-> arg0 0 vertex sv-208) (the-as vector (&-> pp stack 432)))
                  )
                )
              (vector-flatten! sv-160 sv-160 (-> *camera* local-down))
              (vector-cross! sv-176 sv-160 arg2)
              (let ((f28-0 (vector-dot sv-176 (-> *camera* local-down))))
                (cond
                  ((< (* f28-0 f30-0) 0.0)
                   (set! s0-0 #t)
                   )
                  ((!= f28-0 0.0)
                   (set! f30-0 f28-0)
                   )
                  )
                (set! (-> s5-0 vector sv-208 x) (vector-dot sv-160 arg2))
                (cond
                  ((= sv-208 3)
                   (vector-! sv-192 sv-144 (the-as vector (&-> pp stack 432)))
                   (vector-flatten! sv-192 sv-192 arg1)
                   )
                  (else
                    (vector--float*! sv-192 sv-160 arg2 (-> s5-0 vector sv-208 x))
                    )
                  )
                (if (< f28-0 0.0)
                    (set! (-> s5-0 vector sv-208 y) (- (vector-length sv-192)))
                    (set! (-> s5-0 vector sv-208 y) (vector-length sv-192))
                    )
                )
              (set! (-> s5-0 vector sv-208 x) (- sv-128 (-> s5-0 vector sv-208 x)))
              (set! sv-208 (+ sv-208 1))
              )
            (cond
              ((and s0-0 (!= s4-0 -859915232))
               (dotimes (s4-1 4)
                 (dist-info-append (-> gp-0 straddle) (the-as vector (+ (the-as uint s5-0) (* s4-1 16))))
                 )
               #f
               )
              ((< (-> s5-0 trans y) 0.0)
               (dotimes (s4-2 4)
                 (when (>= (-> s5-0 trans y) (-> s5-0 vector s4-2 y))
                   (set! (-> s5-0 vector s4-2 y) (- (-> s5-0 vector s4-2 y)))
                   (dist-info-append (-> gp-0 ccw) (the-as vector (+ (the-as uint s5-0) (* s4-2 16))))
                   )
                 )
               #f
               )
              (else
                (dotimes (s4-3 4)
                  (if (>= (-> s5-0 vector s4-3 y) (-> s5-0 trans y))
                      (dist-info-append (-> gp-0 cw) (the-as vector (+ (the-as uint s5-0) (* s4-3 16))))
                      )
                  )
                #f
                )
              )
            )
          )
        )
      )
    )
  )

;; definition for function cam-los-spline-collide
;; INFO: Used lq/sq
(defun cam-los-spline-collide ((arg0 vector) (arg1 vector) (arg2 pat-surface))
  (let ((s5-0 (new 'stack-no-clear 'collide-query))
        (s4-0 *collide-cache*)
        (f30-0 2.0)
        )
    0.0
    (set! (-> s5-0 start-pos quad) (-> arg0 quad))
    (vector-! (-> s5-0 move-dist) arg1 arg0)
    (let ((v1-4 s5-0))
      (set! (-> v1-4 radius) (-> *CAM_STRING-bank* los-coll-rad2))
      (set! (-> v1-4 collide-with) (collide-spec backgnd obstacle hit-by-others-list camera-blocker pusher))
      (set! (-> v1-4 ignore-process0) #f)
      (set! (-> v1-4 ignore-process1) #f)
      (set! (-> v1-4 ignore-pat) arg2)
      (set! (-> v1-4 action-mask) (the-as uint 1))
      )
    ((method-of-object s4-0 collide-cache-method-13))
    (let* ((f0-2 (vector-length (-> s5-0 move-dist)))
           (f28-0
             (cond
               ((< f0-2 (-> *CAMERA-bank* min-detectable-velocity))
                0.0
                )
               (else
                 (let* ((f0-3 (/ (* 3.0 (- (-> *CAM_STRING-bank* los-coll-rad2) (-> *CAMERA-bank* collide-move-rad))) f0-2))
                        (f0-4 (- 1.0 f0-3))
                        )
                   (fmin 1.0 (fmax 0.0 f0-4))
                   )
                 )
               )
             )
           (s3-0 (the-as object (-> s4-0 tris)))
           (s2-0 (new 'stack-no-clear 'vector))
           (s1-0 (new 'stack-no-clear 'vector))
           )
      (countdown (s4-1 (-> s4-0 num-tris))
        (let ((f0-7 (moving-sphere-triangle-intersect
                      arg0
                      (-> s5-0 move-dist)
                      (-> *CAM_STRING-bank* los-coll-rad2)
                      (-> (the-as (inline-array collide-cache-tri) s3-0) 0)
                      s2-0
                      s1-0
                      )
                    )
              )
          (cond
            ((or (< f0-7 0.0) (< f28-0 f0-7))
             )
            ((< f0-7 f30-0)
             (set! f30-0 f0-7)
             )
            )
          )
        (set! s3-0 (-> (the-as (inline-array collide-cache-tri) s3-0) 1))
        )
      )
    (if (= f30-0 #x40000000)
        (set! f30-0 -1.0)
        )
    f30-0
    )
  )

;; definition for function cam-los-setup-lateral
(defbehavior cam-los-setup-lateral camera-slave ((arg0 collide-los-result) (arg1 vector) (arg2 vector))
  (cond
    ((dist-info-valid? (-> arg0 straddle))
     (let ((f30-0 (-> arg0 straddle min-lat))
           (f28-0 (-> arg0 straddle max-lat))
           )
       (if (dist-info-valid? (-> arg0 cw))
           (set! f28-0 (fmax f28-0 (-> arg0 cw max-lat)))
           )
       (if (dist-info-valid? (-> arg0 ccw))
           (set! f30-0 (fmin f30-0 (- (-> arg0 ccw max-lat))))
           )
       (cond
         ((= (-> self los-state) (slave-los-state ccw))
          (if *display-cam-los-debug*
              (format *stdcon* "straddle stick ccw~%")
              )
          (vector-normalize! arg1 (+ f28-0 (-> *CAM_STRING-bank* los-coll-rad)))
          )
         ((= (-> self los-state) (slave-los-state cw))
          (if *display-cam-los-debug*
              (format *stdcon* "straddle stick cw~%")
              )
          (vector-normalize! arg1 (- f30-0 (-> *CAM_STRING-bank* los-coll-rad)))
          )
         ((and (or (< 0.01 (-> arg0 straddle max-vp)) (and (dist-info-valid? (-> arg0 ccw)) (< 0.01 (-> arg0 ccw max-vp))))
               (or (< (-> arg0 straddle min-vp) -0.01) (and (dist-info-valid? (-> arg0 ccw)) (< (-> arg0 ccw min-vp) -0.01)))
               (and (dist-info-valid? (-> arg0 cw)) (or (< (-> arg0 cw max-vp) 0.01) (< -0.01 (-> arg0 cw min-vp))))
               )
          (when (not (dist-info-valid? (-> arg0 ccw)))
            )
          (if (not (dist-info-valid? (-> arg0 cw)))
              (format #t "s diag ccw invalid cw~%")
              )
          (if *display-cam-los-debug*
              (format *stdcon* "straddle diagonal ccw~%")
              )
          (set! (-> self los-state) (slave-los-state ccw))
          (vector-normalize! arg1 (+ f28-0 (-> *CAM_STRING-bank* los-coll-rad)))
          )
         ((and (or (< 0.01 (-> arg0 straddle max-vn)) (and (dist-info-valid? (-> arg0 cw)) (< 0.01 (-> arg0 cw max-vp))))
               (or (< (-> arg0 straddle min-vn) -0.01) (and (dist-info-valid? (-> arg0 cw)) (< (-> arg0 cw min-vp) -0.01)))
               (and (dist-info-valid? (-> arg0 ccw)) (or (< (-> arg0 ccw max-vp) 0.01) (< -0.01 (-> arg0 ccw min-vp))))
               )
          (if (not (dist-info-valid? (-> arg0 ccw)))
              (format #t "s diag cw invalid ccw~%")
              )
          (when (not (dist-info-valid? (-> arg0 cw)))
            )
          (if *display-cam-los-debug*
              (format *stdcon* "straddle diagonal cw~%")
              )
          (set! (-> self los-state) (slave-los-state cw))
          (vector-normalize! arg1 (- f30-0 (-> *CAM_STRING-bank* los-coll-rad)))
          )
         ((< f28-0 (- f30-0))
          (if *display-cam-los-debug*
              (format *stdcon* "straddle ccw~%")
              )
          (set! (-> self los-state) (slave-los-state ccw))
          (vector-normalize! arg1 (+ f28-0 (-> *CAM_STRING-bank* los-coll-rad)))
          )
         (else
           (if *display-cam-los-debug*
               (format *stdcon* "straddle cw~%")
               )
           (set! (-> self los-state) (slave-los-state cw))
           (vector-normalize! arg1 (- f30-0 (-> *CAM_STRING-bank* los-coll-rad)))
           )
         )
       )
     )
    ((and (dist-info-valid? (-> arg0 cw))
          (dist-info-valid? (-> arg0 ccw))
          (< 0.01 (-> arg0 ccw max-vp))
          (< (-> arg0 ccw min-vp) -0.01)
          (or (< (-> arg0 cw max-vp) 0.01) (< -0.01 (-> arg0 cw min-vp)))
          )
     (if *display-cam-los-debug*
         (format *stdcon* "diagonal ccw~%")
         )
     (set! (-> self los-state) (slave-los-state ccw))
     (vector-normalize! arg1 (- (-> *CAM_STRING-bank* los-coll-rad) (-> arg0 ccw min-lat)))
     )
    ((and (dist-info-valid? (-> arg0 cw))
          (dist-info-valid? (-> arg0 ccw))
          (< 0.01 (-> arg0 cw max-vp))
          (< (-> arg0 cw min-vp) -0.01)
          (or (< (-> arg0 ccw max-vp) 0.01) (< -0.01 (-> arg0 ccw min-vp)))
          )
     (if *display-cam-los-debug*
         (format *stdcon* "diagonal cw~%")
         )
     (set! (-> self los-state) (slave-los-state cw))
     (vector-normalize! arg1 (- (-> arg0 cw min-lat) (-> *CAM_STRING-bank* los-coll-rad)))
     )
    ((and (dist-info-valid? (-> arg0 cw)) (dist-info-valid? (-> arg0 ccw)))
     (set! (-> self los-state) (slave-los-state between))
     (vector-normalize! arg1 0.0001)
     )
    ((dist-info-valid? (-> arg0 cw))
     (if *display-cam-los-debug*
         (format *stdcon* "regular cw~%")
         )
     (set! (-> self los-state) (slave-los-state cw))
     (vector-normalize! arg1 (- (-> arg0 cw min-lat) (-> *CAM_STRING-bank* los-coll-rad)))
     )
    ((dist-info-valid? (-> arg0 ccw))
     (if *display-cam-los-debug*
         (format *stdcon* "regular ccw~%")
         )
     (set! (-> self los-state) (slave-los-state ccw))
     (vector-normalize! arg1 (- (-> *CAM_STRING-bank* los-coll-rad) (-> arg0 ccw min-lat)))
     )
    (else
      (set! (-> self los-state) (slave-los-state none))
      (vector-reset! arg1)
      )
    )
  (cond
    ((= (vector-length arg1) 0.0)
     (set! (-> arg0 lateral-valid) #f)
     #f
     )
    (else
      (vector-! (-> arg0 lateral) arg1 arg2)
      (vector-normalize! (-> arg0 lateral) 1.0)
      (let ((v0-44 #t))
        (set! (-> arg0 lateral-valid) v0-44)
        v0-44
        )
      )
    )
  )

;; definition for function cam-los-collide
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs symbol.
;; ERROR: Unsupported inline assembly instruction kind - [mula.s f2, f5]
;; ERROR: Unsupported inline assembly instruction kind - [madda.s f3, f6]
;; ERROR: Unsupported inline assembly instruction kind - [madd.s f2, f4, f7]
(defbehavior cam-los-collide camera-slave ((arg0 vector) (arg1 vector) (arg2 collide-los-result) (arg3 pat-surface))
  (local-vars
    (s1-3 int)
    (s2-2 int)
    (f2-1 float)
    (sv-768 pat-surface)
    (sv-784 vector)
    (sv-800 vector)
    (sv-816 int)
    (sv-832 vector)
    )
  (set! sv-768 arg3)
  (dist-info-init (-> arg2 cw))
  (dist-info-init (-> arg2 ccw))
  (dist-info-init (-> arg2 straddle))
  (let ((s1-0 (new 'stack-no-clear 'collide-query))
        (s4-0 (new 'stack-no-clear 'vector))
        (s2-0 (new 'stack-no-clear 'vector))
        )
    (vector-normalize-copy! s2-0 arg1 1.0)
    (vector-flatten! s4-0 arg1 (-> *camera* local-down))
    (let ((s0-0 *collide-cache*)
          (f26-0 (vector-length arg1))
          (f30-0 (vector-normalize-ret-len! s4-0 1.0))
          )
      (set! (-> s1-0 start-pos quad) (-> arg0 quad))
      (set! (-> s1-0 move-dist quad) (-> arg1 quad))
      (let ((v1-5 s1-0))
        (set! (-> v1-5 radius) (-> *CAM_STRING-bank* los-coll-rad))
        (set! (-> v1-5 collide-with) (collide-spec backgnd obstacle hit-by-others-list camera-blocker pusher))
        (set! (-> v1-5 ignore-process0) #f)
        (set! (-> v1-5 ignore-process1) #f)
        (set! (-> v1-5 ignore-pat) sv-768)
        (set! (-> v1-5 action-mask) (the-as uint 1))
        )
      ((method-of-object s0-0 collide-cache-method-13))
      (let ((s1-1 (the-as object (-> s0-0 tris)))
            (f28-0 (/ 2048.0 f26-0))
            (f26-1 (/ (+ -8192.0 f26-0) f26-0))
            )
        (if (< f26-1 0.0)
            (set! f26-1 0.0)
            )
        (if (< 1.0 f28-0)
            (set! f28-0 1.0)
            )
        (countdown (s0-1 (-> s0-0 num-tris))
          (set! sv-800 (new 'stack-no-clear 'vector))
          (set! sv-784 (new 'stack-no-clear 'vector))
          (let ((f0-7 (moving-sphere-triangle-intersect
                        arg0
                        arg1
                        (-> *CAM_STRING-bank* los-coll-rad)
                        (-> (the-as (inline-array collide-cache-tri) s1-1) 0)
                        sv-800
                        sv-784
                        )
                      )
                )
            (cond
              ((or (< f0-7 0.0) (< 1.0 f0-7))
               )
              ((let ((f1-2 0.0))
                 (let* ((v1-23 arg1)
                        (f2-0 (-> v1-23 x))
                        (f3-0 (-> v1-23 y))
                        (f4-0 (-> v1-23 z))
                        (f5-0 (-> sv-784 x))
                        (f6-0 (-> sv-784 y))
                        (f7-0 (-> sv-784 z))
                        )
                   (.mula.s f2-0 f5-0)
                   (.madda.s f3-0 f6-0)
                   (.madd.s f2-1 f4-0 f7-0)
                   )
                 (< f1-2 f2-1)
                 )
               (when (< f28-0 f0-7)
                 (let* ((t1-1 (new 'stack-no-clear 'vector))
                        (t0-1 (new 'stack-no-clear 'vector))
                        (f24-0 (moving-sphere-triangle-intersect
                                 arg0
                                 arg1
                                 (-> *CAM_STRING-bank* los-coll-rad2)
                                 (-> (the-as (inline-array collide-cache-tri) s1-1) 0)
                                 t0-1
                                 t1-1
                                 )
                               )
                        )
                   (los-cw-ccw (the-as (inline-array collide-cache-tri) s1-1) s2-0 s4-0 f30-0 arg2 sv-800 f24-0)
                   (when *debug-segment*
                     (cond
                       ((= f24-0 -859915232)
                        (let ((t9-10 cam-debug-add-los-tri)
                              (a0-20 s1-1)
                              (a2-6 (new 'static 'vector :x (the-as float #x80) :w (the-as float #x80)))
                              )
                          (t9-10 (the-as (inline-array collide-cache-tri) a0-20) sv-800 a2-6)
                          )
                        )
                       (else
                         (cam-debug-add-los-tri
                           (the-as (inline-array collide-cache-tri) s1-1)
                           sv-800
                           (new 'static 'vector :x (the-as float #x80) :y (the-as float #x80) :w (the-as float #x80))
                           )
                         )
                       )
                     )
                   )
                 )
               )
              ((< f0-7 f26-1)
               (let* ((t1-3 (new 'stack-no-clear 'vector))
                      (t0-3 (new 'stack-no-clear 'vector))
                      (f24-1 (moving-sphere-triangle-intersect
                               arg0
                               arg1
                               (-> *CAM_STRING-bank* los-coll-rad2)
                               (-> (the-as (inline-array collide-cache-tri) s1-1) 0)
                               t0-3
                               t1-3
                               )
                             )
                      )
                 (los-cw-ccw (the-as (inline-array collide-cache-tri) s1-1) s2-0 s4-0 f30-0 arg2 sv-800 f24-1)
                 (when *debug-segment*
                   (if (= f24-1 -859915232)
                       (cam-debug-add-los-tri
                         (the-as (inline-array collide-cache-tri) s1-1)
                         sv-800
                         (new 'static 'vector :y (the-as float #x80) :w (the-as float #x80))
                         )
                       (cam-debug-add-los-tri
                         (the-as (inline-array collide-cache-tri) s1-1)
                         sv-800
                         (new 'static 'vector :z (the-as float #x80) :w (the-as float #x80))
                         )
                       )
                   )
                 )
               )
              )
            )
          (set! s1-1 (-> (the-as (inline-array collide-cache-tri) s1-1) 1))
          )
        )
      )
    )
  (let ((s4-1 (new 'stack-no-clear 'vector)))
    0.0
    (vector-cross! s4-1 arg1 (-> *camera* local-down))
    (cond
      ((!= (-> self los-tgt-spline-pt-incarnation)
           (-> *camera* target-spline point (-> self los-tgt-spline-pt) incarnation)
           )
       (when *display-cam-los-debug*
         (format *stdcon* "emergency point jump~%")
         (format 0 "emergency point jump~%")
         )
       (set! (-> self los-tgt-spline-pt) (-> *camera* target-spline used-point))
       (set! (-> self los-tgt-spline-pt-incarnation)
             (-> *camera* target-spline point (-> self los-tgt-spline-pt) incarnation)
             )
       (logior! (-> self options) 4096)
       (set! (-> self good-point quad)
             (-> *camera* target-spline point (-> *camera* target-spline used-point) position quad)
             )
       (set! (-> self los-last-pos quad) (-> self good-point quad))
       (when *debug-segment*
         (let ((a1-22 (new 'stack-no-clear 'vector)))
           (vector-! a1-22 (-> self good-point) (-> self string-trans))
           (cam-collision-record-save (-> self string-trans) a1-22 -3 'jump self)
           )
         )
       (set! (-> self desired-pos quad) (-> self good-point quad))
       (set! (-> self string-trans quad) (-> self good-point quad))
       (vector-! (-> self view-flat) (-> self string-trans) (-> *camera* tpos-curr-adj))
       (vector-flatten! (-> self view-flat) (-> self view-flat) (-> *camera* local-down))
       (vector-reset! (-> self velocity))
       (let ((f0-11 (vector-length (-> self view-flat))))
         (if (< f0-11 (-> self min-z-override))
             (set! (-> self min-z-override) f0-11)
             )
         )
       )
      (else
        (let ((f30-1
                (cam-los-spline-collide
                  (the-as vector (+ (the-as uint (-> *camera* target-spline)) (* 48 (-> *camera* target-spline end-point))))
                  arg0
                  (the-as pat-surface (camera-master-method-16 *camera* #t))
                  )
                )
              )
          (cond
            ((< f30-1 0.0)
             (if *display-cam-los-debug*
                 (format *stdcon* "good ~f~%" f30-1)
                 )
             (set! (-> self los-tgt-spline-pt) (-> *camera* target-spline end-point))
             (set! (-> self los-tgt-spline-pt-incarnation)
                   (-> *camera* target-spline point (-> self los-tgt-spline-pt) incarnation)
                   )
             (set! (-> self los-last-pos quad) (-> arg0 quad))
             )
            ((begin
               (if *display-cam-los-debug*
                   (format
                     *stdcon*
                     "looking vel ~M u ~f pt ~D"
                     (vector-length (-> self velocity))
                     f30-1
                     (-> self los-tgt-spline-pt)
                     )
                   )
               (set! s2-2 (-> self los-tgt-spline-pt))
               (set! s1-3 -134250495)
               (while (and (!= s2-2 -134250495) (begin
                                                  (let ((s0-3 cam-los-spline-collide))
                                                    (set! sv-816 (+ (the-as uint (-> *camera* target-spline)) (* 48 s2-2)))
                                                    (set! sv-832 arg0)
                                                    (let ((a2-21 (camera-master-method-16 *camera* #t)))
                                                      (set! f30-1 (s0-3 (the-as vector sv-816) sv-832 (the-as pat-surface a2-21)))
                                                      )
                                                    )
                                                  (< f30-1 0.0)
                                                  )
                           )
                 (set! s1-3 s2-2)
                 (set! s2-2 (-> *camera* target-spline point s2-2 next))
                 )
               (and (= s2-2 (-> *camera* target-spline used-point))
                    (!= (-> *camera* target-spline point s2-2 next) -134250495)
                    )
               )
             (when *display-cam-los-debug*
               (format 0 "looking at used point~%")
               (format *stdcon* " at used point~%")
               )
             (set! (-> self los-tgt-spline-pt) (-> *camera* target-spline point s2-2 next))
             (set! (-> self los-tgt-spline-pt-incarnation)
                   (-> *camera* target-spline point (-> self los-tgt-spline-pt) incarnation)
                   )
             (logior! (-> self options) 4096)
             (set! (-> self good-point quad) (-> *camera* target-spline point s2-2 position quad))
             (set! (-> self los-last-pos quad) (-> self good-point quad))
             (when *debug-segment*
               (let ((a1-40 (new 'stack-no-clear 'vector)))
                 (vector-! a1-40 (-> self good-point) (-> self string-trans))
                 (cam-collision-record-save (-> self string-trans) a1-40 -3 'jump self)
                 )
               )
             (set! (-> self desired-pos quad) (-> self good-point quad))
             (set! (-> self string-trans quad) (-> self good-point quad))
             (vector-! (-> self view-flat) (-> self string-trans) (-> *camera* tpos-curr-adj))
             (vector-flatten! (-> self view-flat) (-> self view-flat) (-> *camera* local-down))
             (vector-reset! (-> self velocity))
             (let ((f0-14 (vector-length (-> self view-flat))))
               (if (< f0-14 (-> self min-z-override))
                   (set! (-> self min-z-override) f0-14)
                   )
               )
             )
            ((!= s1-3 -134250495)
             (if *display-cam-los-debug*
                 (format *stdcon* " ok~%")
                 )
             (set! (-> self los-tgt-spline-pt) s1-3)
             (set! (-> self los-tgt-spline-pt-incarnation)
                   (-> *camera* target-spline point (-> self los-tgt-spline-pt) incarnation)
                   )
             (set! (-> self los-last-pos quad) (-> arg0 quad))
             )
            (else
              (if *display-cam-los-debug*
                  (format *stdcon* "~%failed u ~f cur ~D seen ~D tgt-pt ~D~%" f30-1 s2-2 s1-3 (-> self los-tgt-spline-pt))
                  )
              (let ((s3-1 (new 'stack-no-clear 'vector)))
                0.0
                (vector-!
                  s3-1
                  (-> self los-last-pos)
                  (the-as vector (+ (the-as uint (-> *camera* target-spline)) (* 48 (-> self los-tgt-spline-pt))))
                  )
                (let ((f28-1 (vector-length s3-1)))
                  (if (= f28-1 0.0)
                      (set! f28-1 0.4096)
                      )
                  (let ((f30-2 (cond
                                 ((and (= (-> self string-vel-dir) 6)
                                       (< (-> *CAMERA-bank* min-detectable-velocity) (vector-length (-> self velocity)))
                                       )
                                  (fmin 1.0 (+ 0.001 f30-1))
                                  )
                                 ((= (-> self string-vel-dir) 6)
                                  (fmin 0.9999 f30-1)
                                  )
                                 (else
                                   (fmax 0.001 (+ -0.001 f30-1))
                                   )
                                 )
                               )
                        )
                    (let ((s2-3 (new 'stack-no-clear 'vector)))
                      (vector-!
                        s2-3
                        (-> *camera* tpos-curr-adj)
                        (the-as vector (+ (the-as uint (-> *camera* target-spline)) (* 48 (-> self los-tgt-spline-pt))))
                        )
                      (vector-flatten! s2-3 s2-3 (-> *camera* local-down))
                      (cond
                        ((and (< (fabs (- (-> self desired-pos y) (-> self trans y))) 8192.0)
                              (< f28-1 (+ 1024.0 (-> self string-min-val z)))
                              (< (vector-length s2-3) 8192.0)
                              )
                         (set! f30-2 0.0)
                         )
                        ((< f28-1 (+ 1024.0 (-> self string-min-val z)))
                         )
                        ((< (* f28-1 f30-2) (-> self string-min-val z))
                         (set! f30-2 (/ (-> self string-min-val z) f28-1))
                         )
                        )
                      )
                    (when (< 0.0 f30-2)
                      (vector-! s3-1 (-> *camera* tpos-curr) (-> *camera* tpos-old))
                      (vector-!
                        (-> self good-point)
                        (-> self los-last-pos)
                        (the-as vector (+ (the-as uint (-> *camera* target-spline)) (* 48 (-> self los-tgt-spline-pt))))
                        )
                      (vector-float*! (-> self good-point) (-> self good-point) f30-2)
                      (vector+!
                        (-> self good-point)
                        (-> self good-point)
                        (the-as vector (+ (the-as uint (-> *camera* target-spline)) (* 48 (-> self los-tgt-spline-pt))))
                        )
                      (set! (-> self los-last-pos quad) (-> self good-point quad))
                      (when *display-cam-los-debug*
                        (format 0 "going because u(~f) > 0 frame ~D~%" f30-2 (-> self clock frame-counter))
                        (format *stdcon* " going because u(~f) > 0 frame ~D~%" f30-2 (-> self clock frame-counter))
                        )
                      (logior! (-> self options) 4096)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    (if *display-cam-los-debug*
        (format
          *stdcon*
          "los-last ~M ~M ~M~%"
          (-> self los-last-pos x)
          (-> self los-last-pos y)
          (-> self los-last-pos z)
          )
        )
    (cam-los-setup-lateral arg2 s4-1 arg1)
    )
  (cond
    ((zero? (logand (-> self options) 1024))
     )
    ((= (-> self string-vel-dir) 5)
     )
    ((and (= (-> self string-vel-dir) 2) (= (-> self los-state) (slave-los-state cw)))
     )
    ((and (= (-> self string-vel-dir) 1) (= (-> self los-state) (slave-los-state ccw)))
     )
    )
  (when *display-cam-los-debug*
    (format *stdcon* "state ~S" (slave-los-state->string (-> self los-state)))
    (cond
      ((zero? (-> self string-vel-dir))
       (format *stdcon* " vzero")
       )
      ((= (-> self string-vel-dir) 2)
       (format *stdcon* " vcw")
       )
      ((= (-> self string-vel-dir) 1)
       (format *stdcon* " vccw")
       )
      ((= (-> self string-vel-dir) 3)
       (format *stdcon* " up")
       )
      ((= (-> self string-vel-dir) 4)
       (format *stdcon* " down")
       )
      ((= (-> self string-vel-dir) 6)
       (format *stdcon* " long")
       )
      ((= (-> self string-vel-dir) 5)
       (format *stdcon* " short")
       )
      )
    (format *stdcon* "~%")
    )
  (when *display-cam-los-info*
    (dist-info-print (-> arg2 cw) "cw   ")
    (dist-info-print (-> arg2 ccw) "ccw  ")
    (dist-info-print (-> arg2 straddle) "strdl")
    )
  (the-as symbol 0)
  )

;; definition for function cam-string-follow
;; INFO: Used lq/sq
(defbehavior cam-string-follow camera-slave ()
  (let ((f30-0 (vector-length (-> self view-flat))))
    (cond
      ((logtest? (-> self options) #x8000)
       (let ((gp-0 (new 'stack-no-clear 'vector)))
         (let ((s5-0 (new 'stack-no-clear 'vector)))
           (vector-cross! s5-0 (-> self view-flat) (-> *camera* local-down))
           (vector-normalize! s5-0 1.0)
           (vector-! gp-0 (-> *camera* tpos-curr-adj) (-> *camera* tpos-old-adj))
           (vector-flatten! gp-0 gp-0 s5-0)
           )
         (if (< (vector-dot gp-0 (-> self view-flat)) 0.0)
             (vector-! (-> self view-flat) (-> self view-flat) gp-0)
             )
         )
       )
      (else
        (let ((v1-10 (new 'stack-no-clear 'vector)))
          (vector-! v1-10 (-> *camera* tpos-curr-adj) (-> *camera* tpos-old-adj))
          (vector-! (-> self view-flat) (-> self view-flat) v1-10)
          )
        )
      )
    (vector-flatten! (-> self view-flat) (-> self view-flat) (-> *camera* local-down))
    (let* ((f28-0 (vector-length (-> self view-flat)))
           (f0-3 (fmin (-> *camera* string-push-z) (-> self view-off z)))
           (f26-0 (-> self view-off z))
           (f0-4 (fmin f0-3 (-> self min-z-override)))
           )
      (when (logtest? (cam-slave-options WIDE_FOV) (-> *camera* settings slave-options))
        (let ((v1-18 (new-stack-vector0)))
          0.0
          (vector-! v1-18 (-> *camera* tpos-curr-adj) (-> *camera* tpos-old-adj))
          (let ((f0-6 (vector-length v1-18)))
            (set! f0-4 (lerp-clamp 28672.0 32768.0 (parameter-ease-sin-clamp (* 0.00081380206 (+ -409.6 f0-6)))))
            )
          )
        (set! f26-0 f0-4)
        )
      (set! (-> self fov) (-> *camera* settings fov))
      (cond
        ((< f28-0 f0-4)
         (vector-normalize! (-> self view-flat) f0-4)
         )
        ((and (< f30-0 f28-0)
              (or (= (-> self los-state) (slave-los-state ccw)) (= (-> self los-state) (slave-los-state cw)))
              )
         (vector-normalize! (-> self view-flat) f30-0)
         )
        ((< f26-0 f28-0)
         (vector-normalize! (-> self view-flat) f26-0)
         (set! (-> self min-z-override) f26-0)
         f26-0
         )
        (else
          (set! (-> self min-z-override) f28-0)
          f28-0
          )
        )
      )
    )
  )

;; definition for function cam-string-line-of-sight
;; ERROR: function has no type analysis. Cannot decompile.

;; definition for function cam-dist-analog-input
(defun cam-dist-analog-input ((arg0 int) (arg1 float))
  (let ((f0-0 (the-as number 0.0)))
    (cond
      ((< arg0 28)
       (set! f0-0 (- (fmin arg1 (* 0.083333336 (- 28.0 (the float arg0)) arg1))))
       )
      ((< 160 arg0)
       (set! f0-0 (fmin arg1 (* 0.0125 (+ -160.0 (the float arg0)) arg1)))
       )
      )
    (the-as float f0-0)
    )
  )

;; definition for function cam-string-joystick
;; INFO: Used lq/sq
;; ERROR: failed type prop at 785: Could not figure out load: (set! v1 (l.wu (+ v1 124)))
;; INFO: Return type mismatch symbol vs vector.
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
(defbehavior cam-string-joystick camera-slave ()
  (local-vars
    (v0-0 vector)
    (v0-1 float)
    (v0-2 vector)
    (v0-3 float)
    (v0-4 float)
    (v0-5 vector)
    (v0-6 symbol)
    (v0-7 float)
    (v0-8 float)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 none)
    (v0-13 none)
    (v0-14 float)
    (v0-15 float)
    (v0-16 float)
    (v0-17 none)
    (v0-18 vector)
    (v0-19 none)
    (v0-20 symbol)
    (v0-21 vector)
    (v0-22 none)
    (v0-23 none)
    (v0-24 none)
    (v0-25 none)
    (v0-26 none)
    (v0-27 none)
    (v0-28 none)
    (v0-29 none)
    (v0-30 none)
    (v0-31 none)
    (v0-32 none)
    (v0-33 vector)
    (v0-34 vector)
    (v0-35 vector)
    (v0-36 float)
    (v0-37 matrix)
    (v0-38 vector)
    (v1-0 int)
    (v1-1 uint)
    (v1-2 basic)
    (v1-4 int)
    (v1-5 matrix)
    (v1-6 camera-master)
    (v1-7 vector)
    (v1-8 float)
    (v1-9 none)
    (v1-10 float)
    (v1-11 vector)
    (v1-12 float)
    (v1-13 int)
    (v1-15 int)
    (v1-17 camera-master)
    (v1-18 vector)
    (v1-19 float)
    (v1-20 float)
    (v1-23 cpad-list)
    (v1-24 cpad-info)
    (v1-25 vector)
    (v1-26 float)
    (v1-27 int)
    (v1-28 uint)
    (v1-31 basic)
    (v1-33 int)
    (v1-35 camera-master)
    (v1-36 symbol)
    (v1-37 symbol)
    (v1-38 clock)
    (v1-39 time-frame)
    (v1-40 time-frame)
    (v1-42 int)
    (v1-44 int)
    (v1-45 uint)
    (v1-47 cpad-list)
    (v1-48 cpad-info)
    (v1-49 uint)
    (v1-50 symbol)
    (v1-51 int)
    (v1-52 symbol)
    (v1-53 cpad-list)
    (v1-54 cpad-info)
    (v1-55 uint)
    (v1-56 int)
    (v1-60 uint)
    (v1-61 uint)
    (v1-62 int)
    (v1-64 vector)
    (v1-65 float)
    (v1-66 int)
    (v1-67 int)
    (v1-71 none)
    (v1-72 float)
    (v1-73 camera-master)
    (v1-74 cam-setting-data)
    (v1-75 camera-master)
    (v1-76 cam-setting-data)
    (v1-78 camera-master)
    (v1-79 cam-setting-data)
    (v1-80 cam-slave-options)
    (v1-81 cam-slave-options)
    (v1-84 none)
    (v1-85 none)
    (v1-86 none)
    (v1-87 none)
    (v1-90 none)
    (v1-91 none)
    (v1-94 none)
    (v1-95 none)
    (v1-96 none)
    (v1-99 none)
    (v1-100 none)
    (v1-101 none)
    (v1-102 none)
    (v1-103 none)
    (v1-106 none)
    (v1-107 none)
    (v1-108 none)
    (v1-110 none)
    (v1-111 none)
    (v1-112 none)
    (v1-113 none)
    (v1-114 none)
    (v1-115 none)
    (v1-117 none)
    (v1-118 none)
    (v1-119 none)
    (v1-121 none)
    (v1-122 none)
    (v1-123 none)
    (v1-124 none)
    (v1-125 none)
    (v1-126 none)
    (v1-128 none)
    (v1-129 none)
    (v1-131 none)
    (v1-132 none)
    (v1-133 none)
    (v1-134 none)
    (v1-135 none)
    (v1-136 none)
    (v1-137 none)
    (v1-138 none)
    (v1-139 none)
    (v1-140 none)
    (v1-141 none)
    (v1-143 none)
    (v1-144 none)
    (v1-146 none)
    (v1-147 none)
    (v1-149 none)
    (v1-151 none)
    (v1-154 none)
    (v1-157 none)
    (v1-159 int)
    (v1-160 uint)
    (v1-164 camera-master)
    (v1-165 symbol)
    (v1-168 camera-master)
    (v1-169 cam-setting-data)
    (v1-170 cam-master-options)
    (v1-171 cam-master-options)
    (v1-173 cpad-list)
    (v1-174 cpad-info)
    (v1-175 int)
    (v1-176 clock)
    (v1-177 int)
    (v1-178 uint)
    (v1-179 int)
    (v1-180 int)
    (v1-181 uint)
    (v1-184 setting-control)
    (v1-185 symbol)
    (v1-188 basic)
    (v1-190 int)
    (v1-191 clock)
    (v1-193 int)
    (v1-194 uint)
    (v1-196 camera-master)
    (v1-197 cam-setting-data)
    (v1-198 cam-master-options)
    (v1-199 cam-master-options)
    (v1-201 camera-bank)
    (v1-202 uint)
    (v1-203 uint)
    (v1-204 int)
    (v1-205 cpad-info)
    (v1-206 pad-buttons)
    (v1-207 pad-buttons)
    (v1-209 int)
    (v1-210 clock)
    (v1-211 camera-bank)
    (v1-212 uint)
    (v1-213 uint)
    (v1-214 int)
    (v1-215 cpad-info)
    (v1-216 int)
    (v1-217 clock)
    (v1-219 camera-master)
    (v1-220 cam-setting-data)
    (v1-221 cam-master-options)
    (v1-222 cam-master-options)
    (v1-224 camera-bank)
    (v1-225 uint)
    (v1-226 uint)
    (v1-227 int)
    (v1-228 cpad-info)
    (v1-229 pad-buttons)
    (v1-230 pad-buttons)
    (v1-232 int)
    (v1-233 clock)
    (v1-234 camera-bank)
    (v1-235 uint)
    (v1-236 uint)
    (v1-237 int)
    (v1-238 cpad-info)
    (v1-239 int)
    (v1-240 clock)
    (v1-242 slave-los-state)
    (v1-243 slave-los-state)
    (v1-244 symbol)
    (v1-246 vector)
    (v1-247 float)
    (v1-248 int)
    (v1-249 int)
    (v1-250 clock)
    (v1-252 none)
    (v1-253 none)
    (v1-254 none)
    (v1-256 none)
    (v1-257 none)
    (v1-258 none)
    (v1-259 none)
    (v1-260 none)
    (v1-262 uint)
    (v1-263 uint)
    (v1-264 camera-master)
    (v1-265 int)
    (v1-266 uint)
    (v1-268 type)
    (v1-270 int)
    (v1-271 uint)
    (v1-272 uint)
    (v1-273 uint)
    (v1-274 process)
    (v1-275 camera-master)
    (v1-276 cam-setting-data)
    (v1-277 handle)
    (v1-278 int)
    (v1-280 camera-master)
    (v1-281 cam-setting-data)
    (v1-282 handle)
    (v1-283 process)
    (v1-284 int)
    (v1-285 none)
    (v1-286 none)
    (v1-287 none)
    (v1-288 none)
    (v1-289 none)
    (v1-291 none)
    (v1-292 none)
    (v1-293 none)
    (v1-294 none)
    (v1-296 none)
    (v1-297 none)
    (v1-299 none)
    (v1-300 none)
    (v1-301 none)
    (v1-302 none)
    (v1-303 none)
    (v1-305 none)
    (v1-307 none)
    (v1-308 none)
    (v1-310 none)
    (v1-311 none)
    (v1-312 camera-master)
    (v1-313 cam-setting-data)
    (v1-314 cam-slave-options)
    (v1-315 cam-slave-options)
    (v1-317 camera-master)
    (v1-318 camera-master)
    (v1-319 vector)
    (v1-320 symbol)
    (v1-321 symbol)
    (v1-322 int)
    (v1-324 int)
    (v1-325 int)
    (v1-327 none)
    (v1-328 none)
    (v1-329 none)
    (v1-330 none)
    (v1-332 none)
    (v1-333 none)
    (v1-335 none)
    (v1-336 none)
    (v1-338 none)
    (v1-339 none)
    (a0-0 uint)
    (a0-1 none)
    (a0-2 none)
    (a0-3 float)
    (a0-4 vector)
    (a0-5 vector)
    (a0-6 float)
    (a0-7 float)
    (a0-8 vector)
    (a0-9 uint)
    (a0-10 uint)
    (a0-11 camera-master)
    (a0-12 time-frame)
    (a0-13 uint)
    (a0-14 symbol)
    (a0-15 cpad-list)
    (a0-16 cpad-info)
    (a0-17 uint)
    (a0-18 float)
    (a0-19 vector)
    (a0-20 camera-master)
    (a0-21 vector)
    (a0-22 none)
    (a0-23 none)
    (a0-24 none)
    (a0-25 none)
    (a0-26 none)
    (a0-31 uint)
    (a0-33 uint)
    (a0-34 uint)
    (a0-35 uint)
    (a0-36 cpad-list)
    (a0-37 cpad-list)
    (a0-38 uint)
    (a0-39 cpad-list)
    (a0-40 cpad-list)
    (a0-41 uint)
    (a0-42 symbol)
    (a0-43 none)
    (a0-44 matrix)
    (a0-45 vector)
    (a0-46 uint)
    (a0-47 setting-control)
    (a0-48 uint)
    (a0-49 int)
    (a0-50 (pointer process))
    (a0-51 process)
    (a0-52 process)
    (a0-53 vector)
    (a0-54 int)
    (a0-55 (pointer process))
    (a0-56 process)
    (a0-58 int)
    (a0-59 uint)
    (a0-60 matrix)
    (a0-61 none)
    (a0-64 none)
    (a0-68 none)
    (a0-69 none)
    (a0-70 none)
    (a0-71 none)
    (a0-72 none)
    (a0-74 none)
    (a0-75 none)
    (a0-76 vector)
    (a0-77 vector)
    (a0-78 vector)
    (a0-79 vector)
    (a0-80 float)
    (a0-81 matrix)
    (a0-82 vector)
    (a0-83 none)
    (a0-84 none)
    (a0-85 none)
    (a0-86 none)
    (a1-0 vector)
    (a1-1 vector)
    (a1-2 float)
    (a1-3 float)
    (a1-4 float)
    (a1-5 float)
    (a1-6 float)
    (a1-7 none)
    (a1-8 vector)
    (a1-14 int)
    (a1-15 float)
    (a1-16 float)
    (a1-17 vector)
    (a1-18 vector)
    (a1-19 symbol)
    (a1-20 int)
    (a1-21 type)
    (a1-22 vector)
    (a1-23 int)
    (a1-24 uint)
    (a1-25 none)
    (a1-26 none)
    (a1-27 none)
    (a1-29 none)
    (a1-30 none)
    (a1-31 none)
    (a1-32 none)
    (a1-34 none)
    (a1-35 vector)
    (a1-36 (pointer uint8))
    (a1-37 float)
    (a1-38 vector)
    (a1-39 vector)
    (a2-0 vector)
    (a2-1 none)
    (a2-2 float)
    (a2-3 float)
    (a2-4 float)
    (a2-5 camera-master)
    (a2-6 vector)
    (a2-10 int)
    (a2-11 float)
    (a2-12 float)
    (a2-13 float)
    (a2-14 matrix)
    (a2-15 symbol)
    (a2-16 float)
    (a2-19 none)
    (a2-20 none)
    (a2-21 none)
    (a2-22 none)
    (a2-25 float)
    (a2-26 vector)
    (a2-27 vector)
    (a2-28 matrix)
    (a3-0 float)
    (a3-1 int)
    (a3-2 float)
    (a3-3 float)
    (a3-4 none)
    (a3-5 float)
    (t0-0 uint)
    (t0-1 float)
    (t0-2 float)
    (t0-3 float)
    (s3-0 process)
    (s3-1 none)
    (s4-0 matrix)
    (s5-0 none)
    (s5-1 none)
    (s5-2 none)
    (s5-3 vector)
    (t9-0 (function vector vector vector vector))
    (t9-1 (function float float))
    (t9-2 (function vector vector vector float vector))
    (t9-3 (function float float float float))
    (t9-4 (function float float float float))
    (t9-5 (function vector float vector))
    (t9-6 (function int float float))
    (t9-7 (function float float float float))
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (t9-12 none)
    (t9-13 (function int float float float float float))
    (t9-14 (function int float float float float float))
    (t9-15 (function int float float float float float))
    (t9-16 (function matrix vector float none))
    (t9-17 (function vector vector matrix vector))
    (t9-18 (function setting-control engine-pers object none))
    (t9-19 (function object type symbol))
    (t9-20 (function vector vector float vector))
    (t9-21 (function matrix quaternion matrix))
    (t9-22 none)
    (t9-23 none)
    (t9-24 none)
    (t9-25 none)
    (t9-26 none)
    (t9-27 none)
    (t9-28 none)
    (t9-29 none)
    (t9-30 none)
    (t9-31 none)
    (t9-32 (function vector vector float vector))
    (t9-33 (function vector vector vector vector))
    (t9-34 (function vector float vector))
    (t9-35 (function float float))
    (t9-36 (function matrix vector vector float matrix))
    (t9-37 (function vector vector matrix vector))
    (gp-0 vector)
    (gp-1 none)
    (gp-2 none)
    (gp-3 vector)
    (sp-0 none)
    (f0-0 int)
    (f0-1 float)
    (f0-2 float)
    (f0-3 float)
    (f0-4 float)
    (f0-5 float)
    (f0-6 float)
    (f0-7 float)
    (f0-8 float)
    (f0-9 float)
    (f0-10 float)
    (f0-11 float)
    (f0-12 float)
    (f0-13 float)
    (f0-14 float)
    (f0-15 float)
    (f0-16 float)
    (f0-17 float)
    (f0-18 float)
    (f0-19 float)
    (f0-20 float)
    (f0-21 float)
    (f0-22 float)
    (f0-23 float)
    (f0-24 float)
    (f0-25 float)
    (f0-26 float)
    (f0-27 float)
    (f0-28 float)
    (f0-29 float)
    (f0-30 float)
    (f0-31 float)
    (f0-32 float)
    (f0-33 float)
    (f0-34 float)
    (f0-35 float)
    (f0-36 float)
    (f0-37 none)
    (f0-38 none)
    (f0-39 none)
    (f0-40 none)
    (f0-41 none)
    (f0-42 none)
    (f0-43 none)
    (f0-44 none)
    (f0-45 none)
    (f0-46 none)
    (f0-47 none)
    (f0-48 none)
    (f0-49 none)
    (f0-50 none)
    (f0-51 none)
    (f0-52 none)
    (f0-53 none)
    (f0-54 none)
    (f0-55 none)
    (f0-56 none)
    (f0-57 none)
    (f0-58 none)
    (f0-59 none)
    (f0-60 none)
    (f0-61 none)
    (f0-62 none)
    (f0-63 none)
    (f0-64 none)
    (f0-65 float)
    (f0-66 float)
    (f0-67 float)
    (f0-68 float)
    (f0-69 float)
    (f0-70 float)
    (f0-71 float)
    (f0-72 float)
    (f0-73 float)
    (f0-74 float)
    (f0-75 float)
    (f0-76 float)
    (f0-77 float)
    (f0-78 float)
    (f0-79 float)
    (f0-80 float)
    (f0-81 float)
    (f0-82 float)
    (f0-83 float)
    (f0-84 float)
    (f0-85 float)
    (f0-86 none)
    (f0-87 none)
    (f0-88 none)
    (f0-89 none)
    (f0-90 none)
    (f0-91 none)
    (f0-92 float)
    (f0-93 none)
    (f0-94 none)
    (f0-95 none)
    (f0-96 float)
    (f0-97 float)
    (f0-98 float)
    (f0-99 float)
    (f0-100 float)
    (f0-101 none)
    (f0-102 none)
    (f1-0 float)
    (f1-1 float)
    (f1-2 float)
    (f1-3 float)
    (f1-4 float)
    (f1-5 float)
    (f1-6 float)
    (f1-7 float)
    (f1-8 float)
    (f1-9 float)
    (f1-10 float)
    (f1-11 float)
    (f1-12 float)
    (f1-13 float)
    (f1-14 float)
    (f1-15 float)
    (f1-16 meters)
    (f1-17 meters)
    (f1-18 none)
    (f1-19 none)
    (f1-20 none)
    (f1-21 none)
    (f1-22 none)
    (f1-23 none)
    (f1-24 none)
    (f1-25 none)
    (f1-26 none)
    (f1-27 none)
    (f1-28 none)
    (f1-29 none)
    (f1-30 none)
    (f1-31 none)
    (f1-32 none)
    (f1-33 none)
    (f1-34 none)
    (f1-35 none)
    (f1-36 none)
    (f1-37 none)
    (f1-38 none)
    (f1-39 none)
    (f1-40 none)
    (f1-41 none)
    (f1-42 none)
    (f1-43 none)
    (f1-44 none)
    (f1-45 none)
    (f1-46 none)
    (f1-47 none)
    (f1-48 none)
    (f1-49 none)
    (f1-50 none)
    (f1-51 none)
    (f1-52 none)
    (f1-53 none)
    (f1-54 none)
    (f1-55 none)
    (f1-56 none)
    (f1-57 none)
    (f1-58 none)
    (f1-59 none)
    (f1-60 none)
    (f1-61 none)
    (f1-62 none)
    (f1-63 none)
    (f1-64 none)
    (f1-65 none)
    (f1-66 none)
    (f1-67 float)
    (f1-68 int)
    (f1-69 float)
    (f1-70 float)
    (f1-71 float)
    (f1-72 float)
    (f1-73 float)
    (f1-74 float)
    (f1-75 float)
    (f1-76 float)
    (f1-77 float)
    (f1-78 float)
    (f1-79 none)
    (f1-80 none)
    (f1-81 none)
    (f1-82 none)
    (f1-83 none)
    (f1-84 none)
    (f1-85 none)
    (f1-86 float)
    (f1-87 float)
    (f1-88 float)
    (f1-89 none)
    (f1-90 none)
    (f1-91 none)
    (f1-92 none)
    (f1-93 none)
    (f1-94 none)
    (f2-0 float)
    (f2-1 float)
    (f2-2 float)
    (f2-3 float)
    (f2-4 float)
    (f2-5 float)
    (f2-6 float)
    (f2-7 none)
    (f2-8 none)
    (f2-9 none)
    (f2-10 none)
    (f2-11 none)
    (f2-12 none)
    (f2-13 none)
    (f2-14 none)
    (f2-15 none)
    (f2-16 none)
    (f2-17 none)
    (f2-18 none)
    (f2-19 none)
    (f2-20 none)
    (f2-21 none)
    (f2-22 none)
    (f2-23 none)
    (f2-24 none)
    (f2-25 none)
    (f2-26 float)
    (f2-27 float)
    (f2-28 none)
    (f2-29 none)
    (f2-30 float)
    (f2-31 none)
    (f2-32 none)
    (f2-33 none)
    (f3-0 none)
    (f3-1 none)
    (f3-2 none)
    (f3-3 none)
    (f3-4 float)
    (f3-5 none)
    (f3-6 float)
    (f3-7 none)
    (f26-0 float)
    (f28-0 number)
    (f28-1 float)
    (f28-2 float)
    (f30-0 float)
    (f30-1 float)
    (f30-2 number)
    )
  (if (begin
        (set! v1-0 -257)
        (set! a0-0 (-> s6-0 options))
        (set! v1-1 (logand v1-0 a0-0))
        (set! (-> s6-0 options) v1-1)
        (set! v1-2 (-> s6-0 string-relative))
        v1-2
        )
      (return (begin
                (when (begin
                        (set! s5-0 (the-as none (new 'stack-no-clear 'vector)))
                        (set! gp-0 (new 'stack-no-clear 'vector))
                        (set! f0-0 0)
                        (set! v1-4 #x3f000000)
                        (set! f30-0 (the-as float (gpr->fpr v1-4)))
                        (set! v1-5 (new 'stack-no-clear 'matrix))
                        (set! t9-0 vector-flatten!)
                        (set! a0-1 (the-as none s5-0))
                        (set! a1-0 (-> s6-0 relative-position))
                        (set! v1-6 *camera*)
                        (set! a2-0 (-> v1-6 local-down))
                        (call! a0-1 a1-0 a2-0)
                        (set! t9-1 acos)
                        (set! a0-2 (the-as none s5-0))
                        (set! v1-7 (-> s6-0 view-flat))
                        (set! f0-1 (vec3dot a0-2 v1-7))
                        (set! v1-8 (fpr->gpr f0-1))
                        (set! f0-2 (gpr->fpr v1-8))
                        (set! v1-9 (the-as none s5-0))
                        (set! v1-10 (veclength v1-9))
                        (set! f1-0 (gpr->fpr v1-10))
                        (set! v1-11 (-> s6-0 view-flat))
                        (set! v1-12 (veclength v1-11))
                        (set! f2-0 (gpr->fpr v1-12))
                        (set! f1-1 (*.s f1-0 f2-0))
                        (set! f0-3 (/.s f0-2 f1-1))
                        (set! a0-3 (fpr->gpr f0-3))
                        (set! v0-1 (call! a0-3))
                        (set! f0-4 (gpr->fpr v0-1))
                        (set! v1-13 #x44b60b61)
                        (set! f1-2 (the-as float (gpr->fpr v1-13)))
                        (set! f2-1 (*.s f30-0 f0-4))
                        (<.s f1-2 f2-1)
                        )
                  (set! v1-15 #x44b60b61)
                  (set! f1-3 (the-as float (gpr->fpr v1-15)))
                  (set! f30-0 (/.s f1-3 f0-4))
                  (set! v1-16 (fpr->gpr f30-0))
                  )
                (set! t9-2 vector-deg-slerp)
                (set! a0-4 (-> s6-0 view-flat))
                (set! a1-1 (-> s6-0 view-flat))
                (set! a2-1 (the-as none s5-0))
                (set! a3-0 (fpr->gpr f30-0))
                (call! a0-4 a1-1 a2-1 a3-0)
                (set! a0-5 (-> s6-0 relative-position))
                (set! v1-17 *camera*)
                (set! v1-18 (-> v1-17 local-down))
                (set! f0-5 (vec3dot a0-5 v1-18))
                (set! v1-19 (fpr->gpr f0-5))
                (set! f0-6 (gpr->fpr v1-19))
                (set! f0-7 (neg.s f0-6))
                (set! (-> gp-0 y) f0-7)
                (set! v1-20 (veclength s5-0))
                (set! f0-8 (gpr->fpr v1-20))
                (set! (-> gp-0 z) f0-8)
                (set! t9-3 lerp)
                (set! f0-9 (-> s6-0 view-off y))
                (set! a0-6 (fpr->gpr f0-9))
                (set! f0-10 (-> gp-0 y))
                (set! a1-2 (fpr->gpr f0-10))
                (set! a2-2 (fpr->gpr f30-0))
                (set! v0-3 (call! a0-6 a1-2 a2-2))
                (set! f0-11 (gpr->fpr v0-3))
                (set! (-> s6-0 view-off y) f0-11)
                (set! t9-4 lerp)
                (set! f0-12 (-> s6-0 view-off z))
                (set! a0-7 (fpr->gpr f0-12))
                (set! f0-13 (-> gp-0 z))
                (set! a1-3 (fpr->gpr f0-13))
                (set! a2-3 (fpr->gpr f30-0))
                (set! v0-4 (call! a0-7 a1-3 a2-3))
                (set! f0-14 (gpr->fpr v0-4))
                (set! (-> s6-0 view-off z) f0-14)
                (set! t9-5 vector-normalize!)
                (set! a0-8 (-> s6-0 view-flat))
                (set! f0-15 (-> s6-0 view-off z))
                (set! a1-4 (fpr->gpr f0-15))
                (call! a0-8 a1-4)
                (set! v1-21 v0-5)
                (set! f0-16 (-> s6-0 view-off y))
                (set! (-> s6-0 string-min-val y) f0-16)
                (set! f0-17 (-> s6-0 view-off z))
                (set! (-> s6-0 string-min-val z) f0-17)
                (set! f0-18 (-> s6-0 view-off y))
                (set! (-> s6-0 string-max-val y) f0-18)
                (set! f0-19 (-> s6-0 view-off z))
                (set! (-> s6-0 string-max-val z) f0-19)
                (set! v0-6 #f)
                )
              )
      )
  (when (begin
          (when (begin
                  (when (begin
                          (when (begin
                                  (set! t9-6 cam-dist-analog-input)
                                  (set! v1-23 *cpad-list*)
                                  (set! v1-24 (-> v1-23 cpads 0))
                                  (set! a0-9 (-> v1-24 righty))
                                  (set! a1-5 (the-as float #x3d4ccccd))
                                  (set! v0-7 (call! a0-9 a1-5))
                                  (set! f28-0 (gpr->fpr v0-7))
                                  (set! v1-25 (-> s6-0 view-flat))
                                  (set! v1-26 (veclength v1-25))
                                  (set! f0-20 (gpr->fpr v1-26))
                                  (set! f1-4 (-> s6-0 string-min-val z))
                                  (set! f0-21 (-.s f0-20 f1-4))
                                  (set! f1-5 (-> s6-0 string-max-val z))
                                  (set! f2-2 (-> s6-0 string-min-val z))
                                  (set! f1-6 (-.s f1-5 f2-2))
                                  (set! f0-22 (/.s f0-21 f1-6))
                                  (set! f30-1 (-> s6-0 view-off-param))
                                  (set! v1-27 #x10000)
                                  (set! a0-10 (-> s6-0 options))
                                  (set! v1-28 (logand v1-27 a0-10))
                                  (nonzero? v1-28)
                                  )
                            (set! f28-0 0)
                            (set! v1-30 (fpr->gpr f28-0))
                            )
                          (set! v1-31 (-> s6-0 have-phony-joystick))
                          v1-31
                          )
                    (set! v1-33 #x3d4ccccd)
                    (set! f1-7 (the-as float (gpr->fpr v1-33)))
                    (set! f2-3 (-> s6-0 phony-joystick-y))
                    (set! f28-0 (*.s f1-7 f2-3))
                    (set! v1-34 (fpr->gpr f28-0))
                    )
                  (when (begin
                          (and (begin (set! v1-35 *camera*) (set! v1-36 (-> v1-35 being-attacked)) v1-36)
                               (begin
                                 (set! v1-38 (-> s6-0 clock))
                                 (set! v1-39 (-> v1-38 frame-counter))
                                 (set! a0-11 *camera*)
                                 (set! a0-12 (-> a0-11 attack-start))
                                 (set! v1-40 (- v1-39 a0-12))
                                 (set! v1-37 (<.si v1-40 75))
                                 )
                               )
                          v1-37
                          )
                    (set! v1-42 #x3d4ccccd)
                    (set! f28-0 (gpr->fpr v1-42))
                    (set! v1-43 (fpr->gpr f28-0))
                    )
                  (set! v1-44 #x40000)
                  (set! a0-13 (-> s6-0 options))
                  (set! v1-45 (logand v1-44 a0-13))
                  (nonzero? v1-45)
                  )
            (when (begin
                    (and (begin
                           (or (begin
                                 (set! v1-47 *cpad-list*)
                                 (set! v1-48 (-> v1-47 cpads 0))
                                 (set! v1-49 (-> v1-48 rightx))
                                 (set! a0-14 (<.ui v1-49 64))
                                 a0-14
                                 )
                               (begin
                                 (set! v1-51 192)
                                 (set! a0-15 *cpad-list*)
                                 (set! a0-16 (-> a0-15 cpads 0))
                                 (set! a0-17 (-> a0-16 rightx))
                                 (set! v1-50 (<.ui v1-51 a0-17))
                                 )
                               )
                           v1-50
                           )
                         (begin
                           (set! v1-53 *cpad-list*)
                           (set! v1-54 (-> v1-53 cpads 0))
                           (set! v1-55 (-> v1-54 righty))
                           (set! v1-56 (the-as int (+ v1-55 -128)))
                           (set! v1-56 (abs v1-56))
                           (set! v1-52 (<.ui v1-56 64))
                           )
                         )
                    v1-52
                    )
              (set! f28-0 0)
              (set! v1-58 (fpr->gpr f28-0))
              )
            )
          (cond
            ((begin
               (when (begin
                       (when (begin (set! f1-8 (the-as float 0)) (!=.s f28-0 f1-8))
                         (set! v1-60 (-> s6-0 options))
                         (set! v1-61 (logior v1-60 256))
                         (set! (-> s6-0 options) v1-61)
                         )
                       (set! v1-62 #x3f800000)
                       (set! f1-9 (the-as float (gpr->fpr v1-62)))
                       (set! f26-0 (min.s f1-9 f0-22))
                       (set! f0-23 f26-0)
                       (set! f1-10 (the-as float 0))
                       (<.s f26-0 f1-10)
                       )
                 (set! f0-24 (-> s6-0 string-min-val z))
                 (set! v1-64 (-> s6-0 view-flat))
                 (set! v1-65 (veclength v1-64))
                 (set! f1-11 (gpr->fpr v1-65))
                 (set! f0-25 (-.s f0-24 f1-11))
                 (set! v1-66 #x3f000000)
                 (set! f1-12 (the-as float (gpr->fpr v1-66)))
                 (set! f2-4 (-> s6-0 string-min-val z))
                 (set! f1-13 (*.s f1-12 f2-4))
                 (set! f0-26 (/.s f0-25 f1-13))
                 (set! v1-67 #x3f400000)
                 (set! f1-14 (the-as float (gpr->fpr v1-67)))
                 (set! f0-23 (min.s f1-14 f0-26))
                 (set! v1-68 (fpr->gpr f0-23))
                 )
               (when (begin
                       (set! f1-15 (-> s6-0 string-min-val y))
                       (set! f2-5 (-> s6-0 string-max-val y))
                       (set! t9-7 lerp)
                       (set! a0-18 (fpr->gpr f1-15))
                       (set! a1-6 (fpr->gpr f2-5))
                       (set! a2-4 (fpr->gpr f0-23))
                       (set! v0-8 (call! a0-18 a1-6 a2-4))
                       (set! f0-27 (gpr->fpr v0-8))
                       (set! (-> s6-0 view-off y) f0-27)
                       (set! v1-69 (fpr->gpr f0-27))
                       (set! f0-28 (the-as float 0))
                       (<.s f26-0 f0-28)
                       )
                 (set! v1-71 (the-as none (new 'stack-no-clear 'vector)))
                 (set! a1-7 (the-as none v1-71))
                 (set! a0-19 (-> s6-0 string-trans))
                 (set! a2-5 *camera*)
                 (set! a2-6 (-> a2-5 tpos-curr-adj))
                 (set! a1-8 (vector-!2 a1-7 a0-19 a2-6))
                 (set! a0-20 *camera*)
                 (set! a0-21 (-> a0-20 local-down))
                 (set! f0-29 (vec3dot v1-71 a0-21))
                 (set! v1-72 (fpr->gpr f0-29))
                 (set! f0-30 (gpr->fpr v1-72))
                 (set! f0-31 (neg.s f0-30))
                 (set! v1-73 *camera*)
                 (set! v1-74 (-> v1-73 settings))
                 (set! f1-16 (-> v1-74 target-height))
                 (set! f0-32 (-.s f0-31 f1-16))
                 (set! v1-75 *camera*)
                 (set! v1-76 (-> v1-75 settings))
                 (set! f1-17 (-> v1-76 string-cliff-height))
                 (set! f2-6 (-> s6-0 view-off y))
                 (set! f0-33 (max.s f0-32 f2-6))
                 (set! f0-34 (min.s f1-17 f0-33))
                 (set! (-> s6-0 view-off y) f0-34)
                 (set! v1-77 (fpr->gpr f0-34))
                 )
               (set! f0-35 (the-as float 0))
               (set! f0-36 (max.s f0-35 f26-0))
               (set! v1-78 *camera*)
               (set! v1-79 (-> v1-78 settings))
               (set! v1-80 (-> v1-79 slave-options))
               (set! v1-81 (logand v1-80 8192))
               (nonzero? v1-81)
               )
             )
            ((begin
               (set! v1-84 (the-as none *camera*))
               (set! v1-85 (the-as none (l.wu (+ v1-84 128))))
               (set! v1-86 (the-as none (l.d (+ v1-85 224))))
               (set! v1-87 (the-as none (logand v1-86 32)))
               (nonzero? v1-87)
               )
             )
            ((begin
               (and (begin (set! f1-18 (the-as none 0)) (set! v1-90 (the-as none (>=.s f1-18 f28-0))) v1-90)
                    (begin (set! f1-19 (the-as none 0)) (set! v1-91 (the-as none (>=.s f1-19 f0-36))))
                    )
               v1-91
               )
             )
            ((begin
               (and (begin (set! f1-20 (the-as none 0)) (set! v1-94 (the-as none (>=.s f28-0 f1-20))) v1-94)
                    (begin
                      (set! v1-96 (the-as none #x3f800000))
                      (set! f1-21 (the-as none (gpr->fpr v1-96)))
                      (set! v1-95 (the-as none (>=.s f0-36 f1-21)))
                      )
                    )
               v1-95
               )
             )
            ((begin
               (set! f1-22 (the-as none 0))
               (set! v1-99 (the-as none (<.s f1-22 f28-0)))
               (and v1-99 (or (begin
                                (set! v1-101 (the-as none (l.wu (+ s6-0 2352))))
                                (set! v1-102 (the-as none (+ v1-101 -2)))
                                (set! a0-22 (the-as none (zero? v1-102)))
                                a0-22
                                )
                              (begin
                                (set! v1-103 (the-as none (l.wu (+ s6-0 2352))))
                                (set! a0-23 (the-as none (+ v1-103 -1)))
                                (set! v1-100 (the-as none (zero? a0-23)))
                                )
                              )
                    )
               v1-100
               )
             )
            ((begin
               (and (begin
                      (set! v1-106 (the-as none #x40000))
                      (set! a0-24 (the-as none (l.wu (+ s6-0 2276))))
                      (set! v1-107 (the-as none (logand v1-106 a0-24)))
                      (nonzero? v1-107)
                      )
                    (begin (set! f1-23 (the-as none 0)) (set! v1-108 (the-as none (<.s f1-23 f28-0))))
                    )
               v1-108
               )
             (set! v1-110 (the-as none *camera*))
             (set! v1-111 (the-as none (l.wu (+ v1-110 128))))
             (set! f0-37 (the-as none (l.f (+ v1-111 80))))
             (set! f1-24 (the-as none (l.f (+ s6-0 2640))))
             (set! v1-112 (the-as none #x46c00000))
             (set! f2-7 (the-as none (gpr->fpr v1-112)))
             (set! f2-8 (the-as none (*.s f2-7 f28-0)))
             (set! f1-25 (the-as none (-.s f1-24 f2-8)))
             (set! f0-38 (the-as none (max.s f0-37 f1-25)))
             (s.f! (+ s6-0 2640) f0-38)
             (set! v1-113 (the-as none #x46800000))
             (set! f0-39 (the-as none (gpr->fpr v1-113)))
             (set! f1-26 (the-as none (l.f (+ s6-0 2640))))
             (set! f0-40 (the-as none (+.s f0-39 f1-26)))
             (set! v1-114 (the-as none #x46000000))
             (set! f1-27 (the-as none (gpr->fpr v1-114)))
             (set! f2-9 (the-as none (l.f (+ s6-0 2640))))
             (set! f1-28 (the-as none (+.s f1-27 f2-9)))
             (set! f2-10 (the-as none (l.f (+ s6-0 2656))))
             (set! v1-115 (the-as none #x46c00000))
             (set! f3-0 (the-as none (gpr->fpr v1-115)))
             (set! f3-1 (the-as none (*.s f3-0 f28-0)))
             (set! f2-11 (the-as none (-.s f2-10 f3-1)))
             (set! f1-29 (the-as none (max.s f1-28 f2-11)))
             (set! f0-41 (the-as none (min.s f0-40 f1-29)))
             (s.f! (+ s6-0 2656) f0-41)
             (set! v1-116 (the-as none (fpr->gpr f0-41)))
             )
            ((begin
               (and (begin
                      (set! v1-117 (the-as none #x40000))
                      (set! a0-25 (the-as none (l.wu (+ s6-0 2276))))
                      (set! v1-118 (the-as none (logand v1-117 a0-25)))
                      (nonzero? v1-118)
                      )
                    (begin (set! f1-30 (the-as none 0)) (set! v1-119 (the-as none (<.s f28-0 f1-30))))
                    )
               v1-119
               )
             (set! v1-121 (the-as none *camera*))
             (set! v1-122 (the-as none (l.wu (+ v1-121 128))))
             (set! f0-42 (the-as none (l.f (+ v1-122 76))))
             (set! f1-31 (the-as none (l.f (+ s6-0 2656))))
             (set! v1-123 (the-as none #x46c00000))
             (set! f2-12 (the-as none (gpr->fpr v1-123)))
             (set! f2-13 (the-as none (*.s f2-12 f28-0)))
             (set! f1-32 (the-as none (-.s f1-31 f2-13)))
             (set! f0-43 (the-as none (min.s f0-42 f1-32)))
             (s.f! (+ s6-0 2656) f0-43)
             (set! v1-124 (the-as none -973078528))
             (set! f0-44 (the-as none (gpr->fpr v1-124)))
             (set! f1-33 (the-as none (l.f (+ s6-0 2656))))
             (set! f0-45 (the-as none (+.s f0-44 f1-33)))
             (set! v1-125 (the-as none -964689920))
             (set! f1-34 (the-as none (gpr->fpr v1-125)))
             (set! f2-14 (the-as none (l.f (+ s6-0 2656))))
             (set! f1-35 (the-as none (+.s f1-34 f2-14)))
             (set! f2-15 (the-as none (l.f (+ s6-0 2640))))
             (set! v1-126 (the-as none #x46c00000))
             (set! f3-2 (the-as none (gpr->fpr v1-126)))
             (set! f3-3 (the-as none (*.s f3-2 f28-0)))
             (set! f2-16 (the-as none (-.s f2-15 f3-3)))
             (set! f1-36 (the-as none (max.s f1-35 f2-16)))
             (set! f0-46 (the-as none (min.s f0-45 f1-36)))
             (s.f! (+ s6-0 2640) f0-46)
             (set! v1-127 (the-as none (fpr->gpr f0-46)))
             )
            ((begin
               (set! v1-128 (the-as none #x40000))
               (set! a0-26 (the-as none (l.wu (+ s6-0 2276))))
               (set! v1-129 (the-as none (logand v1-128 a0-26)))
               (nonzero? v1-129)
               )
             (set! v1-131 (the-as none #x46000000))
             (set! f0-47 (the-as none (gpr->fpr v1-131)))
             (set! v1-132 (the-as none *camera*))
             (set! v1-133 (the-as none (l.wu (+ v1-132 128))))
             (set! f1-37 (the-as none (l.f (+ v1-133 80))))
             (set! f0-48 (the-as none (+.s f0-47 f1-37)))
             (set! v1-134 (the-as none *camera*))
             (set! v1-135 (the-as none (l.wu (+ v1-134 128))))
             (set! f1-38 (the-as none (l.f (+ v1-135 76))))
             (set! f2-17 (the-as none (l.f (+ s6-0 2656))))
             (set! f1-39 (the-as none (min.s f1-38 f2-17)))
             (set! f0-49 (the-as none (max.s f0-48 f1-39)))
             (s.f! (+ s6-0 2656) f0-49)
             (set! v1-136 (the-as none *camera*))
             (set! v1-137 (the-as none (l.wu (+ v1-136 128))))
             (set! f0-50 (the-as none (l.f (+ v1-137 80))))
             (set! v1-138 (the-as none -973078528))
             (set! f1-40 (the-as none (gpr->fpr v1-138)))
             (set! v1-139 (the-as none *camera*))
             (set! v1-140 (the-as none (l.wu (+ v1-139 128))))
             (set! f2-18 (the-as none (l.f (+ v1-140 76))))
             (set! f1-41 (the-as none (+.s f1-40 f2-18)))
             (set! f2-19 (the-as none (l.f (+ s6-0 2640))))
             (set! f1-42 (the-as none (min.s f1-41 f2-19)))
             (set! f0-51 (the-as none (max.s f0-50 f1-42)))
             (s.f! (+ s6-0 2640) f0-51)
             (set! v1-141 (the-as none -964689920))
             (set! f0-52 (the-as none (gpr->fpr v1-141)))
             (set! f1-43 (the-as none (l.f (+ s6-0 2656))))
             (set! f0-53 (the-as none (+.s f0-52 f1-43)))
             (set! f1-44 (the-as none (l.f (+ s6-0 2640))))
             (set! f0-54 (the-as none (max.s f0-53 f1-44)))
             (s.f! (+ s6-0 2640) f0-54)
             (set! v1-142 (the-as none (fpr->gpr f0-54)))
             )
            ((begin
               (set! v1-143 (the-as none #x3d4ccccd))
               (set! f1-45 (the-as none (gpr->fpr v1-143)))
               (set! v1-144 (the-as none #x3f800000))
               (set! f2-20 (the-as none (gpr->fpr v1-144)))
               (set! f2-21 (the-as none (-.s f2-20 f0-36)))
               (set! f1-46 (the-as none (*.s f1-45 f2-21)))
               (<.s f1-46 f28-0)
               )
             (set! v1-146 (the-as none #x3d4ccccd))
             (set! f1-47 (the-as none (gpr->fpr v1-146)))
             (set! v1-147 (the-as none #x3f800000))
             (set! f2-22 (the-as none (gpr->fpr v1-147)))
             (set! f2-23 (the-as none (-.s f2-22 f0-36)))
             (set! f1-48 (the-as none (*.s f1-47 f2-23)))
             (set! f0-55 (the-as none (+.s f0-36 f1-48)))
             (set! f1-49 (the-as none (l.f (+ s6-0 468))))
             (set! f1-50 (the-as none (max.s f1-49 f0-55)))
             (s.f! (+ s6-0 468) f1-50)
             (set! gp-1 (the-as none vector-normalize!))
             (set! s5-1 (the-as none (+ s6-0 524)))
             (set! t9-8 (the-as none lerp))
             (set! f1-51 (the-as none (l.f (+ s6-0 2644))))
             (set! a0-27 (the-as none (fpr->gpr f1-51)))
             (set! f1-52 (the-as none (l.f (+ s6-0 2660))))
             (set! a1-9 (the-as none (fpr->gpr f1-52)))
             (set! a2-7 (the-as none (fpr->gpr f0-55)))
             (call!)
             (set! a1-10 (the-as none v0-9))
             (set! t9-9 (the-as none gp-1))
             (set! a0-28 (the-as none s5-1))
             (call!)
             (set! v1-148 (the-as none v0-10))
             )
            ((begin
               (set! v1-149 (the-as none #x3d4ccccd))
               (set! f1-53 (the-as none (gpr->fpr v1-149)))
               (set! f2-24 (the-as none (neg.s f0-36)))
               (set! f1-54 (the-as none (*.s f1-53 f2-24)))
               (<.s f28-0 f1-54)
               )
             (set! v1-151 (the-as none #x3d4ccccd))
             (set! f1-55 (the-as none (gpr->fpr v1-151)))
             (set! f2-25 (the-as none (neg.s f0-36)))
             (set! f1-56 (the-as none (*.s f1-55 f2-25)))
             (set! f0-56 (the-as none (+.s f0-36 f1-56)))
             (s.f! (+ s6-0 468) f0-56)
             (set! v1-152 (the-as none (fpr->gpr f0-56)))
             )
            ((begin (set! f1-57 (the-as none 0)) (<.s f1-57 f28-0))
             (set! v1-154 (the-as none (l.wu (+ s6-0 8))))
             (set! f1-58 (the-as none (l.f (+ v1-154 84))))
             (set! f1-59 (the-as none (*.s f28-0 f1-58)))
             (set! f0-57 (the-as none (+.s f0-36 f1-59)))
             (set! f1-60 (the-as none (l.f (+ s6-0 468))))
             (set! f1-61 (the-as none (max.s f1-60 f0-57)))
             (s.f! (+ s6-0 468) f1-61)
             (set! gp-2 (the-as none vector-normalize!))
             (set! s5-2 (the-as none (+ s6-0 524)))
             (set! t9-10 (the-as none lerp))
             (set! f1-62 (the-as none (l.f (+ s6-0 2644))))
             (set! a0-29 (the-as none (fpr->gpr f1-62)))
             (set! f1-63 (the-as none (l.f (+ s6-0 2660))))
             (set! a1-11 (the-as none (fpr->gpr f1-63)))
             (set! a2-8 (the-as none (fpr->gpr f0-57)))
             (call!)
             (set! a1-12 (the-as none v0-11))
             (set! t9-11 (the-as none gp-2))
             (set! a0-30 (the-as none s5-2))
             (call!)
             (set! v1-155 (the-as none v0-12))
             )
            ((begin (set! f1-64 (the-as none 0)) (<.s f28-0 f1-64))
             (set! v1-157 (the-as none (l.wu (+ s6-0 8))))
             (set! f1-65 (the-as none (l.f (+ v1-157 84))))
             (set! f1-66 (the-as none (*.s f28-0 f1-65)))
             (set! f0-58 (the-as none (+.s f0-36 f1-66)))
             (s.f! (+ s6-0 468) f0-58)
             (set! v1-158 (the-as none (fpr->gpr f0-58)))
             )
            )
          (when (begin
                  (cond
                    ((begin
                       (set! v1-159 #x40000)
                       (set! a0-31 (-> s6-0 options))
                       (set! v1-160 (logand v1-159 a0-31))
                       (nonzero? v1-160)
                       )
                     )
                    ((begin (set! f0-59 (the-as none 0)) (=.s f28-0 f0-59))
                     (set! f0-60 (the-as none (l.f (+ s6-0 2660))))
                     (s.f! (+ s6-0 484) f0-60)
                     (set! v1-162 (the-as none (fpr->gpr f0-60)))
                     )
                    (else
                      (set! t9-12 (the-as none lerp))
                      (set! f0-61 (the-as none (l.f (+ s6-0 2644))))
                      (set! a0-32 (the-as none (fpr->gpr f0-61)))
                      (set! f0-62 (the-as none (l.f (+ s6-0 2660))))
                      (set! a1-13 (the-as none (fpr->gpr f0-62)))
                      (set! f0-63 (the-as none (l.f (+ s6-0 468))))
                      (set! a2-9 (the-as none (fpr->gpr f0-63)))
                      (set! v0-13 (the-as none (call!)))
                      (set! f0-64 (the-as none (gpr->fpr v0-13)))
                      (s.f! (+ s6-0 484) f0-64)
                      (set! v1-163 (the-as none (fpr->gpr f0-64)))
                      )
                    )
                  (set! v1-164 *camera*)
                  (set! v1-165 (-> v1-164 being-attacked))
                  v1-165
                  )
            (set! (-> s6-0 view-off-param) f30-1)
            (set! v1-167 (fpr->gpr f30-1))
            )
          (set! v1-168 *camera*)
          (set! v1-169 (-> v1-168 settings))
          (set! v1-170 (-> v1-169 master-options))
          (set! v1-171 (logand v1-170 32))
          (zero? v1-171)
          )
    (when (begin
            (when (begin
                    (when (begin
                            (when (begin
                                    (if (begin
                                          (set! t9-13 analog-input)
                                          (set! v1-173 *cpad-list*)
                                          (set! v1-174 (-> v1-173 cpads 0))
                                          (set! a0-33 (-> v1-174 rightx))
                                          (set! a1-14 #x43000000)
                                          (set! a2-10 #x42000000)
                                          (set! a3-1 #x42dc0000)
                                          (set! v1-175 #x43360b61)
                                          (set! f0-65 (the-as float (gpr->fpr v1-175)))
                                          (set! v1-176 (-> s6-0 clock))
                                          (set! f1-67 (-> v1-176 seconds-per-frame))
                                          (set! f0-66 (*.s f0-65 f1-67))
                                          (set! v1-177 #x40000)
                                          (set! t0-0 (-> s6-0 options))
                                          (set! v1-178 (logand v1-177 t0-0))
                                          (nonzero? v1-178)
                                          )
                                        (set! v1-179 #x42f00000)
                                        (set! v1-179 (the-as int #x42f00000))
                                        )
                                    (set! f1-68 (gpr->fpr v1-179))
                                    (set! f0-67 (*.s f0-66 f1-68))
                                    (set! t0-1 (fpr->gpr f0-67))
                                    (set! v0-14 (call! a0-33 a1-14 a2-10 a3-1 t0-1))
                                    (set! f30-2 (gpr->fpr v0-14))
                                    (set! s4-0 (new 'stack-no-clear 'matrix))
                                    (set! (-> s4-0 vector 0 quad) (the-as uint128 0))
                                    (set! (-> s4-0 vector 1 quad) (the-as uint128 0))
                                    (set! (-> s4-0 vector 2 quad) (the-as uint128 0))
                                    (set! (-> s4-0 trans quad) (the-as uint128 0))
                                    (set! gp-3 (new 'stack-no-clear 'vector))
                                    (set! (-> gp-3 quad) (the-as uint128 0))
                                    (set! s5-3 (new 'stack-no-clear 'vector))
                                    (set! (-> s5-3 quad) (the-as uint128 0))
                                    (set! v1-180 #x10000)
                                    (set! a0-34 (-> s6-0 options))
                                    (set! v1-181 (logand v1-180 a0-34))
                                    (nonzero? v1-181)
                                    )
                              (set! f30-2 0)
                              (set! v1-183 (fpr->gpr f30-2))
                              )
                            (when (begin (set! v1-184 *setting-control*) (set! v1-185 (-> v1-184 user-default unknowng-symbol-00)) v1-185)
                              (set! f30-2 (neg.s f30-2))
                              (set! v1-187 (fpr->gpr f30-2))
                              )
                            (set! v1-188 (-> s6-0 have-phony-joystick))
                            v1-188
                            )
                      (set! v1-190 #x46aaaaab)
                      (set! f0-68 (the-as float (gpr->fpr v1-190)))
                      (set! f1-69 (-> s6-0 phony-joystick-x))
                      (set! f0-69 (*.s f0-68 f1-69))
                      (set! v1-191 (-> s6-0 clock))
                      (set! f1-70 (-> v1-191 seconds-per-frame))
                      (set! f30-2 (*.s f0-69 f1-70))
                      (set! v1-192 (fpr->gpr f30-2))
                      )
                    (set! v1-193 #x20000)
                    (set! a0-35 (-> s6-0 options))
                    (set! v1-194 (logand v1-193 a0-35))
                    (nonzero? v1-194)
                    )
              (when (begin
                      (when (begin
                              (set! v1-196 *camera*)
                              (set! v1-197 (-> v1-196 settings))
                              (set! v1-198 (-> v1-197 master-options))
                              (set! v1-199 (logand v1-198 64))
                              (nonzero? v1-199)
                              )
                        (when (begin
                                (set! v1-201 *CAMERA-bank*)
                                (set! v1-202 (-> v1-201 joypad))
                                (set! v1-203 (sll v1-202 2))
                                (set! a0-36 *cpad-list*)
                                (set! v1-204 (+ v1-203 a0-36))
                                (set! v1-205 (dynamic-array-field-access v1-204 cpads PLACEHOLDER))
                                (set! v1-206 (-> v1-205 button0-abs 0))
                                (set! v1-207 (logand v1-206 2048))
                                (nonzero? v1-207)
                                )
                          (set! v1-209 #x462aaaab)
                          (set! f0-70 (the-as float (gpr->fpr v1-209)))
                          (set! v1-210 (-> s6-0 clock))
                          (set! f1-71 (-> v1-210 seconds-per-frame))
                          (set! f28-1 (*.s f0-70 f1-71))
                          (set! t9-14 analog-input)
                          (set! v1-211 *CAMERA-bank*)
                          (set! v1-212 (-> v1-211 joypad))
                          (set! v1-213 (sll v1-212 2))
                          (set! a0-37 *cpad-list*)
                          (set! v1-214 (+ v1-213 a0-37))
                          (set! v1-215 (dynamic-array-field-access v1-214 cpads PLACEHOLDER))
                          (set! a0-38 (-> v1-215 abutton 9))
                          (set! a1-15 (the-as float 0))
                          (set! a2-11 (the-as float #x42000000))
                          (set! a3-2 (the-as float #x43660000))
                          (set! v1-216 #x46aaaaab)
                          (set! f0-71 (the-as float (gpr->fpr v1-216)))
                          (set! v1-217 (-> s6-0 clock))
                          (set! f1-72 (-> v1-217 seconds-per-frame))
                          (set! f0-72 (*.s f0-71 f1-72))
                          (set! t0-2 (fpr->gpr f0-72))
                          (set! v0-15 (call! a0-38 a1-15 a2-11 a3-2 t0-2))
                          (set! f0-73 (gpr->fpr v0-15))
                          (set! f0-74 (+.s f28-1 f0-73))
                          (set! f30-2 (+.s f30-2 f0-74))
                          (set! v1-218 (fpr->gpr f30-2))
                          )
                        )
                      (set! v1-219 *camera*)
                      (set! v1-220 (-> v1-219 settings))
                      (set! v1-221 (-> v1-220 master-options))
                      (set! v1-222 (logand v1-221 64))
                      (nonzero? v1-222)
                      )
                (when (begin
                        (set! v1-224 *CAMERA-bank*)
                        (set! v1-225 (-> v1-224 joypad))
                        (set! v1-226 (sll v1-225 2))
                        (set! a0-39 *cpad-list*)
                        (set! v1-227 (+ v1-226 a0-39))
                        (set! v1-228 (dynamic-array-field-access v1-227 cpads PLACEHOLDER))
                        (set! v1-229 (-> v1-228 button0-abs 0))
                        (set! v1-230 (logand v1-229 1024))
                        (nonzero? v1-230)
                        )
                  (set! v1-232 #x462aaaab)
                  (set! f0-75 (the-as float (gpr->fpr v1-232)))
                  (set! v1-233 (-> s6-0 clock))
                  (set! f1-73 (-> v1-233 seconds-per-frame))
                  (set! f28-2 (*.s f0-75 f1-73))
                  (set! t9-15 analog-input)
                  (set! v1-234 *CAMERA-bank*)
                  (set! v1-235 (-> v1-234 joypad))
                  (set! v1-236 (sll v1-235 2))
                  (set! a0-40 *cpad-list*)
                  (set! v1-237 (+ v1-236 a0-40))
                  (set! v1-238 (dynamic-array-field-access v1-237 cpads PLACEHOLDER))
                  (set! a0-41 (-> v1-238 abutton 8))
                  (set! a1-16 (the-as float 0))
                  (set! a2-12 (the-as float #x42000000))
                  (set! a3-3 (the-as float #x43660000))
                  (set! v1-239 #x46aaaaab)
                  (set! f0-76 (the-as float (gpr->fpr v1-239)))
                  (set! v1-240 (-> s6-0 clock))
                  (set! f1-74 (-> v1-240 seconds-per-frame))
                  (set! f0-77 (*.s f0-76 f1-74))
                  (set! t0-3 (fpr->gpr f0-77))
                  (set! v0-16 (call! a0-41 a1-16 a2-12 a3-3 t0-3))
                  (set! f0-78 (gpr->fpr v0-16))
                  (set! f0-79 (+.s f28-2 f0-78))
                  (set! f30-2 (-.s f30-2 f0-79))
                  (set! v1-241 (fpr->gpr f30-2))
                  )
                )
              )
            (cond
              ((begin
                 (cond
                   ((begin
                      (and (begin (set! v1-242 (-> s6-0 los-state)) (set! v1-243 (+ v1-242 -2)) (set! a0-42 (zero? v1-243)) a0-42)
                           (begin (set! f0-80 (the-as float 0)) (set! v1-244 (<.s f0-80 f30-2)))
                           )
                      v1-244
                      )
                    (set! f0-81 (-> s6-0 string-min-val z))
                    (set! f1-75 (-> s6-0 string-max-val z))
                    (set! v1-246 (-> s6-0 view-flat))
                    (set! v1-247 (veclength v1-246))
                    (set! f2-26 (gpr->fpr v1-247))
                    (set! f1-76 (min.s f1-75 f2-26))
                    (set! f0-82 (max.s f0-81 f1-76))
                    (set! v1-248 #x46aaaaab)
                    (set! f1-77 (the-as float (gpr->fpr v1-248)))
                    (set! v1-249 #x3dcccccd)
                    (set! f2-27 (the-as float (gpr->fpr v1-249)))
                    (set! f3-4 (-> s6-0 string-min-val z))
                    (set! f0-83 (/.s f3-4 f0-82))
                    (set! f0-84 (+.s f2-27 f0-83))
                    (set! f0-85 (*.s f1-77 f0-84))
                    (set! v1-250 (-> s6-0 clock))
                    (set! f1-78 (-> v1-250 seconds-per-frame))
                    (set! f30-2 (*.s f0-85 f1-78))
                    (set! v1-251 (fpr->gpr f30-2))
                    )
                   ((begin
                      (and (begin
                             (set! v1-252 (the-as none (-> s6-0 los-state)))
                             (set! v1-253 (the-as none (+ v1-252 -1)))
                             (set! a0-43 (the-as none (zero? v1-253)))
                             a0-43
                             )
                           (begin (set! f0-86 (the-as none 0)) (set! v1-254 (the-as none (<.s f30-2 f0-86))))
                           )
                      v1-254
                      )
                    (set! f0-87 (the-as none (l.f (+ s6-0 2644))))
                    (set! f1-79 (the-as none (l.f (+ s6-0 2660))))
                    (set! v1-256 (the-as none (+ s6-0 524)))
                    (set! v1-257 (the-as none (veclength v1-256)))
                    (set! f2-28 (the-as none (gpr->fpr v1-257)))
                    (set! f1-80 (the-as none (min.s f1-79 f2-28)))
                    (set! f0-88 (the-as none (max.s f0-87 f1-80)))
                    (set! v1-258 (the-as none -961893717))
                    (set! f1-81 (the-as none (gpr->fpr v1-258)))
                    (set! v1-259 (the-as none #x3dcccccd))
                    (set! f2-29 (the-as none (gpr->fpr v1-259)))
                    (set! f3-5 (the-as none (l.f (+ s6-0 2644))))
                    (set! f0-89 (the-as none (/.s f3-5 f0-88)))
                    (set! f0-90 (the-as none (+.s f2-29 f0-89)))
                    (set! f0-91 (the-as none (*.s f1-81 f0-90)))
                    (set! v1-260 (the-as none (l.wu (+ s6-0 8))))
                    (set! f1-82 (the-as none (l.f (+ v1-260 76))))
                    (set! f30-2 (the-as number (*.s f0-91 f1-82)))
                    (set! v1-261 (the-as none (fpr->gpr f30-2)))
                    )
                   )
                 (set! f0-92 (the-as float 0))
                 (!=.s f30-2 f0-92)
                 )
               (when (begin
                       (set! v1-262 (-> s6-0 options))
                       (set! v1-263 (logior v1-262 256))
                       (set! (-> s6-0 options) v1-263)
                       (set! t9-16 matrix-axis-angle!)
                       (set! a0-44 s4-0)
                       (set! v1-264 *camera*)
                       (set! a1-17 (-> v1-264 local-down))
                       (set! a2-13 (fpr->gpr f30-2))
                       (call! a0-44 a1-17 a2-13)
                       (set! t9-17 vector-matrix*!)
                       (set! a0-45 (-> s6-0 view-flat))
                       (set! a1-18 (-> s6-0 view-flat))
                       (set! a2-14 s4-0)
                       (call! a0-45 a1-18 a2-14)
                       (set! (-> s6-0 butt-timer) (the-as uint 0))
                       (set! (-> s6-0 butt-seek) #f)
                       (set! v1-265 #x800000)
                       (set! a0-46 (-> s6-0 options))
                       (set! v1-266 (logand v1-265 a0-46))
                       (nonzero? v1-266)
                       )
                 (set! a0-47 *setting-control*)
                 (set! v1-268 (-> a0-47 type))
                 (set! t9-18 (method-of-type v1-268 kill-persister))
                 (set! a1-19 'butt-handle)
                 (set! a2-15 'butt-handle)
                 (call! a0-47 a1-19 a2-15)
                 (set! v1-269 v0-19)
                 (set! v1-270 -8388609)
                 (set! a0-48 (-> s6-0 options))
                 (set! v1-271 (logand v1-270 a0-48))
                 (set! (-> s6-0 options) v1-271)
                 )
               )
              ((begin
                 (or (begin (set! v1-272 (-> s6-0 options)) (set! v1-273 (logand v1-272 1)) (nonzero? v1-273))
                     (if (begin
                           (and (begin
                                  (set! v1-275 *camera*)
                                  (set! v1-276 (-> v1-275 settings))
                                  (set! v1-277 (-> v1-276 butt-handle))
                                  (set! a0-49 (subu-s7 v1-277))
                                  (nonzero? a0-49)
                                  )
                                (begin
                                  (if (begin
                                        (.sllv a0-50 v1-277 r0)
                                        (set! a0-51 (-> a0-50 0))
                                        (set! a1-20 (-> a0-51 pid))
                                        (set! v1-278 (sra v1-277 32))
                                        (= v1-278 a1-20)
                                        )
                                      (set! s3-0 a0-51)
                                      )
                                  (set! v1-279 s3-0)
                                  )
                                )
                           (set! t9-19 type?)
                           (set! a0-52 s3-0)
                           (set! a1-21 process-drawable)
                           (set! v0-20 (call! a0-52 a1-21))
                           v0-20
                           )
                         (set! v1-274 s3-0)
                         )
                     )
                 v1-274
                 )
               (when (begin
                       (and (begin
                              (and (begin
                                     (set! t9-20 vector-normalize-copy!)
                                     (set! a0-53 gp-3)
                                     (set! a1-22 (-> s6-0 view-flat))
                                     (set! a2-16 (the-as float #x3f800000))
                                     (call! a0-53 a1-22 a2-16)
                                     (set! v1-280 *camera*)
                                     (set! v1-281 (-> v1-280 settings))
                                     (set! v1-282 (-> v1-281 butt-handle))
                                     (set! a0-54 (subu-s7 v1-282))
                                     (nonzero? a0-54)
                                     )
                                   (begin
                                     (if (begin
                                           (.sllv a0-55 v1-282 r0)
                                           (set! a0-56 (-> a0-55 0))
                                           (set! a1-23 (-> a0-56 pid))
                                           (set! v1-284 (sra v1-282 32))
                                           (= v1-284 a1-23)
                                           )
                                         (set! v1-283 a0-56)
                                         )
                                     (set! a0-57 v1-283)
                                     )
                                   )
                              (cond
                                (v1-283
                                  (set! a0-58 #x800000)
                                  (set! a1-24 (-> s6-0 options))
                                  (set! a0-59 (logior a0-58 a1-24))
                                  (set! (-> s6-0 options) a0-59)
                                  (set! t9-21 quaternion->matrix)
                                  (set! a0-60 (new 'stack-no-clear 'matrix))
                                  (set! v1-285 (the-as none (l.wu (+ v1-283 124))))
                                  (set! a1-25 (the-as none (+ v1-285 28)))
                                  (set! v0-22 (the-as none (call!)))
                                  (set! s3-1 (the-as none v0-22))
                                  (set! t9-22 (the-as none matrix-axis-angle!))
                                  (set! a0-61 (the-as none (+ sp-0 288)))
                                  (set! a1-26 (the-as none (+ s3-1 16)))
                                  (set! v1-286 (the-as none #x47000000))
                                  (set! f0-93 (the-as none (gpr->fpr v1-286)))
                                  (set! v1-287 (the-as none *camera*))
                                  (set! v1-288 (the-as none (l.wu (+ v1-287 128))))
                                  (set! f1-83 (the-as none (l.f (+ v1-288 344))))
                                  (set! f0-94 (the-as none (+.s f0-93 f1-83)))
                                  (set! a2-17 (the-as none (fpr->gpr f0-94)))
                                  (call!)
                                  (set! a2-18 (the-as none v0-23))
                                  (set! t9-23 (the-as none vector-matrix*!))
                                  (set! a0-62 (the-as none s5-3))
                                  (set! a1-27 (the-as none (+ s3-1 32)))
                                  (call!)
                                  (set! t9-24 (the-as none vector-flatten!))
                                  (set! a0-63 (the-as none s5-3))
                                  (set! a1-28 (the-as none s5-3))
                                  (set! v1-289 (the-as none *camera*))
                                  (set! a2-19 (the-as none (+ v1-289 284)))
                                  (call!)
                                  (set! v1-290 (the-as none v0-25))
                                  )
                                ((begin
                                   (set! v1-291 (the-as none (-> s6-0 clock)))
                                   (set! v1-292 (the-as none (l.d (+ v1-291 20))))
                                   (set! a0-64 (the-as none (-> s6-0 butt-timer)))
                                   (set! v1-293 (the-as none (- v1-292 a0-64)))
                                   (<0.si v1-293)
                                   )
                                 (set! t9-25 (the-as none vector-flatten!))
                                 (set! a0-65 (the-as none s5-3))
                                 (set! a1-29 (the-as none (+ s6-0 2300)))
                                 (set! v1-294 (the-as none *camera*))
                                 (set! a2-20 (the-as none (+ v1-294 284)))
                                 (call!)
                                 (set! v1-295 (the-as none v0-26))
                                 )
                                (else
                                  (set! t9-26 (the-as none vector-flatten!))
                                  (set! a0-66 (the-as none s5-3))
                                  (set! v1-296 (the-as none *camera*))
                                  (set! a1-30 (the-as none (+ v1-296 380)))
                                  (set! v1-297 (the-as none *camera*))
                                  (set! a2-21 (the-as none (+ v1-297 284)))
                                  (call!)
                                  (set! v1-298 (the-as none v0-27))
                                  )
                                )
                              (set! t9-27 (the-as none vector-normalize!))
                              (set! a0-67 (the-as none s5-3))
                              (set! a1-31 (the-as none -1082130432))
                              (call!)
                              (set! v1-299 (the-as none #x800000))
                              (set! a0-68 (the-as none (l.wu (+ s6-0 2276))))
                              (set! v1-300 (the-as none (logand v1-299 a0-68)))
                              (nonzero? v1-300)
                              )
                            (begin
                              (set! t9-28 (the-as none cos))
                              (set! a0-69 (the-as none #x44638e39))
                              (set! v0-29 (the-as none (call!)))
                              (set! f0-95 (the-as none (gpr->fpr v0-29)))
                              (set! a0-70 (the-as none gp-3))
                              (set! v1-302 (the-as none s5-3))
                              (set! f1-84 (the-as none (vec3dot a0-70 v1-302)))
                              (set! v1-303 (the-as none (fpr->gpr f1-84)))
                              (set! f1-85 (the-as none (gpr->fpr v1-303)))
                              (set! v1-301 (the-as none (<.s f0-95 f1-85)))
                              )
                            )
                       v1-301
                       )
                 (set! a0-71 (the-as none *setting-control*))
                 (set! v1-305 (the-as none (l.wu (+ a0-71 -4))))
                 (set! t9-29 (the-as none (l.wu (+ v1-305 68))))
                 (set! a1-32 (the-as none 'butt-handle))
                 (set! a2-22 (the-as none 'butt-handle))
                 (call!)
                 (set! v1-306 (the-as none v0-30))
                 (set! v1-307 (the-as none -8388609))
                 (set! a0-72 (the-as none (l.wu (+ s6-0 2276))))
                 (set! v1-308 (the-as none (logand v1-307 a0-72)))
                 (s.w! (+ s6-0 2276) v1-308)
                 )
               (set! t9-30 (the-as none matrix-from-two-vectors-max-angle!))
               (set! a0-73 (the-as none s4-0))
               (set! a1-33 (the-as none gp-3))
               (set! a2-23 (the-as none s5-3))
               (set! a3-4 (the-as none #x44088889))
               (call!)
               (set! t9-31 (the-as none vector-matrix*!))
               (set! a0-74 (the-as none (+ s6-0 524)))
               (set! a1-34 (the-as none (+ s6-0 524)))
               (set! a2-24 (the-as none s4-0))
               (call!)
               (set! v1-309 (the-as none v0-32))
               )
              (else
                (set! v1-310 (the-as none -8388609))
                (set! a0-75 (the-as none (-> s6-0 options)))
                (set! v1-311 (the-as none (logand v1-310 a0-75)))
                (set! (-> s6-0 options) (the-as uint v1-311))
                )
              )
            (set! v1-312 *camera*)
            (set! v1-313 (-> v1-312 settings))
            (set! v1-314 (-> v1-313 slave-options))
            (set! v1-315 (logand v1-314 8192))
            (nonzero? v1-315)
            )
      (when (begin
              (and (begin
                     (set! t9-32 vector-normalize-copy!)
                     (set! a0-76 gp-3)
                     (set! a1-35 (-> s6-0 view-flat))
                     (set! a2-25 (the-as float #x3f800000))
                     (call! a0-76 a1-35 a2-25)
                     (set! t9-33 vector-flatten!)
                     (set! a0-77 s5-3)
                     (set! v1-317 *camera*)
                     (set! a1-36 (&-> v1-317 stack 256))
                     (set! v1-318 *camera*)
                     (set! a2-26 (-> v1-318 local-down))
                     (call! a0-77 a1-36 a2-26)
                     (set! t9-34 vector-normalize!)
                     (set! a0-78 s5-3)
                     (set! a1-37 (the-as float -1082130432))
                     (call! a0-78 a1-37)
                     (set! t9-35 acos)
                     (set! a0-79 s5-3)
                     (set! v1-319 gp-3)
                     (set! f0-96 (vec3dot a0-79 v1-319))
                     (set! a0-80 (fpr->gpr f0-96))
                     (set! v0-36 (call! a0-80))
                     (set! f0-97 (gpr->fpr v0-36))
                     (set! f1-86 (-> s6-0 max-angle-offset))
                     (set! v1-320 (<.s f1-86 f0-97))
                     v1-320
                     )
                   (begin (set! v1-322 #x46fe93e9) (set! f1-87 (the-as float (gpr->fpr v1-322))) (set! v1-321 (<.s f0-97 f1-87)))
                   )
              v1-321
              )
        (set! t9-36 matrix-from-two-vectors-max-angle!)
        (set! a0-81 s4-0)
        (set! v1-324 #x44088889)
        (set! f1-88 (the-as float (gpr->fpr v1-324)))
        (set! v1-325 #x3f000000)
        (set! f2-30 (the-as float (gpr->fpr v1-325)))
        (set! f3-6 (-> s6-0 max-angle-offset))
        (set! f0-98 (-.s f0-97 f3-6))
        (set! f0-99 (*.s f2-30 f0-98))
        (set! f0-100 (min.s f1-88 f0-99))
        (set! a3-5 (fpr->gpr f0-100))
        (set! a1-38 gp-3)
        (set! a2-27 s5-3)
        (call! a0-81 a1-38 a2-27 a3-5)
        (set! t9-37 vector-matrix*!)
        (set! a0-82 (-> s6-0 view-flat))
        (set! a1-39 (-> s6-0 view-flat))
        (set! a2-28 s4-0)
        (call! a0-82 a1-39 a2-28)
        (set! v1-326 v0-38)
        )
      )
    )
  (when (begin
          (set! v1-327 (the-as none #x80000))
          (set! a0-83 (the-as none *camera*))
          (set! a0-84 (the-as none (l.wu (+ a0-83 128))))
          (set! a0-85 (the-as none (l.d (+ a0-84 112))))
          (set! v1-328 (the-as none (logand v1-327 a0-85)))
          (zero? v1-328)
          )
    (when (begin
            (when (begin
                    (set! v1-329 (the-as none (+ s6-0 524)))
                    (set! v1-330 (the-as none (veclength v1-329)))
                    (set! f0-101 (the-as none (gpr->fpr v1-330)))
                    (set! f1-89 (the-as none (l.f (+ s6-0 484))))
                    (<.s f1-89 f0-101)
                    )
              (set! v1-332 (the-as none (+ s6-0 524)))
              (set! a0-86 (the-as none (+ s6-0 524)))
              (set! f0-102 (the-as none (/.s f1-89 f0-101)))
              (set! v1-333 (the-as none (vector-float*!2 v1-332 a0-86 f0-102)))
              (s.f! (+ s6-0 508) f1-89)
              (set! f0-101 (the-as none f1-89))
              (set! v1-334 (the-as none (fpr->gpr f0-101)))
              )
            (set! f1-90 (the-as none (l.f (+ s6-0 500))))
            (set! v1-335 (the-as none (<.s f1-90 f0-101)))
            (and v1-335 (begin
                          (set! f1-91 (the-as none (l.f (+ s6-0 480))))
                          (set! f2-31 (the-as none (l.f (+ s6-0 496))))
                          (set! v1-336 (the-as none (<.s f1-91 f2-31)))
                          )
                 )
            v1-336
            )
      (set! v1-338 (the-as none *camera*))
      (set! v1-339 (the-as none (l.wu (+ v1-338 128))))
      (set! f1-92 (the-as none (l.f (+ v1-339 68))))
      (set! f2-32 (the-as none (l.f (+ s6-0 2640))))
      (set! f3-7 (the-as none (l.f (+ s6-0 496))))
      (set! f2-33 (the-as none (max.s f2-32 f3-7)))
      (set! f1-93 (the-as none (min.s f1-92 f2-33)))
      (s.f! (+ s6-0 480) f1-93)
      (set! v1-340 (the-as none (fpr->gpr f1-93)))
      )
    (set! f1-94 (the-as none (l.f (+ s6-0 480))))
    (s.f! (+ s6-0 496) f1-94)
    (s.f! (+ s6-0 500) f0-101)
    (set! v0-6 (the-as symbol (fpr->gpr f0-101)))
    )
  (ret-value v0-6)
  )

;; definition for function cam-string-find-hidden
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
;; ERROR: Function may read a register that is not set: t0
;; ERROR: Function may read a register that is not set: t1
;; ERROR: Function may read a register that is not set: t2
;; ERROR: Function may read a register that is not set: t3
(defbehavior cam-string-find-hidden camera-slave ()
  (local-vars (t0-0 none) (t1-0 none) (t2-0 none) (t3-0 none))
  (let* ((s5-0 (new 'stack-no-clear 'collide-query))
         (gp-0 (new 'stack-no-clear 'vector))
         (t9-0 vector--float*!)
         (a0-0 (-> s5-0 move-dist))
         (a1-0 (-> *camera* tpos-curr-adj))
         (a2-0 (-> *camera* local-down))
         (a3-0 (-> *camera* settings target-height))
         )
    (t9-0 a0-0 a1-0 a2-0 a3-0)
    (vector-! (-> s5-0 move-dist) (-> s5-0 move-dist) (-> self string-trans))
    (set! (-> s5-0 start-pos quad) (-> self string-trans quad))
    (let ((s4-0 s5-0))
      (set! (-> s4-0 radius) 409.6)
      (set! (-> s4-0 collide-with) (collide-spec backgnd obstacle hit-by-others-list camera-blocker pusher))
      (set! (-> s4-0 ignore-process0) #f)
      (set! (-> s4-0 ignore-process1) #f)
      (set! (-> s4-0 ignore-pat) (the-as pat-surface (camera-master-method-16 *camera* #f)))
      (set! (-> s4-0 action-mask) (the-as uint 1))
      )
    (cond
      ((< (fill-and-probe-using-line-sphere
            *collide-cache*
            (the-as vector s5-0)
            a2-0
            (the-as float a3-0)
            (the-as collide-spec t0-0)
            (the-as process t1-0)
            (the-as collide-tri-result t2-0)
            (the-as pat-surface t3-0)
            )
          0.0
          )
       (set! (-> self time-dist-too-far) (the-as uint 0))
       0
       )
      ((< (-> self time-dist-too-far) (the-as uint 600))
       (+! (-> self time-dist-too-far) 1)
       )
      ((cam-string-find-position-rel! gp-0)
       (cam-string-set-position-rel! gp-0)
       (set! (-> self time-dist-too-far) (the-as uint 0))
       0
       )
      (else
        (format 0 "camera position search failed~%")
        (set! (-> self time-dist-too-far) (the-as uint 0))
        0
        )
      )
    )
  (none)
  )

;; definition for function cam-string-move
;; INFO: Used lq/sq
;; ERROR: Function may read a register that is not set: a3
;; ERROR: Function may read a register that is not set: t0
;; ERROR: Function may read a register that is not set: t1
;; ERROR: Function may read a register that is not set: t2
;; ERROR: Function may read a register that is not set: t3
(defbehavior cam-string-move camera-slave ()
  (local-vars (a3-0 object) (t0-0 object) (t1-0 float) (t2-0 none) (t3-0 none))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         )
    (init-vf0-vector)
    (vector-! (-> self velocity) (-> self desired-pos) (-> self string-trans))
    (if *display-cam-los-debug*
        (format *stdcon* "vel ~M~%" (vector-length (-> self velocity)))
        )
    (let ((s5-0 (new 'stack-no-clear 'vector))
          (s4-0 (new 'stack-no-clear 'vector))
          (gp-0 (new 'stack-no-clear 'vector))
          (s3-0 (new 'stack-no-clear 'vector))
          )
      (vector-! s3-0 (-> *camera* tpos-curr-adj) (-> *camera* tpos-old-adj))
      (let ((v1-7 s5-0))
        (let ((a0-4 (-> self velocity))
              (a1-5 s3-0)
              (f0-0 0.5)
              )
          (.lvf vf2 (&-> a1-5 quad))
          (.lvf vf1 (&-> a0-4 quad))
          (let ((a0-5 f0-0))
            (.mov vf3 a0-5)
            )
          )
        (.add.x.vf vf4 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf2 vf3)
        (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
        (.svf (&-> v1-7 quad) vf4)
        )
      (vector-normalize! s5-0 1.0)
      (let ((t9-2 vector-normalize-copy!)
            (a0-7 s4-0)
            (a1-7 (-> self view-flat))
            (a2-2 (the-as object 1.0))
            )
        (t9-2 a0-7 a1-7 (the-as float a2-2))
        (vector-cross! gp-0 s4-0 s5-0)
        (cond
          ((and (< (vector-length (-> self velocity)) (-> *CAMERA-bank* min-detectable-velocity))
                (< (vector-length s3-0) (-> *CAMERA-bank* min-detectable-velocity))
                )
           (set! (-> self string-vel-dir) (the-as uint 0))
           0
           )
          ((< (cos 5461.3335) (vector-dot (-> *camera* local-down) s5-0))
           (set! (-> self string-vel-dir) (the-as uint 4))
           )
          ((< (vector-dot (-> *camera* local-down) s5-0) (- (cos 5461.3335)))
           (set! (-> self string-vel-dir) (the-as uint 3))
           )
          ((< (cos 5461.3335) (vector-dot s4-0 s5-0))
           (set! (-> self string-vel-dir) (the-as uint 6))
           )
          ((< (vector-dot s4-0 s5-0) (- (cos 5461.3335)))
           (set! (-> self string-vel-dir) (the-as uint 5))
           )
          ((< (vector-dot (-> *camera* local-down) gp-0) 0.0)
           (set! (-> self string-vel-dir) (the-as uint 1))
           )
          (else
            (set! (-> self string-vel-dir) (the-as uint 2))
            )
          )
        (let ((s5-1 (new 'stack-no-clear 'collide-query)))
          0.0
          (let ((f30-2 1.0)
                (s4-1 (-> s5-1 move-dist))
                (gp-1 0)
                )
            (let ((s3-1 (new 'stack-no-clear 'vector)))
              (when *debug-segment*
                (when (>= (-> *CAMERA-bank* min-detectable-velocity) (vector-length (-> self velocity)))
                  (let ((t9-7 cam-collision-record-save)
                        (a0-16 (-> self string-trans))
                        (a1-10 (-> self velocity))
                        )
                    (set! a2-2 -1)
                    (set! a3-0 'no-hit)
                    (set! t0-0 self)
                    (t9-7 a0-16 a1-10 (the-as int a2-2) (the-as symbol a3-0) (the-as camera-slave t0-0))
                    )
                  )
                )
              (while (and (< 0.01 f30-2)
                          (and (< (-> *CAMERA-bank* min-detectable-velocity) (vector-length (-> self velocity))) (< gp-1 4))
                          )
                (vector-float*! s4-1 (-> self velocity) f30-2)
                (when *debug-segment*
                  (let ((t9-8 cam-collision-record-save)
                        (a0-18 (-> self string-trans))
                        (a1-11 s4-1)
                        )
                    (set! a2-2 gp-1)
                    (set! a3-0 'normal)
                    (set! t0-0 self)
                    (t9-8 a0-18 a1-11 (the-as int a2-2) (the-as symbol a3-0) (the-as camera-slave t0-0))
                    )
                  )
                (let ((f28-0
                        (cond
                          ((logtest? (-> self options) 32)
                           (set! (-> s5-1 start-pos quad) (-> self string-trans quad))
                           (let ((s2-0 s5-1))
                             (set! (-> s2-0 radius) (-> *CAMERA-bank* collide-move-rad))
                             (set! (-> s2-0 collide-with) (collide-spec backgnd obstacle hit-by-others-list camera-blocker pusher))
                             (set! (-> s2-0 ignore-process0) #f)
                             (set! (-> s2-0 ignore-process1) #f)
                             (set! (-> s2-0 ignore-pat) (the-as pat-surface (camera-master-method-16 *camera* #f)))
                             (set! (-> s2-0 action-mask) (the-as uint 1))
                             )
                           (fill-and-probe-using-line-sphere
                             *collide-cache*
                             (the-as vector s5-1)
                             (the-as vector a2-2)
                             (the-as float a3-0)
                             (the-as collide-spec t0-0)
                             (the-as process t1-0)
                             (the-as collide-tri-result t2-0)
                             (the-as pat-surface t3-0)
                             )
                           )
                          (else
                            -100000000.0
                            )
                          )
                        )
                      )
                  (when *display-cam-los-debug*
                    (let ((t9-11 format)
                          (a0-23 *stdcon*)
                          (a1-14 "vp ~f vr ~f r ~f ta ~f~%")
                          )
                      (set! a2-2 (vector-length s4-1))
                      (set! a3-0 f30-2)
                      (set! t0-0 (/ (vector-length s4-1) f30-2))
                      (set! t1-0 f28-0)
                      (t9-11 a0-23 a1-14 (the-as float a2-2) (the-as float a3-0) (the-as float t0-0) t1-0)
                      )
                    )
                  (cond
                    ((>= f28-0 0.0)
                     (let* ((f1-10 (fmax 0.01 (/ 40.96 (vector-length s4-1))))
                            (f0-22 (fmax 0.0 (- f28-0 f1-10)))
                            (v1-71 (-> self string-trans))
                            )
                       (let ((a0-24 (-> self string-trans)))
                         (.lvf vf2 (&-> s4-1 quad))
                         (.lvf vf1 (&-> a0-24 quad))
                         )
                       (let ((a0-25 f0-22))
                         (.mov vf3 a0-25)
                         )
                       (.add.x.vf vf4 vf0 vf0 :mask #b1000)
                       (.mul.x.vf acc vf2 vf3)
                       (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
                       (.svf (&-> v1-71 quad) vf4)
                       )
                     (vector-! s3-1 (-> self string-trans) (-> s5-1 best-other-tri intersect))
                     (vector-normalize! s3-1 1.0)
                     (let ((t9-13 vector-flatten!)
                           (a0-28 (-> self velocity))
                           (a1-19 (-> self velocity))
                           )
                       (set! a2-2 s3-1)
                       (t9-13 a0-28 a1-19 (the-as vector a2-2))
                       )
                     (set! f30-2 (- f30-2 (* f30-2 f28-0)))
                     (+! gp-1 1)
                     )
                    (else
                      (vector+! (-> self string-trans) (-> self string-trans) s4-1)
                      (set! f30-2 0.0)
                      )
                    )
                  )
                )
              )
            (cond
              ((zero? gp-1)
               (set! (-> self options) (logand -1025 (-> self options)))
               (if *display-cam-los-debug*
                   (format *stdcon* "not blocked~%")
                   )
               )
              (else
                (logior! (-> self options) 1024)
                (if *display-cam-los-debug*
                    (format *stdcon* "blocked ~D ~f~%" gp-1 f30-2)
                    )
                (let ((gp-2 (new-stack-vector0))
                      (f30-3 (vector-length (-> self view-flat)))
                      )
                  (vector-! gp-2 (-> self string-trans) (-> *camera* tpos-curr-adj))
                  (vector-flatten! gp-2 gp-2 (-> *camera* local-down))
                  (let ((f28-1 (vector-length gp-2)))
                    (cond
                      ((< f28-1 f30-3)
                       (vector-normalize-copy! (-> self view-flat) gp-2 f28-1)
                       (set! (-> self min-z-override) f28-1)
                       )
                      (else
                        (vector-normalize-copy! (-> self view-flat) gp-2 f30-3)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    (when *display-cam-los-debug*
      (let ((v1-103 (new-stack-vector0)))
        (vector-! v1-103 (-> self desired-pos) (-> self string-trans))
        (format *stdcon* "vel ~M~%" (vector-length v1-103))
        )
      )
    )
  )

;; definition for function cam-string-code
;; INFO: Used lq/sq
;; ERROR: failed type prop at 11: Called a function, but we do not know its type
;; INFO: Return type mismatch none vs vector.
(defbehavior cam-string-code camera-slave ()
  (local-vars
    (v0-0 none)
    (v0-1 object)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 none)
    (v0-13 none)
    (v0-14 none)
    (v0-15 none)
    (v0-16 none)
    (v0-17 none)
    (v0-18 none)
    (v0-19 none)
    (v0-20 none)
    (v1-0 symbol)
    (v1-3 uint)
    (v1-4 uint)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (v1-14 none)
    (v1-15 none)
    (v1-17 none)
    (v1-18 none)
    (v1-21 none)
    (v1-22 none)
    (v1-23 none)
    (v1-25 none)
    (v1-27 none)
    (v1-28 none)
    (v1-29 none)
    (v1-30 none)
    (v1-31 none)
    (v1-32 none)
    (v1-33 none)
    (v1-37 none)
    (v1-39 none)
    (v1-40 none)
    (v1-41 none)
    (v1-42 none)
    (v1-43 none)
    (v1-45 none)
    (v1-46 none)
    (v1-48 none)
    (v1-49 none)
    (v1-51 none)
    (v1-54 none)
    (v1-55 none)
    (v1-56 none)
    (v1-58 none)
    (v1-59 none)
    (v1-60 none)
    (v1-61 none)
    (v1-62 none)
    (v1-63 none)
    (v1-64 none)
    (v1-66 none)
    (v1-67 none)
    (v1-68 none)
    (v1-69 none)
    (v1-70 none)
    (v1-72 none)
    (v1-73 none)
    (v1-74 none)
    (v1-75 none)
    (v1-76 none)
    (v1-77 none)
    (v1-78 none)
    (v1-80 none)
    (v1-81 none)
    (v1-82 none)
    (v1-83 none)
    (v1-84 none)
    (v1-88 none)
    (a0-1 none)
    (a0-2 none)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a0-13 none)
    (a0-14 none)
    (a0-15 none)
    (a0-16 none)
    (a0-17 none)
    (a0-18 none)
    (a0-19 none)
    (a0-20 none)
    (a0-21 none)
    (a0-22 none)
    (a0-23 none)
    (a0-24 none)
    (a0-25 none)
    (a0-26 none)
    (a1-0 none)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-7 none)
    (a1-8 none)
    (a1-9 none)
    (a1-10 none)
    (a1-11 none)
    (a1-12 none)
    (a1-13 none)
    (a2-0 none)
    (a2-1 none)
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a2-5 none)
    (a2-6 none)
    (a2-7 none)
    (a2-8 none)
    (a2-9 none)
    (a3-1 none)
    (a3-2 none)
    (a3-3 none)
    (a3-4 none)
    (a3-5 none)
    (a3-6 none)
    (t0-0 none)
    (t0-1 none)
    (t0-2 none)
    (t0-3 none)
    (t0-4 none)
    (t0-5 none)
    (t0-6 none)
    (t0-7 none)
    (t9-0 (function none))
    (t9-1 (function object :behavior camera-slave))
    (t9-2 function)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (t9-12 none)
    (t9-13 none)
    (t9-14 none)
    (t9-15 none)
    (t9-16 none)
    (t9-17 none)
    (t9-18 none)
    (t9-19 none)
    (t9-20 none)
    (gp-0 none)
    (gp-1 none)
    (gp-2 none)
    (sp-0 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    (f0-4 none)
    (f0-5 none)
    (f0-6 none)
    (f0-7 none)
    (f0-8 none)
    (f0-9 none)
    (f0-10 none)
    (f0-11 none)
    (f0-12 none)
    (f0-13 none)
    (f0-14 none)
    (f0-15 none)
    (f1-0 none)
    (f1-1 none)
    (f1-2 none)
    (f1-3 none)
    (f1-4 none)
    (f30-0 none)
    )
  (cond
    ((begin
       (when (begin
               (when (begin
                       (when (begin (set! v1-0 *debug-segment*) v1-0)
                         (set! t9-0 cam-debug-reset-coll-tri)
                         (call!)
                         (set! v1-2 v0-0)
                         )
                       (set! t9-1 cam-string-follow)
                       (call!)
                       (set! v1-3 (-> s6-0 options))
                       (set! v1-4 (logand v1-3 512))
                       (nonzero? v1-4)
                       )
                 (set! t9-2 cam-string-line-of-sight)
                 (call!)
                 (set! v1-6 (the-as none v0-2))
                 )
               (when (begin (set! t9-3 (the-as none paused?)) (set! v0-3 (the-as none (call!))) (not v0-3))
                 (set! t9-4 (the-as none cam-string-joystick))
                 (call!)
                 (set! v1-8 (the-as none v0-4))
                 )
               (set! gp-0 (the-as none (+ sp-0 16)))
               (s.q! gp-0 0)
               (set! t9-5 (the-as none vector--float*!))
               (set! a0-0 (the-as none gp-0))
               (set! a1-0 (the-as none (+ s6-0 524)))
               (set! v1-9 (the-as none *camera*))
               (set! a2-0 (the-as none (+ v1-9 284)))
               (set! v1-10 (the-as none *camera*))
               (set! v1-11 (the-as none (l.wu (+ v1-10 128))))
               (set! f0-0 (the-as none (l.f (+ v1-11 196))))
               (set! f1-0 (the-as none (l.f (+ s6-0 480))))
               (set! f0-1 (the-as none (+.s f0-0 f1-0)))
               (set! a3-0 (the-as none (fpr->gpr f0-1)))
               (call!)
               (set! v1-12 (the-as none (+ s6-0 2332)))
               (set! a0-1 (the-as none *camera*))
               (set! a0-2 (the-as none (+ a0-1 524)))
               (set! v1-13 (the-as none (vector+!2 v1-12 a0-2 gp-0)))
               (set! f0-2 (the-as none (l.f (+ s6-0 2336))))
               (set! v1-14 (the-as none *camera*))
               (set! v1-15 (the-as none (l.wu (+ v1-14 128))))
               (set! f1-1 (the-as none (l.f (+ v1-15 72))))
               (set! f0-3 (the-as none (min.s f0-2 f1-1)))
               (s.f! (+ s6-0 2336) f0-3)
               (set! v1-16 (the-as none (fpr->gpr f0-3)))
               (set! v1-17 (the-as none (l.wu (+ s6-0 2276))))
               (set! v1-18 (the-as none (logand v1-17 64)))
               (nonzero? v1-18)
               )
         (set! t9-6 (the-as none cam-string-find-hidden))
         (call!)
         (set! v1-20 (the-as none v0-6))
         )
       (set! v1-21 (the-as none (l.wu (+ s6-0 2276))))
       (set! v1-22 (the-as none (logand v1-21 4096)))
       (nonzero? v1-22)
       )
     (when (begin
             (when (begin (set! v1-23 (the-as none *debug-segment*)) v1-23)
               (set! a1-1 (the-as none (+ sp-0 32)))
               (set! a2-1 (the-as none a1-1))
               (set! v1-25 (the-as none (+ s6-0 2364)))
               (set! a0-3 (the-as none (+ s6-0 556)))
               (set! a2-2 (the-as none (vector-!2 a2-1 v1-25 a0-3)))
               (set! t9-7 (the-as none cam-collision-record-save))
               (set! a0-4 (the-as none (+ s6-0 556)))
               (set! a2-3 (the-as none -2))
               (set! a3-1 (the-as none 'jump))
               (set! t0-0 (the-as none s6-0))
               (call!)
               (set! v1-26 (the-as none v0-7))
               )
             (set! v1-27 (the-as none -4097))
             (set! a0-5 (the-as none (l.wu (+ s6-0 2276))))
             (set! v1-28 (the-as none (logand v1-27 a0-5)))
             (s.w! (+ s6-0 2276) v1-28)
             (set! v1-29 (the-as none (+ s6-0 2332)))
             (set! a0-6 (the-as none (+ s6-0 2364)))
             (set! a0-7 (the-as none (l.q a0-6)))
             (s.q! v1-29 a0-7)
             (set! t9-8 (the-as none cam-string-move))
             (call!)
             (set! a0-8 (the-as none (+ s6-0 524)))
             (set! v1-30 (the-as none (+ s6-0 556)))
             (set! a1-2 (the-as none *camera*))
             (set! a1-3 (the-as none (+ a1-2 524)))
             (set! a0-9 (the-as none (vector-!2 a0-8 v1-30 a1-3)))
             (set! t9-9 (the-as none vector-flatten!))
             (set! a0-10 (the-as none (+ s6-0 524)))
             (set! a1-4 (the-as none (+ s6-0 524)))
             (set! v1-31 (the-as none *camera*))
             (set! a2-4 (the-as none (+ v1-31 284)))
             (call!)
             (set! v1-32 (the-as none (+ s6-0 524)))
             (set! v1-33 (the-as none (veclength v1-32)))
             (set! f0-4 (the-as none (gpr->fpr v1-33)))
             (set! f1-2 (the-as none (l.f (+ s6-0 508))))
             (<.s f0-4 f1-2)
             )
       (s.f! (+ s6-0 508) f0-4)
       (set! v1-35 (the-as none (fpr->gpr f0-4)))
       )
     )
    (else
      (set! t9-10 (the-as none cam-string-move))
      (call!)
      (set! v1-36 (the-as none v0-10))
      )
    )
  (set! a0-11 (the-as none (+ s6-0 572)))
  (set! v1-37 (the-as none tracking-spline))
  (set! t9-11 (the-as none (l.wu (+ v1-37 84))))
  (set! a1-5 (the-as none (+ s6-0 556)))
  (set! a2-5 (the-as none #x3d27c5ac))
  (set! a3-2 (the-as none #x45800000))
  (set! t0-1 (the-as none #t))
  (call!)
  (set! v1-38 (the-as none v0-11))
  (set! v1-39 (the-as none (l.wu (+ s6-0 8))))
  (set! f30-0 (the-as none (l.f (+ v1-39 8))))
  (set! gp-1 (the-as none 2))
  (set! v1-40 (the-as none #x3f000000))
  (set! f0-5 (the-as none (gpr->fpr v1-40)))
  (set! v1-41 (the-as none (l.wu (+ s6-0 8))))
  (set! f1-3 (the-as none (l.f (+ v1-41 84))))
  (set! f0-6 (the-as none (+.s f0-5 f1-3)))
  (set! f0-7 (the-as none (f2i f0-6)))
  (set! v1-42 (the-as none (fpr->gpr f0-7)))
  (set! gp-2 (the-as none (max.si gp-1 v1-42)))
  (set! a0-12 (the-as none (l.wu (+ s6-0 8))))
  (set! v1-43 (the-as none (l.wu (+ a0-12 -4))))
  (set! t9-12 (the-as none (l.wu (+ v1-43 52))))
  (set! f0-8 (the-as none (gpr->fpr gp-2)))
  (set! f0-9 (the-as none (i2f f0-8)))
  (set! f0-10 (the-as none (/.s f30-0 f0-9)))
  (set! a1-6 (the-as none (fpr->gpr f0-10)))
  (call!)
  (set! v1-44 (the-as none v0-12))
  (while (nonzero? gp-2)
    (cond
      ((begin (set! gp-2 (the-as none (+ gp-2 -1))) (set! v1-45 (the-as none (l.wu (+ s6-0 2292)))) v1-45)
       (if (begin
             (if (begin
                   (set! a0-13 (the-as none (+ s6-0 572)))
                   (set! v1-46 (the-as none tracking-spline))
                   (set! t9-13 (the-as none (l.wu (+ v1-46 100))))
                   (set! a1-7 (the-as none (+ s6-0 124)))
                   (set! a2-6 (the-as none #x4323d70a))
                   (set! a3-3 (the-as none #x46000000))
                   (set! t0-2 (the-as none #x3dcccccd))
                   (call!)
                   (set! v1-47 (the-as none v0-13))
                   (set! a1-8 (the-as none (+ sp-0 48)))
                   (set! v1-48 (the-as none s6-0))
                   v1-48
                   )
                 (set! a0-14 (the-as none (l.wu (+ v1-48 24))))
                 )
             (s.w! (+ a1-8 8) a0-14)
             (s.w! (+ a1-8 68) 0)
             (set! v1-49 (the-as none 'fast-rot))
             (s.w! (+ a1-8 64) v1-49)
             (set! t9-14 (the-as none send-event-function))
             (set! a0-15 (the-as none *camera-combiner*))
             (call!)
             (set! v1-50 (the-as none v0-14))
             (set! f0-11 (the-as none (l.f (+ s6-0 2108))))
             (set! v1-51 (the-as none #x45800000))
             (set! f1-4 (the-as none (gpr->fpr v1-51)))
             (<.s f0-11 f1-4)
             )
           (s.w! (+ s6-0 2292) #f)
           )
       )
      (else
        (cond
          ((begin
             (set! v1-54 (the-as none #x100000))
             (set! a0-16 (the-as none *camera*))
             (set! a0-17 (the-as none (l.wu (+ a0-16 128))))
             (set! a0-18 (the-as none (l.d (+ a0-17 112))))
             (set! v1-55 (the-as none (logand v1-54 a0-18)))
             (nonzero? v1-55)
             )
           (set! a0-19 (the-as none (+ s6-0 572)))
           (set! v1-56 (the-as none tracking-spline))
           (set! t9-15 (the-as none (l.wu (+ v1-56 100))))
           (set! a1-9 (the-as none (+ s6-0 124)))
           (set! a2-7 (the-as none #x45800000))
           (set! a3-4 (the-as none #x47200000))
           (set! t0-3 (the-as none #x3dcccccd))
           (call!)
           (set! v1-57 (the-as none v0-15))
           )
          (else
            (and (begin
                   (set! v1-58 (the-as none *camera*))
                   (set! v1-59 (the-as none (l.wu (+ v1-58 128))))
                   (set! v1-60 (the-as none (l.d (+ v1-59 112))))
                   (set! v1-61 (the-as none (logand v1-60 8192)))
                   (nonzero? v1-61)
                   )
                 (begin
                   (set! v1-63 (the-as none #t))
                   (set! a0-20 (the-as none (l.wu (+ s6-0 2276))))
                   (set! a0-21 (the-as none (logand a0-20 256)))
                   (cmove-#f-zero v1-62 a0-21 v1-63)
                   )
                 )
            (cond
              (v1-62
                (set! a0-22 (the-as none (+ s6-0 572)))
                (set! v1-64 (the-as none tracking-spline))
                (set! t9-16 (the-as none (l.wu (+ v1-64 100))))
                (set! a1-10 (the-as none (+ s6-0 124)))
                (set! a2-8 (the-as none #x42cccccd))
                (set! a3-5 (the-as none #x45800000))
                (set! t0-4 (the-as none #x3dcccccd))
                (call!)
                (set! v1-65 (the-as none v0-16))
                )
              ((begin
                 (set! v1-66 (the-as none *camera*))
                 (set! v1-67 (the-as none (l.wu (+ v1-66 128))))
                 (set! v1-68 (the-as none (l.d (+ v1-67 112))))
                 (set! v1-69 (the-as none (logand v1-68 8192)))
                 (nonzero? v1-69)
                 )
               (set! a0-23 (the-as none (+ s6-0 572)))
               (set! v1-70 (the-as none tracking-spline))
               (set! t9-17 (the-as none (l.wu (+ v1-70 100))))
               (set! a1-11 (the-as none (+ s6-0 124)))
               (set! a2-9 (the-as none #x4223d70a))
               (set! a3-6 (the-as none #x45800000))
               (set! t0-5 (the-as none #x3dcccccd))
               (call!)
               (set! v1-71 (the-as none v0-17))
               )
              ((begin
                 (set! v1-72 (the-as none (l.wu (+ s6-0 2276))))
                 (set! v1-73 (the-as none (logand v1-72 256)))
                 (nonzero? v1-73)
                 )
               (set! a0-24 (the-as none (+ s6-0 572)))
               (set! v1-74 (the-as none tracking-spline))
               (set! t9-18 (the-as none (l.wu (+ v1-74 100))))
               (set! a1-12 (the-as none (+ s6-0 124)))
               (set! v1-75 (the-as none *camera*))
               (set! v1-76 (the-as none (l.wu (+ v1-75 128))))
               (set! f0-12 (the-as none (l.f (+ v1-76 140))))
               (set! a2-10 (the-as none (fpr->gpr f0-12)))
               (set! v1-77 (the-as none *camera*))
               (set! v1-78 (the-as none (l.wu (+ v1-77 128))))
               (set! f0-13 (the-as none (l.f (+ v1-78 136))))
               (set! a3-7 (the-as none (fpr->gpr f0-13)))
               (set! t0-6 (the-as none #x3dcccccd))
               (call!)
               (set! v1-79 (the-as none v0-18))
               )
              (else
                (set! a0-25 (the-as none (+ s6-0 572)))
                (set! v1-80 (the-as none tracking-spline))
                (set! t9-19 (the-as none (l.wu (+ v1-80 100))))
                (set! a1-13 (the-as none (+ s6-0 124)))
                (set! v1-81 (the-as none *camera*))
                (set! v1-82 (the-as none (l.wu (+ v1-81 128))))
                (set! f0-14 (the-as none (l.f (+ v1-82 132))))
                (set! a2-11 (the-as none (fpr->gpr f0-14)))
                (set! v1-83 (the-as none *camera*))
                (set! v1-84 (the-as none (l.wu (+ v1-83 128))))
                (set! f0-15 (the-as none (l.f (+ v1-84 128))))
                (set! a3-8 (the-as none (fpr->gpr f0-15)))
                (set! t0-7 (the-as none #x3dcccccd))
                (call!)
                (set! v1-85 (the-as none v0-19))
                )
              )
            )
          )
        )
      )
    )
  (set! a0-26 (the-as none (l.wu (+ s6-0 8))))
  (set! v1-88 (the-as none (l.wu (+ a0-26 -4))))
  (set! t9-20 (the-as none (l.wu (+ v1-88 52))))
  (set! a1-14 (the-as none (fpr->gpr f30-0)))
  (set! v0-20 (the-as none (call!)))
  (ret-value v0-20)
  )

;; definition for function set-string-params
;; INFO: Used lq/sq
(defbehavior set-string-params camera-slave ()
  (when (not (or (-> self string-val-locked) (logtest? #x40000 (-> self options))))
    (set! (-> self string-min-val quad) (-> *camera* string-min value quad))
    (let ((v0-0 (-> self string-max-val)))
      (set! (-> v0-0 quad) (-> *camera* string-max value quad))
      v0-0
      )
    )
  )

;; failed to figure out what this is:
(defstate cam-string (camera-slave)
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (local-vars (v0-0 none))
    (let ((v1-0 arg2))
      (the-as
        object
        (cond
          ((= v1-0 'get-behind)
           (set! (-> self butt-timer) (the-as uint (+ (-> self clock frame-counter) (seconds 0.25))))
           (set! (-> self butt-seek) (the-as basic #t))
           (set! v0-0 (the-as none (-> self butt-vector)))
           (set! (-> (the-as vector v0-0) quad) (-> (the-as vector (-> arg3 param 0)) quad))
           v0-0
           )
          ((= v1-0 'teleport)
           (let ((gp-0 (new-stack-vector0)))
             (cam-string-find-position-rel! gp-0)
             (cam-string-set-position-rel! gp-0)
             )
           )
          ((= v1-0 'joystick)
           (set! (-> self phony-joystick-x) (the-as float (-> arg3 param 0)))
           (set! (-> self phony-joystick-y) (the-as float (-> arg3 param 1)))
           (set! v0-0 (the-as none #t))
           (set! (-> self have-phony-joystick) (the-as basic v0-0))
           v0-0
           )
          ((= v1-0 'tween-dist)
           (cond
             ((-> arg3 param 0)
              (set! (-> self string-val-locked) (the-as basic #t))
              (let ((s5-0 (the-as object (-> arg3 param 0)))
                    (gp-1 (the-as object (-> arg3 param 1)))
                    )
                (if (!= (-> (the-as vector s5-0) y) 4095996000.0)
                    (seek!
                      (-> self string-min-val y)
                      (-> (the-as vector s5-0) y)
                      (* (-> (the-as vector s5-0) w) (-> self clock seconds-per-frame))
                      )
                    )
                (if (!= (-> (the-as vector s5-0) z) 4095996000.0)
                    (seek!
                      (-> self string-min-val z)
                      (-> (the-as vector s5-0) z)
                      (* (-> (the-as vector s5-0) w) (-> self clock seconds-per-frame))
                      )
                    )
                (if (!= (-> (the-as vector gp-1) y) 4095996000.0)
                    (seek!
                      (-> self string-max-val y)
                      (-> (the-as vector gp-1) y)
                      (* (-> (the-as vector gp-1) w) (-> self clock seconds-per-frame))
                      )
                    )
                (if (!= (-> (the-as vector gp-1) z) 4095996000.0)
                    (seek!
                      (-> self string-max-val z)
                      (-> (the-as vector gp-1) z)
                      (* (-> (the-as vector gp-1) w) (-> self clock seconds-per-frame))
                      )
                    )
                )
              (set! (-> self string-max-val x) (fmax (-> self string-max-val x) (-> self string-min-val x)))
              (set! (-> self string-max-val y) (fmax (-> self string-max-val y) (-> self string-min-val y)))
              (let ((f0-31 (fmax (-> self string-max-val z) (-> self string-min-val z))))
                (set! (-> self string-max-val z) f0-31)
                f0-31
                )
              )
             (else
               (set! (-> self string-val-locked) #f)
               #f
               )
             )
           )
          ((= v1-0 'set-dist)
           (cond
             ((-> arg3 param 0)
              (set! (-> self string-val-locked) (the-as basic #t))
              (set! (-> self string-min-val quad) (-> (the-as vector (-> arg3 param 0)) quad))
              (set! (-> self string-max-val quad) (-> (the-as vector (-> arg3 param 1)) quad))
              (set! (-> self string-max-val x) (fmax (-> self string-max-val x) (-> self string-min-val x)))
              (set! (-> self string-max-val y) (fmax (-> self string-max-val y) (-> self string-min-val y)))
              (let ((f0-37 (fmax (-> self string-max-val z) (-> self string-min-val z))))
                (set! (-> self string-max-val z) f0-37)
                f0-37
                )
              )
             (else
               (set! (-> self string-val-locked) #f)
               #f
               )
             )
           )
          ((= v1-0 'relative-position)
           (cond
             ((-> arg3 param 0)
              (set! (-> self string-val-locked) (the-as basic #t))
              (set! (-> self string-relative) (the-as basic #t))
              (set! v0-0 (the-as none (-> self relative-position)))
              (set! (-> (the-as vector v0-0) quad) (-> (the-as vector (-> arg3 param 0)) quad))
              v0-0
              )
             (else
               (set! (-> self string-val-locked) #f)
               (set! (-> self string-relative) #f)
               #f
               )
             )
           )
          ((= v1-0 'set-max-angle-offset)
           (let ((f0-38 (the-as float (-> arg3 param 0))))
             (set! (-> self max-angle-offset) f0-38)
             f0-38
             )
           )
          ((= v1-0 'blocked-side?)
           (-> self los-state)
           )
          (else
            (cam-standard-event-handler arg0 arg1 arg2 arg3)
            )
          )
        )
      )
    )
  :enter (behavior ()
    (local-vars (t0-0 none) (t1-0 none) (t2-0 none) (t3-0 none))
    (when (not (-> self enter-has-run))
      (if (-> self cam-entity)
          (logior! (-> self options) (cam-slave-get-flags (-> self cam-entity) 'flags))
          )
      (vector-reset! (-> self joystick-saved-view-off))
      (set-string-params)
      (set! (-> self string-vel-dir) (the-as uint 0))
      (set! (-> self fov) 11650.845)
      (set! (-> self los-tgt-spline-pt) (-> *camera* target-spline end-point))
      (set! (-> self los-tgt-spline-pt-incarnation)
            (-> *camera* target-spline point (-> self los-tgt-spline-pt) incarnation)
            )
      (set! (-> self min-z-override) (-> self string-max-val z))
      (if (!= (-> *camera* outro-t-step) 0.0)
          (set! (-> self min-z-override) (-> self string-min-val z))
          )
      (let ((gp-1 (new-stack-vector0)))
        0.0
        (set! (-> self view-off-param) (-> *camera* view-off-param-save))
        (set! (-> self view-off x) 0.0)
        (let ((f0-7 (-> self string-min-val y))
              (f1-1 (-> self string-max-val y))
              )
          (set! (-> self view-off y) (lerp f0-7 f1-1 (-> self view-off-param)))
          )
        (set! (-> self view-off z)
              (lerp (-> self string-min-val z) (-> self string-max-val z) (-> self view-off-param))
              )
        (let ((f30-0
                (cond
                  ((!= (-> *camera* outro-t-step) 0.0)
                   (curve-get-pos! gp-1 (-> *camera* outro-exit-value) (-> *camera* outro-curve))
                   (vector-! gp-1 gp-1 (-> *camera* tpos-curr-adj))
                   (vector-flatten! (-> self view-flat) gp-1 (-> *camera* local-down))
                   (vector-length (-> self view-flat))
                   )
                  ((-> *camera* settings string-use-startup-vector)
                   (vector-flatten! (-> self view-flat) (-> *camera* settings string-startup-vector) (-> *camera* local-down))
                   (vector-length (-> self view-flat))
                   )
                  (else
                    (vector-flatten! (-> self view-flat) (the-as vector (&-> self stack 112)) (-> *camera* local-down))
                    (vector-negate! (-> self view-flat) (-> self view-flat))
                    (-> self view-off z)
                    )
                  )
                )
              )
          (let ((f1-4 (fmin (-> *camera* string-push-z) (-> self min-z-override)))
                (f0-17 (-> self view-off z))
                )
            (cond
              ((< f30-0 f1-4)
               (set! f30-0 f1-4)
               )
              ((< f0-17 f30-0)
               (set! f30-0 f0-17)
               )
              )
            )
          (vector-normalize! (-> self view-flat) f30-0)
          (let ((f30-1 (/ (- f30-0 (-> self string-min-val z)) (- (-> self string-max-val z) (-> self string-min-val z)))))
            (if (< 1.0 f30-1)
                (set! f30-1 1.0)
                )
            (if (< f30-1 0.0)
                (set! f30-1 0.0)
                )
            (let ((f0-22 (-> self string-min-val y))
                  (f1-7 (-> self string-max-val y))
                  )
              (set! (-> self view-off y) (lerp f0-22 f1-7 f30-1))
              )
            (set! (-> self view-off z) (lerp (-> self string-min-val z) (-> self string-max-val z) f30-1))
            )
          )
        )
      (vector--float*!
        (-> self desired-pos)
        (-> self view-flat)
        (-> *camera* local-down)
        (+ (-> *camera* settings target-height) (-> self view-off y))
        )
      (vector+! (-> self desired-pos) (-> self desired-pos) (-> *camera* tpos-curr-adj))
      (set! (-> self string-trans quad) (-> self desired-pos quad))
      (vector-reset! (-> self velocity))
      (let* ((gp-2 (new 'stack-no-clear 'collide-query))
             (t9-13 vector--float*!)
             (a0-20 (-> gp-2 start-pos))
             (a1-17 (-> *camera* tpos-curr-adj))
             (a2-9 (-> *camera* local-down))
             (a3-1 (-> *camera* settings target-height))
             )
        (t9-13 a0-20 a1-17 a2-9 a3-1)
        (vector-! (-> gp-2 move-dist) (-> self string-trans) (-> gp-2 start-pos))
        (let ((s5-0 gp-2))
          (set! (-> s5-0 radius) (-> *CAMERA-bank* collide-move-rad))
          (set! (-> s5-0 collide-with) (collide-spec backgnd obstacle hit-by-others-list camera-blocker pusher))
          (set! (-> s5-0 ignore-process0) #f)
          (set! (-> s5-0 ignore-process1) #f)
          (set! (-> s5-0 ignore-pat) (the-as pat-surface (camera-master-method-16 *camera* #f)))
          (set! (-> s5-0 action-mask) (the-as uint 1))
          )
        (let ((f0-31 (fill-and-probe-using-line-sphere
                       *collide-cache*
                       (the-as vector gp-2)
                       a2-9
                       (the-as float a3-1)
                       (the-as collide-spec t0-0)
                       (the-as process t1-0)
                       (the-as collide-tri-result t2-0)
                       (the-as pat-surface t3-0)
                       )
                     )
              )
          (when (and (< 0.0 f0-31) (< f0-31 1.0))
            (vector-float*! (-> gp-2 move-dist) (-> gp-2 move-dist) f0-31)
            (vector-flatten! (-> self view-flat) (-> gp-2 move-dist) (-> *camera* local-down))
            (let ((f0-32 (vector-length (-> self view-flat))))
              (cond
                ((< f0-32 8192.0)
                 (let ((gp-3 (new-stack-vector0)))
                   (cam-string-find-position-rel! gp-3)
                   (cam-string-set-position-rel! gp-3)
                   )
                 )
                (else
                  (if (< f0-32 (-> self min-z-override))
                      (set! (-> self min-z-override) f0-32)
                      )
                  (let ((f30-2 (/ (- f0-32 (-> self string-min-val z)) (- (-> self string-max-val z) (-> self string-min-val z)))))
                    (if (< 1.0 f30-2)
                        (set! f30-2 1.0)
                        )
                    (if (< f30-2 0.0)
                        (set! f30-2 0.0)
                        )
                    (let ((f0-36 (-> self string-min-val y))
                          (f1-16 (-> self string-max-val y))
                          )
                      (set! (-> self view-off y) (lerp f0-36 f1-16 f30-2))
                      )
                    (set! (-> self view-off z) (lerp (-> self string-min-val z) (-> self string-max-val z) f30-2))
                    )
                  (vector--float*!
                    (-> self desired-pos)
                    (-> self view-flat)
                    (-> *camera* local-down)
                    (+ (-> *camera* settings target-height) (-> self view-off y))
                    )
                  (vector+! (-> self desired-pos) (-> self desired-pos) (-> *camera* tpos-curr-adj))
                  (set! (-> self string-trans quad) (-> self desired-pos quad))
                  (vector-reset! (-> self velocity))
                  )
                )
              )
            )
          )
        )
      (set! (-> self trans quad) (-> self string-trans quad))
      (set! (-> self los-last-pos quad) (-> self string-trans quad))
      (tracking-spline-method-10 (-> self position-spline) (-> self string-trans))
      (set! (-> self blend-from-type) (the-as uint 2))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
      )
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  :code (behavior ()
    (until #f
      (when (not (paused?))
        (set-string-params)
        (cam-string-code)
        (tracking-spline-method-9 (-> self position-spline))
        (set! (-> self have-phony-joystick) #f)
        )
      (suspend)
      )
    #f
    (none)
    )
  )

;; definition of type cam-stick-bank
(deftype cam-stick-bank (basic)
  ((max-z meters  :offset-assert   4)
   (min-z meters  :offset-assert   8)
   (max-y meters  :offset-assert  12)
   (min-y meters  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type cam-stick-bank
(defmethod inspect cam-stick-bank ((obj cam-stick-bank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tmax-z: (meters ~m)~%" (-> obj max-z))
  (format #t "~1Tmin-z: (meters ~m)~%" (-> obj min-z))
  (format #t "~1Tmax-y: (meters ~m)~%" (-> obj max-y))
  (format #t "~1Tmin-y: (meters ~m)~%" (-> obj min-y))
  (label cfg-4)
  obj
  )

;; definition for symbol *CAM_STICK-bank*, type cam-stick-bank
(define *CAM_STICK-bank*
  (new 'static 'cam-stick-bank :max-z (meters 30) :min-z (meters 5) :max-y (meters 15) :min-y (meters 2))
  )

;; definition for function cam-stick-code
;; ERROR: function has no type analysis. Cannot decompile.

;; failed to figure out what this is:
(defstate cam-stick (camera-slave)
  :event (the-as
    (function process int symbol event-message-block object :behavior camera-slave)
    cam-standard-event-handler
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set! (-> self view-off-param) (-> *camera* view-off-param-save))
      (set! (-> self view-off x) 0.0)
      (set! (-> self view-off y)
            (lerp (-> *CAM_STICK-bank* min-y) (-> *CAM_STICK-bank* max-y) (-> self view-off-param))
            )
      (set! (-> self view-off z)
            (lerp (-> *CAM_STICK-bank* min-z) (-> *CAM_STICK-bank* max-z) (-> self view-off-param))
            )
      (cam-calc-follow! (-> self tracking) (-> self trans) #f)
      (vector-flatten! (-> self view-flat) (the-as vector (&-> self stack 112)) (-> *camera* local-down))
      (vector-negate! (-> self view-flat) (-> self view-flat))
      (vector-normalize! (-> self view-flat) (-> self view-off z))
      (vector--float*! (-> self desired-pos) (-> self view-flat) (-> *camera* local-down) (-> self view-off y))
      (vector+! (-> self desired-pos) (-> self desired-pos) (-> self tracking follow-pt))
      (set! (-> self trans quad) (-> self desired-pos quad))
      (vector-reset! (-> self velocity))
      (set! (-> self blend-from-type) (the-as uint 2))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-2))
      (slave-set-rotation! (-> self tracking) (-> self trans) (the-as float (-> self options)) (-> self fov) #f)
      )
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (when (not (paused?))
      (when (zero? (logand (-> *camera* settings master-options) (cam-master-options IGNORE_ANALOG)))
        (let ((f0-0 (analog-input (the-as int (-> *cpad-list* cpads 0 righty)) 128.0 32.0 110.0 0.05)))
          (cond
            ((< (* 0.05 (- 1.0 (-> self view-off-param))) f0-0)
             (+! (-> self view-off-param) (* 0.05 (- 1.0 (-> self view-off-param))))
             )
            ((< f0-0 (* 0.05 (- (-> self view-off-param))))
             (+! (-> self view-off-param) (* 0.05 (- (-> self view-off-param))))
             )
            (else
              (+! (-> self view-off-param) f0-0)
              )
            )
          )
        )
      (set! (-> self view-off y)
            (lerp (-> *CAM_STICK-bank* min-y) (-> *CAM_STICK-bank* max-y) (-> self view-off-param))
            )
      (set! (-> self view-off z)
            (lerp (-> *CAM_STICK-bank* min-z) (-> *CAM_STICK-bank* max-z) (-> self view-off-param))
            )
      (when (zero? (logand (-> *camera* settings master-options) (cam-master-options IGNORE_ANALOG)))
        (let ((f0-16 (analog-input
                       (the-as int (-> *cpad-list* cpads 0 rightx))
                       128.0
                       32.0
                       110.0
                       (* 21845.334 (-> self clock seconds-per-frame))
                       )
                     )
              (gp-0 (new-stack-matrix0))
              (s3-0 (new-stack-vector0))
              (s5-0 (new-stack-vector0))
              (s4-0 (new-stack-vector0))
              )
          (cond
            ((!= f0-16 0.0)
             (matrix-axis-angle! gp-0 (-> *camera* local-down) f0-16)
             (vector-matrix*! (-> self view-flat) (-> self view-flat) gp-0)
             )
            ((logtest? (-> self options) 1)
             (set-vector! s5-0 0.0 0.0 1.0 1.0)
             (vector-normalize-copy! s5-0 (-> self view-flat) 1.0)
             (set! (-> s3-0 quad) (-> (the-as vector (&-> *camera* stack 256)) quad))
             (vector-flatten! s3-0 s3-0 (-> *camera* local-down))
             (vector-negate! s3-0 s3-0)
             (set! (-> s4-0 quad) (-> s5-0 quad))
             (vector-normalize-copy! s4-0 s3-0 1.0)
             (matrix-from-two-vectors-max-angle-partial!
               gp-0
               s5-0
               s4-0
               (* 10922.667 (-> self clock seconds-per-frame))
               0.05
               )
             (vector-matrix*! (-> self view-flat) (-> self view-flat) gp-0)
             )
            )
          )
        )
      )
    (none)
    )
  )

;; definition of type cam-bike-bank
(deftype cam-bike-bank (basic)
  ((max-z meters  :offset-assert   4)
   (min-z meters  :offset-assert   8)
   (max-y meters  :offset-assert  12)
   (min-y meters  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x14
  :flag-assert         #x900000014
  )

;; definition for method 3 of type cam-bike-bank
(defmethod inspect cam-bike-bank ((obj cam-bike-bank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tmin-z: (meters ~m)~%" (-> obj max-z))
  (format #t "~1Tmax-z: (meters ~m)~%" (-> obj min-z))
  (format #t "~1Tmin-y: (meters ~m)~%" (-> obj max-y))
  (format #t "~1Tmax-y: (meters ~m)~%" (-> obj min-y))
  (label cfg-4)
  obj
  )

;; definition for symbol *CAM_BIKE-bank*, type cam-bike-bank
(define *CAM_BIKE-bank*
  (new 'static 'cam-bike-bank :max-z (meters 6) :min-z (meters 10) :max-y (meters 3) :min-y (meters 5))
  )

;; definition for function cam-calc-bike-follow!
(defbehavior cam-calc-bike-follow! camera-slave ((arg0 cam-rotation-tracker) (arg1 vector) (arg2 symbol))
  (vector-float*! (-> arg0 follow-off) (the-as vector (&-> *camera* stack 320)) 155648.0)
  (vector+! (-> arg0 follow-pt) (-> *camera* tpos-curr-adj) (-> arg0 follow-off))
  (vector--float*!
    (-> arg0 follow-pt)
    (-> arg0 follow-pt)
    (-> *camera* local-down)
    (+ 12288.0 (-> *camera* settings target-height))
    )
  (-> arg0 follow-pt)
  )

;; definition for function cam-bike-code
;; ERROR: function has no type analysis. Cannot decompile.

;; failed to figure out what this is:
(defstate cam-bike (camera-slave)
  :event (the-as
    (function process int symbol event-message-block object :behavior camera-slave)
    cam-standard-event-handler
    )
  :enter (behavior ()
    (when (not (-> self enter-has-run))
      (set-setting! 'head-offset 'abs #x46800000 0)
      (set-setting! 'foot-offset 'abs #x45800000 0)
      (set! (-> self view-off x) 0.0)
      (set! (-> self view-off y) (-> *CAM_BIKE-bank* max-y))
      (set! (-> self view-off z) (-> *CAM_BIKE-bank* max-z))
      (vector-flatten! (-> self view-flat) (the-as vector (&-> self stack 112)) (-> *camera* local-down))
      (vector-negate! (-> self view-flat) (-> self view-flat))
      (vector-normalize! (-> self view-flat) (-> self view-off z))
      (vector--float*! (-> self desired-pos) (-> self view-flat) (-> *camera* local-down) (-> self view-off y))
      (vector+! (-> self desired-pos) (-> self desired-pos) (-> *camera* tpos-curr-adj))
      (set! (-> self trans quad) (-> self desired-pos quad))
      (vector-reset! (-> self velocity))
      (set! (-> self blend-from-type) (the-as uint 0))
      (set! (-> self blend-to-type) (camera-blend-to-type unknown-1))
      (cam-calc-bike-follow! (-> self tracking) (-> self trans) #f)
      (slave-set-rotation! (-> self tracking) (-> self trans) (the-as float (-> self options)) (-> self fov) #f)
      )
    (none)
    )
  :exit (behavior ()
    (remove-setting! 'head-offset)
    (remove-setting! 'foot-offset)
    (none)
    )
  :trans (behavior ()
    (if (zero? (logand (-> *camera* master-options) 1))
        (cam-slave-go cam-free-floating)
        )
    (none)
    )
  )
