;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *generate-actor-vis*, type symbol
(define *generate-actor-vis* #f)

;; definition for symbol *generate-actor-vis-start*, type symbol
(define *generate-actor-vis-start* #f)

;; definition for symbol *generate-actor-vis-output*, type symbol
(define *generate-actor-vis-output* #f)

;; definition of type entity-perm
(deftype entity-perm (structure)
  ((user-object object             2 :offset-assert   0)
   (user-uint64 uint64               :offset          0)
   (user-float  float              2 :offset          0)
   (user-int32  int32              2 :offset          0)
   (user-uint32 uint32             2 :offset          0)
   (user-int16  int16              4 :offset          0)
   (user-uint16 uint16             4 :offset          0)
   (user-int8   int8               8 :offset          0)
   (user-uint8  uint8              8 :offset          0)
   (status      entity-perm-status   :offset          8)
   (dummy       uint8              1 :offset         10)
   (task        uint8                :offset         11)
   (aid         actor-id             :offset         12)
   (quad        uint128              :offset          0)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (entity-perm-method-9 () none 9)
    )
  )

;; definition for method 3 of type entity-perm
;; INFO: Used lq/sq
(defmethod inspect entity-perm ((obj entity-perm))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'entity-perm)
  (format #t "~1Tuser-object[2] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-uint64: ~D~%" (-> obj user-uint64))
  (format #t "~1Tuser-float[2] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-int32[2] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-uint32[2] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-int16[4] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-uint16[4] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-int8[8] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tuser-uint8[8] @ #x~X~%" (-> obj user-object))
  (format #t "~1Tstatus: ~D~%" (-> obj status))
  (format #t "~1Tdummy[1] @ #x~X~%" (-> obj dummy))
  (format #t "~1Ttask: ~D~%" (-> obj task))
  (format #t "~1Taid: ~D~%" (-> obj aid))
  (format #t "~1Tquad: ~D~%" (-> obj quad))
  (label cfg-4)
  obj
  )

;; definition of type entity-links
(deftype entity-links (structure)
  ((prev-link entity-links         :offset-assert   0)
   (next-link entity-links         :offset-assert   4)
   (entity    entity               :offset-assert   8)
   (process   process              :offset-assert  12)
   (level     level                :offset-assert  16)
   (vis-id    int32                :offset-assert  20)
   (kill-mask task-mask            :offset-assert  24)
   (vis-dist  meters               :offset-assert  28)
   (trans     vector       :inline :offset-assert  32)
   (perm      entity-perm  :inline :offset-assert  48)
   (status    uint16               :offset         56)
   (aid       uint32               :offset         60)
   (task      uint8                :offset         59)
   )
  :method-count-assert 10
  :size-assert         #x40
  :flag-assert         #xa00000040
  (:methods
    (entity-links-method-9 () none 9)
    )
  )

;; definition for method 3 of type entity-links
(defmethod inspect entity-links ((obj entity-links))
  (when (not obj)
    (set! obj obj)
    (goto cfg-42)
    )
  (format #t "[~8x] ~A~%" obj 'entity-links)
  (format #t "~1Tprev-link: #<entity-links @ #x~X>~%" (-> obj prev-link))
  (format #t "~1Tnext-link: #<entity-links @ #x~X>~%" (-> obj next-link))
  (format #t "~1Tentity: ~A~%" (-> obj entity))
  (format #t "~1Tprocess: ~A~%" (-> obj process))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tvis-id: ~D~%" (-> obj vis-id))
  (format #t "~1Tkill-mask: #x~X : (task-mask " (-> obj kill-mask))
  (let ((s5-0 (-> obj kill-mask)))
    (if (= (logand s5-0 (task-mask task0)) (task-mask task0))
        (format #t "task0 ")
        )
    (if (= (logand s5-0 (task-mask task2)) (task-mask task2))
        (format #t "task2 ")
        )
    (if (= (logand s5-0 (task-mask task4)) (task-mask task4))
        (format #t "task4 ")
        )
    (if (= (logand s5-0 (task-mask task6)) (task-mask task6))
        (format #t "task6 ")
        )
    (if (= (logand s5-0 (task-mask ctywide)) (task-mask ctywide))
        (format #t "ctywide ")
        )
    (if (= (logand s5-0 (task-mask never)) (task-mask never))
        (format #t "never ")
        )
    (if (= (logand (task-mask movie1) s5-0) (task-mask movie1))
        (format #t "movie1 ")
        )
    (if (= (logand s5-0 (task-mask dummy1)) (task-mask dummy1))
        (format #t "dummy1 ")
        )
    (if (= (logand s5-0 (task-mask primary0)) (task-mask primary0))
        (format #t "primary0 ")
        )
    (if (= (logand s5-0 (task-mask task1)) (task-mask task1))
        (format #t "task1 ")
        )
    (if (= (logand s5-0 (task-mask task3)) (task-mask task3))
        (format #t "task3 ")
        )
    (if (= (logand s5-0 (task-mask task5)) (task-mask task5))
        (format #t "task5 ")
        )
    (if (= (logand s5-0 (task-mask task7)) (task-mask task7))
        (format #t "task7 ")
        )
    (if (= (logand (task-mask movie2) s5-0) (task-mask movie2))
        (format #t "movie2 ")
        )
    (if (= (logand s5-0 (task-mask dummy2)) (task-mask dummy2))
        (format #t "dummy2 ")
        )
    (if (= (logand s5-0 (task-mask done)) (task-mask done))
        (format #t "done ")
        )
    (if (= (logand s5-0 (task-mask special)) (task-mask special))
        (format #t "special ")
        )
    (if (= (logand (task-mask movie0) s5-0) (task-mask movie0))
        (format #t "movie0 ")
        )
    (if (= (logand s5-0 (task-mask dummy0)) (task-mask dummy0))
        (format #t "dummy0 ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tvis-dist: (meters ~m)~%" (-> obj vis-dist))
  (format #t "~1Ttrans: ~`vector`P~%" (-> obj trans))
  (format #t "~1Tperm: ~`entity-perm`P~%" (-> obj perm))
  (format #t "~1Tstatus: ~D~%" (-> obj perm status))
  (format #t "~1Taid: ~D~%" (-> obj perm aid))
  (format #t "~1Ttask: ~D~%" (-> obj perm task))
  (label cfg-42)
  obj
  )

;; definition of type entity-perm-array
(deftype entity-perm-array (inline-array-class)
  ((data entity-perm :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type entity-perm-array
(defmethod inspect entity-perm-array ((obj entity-perm-array))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(set! (-> entity-perm-array heap-base) (the-as uint 16))

;; definition of type entity-links-array
(deftype entity-links-array (inline-array-class)
  ((data entity-links :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type entity-links-array
(defmethod inspect entity-links-array ((obj entity-links-array))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(set! (-> entity-links-array heap-base) (the-as uint 64))

;; definition of type entity
(deftype entity (res-lump)
  ((trans vector :inline :offset-assert  32)
   (aid   uint32         :offset-assert  48)
   )
  :method-count-assert 27
  :size-assert         #x34
  :flag-assert         #x1b00000034
  (:methods
    (entity-method-22 () none 22)
    (entity-method-23 () none 23)
    (entity-method-24 () none 24)
    (entity-method-25 () none 25)
    (entity-method-26 () none 26)
    )
  )

;; definition of type entity-camera
(deftype entity-camera (entity)
  ((connect connectable :inline :offset-assert  64)
   )
  :method-count-assert 27
  :size-assert         #x50
  :flag-assert         #x1b00000050
  )

;; definition of type entity-nav-mesh
(deftype entity-nav-mesh (entity)
  ((nav-mesh nav-mesh  :offset-assert  52)
   )
  :method-count-assert 29
  :size-assert         #x38
  :flag-assert         #x1d00000038
  (:methods
    (entity-nav-mesh-method-27 () none 27)
    (entity-nav-mesh-method-28 () none 28)
    )
  )

;; definition of type entity-race-mesh
(deftype entity-race-mesh (entity)
  ((race-mesh race-mesh  :offset-assert  52)
   )
  :method-count-assert 29
  :size-assert         #x38
  :flag-assert         #x1d00000038
  (:methods
    (entity-race-mesh-method-27 () none 27)
    (entity-race-mesh-method-28 () none 28)
    )
  )

;; definition of type entity-actor
(deftype entity-actor (entity)
  ((etype     type               :offset         56)
   (task      game-task          :offset-assert  60)
   (kill-mask task-mask          :offset         52)
   (vis-id    int16              :offset-assert  62)
   (quat      quaternion :inline :offset-assert  64)
   )
  :method-count-assert 33
  :size-assert         #x50
  :flag-assert         #x2100000050
  (:methods
    (next-actor (_type_) entity-actor 27)
    (prev-actor (_type_) entity-actor 28)
    (entity-actor-method-29 () none 29)
    (entity-actor-method-30 () none 30)
    (entity-actor-method-31 () none 31)
    (entity-actor-method-32 () none 32)
    )
  )

;; definition of type actor-reference
(deftype actor-reference (structure)
  ((actor basic   :offset-assert   0)
   (id    uint32  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type actor-reference
(defmethod inspect actor-reference ((obj actor-reference))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'actor-reference)
  (format #t "~1Tactor: ~A~%" (-> obj actor))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (label cfg-4)
  obj
  )

;; definition of type actor-group
(deftype actor-group (inline-array-class)
  ((data actor-reference :inline :dynamic :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type actor-group
(defmethod inspect actor-group ((obj actor-group))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tlength: ~D~%" (-> obj length))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> obj data))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
(set! (-> actor-group heap-base) (the-as uint 8))

;; definition of type entity-info
(deftype entity-info (basic)
  ((ptype     type    :offset-assert   4)
   (package   string  :offset-assert   8)
   (art-group pair    :offset-assert  12)
   (pool      symbol  :offset-assert  16)
   (heap-size int32   :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type entity-info
(defmethod inspect entity-info ((obj entity-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tptype: ~A~%" (-> obj ptype))
  (format #t "~1Tpackage: ~A~%" (-> obj package))
  (format #t "~1Tart-group: ~A~%" (-> obj art-group))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Theap-size: ~D~%" (-> obj heap-size))
  (label cfg-4)
  obj
  )

;; definition of type actor-bank
(deftype actor-bank (basic)
  ((pause-dist meters  :offset-assert   4)
   (birth-dist meters  :offset-assert   8)
   (birth-max  int32   :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type actor-bank
(defmethod inspect actor-bank ((obj actor-bank))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tpause-dist: ~f~%" (-> obj pause-dist))
  (format #t "~1Tbirth-dist: ~f~%" (-> obj birth-dist))
  (format #t "~1Tbirth-max: ~D~%" (-> obj birth-max))
  (label cfg-4)
  obj
  )

;; definition for symbol *ACTOR-bank*, type actor-bank
(define *ACTOR-bank* (new 'static 'actor-bank :pause-dist (meters 50) :birth-dist (meters 220) :birth-max 10))

;; failed to figure out what this is:
0
