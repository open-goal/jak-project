(in-package goal)

(deftype grid-hash-word (uint8)
  ()
  :method-count-assert 9
  :size-assert         #x1
  :flag-assert         #x900000001
  )

(deftype grid-hash-box (structure)
  ((min int8 3 :offset-assert   0)
   (max int8 3 :offset-assert   3)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x6
  :flag-assert         #x900000006
  )

(defmethod inspect grid-hash-box ((obj grid-hash-box))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'grid-hash-box)
  (format #t "~1Tmin[3] @ #x~X~%" (-> obj min))
  (format #t "~1Tmax[3] @ #x~X~%" (-> obj max))
  (label cfg-4)
  obj
  )

(deftype grid-hash (basic)
  ((work                grid-hash-work                   :offset-assert   4)
   (search-box          grid-hash-box            :inline :offset-assert   8)
   (bucket-size         int16                            :offset-assert  14)
   (axis-scale          uint32                   3       :offset-assert  16)
   (dimension-array     int8                     3       :offset-assert  28)
   (vertical-cell-count int8                             :offset-assert  31)
   (bucket-array        (pointer grid-hash-word)         :offset-assert  32)
   (box-min             float                    3       :offset-assert  36)
   (box-max             float                    3       :offset-assert  48)
   (object-count        int16                            :offset-assert  60)
   (bucket-count        int16                            :offset-assert  62)
   (min-cell-size       float                            :offset-assert  64)
   (bucket-memory-size  int32                            :offset-assert  68)
   (mem-bucket-array    (pointer grid-hash-word)         :offset-assert  72)
   (spr-bucket-array    (pointer grid-hash-word)         :offset-assert  76)
   (debug-draw          symbol                           :offset-assert  80)
   (use-scratch-ram     symbol                           :offset-assert  84)
   )
  :method-count-assert 25
  :size-assert         #x58
  :flag-assert         #x1900000058
  (:methods
    (new (symbol type process int) _type_ 0)
    (grid-hash-method-9 (_type_ int (array float) int) none 9)
    (grid-hash-method-10 (_type_) none 10)
    (grid-hash-method-11 (_type_) none 11)
    (grid-hash-method-12 (_type_ vector) grid-hash-box 12)
    (grid-hash-method-13 (_type_ vector float) grid-hash-box 13)
    (draw-grid (_type_ rgba) none 14)
    (dump-grid-info (_type_) none 15)
    (grid-hash-method-16 (_type_ grid-hash-box grid-hash-box) none 16)
    (grid-hash-method-17 (_type_) none 17)
    (grid-hash-method-18 (_type_ grid-hash-box int) none 18)
    (grid-hash-method-19 (_type_ grid-hash-box int) none 19)
    (grid-hash-method-20 (_type_ grid-hash-box (pointer uint8)) none 20)
    (grid-hash-method-21 (_type_ float int int) none 21)
    (grid-hash-method-22 (_type_ grid-hash-box sphere) none 22)
    (grid-hash-method-23 (_type_ grid-hash-box vector vector float) none 23)
    (update-grid (_type_) none 24)
    )
  )

(defmethod inspect grid-hash ((obj grid-hash))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tsearch-box: #<grid-hash-box @ #x~X>~%" (-> obj search-box))
  (format #t "~1Tbucket-size: ~D~%" (-> obj bucket-size))
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tvertical-cell-count: ~D~%" (-> obj vertical-cell-count))
  (format #t "~1Tbucket-array: #x~X~%" (-> obj bucket-array))
  (format #t "~1Tbox-min[3] @ #x~X~%" (-> obj box-min))
  (format #t "~1Tbox-max[3] @ #x~X~%" (-> obj box-max))
  (format #t "~1Tobject-count: ~D~%" (-> obj object-count))
  (format #t "~1Tbucket-count: ~D~%" (-> obj bucket-count))
  (format #t "~1Tmin-cell-size: ~f~%" (-> obj min-cell-size))
  (format #t "~1Tbucket-memory-size: ~D~%" (-> obj bucket-memory-size))
  (format #t "~1Tmem-bucket-array: #x~X~%" (-> obj mem-bucket-array))
  (format #t "~1Tspr-bucket-array: #x~X~%" (-> obj spr-bucket-array))
  (format #t "~1Tdebug-draw: ~A~%" (-> obj debug-draw))
  (format #t "~1Tuse-scratch-ram: ~A~%" (-> obj use-scratch-ram))
  (label cfg-4)
  obj
  )

(deftype find-nav-sphere-ids-params (structure)
  ((bsphere     sphere :inline :offset-assert   0)
   (y-threshold float          :offset-assert  16)
   (len         int16          :offset-assert  20)
   (max-len     int16          :offset-assert  22)
   (mask        uint8          :offset-assert  24)
   (array       uint32         :offset-assert  28)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

(defmethod inspect find-nav-sphere-ids-params ((obj find-nav-sphere-ids-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'find-nav-sphere-ids-params)
  (format #t "~1Tbsphere: #<sphere @ #x~X>~%" (-> obj bsphere))
  (format #t "~1Ty-threshold: ~f~%" (-> obj y-threshold))
  (format #t "~1Tlen: ~D~%" (-> obj len))
  (format #t "~1Tmax-len: ~D~%" (-> obj max-len))
  (format #t "~1Tmask: ~D~%" (-> obj mask))
  (format #t "~1Tarray: #x~X~%" (-> obj array))
  (label cfg-4)
  obj
  )

(deftype sphere-hash (grid-hash)
  ((sphere-array     (inline-array sphere)  :offset-assert  88)
   (max-object-count int16                  :offset-assert  92)
   (pad              int16                  :offset-assert  94)
   (mem-sphere-array uint32                 :offset-assert  96)
   (spr-sphere-array uint32                 :offset-assert 100)
   )
  :method-count-assert 34
  :size-assert         #x68
  :flag-assert         #x2200000068
  (:methods
    (clear-objects! (_type_) none 25)
    (sphere-hash-method-26 (_type_ vector) none 26)
    (sphere-hash-method-27 (_type_) none 27)
    (sphere-hash-method-28 (_type_) none 28)
    (sphere-hash-method-29 (_type_ find-nav-sphere-ids-params int int int) none 29)
    (sphere-hash-method-30 (_type_ find-nav-sphere-ids-params) none 30)
    (sphere-hash-method-31 (_type_ vector int int) none 31)
    (sphere-hash-method-32 (_type_ vector vector float int) symbol 32)
    (sphere-hash-method-33 (_type_ object int) none 33)
    )
  )

(defmethod inspect sphere-hash ((obj sphere-hash))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tsearch-box: #<grid-hash-box @ #x~X>~%" (-> obj search-box))
  (format #t "~1Tbucket-size: ~D~%" (-> obj bucket-size))
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tvertical-cell-count: ~D~%" (-> obj vertical-cell-count))
  (format #t "~1Tbucket-array: #x~X~%" (-> obj bucket-array))
  (format #t "~1Tbox-min[3] @ #x~X~%" (-> obj box-min))
  (format #t "~1Tbox-max[3] @ #x~X~%" (-> obj box-max))
  (format #t "~1Tobject-count: ~D~%" (-> obj object-count))
  (format #t "~1Tbucket-count: ~D~%" (-> obj bucket-count))
  (format #t "~1Tmin-cell-size: ~f~%" (-> obj min-cell-size))
  (format #t "~1Tbucket-memory-size: ~D~%" (-> obj bucket-memory-size))
  (format #t "~1Tmem-bucket-array: #x~X~%" (-> obj mem-bucket-array))
  (format #t "~1Tspr-bucket-array: #x~X~%" (-> obj spr-bucket-array))
  (format #t "~1Tdebug-draw: ~A~%" (-> obj debug-draw))
  (format #t "~1Tuse-scratch-ram: ~A~%" (-> obj use-scratch-ram))
  (format #t "~1Tsphere-array: #x~X~%" (-> obj sphere-array))
  (format #t "~1Tmax-object-count: ~D~%" (-> obj max-object-count))
  (format #t "~1Tpad: ~D~%" (-> obj pad))
  (format #t "~1Tmem-sphere-array: #x~X~%" (-> obj mem-sphere-array))
  (format #t "~1Tspr-sphere-array: #x~X~%" (-> obj spr-sphere-array))
  (label cfg-4)
  obj
  )

(deftype hash-object-info (structure)
  ((object basic  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(defmethod inspect hash-object-info ((obj hash-object-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'hash-object-info)
  (format #t "~1Tobject: ~A~%" (-> obj object))
  (label cfg-4)
  obj
  )

(deftype spatial-hash (sphere-hash)
  ((object-array     (pointer hash-object-info)  :offset-assert 104)
   (mem-object-array (pointer hash-object-info)  :offset-assert 108)
   (spr-object-array (pointer hash-object-info)  :offset-assert 112)
   )
  :method-count-assert 41
  :size-assert         #x74
  :flag-assert         #x2900000074
  (:methods
    (spatial-hash-method-34 (_type_ vector hash-object-info) int 34)
    (spatial-hash-method-35 (_type_) none 35)
    (spatial-hash-method-36 (_type_ sphere (pointer collide-shape) int) int 36)
    (spatial-hash-method-37 (_type_) none 37)
    (spatial-hash-method-38 (_type_) none 38)
    (spatial-hash-method-39 (_type_ object hash-object-info) none 39)
    (spatial-hash-method-40 (_type_) none 40)
    )
  )

(defmethod inspect spatial-hash ((obj spatial-hash))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Twork: ~A~%" (-> obj work))
  (format #t "~1Tsearch-box: #<grid-hash-box @ #x~X>~%" (-> obj search-box))
  (format #t "~1Tbucket-size: ~D~%" (-> obj bucket-size))
  (format #t "~1Taxis-scale[3] @ #x~X~%" (-> obj axis-scale))
  (format #t "~1Tdimension-array[3] @ #x~X~%" (-> obj dimension-array))
  (format #t "~1Tvertical-cell-count: ~D~%" (-> obj vertical-cell-count))
  (format #t "~1Tbucket-array: #x~X~%" (-> obj bucket-array))
  (format #t "~1Tbox-min[3] @ #x~X~%" (-> obj box-min))
  (format #t "~1Tbox-max[3] @ #x~X~%" (-> obj box-max))
  (format #t "~1Tobject-count: ~D~%" (-> obj object-count))
  (format #t "~1Tbucket-count: ~D~%" (-> obj bucket-count))
  (format #t "~1Tmin-cell-size: ~f~%" (-> obj min-cell-size))
  (format #t "~1Tbucket-memory-size: ~D~%" (-> obj bucket-memory-size))
  (format #t "~1Tmem-bucket-array: #x~X~%" (-> obj mem-bucket-array))
  (format #t "~1Tspr-bucket-array: #x~X~%" (-> obj spr-bucket-array))
  (format #t "~1Tdebug-draw: ~A~%" (-> obj debug-draw))
  (format #t "~1Tuse-scratch-ram: ~A~%" (-> obj use-scratch-ram))
  (format #t "~1Tsphere-array: #x~X~%" (-> obj sphere-array))
  (format #t "~1Tmax-object-count: ~D~%" (-> obj max-object-count))
  (format #t "~1Tpad: ~D~%" (-> obj pad))
  (format #t "~1Tmem-sphere-array: #x~X~%" (-> obj mem-sphere-array))
  (format #t "~1Tspr-sphere-array: #x~X~%" (-> obj spr-sphere-array))
  (format #t "~1Tobject-array: #x~X~%" (-> obj object-array))
  (format #t "~1Tmem-object-array: #x~X~%" (-> obj mem-object-array))
  (format #t "~1Tspr-object-array: #x~X~%" (-> obj spr-object-array))
  (label cfg-4)
  obj
  )

0
