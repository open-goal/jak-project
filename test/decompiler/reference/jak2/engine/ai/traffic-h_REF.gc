;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *traffic-manager*, type traffic-manager
(define *traffic-manager* (the-as traffic-manager #f))

;; definition for symbol *ctywide-entity*, type entity
(define *ctywide-entity* (the-as entity #f))

;; definition for symbol *lwide-entity*, type entity
(define *lwide-entity* (the-as entity #f))

;; definition for symbol *race-vehicle-entity*, type entity-actor
(define *race-vehicle-entity* (the-as entity-actor #f))

;; definition of type traffic-danger-info
(deftype traffic-danger-info (structure)
  ((sphere        sphere               :inline :offset-assert   0)
   (velocity      vector               :inline :offset-assert  16)
   (handle        handle                       :offset-assert  32)
   (notify-radius float                        :offset-assert  40)
   (danger-level  float                        :offset-assert  44)
   (decay-rate    float                        :offset-assert  48)
   (flags         traffic-danger-flags         :offset-assert  52)
   (danger-type   traffic-danger-type          :offset-assert  53)
   )
  :method-count-assert 9
  :size-assert         #x36
  :flag-assert         #x900000036
  )

;; definition for method 3 of type traffic-danger-info
(defmethod inspect traffic-danger-info ((this traffic-danger-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-danger-info)
  (format #t "~1Tsphere: #<sphere @ #x~X>~%" (-> this sphere))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tnotify-radius: ~f~%" (-> this notify-radius))
  (format #t "~1Tdanger-level: ~f~%" (-> this danger-level))
  (format #t "~1Tdecay-rate: ~f~%" (-> this decay-rate))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tdanger-type: ~D~%" (-> this danger-type))
  (label cfg-4)
  this
  )

;; definition of type traffic-suppression-params
(deftype traffic-suppression-params (structure)
  ((bbox     bounding-box :inline :offset-assert   0)
   (duration time-frame           :offset-assert  32)
   (id       int8                 :offset-assert  40)
   )
  :method-count-assert 13
  :size-assert         #x29
  :flag-assert         #xd00000029
  (:methods
    (try-creating-new-suppression-box (_type_) symbol 9)
    (create-or-update-suppression-box (_type_) symbol 10)
    (has-valid-id? (_type_) none 11)
    (kill-suppression-box (_type_) none 12)
    )
  )

;; definition for method 3 of type traffic-suppression-params
(defmethod inspect traffic-suppression-params ((this traffic-suppression-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-suppression-params)
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> this bbox))
  (format #t "~1Tduration: ~D~%" (-> this duration))
  (format #t "~1Tid: ~D~%" (-> this id))
  (label cfg-4)
  this
  )

;; definition for method 11 of type traffic-suppression-params
;; WARN: Return type mismatch symbol vs none.
(defmethod has-valid-id? traffic-suppression-params ((this traffic-suppression-params))
  (!= (-> this id) -1)
  (none)
  )

;; definition of type traffic-object-spawn-params
(deftype traffic-object-spawn-params (structure)
  ((object-type traffic-type                :offset-assert   0)
   (behavior    uint64                      :offset-assert   8)
   (id          uint32                      :offset-assert  16)
   (nav-mesh    nav-mesh                    :offset-assert  20)
   (nav-branch  nav-branch                  :offset-assert  24)
   (position    vector              :inline :offset-assert  32)
   (rotation    quaternion          :inline :offset-assert  48)
   (velocity    vector              :inline :offset-assert  64)
   (handle      handle                      :offset-assert  80)
   (guard-type  uint8                       :offset-assert  88)
   (user-data   uint32                      :offset-assert  92)
   (flags       traffic-spawn-flags         :offset-assert  96)
   (proc        process                     :offset-assert 100)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

;; definition for method 3 of type traffic-object-spawn-params
(defmethod inspect traffic-object-spawn-params ((this traffic-object-spawn-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-object-spawn-params)
  (format #t "~1Tobject-type: ~D~%" (-> this object-type))
  (format #t "~1Tbehavior: ~D~%" (-> this behavior))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tnav-mesh: ~A~%" (-> this nav-mesh))
  (format #t "~1Tnav-branch: ~A~%" (-> this nav-branch))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Trotation: #<quaternion @ #x~X>~%" (-> this rotation))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tguard-type: ~D~%" (-> this guard-type))
  (format #t "~1Tuser-data: ~D~%" (-> this user-data))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tproc: ~A~%" (-> this proc))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
