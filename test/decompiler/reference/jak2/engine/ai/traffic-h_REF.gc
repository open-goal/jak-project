;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *traffic-manager*, type traffic-manager
(define *traffic-manager* (the-as traffic-manager #f))

;; definition for symbol *ctywide-entity*, type entity
(define *ctywide-entity* (the-as entity #f))

;; definition for symbol *lwide-entity*, type entity
(define *lwide-entity* (the-as entity #f))

;; definition for symbol *race-vehicle-entity*, type entity-actor
(define *race-vehicle-entity* (the-as entity-actor #f))

;; definition of type traffic-danger-info
(deftype traffic-danger-info (structure)
  ((sphere         sphere  :inline)
   (velocity       vector  :inline)
   (handle         handle)
   (notify-radius  float)
   (danger-level   float)
   (decay-rate     float)
   (flags          traffic-danger-flags)
   (danger-type    traffic-danger-type)
   )
  )

;; definition for method 3 of type traffic-danger-info
(defmethod inspect ((this traffic-danger-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-danger-info)
  (format #t "~1Tsphere: #<sphere @ #x~X>~%" (-> this sphere))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tnotify-radius: ~f~%" (-> this notify-radius))
  (format #t "~1Tdanger-level: ~f~%" (-> this danger-level))
  (format #t "~1Tdecay-rate: ~f~%" (-> this decay-rate))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tdanger-type: ~D~%" (-> this danger-type))
  (label cfg-4)
  this
  )

;; definition of type traffic-suppression-params
(deftype traffic-suppression-params (structure)
  ((bbox      bounding-box  :inline)
   (duration  time-frame)
   (id        int8)
   )
  (:methods
    (try-creating-new-suppression-box (_type_) symbol)
    (create-or-update-suppression-box (_type_) symbol)
    (has-valid-id? (_type_) none)
    (kill-suppression-box (_type_) none)
    )
  )

;; definition for method 3 of type traffic-suppression-params
(defmethod inspect ((this traffic-suppression-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-suppression-params)
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> this bbox))
  (format #t "~1Tduration: ~D~%" (-> this duration))
  (format #t "~1Tid: ~D~%" (-> this id))
  (label cfg-4)
  this
  )

;; definition for method 11 of type traffic-suppression-params
;; WARN: Return type mismatch symbol vs none.
(defmethod has-valid-id? ((this traffic-suppression-params))
  (!= (-> this id) -1)
  (none)
  )

;; definition of type traffic-object-spawn-params
(deftype traffic-object-spawn-params (structure)
  ((object-type  traffic-type)
   (behavior     uint64)
   (id           uint32)
   (nav-mesh     nav-mesh)
   (nav-branch   nav-branch)
   (position     vector      :inline)
   (rotation     quaternion  :inline)
   (velocity     vector      :inline)
   (handle       handle)
   (guard-type   uint8)
   (user-data    uint32)
   (flags        traffic-spawn-flags)
   (proc         process)
   )
  )

;; definition for method 3 of type traffic-object-spawn-params
(defmethod inspect ((this traffic-object-spawn-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traffic-object-spawn-params)
  (format #t "~1Tobject-type: ~D~%" (-> this object-type))
  (format #t "~1Tbehavior: ~D~%" (-> this behavior))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tnav-mesh: ~A~%" (-> this nav-mesh))
  (format #t "~1Tnav-branch: ~A~%" (-> this nav-branch))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Trotation: #<quaternion @ #x~X>~%" (-> this rotation))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tguard-type: ~D~%" (-> this guard-type))
  (format #t "~1Tuser-data: ~D~%" (-> this user-data))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tproc: ~A~%" (-> this proc))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
