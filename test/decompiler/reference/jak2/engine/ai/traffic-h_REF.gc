;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *traffic-manager*, type process
(define *traffic-manager* (the-as process #f))

;; definition for symbol *ctywide-entity*, type object
(define *ctywide-entity* (the-as object #f))

;; definition for symbol *lwide-entity*, type object
(define *lwide-entity* (the-as object #f))

;; definition for symbol *race-vehicle-entity*, type object
(define *race-vehicle-entity* (the-as object #f))

;; definition of type traffic-danger-info
(deftype traffic-danger-info (structure)
  ((sphere        sphere :inline :offset-assert   0)
   (velocity      vector :inline :offset-assert  16)
   (handle        uint64         :offset-assert  32)
   (notify-radius float          :offset-assert  40)
   (danger-level  float          :offset-assert  44)
   (decay-rate    float          :offset-assert  48)
   (flags         uint8          :offset-assert  52)
   (danger-type   uint8          :offset-assert  53)
   )
  :method-count-assert 9
  :size-assert         #x36
  :flag-assert         #x900000036
  )

;; definition for method 3 of type traffic-danger-info
(defmethod inspect traffic-danger-info ((obj traffic-danger-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-danger-info)
  (format #t "~1Tsphere: #<sphere @ #x~X>~%" (-> obj sphere))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> obj velocity))
  (format #t "~1Thandle: ~D~%" (-> obj handle))
  (format #t "~1Tnotify-radius: ~f~%" (-> obj notify-radius))
  (format #t "~1Tdanger-level: ~f~%" (-> obj danger-level))
  (format #t "~1Tdecay-rate: ~f~%" (-> obj decay-rate))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tdanger-type: ~D~%" (-> obj danger-type))
  (label cfg-4)
  obj
  )

;; definition of type traffic-suppression-params
(deftype traffic-suppression-params (structure)
  ((bbox     bounding-box :inline :offset-assert   0)
   (duration uint64               :offset-assert  32)
   (id       int8                 :offset-assert  40)
   )
  :method-count-assert 13
  :size-assert         #x29
  :flag-assert         #xd00000029
  (:methods
    (traffic-suppression-params-method-9 () none 9)
    (traffic-suppression-params-method-10 () none 10)
    (has-valid-id? (_type_) none 11)
    (traffic-suppression-params-method-12 () none 12)
    )
  )

;; definition for method 3 of type traffic-suppression-params
(defmethod inspect traffic-suppression-params ((obj traffic-suppression-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-suppression-params)
  (format #t "~1Tbbox: #<bounding-box @ #x~X>~%" (-> obj bbox))
  (format #t "~1Tduration: ~D~%" (-> obj duration))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (label cfg-4)
  obj
  )

;; definition for method 11 of type traffic-suppression-params
;; INFO: Return type mismatch symbol vs none.
(defmethod has-valid-id? traffic-suppression-params ((obj traffic-suppression-params))
  (!= (-> obj id) -1)
  (none)
  )

;; definition of type traffic-object-spawn-params
(deftype traffic-object-spawn-params (structure)
  ((object-type uint8              :offset-assert   0)
   (behavior    uint64             :offset-assert   8)
   (id          uint32             :offset-assert  16)
   (nav-mesh    basic              :offset-assert  20)
   (nav-branch  basic              :offset-assert  24)
   (position    vector     :inline :offset-assert  32)
   (rotation    quaternion :inline :offset-assert  48)
   (velocity    vector     :inline :offset-assert  64)
   (handle      uint64             :offset-assert  80)
   (guard-type  uint8              :offset-assert  88)
   (user-data   uint32             :offset-assert  92)
   (flags       uint32             :offset-assert  96)
   (proc        basic              :offset-assert 100)
   )
  :method-count-assert 9
  :size-assert         #x68
  :flag-assert         #x900000068
  )

;; definition for method 3 of type traffic-object-spawn-params
(defmethod inspect traffic-object-spawn-params ((obj traffic-object-spawn-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'traffic-object-spawn-params)
  (format #t "~1Tobject-type: ~D~%" (-> obj object-type))
  (format #t "~1Tbehavior: ~D~%" (-> obj behavior))
  (format #t "~1Tid: ~D~%" (-> obj id))
  (format #t "~1Tnav-mesh: ~A~%" (-> obj nav-mesh))
  (format #t "~1Tnav-branch: ~A~%" (-> obj nav-branch))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> obj position))
  (format #t "~1Trotation: #<quaternion @ #x~X>~%" (-> obj rotation))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> obj velocity))
  (format #t "~1Thandle: ~D~%" (-> obj handle))
  (format #t "~1Tguard-type: ~D~%" (-> obj guard-type))
  (format #t "~1Tuser-data: ~D~%" (-> obj user-data))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tproc: ~A~%" (-> obj proc))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
