;;-*-Lisp-*-
(in-package goal)

;; definition of type process-focusable
(deftype process-focusable (process-drawable)
  ((focus-status focus-status  :offset-assert 200)
   )
  :heap-base #x50
  :method-count-assert 27
  :size-assert         #xcc
  :flag-assert         #x1b005000cc
  (:methods
    (get-trans (_type_ int) vector 20)
    (get-quat (_type_) quaternion 21)
    (get-transv (_type_) vector 22)
    (process-focusable-method-23 (_type_) none 23)
    (process-focusable-method-24 (_type_) none 24)
    (process-focusable-method-25 (_type_) int 25)
    (process-focusable-method-26 (_type_) none 26)
    )
  )

;; definition for method 3 of type process-focusable
(defmethod inspect process-focusable ((obj process-focusable))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tfocus-status: ~D~%" (-> obj focus-status))
  (label cfg-4)
  obj
  )

;; definition for method 20 of type process-focusable
;; INFO: Return type mismatch structure vs vector.
(defmethod get-trans process-focusable ((obj process-focusable) (arg0 int))
  (let ((gp-0 (-> obj root)))
    (the-as vector (cond
                     ((zero? arg0)
                      (-> gp-0 trans)
                      )
                     ((and (= arg0 1) (type? gp-0 collide-shape-moving))
                      (-> (the-as collide-shape-moving gp-0) gspot-pos)
                      )
                     ((and (or (= arg0 2) (= arg0 3)) (type? gp-0 collide-shape))
                      (-> (the-as collide-shape gp-0) root-prim prim-core)
                      )
                     (else
                       (-> gp-0 trans)
                       )
                     )
            )
    )
  )

;; definition for method 22 of type process-focusable
(defmethod get-transv process-focusable ((obj process-focusable))
  (-> obj root transv)
  )

;; definition for method 21 of type process-focusable
(defmethod get-quat process-focusable ((obj process-focusable))
  (-> obj root quat)
  )

;; definition for method 23 of type process-focusable
;; INFO: Return type mismatch int vs none.
(defmethod process-focusable-method-23 process-focusable ((obj process-focusable))
  0
  (none)
  )

;; definition for method 24 of type process-focusable
;; INFO: Return type mismatch int vs none.
(defmethod process-focusable-method-24 process-focusable ((obj process-focusable))
  0
  (none)
  )

;; definition for method 26 of type process-focusable
;; INFO: Return type mismatch int vs none.
(defmethod process-focusable-method-26 process-focusable ((obj process-focusable))
  0
  (none)
  )

;; definition for method 25 of type process-focusable
(defmethod process-focusable-method-25 process-focusable ((obj process-focusable))
  0
  )

;; failed to figure out what this is:
0
