;;-*-Lisp-*-
(in-package goal)

;; this file is debug only
(declare-file (debug))
(when *debug-segment*
;; definition of type gs-store-image-packet
(deftype gs-store-image-packet (structure)
  ((vifcode        vif-tag      4 :offset-assert   0)
   (giftag         gif-tag        :offset-assert  16)
   (bitbltbuf      gs-bitbltbuf   :offset-assert  32)
   (bitbltbuf-addr gs-reg64       :offset-assert  40)
   (trxpos         gs-trxpos      :offset-assert  48)
   (trxpos-addr    gs-reg64       :offset-assert  56)
   (trxreg         gs-trxreg      :offset-assert  64)
   (trxreg-addr    gs-reg64       :offset-assert  72)
   (finish         int64          :offset-assert  80)
   (finish-addr    gs-reg64       :offset-assert  88)
   (trxdir         gs-trxdir      :offset-assert  96)
   (trxdir-addr    gs-reg64       :offset-assert 104)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  )

;; definition for method 3 of type gs-store-image-packet
;; INFO: Used lq/sq
(defmethod inspect gs-store-image-packet ((obj gs-store-image-packet))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'gs-store-image-packet)
  (format #t "~1Tvifcode[4] @ #x~X~%" (-> obj vifcode))
  (format #t "~1Tgiftag: ~D~%" (-> obj giftag))
  (format #t "~1Tbitbltbuf: ~D~%" (-> obj bitbltbuf))
  (format #t "~1Tbitbltbuf-addr: ~D~%" (-> obj bitbltbuf-addr))
  (format #t "~1Ttrxpos: ~D~%" (-> obj trxpos))
  (format #t "~1Ttrxpos-addr: ~D~%" (-> obj trxpos-addr))
  (format #t "~1Ttrxreg: ~D~%" (-> obj trxreg))
  (format #t "~1Ttrxreg-addr: ~D~%" (-> obj trxreg-addr))
  (format #t "~1Tfinish: ~D~%" (-> obj finish))
  (format #t "~1Tfinish-addr: ~D~%" (-> obj finish-addr))
  (format #t "~1Ttrxdir: ~D~%" (-> obj trxdir))
  (format #t "~1Ttrxdir-addr: ~D~%" (-> obj trxdir-addr))
  (label cfg-4)
  obj
  )

;; definition of type screen-shot-work
(deftype screen-shot-work (structure)
  ((count          int16  :offset-assert   0)
   (size           int16  :offset-assert   2)
   (name           basic  :offset-assert   4)
   (highres-enable basic  :offset-assert   8)
   (hud-enable     basic  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type screen-shot-work
(defmethod inspect screen-shot-work ((obj screen-shot-work))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'screen-shot-work)
  (format #t "~1Tcount: ~D~%" (-> obj count))
  (format #t "~1Tsize: ~D~%" (-> obj size))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Thighres-enable: ~A~%" (-> obj highres-enable))
  (format #t "~1Thud-enable: ~A~%" (-> obj hud-enable))
  (label cfg-4)
  obj
  )

;; definition for symbol *screen-shot-work*, type screen-shot-work
(define *screen-shot-work* (new 'global 'screen-shot-work))

;; failed to figure out what this is:
(set! (-> *screen-shot-work* count) -1)

;; failed to figure out what this is:
(set! (-> *screen-shot-work* size) -1)

;; failed to figure out what this is:
(set! (-> *screen-shot-work* highres-enable) #f)

;; failed to figure out what this is:
(set! (-> *screen-shot-work* hud-enable) #f)

;; definition for symbol *image-name*, type string
(define *image-name* (new 'global 'string 32 (the-as string #f)))

;; failed to figure out what this is:
0

)



