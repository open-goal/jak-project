;;-*-Lisp-*-
(in-package goal)

;; definition of type sync-info-params
(deftype sync-info-params (structure)
  ((sync-type  symbol      :offset-assert   0)
   (sync-flags sync-flags  :offset-assert   8)
   (entity     basic       :offset-assert  16)
   (period     uint32      :offset-assert  20)
   (percent    float       :offset-assert  24)
   (ease-in    float       :offset-assert  28)
   (ease-out   float       :offset-assert  32)
   (pause-in   float       :offset-assert  36)
   (pause-out  float       :offset-assert  40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; definition for method 3 of type sync-info-params
(defmethod inspect sync-info-params ((this sync-info-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sync-info-params)
  (format #t "~1Tsync-type: ~A~%" (-> this sync-type))
  (format #t "~1Tsync-flags: ~D~%" (-> this sync-flags))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (format #t "~1Tpercent: ~f~%" (-> this percent))
  (format #t "~1Tease-in: ~f~%" (-> this ease-in))
  (format #t "~1Tease-out: ~f~%" (-> this ease-out))
  (format #t "~1Tpause-in: ~f~%" (-> this pause-in))
  (format #t "~1Tpause-out: ~f~%" (-> this pause-out))
  (label cfg-4)
  this
  )

;; definition of type sync-info
(deftype sync-info (structure)
  ((sync-flags sync-flags  :offset-assert   0)
   (offset     float       :offset-assert   8)
   (period     uint32      :offset-assert  12)
   )
  :method-count-assert 16
  :size-assert         #x10
  :flag-assert         #x1000000010
  (:methods
    (get-current-phase-no-mod (_type_) float 9)
    (get-phase-offset (_type_) float 10)
    (get-norm! (_type_ int) float 11)
    (get-scaled-val! (_type_ float int) float 12)
    (initialize! (_type_ sync-info-params) none 13)
    (get-timeframe-offset! (_type_ time-frame) time-frame 14)
    (sync-now! (_type_ float) none 15)
    )
  )

;; definition for method 3 of type sync-info
(defmethod inspect sync-info ((this sync-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sync-info)
  (format #t "~1Tsync-flags: ~D~%" (-> this sync-flags))
  (format #t "~1Toffset: ~f~%" (-> this offset))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (label cfg-4)
  this
  )

;; definition of type sync-linear
(deftype sync-linear (sync-info)
  ()
  :pack-me
  :method-count-assert 16
  :size-assert         #x10
  :flag-assert         #x1000000010
  )

;; definition for method 3 of type sync-linear
(defmethod inspect sync-linear ((this sync-linear))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sync-linear)
  (format #t "~1Tsync-flags: ~D~%" (-> this sync-flags))
  (format #t "~1Toffset: ~f~%" (-> this offset))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (label cfg-4)
  this
  )

;; definition of type sync-eased
(deftype sync-eased (sync-info)
  ((tlo       float  :offset-assert  16)
   (thi       float  :offset-assert  20)
   (ylo       float  :offset-assert  24)
   (m2        float  :offset-assert  28)
   (yend      float  :offset-assert  32)
   (pause-in  float  :offset-assert  36)
   (pause-out float  :offset-assert  40)
   )
  :pack-me
  :method-count-assert 16
  :size-assert         #x2c
  :flag-assert         #x100000002c
  )

;; definition for method 3 of type sync-eased
(defmethod inspect sync-eased ((this sync-eased))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sync-eased)
  (format #t "~1Tsync-flags: ~D~%" (-> this sync-flags))
  (format #t "~1Toffset: ~f~%" (-> this offset))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (format #t "~1Ttlo: ~f~%" (-> this tlo))
  (format #t "~1Tthi: ~f~%" (-> this thi))
  (format #t "~1Tylo: ~f~%" (-> this ylo))
  (format #t "~1Tm2: ~f~%" (-> this m2))
  (format #t "~1Tyend: ~f~%" (-> this yend))
  (format #t "~1Tpause-in: ~f~%" (-> this pause-in))
  (format #t "~1Tpause-out: ~f~%" (-> this pause-out))
  (label cfg-4)
  this
  )

;; definition of type sync-paused
(deftype sync-paused (sync-info)
  ((pause-in  float  :offset-assert  16)
   (pause-out float  :offset-assert  20)
   )
  :method-count-assert 16
  :size-assert         #x18
  :flag-assert         #x1000000018
  )

;; definition for method 3 of type sync-paused
(defmethod inspect sync-paused ((this sync-paused))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sync-paused)
  (format #t "~1Tsync-flags: ~D~%" (-> this sync-flags))
  (format #t "~1Toffset: ~f~%" (-> this offset))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (format #t "~1Tpause-in: ~f~%" (-> this pause-in))
  (format #t "~1Tpause-out: ~f~%" (-> this pause-out))
  (label cfg-4)
  this
  )

;; definition of type delayed-rand-float
(deftype delayed-rand-float (structure)
  ((min-time   int32       :offset-assert   0)
   (max-time   int32       :offset-assert   4)
   (max-val    float       :offset-assert   8)
   (timer      int32       :offset-assert  12)
   (start-time time-frame  :offset-assert  16)
   (value      float       :offset-assert  24)
   )
  :pack-me
  :method-count-assert 13
  :size-assert         #x1c
  :flag-assert         #xd0000001c
  (:methods
    (set-params! (_type_ int int float) float 9)
    (reset! (_type_) float 10)
    (update! (_type_) float 11)
    (update-and-clear! (_type_) none 12)
    )
  )

;; definition for method 3 of type delayed-rand-float
(defmethod inspect delayed-rand-float ((this delayed-rand-float))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'delayed-rand-float)
  (format #t "~1Tmin-time: ~D~%" (-> this min-time))
  (format #t "~1Tmax-time: ~D~%" (-> this max-time))
  (format #t "~1Tmax-val: ~f~%" (-> this max-val))
  (format #t "~1Ttimer: ~D~%" (-> this timer))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Tvalue: ~f~%" (-> this value))
  (label cfg-4)
  this
  )

;; definition of type oscillating-float
(deftype oscillating-float (structure)
  ((value   float  :offset-assert   0)
   (target  float  :offset-assert   4)
   (vel     float  :offset-assert   8)
   (max-vel float  :offset-assert  12)
   (damping float  :offset-assert  16)
   (accel   float  :offset-assert  20)
   )
  :allow-misaligned
  :method-count-assert 11
  :size-assert         #x18
  :flag-assert         #xb00000018
  (:methods
    (set-params! (_type_ float float float float) float 9)
    (update! (_type_ float) float 10)
    )
  )

;; definition for method 3 of type oscillating-float
(defmethod inspect oscillating-float ((this oscillating-float))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'oscillating-float)
  (format #t "~1Tvalue: ~f~%" (-> this value))
  (format #t "~1Ttarget: ~f~%" (-> this target))
  (format #t "~1Tvel: ~f~%" (-> this vel))
  (format #t "~1Tmax-vel: ~f~%" (-> this max-vel))
  (format #t "~1Tdamping: ~f~%" (-> this damping))
  (format #t "~1Taccel: ~f~%" (-> this accel))
  (label cfg-4)
  this
  )

;; definition of type bouncing-float
(deftype bouncing-float (structure)
  ((osc        oscillating-float :inline :offset-assert   0)
   (max-value  float                     :offset-assert  24)
   (min-value  float                     :offset-assert  28)
   (elasticity float                     :offset-assert  32)
   (state      int32                     :offset-assert  36)
   )
  :allow-misaligned
  :method-count-assert 13
  :size-assert         #x28
  :flag-assert         #xd00000028
  (:methods
    (set-params! (_type_ float float float float float float float) float 9)
    (update! (_type_ float) float 10)
    (at-min? (_type_) symbol 11)
    (at-max? (_type_) symbol 12)
    )
  )

;; definition for method 3 of type bouncing-float
(defmethod inspect bouncing-float ((this bouncing-float))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bouncing-float)
  (format #t "~1Tosc: #<oscillating-float @ #x~X>~%" (-> this osc))
  (format #t "~1Tmax-value: ~f~%" (-> this max-value))
  (format #t "~1Tmin-value: ~f~%" (-> this min-value))
  (format #t "~1Telasticity: ~f~%" (-> this elasticity))
  (format #t "~1Tstate: ~D~%" (-> this state))
  (label cfg-4)
  this
  )

;; definition of type delayed-rand-vector
(deftype delayed-rand-vector (structure)
  ((min-time   int32              :offset-assert   0)
   (max-time   int32              :offset-assert   4)
   (xz-max     float              :offset-assert   8)
   (y-max      float              :offset-assert  12)
   (timer      int32              :offset-assert  16)
   (start-time time-frame         :offset-assert  24)
   (value      vector     :inline :offset-assert  32)
   )
  :method-count-assert 13
  :size-assert         #x30
  :flag-assert         #xd00000030
  (:methods
    (set-params! (_type_ int int float float) vector 9)
    (update-now! (_type_) vector 10)
    (update-with-delay! (_type_) vector 11)
    (update-with-delay-or-reset! (_type_) vector 12)
    )
  )

;; definition for method 3 of type delayed-rand-vector
(defmethod inspect delayed-rand-vector ((this delayed-rand-vector))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'delayed-rand-vector)
  (format #t "~1Tmin-time: ~D~%" (-> this min-time))
  (format #t "~1Tmax-time: ~D~%" (-> this max-time))
  (format #t "~1Txz-max: ~f~%" (-> this xz-max))
  (format #t "~1Ty-max: ~f~%" (-> this y-max))
  (format #t "~1Ttimer: ~D~%" (-> this timer))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Tvalue: #<vector @ #x~X>~%" (-> this value))
  (label cfg-4)
  this
  )

;; definition of type oscillating-vector
(deftype oscillating-vector (structure)
  ((value   vector :inline :offset-assert   0)
   (target  vector :inline :offset-assert  16)
   (vel     vector :inline :offset-assert  32)
   (max-vel float          :offset-assert  48)
   (damping float          :offset-assert  52)
   (accel   float          :offset-assert  56)
   )
  :method-count-assert 11
  :size-assert         #x3c
  :flag-assert         #xb0000003c
  (:methods
    (set-params! (_type_ vector float float float) vector 9)
    (update! (_type_ vector) vector 10)
    )
  )

;; definition for method 3 of type oscillating-vector
(defmethod inspect oscillating-vector ((this oscillating-vector))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'oscillating-vector)
  (format #t "~1Tvalue: #<vector @ #x~X>~%" (-> this value))
  (format #t "~1Ttarget: #<vector @ #x~X>~%" (-> this target))
  (format #t "~1Tvel: #<vector @ #x~X>~%" (-> this vel))
  (format #t "~1Tmax-vel: ~f~%" (-> this max-vel))
  (format #t "~1Tdamping: ~f~%" (-> this damping))
  (format #t "~1Taccel: ~f~%" (-> this accel))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
