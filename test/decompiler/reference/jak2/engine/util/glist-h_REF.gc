;;-*-Lisp-*-
(in-package goal)

;; this file is debug only
(declare-file (debug))

;; definition of type glst-node
(deftype glst-node (structure)
  ((next  glst-node)
   (prev  glst-node)
   )
  )

;; definition for method 3 of type glst-node
(defmethod inspect ((this glst-node))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'glst-node)
  (format #t "~1Tnext: #<glst-node @ #x~X>~%" (-> this next))
  (format #t "~1Tprev: #<glst-node @ #x~X>~%" (-> this prev))
  (label cfg-4)
  this
  )

;; definition of type glst-named-node
(deftype glst-named-node (glst-node)
  ((privname  string)
   )
  )

;; definition for method 3 of type glst-named-node
(defmethod inspect ((this glst-named-node))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'glst-named-node)
  (format #t "~1Tnext: #<glst-node @ #x~X>~%" (-> this next))
  (format #t "~1Tprev: #<glst-node @ #x~X>~%" (-> this prev))
  (format #t "~1Tprivname: ~A~%" (-> this privname))
  (label cfg-4)
  this
  )

;; definition of type glst-list
(deftype glst-list (structure)
  ((head      glst-node)
   (tail      glst-node)
   (tailpred  glst-node)
   (numelem   int32)
   )
  )

;; definition for method 3 of type glst-list
(defmethod inspect ((this glst-list))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'glst-list)
  (format #t "~1Thead: #<glst-node @ #x~X>~%" (-> this head))
  (format #t "~1Ttail: #<glst-node @ #x~X>~%" (-> this tail))
  (format #t "~1Ttailpred: #<glst-node @ #x~X>~%" (-> this tailpred))
  (format #t "~1Tnumelem: ~D~%" (-> this numelem))
  (label cfg-4)
  this
  )

;; definition for function glst-next
(defun glst-next ((arg0 glst-node))
  "return the next node in the list"
  (-> arg0 next)
  )

;; definition for function glst-prev
(defun glst-prev ((arg0 glst-node))
  "return the previous node in the list"
  (-> arg0 prev)
  )

;; definition for function glst-head
(defun glst-head ((arg0 glst-list))
  "return the start of the list"
  (-> arg0 head)
  )

;; definition for function glst-tail
(defun glst-tail ((arg0 glst-list))
  "return the tail of the list"
  (-> arg0 tailpred)
  )

;; definition for function glst-end-of-list?
(defun glst-end-of-list? ((arg0 glst-node))
  "is this node the end of the list. #t = end"
  (not (-> arg0 next))
  )

;; definition for function glst-start-of-list?
(defun glst-start-of-list? ((arg0 glst-node))
  "is this node the start of the list. #t = start"
  (not (-> arg0 prev))
  )

;; definition for function glst-empty?
(defun glst-empty? ((arg0 glst-list))
  "is the list empty, #t = empty"
  (= (-> arg0 tailpred) arg0)
  )

;; definition for function glst-node-name
(defun glst-node-name ((arg0 glst-named-node))
  "Returns the `privname` of the provided [[glst-named-node]]"
  (-> arg0 privname)
  )

;; definition for function glst-set-name!
(defun glst-set-name! ((arg0 glst-named-node) (arg1 string))
  "Sets the `privname` of the provided [[glst-named-node]]"
  (set! (-> arg0 privname) arg1)
  arg1
  )

;; failed to figure out what this is:
0
