;;-*-Lisp-*-
(in-package goal)

;; definition of type mech-info
(deftype mech-info (basic)
  ((entity                basic                        :offset-assert   4)
   (hud                   handle             1         :offset-assert   8)
   (mech-trans            vector             :inline   :offset-assert  16)
   (mech-quat             vector             :inline   :offset-assert  32)
   (mech-scale            vector             :inline   :offset-assert  48)
   (engine-sound-id       sound-id                     :offset-assert  64)
   (engine-sound-volume   float                        :offset-assert  68)
   (engine-sound-pitch    float                        :offset-assert  72)
   (thrust-sound-id       sound-id                     :offset-assert  76)
   (drag-sound-id         sound-id                     :offset-assert  80)
   (whine-sound-id        sound-id                     :offset-assert  84)
   (mech-start-time       time-frame                   :offset-assert  88)
   (mech-time             time-frame                   :offset-assert  96)
   (no-get-off-time       time-frame                   :offset-assert 104)
   (stick-lock            basic                        :offset-assert 112)
   (stick-off             basic                        :offset-assert 116)
   (forward-vel           meters                       :offset-assert 120)
   (jump-thrust           meters                       :offset-assert 124)
   (jump-thrust-fuel      float                        :offset-assert 128)
   (unstuck-time          time-frame                   :offset-assert 136)
   (stuck-count           int32                        :offset-assert 144)
   (back-touch-point      vector             :inline   :offset-assert 160)
   (back-touch-trans      vector             :inline   :offset-assert 176)
   (back-touch-time       time-frame                   :offset-assert 192)
   (attack-id             uint32                       :offset-assert 200)
   (shield-value          float                        :offset-assert 204)
   (shield-max            float                        :offset-assert 208)
   (walk-anim-leg         int32                        :offset-assert 212)
   (state-impact?         symbol             1         :offset-assert 216)
   (state-impact          impact-control     1 :inline :offset-assert 224)
   (thruster-flame-width  meters                       :offset-assert 304)
   (thruster-flame-length meters                       :offset-assert 308)
   (thruster-local-pos    vector             2 :inline :offset-assert 320)
   (exhaust-local-pos     vector             2 :inline :offset-assert 352)
   (exhaust-local-dir     vector             2 :inline :offset-assert 384)
   (smoke-local-pos       vector             2 :inline :offset-assert 416)
   (smoke-local-vel       vector             2 :inline :offset-assert 448)
   (particle-system-2d    basic                        :offset-assert 480)
   (particle-system-3d    basic                        :offset-assert 484)
   (part-thruster         basic                        :offset-assert 488)
   (part-thruster-scale-x sp-field-init-spec           :offset-assert 492)
   (part-thruster-scale-y sp-field-init-spec           :offset-assert 496)
   (part-quat             quaternion                   :offset-assert 500)
   (part-vel              vector                       :offset-assert 504)
   )
  :method-count-assert 9
  :size-assert         #x1fc
  :flag-assert         #x9000001fc
  )

;; definition for method 3 of type mech-info
(defmethod inspect mech-info ((this mech-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Thud[1] @ #x~X~%" (-> this hud))
  (format #t "~1Tmech-trans: ~`vector`P~%" (-> this mech-trans))
  (format #t "~1Tmech-quat: ~`vector`P~%" (-> this mech-quat))
  (format #t "~1Tmech-scale: ~`vector`P~%" (-> this mech-scale))
  (format #t "~1Tengine-sound-id: ~D~%" (-> this engine-sound-id))
  (format #t "~1Tengine-sound-volume: ~f~%" (-> this engine-sound-volume))
  (format #t "~1Tengine-sound-pitch: ~f~%" (-> this engine-sound-pitch))
  (format #t "~1Tthrust-sound-id: ~D~%" (-> this thrust-sound-id))
  (format #t "~1Tdrag-sound-id: ~D~%" (-> this drag-sound-id))
  (format #t "~1Twhine-sound-id: ~D~%" (-> this whine-sound-id))
  (format #t "~1Tmech-start-time: ~D~%" (-> this mech-start-time))
  (format #t "~1Tmech-time: ~D~%" (-> this mech-time))
  (format #t "~1Tno-get-off-time: ~D~%" (-> this no-get-off-time))
  (format #t "~1Tstick-lock: ~A~%" (-> this stick-lock))
  (format #t "~1Tstick-off: ~A~%" (-> this stick-off))
  (format #t "~1Tforward-vel: (meters ~m)~%" (-> this forward-vel))
  (format #t "~1Tjump-thrust: (meters ~m)~%" (-> this jump-thrust))
  (format #t "~1Tjump-thrust-fuel: ~f~%" (-> this jump-thrust-fuel))
  (format #t "~1Tunstuck-time: ~D~%" (-> this unstuck-time))
  (format #t "~1Tstuck-count: ~D~%" (-> this stuck-count))
  (format #t "~1Tback-touch-point: ~`vector`P~%" (-> this back-touch-point))
  (format #t "~1Tback-touch-trans: ~`vector`P~%" (-> this back-touch-trans))
  (format #t "~1Tback-touch-time: ~D~%" (-> this back-touch-time))
  (format #t "~1Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~1Tshield-value: ~f~%" (-> this shield-value))
  (format #t "~1Tshield-max: ~f~%" (-> this shield-max))
  (format #t "~1Twalk-anim-leg: ~D~%" (-> this walk-anim-leg))
  (format #t "~1Tstate-impact?[1] @ #x~X~%" (-> this state-impact?))
  (format #t "~1Tstate-impact[1] @ #x~X~%" (-> this state-impact))
  (format #t "~1Tthruster-flame-width: (meters ~m)~%" (-> this thruster-flame-width))
  (format #t "~1Tthruster-flame-length: (meters ~m)~%" (-> this thruster-flame-length))
  (format #t "~1Tthruster-local-pos[2] @ #x~X~%" (-> this thruster-local-pos))
  (format #t "~1Texhaust-local-pos[2] @ #x~X~%" (-> this exhaust-local-pos))
  (format #t "~1Texhaust-local-dir[2] @ #x~X~%" (-> this exhaust-local-dir))
  (format #t "~1Tsmoke-local-pos[2] @ #x~X~%" (-> this smoke-local-pos))
  (format #t "~1Tsmoke-local-vel[2] @ #x~X~%" (-> this smoke-local-vel))
  (format #t "~1Tparticle-system-2d: ~A~%" (-> this particle-system-2d))
  (format #t "~1Tparticle-system-3d: ~A~%" (-> this particle-system-3d))
  (format #t "~1Tpart-thruster: ~A~%" (-> this part-thruster))
  (format #t "~1Tpart-thruster-scale-x: #<sp-field-init-spec @ #x~X>~%" (-> this part-thruster-scale-x))
  (format #t "~1Tpart-thruster-scale-y: #<sp-field-init-spec @ #x~X>~%" (-> this part-thruster-scale-y))
  (format #t "~1Tpart-quat: #<quaternion @ #x~X>~%" (-> this part-quat))
  (format #t "~1Tpart-vel: #<vector @ #x~X>~%" (-> this part-vel))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mech mech mech-lod0-jg mech-mech-idle-ja
              ((mech-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4.5)
              :shadow mech-shadow-mg
              :origin-joint-index 3
              :shadow-joint-index 3
              )

;; definition for symbol *mech-shadow-control*, type shadow-control
(define *mech-shadow-control*
  (new 'static 'shadow-control :settings (new 'static 'shadow-settings
                                           :flags (shadow-flags disable-fade shdf03)
                                           :shadow-dir (new 'static 'vector :y -1.0 :w 614400.0)
                                           :bot-plane (new 'static 'plane :y 1.0 :w 81920.0)
                                           :top-plane (new 'static 'plane :y 1.0 :w 2048.0)
                                           )
                               )
  )

;; failed to figure out what this is:
(defskelgroup skel-mech-explode mech mech-explode-lod0-jg mech-explode-idle-ja
              ((mech-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4.5)
              :origin-joint-index 3
              )

;; failed to figure out what this is:
0
