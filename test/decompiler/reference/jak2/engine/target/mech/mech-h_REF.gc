;;-*-Lisp-*-
(in-package goal)

;; definition of type mech-info
(deftype mech-info (basic)
  ((entity                 basic)
   (hud                    handle          1)
   (mech-trans             vector          :inline)
   (mech-quat              vector          :inline)
   (mech-scale             vector          :inline)
   (engine-sound-id        sound-id)
   (engine-sound-volume    float)
   (engine-sound-pitch     float)
   (thrust-sound-id        sound-id)
   (drag-sound-id          sound-id)
   (whine-sound-id         sound-id)
   (mech-start-time        time-frame)
   (mech-time              time-frame)
   (no-get-off-time        time-frame)
   (stick-lock             basic)
   (stick-off              basic)
   (forward-vel            meters)
   (jump-thrust            meters)
   (jump-thrust-fuel       float)
   (unstuck-time           time-frame)
   (stuck-count            int32)
   (back-touch-point       vector          :inline)
   (back-touch-trans       vector          :inline)
   (back-touch-time        time-frame)
   (attack-id              uint32)
   (shield-value           float)
   (shield-max             float)
   (walk-anim-leg          int32)
   (state-impact?          symbol          1)
   (state-impact           impact-control  1 :inline)
   (thruster-flame-width   meters)
   (thruster-flame-length  meters)
   (thruster-local-pos     vector          2 :inline)
   (exhaust-local-pos      vector          2 :inline)
   (exhaust-local-dir      vector          2 :inline)
   (smoke-local-pos        vector          2 :inline)
   (smoke-local-vel        vector          2 :inline)
   (particle-system-2d     basic)
   (particle-system-3d     basic)
   (part-thruster          basic)
   (part-thruster-scale-x  sp-field-init-spec)
   (part-thruster-scale-y  sp-field-init-spec)
   (part-quat              quaternion)
   (part-vel               vector)
   )
  )

;; definition for method 3 of type mech-info
(defmethod inspect ((this mech-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Thud[1] @ #x~X~%" (-> this hud))
  (format #t "~1Tmech-trans: ~`vector`P~%" (-> this mech-trans))
  (format #t "~1Tmech-quat: ~`vector`P~%" (-> this mech-quat))
  (format #t "~1Tmech-scale: ~`vector`P~%" (-> this mech-scale))
  (format #t "~1Tengine-sound-id: ~D~%" (-> this engine-sound-id))
  (format #t "~1Tengine-sound-volume: ~f~%" (-> this engine-sound-volume))
  (format #t "~1Tengine-sound-pitch: ~f~%" (-> this engine-sound-pitch))
  (format #t "~1Tthrust-sound-id: ~D~%" (-> this thrust-sound-id))
  (format #t "~1Tdrag-sound-id: ~D~%" (-> this drag-sound-id))
  (format #t "~1Twhine-sound-id: ~D~%" (-> this whine-sound-id))
  (format #t "~1Tmech-start-time: ~D~%" (-> this mech-start-time))
  (format #t "~1Tmech-time: ~D~%" (-> this mech-time))
  (format #t "~1Tno-get-off-time: ~D~%" (-> this no-get-off-time))
  (format #t "~1Tstick-lock: ~A~%" (-> this stick-lock))
  (format #t "~1Tstick-off: ~A~%" (-> this stick-off))
  (format #t "~1Tforward-vel: (meters ~m)~%" (-> this forward-vel))
  (format #t "~1Tjump-thrust: (meters ~m)~%" (-> this jump-thrust))
  (format #t "~1Tjump-thrust-fuel: ~f~%" (-> this jump-thrust-fuel))
  (format #t "~1Tunstuck-time: ~D~%" (-> this unstuck-time))
  (format #t "~1Tstuck-count: ~D~%" (-> this stuck-count))
  (format #t "~1Tback-touch-point: ~`vector`P~%" (-> this back-touch-point))
  (format #t "~1Tback-touch-trans: ~`vector`P~%" (-> this back-touch-trans))
  (format #t "~1Tback-touch-time: ~D~%" (-> this back-touch-time))
  (format #t "~1Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~1Tshield-value: ~f~%" (-> this shield-value))
  (format #t "~1Tshield-max: ~f~%" (-> this shield-max))
  (format #t "~1Twalk-anim-leg: ~D~%" (-> this walk-anim-leg))
  (format #t "~1Tstate-impact?[1] @ #x~X~%" (-> this state-impact?))
  (format #t "~1Tstate-impact[1] @ #x~X~%" (-> this state-impact))
  (format #t "~1Tthruster-flame-width: (meters ~m)~%" (-> this thruster-flame-width))
  (format #t "~1Tthruster-flame-length: (meters ~m)~%" (-> this thruster-flame-length))
  (format #t "~1Tthruster-local-pos[2] @ #x~X~%" (-> this thruster-local-pos))
  (format #t "~1Texhaust-local-pos[2] @ #x~X~%" (-> this exhaust-local-pos))
  (format #t "~1Texhaust-local-dir[2] @ #x~X~%" (-> this exhaust-local-dir))
  (format #t "~1Tsmoke-local-pos[2] @ #x~X~%" (-> this smoke-local-pos))
  (format #t "~1Tsmoke-local-vel[2] @ #x~X~%" (-> this smoke-local-vel))
  (format #t "~1Tparticle-system-2d: ~A~%" (-> this particle-system-2d))
  (format #t "~1Tparticle-system-3d: ~A~%" (-> this particle-system-3d))
  (format #t "~1Tpart-thruster: ~A~%" (-> this part-thruster))
  (format #t "~1Tpart-thruster-scale-x: #<sp-field-init-spec @ #x~X>~%" (-> this part-thruster-scale-x))
  (format #t "~1Tpart-thruster-scale-y: #<sp-field-init-spec @ #x~X>~%" (-> this part-thruster-scale-y))
  (format #t "~1Tpart-quat: #<quaternion @ #x~X>~%" (-> this part-quat))
  (format #t "~1Tpart-vel: #<vector @ #x~X>~%" (-> this part-vel))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mech mech mech-lod0-jg mech-mech-idle-ja
              ((mech-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4.5)
              :shadow mech-shadow-mg
              :origin-joint-index 3
              :shadow-joint-index 3
              )

;; definition for symbol *mech-shadow-control*, type shadow-control
(define *mech-shadow-control*
  (new 'static 'shadow-control :settings (new 'static 'shadow-settings
                                           :flags (shadow-flags disable-fade shdf03)
                                           :shadow-dir (new 'static 'vector :y -1.0 :w 614400.0)
                                           :bot-plane (new 'static 'plane :y 1.0 :w 81920.0)
                                           :top-plane (new 'static 'plane :y 1.0 :w 2048.0)
                                           )
                               )
  )

;; failed to figure out what this is:
(defskelgroup skel-mech-explode mech mech-explode-lod0-jg mech-explode-idle-ja
              ((mech-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4.5)
              :origin-joint-index 3
              )

;; failed to figure out what this is:
0
