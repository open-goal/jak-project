;;-*-Lisp-*-
(in-package goal)

;; definition of type board
(deftype board (process-drawable)
  ((control       control-info  :offset 128)
   (shadow-backup shadow-geo    :offset 208)
   (main          joint-mod     :offset 212)
   )
  :heap-base #x60
  :method-count-assert 23
  :size-assert         #xd8
  :flag-assert         #x17006000d8
  (:methods
    (idle (symbol) _type_ :state 20)
    (use () _type_ :state 21)
    (hidden () _type_ :state 22)
    )
  )

;; definition for method 3 of type board
(defmethod inspect board ((this board))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcontrol: ~A~%" (-> this root))
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (format #t "~2Tshadow-backup: ~A~%" (-> this shadow-backup))
  (format #t "~2Tmain: ~A~%" (-> this main))
  (label cfg-4)
  this
  )

;; definition of type board-info
(deftype board-info (basic)
  ((board                  (pointer board)                      :offset-assert   4)
   (camera-interp          float                                :offset-assert   8)
   (process                (pointer target)                     :offset-assert  12)
   (board-trans            vector                   :inline     :offset-assert  16)
   (board-quat             vector                   :inline     :offset-assert  32)
   (board-scale            vector                   :inline     :offset-assert  48)
   (main                   joint-mod                            :offset-assert  64)
   (upper-body             joint-mod                            :offset-assert  68)
   (sound-bank-knob        float                                :offset-assert  72)
   (sound-air-knob         float                                :offset-assert  76)
   (wind-sound-id          sound-id                             :offset-assert  80)
   (wind-sound-pitch       float                                :offset-assert  84)
   (wind-sound-volume      float                                :offset-assert  88)
   (engine-sound-id        sound-id                             :offset-assert  92)
   (engine-sound-pitch     float                                :offset-assert  96)
   (engine-sound-volume    float                                :offset-assert 100)
   (bank-sound-id          sound-id                             :offset-assert 104)
   (bank-sound-pitch       float                                :offset-assert 108)
   (bank-sound-volume      float                                :offset-assert 112)
   (ride-sound-id          sound-id                             :offset-assert 116)
   (spin-sound-id          sound-id                             :offset-assert 120)
   (spin-sound-volume      float                                :offset-assert 124)
   (spin-sound-pitch       float                                :offset-assert 128)
   (unknown-sound-id00     sound-id                             :offset-assert 132)
   (unknown-sound-id01     sound-id                             :offset-assert 136)
   (unknown-sound-id02     sound-id                             :offset-assert 140)
   (up-vector              vector                   2 :inline   :offset-assert 144)
   (slow-transv            vector                   :inline     :offset-assert 176)
   (board-time             time-frame                           :offset-assert 192)
   (board-get-on-time      time-frame                           :offset-assert 200)
   (in-air-time            time-frame                           :offset-assert 208)
   (unknown-time-frame00   time-frame                           :offset-assert 216)
   (unknown-time-frame01   time-frame                           :offset        224)
   (unknown-time-frame02   time-frame                           :offset        232)
   (stick-lock             symbol                               :offset        240)
   (stick-off              symbol                               :offset-assert 244)
   (stance-info            ground-tween-info        :inline     :offset-assert 248)
   (mods-backup            basic                                :offset-assert 284)
   (attack-id              uint32                               :offset-assert 288)
   (latch?                 symbol                               :offset-assert 292)
   (unknown-vector00       vector                   :inline     :offset        304)
   (unknown-vector01       vector                   :inline     :offset        320)
   (unknown-int00          uint32                               :offset        336)
   (unknown-symbol00       symbol                               :offset        340)
   (unstuck-time           time-frame                           :offset        344)
   (stuck-count            int32                                :offset-assert 352)
   (thrust-scale           float                                :offset-assert 356)
   (flip-time              time-frame                           :offset-assert 360)
   (transv-max             meters                               :offset-assert 368)
   (turn-anim-tilt?        symbol                               :offset-assert 372)
   (turn-anim-mag          float                                :offset-assert 376)
   (turn-anim-targ         float                                :offset-assert 380)
   (turn-anim-frame        float                                :offset-assert 384)
   (turn-anim-vel          float                                :offset-assert 388)
   (turn-anim-duck         float                                :offset-assert 392)
   (turn-anim-duck-vel     float                                :offset-assert 396)
   (tilt-anim-frame        vector                   :inline     :offset-assert 400)
   (tilt-anim-target       vector                   :inline     :offset-assert 416)
   (smack-surface-time     time-frame                           :offset-assert 432)
   (smack-speed            meters                               :offset-assert 440)
   (smack-normal           vector                   :inline     :offset-assert 448)
   (glance-time            time-frame                           :offset-assert 464)
   (glance-speed           meters                               :offset-assert 472)
   (glance-in-transv       vector                   :inline     :offset-assert 480)
   (glance-out-transv      vector                   :inline     :offset-assert 496)
   (glance-normal          vector                   :inline     :offset-assert 512)
   (on-flat-time           time-frame                           :offset-assert 528)
   (jump-land-time         time-frame                           :offset-assert 536)
   (slip-factor            float                                :offset-assert 544)
   (ground-on-dir          vector                   :inline     :offset-assert 560)
   (ride-time              time-frame                           :offset-assert 576)
   (ride-start-time        time-frame                           :offset-assert 584)
   (ride-button-time       time-frame                           :offset-assert 592)
   (ride-lean-targ         float                                :offset-assert 600)
   (ride-lean              float                                :offset-assert 604)
   (ride-leanv             float                                :offset-assert 608)
   (ride-lean-mag          float                                :offset-assert 612)
   (ride-tilt-targ         float                                :offset-assert 616)
   (ride-tilt              float                                :offset-assert 620)
   (ride-tiltv             float                                :offset-assert 624)
   (ride-tilt-mag          float                                :offset-assert 628)
   (ride-lock              symbol                               :offset-assert 632)
   (ride-lock-on           symbol                               :offset-assert 636)
   (ride-speed             meters                               :offset-assert 640)
   (ride-mode              uint32                               :offset-assert 644)
   (ride-rot               degrees                              :offset-assert 648)
   (ride-rot-old           degrees                              :offset-assert 652)
   (ride-rot-abs           degrees                  2           :offset-assert 656)
   (ride-rtv-abs           degrees                              :offset-assert 664)
   (ride-touch-segment     vector                   2 :inline   :offset-assert 672)
   (ride-dir               vector                   :inline     :offset-assert 704)
   (ride-vertex-length     int16                                :offset-assert 720)
   (ride-vertex-length-old int16                                :offset-assert 722)
   (ride-vertex-base       int16                                :offset-assert 724)
   (ride-vertex-base2      int16                                :offset-assert 726)
   (ride-vertex-index      float                                :offset-assert 728)
   (ride-vertex-index2     float                                :offset-assert 732)
   (ride-vertex-index-old  float                                :offset-assert 736)
   (ride-vertex            vector                   3 :inline   :offset-assert 752)
   (ride-segment           vector                   :inline     :offset-assert 800)
   (ride-dir-lean          vector                   :inline     :offset-assert 816)
   (ride-pad-vector        vector                   1 :inline   :offset-assert 832)
   (ride-vertex-old        vector                   3 :inline   :offset-assert 848)
   (ride-segment-old       vector                   :inline     :offset-assert 896)
   (ride-vertex-trail      vector                   128 :inline :offset-assert 912)
   (halfpipe-side-time     time-frame                           :offset-assert 2960)
   (halfpipe-jump-time     time-frame                           :offset-assert 2968)
   (halfpipe-lip-time      time-frame                           :offset-assert 2976)
   (halfpipe-time          time-frame                           :offset-assert 2984)
   (halfpipe-gspot-time    time-frame                           :offset-assert 2992)
   (halfpipe-lip-event     symbol                               :offset-assert 3000)
   (spin-check-time        time-frame                           :offset-assert 3008)
   (spin-time              time-frame                           :offset-assert 3016)
   (spin-start-time        time-frame                           :offset-assert 3024)
   (spin-start-dir         vector                   :inline     :offset-assert 3040)
   (spin-control           float                                :offset-assert 3056)
   (spin-ground-start-time time-frame                           :offset-assert 3064)
   (spin-ground-time       time-frame                           :offset-assert 3072)
   (spin-ground-press-time time-frame                           :offset-assert 3080)
   (flip-control           float                                :offset-assert 3088)
   (flip-count             int32                                :offset-assert 3092)
   (unknown-time-frame03   time-frame                           :offset        3104)
   (unknown-time-frame04   time-frame                           :offset        3112)
   (unknown-time-frame05   time-frame                           :offset        3120)
   (unknown-time-frame06   time-frame                           :offset        3128)
   (unknown-float00        float                                :offset        3136)
   (unknown-float01        float                                :offset        3140)
   (trickx-count           int32                                :offset        3144)
   (trotyv-max             degrees                              :offset-assert 3148)
   (trotyv                 degrees                              :offset-assert 3152)
   (troty                  degrees                              :offset-assert 3156)
   (troty-cum              degrees                              :offset-assert 3160)
   (unknown-deg00          degrees                              :offset        3164)
   (upper-body-rotyv-max   degrees                              :offset        3168)
   (upper-body-rotyv       degrees                              :offset-assert 3172)
   (upper-body-roty        degrees                              :offset-assert 3176)
   (cushion-base           meters                               :offset-assert 3180)
   (cushion-offset         meters                               :offset-assert 3184)
   (shock-offset           meters                               :offset-assert 3188)
   (shock-offsetv          meters                               :offset-assert 3192)
   (shock-rotx             meters                               :offset-assert 3196)
   (part-control           sparticle-launch-control             :offset-assert 3200)
   (trick-count            int32                                :offset-assert 3204)
   (trick-array            board-tricks             16          :offset-assert 3208)
   (trick-points-array     float                    16          :offset        3272)
   (trick-list             board-tricks             16          :offset        3336)
   (pad                    uint8                                :offset        3399)
   )
  :method-count-assert 11
  :size-assert         #xd48
  :flag-assert         #xb00000d48
  (:methods
    (add-to-trick-list (_type_ board-tricks float) none 9)
    (flush-trick-list (_type_) none 10)
    )
  )

;; definition for method 3 of type board-info
(defmethod inspect board-info ((this board-info))
  (when (not this)
    (set! this this)
    (goto cfg-19)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tboard: #x~X~%" (-> this board))
  (format #t "~1Tcamera-interp: ~f~%" (-> this camera-interp))
  (format #t "~1Tprocess: #x~X~%" (-> this process))
  (format #t "~1Tboard-trans: ~`vector`P~%" (-> this board-trans))
  (format #t "~1Tboard-quat: ~`vector`P~%" (-> this board-quat))
  (format #t "~1Tboard-scale: ~`vector`P~%" (-> this board-scale))
  (format #t "~1Tmain: ~A~%" (-> this main))
  (format #t "~1Tupper-body: ~A~%" (-> this upper-body))
  (format #t "~1Tsound-bank-knob: ~f~%" (-> this sound-bank-knob))
  (format #t "~1Tsound-air-knob: ~f~%" (-> this sound-air-knob))
  (format #t "~1Twind-sound-id: ~D~%" (-> this wind-sound-id))
  (format #t "~1Twind-sound-pitch: ~f~%" (-> this wind-sound-pitch))
  (format #t "~1Twind-sound-volume: ~f~%" (-> this wind-sound-volume))
  (format #t "~1Tengine-sound-id: ~D~%" (-> this engine-sound-id))
  (format #t "~1Tengine-sound-pitch: ~f~%" (-> this engine-sound-pitch))
  (format #t "~1Tengine-sound-volume: ~f~%" (-> this engine-sound-volume))
  (format #t "~1Tbank-sound-id: ~D~%" (-> this bank-sound-id))
  (format #t "~1Tbank-sound-pitch: ~f~%" (-> this bank-sound-pitch))
  (format #t "~1Tbank-sound-volume: ~f~%" (-> this bank-sound-volume))
  (format #t "~1Tride-sound-id: ~D~%" (-> this ride-sound-id))
  (format #t "~1Tspin-sound-id: ~D~%" (-> this spin-sound-id))
  (format #t "~1Tspin-sound-volume: ~f~%" (-> this spin-sound-volume))
  (format #t "~1Tspin-sound-pitch: ~f~%" (-> this spin-sound-pitch))
  (format #t "~1Tup-vector[2] @ #x~X~%" (-> this up-vector))
  (format #t "~1Tslow-transv: #<vector @ #x~X>~%" (-> this slow-transv))
  (format #t "~1Tboard-time: ~D~%" (-> this board-time))
  (format #t "~1Tboard-get-on-time: ~D~%" (-> this board-get-on-time))
  (format #t "~1Tin-air-time: ~D~%" (-> this in-air-time))
  (format #t "~1Tstick-lock: ~A~%" (-> this stick-lock))
  (format #t "~1Tstick-off: ~A~%" (-> this stick-off))
  (format #t "~1Tstance-info: #<ground-tween-info @ #x~X>~%" (-> this stance-info))
  (format #t "~1Tmods-backup: ~A~%" (-> this mods-backup))
  (format #t "~1Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~1Tlatch?: ~A~%" (-> this latch?))
  (format #t "~1Tunstuck-time: ~D~%" (-> this unstuck-time))
  (format #t "~1Tstuck-count: ~D~%" (-> this stuck-count))
  (format #t "~1Tthrust-scale: ~f~%" (-> this thrust-scale))
  (format #t "~1Tflip-time: ~D~%" (-> this flip-time))
  (format #t "~1Ttransv-max: (meters ~m)~%" (-> this transv-max))
  (format #t "~1Tturn-anim-tilt?: ~A~%" (-> this turn-anim-tilt?))
  (format #t "~1Tturn-anim-mag: ~f~%" (-> this turn-anim-mag))
  (format #t "~1Tturn-anim-targ: ~f~%" (-> this turn-anim-targ))
  (format #t "~1Tturn-anim-frame: ~f~%" (-> this turn-anim-frame))
  (format #t "~1Tturn-anim-vel: ~f~%" (-> this turn-anim-vel))
  (format #t "~1Tturn-anim-duck: ~f~%" (-> this turn-anim-duck))
  (format #t "~1Tturn-anim-duck-vel: ~f~%" (-> this turn-anim-duck-vel))
  (format #t "~1Ttilt-anim-frame: ~`vector`P~%" (-> this tilt-anim-frame))
  (format #t "~1Ttilt-anim-targ: ~`vector`P~%" (-> this tilt-anim-target))
  (format #t "~1Tsmack-surface-time: ~D~%" (-> this smack-surface-time))
  (format #t "~1Tsmack-speed: (meters ~m)~%" (-> this smack-speed))
  (format #t "~1Tsmack-normal: ~`vector`P~%" (-> this smack-normal))
  (format #t "~1Tglance-time: ~D~%" (-> this glance-time))
  (format #t "~1Tglance-speed: (meters ~m)~%" (-> this glance-speed))
  (format #t "~1Tglance-in-transv: ~`vector`P~%" (-> this glance-in-transv))
  (format #t "~1Tglance-out-transv: ~`vector`P~%" (-> this glance-out-transv))
  (format #t "~1Tglance-normal: ~`vector`P~%" (-> this glance-normal))
  (format #t "~1Ton-flat-time: ~D~%" (-> this on-flat-time))
  (format #t "~1Tjump-land-time: ~D~%" (-> this jump-land-time))
  (format #t "~1Tslip-factor: ~f~%" (-> this slip-factor))
  (format #t "~1Tground-on-dir: ~`vector`P~%" (-> this ground-on-dir))
  (format #t "~1Tride-time: ~D~%" (-> this ride-time))
  (format #t "~1Tride-start-time: ~D~%" (-> this ride-start-time))
  (format #t "~1Tride-button-time: ~D~%" (-> this ride-button-time))
  (format #t "~1Tride-lean-targ: ~f~%" (-> this ride-lean-targ))
  (format #t "~1Tride-lean: ~f~%" (-> this ride-lean))
  (format #t "~1Tride-leanv: ~f~%" (-> this ride-leanv))
  (format #t "~1Tride-lean-mag: ~f~%" (-> this ride-lean-mag))
  (format #t "~1Tride-tilt-targ: ~f~%" (-> this ride-tilt-targ))
  (format #t "~1Tride-tilt: ~f~%" (-> this ride-tilt))
  (format #t "~1Tride-tiltv: ~f~%" (-> this ride-tiltv))
  (format #t "~1Tride-tilt-mag: ~f~%" (-> this ride-tilt-mag))
  (format #t "~1Tride-lock: ~A~%" (-> this ride-lock))
  (format #t "~1Tride-lock-on: ~A~%" (-> this ride-lock-on))
  (format #t "~1Tride-speed: (meters ~m)~%" (-> this ride-speed))
  (format #t "~1Tride-mode: ~D~%" (-> this ride-mode))
  (format #t "~1Tride-rot: (deg ~r)~%" (-> this ride-rot))
  (format #t "~1Tride-rot-old: (deg ~r)~%" (-> this ride-rot-old))
  (format #t "~1Tride-rot-abs[2] @ #x~X~%" (-> this ride-rot-abs))
  (dotimes (s5-0 2)
    (format #t "~T  [~D]~1Tride-rot-abs: (deg ~r)~%" s5-0 (-> this ride-rot-abs s5-0))
    )
  (format #t "~1Tride-rotv-abs: (deg ~r)~%" (-> this ride-rtv-abs))
  (format #t "~1Tride-touch-segment[2] @ #x~X~%" (-> this ride-touch-segment))
  (dotimes (s5-1 2)
    (format #t "~T  [~D]~1Tride-touch-segment: ~`vector`P~%" s5-1 (-> this ride-touch-segment s5-1))
    )
  (format #t "~1Tride-dir: ~`vector`P~%" (-> this ride-dir))
  (format #t "~1Tride-vertex-length: ~D~%" (-> this ride-vertex-length))
  (format #t "~1Tride-vertex-length-old: ~D~%" (-> this ride-vertex-length-old))
  (format #t "~1Tride-vertex-base: ~D~%" (-> this ride-vertex-base))
  (format #t "~1Tride-vertex-base2: ~D~%" (-> this ride-vertex-base2))
  (format #t "~1Tride-vertex-index: ~f~%" (-> this ride-vertex-index))
  (format #t "~1Tride-vertex-index2: ~f~%" (-> this ride-vertex-index2))
  (format #t "~1Tride-vertex-index-old: ~f~%" (-> this ride-vertex-index-old))
  (format #t "~1Tride-vertex[3] @ #x~X~%" (-> this ride-vertex))
  (dotimes (s5-2 3)
    (format #t "~T  [~D]~1Tride-vertex: ~`vector`P~%" s5-2 (-> this ride-vertex s5-2))
    )
  (format #t "~1Tride-segment: ~`vector`P~%" (-> this ride-segment))
  (format #t "~1Tride-dir-lean: ~`vector`P~%" (-> this ride-dir-lean))
  (format #t "~1Tride-pad-vector[1] @ #x~X~%" (-> this ride-pad-vector))
  (format #t "~1Tride-vertex-old[3] @ #x~X~%" (-> this ride-vertex-old))
  (dotimes (s5-3 3)
    (format #t "~T  [~D]~1Tride-vertex-old: ~`vector`P~%" s5-3 (-> this ride-vertex-old s5-3))
    )
  (format #t "~1Tride-segment-old: ~`vector`P~%" (-> this ride-segment-old))
  (format #t "~1Tride-vertex-trail[128] @ #x~X~%" (-> this ride-vertex-trail))
  (dotimes (s5-4 128)
    (format #t "~T  [~D]~1Tride-vertex-trail: ~`vector`P~%" s5-4 (-> this ride-vertex-trail s5-4))
    )
  (format #t "~1Thalfpipe-side-time: ~D~%" (-> this halfpipe-side-time))
  (format #t "~1Thalfpipe-jump-time: ~D~%" (-> this halfpipe-jump-time))
  (format #t "~1Thalfpipe-lip-time: ~D~%" (-> this halfpipe-lip-time))
  (format #t "~1Thalfpipe-time: ~D~%" (-> this halfpipe-time))
  (format #t "~1Thalfpipe-gspot-time: ~D~%" (-> this halfpipe-gspot-time))
  (format #t "~1Thalfpipe-lip-event: ~A~%" (-> this halfpipe-lip-event))
  (format #t "~1Tspin-check-time: ~D~%" (-> this spin-check-time))
  (format #t "~1Tspin-time: ~D~%" (-> this spin-time))
  (format #t "~1Tspin-start-time: ~D~%" (-> this spin-start-time))
  (format #t "~1Tspin-start-dir: ~`vector`P~%" (-> this spin-start-dir))
  (format #t "~1Tspin-control: ~f~%" (-> this spin-control))
  (format #t "~1Tspin-ground-start-time: ~D~%" (-> this spin-ground-start-time))
  (format #t "~1Tspin-ground-time: ~D~%" (-> this spin-ground-time))
  (format #t "~1Tspin-ground-press-time: ~D~%" (-> this spin-ground-press-time))
  (format #t "~1Tflip-control: ~f~%" (-> this flip-control))
  (format #t "~1Tflip-count: ~D~%" (-> this flip-count))
  (format #t "~1Ttrickx-count: ~D~%" (-> this trickx-count))
  (format #t "~1Trotyv-max: (deg ~r)~%" (-> this trotyv-max))
  (format #t "~1Trotyv: (deg ~r)~%" (-> this trotyv))
  (format #t "~1Troty: (deg ~r)~%" (-> this troty))
  (format #t "~1Troty-cum: (deg ~r)~%" (&-> this troty-cum))
  (format #t "~1Tupper-body-rotyv-max: (deg ~r)~%" (-> this upper-body-rotyv-max))
  (format #t "~1Tupper-body-rotyv: (deg ~r)~%" (-> this upper-body-rotyv))
  (format #t "~1Tupper-body-roty: (deg ~r)~%" (-> this upper-body-roty))
  (format #t "~1Tcushion-base: (meters ~m)~%" (-> this cushion-base))
  (format #t "~1Tcushion-offset: (meters ~m)~%" (-> this cushion-offset))
  (format #t "~1Tshock-offset: (meters ~m)~%" (-> this shock-offset))
  (format #t "~1Tshock-offsetv: (meters ~m)~%" (-> this shock-offsetv))
  (format #t "~1Tshock-rotx: (meters ~m)~%" (-> this shock-rotx))
  (format #t "~1Ttrick-count: ~D~%" (-> this trick-count))
  (label cfg-19)
  this
  )

;; definition of type target-board-bank
(deftype target-board-bank (basic)
  ((jump-height-min        meters   :offset-assert   4)
   (jump-height-max        meters   :offset-assert   8)
   (duck-jump-height-min   meters   :offset-assert  12)
   (duck-jump-height-max   meters   :offset-assert  16)
   (turn-frames            float    :offset-assert  20)
   (wall-kick-window       seconds  :offset-assert  24)
   (cushion                meters   :offset-assert  32)
   (trickx-jump-height-min meters   :offset-assert  36)
   (trickx-jump-height-max meters   :offset-assert  40)
   (tricky-jump-height-min meters   :offset-assert  44)
   (tricky-jump-height-max meters   :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; definition for method 3 of type target-board-bank
(defmethod inspect target-board-bank ((this target-board-bank))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tjump-height-min: (meters ~m)~%" (-> this jump-height-min))
  (format #t "~1Tjump-height-max: (meters ~m)~%" (-> this jump-height-max))
  (format #t "~1Tduck-jump-height-min: (meters ~m)~%" (-> this duck-jump-height-min))
  (format #t "~1Tduck-jump-height-max: (meters ~m)~%" (-> this duck-jump-height-max))
  (format #t "~1Tturn-frames: ~f~%" (-> this turn-frames))
  (format #t "~1Twall-kick-window: (seconds ~e)~%" (-> this wall-kick-window))
  (format #t "~1Tcushion: (meters ~m)~%" (-> this cushion))
  (format #t "~1Ttrickx-jump-height-min: (meters ~m)~%" (-> this trickx-jump-height-min))
  (format #t "~1Ttrickx-jump-height-max: (meters ~m)~%" (-> this trickx-jump-height-max))
  (format #t "~1Ttricky-jump-height-min: (meters ~m)~%" (-> this tricky-jump-height-min))
  (format #t "~1Ttricky-jump-height-max: (meters ~m)~%" (-> this tricky-jump-height-max))
  (label cfg-4)
  this
  )

;; definition for symbol *TARGET_BOARD-bank*, type target-board-bank
(define *TARGET_BOARD-bank* (new 'static 'target-board-bank
                              :jump-height-min (meters 1.01)
                              :jump-height-max (meters 3.5)
                              :duck-jump-height-min (meters 2.5)
                              :duck-jump-height-max (meters 5)
                              :turn-frames 10.0
                              :wall-kick-window (seconds 0.05)
                              :cushion (meters 1)
                              :trickx-jump-height-min (meters 0.9)
                              :trickx-jump-height-max (meters 1.2)
                              :tricky-jump-height-min (meters 0.9)
                              :tricky-jump-height-max (meters 1.2)
                              )
        )

;; definition for function want-to-board?
;; INFO: Used lq/sq
(defbehavior want-to-board? target ()
  (and (logtest? (-> self game features) (game-feature board))
       (or (and (cpad-pressed? (-> self control cpad number) r2)
                (or (!= *cheat-mode* 'debug)
                    (not (logtest? (-> *cpad-list* cpads (-> self control cpad number) button0-abs 0) (pad-buttons l2)))
                    )
                (not *pause-lock*)
                (time-elapsed? (-> self control time-of-last-debug-heal) (seconds 0.1))
                (>= (-> self control last-time-on-surface) (-> self control time-of-last-debug-float))
                )
           (-> self board latch?)
           )
       (not (focus-test? self dead hit grabbed in-head edge-grab pole board pilot mech dark))
       (or (zero? (-> self board)) (time-elapsed? (-> self board board-time) (seconds 0.5)))
       (not (logtest? (state-flags prevent-board) (-> self state-flags)))
       (< (-> self board board-time) (-> self control list-time-on-ground))
       (not (logtest? (surface-flag no-board) (-> self control current-surface flags)))
       (or (not (logtest? (-> self control current-surface flags) (surface-flag duck))) (can-exit-duck? self))
       (not (and (logtest? (-> self water flags) (water-flags under-water))
                 (not (logtest? (-> self water flags) (water-flags swim-ground)))
                 )
            )
       (not *artist-fix-visible*)
       (let ((gp-0 (new 'stack-no-clear 'collide-query)))
         (let ((s5-0 (new 'stack-no-clear 'inline-array 'sphere 3)))
           (dotimes (s4-0 3)
             ((method-of-type sphere new) (the-as symbol (-> s5-0 s4-0)) sphere)
             )
           (let ((v1-51 (new 'stack-no-clear 'vector)))
             (set! (-> v1-51 quad) (-> self control trans quad))
             (if (focus-test? self on-water)
                 (set! (-> v1-51 y) (-> self water height))
                 )
             (set! (-> s5-0 0 quad) (-> v1-51 quad))
             (+! (-> s5-0 0 y) 8192.0)
             (set! (-> s5-0 0 r) 2867.2)
             (set! (-> s5-0 1 quad) (-> v1-51 quad))
             (+! (-> s5-0 1 y) 12288.0)
             (set! (-> s5-0 1 r) 2867.2)
             (set! (-> s5-0 2 quad) (-> v1-51 quad))
             )
           (+! (-> s5-0 2 y) 16384.0)
           (set! (-> s5-0 2 r) 2867.2)
           (let ((v1-55 gp-0))
             (set! (-> v1-55 best-dist) (the-as float s5-0))
             (set! (-> v1-55 num-spheres) (the-as uint 3))
             (set! (-> v1-55 collide-with) (logclear
                                             (-> self control root-prim prim-core collide-with)
                                             (collide-spec civilian enemy vehicle-sphere projectile)
                                             )
                   )
             (set! (-> v1-55 ignore-process0) #f)
             (set! (-> v1-55 ignore-process1) #f)
             (set! (-> v1-55 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
             (set! (-> v1-55 best-my-prim) (the-as collide-shape-prim #t))
             (set! (-> v1-55 action-mask) (collide-action solid))
             )
           )
         (and (if (fill-and-probe-using-spheres *collide-cache* gp-0)
                  #f
                  #t
                  )
              (begin (set! (-> self board latch?) #t) (time-elapsed? (-> self gun gun-time) (seconds 0.4)))
              )
         )
       )
  )

;; failed to figure out what this is:
(defskelgroup skel-board board board-lod0-jg board-board-idle-ja
              ((board-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.5)
              :shadow board-shadow-mg
              :sort 1
              :origin-joint-index 3
              )

;; definition for symbol *board-shadow-control*, type shadow-control
(define *board-shadow-control*
  (new 'static 'shadow-control :settings (new 'static 'shadow-settings
                                           :flags (shadow-flags disable-fade shdf03)
                                           :shadow-dir (new 'static 'vector :y -1.0 :w 614400.0)
                                           :bot-plane (new 'static 'plane :y 1.0 :w 81920.0)
                                           :top-plane (new 'static 'plane :y 1.0 :w 2048.0)
                                           )
                               )
  )
