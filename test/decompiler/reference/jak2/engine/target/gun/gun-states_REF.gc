;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defstate target-gun-stance (target)
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('gun)
       (let ((gp-0 (-> event param 0))
             (v0-0 (target-standard-event-handler proc arg1 event-type event))
             )
         (when v0-0
           (cond
             ((= gp-0 2)
              (if (logtest? (-> self game features) (game-feature gun-upgrade-speed))
                  (set! (-> self control unknown-word04) (the-as uint (-> self draw art-group data 309)))
                  (set! (-> self control unknown-word04) (the-as uint (-> self draw art-group data 256)))
                  )
              )
             ((= gp-0 4)
              (set! (-> self control unknown-word04) (the-as uint (-> self draw art-group data 259)))
              )
             ((= gp-0 1)
              (set! (-> self control unknown-word04) (the-as uint (-> self draw art-group data 246)))
              )
             ((= gp-0 3)
              (set! (-> self control unknown-word04) (the-as uint (-> self draw art-group data 258)))
              )
             )
           )
         v0-0
         )
       )
      (('wade)
       #f
       )
      (else
        (target-standard-event-handler proc arg1 event-type event)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self state-flags) (logior (state-flags lleg-still rleg-still) (-> self state-flags)))
    (set! (-> self control mod-surface) *gun-walk-mods*)
    (set! (-> self control unknown-word04) (the-as uint #f))
    (set! (-> self state-time) (-> self clock frame-counter))
    (none)
    )
  :exit (behavior ()
    (set! (-> self control bend-target) 0.0)
    (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
    (target-state-hook-exit)
    (target-gun-exit)
    (none)
    )
  :trans (behavior ()
    ((-> self state-hook))
    (when (= (-> self control ground-pat material) (pat-material ice))
      (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
      (set! (-> self control bend-target) 0.0)
      (remove-exit)
      (go target-ice-stance)
      )
    (when (or (move-legs?) (< 8192.0 (fabs (-> self gun gun-roty-rel))))
      (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
      (set! (-> self control bend-target) 0.0)
      (remove-exit)
      (go target-gun-walk)
      )
    (if (want-to-darkjak?)
        (go target-darkjak-get-on 2)
        )
    (when (and (cpad-hold? (-> self control cpad number) l1) (can-duck?))
      (logclear! (-> self state-flags) (state-flags lleg-still rleg-still))
      (set! (-> self control bend-target) 0.0)
      (remove-exit)
      (go target-duck-stance #f)
      )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons x)
                       )
             (can-jump? #f)
             )
        (target-jump-go)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons circle)
                       )
             (can-feet? #t)
             )
        (go target-attack)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons square)
                       )
             (can-hands? #t)
             )
        (go target-running-attack)
        )
    (slide-down-test)
    (fall-test target-falling -4096000.0)
    (none)
    )
  :post target-gun-post
  )

;; failed to figure out what this is:
(defstate target-gun-walk (target)
  :event target-standard-event-handler
  :enter (behavior ()
    (set! (-> self state-time) (-> self clock frame-counter))
    (set! (-> self control mod-surface) *gun-walk-mods*)
    (case (-> self gun gun-type)
      (((pickup-type eco-yellow) (pickup-type eco-blue))
       (set! (-> self control unknown-word04) (the-as uint 0))
       0
       )
      (else
        (set! (-> self control unknown-word04) (the-as uint 1))
        )
      )
    (none)
    )
  :exit (behavior ()
    (target-effect-exit)
    (target-state-hook-exit)
    (target-gun-exit)
    (none)
    )
  :trans (behavior ()
    (cond
      ((zero? (-> self control unknown-spool-anim00))
       (case (-> self gun gun-type)
         (((pickup-type eco-red) (pickup-type eco-dark))
          (remove-exit)
          (go target-gun-walk)
          )
         )
       )
      (else
        (case (-> self gun gun-type)
          (((pickup-type eco-yellow) (pickup-type eco-blue))
           (remove-exit)
           (go target-gun-walk)
           )
          )
        )
      )
    ((-> self state-hook))
    (if (not (using-gun? self))
        (go target-walk)
        )
    (if (logtest? (water-flags wading) (-> self water flags))
        (go target-wade-walk)
        )
    (when (= (-> self control ground-pat material) (pat-material ice))
      (target-effect-exit)
      (remove-exit)
      (go target-ice-walk)
      )
    (when (not (or (move-legs?) (< 182.04445 (fabs (-> self gun gun-roty-rel)))))
      (target-effect-exit)
      (remove-exit)
      (go target-gun-stance)
      )
    (if (want-to-darkjak?)
        (go target-darkjak-get-on 2)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons l1)
                       )
             (and (!= (-> *cpad-list* cpads (-> self control cpad number) stick0-speed) 0.0) (can-roll?))
             )
        (go target-roll)
        )
    (when (and (cpad-hold? (-> self control cpad number) l1) (can-duck?))
      (target-effect-exit)
      (remove-exit)
      (go target-duck-walk #f)
      )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons x)
                       )
             (can-jump? #f)
             )
        (target-jump-go)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons circle)
                       )
             (can-feet? #t)
             )
        (go target-attack)
        )
    (if (and (logtest? (logior (logior (-> *cpad-list* cpads (-> self control cpad number) button0-rel 0)
                                       (-> *cpad-list* cpads (-> self control cpad number) button0-rel 1)
                                       )
                               (-> *cpad-list* cpads (-> self control cpad number) button0-rel 2)
                               )
                       (pad-buttons square)
                       )
             (can-hands? #t)
             )
        (go target-running-attack)
        )
    (if (wall-hide?)
        (go target-hide)
        )
    (slide-down-test)
    (fall-test target-falling -4096000.0)
    (none)
    )
  :code (behavior ()
    (target-walk-anim -300)
    (none)
    )
  :post target-gun-post
  )
