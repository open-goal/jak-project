;;-*-Lisp-*-
(in-package goal)

;; definition of type gun-eject
(deftype gun-eject (projectile-bounce)
  ()
  :heap-base #x170
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  )

;; definition for method 3 of type gun-eject
(defmethod inspect gun-eject ((obj gun-eject))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 31 of type gun-eject
;; INFO: Return type mismatch int vs none.
(defmethod projectile-method-31 gun-eject ((obj gun-eject))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-gun" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (ja-channel-set! 1)
  (let ((v1-5 (-> obj skel root-channel 0)))
    (set! (-> v1-5 frame-group) (-> (the-as gun (-> obj parent 0)) skel channel 0 frame-group))
    )
  (let ((t9-3 (method-of-type projectile-bounce projectile-method-31)))
    (t9-3 obj)
    )
  (quaternion-copy! (-> obj root quat) (-> (the-as gun (-> obj parent 0)) root quat))
  (set! (-> obj timeout) (seconds 4))
  (set! (-> (the-as collide-shape (-> obj root)) root-prim local-sphere w) 3276.8)
  (logclear! (-> obj mask) (process-mask projectile))
  0
  (none)
  )

;; definition of type gun-mag-yellow
(deftype gun-mag-yellow (projectile-bounce)
  ()
  :heap-base #x170
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  )

;; definition for method 3 of type gun-mag-yellow
(defmethod inspect gun-mag-yellow ((obj gun-mag-yellow))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 31 of type gun-mag-yellow
;; INFO: Return type mismatch int vs none.
(defmethod projectile-method-31 gun-mag-yellow ((obj gun-mag-yellow))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-yellow" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((t9-2 (method-of-type projectile-bounce projectile-method-31)))
    (t9-2 obj)
    )
  (set! (-> obj timeout) (seconds 4))
  (sound-play "dark-shot-fire")
  0
  (none)
  )

;; definition of type gun-mag-red
(deftype gun-mag-red (projectile-bounce)
  ()
  :heap-base #x170
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  )

;; definition for method 3 of type gun-mag-red
(defmethod inspect gun-mag-red ((obj gun-mag-red))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 31 of type gun-mag-red
;; INFO: Return type mismatch int vs none.
(defmethod projectile-method-31 gun-mag-red ((obj gun-mag-red))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-red" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((t9-2 (method-of-type projectile-bounce projectile-method-31)))
    (t9-2 obj)
    )
  (set! (-> obj timeout) (seconds 4))
  (sound-play "dark-shot-fire")
  0
  (none)
  )

;; definition of type gun-mag-blue
(deftype gun-mag-blue (projectile-bounce)
  ()
  :heap-base #x170
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  )

;; definition for method 3 of type gun-mag-blue
(defmethod inspect gun-mag-blue ((obj gun-mag-blue))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 31 of type gun-mag-blue
;; INFO: Return type mismatch int vs none.
(defmethod projectile-method-31 gun-mag-blue ((obj gun-mag-blue))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-blue" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((t9-2 (method-of-type projectile-bounce projectile-method-31)))
    (t9-2 obj)
    )
  (set! (-> obj timeout) (seconds 4))
  (sound-play "dark-shot-fire")
  0
  (none)
  )

;; definition of type gun-mag-dark
(deftype gun-mag-dark (projectile-bounce)
  ()
  :heap-base #x170
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  )

;; definition for method 3 of type gun-mag-dark
(defmethod inspect gun-mag-dark ((obj gun-mag-dark))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 obj)
    )
  (label cfg-4)
  obj
  )

;; definition for method 31 of type gun-mag-dark
;; INFO: Return type mismatch int vs none.
(defmethod projectile-method-31 gun-mag-dark ((obj gun-mag-dark))
  (initialize-skeleton
    obj
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-dark" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((t9-2 (method-of-type projectile-bounce projectile-method-31)))
    (t9-2 obj)
    )
  (set! (-> obj timeout) (seconds 4))
  (sound-play "dark-shot-fire")
  0
  (none)
  )

;; definition of type beam-info
(deftype beam-info (structure)
  ((y-scale float  :offset-assert   0)
   )
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

;; definition for method 3 of type beam-info
(defmethod inspect beam-info ((obj beam-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'beam-info)
  (format #t "~1Ty-scale: ~f~%" (-> obj y-scale))
  (label cfg-4)
  obj
  )

;; definition for symbol *beam-info*, type beam-info
(define *beam-info* (new 'static 'beam-info))

;; definition for function birth-func-setup-beam
;; INFO: Return type mismatch int vs none.
(defun birth-func-setup-beam ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (a0-2 float) (a0-3 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a0-1 arg2)
          (v1-0 *particle-quat*)
          )
      (cond
        ((< (-> v1-0 w) 0.0)
         (.lvf vf1 (&-> a0-1 conerot quad))
         (.lvf vf2 (&-> v1-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> a0-1 conerot quad) vf1)
         (.mov a0-2 vf1)
         )
        (else
          (.lvf vf1 (&-> a0-1 conerot quad))
          (.lvf vf2 (&-> v1-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> a0-1 conerot quad) vf1)
          (.mov a0-3 vf1)
          )
        )
      )
    (set! (-> arg2 conerot w) (-> *beam-info* y-scale))
    0
    (none)
    )
  )

;; definition for function birth-func-laser-pointer
;; INFO: Return type mismatch int vs none.
(defun birth-func-laser-pointer ((arg0 int) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (local-vars (a0-2 float) (a0-3 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((a0-1 arg2)
          (v1-0 *particle-quat*)
          )
      (cond
        ((< (-> v1-0 w) 0.0)
         (.lvf vf1 (&-> a0-1 conerot quad))
         (.lvf vf2 (&-> v1-0 vec quad))
         (.sub.vf vf1 vf0 vf2 :mask #b111)
         (.svf (&-> a0-1 conerot quad) vf1)
         (.mov a0-2 vf1)
         )
        (else
          (.lvf vf1 (&-> a0-1 conerot quad))
          (.lvf vf2 (&-> v1-0 vec quad))
          (.add.vf vf1 vf0 vf2 :mask #b111)
          (.svf (&-> a0-1 conerot quad) vf1)
          (.mov a0-3 vf1)
          )
        )
      )
    (set! (-> arg2 conerot w) (-> *beam-info* y-scale))
    (set! (-> arg1 user1-int16) (the-as uint (logand (/ (-> *display* base-clock frame-counter) 10) 31)))
    0
    (none)
    )
  )

;; definition for function draw-beam
;; INFO: Used lq/sq
;; ERROR: failed type prop at 27: Could not figure out load: (set! f30 (l.f (+ v1 4)))
(defun draw-beam ((a0-0 sparticle-launcher) (a1-0 vector) (a2-0 vector) (a3-0 symbol) (t0-0 symbol))
  (local-vars
    (v0-0 symbol)
    (v0-1 uint)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v1-0 vector)
    (v1-1 vector)
    (v1-2 uint128)
    (v1-3 symbol)
    (v1-5 type)
    (v1-6 uint)
    (v1-8 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (a0-1 vector)
    (a0-2 vector)
    (a0-3 sparticle-launcher)
    (a0-7 none)
    (a0-8 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a0-13 none)
    (a1-1 vector)
    (a1-2 vector)
    (a1-3 int)
    (a1-5 none)
    (a1-6 none)
    (a1-9 none)
    (a2-1 none)
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a3-1 none)
    (a3-2 none)
    (a3-4 none)
    (a3-5 none)
    (t1-0 none)
    (t1-1 none)
    (s3-0 vector)
    (s4-1 none)
    (s5-0 vector)
    (t9-0 (function vector vector symbol))
    (t9-1 (function sparticle-launcher int uint))
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (f0-0 none)
    (f0-1 none)
    (f30-0 none)
    )
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         )
    (init-vf0-vector)
    (when (begin
            (or (begin
                  (set! a1-1 (new 'stack-no-clear 'vector))
                  (set! v1-0 a1-0)
                  (set! a0-1 a2-0)
                  (set! a1-2 (vector+!2 a1-1 v1-0 a0-1))
                  (set! s3-0 (new 'stack-no-clear 'vector))
                  (set! v1-1 a2-0)
                  (set! v1-2 (-> v1-1 quad))
                  (set! (-> s3-0 quad) v1-2)
                  (not t0-0)
                  )
                (begin (set! t9-0 line-in-view-frustum?) (set! a0-2 a1-0) (set! v0-0 (call! a0-2 a1-2)) (set! v1-3 v0-0))
                )
            v1-3
            )
      (when (begin
              (set! s5-0 (new 'stack-no-clear 'vector))
              (set! a0-3 a0-0)
              (set! v1-5 (-> a0-3 type))
              (set! t9-1 (method-of-type v1-5 sparticle-launcher-method-9))
              (set! a1-3 17)
              (set! v0-1 (call! a0-3 a1-3))
              (set! v1-6 v0-1)
              v1-6
              )
        (when (begin (set! f30-0 (the-as none (l.f (+ v1-6 4)))) a3-0)
          (set! v1-8 (the-as none (veclength a2-0)))
          (set! f0-0 (the-as none (gpr->fpr v1-8)))
          (set! f30-0 (the-as none (min.s f30-0 f0-0)))
          (set! v1-9 (the-as none (fpr->gpr f30-0)))
          )
        (set! t9-2 (the-as none vector-normalize!))
        (set! a0-5 (the-as none s3-0))
        (set! a1-4 (the-as none (fpr->gpr f30-0)))
        (call!)
        (set! v1-10 (the-as none *beam-info*))
        (s.f! v1-10 f30-0)
        (set! a0-6 (the-as none (fpr->gpr f30-0)))
        )
      (set! v1-11 (the-as none s5-0))
      (set! a0-7 (the-as none s3-0))
      (set! a1-5 (the-as none #x3f000000))
      (set! f0-1 (the-as none (gpr->fpr a1-5)))
      (.lvf vf2 a0-7)
      (.lvf vf1 (&-> a1-0 quad))
      (set! a0-8 (the-as none (fpr->gpr f0-1)))
      (.mov vf3 a0-8)
      (.add.x.vf vf4 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf2 vf3)
      (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
      (s.vf! v1-11 vf4)
      (set! t9-3 (the-as none vector-normalize!))
      (set! a0-9 (the-as none s3-0))
      (set! a1-6 (the-as none #x3f800000))
      (call!)
      (set! t9-4 (the-as none forward-up->quaternion))
      (set! a0-10 (the-as none *particle-quat*))
      (set! a2-1 (the-as none *y-vector*))
      (set! a1-7 (the-as none s3-0))
      (call!)
      (set! t9-5 (the-as none sp-launch-particles-var))
      (set! a0-11 (the-as none *sp-particle-system-3d*))
      (set! a1-8 (the-as none a0-0))
      (set! a2-2 (the-as none *launch-matrix*))
      (set! v1-12 (the-as none (+ a2-2 48)))
      (set! a3-1 (the-as none s5-0))
      (set! a3-2 (the-as none (l.q a3-1)))
      (s.q! v1-12 a3-2)
      (set! t1-0 (the-as none #x3f800000))
      (call!)
      (set! s4-1 (the-as none 0))
      (while (<.si s4-1 2)
        (set! t9-6 (the-as none quaternion-rotate-local-z!))
        (set! a0-12 (the-as none *particle-quat*))
        (set! a1-9 (the-as none *particle-quat*))
        (set! a2-3 (the-as none #x462aaaab))
        (call!)
        (set! t9-7 (the-as none sp-launch-particles-var))
        (set! a0-13 (the-as none *sp-particle-system-3d*))
        (set! a1-10 (the-as none a0-0))
        (set! a2-4 (the-as none *launch-matrix*))
        (set! v1-13 (the-as none (+ a2-4 48)))
        (set! a3-4 (the-as none s5-0))
        (set! a3-5 (the-as none (l.q a3-4)))
        (s.q! v1-13 a3-5)
        (set! t1-1 (the-as none #x3f800000))
        (call!)
        (set! s4-1 (the-as none (+ s4-1 1)))
        )
      )
    (set! v0-8 (the-as none 0))
    (ret-none)
    )
  )

;; definition for method 7 of type gun
;; INFO: Return type mismatch process-drawable vs gun.
(defmethod relocate gun ((obj gun) (arg0 int))
  (if (nonzero? (-> obj barrel))
      (&+! (-> obj barrel) arg0)
      )
  (dotimes (v1-4 4)
    (if (nonzero? (-> obj mag v1-4))
        (&+! (-> obj mag v1-4) arg0)
        )
    )
  (the-as gun ((method-of-type process-drawable relocate) obj arg0))
  )

;; definition for function gun-post
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior gun-post gun ()
  (let ((gp-0 (ppointer->process (-> (the-as gun self) parent))))
    (let ((s5-0 (the-as gun self)))
      (set! self gp-0)
      (target-gun-compute-pos)
      (set! self s5-0)
      )
    (set! (-> (the-as gun self) root trans quad) (-> (the-as target gp-0) gun gun-pos trans quad))
    (let ((v1-6 (-> (the-as target gp-0) gun gun-pos quat vec quad)))
      (set! (-> (the-as gun self) root quat vec quad) v1-6)
      )
    (set! (-> (the-as gun self) root scale quad) (-> (the-as target gp-0) gun gun-pos scale quad))
    (when (-> (the-as gun self) read-scale)
      (let ((s5-1 (new 'stack-no-clear 'vector))
            (s4-0 (new 'stack-no-clear 'vector))
            )
        (matrix->scale (-> (the-as target gp-0) node-list data 24 bone transform) s5-1)
        (vector-float*! s5-1 s5-1 0.71428573)
        (if (< 0.0 (-> (the-as target gp-0) gun gun-daxter))
            (matrix->scale (-> (the-as target gp-0) sidekick 0 node-list data 28 bone transform) s4-0)
            )
        (vector-lerp! (-> (the-as gun self) root scale) s5-1 s4-0 (-> (the-as target gp-0) gun gun-daxter))
        )
      )
    (set! (-> (the-as gun self) draw light-index) (-> (the-as target gp-0) draw light-index))
    (let ((v1-28 (-> (the-as target gp-0) draw color-mult quad)))
      (set! (-> (the-as gun self) draw color-mult quad) v1-28)
      )
    (let ((v1-30 (-> (the-as target gp-0) draw color-emissive quad)))
      (set! (-> (the-as gun self) draw color-emissive quad) v1-30)
      )
    (set! (-> (the-as gun self) draw force-fade) (-> (the-as target gp-0) draw force-fade))
    (set! (-> (the-as gun self) draw death-vertex-skip)
          (-> (the-as target (-> (the-as gun self) parent 0)) draw death-vertex-skip)
          )
    (set! (-> (the-as gun self) draw death-effect)
          (-> (the-as target (-> (the-as gun self) parent 0)) draw death-effect)
          )
    (set! (-> (the-as gun self) draw death-timer)
          (-> (the-as target (-> (the-as gun self) parent 0)) draw death-timer)
          )
    (set! (-> (the-as gun self) draw death-timer-org)
          (-> (the-as target (-> (the-as gun self) parent 0)) draw death-timer-org)
          )
    (set! (-> (the-as gun self) draw death-draw-overlap)
          (-> (the-as target (-> (the-as gun self) parent 0)) draw death-draw-overlap)
          )
    (let ((v1-55 (-> (the-as target gp-0) draw shadow-ctrl settings shadow-dir quad)))
      (set! (-> (the-as gun self) draw shadow-ctrl settings shadow-dir quad) v1-55)
      )
    (let ((t9-4 (method-of-object (-> (the-as gun self) barrel) joint-mod-method-13)))
      (-> (the-as target gp-0) gun fire-spin)
      (t9-4)
      )
    (if (or (logtest? (-> (the-as target gp-0) draw status)
                      (draw-control-status no-draw no-draw-temp no-draw-bounds no-draw-bounds2)
                      )
            (zero? (-> (the-as target gp-0) skel active-channels))
            )
        (logior! (-> (the-as gun self) draw status) (draw-control-status no-draw))
        (logclear! (-> (the-as gun self) draw status) (draw-control-status no-draw))
        )
    (if (logtest? (-> (the-as target gp-0) draw status) (draw-control-status force-fade))
        (logior! (-> (the-as gun self) draw status) (draw-control-status force-fade))
        (logclear! (-> (the-as gun self) draw status) (draw-control-status force-fade))
        )
    )
  (dotimes (gp-1 4)
    (cond
      ((= (-> (the-as target (-> (the-as gun self) parent 0)) game gun-ammo gp-1) 0.0)
       (when (!= (-> (the-as gun self) mag-scale gp-1) 0.0)
         (let ((s5-2 (new 'stack-no-clear 'matrix)))
           (let ((s3-0 (new 'stack-no-clear 'vector))
                 (s4-1 (new 'stack-no-clear 'vector))
                 )
             (vector<-cspace! s3-0 (-> (the-as gun self) mag gp-1 joint))
             (vector-normalize-copy!
               s4-1
               (the-as vector (&-> (-> (the-as gun self) mag gp-1 joint bone) transform data 4))
               40960.0
               )
             (set! (-> s4-1 y) (+ 81920.0 (-> s4-1 y)))
             (set! (-> s5-2 data 0) (the-as float (-> (the-as gun self) entity)))
             (set! (-> s5-2 data 1) 1.0)
             (s.d! (+ s5-2 16) 0)
             (set! (-> s5-2 trans quad) (-> s3-0 quad))
             (set! (-> (&+ s5-2 64) vector 0 quad) (-> s4-1 quad))
             )
           (s.d! (+ s5-2 24) #f)
           (s.d! (+ s5-2 32) #f)
           (let* ((v1-95 (process->ppointer (the-as gun self)))
                  (v1-97 (logior (if v1-95
                                     (shl (-> v1-95 0 pid) 32)
                                     0
                                     )
                                 (.asm.sllv.r0 v1-95)
                                 )
                         )
                  )
             (s.d! (+ s5-2 40) v1-97)
             )
           (let* ((v1-98 *game-info*)
                  (a0-44 (+ (-> v1-98 attack-id) 1))
                  )
             (set! (-> v1-98 attack-id) a0-44)
             (set! (-> s5-2 data 2) (the-as float a0-44))
             )
           (let ((v1-99 1200))
             (s.d! (+ s5-2 80) v1-99)
             )
           (let ((t9-7 spawn-projectile)
                 (v1-100 gp-1)
                 )
             (t9-7
               (cond
                 ((zero? v1-100)
                  gun-mag-yellow
                  )
                 ((= v1-100 1)
                  gun-mag-red
                  )
                 ((= v1-100 2)
                  gun-mag-blue
                  )
                 (else
                   gun-mag-dark
                   )
                 )
               (the-as projectile-init-by-other-params s5-2)
               (the-as gun self)
               *default-dead-pool*
               )
             )
           )
         )
       (set! (-> (the-as gun self) mag-scale gp-1) 0.0)
       (let ((t9-8 (method-of-object (-> (the-as gun self) mag gp-1) joint-mod-method-14)))
         *zero-vector*
         (t9-8)
         )
       )
      (else
        (seek! (-> (the-as gun self) mag-scale gp-1) 1.0 (* 8.0 (-> (the-as gun self) clock seconds-per-frame)))
        (let ((f30-0 (-> (the-as gun self) mag-scale gp-1))
              (s4-2 (method-of-object (-> (the-as gun self) mag gp-1) joint-mod-method-14))
              )
          (set-vector!
            (new 'stack-no-clear 'vector)
            (lerp-scale 0.1 1.0 f30-0 0.4 1.0)
            (lerp-scale 0.0 1.0 f30-0 0.0 0.4)
            (lerp-scale 0.1 1.0 f30-0 0.4 1.0)
            1.0
            )
          (s4-2)
          )
        )
      )
    )
  (ja-post)
  (if *display-sidekick-stats*
      (debug-print-channels (-> (the-as gun self) skel) (the-as symbol *stdcon*))
      )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate hidden (gun)
  :virtual #t
  :trans (behavior ()
    (let ((v1-0 (-> self parent)))
      (if (zero? (logand (-> (the-as target (if v1-0
                                                (the-as target (-> v1-0 0 self))
                                                )
                                     )
                             focus-status
                             )
                         (focus-status fs8)
                         )
                 )
          (go-virtual idle)
          )
      )
    (none)
    )
  :code (behavior ()
    (ja-channel-set! 0)
    (ja-post)
    (logior! (-> self mask) (process-mask sleep-code))
    (suspend)
    0
    (none)
    )
  )

;; failed to figure out what this is:
(defstate idle (gun)
  :virtual #t
  :trans (behavior ()
    (set! (-> self gun-type) (the-as pickup-type (-> (the-as target (-> self parent 0)) game gun-type)))
    (let ((a0-0 (ppointer->process (-> self parent))))
      (cond
        ((logtest? (-> (the-as target a0-0) focus-status) (focus-status fs8))
         (go-virtual hidden)
         )
        ((nonzero? (-> (the-as target (-> self parent 0)) gun gun-type))
         (go-virtual use (the-as symbol a0-0))
         )
        )
      )
    (none)
    )
  :code (behavior ()
    (set! (-> self draw shadow) (the-as uint #f))
    (ja-channel-set! 1)
    (set! (-> self read-scale) #f)
    (until #f
      (let ((a0-1 (-> self skel root-channel 0)))
        (set! (-> a0-1 frame-group) (the-as art-joint-anim (-> self draw art-group data 12)))
        (set! (-> a0-1 param 0)
              (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 12)) frames num-frames) -1))
              )
        (set! (-> a0-1 param 1) 1.0)
        (set! (-> a0-1 frame-num) 0.0)
        (joint-control-channel-group!
          a0-1
          (the-as art-joint-anim (-> self draw art-group data 12))
          (the-as (function joint-control-channel float float float float) num-func-seek!)
          )
        )
      (until (ja-done? 0)
        (suspend)
        (let ((a0-2 (-> self skel root-channel 0)))
          (set! (-> a0-2 param 0) (the float (+ (-> a0-2 frame-group frames num-frames) -1)))
          (set! (-> a0-2 param 1) 1.0)
          (joint-control-channel-group-eval!
            a0-2
            (the-as art-joint-anim #f)
            (the-as (function joint-control-channel float float float float) num-func-seek!)
            )
          )
        )
      )
    #f
    (none)
    )
  :post gun-post
  )

;; failed to figure out what this is:
(defstate use (gun)
  :virtual #t
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (case arg2
      (('die)
       (go-virtual die)
       )
      (('release)
       (send-event (ppointer->process (-> self parent)) 'release)
       )
      )
    )
  :enter (behavior ((arg0 symbol))
    (set! (-> self state-time) (-> self clock frame-counter))
    (set! (-> self draw shadow) (the-as uint (-> self shadow-backup)))
    (logior! (-> self skel status) (joint-control-status sync-math))
    (none)
    )
  :exit (behavior ()
    (logclear! (-> self skel status) (joint-control-status sync-math))
    (none)
    )
  :trans (behavior ()
    (local-vars (a0-14 object))
    (let ((v1-0 (ppointer->process (-> self parent)))
          (a0-1 (-> self parent))
          )
      (cond
        ((logtest? (-> (the-as target (if a0-1
                                          (the-as target (-> a0-1 0 self))
                                          )
                               )
                       focus-status
                       )
                   (focus-status fs8)
                   )
         (go-virtual hidden)
         )
        ((and (= (-> (the-as target (-> self parent 0)) gun gun-type) (pickup-type none))
              (or (not (-> (the-as target v1-0) skel top-anim frame-group))
                  (!= (-> (the-as target v1-0) skel top-anim interp) 1.0)
                  )
              )
         (go-virtual idle)
         )
        ((begin
           (set! a0-14 (!= (-> (the-as target (-> self parent 0)) game gun-type) (-> self gun-type)))
           (and (the-as symbol a0-14) (let ((v1-16 (-> self state-time)))
                                        (set! a0-14 (-> self clock frame-counter))
                                        (!= v1-16 (the-as time-frame a0-14))
                                        )
                )
           )
         (go-virtual use (the-as symbol a0-14))
         )
        )
      )
    (none)
    )
  :code (behavior ((arg0 symbol))
    (ja-channel-push! 1 (seconds 0.05))
    (let ((v1-0 (-> self gun-type))
          (a0-5 (-> (the-as target (-> self parent 0)) game gun-type))
          )
      (set! (-> self gun-type) (the-as pickup-type a0-5))
      (cond
        ((and (= v1-0 (pickup-type eco-yellow)) (= a0-5 2))
         (let ((a0-6 (-> self skel root-channel 0)))
           (set! (-> a0-6 frame-group) (the-as art-joint-anim (-> self draw art-group data 28)))
           (set! (-> a0-6 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 28)) frames num-frames) -1))
                 )
           (set! (-> a0-6 param 1) 1.0)
           (set! (-> a0-6 frame-num) 0.0)
           (joint-control-channel-group!
             a0-6
             (the-as art-joint-anim (-> self draw art-group data 28))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-7 (-> self skel root-channel 0)))
             (set! (-> a0-7 param 0) (the float (+ (-> a0-7 frame-group frames num-frames) -1)))
             (set! (-> a0-7 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-7
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-yellow)) (= a0-5 3))
         (let ((a0-9 (-> self skel root-channel 0)))
           (set! (-> a0-9 frame-group) (the-as art-joint-anim (-> self draw art-group data 27)))
           (set! (-> a0-9 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 27)) frames num-frames) -1))
                 )
           (set! (-> a0-9 param 1) 1.0)
           (set! (-> a0-9 frame-num) 0.0)
           (joint-control-channel-group!
             a0-9
             (the-as art-joint-anim (-> self draw art-group data 27))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-10 (-> self skel root-channel 0)))
             (set! (-> a0-10 param 0) (the float (+ (-> a0-10 frame-group frames num-frames) -1)))
             (set! (-> a0-10 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-10
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-yellow)) (= a0-5 4))
         (let ((a0-12 (-> self skel root-channel 0)))
           (set! (-> a0-12 frame-group) (the-as art-joint-anim (-> self draw art-group data 26)))
           (set! (-> a0-12 param 0) 0.0)
           (set! (-> a0-12 param 1) 1.0)
           (set! (-> a0-12 frame-num)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 26)) frames num-frames) -1))
                 )
           (joint-control-channel-group!
             a0-12
             (the-as art-joint-anim (-> self draw art-group data 26))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-13 (-> self skel root-channel 0)))
             (set! (-> a0-13 param 0) 0.0)
             (set! (-> a0-13 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-13
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-red)) (= a0-5 1))
         (let ((a0-15 (-> self skel root-channel 0)))
           (set! (-> a0-15 frame-group) (the-as art-joint-anim (-> self draw art-group data 28)))
           (set! (-> a0-15 param 0) 0.0)
           (set! (-> a0-15 param 1) 1.0)
           (set! (-> a0-15 frame-num)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 28)) frames num-frames) -1))
                 )
           (joint-control-channel-group!
             a0-15
             (the-as art-joint-anim (-> self draw art-group data 28))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-16 (-> self skel root-channel 0)))
             (set! (-> a0-16 param 0) 0.0)
             (set! (-> a0-16 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-16
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-red)) (= a0-5 3))
         (let ((a0-18 (-> self skel root-channel 0)))
           (set! (-> a0-18 frame-group) (the-as art-joint-anim (-> self draw art-group data 30)))
           (set! (-> a0-18 param 0) 0.0)
           (set! (-> a0-18 param 1) 1.0)
           (set! (-> a0-18 frame-num)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 30)) frames num-frames) -1))
                 )
           (joint-control-channel-group!
             a0-18
             (the-as art-joint-anim (-> self draw art-group data 30))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-19 (-> self skel root-channel 0)))
             (set! (-> a0-19 param 0) 0.0)
             (set! (-> a0-19 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-19
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-red)) (= a0-5 4))
         (let ((a0-21 (-> self skel root-channel 0)))
           (set! (-> a0-21 frame-group) (the-as art-joint-anim (-> self draw art-group data 23)))
           (set! (-> a0-21 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 23)) frames num-frames) -1))
                 )
           (set! (-> a0-21 param 1) 1.0)
           (set! (-> a0-21 frame-num) 0.0)
           (joint-control-channel-group!
             a0-21
             (the-as art-joint-anim (-> self draw art-group data 23))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-22 (-> self skel root-channel 0)))
             (set! (-> a0-22 param 0) (the float (+ (-> a0-22 frame-group frames num-frames) -1)))
             (set! (-> a0-22 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-22
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-blue)) (= a0-5 1))
         (let ((a0-24 (-> self skel root-channel 0)))
           (set! (-> a0-24 frame-group) (the-as art-joint-anim (-> self draw art-group data 27)))
           (set! (-> a0-24 param 0) 0.0)
           (set! (-> a0-24 param 1) 1.0)
           (set! (-> a0-24 frame-num)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 27)) frames num-frames) -1))
                 )
           (joint-control-channel-group!
             a0-24
             (the-as art-joint-anim (-> self draw art-group data 27))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-25 (-> self skel root-channel 0)))
             (set! (-> a0-25 param 0) 0.0)
             (set! (-> a0-25 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-25
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-blue)) (= a0-5 2))
         (let ((a0-27 (-> self skel root-channel 0)))
           (set! (-> a0-27 frame-group) (the-as art-joint-anim (-> self draw art-group data 30)))
           (set! (-> a0-27 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 30)) frames num-frames) -1))
                 )
           (set! (-> a0-27 param 1) 1.0)
           (set! (-> a0-27 frame-num) 0.0)
           (joint-control-channel-group!
             a0-27
             (the-as art-joint-anim (-> self draw art-group data 30))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-28 (-> self skel root-channel 0)))
             (set! (-> a0-28 param 0) (the float (+ (-> a0-28 frame-group frames num-frames) -1)))
             (set! (-> a0-28 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-28
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-blue)) (= a0-5 4))
         (let ((a0-30 (-> self skel root-channel 0)))
           (set! (-> a0-30 frame-group) (the-as art-joint-anim (-> self draw art-group data 29)))
           (set! (-> a0-30 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 29)) frames num-frames) -1))
                 )
           (set! (-> a0-30 param 1) 1.0)
           (set! (-> a0-30 frame-num) 0.0)
           (joint-control-channel-group!
             a0-30
             (the-as art-joint-anim (-> self draw art-group data 29))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-31 (-> self skel root-channel 0)))
             (set! (-> a0-31 param 0) (the float (+ (-> a0-31 frame-group frames num-frames) -1)))
             (set! (-> a0-31 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-31
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-dark)) (= a0-5 1))
         (let ((a0-33 (-> self skel root-channel 0)))
           (set! (-> a0-33 frame-group) (the-as art-joint-anim (-> self draw art-group data 26)))
           (set! (-> a0-33 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 26)) frames num-frames) -1))
                 )
           (set! (-> a0-33 param 1) 1.0)
           (set! (-> a0-33 frame-num) 0.0)
           (joint-control-channel-group!
             a0-33
             (the-as art-joint-anim (-> self draw art-group data 26))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-34 (-> self skel root-channel 0)))
             (set! (-> a0-34 param 0) (the float (+ (-> a0-34 frame-group frames num-frames) -1)))
             (set! (-> a0-34 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-34
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-dark)) (= a0-5 2))
         (let ((a0-36 (-> self skel root-channel 0)))
           (set! (-> a0-36 frame-group) (the-as art-joint-anim (-> self draw art-group data 23)))
           (set! (-> a0-36 param 0) 0.0)
           (set! (-> a0-36 param 1) 1.0)
           (set! (-> a0-36 frame-num)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 23)) frames num-frames) -1))
                 )
           (joint-control-channel-group!
             a0-36
             (the-as art-joint-anim (-> self draw art-group data 23))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-37 (-> self skel root-channel 0)))
             (set! (-> a0-37 param 0) 0.0)
             (set! (-> a0-37 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-37
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        ((and (= v1-0 (pickup-type eco-dark)) (= a0-5 3))
         (let ((a0-40 (-> self skel root-channel 0)))
           (set! (-> a0-40 frame-group) (the-as art-joint-anim (-> self draw art-group data 29)))
           (set! (-> a0-40 param 0) 0.0)
           (set! (-> a0-40 param 1) 1.0)
           (set! (-> a0-40 frame-num)
                 (the float (+ (-> (the-as art-joint-anim (-> self draw art-group data 29)) frames num-frames) -1))
                 )
           (joint-control-channel-group!
             a0-40
             (the-as art-joint-anim (-> self draw art-group data 29))
             (the-as (function joint-control-channel float float float float) num-func-seek!)
             )
           )
         (until (ja-done? 0)
           (suspend)
           (let ((a0-41 (-> self skel root-channel 0)))
             (set! (-> a0-41 param 0) 0.0)
             (set! (-> a0-41 param 1) 1.0)
             (joint-control-channel-group-eval!
               a0-41
               (the-as art-joint-anim #f)
               (the-as (function joint-control-channel float float float float) num-func-seek!)
               )
             )
           )
         )
        )
      )
    (let* ((v1-268 (-> self gun-type))
           (gp-0 (cond
                   ((= v1-268 (pickup-type eco-yellow))
                    (-> self draw art-group data 15)
                    )
                   ((= v1-268 (pickup-type eco-red))
                    (-> self draw art-group data 13)
                    )
                   ((= v1-268 (pickup-type eco-blue))
                    (-> self draw art-group data 16)
                    )
                   (else
                     (-> self draw art-group data 14)
                     )
                   )
                 )
           (s5-0 '(("jakb-gun-yellow-fire" . #xf)
                   ("jakb-gun-yellow-fire-low" . #x13)
                   ("jakb-pilot-gun-yellow-fire" . #xf)
                   ("jakb-gun-red-fire" . #xc)
                   ("jakb-pilot-gun-red-fire" . #xc)
                   ("jakb-gun-blue-fire" . #xd)
                   ("jakb-pilot-gun-blue-fire" . #xd)
                   ("jakb-gun-dark-fire" . #xd)
                   ("jakb-pilot-gun-dark-fire" . #xd)
                   )
                 )
           (v1-277 (-> self parent))
           (s4-0 (if v1-277
                     (the-as target (-> v1-277 0 self))
                     )
                 )
           )
      (until #f
        (let* ((v1-281 (-> s4-0 skel top-anim frame-group))
               (s2-0 (if v1-281
                         (-> v1-281 name)
                         )
                     )
               (s1-0 (nassoc s2-0 s5-0))
               (a1-60
                 (if s1-0
                     (get-art-by-name (-> self draw art-group) (the-as string (-> (the-as pair s1-0) cdr)) art-joint-anim)
                     )
                 )
               )
          (cond
            (s1-0
              (let ((s3-0 (-> self skel root-channel 0)))
                (joint-control-channel-group-eval!
                  s3-0
                  a1-60
                  (the-as (function joint-control-channel float float float float) num-func-identity)
                  )
                (set! (-> s3-0 frame-num) (-> s4-0 skel top-anim frame-num))
                )
              (set! (-> self read-scale) #f)
              )
            ((nmember s2-0 '("jakb-gun-attack-butt"
                              "jakb-gun-attack-butt-end"
                              "jakb-gun-attack-butt-blue"
                              "jakb-gun-attack-butt-blue-end"
                              "jakb-gun-attack-from-stance"
                              "jakb-gun-attack-from-stance-end"
                              "jakb-gun-attack-from-stance-blue"
                              "jakb-gun-attack-from-stance-blue-end"
                              "jakb-pilot-gun-red-yellow"
                              )
                      )
             (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-0))
             (set! (-> self read-scale) (the-as basic #t))
             )
            ((and (= (-> s4-0 skel top-anim interp) 1.0)
                  (begin
                    (set! s1-0 (nassoc s2-0 '(("jakb-gun-yellow-takeout" . #xe)
                                              ("jakb-gun-blue-takeout" . #xc)
                                              ("jakb-gun-dark-takeout" . #xc)
                                              ("jakb-gun-red-takeout" . #xc)
                                              ("jakb-pilot-gun-yellow-takeout" . #xe)
                                              ("jakb-pilot-gun-blue-takeout" . #xc)
                                              ("jakb-pilot-gun-dark-takeout" . #xc)
                                              ("jakb-pilot-gun-red-takeout" . #xc)
                                              )
                                       )
                          )
                    s1-0
                    )
                  )
             (let ((s3-1
                     (if s1-0
                         (get-art-by-name (-> self draw art-group) (the-as string (-> (the-as pair s1-0) cdr)) art-joint-anim)
                         )
                     )
                   )
               (set! (-> self read-scale) (the-as basic #t))
               (let* ((v1-305 (-> s4-0 skel top-anim frame-group))
                      (f30-0 (+ (* (-> s4-0 skel top-anim frame-num) (-> v1-305 artist-step)) (-> v1-305 artist-base)))
                      )
                 (cond
                   ((string= s2-0 "jakb-gun-blue-takeout")
                    (cond
                      ((>= f30-0 (-> s3-1 artist-base))
                       (let ((s2-1 (-> self skel root-channel 0)))
                         (joint-control-channel-group-eval!
                           s2-1
                           s3-1
                           (the-as (function joint-control-channel float float float float) num-func-identity)
                           )
                         (set! (-> s2-1 frame-num) (ja-aframe f30-0 0))
                         )
                       )
                      (else
                        (ja :group! (-> self draw art-group data 12))
                        )
                      )
                    )
                   ((or (string= s2-0 "jakb-gun-dark-takeout") (string= s2-0 "jakb-pilot-gun-dark-takeout"))
                    (cond
                      ((>= f30-0 -40.0)
                       (let ((s2-2 (-> self skel root-channel 0)))
                         (joint-control-channel-group-eval!
                           s2-2
                           s3-1
                           (the-as (function joint-control-channel float float float float) num-func-identity)
                           )
                         (set! (-> s2-2 frame-num) (+ 40.0 (ja-aframe f30-0 0)))
                         )
                       )
                      (else
                        (let ((s2-3 (-> self skel root-channel 0)))
                          (joint-control-channel-group-eval!
                            s2-3
                            s3-1
                            (the-as (function joint-control-channel float float float float) num-func-identity)
                            )
                          (set! (-> s2-3 frame-num) 0.0)
                          )
                        )
                      )
                    )
                   ((>= f30-0 -40.0)
                    (let ((s2-4 (-> self skel root-channel 0)))
                      (joint-control-channel-group-eval!
                        s2-4
                        s3-1
                        (the-as (function joint-control-channel float float float float) num-func-identity)
                        )
                      (set! (-> s2-4 frame-num) (ja-aframe f30-0 0))
                      )
                    )
                   (else
                     (ja :group! (-> self draw art-group data 12))
                     )
                   )
                 )
               )
             )
            (else
              (set! (-> self skel root-channel 0 frame-group) (the-as art-joint-anim gp-0))
              (set! (-> self read-scale) #f)
              )
            )
          )
        (suspend)
        0
        )
      )
    #f
    (none)
    )
  :post (behavior ()
    (gun-post)
    (let ((gp-0 (ppointer->process (-> (the-as gun self) parent))))
      (let ((s5-0 (and (-> (the-as target gp-0) skel top-anim frame-group)
                       (or (string= (-> (the-as target gp-0) skel top-anim frame-group name) "jakb-gun-front-walk")
                           (string= (-> (the-as target gp-0) skel top-anim frame-group name) "jakb-gun-front-run")
                           )
                       )
                  )
            )
        (vector<-cspace! (-> (the-as target gp-0) gun fire-point) (-> (the-as gun self) node-list data 13))
        (set! (-> (the-as target gp-0) gun fire-dir 1 quad) (-> (the-as target gp-0) gun fire-dir 0 quad))
        (cond
          ((and (handle->process (-> (the-as target gp-0) gun track-target 0 handle))
                (logtest? (surface-flag gun-direct) (-> (the-as target gp-0) control unknown-surface00 flags))
                )
           (vector-!
             (the-as vector (-> (the-as target gp-0) gun fire-dir))
             (-> (the-as target gp-0) gun track-trans)
             (-> (the-as target gp-0) gun fire-point)
             )
           (vector-normalize! (the-as vector (-> (the-as target gp-0) gun fire-dir)) 1.0)
           (set! (-> (the-as target gp-0) gun fire-dir-out quad) (-> (the-as target gp-0) gun fire-dir 0 quad))
           )
          (else
            (vector-normalize-copy!
              (the-as vector (-> (the-as target gp-0) gun fire-dir))
              (the-as vector (&-> (-> (the-as gun self) node-list data 13 bone) transform data 8))
              1.0
              )
            (if s5-0
                (set! (-> (the-as target gp-0) gun fire-dir-out quad)
                      (-> (the-as vector (&-> (-> (the-as target gp-0) node-list data 4 bone) transform data 8)) quad)
                      )
                )
            (vector-rotate-y!
              (-> (the-as target gp-0) gun fire-dir-out)
              (the-as vector (-> (the-as target gp-0) gun fire-dir))
              (-> (the-as target gp-0) gun fire-dir-rot)
              )
            )
          )
        (vector<-cspace! (-> (the-as target gp-0) gun laser-point) (-> (the-as gun self) node-list data 14))
        (set! (-> (the-as target gp-0) gun laser-dir 1 quad) (-> (the-as target gp-0) gun laser-dir 0 quad))
        (set! (-> (the-as target gp-0) gun laser-dir 0 quad) (-> (the-as target gp-0) gun fire-dir-out quad))
        (if s5-0
            (set! (-> (the-as target gp-0) gun laser-dir 0 quad)
                  (-> (the-as vector (&-> (-> (the-as target gp-0) node-list data 4 bone) transform data 8)) quad)
                  )
            )
        )
      (let ((s5-1 (the-as gun self)))
        (set! self (the-as process-drawable gp-0))
        (target-gun-check)
        (set! self s5-1)
        )
      )
    (none)
    )
  )

;; failed to figure out what this is:
(defstate die (gun)
  :virtual #t
  :event (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
    (case arg2
      (('reset)
       (go-virtual idle)
       )
      )
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (let ((s4-0 (new 'stack-no-clear 'vector))
            (s5-0 (new 'stack-no-clear 'vector))
            )
        (set! (-> s4-0 quad) (-> self root trans quad))
        (vector-float*!
          s5-0
          (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> (the-as target (-> self parent 0)) control quat))
          -20480.0
          )
        (set! (-> s5-0 y) (+ 81920.0 (-> s5-0 y)))
        (set! (-> gp-0 data 0) (the-as float (-> self entity)))
        (set! (-> gp-0 data 1) 1.0)
        (s.d! (+ gp-0 16) 0)
        (set! (-> gp-0 trans quad) (-> s4-0 quad))
        (set! (-> (&+ gp-0 64) vector 0 quad) (-> s5-0 quad))
        )
      (s.d! (+ gp-0 24) #f)
      (s.d! (+ gp-0 32) #f)
      (let* ((v1-10 (process->ppointer self))
             (v1-12 (logior (if v1-10
                                (shl (-> v1-10 0 pid) 32)
                                0
                                )
                            (.asm.sllv.r0 v1-10)
                            )
                    )
             )
        (s.d! (+ gp-0 40) v1-12)
        )
      (let* ((v1-13 *game-info*)
             (a0-12 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-12)
        (set! (-> gp-0 data 2) (the-as float a0-12))
        )
      (let ((v1-14 1200))
        (s.d! (+ gp-0 80) v1-14)
        )
      (spawn-projectile gun-eject (the-as projectile-init-by-other-params gp-0) self *default-dead-pool*)
      )
    (ja-channel-set! 0)
    (ja-post)
    (while (logtest? (-> (the-as target (-> self parent 0)) focus-status) (focus-status fs1))
      (suspend)
      )
    (go-virtual idle)
    (none)
    )
  )

;; definition for function gun-init
;; INFO: Used lq/sq
;; INFO: Return type mismatch object vs none.
(defbehavior gun-init gun ()
  (change-to-last-brother self)
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-gun" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (let ((v1-5 (-> *target-shadow-control* settings shadow-dir quad)))
    (set! (-> *gun-shadow-control* settings shadow-dir quad) v1-5)
    )
  (set! (-> self draw shadow-ctrl) *gun-shadow-control*)
  (set! (-> self shadow-backup) (the-as shadow-control (-> self draw shadow)))
  (set! (-> self barrel) (new 'process 'joint-mod (joint-mod-handler-mode rotate) self 8))
  (set! (-> self read-scale) #f)
  (set! (-> self mag 0) (new 'process 'joint-mod (joint-mod-handler-mode joint-set*) self 34))
  (set! (-> self mag 1) (new 'process 'joint-mod (joint-mod-handler-mode joint-set*) self 32))
  (set! (-> self mag 2) (new 'process 'joint-mod (joint-mod-handler-mode joint-set*) self 33))
  (set! (-> self mag 3) (new 'process 'joint-mod (joint-mod-handler-mode joint-set*) self 35))
  (dotimes (v1-14 4)
    (set! (-> self mag-scale v1-14) (if (= (-> (the-as target (-> self parent 0)) game gun-ammo v1-14) 0.0)
                                        0.0
                                        1.0
                                        )
          )
    )
  (go-virtual idle)
  (none)
  )

;; definition for method 9 of type gun-info
;; INFO: Used lq/sq
;; ERROR: failed type prop at 293: Could not figure out load: (set! f30 (l.f (+ s2 4)))
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
(defmethod gun-info-method-9 gun-info ((a0-0 gun-info))
  (local-vars
    (v0-0 float)
    (v0-1 none)
    (v0-2 symbol)
    (v0-3 vector)
    (v0-4 float)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 vector)
    (v0-9 vector)
    (v0-10 vector)
    (v0-11 vector)
    (v0-12 none)
    (v0-13 none)
    (v0-14 uint)
    (v0-15 none)
    (v0-16 none)
    (v0-17 none)
    (v0-18 none)
    (v0-19 none)
    (v1-0 symbol)
    (v1-1 symbol)
    (v1-2 symbol)
    (v1-3 (pointer gun))
    (v1-4 gun)
    (v1-5 draw-control)
    (v1-6 draw-control-status)
    (v1-7 draw-control-status)
    (v1-9 vector)
    (v1-10 vector)
    (v1-11 uint)
    (v1-12 collide-query)
    (v1-13 type)
    (v1-14 none)
    (v1-15 vector)
    (v1-16 vector)
    (v1-17 vector)
    (v1-18 vector)
    (v1-19 uint128)
    (v1-20 symbol)
    (v1-21 int)
    (v1-22 process-mask)
    (v1-23 symbol)
    (v1-24 (inline-array focus))
    (v1-25 handle)
    (v1-26 process)
    (v1-27 int)
    (v1-28 vector)
    (v1-29 (array sparticle-launcher))
    (v1-30 vector)
    (v1-31 (array sparticle-launcher))
    (v1-32 vector)
    (v1-34 none)
    (v1-35 none)
    (v1-36 none)
    (v1-38 none)
    (v1-39 vector)
    (v1-40 vector)
    (v1-41 uint128)
    (v1-42 vector)
    (v1-43 uint128)
    (v1-44 vector)
    (v1-45 (array sparticle-launcher))
    (v1-46 sparticle-launcher)
    (v1-47 (inline-array sp-field-init-spec))
    (v1-48 (array sparticle-launcher))
    (v1-49 vector)
    (v1-50 (array sparticle-launcher))
    (v1-51 sparticle-launcher)
    (v1-52 (inline-array sp-field-init-spec))
    (v1-53 (array sparticle-launcher))
    (v1-54 vector)
    (v1-55 (array sparticle-launcher))
    (v1-56 type)
    (v1-57 vector)
    (v1-58 int)
    (v1-59 none)
    (v1-60 none)
    (v1-61 none)
    (v1-62 none)
    (v1-63 none)
    (v1-64 none)
    (a0-1 (inline-array vector))
    (a0-2 vector)
    (a0-3 int)
    (a0-4 (inline-array vector))
    (a0-5 (pointer target))
    (a0-6 target)
    (a0-7 control-info)
    (a0-8 collide-shape-prim)
    (a0-9 uint32)
    (a0-10 (pointer target))
    (a0-11 target)
    (a0-12 int)
    (a0-13 int)
    (a0-14 collide-cache)
    (a0-15 vector)
    (a0-16 none)
    (a0-17 vector)
    (a0-18 float)
    (a0-19 basic)
    (a0-20 vector)
    (a0-21 vector)
    (a0-22 collide-shape)
    (a0-23 process)
    (a0-24 process-mask)
    (a0-25 int)
    (a0-26 (pointer process))
    (a0-27 process)
    (a0-29 collide-shape)
    (a0-30 process)
    (a0-31 vector)
    (a0-32 vector)
    (a0-33 vector)
    (a0-34 sparticle-system)
    (a0-35 sparticle-system)
    (a0-36 none)
    (a0-37 none)
    (a0-38 none)
    (a0-39 none)
    (a0-40 vector)
    (a0-41 uint128)
    (a0-42 vector)
    (a0-43 vector)
    (a0-44 vector)
    (a0-45 vector)
    (a0-46 float)
    (a0-48 vector)
    (a0-49 sparticle-system)
    (a0-50 sparticle-system)
    (a0-52 sparticle-launcher)
    (a0-53 vector)
    (a0-55 none)
    (a1-0 vector)
    (a1-1 (inline-array vector))
    (a1-2 int)
    (a1-3 process-tree)
    (a1-5 vector)
    (a1-6 (inline-array vector))
    (a1-7 type)
    (a1-8 vector)
    (a1-9 float)
    (a1-10 int)
    (a1-11 vector)
    (a1-12 sparticle-launcher)
    (a1-13 sparticle-launcher)
    (a1-14 none)
    (a1-15 none)
    (a1-16 none)
    (a1-17 none)
    (a1-18 float)
    (a1-19 float)
    (a1-20 vector)
    (a1-21 vector)
    (a1-22 vector)
    (a1-23 sparticle-launcher)
    (a1-24 sparticle-launcher)
    (a1-25 int)
    (a1-27 none)
    (a2-0 int)
    (a2-1 matrix)
    (a2-2 matrix)
    (a2-3 none)
    (a2-4 float)
    (a2-5 matrix)
    (a2-6 matrix)
    (a3-0 vector)
    (a3-1 uint128)
    (a3-2 symbol)
    (a3-3 uint128)
    (a3-4 symbol)
    (a3-5 none)
    (a3-6 none)
    (a3-8 vector)
    (a3-9 uint128)
    (a3-10 symbol)
    (a3-11 uint128)
    (a3-12 symbol)
    (a3-13 none)
    (t0-0 symbol)
    (t0-1 symbol)
    (t0-3 symbol)
    (t0-4 symbol)
    (t0-5 none)
    (t1-0 float)
    (t1-1 float)
    (t1-2 none)
    (t1-3 float)
    (t1-4 float)
    (s0-0 basic)
    (s0-1 none)
    (s0-2 none)
    (s1-0 vector)
    (s1-1 vector)
    (s1-2 vector)
    (s1-3 vector)
    (s1-4 vector)
    (s1-5 vector)
    (s2-0 basic)
    (s2-1 vector)
    (s2-2 (function vector float vector))
    (s2-3 vector)
    (s2-4 uint)
    (s3-0 (inline-array vector))
    (s3-1 vector)
    (s3-2 sparticle-launcher)
    (s4-0 collide-query)
    (s4-1 int)
    (s5-0 vector)
    (t9-0 (function vector vector float))
    (t9-1 (function none))
    (t9-2 (function object type symbol))
    (t9-3 (function vector float vector))
    (t9-4 (function vector vector float))
    (t9-5
      (function sparticle-system sparticle-launcher vector sparticle-launch-state sparticle-launch-control float none)
      )
    (t9-6
      (function sparticle-system sparticle-launcher vector sparticle-launch-state sparticle-launch-control float none)
      )
    (t9-7 none)
    (t9-8 (function vector))
    (t9-9 (function vector float vector))
    (t9-10 (function vector float vector))
    (t9-11 (function vector vector float vector))
    (t9-12
      (function sparticle-system sparticle-launcher vector sparticle-launch-state sparticle-launch-control float none)
      )
    (t9-13
      (function sparticle-system sparticle-launcher vector sparticle-launch-state sparticle-launch-control float none)
      )
    (t9-14 (function sparticle-launcher int uint))
    (t9-15 none)
    (t9-16 none)
    (t9-17 none)
    (t9-18 none)
    (f0-0 int)
    (f0-1 float)
    (f0-2 float)
    (f0-3 none)
    (f0-4 float)
    (f0-5 float)
    (f0-6 float)
    (f0-7 float)
    (f0-8 float)
    (f0-9 none)
    (f0-10 none)
    (f0-11 none)
    (f0-12 none)
    (f0-13 none)
    (f0-14 none)
    (f0-15 none)
    (f0-16 none)
    (f1-0 float)
    (f1-1 none)
    (f1-2 none)
    (f1-3 none)
    (f26-0 none)
    (f28-0 meters)
    (f28-1 float)
    (f28-2 none)
    (f28-3 none)
    (f30-0 float)
    (f30-1 none)
    )
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         )
    (init-vf0-vector)
    (when (begin
            (and (begin (set! v1-0 (-> a0-0 laser-active?)) v1-0)
                 (begin (set! v1-2 (-> a0-0 active?)) v1-2)
                 (begin
                   (set! v1-3 (-> a0-0 gun))
                   (set! v1-4 (-> v1-3 0))
                   (set! v1-5 (-> v1-4 draw))
                   (set! v1-6 (-> v1-5 status))
                   (set! v1-7 (logand v1-6 2))
                   (zero? v1-7)
                   )
                 (set! v1-1 #t)
                 )
            v1-1
            )
      (when (begin
              (cond
                ((begin
                   (when (begin
                           (set! s5-0 (-> a0-0 laser-point))
                           (set! s4-0 (new 'stack-no-clear 'collide-query))
                           (set! s3-0 (-> a0-0 laser-dir))
                           (set! t9-0 rotate-y<-vector+vector)
                           (set! a0-1 (-> a0-0 laser-dir))
                           (set! a1-0 (-> a0-0 laser-dir 1))
                           (set! v0-0 (call! a0-1 a1-0))
                           (set! f30-0 (gpr->fpr v0-0))
                           (set! v1-9 (-> s4-0 start-pos))
                           (set! a0-2 s5-0)
                           (set! a1-1 s3-0)
                           (set! a2-0 -973078528)
                           (set! f0-0 (gpr->fpr a2-0))
                           (.lvf vf2 (&-> a1-1 0 quad))
                           (.lvf vf1 (&-> a0-2 quad))
                           (set! a0-3 (fpr->gpr f0-0))
                           (.mov vf3 a0-3)
                           (.add.x.vf vf4 vf0 vf0 :mask #b1000)
                           (.mul.x.vf acc vf2 vf3)
                           (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
                           (.svf (&-> v1-9 quad) vf4)
                           (set! v1-10 (-> s4-0 move-dist))
                           (set! a0-4 s3-0)
                           (set! a1-2 #x48200000)
                           (set! f0-1 (the-as float (gpr->fpr a1-2)))
                           (set! v1-11 (vector-float*!2 v1-10 a0-4 f0-1))
                           (set! v1-12 s4-0)
                           (set! f0-2 (-> a0-0 track-beam-size))
                           (set! (-> v1-12 radius) f0-2)
                           (set! a0-5 (-> a0-0 process))
                           (set! a0-6 (-> a0-5 0))
                           (set! a0-7 (-> a0-6 control))
                           (set! a0-8 (-> a0-7 root-prim))
                           (set! a0-9 (-> a0-8 prim-core collide-with))
                           (set! (-> v1-12 collide-with) (the-as collide-spec a0-9))
                           (set! a0-10 (-> a0-0 process))
                           a0-10
                           )
                     (set! a0-11 (-> a0-10 0))
                     (set! a1-3 (-> a0-11 self))
                     )
                   (set! (-> v1-12 ignore-process0) (the-as process a1-3))
                   (set! (-> v1-12 ignore-process1) #f)
                   (set! a0-12 #xd000011)
                   (set! (-> v1-12 ignore-pat) (the-as pat-surface a0-12))
                   (set! a0-13 3)
                   (set! (-> v1-12 action-mask) (the-as uint a0-13))
                   (set! a0-14 *collide-cache*)
                   (set! v1-13 (-> a0-14 type))
                   (set! t9-1 (method-of-type v1-13 collide-cache-method-10))
                   (set! a1-4 s4-0)
                   (set! v0-1 (call!))
                   (set! v1-14 v0-1)
                   (set! f0-3 (gpr->fpr v1-14))
                   (set! f1-0 (the-as float 0))
                   (>=.s f0-3 f1-0)
                   )
                 (and (begin
                        (if (begin
                              (set! v1-15 (-> s4-0 start-pos))
                              (set! a0-15 (-> s4-0 start-pos))
                              (set! a1-5 (-> s4-0 move-dist))
                              (.lvf vf2 (&-> a1-5 quad))
                              (.lvf vf1 (&-> a0-15 quad))
                              (set! a0-16 (fpr->gpr f0-3))
                              (.mov vf3 a0-16)
                              (.add.x.vf vf4 vf0 vf0 :mask #b1000)
                              (.mul.x.vf acc vf2 vf3)
                              (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
                              (.svf (&-> v1-15 quad) vf4)
                              (set! v1-16 (-> s4-0 start-pos))
                              (set! a0-17 (-> s4-0 start-pos))
                              (set! a1-6 s3-0)
                              (set! f0-4 (-> a0-0 track-beam-size))
                              (.lvf vf2 (&-> a1-6 0 quad))
                              (.lvf vf1 (&-> a0-17 quad))
                              (set! a0-18 (fpr->gpr f0-4))
                              (.mov vf3 a0-18)
                              (.add.x.vf vf4 vf0 vf0 :mask #b1000)
                              (.mul.x.vf acc vf2 vf3)
                              (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
                              (.svf (&-> v1-16 quad) vf4)
                              (set! s2-0 (-> s4-0 best-other-tri collide-ptr))
                              (set! t9-2 type?)
                              (set! a0-19 s2-0)
                              (set! a1-7 collide-shape-prim)
                              (set! v0-2 (call! a0-19 a1-7))
                              v0-2
                              )
                            (set! s0-0 s2-0)
                            )
                        (set! t9-3 vector-normalize!)
                        (set! a0-20 (new 'stack-no-clear 'vector))
                        (set! v1-17 s5-0)
                        (set! a1-8 (-> s4-0 start-pos))
                        (set! a0-21 (vector-!2 a0-20 v1-17 a1-8))
                        (set! a1-9 (the-as float #x44cccccd))
                        (set! v0-3 (call! a0-21 a1-9))
                        (set! s1-0 v0-3)
                        (set! s2-1 (new 'stack-no-clear 'vector))
                        (set! v1-18 (-> s4-0 start-pos))
                        (set! v1-19 (-> v1-18 quad))
                        (set! (-> s2-1 quad) v1-19)
                        s0-0
                        )
                      (begin
                        (or (begin
                              (set! v1-21 #x20080000)
                              (set! a0-22 (-> s0-0 cshape))
                              (set! a0-23 (-> a0-22 process))
                              (set! a0-24 (-> a0-23 mask))
                              (set! v1-22 (logand v1-21 a0-24))
                              (nonzero? v1-22)
                              )
                            (begin
                              (and (begin
                                     (set! v1-24 (-> a0-0 track-target))
                                     (set! v1-25 (-> v1-24 0 handle))
                                     (set! a0-25 (subu-s7 v1-25))
                                     (nonzero? a0-25)
                                     )
                                   (begin
                                     (if (begin
                                           (.sllv a0-26 v1-25 r0)
                                           (set! a0-27 (-> a0-26 0))
                                           (set! a1-10 (-> a0-27 pid))
                                           (set! v1-27 (sra v1-25 32))
                                           (= v1-27 a1-10)
                                           )
                                         (set! v1-26 a0-27)
                                         )
                                     (set! a0-28 v1-26)
                                     )
                                   )
                              (set! a0-29 (-> s0-0 cshape))
                              (set! a0-30 (-> a0-29 process))
                              (set! v1-23 (= v1-26 a0-30))
                              )
                            )
                        v1-23
                        )
                      (begin
                        (set! f28-0 (-> a0-0 fire-range))
                        (set! t9-4 vector-vector-distance)
                        (set! a0-31 s2-1)
                        (set! a1-11 s5-0)
                        (set! v0-4 (call! a0-31 a1-11))
                        (set! f0-5 (gpr->fpr v0-4))
                        (set! v1-20 (>=.s f28-0 f0-5))
                        )
                      )
                 (cond
                   (v1-20
                     (set! a0-32 s2-1)
                     (set! v1-28 s2-1)
                     (set! a0-33 (vector+!2 a0-32 v1-28 s1-0))
                     (set! t9-5 sp-launch-particles-var)
                     (set! a0-34 *sp-particle-system-2d*)
                     (set! v1-29 *part-id-table*)
                     (set! a1-12 (-> v1-29 185))
                     (set! a2-1 *launch-matrix*)
                     (set! v1-30 (-> a2-1 trans))
                     (set! a3-0 s2-1)
                     (set! a3-1 (-> a3-0 quad))
                     (set! (-> v1-30 quad) a3-1)
                     (set! a3-2 #f)
                     (set! t0-0 #f)
                     (set! t1-0 (the-as float #x3f800000))
                     (call! a0-34 a1-12 a2-1 a3-2 t0-0 t1-0)
                     (set! t9-6 sp-launch-particles-var)
                     (set! a0-35 *sp-particle-system-2d*)
                     (set! v1-31 *part-id-table*)
                     (set! a1-13 (-> v1-31 184))
                     (set! a2-2 *launch-matrix*)
                     (set! v1-32 (-> a2-2 trans))
                     (set! a3-3 (-> s2-1 quad))
                     (set! (-> v1-32 quad) a3-3)
                     (set! a3-4 #f)
                     (set! t0-1 #f)
                     (set! t1-1 (the-as float #x3f800000))
                     (call! a0-35 a1-13 a2-2 a3-4 t0-1 t1-1)
                     (set! v1-33 v0-6)
                     )
                   (else
                     (set! a0-36 (the-as none s2-1))
                     (set! v1-34 (the-as none s2-1))
                     (set! a1-14 (the-as none s1-0))
                     (set! a0-37 (the-as none (vector+!2 a0-36 v1-34 a1-14)))
                     (set! t9-7 (the-as none sp-launch-particles-var))
                     (set! a0-38 (the-as none *sp-particle-system-2d*))
                     (set! v1-35 (the-as none *part-id-table*))
                     (set! a1-15 (the-as none (l.wu (+ v1-35 756))))
                     (set! a2-3 (the-as none *launch-matrix*))
                     (set! v1-36 (the-as none (+ a2-3 48)))
                     (set! a3-5 (the-as none s2-1))
                     (set! a3-6 (the-as none (l.q a3-5)))
                     (s.q! v1-36 a3-6)
                     (set! t1-2 (the-as none #x3f800000))
                     (call!)
                     (set! v1-37 (the-as none v0-7))
                     )
                   )
                 )
                (else
                  (set! a1-16 (the-as none (-> s4-0 start-pos)))
                  (set! v1-38 (the-as none (-> s4-0 start-pos)))
                  (set! a0-39 (the-as none (-> s4-0 move-dist)))
                  (set! a1-17 (the-as none (vector+!2 a1-16 v1-38 a0-39)))
                  )
                )
              (set! v1-39 (-> a0-0 laser-hit-point))
              (set! a0-40 (-> s4-0 start-pos))
              (set! a0-41 (-> a0-40 quad))
              (set! (-> v1-39 quad) a0-41)
              (set! s2-2 vector-normalize!)
              (set! s1-1 (new 'stack-no-clear 'vector))
              (set! t9-8 camera-pos)
              (set! v0-8 (call!))
              (set! v1-40 v0-8)
              (set! a0-42 s5-0)
              (set! s1-2 (vector-!2 s1-1 v1-40 a0-42))
              (set! a1-18 (the-as float #x3f800000))
              (set! t9-9 s2-2)
              (set! a0-43 s1-2)
              (set! v0-9 (call! a0-43 a1-18))
              (set! s1-3 v0-9)
              (set! t9-10 vector-normalize!)
              (set! a0-44 (new 'stack-no-clear 'vector))
              (set! v1-41 (-> s3-0 0 quad))
              (set! (-> a0-44 quad) v1-41)
              (set! a1-19 (the-as float #x3f800000))
              (set! v0-10 (call! a0-44 a1-19))
              (set! s2-3 v0-10)
              (set! s3-1 (new 'stack-no-clear 'vector))
              (set! v1-42 s5-0)
              (set! v1-43 (-> v1-42 quad))
              (set! (-> s3-1 quad) v1-43)
              (set! t9-11 vector-normalize-copy!)
              (set! a0-45 (new 'stack-no-clear 'vector))
              (set! a1-20 s2-3)
              (set! a2-4 (the-as float #x43a3d70a))
              (set! v0-11 (call! a0-45 a1-20 a2-4))
              (set! v1-44 v0-11)
              (set! f0-6 (vec3dot s1-3 s2-3))
              (set! a0-46 (fpr->gpr f0-6))
              (set! f28-1 (gpr->fpr a0-46))
              (set! f0-7 (the-as float 0))
              (<.s f0-7 f28-1)
              )
        (set! a1-21 s3-1)
        (set! a0-48 s3-1)
        (set! a1-22 (vector+!2 a1-21 a0-48 v1-44))
        (set! v1-45 *part-id-table*)
        (set! v1-46 (-> v1-45 183))
        (set! v1-47 (-> v1-46 init-specs))
        (set! (-> v1-47 13 initial-valuef) f28-1)
        (set! t9-12 sp-launch-particles-var)
        (set! a0-49 *sp-particle-system-2d*)
        (set! v1-48 *part-id-table*)
        (set! a1-23 (-> v1-48 183))
        (set! a2-5 *launch-matrix*)
        (set! v1-49 (-> a2-5 trans))
        (set! a3-8 s3-1)
        (set! a3-9 (-> a3-8 quad))
        (set! (-> v1-49 quad) a3-9)
        (set! a3-10 #f)
        (set! t0-3 #f)
        (set! t1-3 (the-as float #x3f800000))
        (call! a0-49 a1-23 a2-5 a3-10 t0-3 t1-3)
        (set! v1-50 *part-id-table*)
        (set! v1-51 (-> v1-50 182))
        (set! v1-52 (-> v1-51 init-specs))
        (set! (-> v1-52 13 initial-valuef) f28-1)
        (set! t9-13 sp-launch-particles-var)
        (set! a0-50 *sp-particle-system-2d*)
        (set! v1-53 *part-id-table*)
        (set! a1-24 (-> v1-53 182))
        (set! a2-6 *launch-matrix*)
        (set! v1-54 (-> a2-6 trans))
        (set! a3-11 (-> s3-1 quad))
        (set! (-> v1-54 quad) a3-11)
        (set! a3-12 #f)
        (set! t0-4 #f)
        (set! t1-4 (the-as float #x3f800000))
        (call! a0-50 a1-24 a2-6 a3-12 t0-4 t1-4)
        (set! a0-51 v0-13)
        )
      (if (begin
            (set! v1-55 *part-id-table*)
            (set! s3-2 (-> v1-55 181))
            (set! a0-52 s3-2)
            (set! v1-56 (-> a0-52 type))
            (set! t9-14 (method-of-type v1-56 sparticle-launcher-method-9))
            (set! a1-25 46)
            (set! v0-14 (call! a0-52 a1-25))
            (set! s2-4 v0-14)
            (set! s1-4 (new 'stack-no-clear 'vector))
            (set! v1-57 (-> s4-0 start-pos))
            (set! a0-53 s5-0)
            (set! s1-5 (vector-!2 s1-4 v1-57 a0-53))
            (set! v1-58 #x43360b61)
            (set! f0-8 (the-as float (gpr->fpr v1-58)))
            (<.s f0-8 f30-0)
            )
          (set! s4-1 3)
          (set! s4-1 (the-as int 1))
          )
      (cond
        ((begin
           (set! f30-1 (the-as none (l.f (+ s2-4 4))))
           (set! s0-1 (the-as none vector-vector-distance))
           (set! t9-15 (the-as none camera-pos))
           (call!)
           (set! a0-54 (the-as none v0-15))
           (set! a1-26 (the-as none s5-0))
           (set! t9-16 (the-as none s0-1))
           (set! v0-16 (the-as none (call!)))
           (set! f28-2 (the-as none (gpr->fpr v0-16)))
           (set! a0-55 (the-as none s3-2))
           (set! v1-59 (the-as none (l.wu (+ a0-55 -4))))
           (set! t9-17 (the-as none (l.wu (+ v1-59 52))))
           (set! a1-27 (the-as none 13))
           (set! v0-17 (the-as none (call!)))
           (set! s0-2 (the-as none v0-17))
           (set! v1-60 (the-as none #x42f5c28f))
           (set! f0-9 (the-as none (gpr->fpr v1-60)))
           (<.s f28-2 f0-9)
           )
         (set! v1-61 (the-as none 0))
         )
        ((begin (set! v1-62 (the-as none #x47800000)) (set! f0-10 (the-as none (gpr->fpr v1-62))) (<.s f0-10 f28-2))
         (set! v1-61 (the-as none #x3f800000))
         )
        (else
          (set! v1-63 (the-as none #x37803d8e))
          (set! f0-11 (the-as none (gpr->fpr v1-63)))
          (set! v1-64 (the-as none -1024081265))
          (set! f1-1 (the-as none (gpr->fpr v1-64)))
          (set! f1-2 (the-as none (+.s f1-1 f28-2)))
          (set! f0-12 (the-as none (*.s f0-11 f1-2)))
          (set! v1-61 (the-as none (fpr->gpr f0-12)))
          )
        )
      (set! f0-13 (the-as none (gpr->fpr v1-61)))
      (set! f28-3 (the-as none (l.f (+ s0-2 4))))
      (set! f26-0 (the-as none (l.f (+ s0-2 8))))
      (set! f1-3 (the-as none (*.s f28-3 f0-13)))
      (s.f! (+ s0-2 4) f1-3)
      (set! f0-14 (the-as none (*.s f26-0 f0-13)))
      (s.f! (+ s0-2 8) f0-14)
      (set! f0-15 (the-as none (gpr->fpr s4-1)))
      (set! f0-16 (the-as none (i2f f0-15)))
      (s.f! (+ s2-4 4) f0-16)
      (set! t9-18 (the-as none draw-beam))
      (set! a3-13 (the-as none #t))
      (set! t0-5 (the-as none #t))
      (set! a0-56 (the-as none s3-2))
      (set! a1-28 (the-as none s5-0))
      (set! a2-7 (the-as none s1-5))
      (call!)
      (s.f! (+ s2-4 4) f30-1)
      (s.f! (+ s0-2 4) f28-3)
      (s.f! (+ s0-2 8) f26-0)
      (set! v1-65 (the-as none (fpr->gpr f26-0)))
      )
    (set! v0-19 (the-as none (-> a0-0 laser-dir)))
    (ret-none)
    )
  )
