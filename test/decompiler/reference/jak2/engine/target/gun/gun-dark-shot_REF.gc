;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 11) (new 'static 'lightning-spec
                                          :name "lightning-dark-shot-attack"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :texture (new 'static 'texture-id :index #x83 :page #xc)
                                          :reduction 0.42
                                          :num-points 16
                                          :box-size 8192.0
                                          :merge-factor 0.6
                                          :merge-count 2
                                          :radius 3276.8
                                          :duration 45.0
                                          :duration-rand 60.0
                                          :sound (static-sound-spec "stretched-zap")
                                          )
      )

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 12) (new 'static 'lightning-spec
                                          :name "lightning-dark-shot-attack-thick"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :texture (new 'static 'texture-id :index #x83 :page #xc)
                                          :reduction 0.42
                                          :num-points 32
                                          :box-size 12288.0
                                          :merge-factor 0.6
                                          :merge-count 2
                                          :radius 12288.0
                                          :duration 60.0
                                          :sound (static-sound-spec "stretched-zap")
                                          )
      )

;; failed to figure out what this is:
(defpart 429
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xbb :page #xc))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.3) (meters 0.2) 1.0)
    (sp-flt spt-rot-x 2048.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 0.0 64.0 1.0)
    (sp-rnd-flt spt-g 64.0 64.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 48.0)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 430
  :init-specs ((sp-tex spt-texture (new 'static 'texture-id :index #xbc :page #xc))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 1) (meters 4) 1.0)
    (sp-flt spt-rot-x 2048.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 0.0 64.0 1.0)
    (sp-rnd-flt spt-g 64.0 64.0 1.0)
    (sp-flt spt-b 255.0)
    (sp-flt spt-a 128.0)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow)
    (sp-flt spt-userdata 4096.0)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 3600.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters -0.1) (meters 0.5) 1.0)
    )
  )

;; definition of type gun-dark-shot
(deftype gun-dark-shot (projectile)
  ((blast-radius  float          :offset-assert 472)
   (core-position vector :inline :offset-assert 480)
   (core-velocity vector :inline :offset-assert 496)
   (spin-vector   vector :inline :offset-assert 512)
   (track-target  handle         :offset-assert 528)
   (size-t        float          :offset-assert 536)
   (result-array  handle 16      :offset-assert 544)
   (charge-sound  uint32         :offset-assert 672)
   (fire-sound    uint32         :offset-assert 676)
   (trail-sound   uint32         :offset-assert 680)
   (explode-sound uint32         :offset-assert 684)
   (start-pilot?  basic          :offset-assert 688)
   )
  :heap-base #x240
  :method-count-assert 42
  :size-assert         #x2b4
  :flag-assert         #x2a024002b4
  (:methods
    (startup () _type_ :state 40)
    (fizzle () _type_ :state 41)
    )
  )

;; definition for method 3 of type gun-dark-shot
(defmethod inspect gun-dark-shot ((obj gun-dark-shot))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tblast-radius: ~f~%" (-> obj blast-radius))
  (format #t "~2Tcore-position: #<vector @ #x~X>~%" (-> obj core-position))
  (format #t "~2Tcore-velocity: #<vector @ #x~X>~%" (-> obj core-velocity))
  (format #t "~2Tspin-vector: #<vector @ #x~X>~%" (-> obj spin-vector))
  (format #t "~2Ttrack-target: ~D~%" (-> obj track-target))
  (format #t "~2Tsize-t: ~f~%" (-> obj size-t))
  (format #t "~2Tresult-array[16] @ #x~X~%" (-> obj result-array))
  (format #t "~2Tcharge-sound: ~D~%" (-> obj charge-sound))
  (format #t "~2Tfire-sound: ~D~%" (-> obj fire-sound))
  (format #t "~2Ttrail-sound: ~D~%" (-> obj trail-sound))
  (format #t "~2Texplode-sound: ~D~%" (-> obj explode-sound))
  (format #t "~2Tstart-pilot?: ~A~%" (-> obj start-pilot?))
  (label cfg-4)
  obj
  )

;; definition for function target-gun-fire-dark
;; INFO: Used lq/sq
(defbehavior target-gun-fire-dark target ()
  (let ((s5-0 (-> self gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> self entity))
    (set! (-> gp-0 charge) (-> s5-0 fire-charge))
    (set! (-> gp-0 options) (projectile-options))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 vel quad) (-> s5-0 fire-dir-out quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event self 'get-vehicle))))
    (let* ((v1-8 *game-info*)
           (a0-11 (+ (-> v1-8 attack-id) 1))
           )
      (set! (-> v1-8 attack-id) a0-11)
      (set! (-> gp-0 attack-id) a0-11)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
      (when v0-1
        (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> self gun track-target 0 handle))
        (set! (-> self gun charge-active?) (ppointer->handle v0-1))
        )
      v0-1
      )
    )
  )

;; definition for method 31 of type gun-dark-shot
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! gun-dark-shot ((obj gun-dark-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (set! (-> obj attack-mode) 'eco-dark)
  (vector-normalize! (-> obj root-override transv) (+ 225280.0 (* 225280.0 (-> obj charge-level))))
  (set! (-> obj part) (create-launch-control (-> *part-group-id-table* 72) obj))
  (set! (-> obj blast-radius) 40960.0)
  (set! (-> obj size-t) 0.0)
  (set! (-> obj charge-sound) (the-as uint (new-sound-id)))
  (set! (-> obj fire-sound) (the-as uint (new-sound-id)))
  (set! (-> obj trail-sound) (the-as uint (new-sound-id)))
  (set! (-> obj explode-sound)
        (the-as uint (add-process *gui-control* obj (gui-channel background) (gui-action queue) "pmkrxplo" -99.0 0))
        )
  (set-falloff! *gui-control* (the-as sound-id (-> obj explode-sound)) #t 50 150 11)
  (set! (-> obj start-pilot?) (the-as basic (and *target* (focus-test? *target* pilot))))
  ((method-of-type projectile init-proj-settings!) obj)
  0
  (none)
  )

;; definition for method 25 of type gun-dark-shot
(defmethod spawn-impact-particles gun-dark-shot ((obj gun-dark-shot))
  "Spawns associated particles with the projectile if applicable"
  (cond
    ((and (and (-> obj next-state) (= (-> obj next-state name) 'startup))
          (and *target* (focus-test? *target* in-head))
          )
     (kill-and-free-particles (-> obj part))
     )
    (else
      (set! (-> *part-id-table* 219 init-specs 2 initial-valuef) (lerp 409.6 9216.0 (-> obj size-t)))
      (set! (-> *part-id-table* 219 init-specs 8 initial-valuef) (lerp 0.0 32.0 (-> obj size-t)))
      (set! (-> *part-id-table* 220 init-specs 2 initial-valuef) (lerp 409.6 32768.0 (-> obj size-t)))
      (set! (-> *part-id-table* 220 init-specs 8 initial-valuef) (lerp 0.0 16.0 (-> obj size-t)))
      (set! (-> *part-id-table* 218 init-specs 2 initial-valuef) (lerp 409.6 8192.0 (-> obj size-t)))
      (set! (-> *part-id-table* 217 init-specs 1 initial-valuef) (lerp 0.1 1.0 (-> obj size-t)))
      (set! (-> *part-id-table* 217 init-specs 2 initial-valuef) (lerp 409.6 3686.4 (-> obj size-t)))
      (spawn (-> obj part) (-> obj root-override trans))
      )
    )
  (ja-post)
  (none)
  )

;; definition for method 32 of type gun-dark-shot
;; WARN: Return type mismatch int vs none.
(defmethod go-moving! gun-dark-shot ((obj gun-dark-shot))
  (go (method-of-object obj startup))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate startup (gun-dark-shot)
  :virtual #t
  :exit (behavior ()
    (send-event (ppointer->process (-> self parent)) 'release)
    (set! (-> self size-t) 1.0)
    (let ((v1-6 (the-as sound-rpc-set-param (get-sound-buffer-entry))))
      (set! (-> v1-6 command) (sound-command set-param))
      (set! (-> v1-6 id) (the-as sound-id (-> self charge-sound)))
      (set! (-> v1-6 params volume) -4)
      (set! (-> v1-6 auto-time) 24)
      (set! (-> v1-6 auto-from) 2)
      (set! (-> v1-6 params mask) (the-as uint 17))
      (-> v1-6 id)
      )
    (none)
    )
  :code (behavior ()
    (set! (-> self state-time) (-> self clock frame-counter))
    (until #f
      (cond
        ((or (and *target*
                  (focus-test? *target* dead grabbed under-water pole flut board mech dark carry indax teleporting)
                  )
             (and *target* (not (logtest? (focus-status in-head gun) (-> *target* focus-status))))
             (and *target* (not (-> self start-pilot?)) (focus-test? *target* pilot))
             )
         (go-virtual dissipate)
         )
        ((or (< (- (-> self clock frame-counter) (-> self state-time)) (seconds 0.3)) (cpad-hold? 0 r1))
         (set! (-> self size-t)
               (fmin 1.0 (* 0.016666668 (the float (- (-> self clock frame-counter) (-> self state-time)))))
               )
         (let ((t9-1 vector<-cspace!)
               (a0-13 (-> self root-override trans))
               (v1-26 (-> self parent))
               )
           (t9-1 a0-13 (-> (the-as process-drawable (if v1-26
                                                        (the-as process-drawable (-> v1-26 0 self))
                                                        )
                                   )
                           node-list
                           data
                           13
                           )
                 )
           )
         )
        ((and (logtest? (-> self options) (projectile-options proj-options-8000)) (made-impact? self))
         (go-virtual impact)
         )
        (else
          (go-virtual moving)
          )
        )
      (suspend)
      )
    #f
    (none)
    )
  :post (behavior ()
    (sound-play
      "pmkr-charge"
      :id (the-as sound-id (-> self charge-sound))
      :position (-> self root-override trans)
      )
    (spawn-impact-particles self)
    (none)
    )
  )

;; failed to figure out what this is:
(defstate moving (gun-dark-shot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type projectile moving) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self core-position quad) (-> self root-override trans quad))
    (let ((v1-5 (-> self core-velocity))
          (a0-3 (-> self parent))
          )
      (set! (-> v1-5 quad) (-> (the-as process-drawable (if a0-3
                                                            (the-as process-drawable (-> a0-3 0 self))
                                                            )
                                       )
                               node-list
                               data
                               13
                               bone
                               transform
                               vector
                               2
                               quad
                               )
            )
      )
    (when (and *target* (focus-test? *target* in-head))
      (set! (-> self core-position quad) (-> (camera-pos) quad))
      (set! (-> self core-velocity quad) (-> (camera-matrix) vector 2 quad))
      )
    (set-vector! (-> self spin-vector) (-> self core-velocity z) 0.0 (- (-> self core-velocity x)) 1.0)
    (let ((f0-5 (vector-length (-> self spin-vector))))
      (if (< f0-5 1.0)
          (set-vector! (-> self spin-vector) 1.0 0.0 0.0 1.0)
          (vector-float*! (-> self spin-vector) (-> self spin-vector) (/ 1.0 f0-5))
          )
      )
    (set! (-> self state-time) (-> self clock frame-counter))
    (let ((gp-2 (get-process *default-dead-pool* part-tracker #x4000)))
      (when gp-2
        (let ((t9-4 (method-of-type part-tracker activate)))
          (t9-4
            (the-as part-tracker gp-2)
            *entity-pool*
            (symbol->string (-> part-tracker symbol))
            (the-as pointer #x70004000)
            )
          )
        (let ((t9-5 run-function-in-process)
              (a0-18 gp-2)
              (a1-4 part-tracker-init)
              (a2-4 (-> *part-group-id-table* 70))
              (a3-1 0)
              (t0-0 #f)
              (t1-0 #f)
              (t2-0 #f)
              (t3-0 *launch-matrix*)
              )
          (set! (-> t3-0 trans quad) (-> self root-override trans quad))
          ((the-as (function object object object object object object object object none) t9-5)
           a0-18
           a1-4
           a2-4
           a3-1
           t0-0
           t1-0
           t2-0
           t3-0
           )
          )
        (-> gp-2 ppointer)
        )
      )
    (draw-beam (-> *part-id-table* 210) (-> self root-override trans) (-> self core-velocity) #f #t)
    (none)
    )
  :trans (behavior ()
    (local-vars (at-0 int))
    (rlet ((vf0 :class vf)
           (vf1 :class vf)
           (vf2 :class vf)
           )
      (init-vf0-vector)
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (let ((s5-0 (new 'stack-no-clear 'matrix)))
          (let ((s4-0 (new 'stack-no-clear 'vector)))
            (vector-normalize-copy! s4-0 (-> self core-velocity) 1.0)
            (let* ((s3-0 (handle->process (-> self track-target)))
                   (v1-3 (if (type? s3-0 process-drawable)
                             (the-as process-drawable s3-0)
                             )
                         )
                   )
              (when v1-3
                (let* ((s3-2 (vector-! (new 'stack-no-clear 'vector) (-> v1-3 root trans) (-> self core-position)))
                       (f0-0 (vector-normalize-ret-len! s3-2 1.0))
                       (f0-1 (lerp-scale 182.04445 8192.0 f0-0 61440.0 4096.0))
                       (s2-0 (new 'stack-no-clear 'matrix))
                       )
                  (matrix-from-two-vectors-max-angle! s2-0 s4-0 s3-2 f0-1)
                  (vector-matrix*! (-> self core-velocity) (-> self core-velocity) s2-0)
                  )
                )
              )
            (+! (-> self spin-vector x) (-> s4-0 z))
            (set! (-> self spin-vector z) (- (-> self spin-vector z) (-> s4-0 x)))
            (vector-flatten! (-> self spin-vector) (-> self spin-vector) s4-0)
            (matrix-axis-angle! s5-0 s4-0 (* 2002.4889 (-> self clock time-adjust-ratio)))
            (vector-matrix*! (-> self spin-vector) (-> self spin-vector) s5-0)
            (let ((f0-9 (the float (- (-> self clock frame-counter) (-> self state-time))))
                  (f30-0 0.0)
                  )
              (cond
                ((< 450.0 f0-9)
                 (go-virtual impact)
                 )
                ((< f0-9 90.0)
                 (set! f30-0 (lerp-scale 0.0 4096.0 f0-9 0.0 90.0))
                 )
                (else
                  (set! f30-0 (lerp-scale 4096.0 1228.8 f0-9 30.0 300.0))
                  )
                )
              (vector-normalize! (-> self spin-vector) f30-0)
              (vector-normalize! (-> self core-velocity) 7372.8)
              (set! (-> s5-0 vector 2 quad) (-> s4-0 quad))
              (set! (-> s5-0 vector 1 quad) (-> self spin-vector quad))
              (vector-float*! (-> s5-0 vector 1) (-> s5-0 vector 1) (/ 1.0 f30-0))
              )
            )
          (vector-cross! (the-as vector (-> s5-0 vector)) (-> s5-0 vector 1) (-> s5-0 vector 2))
          (matrix->quaternion (-> self root-override quat) s5-0)
          )
        (vector+! (-> self core-position) (-> self core-position) (-> self core-velocity))
        (vector+! gp-0 (-> self core-position) (-> self spin-vector))
        (vector-! (-> self root-override transv) gp-0 (-> self root-override trans))
        )
      (let ((v1-31 (-> self root-override transv)))
        (.lvf vf1 (&-> (-> self root-override transv) quad))
        (let ((f0-12 (-> self clock frames-per-second)))
          (.mov at-0 f0-12)
          )
        (.mov vf2 at-0)
        (.mov.vf vf1 vf0 :mask #b1000)
        (.mul.x.vf vf1 vf1 vf2 :mask #b111)
        (.svf (&-> v1-31 quad) vf1)
        )
      (projectile-move-fill-line-sphere self)
      (if (logtest? (-> self root-override status) (collide-status touch-surface))
          (go-virtual impact)
          )
      (sound-play "pmkr-fire" :id (the-as sound-id (-> self fire-sound)) :position (-> self root-override trans))
      (sound-play "pmkr-trail" :id (the-as sound-id (-> self trail-sound)) :position (-> self root-override trans))
      (none)
      )
    )
  )

;; definition for function process-drawable-shock-effect-bullseye
;; WARN: Check prologue - tricky store of a0
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun process-drawable-shock-effect-bullseye ((arg0 process-focusable)
                                      (arg1 process-focusable)
                                      (arg2 matrix)
                                      (arg3 int)
                                      (arg4 sparticle-launcher)
                                      (arg5 sparticle-launcher)
                                      (arg6 sparticle-launcher)
                                      )
  (local-vars (sv-16 process) (sv-32 matrix) (sv-48 process-focusable))
  (set! sv-48 arg0)
  (let ((s0-0 arg1))
    (set! sv-32 arg2)
    (let ((gp-0 arg4)
          (s2-0 arg5)
          (s3-0 arg6)
          (s4-0 (get-trans sv-48 3))
          (s5-0 (get-trans s0-0 3))
          )
      (set! sv-16 (get-process *default-dead-pool* lightning-tracker #x4000))
      (let ((s1-0 (when sv-16
                    (let ((t9-3 (method-of-type lightning-tracker activate)))
                      (t9-3
                        (the-as lightning-tracker sv-16)
                        s0-0
                        (symbol->string (-> lightning-tracker symbol))
                        (the-as pointer #x70004000)
                        )
                      )
                    (let ((t9-4 run-function-in-process)
                          (a0-5 sv-16)
                          (a1-7 lightning-tracker-init)
                          (a3-2 0)
                          (t0-1 lightning-probe-callback)
                          (t2-1 256)
                          (t3-0 256)
                          )
                      ((the-as (function object object object object object object object object none) t9-4)
                       a0-5
                       a1-7
                       sv-32
                       a3-2
                       t0-1
                       sv-48
                       t2-1
                       t3-0
                       )
                      )
                    (-> sv-16 ppointer)
                    )
                  )
            )
        (when s2-0
          (let ((t9-5 sp-launch-particles-var)
                (a0-6 *sp-particle-system-2d*)
                (a2-4 *launch-matrix*)
                )
            (set! (-> a2-4 trans quad) (-> s4-0 quad))
            (t9-5 a0-6 s2-0 a2-4 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
            )
          )
        (when s3-0
          (let ((t9-6 sp-launch-particles-var)
                (a0-7 *sp-particle-system-2d*)
                (a2-5 *launch-matrix*)
                )
            (set! (-> a2-5 trans quad) (-> s4-0 quad))
            (t9-6 a0-7 s3-0 a2-5 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
            )
          )
        (when (and gp-0 s1-0)
          (let ((v1-15 (get-field-spec-by-id gp-0 (sp-field-id spt-timer))))
            (if v1-15
                (set! (-> v1-15 initial-valuef) (the-as float (-> (the-as lightning-tracker (-> s1-0 0)) duration)))
                )
            )
          (let ((t9-8 sp-launch-particles-var)
                (a0-12 *sp-particle-system-2d*)
                (a1-15 gp-0)
                (a2-6 *launch-matrix*)
                )
            (set! (-> a2-6 trans quad) (-> s4-0 quad))
            (t9-8 a0-12 a1-15 a2-6 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
            )
          (let ((t9-9 sp-launch-particles-var)
                (a0-13 *sp-particle-system-2d*)
                (a2-7 *launch-matrix*)
                )
            (set! (-> a2-7 trans quad) (-> s5-0 quad))
            (t9-9 a0-13 gp-0 a2-7 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
            )
          )
        )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate fizzle (gun-dark-shot)
  :virtual #t
  :enter (behavior ()
    (set! (-> self state-time) (-> self clock frame-counter))
    (none)
    )
  :trans (behavior ()
    (if (>= (- (-> self clock frame-counter) (-> self state-time)) (seconds 1))
        (deactivate self)
        )
    (process-drawable-shock-effect
      self
      (-> *lightning-spec-id-table* 11)
      lightning-probe-callback
      (-> *part-id-table* 429)
      256
      0
      40960.0
      )
    (let ((t9-2 sp-launch-particles-var)
          (a0-3 *sp-particle-system-2d*)
          (a1-1 (-> *part-id-table* 215))
          (a2-1 *launch-matrix*)
          )
      (set! (-> a2-1 trans quad) (-> self root-override trans quad))
      (t9-2 a0-3 a1-1 a2-1 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
      )
    (let ((t9-3 sp-launch-particles-var)
          (a0-4 *sp-particle-system-2d*)
          (a1-2 (-> *part-id-table* 216))
          (a2-2 *launch-matrix*)
          )
      (set! (-> a2-2 trans quad) (-> self root-override trans quad))
      (t9-3 a0-4 a1-2 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
      )
    (let ((gp-0 (-> *part-id-table* 430)))
      (when gp-0
        (let ((v1-14 (get-field-spec-by-id gp-0 (sp-field-id spt-timer))))
          (if v1-14
              (set! (-> v1-14 initial-valuef) (the-as float #xf))
              )
          )
        (let ((t9-5 sp-launch-particles-var)
              (a0-8 *sp-particle-system-2d*)
              (a2-3 *launch-matrix*)
              )
          (set! (-> a2-3 trans quad) (-> self root-override trans quad))
          (t9-5 a0-8 gp-0 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
          )
        )
      )
    (none)
    )
  :code (the-as (function none :behavior gun-dark-shot) sleep-code)
  )

;; definition for function gun-dark-shot-init-fizzle
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defbehavior gun-dark-shot-init-fizzle gun-dark-shot ((arg0 vector))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-projectile)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-6 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-6 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-6 prim-core collide-with)
            (collide-spec backgnd crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher)
            )
      (set! (-> v1-6 prim-core action) (collide-action solid))
      (set-vector! (-> v1-6 local-sphere) 0.0 5324.8 0.0 5324.8)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 2))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> self root-override) s5-0)
    )
  (set! (-> self root-override trans quad) (-> arg0 quad))
  (let ((v1-16 (-> self root-override root-prim)))
    (set! (-> v1-16 prim-core collide-as) (collide-spec))
    (set! (-> v1-16 prim-core collide-with) (collide-spec))
    )
  0
  (logclear! (-> self mask) (process-mask actor-pause))
  (go-virtual fizzle)
  (none)
  )

;; failed to figure out what this is:
(defstate impact (gun-dark-shot)
  :virtual #t
  )
