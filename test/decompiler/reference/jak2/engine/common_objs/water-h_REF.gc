;;-*-Lisp-*-
(in-package goal)

;; definition of type water-info
(deftype water-info (structure)
  ((trans       vector      :inline :offset-assert   0)
   (normal      vector      :inline :offset-assert  16)
   (base-height meters              :offset-assert  32)
   (depth       meters              :offset-assert  36)
   (handle      uint64              :offset-assert  40)
   (flags       water-flags         :offset-assert  48)
   (prim        basic               :offset-assert  52)
   (extra-flags uint32              :offset-assert  56)
   )
  :method-count-assert 9
  :size-assert         #x3c
  :flag-assert         #x90000003c
  )

;; definition for method 3 of type water-info
(defmethod inspect water-info ((obj water-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" obj 'water-info)
  (format #t "~1Ttrans: ~`vector`P~%" (-> obj trans))
  (format #t "~1Tnormal: ~`vector`P~%" (-> obj normal))
  (format #t "~1Tbase-height: (meters ~m)~%" (-> obj base-height))
  (format #t "~1Tdepth: (meters ~m)~%" (-> obj depth))
  (format #t "~1Thandle: ~D~%" (-> obj handle))
  (format #t "~1Tflags: #x~X : (water-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (water-flags active)) (water-flags active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (water-flags deadly)) (water-flags deadly))
        (format #t "deadly ")
        )
    (if (= (logand (water-flags touch-water-good) s5-0) (shl #x8000 16))
        (format #t "touch-water-good ")
        )
    (if (= (logand s5-0 (water-flags lava)) (water-flags lava))
        (format #t "lava ")
        )
    (if (= (logand (water-flags jump-out) s5-0) (water-flags jump-out))
        (format #t "jump-out ")
        )
    (if (= (logand (water-flags head-under-water) s5-0) (water-flags head-under-water))
        (format #t "head-under-water ")
        )
    (if (= (logand s5-0 (water-flags under-water)) (water-flags under-water))
        (format #t "under-water ")
        )
    (if (= (logand s5-0 (water-flags swamp)) (water-flags swamp))
        (format #t "swamp ")
        )
    (if (= (logand s5-0 (water-flags dark-eco)) (water-flags dark-eco))
        (format #t "dark-eco ")
        )
    (if (= (logand (water-flags part-water) s5-0) (water-flags part-water))
        (format #t "part-water ")
        )
    (if (= (logand (water-flags break-surface) s5-0) (water-flags break-surface))
        (format #t "break-surface ")
        )
    (if (= (logand (water-flags over-water) s5-0) (water-flags over-water))
        (format #t "over-water ")
        )
    (if (= (logand s5-0 (water-flags use-ocean)) (water-flags use-ocean))
        (format #t "use-ocean ")
        )
    (if (= (logand s5-0 (water-flags flow)) (water-flags flow))
        (format #t "flow ")
        )
    (if (= (logand (water-flags wading) s5-0) (water-flags wading))
        (format #t "wading ")
        )
    (if (= (logand (water-flags part-rings) s5-0) (water-flags part-rings))
        (format #t "part-rings ")
        )
    (if (= (logand (water-flags part-drip) s5-0) (water-flags part-drip))
        (format #t "part-drip ")
        )
    (if (= (logand (water-flags part-splash) s5-0) (water-flags part-splash))
        (format #t "part-splash ")
        )
    (if (= (logand s5-0 (water-flags swim-ground)) (water-flags swim-ground))
        (format #t "swim-ground ")
        )
    (if (= (logand s5-0 (water-flags tar)) (water-flags tar))
        (format #t "tar ")
        )
    (if (= (logand (water-flags swimming) s5-0) (water-flags swimming))
        (format #t "swimming ")
        )
    (if (= (logand s5-0 (water-flags mud)) (water-flags mud))
        (format #t "mud ")
        )
    (if (= (logand (water-flags event) s5-0) (water-flags event))
        (format #t "event ")
        )
    (if (= (logand (water-flags bouncing) s5-0) (water-flags bouncing))
        (format #t "bouncing ")
        )
    (if (= (logand s5-0 (water-flags use-water-anim)) (water-flags use-water-anim))
        (format #t "use-water-anim ")
        )
    (if (= (logand (water-flags spawn-drip) s5-0) (water-flags spawn-drip))
        (format #t "spawn-drip ")
        )
    (if (= (logand s5-0 (water-flags can-swim)) (water-flags can-swim))
        (format #t "can-swim ")
        )
    (if (= (logand (water-flags touch-water) s5-0) (water-flags touch-water))
        (format #t "touch-water ")
        )
    (if (= (logand s5-0 (water-flags no-grab-ground)) (water-flags no-grab-ground))
        (format #t "no-grab-ground ")
        )
    (if (= (logand s5-0 (water-flags can-wade)) (water-flags can-wade))
        (format #t "can-wade ")
        )
    (if (= (logand (water-flags find-water) s5-0) (water-flags find-water))
        (format #t "find-water ")
        )
    (if (= (logand s5-0 (water-flags can-ground)) (water-flags can-ground))
        (format #t "can-ground ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tprim: ~A~%" (-> obj prim))
  (format #t "~1Textra-flags: ~D~%" (-> obj extra-flags))
  (label cfg-68)
  obj
  )

;; definition of type water-control
(deftype water-control (basic)
  ((flags             water-flags              :offset-assert   4)
   (process           process-hidden           :offset-assert   8)
   (joint-index       int32                    :offset-assert  12)
   (top-y-offset      float                    :offset-assert  16)
   (attack-id         uint32                   :offset-assert  20)
   (enter-water-time  time-frame               :offset-assert  24)
   (wade-time         time-frame               :offset-assert  32)
   (on-water-time     time-frame               :offset-assert  40)
   (enter-swim-time   time-frame               :offset-assert  48)
   (swim-time         time-frame               :offset-assert  56)
   (base-height       meters                   :offset-assert  64)
   (wade-height       meters                   :offset-assert  68)
   (swim-height       meters                   :offset-assert  72)
   (surface-height    meters                   :offset-assert  76)
   (bottom-height     meters                   :offset-assert  80)
   (collide-height    meters                   :offset-assert  84)
   (height            meters                   :offset-assert  88)
   (height-offset     float          4         :offset-assert  92)
   (base-ocean-offset meters                   :offset         92)
   (real-ocean-offset meters                   :offset         92)
   (ocean-offset      meters                   :offset         96)
   (bob-offset        meters                   :offset        100)
   (align-offset      meters                   :offset        104)
   (swim-depth        meters                   :offset        108)
   (bob               smush-control  :inline   :offset        112)
   (ripple            int64                    :offset        144)
   (ripple-size       meters                   :offset        152)
   (wake-size         meters                   :offset        156)
   (bottom            vector         2 :inline :offset        160)
   (top               vector         2 :inline :offset        192)
   (enter-water-pos   vector         :inline   :offset        224)
   (drip-old-pos      vector         :inline   :offset        240)
   (drip-joint-index  int32                    :offset        256)
   (drip-wetness      float                    :offset        260)
   (drip-time         time-frame               :offset        264)
   (drip-speed        float                    :offset        272)
   (drip-height       meters                   :offset        276)
   (drip-mult         float                    :offset        280)
   (distort-time      time-frame               :offset        288)
   )
  :method-count-assert 17
  :size-assert         #x128
  :flag-assert         #x1100000128
  (:methods
    (new (symbol type process int float float float) _type_ 0)
    (water-control-method-9 () none 9)
    (water-control-method-10 () none 10)
    (water-control-method-11 () none 11)
    (distance-from-surface (_type_) float 12)
    (water-control-method-13 () none 13)
    (display-water-marks? (_type_) symbol 14)
    (water-control-method-15 () none 15)
    (water-control-method-16 () none 16)
    )
  )

;; definition for method 3 of type water-control
(defmethod inspect water-control ((obj water-control))
  (when (not obj)
    (set! obj obj)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tflags: #x~X : (water-flag " (-> obj flags))
  (let ((s5-0 (-> obj flags)))
    (if (= (logand s5-0 (water-flags active)) (water-flags active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (water-flags deadly)) (water-flags deadly))
        (format #t "deadly ")
        )
    (if (= (logand (water-flags touch-water-good) s5-0) (shl #x8000 16))
        (format #t "touch-water-good ")
        )
    (if (= (logand s5-0 (water-flags lava)) (water-flags lava))
        (format #t "lava ")
        )
    (if (= (logand (water-flags jump-out) s5-0) (water-flags jump-out))
        (format #t "jump-out ")
        )
    (if (= (logand (water-flags head-under-water) s5-0) (water-flags head-under-water))
        (format #t "head-under-water ")
        )
    (if (= (logand s5-0 (water-flags under-water)) (water-flags under-water))
        (format #t "under-water ")
        )
    (if (= (logand s5-0 (water-flags swamp)) (water-flags swamp))
        (format #t "swamp ")
        )
    (if (= (logand s5-0 (water-flags dark-eco)) (water-flags dark-eco))
        (format #t "dark-eco ")
        )
    (if (= (logand (water-flags part-water) s5-0) (water-flags part-water))
        (format #t "part-water ")
        )
    (if (= (logand (water-flags break-surface) s5-0) (water-flags break-surface))
        (format #t "break-surface ")
        )
    (if (= (logand (water-flags over-water) s5-0) (water-flags over-water))
        (format #t "over-water ")
        )
    (if (= (logand s5-0 (water-flags use-ocean)) (water-flags use-ocean))
        (format #t "use-ocean ")
        )
    (if (= (logand s5-0 (water-flags flow)) (water-flags flow))
        (format #t "flow ")
        )
    (if (= (logand (water-flags wading) s5-0) (water-flags wading))
        (format #t "wading ")
        )
    (if (= (logand (water-flags part-rings) s5-0) (water-flags part-rings))
        (format #t "part-rings ")
        )
    (if (= (logand (water-flags part-drip) s5-0) (water-flags part-drip))
        (format #t "part-drip ")
        )
    (if (= (logand (water-flags part-splash) s5-0) (water-flags part-splash))
        (format #t "part-splash ")
        )
    (if (= (logand s5-0 (water-flags swim-ground)) (water-flags swim-ground))
        (format #t "swim-ground ")
        )
    (if (= (logand s5-0 (water-flags tar)) (water-flags tar))
        (format #t "tar ")
        )
    (if (= (logand (water-flags swimming) s5-0) (water-flags swimming))
        (format #t "swimming ")
        )
    (if (= (logand s5-0 (water-flags mud)) (water-flags mud))
        (format #t "mud ")
        )
    (if (= (logand (water-flags event) s5-0) (water-flags event))
        (format #t "event ")
        )
    (if (= (logand (water-flags bouncing) s5-0) (water-flags bouncing))
        (format #t "bouncing ")
        )
    (if (= (logand s5-0 (water-flags use-water-anim)) (water-flags use-water-anim))
        (format #t "use-water-anim ")
        )
    (if (= (logand (water-flags spawn-drip) s5-0) (water-flags spawn-drip))
        (format #t "spawn-drip ")
        )
    (if (= (logand s5-0 (water-flags can-swim)) (water-flags can-swim))
        (format #t "can-swim ")
        )
    (if (= (logand (water-flags touch-water) s5-0) (water-flags touch-water))
        (format #t "touch-water ")
        )
    (if (= (logand s5-0 (water-flags no-grab-ground)) (water-flags no-grab-ground))
        (format #t "no-grab-ground ")
        )
    (if (= (logand s5-0 (water-flags can-wade)) (water-flags can-wade))
        (format #t "can-wade ")
        )
    (if (= (logand (water-flags find-water) s5-0) (water-flags find-water))
        (format #t "find-water ")
        )
    (if (= (logand s5-0 (water-flags can-ground)) (water-flags can-ground))
        (format #t "can-ground ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tprocess: ~A~%" (-> obj process))
  (format #t "~1Tjoint-index: ~D~%" (-> obj joint-index))
  (format #t "~1Ttop-y-offset: ~f~%" (-> obj top-y-offset))
  (format #t "~1Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~1Tenter-water-time: ~D~%" (-> obj enter-water-time))
  (format #t "~1Twade-time: ~D~%" (-> obj wade-time))
  (format #t "~1Ton-water-time: ~D~%" (-> obj on-water-time))
  (format #t "~1Tenter-swim-time: ~D~%" (-> obj enter-swim-time))
  (format #t "~1Tswim-time: ~D~%" (-> obj swim-time))
  (format #t "~1Tbase-height: (meters ~m)~%" (-> obj base-height))
  (format #t "~1Twade-height: (meters ~m)~%" (-> obj wade-height))
  (format #t "~1Tswim-height: (meters ~m)~%" (-> obj swim-height))
  (format #t "~1Tsurface-height: (meters ~m)~%" (-> obj surface-height))
  (format #t "~1Tbottom-height: (meters ~m)~%" (-> obj bottom-height))
  (format #t "~1Tcollide-height: (meters ~m)~%" (-> obj collide-height))
  (format #t "~1Theight: (meters ~m)~%" (-> obj height))
  (format #t "~1Theight-offset[4] @ #x~X~%" (&-> obj base-ocean-offset))
  (format #t "~1Tbase-ocean-offset: (meters ~m)~%" (-> obj base-ocean-offset))
  (format #t "~1Treal-ocean-offset: (meters ~m)~%" (-> obj base-ocean-offset))
  (format #t "~1Tocean-offset: (meters ~m)~%" (-> obj ocean-offset))
  (format #t "~1Tbob-offset: (meters ~m)~%" (-> obj bob-offset))
  (format #t "~1Talign-offset: (meters ~m)~%" (-> obj align-offset))
  (format #t "~1Tswim-depth: (meters ~m)~%" (-> obj swim-depth))
  (format #t "~1Tbob: #<smush-control @ #x~X>~%" (-> obj bob))
  (format #t "~1Tripple: ~D~%" (-> obj ripple))
  (format #t "~1Tripple-size: (meters ~m)~%" (-> obj ripple-size))
  (format #t "~1Twake-size: (meters ~m)~%" (-> obj wake-size))
  (format #t "~1Tbottom[2] @ #x~X~%" (-> obj bottom))
  (format #t "~1Ttop[2] @ #x~X~%" (-> obj top))
  (format #t "~1Tenter-water-pos: ~`vector`P~%" (-> obj enter-water-pos))
  (format #t "~1Tdrip-old-pos: ~`vector`P~%" (-> obj drip-old-pos))
  (format #t "~1Tdrip-joint-index: ~D~%" (-> obj drip-joint-index))
  (format #t "~1Tdrip-wetness: ~f~%" (-> obj drip-wetness))
  (format #t "~1Tdrip-time: ~D~%" (-> obj drip-time))
  (format #t "~1Tdrip-speed: ~f~%" (-> obj drip-speed))
  (format #t "~1Tdrip-height: (meters ~m)~%" (-> obj drip-height))
  (format #t "~1Tdrip-mult: ~f~%" (-> obj drip-mult))
  (format #t "~1Tdistort-time: ~D~%" (-> obj distort-time))
  (label cfg-68)
  obj
  )

;; definition for method 14 of type water-control
(defmethod display-water-marks? water-control ((obj water-control))
  *display-water-marks*
  )

;; definition for method 0 of type water-control
(defmethod new water-control ((allocation symbol) (type-to-make type) (arg0 process) (arg1 int) (arg2 float) (arg3 float) (arg4 float))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 process) (the-as process-hidden arg0))
    (set! (-> v0-0 joint-index) arg1)
    (set! (-> v0-0 wade-height) arg4)
    (set! (-> v0-0 swim-height) arg3)
    (set! (-> v0-0 bottom-height) 32768.0)
    (set! (-> v0-0 ripple-size) 1638.4)
    (set! (-> v0-0 wake-size) 3072.0)
    (set! (-> v0-0 ripple) (the-as int #f))
    (set! (-> v0-0 drip-mult) 1.0)
    (set! (-> v0-0 top-y-offset) arg2)
    (let* ((v1-6 *game-info*)
           (a0-2 (+ (-> v1-6 attack-id) 1))
           )
      (set! (-> v1-6 attack-id) a0-2)
      (set! (-> v0-0 attack-id) a0-2)
      )
    v0-0
    )
  )

;; definition for method 12 of type water-control
(defmethod distance-from-surface water-control ((obj water-control))
  (- (-> obj top 0 y) (-> obj height))
  )

;; definition of type water-vol
(deftype water-vol (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  )

;; definition for method 3 of type water-vol
(defmethod inspect water-vol ((obj water-vol))
  (when (not obj)
    (set! obj obj)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tmask: #x~X : (process-mask " (-> obj mask))
  (let ((s5-0 (-> obj mask)))
    (if (= (logand s5-0 (process-mask process-tree)) (process-mask process-tree))
        (format #t "process-tree ")
        )
    (if (= (logand s5-0 (process-mask target)) (process-mask target))
        (format #t "target ")
        )
    (if (= (logand (process-mask collectable) s5-0) (process-mask collectable))
        (format #t "attackable ")
        )
    (if (= (logand (process-mask bit18) s5-0) (process-mask bit18))
        (format #t "collectable ")
        )
    (if (= (logand (process-mask projectile) s5-0) (process-mask projectile))
        (format #t "projectile ")
        )
    (if (= (logand (process-mask no-track) s5-0) (process-mask no-track))
        (format #t "no-track ")
        )
    (if (= (logand s5-0 (process-mask sleep-code)) (process-mask sleep-code))
        (format #t "sleep-code ")
        )
    (if (= (logand s5-0 (process-mask actor-pause)) (process-mask actor-pause))
        (format #t "actor-pause ")
        )
    (if (= (logand (process-mask bot) s5-0) (process-mask bot))
        (format #t "bot ")
        )
    (if (= (logand (process-mask vehicle) s5-0) (process-mask vehicle))
        (format #t "vehicle ")
        )
    (if (= (logand (process-mask enemy) s5-0) (process-mask enemy))
        (format #t "enemy ")
        )
    (if (= (logand (process-mask entity) s5-0) (process-mask entity))
        (format #t "entity ")
        )
    (if (= (logand s5-0 (process-mask heap-shrunk)) (process-mask heap-shrunk))
        (format #t "heap-shrunk ")
        )
    (if (= (logand (process-mask sidekick) s5-0) (process-mask sidekick))
        (format #t "sidekick ")
        )
    (if (= (logand s5-0 (process-mask going)) (process-mask going))
        (format #t "going ")
        )
    (if (= (logand s5-0 (process-mask execute)) (process-mask execute))
        (format #t "execute ")
        )
    (if (= (logand (process-mask civilian) s5-0) (shl #x8000 16))
        (format #t "civilian ")
        )
    (if (= (logand (process-mask death) s5-0) (process-mask death))
        (format #t "death ")
        )
    (if (= (logand (process-mask guard) s5-0) (process-mask guard))
        (format #t "guard ")
        )
    (if (= (logand s5-0 (process-mask no-kill)) (process-mask no-kill))
        (format #t "no-kill ")
        )
    (if (= (logand (process-mask platform) s5-0) (process-mask platform))
        (format #t "platform ")
        )
    (if (= (logand s5-0 (process-mask freeze)) (process-mask freeze))
        (format #t "freeze ")
        )
    (if (= (logand s5-0 (process-mask sleep)) (process-mask sleep))
        (format #t "sleep ")
        )
    (if (= (logand s5-0 (process-mask progress)) (process-mask progress))
        (format #t "progress ")
        )
    (if (= (logand s5-0 (process-mask menu)) (process-mask menu))
        (format #t "menu ")
        )
    (if (= (logand (process-mask camera) s5-0) (process-mask camera))
        (format #t "camera ")
        )
    (if (= (logand (process-mask ambient) s5-0) (process-mask ambient))
        (format #t "ambient ")
        )
    (if (= (logand s5-0 (process-mask dark-effect)) (process-mask dark-effect))
        (format #t "dark-effect ")
        )
    (if (= (logand (process-mask crate) s5-0) (process-mask crate))
        (format #t "crate ")
        )
    (if (= (logand s5-0 (process-mask kernel-run)) (process-mask kernel-run))
        (format #t "kernel-run ")
        )
    (if (= (logand s5-0 (process-mask movie)) (process-mask movie))
        (format #t "movie ")
        )
    (if (= (logand s5-0 (process-mask pause)) (process-mask pause))
        (format #t "pause ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tclock: ~A~%" (-> obj clock))
  (format #t "~1Tparent: #x~X~%" (-> obj parent))
  (format #t "~1Tbrother: #x~X~%" (-> obj brother))
  (format #t "~1Tchild: #x~X~%" (-> obj child))
  (format #t "~1Tppointer: #x~X~%" (-> obj ppointer))
  (format #t "~1Tself: ~A~%" (-> obj self))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tstatus: ~A~%" (-> obj status))
  (format #t "~1Tpid: ~D~%" (-> obj pid))
  (format #t "~1Tmain-thread: ~A~%" (-> obj main-thread))
  (format #t "~1Ttop-thread: ~A~%" (-> obj top-thread))
  (format #t "~1Tentity: ~A~%" (-> obj entity))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tstate: ~A~%" (-> obj state))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (format #t "~1Ttrans-hook: ~A~%" (-> obj trans-hook))
  (format #t "~1Tpost-hook: ~A~%" (-> obj post-hook))
  (format #t "~1Tevent-hook: ~A~%" (-> obj event-hook))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Theap-base: #x~X~%" (-> obj heap-base))
  (format #t "~1Theap-top: #x~X~%" (-> obj heap-top))
  (format #t "~1Theap-cur: #x~X~%" (-> obj heap-cur))
  (format #t "~1Tstack-frame-top: ~A~%" (-> obj stack-frame-top))
  (format #t "~1Theap: #<kheap @ #x~X>~%" (&-> obj heap-base))
  (format #t "~1Tconnection-list: ~`connectable`P~%" (-> obj connection-list))
  (format #t "~1Tstack[0] @ #x~X~%" (-> obj stack))
  (label cfg-68)
  obj
  )

;; failed to figure out what this is:
0
