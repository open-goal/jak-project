;;-*-Lisp-*-
(in-package goal)

;; definition of type projectile
(deftype projectile (process-drawable)
  ((root-override   collide-shape-moving               :offset        128)
   (starting-pos    vector                     :inline :offset-assert 208)
   (starting-dir    vector                     :inline :offset-assert 224)
   (target-pos      vector                     :inline :offset-assert 240)
   (base-target-pos vector                     :inline :offset-assert 256)
   (pre-move-transv vector                     :inline :offset-assert 272)
   (timeout         time-frame                         :offset-assert 288)
   (spawn-time      time-frame                         :offset-assert 296)
   (options         projectile-options                 :offset-assert 304)
   (last-target     handle                             :offset-assert 312)
   (notify-handle   handle                             :offset-assert 320)
   (owner-handle    handle                             :offset-assert 328)
   (ignore-handle   handle                             :offset-assert 336)
   (update-velocity (function projectile none)         :offset-assert 344)
   (move            (function projectile none)         :offset-assert 348)
   (pick-target     (function projectile none)         :offset-assert 352)
   (max-speed       float                              :offset-assert 356)
   (old-dist        float                      16      :offset-assert 360)
   (old-dist-count  int32                              :offset-assert 424)
   (hits            int32                              :offset-assert 428)
   (max-hits        int32                              :offset-assert 432)
   (tween           float                              :offset-assert 436)
   (attack-mode     symbol                             :offset-assert 440)
   (attack-id       uint32                             :offset-assert 444)
   (damage          float                              :offset-assert 448)
   (charge-level    float                              :offset-assert 452)
   (sound-id        sound-id                           :offset-assert 456)
   (stop-speed      meters                             :offset-assert 460)
   (invinc-time     time-frame                         :offset-assert 464)
   )
  :heap-base #x160
  :method-count-assert 40
  :size-assert         #x1d8
  :flag-assert         #x28016001d8
  (:methods
    (die () _type_ :state 20)
    (dissipate () _type_ :state 21)
    (impact () _type_ :state 22)
    (moving () _type_ :state 23)
    (draw-laser-sight (_type_) none 24)
    (spawn-impact-particles (_type_) none 25)
    (spawn-shell-particles (_type_) none 26)
    (unknown-particles (_type_) none 27)
    (play-impact-sound (_type_ projectile-options) none 28)
    (stop-sound! (_type_) none 29)
    (init-proj-collision! (_type_) none 30)
    (init-proj-settings! (_type_) none 31)
    (go-moving! (_type_) none 32)
    (go-sitting! (_type_) none 33)
    (kill-projectile! (_type_) symbol 34)
    (event-handler! (_type_ process int symbol event-message-block) object 35)
    (handle-proj-hit! (_type_ process event-message-block) object 36)
    (deal-damage! (_type_ process event-message-block) symbol 37)
    (made-impact? (_type_) symbol 38)
    (play-impact-sound! (_type_) sound-id :behavior projectile 39)
    )
  )

;; definition for method 3 of type projectile
(defmethod inspect projectile ((obj projectile))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tstarting-pos: ~`vector`P~%" (-> obj starting-pos))
  (format #t "~2Tstarting-dir: ~`vector`P~%" (-> obj starting-dir))
  (format #t "~2Ttarget-pos: ~`vector`P~%" (-> obj target-pos))
  (format #t "~2Tbase-target-pos: ~`vector`P~%" (-> obj base-target-pos))
  (format #t "~2Tpre-move-transv: ~`vector`P~%" (-> obj pre-move-transv))
  (format #t "~2Ttimeout: ~D~%" (-> obj timeout))
  (format #t "~2Tspawn-time: ~D~%" (-> obj spawn-time))
  (format #t "~2Toptions: ~D~%" (-> obj options))
  (format #t "~2Tlast-target: ~D~%" (-> obj last-target))
  (format #t "~2Tnotify-handle: ~D~%" (-> obj notify-handle))
  (format #t "~2Towner-handle: ~D~%" (-> obj owner-handle))
  (format #t "~2Tignore-handle: ~D~%" (-> obj ignore-handle))
  (format #t "~2Tupdate-velocity: ~A~%" (-> obj update-velocity))
  (format #t "~2Tmove: ~A~%" (-> obj move))
  (format #t "~2Tpick-target: ~A~%" (-> obj pick-target))
  (format #t "~2Tmax-speed: ~f~%" (-> obj max-speed))
  (format #t "~2Told-dist[16] @ #x~X~%" (-> obj old-dist))
  (format #t "~2Told-dist-count: ~D~%" (-> obj old-dist-count))
  (format #t "~2Thits: ~D~%" (-> obj hits))
  (format #t "~2Tmax-hits: ~D~%" (-> obj max-hits))
  (format #t "~2Ttween: ~f~%" (-> obj tween))
  (format #t "~2Tattack-mode: ~A~%" (-> obj attack-mode))
  (format #t "~2Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~2Tdamage: ~f~%" (-> obj damage))
  (format #t "~2Tcharge-level: ~f~%" (-> obj charge-level))
  (format #t "~2Tsound-id: ~D~%" (-> obj sound-id))
  (format #t "~2Tstop-speed: (meters ~m)~%" (-> obj stop-speed))
  (format #t "~2Tinvinc-time: ~D~%" (-> obj invinc-time))
  (label cfg-4)
  obj
  )

;; definition of type projectile-init-by-other-params
(deftype projectile-init-by-other-params (structure)
  ((ent           entity                     :offset-assert   0)
   (charge        float                      :offset-assert   4)
   (attack-id     uint32                     :offset-assert   8)
   (options       projectile-options         :offset-assert  16)
   (notify-handle handle                     :offset-assert  24)
   (owner-handle  handle                     :offset-assert  32)
   (ignore-handle handle                     :offset-assert  40)
   (pos           vector             :inline :offset-assert  48)
   (vel           vector             :inline :offset-assert  64)
   (timeout       time-frame                 :offset-assert  80)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

;; definition for method 3 of type projectile-init-by-other-params
(defmethod inspect projectile-init-by-other-params ((obj projectile-init-by-other-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'projectile-init-by-other-params)
  (format #t "~1Tent: ~A~%" (-> obj ent))
  (format #t "~1Tcharge: ~f~%" (-> obj charge))
  (format #t "~1Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~1Toptions: ~D~%" (-> obj options))
  (format #t "~1Tnotify-handle: ~D~%" (-> obj notify-handle))
  (format #t "~1Towner-handle: ~D~%" (-> obj owner-handle))
  (format #t "~1Tignore-handle: ~D~%" (-> obj ignore-handle))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> obj pos))
  (format #t "~1Tvel: #<vector @ #x~X>~%" (-> obj vel))
  (format #t "~1Ttimeout: ~D~%" (-> obj timeout))
  (label cfg-4)
  obj
  )

;; definition for function spawn-projectile
(defun spawn-projectile ((arg0 type) (arg1 projectile-init-by-other-params) (arg2 process-tree) (arg3 dead-pool))
  (let ((s4-0 (get-process arg3 arg0 #x4000)))
    (when s4-0
      (let ((t9-1 (method-of-type process activate)))
        (t9-1 s4-0 arg2 (symbol->string (-> arg0 symbol)) (the-as pointer #x70004000))
        )
      (run-now-in-process s4-0 projectile-init-by-other arg1)
      (-> s4-0 ppointer)
      )
    )
  )

;; definition of type projectile-bounce
(deftype projectile-bounce (projectile)
  "This seems to be the scrapped peacemaker gun implementation - the bouncing dark eco grenade launcher"
  ((played-bounce-time time-frame         :offset-assert 472)
   (tumble-quat        quaternion :inline :offset-assert 480)
   )
  :heap-base #x170
  :method-count-assert 42
  :size-assert         #x1f0
  :flag-assert         #x2a017001f0
  (:methods
    (sitting () _type_ :state 40)
    (noop (_type_) none 41)
    )
  )

;; definition for method 3 of type projectile-bounce
(defmethod inspect projectile-bounce ((obj projectile-bounce))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tplayed-bounce-time: ~D~%" (-> obj played-bounce-time))
  (format #t "~2Ttumble-quat: #<quaternion @ #x~X>~%" (-> obj tumble-quat))
  (label cfg-4)
  obj
  )

;; failed to figure out what this is:
0
