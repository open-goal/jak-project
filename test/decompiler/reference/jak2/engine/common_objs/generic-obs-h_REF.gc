;;-*-Lisp-*-
(in-package goal)

;; definition of type manipy
(deftype manipy (process-drawable)
  ((new-trans-hook       (function none)         :offset-assert 200)
   (cur-trans-hook       (function none)         :offset-assert 204)
   (cur-event-hook       (function none)         :offset-assert 208)
   (new-joint-anim       art-joint-anim          :offset-assert 212)
   (new-joint-anim-blend uint64                  :offset-assert 216)
   (anim-mode            symbol                  :offset-assert 224)
   (cur-grab-handle      handle                  :offset-assert 232)
   (cur-target-handle    handle                  :offset-assert 240)
   (old-grab-pos         vector          :inline :offset-assert 256)
   (joint                joint-mod       4       :offset-assert 272)
   (new-post-hook        (function none)         :offset-assert 288)
   (cur-post-hook        (function none)         :offset-assert 292)
   (clone-copy-trans     symbol                  :offset-assert 296)
   (shadow-backup        basic                   :offset-assert 300)
   (draw?                symbol                  :offset-assert 304)
   (userdata             uint64                  :offset-assert 312)
   (prefix               basic                   :offset-assert 320)
   (shadow-volume-joint  int32                   :offset-assert 324)
   (speed                float                   :offset-assert 328)
   (user-uint64          uint64          4       :offset-assert 336)
   (options              manipy-options          :offset-assert 368)
   )
  :heap-base #x100
  :method-count-assert 21
  :size-assert         #x174
  :flag-assert         #x1501000174
  (:methods
    (manipy-method-20 () none 20)
    )
  )

;; definition for method 3 of type manipy
(defmethod inspect manipy ((obj manipy))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tnew-trans-hook: ~A~%" (-> obj new-trans-hook))
  (format #t "~2Tcur-trans-hook: ~A~%" (-> obj cur-trans-hook))
  (format #t "~2Tcur-event-hook: ~A~%" (-> obj cur-event-hook))
  (format #t "~2Tnew-joint-anim: ~A~%" (-> obj new-joint-anim))
  (format #t "~2Tnew-joint-anim-blend: ~D~%" (-> obj new-joint-anim-blend))
  (format #t "~2Tanim-mode: ~A~%" (-> obj anim-mode))
  (format #t "~2Tcur-grab-handle: ~D~%" (-> obj cur-grab-handle))
  (format #t "~2Tcur-target-handle: ~D~%" (-> obj cur-target-handle))
  (format #t "~2Told-grab-pos: ~`vector`P~%" (-> obj old-grab-pos))
  (format #t "~2Tjoint[4] @ #x~X~%" (-> obj joint))
  (format #t "~2Tnew-post-hook: ~A~%" (-> obj new-post-hook))
  (format #t "~2Tcur-post-hook: ~A~%" (-> obj cur-post-hook))
  (format #t "~2Tclone-copy-trans: ~A~%" (-> obj clone-copy-trans))
  (format #t "~2Tshadow-backup: ~A~%" (-> obj shadow-backup))
  (format #t "~2Tdraw?: ~A~%" (-> obj draw?))
  (format #t "~2Tuserdata: ~A~%" (-> obj userdata))
  (format #t "~2Tprefix: ~A~%" (-> obj prefix))
  (format #t "~2Tshadow-volume-joint: ~D~%" (-> obj shadow-volume-joint))
  (format #t "~2Tspeed: ~f~%" (-> obj speed))
  (format #t "~2Tuser-uint64[4] @ #x~X~%" (-> obj user-uint64))
  (format #t "~2Toptions: ~D~%" (-> obj options))
  (label cfg-4)
  obj
  )

;; definition of type part-spawner
(deftype part-spawner (process)
  ((root         trsqv                                    :offset-assert 128)
   (part         sparticle-launch-control                 :offset-assert 132)
   (sound        ambient-sound                            :offset-assert 136)
   (mode         (pointer sparticle-launch-group)         :offset-assert 140)
   (enable       symbol                                   :offset-assert 144)
   (radius       meters                                   :offset-assert 148)
   (world-sphere sphere                           :inline :offset-assert 160)
   )
  :heap-base #x30
  :method-count-assert 16
  :size-assert         #xb0
  :flag-assert         #x10003000b0
  (:methods
    (part-spawner-method-14 () none 14)
    (part-spawner-method-15 () none 15)
    )
  )

;; definition for method 3 of type part-spawner
(defmethod inspect part-spawner ((obj part-spawner))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 obj)
    )
  (format #t "~2Troot: ~A~%" (-> obj root))
  (format #t "~2Tpart: ~A~%" (-> obj part))
  (format #t "~2Tsound: ~A~%" (-> obj sound))
  (format #t "~2Tmode: #x~X~%" (-> obj mode))
  (format #t "~2Tenable: ~A~%" (-> obj enable))
  (format #t "~2Tradius: (meters ~m)~%" (-> obj radius))
  (format #t "~2Tworld-sphere: #<sphere @ #x~X>~%" (-> obj world-sphere))
  (label cfg-4)
  obj
  )

;; definition of type part-tracker
(deftype part-tracker (process)
  ((root            trsqv                                  :offset-assert 128)
   (mat             matrix                         :inline :offset-assert 144)
   (part            sparticle-launch-control               :offset-assert 208)
   (callback        (function part-tracker vector)         :offset-assert 212)
   (linger-callback (function part-tracker vector)         :offset-assert 216)
   (duration        uint64                                 :offset-assert 224)
   (linger-duration uint64                                 :offset-assert 232)
   (start-time      time-frame                             :offset-assert 240)
   (target          uint64                                 :offset-assert 248)
   (target-joint    int32                                  :offset-assert 256)
   (offset          vector                         :inline :offset-assert 272)
   (userdata        uint64                                 :offset-assert 288)
   (user-time       time-frame                     2       :offset-assert 296)
   (user-vector     vector                         :inline :offset-assert 320)
   (user-handle     uint32                         2       :offset        352)
   )
  :heap-base #xf0
  :method-count-assert 16
  :size-assert         #x168
  :flag-assert         #x1000f00168
  (:methods
    (part-tracker-method-14 () none 14)
    (part-tracker-method-15 () none 15)
    )
  )

;; definition for method 3 of type part-tracker
(defmethod inspect part-tracker ((obj part-tracker))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 obj)
    )
  (format #t "~2Troot: ~A~%" (-> obj root))
  (format #t "~2Tmat: #<matrix @ #x~X>~%" (-> obj mat))
  (format #t "~2Tpart: ~A~%" (-> obj part))
  (format #t "~2Tcallback: ~A~%" (-> obj callback))
  (format #t "~2Tlinger-callback: ~A~%" (-> obj linger-callback))
  (format #t "~2Tduration: ~D~%" (-> obj duration))
  (format #t "~2Tlinger-duration: ~D~%" (-> obj linger-duration))
  (format #t "~2Tstart-time: ~D~%" (-> obj start-time))
  (format #t "~2Ttarget: ~D~%" (-> obj target))
  (format #t "~2Ttarget-joint: ~D~%" (-> obj target-joint))
  (format #t "~2Toffset: ~`vector`P~%" (-> obj offset))
  (format #t "~2Tuserdata: ~A~%" (-> obj userdata))
  (format #t "~2Tuser-time[2] @ #x~X~%" (-> obj user-time))
  (format #t "~2Tuser-vector: ~`vector`P~%" (-> obj user-vector))
  (format #t "~2Tuser-handle[2] @ #x~X~%" (-> obj user-handle))
  (label cfg-4)
  obj
  )

;; definition of type lightning-tracker
(deftype lightning-tracker (process)
  ((root          basic              :offset-assert 128)
   (lightning     basic              :offset-assert 132)
   (callback      basic              :offset-assert 136)
   (duration      uint64             :offset-assert 144)
   (start-time    time-frame         :offset-assert 152)
   (offset0       vector     :inline :offset-assert 160)
   (offset1       vector     :inline :offset-assert 176)
   (target0       uint64             :offset-assert 192)
   (target1       uint64             :offset-assert 200)
   (target-joint0 int32              :offset-assert 208)
   (target-joint1 int32              :offset-assert 212)
   (sound         uint32             :offset-assert 216)
   (userdata      uint64             :offset-assert 224)
   (user-time     time-frame 2       :offset-assert 232)
   (user-vector   vector     :inline :offset-assert 256)
   (user-handle   handle     2       :offset        288)
   )
  :heap-base #xb0
  :method-count-assert 17
  :size-assert         #x130
  :flag-assert         #x1100b00130
  (:methods
    (lightning-tracker-method-14 () none 14)
    (lightning-tracker-method-15 () none 15)
    (lightning-tracker-method-16 () none 16)
    )
  )

;; definition for method 3 of type lightning-tracker
(defmethod inspect lightning-tracker ((obj lightning-tracker))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 obj)
    )
  (format #t "~2Troot: ~A~%" (-> obj root))
  (format #t "~2Tlightning: ~A~%" (-> obj lightning))
  (format #t "~2Tcallback: ~A~%" (-> obj callback))
  (format #t "~2Tduration: ~D~%" (-> obj duration))
  (format #t "~2Tstart-time: ~D~%" (-> obj start-time))
  (format #t "~2Toffset0: ~`vector`P~%" (-> obj offset0))
  (format #t "~2Toffset1: ~`vector`P~%" (-> obj offset1))
  (format #t "~2Ttarget0: ~D~%" (-> obj target0))
  (format #t "~2Ttarget1: ~D~%" (-> obj target1))
  (format #t "~2Ttarget-joint0: ~D~%" (-> obj target-joint0))
  (format #t "~2Ttarget-joint1: ~D~%" (-> obj target-joint1))
  (format #t "~2Tsound: ~D~%" (-> obj sound))
  (format #t "~2Tuserdata: ~A~%" (-> obj userdata))
  (format #t "~2Tuser-time[2] @ #x~X~%" (-> obj user-time))
  (format #t "~2Tuser-vector: ~`vector`P~%" (-> obj user-vector))
  (format #t "~2Tuser-handle[2] @ #x~X~%" (-> obj user-handle))
  (label cfg-4)
  obj
  )

;; definition of type touch-tracker
(deftype touch-tracker (process-drawable)
  ((duration     time-frame                     :offset-assert 200)
   (target       handle                         :offset-assert 208)
   (event        symbol                         :offset-assert 216)
   (run-function (function object)              :offset-assert 220)
   (callback     (function touch-tracker none)  :offset-assert 224)
   (event-mode   basic                          :offset-assert 228)
   )
  :heap-base #x70
  :method-count-assert 21
  :size-assert         #xe8
  :flag-assert         #x15007000e8
  (:methods
    (touch-tracker-method-20 () none 20)
    )
  )

;; definition for method 3 of type touch-tracker
(defmethod inspect touch-tracker ((obj touch-tracker))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tduration: ~D~%" (-> obj duration))
  (format #t "~2Ttarget: ~D~%" (-> obj target))
  (format #t "~2Tevent: ~A~%" (-> obj event))
  (format #t "~2Trun-function: ~A~%" (-> obj run-function))
  (format #t "~2Tcallback: ~A~%" (-> obj callback))
  (format #t "~2Tevent-mode: ~A~%" (-> obj event-mode))
  (label cfg-4)
  obj
  )

;; definition of type swingpole
(deftype swingpole (process-drawable)
  ((edge-length meters             :offset-assert 200)
   (path-pos    float              :offset-assert 204)
   (joint-track int32              :offset-assert 208)
   (speed       meters             :offset-assert 212)
   (dir         vector     :inline :offset-assert 224)
   (sync        sync-eased :inline :offset-assert 240)
   )
  :heap-base #xa0
  :method-count-assert 23
  :size-assert         #x11c
  :flag-assert         #x1700a0011c
  (:methods
    (swingpole-method-20 () none 20)
    (swingpole-method-21 () none 21)
    (swingpole-method-22 () none 22)
    )
  )

;; definition for method 3 of type swingpole
(defmethod inspect swingpole ((obj swingpole))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tedge-length: (meters ~m)~%" (-> obj edge-length))
  (format #t "~2Tpath-pos: ~f~%" (-> obj path-pos))
  (format #t "~2Tjoint-track: ~D~%" (-> obj joint-track))
  (format #t "~2Tspeed: (meters ~m)~%" (-> obj speed))
  (format #t "~2Tdir: ~`vector`P~%" (-> obj dir))
  (format #t "~2Tsync: #<sync-eased @ #x~X>~%" (-> obj sync))
  (label cfg-4)
  obj
  )

;; definition of type gui-query
(deftype gui-query (structure)
  ((x-position        int32   :offset-assert   0)
   (y-position        int32   :offset-assert   4)
   (message           string  :offset-assert   8)
   (decision          symbol  :offset-assert  12)
   (only-allow-cancel symbol  :offset-assert  16)
   (no-msg            string  :offset-assert  20)
   (message-space     int32   :offset-assert  24)
   )
  :method-count-assert 11
  :size-assert         #x1c
  :flag-assert         #xb0000001c
  (:methods
    (gui-query-method-9 () none 9)
    (gui-query-method-10 () none 10)
    )
  )

;; definition for method 3 of type gui-query
(defmethod inspect gui-query ((obj gui-query))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'gui-query)
  (format #t "~1Tx-position: ~D~%" (-> obj x-position))
  (format #t "~1Ty-position: ~D~%" (-> obj y-position))
  (format #t "~1Tmessage: ~A~%" (-> obj message))
  (format #t "~1Tdecision: ~A~%" (-> obj decision))
  (format #t "~1Tonly-allow-cancel: ~A~%" (-> obj only-allow-cancel))
  (format #t "~1Tno-msg: ~A~%" (-> obj no-msg))
  (format #t "~1Tmessage-space: ~D~%" (-> obj message-space))
  (label cfg-4)
  obj
  )

;; definition of type othercam
(deftype othercam (process)
  ((hand              handle               :offset-assert 128)
   (old-global-mask   process-mask         :offset-assert 136)
   (mask-to-clear     process-mask         :offset-assert 140)
   (cam-joint-index   int32                :offset-assert 144)
   (old-pos           vector       :inline :offset-assert 160)
   (old-mat-z         vector       :inline :offset-assert 176)
   (had-valid-frame   basic                :offset-assert 192)
   (border-value      basic                :offset-assert 196)
   (die?              symbol               :offset-assert 200)
   (survive-anim-end? symbol               :offset-assert 204)
   (spooling?         symbol               :offset-assert 208)
   (fov               float                :offset-assert 212)
   )
  :heap-base #x60
  :method-count-assert 14
  :size-assert         #xd8
  :flag-assert         #xe006000d8
  )

;; definition for method 3 of type othercam
(defmethod inspect othercam ((obj othercam))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 obj)
    )
  (format #t "~2Thand: ~D~%" (-> obj hand))
  (format #t "~2Told-global-mask: ~D~%" (-> obj old-global-mask))
  (format #t "~2Tmask-to-clear: ~D~%" (-> obj mask-to-clear))
  (format #t "~2Tcam-joint-index: ~D~%" (-> obj cam-joint-index))
  (format #t "~2Told-pos: #<vector @ #x~X>~%" (-> obj old-pos))
  (format #t "~2Told-mat-z: #<vector @ #x~X>~%" (-> obj old-mat-z))
  (format #t "~2Thad-valid-frame: ~A~%" (-> obj had-valid-frame))
  (format #t "~2Tborder-value: ~A~%" (-> obj border-value))
  (format #t "~2Tdie?: ~A~%" (-> obj die?))
  (format #t "~2Tsurvive-anim-end?: ~A~%" (-> obj survive-anim-end?))
  (format #t "~2Tspooling?: ~A~%" (-> obj spooling?))
  (format #t "~2Tfov: ~f~%" (-> obj fov))
  (label cfg-4)
  obj
  )

;; definition of type explosion
(deftype explosion (process-drawable)
  ((start-time      time-frame  :offset-assert 200)
   (duration        uint32      :offset-assert 208)
   (linger-duration uint32      :offset-assert 212)
   (attack-id       uint32      :offset-assert 216)
   )
  :heap-base #x60
  :method-count-assert 23
  :size-assert         #xdc
  :flag-assert         #x17006000dc
  (:methods
    (explosion-method-20 () none 20)
    (explosion-method-21 () none 21)
    (explosion-method-22 () none 22)
    )
  )

;; definition for method 3 of type explosion
(defmethod inspect explosion ((obj explosion))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tstart-time: ~D~%" (-> obj start-time))
  (format #t "~2Tduration: ~D~%" (-> obj duration))
  (format #t "~2Tlinger-duration: ~D~%" (-> obj linger-duration))
  (format #t "~2Tattack-id: ~D~%" (-> obj attack-id))
  (label cfg-4)
  obj
  )

;; definition of type explosion-init-params
(deftype explosion-init-params (structure)
  ((spawn-point     vector       :inline :offset-assert   0)
   (spawn-quat      quaternion   :inline :offset-assert  16)
   (radius          float                :offset-assert  32)
   (group           basic                :offset-assert  36)
   (collide-with    collide-spec         :offset-assert  40)
   (penetrate-using penetrate            :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x38
  :flag-assert         #x900000038
  )

;; definition for method 3 of type explosion-init-params
(defmethod inspect explosion-init-params ((obj explosion-init-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'explosion-init-params)
  (format #t "~1Tspawn-point: #<vector @ #x~X>~%" (-> obj spawn-point))
  (format #t "~1Tspawn-quat: #<quaternion @ #x~X>~%" (-> obj spawn-quat))
  (format #t "~1Tradius: ~f~%" (-> obj radius))
  (format #t "~1Tgroup: ~A~%" (-> obj group))
  (format #t "~1Tcollide-with: ~D~%" (-> obj collide-with))
  (format #t "~1Tpenetrate-using: ~D~%" (-> obj penetrate-using))
  (label cfg-4)
  obj
  )

;; definition of type process-hidden
(deftype process-hidden (process)
  ()
  :method-count-assert 15
  :size-assert         #x80
  :flag-assert         #xf00000080
  (:methods
    (process-hidden-method-14 () none 14)
    )
  )

;; definition for method 3 of type process-hidden
(defmethod inspect process-hidden ((obj process-hidden))
  (when (not obj)
    (set! obj obj)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tname: ~A~%" (-> obj name))
  (format #t "~1Tmask: #x~X : (process-mask " (-> obj mask))
  (let ((s5-0 (-> obj mask)))
    (if (= (logand s5-0 (process-mask process-tree)) (process-mask process-tree))
        (format #t "process-tree ")
        )
    (if (= (logand s5-0 (process-mask target)) (process-mask target))
        (format #t "target ")
        )
    (if (= (logand (process-mask collectable) s5-0) (process-mask collectable))
        (format #t "attackable ")
        )
    (if (= (logand (process-mask bit18) s5-0) (process-mask bit18))
        (format #t "collectable ")
        )
    (if (= (logand (process-mask projectile) s5-0) (process-mask projectile))
        (format #t "projectile ")
        )
    (if (= (logand (process-mask no-track) s5-0) (process-mask no-track))
        (format #t "no-track ")
        )
    (if (= (logand s5-0 (process-mask sleep-code)) (process-mask sleep-code))
        (format #t "sleep-code ")
        )
    (if (= (logand s5-0 (process-mask actor-pause)) (process-mask actor-pause))
        (format #t "actor-pause ")
        )
    (if (= (logand (process-mask bot) s5-0) (process-mask bot))
        (format #t "bot ")
        )
    (if (= (logand (process-mask vehicle) s5-0) (process-mask vehicle))
        (format #t "vehicle ")
        )
    (if (= (logand (process-mask enemy) s5-0) (process-mask enemy))
        (format #t "enemy ")
        )
    (if (= (logand (process-mask entity) s5-0) (process-mask entity))
        (format #t "entity ")
        )
    (if (= (logand s5-0 (process-mask heap-shrunk)) (process-mask heap-shrunk))
        (format #t "heap-shrunk ")
        )
    (if (= (logand (process-mask sidekick) s5-0) (process-mask sidekick))
        (format #t "sidekick ")
        )
    (if (= (logand s5-0 (process-mask going)) (process-mask going))
        (format #t "going ")
        )
    (if (= (logand s5-0 (process-mask execute)) (process-mask execute))
        (format #t "execute ")
        )
    (if (= (logand (process-mask civilian) s5-0) (shl #x8000 16))
        (format #t "civilian ")
        )
    (if (= (logand (process-mask death) s5-0) (process-mask death))
        (format #t "death ")
        )
    (if (= (logand (process-mask guard) s5-0) (process-mask guard))
        (format #t "guard ")
        )
    (if (= (logand s5-0 (process-mask no-kill)) (process-mask no-kill))
        (format #t "no-kill ")
        )
    (if (= (logand (process-mask platform) s5-0) (process-mask platform))
        (format #t "platform ")
        )
    (if (= (logand s5-0 (process-mask freeze)) (process-mask freeze))
        (format #t "freeze ")
        )
    (if (= (logand s5-0 (process-mask sleep)) (process-mask sleep))
        (format #t "sleep ")
        )
    (if (= (logand s5-0 (process-mask progress)) (process-mask progress))
        (format #t "progress ")
        )
    (if (= (logand s5-0 (process-mask menu)) (process-mask menu))
        (format #t "menu ")
        )
    (if (= (logand (process-mask camera) s5-0) (process-mask camera))
        (format #t "camera ")
        )
    (if (= (logand (process-mask ambient) s5-0) (process-mask ambient))
        (format #t "ambient ")
        )
    (if (= (logand s5-0 (process-mask dark-effect)) (process-mask dark-effect))
        (format #t "dark-effect ")
        )
    (if (= (logand (process-mask crate) s5-0) (process-mask crate))
        (format #t "crate ")
        )
    (if (= (logand s5-0 (process-mask kernel-run)) (process-mask kernel-run))
        (format #t "kernel-run ")
        )
    (if (= (logand s5-0 (process-mask movie)) (process-mask movie))
        (format #t "movie ")
        )
    (if (= (logand s5-0 (process-mask pause)) (process-mask pause))
        (format #t "pause ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tclock: ~A~%" (-> obj clock))
  (format #t "~1Tparent: #x~X~%" (-> obj parent))
  (format #t "~1Tbrother: #x~X~%" (-> obj brother))
  (format #t "~1Tchild: #x~X~%" (-> obj child))
  (format #t "~1Tppointer: #x~X~%" (-> obj ppointer))
  (format #t "~1Tself: ~A~%" (-> obj self))
  (format #t "~1Tpool: ~A~%" (-> obj pool))
  (format #t "~1Tstatus: ~A~%" (-> obj status))
  (format #t "~1Tpid: ~D~%" (-> obj pid))
  (format #t "~1Tmain-thread: ~A~%" (-> obj main-thread))
  (format #t "~1Ttop-thread: ~A~%" (-> obj top-thread))
  (format #t "~1Tentity: ~A~%" (-> obj entity))
  (format #t "~1Tlevel: ~A~%" (-> obj level))
  (format #t "~1Tstate: ~A~%" (-> obj state))
  (format #t "~1Tnext-state: ~A~%" (-> obj next-state))
  (format #t "~1Ttrans-hook: ~A~%" (-> obj trans-hook))
  (format #t "~1Tpost-hook: ~A~%" (-> obj post-hook))
  (format #t "~1Tevent-hook: ~A~%" (-> obj event-hook))
  (format #t "~1Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~1Theap-base: #x~X~%" (-> obj heap-base))
  (format #t "~1Theap-top: #x~X~%" (-> obj heap-top))
  (format #t "~1Theap-cur: #x~X~%" (-> obj heap-cur))
  (format #t "~1Tstack-frame-top: ~A~%" (-> obj stack-frame-top))
  (format #t "~1Theap: #<kheap @ #x~X>~%" (&-> obj heap-base))
  (format #t "~1Tconnection-list: ~`connectable`P~%" (-> obj connection-list))
  (format #t "~1Tstack[0] @ #x~X~%" (-> obj stack))
  (label cfg-68)
  obj
  )

;; failed to figure out what this is:
0




