;;-*-Lisp-*-
(in-package goal)

;; definition of type bigmap-image
(deftype bigmap-image (structure)
  ((clut-offset   uint32)
   (image-offset  uint32)
   (width         uint32)
   (height        uint32)
   (data          uint8  1)
   )
  )

;; definition for method 3 of type bigmap-image
(defmethod inspect ((this bigmap-image))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bigmap-image)
  (format #t "~1Tclut-offset: ~D~%" (-> this clut-offset))
  (format #t "~1Timage-offset: ~D~%" (-> this image-offset))
  (format #t "~1Twidth: ~D~%" (-> this width))
  (format #t "~1Theight: ~D~%" (-> this height))
  (format #t "~1Tdata[1] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type bigmap-info
(deftype bigmap-info (vector)
  ((scale      float  :overlay-at (-> data 2))
   (inv-scale  float  :overlay-at (-> data 3))
   )
  )

;; definition for method 3 of type bigmap-info
;; INFO: Used lq/sq
(defmethod inspect ((this bigmap-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bigmap-info)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this x))
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tz: ~f~%" (-> this z))
  (format #t "~1Tw: ~f~%" (-> this w))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tscale: ~f~%" (-> this z))
  (format #t "~1Tinv-scale: ~f~%" (-> this w))
  (label cfg-4)
  this
  )

;; definition of type bigmap-info-array
(deftype bigmap-info-array (structure)
  ((data  bigmap-info  24 :inline)
   )
  )

;; definition for method 3 of type bigmap-info-array
(defmethod inspect ((this bigmap-info-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bigmap-info-array)
  (format #t "~1Tdata[24] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type bigmap
(deftype bigmap (basic)
  ((drawing-flag         symbol)
   (loading-flag         symbol)
   (bigmap-index         uint32)
   (bigmap-image         external-art-buffer)
   (tpage                external-art-buffer)
   (tpage2               basic)
   (progress-minimap     texture-page)
   (progress-minimap2    texture-page)
   (load-index           uint32)
   (x0                   int32)
   (y0                   int32)
   (x1                   int32)
   (y1                   int32)
   (goal-time            float)
   (sprite-tmpl          dma-gif-packet  :inline)
   (draw-tmpl            dma-gif-packet  :inline)
   (adgif-tmpl           dma-gif-packet  :inline)
   (offset               vector          :inline)
   (size                 float           :overlay-at (-> offset data 2))
   (scale                float           :overlay-at (-> offset data 3))
   (scroll               vector          :inline)
   (pos                  vector4w        :inline)
   (color                vector4w        :inline)
   (corner               vector          4 :inline)
   (auto-save-icon-flag  symbol)
   (global-flags         uint32)
   )
  (:methods
    (new (symbol type) _type_)
    (bigmap-method-9 () none)
    (update (_type_) none)
    (bigmap-method-11 (_type_) symbol)
    (bigmap-method-12 () none)
    (bigmap-method-13 () none)
    (enable-drawing (_type_) none)
    (disable-drawing (_type_) int)
    (bigmap-method-16 (_type_) none)
    (bigmap-method-17 () none)
    (bigmap-method-18 () none)
    (bigmap-method-19 () none)
    (bigmap-method-20 () none)
    (bigmap-method-21 () none)
    (bigmap-method-22 () none)
    )
  )

;; definition for method 3 of type bigmap
(defmethod inspect ((this bigmap))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tdrawing-flag: ~A~%" (-> this drawing-flag))
  (format #t "~1Tloading-flag: ~A~%" (-> this loading-flag))
  (format #t "~1Tbigmap-index: ~D~%" (-> this bigmap-index))
  (format #t "~1Tbigmap-image: ~A~%" (-> this bigmap-image))
  (format #t "~1Ttpage: ~A~%" (-> this tpage))
  (format #t "~1Ttpage2: ~A~%" (-> this tpage2))
  (format #t "~1Tprogress-minimap: ~A~%" (-> this progress-minimap))
  (format #t "~1Tprogress-minimap2: ~A~%" (-> this progress-minimap2))
  (format #t "~1Tload-index: ~D~%" (-> this load-index))
  (format #t "~1Tx0: ~D~%" (-> this x0))
  (format #t "~1Ty0: ~D~%" (-> this y0))
  (format #t "~1Tx1: ~D~%" (-> this x1))
  (format #t "~1Ty1: ~D~%" (-> this y1))
  (format #t "~1Tgoal-time: ~f~%" (-> this goal-time))
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl))
  (format #t "~1Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this draw-tmpl))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Toffset: #<vector @ #x~X>~%" (-> this offset))
  (format #t "~1Tsize: ~f~%" (-> this offset z))
  (format #t "~1Tscale: ~f~%" (-> this offset w))
  (format #t "~1Tscroll: #<vector @ #x~X>~%" (-> this scroll))
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> this pos))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color))
  (format #t "~1Tcorner[4] @ #x~X~%" (-> this corner))
  (format #t "~1Tauto-save-icon-flag: ~A~%" (-> this auto-save-icon-flag))
  (format #t "~1Tglobal-flags: ~D~%" (-> this global-flags))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
