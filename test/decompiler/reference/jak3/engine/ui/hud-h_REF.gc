;;-*-Lisp-*-
(in-package goal)

;; definition of type hud-string
(deftype hud-string (structure)
  ((text   string)
   (scale  float)
   (color  font-color)
   (flags  font-flags)
   (pos    vector4w  :inline)
   )
  :allow-misaligned
  )

;; definition for method 3 of type hud-string
(defmethod inspect ((this hud-string))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hud-string)
  (format #t "~1Ttext: ~A~%" (-> this text))
  (format #t "~1Tscale: ~f~%" (-> this scale))
  (format #t "~1Tcolor: ~D~%" (-> this color))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> this pos))
  (label cfg-4)
  this
  )

;; definition of type hud-sprite
(deftype hud-sprite (structure)
  ((pos        vector4w    :inline)
   (offset-x   float         :overlay-at (-> pos data 0))
   (offset-y   float         :overlay-at (-> pos data 1))
   (color      vector4w    :inline)
   (color-ptr  int32       4 :overlay-at (-> color data 0))
   (flags      hud-sprite-flags)
   (scale-x    float)
   (scale-y    float)
   (angle      float)
   (tex        texture)
   (tid        texture-id    :overlay-at tex)
   )
  (:methods
    (draw (_type_ dma-buffer level symbol) none)
    (hud-sprite-method-10 (_type_ dma-buffer level int int int int) object)
    (hud-sprite-method-11 (_type_ hud-sprite vector4w int int) none)
    )
  )

;; definition for method 3 of type hud-sprite
(defmethod inspect ((this hud-sprite))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hud-sprite)
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> this pos))
  (format #t "~1Toffset-x: ~f~%" (-> this offset-x))
  (format #t "~1Toffset-y: ~f~%" (-> this offset-y))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color-ptr))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tscale-x: ~f~%" (-> this scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> this scale-y))
  (format #t "~1Tangle: ~f~%" (-> this angle))
  (format #t "~1Ttex: ~A~%" (-> this tid))
  (format #t "~1Ttid: ~D~%" (-> this tid))
  (label cfg-4)
  this
  )

;; definition of type hud-box
(deftype hud-box (structure)
  ((box    bounding-box2  :inline)
   (min    vector2        :inline :overlay-at (-> box min))
   (max    vector2        :inline :overlay-at (-> box max))
   (color  vector4w       :inline)
   )
  (:methods
    (draw-box-prim-only (_type_ dma-buffer) none)
    (draw-box-alpha-1 (_type_ dma-buffer) none)
    (draw-box-alpha-2 (_type_ dma-buffer) none)
    (draw-box-alpha-3 (_type_ dma-buffer) none)
    (draw-scan-and-line (_type_ dma-buffer float) int)
    )
  )

;; definition for method 3 of type hud-box
(defmethod inspect ((this hud-box))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hud-box)
  (format #t "~1Tbox: #<bounding-box2 @ #x~X>~%" (-> this box))
  (format #t "~1Tmin: #<vector2 @ #x~X>~%" (-> this box))
  (format #t "~1Tmax: #<vector2 @ #x~X>~%" (-> this box max))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color))
  (label cfg-4)
  this
  )

;; definition of type hud-icon
(deftype hud-icon (structure)
  ((icon     (pointer manipy))
   (pos      vector4w  :inline)
   (scale-x  float)
   (scale-y  float)
   )
  :allow-misaligned
  )

;; definition for method 3 of type hud-icon
(defmethod inspect ((this hud-icon))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hud-icon)
  (format #t "~1Ticon: #x~X~%" (-> this icon))
  (format #t "~1Tpos: #<vector4w @ #x~X>~%" (-> this pos))
  (format #t "~1Tscale-x: ~f~%" (-> this scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> this scale-y))
  (label cfg-4)
  this
  )

;; definition of type hud-value
(deftype hud-value (structure)
  ((current   int32)
   (target    int32)
   (flags     uint16)
   (inc-unit  uint16)
   (inc-time  uint16)
   (counter   uint16)
   )
  :allow-misaligned
  )

;; definition for method 3 of type hud-value
(defmethod inspect ((this hud-value))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hud-value)
  (format #t "~1Tcurrent: ~D~%" (-> this current))
  (format #t "~1Ttarget: ~D~%" (-> this target))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tinc-unit: ~D~%" (-> this inc-unit))
  (format #t "~1Tinc-time: ~D~%" (-> this inc-time))
  (format #t "~1Tcounter: ~D~%" (-> this counter))
  (label cfg-4)
  this
  )

;; definition of type hud
(deftype hud (process)
  ((trigger-time    time-frame)
   (last-hide-time  time-frame)
   (offset          float)
   (flags           hud-flags)
   (values          hud-value   8 :inline)
   (strings         hud-string  14 :inline)
   (sprites         hud-sprite  30 :inline)
   (icons           hud-icon    2 :inline)
   (gui-id          sound-id)
   )
  (:methods
    (hidden? (_type_) object)
    (draw (_type_) none)
    (update-values! (_type_) none)
    (init-callback (_type_) none)
    (event-callback (_type_ process int symbol event-message-block) object)
    (hud-method-19 (_type_) none)
    (hud-method-20 (_type_) none)
    (hud-method-21 (_type_) none)
    (hud-method-22 (_type_) none)
    (hud-method-23 (_type_) none)
    (check-ready-and-maybe-show (_type_ symbol) symbol)
    (update-value-callback (_type_ int int) none)
    (alloc-string-if-needed (_type_ int) none)
    )
  (:states
    hud-arriving
    hud-hidden
    hud-in
    (hud-leaving float)
    )
  )

;; definition for method 3 of type hud
(defmethod inspect ((this hud))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttrigger-time: ~D~%" (-> this trigger-time))
  (format #t "~2Tlast-hide-time: ~D~%" (-> this last-hide-time))
  (format #t "~2Toffset: ~f~%" (-> this offset))
  (format #t "~2Tflags: ~D~%" (-> this flags))
  (format #t "~2Tvalues[8] @ #x~X~%" (-> this values))
  (format #t "~2Tstrings[14] @ #x~X~%" (-> this strings))
  (format #t "~2Tsprites[30] @ #x~X~%" (-> this sprites))
  (format #t "~2Ticons[2] @ #x~X~%" (-> this icons))
  (format #t "~2Tgui-id: ~D~%" (-> this gui-id))
  (label cfg-4)
  this
  )

;; definition of type hud-ashelin
(deftype hud-ashelin (hud)
  ()
  )

;; definition for method 3 of type hud-ashelin
(defmethod inspect ((this hud-ashelin))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-cargo
(deftype hud-cargo (hud)
  ()
  )

;; definition for method 3 of type hud-cargo
(defmethod inspect ((this hud-cargo))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-citizen
(deftype hud-citizen (hud)
  ()
  )

;; definition for method 3 of type hud-citizen
(defmethod inspect ((this hud-citizen))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-cpanel
(deftype hud-cpanel (hud)
  ()
  )

;; definition for method 3 of type hud-cpanel
(defmethod inspect ((this hud-cpanel))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-dig-clasp
(deftype hud-dig-clasp (hud)
  ()
  )

;; definition for method 3 of type hud-dig-clasp
(defmethod inspect ((this hud-dig-clasp))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-gun
(deftype hud-gun (hud)
  ()
  )

;; definition for method 3 of type hud-gun
(defmethod inspect ((this hud-gun))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-health
(deftype hud-health (hud)
  ()
  )

;; definition for method 3 of type hud-health
(defmethod inspect ((this hud-health))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-helldog
(deftype hud-helldog (hud)
  ()
  )

;; definition for method 3 of type hud-helldog
(defmethod inspect ((this hud-helldog))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-lurker
(deftype hud-lurker (hud)
  ()
  )

;; definition for method 3 of type hud-lurker
(defmethod inspect ((this hud-lurker))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-map
(deftype hud-map (hud)
  ()
  )

;; definition for method 3 of type hud-map
(defmethod inspect ((this hud-map))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-moneybag
(deftype hud-moneybag (hud)
  ()
  )

;; definition for method 3 of type hud-moneybag
(defmethod inspect ((this hud-moneybag))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-plasmite
(deftype hud-plasmite (hud)
  ()
  )

;; definition for method 3 of type hud-plasmite
(defmethod inspect ((this hud-plasmite))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-dig-button
(deftype hud-dig-button (hud)
  ()
  )

;; definition for method 3 of type hud-dig-button
(defmethod inspect ((this hud-dig-button))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-predator
(deftype hud-predator (hud)
  ()
  )

;; definition for method 3 of type hud-predator
(defmethod inspect ((this hud-predator))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-heatmeter
(deftype hud-heatmeter (hud)
  ()
  )

;; definition for method 3 of type hud-heatmeter
(defmethod inspect ((this hud-heatmeter))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-nest-cocoons
(deftype hud-nest-cocoons (hud)
  ()
  )

;; definition for method 3 of type hud-nest-cocoons
(defmethod inspect ((this hud-nest-cocoons))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-neo-spawners
(deftype hud-neo-spawners (hud)
  ()
  )

;; definition for method 3 of type hud-neo-spawners
(defmethod inspect ((this hud-neo-spawners))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-desert-lizards
(deftype hud-desert-lizards (hud)
  ()
  )

;; definition for method 3 of type hud-desert-lizards
(defmethod inspect ((this hud-desert-lizards))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-fac-manager
(deftype hud-fac-manager (hud)
  ()
  )

;; definition for method 3 of type hud-fac-manager
(defmethod inspect ((this hud-fac-manager))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-progress
(deftype hud-progress (hud)
  ()
  )

;; definition for method 3 of type hud-progress
(defmethod inspect ((this hud-progress))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-rocketsensor
(deftype hud-rocketsensor (hud)
  ()
  )

;; definition for method 3 of type hud-rocketsensor
(defmethod inspect ((this hud-rocketsensor))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-ruffians
(deftype hud-ruffians (hud)
  ()
  )

;; definition for method 3 of type hud-ruffians
(defmethod inspect ((this hud-ruffians))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-score
(deftype hud-score (hud)
  ()
  )

;; definition for method 3 of type hud-score
(defmethod inspect ((this hud-score))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-sig
(deftype hud-sig (hud)
  ()
  )

;; definition for method 3 of type hud-sig
(defmethod inspect ((this hud-sig))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-skill
(deftype hud-skill (hud)
  ()
  )

;; definition for method 3 of type hud-skill
(defmethod inspect ((this hud-skill))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-skullgem
(deftype hud-skullgem (hud)
  ()
  )

;; definition for method 3 of type hud-skullgem
(defmethod inspect ((this hud-skullgem))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-timer
(deftype hud-timer (hud)
  ()
  )

;; definition for method 3 of type hud-timer
(defmethod inspect ((this hud-timer))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-turret
(deftype hud-turret (hud)
  ()
  )

;; definition for method 3 of type hud-turret
(defmethod inspect ((this hud-turret))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-for-turret-health
(deftype hud-for-turret-health (hud)
  ((aim-vector-source  vector  :inline)
   (aim-vector         vector  :inline)
   (fade-interp        float)
   )
  )

;; definition for method 3 of type hud-for-turret-health
(defmethod inspect ((this hud-for-turret-health))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-squid
(deftype hud-squid (hud)
  ()
  )

;; definition for method 3 of type hud-squid
(defmethod inspect ((this hud-squid))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-gunturret
(deftype hud-gunturret (hud)
  ()
  )

;; definition for method 3 of type hud-gunturret
(defmethod inspect ((this hud-gunturret))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-gruntegg
(deftype hud-gruntegg (hud)
  ()
  )

;; definition for method 3 of type hud-gruntegg
(defmethod inspect ((this hud-gruntegg))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-crimsonhover
(deftype hud-crimsonhover (hud)
  ()
  )

;; definition for method 3 of type hud-crimsonhover
(defmethod inspect ((this hud-crimsonhover))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-metalkor
(deftype hud-metalkor (hud)
  ()
  )

;; definition for method 3 of type hud-metalkor
(defmethod inspect ((this hud-metalkor))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-big-score
(deftype hud-big-score (hud)
  ()
  )

;; definition for method 3 of type hud-big-score
(defmethod inspect ((this hud-big-score))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-goal
(deftype hud-goal (hud)
  ()
  )

;; definition for method 3 of type hud-goal
(defmethod inspect ((this hud-goal))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-miss
(deftype hud-miss (hud)
  ()
  )

;; definition for method 3 of type hud-miss
(defmethod inspect ((this hud-miss))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-samos-old
(deftype hud-samos-old (hud)
  ()
  )

;; definition for method 3 of type hud-samos-old
(defmethod inspect ((this hud-samos-old))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-lurker-button
(deftype hud-lurker-button (hud)
  ()
  )

;; definition for method 3 of type hud-lurker-button
(defmethod inspect ((this hud-lurker-button))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-widow
(deftype hud-widow (hud)
  ()
  )

;; definition for method 3 of type hud-widow
(defmethod inspect ((this hud-widow))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-race-final-stats
(deftype hud-race-final-stats (hud)
  ()
  )

;; definition for method 3 of type hud-race-final-stats
(defmethod inspect ((this hud-race-final-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-mech-air-tank
(deftype hud-mech-air-tank (hud)
  ()
  )

;; definition for method 3 of type hud-mech-air-tank
(defmethod inspect ((this hud-mech-air-tank))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-homing-beacon
(deftype hud-homing-beacon (hud)
  ()
  )

;; definition for method 3 of type hud-homing-beacon
(defmethod inspect ((this hud-homing-beacon))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-dark-eco-pickup
(deftype hud-dark-eco-pickup (hud)
  ()
  )

;; definition for method 3 of type hud-dark-eco-pickup
(defmethod inspect ((this hud-dark-eco-pickup))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-green-eco-pickup
(deftype hud-green-eco-pickup (hud)
  ()
  )

;; definition for method 3 of type hud-green-eco-pickup
(defmethod inspect ((this hud-green-eco-pickup))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-mh-centipede
(deftype hud-mh-centipede (hud)
  ()
  )

;; definition for method 3 of type hud-mh-centipede
(defmethod inspect ((this hud-mh-centipede))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-arena-tokens
(deftype hud-arena-tokens (hud)
  ()
  )

;; definition for method 3 of type hud-arena-tokens
(defmethod inspect ((this hud-arena-tokens))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-kanga-lizard
(deftype hud-kanga-lizard (hud)
  ()
  )

;; definition for method 3 of type hud-kanga-lizard
(defmethod inspect ((this hud-kanga-lizard))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-marauder
(deftype hud-marauder (hud)
  ()
  )

;; definition for method 3 of type hud-marauder
(defmethod inspect ((this hud-marauder))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-prebot
(deftype hud-prebot (hud)
  ()
  )

;; definition for method 3 of type hud-prebot
(defmethod inspect ((this hud-prebot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-glider-altitude
(deftype hud-glider-altitude (hud)
  ()
  )

;; definition for method 3 of type hud-glider-altitude
(defmethod inspect ((this hud-glider-altitude))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
