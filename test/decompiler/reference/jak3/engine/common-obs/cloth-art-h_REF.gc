;;-*-Lisp-*-
(in-package goal)

;; definition of type cloth-pt
(deftype cloth-pt (structure)
  ((pt  vector  :inline)
   (u   float)
   (v   float)
   )
  )

;; definition for method 3 of type cloth-pt
(defmethod inspect ((this cloth-pt))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'cloth-pt)
  (format #t "~1Tpt: #<vector @ #x~X>~%" (-> this pt))
  (format #t "~1Tu: ~f~%" (-> this u))
  (format #t "~1Tv: ~f~%" (-> this v))
  (label cfg-4)
  this
  )

;; definition of type anchor-transform
(deftype anchor-transform (structure)
  ((offset            vector  :inline)
   (joint-name        string)
   (joint             int16)
   (constraint-index  int16)
   )
  )

;; definition for method 3 of type anchor-transform
(defmethod inspect ((this anchor-transform))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'anchor-transform)
  (format #t "~1Toffset: #<vector @ #x~X>~%" (-> this offset))
  (format #t "~1Tjoint-name: ~A~%" (-> this joint-name))
  (format #t "~1Tjoint: ~D~%" (-> this joint))
  (format #t "~1Tconstraint-index: ~D~%" (-> this constraint-index))
  (label cfg-4)
  this
  )

;; definition of type sphere-transform
(deftype sphere-transform (structure)
  ((offset      vector  :inline)
   (joint-name  string)
   (radius      float)
   (joint       int16)
   )
  )

;; definition for method 3 of type sphere-transform
(defmethod inspect ((this sphere-transform))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sphere-transform)
  (format #t "~1Toffset: #<vector @ #x~X>~%" (-> this offset))
  (format #t "~1Tjoint-name: ~A~%" (-> this joint-name))
  (format #t "~1Tradius: ~f~%" (-> this radius))
  (format #t "~1Tjoint: ~D~%" (-> this joint))
  (label cfg-4)
  this
  )

;; definition of type disc-transform
(deftype disc-transform (structure)
  ((offset                vector  :inline)
   (normal                vector  :inline)
   (joint-name            basic)
   (radius                float)
   (joint                 int16)
   (start-particle-index  int16)
   (end-particle-index    int16)
   )
  )

;; definition for method 3 of type disc-transform
(defmethod inspect ((this disc-transform))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'disc-transform)
  (format #t "~1Toffset: #<vector @ #x~X>~%" (-> this offset))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (format #t "~1Tjoint-name: ~A~%" (-> this joint-name))
  (format #t "~1Tradius: ~f~%" (-> this radius))
  (format #t "~1Tjoint: ~D~%" (-> this joint))
  (format #t "~1Tstart-particle-index: ~D~%" (-> this start-particle-index))
  (format #t "~1Tend-particle-index: ~D~%" (-> this end-particle-index))
  (label cfg-4)
  this
  )

;; definition of type anchor-transform-array
(deftype anchor-transform-array (inline-array-class)
  ((data  anchor-transform  :inline :dynamic)
   )
  )

;; definition for method 3 of type anchor-transform-array
(defmethod inspect ((this anchor-transform-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> anchor-transform-array heap-base) (the-as uint 32))

;; definition of type sphere-transform-array
(deftype sphere-transform-array (inline-array-class)
  ((data  sphere-transform  :inline :dynamic)
   )
  )

;; definition for method 3 of type sphere-transform-array
(defmethod inspect ((this sphere-transform-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> sphere-transform-array heap-base) (the-as uint 32))

;; definition of type disc-transform-array
(deftype disc-transform-array (inline-array-class)
  ((data  disc-transform  :inline :dynamic)
   )
  )

;; definition for method 3 of type disc-transform-array
(defmethod inspect ((this disc-transform-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> disc-transform-array heap-base) (the-as uint 48))

;; definition of type cloth-thickness-array
(deftype cloth-thickness-array (inline-array-class)
  ((data  uint8  :dynamic)
   )
  )

;; definition for method 3 of type cloth-thickness-array
(defmethod inspect ((this cloth-thickness-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> cloth-thickness-array heap-base) (the-as uint 1))

;; definition of type cloth-params
(deftype cloth-params (structure)
  ((mesh                    int16)
   (gravity-constant        meters)
   (wind-constant           float)
   (cloth-width             uint16)
   (num-sphere-constraints  uint16)
   (num-disc-constraints    uint16)
   (num-anchor-points       uint16)
   (flags                   cloth-flag)
   (tex-name                string)
   (tex-name2               string)
   (tex-name3               string)
   (alt-tex-name            string)
   (alt-tex-name2           string)
   (alt-tex-name3           string)
   (cloth-thickness         float)
   (initial-xform           int16)
   (drag                    float)
   (ball-collision-radius   meters)
   (num-iterations          int8)
   (timestep-frequency      int8)
   (secret-disable          game-secrets)
   )
  )

;; definition for method 3 of type cloth-params
(defmethod inspect ((this cloth-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'cloth-params)
  (format #t "~1Tmesh: ~D~%" (-> this mesh))
  (format #t "~1Tgravity-constant: ~f~%" (-> this gravity-constant))
  (format #t "~1Twind-constant: ~f~%" (-> this wind-constant))
  (format #t "~1Tcloth-width: ~D~%" (-> this cloth-width))
  (format #t "~1Tnum-sphere-constraints: ~D~%" (-> this num-sphere-constraints))
  (format #t "~1Tnum-disc-constraints: ~D~%" (-> this num-disc-constraints))
  (format #t "~1Tnum-anchor-points: ~D~%" (-> this num-anchor-points))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttex-name: ~A~%" (-> this tex-name))
  (format #t "~1Ttex-name2: ~A~%" (-> this tex-name2))
  (format #t "~1Ttex-name3: ~A~%" (-> this tex-name3))
  (format #t "~1Talt-tex-name: ~A~%" (-> this alt-tex-name))
  (format #t "~1Talt-tex-name2: ~A~%" (-> this alt-tex-name2))
  (format #t "~1Talt-tex-name3: ~A~%" (-> this alt-tex-name3))
  (format #t "~1Tcloth-thickness: ~f~%" (-> this cloth-thickness))
  (format #t "~1Tinitial-xform: ~D~%" (-> this initial-xform))
  (format #t "~1Tdrag: ~f~%" (-> this drag))
  (format #t "~1Tball-collision-radius: ~f~%" (-> this ball-collision-radius))
  (format #t "~1Tnum-iterations: ~D~%" (-> this num-iterations))
  (format #t "~1Ttimestep-frequency: ~D~%" (-> this timestep-frequency))
  (format #t "~1Tsecret-disable: ~D~%" (-> this secret-disable))
  (label cfg-4)
  this
  )

;; definition of type cloth-base
(deftype cloth-base (basic)
  ()
  (:methods
    (init! (_type_) int)
    (cloth-base-method-10 (_type_ cloth-params handle) int)
    )
  )

;; definition for method 3 of type cloth-base
(defmethod inspect ((this cloth-base))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




