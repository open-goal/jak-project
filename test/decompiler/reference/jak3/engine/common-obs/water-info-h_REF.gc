;;-*-Lisp-*-
(in-package goal)

;; definition of type water-info
(deftype water-info (structure)
  ((trans        vector  :inline)
   (normal       vector  :inline)
   (base-height  meters)
   (depth        meters)
   (handle       handle)
   (flags        water-flag)
   (prim         drawable-region-prim)
   (extra-flags  uint32)
   )
  )

;; definition for method 3 of type water-info
(defmethod inspect ((this water-info))
  (when (not this)
    (set! this this)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" this 'water-info)
  (format #t "~1Ttrans: ~`vector`P~%" (-> this trans))
  (format #t "~1Tnormal: ~`vector`P~%" (-> this normal))
  (format #t "~1Tbase-height: (meters ~m)~%" (-> this base-height))
  (format #t "~1Tdepth: (meters ~m)~%" (-> this depth))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tflags: #x~X : (water-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (water-flag active)) (water-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (water-flag deadly)) (water-flag deadly))
        (format #t "deadly ")
        )
    (if (= (logand (water-flag touch-water-good) s5-0) (shl #x8000 16))
        (format #t "touch-water-good ")
        )
    (if (= (logand s5-0 (water-flag lava)) (water-flag lava))
        (format #t "lava ")
        )
    (if (= (logand (water-flag jump-out) s5-0) (water-flag jump-out))
        (format #t "jump-out ")
        )
    (if (= (logand (water-flag head-under-water) s5-0) (water-flag head-under-water))
        (format #t "head-under-water ")
        )
    (if (= (logand s5-0 (water-flag under-water)) (water-flag under-water))
        (format #t "under-water ")
        )
    (if (= (logand s5-0 (water-flag swamp)) (water-flag swamp))
        (format #t "swamp ")
        )
    (if (= (logand s5-0 (water-flag dark-eco)) (water-flag dark-eco))
        (format #t "dark-eco ")
        )
    (if (= (logand (water-flag part-water) s5-0) (water-flag part-water))
        (format #t "part-water ")
        )
    (if (= (logand (water-flag break-surface) s5-0) (water-flag break-surface))
        (format #t "break-surface ")
        )
    (if (= (logand (water-flag over-water) s5-0) (water-flag over-water))
        (format #t "over-water ")
        )
    (if (= (logand s5-0 (water-flag use-ocean)) (water-flag use-ocean))
        (format #t "use-ocean ")
        )
    (if (= (logand s5-0 (water-flag flow)) (water-flag flow))
        (format #t "flow ")
        )
    (if (= (logand (water-flag wading) s5-0) (water-flag wading))
        (format #t "wading ")
        )
    (if (= (logand (water-flag part-rings) s5-0) (water-flag part-rings))
        (format #t "part-rings ")
        )
    (if (= (logand (water-flag part-drip) s5-0) (water-flag part-drip))
        (format #t "part-drip ")
        )
    (if (= (logand (water-flag part-splash) s5-0) (water-flag part-splash))
        (format #t "part-splash ")
        )
    (if (= (logand s5-0 (water-flag swim-ground)) (water-flag swim-ground))
        (format #t "swim-ground ")
        )
    (if (= (logand s5-0 (water-flag tar)) (water-flag tar))
        (format #t "tar ")
        )
    (if (= (logand (water-flag swimming) s5-0) (water-flag swimming))
        (format #t "swimming ")
        )
    (if (= (logand s5-0 (water-flag mud)) (water-flag mud))
        (format #t "mud ")
        )
    (if (= (logand (water-flag event) s5-0) (water-flag event))
        (format #t "event ")
        )
    (if (= (logand (water-flag bouncing) s5-0) (water-flag bouncing))
        (format #t "bouncing ")
        )
    (if (= (logand s5-0 (water-flag use-water-anim)) (water-flag use-water-anim))
        (format #t "use-water-anim ")
        )
    (if (= (logand (water-flag spawn-drip) s5-0) (water-flag spawn-drip))
        (format #t "spawn-drip ")
        )
    (if (= (logand s5-0 (water-flag can-swim)) (water-flag can-swim))
        (format #t "can-swim ")
        )
    (if (= (logand (water-flag touch-water) s5-0) (water-flag touch-water))
        (format #t "touch-water ")
        )
    (if (= (logand s5-0 (water-flag no-grab-sound)) (water-flag no-grab-sound))
        (format #t "no-grab-ground ")
        )
    (if (= (logand s5-0 (water-flag can-wade)) (water-flag can-wade))
        (format #t "can-wade ")
        )
    (if (= (logand (water-flag find-water) s5-0) (water-flag find-water))
        (format #t "find-water ")
        )
    (if (= (logand s5-0 (water-flag can-ground)) (water-flag can-ground))
        (format #t "can-ground ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tprim: ~A~%" (-> this prim))
  (format #t "~1Textra-flags: ~D~%" (-> this extra-flags))
  (label cfg-68)
  this
  )

;; definition of type water-sphere
(deftype water-sphere (structure)
  ((sphere  sphere  :inline)
   (flags   water-flag)
   (user0   int32)
   )
  )

;; definition for method 3 of type water-sphere
(defmethod inspect ((this water-sphere))
  (when (not this)
    (set! this this)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" this 'water-sphere)
  (format #t "~1Tsphere: #<sphere @ #x~X>~%" (-> this sphere))
  (format #t "~1Tflags: #x~X : (water-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (water-flag active)) (water-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (water-flag deadly)) (water-flag deadly))
        (format #t "deadly ")
        )
    (if (= (logand (water-flag touch-water-good) s5-0) (shl #x8000 16))
        (format #t "touch-water-good ")
        )
    (if (= (logand s5-0 (water-flag lava)) (water-flag lava))
        (format #t "lava ")
        )
    (if (= (logand (water-flag jump-out) s5-0) (water-flag jump-out))
        (format #t "jump-out ")
        )
    (if (= (logand (water-flag head-under-water) s5-0) (water-flag head-under-water))
        (format #t "head-under-water ")
        )
    (if (= (logand s5-0 (water-flag under-water)) (water-flag under-water))
        (format #t "under-water ")
        )
    (if (= (logand s5-0 (water-flag swamp)) (water-flag swamp))
        (format #t "swamp ")
        )
    (if (= (logand s5-0 (water-flag dark-eco)) (water-flag dark-eco))
        (format #t "dark-eco ")
        )
    (if (= (logand (water-flag part-water) s5-0) (water-flag part-water))
        (format #t "part-water ")
        )
    (if (= (logand (water-flag break-surface) s5-0) (water-flag break-surface))
        (format #t "break-surface ")
        )
    (if (= (logand (water-flag over-water) s5-0) (water-flag over-water))
        (format #t "over-water ")
        )
    (if (= (logand s5-0 (water-flag use-ocean)) (water-flag use-ocean))
        (format #t "use-ocean ")
        )
    (if (= (logand s5-0 (water-flag flow)) (water-flag flow))
        (format #t "flow ")
        )
    (if (= (logand (water-flag wading) s5-0) (water-flag wading))
        (format #t "wading ")
        )
    (if (= (logand (water-flag part-rings) s5-0) (water-flag part-rings))
        (format #t "part-rings ")
        )
    (if (= (logand (water-flag part-drip) s5-0) (water-flag part-drip))
        (format #t "part-drip ")
        )
    (if (= (logand (water-flag part-splash) s5-0) (water-flag part-splash))
        (format #t "part-splash ")
        )
    (if (= (logand s5-0 (water-flag swim-ground)) (water-flag swim-ground))
        (format #t "swim-ground ")
        )
    (if (= (logand s5-0 (water-flag tar)) (water-flag tar))
        (format #t "tar ")
        )
    (if (= (logand (water-flag swimming) s5-0) (water-flag swimming))
        (format #t "swimming ")
        )
    (if (= (logand s5-0 (water-flag mud)) (water-flag mud))
        (format #t "mud ")
        )
    (if (= (logand (water-flag event) s5-0) (water-flag event))
        (format #t "event ")
        )
    (if (= (logand (water-flag bouncing) s5-0) (water-flag bouncing))
        (format #t "bouncing ")
        )
    (if (= (logand s5-0 (water-flag use-water-anim)) (water-flag use-water-anim))
        (format #t "use-water-anim ")
        )
    (if (= (logand (water-flag spawn-drip) s5-0) (water-flag spawn-drip))
        (format #t "spawn-drip ")
        )
    (if (= (logand s5-0 (water-flag can-swim)) (water-flag can-swim))
        (format #t "can-swim ")
        )
    (if (= (logand (water-flag touch-water) s5-0) (water-flag touch-water))
        (format #t "touch-water ")
        )
    (if (= (logand s5-0 (water-flag no-grab-sound)) (water-flag no-grab-sound))
        (format #t "no-grab-ground ")
        )
    (if (= (logand s5-0 (water-flag can-wade)) (water-flag can-wade))
        (format #t "can-wade ")
        )
    (if (= (logand (water-flag find-water) s5-0) (water-flag find-water))
        (format #t "find-water ")
        )
    (if (= (logand s5-0 (water-flag can-ground)) (water-flag can-ground))
        (format #t "can-ground ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tuser0: ~D~%" (-> this user0))
  (label cfg-68)
  this
  )

;; failed to figure out what this is:
0




