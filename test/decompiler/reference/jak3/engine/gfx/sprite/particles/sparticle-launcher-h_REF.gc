;;-*-Lisp-*-
(in-package goal)

;; definition of type sparticle-birthinfo
(deftype sparticle-birthinfo (structure)
  "Used internally by the sparticle code."
  ((sprite        uint32)
   (anim          int32)
   (anim-speed    float)
   (birth-func    basic)
   (joint-ppoint  int32)
   (num-to-birth  float)
   (sound         basic)
   (dataf         float   1 :overlay-at sprite)
   (data          uint32  1 :overlay-at sprite)
   )
  )

;; definition for method 3 of type sparticle-birthinfo
(defmethod inspect ((this sparticle-birthinfo))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sparticle-birthinfo)
  (format #t "~1Tsprite: ~D~%" (-> this sprite))
  (format #t "~1Tanim: ~D~%" (-> this anim))
  (format #t "~1Tanim-speed: ~f~%" (-> this anim-speed))
  (format #t "~1Tbirth-func: ~A~%" (-> this birth-func))
  (format #t "~1Tjoint-ppoint: ~D~%" (-> this joint-ppoint))
  (format #t "~1Tnum-to-birth: ~f~%" (-> this num-to-birth))
  (format #t "~1Tsound: ~A~%" (-> this sound))
  (format #t "~1Tdataf[1] @ #x~X~%" (&-> this sprite))
  (format #t "~1Tdata[1] @ #x~X~%" (&-> this sprite))
  (label cfg-4)
  this
  )

;; definition of type sp-field-init-spec
(deftype sp-field-init-spec (structure)
  "Part of a particle definition - how to initialize a field of a particle."
  ((field           sp-field-id)
   (flags           sp-flag)
   (initial-valuef  float)
   (random-rangef   float)
   (random-multf    float)
   (initial-value   int32       :overlay-at initial-valuef)
   (random-range    int32       :overlay-at random-rangef)
   (random-mult     int32       :overlay-at random-multf)
   (func            symbol      :overlay-at initial-valuef)
   (tex             texture-id  :overlay-at initial-valuef)
   (pntr            pointer     :overlay-at initial-valuef)
   (object          basic       :overlay-at initial-valuef)
   (sym             symbol      :overlay-at initial-valuef)
   (sound           sound-spec  :overlay-at initial-valuef)
   )
  :allow-misaligned
  )

;; definition for method 3 of type sp-field-init-spec
(defmethod inspect ((this sp-field-init-spec))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sp-field-init-spec)
  (format #t "~1Tfield: ~D~%" (-> this field))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tinitial-valuef: ~f~%" (-> this initial-valuef))
  (format #t "~1Trandom-rangef: ~f~%" (-> this random-rangef))
  (format #t "~1Trandom-multf: ~f~%" (-> this random-multf))
  (format #t "~1Tinitial-value: ~D~%" (-> this initial-valuef))
  (format #t "~1Trandom-range: ~D~%" (-> this random-rangef))
  (format #t "~1Trandom-mult: ~D~%" (-> this random-multf))
  (format #t "~1Tfunc: ~A~%" (-> this initial-valuef))
  (format #t "~1Ttex: ~D~%" (-> this initial-valuef))
  (format #t "~1Tpntr: #x~X~%" (-> this initial-valuef))
  (format #t "~1Tobject: ~A~%" (-> this initial-valuef))
  (format #t "~1Tsym: ~A~%" (-> this initial-valuef))
  (format #t "~1Tsound: ~A~%" (-> this initial-valuef))
  (label cfg-4)
  this
  )

;; definition of type sparticle-launcher
(deftype sparticle-launcher (basic)
  "A definition of a single particle, as a list of init specs."
  ((birthaccum  float)
   (soundaccum  float)
   (init-specs  (inline-array sp-field-init-spec))
   )
  (:methods
    (get-field-spec-by-id (_type_ sp-field-id) sp-field-init-spec)
    (setup-special-textures (_type_ string) none)
    )
  )

;; definition for method 3 of type sparticle-launcher
(defmethod inspect ((this sparticle-launcher))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tbirthaccum: ~f~%" (-> this birthaccum))
  (format #t "~1Tsoundaccum: ~f~%" (-> this soundaccum))
  (format #t "~1Tinit-specs: #x~X~%" (-> this init-specs))
  (label cfg-4)
  this
  )

;; definition of type sparticle-group-item
(deftype sparticle-group-item (structure)
  "A reference to a single sparticle-launcher (by ID) and some parameters for using it."
  ((launcher    uint32)
   (fade-after  meters)
   (falloff-to  meters)
   (flags       sp-group-item-flag)
   (period      uint16)
   (length      uint16)
   (offset      int16)
   (hour-mask   uint32)
   (binding     uint32)
   )
  )

;; definition for method 3 of type sparticle-group-item
(defmethod inspect ((this sparticle-group-item))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sparticle-group-item)
  (format #t "~1Tlauncher: ~D~%" (-> this launcher))
  (format #t "~1Tfade-after: (meters ~m)~%" (-> this fade-after))
  (format #t "~1Tfalloff-to: (meters ~m)~%" (-> this falloff-to))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Toffset: ~D~%" (-> this offset))
  (format #t "~1Thour-mask: ~D~%" (-> this hour-mask))
  (format #t "~1Tbinding: ~D~%" (-> this binding))
  (label cfg-4)
  this
  )

;; definition of type sparticle-launch-state
(deftype sparticle-launch-state (structure)
  "The state associated with a launcher of a given sparticle."
  ((group-item  sparticle-group-item)
   (flags       sp-launch-state-flags)
   (randomize   uint16)
   (center      vector)
   (sprite3d    sprite-vec-data-3d)
   (sprite      sparticle-cpuinfo)
   (offset      uint32)
   (accum       float)
   (spawn-time  uint32)
   (control     sparticle-launch-control)
   (swarm       basic   :overlay-at offset)
   (seed        uint32  :overlay-at accum)
   (time        uint32  :overlay-at spawn-time)
   (spec        basic   :overlay-at sprite)
   (id          uint32  :overlay-at sprite3d)
   )
  )

;; definition for method 3 of type sparticle-launch-state
(defmethod inspect ((this sparticle-launch-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sparticle-launch-state)
  (format #t "~1Tgroup-item: #<sparticle-group-item @ #x~X>~%" (-> this group-item))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Trandomize: ~D~%" (-> this randomize))
  (format #t "~1Tcenter: #<vector @ #x~X>~%" (-> this center))
  (format #t "~1Tsprite3d: #<sprite-vec-data-3d @ #x~X>~%" (-> this sprite3d))
  (format #t "~1Tsprite: ~A~%" (-> this sprite))
  (format #t "~1Toffset: ~D~%" (-> this offset))
  (format #t "~1Taccum: ~f~%" (-> this accum))
  (format #t "~1Tspawn-time: ~D~%" (-> this spawn-time))
  (format #t "~1Tcontrol: ~A~%" (-> this control))
  (format #t "~1Tswarm: ~A~%" (-> this offset))
  (format #t "~1Tseed: ~D~%" (-> this accum))
  (format #t "~1Ttime: ~D~%" (-> this spawn-time))
  (format #t "~1Tspec: ~A~%" (-> this sprite))
  (format #t "~1Tid: ~D~%" (-> this sprite3d))
  (label cfg-4)
  this
  )

;; definition of type sparticle-launch-group
(deftype sparticle-launch-group (basic)
  "Definition of multiple a particle-group, which is a collection of particle effects."
  ((length           int16)
   (duration         uint16)
   (linger-duration  uint16)
   (flags            sp-group-flag)
   (name             string)
   (launcher         (inline-array sparticle-group-item))
   (rotate-x         degrees)
   (rotate-y         degrees)
   (rotate-z         degrees)
   (scale-x          float)
   (scale-y          float)
   (scale-z          float)
   (bounds           sphere  :inline)
   )
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control)
    )
  )

;; definition for method 3 of type sparticle-launch-group
(defmethod inspect ((this sparticle-launch-group))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tduration: ~D~%" (-> this duration))
  (format #t "~1Tlinger-duration: ~D~%" (-> this linger-duration))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tlauncher: #x~X~%" (-> this launcher))
  (format #t "~1Trotate-x: (deg ~r)~%" (-> this rotate-x))
  (format #t "~1Trotate-y: (deg ~r)~%" (-> this rotate-y))
  (format #t "~1Trotate-z: (deg ~r)~%" (-> this rotate-z))
  (format #t "~1Tscale-x: ~f~%" (-> this scale-x))
  (format #t "~1Tscale-y: ~f~%" (-> this scale-y))
  (format #t "~1Tscale-z: ~f~%" (-> this scale-z))
  (format #t "~1Tbounds: #<sphere @ #x~X>~%" (-> this bounds))
  (label cfg-4)
  this
  )

;; definition for symbol *launch-matrix*, type matrix
(define *launch-matrix* (matrix-identity! (new 'global 'matrix)))

;; definition of type sparticle-launch-control
(deftype sparticle-launch-control (inline-array-class)
  "Top-level type containing all the state needed to launch a particle group.
These are typically owned by a process, and allocated on the process heap.
These refer to static particle definitions, and then spawn particles that are tracked by the
particle system itself. This type just holds the launching-related state."
  ((group                sparticle-launch-group)
   (proc                 process-drawable)
   (local-clock          int32)
   (fade                 float)
   (matrix               int8)
   (state-mode           uint8                      3)
   (state-counter        uint32)
   (local-space-binding  particle-local-space-info          :overlay-at fade)
   (last-spawn-frame     int32)
   (last-spawn-time      int32)
   (origin               matrix                     :inline)
   (center               vector                     :inline :overlay-at (-> origin data 12))
   (data                 sparticle-launch-state     :inline :dynamic)
   )
  (:methods
    (initialize (_type_ sparticle-launch-group process-drawable) none)
    (is-visible? (_type_ vector) symbol)
    (spawn (_type_ vector) object)
    (spawn-from-mat (_type_ matrix) none)
    (spawn-from-cspace (_type_ cspace) none)
    (kill-particles (_type_) none)
    (set-local-space-info (_type_ particle-local-space-info) none)
    )
  )

;; definition for method 3 of type sparticle-launch-control
(defmethod inspect ((this sparticle-launch-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tgroup: ~A~%" (-> this group))
  (format #t "~1Tproc: ~A~%" (-> this proc))
  (format #t "~1Tlocal-clock: ~D~%" (-> this local-clock))
  (format #t "~1Tfade: ~f~%" (the-as float (-> this local-space-binding)))
  (format #t "~1Tmatrix: ~D~%" (-> this matrix))
  (format #t "~1Tstate-mode[3] @ #x~X~%" (-> this state-mode))
  (format #t "~1Tstate-counter: ~D~%" (-> this state-counter))
  (format #t "~1Tlocal-space-binding: #<particle-local-space-info @ #x~X>~%" (-> this local-space-binding))
  (format #t "~1Tlast-spawn-frame: ~D~%" (-> this last-spawn-frame))
  (format #t "~1Tlast-spawn-time: ~D~%" (-> this last-spawn-time))
  (format #t "~1Torigin: #<matrix @ #x~X>~%" (-> this origin))
  (format #t "~1Tcenter: ~`vector`P~%" (-> this origin trans))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> sparticle-launch-control heap-base) (the-as uint 48))

;; definition of type sparticle-subsampler
(deftype sparticle-subsampler (basic)
  ((spt-num      float)
   (sp-system    sparticle-system)
   (sp-launcher  sparticle-launcher)
   (spawn-mat    matrix  :inline)
   (inited?      symbol)
   )
  (:methods
    (new (symbol type sparticle-system sparticle-launcher float) _type_)
    (init-with-vec! (_type_ vector) vector)
    (init-with-mat! (_type_ matrix) matrix)
    )
  )

;; definition for method 3 of type sparticle-subsampler
(defmethod inspect ((this sparticle-subsampler))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tspt-num: ~f~%" (-> this spt-num))
  (format #t "~1Tsp-system: ~A~%" (-> this sp-system))
  (format #t "~1Tsp-launcher: ~A~%" (-> this sp-launcher))
  (format #t "~1Tspawn-mat: #<matrix @ #x~X>~%" (-> this spawn-mat))
  (format #t "~1Tinited?: ~A~%" (-> this inited?))
  (label cfg-4)
  this
  )

;; definition for method 0 of type sparticle-subsampler
(defmethod new sparticle-subsampler ((allocation symbol) (type-to-make type) (arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 float))
  (let ((s3-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (if (zero? s3-0)
        (go process-drawable-art-error "sparticle-subsampler")
        )
    (set! (-> s3-0 sp-launcher) arg1)
    (set! (-> s3-0 inited?) #f)
    (set! (-> s3-0 sp-system) arg0)
    (set! (-> s3-0 spt-num) arg2)
    (matrix-identity! (-> s3-0 spawn-mat))
    s3-0
    )
  )

;; definition for function compute-rot-in-screenspace
(defun compute-rot-in-screenspace ((arg0 vector))
  "Unclear what this does, but I'm not actually sure it makes sense. Unused"
  0.0
  (let ((a0-1 (-> (math-camera-matrix) fvec)))
    0.0
    (let ((v1-0 (new 'stack-no-clear 'vector)))
      (let ((f0-3 (vector-dot a0-1 arg0)))
        (vector-float*! v1-0 a0-1 f0-3)
        )
      (vector-! arg0 arg0 v1-0)
      )
    )
  (let ((a2-1 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
    (vector-matrix*! arg0 arg0 a2-1)
    )
  (the float (sar (shl (the int (atan (-> arg0 y) (* -1.0 (-> arg0 x)))) 48) 48))
  )

;; failed to figure out what this is:
0
