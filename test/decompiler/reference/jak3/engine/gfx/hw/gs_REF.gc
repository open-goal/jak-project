;;-*-Lisp-*-
(in-package goal)

;; definition of type gs-pmode
(deftype gs-pmode (uint64)
  ((en1   uint8 :offset   0 :size   1)
   (en2   uint8 :offset   1 :size   1)
   (crtmd uint8 :offset   2 :size   3)
   (mmod  uint8 :offset   5 :size   1)
   (amod  uint8 :offset   6 :size   1)
   (slbg  uint8 :offset   7 :size   1)
   (alp   uint8 :offset   8 :size   8)
   )
  )

;; definition of type gs-smode2
(deftype gs-smode2 (uint64)
  ((int  uint8 :offset   0 :size   1)
   (ffmd uint8 :offset   1 :size   1)
   (dpms uint8 :offset   2 :size   2)
   )
  )

;; definition for function psm-size
(defun psm-size ((arg0 gs-psm))
  "Convert texture format to some type of size."
  (cond
    ((= arg0 (gs-psm mt8))
     64
     )
    ((= arg0 (gs-psm mt4))
     32
     )
    ((or (= arg0 (gs-psm ct16)) (= arg0 (gs-psm ct16s)) (= arg0 (gs-psm mz16)) (= arg0 (gs-psm mz16s)))
     128
     )
    (else
      256
      )
    )
  )

;; definition for function psm-page-height
(defun psm-page-height ((arg0 gs-psm))
  "Convert texture format to some type of page height."
  (cond
    ((= arg0 (gs-psm mt8))
     64
     )
    ((= arg0 (gs-psm mt4))
     128
     )
    ((or (= arg0 (gs-psm ct16)) (= arg0 (gs-psm ct16s)) (= arg0 (gs-psm mz16)) (= arg0 (gs-psm mz16s)))
     64
     )
    (else
      32
      )
    )
  )

;; definition for function psm->string
(defun psm->string ((arg0 gs-psm))
  "Get the name of a texture format."
  (case arg0
    (((gs-psm ct24))
     "ct24"
     )
    (((gs-psm mt4))
     "mt4"
     )
    (((gs-psm ct32))
     "ct32"
     )
    (((gs-psm mz16s))
     "mz16s"
     )
    (((gs-psm ct16s))
     "ct16s"
     )
    (((gs-psm mt8))
     "mt8"
     )
    (((gs-psm mt8h))
     "mt8h"
     )
    (((gs-psm mz16))
     "mz16"
     )
    (((gs-psm mz24))
     "mz24"
     )
    (((gs-psm mt4hh))
     "mt4hh"
     )
    (((gs-psm ct16))
     "ct16"
     )
    (((gs-psm mt4hl))
     "mt4hl"
     )
    (((gs-psm mz32))
     "mz32"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition of type gs-display-fb
(deftype gs-display-fb (uint64)
  ((fbp uint16 :offset   0 :size   9)
   (fbw uint8  :offset   9 :size   6)
   (psm gs-psm :offset  15 :size   5)
   (dbx uint16 :offset  32 :size  11)
   (dby uint16 :offset  43 :size  11)
   )
  )

;; definition of type gs-display
(deftype gs-display (uint64)
  "the GS's DISPLAY registers make settings for the display position on the screen regarding
information on Rectangular Area Read Output Circuit n for the PCRTC.
write-only"
  ((dx   uint16 :offset   0 :size  12)
   (dy   uint16 :offset  12 :size  11)
   (magh uint8  :offset  23 :size   4)
   (magv uint8  :offset  27 :size   2)
   (dw   uint16 :offset  32 :size  12)
   (dh   uint16 :offset  44 :size  11)
   )
  )

;; definition of type gs-bgcolor
(deftype gs-bgcolor (uint64)
  "The GS's BGCOLOR register sets the background color of the PCRTC with RGB value.
write-only"
  ((r uint8 :offset   0 :size   8)
   (g uint8 :offset   8 :size   8)
   (b uint8 :offset  16 :size   8)
   )
  )

;; definition of type gs-csr
(deftype gs-csr (uint64)
  "The GS's CSR register sets and obtains various GS statuses.
read-write. The fields have different effects depending on whether they're being read from
or written to.

Bits 5 and 6 (0x20 and 0x40) should be zero."
  ((signal uint8 :offset   0 :size   1)
   (finish uint8 :offset   1 :size   1)
   (hsint  uint8 :offset   2 :size   1)
   (vsint  uint8 :offset   3 :size   1)
   (edwint uint8 :offset   4 :size   1)
   (flush  uint8 :offset   8 :size   1)
   (reset  uint8 :offset   9 :size   1)
   (nfield uint8 :offset  12 :size   1)
   (field  uint8 :offset  13 :size   1)
   (fifo   uint8 :offset  14 :size   2)
   (rev    uint8 :offset  16 :size   8)
   (id     uint8 :offset  24 :size   8)
   )
  )

;; definition of type gs-bank
(deftype gs-bank (structure)
  "Memory layout of the GS's privileged registers (mapped to EE memory).
It is missing the SIGLBLID/LABELID register at 4224 (useless anyway?)"
  ((pmode     gs-pmode)
   (smode2    gs-smode2      :offset  32)
   (dspfb1    gs-display-fb  :offset 112)
   (display1  gs-display     :offset 128)
   (dspfb2    gs-display-fb  :offset 144)
   (display2  gs-display     :offset 160)
   (extbuf    uint64         :offset 176)
   (extdata   uint64         :offset 192)
   (extwrite  uint64         :offset 208)
   (bgcolor   gs-bgcolor     :offset 224)
   (csr       gs-csr         :offset 4096)
   (imr       uint64         :offset 4112)
   (busdir    uint64         :offset 4160)
   )
  )

;; definition for method 3 of type gs-bank
(defmethod inspect ((this gs-bank))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-bank)
  (format #t "~1Tpmode: #x~X~%" (-> this pmode))
  (format #t "~1Tsmode2: #x~X~%" (-> this smode2))
  (format #t "~1Tdspfb1: #x~X~%" (-> this dspfb1))
  (format #t "~1Tdisplay1: #x~X~%" (-> this display1))
  (format #t "~1Tdspfb2: #x~X~%" (-> this dspfb2))
  (format #t "~1Tdisplay2: #x~X~%" (-> this display2))
  (format #t "~1Textbuf: #x~X~%" (-> this extbuf))
  (format #t "~1Textdata: #x~X~%" (-> this extdata))
  (format #t "~1Textwrite: #x~X~%" (-> this extwrite))
  (format #t "~1Tbgcolor: #x~X~%" (-> this bgcolor))
  (format #t "~1Tcsr: #x~X~%" (-> this csr))
  (format #t "~1Timr: #x~X~%" (-> this imr))
  (format #t "~1Tbusdir: #x~X~%" (-> this busdir))
  (label cfg-4)
  this
  )

;; definition of type gs-frame
(deftype gs-frame (uint64)
  ((fbp   uint16 :offset   0 :size   9)
   (fbw   uint8  :offset  16 :size   6)
   (psm   gs-psm :offset  24 :size   6)
   (fbmsk uint32 :offset  32 :size  32)
   )
  )

;; definition of type gs-zbuf
(deftype gs-zbuf (uint64)
  "The GS's ZBUF registers make various settings regarding Z buffer."
  ((zbp  uint16 :offset   0 :size   9)
   (psm  gs-psm :offset  24 :size   4)
   (zmsk uint8  :offset  32 :size   1)
   )
  )

;; definition of type gs-xy-offset
(deftype gs-xy-offset (uint64)
  "The GS's XYOFFSET registers set the offset value for converting from the primitive coordinate
system to the window coordinate system."
  ((ofx uint16 :offset   0 :size  16)
   (ofy uint16 :offset  32 :size  16)
   )
  )

;; definition of type gs-scissor
(deftype gs-scissor (uint64)
  "The GS's SCISSOR registers specify the scissoring area. The coordinate values for
the upper-left/lower-right points of the enabled drawing area are specified by the window
coordinate system."
  ((scax0 uint16 :offset   0 :size  11)
   (scax1 uint16 :offset  16 :size  11)
   (scay0 uint16 :offset  32 :size  11)
   (scay1 uint16 :offset  48 :size  11)
   )
  )

;; definition of type gs-prmode-cont
(deftype gs-prmode-cont (uint64)
  "The GS's PRMODECONT register sets whether to use primitive attributes (IIP, TME, FGE, ABE,
AA1, FST, CTXT, FIX) specified by the PRMODE register or the PRIM register."
  ((ac uint8 :offset   0 :size   1)
   )
  )

;; definition of type gs-color-clamp
(deftype gs-color-clamp (uint64)
  "The GS's COLCLAMP register stores settings as to whether clamping for the RGB value of the
pixel is performed."
  ((clamp uint8 :offset   0 :size   1)
   )
  )

;; definition of type gs-dthe
(deftype gs-dthe (uint64)
  "The GS's DTHE register stores settings for dithering (performed/not performed)."
  ((dthe uint8 :offset   0 :size   1)
   )
  )

;; definition of type gs-test
(deftype gs-test (uint64)
  "The GS's TEST register performs settings related to the pixel test."
  ((ate   uint8    :offset   0 :size   1)
   (atst  gs-atest :offset   1 :size   3)
   (aref  uint8    :offset   4 :size   8)
   (afail uint8    :offset  12 :size   2)
   (date  uint8    :offset  14 :size   1)
   (datm  uint8    :offset  15 :size   1)
   (zte   uint8    :offset  16 :size   1)
   (ztst  gs-ztest :offset  17 :size   2)
   )
  )

;; definition of type gs-prim
(deftype gs-prim (uint64)
  ((prim gs-prim-type :offset   0 :size   3)
   (iip  uint8        :offset   3 :size   1)
   (tme  uint8        :offset   4 :size   1)
   (fge  uint8        :offset   5 :size   1)
   (abe  uint8        :offset   6 :size   1)
   (aa1  uint8        :offset   7 :size   1)
   (fst  uint8        :offset   8 :size   1)
   (ctxt uint8        :offset   9 :size   1)
   (fix  uint8        :offset  10 :size   1)
   )
  )

;; definition of type gs-rgbaq
(deftype gs-rgbaq (uint64)
  "The GS's RGBAQ register sets the RGBA value of the vertex and the Q value of the normalized
texture coordinates."
  ((r uint8 :offset   0 :size   8)
   (g uint8 :offset   8 :size   8)
   (b uint8 :offset  16 :size   8)
   (a uint8 :offset  24 :size   8)
   (q float :offset  32 :size  32)
   )
  )

;; definition of type gs-xyz
(deftype gs-xyz (uint64)
  ((x uint16 :offset   0 :size  16)
   (y uint16 :offset  16 :size  16)
   (z uint32 :offset  32 :size  32)
   )
  )

;; definition of type gs-uv
(deftype gs-uv (uint64)
  "The GS's UV register specifies the texel coordinate (UV) values of the vertex."
  ((u uint16 :offset   0 :size  16)
   (v uint16 :offset  16 :size  16)
   )
  )

;; definition of type gs-st
(deftype gs-st (uint64)
  "The GS's ST register sets the S and T values of the vertex texture coordinates.
The value Q is specified by the RGBAQ register."
  ((s float :offset   0 :size  32)
   (t float :offset  32 :size  32)
   )
  )

;; definition of type gs-xyzf
(deftype gs-xyzf (uint64)
  ((x uint16 :offset   0 :size  16)
   (y uint16 :offset  16 :size  16)
   (z uint32 :offset  32 :size  24)
   (f uint8  :offset  56 :size   8)
   )
  )

;; definition of type gs-adcmd
(deftype gs-adcmd (structure)
  ((word  uint32    4)
   (quad  uint128   :overlay-at (-> word 0))
   (data  uint64    :overlay-at (-> word 0))
   (cmds  gs-reg64  :overlay-at (-> word 2))
   (cmd   uint8     :overlay-at (-> word 2))
   (x     uint32    :overlay-at (-> word 0))
   (y     uint32    :overlay-at (-> word 1))
   (z     uint32    :overlay-at (-> word 2))
   (w     uint32    :overlay-at (-> word 3))
   )
  )

;; definition for method 3 of type gs-adcmd
;; INFO: Used lq/sq
(defmethod inspect ((this gs-adcmd))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-adcmd)
  (format #t "~1Tword[4] @ #x~X~%" (&-> this x))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tdata: ~D~%" (-> this data))
  (format #t "~1Tcmds: ~D~%" (-> this cmds))
  (format #t "~1Tcmd: ~D~%" (-> this cmd))
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Ty: ~D~%" (-> this y))
  (format #t "~1Tz: ~D~%" (-> this z))
  (format #t "~1Tw: ~D~%" (-> this w))
  (label cfg-4)
  this
  )

;; definition of type gs-trxpos
(deftype gs-trxpos (uint64)
  "The GS's TRXPOS register specifies the position and
scanning direction of the rectangular area
in each buffer where buffer transmission is performed."
  ((ssax uint16 :offset   0 :size  11)
   (ssay uint16 :offset  16 :size  11)
   (dsax uint16 :offset  32 :size  11)
   (dsay uint16 :offset  48 :size  11)
   (dir  uint8  :offset  59 :size   2)
   )
  )

;; definition of type gs-trxreg
(deftype gs-trxreg (uint64)
  "The GS's TRXREG register specifies the size of the rectangular area, where the transmission
between buffers is implemented, in units of pixels.
The pixel mode must be the one set by the BITBLTBUF register."
  ((rrw uint16 :offset   0 :size  12)
   (rrh uint16 :offset  32 :size  12)
   )
  )

;; definition of type gs-trxdir
(deftype gs-trxdir (uint64)
  "The GS's TRXDIR register specifies the transmission direction in the transmission between
buffers, and activates transmission.
Appropriate settings must be made by the BITBLTBUF/TRXPOS/TRXREG before activating
the transmission."
  ((xdir uint8 :offset   0 :size   2)
   )
  )

;; definition of type gs-bitbltbuf
(deftype gs-bitbltbuf (uint64)
  "The GS's BITBLTBUF register stores buffer-related settings for transmission source and
destination during transmission between buffers."
  ((sbp  uint16 :offset   0 :size  14)
   (sbw  uint8  :offset  16 :size   6)
   (spsm uint8  :offset  24 :size   6)
   (dbp  uint16 :offset  32 :size  14)
   (dbw  uint8  :offset  48 :size   6)
   (dpsm gs-psm :offset  56 :size   6)
   )
  )

;; definition of type gs-tex0
(deftype gs-tex0 (uint64)
  "The GS's TEX0 registers set various kinds of information regarding the textures to be used."
  ((tbp0 uint16 :offset   0 :size  14)
   (tbw  uint8  :offset  14 :size   6)
   (psm  uint8  :offset  20 :size   6)
   (tw   uint8  :offset  26 :size   4)
   (th   uint8  :offset  30 :size   4)
   (tcc  uint8  :offset  34 :size   1)
   (tfx  uint8  :offset  35 :size   2)
   (cbp  uint16 :offset  37 :size  14)
   (cpsm uint8  :offset  51 :size   4)
   (csm  uint8  :offset  55 :size   1)
   (csa  uint8  :offset  56 :size   5)
   (cld  uint8  :offset  61 :size   3)
   )
  )

;; definition of type gs-tex1
(deftype gs-tex1 (uint64)
  "The GS's TEX1 registers set information on the sampling method of the textures."
  ((lcm  uint8 :offset   0 :size   1)
   (mxl  uint8 :offset   2 :size   3)
   (mmag uint8 :offset   5 :size   1)
   (mmin uint8 :offset   6 :size   3)
   (mtba uint8 :offset   9 :size   1)
   (l    uint8 :offset  19 :size   2)
   (k    int16 :offset  32 :size  12)
   )
  )

;; definition of type gs-texa
(deftype gs-texa (uint64)
  "The GS's TEXA register sets the Alpha value to be referred to when the Alpha value of the
texture is not an 8-bit value."
  ((ta0 uint8 :offset   0 :size   8)
   (aem uint8 :offset  15 :size   1)
   (ta1 uint8 :offset  32 :size   8)
   )
  )

;; definition of type gs-texclut
(deftype gs-texclut (uint64)
  "The GS's TEXCLUT register specifies the CLUT position in the buffer when the CLUT storage mode
is CSM=1 (CSM2 mode)."
  ((cbw uint8  :offset   0 :size   6)
   (cou uint8  :offset   6 :size   6)
   (cov uint16 :offset  12 :size  10)
   )
  )

;; definition of type gs-miptbp
(deftype gs-miptbp (uint64)
  "the GS's MIPTBP registers set the buffer pointer and buffer width of textures when performing
MIPMAP. MIPTBP1 sets levels 1 to 3, MIPTBP2 sets levels 4 to 6."
  ((tbp1 uint16 :offset   0 :size  14)
   (tbw1 uint8  :offset  14 :size   6)
   (tbp2 uint16 :offset  20 :size  14)
   (tbw2 uint8  :offset  34 :size   6)
   (tbp3 uint16 :offset  40 :size  14)
   (tbw3 uint8  :offset  54 :size   6)
   )
  )

;; definition of type gs-alpha
(deftype gs-alpha (uint64)
  ((a   uint8 :offset   0 :size   2)
   (b   uint8 :offset   2 :size   2)
   (c   uint8 :offset   4 :size   2)
   (d   uint8 :offset   6 :size   2)
   (fix uint8 :offset  32 :size   8)
   )
  )

;; definition for method 3 of type gs-alpha
(defmethod inspect ((this gs-alpha))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-alpha)
  (format #t "~1Ta: ~D~%" (-> this a))
  (format #t "~1Tb: ~D~%" (-> this b))
  (format #t "~1Tc: ~D~%" (-> this c))
  (format #t "~1Td: ~D~%" (-> this d))
  (format #t "~1Tfix: ~D~%" (-> this fix))
  (label cfg-4)
  this
  )

;; definition of type gs-clamp
(deftype gs-clamp (uint64)
  ((wms  gs-tex-wrap-mode :offset   0 :size   2)
   (wmt  gs-tex-wrap-mode :offset   2 :size   2)
   (minu uint16           :offset   4 :size  10)
   (maxu uint16           :offset  14 :size  10)
   (minv uint16           :offset  24 :size  10)
   (maxv uint16           :offset  34 :size  10)
   )
  )

;; definition of type gs-fog
(deftype gs-fog (uint64)
  ((f uint8 :offset  56 :size   8)
   )
  )

;; definition for method 3 of type gs-fog
(defmethod inspect ((this gs-fog))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-fog)
  (format #t "~1Tf: ~D~%" (-> this f))
  (label cfg-4)
  this
  )

;; definition of type gs-fogcol
(deftype gs-fogcol (uint64)
  ((fcr uint8 :offset   0 :size   8)
   (fcg uint8 :offset   8 :size   8)
   (fcb uint8 :offset  16 :size   8)
   )
  )

;; definition for method 3 of type gs-fogcol
(defmethod inspect ((this gs-fogcol))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-fogcol)
  (format #t "~1Tr: ~D~%" (-> this fcr))
  (format #t "~1Tg: ~D~%" (-> this fcg))
  (format #t "~1Tb: ~D~%" (-> this fcb))
  (label cfg-4)
  this
  )

;; definition of type gif-ctrl
(deftype gif-ctrl (uint32)
  ((rst uint8 :offset   0 :size   1)
   (pse uint8 :offset   3 :size   1)
   )
  )

;; definition of type gif-mode
(deftype gif-mode (uint32)
  ((m3r uint8 :offset   0 :size   1)
   (imt uint8 :offset   2 :size   1)
   )
  )

;; definition of type gif-stat
(deftype gif-stat (uint32)
  ((m3r   uint8 :offset   0 :size   1)
   (m3p   uint8 :offset   1 :size   1)
   (imt   uint8 :offset   2 :size   1)
   (pse   uint8 :offset   3 :size   1)
   (ip3   uint8 :offset   5 :size   1)
   (p3q   uint8 :offset   6 :size   1)
   (p2q   uint8 :offset   7 :size   1)
   (p1q   uint8 :offset   8 :size   1)
   (oph   uint8 :offset   9 :size   1)
   (apath uint8 :offset  10 :size   2)
   (dir   uint8 :offset  12 :size   1)
   (fqc   uint8 :offset  24 :size   5)
   )
  )

;; definition of type gif-cnt
(deftype gif-cnt (uint32)
  ((loopcnt uint16 :offset   0 :size  15)
   (regcnt  uint8  :offset  16 :size   4)
   (vuaddr  uint16 :offset  20 :size  10)
   )
  )

;; definition of type gif-p3cnt
(deftype gif-p3cnt (uint32)
  ((p3cnt uint16 :offset   0 :size  15)
   )
  )

;; definition of type gif-p3tag
(deftype gif-p3tag (uint32)
  ((loopcnt uint16 :offset   0 :size  15)
   (eop     uint8  :offset  15 :size   1)
   )
  )

;; definition of type gif-bank
(deftype gif-bank (structure)
  ((ctrl   gif-ctrl   :offset   0)
   (mode   gif-mode   :offset  16)
   (stat   gif-stat   :offset  32)
   (tag0   uint32     :offset  64)
   (tag1   uint32     :offset  80)
   (tag2   uint32     :offset  96)
   (tag3   uint32     :offset 112)
   (cnt    gif-cnt    :offset 128)
   (p3cnt  gif-p3cnt  :offset 144)
   (p3tag  gif-p3tag  :offset 160)
   )
  )

;; definition for method 3 of type gif-bank
(defmethod inspect ((this gif-bank))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gif-bank)
  (format #t "~1Tctrl: #x~X~%" (-> this ctrl))
  (format #t "~1Tmode: #x~X~%" (-> this mode))
  (format #t "~1Tstat: #x~X~%" (-> this stat))
  (format #t "~1Ttag0: #x~X~%" (-> this tag0))
  (format #t "~1Ttag1: #x~X~%" (-> this tag1))
  (format #t "~1Ttag2: #x~X~%" (-> this tag2))
  (format #t "~1Ttag3: #x~X~%" (-> this tag3))
  (format #t "~1Tcnt: #x~X~%" (-> this cnt))
  (format #t "~1Tp3cnt: #x~X~%" (-> this p3cnt))
  (format #t "~1Tp3tag: #x~X~%" (-> this p3tag))
  (label cfg-4)
  this
  )

;; definition of type gif-tag-prim
(deftype gif-tag-prim (uint32)
  ((id   uint16   :offset   0 :size  14)
   (pre  uint8    :offset  14 :size   1)
   (prim gs-prim  :offset  15 :size  11)
   (flg  gif-flag :offset  26 :size   2)
   (nreg uint8    :offset  28 :size   4)
   )
  )

;; definition of type gif-tag-count
(deftype gif-tag-count (uint32)
  ((nloop uint16 :offset   0 :size  15)
   (eop   uint8  :offset  15 :size   1)
   )
  )

;; definition of type gif-tag64
(deftype gif-tag64 (uint64)
  ((nloop uint16   :offset   0 :size  15)
   (eop   uint8    :offset  15 :size   1)
   (id    uint16   :offset  32 :size  14)
   (pre   uint8    :offset  46 :size   1)
   (prim  gs-prim  :offset  47 :size  11)
   (flg   gif-flag :offset  58 :size   2)
   (nreg  uint8    :offset  60 :size   4)
   )
  )

;; definition of type gif-tag
(deftype gif-tag (uint128)
  ((nloop  uint16     :offset   0 :size  15)
   (eop    uint8      :offset  15 :size   1)
   (id     uint16     :offset  32 :size  14)
   (pre    uint8      :offset  46 :size   1)
   (prim   uint16     :offset  47 :size  11)
   (flg    gif-flag   :offset  58 :size   2)
   (nreg   uint8      :offset  60 :size   4)
   (regs0  gif-reg-id :offset  64 :size   4)
   (regs1  gif-reg-id :offset  68 :size   4)
   (regs2  gif-reg-id :offset  72 :size   4)
   (regs3  gif-reg-id :offset  76 :size   4)
   (regs4  gif-reg-id :offset  80 :size   4)
   (regs5  gif-reg-id :offset  84 :size   4)
   (regs6  gif-reg-id :offset  88 :size   4)
   (regs7  gif-reg-id :offset  92 :size   4)
   (regs8  gif-reg-id :offset  96 :size   4)
   (regs9  gif-reg-id :offset 100 :size   4)
   (regs10 gif-reg-id :offset 104 :size   4)
   (regs11 gif-reg-id :offset 108 :size   4)
   (regs12 gif-reg-id :offset 112 :size   4)
   (regs13 gif-reg-id :offset 116 :size   4)
   (regs14 gif-reg-id :offset 120 :size   4)
   (regs15 gif-reg-id :offset 124 :size   4)
   )
  )

;; definition of type gs-gif-tag
(deftype gs-gif-tag (structure)
  ((qword  uint128)
   (tag    gif-tag64       :overlay-at qword)
   (regs   gif-tag-regs    :offset   8)
   (dword  uint64        2 :overlay-at qword)
   (word   uint32        4 :overlay-at qword)
   )
  )

;; definition for method 3 of type gs-gif-tag
(defmethod inspect ((this gs-gif-tag))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-gif-tag)
  (format #t "~1Tqword: #<qword @ #x~X>~%" (&-> this tag))
  (format #t "~1Tdword[2] @ #x~X~%" (&-> this tag))
  (format #t "~1Tword[4] @ #x~X~%" (&-> this tag))
  (format #t "~1Ttag: ~D~%" (-> this tag))
  (format #t "~1Tregs: ~D~%" (-> this regs))
  (label cfg-4)
  this
  )

;; definition for method 3 of type gif-tag
;; WARN: Return type mismatch object vs gif-tag.
(defmethod inspect ((this gif-tag))
  (format #t "[~8x] gif-tag~%" this)
  (format #t "~Tnloop: ~4d~%" (-> this nloop))
  (format #t "~Teop  : ~4d~%" (-> this eop))
  (format #t "~Tid   : ~4d~%" (-> this id))
  (format #t "~Tpre  : ~4d~%" (-> this pre))
  (format #t "~Tprim : ~4d~%" (-> this prim))
  (format #t "~Tflg  : ~4d~%" (-> this flg))
  (format #t "~Tnreg : ~4d~%" (-> this nreg))
  (format #t "~Tregs0 : ~4d~%" (-> this regs0))
  (format #t "~Tregs1 : ~4d~%" (-> this regs1))
  (format #t "~Tregs2 : ~4d~%" (-> this regs2))
  (format #t "~Tregs3 : ~4d~%" (-> this regs3))
  (format #t "~Tregs4 : ~4d~%" (-> this regs4))
  (format #t "~Tregs5 : ~4d~%" (-> this regs5))
  (format #t "~Tregs6 : ~4d~%" (-> this regs6))
  (format #t "~Tregs7 : ~4d~%" (-> this regs7))
  (format #t "~Tregs8 : ~4d~%" (-> this regs8))
  (format #t "~Tregs9 : ~4d~%" (-> this regs9))
  (format #t "~Tregs10: ~4d~%" (-> this regs10))
  (format #t "~Tregs11: ~4d~%" (-> this regs11))
  (format #t "~Tregs12: ~4d~%" (-> this regs12))
  (format #t "~Tregs13: ~4d~%" (-> this regs13))
  (format #t "~Tregs14: ~4d~%" (-> this regs14))
  (the-as gif-tag (format #t "~Tregs15: ~4d~%" (-> this regs15)))
  )

;; definition for symbol *fog-color*, type rgba
(define *fog-color* (new 'static 'rgba :r #x80))

;; definition of type gif-packet
(deftype gif-packet (basic)
  "Unused type for building a dynamically sized gif packet."
  ((reg-count  int32)
   (gif-tag    gs-gif-tag  :inline)
   (gif-tag0   uint128     :overlay-at (-> gif-tag qword))
   (args       uint64      1)
   )
  (:methods
    (new (symbol type int) _type_)
    )
  )

;; definition for method 3 of type gif-packet
;; INFO: Used lq/sq
(defmethod inspect ((this gif-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Treg-count: ~D~%" (-> this reg-count))
  (format #t "~1Tgif-tag0: #x~X~%" (-> this gif-tag0))
  (format #t "~1Targs[1] @ #x~X~%" (-> this args))
  (label cfg-4)
  this
  )

;; definition for method 0 of type gif-packet
(defmethod new gif-packet ((allocation symbol) (type-to-make type) (arg0 int))
  (object-new allocation type-to-make (the-as int (+ (-> type-to-make size) (* (+ arg0 -1) 8))))
  )

;; definition for function open-gif-packet
(defun open-gif-packet ((arg0 gif-packet))
  "Initialize an existing gif-packet for 0 registers."
  (set! (-> arg0 reg-count) 0)
  (set! (-> arg0 gif-tag regs) (new 'static 'gif-tag-regs))
  arg0
  )

;; definition for function add-reg-gif-packet
;; WARN: Return type mismatch gif-packet vs none.
(defun add-reg-gif-packet ((arg0 gif-packet) (arg1 int) (arg2 int))
  "Add a register + value to the packet."
  (let ((v1-0 (-> arg0 gif-tag)))
    (logior! (-> v1-0 regs) (ash arg1 (* (-> arg0 reg-count) 4)))
    )
  (set! (-> (&-> arg0 args (-> arg0 reg-count)) 0) (the-as uint arg2))
  (+! (-> arg0 reg-count) 1)
  (none)
  )

;; definition for function close-gif-packet
(defun close-gif-packet ((arg0 gif-packet) (arg1 int))
  "Finish adding registers."
  (set! (-> arg0 gif-tag tag)
        (new 'static 'gif-tag64 :nloop #x1 :flg (gif-flag reg-list) :eop arg1 :nreg (-> arg0 reg-count))
        )
  arg0
  )

;; definition of type draw-context
(deftype draw-context (basic)
  ((orgx    int32)
   (orgy    int32)
   (orgz    int32)
   (width   int32)
   (height  int32)
   (color   rgba  4)
   )
  (:methods
    (new (symbol type int int int int rgba) _type_)
    )
  )

;; definition for method 3 of type draw-context
(defmethod inspect ((this draw-context))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Torgx: ~D~%" (-> this orgx))
  (format #t "~1Torgy: ~D~%" (-> this orgy))
  (format #t "~1Torgz: ~D~%" (-> this orgz))
  (format #t "~1Twidth: ~D~%" (-> this width))
  (format #t "~1Theight: ~D~%" (-> this height))
  (format #t "~1Tcolor: #x~X~%" (-> this color))
  (label cfg-4)
  this
  )

;; definition for method 0 of type draw-context
(defmethod new draw-context ((allocation symbol) (type-to-make type) (arg0 int) (arg1 int) (arg2 int) (arg3 int) (arg4 rgba))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 orgx) arg0)
    (set! (-> v0-0 orgy) arg1)
    (set! (-> v0-0 orgz) #xffffff)
    (set! (-> v0-0 width) arg2)
    (set! (-> v0-0 height) arg3)
    (set! (-> v0-0 color 0) arg4)
    v0-0
    )
  )

;; definition for function draw-context-set-xy
;; WARN: Return type mismatch int vs none.
(defun draw-context-set-xy ((arg0 draw-context) (arg1 int) (arg2 int))
  "Set the origin of the draw context."
  (set! (-> arg0 orgx) arg1)
  (set! (-> arg0 orgy) arg2)
  (none)
  )

;; definition of type gs-packed-rgba
(deftype gs-packed-rgba (vector4w)
  ((r  int32  :overlay-at (-> data 0))
   (g  int32  :overlay-at (-> data 1))
   (b  int32  :overlay-at (-> data 2))
   (a  int32  :overlay-at (-> data 3))
   )
  )

;; definition for method 3 of type gs-packed-rgba
;; INFO: Used lq/sq
(defmethod inspect ((this gs-packed-rgba))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-packed-rgba)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this x))
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Ty: ~D~%" (-> this y))
  (format #t "~1Tz: ~D~%" (-> this z))
  (format #t "~1Tw: ~D~%" (-> this w))
  (format #t "~1Tdword[2] @ #x~X~%" (&-> this x))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tr: ~D~%" (-> this x))
  (format #t "~1Tg: ~D~%" (-> this y))
  (format #t "~1Tb: ~D~%" (-> this z))
  (format #t "~1Ta: ~D~%" (-> this w))
  (label cfg-4)
  this
  )

;; definition of type gs-packed-xyzw
(deftype gs-packed-xyzw (vector)
  ((ix  int32  :overlay-at (-> data 0))
   (iy  int32  :overlay-at (-> data 1))
   (iz  int32  :overlay-at (-> data 2))
   (iw  int32  :overlay-at (-> data 3))
   )
  )

;; definition for method 3 of type gs-packed-xyzw
;; INFO: Used lq/sq
(defmethod inspect ((this gs-packed-xyzw))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-packed-xyzw)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this ix))
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tz: ~f~%" (-> this z))
  (format #t "~1Tw: ~f~%" (-> this w))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tix: ~D~%" (-> this ix))
  (format #t "~1Tiy: ~D~%" (-> this iy))
  (format #t "~1Tiz: ~D~%" (-> this iz))
  (format #t "~1Tiw: ~D~%" (-> this iw))
  (label cfg-4)
  this
  )

;; definition of type gs-packed-stq
(deftype gs-packed-stq (vector)
  ((tex-s  float  :overlay-at (-> data 0))
   (tex-t  float  :overlay-at (-> data 1))
   (tex-q  float  :overlay-at (-> data 2))
   )
  )

;; definition for method 3 of type gs-packed-stq
;; INFO: Used lq/sq
(defmethod inspect ((this gs-packed-stq))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-packed-stq)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this x))
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tz: ~f~%" (-> this z))
  (format #t "~1Tw: ~f~%" (-> this w))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Ttex-s: ~f~%" (-> this x))
  (format #t "~1Ttex-t: ~f~%" (-> this y))
  (format #t "~1Ttex-q: ~f~%" (-> this z))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (label cfg-4)
  this
  )

;; definition of type gs-packed-uv
(deftype gs-packed-uv (vector)
  ((u  int16  :overlay-at (-> data 0))
   (v  int16  :overlay-at (-> data 1))
   )
  )

;; definition for method 3 of type gs-packed-uv
;; INFO: Used lq/sq
(defmethod inspect ((this gs-packed-uv))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-packed-uv)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this x))
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tz: ~f~%" (-> this z))
  (format #t "~1Tw: ~f~%" (-> this w))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tu: ~D~%" (-> this u))
  (format #t "~1Tv: ~D~%" (-> this v))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (label cfg-4)
  this
  )

;; definition of type gs-packed-gt
(deftype gs-packed-gt (structure)
  ((stq   gs-packed-stq   :inline :offset   0)
   (rgba  gs-packed-rgba  :inline :offset  16)
   (xyzw  gs-packed-xyzw  :inline :offset  32)
   )
  )

;; definition for method 3 of type gs-packed-gt
(defmethod inspect ((this gs-packed-gt))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-packed-gt)
  (format #t "~1Tstq: #<gs-packed-stq @ #x~X>~%" (-> this stq))
  (format #t "~1Trgba: #<gs-packed-rgba @ #x~X>~%" (-> this rgba))
  (format #t "~1Txyzw: #<gs-packed-xyzw @ #x~X>~%" (-> this xyzw))
  (label cfg-4)
  this
  )

;; definition of type gs-packed-gt4
(deftype gs-packed-gt4 (structure)
  ((data  gs-packed-gt  4 :inline)
   )
  )

;; definition for method 3 of type gs-packed-gt4
(defmethod inspect ((this gs-packed-gt4))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'gs-packed-gt4)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




