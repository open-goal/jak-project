;;-*-Lisp-*-
(in-package goal)

;; definition of type generic-tie-instance
(deftype generic-tie-instance (structure)
  ((matrix-tag   dma-packet  :inline)
   (matrix-data  vector      6 :inline)
   (index-tag    dma-packet  :inline)
   (indices      uint8       224)
   (end-tag      dma-packet  :inline)
   )
  )

;; definition for method 3 of type generic-tie-instance
(defmethod inspect ((this generic-tie-instance))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-instance)
  (format #t "~1Tmatrix-tag: #<dma-packet @ #x~X>~%" (-> this matrix-tag))
  (format #t "~1Tmatrix-data[6] @ #x~X~%" (-> this matrix-data))
  (format #t "~1Tindex-tag: #<dma-packet @ #x~X>~%" (-> this index-tag))
  (format #t "~1Tindices[224] @ #x~X~%" (-> this indices))
  (format #t "~1Tend-tag: #<dma-packet @ #x~X>~%" (-> this end-tag))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-input
(deftype generic-tie-input (structure)
  ((palette-tag  dma-packet  :inline)
   (palette      rgba        128)
   (model-tag    dma-packet  :inline)
   (model        vector      146 :inline)
   (matrix-tag   dma-packet  :inline)
   (matrix-data  vector      6 :inline)
   (index-tag    dma-packet  :inline)
   (indices      uint8       224)
   (end-tag      dma-packet  :inline)
   )
  )

;; definition for method 3 of type generic-tie-input
(defmethod inspect ((this generic-tie-input))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-input)
  (format #t "~1Tpalette-tag: #<dma-packet @ #x~X>~%" (-> this palette-tag))
  (format #t "~1Tpalette[128] @ #x~X~%" (-> this palette))
  (format #t "~1Tmodel-tag: #<dma-packet @ #x~X>~%" (-> this model-tag))
  (format #t "~1Tmodel[146] @ #x~X~%" (-> this model))
  (format #t "~1Tmatrix-tag: #<dma-packet @ #x~X>~%" (-> this matrix-tag))
  (format #t "~1Tmatrix-data[6] @ #x~X~%" (-> this matrix-data))
  (format #t "~1Tindex-tag: #<dma-packet @ #x~X>~%" (-> this index-tag))
  (format #t "~1Tindices[224] @ #x~X~%" (-> this indices))
  (format #t "~1Tend-tag: #<dma-packet @ #x~X>~%" (-> this end-tag))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-run-control
(deftype generic-tie-run-control (structure)
  ((skip-bp2     uint8)
   (skip-ips     uint8)
   (gifbuf-skip  uint8)
   (strips       uint8)
   (target-bp1   uint8)
   (target-bp2   uint8)
   (target-ip1   uint8)
   (target-ip2   uint8)
   (target-bps   uint8)
   (target-ips   uint8)
   (is-generic   uint8)
   (reserved     uint8)
   )
  )

;; definition for method 3 of type generic-tie-run-control
(defmethod inspect ((this generic-tie-run-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-run-control)
  (format #t "~1Tskip-bp2: ~D~%" (-> this skip-bp2))
  (format #t "~1Tskip-ips: ~D~%" (-> this skip-ips))
  (format #t "~1Tgifbuf-skip: ~D~%" (-> this gifbuf-skip))
  (format #t "~1Tstrips: ~D~%" (-> this strips))
  (format #t "~1Ttarget-bp1: ~D~%" (-> this target-bp1))
  (format #t "~1Ttarget-bp2: ~D~%" (-> this target-bp2))
  (format #t "~1Ttarget-ip1: ~D~%" (-> this target-ip1))
  (format #t "~1Ttarget-ip2: ~D~%" (-> this target-ip2))
  (format #t "~1Ttarget-bps: ~D~%" (-> this target-bps))
  (format #t "~1Ttarget-ips: ~D~%" (-> this target-ips))
  (format #t "~1Tis-generic: ~D~%" (-> this is-generic))
  (format #t "~1Treserved: ~D~%" (-> this reserved))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-base-point
(deftype generic-tie-base-point (structure)
  ((data  uint16   8)
   (quad  uint128  :overlay-at (-> data 0))
   (x     int16    :overlay-at (-> data 0))
   (y     int16    :overlay-at (-> data 1))
   (z     int16    :overlay-at (-> data 2))
   (d0    int16    :overlay-at (-> data 3))
   (vtx   uint64   :overlay-at (-> data 0))
   (u     int16    :overlay-at (-> data 4))
   (v     int16    :overlay-at (-> data 5))
   (tex   uint32   :overlay-at (-> data 4))
   (w     int16    :overlay-at (-> data 6))
   (d1    int16    :overlay-at (-> data 7))
   )
  )

;; definition for method 3 of type generic-tie-base-point
;; INFO: Used lq/sq
(defmethod inspect ((this generic-tie-base-point))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-base-point)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Ty: ~D~%" (-> this y))
  (format #t "~1Tz: ~D~%" (-> this z))
  (format #t "~1Td0: ~D~%" (-> this d0))
  (format #t "~1Tvtx: ~D~%" (-> this vtx))
  (format #t "~1Tu: ~D~%" (-> this u))
  (format #t "~1Tv: ~D~%" (-> this v))
  (format #t "~1Ttex: ~D~%" (-> this tex))
  (format #t "~1Tw: ~D~%" (-> this w))
  (format #t "~1Td1: ~D~%" (-> this d1))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-bps
(deftype generic-tie-bps (structure)
  ((bp  generic-tie-base-point  4 :inline)
   )
  )

;; definition for method 3 of type generic-tie-bps
(defmethod inspect ((this generic-tie-bps))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-bps)
  (format #t "~1Tbp[4] @ #x~X~%" (-> this bp))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-interp-point
(deftype generic-tie-interp-point (structure)
  ((data    uint16  12)
   (x       int16   :overlay-at (-> data 0))
   (y       int16   :overlay-at (-> data 1))
   (z       int16   :overlay-at (-> data 2))
   (d0      int16   :overlay-at (-> data 3))
   (vtx0    uint64  :overlay-at (-> data 0))
   (dx      int16   :overlay-at (-> data 4))
   (dy      int16   :overlay-at (-> data 5))
   (dz      int16   :overlay-at (-> data 6))
   (unused  int16   :overlay-at (-> data 7))
   (vtx1    uint64  :overlay-at (-> data 4))
   (u       int16   :overlay-at (-> data 8))
   (v       int16   :overlay-at (-> data 9))
   (tex     uint32  :overlay-at (-> data 8))
   (w       int16   :overlay-at (-> data 10))
   (d1      int16   :overlay-at (-> data 11))
   )
  :pack-me
  )

;; definition for method 3 of type generic-tie-interp-point
;; INFO: Used lq/sq
;; ERROR: failed type prop at 19: Could not figure out load: (set! a2 (l.q gp))
(defmethod inspect ((a0-0 generic-tie-interp-point))
  (local-vars
    (v0-0 object)
    (v0-1 object)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 none)
    (v0-13 none)
    (v0-14 none)
    (v0-15 none)
    (v0-16 none)
    (v0-17 none)
    (v0-18 generic-tie-interp-point)
    (a0-1 symbol)
    (a0-2 symbol)
    (a0-3 symbol)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a0-13 none)
    (a0-14 none)
    (a0-15 none)
    (a0-16 none)
    (a0-17 none)
    (a0-18 none)
    (a1-0 string)
    (a1-1 string)
    (a1-2 string)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-6 none)
    (a1-7 none)
    (a1-8 none)
    (a1-9 none)
    (a1-10 none)
    (a1-11 none)
    (a1-12 none)
    (a1-13 none)
    (a1-14 none)
    (a1-15 none)
    (a1-16 none)
    (a1-17 none)
    (a2-0 generic-tie-interp-point)
    (a2-1 (pointer uint16))
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a2-5 none)
    (a2-6 none)
    (a2-7 none)
    (a2-8 none)
    (a2-9 none)
    (a2-10 none)
    (a2-11 none)
    (a2-12 none)
    (a2-13 none)
    (a2-14 none)
    (a2-15 none)
    (a2-16 none)
    (a2-17 none)
    (a3-0 symbol)
    (t9-0 (function _varargs_ object))
    (t9-1 (function _varargs_ object))
    (t9-2 (function _varargs_ object))
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (t9-12 none)
    (t9-13 none)
    (t9-14 none)
    (t9-15 none)
    (t9-16 none)
    (t9-17 none)
    )
  (if (begin (not a0-0))
      (begin (set! a0-0 a0-0) (goto cfg-4))
      )
  (set! t9-0 format)
  (set! a0-1 #t)
  (set! a1-0 L144)
  (set! a2-0 a0-0)
  (set! a3-0 'generic-tie-interp-point)
  (call! a0-1 a1-0 a2-0 a3-0)
  (set! t9-1 format)
  (set! a0-2 #t)
  (set! a1-1 L109)
  (set! a2-1 (-> a0-0 data))
  (call! a0-2 a1-1 a2-1)
  (set! t9-2 format)
  (set! a0-3 #t)
  (set! a1-2 L121)
  (set! a2-2 (the-as none (l.q a0-0)))
  (call!)
  (set! t9-3 (the-as none format))
  (set! a0-4 (the-as none #t))
  (set! a1-3 (the-as none L120))
  (set! a2-3 (the-as none (-> a0-0 x)))
  (call!)
  (set! t9-4 (the-as none format))
  (set! a0-5 (the-as none #t))
  (set! a1-4 (the-as none L119))
  (set! a2-4 (the-as none (-> a0-0 y)))
  (call!)
  (set! t9-5 (the-as none format))
  (set! a0-6 (the-as none #t))
  (set! a1-5 (the-as none L118))
  (set! a2-5 (the-as none (-> a0-0 z)))
  (call!)
  (set! t9-6 (the-as none format))
  (set! a0-7 (the-as none #t))
  (set! a1-6 (the-as none L117))
  (set! a2-6 (the-as none (-> a0-0 d0)))
  (call!)
  (set! t9-7 (the-as none format))
  (set! a0-8 (the-as none #t))
  (set! a1-7 (the-as none L108))
  (set! a2-7 (the-as none (-> a0-0 vtx0)))
  (call!)
  (set! t9-8 (the-as none format))
  (set! a0-9 (the-as none #t))
  (set! a1-8 (the-as none L107))
  (set! a2-8 (the-as none (-> a0-0 dx)))
  (call!)
  (set! t9-9 (the-as none format))
  (set! a0-10 (the-as none #t))
  (set! a1-9 (the-as none L106))
  (set! a2-9 (the-as none (-> a0-0 dy)))
  (call!)
  (set! t9-10 (the-as none format))
  (set! a0-11 (the-as none #t))
  (set! a1-10 (the-as none L105))
  (set! a2-10 (the-as none (-> a0-0 dz)))
  (call!)
  (set! t9-11 (the-as none format))
  (set! a0-12 (the-as none #t))
  (set! a1-11 (the-as none L104))
  (set! a2-11 (the-as none (-> a0-0 unused)))
  (call!)
  (set! t9-12 (the-as none format))
  (set! a0-13 (the-as none #t))
  (set! a1-12 (the-as none L103))
  (set! a2-12 (the-as none (-> a0-0 vtx1)))
  (call!)
  (set! t9-13 (the-as none format))
  (set! a0-14 (the-as none #t))
  (set! a1-13 (the-as none L115))
  (set! a2-13 (the-as none (-> a0-0 u)))
  (call!)
  (set! t9-14 (the-as none format))
  (set! a0-15 (the-as none #t))
  (set! a1-14 (the-as none L114))
  (set! a2-14 (the-as none (-> a0-0 v)))
  (call!)
  (set! t9-15 (the-as none format))
  (set! a0-16 (the-as none #t))
  (set! a1-15 (the-as none L113))
  (set! a2-15 (the-as none (-> a0-0 tex)))
  (call!)
  (set! t9-16 (the-as none format))
  (set! a0-17 (the-as none #t))
  (set! a1-16 (the-as none L112))
  (set! a2-16 (the-as none (-> a0-0 w)))
  (call!)
  (set! t9-17 (the-as none format))
  (set! a0-18 (the-as none #t))
  (set! a1-17 (the-as none L111))
  (set! a2-17 (the-as none (-> a0-0 d1)))
  (call!)
  (label cfg-4)
  (set! v0-18 a0-0)
  (ret-value v0-18)
  )

;; definition of type generic-tie-ips
(deftype generic-tie-ips (structure)
  ((ip  generic-tie-interp-point  2 :inline)
   )
  )

;; definition for method 3 of type generic-tie-ips
(defmethod inspect ((this generic-tie-ips))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-ips)
  (format #t "~1Tip[2] @ #x~X~%" (-> this ip))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-header
(deftype generic-tie-header (structure)
  ((effect               uint8)
   (interp-table-size    uint8)
   (num-bps              uint8)
   (num-ips              uint8)
   (tint-color           uint32)
   (index-table-offset   uint16)
   (kick-table-offset    uint16)
   (normal-table-offset  uint16)
   (interp-table-offset  uint16)
   (gsf-header           gsf-header  :inline)
   )
  )

;; definition for method 3 of type generic-tie-header
(defmethod inspect ((this generic-tie-header))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-header)
  (format #t "~1Teffect: ~D~%" (-> this effect))
  (format #t "~1Tinterp-table-size: ~D~%" (-> this interp-table-size))
  (format #t "~1Tnum-bps: ~D~%" (-> this num-bps))
  (format #t "~1Tnum-ips: ~D~%" (-> this num-ips))
  (format #t "~1Ttint-color: ~D~%" (-> this tint-color))
  (format #t "~1Tindex-table-offset: ~D~%" (-> this index-table-offset))
  (format #t "~1Tkick-table-offset: ~D~%" (-> this kick-table-offset))
  (format #t "~1Tnormal-table-offset: ~D~%" (-> this normal-table-offset))
  (format #t "~1Tinterp-table-offset: ~D~%" (-> this interp-table-offset))
  (format #t "~1Tgsf-header: #<gsf-header @ #x~X>~%" (-> this gsf-header))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-matrix
(deftype generic-tie-matrix (structure)
  ((matrix  matrix  :inline)
   (morph   vector  :inline)
   (fog     qword   :inline)
   )
  )

;; definition for method 3 of type generic-tie-matrix
(defmethod inspect ((this generic-tie-matrix))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-matrix)
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tmorph: #<vector @ #x~X>~%" (-> this morph))
  (format #t "~1Tfog: #<qword @ #x~X>~%" (-> this fog))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-normal
(deftype generic-tie-normal (structure)
  ((x      int8)
   (y      int8)
   (z      int8)
   (dummy  int8)
   )
  )

;; definition for method 3 of type generic-tie-normal
(defmethod inspect ((this generic-tie-normal))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-normal)
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Ty: ~D~%" (-> this y))
  (format #t "~1Tz: ~D~%" (-> this z))
  (format #t "~1Tdummy: ~D~%" (-> this dummy))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-control
(deftype generic-tie-control (structure)
  ((ptr-palette    uint32)
   (ptr-shaders    uint32)
   (ptr-runctrl    generic-tie-run-control)
   (ptr-verts      uint32)
   (ptr-generic    generic-tie-header)
   (ptr-dps        uint32)
   (ptr-kicks      uint32)
   (ptr-normals    uint32)
   (ptr-interp     uint32)
   (ptr-mtxs       generic-tie-matrix)
   (ptr-cinds      uint32)
   (next-instance  uint32)
   (next-model     uint32)
   (next-is-model  uint32)
   (tie-type       uint32)
   )
  )

;; definition for method 3 of type generic-tie-control
(defmethod inspect ((this generic-tie-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-control)
  (format #t "~1Tptr-palette: #x~X~%" (-> this ptr-palette))
  (format #t "~1Tptr-shaders: #x~X~%" (-> this ptr-shaders))
  (format #t "~1Tptr-runctrl: #<generic-tie-run-control @ #x~X>~%" (-> this ptr-runctrl))
  (format #t "~1Tptr-verts: #x~X~%" (-> this ptr-verts))
  (format #t "~1Tptr-generic: #<generic-tie-header @ #x~X>~%" (-> this ptr-generic))
  (format #t "~1Tptr-dps: #x~X~%" (-> this ptr-dps))
  (format #t "~1Tptr-kicks: #x~X~%" (-> this ptr-kicks))
  (format #t "~1Tptr-normals: #x~X~%" (-> this ptr-normals))
  (format #t "~1Tptr-interp: #x~X~%" (-> this ptr-interp))
  (format #t "~1Tptr-mtxs: #<generic-tie-matrix @ #x~X>~%" (-> this ptr-mtxs))
  (format #t "~1Tptr-cinds: #x~X~%" (-> this ptr-cinds))
  (format #t "~1Tnext-instance: #x~X~%" (-> this next-instance))
  (format #t "~1Tnext-model: #x~X~%" (-> this next-model))
  (format #t "~1Tnext-is-model: ~D~%" (-> this next-is-model))
  (format #t "~1Ttie-type: ~D~%" (-> this tie-type))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-stats
(deftype generic-tie-stats (structure)
  ((num-bps        uint32)
   (num-ips        uint32)
   (num-dps        uint32)
   (num-shaders    uint32)
   (num-models     uint32)
   (num-instances  uint32)
   (num-waits      uint32)
   (num-qwc        uint32)
   (max-qwc        uint32)
   )
  )

;; definition for method 3 of type generic-tie-stats
(defmethod inspect ((this generic-tie-stats))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-stats)
  (format #t "~1Tnum-bps: ~D~%" (-> this num-bps))
  (format #t "~1Tnum-ips: ~D~%" (-> this num-ips))
  (format #t "~1Tnum-dps: ~D~%" (-> this num-dps))
  (format #t "~1Tnum-shaders: ~D~%" (-> this num-shaders))
  (format #t "~1Tnum-models: ~D~%" (-> this num-models))
  (format #t "~1Tnum-instances: ~D~%" (-> this num-instances))
  (format #t "~1Tnum-waits: ~D~%" (-> this num-waits))
  (format #t "~1Tnum-qwc: ~D~%" (-> this num-qwc))
  (format #t "~1Tmax-qwc: ~D~%" (-> this max-qwc))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-calls
(deftype generic-tie-calls (structure)
  ((generic-prepare-dma-double  basic)
   (generic-envmap-dproc        basic)
   (generic-interp-dproc        basic)
   (generic-no-light-dproc      basic)
   )
  :pack-me
  )

;; definition for method 3 of type generic-tie-calls
(defmethod inspect ((this generic-tie-calls))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-calls)
  (format #t "~1Tgeneric-prepare-dma-double: ~A~%" (-> this generic-prepare-dma-double))
  (format #t "~1Tgeneric-envmap-dproc: ~A~%" (-> this generic-envmap-dproc))
  (format #t "~1Tgeneric-interp-dproc: ~A~%" (-> this generic-interp-dproc))
  (format #t "~1Tgeneric-no-light-dproc: ~A~%" (-> this generic-no-light-dproc))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-shadow
(deftype generic-tie-shadow (structure)
  ((out-buf       gsf-buffer)
   (cur-buf       uint32)
   (tie-type      int32)
   (ptr-inst      uint32)
   (ptr-buf       uint32)
   (inst-xor      int32)
   (end-of-chain  uint32)
   (write-limit   uint32)
   (calls         generic-tie-calls  :inline)
   )
  :pack-me
  )

;; definition for method 3 of type generic-tie-shadow
(defmethod inspect ((this generic-tie-shadow))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-shadow)
  (format #t "~1Tout-buf: #<gsf-buffer @ #x~X>~%" (-> this out-buf))
  (format #t "~1Tcur-buf: #x~X~%" (-> this cur-buf))
  (format #t "~1Ttie-type: ~D~%" (-> this tie-type))
  (format #t "~1Tptr-inst: #x~X~%" (-> this ptr-inst))
  (format #t "~1Tptr-buf: #x~X~%" (-> this ptr-buf))
  (format #t "~1Tinst-xor: ~D~%" (-> this inst-xor))
  (format #t "~1Tend-of-chain: ~D~%" (-> this end-of-chain))
  (format #t "~1Twrite-limit: ~D~%" (-> this write-limit))
  (format #t "~1Tcalls: #<generic-tie-calls @ #x~X>~%" (-> this calls))
  (label cfg-4)
  this
  )

;; definition of type generic-tie-work
(deftype generic-tie-work (structure)
  ((control      generic-tie-control   :inline)
   (interp-job   generic-interp-job    :inline)
   (shadow       generic-tie-shadow    :inline)
   (input-a      generic-tie-input     :inline)
   (input-b      generic-tie-input     :inline)
   (inst-buf     generic-tie-instance  :inline)
   (palette-buf  rgba                  128)
   )
  )

;; definition for method 3 of type generic-tie-work
(defmethod inspect ((this generic-tie-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-tie-work)
  (format #t "~1Tcontrol: #<generic-tie-control @ #x~X>~%" (-> this control))
  (format #t "~1Tinterp-job: #<generic-interp-job @ #x~X>~%" (-> this interp-job))
  (format #t "~1Tshadow: #<generic-tie-shadow @ #x~X>~%" (-> this shadow))
  (format #t "~1Tinput-a: #<generic-tie-input @ #x~X>~%" (-> this input-a))
  (format #t "~1Tinput-b: #<generic-tie-input @ #x~X>~%" (-> this input-b))
  (format #t "~1Tinst-buf: #<generic-tie-instance @ #x~X>~%" (-> this inst-buf))
  (format #t "~1Tpalette-buf[128] @ #x~X~%" (-> this palette-buf))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




