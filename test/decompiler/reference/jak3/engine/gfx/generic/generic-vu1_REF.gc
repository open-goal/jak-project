;;-*-Lisp-*-
(in-package goal)

;; definition for symbol generic-vu1-block, type vu-function
(define generic-vu1-block (new 'static 'vu-function :length #x6de :qlength #x36f))

;; definition for function generic-setup-constants
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun generic-setup-constants ((arg0 generic-constants))
  (let ((v1-0 *math-camera*))
    (set-vector! (-> arg0 fog) (-> v1-0 pfog0) (-> v1-0 fog-min) (-> v1-0 fog-max) 3072.0)
    (set! (-> arg0 adgif tag) (new 'static 'gif-tag64 :nloop #x7 :nreg #x1))
    (set! (-> arg0 adgif regs) (new 'static 'gif-tag-regs :regs0 (gif-reg-id a+d)))
    (set! (-> arg0 hvdf-offset quad) (-> v1-0 hvdf-off quad))
    (set! (-> arg0 hmge-scale quad) (-> v1-0 hmge-scale quad))
    (set! (-> arg0 invh-scale quad) (-> v1-0 inv-hmge-scale quad))
    (set! (-> arg0 guard quad) (-> v1-0 guard quad))
    )
  (set! (-> arg0 flush dword 0) (the-as uint #x3f80000080808080))
  (set! (-> arg0 flush dword 1) (the-as uint 1))
  (none)
  )

;; definition for function generic-add-constants
;; WARN: Return type mismatch pointer vs none.
(defun generic-add-constants ((arg0 dma-buffer))
  (let* ((a1-0 8)
         (v1-0 arg0)
         (a0-1 (the-as object (-> v1-0 base)))
         )
    (set! (-> (the-as dma-packet a0-1) dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc a1-0))
    (set! (-> (the-as dma-packet a0-1) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> (the-as dma-packet a0-1) vif1)
          (new 'static 'vif-tag :imm #x381 :cmd (vif-cmd unpack-v4-32) :num a1-0)
          )
    (set! (-> v1-0 base) (&+ (the-as pointer a0-1) 16))
    )
  (generic-setup-constants (the-as generic-constants (-> arg0 base)))
  (&+! (-> arg0 base) 128)
  (none)
  )

;; definition for function generic-setup-shrub-constants
;; WARN: Return type mismatch int vs none.
(defun generic-setup-shrub-constants ((arg0 generic-shrub-constants) (arg1 int) (arg2 int) (arg3 int))
  (set! (-> arg0 shrub-giftag qword vector4w x) (logior #x30004000 (shr (shl arg3 53) 38)))
  (set! (-> arg0 shrub-giftag qword vector4w y) (logior #x30004000 (shr (shl arg2 53) 38)))
  (set! (-> arg0 shrub-giftag qword vector4w z) 1042)
  (set! (-> arg0 shrub-giftag qword vector4w w) 0)
  (set! (-> arg0 shrub-adnop dword 0) (the-as uint arg1))
  (set! (-> arg0 shrub-adnop dword 1) (the-as uint 71))
  (none)
  )

;; definition for function generic-add-shrub-constants
;; WARN: Return type mismatch pointer vs none.
(defun generic-add-shrub-constants ((arg0 dma-buffer) (arg1 int) (arg2 int) (arg3 int))
  (let ((v1-0 2)
        (a0-1 *display*)
        (t0-0 64)
        )
    (+! (-> a0-1 mem-reserve-size) t0-0)
    (when (not (-> a0-1 dma-buffer-overflow))
      (let ((t2-0 (-> a0-1 frames (-> a0-1 on-screen) global-buf)))
        (if (< (-> t2-0 real-buffer-end) (the-as int (&+ (-> t2-0 base) t0-0)))
            (set! (-> a0-1 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> a0-1 dma-buffer-overflow))
        (let* ((a0-3 arg0)
               (t0-4 (the-as object (-> a0-3 base)))
               )
          (set! (-> (the-as dma-packet t0-4) dma) (new 'static 'dma-tag :id (dma-tag-id cnt) :qwc v1-0))
          (set! (-> (the-as dma-packet t0-4) vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
          (set! (-> (the-as dma-packet t0-4) vif1)
                (new 'static 'vif-tag :imm #x389 :cmd (vif-cmd unpack-v4-32) :num v1-0)
                )
          (set! (-> a0-3 base) (&+ (the-as pointer t0-4) 16))
          )
        )
      )
    )
  (generic-setup-shrub-constants (the-as generic-shrub-constants (-> arg0 base)) arg1 arg2 arg3)
  (&+! (-> arg0 base) 32)
  (none)
  )

;; definition for function generic-init-buf
;; WARN: Return type mismatch int vs none.
(defun generic-init-buf ((arg0 dma-buffer) (arg1 gs-zbuf))
  (let ((v1-0 *display*)
        (a0-6 (+ (* (+ (/ (-> generic-vu1-block qlength) 127) 1) 16) 208))
        )
    (+! (-> v1-0 mem-reserve-size) a0-6)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((a2-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> a2-0 real-buffer-end) (the-as int (&+ (-> a2-0 base) a0-6)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (dma-buffer-add-vu-function arg0 generic-vu1-block 1)
        (dma-buffer-add-gs-set arg0 (zbuf-1 arg1))
        (generic-add-constants arg0)
        (let* ((v1-5 arg0)
               (a0-18 (the-as object (-> v1-5 base)))
               )
          (set! (-> (the-as (pointer int64) a0-18)) #x10000002)
          (set! (-> (the-as dma-packet a0-18) vif0) (new 'static 'vif-tag :cmd (vif-cmd mscalf) :msk #x1))
          (set! (-> (the-as dma-packet a0-18) vif1) (new 'static 'vif-tag :cmd (vif-cmd stmod)))
          (set! (-> v1-5 base) (&+ (the-as pointer a0-18) 16))
          )
        (let ((v1-6 (-> arg0 base)))
          (set! (-> (the-as (pointer int32) v1-6)) #x3000000)
          (set! (-> (the-as (pointer uint32) v1-6) 1) (the-as uint #x2000000))
          (set! (-> (the-as (pointer uint32) v1-6) 2) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 3) (the-as uint #x30000000))
          (set! (-> (the-as (pointer uint32) v1-6) 4) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 5) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 6) (the-as uint 0))
          (set! (-> (the-as (pointer uint32) v1-6) 7) (the-as uint 0))
          (set! (-> arg0 base) (&+ v1-6 32))
          )
        )
      )
    )
  0
  (none)
  )

;; definition for function generic-vu1-init-buf
;; WARN: Return type mismatch int vs none.
(defun generic-vu1-init-buf ((arg0 bucket-id) (arg1 gs-zbuf))
  (let ((v1-0 *display*)
        (a2-0 16)
        )
    (+! (-> v1-0 mem-reserve-size) a2-0)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((t0-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> t0-0 real-buffer-end) (the-as int (&+ (-> t0-0 base) a2-0)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (let ((gp-0 (-> *display* frames (-> *display* on-screen) bucket-group arg0)))
          (when (!= gp-0 (-> gp-0 last))
            (let* ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf))
                   (s5-3 (-> s4-0 base))
                   )
              (generic-init-buf s4-0 arg1)
              (let ((v1-14 (the-as object (-> s4-0 base))))
                (set! (-> (the-as dma-packet v1-14) dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (-> gp-0 next)))
                (set! (-> (the-as dma-packet v1-14) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-14) vif1) (new 'static 'vif-tag))
                (set! (-> s4-0 base) (&+ (the-as pointer v1-14) 16))
                )
              (set! (-> gp-0 next) (the-as uint s5-3))
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

;; definition for function generic-vu1-init-buf-special
;; WARN: Return type mismatch int vs none.
(defun generic-vu1-init-buf-special ((arg0 bucket-id) (arg1 gs-zbuf))
  (let ((v1-0 *display*)
        (a1-1 16)
        )
    (+! (-> v1-0 mem-reserve-size) a1-1)
    (when (not (-> v1-0 dma-buffer-overflow))
      (let ((a3-0 (-> v1-0 frames (-> v1-0 on-screen) global-buf)))
        (if (< (-> a3-0 real-buffer-end) (the-as int (&+ (-> a3-0 base) a1-1)))
            (set! (-> v1-0 dma-buffer-overflow) #t)
            )
        )
      (when (not (-> v1-0 dma-buffer-overflow))
        (let ((s5-0 (-> *display* frames (-> *display* on-screen) bucket-group arg0)))
          (when (!= s5-0 (-> s5-0 last))
            (let* ((s3-0 (-> *display* frames (-> *display* on-screen) global-buf))
                   (s4-3 (-> s3-0 base))
                   )
              (fx-copy-buf s3-0)
              (generic-init-buf s3-0 arg1)
              (let ((v1-14 (the-as object (-> s3-0 base))))
                (set! (-> (the-as dma-packet v1-14) dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (-> s5-0 next)))
                (set! (-> (the-as dma-packet v1-14) vif0) (new 'static 'vif-tag))
                (set! (-> (the-as dma-packet v1-14) vif1) (new 'static 'vif-tag))
                (set! (-> s3-0 base) (&+ (the-as pointer v1-14) 16))
                )
              (set! (-> s5-0 next) (the-as uint s4-3))
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

;; definition for function generic-vu1-init-buffers
(defun generic-vu1-init-buffers ()
  (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask generic))
    (let ((s5-0 #x1000130))
      (let ((gp-0 (the-as uint #x101000130)))
        (generic-vu1-init-buf (bucket-id gmerc-l0-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l1-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l2-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l3-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l4-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l5-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l6-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l7-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l8-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l9-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-lcom-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l0-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l1-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l2-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l3-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l4-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l5-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l6-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l7-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l8-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l9-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-lcom-tfrag) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l0-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l1-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l2-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l3-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l4-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l5-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l6-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l7-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l8-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l9-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-lcom-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l0-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l1-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l2-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l3-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l4-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l5-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l6-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l7-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l8-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l9-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-lcom-pris) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l0-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l1-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l2-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l3-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l4-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l5-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l6-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l7-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l8-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l9-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-lcom-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l0-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l1-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l2-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l3-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l4-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l5-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l6-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l7-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l8-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l9-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-lcom-shrub) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l0-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l1-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l2-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l3-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l4-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l5-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l6-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l7-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l8-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l9-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l0-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l1-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l2-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l3-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l4-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l5-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l6-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l7-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l8-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l9-alpha) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l0-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l1-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l2-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l3-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l4-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l5-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l6-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l7-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l8-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l9-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-lcom-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l0-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l1-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l2-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l3-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l4-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l5-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l6-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l7-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l8-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l9-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc2-lcom-pris2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id gmerc-l0-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l1-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l2-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l3-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l4-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l5-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l6-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l7-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l8-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-l9-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc-lcom-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l0-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l1-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l2-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l3-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l4-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l5-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l6-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l7-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l8-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-l9-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id gmerc2-lcom-water) (the-as gs-zbuf gp-0))
        (generic-vu1-init-buf (bucket-id generic-sprite-1) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id generic-sprite-2) (the-as gs-zbuf s5-0))
        (generic-vu1-init-buf (bucket-id generic-sprite-3) (the-as gs-zbuf gp-0))
        )
      (generic-vu1-init-buf-special (bucket-id generic-warp) (the-as gs-zbuf s5-0))
      )
    )
  (none)
  )
