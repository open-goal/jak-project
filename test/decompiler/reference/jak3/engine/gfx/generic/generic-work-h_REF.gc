;;-*-Lisp-*-
(in-package goal)

;; definition of type generic-input-buffer
(deftype generic-input-buffer (structure)
  ((data  uint128            473)
   (merc  generic-merc-work  :inline :overlay-at (-> data 0))
   (tie   generic-tie-work   :inline :overlay-at (-> data 0))
   )
  )

;; definition for method 3 of type generic-input-buffer
(defmethod inspect ((this generic-input-buffer))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-input-buffer)
  (format #t "~1Tdata[473] @ #x~X~%" (-> this data))
  (format #t "~1Tmerc: #<generic-merc-work @ #x~X>~%" (-> this data))
  (format #t "~1Ttie: #<generic-tie-work @ #x~X>~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type generic-debug
(deftype generic-debug (structure)
  ((locks       uint32  4)
   (timer       uint32  32)
   (count       uint32  32)
   (vps         uint32  32)
   (buffer      int32)
   (start-addr  int32)
   (lock        int32)
   )
  )

;; definition for method 3 of type generic-debug
(defmethod inspect ((this generic-debug))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-debug)
  (format #t "~1Tlocks[4] @ #x~X~%" (-> this locks))
  (format #t "~1Ttimer[32] @ #x~X~%" (-> this timer))
  (format #t "~1Tcount[32] @ #x~X~%" (-> this count))
  (format #t "~1Tvps[32] @ #x~X~%" (-> this vps))
  (format #t "~1Tbuffer: ~D~%" (-> this buffer))
  (format #t "~1Tstart-addr: ~D~%" (-> this start-addr))
  (format #t "~1Tlock: ~D~%" (-> this lock))
  (label cfg-4)
  this
  )

;; definition of type generic-vu1-header
(deftype generic-vu1-header (structure)
  ((matrix   matrix           :inline)
   (strgif   generic-gif-tag  :inline)
   (adcmds   gs-adcmd         2 :inline)
   (adnop1   gs-adcmd         :inline :overlay-at (-> adcmds 0))
   (adnop2   gs-adcmd         :inline :overlay-at (-> adcmds 1))
   (dps      uint16                   :overlay-at (-> adcmds 0 word 3))
   (kickoff  uint16                   :overlay-at (-> adnop2 w))
   (strips   uint16                   :overlay-at (-> strgif data 3))
   )
  )

;; definition for method 3 of type generic-vu1-header
(defmethod inspect ((this generic-vu1-header))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-vu1-header)
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tstrgif: #<generic-gif-tag @ #x~X>~%" (-> this strgif))
  (format #t "~1Tadcmds[2] @ #x~X~%" (-> this adcmds))
  (format #t "~1Tadnop1: #<gs-adcmd @ #x~X>~%" (-> this adcmds))
  (format #t "~1Tadnop2: #<gs-adcmd @ #x~X>~%" (-> this adnop2))
  (format #t "~1Tdps: ~D~%" (-> this dps))
  (format #t "~1Tkickoff: ~D~%" (-> this kickoff))
  (format #t "~1Tstrips: ~D~%" (-> this strips))
  (label cfg-4)
  this
  )

;; definition of type generic-vu1-texbuf
(deftype generic-vu1-texbuf (structure)
  ((header  generic-vu1-header  :inline)
   (shader  uint32              :dynamic)
   )
  )

;; definition for method 3 of type generic-vu1-texbuf
(defmethod inspect ((this generic-vu1-texbuf))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-vu1-texbuf)
  (format #t "~1Theader: #<generic-vu1-header @ #x~X>~%" (-> this header))
  (format #t "~1Tshader[0] @ #x~X~%" (-> this shader))
  (label cfg-4)
  this
  )

;; definition of type generic-texbuf
(deftype generic-texbuf (structure)
  ((tag     dma-packet          :inline)
   (header  generic-vu1-header  :inline)
   (shader  uint32              :dynamic)
   )
  )

;; definition for method 3 of type generic-texbuf
(defmethod inspect ((this generic-texbuf))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-texbuf)
  (format #t "~1Ttag: #<dma-packet @ #x~X>~%" (-> this tag))
  (format #t "~1Theader: #<generic-vu1-header @ #x~X>~%" (-> this header))
  (format #t "~1Tshader[0] @ #x~X~%" (-> this shader))
  (label cfg-4)
  this
  )

;; definition of type generic-effect-work
(deftype generic-effect-work (structure)
  ((consts    generic-consts   :inline)
   (storage   generic-storage  :inline)
   (storage2  generic-storage  :inline)
   (lights    vu-lights        :inline)
   )
  )

;; definition for method 3 of type generic-effect-work
(defmethod inspect ((this generic-effect-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-effect-work)
  (format #t "~1Tconsts: #<generic-consts @ #x~X>~%" (-> this consts))
  (format #t "~1Tstorage: #<generic-storage @ #x~X>~%" (-> this storage))
  (format #t "~1Tstorage2: #<generic-storage @ #x~X>~%" (-> this storage2))
  (format #t "~1Tlights: #<vu-lights @ #x~X>~%" (-> this lights))
  (label cfg-4)
  this
  )

;; definition of type generic-effect-buffer
(deftype generic-effect-buffer (structure)
  ((outbuf-0  uint8                3552)
   (work      generic-effect-work  :inline)
   (outbuf-1  uint8                3552)
   )
  )

;; definition for method 3 of type generic-effect-buffer
(defmethod inspect ((this generic-effect-buffer))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-effect-buffer)
  (format #t "~1Toutbuf-0[3552] @ #x~X~%" (-> this outbuf-0))
  (format #t "~1Twork: #<generic-effect-work @ #x~X>~%" (-> this work))
  (format #t "~1Toutbuf-1[3552] @ #x~X~%" (-> this outbuf-1))
  (label cfg-4)
  this
  )

;; definition of type generic-work
(deftype generic-work (structure)
  ((saves    generic-saves          :inline)
   (storage  generic-storage        :inline)
   (in-buf   generic-input-buffer   :inline)
   (fx-buf   generic-effect-buffer  :inline)
   )
  )

;; definition for method 3 of type generic-work
(defmethod inspect ((this generic-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'generic-work)
  (format #t "~1Tsaves: #<generic-saves @ #x~X>~%" (-> this saves))
  (format #t "~1Tstorage: #<generic-storage @ #x~X>~%" (-> this storage))
  (format #t "~1Tin-buf: #<generic-input-buffer @ #x~X>~%" (-> this in-buf))
  (format #t "~1Tfx-buf: #<generic-effect-buffer @ #x~X>~%" (-> this fx-buf))
  (label cfg-4)
  this
  )

;; definition for symbol *generic-debug*, type generic-debug
(define *generic-debug* (new 'global 'generic-debug))

;; failed to figure out what this is:
0




