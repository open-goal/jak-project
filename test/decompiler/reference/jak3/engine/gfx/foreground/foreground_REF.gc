;;-*-Lisp-*-
(in-package goal)

;; definition for symbol foreground-vu0-block, type vu-function
(define foreground-vu0-block (new 'static 'vu-function :length 9 :qlength 5))

;; definition for symbol *bucket-map*, type (pointer bucket-id-16)
(define *bucket-map* (new 'static 'array bucket-id-16 462
                       (bucket-id-16 merc-l0-tfrag)
                       (bucket-id-16 emerc-l0-tfrag)
                       (bucket-id-16 gmerc-l0-tfrag)
                       (bucket-id-16 tex-l0-tfrag)
                       (bucket-id-16 gmerc2-l0-tfrag)
                       (bucket-id-16 bucket0)
                       (bucket-id-16 merc-l0-pris)
                       (bucket-id-16 emerc-l0-pris)
                       (bucket-id-16 gmerc-l0-pris)
                       (bucket-id-16 tex-l0-pris)
                       (bucket-id-16 gmerc2-l0-pris)
                       (bucket-id-16 bucket32)
                       (bucket-id-16 merc-l0-shrub)
                       (bucket-id-16 emerc-l0-shrub)
                       (bucket-id-16 gmerc-l0-shrub)
                       (bucket-id-16 tex-l0-shrub)
                       (bucket-id-16 gmerc2-l0-shrub)
                       (bucket-id-16 tex-l0-tfrag)
                       (bucket-id-16 merc-l0-alpha)
                       (bucket-id-16 emerc-l0-alpha)
                       (bucket-id-16 gmerc-l0-alpha)
                       (bucket-id-16 tex-l0-alpha)
                       (bucket-id-16 gmerc2-l0-alpha)
                       (bucket-id-16 bucket20)
                       (bucket-id-16 merc-l0-water)
                       (bucket-id-16 merc-l0-water)
                       (bucket-id-16 gmerc-l0-water)
                       (bucket-id-16 tex-l0-water)
                       (bucket-id-16 gmerc2-l0-water)
                       (bucket-id-16 emerc-l3-tfrag)
                       (bucket-id-16 merc-l0-pris)
                       (bucket-id-16 emerc-l0-pris)
                       (bucket-id-16 gmerc-l0-pris)
                       (bucket-id-16 tex-l0-pris)
                       (bucket-id-16 gmerc2-l0-pris)
                       (bucket-id-16 bucket32)
                       (bucket-id-16 merc-l0-pris2)
                       (bucket-id-16 emerc-l0-pris2)
                       (bucket-id-16 gmerc-l0-pris2)
                       (bucket-id-16 tex-l0-pris2)
                       (bucket-id-16 gmerc2-l0-pris2)
                       (bucket-id-16 gmerc-l2-tfrag)
                       (bucket-id-16 merc-l1-tfrag)
                       (bucket-id-16 emerc-l1-tfrag)
                       (bucket-id-16 gmerc-l1-tfrag)
                       (bucket-id-16 tex-l1-tfrag)
                       (bucket-id-16 gmerc2-l1-tfrag)
                       (bucket-id-16 bucket1)
                       (bucket-id-16 merc-l1-pris)
                       (bucket-id-16 emerc-l1-pris)
                       (bucket-id-16 gmerc-l1-pris)
                       (bucket-id-16 tex-l1-pris)
                       (bucket-id-16 gmerc2-l1-pris)
                       (bucket-id-16 gmerc2-l1-tfrag)
                       (bucket-id-16 merc-l1-shrub)
                       (bucket-id-16 emerc-l1-shrub)
                       (bucket-id-16 gmerc-l1-shrub)
                       (bucket-id-16 tex-l1-shrub)
                       (bucket-id-16 gmerc2-l1-shrub)
                       (bucket-id-16 bucket11)
                       (bucket-id-16 merc-l1-alpha)
                       (bucket-id-16 emerc-l1-alpha)
                       (bucket-id-16 gmerc-l1-alpha)
                       (bucket-id-16 tex-l1-alpha)
                       (bucket-id-16 gmerc2-l1-alpha)
                       (bucket-id-16 gmerc2-l0-tfrag)
                       (bucket-id-16 merc-l1-water)
                       (bucket-id-16 merc-l1-water)
                       (bucket-id-16 gmerc-l1-water)
                       (bucket-id-16 tex-l1-water)
                       (bucket-id-16 gmerc2-l1-water)
                       (bucket-id-16 gmerc-l3-tfrag)
                       (bucket-id-16 merc-l1-pris)
                       (bucket-id-16 emerc-l1-pris)
                       (bucket-id-16 gmerc-l1-pris)
                       (bucket-id-16 tex-l1-pris)
                       (bucket-id-16 gmerc2-l1-pris)
                       (bucket-id-16 gmerc2-l1-tfrag)
                       (bucket-id-16 merc-l1-pris2)
                       (bucket-id-16 emerc-l1-pris2)
                       (bucket-id-16 gmerc-l1-pris2)
                       (bucket-id-16 tex-l1-pris2)
                       (bucket-id-16 gmerc2-l1-pris2)
                       (bucket-id-16 bucket44)
                       (bucket-id-16 merc-l2-tfrag)
                       (bucket-id-16 emerc-l2-tfrag)
                       (bucket-id-16 gmerc-l2-tfrag)
                       (bucket-id-16 tex-l2-tfrag)
                       (bucket-id-16 gmerc2-l2-tfrag)
                       (bucket-id-16 bucket2)
                       (bucket-id-16 merc-l2-pris)
                       (bucket-id-16 emerc-l2-pris)
                       (bucket-id-16 gmerc-l2-pris)
                       (bucket-id-16 tex-l2-pris)
                       (bucket-id-16 gmerc2-l2-pris)
                       (bucket-id-16 tex-l2-tfrag)
                       (bucket-id-16 merc-l2-shrub)
                       (bucket-id-16 emerc-l2-shrub)
                       (bucket-id-16 gmerc-l2-shrub)
                       (bucket-id-16 tex-l2-shrub)
                       (bucket-id-16 gmerc2-l2-shrub)
                       (bucket-id-16 bucket12)
                       (bucket-id-16 merc-l2-alpha)
                       (bucket-id-16 emerc-l2-alpha)
                       (bucket-id-16 gmerc-l2-alpha)
                       (bucket-id-16 tex-l2-alpha)
                       (bucket-id-16 gmerc2-l2-alpha)
                       (bucket-id-16 tex-l1-tfrag)
                       (bucket-id-16 merc-l2-water)
                       (bucket-id-16 merc-l2-water)
                       (bucket-id-16 gmerc-l2-water)
                       (bucket-id-16 tex-l2-water)
                       (bucket-id-16 gmerc2-l2-water)
                       (bucket-id-16 bucket56)
                       (bucket-id-16 merc-l2-pris)
                       (bucket-id-16 emerc-l2-pris)
                       (bucket-id-16 gmerc-l2-pris)
                       (bucket-id-16 tex-l2-pris)
                       (bucket-id-16 gmerc2-l2-pris)
                       (bucket-id-16 tex-l2-tfrag)
                       (bucket-id-16 merc-l2-pris2)
                       (bucket-id-16 emerc-l2-pris2)
                       (bucket-id-16 gmerc-l2-pris2)
                       (bucket-id-16 tex-l2-pris2)
                       (bucket-id-16 gmerc2-l2-pris2)
                       (bucket-id-16 gmerc2-l2-tfrag)
                       (bucket-id-16 merc-l3-tfrag)
                       (bucket-id-16 emerc-l3-tfrag)
                       (bucket-id-16 gmerc-l3-tfrag)
                       (bucket-id-16 tex-l3-tfrag)
                       (bucket-id-16 gmerc2-l3-tfrag)
                       (bucket-id-16 bucket3)
                       (bucket-id-16 merc-l3-pris)
                       (bucket-id-16 emerc-l3-pris)
                       (bucket-id-16 gmerc-l3-pris)
                       (bucket-id-16 tex-l3-pris)
                       (bucket-id-16 gmerc2-l3-pris)
                       (bucket-id-16 bucket35)
                       (bucket-id-16 merc-l3-shrub)
                       (bucket-id-16 emerc-l3-shrub)
                       (bucket-id-16 gmerc-l3-shrub)
                       (bucket-id-16 tex-l3-shrub)
                       (bucket-id-16 gmerc2-l3-shrub)
                       (bucket-id-16 bucket13)
                       (bucket-id-16 merc-l3-alpha)
                       (bucket-id-16 emerc-l3-alpha)
                       (bucket-id-16 gmerc-l3-alpha)
                       (bucket-id-16 tex-l3-alpha)
                       (bucket-id-16 gmerc2-l3-alpha)
                       (bucket-id-16 bucket23)
                       (bucket-id-16 merc-l3-water)
                       (bucket-id-16 merc-l3-water)
                       (bucket-id-16 gmerc-l3-water)
                       (bucket-id-16 tex-l3-water)
                       (bucket-id-16 gmerc2-l3-water)
                       (bucket-id-16 gmerc2-l3-tfrag)
                       (bucket-id-16 merc-l3-pris)
                       (bucket-id-16 emerc-l3-pris)
                       (bucket-id-16 gmerc-l3-pris)
                       (bucket-id-16 tex-l3-pris)
                       (bucket-id-16 gmerc2-l3-pris)
                       (bucket-id-16 bucket35)
                       (bucket-id-16 merc-l3-pris2)
                       (bucket-id-16 emerc-l3-pris2)
                       (bucket-id-16 gmerc-l3-pris2)
                       (bucket-id-16 tex-l3-pris2)
                       (bucket-id-16 gmerc2-l3-pris2)
                       (bucket-id-16 tex-l3-tfrag)
                       (bucket-id-16 merc-l4-tfrag)
                       (bucket-id-16 emerc-l4-tfrag)
                       (bucket-id-16 gmerc-l4-tfrag)
                       (bucket-id-16 tex-l4-tfrag)
                       (bucket-id-16 gmerc2-l4-tfrag)
                       (bucket-id-16 tex-lcom-sky-pre)
                       (bucket-id-16 merc-l4-pris)
                       (bucket-id-16 emerc-l4-pris)
                       (bucket-id-16 gmerc-l4-pris)
                       (bucket-id-16 tex-l4-pris)
                       (bucket-id-16 gmerc2-l4-pris)
                       (bucket-id-16 bucket36)
                       (bucket-id-16 merc-l4-shrub)
                       (bucket-id-16 emerc-l4-shrub)
                       (bucket-id-16 gmerc-l4-shrub)
                       (bucket-id-16 tex-l4-shrub)
                       (bucket-id-16 gmerc2-l4-shrub)
                       (bucket-id-16 bucket14)
                       (bucket-id-16 merc-l4-alpha)
                       (bucket-id-16 emerc-l4-alpha)
                       (bucket-id-16 gmerc-l4-alpha)
                       (bucket-id-16 tex-l4-alpha)
                       (bucket-id-16 gmerc2-l4-alpha)
                       (bucket-id-16 bucket24)
                       (bucket-id-16 merc-l4-water)
                       (bucket-id-16 merc-l4-water)
                       (bucket-id-16 gmerc-l4-water)
                       (bucket-id-16 tex-l4-water)
                       (bucket-id-16 gmerc2-l4-water)
                       (bucket-id-16 tex-l4-tfrag)
                       (bucket-id-16 merc-l4-pris)
                       (bucket-id-16 emerc-l4-pris)
                       (bucket-id-16 gmerc-l4-pris)
                       (bucket-id-16 tex-l4-pris)
                       (bucket-id-16 gmerc2-l4-pris)
                       (bucket-id-16 bucket36)
                       (bucket-id-16 merc-l4-pris2)
                       (bucket-id-16 emerc-l4-pris2)
                       (bucket-id-16 gmerc-l4-pris2)
                       (bucket-id-16 tex-l4-pris2)
                       (bucket-id-16 gmerc2-l4-pris2)
                       (bucket-id-16 bucket47)
                       (bucket-id-16 merc-l5-tfrag)
                       (bucket-id-16 emerc-l5-tfrag)
                       (bucket-id-16 gmerc-l5-tfrag)
                       (bucket-id-16 tex-l5-tfrag)
                       (bucket-id-16 gmerc2-l5-tfrag)
                       (bucket-id-16 bucket5)
                       (bucket-id-16 merc-l5-pris)
                       (bucket-id-16 emerc-l5-pris)
                       (bucket-id-16 gmerc-l5-pris)
                       (bucket-id-16 tex-l5-pris)
                       (bucket-id-16 gmerc2-l5-pris)
                       (bucket-id-16 bucket37)
                       (bucket-id-16 merc-l5-shrub)
                       (bucket-id-16 emerc-l5-shrub)
                       (bucket-id-16 gmerc-l5-shrub)
                       (bucket-id-16 tex-l5-shrub)
                       (bucket-id-16 gmerc2-l5-shrub)
                       (bucket-id-16 bucket15)
                       (bucket-id-16 merc-l5-alpha)
                       (bucket-id-16 emerc-l5-alpha)
                       (bucket-id-16 gmerc-l5-alpha)
                       (bucket-id-16 tex-l5-alpha)
                       (bucket-id-16 gmerc2-l5-alpha)
                       (bucket-id-16 bucket25)
                       (bucket-id-16 merc-l5-water)
                       (bucket-id-16 merc-l5-water)
                       (bucket-id-16 gmerc-l5-water)
                       (bucket-id-16 tex-l5-water)
                       (bucket-id-16 gmerc2-l5-water)
                       (bucket-id-16 bucket59)
                       (bucket-id-16 merc-l5-pris)
                       (bucket-id-16 emerc-l5-pris)
                       (bucket-id-16 gmerc-l5-pris)
                       (bucket-id-16 tex-l5-pris)
                       (bucket-id-16 gmerc2-l5-pris)
                       (bucket-id-16 bucket37)
                       (bucket-id-16 merc-l5-pris2)
                       (bucket-id-16 emerc-l5-pris2)
                       (bucket-id-16 gmerc-l5-pris2)
                       (bucket-id-16 tex-l5-pris2)
                       (bucket-id-16 gmerc2-l5-pris2)
                       (bucket-id-16 bucket48)
                       (bucket-id-16 merc-l6-tfrag)
                       (bucket-id-16 emerc-l6-tfrag)
                       (bucket-id-16 gmerc-l6-tfrag)
                       (bucket-id-16 tex-l6-tfrag)
                       (bucket-id-16 gmerc2-l6-tfrag)
                       (bucket-id-16 bucket6)
                       (bucket-id-16 merc-l6-pris)
                       (bucket-id-16 emerc-l6-pris)
                       (bucket-id-16 gmerc-l6-pris)
                       (bucket-id-16 tex-l6-pris)
                       (bucket-id-16 gmerc2-l6-pris)
                       (bucket-id-16 bucket38)
                       (bucket-id-16 merc-l6-shrub)
                       (bucket-id-16 emerc-l6-shrub)
                       (bucket-id-16 gmerc-l6-shrub)
                       (bucket-id-16 tex-l6-shrub)
                       (bucket-id-16 gmerc2-l6-shrub)
                       (bucket-id-16 bucket16)
                       (bucket-id-16 merc-l6-alpha)
                       (bucket-id-16 emerc-l6-alpha)
                       (bucket-id-16 gmerc-l6-alpha)
                       (bucket-id-16 tex-l6-alpha)
                       (bucket-id-16 gmerc2-l6-alpha)
                       (bucket-id-16 bucket26)
                       (bucket-id-16 merc-l6-water)
                       (bucket-id-16 merc-l6-water)
                       (bucket-id-16 gmerc-l6-water)
                       (bucket-id-16 tex-l6-water)
                       (bucket-id-16 gmerc2-l6-water)
                       (bucket-id-16 bucket60)
                       (bucket-id-16 merc-l6-pris)
                       (bucket-id-16 emerc-l6-pris)
                       (bucket-id-16 gmerc-l6-pris)
                       (bucket-id-16 tex-l6-pris)
                       (bucket-id-16 gmerc2-l6-pris)
                       (bucket-id-16 bucket38)
                       (bucket-id-16 merc-l6-pris2)
                       (bucket-id-16 emerc-l6-pris2)
                       (bucket-id-16 gmerc-l6-pris2)
                       (bucket-id-16 tex-l6-pris2)
                       (bucket-id-16 gmerc2-l6-pris2)
                       (bucket-id-16 bucket49)
                       (bucket-id-16 merc-l7-tfrag)
                       (bucket-id-16 emerc-l7-tfrag)
                       (bucket-id-16 gmerc-l7-tfrag)
                       (bucket-id-16 tex-l7-tfrag)
                       (bucket-id-16 gmerc2-l7-tfrag)
                       (bucket-id-16 bucket7)
                       (bucket-id-16 merc-l7-pris)
                       (bucket-id-16 emerc-l7-pris)
                       (bucket-id-16 gmerc-l7-pris)
                       (bucket-id-16 tex-l7-pris)
                       (bucket-id-16 gmerc2-l7-pris)
                       (bucket-id-16 bucket39)
                       (bucket-id-16 merc-l7-shrub)
                       (bucket-id-16 emerc-l7-shrub)
                       (bucket-id-16 gmerc-l7-shrub)
                       (bucket-id-16 tex-l7-shrub)
                       (bucket-id-16 gmerc2-l7-shrub)
                       (bucket-id-16 merc-l0-tfrag)
                       (bucket-id-16 merc-l7-alpha)
                       (bucket-id-16 emerc-l7-alpha)
                       (bucket-id-16 gmerc-l7-alpha)
                       (bucket-id-16 tex-l7-alpha)
                       (bucket-id-16 gmerc2-l7-alpha)
                       (bucket-id-16 bucket27)
                       (bucket-id-16 merc-l7-water)
                       (bucket-id-16 merc-l7-water)
                       (bucket-id-16 gmerc-l7-water)
                       (bucket-id-16 tex-l7-water)
                       (bucket-id-16 gmerc2-l7-water)
                       (bucket-id-16 bucket61)
                       (bucket-id-16 merc-l7-pris)
                       (bucket-id-16 emerc-l7-pris)
                       (bucket-id-16 gmerc-l7-pris)
                       (bucket-id-16 tex-l7-pris)
                       (bucket-id-16 gmerc2-l7-pris)
                       (bucket-id-16 bucket39)
                       (bucket-id-16 merc-l7-pris2)
                       (bucket-id-16 emerc-l7-pris2)
                       (bucket-id-16 gmerc-l7-pris2)
                       (bucket-id-16 tex-l7-pris2)
                       (bucket-id-16 gmerc2-l7-pris2)
                       (bucket-id-16 bucket50)
                       (bucket-id-16 merc-l8-tfrag)
                       (bucket-id-16 emerc-l8-tfrag)
                       (bucket-id-16 gmerc-l8-tfrag)
                       (bucket-id-16 tex-l8-tfrag)
                       (bucket-id-16 gmerc2-l8-tfrag)
                       (bucket-id-16 bucket8)
                       (bucket-id-16 merc-l8-pris)
                       (bucket-id-16 emerc-l8-pris)
                       (bucket-id-16 gmerc-l8-pris)
                       (bucket-id-16 tex-l8-pris)
                       (bucket-id-16 gmerc2-l8-pris)
                       (bucket-id-16 bucket40)
                       (bucket-id-16 merc-l8-shrub)
                       (bucket-id-16 emerc-l8-shrub)
                       (bucket-id-16 gmerc-l8-shrub)
                       (bucket-id-16 tex-l8-shrub)
                       (bucket-id-16 gmerc2-l8-shrub)
                       (bucket-id-16 emerc-l0-tfrag)
                       (bucket-id-16 merc-l8-alpha)
                       (bucket-id-16 emerc-l8-alpha)
                       (bucket-id-16 gmerc-l8-alpha)
                       (bucket-id-16 tex-l8-alpha)
                       (bucket-id-16 gmerc2-l8-alpha)
                       (bucket-id-16 bucket28)
                       (bucket-id-16 merc-l8-water)
                       (bucket-id-16 merc-l8-water)
                       (bucket-id-16 gmerc-l8-water)
                       (bucket-id-16 tex-l8-water)
                       (bucket-id-16 gmerc2-l8-water)
                       (bucket-id-16 bucket62)
                       (bucket-id-16 merc-l8-pris)
                       (bucket-id-16 emerc-l8-pris)
                       (bucket-id-16 gmerc-l8-pris)
                       (bucket-id-16 tex-l8-pris)
                       (bucket-id-16 gmerc2-l8-pris)
                       (bucket-id-16 bucket40)
                       (bucket-id-16 merc-l8-pris2)
                       (bucket-id-16 emerc-l8-pris2)
                       (bucket-id-16 gmerc-l8-pris2)
                       (bucket-id-16 tex-l8-pris2)
                       (bucket-id-16 gmerc2-l8-pris2)
                       (bucket-id-16 bucket51)
                       (bucket-id-16 merc-l9-tfrag)
                       (bucket-id-16 emerc-l9-tfrag)
                       (bucket-id-16 gmerc-l9-tfrag)
                       (bucket-id-16 tex-l9-tfrag)
                       (bucket-id-16 gmerc2-l9-tfrag)
                       (bucket-id-16 bucket9)
                       (bucket-id-16 merc-l9-pris)
                       (bucket-id-16 emerc-l9-pris)
                       (bucket-id-16 gmerc-l9-pris)
                       (bucket-id-16 tex-l9-pris)
                       (bucket-id-16 gmerc2-l9-pris)
                       (bucket-id-16 merc-l2-tfrag)
                       (bucket-id-16 merc-l9-shrub)
                       (bucket-id-16 emerc-l9-shrub)
                       (bucket-id-16 gmerc-l9-shrub)
                       (bucket-id-16 tex-l9-shrub)
                       (bucket-id-16 gmerc2-l9-shrub)
                       (bucket-id-16 gmerc-l0-tfrag)
                       (bucket-id-16 merc-l9-alpha)
                       (bucket-id-16 emerc-l9-alpha)
                       (bucket-id-16 gmerc-l9-alpha)
                       (bucket-id-16 tex-l9-alpha)
                       (bucket-id-16 gmerc2-l9-alpha)
                       (bucket-id-16 merc-l1-tfrag)
                       (bucket-id-16 merc-l9-water)
                       (bucket-id-16 merc-l9-water)
                       (bucket-id-16 gmerc-l9-water)
                       (bucket-id-16 tex-l9-water)
                       (bucket-id-16 gmerc2-l9-water)
                       (bucket-id-16 bucket63)
                       (bucket-id-16 merc-l9-pris)
                       (bucket-id-16 emerc-l9-pris)
                       (bucket-id-16 gmerc-l9-pris)
                       (bucket-id-16 tex-l9-pris)
                       (bucket-id-16 gmerc2-l9-pris)
                       (bucket-id-16 merc-l2-tfrag)
                       (bucket-id-16 merc-l9-pris2)
                       (bucket-id-16 emerc-l9-pris2)
                       (bucket-id-16 gmerc-l9-pris2)
                       (bucket-id-16 tex-l9-pris2)
                       (bucket-id-16 gmerc2-l9-pris2)
                       (bucket-id-16 bucket52)
                       (bucket-id-16 merc-lcom-tfrag)
                       (bucket-id-16 emerc-lcom-tfrag)
                       (bucket-id-16 gmerc-lcom-tfrag)
                       (bucket-id-16 tex-lcom-tfrag)
                       (bucket-id-16 gmerc2-lcom-tfrag)
                       (bucket-id-16 emerc-l1-tfrag)
                       (bucket-id-16 merc-lcom-pris)
                       (bucket-id-16 emerc-lcom-pris)
                       (bucket-id-16 gmerc-lcom-pris)
                       (bucket-id-16 tex-lcom-pris)
                       (bucket-id-16 gmerc2-lcom-pris)
                       (bucket-id-16 emerc-l2-tfrag)
                       (bucket-id-16 merc-lcom-shrub)
                       (bucket-id-16 emerc-lcom-shrub)
                       (bucket-id-16 gmerc-lcom-shrub)
                       (bucket-id-16 tex-lcom-shrub)
                       (bucket-id-16 gmerc2-lcom-shrub)
                       (bucket-id-16 gmerc-l1-tfrag)
                       (bucket-id-16 merc-lcom-pris)
                       (bucket-id-16 emerc-lcom-pris)
                       (bucket-id-16 gmerc-lcom-pris)
                       (bucket-id-16 tex-lcom-pris)
                       (bucket-id-16 gmerc2-lcom-pris)
                       (bucket-id-16 emerc-l2-tfrag)
                       (bucket-id-16 merc-lcom-water)
                       (bucket-id-16 merc-lcom-water)
                       (bucket-id-16 gmerc-lcom-water)
                       (bucket-id-16 tex-lcom-water)
                       (bucket-id-16 gmerc2-lcom-water)
                       (bucket-id-16 bucket64)
                       (bucket-id-16 merc-lcom-pris)
                       (bucket-id-16 emerc-lcom-pris)
                       (bucket-id-16 gmerc-lcom-pris)
                       (bucket-id-16 tex-lcom-pris)
                       (bucket-id-16 gmerc2-lcom-pris)
                       (bucket-id-16 emerc-l2-tfrag)
                       (bucket-id-16 merc-lcom-pris2)
                       (bucket-id-16 emerc-lcom-pris2)
                       (bucket-id-16 gmerc-lcom-pris2)
                       (bucket-id-16 tex-lcom-pris2)
                       (bucket-id-16 gmerc2-lcom-pris2)
                       (bucket-id-16 merc-l3-tfrag)
                       )
        )

;; definition for function vu1-bucket-map
;; WARN: Return type mismatch bucket-id-16 vs bucket-id.
(defun vu1-bucket-map ((arg0 int) (arg1 int) (arg2 merc-mode))
  "Map from level, texture, mode to bucket-id."
  (the-as bucket-id (-> *bucket-map* (+ (+ (* 42 arg0) (* 6 arg1)) (the-as int arg2))))
  )

;; definition for function generic-bucket-state-init
;; WARN: Return type mismatch int vs none.
(defun generic-bucket-state-init ((arg0 generic-bucket-state))
  "Initialize generic-bucket-state for the first thing to draw in the bucket."
  (set! (-> arg0 gifbuf-adr) (the-as uint 837))
  (set! (-> arg0 inbuf-adr) (the-as uint 9))
  (none)
  )

;; definition for function mercneric-chain-init
(defun mercneric-chain-init ((arg0 mercneric-chain) (arg1 bucket-id))
  "Initialize mercneric-chain"
  (set! (-> arg0 first) (the-as uint 0))
  (set! (-> arg0 next) (the-as uint 0))
  (set! (-> arg0 vu1-bucket) arg1)
  (generic-bucket-state-init (-> arg0 state))
  (none)
  )

;; definition for function foreground-init
(defun foreground-init ()
  "Initialize scratchpad and VU0 for foreground. Start foreground DMA chains."
  (let ((gp-0 (the-as foreground-work (+ #x70000000 0))))
    (vu-lights-default! *default-lights*)
    (let ((s5-0 *vu0-dma-list*))
      (let ((v1-1 s5-0))
        (set! (-> v1-1 base) (-> v1-1 data))
        (set! (-> v1-1 end) (the-as pointer (+ (+ (-> v1-1 allocated-length) 28) (the-as int v1-1))))
        )
      (dma-buffer-add-vu-function s5-0 foreground-vu0-block 0)
      (let* ((v1-2 s5-0)
             (a0-6 (-> v1-2 base))
             )
        (set! (-> (the-as (pointer uint64) a0-6) 0) (the-as uint #x70000000))
        (set! (-> (the-as (pointer uint64) a0-6) 1) (the-as uint 0))
        (set! (-> v1-2 base) (&+ a0-6 16))
        )
      (.sync.l)
      (dma-buffer-send-chain (the-as dma-bank-source #x10008000) s5-0)
      )
    (set! (-> gp-0 next-tmpl dma) (new 'static 'dma-tag :id (dma-tag-id next)))
    (set! (-> gp-0 next-tmpl vif0) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (set! (-> gp-0 next-tmpl vif1) (new 'static 'vif-tag :imm #x404 :cmd (vif-cmd stcycl)))
    (let ((v1-7 *level*))
      (dotimes (a0-9 11)
        (set! (-> gp-0 draw-index-map a0-9) (-> v1-7 draw-index-map a0-9))
        )
      )
    (dotimes (s5-1 11)
      (let ((s4-0 (-> gp-0 grid level-buckets s5-1)))
        (dotimes (s3-0 7)
          (let ((s1-0 (-> s4-0 data s3-0)))
            (set! (-> s1-0 merc first) (the-as dma-packet 0))
            (set! (-> s1-0 merc patch) (the-as dma-packet 0))
            (set! (-> s1-0 merc vu1-bucket) (vu1-bucket-map s5-1 s3-0 (merc-mode merc)))
            (set! (-> s1-0 emerc first) (the-as dma-packet 0))
            (set! (-> s1-0 emerc patch) (the-as dma-packet 0))
            (set! (-> s1-0 emerc vu1-bucket) (vu1-bucket-map s5-1 s3-0 (merc-mode emerc)))
            (mercneric-chain-init (-> s1-0 mercneric) (vu1-bucket-map s5-1 s3-0 (merc-mode mercneric)))
            )
          )
        )
      )
    (mercneric-chain-init (-> gp-0 grid warp-chain) (bucket-id generic-warp))
    )
  (none)
  )

;; definition for function texscroll-make-request
;; WARN: Return type mismatch int vs none.
(defun texscroll-make-request ((arg0 merc-effect))
  "Set up a texscroll, which will adjust texture coordinates of the given merc-effect during the next texscroll-execute."
  (with-pp
    (let* ((v1-1 (-> *foreground* texscroll requests))
           (a1-0 (the-as structure (-> arg0 extra-info)))
           (a1-1 (the-as
                   mei-texture-scroll
                   (+ (the-as uint a1-0) (* (-> (the-as merc-extra-info a1-0) texture-scroll-offset) 16))
                   )
                 )
           )
      (when (< v1-1 32)
        (let* ((a3-1 (the-as int (-> pp clock integral-frame-counter)))
               (a2-3 (-> a1-1 time-factor))
               (t0-2 (+ (ash 1 a2-3) -1))
               )
          (if (zero? (-> a1-1 scroll-dir))
              (set! a3-1 (- a3-1))
              )
          (let ((a2-5 (ash (ash (logand a3-1 t0-2) (- 12 (the-as int (-> a1-1 st-int-scale)))) (- (the-as int a2-3)))))
            (when (!= a2-5 (-> a1-1 cached-time))
              (set! (-> a1-1 time-delta) (the-as uint (- a2-5 (the-as int (-> a1-1 cached-time)))))
              (set! (-> a1-1 cached-time) (the-as uint a2-5))
              (set! (-> *foreground* texscroll effects v1-1) arg0)
              (+! (-> *foreground* texscroll requests) 1)
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

;; definition for function texscroll-execute
;; WARN: Return type mismatch int vs none.
(defun texscroll-execute ()
  "Run pending texscroll requests."
  (dotimes (v1-0 (-> *foreground* texscroll requests))
    (let* ((a2-0 (-> *foreground* texscroll effects v1-0))
           (a0-2 (-> a2-0 frag-count))
           (a1-1 (the-as structure (-> a2-0 extra-info)))
           (a1-2 (the-as
                   mei-texture-scroll
                   (+ (the-as uint a1-1) (* (-> (the-as merc-extra-info a1-1) texture-scroll-offset) 16))
                   )
                 )
           (t1-0 (the-as object (-> a2-0 frag-geo)))
           (a2-1 (the-as object (-> a2-0 frag-ctrl)))
           )
      (dotimes (a3-2 (the-as int a0-2))
        (let ((t0-4 (&+
                      (the-as pointer t1-0)
                      (logand (* (+ (-> (the-as merc-fragment-control a2-1) unsigned-four-count) 3) 4) #xfff0)
                      )
                    )
              )
          (let ((t2-2 (+ (-> (the-as merc-fragment t1-0) header mat1-cnt)
                         (-> (the-as merc-fragment t1-0) header mat2-cnt)
                         (-> (the-as merc-fragment t1-0) header mat3-cnt)
                         )
                      )
                )
            (-> a1-2 time-delta)
            (let* ((t1-3 (&+ t0-4 9))
                   (t2-4 (&+ t1-3 (* (the-as uint 12) t2-2)))
                   (t3-3 (-> a1-2 time-delta))
                   )
              (nop!)
              (label cfg-3)
              (let ((t4-0 (-> (the-as (pointer int8) t1-3))))
                (nop!)
                (nop!)
                (nop!)
                (let ((t4-1 (+ t4-0 t3-3)))
                  (&+! t1-3 12)
                  (b! (!= (the-as (pointer int8) t1-3) t2-4) cfg-3 :delay (set! (-> (the-as (pointer int8) t1-3) -12) t4-1))
                  )
                )
              )
            )
          (set! t1-0 (&+
                       (&+ t0-4 (logand (* (+ (-> (the-as merc-fragment-control a2-1) lump-four-count) 3) 4) #xfff0))
                       (* (-> (the-as merc-fragment-control a2-1) fp-qwc) 16)
                       )
                )
          )
        (set! a2-1 (+ (the-as int a2-1) (* (-> (the-as merc-fragment-control a2-1) mat-xfer-count) 2) 4))
        )
      )
    )
  (set! (-> *foreground* texscroll requests) 0)
  0
  (none)
  )

;; definition for function vu-lights<-light-group!
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun vu-lights<-light-group! ((arg0 vu-lights) (arg1 light-group))
  "Convert light-group format lights to vu-lights for the renderers."
  (local-vars (v1-0 uint128) (v1-1 uint128) (a2-1 uint128) (t0-1 uint128) (t1-1 uint128))
  (rlet ((vf0 :class vf)
         (vf10 :class vf)
         (vf11 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         (vf9 :class vf)
         )
    (init-vf0-vector)
    (nop!)
    (let ((a3-0 (the-as uint128 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))))
      (nop!)
      (let ((a2-0 (-> arg1 dir0 direction quad)))
        (nop!)
        (let ((t1-0 (-> arg1 dir1 direction quad)))
          (nop!)
          (.lvf vf4 (&-> arg1 dir0 color quad))
          (.pextlw v1-0 t1-0 a2-0)
          (let ((t0-0 (-> arg1 dir2 direction quad)))
            (.pextuw a2-1 t1-0 a2-0)
            (.lvf vf8 (&-> arg1 dir0 extra quad))
            (.pextlw t1-1 a3-0 t0-0)
            (.lvf vf5 (&-> arg1 dir1 color quad))
            (.pextuw t0-1 a3-0 t0-0)
            )
          )
        )
      )
    (.lvf vf9 (&-> arg1 dir1 extra quad))
    (let ((a3-1 (make-u128 t1-1 v1-0)))
      (.lvf vf6 (&-> arg1 dir2 color quad))
      (.pcpyud v1-1 v1-0 t1-1)
      (.lvf vf10 (&-> arg1 dir2 extra quad))
      (let ((a2-2 (make-u128 t0-1 a2-1)))
        (.lvf vf7 (&-> arg1 ambi color quad))
        (.mul.x.vf vf4 vf4 vf8)
        (.lvf vf11 (&-> arg1 ambi extra quad))
        (.mul.x.vf vf5 vf5 vf9)
        (set! (-> arg0 direction 0 quad) (the-as uint128 a3-1))
        (.mul.x.vf vf6 vf6 vf10)
        (set! (-> arg0 direction 1 quad) v1-1)
        (.mul.x.vf vf7 vf7 vf11)
        (set! (-> arg0 direction 2 quad) (the-as uint128 a2-2))
        )
      )
    (.min.x.vf vf4 vf0 vf0 :mask #b1000)
    (nop!)
    (.min.x.vf vf5 vf0 vf0 :mask #b1000)
    (nop!)
    (.min.x.vf vf6 vf0 vf0 :mask #b1000)
    (nop!)
    (.max.w.vf vf7 vf0 vf0 :mask #b1000)
    (nop!)
    (nop!)
    (.svf (&-> arg0 color 0 quad) vf4)
    (nop!)
    (.svf (&-> arg0 color 1 quad) vf5)
    (nop!)
    (.svf (&-> arg0 color 2 quad) vf6)
    (nop!)
    (.svf (&-> arg0 ambient quad) vf7)
    0
    (none)
    )
  )

;; definition for function foreground-add-mtx-calc
(defun foreground-add-mtx-calc ((arg0 bone-calculation) (arg1 (inline-array pris-mtx)) (arg2 bone-calc-flags))
  "Request skinning matrix calculation."
  (let ((t2-0 (-> (the-as foreground-work #x70000000) regs))
        (v1-1 *bone-calculation-list*)
        (a3-0 arg0)
        )
    (let ((t0-0 (-> t2-0 joint-ptr))
          (t1-0 (-> t2-0 bone-ptr))
          (t2-1 (-> t2-0 num-bones))
          (t3-0 a3-0)
          )
      (set! (-> t3-0 flags) arg2)
      (set! (-> t3-0 num-bones) t2-1)
      (set! (-> t3-0 matrix-area) arg1)
      (set! (-> t3-0 joints) t0-0)
      (set! (-> t3-0 bones) t1-0)
      (set! (-> t3-0 next) (the-as bone-calculation 0))
      )
    (if (nonzero? (-> v1-1 next))
        (set! (-> v1-1 next next) a3-0)
        )
    (if (zero? (-> v1-1 first))
        (set! (-> v1-1 first) a3-0)
        )
    (set! (-> v1-1 next) a3-0)
    )
  (&+ arg0 48)
  )

;; definition for function foreground-wrapup
;; WARN: Return type mismatch int vs none.
(defun foreground-wrapup ()
  "Finish foreground DMA chains."
  (let ((gp-0 (the-as foreground-work (+ #x70000000 0))))
    (dotimes (s5-0 11)
      (let ((s4-0 (-> gp-0 grid level-buckets s5-0)))
        (dotimes (s3-0 7)
          (let ((s2-0 (-> s4-0 data s3-0)))
            (when (nonzero? (-> s2-0 merc first))
              (let* ((v1-9 (-> gp-0 regs dma-buf))
                     (a3-0 (-> v1-9 base))
                     )
                (let ((a0-0 (-> s2-0 merc patch)))
                  (if (nonzero? a0-0)
                      (set! (-> a0-0 dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (the-as int a3-0)))
                      )
                  )
                (let ((a0-1 (the-as dma-packet (-> v1-9 base))))
                  (set! (-> a0-1 dma) (new 'static 'dma-tag :id (dma-tag-id next)))
                  (set! (-> a0-1 vif0) (new 'static 'vif-tag))
                  (set! (-> a0-1 vif1) (new 'static 'vif-tag))
                  (set! (-> v1-9 base) (the-as pointer (&+ a0-1 16)))
                  )
                (dma-bucket-insert-tag
                  (-> *display* frames (-> *display* on-screen) bucket-group)
                  (-> s2-0 merc vu1-bucket)
                  (the-as pointer (-> s2-0 merc first))
                  (the-as (pointer dma-tag) a3-0)
                  )
                )
              )
            (when (nonzero? (-> s2-0 emerc first))
              (let* ((v1-18 (-> gp-0 regs dma-buf))
                     (a3-1 (-> v1-18 base))
                     )
                (let ((a0-5 (-> s2-0 emerc patch)))
                  (if (nonzero? a0-5)
                      (set! (-> a0-5 dma) (new 'static 'dma-tag :id (dma-tag-id next) :addr (the-as int a3-1)))
                      )
                  )
                (let ((a0-6 (the-as object (-> v1-18 base))))
                  (set! (-> (the-as dma-packet a0-6) dma) (new 'static 'dma-tag :id (dma-tag-id next)))
                  (set! (-> (the-as dma-packet a0-6) vif0) (new 'static 'vif-tag))
                  (set! (-> (the-as dma-packet a0-6) vif1) (new 'static 'vif-tag))
                  (set! (-> v1-18 base) (&+ (the-as pointer a0-6) 16))
                  )
                (dma-bucket-insert-tag
                  (-> *display* frames (-> *display* on-screen) bucket-group)
                  (-> s2-0 emerc vu1-bucket)
                  (the-as pointer (-> s2-0 emerc first))
                  (the-as (pointer dma-tag) a3-1)
                  )
                )
              )
            )
          )
        )
      )
    (quad-copy! (the-as pointer (-> *foreground* foreground-grid)) (the-as pointer (-> gp-0 grid)) 233)
    )
  0
  (none)
  )

;; definition for symbol *default-shadow-settings*, type shadow-settings
(define *default-shadow-settings* (new 'static 'shadow-settings
                                    :shadow-dir (new 'static 'vector :x -0.4226 :y -0.9063 :w 409600.0)
                                    :bot-plane (new 'static 'plane :y 1.0 :w 37683.2)
                                    :top-plane (new 'static 'plane :y 1.0 :w 4096.0)
                                    :fade-dist 409600.0
                                    )
        )

;; definition for function foreground-shadow
;; INFO: Used lq/sq
(defun foreground-shadow ((arg0 draw-control) (arg1 (inline-array pris-mtx)) (arg2 pointer))
  "Generate DMA for shadow drawing."
  (local-vars (a3-3 shadow-settings))
  (let ((v1-0 (-> arg0 shadow))
        (t0-0 (-> (the-as foreground-work #x70000000) distance w))
        )
    (set! a3-3
          (cond
            ((-> arg0 shadow-ctrl)
             (set! a3-3 (-> arg0 shadow-ctrl settings))
             (let ((t1-2 (the-as vector (+ (the-as uint (the-as vector (-> arg0 skeleton bones 0 transform trans)))
                                           (* (the-as uint 80) (-> arg0 shadow-joint-index))
                                           )
                                 )
                         )
                   )
               (set! (-> a3-3 center x) (-> t1-2 x))
               (set! (-> a3-3 center y) (-> t1-2 y))
               (set! (-> a3-3 center z) (-> t1-2 z))
               )
             a3-3
             )
            (else
              *default-shadow-settings*
              )
            )
          )
    (let ((t1-5 (-> a3-3 flags)))
      (-> arg0 cur-lod)
      (when (not (logtest? t1-5 (shadow-flags disable-fade)))
        (if (< (-> a3-3 fade-dist) t0-0)
            (set! t1-5 (logior t1-5 (shadow-flags disable-draw)))
            )
        )
      (when (not (logtest? t1-5 (shadow-flags disable-draw)))
        (let ((t0-6 (* (-> v1-0 num-joints) 8)))
          (dotimes (t1-6 (the-as int (the-as shadow-dma-packet (-> v1-0 num-fragments))))
            (let ((t4-0 (-> v1-0 frags t1-6 header))
                  (t6-0 (-> (the-as shadow-dma-packet (+ (the-as uint v1-0) (* t1-6 8))) settings bot-plane w))
                  )
              (the-as shadow-dma-packet 0)
              (let ((t2-10 (the-as shadow-dma-packet arg2)))
                (set! (-> t2-10 tag dma) (new 'static 'dma-tag :qwc #x5 :id (dma-tag-id cnt)))
                (set! (-> t2-10 tag vif0) (the-as vif-tag t6-0))
                (set! (-> t2-10 tag vif1) (new 'static 'vif-tag))
                (let ((t3-5 (-> *shadow-globals* bucket (-> a3-3 shadow-type))))
                  (let ((t5-1 (-> t3-5 next)))
                    (if (nonzero? t5-1)
                        (set! (-> (the-as (pointer int32) t5-1)) t2-10)
                        )
                    )
                  (if (zero? (-> t3-5 first))
                      (set! (-> t3-5 first) (the-as pointer t2-10))
                      )
                  (let ((t5-6 (&-> t2-10 tag vif1)))
                    (let ((t7-1 (-> t2-10 settings))
                          (t8-0 (-> a3-3 center quad))
                          (t9-0 (-> a3-3 shadow-dir quad))
                          (ra-0 (-> a3-3 bot-plane quad))
                          (gp-0 (-> a3-3 top-plane quad))
                          (s5-0 (-> a3-3 fade-vec quad))
                          )
                      (set! (-> t7-1 center quad) t8-0)
                      (set! (-> t7-1 shadow-dir quad) t9-0)
                      (set! (-> t7-1 bot-plane quad) ra-0)
                      (set! (-> t7-1 top-plane quad) gp-0)
                      (set! (-> t7-1 fade-vec quad) s5-0)
                      )
                    (let ((t7-4
                            (the-as
                              vector
                              (+ (the-as uint (-> arg0 skeleton bones 0 transform trans)) (* (the-as uint 80) (-> arg0 shadow-joint-index)))
                              )
                            )
                          )
                      (set! (-> t2-10 settings center x) (-> t7-4 x))
                      (set! (-> t2-10 settings center y) (-> t7-4 y))
                      (set! (-> t2-10 settings center z) (-> t7-4 z))
                      )
                    (set! (-> t2-10 geo-ref dma)
                          (new 'static 'dma-tag :id (dma-tag-id ref) :addr (the-as int t4-0) :qwc (the-as int t6-0))
                          )
                    (set! (-> t2-10 geo-ref vif0) (new 'static 'vif-tag))
                    (set! (-> t2-10 geo-ref vif1) (new 'static 'vif-tag))
                    (set! (-> t2-10 mtx-ref dma)
                          (new 'static 'dma-tag :id (dma-tag-id ref) :addr (the-as int (-> arg1 2)) :qwc t0-6)
                          )
                    (set! (-> t2-10 mtx-ref vif0) (new 'static 'vif-tag))
                    (set! (-> t2-10 mtx-ref vif1) (new 'static 'vif-tag))
                    (set! (-> t2-10 end-tag dma) (new 'static 'dma-tag :id (dma-tag-id end)))
                    (set! (-> t2-10 end-tag vif0) (new 'static 'vif-tag))
                    (set! (-> t2-10 end-tag vif1) (new 'static 'vif-tag))
                    (&+! arg2 144)
                    (set! (-> t3-5 next) t5-6)
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  arg2
  )

;; definition for function foreground-generic-merc-death
;; WARN: Return type mismatch uint vs none.
(defun foreground-generic-merc-death ((arg0 draw-control) (arg1 generic-merc-ctrl))
  "Stash death effect values in the merc-fragment so generic merc can run the death effect."
  (when (and (>= (the-as int (- (-> arg0 death-timer-org) (-> arg0 death-timer)))
                 (the-as int (-> arg0 death-draw-overlap))
                 )
             (!= (-> arg0 death-draw-overlap) 255)
             )
    (set! (-> arg1 header display-triangles) (the-as uint 0))
    0
    )
  (when (not (paused?))
    (let ((v1-6 (+ (-> arg0 death-vertex-skip) (rand-vu-int-count (the-as int (-> arg0 death-vertex-skip))))))
      (set! (-> arg1 header two-mat-count) v1-6)
      (set! (-> arg1 header death-effect) (-> arg0 death-effect))
      (set! (-> arg1 header two-mat-reuse-count)
            (/ (* v1-6 (- (-> arg0 death-timer-org) (-> arg0 death-timer))) (-> arg0 death-timer-org))
            )
      )
    )
  (none)
  )

;; definition for function foreground-generic-merc-add-fragments
(defun foreground-generic-merc-add-fragments ((arg0 merc-effect) (arg1 pointer) (arg2 mercneric-chain))
  "Add merc fragments to a generic merc chain."
  (let ((v1-0 (-> arg0 frag-geo))
        (a3-0 (the-as structure (-> arg0 frag-ctrl)))
        (a0-1 (-> arg0 frag-count))
        )
    (dotimes (t0-0 (the-as int a0-1))
      (let ((t1-2 (+ (* (-> (the-as merc-fragment-control a3-0) mat-xfer-count) 2) 4))
            (t2-0 (-> v1-0 header mm-quadword-size))
            )
        (set! (-> (the-as dma-packet arg1) dma)
              (new 'static 'dma-tag :id (dma-tag-id ref) :addr (the-as int v1-0) :qwc t2-0)
              )
        (set! (-> (the-as dma-packet arg1) vif0) (new 'static 'vif-tag))
        (set! (-> (the-as dma-packet arg1) vif1) (new 'static 'vif-tag))
        (when (nonzero? t0-0)
          (set! (-> (the-as (pointer int32) (-> arg2 next)) 0) (the-as int arg1))
          (set! (-> arg2 next) (the-as uint (&+ arg1 12)))
          )
        (let ((a1-1 (the-as object (&+ arg1 16))))
          (dotimes (t3-6 (the-as int (-> (the-as merc-fragment-control a3-0) mat-xfer-count)))
            (let ((t5-4
                    (-> (the-as foreground-work #x70000000)
                        regs
                        mtxs
                        (-> (the-as merc-fragment-control a3-0) mat-dest-data t3-6 matrix-number)
                        )
                    )
                  )
              (set! (-> (the-as dma-packet a1-1) dma)
                    (new 'static 'dma-tag :qwc #x7 :id (dma-tag-id ref) :addr (the-as int t5-4))
                    )
              )
            (set! (-> (the-as dma-packet a1-1) vif0) (new 'static 'vif-tag))
            (set! (-> (the-as dma-packet a1-1) vif1) (new 'static 'vif-tag))
            (set! a1-1 (&+ (the-as pointer a1-1) 16))
            )
          (set! (-> (the-as dma-packet a1-1) dma) (new 'static 'dma-tag :id (dma-tag-id end)))
          (set! (-> (the-as dma-packet a1-1) vif0) (new 'static 'vif-tag))
          (set! (-> (the-as dma-packet a1-1) vif1) (new 'static 'vif-tag))
          (set! arg1 (&+ (the-as pointer a1-1) 16))
          )
        (set! a3-0 (+ (the-as uint a3-0) t1-2))
        (set! v1-0 (the-as merc-fragment (+ (the-as uint v1-0) (* t2-0 16))))
        )
      )
    )
  arg1
  )

;; definition for function foreground-generic-merc
;; INFO: function output is handled by mips2c
(def-mips2c foreground-generic-merc (function draw-control pointer int pointer))

;; definition for function foreground-merc
;; INFO: function output is handled by mips2c
(def-mips2c foreground-merc (function draw-control (inline-array pris-mtx) pointer int int object pointer))

;; definition for function foreground-emerc
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for function foreground-check-longest-edge-asm
;; INFO: function output is handled by mips2c
(def-mips2c foreground-check-longest-edge-asm (function draw-control float symbol))

;; definition for function foreground-ripple
;; WARN: Return type mismatch int vs pointer.
;; ERROR: Unsupported inline assembly instruction kind - [sll v1, v1, 7]
;; ERROR: Unsupported inline assembly instruction kind - [addu t0, a2, v1]
(defun foreground-ripple ((arg0 draw-control) (arg1 merc-ctrl) (arg2 pointer) (arg3 int))
  (local-vars (v1-6 int) (t0-0 int))
  (let* ((gp-0 (-> arg0 ripple))
         (f0-0 (-> (the-as foreground-work #x70000000) regs dist))
         (f1-3 (/ (- (-> gp-0 far-fade-dist) f0-0) (- (-> gp-0 far-fade-dist) (-> gp-0 close-fade-dist))))
         (f1-5 (fmax 0.0 (fmin 1.0 f1-3)))
         (f0-3 f1-5)
         (f30-0 (* f1-5 (-> gp-0 global-scale)))
         )
    (set! (-> gp-0 faded-scale) f30-0)
    (let ((f1-8 (/ f30-0 (* 128.0 (-> arg1 header xyz-scale)))))
      0
      (let ((v1-5 (-> (the-as foreground-work #x70000000) regs num-bones)))
        (.sll v1-6 v1-5 7)
        )
      (let ((a0-1 (the-as foreground-work #x70000000)))
        (.addu t0-0 arg2 v1-6)
        (let ((v1-7 arg2)
              (s5-0 t0-0)
              )
          (set! (-> a0-1 regs mtxs) (the-as (inline-array pris-mtx) v1-7))
          (let ((a0-3 (-> *bone-calculation-list* next)))
            (logior! (-> a0-3 flags) (bone-calc-flags write-ripple-data))
            (set! (-> a0-3 ripple-scale) f30-0)
            (set! (-> a0-3 ripple-y-scale) f1-8)
            (set! (-> a0-3 ripple-normal-scale) (* f0-3 (-> gp-0 individual-normal-scale)))
            (set! (-> a0-3 ripple-area) (the-as (inline-array vector) v1-7))
            )
          (if (not (and (= f30-0 0.0) (= (-> gp-0 last-frame-scale) 0.0)))
              (ripple-make-request (the-as ripple-wave (-> gp-0 waveform)) (-> arg1 effect arg3))
              )
          (set! (-> gp-0 last-frame-scale) f30-0)
          (the-as pointer s5-0)
          )
        )
      )
    )
  )

;; definition for function foreground-draw
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; ERROR: Bad vector register dependency: vf7
;; ERROR: Bad vector register dependency: vf8
;; ERROR: Bad vector register dependency: vf9
;; ERROR: Unsupported inline assembly instruction kind - [lui at, 28672]
;; ERROR: Unsupported inline assembly instruction kind - [vcallms 0]
(defun foreground-draw ((dc draw-control) (dma-buf dma-buffer) (dist float))
  (local-vars (work foreground-work) (a0-100 uint))
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         (vf9 :class vf)
         )
    (.lui work 28672)
    (let* ((bone-calc (-> dma-buf base))
           (matrix-mem (the-as object (&+ bone-calc 64)))
           )
      (let ((a3-0 (logand (the-as int matrix-mem) 48)))
        (b! (zero? a3-0) cfg-2 :delay (nop!))
        (set! matrix-mem (&- (&+ (the-as pointer matrix-mem) 64) (the-as uint a3-0)))
        )
      (label cfg-2)
      (let* ((num-bones (+ (-> dc mgeo length) 3))
             (matrix-mem-size (* num-bones 128))
             )
        (let ((regs (-> (the-as foreground-work #x70000000) regs)))
          (set! (-> regs joint-ptr) (the-as (inline-array joint) (-> dc jgeo data 0)))
          (set! (-> regs bone-ptr) (-> dc skeleton bones))
          (set! (-> regs num-bones) (the-as uint num-bones))
          (set! (-> regs dist) dist)
          (set! (-> regs dma-buf) dma-buf)
          (set! (-> regs level-buckets) (-> (the-as foreground-work #x70000000)
                                            grid
                                            level-buckets
                                            (-> (the-as foreground-work #x70000000) draw-index-map (-> dc level-index))
                                            )
                )
          )
        (let ((bone-output matrix-mem)
              (bone-flags 0)
              )
          (let ((fg-regs (-> (the-as foreground-work #x70000000) regs))
                (calc-list *bone-calculation-list*)
                (calc (the-as bone-calculation bone-calc))
                )
            (let ((t2-4 (-> fg-regs joint-ptr))
                  (t3-0 (-> fg-regs bone-ptr))
                  (t4-1 (-> fg-regs num-bones))
                  (t5-0 calc)
                  )
              (set! (-> t5-0 flags) (the-as bone-calc-flags bone-flags))
              (set! (-> t5-0 num-bones) t4-1)
              (set! (-> t5-0 matrix-area) (the-as (inline-array pris-mtx) bone-output))
              (set! (-> t5-0 joints) t2-4)
              (set! (-> t5-0 bones) t3-0)
              (set! (-> t5-0 next) (the-as bone-calculation 0))
              )
            (if (nonzero? (-> calc-list next))
                (set! (-> calc-list next next) calc)
                )
            (if (zero? (-> calc-list first))
                (set! (-> calc-list first) calc)
                )
            (set! (-> calc-list next) calc)
            )
          (&+ bone-calc 48)
          (let ((dma-ptr (the-as object (+ (the-as uint matrix-mem) matrix-mem-size))))
            (set! (-> work regs mtxs) (the-as (inline-array pris-mtx) matrix-mem))
            (let ((bucket-info (-> *foreground* merc-bucket-info)))
              (when (= (-> dc data-format) (draw-control-data-format merc))
                (let ((lights-in (-> (the-as foreground-work #x70000000) lights))
                      (lights-out (-> bucket-info light))
                      )
                  (let ((inv-camera (-> *math-camera* inv-camera-rot)))
                    (nop!)
                    (nop!)
                    (.lvf vf4 (&-> inv-camera rvec quad))
                    (nop!)
                    (.lvf vf5 (&-> inv-camera uvec quad))
                    (nop!)
                    (.lvf vf6 (&-> inv-camera fvec quad))
                    )
                  (nop!)
                  (.lvf vf1 (&-> lights-in direction 0 quad))
                  (nop!)
                  (.lvf vf2 (&-> lights-in direction 1 quad))
                  (nop!)
                  (.lvf vf3 (&-> lights-in direction 2 quad))
                  (.vcallms 0)
                  (let ((a1-9 (-> lights-in color 0 quad)))
                    (nop!)
                    (let ((a2-6 (-> lights-in color 1 quad)))
                      (nop!)
                      (let ((a3-4 (-> lights-in color 2 quad)))
                        (nop!)
                        (let ((a0-6 (-> lights-in ambient quad)))
                          (nop!)
                          (set! (-> lights-out color 0 quad) a1-9)
                          (nop!)
                          (set! (-> lights-out color 1 quad) a2-6)
                          (nop!)
                          (set! (-> lights-out color 2 quad) a3-4)
                          (nop!)
                          (set! (-> lights-out ambient quad) a0-6)
                          )
                        )
                      )
                    )
                  (nop!)
                  (.nop.vf)
                  (nop!)
                  (.svf (&-> lights-out direction 0 quad) vf7)
                  (nop!)
                  (.svf (&-> lights-out direction 1 quad) vf8)
                  (nop!)
                  (.svf (&-> lights-out direction 2 quad) vf9)
                  (nop!)
                  (set! (-> lights-out fade-flags) (the-as uint 0))
                  )
                (set! (-> (the-as foreground-work #x70000000) regs merc-used) (the-as uint 0))
                (set! (-> (the-as foreground-work #x70000000) regs emerc-used) (the-as uint 0))
                (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 0))
                (set! (-> bucket-info needs-clip) (if (logtest? (-> dc status) (draw-control-status close-to-screen))
                                                      1
                                                      0
                                                      )
                      )
                (set! (-> bucket-info need-mercprime-if-merc) 0)
                (set! (-> bucket-info must-use-mercneric-for-clip) 0)
                (when (logtest? (-> dc status) (draw-control-status close-to-screen))
                  (cond
                    ((logtest? (-> dc status) (draw-control-status force-vu1))
                     (set! (-> bucket-info need-mercprime-if-merc) 1)
                     )
                    ((nonzero? (-> dc longest-edge))
                     (if (foreground-check-longest-edge-asm dc (-> (the-as foreground-work #x70000000) regs dist))
                         (set! (-> bucket-info need-mercprime-if-merc) 1)
                         (set! (-> bucket-info must-use-mercneric-for-clip) 1)
                         )
                     )
                    (else
                      (set! (-> bucket-info must-use-mercneric-for-clip) 1)
                      )
                    )
                  )
                (let ((geo (-> dc lod-set lod (-> dc cur-lod) geo)))
                  (let ((effect-mask (-> dc effect-mask)))
                    (dotimes (effect-idx (the-as int (-> geo header effect-count)))
                      (cond
                        ((= (logand effect-mask 1) 1)
                         (set! (-> bucket-info effect effect-idx disable-draw) (the-as uint 1))
                         )
                        ((begin
                           (set! (-> bucket-info effect effect-idx disable-draw) (the-as uint 0))
                           (set! (-> bucket-info effect effect-idx disable-envmap) (the-as uint 0))
                           (when (logtest? (-> geo effect effect-idx effect-bits) (effect-bits texscroll))
                             (let* ((v1-40 (the-as structure (-> geo effect effect-idx extra-info)))
                                    (texscroll-info
                                      (the-as
                                        mei-texture-scroll
                                        (+ (the-as uint v1-40) (* (-> (the-as merc-extra-info v1-40) texture-scroll-offset) 16))
                                        )
                                      )
                                    )
                               (if (< (-> (the-as foreground-work #x70000000) regs dist) (-> texscroll-info max-dist))
                                   (texscroll-make-request (-> geo effect effect-idx))
                                   )
                               )
                             )
                           (if (and (logtest? (-> geo effect effect-idx effect-bits) (effect-bits ripple)) (-> dc ripple))
                               (set! dma-ptr (foreground-ripple dc geo (the-as pointer dma-ptr) effect-idx))
                               )
                           (or (nonzero? (-> dc death-timer))
                               (and (logtest? (-> dc global-effect) (draw-control-global-effect no-textures))
                                    (not (logtest? (-> geo effect effect-idx effect-usage) 8))
                                    )
                               )
                           )
                         (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 2))
                         (set! (-> bucket-info effect effect-idx disable-envmap) (the-as uint 1))
                         (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 1))
                         )
                        ((logtest? (-> geo effect effect-idx effect-bits) (effect-bits force-mercneric))
                         (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 2))
                         (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 1))
                         )
                        ((and (logtest? (-> geo effect effect-idx effect-usage) 1)
                              (not (logtest? (-> dc global-effect) (draw-control-global-effect disable-envmap)))
                              )
                         0.0
                         (let* ((v1-75 (the-as structure (-> geo effect effect-idx extra-info)))
                                (envmap-info
                                  (the-as mei-envmap-tint (+ (the-as uint v1-75) (* (-> (the-as merc-extra-info v1-75) envmap-tint-offset) 16)))
                                  )
                                (envmap-fade0 (-> envmap-info fade0))
                                (envmap-fade1 (-> envmap-info fade1))
                                (envmap-interp (+ (* envmap-fade0 (-> (the-as foreground-work #x70000000) regs dist)) envmap-fade1))
                                (envmap-strength (fmax 0.0 (fmin 1.0 envmap-interp)))
                                )
                           (cond
                             ((or (nonzero? (-> bucket-info must-use-mercneric-for-clip))
                                  (or (< 0.0 envmap-strength) (logtest? (-> geo effect effect-idx effect-bits) (effect-bits cross-fade)))
                                  )
                              (let ((envmap-tint (&-> envmap-info tint))
                                    (envmap-rgba-out (the-as (pointer uint8) (-> bucket-info effect effect-idx)))
                                    )
                                (let ((tod-rgba (-> *time-of-day-context* current-env-color)))
                                  (if (and (logtest? (-> geo effect effect-idx effect-bits) (effect-bits cross-fade))
                                           (logtest? (-> dc status) (draw-control-status warp-cross-fade))
                                           )
                                      (set! envmap-strength (* 0.0078125 (the float (- 128 (the-as int (-> dc force-fade)))) envmap-strength))
                                      )
                                  (cond
                                    ((logtest? (-> geo effect effect-idx effect-bits) (effect-bits ignore-tod-for-envmap-tint))
                                     (dotimes (a1-18 3)
                                       (set! (-> envmap-rgba-out a1-18)
                                             (the-as
                                               uint
                                               (min 255 (the int (* envmap-strength (the float (-> (the-as (pointer uint8) (&+ envmap-tint a1-18)) 0)))))
                                               )
                                             )
                                       )
                                     )
                                    (else
                                      (let ((envmap-rgba-multiplier (* 0.0078125 envmap-strength)))
                                        (dotimes (a2-26 3)
                                          (set! (-> envmap-rgba-out a2-26)
                                                (the-as
                                                  uint
                                                  (min
                                                    255
                                                    (the int
                                                         (* envmap-rgba-multiplier
                                                            (-> tod-rgba data a2-26)
                                                            (the float (-> (the-as (pointer uint8) (&+ envmap-tint a2-26)) 0))
                                                            )
                                                         )
                                                    )
                                                  )
                                                )
                                          )
                                        )
                                      )
                                    )
                                  )
                                (set! (-> envmap-rgba-out 3) (the-as uint 128))
                                )
                              (cond
                                ((and (logtest? (-> dc status) (draw-control-status force-vu1))
                                      (logtest? (-> geo effect effect-idx effect-bits) (effect-bits emerc))
                                      )
                                 (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 1))
                                 (set! (-> (the-as foreground-work #x70000000) regs emerc-used) (the-as uint 1))
                                 )
                                (else
                                  (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 2))
                                  (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 1))
                                  (if (logtest? (-> dc status) (draw-control-status force-fade))
                                      (set! (-> bucket-info light fade-int) (gpr->fpr (-> dc force-fade)))
                                      )
                                  )
                                )
                              (set! (-> bucket-info effect effect-idx ignore-alpha)
                                    (the-as uint (if (logtest? (-> geo effect effect-idx effect-bits) (effect-bits ignore-alpha))
                                                     1
                                                     0
                                                     )
                                            )
                                    )
                              )
                             ((logtest? (-> dc status) (draw-control-status force-fade))
                              (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 2))
                              (set! (-> bucket-info effect effect-idx ignore-alpha)
                                    (the-as uint (if (logtest? (-> geo effect effect-idx effect-bits) (effect-bits ignore-alpha))
                                                     1
                                                     0
                                                     )
                                            )
                                    )
                              (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 1))
                              (set! (-> bucket-info light fade-int) (gpr->fpr (-> dc force-fade)))
                              )
                             (else
                               (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 0))
                               (set! (-> bucket-info effect effect-idx ignore-alpha) (the-as uint 1))
                               (set! (-> (the-as foreground-work #x70000000) regs merc-used) (the-as uint 1))
                               )
                             )
                           )
                         )
                        (else
                          (cond
                            ((logtest? (-> geo effect effect-idx effect-bits) (effect-bits cross-fade))
                             (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 2))
                             (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 1))
                             )
                            ((or (logtest? (-> dc status) (draw-control-status force-fade))
                                 (nonzero? (-> bucket-info must-use-mercneric-for-clip))
                                 )
                             (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 2))
                             (if (logtest? (-> dc global-effect) (draw-control-global-effect disable-envmap))
                                 (set! (-> bucket-info effect effect-idx disable-envmap) (the-as uint 1))
                                 )
                             (set! (-> (the-as foreground-work #x70000000) regs mercneric-used) (the-as uint 1))
                             )
                            (else
                              (set! (-> bucket-info effect effect-idx merc-path) (the-as uint 0))
                              (set! (-> (the-as foreground-work #x70000000) regs merc-used) (the-as uint 1))
                              )
                            )
                          (set! (-> bucket-info effect effect-idx ignore-alpha)
                                (the-as
                                  uint
                                  (if (or (logtest? (-> geo effect effect-idx effect-bits) (effect-bits ignore-alpha))
                                          (logtest? (-> dc global-effect) (draw-control-global-effect disable-envmap))
                                          )
                                      1
                                      0
                                      )
                                  )
                                )
                          )
                        )
                      (set! effect-mask (shr effect-mask 1))
                      )
                    )
                  (when (nonzero? (-> (the-as foreground-work #x70000000) regs mercneric-used))
                    (if (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask generic))
                        (set! dma-ptr (foreground-generic-merc dc (the-as pointer dma-ptr) 0))
                        )
                    )
                  (if (-> dc shadow)
                      (set! dma-ptr
                            (foreground-shadow dc (-> (the-as foreground-work #x70000000) regs mtxs) (the-as pointer dma-ptr))
                            )
                      )
                  (when (nonzero? (-> (the-as foreground-work #x70000000) regs merc-used))
                    (when (logtest? (-> *display* vu1-enable-user) (vu1-renderer-mask merc))
                      (let ((fade-amount 0)
                            (fade-enable #f)
                            )
                        (cond
                          ((logtest? (-> geo effect 0 effect-bits) (effect-bits no-fade-out))
                           (set! fade-enable #f)
                           )
                          ((logtest? (-> dc status) (draw-control-status force-fade))
                           (set! fade-amount (the-as int (-> dc force-fade)))
                           (set! fade-enable #t)
                           )
                          ((= (-> dc cur-lod) (-> dc lod-set max-lod))
                           (let ((dist-until-gone
                                   (- (-> dc lod-set lod (-> dc cur-lod) dist) (-> (the-as foreground-work #x70000000) regs dist))
                                   )
                                 )
                             (if (< dist-until-gone 81920.0)
                                 (set! fade-enable #t)
                                 )
                             (set! fade-amount (the int (* 0.0015625 dist-until-gone)))
                             )
                           )
                          )
                        (when fade-enable
                          (let ((v1-164 (min 128 (max 0 fade-amount)))
                                (a0-90 (-> bucket-info light))
                                )
                            (set! (-> a0-90 fade-flags) (the-as uint 0.00000000000000000000000000000000000000000014))
                            (set! (-> a0-90 fade-int) (the-as uint (gpr->fpr v1-164)))
                            )
                          )
                        )
                      (if (nonzero? (-> bucket-info need-mercprime-if-merc))
                          (set! dma-ptr
                                (foreground-merc
                                  dc
                                  (-> (the-as foreground-work #x70000000) regs mtxs)
                                  (the-as pointer dma-ptr)
                                  32
                                  17
                                  bone-flags
                                  )
                                )
                          (set! dma-ptr
                                (foreground-merc
                                  dc
                                  (-> (the-as foreground-work #x70000000) regs mtxs)
                                  (the-as pointer dma-ptr)
                                  35
                                  20
                                  bone-flags
                                  )
                                )
                          )
                      )
                    )
                  )
                (when (nonzero? (-> (the-as foreground-work #x70000000) regs emerc-used))
                  (if (logtest? (vu1-renderer-mask emerc) (-> *display* vu1-enable-user))
                      (set! dma-ptr
                            (foreground-emerc
                              dc
                              (-> (the-as foreground-work #x70000000) regs mtxs)
                              (the-as pointer dma-ptr)
                              29
                              19
                              bone-flags
                              )
                            )
                      )
                  )
                (when (nonzero? (-> dc death-timer))
                  (b! (paused?) cfg-131 :delay (empty-form))
                  (+! (-> dc death-timer) -1)
                  (if (>= (the-as uint 1) (-> dc death-timer))
                      (send-event (-> dc process) 'death-end dc)
                      )
                  )
                )
              )
            (label cfg-131)
            (let ((v1-190 (logand (the-as int dma-ptr) 48)))
              0
              (b! (zero? v1-190) cfg-133 :delay (set! a0-100 (the-as uint #x20000000)))
              (s.q! dma-ptr a0-100)
              (let ((a0-101 dma-ptr))
                (set! dma-ptr (+ (- (the-as int dma-ptr) (the-as uint v1-190)) 64))
                (s.w! (+ a0-101 4) (the-as int dma-ptr))
                )
              )
            (label cfg-133)
            (set! (-> (the-as foreground-work #x70000000) regs dma-buf base)
                  (the-as pointer (logand dma-ptr (the-as uint #xfffffff)))
                  )
            )
          )
        )
      )
    0
    (none)
    )
  )

;; definition for function foreground-draw-hud
;; ERROR: function was not converted to expressions. Cannot decompile.

;; failed to figure out what this is:
(kmemopen global "foreground-engine")

;; definition for symbol *foreground*, type foreground-globals
(define *foreground* (new 'global 'foreground-globals))

;; definition for symbol *foreground-draw-engine*, type engine
(define *foreground-draw-engine* (new 'global 'engine 'draw 768 connection))

;; failed to figure out what this is:
(kmemclose)




