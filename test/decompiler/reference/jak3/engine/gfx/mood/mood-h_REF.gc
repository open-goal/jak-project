;;-*-Lisp-*-
(in-package goal)

;; definition of type mood-channel
(deftype mood-channel (structure)
  ((data  float    24)
   (vecs  vector4  6 :overlay-at (-> data 0))
   )
  )

;; definition for method 3 of type mood-channel
(defmethod inspect ((this mood-channel))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-channel)
  (format #t "~1Tdata[24] @ #x~X~%" (-> this data))
  (format #t "~1Tvecs[6] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-channel-group
(deftype mood-channel-group (structure)
  ((data  mood-channel  4 :inline)
   )
  )

;; definition for method 3 of type mood-channel-group
(defmethod inspect ((this mood-channel-group))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-channel-group)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-fog
(deftype mood-fog (structure)
  ((fog-color    vector  :inline)
   (fog-dists    vector  :inline)
   (fog-start    meters  :overlay-at (-> fog-dists data 0))
   (fog-end      meters  :overlay-at (-> fog-dists data 1))
   (fog-max      float   :overlay-at (-> fog-dists data 2))
   (fog-min      float   :overlay-at (-> fog-dists data 3))
   (erase-color  vector  :inline)
   )
  )

;; definition for method 3 of type mood-fog
(defmethod inspect ((this mood-fog))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-fog)
  (format #t "~1Tfog-color: #<vector @ #x~X>~%" (-> this fog-color))
  (format #t "~1Tfog-dists: #<vector @ #x~X>~%" (-> this fog-dists))
  (format #t "~1Tfog-start: (meters ~m)~%" (-> this fog-dists x))
  (format #t "~1Tfog-end: (meters ~m)~%" (-> this fog-dists y))
  (format #t "~1Tfog-max: ~f~%" (-> this fog-dists z))
  (format #t "~1Tfog-min: ~f~%" (-> this fog-dists w))
  (format #t "~1Terase-color: #<vector @ #x~X>~%" (-> this erase-color))
  (label cfg-4)
  this
  )

;; definition of type mood-fog-table
(deftype mood-fog-table (structure)
  ((data  mood-fog  8 :inline)
   )
  )

;; definition for method 3 of type mood-fog-table
(defmethod inspect ((this mood-fog-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-fog-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-color
(deftype mood-color (structure)
  ((lgt-color  vector  :inline)
   (amb-color  vector  :inline)
   )
  )

;; definition for method 3 of type mood-color
(defmethod inspect ((this mood-color))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-color)
  (format #t "~1Tlgt-color: #<vector @ #x~X>~%" (-> this lgt-color))
  (format #t "~1Tamb-color: #<vector @ #x~X>~%" (-> this amb-color))
  (label cfg-4)
  this
  )

;; definition of type mood-direction-table
(deftype mood-direction-table (structure)
  ((data  vector  4 :inline)
   )
  )

;; definition for method 3 of type mood-direction-table
(defmethod inspect ((this mood-direction-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-direction-table)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-color-table
(deftype mood-color-table (structure)
  ((data  mood-color  8 :inline)
   )
  )

;; definition for method 3 of type mood-color-table
(defmethod inspect ((this mood-color-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-color-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-sky-table
(deftype mood-sky-table (structure)
  ((data  vector  8 :inline)
   )
  )

;; definition for method 3 of type mood-sky-table
(defmethod inspect ((this mood-sky-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-sky-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-clouds
(deftype mood-clouds (structure)
  ((cloud-min  float)
   (cloud-max  float)
   )
  )

;; definition for method 3 of type mood-clouds
(defmethod inspect ((this mood-clouds))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-clouds)
  (format #t "~1Tcloud-min: ~f~%" (-> this cloud-min))
  (format #t "~1Tcloud-max: ~f~%" (-> this cloud-max))
  (label cfg-4)
  this
  )

;; definition of type mood-weather
(deftype mood-weather (structure)
  ((data   float  2)
   (cloud  float  :overlay-at (-> data 0))
   (fog    float  :overlay-at (-> data 1))
   )
  :pack-me
  :allow-misaligned
  )

;; definition for method 3 of type mood-weather
(defmethod inspect ((this mood-weather))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-weather)
  (format #t "~1Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~1Tcloud: ~f~%" (-> this cloud))
  (format #t "~1Tfog: ~f~%" (-> this fog))
  (label cfg-4)
  this
  )

;; definition of type mood-iweather
(deftype mood-iweather (structure)
  ((data   int32  2)
   (cloud  int32  :overlay-at (-> data 0))
   (fog    int32  :overlay-at (-> data 1))
   )
  :allow-misaligned
  )

;; definition for method 3 of type mood-iweather
(defmethod inspect ((this mood-iweather))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-iweather)
  (format #t "~1Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~1Tcloud: ~D~%" (-> this cloud))
  (format #t "~1Tfog: ~D~%" (-> this fog))
  (label cfg-4)
  this
  )

;; definition of type mood-range
(deftype mood-range (structure)
  ((data       float    4)
   (min-cloud  float    :overlay-at (-> data 0))
   (max-cloud  float    :overlay-at (-> data 1))
   (min-fog    float    :overlay-at (-> data 2))
   (max-fog    float    :overlay-at (-> data 3))
   (quad       uint128  :overlay-at (-> data 0))
   )
  )

;; definition for method 3 of type mood-range
;; INFO: Used lq/sq
(defmethod inspect ((this mood-range))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-range)
  (format #t "~1Tdata[4] @ #x~X~%" (&-> this min-cloud))
  (format #t "~1Tmin-cloud: ~f~%" (-> this min-cloud))
  (format #t "~1Tmax-cloud: ~f~%" (-> this max-cloud))
  (format #t "~1Tmin-fog: ~f~%" (-> this min-fog))
  (format #t "~1Tmax-fog: ~f~%" (-> this max-fog))
  (format #t "~1Tquad: ~D~%" (-> this quad))
  (label cfg-4)
  this
  )

;; definition of type mood-filters-table
(deftype mood-filters-table (structure)
  ((data  vector  8 :inline)
   )
  )

;; definition for method 3 of type mood-filters-table
(defmethod inspect ((this mood-filters-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-filters-table)
  (format #t "~1Tdata[8] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type mood-table
(deftype mood-table (basic)
  ((mood-fog-table        mood-fog-table)
   (mood-color-table      mood-color-table)
   (mood-channel-group    mood-channel-group)
   (mood-direction-table  mood-direction-table)
   (mood-sky-table        mood-sky-table)
   (mood-interp-table     sky-color-day)
   )
  )

;; definition for method 3 of type mood-table
(defmethod inspect ((this mood-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> this mood-fog-table))
  (format #t "~1Tmood-color-table: #<mood-color-table @ #x~X>~%" (-> this mood-color-table))
  (format #t "~1Tmood-channel-group: #<mood-channel-group @ #x~X>~%" (-> this mood-channel-group))
  (format #t "~1Tmood-direction-table: #<mood-direction-table @ #x~X>~%" (-> this mood-direction-table))
  (format #t "~1Tmood-sky-table: #<mood-sky-table @ #x~X>~%" (-> this mood-sky-table))
  (format #t "~1Tmood-interp-table: ~A~%" (-> this mood-interp-table))
  (label cfg-4)
  this
  )

;; definition of type light-state
(deftype light-state (structure)
  ((time  float)
   (fade  float)
   )
  )

;; definition for method 3 of type light-state
(defmethod inspect ((this light-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'light-state)
  (format #t "~1Ttime: ~f~%" (-> this time))
  (format #t "~1Tfade: ~f~%" (-> this fade))
  (label cfg-4)
  this
  )

;; definition of type flicker-state
(deftype flicker-state (structure)
  ((flicker-off  uint8)
   (flicker-on   uint8)
   )
  )

;; definition for method 3 of type flicker-state
(defmethod inspect ((this flicker-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'flicker-state)
  (format #t "~1Tflicker-off: ~D~%" (-> this flicker-off))
  (format #t "~1Tflicker-on: ~D~%" (-> this flicker-on))
  (label cfg-4)
  this
  )

;; definition of type florescent-state
(deftype florescent-state (structure)
  ((value   float)
   (delay   int8)
   (delay2  int8)
   )
  )

;; definition for method 3 of type florescent-state
(defmethod inspect ((this florescent-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'florescent-state)
  (format #t "~1Tvalue: ~f~%" (-> this value))
  (format #t "~1Tdelay: ~D~%" (-> this delay))
  (format #t "~1Tdelay2: ~D~%" (-> this delay2))
  (label cfg-4)
  this
  )

;; definition of type electricity-state
(deftype electricity-state (structure)
  ((value  float)
   (scale  float)
   )
  )

;; definition for method 3 of type electricity-state
(defmethod inspect ((this electricity-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'electricity-state)
  (format #t "~1Tvalue: ~f~%" (-> this value))
  (format #t "~1Tscale: ~f~%" (-> this scale))
  (label cfg-4)
  this
  )

;; definition of type pulse-state
(deftype pulse-state (structure)
  ((pulse              float)
   (brightness         float)
   (target-brightness  float)
   (speed              float)
   )
  )

;; definition for method 3 of type pulse-state
(defmethod inspect ((this pulse-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'pulse-state)
  (format #t "~1Tpulse: ~f~%" (-> this pulse))
  (format #t "~1Tbrightness: ~f~%" (-> this brightness))
  (format #t "~1Ttarget-brightness: ~f~%" (-> this target-brightness))
  (format #t "~1Tspeed: ~f~%" (-> this speed))
  (label cfg-4)
  this
  )

;; definition of type strobe-state
(deftype strobe-state (structure)
  ((time  float)
   )
  )

;; definition for method 3 of type strobe-state
(defmethod inspect ((this strobe-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'strobe-state)
  (format #t "~1Ttime: ~f~%" (-> this time))
  (label cfg-4)
  this
  )

;; definition of type flames-state
(deftype flames-state (structure)
  ((time    float)
   (index   uint8)
   (length  uint8)
   (height  uint8)
   )
  )

;; definition for method 3 of type flames-state
(defmethod inspect ((this flames-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'flames-state)
  (format #t "~1Ttime: ~f~%" (-> this time))
  (format #t "~1Tindex: ~D~%" (-> this index))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Theight: ~D~%" (-> this height))
  (label cfg-4)
  this
  )

;; definition of type mood-context-core
(deftype mood-context-core (structure)
  ((current-fog           mood-fog  :inline)
   (current-sky-color     vector    :inline)
   (current-env-color     vector    :inline)
   (current-prt-color     vector    :inline)
   (current-shadow-color  vector    :inline)
   )
  )

;; definition for method 3 of type mood-context-core
(defmethod inspect ((this mood-context-core))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context-core)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (label cfg-4)
  this
  )

;; definition of type mood-context-core2
(deftype mood-context-core2 (mood-context-core)
  ((light-group  light-group  8 :inline)
   )
  )

;; definition for method 3 of type mood-context-core2
(defmethod inspect ((this mood-context-core2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context-core2)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (label cfg-4)
  this
  )

;; definition of type mood-context-core3
(deftype mood-context-core3 (mood-context-core2)
  ((times  vector  8 :inline)
   )
  )

;; definition for method 3 of type mood-context-core3
(defmethod inspect ((this mood-context-core3))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context-core3)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> this times))
  (label cfg-4)
  this
  )

;; definition of type mood-context
(deftype mood-context (mood-context-core3)
  ((itimes  vector4w  4 :inline)
   (state   uint32    32)
   )
  )

;; definition for method 3 of type mood-context
(defmethod inspect ((this mood-context))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-context)
  (format #t "~1Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~1Tcurrent-sky-color: #<vector @ #x~X>~%" (-> this current-sky-color))
  (format #t "~1Tcurrent-env-color: #<vector @ #x~X>~%" (-> this current-env-color))
  (format #t "~1Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~1Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~1Tlight-group[8] @ #x~X~%" (-> this light-group))
  (format #t "~1Ttimes[8] @ #x~X~%" (-> this times))
  (format #t "~1Titimes[4] @ #x~X~%" (-> this itimes))
  (format #t "~1Tstate[32] @ #x~X~%" (-> this state))
  (label cfg-4)
  this
  )

;; definition of type mood-control-work
(deftype mood-control-work (structure)
  ((color           vector4w       :inline)
   (weather         mood-weather   :inline)
   (iweather        mood-iweather  :inline)
   (interp          mood-weather   :inline)
   (index           int32          4)
   (color-interp    float)
   (color-index     int32          2)
   (channel-interp  float)
   (channel-index   int32          2)
   (cloud-interp    float)
   (cloud-index     int32          2)
   )
  )

;; definition for method 3 of type mood-control-work
(defmethod inspect ((this mood-control-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'mood-control-work)
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color))
  (format #t "~1Tweather: #<mood-weather @ #x~X>~%" (-> this weather))
  (format #t "~1Tiweather: #<mood-iweather @ #x~X>~%" (-> this iweather))
  (format #t "~1Tinterp: #<mood-weather @ #x~X>~%" (-> this interp))
  (format #t "~1Tindex[4] @ #x~X~%" (-> this index))
  (format #t "~1Tcolor-interp: ~f~%" (-> this color-interp))
  (format #t "~1Tcolor-index[2] @ #x~X~%" (-> this color-index))
  (format #t "~1Tchannel-interp: ~f~%" (-> this channel-interp))
  (format #t "~1Tchannel-index[2] @ #x~X~%" (-> this channel-index))
  (format #t "~1Tcloud-interp: ~f~%" (-> this cloud-interp))
  (format #t "~1Tcloud-index[2] @ #x~X~%" (-> this cloud-index))
  (label cfg-4)
  this
  )

;; definition of type mood-control
(deftype mood-control (mood-table)
  ((mood-clouds             mood-clouds)
   (current-interp          mood-weather        :inline)
   (target-interp           mood-weather        :inline)
   (speed-interp            mood-weather        :inline)
   (range                   mood-range          :inline)
   (time-until-random       mood-weather        :inline)
   (time-until-random-min   mood-weather        :inline)
   (time-until-random-max   mood-weather        :inline)
   (current-special-interp  float)
   (target-special-interp   float)
   (rate-special-interp     float)
   (display-flag            symbol)
   (overide-weather-flag    symbol)
   (pad                     int32)
   (overide                 mood-weather        :inline)
   (lightning-index         int32)
   (lightning-val           int32)
   (lightning-time          int32)
   (lightning-time2         float)
   (lightning-time3         float)
   (lightning-flash         float)
   (lightning-id            sound-id)
   (lightning-count0        uint32)
   (lightning-count1        uint32)
   (lightning-count2        uint32)
   (rain-id                 sound-id)
   (sound-pitch             float)
   (fogs                    mood-fog-table      9)
   (colors                  mood-color-table    3)
   (channels                mood-channel-group  3)
   (clouds                  mood-clouds         9)
   )
  (:methods
    (mood-control-method-9 () none)
    (mood-control-method-10 () none)
    (mood-control-method-11 () none)
    (mood-control-method-12 () none)
    (set-special-interps! (_type_ float float symbol) none)
    (weather-event-concluded? (_type_) symbol)
    (mood-control-method-15 () none)
    (mood-control-method-16 () none)
    (mood-control-method-17 () none)
    (mood-control-method-18 () none)
    (mood-control-method-19 () none)
    (mood-control-method-20 () none)
    (mood-control-method-21 () none)
    (mood-control-method-22 () none)
    (mood-control-method-23 () none)
    (mood-control-method-24 () none)
    )
  )

;; definition for method 3 of type mood-control
(defmethod inspect ((this mood-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> this mood-fog-table))
  (format #t "~1Tmood-color-table: #<mood-color-table @ #x~X>~%" (-> this mood-color-table))
  (format #t "~1Tmood-channel-group: #<mood-channel-group @ #x~X>~%" (-> this mood-channel-group))
  (format #t "~1Tmood-direction-table: #<mood-direction-table @ #x~X>~%" (-> this mood-direction-table))
  (format #t "~1Tmood-sky-table: #<mood-sky-table @ #x~X>~%" (-> this mood-sky-table))
  (format #t "~1Tmood-interp-table: ~A~%" (-> this mood-interp-table))
  (format #t "~1Tmood-clouds: #<mood-clouds @ #x~X>~%" (-> this mood-clouds))
  (format #t "~1Tcurrent-interp: #<mood-weather @ #x~X>~%" (-> this current-interp))
  (format #t "~1Ttarget-interp: #<mood-weather @ #x~X>~%" (-> this target-interp))
  (format #t "~1Tspeed-interp: #<mood-weather @ #x~X>~%" (-> this speed-interp))
  (format #t "~1Trange: #<mood-range @ #x~X>~%" (-> this range))
  (format #t "~1Ttime-until-random: #<mood-weather @ #x~X>~%" (-> this time-until-random))
  (format #t "~1Ttime-until-random-min: #<mood-weather @ #x~X>~%" (-> this time-until-random-min))
  (format #t "~1Ttime-until-random-max: #<mood-weather @ #x~X>~%" (-> this time-until-random-max))
  (format #t "~1Tcurrent-special-interp: ~f~%" (-> this current-special-interp))
  (format #t "~1Ttarget-special-interp: ~f~%" (-> this target-special-interp))
  (format #t "~1Trate-special-interp: ~f~%" (-> this rate-special-interp))
  (format #t "~1Tdisplay-flag: ~A~%" (-> this display-flag))
  (format #t "~1Toveride-weather-flag: ~A~%" (-> this overide-weather-flag))
  (format #t "~1Toveride: #<mood-weather @ #x~X>~%" (-> this overide))
  (format #t "~1Tlightning-index: ~D~%" (-> this lightning-index))
  (format #t "~1Tlightning-val: ~D~%" (-> this lightning-val))
  (format #t "~1Tlightning-time: ~D~%" (-> this lightning-time))
  (format #t "~1Tlightning-time2: ~f~%" (-> this lightning-time2))
  (format #t "~1Tlightning-time3: ~f~%" (-> this lightning-time3))
  (format #t "~1Tlightning-flash: ~f~%" (-> this lightning-flash))
  (format #t "~1Tlightning-id: ~D~%" (-> this lightning-id))
  (format #t "~1Tlightning-count0: ~D~%" (-> this lightning-count0))
  (format #t "~1Tlightning-count1: ~D~%" (-> this lightning-count1))
  (format #t "~1Tlightning-count2: ~D~%" (-> this lightning-count2))
  (format #t "~1Train-id: ~D~%" (-> this rain-id))
  (format #t "~1Tsound-pitch: ~f~%" (-> this sound-pitch))
  (format #t "~1Tfogs[9] @ #x~X~%" (-> this fogs))
  (format #t "~1Tcolors[3] @ #x~X~%" (-> this colors))
  (format #t "~1Tchannels[3] @ #x~X~%" (-> this channels))
  (format #t "~1Tclouds[9] @ #x~X~%" (-> this clouds))
  (label cfg-4)
  this
  )

;; definition for method 13 of type mood-control
;; WARN: Return type mismatch int vs none.
(defmethod set-special-interps! ((this mood-control) (target-interp float) (rate-interp float) (set-current-interp? symbol))
  "Sets the `*-special-interp` values with the given values
   @param! this The [[mood-control]]
   @param target-interp Clamped between 0.0 and 1.0
   @param rate-interp Value to set [[this::rate-special-interp]]
   @param set-current-interp? Uses `target-interp` to set [[this::current-special-interp]
   @returns [[none]]"
  (let ((clamped-interp (fmax 0.0 (fmin 1.0 target-interp))))
    (set! (-> this target-special-interp) clamped-interp)
    (set! (-> this rate-special-interp) rate-interp)
    (if set-current-interp?
        (set! (-> this current-special-interp) clamped-interp)
        )
    )
  0
  (none)
  )

;; definition for method 14 of type mood-control
(defmethod weather-event-concluded? ((this mood-control))
  "@returns [[#t]] if [[this::override-weather-flag]] is set, we aren't in a cutscene and [[this::current-special-interp]] is equal to `0.0`"
  (and (-> this overide-weather-flag) (not (movie?)) (= (-> this current-special-interp) 0.0))
  )

;; failed to figure out what this is:
0
