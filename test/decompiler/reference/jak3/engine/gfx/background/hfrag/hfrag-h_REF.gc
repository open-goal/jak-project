;;-*-Lisp-*-
(in-package goal)

;; definition of type adgif-shader-array
(deftype adgif-shader-array (inline-array-class)
  ((data  adgif-shader  :inline :dynamic)
   )
  )

;; definition for method 3 of type adgif-shader-array
(defmethod inspect ((this adgif-shader-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> adgif-shader-array heap-base) (the-as uint 80))

;; definition of type hfrag-montage
(deftype hfrag-montage (structure)
  ((data  uint16  16)
   )
  )

;; definition for method 3 of type hfrag-montage
(defmethod inspect ((this hfrag-montage))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-montage)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type hfrag-bucket
(deftype hfrag-bucket (structure)
  ((next                  pointer)
   (count                 uint16)
   (vertex-count          uint16)
   (next-scissor          pointer)
   (count-scissor         uint16)
   (vertex-count-scissor  uint16)
   )
  )

;; definition for method 3 of type hfrag-bucket
(defmethod inspect ((this hfrag-bucket))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-bucket)
  (format #t "~1Tnext: #x~X~%" (-> this next))
  (format #t "~1Tcount: ~D~%" (-> this count))
  (format #t "~1Tvertex-count: ~D~%" (-> this vertex-count))
  (format #t "~1Tnext-scissor: #x~X~%" (-> this next-scissor))
  (format #t "~1Tcount-scissor: ~D~%" (-> this count-scissor))
  (format #t "~1Tvertex-count-scissor: ~D~%" (-> this vertex-count-scissor))
  (label cfg-4)
  this
  )

;; definition of type hfrag-packed-index
(deftype hfrag-packed-index (uint16)
  ((color uint16 :offset   0 :size  11)
   (bit11 uint8  :offset  11 :size   5)
   )
  )

;; definition of type hfrag-vertex
(deftype hfrag-vertex (structure)
  ((height        uint16)
   (packed-index  hfrag-packed-index)
   )
  :pack-me
  )

;; definition for method 3 of type hfrag-vertex
(defmethod inspect ((this hfrag-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vertex)
  (format #t "~1Theight: ~D~%" (-> this height))
  (format #t "~1Tpacked-index: ~D~%" (-> this packed-index))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vert-index
(deftype hfrag-vert-index (structure)
  ((pos     vector2ub  :inline)
   (index0  uint16     :offset   2)
   (index1  uint16     :offset   4)
   (index2  uint16     :offset   6)
   )
  :pack-me
  )

;; definition for method 3 of type hfrag-vert-index
(defmethod inspect ((this hfrag-vert-index))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vert-index)
  (format #t "~1Tpos: #<vector2ub @ #x~X>~%" (-> this pos))
  (format #t "~1Tindex0: ~D~%" (-> this index0))
  (format #t "~1Tindex1: ~D~%" (-> this index1))
  (format #t "~1Tindex2: ~D~%" (-> this index2))
  (label cfg-4)
  this
  )

;; definition of type hfrag-poly4
(deftype hfrag-poly4 (structure)
  ((data  hfrag-vert-index  4 :inline)
   )
  )

;; definition for method 3 of type hfrag-poly4
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-poly4))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-poly4)
  (format #t "~1Tdata[4] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition for method 3 of type hfrag-poly4
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-poly4))
  (format #t "[~8x] hfrag-poly4~%" this)
  (dotimes (s5-0 4)
    (format
      #t
      "~T~d: index0: ~d  index1: ~d  index2:  ~d  pos: ~d ~d~%"
      s5-0
      (shr (-> this data s5-0 index0) 2)
      (shr (-> this data s5-0 index1) 2)
      (shr (-> this data s5-0 index2) 2)
      (-> this data s5-0 pos x)
      (-> this data s5-0 pos y)
      )
    )
  this
  )

;; definition of type hfrag-poly9
(deftype hfrag-poly9 (structure)
  ((data  hfrag-vert-index  9 :inline)
   )
  :pack-me
  )

;; definition for method 3 of type hfrag-poly9
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-poly9))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-poly9)
  (format #t "~1Tdata[9] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition for method 3 of type hfrag-poly9
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-poly9))
  (format #t "[~8x] hfrag-poly9~%" this)
  (dotimes (s5-0 9)
    (format
      #t
      "~T~d: index0: ~d  index1: ~d  index2:  ~d  pos: ~d ~d~%"
      s5-0
      (shr (-> this data s5-0 index0) 2)
      (shr (-> this data s5-0 index1) 2)
      (shr (-> this data s5-0 index2) 2)
      (-> this data s5-0 pos x)
      (-> this data s5-0 pos y)
      )
    )
  this
  )

;; definition of type hfrag-poly25
(deftype hfrag-poly25 (structure)
  ((data  hfrag-vert-index  25 :inline)
   )
  :pack-me
  )

;; definition for method 3 of type hfrag-poly25
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-poly25))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-poly25)
  (format #t "~1Tdata[25] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition for method 3 of type hfrag-poly25
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-poly25))
  (format #t "[~8x] hfrag-poly9~%" this)
  (dotimes (s5-0 25)
    (format
      #t
      "~T~d: index0: ~d  index1: ~d  index2:  ~d  pos: ~d ~d~%"
      s5-0
      (shr (-> this data s5-0 index0) 2)
      (shr (-> this data s5-0 index1) 2)
      (shr (-> this data s5-0 index2) 2)
      (-> this data s5-0 pos x)
      (-> this data s5-0 pos y)
      )
    )
  this
  )

;; definition of type hfrag-poly4-chain
(deftype hfrag-poly4-chain (structure)
  ((tag    dma-packet  :inline)
   (verts  vector4w-3  4 :inline)
   (next   dma-packet  :inline :offset 208)
   )
  )

;; definition for method 3 of type hfrag-poly4-chain
(defmethod inspect ((this hfrag-poly4-chain))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-poly4-chain)
  (format #t "~1Ttag: #<dma-packet @ #x~X>~%" (-> this tag))
  (format #t "~1Tverts[4] @ #x~X~%" (-> this verts))
  (format #t "~1Tnext: #<dma-packet @ #x~X>~%" (-> this next))
  (label cfg-4)
  this
  )

;; definition of type hfrag-poly9-chain
(deftype hfrag-poly9-chain (structure)
  ((tag    dma-packet  :inline)
   (verts  vector4w-3  12 :inline)
   (next   dma-packet  :inline :offset 592)
   )
  )

;; definition for method 3 of type hfrag-poly9-chain
(defmethod inspect ((this hfrag-poly9-chain))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-poly9-chain)
  (format #t "~1Ttag: #<dma-packet @ #x~X>~%" (-> this tag))
  (format #t "~1Tverts[12] @ #x~X~%" (-> this verts))
  (format #t "~1Tnext: #<dma-packet @ #x~X>~%" (-> this next))
  (label cfg-4)
  this
  )

;; definition of type hfrag-poly25-chain
(deftype hfrag-poly25-chain (structure)
  ((tag    dma-packet  :inline)
   (verts  vector4w-3  40 :inline)
   (next   dma-packet  :inline)
   )
  )

;; definition for method 3 of type hfrag-poly25-chain
(defmethod inspect ((this hfrag-poly25-chain))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-poly25-chain)
  (format #t "~1Ttag: #<dma-packet @ #x~X>~%" (-> this tag))
  (format #t "~1Tverts[40] @ #x~X~%" (-> this verts))
  (format #t "~1Tnext: #<dma-packet @ #x~X>~%" (-> this next))
  (label cfg-4)
  this
  )

;; definition of type hfrag-cache-vertex
(deftype hfrag-cache-vertex (structure)
  ((color  vector4w  :inline)
   (pos    vector    :inline)
   (clip   uint32    :overlay-at (-> pos data 3))
   )
  )

;; definition for method 3 of type hfrag-cache-vertex
(defmethod inspect ((this hfrag-cache-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-cache-vertex)
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tclip: ~D~%" (-> this pos w))
  (label cfg-4)
  this
  )

;; definition of type hfrag-cache-line
(deftype hfrag-cache-line (structure)
  ((data  hfrag-cache-vertex  9 :inline)
   )
  )

;; definition for method 3 of type hfrag-cache-line
(defmethod inspect ((this hfrag-cache-line))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-cache-line)
  (format #t "~1Tdata[9] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type hfrag-visbits
(deftype hfrag-visbits (structure)
  ((data  uint8  128)
   )
  )

;; definition for method 3 of type hfrag-visbits
(defmethod inspect ((this hfrag-visbits))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-visbits)
  (format #t "~1Tdata[128] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; definition of type hfrag-gcf-control
(deftype hfrag-gcf-control (structure)
  ((matrix       matrix           :inline)
   (giftag       generic-gif-tag  :inline)
   (adnops       gs-adcmd         2 :inline)
   (num-strips   uint32           :overlay-at (-> giftag data 3))
   (num-dps      uint32           :overlay-at (-> adnops 0 word 3))
   (kick-offset  uint32           :offset 108)
   (shader       gcf-shader       :inline)
   )
  )

;; definition for method 3 of type hfrag-gcf-control
(defmethod inspect ((this hfrag-gcf-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-gcf-control)
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tgiftag: #<generic-gif-tag @ #x~X>~%" (-> this giftag))
  (format #t "~1Tadnops[2] @ #x~X~%" (-> this adnops))
  (format #t "~1Tnum-strips: ~D~%" (-> this giftag num-strips))
  (format #t "~1Tnum-dps: ~D~%" (-> this num-dps))
  (format #t "~1Tkick-offset: ~D~%" (-> this kick-offset))
  (format #t "~1Tshader: #<gcf-shader @ #x~X>~%" (-> this shader))
  (label cfg-4)
  this
  )

;; definition of type hfrag-gcf-ctrl
(deftype hfrag-gcf-ctrl (structure)
  ((tag      dma-packet         :inline)
   (control  hfrag-gcf-control  :inline)
   )
  )

;; definition for method 3 of type hfrag-gcf-ctrl
(defmethod inspect ((this hfrag-gcf-ctrl))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-gcf-ctrl)
  (format #t "~1Ttag: #<dma-packet @ #x~X>~%" (-> this tag))
  (format #t "~1Tcontrol: #<hfrag-gcf-control @ #x~X>~%" (-> this control))
  (label cfg-4)
  this
  )

;; definition of type hfrag-init-packet
(deftype hfrag-init-packet (structure)
  ((init-tmpl  dma-packet  :inline)
   (init-data  uint32      8)
   (init-vif   vif-tag     :overlay-at (-> init-data 7))
   )
  )

;; definition for method 3 of type hfrag-init-packet
(defmethod inspect ((this hfrag-init-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-init-packet)
  (format #t "~1Tinit-tmpl: #<dma-packet @ #x~X>~%" (-> this init-tmpl))
  (format #t "~1Tinit-data[8] @ #x~X~%" (-> this init-data))
  (format #t "~1Tquad[3] @ #x~X~%" (-> this init-tmpl))
  (label cfg-4)
  this
  )

;; definition of type hfrag-sprite-coord
(deftype hfrag-sprite-coord (structure)
  ((pos0  vector4w  :inline)
   (pos1  vector4w  :inline)
   )
  )

;; definition for method 3 of type hfrag-sprite-coord
(defmethod inspect ((this hfrag-sprite-coord))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-sprite-coord)
  (format #t "~1Tpos0: #<vector4w @ #x~X>~%" (-> this pos0))
  (format #t "~1Tpos1: #<vector4w @ #x~X>~%" (-> this pos1))
  (label cfg-4)
  this
  )

;; definition of type hfrag-montage-coord
(deftype hfrag-montage-coord (structure)
  ((stq0  vector4  :inline)
   (stq1  vector4  :inline)
   )
  )

;; definition for method 3 of type hfrag-montage-coord
(defmethod inspect ((this hfrag-montage-coord))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-montage-coord)
  (format #t "~1Tstq0: #<vector4 @ #x~X>~%" (-> this stq0))
  (format #t "~1Tstq1: #<vector4 @ #x~X>~%" (-> this stq1))
  (label cfg-4)
  this
  )

;; definition of type hfrag-sprite-packet
(deftype hfrag-sprite-packet (structure)
  ((sprite-tmpl  dma-gif-packet  :inline)
   (color        vector4w        :inline)
   (tex0         vector          :inline)
   (pos0         vector4w        :inline)
   (tex1         vector          :inline)
   (pos1         vector4w        :inline)
   )
  )

;; definition for method 3 of type hfrag-sprite-packet
(defmethod inspect ((this hfrag-sprite-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-sprite-packet)
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color))
  (format #t "~1Ttex0: #<vector @ #x~X>~%" (-> this tex0))
  (format #t "~1Tpos0: #<vector4w @ #x~X>~%" (-> this pos0))
  (format #t "~1Ttex1: #<vector @ #x~X>~%" (-> this tex1))
  (format #t "~1Tpos1: #<vector4w @ #x~X>~%" (-> this pos1))
  (label cfg-4)
  this
  )

;; definition of type hfrag-tex-data
(deftype hfrag-tex-data (structure)
  ((quad      qword    3 :inline)
   (prims     uint64   6 :overlay-at quad)
   (reg-0     gs-reg     :overlay-at (-> quad 0 data 2))
   (reg-1     gs-reg     :overlay-at (-> prims 3))
   (reg-2     gs-reg     :overlay-at (-> prims 5))
   (tex0      gs-tex0    :overlay-at (-> quad 0 data 0))
   (tex1      gs-tex1    :overlay-at (-> prims 2))
   (texflush  uint64     :overlay-at (-> prims 4))
   )
  )

;; definition for method 3 of type hfrag-tex-data
(defmethod inspect ((this hfrag-tex-data))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-tex-data)
  (format #t "~1Tquad[3] @ #x~X~%" (&-> this tex0))
  (format #t "~1Tprims[6] @ #x~X~%" (&-> this tex0))
  (format #t "~1Treg-0: ~D~%" (-> this reg-0))
  (format #t "~1Treg-1: ~D~%" (-> this reg-1))
  (format #t "~1Treg-2: ~D~%" (-> this reg-2))
  (format #t "~1Ttex0: #x~X~%" (-> this tex0))
  (format #t "~1Ttex1: #x~X~%" (-> this tex1))
  (format #t "~1Ttexflush: #x~X~%" (-> this texflush))
  (label cfg-4)
  this
  )

;; definition of type hfrag-mip-packet
(deftype hfrag-mip-packet (structure)
  ((mip-tmpl  dma-gif-packet  :inline)
   (tex0-1    vector          :inline)
   (tex1-1    vector          :inline)
   (texflush  vector          :inline)
   (color     vector4w        :inline)
   (tex0      vector          :inline)
   (pos0      vector          :inline)
   (tex1      vector          :inline)
   (pos1      vector          :inline)
   )
  )

;; definition for method 3 of type hfrag-mip-packet
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-mip-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-mip-packet)
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this mip-tmpl))
  (format #t "~1Tadnop0: #<vector @ #x~X>~%" (-> this tex0-1))
  (format #t "~1Tadnop1: #<vector @ #x~X>~%" (-> this tex1-1))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this texflush))
  (format #t "~1Ttex0: #<vector @ #x~X>~%" (-> this color))
  (format #t "~1Tpos0: #<vector4w @ #x~X>~%" (-> this tex0))
  (format #t "~1Ttex1: #<vector @ #x~X>~%" (-> this pos0))
  (format #t "~1Tpos1: #<vector4w @ #x~X>~%" (-> this tex1))
  (label cfg-4)
  this
  )

;; definition of type hfrag-adgif-packet
(deftype hfrag-adgif-packet (structure)
  ((adgif-tmpl  dma-gif-packet  :inline)
   (adgif-data  adgif-shader    :inline)
   )
  )

;; definition for method 3 of type hfrag-adgif-packet
(defmethod inspect ((this hfrag-adgif-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-adgif-packet)
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tadgif-data: #<adgif-shader @ #x~X>~%" (-> this adgif-data))
  (label cfg-4)
  this
  )

;; definition of type hfrag-adgif-packet2
(deftype hfrag-adgif-packet2 (structure)
  ((adgif-tmpl  dma-gif-packet  :inline)
   (adgif-data  adgif-shader    :inline)
   (texflush    uint128)
   )
  )

;; definition for method 3 of type hfrag-adgif-packet2
;; INFO: Used lq/sq
(defmethod inspect ((this hfrag-adgif-packet2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-adgif-packet2)
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tadgif-data: #<adgif-shader @ #x~X>~%" (-> this adgif-data))
  (format #t "~1Ttexflush: ~D~%" (-> this texflush))
  (label cfg-4)
  this
  )

;; definition of type hfrag-frame
(deftype hfrag-frame (structure)
  ((quad      qword         4 :inline :offset   0)
   (prims     uint64        8         :overlay-at quad)
   (reg-0     gs-reg                  :overlay-at (-> prims 1))
   (reg-1     gs-reg                  :overlay-at (-> prims 3))
   (reg-2     gs-reg                  :overlay-at (-> prims 5))
   (reg-3     gs-reg                  :overlay-at (-> prims 7))
   (frame     gs-frame                :overlay-at (-> prims 0))
   (scissor   gs-scissor              :overlay-at (-> prims 2))
   (xyoffset  gs-xy-offset            :overlay-at (-> prims 4))
   (test      gs-test                 :overlay-at (-> prims 6))
   )
  )

;; definition for method 3 of type hfrag-frame
(defmethod inspect ((this hfrag-frame))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-frame)
  (format #t "~1Tquad[4] @ #x~X~%" (&-> this frame))
  (format #t "~1Tprims[8] @ #x~X~%" (&-> this frame))
  (format #t "~1Treg-0: ~D~%" (-> this reg-0))
  (format #t "~1Treg-1: ~D~%" (-> this reg-1))
  (format #t "~1Treg-2: ~D~%" (-> this reg-2))
  (format #t "~1Treg-3: ~D~%" (-> this reg-3))
  (format #t "~1Tframe: #x~X~%" (-> this frame))
  (format #t "~1Tscissor: #x~X~%" (-> this scissor))
  (format #t "~1Txyoffset: #x~X~%" (-> this xyoffset))
  (format #t "~1Ttest: #x~X~%" (-> this test))
  (label cfg-4)
  this
  )

;; definition of type hfrag-frame-packet
(deftype hfrag-frame-packet (structure)
  ((frame-tmpl  dma-gif-packet  :inline)
   (frame-data  hfrag-frame     :inline)
   )
  )

;; definition for method 3 of type hfrag-frame-packet
(defmethod inspect ((this hfrag-frame-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-frame-packet)
  (format #t "~1Tframe-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this frame-tmpl))
  (format #t "~1Tframe-data: #<hfrag-frame @ #x~X>~%" (-> this frame-data))
  (label cfg-4)
  this
  )

;; definition of type hfragment
(deftype hfragment (drawable)
  ((start-corner      vector  :inline)
   (spheres           (inline-array vector))
   (visids            (pointer int16))
   (shaders           (inline-array adgif-shader))
   (colors            time-of-day-palette)
   (montage           uint32)
   (buckets-far       (inline-array hfrag-bucket))
   (buckets-mid       (inline-array hfrag-bucket))
   (buckets-near      (inline-array hfrag-bucket))
   (verts             (inline-array hfrag-vertex))
   (pat-array         (pointer pat-surface))
   (pat-length        uint16)
   (num-buckets-far   uint16)
   (num-buckets-mid   uint16)
   (num-buckets-near  uint16)
   (size              uint32  :overlay-at (-> start-corner data 3))
   )
  (:methods
    (bounding-box-query (_type_ collide-cache collide-query) none)
    (line-sphere-query (_type_ collide-cache collide-query) none)
    (add-tri-to-collide-cache (_type_ collide-cache collide-query int int int int) none)
    (add-tri-a-xy-zzz-to-collide-cache (_type_ collide-cache int int uint uint uint pat-surface) none)
    (add-tri-b-xy-zzz-to-collide-cache (_type_ collide-cache int int uint uint uint pat-surface) none)
    )
  )

;; definition for method 3 of type hfragment
(defmethod inspect ((this hfragment))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~1Tstart-corner: #<vector @ #x~X>~%" (-> this start-corner))
  (format #t "~1Tspheres: #x~X~%" (-> this spheres))
  (format #t "~1Tvisids: #x~X~%" (-> this visids))
  (format #t "~1Tshaders: #x~X~%" (-> this shaders))
  (format #t "~1Tcolors: ~A~%" (-> this colors))
  (format #t "~1Tmontage: #x~X~%" (-> this montage))
  (format #t "~1Tbuckets-far: #x~X~%" (-> this buckets-far))
  (format #t "~1Tbuckets-mid: #x~X~%" (-> this buckets-mid))
  (format #t "~1Tbuckets-near: #x~X~%" (-> this buckets-near))
  (format #t "~1Tverts: #x~X~%" (-> this verts))
  (format #t "~1Tpat-array: #x~X~%" (-> this pat-array))
  (format #t "~1Tpat-length: ~D~%" (-> this pat-length))
  (format #t "~1Tnum-buckets-far: ~D~%" (-> this num-buckets-far))
  (format #t "~1Tnum-buckets-mid: ~D~%" (-> this num-buckets-mid))
  (format #t "~1Tnum-buckets-near: ~D~%" (-> this num-buckets-near))
  (format #t "~1Tsize: ~D~%" (-> this size))
  (label cfg-4)
  this
  )

;; definition for method 9 of type hfragment
(defmethod login ((this hfragment))
  "Initialize the object after it is loaded."
  (dotimes (s5-0 3)
    (adgif-shader-login (-> this shaders s5-0))
    (if (> s5-0 0)
        (set! (-> this shaders s5-0 tex0 tcc) 0)
        )
    (set! (-> this shaders 1 tex0 cbp) 3904)
    (set! (-> this shaders 2 tex0 cbp) 3904)
    )
  this
  )

;; definition of type hfrag-dma
(deftype hfrag-dma (structure)
  ((banka   uint32            340)
   (bankb   uint32            340)
   (outa    uint128           227)
   (outb    uint128           227)
   (cache   hfrag-cache-line  8 :inline)
   (colors  rgba              1024)
   )
  )

;; definition for method 3 of type hfrag-dma
(defmethod inspect ((this hfrag-dma))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-dma)
  (format #t "~1Tbanka[340] @ #x~X~%" (-> this banka))
  (format #t "~1Tbankb[340] @ #x~X~%" (-> this bankb))
  (format #t "~1Touta[227] @ #x~X~%" (-> this outa))
  (format #t "~1Toutb[227] @ #x~X~%" (-> this outb))
  (format #t "~1Tcache[8] @ #x~X~%" (-> this cache))
  (format #t "~1Tcolors[1024] @ #x~X~%" (-> this colors))
  (label cfg-4)
  this
  )

;; definition of type hfrag-work
(deftype hfrag-work (structure)
  ((far-chaina              dma-packet           6 :inline)
   (far-chainb              dma-packet           6 :inline)
   (mid-chaina              dma-packet           10 :inline)
   (mid-chainb              dma-packet           10 :inline)
   (near-chaina             dma-packet           18 :inline)
   (near-chainb             dma-packet           18 :inline)
   (poly4-tmpl              dma-packet           3 :inline)
   (poly9-tmpl              dma-packet           3 :inline)
   (poly25-tmpl             dma-packet           3 :inline)
   (init-tmpl               hfrag-init-packet    3 :inline)
   (control-tmpl            dma-packet           2 :inline)
   (heights4-tmpl           dma-packet           2 :inline)
   (colors4-tmpl            dma-packet           2 :inline)
   (heights9-tmpl           dma-packet           2 :inline)
   (colors9-tmpl            dma-packet           2 :inline)
   (heights25-tmpl          dma-packet           2 :inline)
   (colors25-tmpl           dma-packet           2 :inline)
   (init-vu1-tmpl           hfrag-init-packet    2 :inline)
   (next-tmpl               dma-packet           :inline)
   (call-tmpl               dma-packet           :inline)
   (ret-tmpl                dma-packet           :inline)
   (next-scissor-tmpl       dma-packet           :inline)
   (ret-scissor-tmpl        dma-packet           :inline)
   (frame-tmpl              dma-gif-packet       :inline)
   (frames                  hfrag-frame          5 :inline)
   (adgif-tmpl              dma-gif-packet       :inline)
   (adgif-tmpl2             dma-gif-packet       :inline)
   (sprite-tmpl             dma-gif-packet       :inline)
   (mip-tmpl                dma-gif-packet       :inline)
   (color                   vector4w             6 :inline)
   (far-data                hfrag-sprite-coord   :inline)
   (near-data               vector4w-2           16 :inline)
   (mip-data                vector4w-2           7 :inline)
   (tex-data                hfrag-tex-data       5 :inline)
   (tex                     vector               6 :inline)
   (montage-tex-coords      hfrag-montage-coord  128 :inline :offset 3456)
   (giftag                  generic-gif-tag      :inline     :offset 7552)
   (call-abort              dma-packet           :inline)
   (call-abort-vu1          dma-packet           :inline)
   (shader-far              adgif-shader         :inline)
   (shader-mid              adgif-shader         :inline)
   (shader-near             adgif-shader         :inline)
   (stq                     vector4w             9 :inline)
   (shader                  adgif-shader         :inline)
   (constants               vector               :inline)
   (pos-temp                vector4w             :inline)
   (trans-temp              vector               :inline     :overlay-at (-> pos-temp data 0))
   (dists                   vector               :inline)
   (rdists                  vector               :inline)
   (call-poly4-near         vif-tag)
   (call-poly9-mid          vif-tag)
   (call-poly9-near         vif-tag)
   (call-poly25-far         vif-tag)
   (call-poly25-mid         vif-tag)
   (dma-buffer              basic)
   (base                    uint32)
   (wait-to-spr             uint32)
   (wait-from-spr           uint32)
   (buffer-end              uint32)
   (subdiv-index            uint32)
   (scissor                 symbol)
   (chain-ptr               uint32)
   (chain-ptr-next          uint32)
   (near-dist               float)
   (far-dist                float)
   (to-spr                  uint32)
   (from-spr                uint32)
   (lowres-flag             symbol)
   (hfrag                   hfragment            :inline)
   (next-far                int16)
   (next-far-mid            int16)
   (next-mid                int16)
   (next-near-mid           int16)
   (next-near               int16)
   (next-far-scissor        int16)
   (next-near-mid-scissor   int16)
   (next-near-scissor       int16)
   (count-far               int16)
   (count-far-mid           int16)
   (count-mid               int16)
   (count-near-mid          int16)
   (count-near              int16)
   (count-far-scissor       int16)
   (count-near-mid-scissor  int16)
   (count-near-scissor      int16)
   (size-far                int32)
   (size-far-mid            int32)
   (size-mid                int32)
   (size-near-mid           int32)
   (size-near               int32)
   (size-far-scissor        int32)
   (size-near-mid-scissor   int32)
   (size-near-scissor       int32)
   (size-texture            int32)
   (poly-far                hfrag-poly25)
   (poly-mid25              (inline-array hfrag-poly25))
   (poly-mid                (inline-array hfrag-poly9))
   (poly-near               (inline-array hfrag-poly9))
   (far-texture             pointer)
   (near-textures           uint16               16)
   (draw-table              int16                1024        :offset 8456)
   (corners                 vector               1024 :inline)
   )
  (:methods
    (initialize-renderer! (_type_) none)
    (init-work-from-current-hfrag! (_type_) none)
    (pick-level-of-detail! (_type_ level) none)
    (generate-vertices! (_type_) none)
    (finalize-dma! (_type_) none)
    (setup-far-vertex-index! (_type_ hfrag-vert-index int int) none)
    (setup-mid-vertex-index! (_type_ hfrag-vert-index int int) none)
    (setup-near-vertex-index! (_type_ hfrag-vert-index int int) none)
    (init-montage-tex-coords (_type_) none)
    (asm-far-scissor (_type_ dma-buffer int) none)
    (hfrag-work-method-19 () none)
    (hfrag-work-method-20 () none)
    (asm-near-mid-scissor (_type_ dma-buffer int) none)
    (hfrag-work-method-22 () none)
    (generate-montage-texture (_type_) none)
    (hfrag-work-method-24 (_type_ dma-buffer) none)
    (hfrag-work-method-25 (_type_ dma-buffer) none)
    (hfrag-work-method-26 (_type_ dma-buffer) none)
    (asm-far (_type_ dma-buffer int) none)
    (asm-far-mid (_type_ dma-buffer int) none)
    (asm-mid (_type_ dma-buffer int) none)
    (asm-near-mid (_type_ dma-buffer int) none)
    (asm-near (_type_ dma-buffer int) none)
    (hfrag-work-method-32 (_type_ dma-buffer) none)
    (hfrag-work-method-33 (_type_ dma-buffer) none)
    (hfrag-work-method-34 (_type_ dma-buffer) none)
    (trim-dma-to-fit-in-memory (_type_) none)
    )
  )

;; definition for method 3 of type hfrag-work
(defmethod inspect ((this hfrag-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-work)
  (format #t "~1Tfar-chaina[6] @ #x~X~%" (-> this far-chaina))
  (format #t "~1Tfar-chainb[6] @ #x~X~%" (-> this far-chainb))
  (format #t "~1Tmid-chaina[10] @ #x~X~%" (-> this mid-chaina))
  (format #t "~1Tmid-chainb[10] @ #x~X~%" (-> this mid-chainb))
  (format #t "~1Tnear-chaina[18] @ #x~X~%" (-> this near-chaina))
  (format #t "~1Tnear-chainb[18] @ #x~X~%" (-> this near-chainb))
  (format #t "~1Tpoly4-tmpl[3] @ #x~X~%" (-> this poly4-tmpl))
  (format #t "~1Tpoly9-tmpl[3] @ #x~X~%" (-> this poly9-tmpl))
  (format #t "~1Tpoly25-tmpl[3] @ #x~X~%" (-> this poly25-tmpl))
  (format #t "~1Tinit-tmpl[3] @ #x~X~%" (-> this init-tmpl))
  (format #t "~1Tcontrol-tmpl[2] @ #x~X~%" (-> this control-tmpl))
  (format #t "~1Theights4-tmpl[2] @ #x~X~%" (-> this heights4-tmpl))
  (format #t "~1Tcolors4-tmpl[2] @ #x~X~%" (-> this colors4-tmpl))
  (format #t "~1Theights9-tmpl[2] @ #x~X~%" (-> this heights9-tmpl))
  (format #t "~1Tcolors9-tmpl[2] @ #x~X~%" (-> this colors9-tmpl))
  (format #t "~1Theights25-tmpl[2] @ #x~X~%" (-> this heights25-tmpl))
  (format #t "~1Tcolors25-tmpl[2] @ #x~X~%" (-> this colors25-tmpl))
  (format #t "~1Tinit-vu1-tmpl[2] @ #x~X~%" (-> this init-vu1-tmpl))
  (format #t "~1Tnext-tmpl: #<dma-packet @ #x~X>~%" (-> this next-tmpl))
  (format #t "~1Tcall-tmpl: #<dma-packet @ #x~X>~%" (-> this call-tmpl))
  (format #t "~1Tret-tmpl: #<dma-packet @ #x~X>~%" (-> this ret-tmpl))
  (format #t "~1Tnext-scissor-tmpl: #<dma-packet @ #x~X>~%" (-> this next-scissor-tmpl))
  (format #t "~1Tret-scissor-tmpl: #<dma-packet @ #x~X>~%" (-> this ret-scissor-tmpl))
  (format #t "~1Tframe-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this frame-tmpl))
  (format #t "~1Tframes[5] @ #x~X~%" (-> this frames))
  (format #t "~1Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~1Tadgif-tmpl2: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl2))
  (format #t "~1Tsprite-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this sprite-tmpl))
  (format #t "~1Tmip-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this mip-tmpl))
  (format #t "~1Tcolor[6] @ #x~X~%" (-> this color))
  (format #t "~1Tfar-data: #<hfrag-sprite-coord @ #x~X>~%" (-> this far-data))
  (format #t "~1Tnear-data[16] @ #x~X~%" (-> this near-data))
  (format #t "~1Tmip-data[7] @ #x~X~%" (-> this mip-data))
  (format #t "~1Ttex-data[5] @ #x~X~%" (-> this tex-data))
  (format #t "~1Ttex[6] @ #x~X~%" (-> this tex))
  (format #t "~1Tmontage-tex-coords[128] @ #x~X~%" (-> this montage-tex-coords))
  (format #t "~1Tgiftag: #<generic-gif-tag @ #x~X>~%" (-> this giftag))
  (format #t "~1Tcall-abort: #<dma-packet @ #x~X>~%" (-> this call-abort))
  (format #t "~1Tcall-abort-vu1: #<dma-packet @ #x~X>~%" (-> this call-abort-vu1))
  (format #t "~1Tshader-far: #<adgif-shader @ #x~X>~%" (-> this shader-far))
  (format #t "~1Tshader-mid: #<adgif-shader @ #x~X>~%" (-> this shader-mid))
  (format #t "~1Tshader-near: #<adgif-shader @ #x~X>~%" (-> this shader-near))
  (format #t "~1Tstq[9] @ #x~X~%" (-> this stq))
  (format #t "~1Tshader: #<adgif-shader @ #x~X>~%" (-> this shader))
  (format #t "~1Tconstants: #<vector @ #x~X>~%" (-> this constants))
  (format #t "~1Tpos-temp: #<vector4w @ #x~X>~%" (-> this pos-temp))
  (format #t "~1Ttrans-temp: #<vector @ #x~X>~%" (-> this pos-temp))
  (format #t "~1Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~1Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~1Tcall-poly4-near: ~D~%" (-> this call-poly4-near))
  (format #t "~1Tcall-poly9-mid: ~D~%" (-> this call-poly9-mid))
  (format #t "~1Tcall-poly9-near: ~D~%" (-> this call-poly9-near))
  (format #t "~1Tcall-poly25-far: ~D~%" (-> this call-poly25-far))
  (format #t "~1Tcall-poly25-mid: ~D~%" (-> this call-poly25-mid))
  (format #t "~1Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~1Tbase: #x~X~%" (-> this base))
  (format #t "~1Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~1Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~1Tbuffer-end: #x~X~%" (-> this buffer-end))
  (format #t "~1Tsubdiv-index: ~D~%" (-> this subdiv-index))
  (format #t "~1Tscissor: ~A~%" (-> this scissor))
  (format #t "~1Tchain-ptr: ~D~%" (-> this chain-ptr))
  (format #t "~1Tchain-ptr-next: ~D~%" (-> this chain-ptr-next))
  (format #t "~1Tnear-dist: ~f~%" (-> this near-dist))
  (format #t "~1Tfar-dist: ~f~%" (-> this far-dist))
  (format #t "~1Tto-spr: ~D~%" (-> this to-spr))
  (format #t "~1Tfrom-spr: ~D~%" (-> this from-spr))
  (format #t "~1Tlowres-flag: ~A~%" (-> this lowres-flag))
  (format #t "~1Thfrag: #<hfragment @ #x~X>~%" (-> this hfrag))
  (format #t "~1Tnext-far: ~D~%" (-> this next-far))
  (format #t "~1Tnext-far-mid: ~D~%" (-> this next-far-mid))
  (format #t "~1Tnext-mid: ~D~%" (-> this next-mid))
  (format #t "~1Tnext-near-mid: ~D~%" (-> this next-near-mid))
  (format #t "~1Tnext-near: ~D~%" (-> this next-near))
  (format #t "~1Tnext-far-scissor: ~D~%" (-> this next-far-scissor))
  (format #t "~1Tnext-near-mid-scissor: ~D~%" (-> this next-near-mid-scissor))
  (format #t "~1Tnext-near-scissor: ~D~%" (-> this next-near-scissor))
  (format #t "~1Tcount-far: ~D~%" (-> this count-far))
  (format #t "~1Tcount-far-mid: ~D~%" (-> this count-far-mid))
  (format #t "~1Tcount-mid: ~D~%" (-> this count-mid))
  (format #t "~1Tcount-near-mid: ~D~%" (-> this count-near-mid))
  (format #t "~1Tcount-near: ~D~%" (-> this count-near))
  (format #t "~1Tcount-far-scissor: ~D~%" (-> this count-far-scissor))
  (format #t "~1Tcount-near-mid-scissor: ~D~%" (-> this count-near-mid-scissor))
  (format #t "~1Tcount-near-scissor: ~D~%" (-> this count-near-scissor))
  (format #t "~1Tsize-far: ~D~%" (-> this size-far))
  (format #t "~1Tsize-far-mid: ~D~%" (-> this size-far-mid))
  (format #t "~1Tsize-mid: ~D~%" (-> this size-mid))
  (format #t "~1Tsize-near-mid: ~D~%" (-> this size-near-mid))
  (format #t "~1Tsize-near: ~D~%" (-> this size-near))
  (format #t "~1Tsize-far-scissor: ~D~%" (-> this size-far-scissor))
  (format #t "~1Tsize-near-mid-scissor: ~D~%" (-> this size-near-mid-scissor))
  (format #t "~1Tsize-near-scissor: ~D~%" (-> this size-near-scissor))
  (format #t "~1Tsize-texture: ~D~%" (-> this size-texture))
  (format #t "~1Tpoly-far: #<hfrag-poly25 @ #x~X>~%" (-> this poly-far))
  (format #t "~1Tpoly-mid25: #x~X~%" (-> this poly-mid25))
  (format #t "~1Tpoly-mid: #x~X~%" (-> this poly-mid))
  (format #t "~1Tpoly-near: #x~X~%" (-> this poly-near))
  (format #t "~1Tfar-texture: #x~X~%" (-> this far-texture))
  (format #t "~1Tnear-textures[16] @ #x~X~%" (-> this near-textures))
  (format #t "~1Tdraw-table[1024] @ #x~X~%" (-> this draw-table))
  (format #t "~1Tcorners[1024] @ #x~X~%" (-> this corners))
  (label cfg-4)
  this
  )

;; definition of type hfrag-mip-packet
(deftype hfrag-mip-packet (structure)
  ((mip-tmpl  dma-gif-packet  :inline)
   (tex0-1    vector          :inline)
   (tex1-1    vector          :inline)
   (texflush  vector          :inline)
   (color     vector4w        :inline)
   (tex0      vector          :inline)
   (pos0      vector          :inline)
   (tex1      vector          :inline)
   (pos1      vector          :inline)
   )
  )

;; definition for method 3 of type hfrag-mip-packet
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this hfrag-mip-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-mip-packet)
  (format #t "~1Tmip-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this mip-tmpl))
  (format #t "~1Ttex0-1: #<vector @ #x~X>~%" (-> this tex0-1))
  (format #t "~1Ttex1-1: #<vector @ #x~X>~%" (-> this tex1-1))
  (format #t "~1Ttexflush: #<vector @ #x~X>~%" (-> this texflush))
  (format #t "~1Tcolor: #<vector4w @ #x~X>~%" (-> this color))
  (format #t "~1Ttex0: #<vector @ #x~X>~%" (-> this tex0))
  (format #t "~1Tpos0: #<vector @ #x~X>~%" (-> this pos0))
  (format #t "~1Ttex1: #<vector @ #x~X>~%" (-> this tex1))
  (format #t "~1Tpos1: #<vector @ #x~X>~%" (-> this pos1))
  (label cfg-4)
  this
  )

;; definition of type hfrag-mip-packet-array
(deftype hfrag-mip-packet-array (structure)
  ((data  hfrag-mip-packet  6 :inline)
   )
  )

;; definition for method 3 of type hfrag-mip-packet-array
(defmethod inspect ((this hfrag-mip-packet-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-mip-packet-array)
  (format #t "~1Tdata[6] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
