;;-*-Lisp-*-
(in-package goal)

;; definition of type hfrag-vu1-poly4-packet
(deftype hfrag-vu1-poly4-packet (structure)
  ((height-tag  dma-packet  :inline)
   (base        vector      :inline)
   (heights     uint32      4)
   (color-tag   dma-packet  :inline)
   (colors      rgba        4)
   (next        dma-packet  :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-poly4-packet
(defmethod inspect ((this hfrag-vu1-poly4-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-poly4-packet)
  (format #t "~1Theight-tag: #<dma-packet @ #x~X>~%" (-> this height-tag))
  (format #t "~1Tbase: #<vector @ #x~X>~%" (-> this base))
  (format #t "~1Theights[4] @ #x~X~%" (-> this heights))
  (format #t "~1Tcolor-tag: #<dma-packet @ #x~X>~%" (-> this color-tag))
  (format #t "~1Tcolors[4] @ #x~X~%" (-> this colors))
  (format #t "~1Tnext: #<dma-packet @ #x~X>~%" (-> this next))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-poly9-packet
(deftype hfrag-vu1-poly9-packet (structure)
  ((height-tag  dma-packet  :inline)
   (base        vector3     :inline)
   (heights     uint32      9)
   (color-tag   dma-packet  :inline)
   (colors      rgba        12)
   (next        dma-packet  :inline)
   (jump-index  int32       :overlay-at (-> base data 1))
   )
  )

;; definition for method 3 of type hfrag-vu1-poly9-packet
(defmethod inspect ((this hfrag-vu1-poly9-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-poly9-packet)
  (format #t "~1Theight-tag: #<dma-packet @ #x~X>~%" (-> this height-tag))
  (format #t "~1Tbase: #<vector3 @ #x~X>~%" (-> this base))
  (format #t "~1Theights[9] @ #x~X~%" (-> this heights))
  (format #t "~1Tcolor-tag: #<dma-packet @ #x~X>~%" (-> this color-tag))
  (format #t "~1Tcolors[12] @ #x~X~%" (-> this colors))
  (format #t "~1Tnext: #<dma-packet @ #x~X>~%" (-> this next))
  (format #t "~1Tjump-index: ~D~%" (-> this base y))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-poly25-packet
(deftype hfrag-vu1-poly25-packet (structure)
  ((height-tag  dma-packet  :inline)
   (base        vector3     :inline)
   (heights     uint32      25)
   (color-tag   dma-packet  :inline)
   (colors      rgba        28)
   (next        dma-packet  :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-poly25-packet
(defmethod inspect ((this hfrag-vu1-poly25-packet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-poly25-packet)
  (format #t "~1Theight-tag: #<dma-packet @ #x~X>~%" (-> this height-tag))
  (format #t "~1Tbase: #<vector3 @ #x~X>~%" (-> this base))
  (format #t "~1Theights[25] @ #x~X~%" (-> this heights))
  (format #t "~1Tcolor-tag: #<dma-packet @ #x~X>~%" (-> this color-tag))
  (format #t "~1Tcolors[28] @ #x~X~%" (-> this colors))
  (format #t "~1Tnext: #<dma-packet @ #x~X>~%" (-> this next))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-vertex
(deftype hfrag-vu1-vertex (structure)
  ((tex  vector  :inline)
   (clr  vector  :inline)
   (pos  vector  :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-vertex
(defmethod inspect ((this hfrag-vu1-vertex))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-vertex)
  (format #t "~1Ttex: #<vector @ #x~X>~%" (-> this tex))
  (format #t "~1Tclr: #<vector @ #x~X>~%" (-> this clr))
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-poly4
(deftype hfrag-vu1-poly4 (structure)
  ((giftag  vector            :inline)
   (verts   hfrag-vu1-vertex  4 :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-poly4
(defmethod inspect ((this hfrag-vu1-poly4))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-poly4)
  (format #t "~1Tgiftag: #<vector @ #x~X>~%" (-> this giftag))
  (format #t "~1Tverts[4] @ #x~X~%" (-> this verts))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-poly9
(deftype hfrag-vu1-poly9 (structure)
  ((giftag0  vector            :inline)
   (verts0   hfrag-vu1-vertex  6 :inline)
   (giftag1  vector            :inline)
   (verts1   hfrag-vu1-vertex  6 :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-poly9
(defmethod inspect ((this hfrag-vu1-poly9))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-poly9)
  (format #t "~1Tgiftag0: #<vector @ #x~X>~%" (-> this giftag0))
  (format #t "~1Tverts0[6] @ #x~X~%" (-> this verts0))
  (format #t "~1Tgiftag1: #<vector @ #x~X>~%" (-> this giftag1))
  (format #t "~1Tverts1[6] @ #x~X~%" (-> this verts1))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-poly25
(deftype hfrag-vu1-poly25 (structure)
  ((giftag0  vector            :inline)
   (verts0   hfrag-vu1-vertex  10 :inline)
   (giftag1  vector            :inline)
   (verts1   hfrag-vu1-vertex  10 :inline)
   (giftag2  vector            :inline)
   (verts2   hfrag-vu1-vertex  10 :inline)
   (giftag3  vector            :inline)
   (verts3   hfrag-vu1-vertex  10 :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-poly25
(defmethod inspect ((this hfrag-vu1-poly25))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-poly25)
  (format #t "~1Tgiftag0: #<vector @ #x~X>~%" (-> this giftag0))
  (format #t "~1Tverts0[10] @ #x~X~%" (-> this verts0))
  (format #t "~1Tgiftag1: #<vector @ #x~X>~%" (-> this giftag1))
  (format #t "~1Tverts1[10] @ #x~X~%" (-> this verts1))
  (format #t "~1Tgiftag2: #<vector @ #x~X>~%" (-> this giftag2))
  (format #t "~1Tverts2[10] @ #x~X~%" (-> this verts2))
  (format #t "~1Tgiftag3: #<vector @ #x~X>~%" (-> this giftag3))
  (format #t "~1Tverts3[10] @ #x~X~%" (-> this verts3))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-constants-base
(deftype hfrag-vu1-constants-base (structure)
  ((far-verts    vector  25 :inline)
   (mid-verts9   vector  9 :inline)
   (mid-verts25  vector  25 :inline)
   (near-verts4  vector  4 :inline)
   (near-verts9  vector  9 :inline)
   (sts          vector  9 :inline)
   (data         vector  81 :inline :overlay-at (-> far-verts 0))
   )
  )

;; definition for method 3 of type hfrag-vu1-constants-base
(defmethod inspect ((this hfrag-vu1-constants-base))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-constants-base)
  (format #t "~1Tfar-verts[25] @ #x~X~%" (-> this far-verts))
  (format #t "~1Tmid-verts9[9] @ #x~X~%" (-> this mid-verts9))
  (format #t "~1Tmid-verts25[25] @ #x~X~%" (-> this mid-verts25))
  (format #t "~1Tnear-verts4[4] @ #x~X~%" (-> this near-verts4))
  (format #t "~1Tnear-verts9[9] @ #x~X~%" (-> this near-verts9))
  (format #t "~1Tsts[9] @ #x~X~%" (-> this sts))
  (format #t "~1Tdata[81] @ #x~X~%" (-> this far-verts))
  (label cfg-4)
  this
  )

;; definition of type hfrag-vu1-constants
(deftype hfrag-vu1-constants (structure)
  ((base           hfrag-vu1-constants-base  :inline)
   (far-verts      vector                    25 :inline :overlay-at (-> base far-verts 0))
   (mid-verts9     vector                    9 :inline  :overlay-at (-> base mid-verts9 0))
   (mid-verts25    vector                    25 :inline :overlay-at (-> base mid-verts25 0))
   (near-verts4    vector                    4 :inline  :overlay-at (-> base near-verts4 0))
   (near-verts9    vector                    9 :inline  :overlay-at (-> base near-verts9 0))
   (sts            vector                    9 :inline  :overlay-at (-> base sts 0))
   (drw-strip4     gs-gif-tag                :inline)
   (drw-strip9-0   gs-gif-tag                :inline)
   (drw-strip9-1   gs-gif-tag                :inline)
   (drw-strip25-0  gs-gif-tag                :inline)
   (drw-strip25-1  gs-gif-tag                :inline)
   (matrix         matrix                    :inline)
   (hvdf-offset    vector                    :inline)
   (hmge-scale     vector                    :inline)
   (fog            vector                    :inline)
   (stores         qword                     :inline)
   )
  )

;; definition for method 3 of type hfrag-vu1-constants
(defmethod inspect ((this hfrag-vu1-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'hfrag-vu1-constants)
  (format #t "~1Tbase: #<hfrag-vu1-constants-base @ #x~X>~%" (-> this base))
  (format #t "~1Tfar-verts[25] @ #x~X~%" (-> this base))
  (format #t "~1Tmid-verts9[9] @ #x~X~%" (-> this base mid-verts9))
  (format #t "~1Tmid-verts25[25] @ #x~X~%" (-> this base mid-verts25))
  (format #t "~1Tnear-verts4[4] @ #x~X~%" (-> this base near-verts4))
  (format #t "~1Tnear-verts9[9] @ #x~X~%" (-> this base near-verts9))
  (format #t "~1Tsts[9] @ #x~X~%" (-> this base sts))
  (format #t "~1Tdrw-strip4: #<qword @ #x~X>~%" (-> this drw-strip4))
  (format #t "~1Tdrw-strip9-0: #<qword @ #x~X>~%" (-> this drw-strip9-0))
  (format #t "~1Tdrw-strip9-1: #<qword @ #x~X>~%" (-> this drw-strip9-1))
  (format #t "~1Tdrw-strip25-0: #<qword @ #x~X>~%" (-> this drw-strip25-0))
  (format #t "~1Tdrw-strip25-1: #<qword @ #x~X>~%" (-> this drw-strip25-1))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~1Thmge-scale: #<vector @ #x~X>~%" (-> this hmge-scale))
  (format #t "~1Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~1Tstores: #<qword @ #x~X>~%" (-> this stores))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




