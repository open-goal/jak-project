;;-*-Lisp-*-
(in-package goal)

;; definition of type process-taskable
(deftype process-taskable (process-focusable)
  "The parent class for NPCs that can be talked to."
  ((flags             process-taskable-flags)
   (task              game-task-control)
   (ambient           ambient-control  :inline :offset 216)
   (neck-joint-index  int32)
   (talk-message      text-id)
   (talk-distance     meters)
   (talk-height       meters)
   (last-talk         time-frame)
   (want-to-say       time-frame)
   (birth-time        time-frame)
   (slave             handle)
   )
  (:state-methods
    hide
    idle
    (active game-task-event)
    die
    (play-game game-task-event)
    )
  (:methods
    (process-taskable-method-33 () none)
    (process-taskable-method-34 () none)
    (process-taskable-method-35 () none)
    (process-taskable-method-36 () none)
    (process-taskable-method-37 () none)
    (process-taskable-method-38 () none)
    (process-taskable-method-39 () none)
    )
  )

;; definition for method 3 of type process-taskable
(defmethod inspect ((this process-taskable))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tflags: ~D~%" (-> this flags))
  (format #t "~2Ttask: ~A~%" (-> this task))
  (format #t "~2Tambient: #<ambient-control @ #x~X>~%" (-> this ambient))
  (format #t "~2Tneck-joint-index: ~D~%" (-> this neck-joint-index))
  (format #t "~2Ttalk-message: ~D~%" (-> this talk-message))
  (format #t "~2Ttalk-distance: (meters ~m)~%" (-> this talk-distance))
  (format #t "~2Ttalk-height: (meters ~m)~%" (-> this talk-height))
  (format #t "~2Tlast-talk: ~D~%" (-> this last-talk))
  (format #t "~2Twant-to-say: ~D~%" (-> this want-to-say))
  (format #t "~2Tbirth-time: ~D~%" (-> this birth-time))
  (format #t "~2Tslave: ~D~%" (-> this slave))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




