;;-*-Lisp-*-
(in-package goal)

;; definition of type trajectory
(deftype trajectory (structure)
  ((initial-position  vector  :inline)
   (initial-velocity  vector  :inline)
   (time              float)
   (gravity           meters)
   )
  (:methods
    (trajectory-method-9 () none)
    (trajectory-method-10 () none)
    (trajectory-method-11 () none)
    (trajectory-method-12 () none)
    (trajectory-method-13 () none)
    (trajectory-method-14 () none)
    (trajectory-method-15 () none)
    (trajectory-method-16 () none)
    (trajectory-method-17 () none)
    )
  )

;; definition for method 3 of type trajectory
(defmethod inspect ((this trajectory))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trajectory)
  (format #t "~1Tinitial-position: ~`vector`P~%" (-> this initial-position))
  (format #t "~1Tinitial-velocity: ~`vector`P~%" (-> this initial-velocity))
  (format #t "~1Ttime: ~f~%" (-> this time))
  (format #t "~1Tgravity: (meters ~m)~%" (-> this gravity))
  (label cfg-4)
  this
  )

;; definition of type impact-control
(deftype impact-control (structure)
  ((process       (pointer process-drawable))
   (radius        meters)
   (joint         int32)
   (collide-with  collide-spec)
   (start-time    uint64)
   (trans         vector  2 :inline)
   (dir           vector  :inline)
   )
  (:methods
    (new (symbol type process-drawable int float collide-spec) _type_)
    (initialize (_type_ process-drawable int float collide-spec) impact-control)
    (impact-control-method-10 () none)
    (impact-control-method-11 () none)
    )
  )

;; definition for method 3 of type impact-control
(defmethod inspect ((this impact-control))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (format #t "[~8x] ~A~%" this 'impact-control)
  (format #t "~1Tprocess: #x~X~%" (-> this process))
  (format #t "~1Tradius: (meters ~m)~%" (-> this radius))
  (format #t "~1Tjoint: ~D~%" (-> this joint))
  (format #t "~1Tcollide-with: ~D~%" (-> this collide-with))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Ttrans[2] @ #x~X~%" (-> this trans))
  (dotimes (s5-0 2)
    (format #t "~T  [~D]~1Ttrans: ~`vector`P~%" s5-0 (-> this trans s5-0))
    )
  (format #t "~1Tdir: ~`vector`P~%" (-> this dir))
  (label cfg-7)
  this
  )

;; definition for method 0 of type impact-control
(defmethod new impact-control ((allocation symbol) (type-to-make type) (arg0 process-drawable) (arg1 int) (arg2 float) (arg3 collide-spec))
  (let ((t9-0 (method-of-type structure new))
        (v1-1 type-to-make)
        )
    (-> type-to-make size)
    ((method-of-type impact-control initialize)
     (the-as impact-control (t9-0 allocation v1-1))
     arg0
     arg1
     arg2
     arg3
     )
    )
  )

;; definition of type point-tracker
(deftype point-tracker (structure)
  ((trans  vector  2 :inline)
   )
  (:methods
    (new (symbol type vector vector) _type_)
    (initialize (_type_ vector vector) point-tracker)
    (point-tracker-method-10 () none)
    (point-tracker-method-11 () none)
    )
  )

;; definition for method 3 of type point-tracker
(defmethod inspect ((this point-tracker))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (format #t "[~8x] ~A~%" this 'point-tracker)
  (format #t "~1Ttrans[2] @ #x~X~%" (-> this trans))
  (dotimes (s5-0 2)
    (format #t "~T  [~D]~1Ttrans: ~`vector`P~%" s5-0 (-> this trans s5-0))
    )
  (label cfg-7)
  this
  )

;; definition for method 0 of type point-tracker
(defmethod new point-tracker ((allocation symbol) (type-to-make type) (arg0 vector) (arg1 vector))
  (let ((t9-0 (method-of-type structure new))
        (v1-1 type-to-make)
        )
    (-> type-to-make size)
    ((method-of-type point-tracker initialize) (the-as point-tracker (t9-0 allocation v1-1)) arg0 arg1)
    )
  )

;; definition of type combo-tracker
(deftype combo-tracker (point-tracker)
  ((target           handle)
   (move-start-time  time-frame)
   )
  (:methods
    (combo-tracker-method-12 () none)
    (combo-tracker-method-13 () none)
    )
  )

;; definition for method 3 of type combo-tracker
(defmethod inspect ((this combo-tracker))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (format #t "[~8x] ~A~%" this 'combo-tracker)
  (format #t "~1Ttrans[2] @ #x~X~%" (-> this trans))
  (dotimes (s5-0 2)
    (format #t "~T  [~D]~1Ttrans: ~`vector`P~%" s5-0 (-> this trans s5-0))
    )
  (format #t "~1Ttarget: ~D~%" (-> this target))
  (format #t "~1Tmove-start-time: ~D~%" (-> this move-start-time))
  (label cfg-7)
  this
  )

;; definition of type traj2d-params
(deftype traj2d-params (structure)
  ((x              float)
   (y              float)
   (gravity        float)
   (initial-tilt   float)
   (initial-speed  float)
   (time           float)
   )
  )

;; definition for method 3 of type traj2d-params
(defmethod inspect ((this traj2d-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traj2d-params)
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (format #t "~1Tgravity: ~f~%" (-> this gravity))
  (format #t "~1Tinitial-tilt: ~f~%" (-> this initial-tilt))
  (format #t "~1Tinitial-speed: ~f~%" (-> this initial-speed))
  (format #t "~1Ttime: ~f~%" (-> this time))
  (label cfg-4)
  this
  )

;; definition of type traj3d-params
(deftype traj3d-params (structure)
  ((gravity           float)
   (initial-tilt      float)
   (initial-speed     float)
   (time              float)
   (src               vector  :inline)
   (dest              vector  :inline)
   (diff              vector  :inline)
   (initial-velocity  vector  :inline)
   )
  )

;; definition for method 3 of type traj3d-params
(defmethod inspect ((this traj3d-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'traj3d-params)
  (format #t "~1Tgravity: ~f~%" (-> this gravity))
  (format #t "~1Tinitial-tilt: ~f~%" (-> this initial-tilt))
  (format #t "~1Tinitial-speed: ~f~%" (-> this initial-speed))
  (format #t "~1Ttime: ~f~%" (-> this time))
  (format #t "~1Tsrc: #<vector @ #x~X>~%" (-> this src))
  (format #t "~1Tdest: #<vector @ #x~X>~%" (-> this dest))
  (format #t "~1Tdiff: #<vector @ #x~X>~%" (-> this diff))
  (format #t "~1Tinitial-velocity: #<vector @ #x~X>~%" (-> this initial-velocity))
  (label cfg-4)
  this
  )

;; definition of type cubic-curve
(deftype cubic-curve (structure)
  ((mat  matrix  :inline)
   )
  (:methods
    (cubic-curve-method-9 () none)
    (cubic-curve-method-10 () none)
    (cubic-curve-method-11 () none)
    (cubic-curve-method-12 () none)
    (cubic-curve-method-13 () none)
    )
  )

;; definition for method 3 of type cubic-curve
(defmethod inspect ((this cubic-curve))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'cubic-curve)
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




