;;-*-Lisp-*-
(in-package goal)

;; definition of type rigid-body-info
(deftype rigid-body-info (structure)
  ((mass                 float)
   (inv-mass             float)
   (linear-damping       float)
   (angular-damping      float)
   (bounce-factor        float)
   (friction-factor      float)
   (bounce-mult-factor   float)
   (cm-offset-joint      vector  :inline)
   (inv-inertial-tensor  matrix  :inline)
   (inertial-tensor      matrix  :inline)
   (inertial-tensor-box  meters  3)
   )
  (:methods
    (rigid-body-info-method-9 () none)
    )
  )

;; definition for method 3 of type rigid-body-info
(defmethod inspect ((this rigid-body-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-info)
  (format #t "~1Tmass: ~f~%" (-> this mass))
  (format #t "~1Tinv-mass: ~f~%" (-> this inv-mass))
  (format #t "~1Tlinear-damping: ~f~%" (-> this linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> this angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> this bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> this friction-factor))
  (format #t "~1Tbounce-mult-factor: ~f~%" (-> this bounce-mult-factor))
  (format #t "~1Tcm-offset-joint: ~`vector`P~%" (-> this cm-offset-joint))
  (format #t "~1Tinv-inertial-tensor: #<matrix @ #x~X>~%" (-> this inv-inertial-tensor))
  (format #t "~1Tinertial-tensor: #<matrix @ #x~X>~%" (-> this inertial-tensor))
  (format #t "~1Tinertial-tensor-box[3] @ #x~X~%" (-> this inertial-tensor-box))
  (label cfg-4)
  this
  )

;; definition of type rigid-body-object-extra-info
(deftype rigid-body-object-extra-info (structure)
  ((max-time-step       float)
   (gravity             meters)
   (idle-distance       meters)
   (attack-force-scale  float)
   )
  :pack-me
  )

;; definition for method 3 of type rigid-body-object-extra-info
(defmethod inspect ((this rigid-body-object-extra-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-object-extra-info)
  (format #t "~1Tmax-time-step: ~f~%" (-> this max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> this gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> this idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> this attack-force-scale))
  (label cfg-4)
  this
  )

;; definition of type rigid-body-object-constants
(deftype rigid-body-object-constants (structure)
  ((info                rigid-body-info               :inline)
   (mass                float                         :overlay-at (-> info mass))
   (inv-mass            float                         :overlay-at (-> info inv-mass))
   (cm-joint-x          meters                        :overlay-at (-> info cm-offset-joint data 0))
   (cm-joint-y          meters                        :overlay-at (-> info cm-offset-joint data 1))
   (cm-joint-z          meters                        :overlay-at (-> info cm-offset-joint data 2))
   (linear-damping      float                         :overlay-at (-> info linear-damping))
   (angular-damping     float                         :overlay-at (-> info angular-damping))
   (bounce-factor       float                         :overlay-at (-> info bounce-factor))
   (friction-factor     float                         :overlay-at (-> info friction-factor))
   (inertial-tensor-x   meters                        :overlay-at (-> info inertial-tensor-box 0))
   (inertial-tensor-y   meters                        :overlay-at (-> info inertial-tensor-box 1))
   (inertial-tensor-z   meters                        :overlay-at (-> info inertial-tensor-box 2))
   (extra               rigid-body-object-extra-info  :inline)
   (max-time-step       float                         :overlay-at (-> extra max-time-step))
   (gravity             meters                        :overlay-at (-> extra gravity))
   (idle-distance       meters                        :overlay-at (-> extra idle-distance))
   (attack-force-scale  float                         :overlay-at (-> extra attack-force-scale))
   (name                symbol)
   )
  )

;; definition for method 3 of type rigid-body-object-constants
(defmethod inspect ((this rigid-body-object-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-object-constants)
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> this info))
  (format #t "~1Tmass: ~f~%" (-> this info mass))
  (format #t "~1Tinv-mass: ~f~%" (-> this info inv-mass))
  (format #t "~1Tcm-joint-x: (meters ~m)~%" (-> this info cm-offset-joint x))
  (format #t "~1Tcm-joint-y: (meters ~m)~%" (-> this info cm-offset-joint y))
  (format #t "~1Tcm-joint-z: (meters ~m)~%" (-> this info cm-offset-joint z))
  (format #t "~1Tlinear-damping: ~f~%" (-> this info linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> this info angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> this info bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> this info friction-factor))
  (format #t "~1Tinertial-tensor-x: (meters ~m)~%" (-> this inertial-tensor-x))
  (format #t "~1Tinertial-tensor-y: (meters ~m)~%" (-> this inertial-tensor-y))
  (format #t "~1Tinertial-tensor-z: (meters ~m)~%" (-> this inertial-tensor-z))
  (format #t "~1Textra: #<rigid-body-object-extra-info @ #x~X>~%" (-> this extra))
  (format #t "~1Tmax-time-step: ~f~%" (-> this extra max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> this extra gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> this extra idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> this extra attack-force-scale))
  (format #t "~1Tname: ~A~%" (-> this name))
  (label cfg-4)
  this
  )

;; definition of type rigid-body-impact
(deftype rigid-body-impact (structure)
  ((point     vector  :inline)
   (normal    vector  :inline)
   (velocity  vector  :inline)
   (impulse   float)
   (pat       pat-surface)
   (process   basic)
   (prim-id   uint32)
   )
  )

;; definition for method 3 of type rigid-body-impact
(defmethod inspect ((this rigid-body-impact))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-impact)
  (format #t "~1Tpoint: ~`vector`P~%" (-> this point))
  (format #t "~1Tnormal: ~`vector`P~%" (-> this normal))
  (format #t "~1Tvelocity: ~`vector`P~%" (-> this velocity))
  (format #t "~1Timpulse: ~f~%" (-> this impulse))
  (format #t "~1Tpat: ~D~%" (-> this pat))
  (format #t "~1Tprocess: ~A~%" (-> this process))
  (format #t "~1Tprim-id: ~D~%" (-> this prim-id))
  (label cfg-4)
  this
  )

;; definition of type rigid-body-control
(deftype rigid-body-control (basic)
  ((flags            rigid-body-flag)
   (info             rigid-body-info)
   (force-callback   basic)
   (process          process)
   (blocked-by       basic)
   (time-remaining   float)
   (step-count       int16)
   (linear-damping   float)
   (angular-damping  float)
   (bounce-factor    float)
   (friction-factor  float)
   (position         vector      :inline)
   (rot              vector      :inline)
   (rotation         quaternion  :inline :overlay-at (-> rot data 0))
   (lin-momentum     vector      :inline)
   (ang-momentum     vector      :inline)
   (force            vector      :inline)
   (torque           vector      :inline)
   (lin-velocity     vector      :inline)
   (ang-velocity     vector      :inline)
   (matrix           matrix      :inline)
   (inv-i-world      matrix      :inline)
   )
  (:methods
    (new (symbol type) _type_)
    (rigid-body-control-method-9 () none)
    (rigid-body-control-method-10 () none)
    (rigid-body-control-method-11 () none)
    (rigid-body-control-method-12 () none)
    (rigid-body-control-method-13 () none)
    (rigid-body-control-method-14 () none)
    (rigid-body-control-method-15 () none)
    (rigid-body-control-method-16 () none)
    (rigid-body-control-method-17 () none)
    (rigid-body-control-method-18 () none)
    (rigid-body-control-method-19 () none)
    (rigid-body-control-method-20 () none)
    (rigid-body-control-method-21 () none)
    (rigid-body-control-method-22 () none)
    (rigid-body-control-method-23 () none)
    (rigid-body-control-method-24 () none)
    (rigid-body-control-method-25 () none)
    (rigid-body-control-method-26 () none)
    (rigid-body-control-method-27 () none)
    (rigid-body-control-method-28 () none)
    (rigid-body-control-method-29 () none)
    (rigid-body-control-method-30 () none)
    (rigid-body-control-method-31 () none)
    (rigid-body-control-method-32 () none)
    (rigid-body-control-method-33 () none)
    )
  )

;; definition for method 3 of type rigid-body-control
(defmethod inspect ((this rigid-body-control))
  (when (not this)
    (set! this this)
    (goto cfg-16)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tflags: #x~X : (rigid-body-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (rigid-body-flag active)) (rigid-body-flag active))
        (format #t "active ")
        )
    (if (= (logand s5-0 (rigid-body-flag blocker)) (rigid-body-flag blocker))
        (format #t "blocker ")
        )
    (if (= (logand s5-0 (rigid-body-flag enable-physics)) (rigid-body-flag enable-physics))
        (format #t "enable-physics ")
        )
    (if (= (logand s5-0 (rigid-body-flag display-marks)) (rigid-body-flag display-marks))
        (format #t "display-marks ")
        )
    (if (= (logand s5-0 (rigid-body-flag enable-collision)) (rigid-body-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-flag debug)) (rigid-body-flag debug))
        (format #t "debug ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> this info))
  (format #t "~1Tforce-callback: ~A~%" (-> this force-callback))
  (format #t "~1Tprocess: ~A~%" (-> this process))
  (format #t "~1Tblocked-by: ~A~%" (-> this blocked-by))
  (format #t "~1Ttime-remaining: ~f~%" (-> this time-remaining))
  (format #t "~1Tstep-count: ~D~%" (-> this step-count))
  (format #t "~1Tlinear-damping: ~f~%" (-> this linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> this angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> this bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> this friction-factor))
  (format #t "~1Tposition: ~`vector`P~%" (-> this position))
  (format #t "~1Trot: ~`vector`P~%" (-> this rot))
  (format #t "~1Trotation: #<quaternion @ #x~X>~%" (-> this rot))
  (format #t "~1Tlin-momentum: ~`vector`P~%" (-> this lin-momentum))
  (format #t "~1Tang-momentum: ~`vector`P~%" (-> this ang-momentum))
  (format #t "~1Tforce: ~`vector`P~%" (-> this force))
  (format #t "~1Ttorque: ~`vector`P~%" (-> this torque))
  (format #t "~1Tlin-velocity: ~`vector`P~%" (-> this lin-velocity))
  (format #t "~1Tang-velocity: ~`vector`P~%" (-> this ang-velocity))
  (format #t "~1Tmatrix: #<matrix @ #x~X>~%" (-> this matrix))
  (format #t "~1Tinv-i-world: #<matrix @ #x~X>~%" (-> this inv-i-world))
  (label cfg-16)
  this
  )

;; definition of type rigid-body-object
(deftype rigid-body-object (process-focusable)
  ((info                   rigid-body-object-constants)
   (flags                  rigid-body-object-flag)
   (max-time-step          float)
   (incoming-attack-id     uint32)
   (player-touch-time      time-frame)
   (disturbed-time         time-frame)
   (player-force-position  vector  :inline)
   (player-force           vector  :inline)
   )
  (:methods
    (rigid-body-object-method-28 () none)
    (rigid-body-object-method-29 () none)
    (rigid-body-object-method-30 () none)
    (rigid-body-object-method-31 () none)
    (rigid-body-object-method-32 () none)
    (rigid-body-object-method-33 () none)
    (rigid-body-object-method-34 () none)
    (rigid-body-object-method-35 () none)
    (rigid-body-object-method-36 () none)
    (rigid-body-object-method-37 () none)
    (rigid-body-object-method-38 () none)
    (rigid-body-object-method-39 () none)
    (rigid-body-object-method-40 () none)
    (rigid-body-object-method-41 () none)
    (rigid-body-object-method-42 () none)
    (rigid-body-object-method-43 () none)
    (rigid-body-object-method-44 () none)
    (rigid-body-object-method-45 () none)
    (rigid-body-object-method-46 () none)
    (rigid-body-object-method-47 () none)
    (rigid-body-object-method-48 () none)
    (rigid-body-object-method-49 () none)
    (rigid-body-object-method-50 () none)
    (rigid-body-object-method-51 () none)
    (rigid-body-object-method-52 () none)
    (rigid-body-object-method-53 () none)
    (rigid-body-object-method-54 () none)
    (rigid-body-object-method-55 () none)
    )
  )

;; definition for method 3 of type rigid-body-object
(defmethod inspect ((this rigid-body-object))
  (when (not this)
    (set! this this)
    (goto cfg-22)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tinfo: #<rigid-body-object-constants @ #x~X>~%" (-> this info))
  (format #t "~2Tflags: #x~X : (rigid-body-object-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (rigid-body-object-flag dead)) (rigid-body-object-flag dead))
        (format #t "dead ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag damaged)) (rigid-body-object-flag damaged))
        (format #t "damaged ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-contact-force)) (rigid-body-object-flag player-contact-force))
        (format #t "player-contact-force ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag disturbed)) (rigid-body-object-flag disturbed))
        (format #t "disturbed ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag enable-collision)) (rigid-body-object-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-edge-grabbing)) (rigid-body-object-flag player-edge-grabbing))
        (format #t "player-edge-grabbing ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-touching)) (rigid-body-object-flag player-touching))
        (format #t "player-touching ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-standing-on)) (rigid-body-object-flag player-standing-on))
        (format #t "player-standing-on ")
        )
    (if (= (logand s5-0 (rigid-body-object-flag player-impulse-force)) (rigid-body-object-flag player-impulse-force))
        (format #t "player-impulse-force ")
        )
    )
  (format #t ")~%")
  (format #t "~2Tmax-time-step: ~f~%" (-> this max-time-step))
  (format #t "~2Tincoming-attack-id: ~D~%" (-> this incoming-attack-id))
  (format #t "~2Tplayer-touch-time: ~D~%" (-> this player-touch-time))
  (format #t "~2Tdisturbed-time: ~D~%" (-> this disturbed-time))
  (format #t "~2Tplayer-force-position: #<vector @ #x~X>~%" (-> this player-force-position))
  (format #t "~2Tplayer-force: #<vector @ #x~X>~%" (-> this player-force))
  (label cfg-22)
  this
  )

;; definition of type rigid-body-queue
(deftype rigid-body-queue (structure)
  ((count    int8)
   (manager  uint64)
   (array    handle  128)
   )
  (:methods
    (rigid-body-queue-method-9 () none)
    (rigid-body-queue-method-10 () none)
    (rigid-body-queue-method-11 () none)
    (rigid-body-queue-method-12 () none)
    (rigid-body-queue-method-13 () none)
    (rigid-body-queue-method-14 () none)
    (rigid-body-queue-method-15 () none)
    (rigid-body-queue-method-16 () none)
    )
  )

;; definition for method 3 of type rigid-body-queue
(defmethod inspect ((this rigid-body-queue))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-queue)
  (format #t "~1Tcount: ~D~%" (-> this count))
  (format #t "~1Tmanager: ~D~%" (-> this manager))
  (format #t "~1Tarray[128] @ #x~X~%" (-> this array))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




