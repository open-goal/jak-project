;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(let ((game-info *game-info*))
  (set! (-> game-info play-list)
        (new 'static 'boxed-array :type game-task-info
          (new 'static 'game-task-info :name "none" :pre-play-continue #f :play-continue #f :kiosk-play-continue #f)
          (new 'static 'game-task-info :name "complete" :pre-play-continue #f :play-continue #f :kiosk-play-continue #f)
          (new 'static 'game-task-info :name "dummy0" :pre-play-continue #f :play-continue #f :kiosk-play-continue #f)
          (new 'static 'game-task-info
            :name "eco-blue-button"
            :pre-play-continue #f
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "eco-yellow-button"
            :pre-play-continue #f
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "eco-red-button"
            :pre-play-continue #f
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-start"
            :text-name (text-id progress-missions-watch-intro-movie)
            :pre-play-node (game-task-node city-start-start)
            :kiosk-play-node (game-task-node city-start-introduction)
            :pre-play-continue #f
            :play-node (game-task-node city-start-introduction)
            :play-continue #f
            :kiosk-play-continue "pre-intro-start"
            )
          (new 'static 'game-task-info
            :name "desert-interceptors"
            :pre-play-node (game-task-node desert-interceptors-attack)
            :kiosk-play-node (game-task-node desert-vehicle-training-1-introduction)
            :pre-play-continue #f
            :play-node (game-task-node desert-vehicle-training-1-introduction)
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-vehicle-training-1"
            :pre-play-node (game-task-node desert-vehicle-training-1-introduction)
            :kiosk-play-node (game-task-node desert-vehicle-training-2-introduction)
            :pre-play-continue #f
            :play-node (game-task-node desert-vehicle-training-2-introduction)
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-vehicle-training-2"
            :pre-play-node (game-task-node desert-vehicle-training-2-introduction)
            :kiosk-play-node (game-task-node arena-training-1-introduction)
            :pre-play-continue #f
            :play-node (game-task-node arena-training-1-introduction)
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "arena-training-1"
            :text-name (text-id progress-missions-arena-training-1)
            :pre-play-node (game-task-node arena-training-1-introduction)
            :kiosk-play-node (game-task-node arena-training-1-collect)
            :pre-play-continue "intro-start"
            :play-node (game-task-node arena-training-1-collect)
            :play-continue "wasstada-jump-training"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "arena-fight-1"
            :text-name (text-id progress-missions-arena-fight-1)
            :pre-play-node (game-task-node arena-fight-1-introduction)
            :kiosk-play-node (game-task-node arena-fight-1-fight)
            :pre-play-continue "wasstada-pre-fight-1"
            :play-node (game-task-node arena-fight-1-fight)
            :play-continue "wasstada-fight"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-chase"
            :text-name (text-id progress-missions-wascity-chase)
            :pre-play-node (game-task-node wascity-chase-introduction)
            :kiosk-play-node (game-task-node wascity-chase-resolution)
            :pre-play-continue "wasstada-kleever"
            :play-node (game-task-node wascity-chase-resolution)
            :play-continue "wasstada-entrance"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-pre-game"
            :text-name (text-id progress-missions-wascityb-game)
            :pre-play-node (game-task-node wascity-pre-game-introduction)
            :kiosk-play-node (game-task-node wascity-pre-game-wait)
            :pre-play-continue "wascityb-seem"
            :play-node (game-task-node wascity-pre-game-resolution)
            :play-continue "wascityb-game"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-turtle-training"
            :text-name (text-id progress-missions-desert-turtle-training)
            :pre-play-node (game-task-node desert-turtle-training-introduction)
            :kiosk-play-node (game-task-node desert-turtle-training-restrict-to-turtle)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node desert-turtle-training-resolution)
            :play-continue "desert-start-turtle"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-course-race"
            :text-name (text-id progress-missions-desert-course-race)
            :pre-play-node (game-task-node desert-course-race-restrict-to-turtle)
            :kiosk-play-node (game-task-node desert-course-race-restrict-to-turtle)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node desert-course-race-race)
            :play-continue "desertb-race-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-artifact-race-1"
            :text-name (text-id progress-missions-desert-artiface-race-1)
            :pre-play-node (game-task-node desert-artifact-race-1-introduction)
            :kiosk-play-node (game-task-node desert-artifact-race-1-post-intro)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node desert-artifact-race-1-race)
            :play-continue "wasdoors-desert-turtle"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-leaper-race"
            :text-name (text-id progress-missions-wascity-leaper-race)
            :pre-play-node (game-task-node wascity-leaper-race-introduction)
            :kiosk-play-node (game-task-node wascity-leaper-race-resolution)
            :pre-play-continue "wascitya-seem"
            :play-node (game-task-node wascity-leaper-race-resolution)
            :play-continue "wascitya-flut-racer"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-hover"
            :text-name (text-id progress-missions-desert-hover)
            :pre-play-node (game-task-node desert-hover-introduction)
            :kiosk-play-node (game-task-node desert-hover-introduction)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node desert-hover-resolution)
            :play-continue "desert-start-snake"
            :kiosk-play-continue '("wasdoors-desert" "desert-hover-intro")
            )
          (new 'static 'game-task-info
            :name "arena-fight-2"
            :text-name (text-id progress-missions-arena-fight-2)
            :pre-play-node (game-task-node arena-fight-2-introduction)
            :kiosk-play-node (game-task-node arena-fight-2-gun-training)
            :pre-play-continue "waspala-start"
            :play-node (game-task-node arena-fight-2-fight)
            :play-continue "wasstada-fight-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-catch-lizards"
            :text-name (text-id progress-missions-desert-catch-lizards)
            :pre-play-node (game-task-node desert-catch-lizards-introduction)
            :kiosk-play-node (game-task-node desert-catch-lizards-restrict-to-snake)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node desert-catch-lizards-resolution)
            :play-continue "desert-lizard-corral"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-rescue"
            :text-name (text-id progress-missions-desert-rescue)
            :pre-play-node (game-task-node desert-rescue-introduction)
            :kiosk-play-node (game-task-node desert-rescue-get-vehicle)
            :pre-play-continue "waspala-start"
            :play-node (game-task-node desert-rescue-rescue)
            :play-continue "wasdoors-desert-snake"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-gungame"
            :text-name (text-id progress-missions-wascity-gungame)
            :pre-play-node (game-task-node wascity-gungame-introduction)
            :kiosk-play-node (game-task-node wascity-gungame-resolution)
            :pre-play-continue "wascityb-gungame"
            :play-node (game-task-node wascity-gungame-resolution)
            :play-continue "wascityb-gungame-reset"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "arena-fight-3"
            :text-name (text-id progress-missions-arena-fight-3)
            :pre-play-node (game-task-node arena-fight-3-introduction)
            :kiosk-play-node (game-task-node arena-fight-3-training)
            :pre-play-continue "wasstada-start"
            :play-node (game-task-node arena-fight-3-fight)
            :play-continue "wasstada-fight-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "nest-eggs"
            :text-name (text-id progress-missions-nest-eggs)
            :pre-play-node (game-task-node nest-eggs-introduction)
            :kiosk-play-node (game-task-node nest-eggs-introduction)
            :pre-play-continue "waspala-start"
            :play-node (game-task-node nest-eggs-tunnel)
            :play-continue "nsta-eggs"
            :kiosk-play-continue '("waspala-start" "nest-eggs-intro")
            )
          (new 'static 'game-task-info
            :name "temple-climb"
            :text-name (text-id progress-missions-temple-climb)
            :pre-play-node (game-task-node temple-climb-introduction)
            :kiosk-play-node (game-task-node temple-climb-resolution)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node temple-climb-resolution)
            :play-continue "templex-after-intro"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-glide"
            :text-name (text-id progress-missions-desert-glide)
            :pre-play-node (game-task-node desert-glide-introduction)
            :kiosk-play-node (game-task-node desert-glide-templetop)
            :pre-play-continue "hanga-preplay"
            :play-node (game-task-node desert-glide-templetop)
            :play-continue "hanga-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "volcano-darkeco"
            :text-name (text-id progress-missions-volcano-darkeco)
            :pre-play-node (game-task-node volcano-darkeco-introduction)
            :kiosk-play-node (game-task-node volcano-darkeco-catch-flut)
            :pre-play-continue #f
            :play-node (game-task-node volcano-darkeco-catch-flut)
            :play-continue "volcanox-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "temple-oracle"
            :text-name (text-id progress-missions-temple-oracle)
            :pre-play-node (game-task-node temple-oracle-introduction)
            :kiosk-play-node (game-task-node temple-oracle-stairs)
            :pre-play-continue "templex-pre-oracle"
            :play-node (game-task-node temple-oracle-introduction)
            :play-continue "templex-pre-oracle"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-oasis-defense"
            :text-name (text-id progress-missions-desert-oasis-defense)
            :pre-play-node (game-task-node desert-oasis-defense-meeting)
            :kiosk-play-node (game-task-node desert-oasis-defense-meeting)
            :pre-play-continue "desert-ashelin-pre-start"
            :play-node (game-task-node desert-oasis-defense-battle)
            :play-continue "desert-ashelin"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "temple-tests"
            :text-name (text-id progress-missions-temple-tests)
            :pre-play-node (game-task-node temple-tests-introduction)
            :kiosk-play-node (game-task-node temple-tests-hover-training)
            :pre-play-continue "templex-start"
            :play-node (game-task-node temple-tests-introduction)
            :play-continue "templex-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "comb-travel"
            :text-name (text-id progress-missions-comb-travel)
            :pre-play-node (game-task-node comb-travel-introduction)
            :kiosk-play-node (game-task-node comb-travel-resolution)
            :pre-play-continue #f
            :play-node (game-task-node comb-travel-resolution)
            :play-continue "comba-elevator"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "mine-explore"
            :text-name (text-id progress-missions-mine-explore)
            :pre-play-node (game-task-node mine-explore-introduction)
            :kiosk-play-node (game-task-node mine-explore-introduction)
            :pre-play-continue "minec-start"
            :play-node (game-task-node mine-explore-introduction)
            :play-continue "minec-start"
            :kiosk-play-continue "minec-start"
            )
          (new 'static 'game-task-info
            :name "mine-blow"
            :text-name (text-id progress-missions-mine-blow)
            :pre-play-node (game-task-node mine-blow-introduction)
            :kiosk-play-node (game-task-node mine-blow-resolution)
            :pre-play-continue "mineb-elevator-room"
            :play-node (game-task-node mine-blow-resolution)
            :play-continue "minec-train"
            :kiosk-play-continue "minec-train"
            )
          (new 'static 'game-task-info
            :name "mine-boss"
            :text-name (text-id progress-missions-mine-boss)
            :pre-play-node (game-task-node mine-boss-introduction)
            :kiosk-play-node (game-task-node mine-boss-resolution)
            :pre-play-continue "prebot-intro"
            :play-node (game-task-node mine-boss-resolution)
            :play-continue "prebot-fight"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "sewer-met-hum"
            :text-name (text-id progress-missions-sewer-met-hum)
            :pre-play-node (game-task-node sewer-met-hum-introduction)
            :kiosk-play-node (game-task-node sewer-met-hum-resolution)
            :pre-play-continue "ctygenb-samos"
            :play-node (game-task-node sewer-met-hum-resolution)
            :play-continue "sewl-elevator"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-vehicle-training"
            :pre-play-node (game-task-node city-vehicle-training-hover-zone-1)
            :kiosk-play-node (game-task-node city-vehicle-training-hover-zone-2)
            :pre-play-continue #f
            :play-node (game-task-node city-vehicle-training-hover-zone-2)
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-port-fight"
            :text-name (text-id progress-missions-city-port-fight)
            :pre-play-node (game-task-node city-port-fight-introduction)
            :kiosk-play-node (game-task-node city-port-fight-resolution)
            :pre-play-continue "ctyport-hiphog"
            :play-node (game-task-node city-port-fight-resolution)
            :play-continue "ctyport-hiphog"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-port-attack"
            :text-name (text-id progress-missions-city-port-attack)
            :pre-play-node (game-task-node city-port-attack-introduction)
            :kiosk-play-node (game-task-node city-port-attack-introduction)
            :pre-play-continue "ctyport-hiphog"
            :play-node (game-task-node city-port-attack-get-on)
            :play-continue "ctyport-attack-get-on-movie"
            :kiosk-play-continue '("hiphog-start" "city-port-attack-intro-demo")
            )
          (new 'static 'game-task-info
            :name "city-gun-course-1"
            :text-name (text-id progress-missions-city-gun-course-1)
            :pre-play-node (game-task-node city-gun-course-1-introduction)
            :kiosk-play-node (game-task-node city-gun-course-1-post-intro)
            :pre-play-continue "gungame-start"
            :play-node (game-task-node city-gun-course-1-post-intro)
            :play-continue "gungame-1-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-sniper-fight"
            :text-name (text-id progress-missions-city-sniper-fight)
            :pre-play-node (game-task-node city-sniper-fight-introduction)
            :kiosk-play-node (game-task-node city-sniper-fight-resolution)
            :pre-play-continue "hiphog-movie"
            :play-node (game-task-node city-sniper-fight-resolution)
            :play-continue "ctyinda-sniper-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "sewer-kg-met"
            :text-name (text-id progress-missions-sewer-kg-met)
            :pre-play-node (game-task-node sewer-kg-met-introduction)
            :kiosk-play-node (game-task-node sewer-kg-met-button0-pressed)
            :pre-play-continue "hiphog-movie"
            :play-node (game-task-node sewer-kg-met-button0-pressed)
            :play-continue "sewk-elevator"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-destroy-darkeco"
            :text-name (text-id progress-missions-city-destroy-darkeco)
            :pre-play-node (game-task-node city-destroy-darkeco-introduction)
            :kiosk-play-node (game-task-node city-destroy-darkeco-orbs)
            :pre-play-continue "mhcityb-sewer"
            :play-node (game-task-node city-destroy-darkeco-orbs)
            :play-continue "mhcityb-sewer"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "forest-kill-plants"
            :text-name (text-id progress-missions-forest-kill-plants)
            :pre-play-node (game-task-node forest-kill-plants-introduction)
            :kiosk-play-node (game-task-node forest-kill-plants-pillars)
            :pre-play-continue "mhcitya-forestx"
            :play-node (game-task-node forest-kill-plants-pillars)
            :play-continue "foresta-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-destroy-grid"
            :text-name (text-id progress-missions-city-destroy-grid)
            :pre-play-node (game-task-node city-destroy-grid-introduction)
            :kiosk-play-node (game-task-node city-destroy-grid-resolution)
            :pre-play-continue "mhcitya-grid"
            :play-node (game-task-node city-destroy-grid-resolution)
            :play-continue "mhcitya-grid"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-hijack-vehicle"
            :text-name (text-id progress-missions-city-hijack-vehicle)
            :pre-play-node (game-task-node city-hijack-vehicle-introduction)
            :kiosk-play-node (game-task-node city-hijack-vehicle-infiltrate)
            :pre-play-continue "ctyport-hiphog"
            :play-node (game-task-node city-hijack-vehicle-infiltrate)
            :play-continue "ctyindb-hijack-vehicle"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-port-assault"
            :text-name (text-id progress-missions-city-port-assault)
            :pre-play-node (game-task-node city-port-assault-introduction)
            :kiosk-play-node (game-task-node city-port-assault-force-load-borrows)
            :pre-play-continue "ctyport-hiphog"
            :play-node (game-task-node city-port-assault-force-load-borrows)
            :play-continue "ctyport-hiphog"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-gun-course-2"
            :text-name (text-id progress-missions-city-gun-course-2)
            :pre-play-node (game-task-node city-gun-course-2-introduction)
            :kiosk-play-node (game-task-node city-gun-course-2-post-intro)
            :pre-play-continue "gungame-start"
            :play-node (game-task-node city-gun-course-2-post-intro)
            :play-continue "gungame-2-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-blow-barricade"
            :text-name (text-id progress-missions-city-blow-barricade)
            :pre-play-node (game-task-node city-blow-barricade-introduction)
            :kiosk-play-node (game-task-node city-blow-barricade-resolution)
            :pre-play-continue "ctyport-hiphog"
            :play-node (game-task-node city-blow-barricade-resolution)
            :play-continue "ctyport-bombbot"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-protect-hq"
            :text-name (text-id progress-missions-city-protect-hq)
            :pre-play-node (game-task-node city-protect-hq-introduction)
            :kiosk-play-node (game-task-node city-protect-hq-resolution)
            :pre-play-continue "freehq-movie"
            :play-node (game-task-node city-protect-hq-resolution)
            :play-continue "ctyslumc-freehq-exit"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "sewer-hum-kg"
            :text-name (text-id progress-missions-sewer-hum-kg)
            :pre-play-node (game-task-node sewer-hum-kg-introduction)
            :kiosk-play-node (game-task-node sewer-hum-kg-introduction)
            :pre-play-continue "freehq-start"
            :play-node (game-task-node sewer-hum-kg-switch-off)
            :play-continue "sewb-elevator"
            :kiosk-play-continue '("freehq-movie" "city-protect-hq-res")
            )
          (new 'static 'game-task-info
            :name "city-power-game"
            :text-name (text-id progress-missions-city-power-game)
            :pre-play-node (game-task-node city-power-game-introduction)
            :kiosk-play-node (game-task-node city-power-game-wait)
            :pre-play-continue "ctyinda-vinroom"
            :play-node (game-task-node city-power-game-resolution)
            :play-continue "vinroom-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-artifact-race-2"
            :text-name (text-id progress-missions-desert-artifact-race-2)
            :pre-play-node (game-task-node desert-artifact-race-2-introduction)
            :kiosk-play-node (game-task-node desert-artifact-race-2-post-intro)
            :pre-play-continue "wasdoors-desert"
            :play-node (game-task-node desert-artifact-race-2-race)
            :play-continue "desert-start-snake"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "nest-hunt"
            :text-name (text-id progress-missions-nest-hunt)
            :pre-play-node (game-task-node nest-hunt-sig)
            :kiosk-play-node (game-task-node nest-hunt-sig)
            :pre-play-continue "desert-hunt-intro"
            :play-node (game-task-node nest-hunt-fight)
            :play-continue "nstb-hunt"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-beast-battle"
            :text-name (text-id progress-missions-desert-beast-battle)
            :pre-play-node (game-task-node desert-beast-battle-introduction)
            :kiosk-play-node (game-task-node desert-beast-battle-kill-last-beast)
            :pre-play-continue "wasdoors-city"
            :play-node (game-task-node desert-beast-battle-kill-last-beast)
            :play-continue "desert-scorpion-gun"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-jump-mission"
            :text-name (text-id progress-missions-desert-jump-mission)
            :pre-play-node (game-task-node desert-jump-mission-introduction)
            :kiosk-play-node (game-task-node desert-jump-mission-post-intro)
            :pre-play-continue "waspala-start"
            :play-node (game-task-node desert-jump-mission-post-intro)
            :play-continue "wasdoors-desert"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-chase-marauders"
            :text-name (text-id progress-missions-desert-chase-marauders)
            :pre-play-node (game-task-node desert-chase-marauders-get-to-stronghold)
            :kiosk-play-node (game-task-node desert-chase-marauders-get-to-stronghold)
            :pre-play-continue "desertf-toad"
            :play-node (game-task-node desert-chase-marauders-ambush)
            :play-continue "desertf-stronghold-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "forest-ring-chase"
            :text-name (text-id progress-missions-forest-ring-chase)
            :pre-play-node (game-task-node forest-ring-chase-introduction)
            :kiosk-play-node (game-task-node forest-ring-chase-statues)
            :pre-play-continue "mhcitya-forestx"
            :play-node (game-task-node forest-ring-chase-statues)
            :play-continue "foresta-ring-chase"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "factory-sky-battle"
            :text-name (text-id progress-missions-factory-sky-battle)
            :pre-play-node (game-task-node factory-sky-battle-introduction)
            :kiosk-play-node (game-task-node factory-sky-battle-hanger)
            :pre-play-continue "freehq-start"
            :play-node (game-task-node factory-sky-battle-wave1)
            :play-continue "factoryb-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "factory-assault"
            :text-name (text-id progress-missions-factory-assault)
            :pre-play-node (game-task-node factory-assault-introduction)
            :kiosk-play-node (game-task-node factory-assault-indax-1-introduction)
            :pre-play-continue #f
            :play-node (game-task-node factory-assault-indax-1-introduction)
            :play-continue "factoryc-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "factory-boss"
            :text-name (text-id progress-missions-factory-boss)
            :pre-play-node (game-task-node factory-boss-introduction)
            :kiosk-play-node (game-task-node factory-boss-resolution)
            :pre-play-continue #f
            :play-node (game-task-node factory-boss-resolution)
            :play-continue "factoryd-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "temple-defend"
            :text-name (text-id progress-missions-temple-defend)
            :pre-play-node (game-task-node temple-defend-introduction)
            :kiosk-play-node (game-task-node temple-defend-talk-box)
            :pre-play-continue "freehq-movie"
            :play-node (game-task-node temple-defend-door-1)
            :play-continue "templex-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-defend"
            :text-name (text-id progress-missions-wascity-defend)
            :pre-play-node (game-task-node wascity-defend-introduction)
            :kiosk-play-node (game-task-node wascity-defend-get-to)
            :pre-play-continue "wascityb-defend"
            :play-node (game-task-node wascity-defend-get-to)
            :play-continue "wascityb-defend-reset"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "forest-turn-on-machine"
            :text-name (text-id progress-missions-forest-turn-on-machine)
            :pre-play-node (game-task-node forest-turn-on-machine-introduction)
            :kiosk-play-node (game-task-node forest-turn-on-machine-spawners)
            :pre-play-continue "mhcitya-forestx"
            :play-node (game-task-node forest-turn-on-machine-spawners)
            :play-continue "foresta-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "precursor-tour"
            :text-name (text-id progress-missions-precursor-tour)
            :pre-play-node (game-task-node precursor-tour-introduction)
            :kiosk-play-node (game-task-node precursor-tour-generator-trigger)
            :pre-play-continue #f
            :play-node (game-task-node precursor-tour-generator-trigger)
            :play-continue "precura-mech"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-blow-tower"
            :text-name (text-id progress-missions-city-blow-tower)
            :pre-play-node (game-task-node city-blow-tower-introduction)
            :kiosk-play-node (game-task-node city-blow-tower-phase-1)
            :pre-play-continue "freehq-movie"
            :play-node (game-task-node city-blow-tower-phase-1)
            :play-continue "cty-blow-tower-mission"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "tower-destroy"
            :text-name (text-id progress-missions-tower-destroy)
            :pre-play-node (game-task-node tower-destroy-introduction)
            :kiosk-play-node (game-task-node tower-destroy-climb)
            :pre-play-continue #f
            :play-node (game-task-node tower-destroy-climb)
            :play-continue "towera-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "palace-ruins-patrol"
            :text-name (text-id progress-missions-palace-ruins-patrol)
            :pre-play-node (game-task-node palace-ruins-patrol-introduction)
            :kiosk-play-node (game-task-node palace-ruins-patrol-stadium)
            :pre-play-continue "stadium-tunnel"
            :play-node (game-task-node palace-ruins-patrol-resolution)
            :play-continue "stadium-steps"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "palace-ruins-attack"
            :text-name (text-id progress-missions-palace-ruins-attack)
            :pre-play-node (game-task-node palace-ruins-attack-introduction)
            :kiosk-play-node (game-task-node palace-ruins-attack-resolution)
            :pre-play-continue "rubblea-start"
            :play-node (game-task-node palace-ruins-attack-resolution)
            :play-continue "rubblea-rhino"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "comb-wild-ride"
            :text-name (text-id progress-missions-comb-wild-ride)
            :pre-play-node (game-task-node comb-wild-ride-introduction)
            :kiosk-play-node (game-task-node comb-wild-ride-resolution)
            :pre-play-continue #f
            :play-node (game-task-node comb-wild-ride-resolution)
            :play-continue "railb-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "precursor-destroy-ship"
            :text-name (text-id progress-missions-precursor-destroy-ship)
            :pre-play-node (game-task-node precursor-destroy-ship-introduction)
            :kiosk-play-node (game-task-node precursor-destroy-ship-escape)
            :pre-play-continue #f
            :play-node (game-task-node precursor-destroy-ship-escape)
            :play-continue "precura-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-final-boss"
            :text-name (text-id progress-missions-desert-final-boss)
            :pre-play-node (game-task-node desert-final-boss-introduction)
            :kiosk-play-node (game-task-node desert-final-boss-walker)
            :pre-play-continue #f
            :play-node (game-task-node desert-final-boss-walker)
            :play-continue "desertb-final-boss-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-win"
            :pre-play-node (game-task-node city-win-introduction)
            :kiosk-play-node (game-task-node city-win-resolution)
            :pre-play-continue #f
            :play-node (game-task-node city-win-resolution)
            :play-continue #f
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-1"
            :pre-play-node (game-task-node desert-bbush-get-to-1-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-1-resolution)
            :pre-play-continue "desert-bbush-desd"
            :play-node (game-task-node desert-bbush-get-to-1-resolution)
            :play-continue "desert-bbush-desd"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-2"
            :pre-play-node (game-task-node desert-bbush-get-to-2-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-2-resolution)
            :pre-play-continue "desert-bbush-desc"
            :play-node (game-task-node desert-bbush-get-to-2-resolution)
            :play-continue "desert-bbush-desc"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-3"
            :pre-play-node (game-task-node desert-bbush-get-to-3-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-3-resolution)
            :pre-play-continue "desert-bbush-desa"
            :play-node (game-task-node desert-bbush-get-to-3-resolution)
            :play-continue "desert-bbush-desa"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-4"
            :pre-play-node (game-task-node desert-bbush-get-to-4-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-4-resolution)
            :pre-play-continue "desert-bbush-desg"
            :play-node (game-task-node desert-bbush-get-to-4-resolution)
            :play-continue "desert-bbush-desg"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-5"
            :pre-play-node (game-task-node desert-bbush-get-to-5-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-5-resolution)
            :pre-play-continue "desert-bbush-desh"
            :play-node (game-task-node desert-bbush-get-to-5-resolution)
            :play-continue "desert-bbush-desh"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-6"
            :pre-play-node (game-task-node desert-bbush-get-to-6-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-6-resolution)
            :pre-play-continue "desert-bbush-desc-2"
            :play-node (game-task-node desert-bbush-get-to-6-resolution)
            :play-continue "desert-bbush-desc-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-7"
            :pre-play-node (game-task-node desert-bbush-get-to-7-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-7-resolution)
            :pre-play-continue "desert-bbush-dese"
            :play-node (game-task-node desert-bbush-get-to-7-resolution)
            :play-continue "desert-bbush-dese"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-8"
            :pre-play-node (game-task-node desert-bbush-get-to-8-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-8-resolution)
            :pre-play-continue "desert-bbush-desb"
            :play-node (game-task-node desert-bbush-get-to-8-resolution)
            :play-continue "desert-bbush-desb"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-9"
            :pre-play-node (game-task-node desert-bbush-get-to-9-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-9-resolution)
            :pre-play-continue "desert-bbush-desa-2"
            :play-node (game-task-node desert-bbush-get-to-9-resolution)
            :play-continue "desert-bbush-desa-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-11"
            :pre-play-node (game-task-node desert-bbush-get-to-11-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-11-resolution)
            :pre-play-continue "desert-bbush-desg-2"
            :play-node (game-task-node desert-bbush-get-to-11-resolution)
            :play-continue "desert-bbush-desg-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-12"
            :pre-play-node (game-task-node desert-bbush-get-to-12-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-12-resolution)
            :pre-play-continue "desert-bbush-desd-2"
            :play-node (game-task-node desert-bbush-get-to-12-resolution)
            :play-continue "desert-bbush-desd-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-14"
            :pre-play-node (game-task-node desert-bbush-get-to-14-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-14-resolution)
            :pre-play-continue "desert-bbush-dese-2"
            :play-node (game-task-node desert-bbush-get-to-14-resolution)
            :play-continue "desert-bbush-dese-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-16"
            :pre-play-node (game-task-node desert-bbush-get-to-16-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-16-resolution)
            :pre-play-continue "desert-bbush-desd-3"
            :play-node (game-task-node desert-bbush-get-to-16-resolution)
            :play-continue "desert-bbush-desd-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-get-to-17"
            :pre-play-node (game-task-node desert-bbush-get-to-17-introduction)
            :kiosk-play-node (game-task-node desert-bbush-get-to-17-resolution)
            :pre-play-continue "desert-bbush-desb-2"
            :play-node (game-task-node desert-bbush-get-to-17-resolution)
            :play-continue "desert-bbush-desb-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-18"
            :pre-play-node (game-task-node wascity-bbush-get-to-18-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-18-resolution)
            :pre-play-continue "wascitya-bbush-wasa-1"
            :play-node (game-task-node wascity-bbush-get-to-18-resolution)
            :play-continue "wascitya-bbush-wasa-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-19"
            :pre-play-node (game-task-node wascity-bbush-get-to-19-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-19-resolution)
            :pre-play-continue "wascitya-bbush-wasa-2"
            :play-node (game-task-node wascity-bbush-get-to-19-resolution)
            :play-continue "wascitya-bbush-wasa-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-20"
            :pre-play-node (game-task-node wascity-bbush-get-to-20-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-20-resolution)
            :pre-play-continue "wascitya-bbush-wasa-3"
            :play-node (game-task-node wascity-bbush-get-to-20-resolution)
            :play-continue "wascitya-bbush-wasa-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-21"
            :pre-play-node (game-task-node wascity-bbush-get-to-21-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-21-resolution)
            :pre-play-continue "wascitya-bbush-wasa-4"
            :play-node (game-task-node wascity-bbush-get-to-21-resolution)
            :play-continue "wascitya-bbush-wasa-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-22"
            :pre-play-node (game-task-node wascity-bbush-get-to-22-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-22-resolution)
            :pre-play-continue "wascityb-bbush-wasb-1"
            :play-node (game-task-node wascity-bbush-get-to-22-resolution)
            :play-continue "wascityb-bbush-wasb-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-23"
            :pre-play-node (game-task-node wascity-bbush-get-to-23-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-23-resolution)
            :pre-play-continue "wascityb-bbush-wasb-2"
            :play-node (game-task-node wascity-bbush-get-to-23-resolution)
            :play-continue "wascityb-bbush-wasb-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-24"
            :pre-play-node (game-task-node wascity-bbush-get-to-24-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-24-resolution)
            :pre-play-continue "wascityb-bbush-wasb-3"
            :play-node (game-task-node wascity-bbush-get-to-24-resolution)
            :play-continue "wascityb-bbush-wasb-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-get-to-25"
            :pre-play-node (game-task-node wascity-bbush-get-to-25-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-get-to-25-resolution)
            :pre-play-continue "wascityb-bbush-wasb-4"
            :play-node (game-task-node wascity-bbush-get-to-25-resolution)
            :play-continue "wascityb-bbush-wasb-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-26"
            :pre-play-node (game-task-node city-bbush-get-to-26-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-26-resolution)
            :pre-play-continue "ctygenb-bbush-1"
            :play-node (game-task-node city-bbush-get-to-26-resolution)
            :play-continue "ctygenb-bbush-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-27"
            :pre-play-node (game-task-node city-bbush-get-to-27-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-27-resolution)
            :pre-play-continue "ctyslumb-bbush-1"
            :play-node (game-task-node city-bbush-get-to-27-resolution)
            :play-continue "ctyslumb-bbush-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-28"
            :pre-play-node (game-task-node city-bbush-get-to-28-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-28-resolution)
            :pre-play-continue "ctygenb-bbush-2"
            :play-node (game-task-node city-bbush-get-to-28-resolution)
            :play-continue "ctygenb-bbush-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-29"
            :pre-play-node (game-task-node city-bbush-get-to-29-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-29-resolution)
            :pre-play-continue "ctygenb-bbush-3"
            :play-node (game-task-node city-bbush-get-to-29-resolution)
            :play-continue "ctygenb-bbush-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-30"
            :pre-play-node (game-task-node city-bbush-get-to-30-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-30-resolution)
            :pre-play-continue "ctygenb-bbush-4"
            :play-node (game-task-node city-bbush-get-to-30-resolution)
            :play-continue "ctygenb-bbush-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-31"
            :pre-play-node (game-task-node city-bbush-get-to-31-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-31-resolution)
            :pre-play-continue "ctyslumb-bbush-4"
            :play-node (game-task-node city-bbush-get-to-31-resolution)
            :play-continue "ctyslumb-bbush-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-32"
            :pre-play-node (game-task-node city-bbush-get-to-32-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-32-resolution)
            :pre-play-continue "ctyslumc-bbush-1"
            :play-node (game-task-node city-bbush-get-to-32-resolution)
            :play-continue "ctyslumc-bbush-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-33"
            :pre-play-node (game-task-node city-bbush-get-to-33-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-33-resolution)
            :pre-play-continue "ctyslumc-bbush-2"
            :play-node (game-task-node city-bbush-get-to-33-resolution)
            :play-continue "ctyslumc-bbush-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-34"
            :pre-play-node (game-task-node city-bbush-get-to-34-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-34-resolution)
            :pre-play-continue "ctysluma-bbush-2"
            :play-node (game-task-node city-bbush-get-to-34-resolution)
            :play-continue "ctysluma-bbush-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-35"
            :pre-play-node (game-task-node city-bbush-get-to-35-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-35-resolution)
            :pre-play-continue "ctysluma-bbush-3"
            :play-node (game-task-node city-bbush-get-to-35-resolution)
            :play-continue "ctysluma-bbush-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-36"
            :pre-play-node (game-task-node city-bbush-get-to-36-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-36-resolution)
            :pre-play-continue "ctyindb-bbush-2"
            :play-node (game-task-node city-bbush-get-to-36-resolution)
            :play-continue "ctyindb-bbush-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-37"
            :pre-play-node (game-task-node city-bbush-get-to-37-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-37-resolution)
            :pre-play-continue "ctyindb-bbush-3"
            :play-node (game-task-node city-bbush-get-to-37-resolution)
            :play-continue "ctyindb-bbush-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-38"
            :pre-play-node (game-task-node city-bbush-get-to-38-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-38-resolution)
            :pre-play-continue "ctyinda-bbush-2"
            :play-node (game-task-node city-bbush-get-to-38-resolution)
            :play-continue "ctyinda-bbush-2"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-39"
            :pre-play-node (game-task-node city-bbush-get-to-39-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-39-resolution)
            :pre-play-continue "ctyinda-bbush-3"
            :play-node (game-task-node city-bbush-get-to-39-resolution)
            :play-continue "ctyinda-bbush-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-40"
            :pre-play-node (game-task-node city-bbush-get-to-40-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-40-resolution)
            :pre-play-continue "ctyinda-bbush-4"
            :play-node (game-task-node city-bbush-get-to-40-resolution)
            :play-continue "ctyinda-bbush-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-41"
            :pre-play-node (game-task-node city-bbush-get-to-41-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-41-resolution)
            :pre-play-continue "ctyport-bbush-5"
            :play-node (game-task-node city-bbush-get-to-41-resolution)
            :play-continue "ctyport-bbush-5"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-42"
            :pre-play-node (game-task-node city-bbush-get-to-42-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-42-resolution)
            :pre-play-continue "ctyport-bbush-6"
            :play-node (game-task-node city-bbush-get-to-42-resolution)
            :play-continue "ctyport-bbush-6"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-43"
            :pre-play-node (game-task-node city-bbush-get-to-43-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-43-resolution)
            :pre-play-continue "ctyport-bbush-7"
            :play-node (game-task-node city-bbush-get-to-43-resolution)
            :play-continue "ctyport-bbush-7"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-get-to-44"
            :pre-play-node (game-task-node city-bbush-get-to-44-introduction)
            :kiosk-play-node (game-task-node city-bbush-get-to-44-resolution)
            :pre-play-continue "ctyport-bbush-8"
            :play-node (game-task-node city-bbush-get-to-44-resolution)
            :play-continue "ctyport-bbush-8"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-ring-1"
            :pre-play-node (game-task-node desert-bbush-ring-1-introduction)
            :kiosk-play-node (game-task-node desert-bbush-ring-1-resolution)
            :pre-play-continue "desert-bbush-desg-4"
            :play-node (game-task-node desert-bbush-ring-1-resolution)
            :play-continue "desert-bbush-desg-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-ring-2"
            :pre-play-node (game-task-node desert-bbush-ring-2-introduction)
            :kiosk-play-node (game-task-node desert-bbush-ring-2-resolution)
            :pre-play-continue "desert-bbush-dese-1"
            :play-node (game-task-node desert-bbush-ring-2-resolution)
            :play-continue "desert-bbush-dese-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-ring-3"
            :pre-play-node (game-task-node wascity-bbush-ring-3-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-ring-3-resolution)
            :pre-play-continue "wascityb-bbush-wasb-5"
            :play-node (game-task-node wascity-bbush-ring-3-resolution)
            :play-continue "wascityb-bbush-wasb-5"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-ring-4"
            :pre-play-node (game-task-node wascity-bbush-ring-4-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-ring-4-resolution)
            :pre-play-continue "wascitya-bbush-wasa-5"
            :play-node (game-task-node wascity-bbush-ring-4-resolution)
            :play-continue "wascitya-bbush-wasa-5"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-ring-5"
            :pre-play-node (game-task-node city-bbush-ring-5-introduction)
            :kiosk-play-node (game-task-node city-bbush-ring-5-resolution)
            :pre-play-continue "ctyslumb-bbush-3"
            :play-node (game-task-node city-bbush-ring-5-resolution)
            :play-continue "ctyslumb-bbush-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-ring-6"
            :pre-play-node (game-task-node city-bbush-ring-6-introduction)
            :kiosk-play-node (game-task-node city-bbush-ring-6-resolution)
            :pre-play-continue "ctyinda-bbush-1"
            :play-node (game-task-node city-bbush-ring-6-resolution)
            :play-continue "ctyinda-bbush-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-egg-spider-1"
            :pre-play-node (game-task-node desert-bbush-egg-spider-1-introduction)
            :kiosk-play-node (game-task-node desert-bbush-egg-spider-1-resolution)
            :pre-play-continue "desert-bbush-dese-5"
            :play-node (game-task-node desert-bbush-egg-spider-1-resolution)
            :play-continue "desert-bbush-dese-5"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-spirit-chase-1"
            :pre-play-node (game-task-node desert-bbush-spirit-chase-1-introduction)
            :kiosk-play-node (game-task-node desert-bbush-spirit-chase-1-resolution)
            :pre-play-continue "desert-bbush-desa-3"
            :play-node (game-task-node desert-bbush-spirit-chase-1-resolution)
            :play-continue "desert-bbush-desa-3"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-spirit-chase-2"
            :pre-play-node (game-task-node wascity-bbush-spirit-chase-2-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-spirit-chase-2-resolution)
            :pre-play-continue "wascityb-bbush-wasb-6"
            :play-node (game-task-node wascity-bbush-spirit-chase-2-resolution)
            :play-continue "wascityb-bbush-wasb-6"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-spirit-chase-3"
            :pre-play-node (game-task-node city-bbush-spirit-chase-3-introduction)
            :kiosk-play-node (game-task-node city-bbush-spirit-chase-3-resolution)
            :pre-play-continue "ctysluma-bbush-1"
            :play-node (game-task-node city-bbush-spirit-chase-3-resolution)
            :play-continue "ctysluma-bbush-1"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-timer-chase-1"
            :pre-play-node (game-task-node desert-bbush-timer-chase-1-introduction)
            :kiosk-play-node (game-task-node desert-bbush-timer-chase-1-resolution)
            :pre-play-continue "desert-bbush-desd-4"
            :play-node (game-task-node desert-bbush-timer-chase-1-resolution)
            :play-continue "desert-bbush-desd-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "wascity-bbush-timer-chase-2"
            :pre-play-node (game-task-node wascity-bbush-timer-chase-2-introduction)
            :kiosk-play-node (game-task-node wascity-bbush-timer-chase-2-resolution)
            :pre-play-continue "wascitya-bbush-wasa-6"
            :play-node (game-task-node wascity-bbush-timer-chase-2-resolution)
            :play-continue "wascitya-bbush-wasa-6"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-air-time"
            :pre-play-node (game-task-node desert-bbush-air-time-introduction)
            :kiosk-play-node (game-task-node desert-bbush-air-time-resolution)
            :pre-play-continue "desert-bbush-desc-4"
            :play-node (game-task-node desert-bbush-air-time-resolution)
            :play-continue "desert-bbush-desc-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-total-air-time"
            :pre-play-node (game-task-node desert-bbush-total-air-time-introduction)
            :kiosk-play-node (game-task-node desert-bbush-total-air-time-resolution)
            :pre-play-continue "desert-bbush-desc-4"
            :play-node (game-task-node desert-bbush-total-air-time-resolution)
            :play-continue "desert-bbush-desc-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-jump-distance"
            :pre-play-node (game-task-node desert-bbush-jump-distance-introduction)
            :kiosk-play-node (game-task-node desert-bbush-jump-distance-resolution)
            :pre-play-continue "desert-bbush-desc-4"
            :play-node (game-task-node desert-bbush-jump-distance-resolution)
            :play-continue "desert-bbush-desc-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-total-jump-distance"
            :pre-play-node (game-task-node desert-bbush-total-jump-distance-introduction)
            :kiosk-play-node (game-task-node desert-bbush-total-jump-distance-resolution)
            :pre-play-continue "desert-bbush-desc-4"
            :play-node (game-task-node desert-bbush-total-jump-distance-resolution)
            :play-continue "desert-bbush-desc-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-roll-count"
            :pre-play-node (game-task-node desert-bbush-roll-count-introduction)
            :kiosk-play-node (game-task-node desert-bbush-roll-count-resolution)
            :pre-play-continue "desert-bbush-desc-4"
            :play-node (game-task-node desert-bbush-roll-count-resolution)
            :play-continue "desert-bbush-desc-4"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-time-trial-1"
            :pre-play-node (game-task-node desert-bbush-time-trial-1-introduction)
            :kiosk-play-node (game-task-node desert-bbush-time-trial-1-resolution)
            :pre-play-continue "desert-bbush-desb-3"
            :play-node (game-task-node desert-bbush-time-trial-1-resolution)
            :play-continue "desertb-time-trial-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-rally"
            :pre-play-node (game-task-node desert-bbush-rally-introduction)
            :kiosk-play-node (game-task-node desert-bbush-rally-resolution)
            :pre-play-continue "desert-bbush-desc-5"
            :play-node (game-task-node desert-bbush-rally-resolution)
            :play-continue "desrally-race-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-bbush-port-attack"
            :pre-play-node (game-task-node city-bbush-port-attack-introduction)
            :kiosk-play-node (game-task-node city-bbush-port-attack-port-attack-load)
            :pre-play-continue "ctyport-bbush-port-4"
            :play-node (game-task-node city-bbush-port-attack-port-attack-load)
            :play-continue "ctyport-bbush-port-4-missile"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-rescue-bbush"
            :pre-play-node (game-task-node desert-rescue-bbush-introduction)
            :kiosk-play-node (game-task-node desert-rescue-bbush-resolution)
            :pre-play-continue "desert-bbush-desd-5"
            :play-node (game-task-node desert-rescue-bbush-resolution)
            :play-continue "desert-bbush-desd-5"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-gun-course-play-for-fun"
            :pre-play-node (game-task-node city-gun-course-play-for-fun-introduction)
            :kiosk-play-node (game-task-node city-gun-course-play-for-fun-resolution)
            :pre-play-continue "gungame-start"
            :play-node (game-task-node city-gun-course-play-for-fun-resolution)
            :play-continue "gungame-start"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "city-jetboard-bbush"
            :pre-play-node (game-task-node city-jetboard-bbush-introduction)
            :kiosk-play-node (game-task-node city-jetboard-bbush-resolution)
            :pre-play-continue "ctyinda-bbush-5"
            :play-node (game-task-node city-jetboard-bbush-resolution)
            :play-continue "ctyinda-bbush-5"
            :kiosk-play-continue #f
            )
          (new 'static 'game-task-info
            :name "desert-bbush-destroy-interceptors"
            :pre-play-node (game-task-node desert-bbush-destroy-interceptors-introduction)
            :kiosk-play-node (game-task-node desert-bbush-destroy-interceptors-resolution)
            :pre-play-continue "desert-bbush-desb-4"
            :play-node (game-task-node desert-bbush-destroy-interceptors-resolution)
            :play-continue "desert-bbush-desb-4"
            :kiosk-play-continue #f
            )
          )
        )
  (set! (-> game-info sub-task-list)
        (new 'static 'boxed-array :type game-task-node-info
          (new 'static 'game-task-node-info
            :level 'none
            :name "none"
            :flags (game-task-node-flag closed)
            :on-open #f
            :manager #f
            :on-close #f
            :reset #f
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-start)
            :name "city-start-start"
            :when-open #f
            :flags (game-task-node-flag closed auto-close utility-node abs-task-mask save-on-life)
            :task-mask (task-mask task0 task1 task2 task3)
            :on-open #f
            :manager #f
            :borrow '((hiphog 0 ltnjxhip special)
              (hideout 0 #f #f)
              (ctywide 0 #f #f)
              (ctywide 1 #f #f)
              (ctywide 2 #f #f)
              (ctywide 3 #f #f)
              (ctywide 4 #f #f)
              (garage 0 #f #f)
              (stadium 0 #f #f)
              (onintent 0 #f #f)
              (wasintro 0 #f #f)
              (citylow 0 #f #f)
              (vinroom 0 powergd #f)
              (wasall 0 #f #f)
              (wasstada 0 wasstadc display)
              (wasseem 0 #f #f)
              (wasdoors 0 #f #f)
              (waspala 0 #f #f)
              (wascitya 0 #f #f)
              (freehq 0 #f #f)
              (freehq 1 lfreeout copy)
              (waswide 0 #f #f)
              (nstb 0 #f #f)
              (desert-game alias desert copy desinter special)
              (deserte 0 #f #f)
              (foresta 0 #f #f)
              (outrocst 0 #f #f)
              (factorya 0 lfactory special)
              (factorya 1 lfacrm1 copy)
              (factoryb 0 lfaccity copy)
              (factoryc 0 lfaccity copy)
              (factoryd 0 #f #f)
              (factoryd 1 #f #f)
              (railx 0 #f #f)
              (introcst 0 ltorn special)
              (desresc 0 desrescg special)
              (gungame 0 gungame1 special)
              (gungame 1 lgunnorm special)
              (templea 0 #f #f)
              (towera 0 ltowera copy)
              (towerc 0 ltowcity copy)
              (towerc 1 lfacrm1 copy)
              (mhcitya 0 lmhcitya display)
              (mhcityb 0 lmhcityb display)
              (ctywide-ff alias ctywide copy ctypesa auto ctycara auto ctycarb auto ctypepa special)
              (ctywide-ff-kg alias ctywide copy ctypesa auto ctypesc auto dummy auto)
              (ctywide-mh-kg alias ctywide copy ctypesb auto ctypesc auto dummy auto)
              (ctywide-ff-mh alias ctywide copy ctypesa auto ctypesb auto dummy auto)
              (ctywide-kg alias ctywide copy ctypesc auto dummy auto dummy auto ctypepc special)
              (ctywide-mh alias ctywide copy ctypesb special dummy auto dummy auto ctypepb special)
              (ctywide-kg-mh alias ctywide copy ctypesb auto ctypesc auto dummy auto)
              (precura 0 lmech copy)
              (precurc 0 #f #f)
              (stadiuma 0 #f #f)
              )
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-count #x4
            :faction-commands '((restore-defaults))
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-start)
            :name "city-start-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag clear-task-mask save-on-life)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-start-start)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task0 task1 task2 task3 task4 task5 task6 task7)
            :on-open #f
            :manager #f
            :borrow '((wasseem 0 waspgame special) (wasintro 0 inttitle #f) (wasstada 0 wasstadb display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-start)
            :name "city-start-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-start-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :description (text-id progress-missions-watch-intro-movie)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-interceptors)
            :name "desert-interceptors-attack"
            :when-open #f
            :flags (game-task-node-flag close-task no-percent)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-start-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desinter
              :type-to-spawn 'task-manager-desert-interceptors-attack
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-interceptors-attack)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-vehicle-training-1)
            :name "desert-vehicle-training-1-introduction"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life no-percent)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-start-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-vehicle-training-1
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-vehicle-training-1-introduction)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-vehicle-training-2)
            :name "desert-vehicle-training-2-introduction"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life no-percent)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-start-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-vehicle-training-2
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-vehicle-training-2-introduction)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-training-1)
            :name "arena-training-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "arena-training-1-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-start-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 wasstadb display) (wasseem 0 waspgame special) (waspala 0 lwstdpck special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-training-1)
            :name "arena-training-1-collect"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-training-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wasstadb
              :type-to-spawn 'task-manager-arena-training
              :intro-scene #f
              :resolution-scene "arena-fight-1-intro"
              :resolution-scene-continue #f
              :final-node (game-task-node arena-training-1-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadb display) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasstada-jump-training" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasstada-jump-training" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasstada-jump-training" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-jump-training" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x4
            :description (text-id progress-missions-arena-training-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-training-1)
            :name "arena-training-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task no-percent act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-training-1-collect)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 wasstadb display) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasstada-checkpoint-3" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasstada-checkpoint-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasstada-checkpoint-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-checkpoint-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x4
            :description (text-id progress-missions-arena-training-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-1)
            :name "arena-fight-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "arena-fight-1-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-training-1-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 wasstadc display) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4
            :command-count #x1
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-1)
            :name "arena-fight-1-fight"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wasstadc
              :type-to-spawn 'task-manager-arena-fight
              :intro-scene #f
              :resolution-scene "arena-fight-1-res"
              :resolution-scene-continue #f
              :final-node (game-task-node arena-fight-1-throne)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadc display) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x5
            :command-count #x2
            :description (text-id progress-missions-arena-fight-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-1)
            :name "arena-fight-1-throne"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-1-fight)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x7
            :command-count #x3
            :description (text-id progress-missions-arena-fight-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-1)
            :name "arena-fight-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-1-throne)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasstadc
              :type-to-spawn 'task-manager-arena-gun-training
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node arena-fight-1-resolution)
              :vehicle-type #x1b
              :on-complete '(auto-save (quote auto-save))
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadc display) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xa
            :description (text-id progress-missions-arena-fight-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-chase)
            :name "wascity-chase-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-arena)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "wascity-chase-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-109)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-1-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 ljndklev special) (waswide 0 waschase #f) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xa
            :description (text-id talk-to-kleiver)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-chase)
            :name "wascity-chase-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-arena)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "wascity-chase-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor seem-wascity)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor monk-wascity)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-chase-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waschase
              :type-to-spawn 'task-manager-kanga-lizard
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-chase-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "klev001")
              :on-fail #f
              )
            :borrow '((wasstada 0 ljndklev special) (waswide 0 waschase special) (wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wasstada-entrance"
                  :node (game-task-node wascity-chase-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wasstada-entrance"
                  :node (game-task-node wascity-chase-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasstada-entrance"
                  :node (game-task-node wascity-chase-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #xa
            :description (text-id progress-missions-wascity-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor seem-wascity)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "wascity-pre-game-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor monk-wascity)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-111)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-chase-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xa
            :description (text-id talk-to-seem)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-wait"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor seem-wascity)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "wascity-pre-game-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor monk-wascity)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-20)
                :scene #f
                )
              )
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasseem 0 waspgame special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xa
            :description (text-id progress-missions-wascityb-game)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-wascityb)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-20)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task save-on-try exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-wait)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'waspgame
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene "wascity-pre-game-res"
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-pre-game-resolution)
              :vehicle-type #x1b
              :on-complete '(when (kiosk?)
                 (task-open! "wascity-gungame-introduction")
                 )
              :on-fail #f
              )
            :borrow '((wasseem 0 waspgame display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-game"
                  :node (game-task-node wascity-pre-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-game"
                  :node (game-task-node wascity-pre-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-grab)
                :fail (new 'static 'resetter-spec :continue "wascityb-game" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-game"
                  :node (game-task-node wascity-pre-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-grab)
                :fail (new 'static 'resetter-spec :continue "wascityb-game" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-game"
                  :node (game-task-node wascity-pre-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #xa
            :command-count #x1
            :description (text-id progress-missions-wascityb-game)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-post-game"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor was-pre-game-deserte)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-85)
                :scene #f
                )
              )
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((deserte 0 waspgame copy))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xb
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-bronze"
            :when-open #f
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xb
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-silver"
            :when-open #f
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-bronze)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xb
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-pre-game)
            :name "wascity-pre-game-gold"
            :when-open #f
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-silver)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xb
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-turtle-training)
            :name "desert-turtle-training-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-course-race-intro"
                :distance (meters 29)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy destrack display) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #xb
            :command-count #x1
            :description (text-id talk-to-kleiver)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-turtle-training)
            :name "desert-turtle-training-restrict-to-turtle"
            :when-open (new 'static 'boxed-array :type game-task-event)
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-turtle-training-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-highlight-vehicle-wait
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-turtle-training-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy destrack display) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-turtle-training)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-turtle-training)
            :name "desert-turtle-training-in-desert"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-turtle-training-restrict-to-turtle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'destrack
              :type-to-spawn 'task-manager-desert-turtle-training
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-turtle-training-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy destrack display) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert"
                  :node (game-task-node desert-turtle-training-restrict-to-turtle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert"
                  :node (game-task-node desert-turtle-training-restrict-to-turtle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-turtle-training)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-turtle-training)
            :name "desert-turtle-training-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-turtle-training-in-desert)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy destrack display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-turtle-training)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-course-race)
            :name "desert-course-race-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "desert-course-race-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              )
            :flags (game-task-node-flag auto-close save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-turtle-training-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy destrack display) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-course-race)
            :name "desert-course-race-restrict-to-turtle"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "desert-course-race-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              )
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-highlight-vehicle-wait
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-course-race-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy destrack display) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-course-race)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-course-race)
            :name "desert-course-race-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-136)
                :scene #f
                )
              )
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-restrict-to-turtle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'destrack
              :type-to-spawn 'task-manager-desert-course-race
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-course-race-resolution)
              :vehicle-type #x1b
              :on-complete '(want-continue "desert-start")
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy destrack display) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-course-race)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-course-race)
            :name "desert-course-race-race"
            :when-open #f
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy destrack display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desertb-race-start"
                  :node (game-task-node desert-course-race-race)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-city"
                  :node (game-task-node desert-course-race-restrict-to-turtle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-slow-down no-audio-first)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-city"
                  :node (game-task-node desert-course-race-restrict-to-turtle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "desertb-race-start"
                  :node (game-task-node desert-course-race-race)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-slow-down no-audio-first)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-city"
                  :node (game-task-node desert-course-race-restrict-to-turtle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "desertb-race-start"
                  :node (game-task-node desert-course-race-race)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-course-race)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-course-race)
            :name "desert-course-race-win"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-race)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy destrack display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert"
                  :node (game-task-node desert-artifact-race-1-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert"
                  :node (game-task-node desert-artifact-race-1-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-course-race)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-course-race)
            :name "desert-course-race-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-win)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy destrack display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-course-race)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-1)
            :name "desert-artifact-race-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-artifact-race-1-intro"
                :distance (meters 55)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                :distance (meters 55)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-113)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasdoors 0 ldampeck special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id talk-to-damas)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-1)
            :name "desert-artifact-race-1-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-artifact-race-1-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-113)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasdoors 0 ldampeck special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-city" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-city" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-artiface-race-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-1)
            :name "desert-artifact-race-1-race"
            :when-open (new 'static 'boxed-array :type game-task-event)
            :flags (game-task-node-flag exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-1-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'desrace1
              :type-to-spawn 'task-manager-desert-artifact-race
              :intro-scene #f
              :resolution-scene "desert-artifact-race-1-res"
              :resolution-scene-continue #f
              :final-node (game-task-node desert-artifact-race-1-resolution)
              :vehicle-type #x1b
              :on-complete '(when (kiosk?)
                 (task-open! "desert-hover-introduction")
                 )
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desrace1 special) (wasdoors 0 ldampeck special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "desert-start-turtle" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "desert-start-turtle" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-start-turtle" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-start-turtle" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #xc
            :description (text-id progress-missions-desert-artiface-race-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-1)
            :name "desert-artifact-race-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                :distance (meters 55)
                )
              )
            :flags (game-task-node-flag close-task exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-1-race)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desrace1 special) (wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xc
            :command-count #x2
            :description (text-id progress-missions-desert-artiface-race-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-leaper-race)
            :name "wascity-leaper-race-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor seem-leaper)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "wascity-leaper-race-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                :distance (meters 55)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor wascity-leaper)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-110)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-1-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '((wascitya 0 lseemwca special) (waswide 0 wasleapr special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #xe
            :description (text-id talk-to-seem)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-leaper-race)
            :name "wascity-leaper-race-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task clear-task-mask exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-leaper-race-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wasleapr
              :type-to-spawn 'task-manager-wascity-leaper-race
              :intro-scene #f
              :resolution-scene "wascity-leaper-race-res"
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-leaper-race-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wascitya 0 lseemwca special) (waswide 0 wasleapr display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wascitya-flut-racer" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wascitya-flut-racer" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "wascitya-seem"
                  :node (game-task-node wascity-leaper-race-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue "wascitya-flut-racer" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "wascitya-seem"
                  :node (game-task-node wascity-leaper-race-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue "wascitya-flut-racer" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #xe
            :command-count #x1
            :description (text-id progress-missions-wascity-leaper-race)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-hover)
            :name "desert-hover-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-hover-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-leaper-race-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-highlight-vehicle
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-hover-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasdoors 0 lkleever special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #xf
            :command-count #x1
            :description (text-id talk-to-kleiver)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-hover)
            :name "desert-hover-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'deshover
              :type-to-spawn 'task-manager-desert-hover
              :intro-scene #f
              :resolution-scene "desert-hover-res"
              :resolution-scene-continue #f
              :final-node (game-task-node desert-hover-resolution)
              :vehicle-type #x1b
              :on-complete '(kiosk-complete)
              :on-fail #f
              )
            :borrow '((wasdoors 0 lkleever special) (desert-game alias desert copy deshover display))
            :open? #f
            :on-close '(begin
               (task-close! "desert-vehicle-training-1-introduction")
               (task-close! "desert-vehicle-training-2-introduction")
               )
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x10
            :command-count #x1
            :description (text-id progress-missions-desert-hover)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-2)
            :name "arena-fight-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "arena-fight-2-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-114)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x11
            :command-count #x2
            :description (text-id talk-to-damas)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-2)
            :name "arena-fight-2-gun-training"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waspala
              :type-to-spawn 'task-manager-throne-gun-training
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node arena-fight-2-gun-training)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x13
            :description (text-id go-to-arena)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-2)
            :name "arena-fight-2-fight"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "arena-fight-2-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-115)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-2-gun-training)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wasstadc
              :type-to-spawn 'task-manager-arena-fight-2
              :intro-scene #f
              :resolution-scene "arena-fight-2-res"
              :resolution-scene-continue #f
              :final-node (game-task-node arena-fight-2-resolution)
              :vehicle-type #x1b
              :on-complete '(kiosk-complete)
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-3" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x13
            :description (text-id progress-missions-arena-fight-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-2)
            :name "arena-fight-2-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-2-fight)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x13
            :command-count #x3
            :description (text-id progress-missions-arena-fight-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-catch-lizards)
            :name "desert-catch-lizards-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-catch-lizards-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasdoors 0 ldamklev display) (wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x16
            :description (text-id talk-to-kleiver)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-catch-lizards)
            :name "desert-catch-lizards-restrict-to-snake"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-26)
                :scene #f
                )
              )
            :flags (game-task-node-flag auto-close save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-highlight-vehicle
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-catch-lizards-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x16
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-catch-lizards)
            :name "desert-catch-lizards-get-to-corral"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-121)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor damus-wasdoors)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-restrict-to-snake)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-get-to-corral
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-catch-lizards-get-to-corral)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasdoors 0 ldamklev display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x16
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-catch-lizards)
            :name "desert-catch-lizards-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-121)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task reset-on-try exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-get-to-corral)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'desliz
              :type-to-spawn 'task-manager-desert-catch-lizards
              :intro-scene #f
              :resolution-scene "desert-lizard-resolution"
              :resolution-scene-continue #f
              :final-node (game-task-node desert-catch-lizards-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desliz special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desert-lizard-corral" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-lizard-corral" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-lizard-corral" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-lizard-corral" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x16
            :command-count #x1
            :description (text-id progress-missions-desert-catch-lizards)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-rescue-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-114)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(when (and (task-closed? "temple-climb-introduction") (not (task-closed? "temple-climb-resolution")))
               (task-open! "temple-climb-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x17
            :description (text-id talk-to-damas)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-get-vehicle"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-26)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "desert-rescue-intro"
                )
              )
            :flags (game-task-node-flag auto-close save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-highlight-vehicle
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-rescue-dead-wlander-movie)
              :vehicle-type #x1b
              :index 2
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x17
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "desert-rescue-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-26)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-get-vehicle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desresc
              :type-to-spawn 'task-manager-desert-rescue
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-rescue-resolution)
              :vehicle-type #x1b
              :on-complete '(auto-save (quote auto-save))
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desresc special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-city" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-city" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x17
            :description (text-id progress-missions-desert-rescue)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-rescue"
            :when-open #f
            :flags (game-task-node-flag exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desresc special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wasdoors-desert-snake"
                  :node (game-task-node desert-rescue-rescue)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wasdoors-desert-snake"
                  :node (game-task-node desert-rescue-rescue)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert-snake"
                  :node (game-task-node desert-rescue-rescue)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert-snake"
                  :node (game-task-node desert-rescue-rescue)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x17
            :description (text-id progress-missions-desert-rescue)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-dead-wlander-movie"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-rescue)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desresc special) (desresc 0 desrescc special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x17
            :description (text-id progress-missions-desert-rescue)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-satellite-fight"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-dead-wlander-movie)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desresc display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-rescue-movie-finish"
                  :node (game-task-node desert-rescue-satellite-fight)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "desert-rescue-movie-finish"
                  :node (game-task-node desert-rescue-satellite-fight)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x17
            :description (text-id defeat-dark-satelite)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life exclusive act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-satellite-fight)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desresc special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-rescue-post-satellite"
                  :node (game-task-node desert-rescue-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "desert-rescue-post-satellite"
                  :node (game-task-node desert-rescue-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x17
            :command-count #x1
            :description (text-id race-to-city)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue)
            :name "desert-rescue-hold-doors"
            :when-open #f
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-lock-wasdoors
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-rescue-hold-doors)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x18
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-gungame)
            :name "wascity-gungame-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wascityb)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "wascity-gun-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-116)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-hold-doors)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((waswide 0 lkleever special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x18
            :description (text-id talk-to-kleiver)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-gungame)
            :name "wascity-gungame-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wascityb)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "wascity-gun-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-17)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wascityb
              :type-to-spawn 'task-manager-wascity-gungame
              :intro-scene #f
              :resolution-scene "wascity-gun-res"
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-gungame-resolution)
              :vehicle-type #x1b
              :on-complete '(begin (want-continue "wascityb-seem"))
              :on-fail #f
              )
            :borrow '((waswide 0 lkleever special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wascityb-gungame-reset" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wascityb-gungame-reset" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "wascityb-gungame"
                  :node (game-task-node wascity-gungame-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue "wascityb-gungame-reset" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "wascityb-gungame"
                  :node (game-task-node wascity-gungame-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue "wascityb-gungame-reset" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x18
            :command-count #x1
            :description (text-id progress-missions-wascity-gungame)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-gungame)
            :name "wascity-gungame-play-for-fun"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor wascity-turret)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-06)
                :scene #f
                :distance (meters 6)
                )
              )
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wascityb
              :type-to-spawn 'task-manager-wascity-gungame
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-gungame-play-for-fun)
              :vehicle-type #x1b
              :index 1
              :on-complete #f
              :on-fail #f
              :user-count 3
              )
            :borrow '()
            :open? (lambda () (or (not (task-node-closed? (game-task-node wascity-defend-get-to)))
                           (task-node-closed? (game-task-node wascity-defend-resolution))
                           )
                    )
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wascityb-gungame" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wascityb-gungame-reset" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x19
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-gungame)
            :name "wascity-gungame-bronze"
            :when-open #f
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x19
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-gungame)
            :name "wascity-gungame-silver"
            :when-open #f
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x19
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-gungame)
            :name "wascity-gungame-gold"
            :when-open #f
            :flags (game-task-node-flag no-restart act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x19
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-3)
            :name "arena-fight-3-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "arena-fight-3-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-115)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasstadc
              :type-to-spawn 'task-manager-throne-rog
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node arena-fight-3-introduction)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close '(when (and (task-closed? "temple-climb-introduction") (not (task-closed? "temple-climb-resolution")))
               (task-open! "temple-climb-introduction")
               )
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x19
            :command-count #x1
            :description (text-id talk-to-damas)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-3)
            :name "arena-fight-3-training"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-3-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasstadc
              :type-to-spawn 'task-manager-arena-gun-training-blue
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node arena-fight-3-training)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-pre-fight-1" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-pre-fight-1" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-pre-fight-1" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-pre-fight-1" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1a
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-3)
            :name "arena-fight-3-fight"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-3-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wasstadc
              :type-to-spawn 'task-manager-arena-fight-3
              :intro-scene #f
              :resolution-scene '("arena-fight-3-res" "nest-eggs-intro")
              :resolution-scene-continue "wasstada-fight-2"
              :final-node (game-task-node arena-fight-3-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-2" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-2" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-2" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasstada-fight-2" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1a
            :description (text-id progress-missions-arena-fight-3)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'arena
            :task (game-task arena-fight-3)
            :name "arena-fight-3-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-arena)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-3-fight)
              (game-task-node arena-fight-3-training)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasstada 0 wasstadc display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1a
            :description (text-id progress-missions-arena-fight-3)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-eggs)
            :name "nest-eggs-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "nest-eggs-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-114)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-3-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasall 0 lwassig #f))
            :open? #f
            :on-close '(when (and (task-closed? "temple-climb-introduction") (not (task-closed? "temple-climb-resolution")))
               (task-open! "temple-climb-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x1a
            :command-count #x1
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-eggs)
            :name "nest-eggs-get-to-scorpion"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-eggs-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwassig
              :type-to-spawn 'task-manager-nest-cocoons
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node nest-eggs-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((nstb 0 lnstoba display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "waspala-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "waspala-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "waspala-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "waspala-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-nest-eggs)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-eggs)
            :name "nest-eggs-wall"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-eggs-get-to-scorpion)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((nstb 0 lnstoba display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert-scorpion" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert-scorpion" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert-scorpion" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert-scorpion" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-nest-eggs)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-eggs)
            :name "nest-eggs-tunnel"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-eggs-wall)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((nstb 0 lnstoba display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "nsta-eggs" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nsta-eggs" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nsta-eggs" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "nsta-eggs" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-nest-eggs)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-eggs)
            :name "nest-eggs-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-eggs-tunnel)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((nstb 0 lnstoba display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "nsta-eggs"
                  :node (game-task-node nest-eggs-tunnel)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "nsta-eggs"
                  :node (game-task-node nest-eggs-tunnel)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nsta-cave" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "nsta-cave" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-nest-eggs)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-eggs)
            :name "nest-eggs-gas"
            :when-open #f
            :flags (game-task-node-flag abs-task-mask act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-eggs-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask time-limit)
              :level 'lwassig
              :type-to-spawn 'task-manager-nest-cocoon-gas
              :time-limit #xd2f0
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node nest-eggs-gas)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((nstb 0 lnstoba display) (wasall 0 lwassig display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "nstb-escape" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nstb-escape" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nstb-escape" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "nstb-escape" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id nest-eggs-return-to-spargus)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-climb)
            :name "temple-climb-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event)
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-temple-climb
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-climb-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasall 0 lwassig special))
            :open? (lambda () (not (kiosk?)))
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id reach-monk-temple)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-climb)
            :name "temple-climb-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task abs-task-mask act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-climb-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templex-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templex-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-temple-climb)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-glide)
            :name "desert-glide-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-climb-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-glide)
            :name "desert-glide-templetop"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-glide-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'hanga
              :type-to-spawn 'task-manager-desert-glide
              :intro-scene #f
              :resolution-scene "desert-glide-res"
              :resolution-scene-continue #f
              :final-node (game-task-node desert-glide-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "hanga-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "hanga-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "hanga-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "hanga-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-desert-glide)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-glide)
            :name "desert-glide-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-glide-templetop)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "hanga-start"
                  :node (game-task-node desert-glide-templetop)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "hanga-start"
                  :node (game-task-node desert-glide-templetop)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "hanga-halfway" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "hanga-halfway" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-desert-glide)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-glide-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-catch-flut"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life reset-on-try act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'volcanoa
              :type-to-spawn 'task-manager-catch-flut
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node volcano-darkeco-catch-flut)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "volcanox-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "volcanox-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-volcano-darkeco)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-indax-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life reset-on-try act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-catch-flut)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'volcanoa
              :type-to-spawn 'task-manager-restrict-to-flut
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node volcano-darkeco-indax-1-introduction)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-volcano-darkeco)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-indax-1"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-143)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life reset-on-try act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-indax-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-volcano-darkeco)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-indax-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life reset-on-try act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-indax-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-volcano-darkeco)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-indax-2"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-144)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask save-on-life reset-on-try act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-indax-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :description (text-id progress-missions-volcano-darkeco)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'volcano
            :task (game-task volcano-darkeco)
            :name "volcano-darkeco-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-142)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor monk-mummy)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-indax-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1b
            :command-count #x1
            :description (text-id progress-missions-volcano-darkeco)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-119)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-145)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-162)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-166)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor monk-mummy)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node volcano-darkeco-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task6)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-stairs"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-163)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task6)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-oracle-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templea-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templea-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-watchers-complete"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-163)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-stairs)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1 task4 task6)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templea-watchers" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templea-watchers" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-pre-pole-room"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-164)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-watchers-complete)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templea-spiders" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templea-spiders" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-pole-room"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-164)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-pre-pole-room)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1 task4 task5 task6)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-pole-room" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-pole-room" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-pole-half"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-164)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-pole-room)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-pole-half" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-pole-half" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-door-1"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-164)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-pole-half)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-pole-complete" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-pole-complete" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-meeting"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-164)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-door-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-pre-oracle"
                  :node (game-task-node temple-oracle-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "temple-after-pole-spiders" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "temple-after-pole-spiders" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x1c
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-powerup"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-164)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-meeting)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-temple-oracle-powerup
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-oracle-powerup)
              :vehicle-type #x1b
              :sphere-count 1
              :sphere-array (new 'static 'inline-array sphere 1 (new 'static 'sphere :x 17030226.0 :y 189931.52 :z 19159040.0 :r 4096.0))
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1c
            :command-count #x3
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-oracle)
            :name "temple-oracle-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-165)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task abs-task-mask act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-oracle-powerup)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2 task4 task5 task6)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-lightjak-training
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-oracle-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1f
            :description (text-id progress-missions-temple-oracle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-oasis-defense)
            :name "desert-oasis-defense-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-120)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-eggs-resolution)
              (game-task-node temple-oracle-resolution)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'oasis-defense-intro-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-oasis-defense-meeting)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desoasis special) (wasall 0 lwassig special))
            :open? #f
            :on-close '(task-close! "nest-eggs-gas")
            :reset #f
            :suck-death-count #xa5
            :command-index #x1f
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-oasis-defense)
            :name "desert-oasis-defense-meeting"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-oasis)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-oasis-defense-res"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-120)
                :scene #f
                )
              )
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'desoasis
              :type-to-spawn 'task-manager-desert-oasis-defense
              :intro-scene #f
              :resolution-scene "desert-oasis-defense-res-b"
              :resolution-scene-continue #f
              :final-node (game-task-node desert-oasis-defense-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desoasis special) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1f
            :description (text-id oasis-find-ashelin)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-oasis-defense)
            :name "desert-oasis-defense-battle"
            :when-open #f
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-meeting)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desoasis display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec
                  :continue "desert-ashelin"
                  :node (game-task-node desert-oasis-defense-battle)
                  :reset-mode 'try
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-ashelin"
                  :node (game-task-node desert-oasis-defense-battle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-ashelin"
                  :node (game-task-node desert-oasis-defense-battle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-ashelin"
                  :node (game-task-node desert-oasis-defense-battle)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x1f
            :description (text-id progress-missions-desert-oasis-defense)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-oasis-defense)
            :name "desert-oasis-defense-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-battle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desoasis special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x1f
            :command-count #x4
            :description (text-id progress-missions-desert-oasis-defense)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-167)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-temple-tests
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-tests-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x23
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-hover-training"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x23
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-oracle-door-crossed"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-168)
                :scene #f
                )
              )
            :flags (game-task-node-flag act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-hover-training)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x23
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-oracle"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-168)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-oracle-door-crossed)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-temple-oracle-powerup
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-tests-oracle)
              :vehicle-type #x1b
              :sphere-count 1
              :sphere-array (new 'static 'inline-array sphere 1 (new 'static 'sphere :x 16834888.0 :y 189931.52 :z 19507896.0 :r 4096.0))
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x23
            :command-count #x1
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-training"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-oracle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-lightjak-training-freeze
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-tests-training)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x24
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-door-1"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-169)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-training)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x24
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-door-2"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-169)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-door-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x24
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-door-3"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-169)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-door-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x24
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-tests)
            :name "temple-tests-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-169)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task abs-task-mask save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-door-3)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task3 task4 task5 task6)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templed
              :type-to-spawn 'task-manager-temple-tests-stupid-bridge
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-tests-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-oracle-door-crossed)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-tests-oracle-door-crossed)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templed-bridge" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templed-bridge" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x24
            :description (text-id progress-missions-temple-tests)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'comb
            :task (game-task comb-travel)
            :name "comb-travel-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-tests-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x24
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'comb
            :task (game-task comb-travel)
            :name "comb-travel-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node comb-travel-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'comba
              :type-to-spawn 'task-manager-comb-travel
              :intro-scene #f
              :resolution-scene "catacomb-get-shield"
              :resolution-scene-continue #f
              :final-node (game-task-node comb-travel-resolution)
              :vehicle-type #x1b
              :on-complete '(begin (want-continue "combn-start") (auto-save 'auto-save))
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "comba-sled" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "comba-sled" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "comba-sled" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "comba-sled" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x24
            :command-count #x1
            :description (text-id progress-missions-comb-travel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'comb
            :task (game-task comb-travel)
            :name "comb-travel-training"
            :when-open #f
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node comb-travel-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'comba
              :type-to-spawn 'task-manager-lightjak-training-shield
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node comb-travel-training)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "combn-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "combn-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "combn-start" :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x25
            :description (text-id progress-missions-comb-travel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-explore)
            :name "mine-explore-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-talkbox)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "mine-explore-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-152)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node comb-travel-training)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x25
            :description (text-id progress-missions-mine-explore)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-explore)
            :name "mine-explore-elevator"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-152)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-explore-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'minea
              :type-to-spawn 'mine-music-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node mine-explore-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x25
            :description (text-id progress-missions-mine-explore)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-explore)
            :name "mine-explore-armor"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-153)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-explore-elevator)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x25
            :command-count #x1
            :description (text-id progress-missions-mine-explore)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-explore)
            :name "mine-explore-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-explore-armor)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "minec-start"
                  :node (game-task-node mine-explore-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x26
            :description (text-id progress-missions-mine-explore)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-blow)
            :name "mine-blow-introduction"
            :when-open #f
            :flags (game-task-node-flag set-task-mask act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-explore-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "mineb-elevator-room" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "mineb-elevator-room" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x26
            :description (text-id progress-missions-mine-blow)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-blow)
            :name "mine-blow-elevator"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-156)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-blow-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "mineb-elevator-room" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "mineb-elevator-room" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x26
            :description (text-id progress-missions-mine-blow)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-blow)
            :name "mine-blow-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-156)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-blow-elevator)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene time-limit)
              :level 'minea
              :type-to-spawn 'task-manager
              :time-limit #xafc8
              :intro-scene #f
              :resolution-scene "mine-train-res"
              :resolution-scene-continue #f
              :final-node (game-task-node mine-blow-resolution)
              :vehicle-type #x1b
              :on-complete '(begin (kiosk-complete) (want-continue "minec-resolution"))
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "minec-train" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "minec-train" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "minec-train" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "minec-train" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x26
            :description (text-id progress-missions-mine-blow)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-boss)
            :name "mine-boss-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor veger-cave)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "mine-boss-intro"
                :distance (meters 30)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-156)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-blow-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'minea
              :type-to-spawn 'mine-music-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node mine-boss-introduction)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "minec-resolution" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "minec-resolution" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x26
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'mine
            :task (game-task mine-boss)
            :name "mine-boss-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task set-task-mask act1)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-boss-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask done)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'mined
              :type-to-spawn 'task-manager-prebot
              :intro-scene #f
              :resolution-scene "mine-boss-res"
              :resolution-scene-continue #f
              :final-node (game-task-node mine-boss-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x26
            :command-count #x2
            :description (text-id progress-missions-mine-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-met-hum)
            :name "sewer-met-hum-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor samos-genb)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "sewer-met-hum-intro"
                :distance (meters 20)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor keira-genb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-134)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-boss-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lsamos special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id meet-old-friends)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-met-hum)
            :name "sewer-met-hum-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor samos-genb)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "sewer-met-hum-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor keira-genb)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-met-hum-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lsamos special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id progress-missions-sewer-met-hum)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-vehicle-training)
            :name "city-vehicle-training-hover-zone-1"
            :when-open #f
            :flags (game-task-node-flag save-on-life city-wait act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-met-hum-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-city-vehicle-training-hover-zone-1
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-vehicle-training-hover-zone-1)
              :vehicle-type #x1b
              :intro-delay (seconds 1)
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x28
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-vehicle-training)
            :name "city-vehicle-training-hover-zone-2"
            :when-open #f
            :flags (game-task-node-flag save-on-life city-wait act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-vehicle-training-hover-zone-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-city-vehicle-training-hover-zone-2
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-vehicle-training-hover-zone-2)
              :vehicle-type #x1b
              :intro-delay (seconds 1)
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x28
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-fight)
            :name "city-port-fight-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbar)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-port-fight-intro"
                :distance (meters 37)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-met-hum-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id talk-to-torn-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-fight)
            :name "city-port-fight-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-fight-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbombbot
              :type-to-spawn 'task-manager-port-fight
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-port-fight-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "torn001")
              :on-fail #f
              )
            :borrow '((ctywide 4 lbombbot special) (ctywide-ff alias ctywide copy ctypesa special ctypesc special))
            :open? #f
            :on-close '(task-close! "city-vehicle-training-hover-zone-2")
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "ctyport-hiphog" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "ctyport-hiphog" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "ctyport-hiphog" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "ctyport-hiphog" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id progress-missions-city-port-fight)
            :faction-commands '((faction-strength kg port 5)
              (faction-strength ff inda-kg 3)
              (faction-strength mh -5)
              (faction-spawn ff-ped off)
              )
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-attack)
            :name "city-port-attack-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hiptable)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-port-attack-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-fight-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id talk-to-torn-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-attack)
            :name "city-port-attack-get-on"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hiptable)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "city-port-attack-intro"
                )
              )
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'lctypatk
              :type-to-spawn 'ctyport-attack-manager
              :intro-scene #f
              :resolution-scene "city-port-attack-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-port-attack-resolution)
              :vehicle-type #x1b
              :on-complete '(kiosk-complete)
              :on-fail #f
              )
            :borrow '((ctywide 4 lctypatk display)
              (ctywide-ff alias ctywide copy ctypesa auto ctycarb auto ctycara auto lpatkcs display)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'try
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id progress-missions-city-port-attack)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-attack)
            :name "city-port-attack-mission"
            :when-open #f
            :flags (game-task-node-flag exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-get-on)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lctypatk display)
              (ctywide-ff alias ctywide copy ctypesa special ctycarb special ctycara special lpatkcs display)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-mission)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-mission)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-mission)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-mission)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x28
            :description (text-id progress-missions-city-port-attack)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-attack)
            :name "city-port-attack-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task set-task-mask exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-mission)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lctypatk display)
              (ctywide-ff alias ctywide copy ctypesa special ctycarb special ctycara special lpatkcs display)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-mission)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-mission)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-attack-get-on-movie"
                  :node (game-task-node city-port-attack-get-on)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-attack-start"
                  :node (game-task-node city-port-attack-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x28
            :command-count #x1
            :description (text-id progress-missions-city-port-attack)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-gun-course-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor gun-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-07)
                :scene #f
                )
              )
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x29
            :description (text-id talk-to-tess)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor gun-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'gungame
              :type-to-spawn 'gungame-task-manager
              :intro-scene #f
              :resolution-scene "city-gun-course-1-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-gun-course-1-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete #f
              :on-fail #f
              )
            :borrow '((gungame 0 gungame1 special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-1-start"
                  :node (game-task-node city-gun-course-1-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-1-start"
                  :node (game-task-node city-gun-course-1-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x29
            :description (text-id progress-missions-city-gun-course-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor gun-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((gungame 0 gungame1 special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-1-start"
                  :node (game-task-node city-gun-course-1-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-1-start"
                  :node (game-task-node city-gun-course-1-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x29
            :command-count #x2
            :description (text-id progress-missions-city-gun-course-1)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-tess"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((gungame 0 gungame1 special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-bronze"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-silver"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-1)
            :name "city-gun-course-1-gold"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-sniper-fight)
            :name "city-sniper-fight-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hiptable)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-sniper-fight-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task4)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id talk-to-torn-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-sniper-fight)
            :name "city-sniper-fight-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hiptable)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "city-sniper-fight-intro"
                )
              )
            :flags (game-task-node-flag close-task set-task-mask exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-sniper-fight-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task4)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lctysnpr
              :type-to-spawn 'task-manager-city-sniper-fight
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-sniper-fight-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide 4 lctysnpr display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "ctyinda-sniper-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "ctyinda-sniper-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "ctyinda-sniper-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "ctyinda-sniper-start" :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id progress-missions-city-sniper-fight)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-kg-met)
            :name "sewer-kg-met-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbar)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "sewer-kg-met-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-sniper-fight-resolution)
              (game-task-node city-gun-course-1-resolution)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id talk-to-torn-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-kg-met)
            :name "sewer-kg-met-button0-pressed"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbar)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "sewer-kg-met-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-03)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-kg-met-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id progress-missions-sewer-kg-met)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-kg-met)
            :name "sewer-kg-met-button1-pressed"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbar)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "sewer-kg-met-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-03)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-kg-met-button0-pressed)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id progress-missions-sewer-kg-met)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-kg-met)
            :name "sewer-kg-met-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbar)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "sewer-kg-met-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-03)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-kg-met-button1-pressed)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id progress-missions-sewer-kg-met)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-destroy-darkeco)
            :name "city-destroy-darkeco-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-kg-met-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level 'ctywide
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-destroy-darkeco-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 2)
              :on-complete '(talker-spawn "ash002")
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-destroy-darkeco)
            :name "city-destroy-darkeco-orbs"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-darkeco-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lctydest
              :type-to-spawn 'task-manager-destroy-darkeco
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-destroy-darkeco-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide 4 lctydest display) (ctywide-mh alias ctywide copy ctypesb special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :description (text-id progress-missions-city-destroy-darkeco)
            :faction-commands '((faction-strength mh -2) (faction-spawn mh-guard suppress) (faction-spawn mh-ped suppress))
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-destroy-darkeco)
            :name "city-destroy-darkeco-dark-punch"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-darkeco-orbs)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lctydest display) (ctywide-mh alias ctywide copy ctypesb special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2b
            :command-count #x1
            :description (text-id progress-missions-city-destroy-darkeco)
            :faction-commands '((faction-strength mh -2) (faction-spawn mh-guard suppress) (faction-spawn mh-ped suppress))
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-destroy-darkeco)
            :name "city-destroy-darkeco-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-darkeco-dark-punch)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lctydest
              :type-to-spawn 'task-manager-dark-punch-training
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-destroy-darkeco-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide 4 lctydest display) (ctywide-mh alias ctywide copy ctypesb special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2c
            :command-count #x1
            :description (text-id progress-missions-city-destroy-darkeco)
            :faction-commands '((faction-strength mh -2) (faction-spawn mh-guard suppress) (faction-spawn mh-ped suppress))
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-kill-plants)
            :name "forest-kill-plants-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-darkeco-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level #f
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-kill-plants-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 1)
              :on-complete '(talker-spawn "sam003")
              :on-fail #f
              )
            :borrow '((foresta 0 lforplnt display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2d
            :command-count #x1
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-kill-plants)
            :name "forest-kill-plants-pillars"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-kill-plants-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lforplnt
              :type-to-spawn 'task-manager-forest-plants
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-kill-plants-resolution)
              :vehicle-type #x1b
              :on-complete '(begin (want-continue "foresta-start") (auto-save 'auto-save))
              :on-fail #f
              )
            :borrow '((foresta 0 lforplnt display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x2e
            :description (text-id progress-missions-forest-kill-plants)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-kill-plants)
            :name "forest-kill-plants-armor"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-kill-plants-pillars)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforplnt display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x2e
            :command-count #x1
            :description (text-id progress-missions-forest-kill-plants)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-kill-plants)
            :name "forest-kill-plants-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-kill-plants-armor)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforplnt display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "foresta-pillar-bottom" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "foresta-pillar-bottom" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "foresta-pillar-bottom" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "foresta-pillar-bottom" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x2f
            :command-count #x1
            :description (text-id progress-missions-forest-kill-plants)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-destroy-grid)
            :name "city-destroy-grid-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-kill-plants-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level #f
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-destroy-grid-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 3)
              :on-complete '(talker-spawn "torn008")
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x30
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-destroy-grid)
            :name "city-destroy-grid-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task set-task-mask exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'ljinx
              :type-to-spawn 'task-manager-city-destroy-grid
              :intro-scene #f
              :resolution-scene "city-destroy-grid-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-destroy-grid-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide 4 ljinx display)
              (ctywide-ff alias ctywide copy ctypesb auto ctycara special ctycarb auto ctypepb special)
              (ctywide-mh alias ctywide copy ctypesb special ctycara special ctycarb auto ctypepb special)
              (ctywide-kg alias ctywide copy ctypesc auto ctycara special ctycarb auto ctypepc special)
              )
            :open? #f
            :on-close '(task-close! "city-gun-course-1-tess")
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "mhcitya-grid" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "mhcitya-grid" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x30
            :command-count #x3
            :description (text-id progress-missions-city-destroy-grid)
            :faction-commands '((faction-strength mh port 5)
              (faction-strength mh mhcity 5)
              (faction-strength ff -5)
              (faction-spawn ff-guard off)
              )
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-hijack-vehicle)
            :name "city-hijack-vehicle-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life city-wait act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'cty-hijack-intro
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-hijack-vehicle-introduction)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide-ff-kg alias ctywide copy dummy auto ctypesc auto ctypesa auto)
              (ctywide-ff alias ctywide copy dummy auto ctypepa special ctypesa auto ctycarb auto)
              (ctywide-ff-mh alias ctywide copy ctypesa auto ctypesb auto dummy auto)
              (ctywide-mh alias ctywide copy ctypesb special dummy auto dummy auto ctypepb special)
              )
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x33
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-hijack-vehicle)
            :name "city-hijack-vehicle-infiltrate"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-hijack-vehicle-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'lctyhijk
              :type-to-spawn 'cty-hijack-manager
              :intro-scene #f
              :resolution-scene "city-hijack-vehicle-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-hijack-vehicle-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide 4 lctyhijk display)
              (ctywide-kg alias ctywide copy ctypesc auto dummy auto)
              (ctywide-ff-kg alias ctywide copy dummy auto ctypesc auto ctypesa auto)
              (ctywide-ff alias ctywide copy dummy auto ctypepa special ctypesa auto ctycarb auto)
              (ctywide-ff-mh alias ctywide copy ctypesa auto ctypesb auto dummy auto)
              (ctywide-mh alias ctywide copy ctypesb special dummy auto dummy auto ctypepb special)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyinda-kg-start"
                  :node (game-task-node city-hijack-vehicle-infiltrate)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "ctyinda-kg-start"
                  :node (game-task-node city-hijack-vehicle-infiltrate)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id progress-missions-city-hijack-vehicle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-hijack-vehicle)
            :name "city-hijack-vehicle-escape"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-hijack-vehicle-infiltrate)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lctyhijk display)
              (ctywide-kg alias ctywide copy ctypesc auto dummy auto)
              (ctywide-ff-kg alias ctywide copy dummy auto ctypesc auto ctypesa auto)
              (ctywide-ff alias ctywide copy dummy auto ctypepa special ctypesa auto ctycarb auto)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyindb-hijack-vehicle"
                  :node (game-task-node city-hijack-vehicle-escape)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "ctyindb-hijack-vehicle"
                  :node (game-task-node city-hijack-vehicle-escape)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id bring-vehicle-to-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-hijack-vehicle)
            :name "city-hijack-vehicle-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-hijack-vehicle-escape)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide 4 lctyhijk display)
              (ctywide-kg alias ctywide copy ctypesc auto dummy auto)
              (ctywide-ff-kg alias ctywide copy dummy auto ctypesc auto ctypesa auto)
              (ctywide-ff alias ctywide copy dummy auto ctypepa special ctypesa auto ctycarb auto)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-hijack-decoy"
                  :node (game-task-node city-hijack-vehicle-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-hijack-decoy"
                  :node (game-task-node city-hijack-vehicle-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id bring-vehicle-to-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-assault)
            :name "city-port-assault-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbooth)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "port-assault-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(when (and (task-closed? "city-hijack-vehicle-introduction") (not (task-closed? "city-hijack-vehicle-resolution")))
               (task-open! "city-hijack-vehicle-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id talk-to-torn-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-assault)
            :name "city-port-assault-force-load-borrows"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-assault-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-force-load-borrows
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-port-assault-force-load-borrows)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide-ff alias ctywide copy ctypesa special ctypesb special ctypesc special lctyass special)
              (ctywide-ff-kg alias ctywide copy ctypesa special ctypesb special ctypesc special lctyass special)
              (ctywide-kg alias ctywide copy ctypesa special ctypesb special ctypesc special lctyass special)
              (ctywide-ff-mh alias ctywide copy ctypesa special ctypesb special ctypesc special lctyass special)
              (ctywide-mh alias ctywide copy ctypesa special ctypesb special ctypesc special lctyass special)
              )
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id progress-missions-city-port-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-port-assault)
            :name "city-port-assault-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-assault-force-load-borrows)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lctypalt
              :type-to-spawn 'task-manager-city-port-assault
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-port-assault-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide-ff
                alias
                ctywide
                copy
                ctypesa
                special
                ctypesb
                special
                ctypesc
                special
                lctyass
                special
                lctypalt
                special
                )
              (ctywide-ff-kg
                alias
                ctywide
                copy
                ctypesa
                special
                ctypesb
                special
                ctypesc
                special
                lctyass
                special
                lctypalt
                special
                )
              (ctywide-kg
                alias
                ctywide
                copy
                ctypesa
                special
                ctypesb
                special
                ctypesc
                special
                lctyass
                special
                lctypalt
                special
                )
              (ctywide-ff-mh
                alias
                ctywide
                copy
                ctypesa
                special
                ctypesb
                special
                ctypesc
                special
                lctyass
                special
                lctypalt
                special
                )
              (ctywide-mh
                alias
                ctywide
                copy
                ctypesa
                special
                ctypesb
                special
                ctypesc
                special
                lctyass
                special
                lctypalt
                special
                )
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "ctyport-hiphog" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "ctyport-hiphog" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id progress-missions-city-port-assault)
            :faction-commands '((faction-strength ff -5)
              (faction-spawn kg-guard off)
              (faction-spawn ff-guard off)
              (faction-spawn mh-guard off)
              (faction-spawn ff-vehicle off)
              (faction-spawn ff-ped off)
              )
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-2)
            :name "city-gun-course-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-gun-course-2-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor gun-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-07)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-assault-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id talk-to-tess)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-2)
            :name "city-gun-course-2-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor gun-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'gungame
              :type-to-spawn 'gungame-task-manager
              :intro-scene #f
              :resolution-scene "city-gun-course-2-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-gun-course-2-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete #f
              :on-fail #f
              )
            :borrow '((gungame 0 gungame2 special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-2-start"
                  :node (game-task-node city-gun-course-2-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-2-start"
                  :node (game-task-node city-gun-course-2-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x33
            :description (text-id progress-missions-city-gun-course-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-2)
            :name "city-gun-course-2-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-2-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((gungame 0 gungame2 special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-2-start"
                  :node (game-task-node city-gun-course-2-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "gungame-2-start"
                  :node (game-task-node city-gun-course-2-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x33
            :command-count #x2
            :description (text-id progress-missions-city-gun-course-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-2)
            :name "city-gun-course-2-bronze"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-2-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x35
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-2)
            :name "city-gun-course-2-silver"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-2-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x35
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-2)
            :name "city-gun-course-2-gold"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor tess-gungame)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-2-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x35
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-blow-barricade)
            :name "city-blow-barricade-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-hipbar)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-blow-barricade-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-hijack-vehicle-resolution)
              (game-task-node city-gun-course-2-resolution)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x35
            :description (text-id talk-to-torn-naughty-ottsel)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-blow-barricade)
            :name "city-blow-barricade-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task set-task-mask exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-barricade-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task3)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'lbombbot
              :type-to-spawn 'task-manager-blow-barricade
              :intro-scene #f
              :resolution-scene "city-blow-barricade-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-blow-barricade-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide 4 lbombbot display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-draw-target)
                :fail (new 'static 'resetter-spec :continue "ctyport-bombbot" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-draw-target)
                :fail (new 'static 'resetter-spec :continue "ctyport-bombbot" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-draw-target)
                :fail (new 'static 'resetter-spec :continue "ctyport-bombbot" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down no-draw-target)
                :fail (new 'static 'resetter-spec :continue "ctyport-bombbot" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #x65
            :command-index #x35
            :command-count #x2
            :description (text-id progress-missions-city-blow-barricade)
            :faction-commands '((faction-strength kg port 5) (faction-strength ff ind 5))
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-protect-hq)
            :name "city-protect-hq-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-protect-hq-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor keira-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor onin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-123)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-barricade-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((freehq 0 ltornsam special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id reach-freedom-hq)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-protect-hq)
            :name "city-protect-hq-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-protect-hq-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lctyprot
              :type-to-spawn 'task-manager-protect-hq
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-protect-hq-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide-ff alias ctywide copy ctypepa special ctypesa special ctypesc special lctyprot display)
              (ctywide-ff-kg alias ctywide copy ctypepa special ctypesa special ctypesc special lctyprot display)
              (ctywide-kg alias ctywide copy ctypepa special ctypesa special ctypesc special lctyprot display)
              (ctywide-ff-mh alias ctywide copy ctypepa special ctypesa special ctypesc special lctyprot display)
              (ctywide-mh alias ctywide copy ctypepa special ctypesa special ctypesc special lctyprot display)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyslumc-freehq-exit"
                  :node (game-task-node city-protect-hq-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "ctyslumc-freehq-exit"
                  :node (game-task-node city-protect-hq-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id progress-missions-city-protect-hq)
            :faction-commands '((faction-spawn kg-guard off)
              (faction-spawn ff-guard war)
              (faction-spawn mh-guard off)
              (faction-spawn ff-vehicle off)
              (faction-spawn ff-ped suppress)
              )
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-hum-kg)
            :name "sewer-hum-kg-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-protect-hq-res"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor keira-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor onin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-123)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-protect-hq-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id talk-to-ashelin)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-hum-kg)
            :name "sewer-hum-kg-switch-off"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "city-protect-hq-res"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor keira-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor onin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-05)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-hum-kg-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(kiosk-complete)
            :reset #f
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id progress-missions-sewer-hum-kg)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'sewer
            :task (game-task sewer-hum-kg)
            :name "sewer-hum-kg-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-hum-kg-switch-off)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id progress-missions-sewer-hum-kg)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor vin-vinroom)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-power-game-intro"
                :distance (meters 27)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor power-game-vinroom)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-02)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-hum-kg-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id find-power-room)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-wait"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor vin-vinroom)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "city-power-game-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor power-game-vinroom)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-02)
                :scene #f
                )
              )
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x37
            :description (text-id progress-missions-city-power-game)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor power-game-vinroom)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-06)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-02)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task save-on-try exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-wait)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'powergd
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene "city-power-game-res"
              :resolution-scene-continue #f
              :final-node (game-task-node city-power-game-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((vinroom 0 powergd display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "vinroom-game"
                  :node (game-task-node city-power-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "vinroom-game"
                  :node (game-task-node city-power-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-grab)
                :fail (new 'static 'resetter-spec :continue "vinroom-game" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "vinroom-game"
                  :node (game-task-node city-power-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-grab)
                :fail (new 'static 'resetter-spec :continue "vinroom-game" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "vinroom-game"
                  :node (game-task-node city-power-game-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x37
            :command-count #x1
            :description (text-id progress-missions-city-power-game)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-post-game"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor power-game-vinroom)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene #f
                )
              )
            :flags (game-task-node-flag no-restart act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((vinroom 0 powergd display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x38
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-bronze"
            :when-open #f
            :flags (game-task-node-flag no-restart act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x38
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-silver"
            :when-open #f
            :flags (game-task-node-flag no-restart act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-bronze)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x38
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-power-game)
            :name "city-power-game-gold"
            :when-open #f
            :flags (game-task-node-flag no-restart act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-silver)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x38
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-2)
            :name "desert-artifact-race-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor sig-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-artifact-race-2-intro"
                :distance (meters 20)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-122)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasdoors 0 lsig special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x38
            :description (text-id talk-to-sig)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-2)
            :name "desert-artifact-race-2-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor sig-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-artifact-race-2-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-122)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasdoors 0 lsig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-city" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-city" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x38
            :description (text-id progress-missions-desert-artifact-race-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-2)
            :name "desert-artifact-race-2-race"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor sig-wasdoors)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "desert-artifact-race-2-intro"
                )
              )
            :flags (game-task-node-flag exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desrace1
              :type-to-spawn 'task-manager-desert-artifact-race
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-artifact-race-2-resolution)
              :vehicle-type #x1b
              :on-complete '(begin (talker-spawn "keir003"))
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desrace1 special) (wasdoors 0 lsig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-start-snake" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x38
            :command-count #x1
            :description (text-id progress-missions-desert-artifact-race-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-artifact-race-2)
            :name "desert-artifact-race-2-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task exclusive intro-wait act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-race)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desrace1 special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x39
            :description (text-id progress-missions-desert-artifact-race-2)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-hunt)
            :name "nest-hunt-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level 'wasdoors
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node nest-hunt-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 3)
              :on-complete '(unless (task-closed? "desert-jump-mission-introduction") (talker-spawn "sig001"))
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x39
            :description (text-id talk-to-sig)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-hunt)
            :name "nest-hunt-sig"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor sig-nest)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "nest-hunt-intro"
                :distance (meters 70)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-09)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-hunt-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-nest-hunt
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node nest-hunt-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy deshunt display) (wasall 0 lwassig #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x39
            :description (text-id progress-missions-nest-hunt)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-hunt)
            :name "nest-hunt-fight"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-hunt-sig)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lnstobb
              :type-to-spawn 'task-manager-mh-centipede
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node nest-hunt-fight)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((nstb 0 lnstobb special) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "nstb-hunt" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nstb-hunt" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nstb-hunt" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "nstb-hunt" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x39
            :description (text-id progress-missions-nest-hunt)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-hunt)
            :name "nest-hunt-get-crystal"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-hunt-fight)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lnstobb
              :type-to-spawn 'task-manager-nstb-crystal
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node nest-hunt-get-crystal)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((nstb 0 lnstobb special) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "nstb-crystal" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nstb-crystal" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "nstb-crystal" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "nstb-crystal" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x39
            :command-count #x1
            :description (text-id progress-missions-nest-hunt)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'nest
            :task (game-task nest-hunt)
            :name "nest-hunt-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-26)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-hunt-get-crystal)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy ldesgcst special) (nstb 0 lnstobb special) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3a
            :description (text-id progress-missions-nest-hunt)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-beast-battle)
            :name "desert-beast-battle-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor kleever-wasdoors)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-beast-battle-intro"
                :distance (meters 20)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-112)
                :scene #f
                )
              )
            :flags (game-task-node-flag clear-task-mask save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node nest-hunt-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task0)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-desert-beast-battle-intro
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-beast-battle-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasdoors 0 lkleever special) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3a
            :description (text-id talk-to-kleiver)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-beast-battle)
            :name "desert-beast-battle-kill-last-beast"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-beast-battle-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-desert-beast-battle
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-beast-battle-kill-last-beast)
              :vehicle-type #x1b
              :index 4
              :on-complete '(want-continue "desert-start-scorpion")
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desbattl display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desert-scorpion-gun" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-scorpion-gun" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-scorpion-gun" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-scorpion-gun" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3a
            :description (text-id progress-missions-desert-beast-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-beast-battle)
            :name "desert-beast-battle-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task set-task-mask save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-beast-battle-kill-last-beast)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-desert-beast-battle-end
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-beast-battle-resolution)
              :vehicle-type #x1b
              :index 4
              :on-complete '(begin (cond
                        ((task-closed? "desert-chase-marauders-resolution")
                         (talker-spawn "sam007")
                         )
                        (else
                          (talker-spawn "peck004")
                          )
                        )
                      )
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desbattl display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desert-start-scorpion" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-start-scorpion" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desert-start-scorpion" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-start-scorpion" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3a
            :command-count #x1
            :description (text-id progress-missions-desert-beast-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-jump-mission)
            :name "desert-jump-mission-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "desert-jump-mission-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-114)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3b
            :description (text-id talk-to-damas)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-jump-mission)
            :name "desert-jump-mission-post-intro"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-waspal)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "desert-jump-mission-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-26)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-jump-mission-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-vehicle-wait
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-jump-mission-protect-doors)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desjump special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3b
            :description (text-id progress-missions-desert-jump-mission)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-jump-mission)
            :name "desert-jump-mission-protect-doors"
            :when-open #f
            :flags (game-task-node-flag exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-jump-mission-post-intro)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desjump
              :type-to-spawn 'desert-jump-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-jump-mission-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "seem003")
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desjump special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert"
                  :node (game-task-node desert-jump-mission-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 4)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "wasdoors-desert"
                  :node (game-task-node desert-jump-mission-post-intro)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 4)
                )
              )
            :suck-death-count #xa5
            :command-index #x3b
            :description (text-id progress-missions-desert-jump-mission)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-jump-mission)
            :name "desert-jump-mission-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-jump-mission-protect-doors)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy desjump special))
            :open? #f
            :on-close '(task-close! "nest-hunt-introduction")
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "desert-start-any" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "desert-start-any" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio)
                :fail (new 'static 'resetter-spec :continue "desert-start-any" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-start-any" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3b
            :command-count #x1
            :description (text-id progress-missions-desert-jump-mission)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-chase-marauders)
            :name "desert-chase-marauders-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-26)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-jump-mission-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasdoors
              :type-to-spawn 'task-manager-highlight-vehicle-wait
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-chase-marauders-get-to-stronghold)
              :vehicle-type #x1b
              :index 8
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy deschase special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wasdoors-desert" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3c
            :description (text-id progress-missions-desert-chase-marauders)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-chase-marauders)
            :name "desert-chase-marauders-get-to-stronghold"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-140)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task3)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'deschase
              :type-to-spawn 'desert-chase-ambush-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-chase-marauders-ambush)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy deschase special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-desert-toad" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "wasdoors-desert-toad" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3c
            :description (text-id progress-missions-desert-chase-marauders)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-chase-marauders)
            :name "desert-chase-marauders-ambush"
            :when-open #f
            :flags (game-task-node-flag clear-task-mask save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-get-to-stronghold)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task3)
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy deschase special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desertf-stronghold-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desertf-stronghold-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "desertf-stronghold-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desertf-stronghold-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3c
            :description (text-id progress-missions-desert-chase-marauders)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-chase-marauders)
            :name "desert-chase-marauders-chase"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-ambush)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'deschase
              :type-to-spawn 'desert-chase-chase-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-chase-marauders-resolution)
              :vehicle-type #x1b
              :on-complete '(begin
                 (cond
                   ((task-closed? "desert-beast-battle-resolution")
                    (talker-spawn "powup023")
                    (talker-spawn "sam007")
                    )
                   (else
                     (talker-spawn "powup023")
                     (talker-spawn "seem002")
                     )
                   )
                 (want-continue "desertf-start")
                 )
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy deschase special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desertf-toad-chase" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                :text-message (text-id mission-fail-marauders-escaped)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desertf-toad-chase" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                :text-message (text-id mission-fail-marauders-escaped)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "desertf-toad-chase" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                :text-message (text-id mission-fail-marauders-escaped)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desertf-toad-chase" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :text-message (text-id mission-fail-marauders-escaped)
                )
              )
            :suck-death-count #xa5
            :command-index #x3c
            :description (text-id progress-missions-desert-chase-marauders)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-chase-marauders)
            :name "desert-chase-marauders-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-chase)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy deschase special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3c
            :command-count #x1
            :description (text-id progress-missions-desert-chase-marauders)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-resolution)
              (game-task-node desert-beast-battle-resolution)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level 'ctywide
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-ring-chase-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 1)
              :on-complete '(talker-spawn "keir004")
              :on-fail #f
              )
            :borrow '((foresta 0 lforring display) (wasall 0 lwassig special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-statues"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lforring
              :type-to-spawn 'task-manager-forest-ring-chase
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-ring-chase-statue-5)
              :vehicle-type #x1b
              :on-complete '(auto-save (quote auto-save))
              :on-fail #f
              )
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-forest-ring-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-statue-1"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-statues)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statue-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statue-1)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-forest-ring-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-statue-2"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-statue-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-2"
                  :node (game-task-node forest-ring-chase-statue-2)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-2"
                  :node (game-task-node forest-ring-chase-statue-2)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-forest-ring-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-statue-3"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-statue-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-3"
                  :node (game-task-node forest-ring-chase-statue-3)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-3"
                  :node (game-task-node forest-ring-chase-statue-3)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-forest-ring-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-statue-4"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-statue-3)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-4"
                  :node (game-task-node forest-ring-chase-statue-4)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-4"
                  :node (game-task-node forest-ring-chase-statue-4)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-forest-ring-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-statue-5"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-statue-4)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-ring-chase"
                  :node (game-task-node forest-ring-chase-statues)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-5"
                  :node (game-task-node forest-ring-chase-statue-5)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-5"
                  :node (game-task-node forest-ring-chase-statue-5)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-forest-ring-chase)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-ring-chase)
            :name "forest-ring-chase-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task abs-task-mask act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-statue-5)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'foresta
              :type-to-spawn 'task-manager-forest-ring-resolution
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-ring-chase-resolution)
              :vehicle-type #x1b
              :on-complete '(begin (talker-spawn "sam006"))
              :on-fail #f
              )
            :borrow '((foresta 0 lforring display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-5"
                  :node (game-task-node forest-ring-chase-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "foresta-statue-5"
                  :node (game-task-node forest-ring-chase-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id check-out-astro-viewer)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-freehq)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "factory-sky-battle-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-123)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-resolution)
              (game-task-node forest-ring-chase-resolution)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id talk-to-torn-hq)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-hanger"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-freehq)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "factory-sky-battle-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-127)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id find-hellcat)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-wave1"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor torn-freehq)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "factory-sky-battle-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-hanger)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'lfactory
              :type-to-spawn 'task-manager-factory-sky-battle
              :intro-scene #f
              :resolution-scene "factory-sky-battle-res"
              :resolution-scene-continue #f
              :final-node (game-task-node factory-sky-battle-resolution)
              :vehicle-type #x1b
              :on-complete '(kiosk-complete)
              :on-fail #f
              )
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "factoryb-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "factoryb-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "factoryb-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "factoryb-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-wave2"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-wave1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-tower1"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-wave2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-tower2"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-wave2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-tower3"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-wave2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-tower4"
            :when-open #f
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-wave2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-sky-battle)
            :name "factory-sky-battle-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-tower1)
              (game-task-node factory-sky-battle-tower2)
              (game-task-node factory-sky-battle-tower3)
              (game-task-node factory-sky-battle-tower4)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 1 lfacrm2 #f))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-sky-battle)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag auto-close abs-task-mask save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-sky-battle-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task0)
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar #f) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task0)
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-1"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task0 task2)
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-2"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-3-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-3"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-3-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-4-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-3)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'factorya
              :type-to-spawn 'task-manager-factory-assault
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node factory-assault-resolution)
              :vehicle-type #x1b
              :on-complete '(want-continue "factoryc-ultimate-fence")
              :on-fail #f
              )
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-indax-4"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-4-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-get-vehicle"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-170)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-indax-4)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "factory-post-indax-4"
                  :node (game-task-node factory-assault-get-vehicle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "factory-post-indax-4"
                  :node (game-task-node factory-assault-get-vehicle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-broke-ultimate-fence"
            :when-open #f
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-get-vehicle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "factoryc-pre-vehicle"
                  :node (game-task-node factory-assault-get-vehicle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "factoryc-pre-vehicle"
                  :node (game-task-node factory-assault-get-vehicle)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-assault)
            :name "factory-assault-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-broke-ultimate-fence)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "factoryc-start"
                  :node (game-task-node factory-assault-indax-1-introduction)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "factoryc-ultimate-fence"
                  :node (game-task-node factory-assault-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "factoryc-ultimate-fence"
                  :node (game-task-node factory-assault-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-assault)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-boss)
            :name "factory-boss-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-talkbox)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "factory-boss-intro"
                )
              )
            :flags (game-task-node-flag save-on-life act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-assault-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((factorya 0 lfaccar special) (factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "factoryd-pre" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "factoryd-pre" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "factoryd-pre" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "factoryd-pre" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x3d
            :description (text-id progress-missions-factory-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'factory
            :task (game-task factory-boss)
            :name "factory-boss-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task exclusive act2)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-boss-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'factoryd
              :type-to-spawn 'task-manager-factory-boss
              :intro-scene #f
              :resolution-scene "factory-boss-res"
              :resolution-scene-continue #f
              :final-node (game-task-node factory-boss-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((factorya 1 lfacrm2 display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3d
            :command-count #x1
            :description (text-id progress-missions-factory-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "temple-defend-intro"
                :distance (meters 25)
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node factory-boss-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'wasall
              :type-to-spawn 'task-manager-temple-tests
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-defend-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x3e
            :command-count #x2
            :description (text-id talk-to-samos)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-talk-box"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "temple-defend-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor onin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level 'ctywide
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-defend-talk-box)
              :vehicle-type #x1b
              :intro-delay (seconds 1)
              :on-complete '(talker-spawn "seem005")
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x40
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-door-1"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor samos-freehq)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "temple-defend-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor onin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-171)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-173)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-talk-box)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-temple-defend
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-defend-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x40
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-door-2"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-171)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-174)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-door-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-break-door" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-break-door" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x40
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-door-3"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-171)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-175)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-door-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-break-alcove" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-break-alcove" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x40
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-door-4"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-171)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-door-3)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templed-break-door" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templed-break-door" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x40
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-oracle"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-171)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-door-4)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task3 task4 task5 task6)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-temple-oracle-powerup
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-defend-oracle)
              :vehicle-type #x1b
              :sphere-count 1
              :sphere-array (new 'static 'inline-array sphere 1 (new 'static 'sphere :x 17237976.0 :y 189931.52 :z 19509658.0 :r 4096.0))
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-before-glide" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-before-glide" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x40
            :command-count #x1
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-training"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor seem-temple)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "temple-defend-res"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-18)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-172)
                :scene #f
                )
              )
            :flags (game-task-node-flag abs-task-mask save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-oracle)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task3 task4 task5 task6)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'templea
              :type-to-spawn 'task-manager-lightjak-training-swoop
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node temple-defend-training)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-before-glide" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-before-glide" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x41
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'temple
            :task (game-task temple-defend)
            :name "temple-defend-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor seem-temple)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "temple-defend-res"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-172)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task abs-task-mask act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-training)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task4 task5 task6 done)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "templex-start"
                  :node (game-task-node temple-defend-door-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "templeb-before-glide" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "templeb-before-glide" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x41
            :command-count #x1
            :description (text-id progress-missions-temple-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-defend)
            :name "wascity-defend-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor seem-temple)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "temple-defend-res"
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node temple-defend-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level 'wasall
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-defend-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 10)
              :on-complete '(talker-spawn "dam004")
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x42
            :description (text-id wascity-defend-return-to-spargus)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-defend)
            :name "wascity-defend-get-to"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-17)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-defend-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasall 0 wasdefen display) (waswide 0 lbiped display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x42
            :description (text-id wascity-defend-return-to-spargus)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-defend)
            :name "wascity-defend-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-defend-get-to)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'wasdefen
              :type-to-spawn 'task-manager-wascity-defend
              :intro-scene #f
              :resolution-scene "wascity-defend-res"
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-defend-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((wasall 0 wasdefen display) (waswide 0 lbiped display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wascityb-defend-reset" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wascityb-defend-reset" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wascityb-defend-reset" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "wascityb-defend-reset" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x42
            :command-count #x2
            :description (text-id progress-missions-wascity-defend)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-turn-on-machine)
            :name "forest-turn-on-machine-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-defend-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask auto-complete)
              :level #f
              :type-to-spawn 'task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-turn-on-machine-introduction)
              :vehicle-type #x1b
              :intro-delay (seconds 5)
              :on-complete '(talker-spawn "sam005")
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x44
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-turn-on-machine)
            :name "forest-turn-on-machine-spawners"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-16)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-turn-on-machine-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'foresta
              :type-to-spawn 'task-manager-forest-machine
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node forest-turn-on-machine-spawners)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((foresta 0 lformach display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id progress-missions-forest-turn-on-machine)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'forest
            :task (game-task forest-turn-on-machine)
            :name "forest-turn-on-machine-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-turn-on-machine-spawners)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'foresta
              :type-to-spawn 'task-manager-forest-machine-resolution
              :intro-scene #f
              :resolution-scene "forest-turn-on-machine-res"
              :resolution-scene-continue #f
              :final-node (game-task-node forest-turn-on-machine-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((foresta 0 lformach display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "foresta-start" :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id progress-missions-forest-turn-on-machine)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-tour)
            :name "precursor-tour-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor samos-talkbox)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "precursor-tour-intro"
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-turn-on-machine-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id progress-missions-precursor-tour)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-tour)
            :name "precursor-tour-generator-trigger"
            :when-open #f
            :flags (game-task-node-flag act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-tour-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lmech
              :type-to-spawn 'task-manager-precur-tour
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node precursor-tour-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id progress-missions-precursor-tour)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-tour)
            :name "precursor-tour-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task abs-task-mask act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-tour-generator-trigger)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task1)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id progress-missions-precursor-tour)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-blow-tower)
            :name "city-blow-tower-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor ashelin-freehq)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-blow-tower-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-123)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-tour-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id talk-to-ashelin)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-blow-tower)
            :name "city-blow-tower-phase-1"
            :when-open #f
            :flags (game-task-node-flag save-on-life exclusive act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-tower-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'lctyblow
              :type-to-spawn 'task-manager-blow-tower
              :intro-scene #f
              :resolution-scene "tower-destroy-intro"
              :resolution-scene-continue #f
              :final-node (game-task-node city-blow-tower-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((ctywide-ff
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-ff-kg
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-kg
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-ff-mh
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-mh
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec
                  :continue "cty-blow-tower-mission"
                  :node (game-task-node city-blow-tower-phase-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "cty-blow-tower-mission"
                  :node (game-task-node city-blow-tower-phase-1)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "cty-blow-tower-mission"
                  :node (game-task-node city-blow-tower-phase-1)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "cty-blow-tower-mission"
                  :node (game-task-node city-blow-tower-phase-1)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x44
            :description (text-id progress-missions-city-blow-tower)
            :faction-commands '((faction-spawn mh-guard off)
              (faction-spawn mh-ped off)
              (faction-spawn ff-guard off)
              (faction-spawn ff-ped off)
              (faction-spawn kg-guard off)
              (faction-spawn kg-ped off)
              )
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-blow-tower)
            :name "city-blow-tower-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life exclusive act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-tower-phase-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((ctywide-ff
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-ff-kg
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-kg
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-ff-mh
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              (ctywide-mh
                alias
                ctywide
                copy
                lblowtmh
                special
                lblowtkg
                special
                lblowcst
                special
                lctyblow
                display
                ctypesa
                auto
                )
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "cty-blow-tower-mission"
                  :node (game-task-node city-blow-tower-phase-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "cty-blow-tower-mission"
                  :node (game-task-node city-blow-tower-phase-1)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-blow-tower"
                  :node (game-task-node city-blow-tower-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-blow-tower"
                  :node (game-task-node city-blow-tower-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x44
            :command-count #x2
            :description (text-id progress-missions-city-blow-tower)
            :faction-commands '((faction-spawn mh-guard off)
              (faction-spawn mh-ped off)
              (faction-spawn ff-guard off)
              (faction-spawn ff-ped off)
              (faction-spawn kg-guard off)
              (faction-spawn kg-ped off)
              )
            )
          (new 'static 'game-task-node-info
            :level 'tower
            :task (game-task tower-destroy)
            :name "tower-destroy-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-tower-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x46
            :description (text-id progress-missions-tower-destroy)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'tower
            :task (game-task tower-destroy)
            :name "tower-destroy-climb"
            :when-open #f
            :flags (game-task-node-flag act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node tower-destroy-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'towera
              :type-to-spawn 'task-manager-tower-destroy
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node tower-destroy-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x46
            :description (text-id progress-missions-tower-destroy)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'tower
            :task (game-task tower-destroy)
            :name "tower-destroy-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node tower-destroy-climb)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((towera 0 ltowerb display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x46
            :command-count #x1
            :description (text-id progress-missions-tower-destroy)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'palace
            :task (game-task palace-ruins-patrol)
            :name "palace-ruins-patrol-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor onin-onintent)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "city-find-catacomb-ent-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-onintent)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor pecker-onintent)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node tower-destroy-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((towerc 0 ltowcity #f) (towerc 1 lfacrm1 display) (stadiuma 0 lppatrol special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x47
            :command-count #x1
            :description (text-id talk-to-samos)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'palace
            :task (game-task palace-ruins-patrol)
            :name "palace-ruins-patrol-stadium"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor onin-onintent)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "city-find-catacomb-ent-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-onintent)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-23)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-patrol-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((stadiuma 0 lppatrol display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x48
            :description (text-id progress-missions-palace-ruins-patrol)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'palace
            :task (game-task palace-ruins-patrol)
            :name "palace-ruins-patrol-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor onin-onintent)
                :action (game-task-action talk)
                :tex (game-task-icon gaticon-03)
                :scene "city-find-catacomb-ent-intro"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor samos-onintent)
                :action (game-task-action idle)
                :tex (game-task-icon gaticon-01)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-23)
                :scene #f
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-176)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-patrol-stadium)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((stadiuma 0 lppatrol display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x48
            :description (text-id progress-missions-palace-ruins-patrol)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'palace
            :task (game-task palace-ruins-attack)
            :name "palace-ruins-attack-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor damus-ruins)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "palace-ruins-attack-intro"
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-patrol-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((stadiuma 0 lpattack special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x48
            :command-count #x1
            :description (text-id progress-missions-palace-ruins-attack)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'palace
            :task (game-task palace-ruins-attack)
            :name "palace-ruins-attack-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-158)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-attack-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'lpattack
              :type-to-spawn 'rubble-attack-manager
              :intro-scene #f
              :resolution-scene '("palace-ruins-attack-res-a" "palace-ruins-attack-res")
              :resolution-scene-continue #f
              :final-node (game-task-node palace-ruins-attack-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((stadiuma 0 lpattack display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue "rubblea-rhino" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "rubblea-rhino" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-palace-ruins-attack)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'comb
            :task (game-task comb-wild-ride)
            :name "comb-wild-ride-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor veger-ruins)
                :action (game-task-action say)
                :tex (game-task-icon gaticon-02)
                :scene "catacombs-wild-ride-intro"
                )
              )
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-attack-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((stadiuma 0 lpattack special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-comb-wild-ride)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'comb
            :task (game-task comb-wild-ride)
            :name "comb-wild-ride-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node comb-wild-ride-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'raila
              :type-to-spawn 'task-manager-comb-wild-ride
              :intro-scene #f
              :resolution-scene "catacombs-wild-ride-res"
              :resolution-scene-continue #f
              :final-node (game-task-node comb-wild-ride-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((stadiuma 0 lpattack special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-comb-wild-ride)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-destroy-ship)
            :name "precursor-destroy-ship-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node comb-wild-ride-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((precura 0 lprenme copy))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-precursor-destroy-ship)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-destroy-ship)
            :name "precursor-destroy-ship-escape"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-destroy-ship-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask time-limit)
              :level 'precura
              :type-to-spawn 'task-manager-precura
              :time-limit #x15f90
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node precursor-destroy-ship-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((railx 0 lcitysml #f) (precura 0 lprenme copy))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precura-start" :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precura-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precura-start" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-precursor-destroy-ship)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-destroy-ship)
            :name "precursor-destroy-ship-escape-continue"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-destroy-ship-escape)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((railx 0 lcitysml #f) (precura 0 lprenme copy))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "precura-start"
                  :node (game-task-node precursor-destroy-ship-escape)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "precura-start"
                  :node (game-task-node precursor-destroy-ship-escape)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precurc-checkpoint" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precurc-checkpoint" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-precursor-destroy-ship)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'precursor
            :task (game-task precursor-destroy-ship)
            :name "precursor-destroy-ship-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task abs-task-mask act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-destroy-ship-escape-continue)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask done)
            :on-open #f
            :manager #f
            :borrow '((railx 0 lcitysml #f) (precura 0 lprenme copy))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "precura-start"
                  :node (game-task-node precursor-destroy-ship-escape)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "precura-start"
                  :node (game-task-node precursor-destroy-ship-escape)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precurd-escape" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "precurd-escape" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x49
            :description (text-id progress-missions-precursor-destroy-ship)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-final-boss)
            :name "desert-final-boss-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-destroy-ship-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((wasdoors 0 ldampeck special) (desert-game alias desert copy desboss1 special))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x49
            :command-count #x1
            :description (text-id progress-missions-desert-final-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-final-boss)
            :name "desert-final-boss-walker"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-final-boss-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'desboss1
              :type-to-spawn 'task-manager-terraformer
              :intro-scene #f
              :resolution-scene '("desert-jak-gets-on-t-a" "desert-jak-gets-on-t-b" "desert-jak-gets-on-t-c")
              :resolution-scene-continue #f
              :final-node (game-task-node desert-final-boss-walker)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desboss1 special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec :continue "desertb-final-boss-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue "desertb-final-boss-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desertb-final-boss-start"
                  :node (game-task-node desert-final-boss-walker)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue "desertb-final-boss-start" :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "desertb-final-boss-start"
                  :node (game-task-node desert-final-boss-walker)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue "desertb-final-boss-start" :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x4a
            :command-count #x1
            :description (text-id progress-missions-desert-final-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-final-boss)
            :name "desert-final-boss-climb"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-final-boss-walker)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :mask (task-manager-mask resolution-scene)
              :level 'deswalk
              :type-to-spawn 'task-manager-deswalk
              :intro-scene #f
              :resolution-scene '("desert-final-boss-res" "desert-final-boss-res-b" "arena-outro")
              :resolution-scene-continue "desert-final-boss-res-movie-a"
              :final-node (game-task-node desert-final-boss-resolution)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy deswalk display desboss2 copy))
            :open? (lambda ()
              (dotimes (gp-0 (-> *level* length))
                (let ((v1-3 (-> *level* level gp-0)))
                  (if (and (!= (-> v1-3 status) 'inactive)
                           (= (-> v1-3 info memory-mode) (level-memory-mode tiny-edge))
                           (not (member (-> v1-3 name) '(desertb deswalk desboss2)))
                           )
                      (return #f)
                      )
                  )
                )
              #t
              )
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk"
                  :node (game-task-node desert-final-boss-climb)
                  :reset-mode 'try
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk"
                  :node (game-task-node desert-final-boss-climb)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk"
                  :node (game-task-node desert-final-boss-climb)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk"
                  :node (game-task-node desert-final-boss-climb)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :description (text-id progress-missions-desert-final-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-final-boss)
            :name "desert-final-boss-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-final-boss-climb)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((desert-game alias desert copy deswalk display desboss2 copy))
            :open? (lambda ()
              (dotimes (gp-0 (-> *level* length))
                (let ((v1-3 (-> *level* level gp-0)))
                  (if (and (!= (-> v1-3 status) 'inactive)
                           (= (-> v1-3 info memory-mode) (level-memory-mode tiny-edge))
                           (not (member (-> v1-3 name) '(desertb deswalk desboss2)))
                           )
                      (return #f)
                      )
                  )
                )
              #t
              )
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk-top"
                  :node (game-task-node desert-final-boss-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk-top"
                  :node (game-task-node desert-final-boss-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk-top"
                  :node (game-task-node desert-final-boss-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec
                  :continue "desert-deswalk-top"
                  :node (game-task-node desert-final-boss-resolution)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :description (text-id progress-missions-desert-final-boss)
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-win)
            :name "city-win-introduction"
            :when-open #f
            :flags (game-task-node-flag save-on-life act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-final-boss-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-win)
            :name "city-win-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task save-on-life no-percent act3)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-win-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '((stadiuma 0 lppatrol display))
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-1)
            :name "desert-bbush-get-to-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-33)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-1)
            :name "desert-bbush-get-to-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-1-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd"
                  :node (game-task-node desert-bbush-get-to-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd"
                  :node (game-task-node desert-bbush-get-to-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd"
                  :node (game-task-node desert-bbush-get-to-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd"
                  :node (game-task-node desert-bbush-get-to-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-2)
            :name "desert-bbush-get-to-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb03i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-34)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-2)
            :name "desert-bbush-get-to-2-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-2-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete '(talker-spawn "o-bb03w")
              :on-fail '(talker-spawn "o-bb03f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc"
                  :node (game-task-node desert-bbush-get-to-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc"
                  :node (game-task-node desert-bbush-get-to-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc"
                  :node (game-task-node desert-bbush-get-to-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc"
                  :node (game-task-node desert-bbush-get-to-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-3)
            :name "desert-bbush-get-to-3-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desa)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-35)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-3)
            :name "desert-bbush-get-to-3-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desa)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-3-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-3-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa"
                  :node (game-task-node desert-bbush-get-to-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa"
                  :node (game-task-node desert-bbush-get-to-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa"
                  :node (game-task-node desert-bbush-get-to-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa"
                  :node (game-task-node desert-bbush-get-to-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-4)
            :name "desert-bbush-get-to-4-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desg)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-36)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-4)
            :name "desert-bbush-get-to-4-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desg)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-4-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-4-resolution)
              :vehicle-type #x1b
              :index 3
              :on-complete '(talker-spawn "o-bb06w")
              :on-fail '(talker-spawn "o-bb06f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg"
                  :node (game-task-node desert-bbush-get-to-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg"
                  :node (game-task-node desert-bbush-get-to-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg"
                  :node (game-task-node desert-bbush-get-to-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg"
                  :node (game-task-node desert-bbush-get-to-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-5)
            :name "desert-bbush-get-to-5-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desh)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb03i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-37)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-5)
            :name "desert-bbush-get-to-5-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desh)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-5-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-5-resolution)
              :vehicle-type #x1b
              :index 4
              :on-complete '(talker-spawn "o-bb03w")
              :on-fail '(talker-spawn "o-bb03f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desh"
                  :node (game-task-node desert-bbush-get-to-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desh"
                  :node (game-task-node desert-bbush-get-to-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desh"
                  :node (game-task-node desert-bbush-get-to-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desh"
                  :node (game-task-node desert-bbush-get-to-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-6)
            :name "desert-bbush-get-to-6-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-38)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-6)
            :name "desert-bbush-get-to-6-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-6-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-6-resolution)
              :vehicle-type #x1b
              :index 5
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-2"
                  :node (game-task-node desert-bbush-get-to-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-2"
                  :node (game-task-node desert-bbush-get-to-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-2"
                  :node (game-task-node desert-bbush-get-to-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-2"
                  :node (game-task-node desert-bbush-get-to-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-7)
            :name "desert-bbush-get-to-7-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-39)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-7)
            :name "desert-bbush-get-to-7-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-7-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-7-resolution)
              :vehicle-type #x1b
              :index 6
              :on-complete '(talker-spawn "o-bb04w")
              :on-fail '(talker-spawn "o-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese"
                  :node (game-task-node desert-bbush-get-to-7-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese"
                  :node (game-task-node desert-bbush-get-to-7-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese"
                  :node (game-task-node desert-bbush-get-to-7-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese"
                  :node (game-task-node desert-bbush-get-to-7-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-8)
            :name "desert-bbush-get-to-8-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb05i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-40)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-8)
            :name "desert-bbush-get-to-8-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-8-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-8-resolution)
              :vehicle-type #x1b
              :index 7
              :on-complete '(talker-spawn "o-bb05w")
              :on-fail '(talker-spawn "o-bb05f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb"
                  :node (game-task-node desert-bbush-get-to-8-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb"
                  :node (game-task-node desert-bbush-get-to-8-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb"
                  :node (game-task-node desert-bbush-get-to-8-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb"
                  :node (game-task-node desert-bbush-get-to-8-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-9)
            :name "desert-bbush-get-to-9-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desa-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-41)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-9)
            :name "desert-bbush-get-to-9-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desa-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-9-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-9-resolution)
              :vehicle-type #x1b
              :index 8
              :on-complete '(talker-spawn "o-bb06w")
              :on-fail '(talker-spawn "o-bb06f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-2"
                  :node (game-task-node desert-bbush-get-to-9-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-2"
                  :node (game-task-node desert-bbush-get-to-9-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-2"
                  :node (game-task-node desert-bbush-get-to-9-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-2"
                  :node (game-task-node desert-bbush-get-to-9-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-11)
            :name "desert-bbush-get-to-11-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desg-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-43)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-11)
            :name "desert-bbush-get-to-11-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desg-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-11-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-11-resolution)
              :vehicle-type #x1b
              :index 10
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-2"
                  :node (game-task-node desert-bbush-get-to-11-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-2"
                  :node (game-task-node desert-bbush-get-to-11-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-2"
                  :node (game-task-node desert-bbush-get-to-11-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-2"
                  :node (game-task-node desert-bbush-get-to-11-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-12)
            :name "desert-bbush-get-to-12-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-44)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node arena-fight-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-12)
            :name "desert-bbush-get-to-12-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-12-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-12-resolution)
              :vehicle-type #x1b
              :index 11
              :on-complete '(talker-spawn "o-bb04w")
              :on-fail '(talker-spawn "o-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-2"
                  :node (game-task-node desert-bbush-get-to-12-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-2"
                  :node (game-task-node desert-bbush-get-to-12-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-2"
                  :node (game-task-node desert-bbush-get-to-12-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-2"
                  :node (game-task-node desert-bbush-get-to-12-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-14)
            :name "desert-bbush-get-to-14-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-46)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-chase-marauders-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-14)
            :name "desert-bbush-get-to-14-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-14-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-14-resolution)
              :vehicle-type #x1b
              :index 13
              :on-complete '(talker-spawn "o-bb04w")
              :on-fail '(talker-spawn "o-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-2"
                  :node (game-task-node desert-bbush-get-to-14-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-2"
                  :node (game-task-node desert-bbush-get-to-14-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-2"
                  :node (game-task-node desert-bbush-get-to-14-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-2"
                  :node (game-task-node desert-bbush-get-to-14-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-16)
            :name "desert-bbush-get-to-16-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb02i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-48)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-16)
            :name "desert-bbush-get-to-16-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-16-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-16-resolution)
              :vehicle-type #x1b
              :index 15
              :on-complete '(talker-spawn "o-bb02w")
              :on-fail '(talker-spawn "o-bb02f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-3"
                  :node (game-task-node desert-bbush-get-to-16-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-3"
                  :node (game-task-node desert-bbush-get-to-16-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-3"
                  :node (game-task-node desert-bbush-get-to-16-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-3"
                  :node (game-task-node desert-bbush-get-to-16-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-17)
            :name "desert-bbush-get-to-17-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-49)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-beast-battle-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-get-to-17)
            :name "desert-bbush-get-to-17-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-get-to-17-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desert
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-get-to-17-resolution)
              :vehicle-type #x1b
              :index 16
              :on-complete '(talker-spawn "o-bb04w")
              :on-fail '(talker-spawn "o-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-2"
                  :node (game-task-node desert-bbush-get-to-17-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-2"
                  :node (game-task-node desert-bbush-get-to-17-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-2"
                  :node (game-task-node desert-bbush-get-to-17-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-2"
                  :node (game-task-node desert-bbush-get-to-17-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-18)
            :name "wascity-bbush-get-to-18-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb02i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-50)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-18)
            :name "wascity-bbush-get-to-18-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-18-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-18-resolution)
              :vehicle-type #x1b
              :index 17
              :on-complete '(talker-spawn "o-bb02w")
              :on-fail '(talker-spawn "o-bb02f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-1"
                  :node (game-task-node wascity-bbush-get-to-18-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-1"
                  :node (game-task-node wascity-bbush-get-to-18-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-1"
                  :node (game-task-node wascity-bbush-get-to-18-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-1"
                  :node (game-task-node wascity-bbush-get-to-18-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task desert-bbush-get-to-19)
            :name "wascity-bbush-get-to-19-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-51)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task desert-bbush-get-to-19)
            :name "wascity-bbush-get-to-19-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-19-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-19-resolution)
              :vehicle-type #x1b
              :index 18
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-2"
                  :node (game-task-node wascity-bbush-get-to-19-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-2"
                  :node (game-task-node wascity-bbush-get-to-19-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-2"
                  :node (game-task-node wascity-bbush-get-to-19-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-2"
                  :node (game-task-node wascity-bbush-get-to-19-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-20)
            :name "wascity-bbush-get-to-20-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb02i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-52)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-catch-lizards-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-20)
            :name "wascity-bbush-get-to-20-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-20-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-20-resolution)
              :vehicle-type #x1b
              :index 19
              :on-complete '(talker-spawn "o-bb02w")
              :on-fail '(talker-spawn "o-bb02f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-3"
                  :node (game-task-node wascity-bbush-get-to-20-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-3"
                  :node (game-task-node wascity-bbush-get-to-20-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-3"
                  :node (game-task-node wascity-bbush-get-to-20-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-3"
                  :node (game-task-node wascity-bbush-get-to-20-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-21)
            :name "wascity-bbush-get-to-21-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-53)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-21)
            :name "wascity-bbush-get-to-21-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-21-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-21-resolution)
              :vehicle-type #x1b
              :index 20
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-4"
                  :node (game-task-node wascity-bbush-get-to-21-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-4"
                  :node (game-task-node wascity-bbush-get-to-21-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-4"
                  :node (game-task-node wascity-bbush-get-to-21-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-4"
                  :node (game-task-node wascity-bbush-get-to-21-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-22)
            :name "wascity-bbush-get-to-22-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb02i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-55)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-22)
            :name "wascity-bbush-get-to-22-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-22-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-22-resolution)
              :vehicle-type #x1b
              :index 21
              :on-complete '(talker-spawn "o-bb02w")
              :on-fail '(talker-spawn "o-bb02f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-1"
                  :node (game-task-node wascity-bbush-get-to-22-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-1"
                  :node (game-task-node wascity-bbush-get-to-22-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-1"
                  :node (game-task-node wascity-bbush-get-to-22-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-1"
                  :node (game-task-node wascity-bbush-get-to-22-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-23)
            :name "wascity-bbush-get-to-23-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-54)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-pre-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-23)
            :name "wascity-bbush-get-to-23-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-23-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-23-resolution)
              :vehicle-type #x1b
              :index 22
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-2"
                  :node (game-task-node wascity-bbush-get-to-23-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-2"
                  :node (game-task-node wascity-bbush-get-to-23-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-2"
                  :node (game-task-node wascity-bbush-get-to-23-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-2"
                  :node (game-task-node wascity-bbush-get-to-23-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-24)
            :name "wascity-bbush-get-to-24-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-57)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-24)
            :name "wascity-bbush-get-to-24-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-24-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-24-resolution)
              :vehicle-type #x1b
              :index 23
              :on-complete '(talker-spawn "o-bb06w")
              :on-fail '(talker-spawn "o-bb06f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-3"
                  :node (game-task-node wascity-bbush-get-to-24-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-3"
                  :node (game-task-node wascity-bbush-get-to-24-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-3"
                  :node (game-task-node wascity-bbush-get-to-24-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-3"
                  :node (game-task-node wascity-bbush-get-to-24-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-25)
            :name "wascity-bbush-get-to-25-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "o-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-56)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-get-to-25)
            :name "wascity-bbush-get-to-25-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-get-to-25-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'waswide
              :type-to-spawn 'task-manager-desert-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-get-to-25-resolution)
              :vehicle-type #x1b
              :index 24
              :on-complete '(talker-spawn "o-bb01w")
              :on-fail '(talker-spawn "o-bb01f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-4"
                  :node (game-task-node wascity-bbush-get-to-25-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-4"
                  :node (game-task-node wascity-bbush-get-to-25-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-4"
                  :node (game-task-node wascity-bbush-get-to-25-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-4"
                  :node (game-task-node wascity-bbush-get-to-25-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-26)
            :name "city-bbush-get-to-26-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb05i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-66)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-boss-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-26)
            :name "city-bbush-get-to-26-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-26-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-26-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "t-bb05w")
              :on-fail '(talker-spawn "t-bb05f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-1"
                  :node (game-task-node city-bbush-get-to-26-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-1"
                  :node (game-task-node city-bbush-get-to-26-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-1"
                  :node (game-task-node city-bbush-get-to-26-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-1"
                  :node (game-task-node city-bbush-get-to-26-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-27)
            :name "city-bbush-get-to-27-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumb-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb03i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-67)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-barricade-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-27)
            :name "city-bbush-get-to-27-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumb-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-27-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-27-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete '(talker-spawn "t-bb03w")
              :on-fail '(talker-spawn "t-bb03f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-1"
                  :node (game-task-node city-bbush-get-to-27-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-1"
                  :node (game-task-node city-bbush-get-to-27-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-1"
                  :node (game-task-node city-bbush-get-to-27-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-1"
                  :node (game-task-node city-bbush-get-to-27-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-28)
            :name "city-bbush-get-to-28-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb10i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-79)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-patrol-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-28)
            :name "city-bbush-get-to-28-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-28-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-28-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete '(talker-spawn "t-bb04w")
              :on-fail '(talker-spawn "t-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-2"
                  :node (game-task-node city-bbush-get-to-28-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-2"
                  :node (game-task-node city-bbush-get-to-28-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-2"
                  :node (game-task-node city-bbush-get-to-28-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-2"
                  :node (game-task-node city-bbush-get-to-28-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-29)
            :name "city-bbush-get-to-29-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-80)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node palace-ruins-patrol-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-29)
            :name "city-bbush-get-to-29-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-29-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-29-resolution)
              :vehicle-type #x1b
              :index 3
              :on-complete '(talker-spawn "t-bb04w")
              :on-fail '(talker-spawn "t-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-3"
                  :node (game-task-node city-bbush-get-to-29-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-3"
                  :node (game-task-node city-bbush-get-to-29-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-3"
                  :node (game-task-node city-bbush-get-to-29-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-3"
                  :node (game-task-node city-bbush-get-to-29-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-30)
            :name "city-bbush-get-to-30-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-81)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node mine-boss-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-30)
            :name "city-bbush-get-to-30-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-genb-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-30-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-30-resolution)
              :vehicle-type #x1b
              :index 4
              :on-complete '(talker-spawn "t-bb06w")
              :on-fail '(talker-spawn "t-bb06f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-4"
                  :node (game-task-node city-bbush-get-to-30-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-4"
                  :node (game-task-node city-bbush-get-to-30-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-4"
                  :node (game-task-node city-bbush-get-to-30-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctygenb-bbush-4"
                  :node (game-task-node city-bbush-get-to-30-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-31)
            :name "city-bbush-get-to-31-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumb-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb07i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-82)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-protect-hq-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-31)
            :name "city-bbush-get-to-31-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumb-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-31-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-31-resolution)
              :vehicle-type #x1b
              :index 5
              :on-complete '(talker-spawn "t-bb07w")
              :on-fail '(talker-spawn "t-bb07f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-4"
                  :node (game-task-node city-bbush-get-to-31-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-4"
                  :node (game-task-node city-bbush-get-to-31-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-4"
                  :node (game-task-node city-bbush-get-to-31-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-4"
                  :node (game-task-node city-bbush-get-to-31-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-32)
            :name "city-bbush-get-to-32-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumc-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-83)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-power-game-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-32)
            :name "city-bbush-get-to-32-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumc-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-32-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-32-resolution)
              :vehicle-type #x1b
              :index 6
              :on-complete '(talker-spawn "t-bb04w")
              :on-fail '(talker-spawn "t-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-1"
                  :node (game-task-node city-bbush-get-to-32-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-1"
                  :node (game-task-node city-bbush-get-to-32-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-1"
                  :node (game-task-node city-bbush-get-to-32-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-1"
                  :node (game-task-node city-bbush-get-to-32-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-33)
            :name "city-bbush-get-to-33-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumc-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb05i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-86)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node precursor-tour-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-33)
            :name "city-bbush-get-to-33-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumc-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-33-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-33-resolution)
              :vehicle-type #x1b
              :index 7
              :on-complete '(talker-spawn "t-bb05w")
              :on-fail '(talker-spawn "t-bb05f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-2"
                  :node (game-task-node city-bbush-get-to-33-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-2"
                  :node (game-task-node city-bbush-get-to-33-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-2"
                  :node (game-task-node city-bbush-get-to-33-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumc-bbush-2"
                  :node (game-task-node city-bbush-get-to-33-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-34)
            :name "city-bbush-get-to-34-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-sluma-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb03i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-87)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-barricade-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-34)
            :name "city-bbush-get-to-34-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-sluma-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-34-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-34-resolution)
              :vehicle-type #x1b
              :index 8
              :on-complete '(talker-spawn "t-bb03w")
              :on-fail '(talker-spawn "t-bb03f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-2"
                  :node (game-task-node city-bbush-get-to-34-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-2"
                  :node (game-task-node city-bbush-get-to-34-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-2"
                  :node (game-task-node city-bbush-get-to-34-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-2"
                  :node (game-task-node city-bbush-get-to-34-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-35)
            :name "city-bbush-get-to-35-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-sluma-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb05i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-88)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node forest-ring-chase-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-35)
            :name "city-bbush-get-to-35-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-sluma-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-35-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-35-resolution)
              :vehicle-type #x1b
              :index 9
              :on-complete '(talker-spawn "t-bb05w")
              :on-fail '(talker-spawn "t-bb05f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-3"
                  :node (game-task-node city-bbush-get-to-35-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-3"
                  :node (game-task-node city-bbush-get-to-35-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-3"
                  :node (game-task-node city-bbush-get-to-35-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-3"
                  :node (game-task-node city-bbush-get-to-35-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-36)
            :name "city-bbush-get-to-36-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-indb-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb05i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-89)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-36)
            :name "city-bbush-get-to-36-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-indb-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-36-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-36-resolution)
              :vehicle-type #x1b
              :index 10
              :on-complete '(talker-spawn "t-bb05w")
              :on-fail '(talker-spawn "t-bb05f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-2"
                  :node (game-task-node city-bbush-get-to-36-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-2"
                  :node (game-task-node city-bbush-get-to-36-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-2"
                  :node (game-task-node city-bbush-get-to-36-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-2"
                  :node (game-task-node city-bbush-get-to-36-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-37)
            :name "city-bbush-get-to-37-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-indb-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb10i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-90)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-hijack-vehicle-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-37)
            :name "city-bbush-get-to-37-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-indb-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-37-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-37-resolution)
              :vehicle-type #x1b
              :index 11
              :on-complete '(talker-spawn "t-bb10w")
              :on-fail '(talker-spawn "t-bb10f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-3"
                  :node (game-task-node city-bbush-get-to-37-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-3"
                  :node (game-task-node city-bbush-get-to-37-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-3"
                  :node (game-task-node city-bbush-get-to-37-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyindb-bbush-3"
                  :node (game-task-node city-bbush-get-to-37-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-38)
            :name "city-bbush-get-to-38-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-2)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb03i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-91)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-38)
            :name "city-bbush-get-to-38-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-2)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-38-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-38-resolution)
              :vehicle-type #x1b
              :index 12
              :on-complete '(talker-spawn "t-bb03w")
              :on-fail '(talker-spawn "t-bb03f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-2"
                  :node (game-task-node city-bbush-get-to-38-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-2"
                  :node (game-task-node city-bbush-get-to-38-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-2"
                  :node (game-task-node city-bbush-get-to-38-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-2"
                  :node (game-task-node city-bbush-get-to-38-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-39)
            :name "city-bbush-get-to-39-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-92)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-39)
            :name "city-bbush-get-to-39-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-39-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-39-resolution)
              :vehicle-type #x1b
              :index 13
              :on-complete '(talker-spawn "t-bb04w")
              :on-fail '(talker-spawn "t-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-3"
                  :node (game-task-node city-bbush-get-to-39-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-3"
                  :node (game-task-node city-bbush-get-to-39-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-3"
                  :node (game-task-node city-bbush-get-to-39-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-3"
                  :node (game-task-node city-bbush-get-to-39-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-40)
            :name "city-bbush-get-to-40-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-93)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-kg-met-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-40)
            :name "city-bbush-get-to-40-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-40-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-40-resolution)
              :vehicle-type #x1b
              :index 14
              :on-complete '(talker-spawn "t-bb06w")
              :on-fail '(talker-spawn "t-bb06f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-4"
                  :node (game-task-node city-bbush-get-to-40-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-4"
                  :node (game-task-node city-bbush-get-to-40-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-4"
                  :node (game-task-node city-bbush-get-to-40-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-4"
                  :node (game-task-node city-bbush-get-to-40-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-41)
            :name "city-bbush-get-to-41-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb10i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-96)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node sewer-met-hum-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-41)
            :name "city-bbush-get-to-41-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-41-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-41-resolution)
              :vehicle-type #x1b
              :index 15
              :on-complete '(talker-spawn "t-bb10w")
              :on-fail '(talker-spawn "t-bb10f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-5"
                  :node (game-task-node city-bbush-get-to-41-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-5"
                  :node (game-task-node city-bbush-get-to-41-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-5"
                  :node (game-task-node city-bbush-get-to-41-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-5"
                  :node (game-task-node city-bbush-get-to-41-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-42)
            :name "city-bbush-get-to-42-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-6)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-97)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-fight-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-42)
            :name "city-bbush-get-to-42-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-6)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-42-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-42-resolution)
              :vehicle-type #x1b
              :index 16
              :on-complete '(talker-spawn "t-bb04w")
              :on-fail '(talker-spawn "t-bb04f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-6"
                  :node (game-task-node city-bbush-get-to-42-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-6"
                  :node (game-task-node city-bbush-get-to-42-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-6"
                  :node (game-task-node city-bbush-get-to-42-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-6"
                  :node (game-task-node city-bbush-get-to-42-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-43)
            :name "city-bbush-get-to-43-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-7)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-98)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-destroy-grid-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-43)
            :name "city-bbush-get-to-43-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-7)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-43-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-43-resolution)
              :vehicle-type #x1b
              :index 17
              :on-complete '(talker-spawn "t-bb06w")
              :on-fail '(talker-spawn "t-bb06f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-7"
                  :node (game-task-node city-bbush-get-to-43-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-7"
                  :node (game-task-node city-bbush-get-to-43-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-7"
                  :node (game-task-node city-bbush-get-to-43-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-7"
                  :node (game-task-node city-bbush-get-to-43-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-44)
            :name "city-bbush-get-to-44-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-8)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-04)
                :scene "t-bb03i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-99)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-get-to-44)
            :name "city-bbush-get-to-44-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-8)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-get-to-44-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-ctywide-bbush-get-to
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-get-to-44-resolution)
              :vehicle-type #x1b
              :index 18
              :on-complete '(talker-spawn "t-bb03w")
              :on-fail '(talker-spawn "t-bb03f")
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-8"
                  :node (game-task-node city-bbush-get-to-44-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-8"
                  :node (game-task-node city-bbush-get-to-44-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-8"
                  :node (game-task-node city-bbush-get-to-44-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-8"
                  :node (game-task-node city-bbush-get-to-44-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-ring-1)
            :name "desert-bbush-ring-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desg-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb11i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-58)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-beast-battle-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-ring-1)
            :name "desert-bbush-ring-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desg-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-ring-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbring1
              :type-to-spawn 'task-manager-desert-bbush-ring
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-ring-1-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb11w")
              :on-fail '(talker-spawn "o-bb11f")
              :user-count 10
              )
            :borrow '((wasall 0 lbbring1 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-4"
                  :node (game-task-node desert-bbush-ring-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-4"
                  :node (game-task-node desert-bbush-ring-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-4"
                  :node (game-task-node desert-bbush-ring-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desg-4"
                  :node (game-task-node desert-bbush-ring-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-ring-2)
            :name "desert-bbush-ring-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb10i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-71)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-ring-2)
            :name "desert-bbush-ring-2-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-ring-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbring2
              :type-to-spawn 'task-manager-desert-bbush-ring-2
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-ring-2-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete '(talker-spawn "o-bb10w")
              :on-fail '(talker-spawn "o-bb10f")
              :user-count 10
              )
            :borrow '((desert-game alias desert copy lbbring2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-1"
                  :node (game-task-node desert-bbush-ring-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-1"
                  :node (game-task-node desert-bbush-ring-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-1"
                  :node (game-task-node desert-bbush-ring-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-1"
                  :node (game-task-node desert-bbush-ring-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-ring-3)
            :name "wascity-bbush-ring-3-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb11i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-59)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-gungame-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-ring-3)
            :name "wascity-bbush-ring-3-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-ring-3-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbring3
              :type-to-spawn 'task-manager-desert-bbush-ring-3
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-ring-3-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete '(talker-spawn "o-bb11w")
              :on-fail '(talker-spawn "o-bb11f")
              :user-count 10
              )
            :borrow '((waswide 0 lbbring3 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-5"
                  :node (game-task-node wascity-bbush-ring-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-5"
                  :node (game-task-node wascity-bbush-ring-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-5"
                  :node (game-task-node wascity-bbush-ring-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-5"
                  :node (game-task-node wascity-bbush-ring-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-ring-4)
            :name "wascity-bbush-ring-4-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb10i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-62)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-chase-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-ring-4)
            :name "wascity-bbush-ring-4-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-ring-4-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbring4
              :type-to-spawn 'task-manager-desert-bbush-ring-4
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-ring-4-resolution)
              :vehicle-type #x1b
              :index 3
              :on-complete '(talker-spawn "o-bb10w")
              :on-fail '(talker-spawn "o-bb10f")
              :user-count 10
              )
            :borrow '((waswide 0 lbbring4 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-5"
                  :node (game-task-node wascity-bbush-ring-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-5"
                  :node (game-task-node wascity-bbush-ring-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-5"
                  :node (game-task-node wascity-bbush-ring-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-5"
                  :node (game-task-node wascity-bbush-ring-4-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-ring-5)
            :name "city-bbush-ring-5-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumb-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "t-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-68)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-barricade-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-ring-5)
            :name "city-bbush-ring-5-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-slumb-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-ring-5-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbring5
              :type-to-spawn 'task-manager-desert-bbush-ring-5
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-ring-5-resolution)
              :vehicle-type #x1b
              :index 4
              :on-complete '(talker-spawn "t-bb01w")
              :on-fail '(talker-spawn "t-bb01f")
              :user-count 10
              )
            :borrow '((ctywide 4 lbbring5 display)
              (ctywide-ff alias ctywide copy ctypesa special ctycara special ctycarb special ctypepa special)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-3"
                  :node (game-task-node city-bbush-ring-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-3"
                  :node (game-task-node city-bbush-ring-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-3"
                  :node (game-task-node city-bbush-ring-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyslumb-bbush-3"
                  :node (game-task-node city-bbush-ring-5-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '((faction-spawn ff-vehicle off))
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-ring-6)
            :name "city-bbush-ring-6-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "bb03int"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-70)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-hijack-vehicle-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-ring-6)
            :name "city-bbush-ring-6-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-ring-6-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbring6
              :type-to-spawn 'task-manager-desert-bbush-ring-6
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-ring-6-resolution)
              :vehicle-type #x1b
              :index 5
              :on-complete '(talker-spawn "bb13win")
              :on-fail '(talker-spawn "bb03fail")
              :user-count 10
              )
            :borrow '((ctywide 4 lbbring6 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-1"
                  :node (game-task-node city-bbush-ring-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-1"
                  :node (game-task-node city-bbush-ring-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-1"
                  :node (game-task-node city-bbush-ring-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-1"
                  :node (game-task-node city-bbush-ring-6-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '((faction-spawn kg-guard off) (faction-strength kg -5))
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-egg-spider-1)
            :name "desert-bbush-egg-spider-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-12)
                :scene "o-bb15i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-84)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-egg-spider-1)
            :name "desert-bbush-egg-spider-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-dese-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-egg-spider-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbspid
              :type-to-spawn 'task-manager-bbush-egg-spider
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-egg-spider-1-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb15w")
              :on-fail '(talker-spawn "o-bb15f")
              :user-count 18
              )
            :borrow '((desert-game alias desert copy lbbspid display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-5"
                  :node (game-task-node desert-bbush-egg-spider-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-5"
                  :node (game-task-node desert-bbush-egg-spider-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-5"
                  :node (game-task-node desert-bbush-egg-spider-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-dese-5"
                  :node (game-task-node desert-bbush-egg-spider-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-spirit-chase-1)
            :name "desert-bbush-spirit-chase-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desa-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb19i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-61)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-spirit-chase-1)
            :name "desert-bbush-spirit-chase-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desa-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-spirit-chase-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbspirt
              :type-to-spawn 'task-manager-bbush-spirit-chase
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-spirit-chase-1-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb19w")
              :on-fail '(talker-spawn "o-bb19f")
              :user-count 10
              )
            :borrow '((desert-game alias desert copy lbbspirt display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-3"
                  :node (game-task-node desert-bbush-spirit-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-3"
                  :node (game-task-node desert-bbush-spirit-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-3"
                  :node (game-task-node desert-bbush-spirit-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desa-3"
                  :node (game-task-node desert-bbush-spirit-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-spirit-chase-2)
            :name "wascity-bbush-spirit-chase-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-6)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb19i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-60)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-spirit-chase-2)
            :name "wascity-bbush-spirit-chase-2-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasb-6)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-spirit-chase-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbsprt2
              :type-to-spawn 'task-manager-bbush-spirit-chase-2
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-spirit-chase-2-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb19w")
              :on-fail '(talker-spawn "o-bb19f")
              :user-count 10
              )
            :borrow '((waswide 0 lbbsprt2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-6"
                  :node (game-task-node wascity-bbush-spirit-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-6"
                  :node (game-task-node wascity-bbush-spirit-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-6"
                  :node (game-task-node wascity-bbush-spirit-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascityb-bbush-wasb-6"
                  :node (game-task-node wascity-bbush-spirit-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-spirit-chase-3)
            :name "city-bbush-spirit-chase-3-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-sluma-1)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb19i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-65)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-blow-barricade-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-spirit-chase-3)
            :name "city-bbush-spirit-chase-3-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-sluma-1)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-spirit-chase-3-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbsprt3
              :type-to-spawn 'task-manager-bbush-spirit-chase-3
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-spirit-chase-3-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb19w")
              :on-fail '(talker-spawn "o-bb19f")
              :user-count 10
              )
            :borrow '((ctywide 4 lbbsprt3 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-1"
                  :node (game-task-node city-bbush-spirit-chase-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-1"
                  :node (game-task-node city-bbush-spirit-chase-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-1"
                  :node (game-task-node city-bbush-spirit-chase-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctysluma-bbush-1"
                  :node (game-task-node city-bbush-spirit-chase-3-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-timer-chase-1)
            :name "desert-bbush-timer-chase-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb08i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-63)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-timer-chase-1)
            :name "desert-bbush-timer-chase-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task clear-task-mask exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-timer-chase-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbtcha1
              :type-to-spawn 'task-manager-bbush-timer-chase
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-timer-chase-1-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb08w")
              :on-fail '(talker-spawn "o-bb08f")
              :user-count 10
              )
            :borrow '((desert-game alias desert copy lbbtcha1 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-4"
                  :node (game-task-node desert-bbush-timer-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-4"
                  :node (game-task-node desert-bbush-timer-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-4"
                  :node (game-task-node desert-bbush-timer-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-4"
                  :node (game-task-node desert-bbush-timer-chase-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-timer-chase-2)
            :name "wascity-bbush-timer-chase-2-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-6)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "o-bb09i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-74)
                :scene #f
                )
              )
            :flags (game-task-node-flag set-task-mask save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-artifact-race-2-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'wascity
            :task (game-task wascity-bbush-timer-chase-2)
            :name "wascity-bbush-timer-chase-2-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-wasa-6)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task set-task-mask exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node wascity-bbush-timer-chase-2-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :task-mask (task-mask task2)
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lbbtcha2
              :type-to-spawn 'task-manager-bbush-timer-chase-2
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node wascity-bbush-timer-chase-2-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb09w")
              :on-fail '(talker-spawn "o-bb09f")
              :user-count 10
              )
            :borrow '((waswide 0 lbbtcha2 display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-6"
                  :node (game-task-node wascity-bbush-timer-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-6"
                  :node (game-task-node wascity-bbush-timer-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-6"
                  :node (game-task-node wascity-bbush-timer-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "wascitya-bbush-wasa-6"
                  :node (game-task-node wascity-bbush-timer-chase-2-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-air-time)
            :name "desert-bbush-air-time-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action menu)
                :tex (game-task-icon gaticon-16)
                :scene "k-bb05i"
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(begin
               (task-open! "desert-bbush-total-air-time-introduction")
               (task-open! "desert-bbush-jump-distance-introduction")
               (task-open! "desert-bbush-total-jump-distance-introduction")
               (task-open! "desert-bbush-roll-count-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-air-time)
            :name "desert-bbush-air-time-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-air-time-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwasbbv
              :type-to-spawn 'task-manager-bbush-air-time
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-air-time-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "k-bb05w")
              :on-fail '(talker-spawn "k-bb05f")
              )
            :borrow '((wasall 0 lwasbbv special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-total-air-time)
            :name "desert-bbush-total-air-time-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action menu)
                :tex (game-task-icon gaticon-04)
                :scene "k-bb04i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-69)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(begin
               (task-open! "desert-bbush-air-time-introduction")
               (task-open! "desert-bbush-jump-distance-introduction")
               (task-open! "desert-bbush-total-jump-distance-introduction")
               (task-open! "desert-bbush-roll-count-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-total-air-time)
            :name "desert-bbush-total-air-time-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-total-air-time-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwasbbv
              :type-to-spawn 'task-manager-bbush-total-air-time
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-total-air-time-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "k-bb04w")
              :on-fail '(talker-spawn "k-bb04f")
              )
            :borrow '((wasall 0 lwasbbv special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-air-time-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-jump-distance)
            :name "desert-bbush-jump-distance-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action menu)
                :tex (game-task-icon gaticon-04)
                :scene "k-bb06i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-69)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(begin
               (task-open! "desert-bbush-air-time-introduction")
               (task-open! "desert-bbush-total-air-time-introduction")
               (task-open! "desert-bbush-total-jump-distance-introduction")
               (task-open! "desert-bbush-roll-count-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-jump-distance)
            :name "desert-bbush-jump-distance-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-jump-distance-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwasbbv
              :type-to-spawn 'task-manager-bbush-jump-distance
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-jump-distance-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "k-bb06w")
              :on-fail '(talker-spawn "k-bb06f")
              )
            :borrow '((wasall 0 lwasbbv special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-total-jump-distance)
            :name "desert-bbush-total-jump-distance-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action menu)
                :tex (game-task-icon gaticon-04)
                :scene "k-bb07i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-69)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(begin
               (task-open! "desert-bbush-air-time-introduction")
               (task-open! "desert-bbush-total-air-time-introduction")
               (task-open! "desert-bbush-jump-distance-introduction")
               (task-open! "desert-bbush-roll-count-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-total-jump-distance)
            :name "desert-bbush-total-jump-distance-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-total-jump-distance-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwasbbv
              :type-to-spawn 'task-manager-bbush-total-jump-distance
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-total-jump-distance-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "k-bb07w")
              :on-fail '(talker-spawn "k-bb07f")
              )
            :borrow '((wasall 0 lwasbbv special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-total-jump-distance-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-roll-count)
            :name "desert-bbush-roll-count-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action menu)
                :tex (game-task-icon gaticon-04)
                :scene "k-bb08i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-69)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close '(begin
               (task-open! "desert-bbush-air-time-introduction")
               (task-open! "desert-bbush-total-air-time-introduction")
               (task-open! "desert-bbush-jump-distance-introduction")
               (task-open! "desert-bbush-total-jump-distance-introduction")
               )
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-roll-count)
            :name "desert-bbush-roll-count-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-roll-count-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwasbbv
              :type-to-spawn 'task-manager-bbush-roll-count
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-roll-count-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "k-bb08w")
              :on-fail '(talker-spawn "k-bb08f")
              )
            :borrow '((wasall 0 lwasbbv special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-roll-count-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-roll-count-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-roll-count-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desc-4"
                  :node (game-task-node desert-bbush-roll-count-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-time-trial-1)
            :name "desert-bbush-time-trial-1-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb-3)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "k-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-73)
                :scene #f
                )
              )
            :flags (game-task-node-flag no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-course-race-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-time-trial-1)
            :name "desert-bbush-time-trial-1-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb-3)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-time-trial-1-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'destrack
              :type-to-spawn 'task-manager-bbush-time-trial-1
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-time-trial-1-resolution)
              :vehicle-type #x1b
              :index 1
              :on-complete '(talker-spawn "k-bb01w")
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy destrack display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desertb-time-trial-start"
                  :node (game-task-node desert-bbush-time-trial-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desb-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-slow-down no-audio-first)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desb-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desertb-time-trial-start"
                  :node (game-task-node desert-bbush-time-trial-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-slow-down no-audio-first)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desb-3" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desertb-time-trial-start"
                  :node (game-task-node desert-bbush-time-trial-1-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-rally)
            :name "desert-bbush-rally-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-12)
                :scene "k-bb01i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-72)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-hover-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-rally)
            :name "desert-bbush-rally-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desc-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-rally-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desrally
              :type-to-spawn 'task-manager-bbush-rally
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-rally-resolution)
              :vehicle-type #x1b
              :index 2
              :on-complete '(talker-spawn "k-bb01w")
              :on-fail #f
              )
            :borrow '((desert-game alias desert copy desrally display))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desrally-race-start"
                  :node (game-task-node desert-bbush-rally-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                )
              :quit-info (new 'static 'resetter-params
                :flags (resetter-flag auto-reset no-audio no-slow-down)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desc-5" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-slow-down no-audio-first)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desc-5" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desrally-race-start"
                  :node (game-task-node desert-bbush-rally-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-slow-down no-audio-first)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desc-5" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desrally-race-start"
                  :node (game-task-node desert-bbush-rally-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-port-attack)
            :name "city-bbush-port-attack-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-12)
                :scene "t-bb12i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-95)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-port-attack)
            :name "city-bbush-port-attack-port-attack-load"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-port-attack-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level #f
              :type-to-spawn 'task-manager-blackout
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-port-attack-port-attack-load)
              :vehicle-type #x1b
              :on-complete #f
              :on-fail #f
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-bbush-port-attack)
            :name "city-bbush-port-attack-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-port-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-bbush-port-attack-port-attack-load)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lctypatk
              :type-to-spawn 'ctyport-attack-manager-bbush
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-bbush-port-attack-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "t-bb12w")
              :on-fail '(talker-spawn "t-bb12f")
              :user-count 18
              )
            :borrow '((ctywide 4 lctypatk display)
              (ctywide-ff alias ctywide copy ctypesa auto ctycarb auto ctycara auto lpatkcs display)
              )
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-port-4-missile"
                  :node (game-task-node city-bbush-port-attack-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-port-4-missile"
                  :node (game-task-node city-bbush-port-attack-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-bbush-port-4"
                  :node (game-task-node city-bbush-port-attack-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-port-4-missile"
                  :node (game-task-node city-bbush-port-attack-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio)
                :fail (new 'static 'resetter-spec
                  :continue "ctyport-bbush-port-4"
                  :node (game-task-node city-bbush-port-attack-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "ctyport-bbush-port-4-missile"
                  :node (game-task-node city-bbush-port-attack-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue-bbush)
            :name "desert-rescue-bbush-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-12)
                :scene "o-bb18i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-64)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-oasis-defense-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-rescue-bbush)
            :name "desert-rescue-bbush-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desd-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-rescue-bbush-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'desresc
              :type-to-spawn 'task-manager-desert-rescue-bbush
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-rescue-bbush-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "o-bb18w")
              :on-fail '(talker-spawn "o-bb18f")
              :user-count 18
              )
            :borrow '((desert-game alias desert copy desresc special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info #f
              :quit-info #f
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio)
                :fail (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-5"
                  :node (game-task-node desert-rescue-bbush-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-5"
                  :node (game-task-node desert-rescue-bbush-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio)
                :fail (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-5"
                  :node (game-task-node desert-rescue-bbush-introduction)
                  :reset-mode 'life
                  :execute #f
                  )
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desd-5"
                  :node (game-task-node desert-rescue-bbush-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-introduction"
            :when-open #f
            :flags (game-task-node-flag auto-close save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-1-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-resolution"
            :when-open #f
            :flags (game-task-node-flag close-task bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'gungame
              :type-to-spawn 'gungame-task-manager
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-gun-course-play-for-fun-resolution)
              :vehicle-type #x1b
              :index -1
              :on-complete #f
              :on-fail #f
              )
            :borrow '((gungame 0 gungame1 special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "gungame-start"
                  :node (game-task-node city-gun-course-play-for-fun-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "gungame-start"
                  :node (game-task-node city-gun-course-play-for-fun-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info #f
              :death-info #f
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-bronze-rnc-1"
            :when-open #f
            :flags (game-task-node-flag save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-silver-rnc-1"
            :when-open #f
            :flags (game-task-node-flag save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-bronze-rnc-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-gold-rnc-1"
            :when-open #f
            :flags (game-task-node-flag save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-silver-rnc-1)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-bronze-rnc-2"
            :when-open #f
            :flags (game-task-node-flag save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-silver-rnc-2"
            :when-open #f
            :flags (game-task-node-flag save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-bronze-rnc-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-gun-course-play-for-fun)
            :name "city-gun-course-play-for-fun-gold-rnc-2"
            :when-open #f
            :flags (game-task-node-flag save-on-life bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-gun-course-play-for-fun-silver-rnc-2)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-jetboard-bbush)
            :name "city-jetboard-bbush-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-5)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-12)
                :scene "bb18int"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-94)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-port-attack-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'city
            :task (game-task city-jetboard-bbush)
            :name "city-jetboard-bbush-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-inda-5)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node city-jetboard-bbush-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'ctywide
              :type-to-spawn 'task-manager-bbush-board
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node city-jetboard-bbush-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "bb17win")
              :on-fail '(talker-spawn "bb18fail")
              :user-count 6
              )
            :borrow '()
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-5"
                  :node (game-task-node city-jetboard-bbush-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-5"
                  :node (game-task-node city-jetboard-bbush-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-5"
                  :node (game-task-node city-jetboard-bbush-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "ctyinda-bbush-5"
                  :node (game-task-node city-jetboard-bbush-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '((faction-spawn kg-guard off) (faction-strength kg -5))
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-destroy-interceptors)
            :name "desert-bbush-destroy-interceptors-introduction"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb-4)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-08)
                :scene "k-bb13i"
                )
              (new 'static 'game-task-event
                :actor (game-task-actor minimap)
                :action (game-task-action show)
                :tex (game-task-icon gaticon-100)
                :scene #f
                )
              )
            :flags (game-task-node-flag save-on-try no-restart bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-beast-battle-resolution)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager #f
            :borrow '()
            :open? #f
            :on-close #f
            :reset #f
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          (new 'static 'game-task-node-info
            :level 'desert
            :task (game-task desert-bbush-destroy-interceptors)
            :name "desert-bbush-destroy-interceptors-resolution"
            :when-open (new 'static 'boxed-array :type game-task-event
              (new 'static 'game-task-event
                :actor (game-task-actor burning-bush-desb-4)
                :action (game-task-action play)
                :tex (game-task-icon gaticon-04)
                :scene #f
                )
              )
            :flags (game-task-node-flag close-task exclusive bbush)
            :parent-node (new 'static 'array game-task-node 4
              (game-task-node desert-bbush-destroy-interceptors-introduction)
              (game-task-node none)
              (game-task-node none)
              (game-task-node none)
              )
            :on-open #f
            :manager (new 'static 'task-manager-info
              :level 'lwasbbv
              :type-to-spawn 'task-manager-bbush-destroy-interceptors
              :intro-scene #f
              :resolution-scene #f
              :resolution-scene-continue #f
              :final-node (game-task-node desert-bbush-destroy-interceptors-resolution)
              :vehicle-type #x1b
              :on-complete '(talker-spawn "k-bb13w")
              :on-fail #f
              )
            :borrow '((wasall 0 lwasbbv special))
            :open? #f
            :on-close #f
            :reset (new 'static 'task-reset-info
              :restart-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset text-message no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-4"
                  :node (game-task-node desert-bbush-destroy-interceptors-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :quit-info (new 'static 'resetter-params
                :message (resetter-message mission-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue #f :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-4"
                  :node (game-task-node desert-bbush-destroy-interceptors-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :fail-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desb-4" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-4"
                  :node (game-task-node desert-bbush-destroy-interceptors-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              :death-info (new 'static 'resetter-params
                :message (resetter-message mission-fail-or-retry)
                :flags (resetter-flag auto-reset no-audio-first)
                :fail (new 'static 'resetter-spec :continue "desert-bbush-desb-4" :reset-mode 'life :execute #f)
                :retry (new 'static 'resetter-spec
                  :continue "desert-bbush-desb-4"
                  :node (game-task-node desert-bbush-destroy-interceptors-resolution)
                  :reset-mode 'try
                  :execute #f
                  )
                :reset-delay (seconds 6.5)
                )
              )
            :suck-death-count #xa5
            :command-index #x4b
            :faction-commands '()
            )
          )
        )
  (set! (-> game-info mission-list) (new 'global 'boxed-array game-task-node-info 410))
  (set! (-> game-info task-node-commands) (new 'static 'boxed-array :type uint8
                                            #x48
                                            #x20
                                            #x1f
                                            #x1
                                            #x5
                                            #x23
                                            #x22
                                            #x19
                                            #x36
                                            #xa
                                            #x3a
                                            #x41
                                            #x48
                                            #x32
                                            #x39
                                            #x3f
                                            #x3a
                                            #x8
                                            #x6
                                            #x37
                                            #xd
                                            #xb
                                            #x3e
                                            #x3a
                                            #x39
                                            #xf
                                            #x40
                                            #x31
                                            #x28
                                            #x27
                                            #x26
                                            #x2f
                                            #x2d
                                            #x3
                                            #x3b
                                            #x29
                                            #x2a
                                            #x33
                                            #x12
                                            #x10
                                            #x1b
                                            #xe
                                            #xc
                                            #x21
                                            #x1a
                                            #x2e
                                            #x34
                                            #x30
                                            #x13
                                            #x11
                                            #x1c
                                            #x9
                                            #x7
                                            #x14
                                            #x1d
                                            #x3c
                                            #x43
                                            #x39
                                            #x44
                                            #x46
                                            #x45
                                            #x39
                                            #x17
                                            #x15
                                            #x2b
                                            #x47
                                            #x38
                                            #x35
                                            #x18
                                            #x16
                                            #x3a
                                            #x1e
                                            #x42
                                            #x4
                                            #x3
                                            )
        )
  (dotimes (v1-4 (-> game-info sub-task-list length))
    (if (-> game-info sub-task-list v1-4 manager)
        (set! (-> game-info sub-task-list v1-4 manager manager) (the-as handle #f))
        )
    )
  (when (zero? (-> game-info task-perm-list))
    (let ((v1-9 (new 'global 'entity-perm-array 138)))
      (set! (-> game-info task-perm-list) v1-9)
      (dotimes (a0-14 (-> v1-9 length))
        (set! (-> v1-9 data a0-14 task) (the-as game-task a0-14))
        )
      (logior! (-> v1-9 data 1 status) (entity-perm-status complete))
      )
    )
  )
