;;-*-Lisp-*-
(in-package goal)

(local-vars (gp-0 game-info))

;; definition of type game-bank
(deftype game-bank (basic)
  ((life-max-default    float)
   (life-start-default  float)
   (life-single-inc     float)
   (money-task-inc      float)
   (money-oracle-inc    float)
   )
  )

;; definition for method 3 of type game-bank
(defmethod inspect ((this game-bank))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlife-max-default: ~f~%" (-> this life-max-default))
  (format #t "~1Tlife-start-default: ~f~%" (-> this life-start-default))
  (format #t "~1Tlife-single-inc: ~f~%" (-> this life-single-inc))
  (format #t "~1Tmoney-task-inc: ~f~%" (-> this money-task-inc))
  (format #t "~1Tmoney-oracle-inc: ~f~%" (-> this money-oracle-inc))
  (label cfg-4)
  this
  )

;; definition for symbol *GAME-bank*, type game-bank
(define *GAME-bank* (new 'static 'game-bank
                      :life-max-default 99.0
                      :life-start-default 5.0
                      :life-single-inc 1.0
                      :money-task-inc 90.0
                      :money-oracle-inc 120.0
                      )
        )

;; definition of type actor-id
(deftype actor-id (uint32)
  ()
  )

;; definition of type highscore-info
(deftype highscore-info (structure)
  ((flags         highscore-flags)
   (award-scores  float  3)
   (bronze-score  float  :overlay-at (-> award-scores 0))
   (silver-score  float  :overlay-at (-> award-scores 1))
   (gold-score    float  :overlay-at (-> award-scores 2))
   )
  (:methods
    (get-rank (_type_ float) int)
    )
  )

;; definition for method 3 of type highscore-info
(defmethod inspect ((this highscore-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'highscore-info)
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Taward-scores[3] @ #x~X~%" (-> this award-scores))
  (format #t "~1Tbronze-score: ~f~%" (-> this bronze-score))
  (format #t "~1Tsilver-score: ~f~%" (-> this silver-score))
  (format #t "~1Tgold-score: ~f~%" (-> this gold-score))
  (label cfg-4)
  this
  )

;; definition of type level-buffer-state
(deftype level-buffer-state (structure)
  ((name           symbol)
   (display?       symbol)
   (force-vis?     symbol)
   (force-inside?  symbol)
   )
  :pack-me
  )

;; definition for method 3 of type level-buffer-state
(defmethod inspect ((this level-buffer-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'level-buffer-state)
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tdisplay?: ~A~%" (-> this display?))
  (format #t "~1Tforce-vis?: ~A~%" (-> this force-vis?))
  (format #t "~1Tforce-inside?: ~A~%" (-> this force-inside?))
  (label cfg-4)
  this
  )

;; definition of type level-buffer-state-small
(deftype level-buffer-state-small (structure)
  ((name      basic)
   (display?  symbol)
   )
  )

;; definition for method 3 of type level-buffer-state-small
(defmethod inspect ((this level-buffer-state-small))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'level-buffer-state-small)
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tdisplay?: ~A~%" (-> this display?))
  (label cfg-4)
  this
  )

;; definition of type load-state
(deftype load-state (basic)
  ((want             level-buffer-state  10 :inline)
   (want-exp         level-buffer-state  10 :inline)
   (target           level-buffer-state  10 :inline)
   (want-sound       sound-bank-state    3 :inline)
   (want-exp-sound   sound-bank-state    6 :inline)
   (target-sound     sound-bank-state    6 :inline)
   (vis-nick         symbol)
   (command-list     pair)
   (object-name      string              256)
   (object-status    basic               256)
   (update-callback  basic)
   )
  (:methods
    (new (symbol type) _type_)
    (load-state-method-9 () none)
    (load-state-method-10 () none)
    (load-state-method-11 () none)
    (want-sound-banks (_type_ (pointer symbol)) none)
    (load-state-method-13 () none)
    (load-state-method-14 () none)
    (load-state-method-15 () none)
    (load-state-method-16 () none)
    (load-state-method-17 () none)
    (load-state-method-18 () none)
    (load-state-method-19 () none)
    (load-state-method-20 () none)
    (load-state-method-21 () none)
    )
  )

;; definition for method 3 of type load-state
(defmethod inspect ((this load-state))
  (when (not this)
    (set! this this)
    (goto cfg-22)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Twant[10] @ #x~X~%" (-> this want))
  (dotimes (s5-0 10)
    (format #t "~T  [~D]~1Twant: ~`level-buffer-state`P~%" s5-0 (-> this want s5-0))
    )
  (format #t "~1Twant-exp[10] @ #x~X~%" (-> this want-exp))
  (dotimes (s5-1 10)
    (format #t "~T  [~D]~1Twant-exp: ~`level-buffer-state`P~%" s5-1 (-> this want-exp s5-1))
    )
  (format #t "~1Ttarget[10] @ #x~X~%" (-> this target))
  (dotimes (s5-2 10)
    (format #t "~T  [~D]~1Ttarget: ~`level-buffer-state`P~%" s5-2 (-> this target s5-2))
    )
  (format #t "~1Twant-sound[3] @ #x~X~%" (-> this want-sound))
  (dotimes (s5-3 3)
    (format #t "~T  [~D]~1Twant-sound: ~`sound-bank-state`P~%" s5-3 (-> this want-sound s5-3))
    )
  (format #t "~1Twant-exp-sound[6] @ #x~X~%" (-> this want-exp-sound))
  (dotimes (s5-4 6)
    (format #t "~T  [~D]~1Twant-exp-sound: ~`sound-bank-state`P~%" s5-4 (-> this want-exp-sound s5-4))
    )
  (format #t "~1Ttarget-sound[6] @ #x~X~%" (-> this target-sound))
  (dotimes (s5-5 6)
    (format #t "~T  [~D]~1Ttarget-sound: ~`sound-bank-state`P~%" s5-5 (-> this target-sound s5-5))
    )
  (format #t "~1Tvis-nick: ~A~%" (-> this vis-nick))
  (format #t "~1Tcommand-list: ~A~%" (-> this command-list))
  (format #t "~1Tobject-name[256] @ #x~X~%" (-> this object-name))
  (format #t "~1Tobject-status[256] @ #x~X~%" (-> this object-status))
  (format #t "~1Tupdate-callback: ~A~%" (-> this update-callback))
  (label cfg-22)
  this
  )

;; definition for method 0 of type load-state
;; WARN: Return type mismatch none vs load-state.
(defmethod new load-state ((allocation symbol) (type-to-make type))
  (let ((a0-1 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> a0-1 update-callback) #f)
    (the-as load-state ((method-of-object a0-1 load-state-method-9)))
    )
  )

;; definition of type continue-point
(deftype continue-point (basic)
  ((name          string)
   (level         symbol)
   (flags         continue-flags)
   (trans         vector                    :inline)
   (camera-trans  vector                    :inline)
   (quat          vector4h                  :inline)
   (camera-rot    vector3s                  3 :inline)
   (on-goto       pair                        :offset  76)
   (vis-nick      symbol                      :offset  80)
   (vehicle-type  uint8                       :offset  84)
   (want-count    int8                        :offset  85)
   (want          level-buffer-state-small    :offset  88)
   (want-sound    symbol                    3 :offset  92)
   )
  (:methods
    (continue-point-method-9 () none)
    (continue-point-method-10 () none)
    (continue-point-method-11 () none)
    )
  )

;; definition for method 3 of type continue-point
(defmethod inspect ((this continue-point))
  (when (not this)
    (set! this this)
    (goto cfg-10)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Ttrans: ~`vector`P~%" (-> this trans))
  (format #t "~1Tcamera-trans: ~`vector`P~%" (-> this camera-trans))
  (format #t "~1Tquat: #<vector4h @ #x~X>~%" (-> this quat))
  (format #t "~1Tcamera-rot[9] @ #x~X~%" (-> this camera-rot))
  (format #t "~1Ton-goto: ~A~%" (-> this on-goto))
  (format #t "~1Tvis-nick: ~A~%" (-> this vis-nick))
  (format #t "~1Tvehicle-type: ~D~%" (-> this vehicle-type))
  (format #t "~1Twant-count: ~D~%" (-> this want-count))
  (format #t "~1Twant: #x~X~%" (-> this want))
  (dotimes (s5-0 (-> this want-count))
    (format #t "~T  [~D]~1Twant: ~`level-buffer-state-small`P~%" s5-0 (+ (the-as uint (-> this want)) (* s5-0 8)))
    )
  (format #t "~1Twant-sound[3] @ #x~X~%" (-> this want-sound))
  (dotimes (s5-1 3)
    (format #t "~T  [~D]~1Twant-sound: ~`symbol`P~%" s5-1 (-> this want-sound s5-1))
    )
  (label cfg-10)
  this
  )

;; definition of type game-info
(deftype game-info (basic)
  ((mode                    symbol)
   (save-name               string)
   (life                    float)
   (life-max                float)
   (money                   float)
   (money-total             float)
   (money-per-level         uint8          32)
   (deaths-per-level        uint8          32)
   (buzzer-total            float)
   (fuel                    float)
   (gem                     float)
   (gem-total               float)
   (skill                   float)
   (skill-total             float)
   (skill-high-watermark    float)
   (light-crystal           float)
   (dark-crystal            float)
   (karma                   float)
   (eco-pill-dark           float)
   (eco-pill-dark-total     float)
   (eco-pill-light          float)
   (eco-pill-light-total    float)
   (features                game-feature)
   (debug-features          game-feature)
   (old-features            game-feature)
   (items                   game-items)
   (debug-items             game-items)
   (old-items               game-items)
   (secrets                 game-secrets)
   (purchase-secrets        game-secrets)
   (gun-type                pickup-type)
   (gun-ammo                float          4)
   (shield                  float)
   (vehicles                game-vehicles)
   (debug-vehicles          game-vehicles)
   (old-vehicles            game-vehicles)
   (score                   float)
   (score-owner             handle)
   (timer                   time-frame)
   (timer-owner             handle)
   (timer-flash             symbol)
   (counter                 float)
   (counter-flash           basic)
   (health-bar              float)
   (health-bar-owner        uint64)
   (enemies-killed          float)
   (civilians-killed        float)
   (marauders-killed        float)
   (shots-fired             float          4)
   (shots-hit               float          4)
   (crates-opened           float)
   (health-collected        float)
   (board-time              uint64)
   (attack-id               uint32)
   (perm-list               entity-perm-array)
   (task-perm-list          entity-perm-array)
   (current-continue        continue-point)
   (last-continue           continue-point)
   (task-node-commands      pair           :offset 416)
   (task-node-exclusive     pair)
   (task-counter            uint32)
   (unknown-arr4            (array uint16))
   (level-opened            uint8          32)
   (total-deaths            int32)
   (continue-deaths         int32)
   (task-deaths             int32)
   (total-trys              int32)
   (game-start-time         uint64)
   (continue-time           uint64)
   (death-time              uint64)
   (hit-time                uint64)
   (task-pickup-time        uint64)
   (unknown-arr0            (array uint64))
   (unknown-arr1            (array uint64))
   (unknown-arr2            (array uint64))
   (death-pos               vector-array)
   (stop-watch-start        time-frame)
   (stop-watch-stop         time-frame)
   (blackout-time           time-frame)
   (letterbox-time          time-frame)
   (hint-play-time          time-frame)
   (display-text-time       time-frame)
   (display-text-handle     handle)
   (death-movie-tick        int32)
   (want-auto-save          symbol)
   (auto-save-proc          handle)
   (auto-save-status        mc-status-code)
   (auto-save-card          int32)
   (auto-save-which         int32)
   (auto-save-count         int32)
   (pov-camera-handle       handle)
   (other-camera-handle     handle)
   (controller              handle         2)
   (race-timer              time-frame)
   (race-current-lap-count  int32)
   (race-total-lap-count    int32)
   (race-position           int32)
   (race-number-turbos      int32)
   (bot-health              float          3)
   (demo-state              uint32)
   (wanted-flash            symbol)
   (distance                float)
   (kiosk-timeout           time-frame)
   (pause-start-time        time-frame)
   (game-score              (array float))
   (goal                    float)
   (miss                    float)
   (miss-max                float)
   (unknown-arr3            (array uint64))
   (live-eco-pill-count     int32)
   (live-gem-count          int32)
   (air-supply              float)
   (homing-beacon           int32)
   (dark-eco-pickup         int32)
   (green-eco-pickup        int32)
   (health-bar-vehicle      float)
   (dust-storm              handle)
   (flut-count              int32)
   (death-resetter          resetter-spec  :inline)
   (current-vehicle         uint8)
   (vehicle-turbo-ready     float)
   (percent-complete        float)
   )
  (:methods
    (game-info-method-9 () none)
    (game-info-method-10 () none)
    (game-info-method-11 () none)
    (game-info-method-12 () none)
    (game-info-method-13 () none)
    (game-info-method-14 () none)
    (game-info-method-15 () none)
    (game-info-method-16 () none)
    (game-info-method-17 () none)
    (game-info-method-18 () none)
    (game-info-method-19 () none)
    (game-info-method-20 () none)
    (game-info-method-21 () none)
    (game-info-method-22 () none)
    (game-info-method-23 () none)
    (game-info-method-24 () none)
    (game-info-method-25 () none)
    (get-next-attack-id! (_type_) uint)
    (game-info-method-27 () none)
    (game-info-method-28 () none)
    (game-info-method-29 () none)
    (game-info-method-30 () none)
    (game-info-method-31 () none)
    (game-info-method-32 () none)
    (game-info-method-33 () none)
    (game-info-method-34 () none)
    )
  )

;; definition for method 3 of type game-info
(defmethod inspect ((this game-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmode: ~A~%" (-> this mode))
  (format #t "~1Tsave-name: ~A~%" (-> this save-name))
  (format #t "~1Tlife: ~f~%" (-> this life))
  (format #t "~1Tlife-max: ~f~%" (-> this life-max))
  (format #t "~1Tmoney: ~f~%" (-> this money))
  (format #t "~1Tmoney-total: ~f~%" (-> this money-total))
  (format #t "~1Tmoney-per-level[32] @ #x~X~%" (-> this money-per-level))
  (format #t "~1Tdeaths-per-level[32] @ #x~X~%" (-> this deaths-per-level))
  (format #t "~1Tbuzzer-total: ~f~%" (-> this buzzer-total))
  (format #t "~1Tfuel: ~f~%" (-> this fuel))
  (format #t "~1Tgem: ~f~%" (-> this gem))
  (format #t "~1Tgem-total: ~f~%" (-> this gem-total))
  (format #t "~1Tskill: ~f~%" (-> this skill))
  (format #t "~1Tskill-total: ~f~%" (-> this skill-total))
  (format #t "~1Tskill-high-watermark: ~f~%" (-> this skill-high-watermark))
  (format #t "~1Tlight-crystal: ~f~%" (-> this light-crystal))
  (format #t "~1Tdark-crystal: ~f~%" (-> this dark-crystal))
  (format #t "~1Tkarma: ~f~%" (-> this karma))
  (format #t "~1Teco-pill-dark: ~f~%" (-> this eco-pill-dark))
  (format #t "~1Teco-pill-dark-total: ~f~%" (-> this eco-pill-dark-total))
  (format #t "~1Teco-pill-light: ~f~%" (-> this eco-pill-light))
  (format #t "~1Teco-pill-light-total: ~f~%" (-> this eco-pill-light-total))
  (format #t "~1Tfeatures: ~D~%" (-> this features))
  (format #t "~1Tdebug-features: ~D~%" (-> this debug-features))
  (format #t "~1Told-features: ~D~%" (-> this old-features))
  (format #t "~1Titems: ~D~%" (-> this items))
  (format #t "~1Tdebug-items: ~D~%" (-> this debug-items))
  (format #t "~1Told-items: ~D~%" (-> this old-items))
  (format #t "~1Tsecrets: ~D~%" (-> this secrets))
  (format #t "~1Tpurchase-secrets: ~D~%" (-> this purchase-secrets))
  (format #t "~1Tgun-type: ~D~%" (-> this gun-type))
  (format #t "~1Tgun-ammo[4] @ #x~X~%" (-> this gun-ammo))
  (format #t "~1Tshield: ~f~%" (-> this shield))
  (format #t "~1Tvehicles: ~D~%" (-> this vehicles))
  (format #t "~1Tdebug-vehicles: ~D~%" (-> this debug-vehicles))
  (format #t "~1Told-vehicles: ~D~%" (-> this old-vehicles))
  (format #t "~1Tscore: ~f~%" (-> this score))
  (format #t "~1Tscore-owner: ~D~%" (-> this score-owner))
  (format #t "~1Ttimer: ~D~%" (-> this timer))
  (format #t "~1Ttimer-owner: ~D~%" (-> this timer-owner))
  (format #t "~1Ttimer-flash: ~A~%" (-> this timer-flash))
  (format #t "~1Tcounter: ~f~%" (-> this counter))
  (format #t "~1Tcounter-flash: ~A~%" (-> this counter-flash))
  (format #t "~1Thealth-bar: ~f~%" (-> this health-bar))
  (format #t "~1Thealth-bar-owner: ~D~%" (-> this health-bar-owner))
  (format #t "~1Tenemies-killed: ~f~%" (-> this enemies-killed))
  (format #t "~1Tcivilians-killed: ~f~%" (-> this civilians-killed))
  (format #t "~1Tmarauders-killed: ~f~%" (-> this marauders-killed))
  (format #t "~1Tshots-fired[4] @ #x~X~%" (-> this shots-fired))
  (format #t "~1Tshots-hit[4] @ #x~X~%" (-> this shots-hit))
  (format #t "~1Tcrates-opened: ~f~%" (-> this crates-opened))
  (format #t "~1Thealth-collected: ~f~%" (-> this health-collected))
  (format #t "~1Tboard-time: ~D~%" (-> this board-time))
  (format #t "~1Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~1Tperm-list: ~A~%" (-> this perm-list))
  (format #t "~1Ttask-perm-list: ~A~%" (-> this task-perm-list))
  (format #t "~1Tcurrent-continue: ~A~%" (-> this current-continue))
  (format #t "~1Tlast-continue: ~A~%" (-> this last-continue))
  (format #t "~1Ttask-node-commands: ~A~%" (-> this task-node-commands))
  (format #t "~1Ttask-node-exclusive: ~A~%" (-> this task-node-exclusive))
  (format #t "~1Ttask-counter: ~D~%" (-> this task-counter))
  (format #t "~1Tlevel-opened[32] @ #x~X~%" (-> this level-opened))
  (format #t "~1Ttotal-deaths: ~D~%" (-> this total-deaths))
  (format #t "~1Tcontinue-deaths: ~D~%" (-> this continue-deaths))
  (format #t "~1Ttask-deaths: ~D~%" (-> this task-deaths))
  (format #t "~1Ttotal-trys: ~D~%" (-> this total-trys))
  (format #t "~1Tgame-start-time: ~D~%" (-> this game-start-time))
  (format #t "~1Tcontinue-time: ~D~%" (-> this continue-time))
  (format #t "~1Tdeath-time: ~D~%" (-> this death-time))
  (format #t "~1Thit-time: ~D~%" (-> this hit-time))
  (format #t "~1Ttask-pickup-time: ~D~%" (-> this task-pickup-time))
  (format #t "~1Tdeath-pos: ~A~%" (-> this death-pos))
  (format #t "~1Tstop-watch-start: ~D~%" (-> this stop-watch-start))
  (format #t "~1Tstop-watch-stop: ~D~%" (-> this stop-watch-stop))
  (format #t "~1Tblackout-time: ~D~%" (-> this blackout-time))
  (format #t "~1Tletterbox-time: ~D~%" (-> this letterbox-time))
  (format #t "~1Thint-play-time: ~D~%" (-> this hint-play-time))
  (format #t "~1Tdisplay-text-time: ~D~%" (-> this display-text-time))
  (format #t "~1Tdisplay-text-handle: ~D~%" (-> this display-text-handle))
  (format #t "~1Tdeath-movie-tick: ~D~%" (-> this death-movie-tick))
  (format #t "~1Twant-auto-save: ~A~%" (-> this want-auto-save))
  (format #t "~1Tauto-save-proc: ~D~%" (-> this auto-save-proc))
  (format #t "~1Tauto-save-status: ~D~%" (-> this auto-save-status))
  (format #t "~1Tauto-save-card: ~D~%" (-> this auto-save-card))
  (format #t "~1Tauto-save-which: ~D~%" (-> this auto-save-which))
  (format #t "~1Tauto-save-count: ~D~%" (-> this auto-save-count))
  (format #t "~1Tpov-camera-handle: ~D~%" (-> this pov-camera-handle))
  (format #t "~1Tother-camera-handle: ~D~%" (-> this other-camera-handle))
  (format #t "~1Tcontroller[2] @ #x~X~%" (-> this controller))
  (format #t "~1Trace-timer: ~D~%" (-> this race-timer))
  (format #t "~1Trace-current-lap-count: ~D~%" (-> this race-current-lap-count))
  (format #t "~1Trace-total-lap-count: ~D~%" (-> this race-total-lap-count))
  (format #t "~1Trace-position: ~D~%" (-> this race-position))
  (format #t "~1Trace-number-turbos: ~D~%" (-> this race-number-turbos))
  (format #t "~1Tbot-health[3] @ #x~X~%" (-> this bot-health))
  (format #t "~1Tdemo-state: ~D~%" (-> this demo-state))
  (format #t "~1Twanted-flash: ~A~%" (-> this wanted-flash))
  (format #t "~1Tdistance: ~f~%" (-> this distance))
  (format #t "~1Tkiosk-timeout: ~D~%" (-> this kiosk-timeout))
  (format #t "~1Tpause-start-time: ~D~%" (-> this pause-start-time))
  (format #t "~1Tgame-score: ~A~%" (-> this game-score))
  (format #t "~1Tgoal: ~f~%" (-> this goal))
  (format #t "~1Tmiss: ~f~%" (-> this miss))
  (format #t "~1Tmiss-max: ~f~%" (-> this miss-max))
  (format #t "~1Tlive-eco-pill-count: ~D~%" (-> this live-eco-pill-count))
  (format #t "~1Tlive-gem-count: ~D~%" (-> this live-gem-count))
  (format #t "~1Tair-supply: ~f~%" (-> this air-supply))
  (format #t "~1Thoming-beacon: ~D~%" (-> this homing-beacon))
  (format #t "~1Tdark-eco-pickup: ~D~%" (-> this dark-eco-pickup))
  (format #t "~1Tgreen-eco-pickup: ~D~%" (-> this green-eco-pickup))
  (format #t "~1Thealth-bar-vehicle: ~f~%" (-> this health-bar-vehicle))
  (format #t "~1Tdust-storm: ~D~%" (-> this dust-storm))
  (format #t "~1Tflut-count: ~D~%" (-> this flut-count))
  (format #t "~1Tdeath-resetter: #<resetter-spec @ #x~X>~%" (-> this death-resetter))
  (format #t "~1Tcurrent-vehicle: ~D~%" (-> this current-vehicle))
  (format #t "~1Tvehicle-turbo-ready: ~f~%" (-> this vehicle-turbo-ready))
  (format #t "~1Tpercent-complete: ~f~%" (-> this percent-complete))
  (label cfg-4)
  this
  )

;; definition for method 26 of type game-info
(defmethod get-next-attack-id! ((this game-info))
  (let ((v0-0 (+ (-> this attack-id) 1)))
    (set! (-> this attack-id) v0-0)
    v0-0
    )
  )

;; failed to figure out what this is:
(set! gp-0 (when (or (not *game-info*) (zero? *game-info*))
             (set! gp-0 (new 'static 'game-info :mode 'debug :current-continue #f :last-continue #f))
             (set! (-> gp-0 unknown-arr0) (new 'global 'boxed-array uint64 138))
             (set! (-> gp-0 unknown-arr3) (new 'global 'boxed-array uint64 138))
             (set! (-> gp-0 unknown-arr1) (new 'global 'boxed-array uint64 32))
             (set! (-> gp-0 unknown-arr2) (new 'global 'boxed-array uint64 32))
             (set! *game-info* gp-0)
             gp-0
             )
      )
