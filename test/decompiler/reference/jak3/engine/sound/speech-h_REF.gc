;;-*-Lisp-*-
(in-package goal)

;; definition of type speech-type-info
(deftype speech-type-info (structure)
  ((channel          uint8)
   (flags            speech-type-flag)
   (priority         int8)
   (delay-pre-time   uint16)
   (request-timeout  uint16)
   (min-delay        uint16)
   (max-delay        uint16)
   (delay            uint16)
   (play-index       int16)
   (list             (array string))
   (time             uint64)
   )
  )

;; definition for method 3 of type speech-type-info
(defmethod inspect ((this speech-type-info))
  (when (not this)
    (set! this this)
    (goto cfg-12)
    )
  (format #t "[~8x] ~A~%" this 'speech-type-info)
  (format #t "~1Tchannel: ~D~%" (-> this channel))
  (format #t "~1Tflags: #x~X : (speech-type-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (speech-type-flag linked-next)) (speech-type-flag linked-next))
        (format #t "linked-next ")
        )
    (if (= (logand s5-0 (speech-type-flag first-time)) (speech-type-flag first-time))
        (format #t "first-time ")
        )
    (if (= (logand s5-0 (speech-type-flag random-order)) (speech-type-flag random-order))
        (format #t "random-order ")
        )
    (if (= (logand s5-0 (speech-type-flag skip-first-time)) (speech-type-flag skip-first-time))
        (format #t "skip-first-time ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tpriority: ~D~%" (-> this priority))
  (format #t "~1Tdelay-pre-time: ~D~%" (-> this delay-pre-time))
  (format #t "~1Trequest-timeout: ~D~%" (-> this request-timeout))
  (format #t "~1Tmin-delay: ~D~%" (-> this min-delay))
  (format #t "~1Tmax-delay: ~D~%" (-> this max-delay))
  (format #t "~1Tdelay: ~D~%" (-> this delay))
  (format #t "~1Tplay-index: ~D~%" (-> this play-index))
  (format #t "~1Tlist: ~A~%" (-> this list))
  (format #t "~1Ttime: ~D~%" (-> this time))
  (label cfg-12)
  this
  )

;; definition of type speech-request
(deftype speech-request (structure)
  ((handle       handle)
   (time         time-frame)
   (priority     float)
   (speech-type  speech-type)
   )
  :pack-me
  )

;; definition for method 3 of type speech-request
(defmethod inspect ((this speech-request))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'speech-request)
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Ttime: ~D~%" (-> this time))
  (format #t "~1Tpriority: ~f~%" (-> this priority))
  (format #t "~1Tspeech-type: ~D~%" (-> this speech-type))
  (label cfg-4)
  this
  )

;; definition of type speech-channel
(deftype speech-channel (structure)
  ((flags         speech-channel-flag)
   (gui-channel   gui-channel)
   (delay         uint16)
   (id            sound-id)
   (update-time   time-frame)
   (start-time    time-frame)
   (end-time      time-frame)
   (request       speech-request  :inline)
   (last-request  speech-request  :inline)
   (target-pos    vector          :inline)
   (speech-table  (pointer speech-type-info))
   )
  (:methods
    (speech-channel-method-9 () none)
    (speech-channel-method-10 () none)
    (speech-channel-method-11 () none)
    (speech-channel-method-12 () none)
    (speech-channel-method-13 () none)
    (speech-channel-method-14 () none)
    )
  )

;; definition for method 3 of type speech-channel
(defmethod inspect ((this speech-channel))
  (when (not this)
    (set! this this)
    (goto cfg-6)
    )
  (format #t "[~8x] ~A~%" this 'speech-channel)
  (format #t "~1Tflags: #x~X : (speech-channel-flag " (-> this flags))
  (let ((a0-3 (-> this flags)))
    (if (= (logand a0-3 (speech-channel-flag disable)) (speech-channel-flag disable))
        (format #t "disable ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tgui-channel: ~D~%" (-> this gui-channel))
  (format #t "~1Tdelay: ~D~%" (-> this delay))
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tupdate-time: ~D~%" (-> this update-time))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Tend-time: ~D~%" (-> this end-time))
  (format #t "~1Trequest: #<speech-request @ #x~X>~%" (-> this request))
  (format #t "~1Tlast-request: #<speech-request @ #x~X>~%" (-> this last-request))
  (format #t "~1Ttarget-pos: #<vector @ #x~X>~%" (-> this target-pos))
  (format #t "~1Tspeech-table: #x~X~%" (-> this speech-table))
  (label cfg-6)
  this
  )

;; definition of type speech-control
(deftype speech-control (structure)
  ((channel-array  speech-channel    2 :inline)
   (speech-table   speech-type-info  61)
   )
  (:methods
    (speech-control-method-9 () none)
    (speech-control-method-10 () none)
    (speech-control-method-11 () none)
    (speech-control-method-12 () none)
    (speech-control-method-13 () none)
    (speech-control-method-14 () none)
    (speech-control-method-15 () none)
    (speech-control-method-16 () none)
    (speech-control-method-17 () none)
    )
  )

;; definition for method 3 of type speech-control
(defmethod inspect ((this speech-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'speech-control)
  (format #t "~1Tchannel-array[2] @ #x~X~%" (-> this channel-array))
  (format #t "~1Tspeech-table[61] @ #x~X~%" (-> this speech-table))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




