;;-*-Lisp-*-
(in-package goal)

;; definition of type transform
(deftype transform (structure)
  "Transformation. w components of vectors should be 1.0
This can represent any rotation, translation, and scaling.
Note that the scaling is applied before rotation
(meaning it scales along the axes of the pre-transformed frame)."
  ((trans  vector  :inline)
   (rot    vector  :inline)
   (scale  vector  :inline)
   )
  )

;; definition for method 3 of type transform
(defmethod inspect ((this transform))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'transform)
  (format #t "~1Ttrans: ~`vector`P~%" (-> this trans))
  (format #t "~1Trot: ~`vector`P~%" (-> this rot))
  (format #t "~1Tscale: ~`vector`P~%" (-> this scale))
  (label cfg-4)
  this
  )

;; definition of type trs
(deftype trs (basic)
  "Like transform, but it's a basic.
Note that the trsq child type overrides this rotation with a quaternion.
usage of the plain trs is very limited, at least in Jak 1."
  ((trans  vector  :inline)
   (rot    vector  :inline)
   (scale  vector  :inline)
   )
  (:methods
    (new (symbol type) _type_)
    )
  )

;; definition for method 3 of type trs
(defmethod inspect ((this trs))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Ttrans: ~`vector`P~%" (-> this trans))
  (format #t "~1Trot: ~`vector`P~%" (-> this rot))
  (format #t "~1Tscale: ~`vector`P~%" (-> this scale))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




