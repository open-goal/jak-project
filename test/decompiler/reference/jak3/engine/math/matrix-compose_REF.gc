;;-*-Lisp-*-
(in-package goal)

;; definition for function matrix-fur-compose
;; INFO: Used lq/sq
(defun matrix-fur-compose ((arg0 matrix) (arg1 vector) (arg2 vector) (arg3 vector))
  (vector-copy! (-> arg0 rvec) arg3)
  (vector-copy! (-> arg0 uvec) arg2)
  (vector-copy! (-> arg0 fvec) arg1)
  arg0
  )

;; definition for function matrix-fu-compose
;; INFO: Used lq/sq
(defun matrix-fu-compose ((arg0 matrix) (arg1 vector) (arg2 vector))
  (vector-copy! (-> arg0 fvec) arg1)
  (vector-copy! (-> arg0 uvec) arg2)
  (vector-cross! (-> arg0 rvec) arg2 arg1)
  arg0
  )

;; definition for function matrix-fr-compose
;; INFO: Used lq/sq
(defun matrix-fr-compose ((arg0 matrix) (arg1 vector) (arg2 vector))
  (vector-copy! (-> arg0 fvec) arg1)
  (vector-copy! (-> arg0 rvec) arg2)
  (vector-cross! (-> arg0 uvec) arg1 arg2)
  arg0
  )

;; definition for function matrix-ur-compose
;; INFO: Used lq/sq
(defun matrix-ur-compose ((arg0 matrix) (arg1 vector) (arg2 vector) (arg3 vector))
  (vector-copy! (-> arg0 rvec) arg2)
  (vector-copy! (-> arg0 uvec) arg1)
  (vector-cross! (-> arg0 fvec) arg1 arg2)
  arg0
  )

;; definition for function matrix-f-u-compose
;; INFO: Used lq/sq
(defun matrix-f-u-compose ((arg0 matrix) (arg1 vector) (arg2 vector))
  (vector-copy! (-> arg0 fvec) arg1)
  (vector-cross! (-> arg0 rvec) arg2 arg1)
  (vector-normalize! (-> arg0 rvec) 1.0)
  (vector-cross! (-> arg0 uvec) arg1 (-> arg0 rvec))
  arg0
  )

;; definition for function matrix-f-r-compose
;; INFO: Used lq/sq
(defun matrix-f-r-compose ((arg0 matrix) (arg1 vector) (arg2 vector))
  (vector-copy! (-> arg0 fvec) arg1)
  (vector-cross! (-> arg0 uvec) arg1 arg2)
  (vector-normalize! (-> arg0 uvec) 1.0)
  (vector-cross! (-> arg0 rvec) (-> arg0 uvec) arg1)
  arg0
  )

;; definition for function matrix-u-f-compose
;; INFO: Used lq/sq
(defun matrix-u-f-compose ((arg0 matrix) (arg1 vector) (arg2 vector))
  (vector-copy! (-> arg0 uvec) arg1)
  (vector-cross! (-> arg0 rvec) arg1 arg2)
  (vector-normalize! (-> arg0 rvec) 1.0)
  (vector-cross! (-> arg0 fvec) (-> arg0 rvec) arg1)
  arg0
  )

;; definition for function matrix-u-r-compose
;; INFO: Used lq/sq
(defun matrix-u-r-compose ((arg0 matrix) (arg1 vector) (arg2 vector))
  (vector-copy! (-> arg0 uvec) arg1)
  (vector-cross! (-> arg0 fvec) arg2 arg1)
  (vector-normalize! (-> arg0 fvec) 1.0)
  (vector-cross! (-> arg0 rvec) arg1 (-> arg0 fvec))
  arg0
  )

;; definition for function matrix-r-f-compose
;; INFO: Used lq/sq
(defun matrix-r-f-compose ((arg0 matrix) (arg1 vector) (arg2 vector) (arg3 vector))
  (vector-copy! (-> arg0 rvec) arg1)
  (vector-cross! (-> arg0 uvec) arg2 arg1)
  (vector-normalize! (-> arg0 uvec) 1.0)
  (vector-cross! (-> arg0 fvec) arg1 (-> arg0 uvec))
  arg0
  )

;; definition for function matrix-r-u-compose
;; INFO: Used lq/sq
(defun matrix-r-u-compose ((arg0 matrix) (arg1 vector) (arg2 vector) (arg3 vector))
  (vector-copy! (-> arg0 rvec) arg1)
  (vector-cross! (-> arg0 fvec) arg1 arg2)
  (vector-normalize! (-> arg0 fvec) 1.0)
  (vector-cross! (-> arg0 uvec) (-> arg0 fvec) arg1)
  arg0
  )

;; definition for function matrix-f-compose
;; INFO: Used lq/sq
(defun matrix-f-compose ((arg0 matrix) (arg1 vector))
  (vector-copy! (-> arg0 fvec) arg1)
  (let ((a2-0 (vector-get-unique! (new 'stack-no-clear 'vector) arg1)))
    (matrix-f-u-compose arg0 arg1 a2-0)
    )
  arg0
  )

;; definition for function matrix-u-compose
;; INFO: Used lq/sq
(defun matrix-u-compose ((arg0 matrix) (arg1 vector) (arg2 vector) (arg3 vector))
  (vector-copy! (-> arg0 uvec) arg1)
  (let ((a2-1 (vector-get-unique! (new 'stack-no-clear 'vector) arg1)))
    (matrix-u-f-compose arg0 arg1 a2-1)
    )
  arg0
  )

;; definition for function matrix-r-compose
;; INFO: Used lq/sq
(defun matrix-r-compose ((arg0 matrix) (arg1 vector) (arg2 vector) (arg3 vector))
  (vector-copy! (-> arg0 rvec) arg1)
  (let ((a2-1 (vector-get-unique! (new 'stack-no-clear 'vector) arg1)))
    (matrix-r-f-compose arg0 arg1 a2-1 arg3)
    )
  arg0
  )
