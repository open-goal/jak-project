;;-*-Lisp-*-
(in-package goal)

;; definition of type bounding-box
(deftype bounding-box (structure)
  ((min  vector  :inline)
   (max  vector  :inline)
   )
  (:methods
    (add-spheres! (_type_ (inline-array sphere) int) int)
    (add-box! (_type_ bounding-box) int)
    (add-point! (_type_ vector) none)
    (intersects-line-segment? (_type_ vector vector) symbol)
    (set-from-point-offset! (_type_ vector vector) none)
    (set-from-point-offset-pad! (_type_ vector vector float) int)
    (set-to-point! (_type_ vector) none)
    (set-from-sphere! (_type_ sphere) none)
    (set-from-spheres! (_type_ (inline-array sphere) int) int)
    (get-bounding-sphere (_type_ vector) vector)
    (inside-xyz? (bounding-box vector) symbol)
    (inside-xz? (bounding-box vector) symbol)
    )
  )

;; definition for method 3 of type bounding-box
(defmethod inspect ((this bounding-box))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bounding-box)
  (format #t "~1Tmin: ~`vector`P~%" (-> this min))
  (format #t "~1Tmax: ~`vector`P~%" (-> this max))
  (label cfg-4)
  this
  )

;; definition of type bounding-box2
(deftype bounding-box2 (structure)
  ((min  vector2  :inline)
   (max  vector2  :inline)
   )
  )

;; definition for method 3 of type bounding-box2
(defmethod inspect ((this bounding-box2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bounding-box2)
  (format #t "~1Tmin: #<vector2 @ #x~X>~%" (-> this min))
  (format #t "~1Tmax: #<vector2 @ #x~X>~%" (-> this max))
  (label cfg-4)
  this
  )

;; definition of type bounding-box4w
(deftype bounding-box4w (structure)
  ((min  vector4w  :inline)
   (max  vector4w  :inline)
   )
  )

;; definition for method 3 of type bounding-box4w
(defmethod inspect ((this bounding-box4w))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bounding-box4w)
  (format #t "~1Tmin: ~`vector4w`P~%" (-> this min))
  (format #t "~1Tmax: ~`vector4w`P~%" (-> this max))
  (label cfg-4)
  this
  )

;; definition of type bounding-box-both
(deftype bounding-box-both (structure)
  ((box    bounding-box    :inline)
   (box4w  bounding-box4w  :inline)
   )
  )

;; definition for method 3 of type bounding-box-both
(defmethod inspect ((this bounding-box-both))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'bounding-box-both)
  (format #t "~1Tbox: #<bounding-box @ #x~X>~%" (-> this box))
  (format #t "~1Tbox4w: #<bounding-box4w @ #x~X>~%" (-> this box4w))
  (label cfg-4)
  this
  )

;; definition of type bounding-box-array
(deftype bounding-box-array (inline-array-class)
  ((data  bounding-box  :dynamic)
   )
  )

;; definition for method 3 of type bounding-box-array
(defmethod inspect ((this bounding-box-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> bounding-box-array heap-base) (the-as uint 32))




