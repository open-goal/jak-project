;;-*-Lisp-*-
(in-package goal)

;; definition of type flut-info
(deftype flut-info (basic)
  ((entity            entity-actor)
   (flut-trans        vector      :inline)
   (flut-quat         vector      :inline)
   (flut-scale        vector      :inline)
   (prev-quat         quaternion  :inline)
   (stick-lock        symbol)
   (flap-sound-id     uint32)
   (mode-sound-bank   connection)
   (mode              basic)
   (color-index       int32)
   (as-daxter?        symbol)
   (art-group-backup  art-group)
   (flut-start-time   time-frame)
   (wild-turn-time    time-frame)
   (wild-turn-rate    degrees)
   (attack-id         uint32)
   )
  )

;; definition for method 3 of type flut-info
(defmethod inspect ((this flut-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Tflut-trans: ~`vector`P~%" (-> this flut-trans))
  (format #t "~1Tflut-quat: ~`vector`P~%" (-> this flut-quat))
  (format #t "~1Tflut-scale: ~`vector`P~%" (-> this flut-scale))
  (format #t "~1Tprev-quat: #<quaternion @ #x~X>~%" (-> this prev-quat))
  (format #t "~1Tstick-lock: ~A~%" (-> this stick-lock))
  (format #t "~1Tflap-sound-id: ~D~%" (-> this flap-sound-id))
  (format #t "~1Tmode-sound-bank: #<connection @ #x~X>~%" (-> this mode-sound-bank))
  (format #t "~1Tmode: ~A~%" (-> this mode))
  (format #t "~1Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~1Tas-daxter?: ~A~%" (-> this as-daxter?))
  (format #t "~1Tart-group-backup: ~A~%" (-> this art-group-backup))
  (format #t "~1Tflut-start-time: ~D~%" (-> this flut-start-time))
  (format #t "~1Twild-turn-time: ~D~%" (-> this wild-turn-time))
  (format #t "~1Twild-turn-rate: (deg ~r)~%" (-> this wild-turn-rate))
  (format #t "~1Tattack-id: ~D~%" (-> this attack-id))
  (label cfg-4)
  this
  )

;; definition of type flut
(deftype flut (process-focusable)
  ((root               collide-shape-moving :override)
   (extra-trans        vector                :inline)
   (condition          int32)
   (shadow-backup      shadow-geo)
   (rider              handle)
   (nav-sphere-handle  handle)
   (probe-time         time-frame)
   (count-lock         symbol)
   (flags              flut-flag)
   (mode               symbol)
   (color-index        int32)
   (minimap            connection-minimap)
   )
  (:state-methods
    wait-for-start
    idle
    (pickup (state flut))
    wait-for-return
    die
    )
  (:methods
    (flut-method-33 (_type_) symbol)
    (spawn-part-and-sound! (_type_) none)
    )
  )

;; definition for method 3 of type flut
(defmethod inspect ((this flut))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Textra-trans: ~`vector`P~%" (-> this extra-trans))
  (format #t "~2Tcondition: ~D~%" (-> this condition))
  (format #t "~2Tshadow-backup: ~A~%" (-> this shadow-backup))
  (format #t "~2Trider: ~D~%" (-> this rider))
  (format #t "~2Tnav-sphere-handle: ~D~%" (-> this nav-sphere-handle))
  (format #t "~2Tprobe-time: ~D~%" (-> this probe-time))
  (format #t "~2Tcount-lock: ~A~%" (-> this count-lock))
  (format #t "~2Tflags: ~D~%" (-> this flags))
  (format #t "~2Tmode: ~A~%" (-> this mode))
  (format #t "~2Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-flut flut-saddle flut-saddle-lod0-jg -1
              ((flut-saddle-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.5)
              :shadow flut-saddle-shadow-mg
              :sort 1
              )

;; failed to figure out what this is:
0
