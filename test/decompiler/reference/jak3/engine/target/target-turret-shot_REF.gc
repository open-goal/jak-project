;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpart 1013
  :init-specs ((:texture (gun-yellow-beam level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 0.4))
    (:scale-y (meters 9))
    (:r 128.0)
    (:g 0.0 64.0)
    (:b 0.0)
    (:a 128.0)
    (:scalevel-x (meters 0.0016666667))
    (:fade-a -2.1333334)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-turret-shot-hit
  :id 234
  :duration (seconds 1)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1014 :flags (sp6) :period (seconds 2) :length (seconds 0.017))
    (sp-item 1015 :flags (sp6) :period (seconds 2) :length (seconds 0.017))
    (sp-item 1016 :flags (sp6) :period (seconds 2) :length (seconds 0.017))
    (sp-item 1017 :period (seconds 2) :length (seconds 0.017))
    )
  )

;; failed to figure out what this is:
(defpart 1015
  :init-specs ((:texture (glow level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0)
    (:b 32.0 8.0)
    (:a 24.0)
    (:scalevel-x (meters 0.12857144))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -3.6571429)
    (:fade-b -0.9142857)
    (:timer (seconds 0.267))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 glow))
    (:userdata 4096.0)
    (:next-time (seconds 0.117))
    (:next-launcher 1018)
    )
  )

;; failed to figure out what this is:
(defpart 1018
  :init-specs ((:scale-x (meters 4.5))
    (:scale-y :copy scale-x)
    (:scalevel-x (meters -0.08888889))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -3.1111112)
    (:fade-b 0.0)
    (:fade-a -1.0666667)
    )
  )

;; failed to figure out what this is:
(defpart 1014
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.5))
    (:rot-x (degrees 0.5625))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0)
    (:b 255.0)
    (:a 64.0)
    (:scalevel-x (meters 0.16666667))
    (:rotvel-z (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    (:next-time (seconds 0.05))
    (:next-launcher 1019)
    )
  )

;; failed to figure out what this is:
(defpart 1019
  :init-specs ((:scale-x (meters 3.5))
    (:scale-y :copy scale-x)
    (:scalevel-x (meters -0.025))
    (:scalevel-y :copy scalevel-x)
    (:fade-b -6.375)
    (:next-time (seconds 0.135))
    (:next-launcher 1020)
    )
  )

;; failed to figure out what this is:
(defpart 1020
  :init-specs ((:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:scalevel-x (meters -0.025))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -1.6)
    (:fade-b 0.0)
    (:fade-a -1.6)
    )
  )

;; failed to figure out what this is:
(defpart 1016
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3) (meters 0.4))
    (:rot-x (degrees 1.125))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 0.0)
    (:a 64.0)
    (:scalevel-x (meters 0.075))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -1.8285714)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 1017
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 6.0 6.0)
    (:scale-x (meters 1.25) (meters 1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 0.0)
    (:a 16.0 48.0)
    (:vel-y (meters 0.026666667) (meters 0.026666667))
    (:scalevel-x (meters 0.0016666667) (meters 0.006666667))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.30476192)
    (:fade-g 0.15238096)
    (:fade-b 0.30476192)
    (:fade-a -0.15238096)
    (:accel-y (meters -0.00016666666) (meters -0.00016666666))
    (:friction 0.9)
    (:timer (seconds 1.4))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1021
  :init-specs ((:texture (radial-gradient level-default-sprite))
    (:num 4.0 4.0)
    (:z (meters 0) (meters -3))
    (:scale-x (meters 0.8) (meters 0.4))
    (:scale-y (meters 0.8) (meters 0.4))
    (:r 192.0)
    (:g 64.0 128.0)
    (:b 0.0)
    (:a 64.0)
    (:scalevel-x (meters -0.00234375))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -1.2 -2.4)
    (:fade-a -1.6 -6.4)
    (:accel-y (meters -0.00016666666) (meters -0.00016666666))
    (:timer (seconds 0.8))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; definition of type turret-shot
(deftype turret-shot (guard-shot)
  ((hit-pos  vector  :inline)
   )
  )

;; definition for method 3 of type turret-shot
(defmethod inspect ((this turret-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type guard-shot inspect)))
    (t9-0 this)
    )
  (format #t "~2Thit-pos: #<vector @ #x~X>~%" (-> this hit-pos))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate impact (turret-shot)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (let* ((s4-0 proc)
              (v1-1 (if (type? s4-0 process-drawable)
                        s4-0
                        )
                    )
              )
         (when v1-1
           (-> (the-as process-drawable v1-1) root)
           (send-event
             proc
             'attack
             (-> block param 0)
             (static-attack-info :mask (vehicle-impulse-factor) ((id (-> self attack-id))
                                                                 (damage (-> self damage))
                                                                 (vehicle-damage-factor 1.0)
                                                                 (vehicle-impulse-factor 1.0)
                                                                 (mode 'explode)
                                                                 )
                                 )
             )
           )
         )
       )
      (else
        (projectile-event-handler proc argc message block)
        )
      )
    )
  :code (behavior ()
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> (the-as collide-shape-prim-group v1-1) child 0 prim-core world-sphere w) 4915.2)
      )
    (let ((a1-0 (new 'stack-no-clear 'overlaps-others-params)))
      (set! (-> a1-0 options) (overlaps-others-options))
      (set! (-> a1-0 collide-with-filter) (the-as collide-spec -1))
      (set! (-> a1-0 tlist) *touching-list*)
      (find-overlapping-shapes (-> self root) a1-0)
      )
    (suspend)
    (go-virtual die)
    )
  )

;; definition for method 25 of type turret-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this turret-shot))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((gp-0 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) gp-0 a1-0))
           (f30-0 (vector-length s5-1))
           )
      (let ((s4-0 (new 'stack-no-clear 'vector)))
        (let ((v1-4 a1-0))
          (let ((a0-2 s5-1))
            (let ((a2-1 0.8))
              (.mov vf7 a2-1)
              )
            (.lvf vf5 (&-> a0-2 quad))
            )
          (.lvf vf4 (&-> v1-4 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s4-0 quad) vf6)
        (let ((f28-0 (-> *part-id-table* 1013 init-specs 4 initial-valuef)))
          (set! (-> *part-id-table* 1013 init-specs 4 initial-valuef) (vector-length s5-1))
          (draw-beam (-> *part-id-table* 1013) a1-0 s5-1 #f)
          (set! (-> *part-id-table* 1013 init-specs 4 initial-valuef) f28-0)
          )
        (vector-normalize! s5-1 1.0)
        (launch-particles (-> *part-id-table* 851) s4-0)
        (launch-particles (-> *part-id-table* 852) s4-0)
        )
      (let ((s4-1 (new 'stack-no-clear 'matrix))
            (f26-0 (* 0.000027126736 f30-0))
            (f30-1 (-> *part-id-table* 1021 init-specs 3 initial-valuef))
            (f28-1 (-> *part-id-table* 1021 init-specs 4 initial-valuef))
            )
        (forward-up->inv-matrix s4-1 s5-1 *up-vector*)
        (set! (-> s4-1 trans quad) (-> gp-0 quad))
        (set! (-> *part-id-table* 1021 init-specs 3 initial-valuef) (* f26-0 f30-1))
        (set! (-> *part-id-table* 1021 init-specs 4 initial-valuef) (* f26-0 f28-1))
        (launch-particles (-> *part-id-table* 1021) s4-1 :origin-is-matrix #t)
        (set! (-> *part-id-table* 1021 init-specs 3 initial-valuef) f30-1)
        (set! (-> *part-id-table* 1021 init-specs 4 initial-valuef) f28-1)
        )
      )
    0
    (none)
    )
  )

;; definition for method 26 of type turret-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-26 ((this turret-shot))
  (let* ((gp-0 (-> this root))
         (a0-3 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this tail-pos) (-> gp-0 trans)) 2048.0))
         (v1-2 (new 'stack-no-clear 'vector))
         )
    (set! (-> v1-2 quad) (-> gp-0 trans quad))
    (vector+! v1-2 v1-2 a0-3)
    (cond
      ((logtest? (-> *part-group-id-table* 234 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> v1-2 quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 234))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> v1-2 quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 234))
        )
      )
    )
  0
  (none)
  )

;; definition for method 28 of type turret-shot
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this turret-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "for-turret-fire" :position (-> this root trans))
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "for-turret-hit")
       )
      )
    )
  0
  (none)
  )

;; definition for method 31 of type turret-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch projectile-options vs none.
(defmethod init-proj-settings! ((this turret-shot))
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
  (set! (-> this attack-mode) 'eco-yellow)
  (set! (-> this max-speed) 1228800.0)
  (set! (-> this move) guard-shot-move)
  (set! (-> this damage) 1.0)
  (set! (-> this vehicle-impulse-factor) 2.0)
  (logior! (-> this options) (projectile-options po13))
  (none)
  )

;; definition for method 30 of type turret-shot
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this turret-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              obstacle-for-jak
              )
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4915.2)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              obstacle-for-jak
              )
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec jak bot crate civilian enemy vehicle-sphere hit-by-others-list player-list obstacle-for-jak)
            )
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 7372.8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )




