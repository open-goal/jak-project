;;-*-Lisp-*-
(in-package goal)

;; definition of type gun
(deftype gun (process-drawable)
  ((self           gun              :override)
   (parent         (pointer target) :override)
   (control        control-info      :overlay-at root)
   (shadow-backup  shadow-geo        :offset 208)
   (read-scale     symbol)
   (gun-type       pickup-type)
   (barrel         joint-mod         2)
   (mag            joint-mod         4)
   (mag-scale      float             4)
   (extra          handle)
   )
  (:state-methods
    idle
    (use symbol)
    hidden
    die
    )
  )

;; definition for method 3 of type gun
(defmethod inspect ((this gun))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcontrol: ~A~%" (-> this root))
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (format #t "~2Tshadow-backup: ~A~%" (-> this shadow-backup))
  (format #t "~2Tread-scale: ~A~%" (-> this read-scale))
  (format #t "~2Tgun-type: ~D~%" (-> this gun-type))
  (format #t "~2Tbarrel[2] @ #x~X~%" (-> this barrel))
  (format #t "~2Tmag[4] @ #x~X~%" (-> this mag))
  (format #t "~2Tmag-scale[4] @ #x~X~%" (-> this mag-scale))
  (format #t "~2Textra: ~D~%" (-> this extra))
  (label cfg-4)
  this
  )

;; definition of type gun-info
(deftype gun-info (basic)
  ((process                 (pointer target))
   (gun                     (pointer gun))
   (gun-pos                 transformq     :inline)
   (gun-trans               vector         :inline :overlay-at (-> gun-pos trans))
   (gun-quat                quaternion     :inline :overlay-at (-> gun-pos rot data 0))
   (gun-scale               vector         :inline :overlay-at (-> gun-pos scale))
   (gun-type                pickup-type)
   (using-gun-type          pickup-type)
   (active?                 symbol)
   (latch?                  symbol)
   (put-away?               symbol)
   (surpress-time           time-frame)
   (fire-time               time-frame)
   (gun-delay-fire          float)
   (gun-time                time-frame)
   (gun-get-on-time         time-frame)
   (active-time             time-frame)
   (fire-delay              uint32)
   (gun-control             uint32)
   (gun-target              (pointer process-focusable))
   (gun-daxter              float)
   (gun-select-time         time-frame     4)
   (gun-roty-rel            degrees)
   (gun-roty                degrees)
   (gun-roty-targ           degrees)
   (hips                    joint-mod)
   (upper-body              joint-mod)
   (chest                   joint-mod)
   (strip                   prim-strip)
   (uv-slide                float)
   (fire-dir-rot            degrees)
   (fire-dir                vector         :inline)
   (unk-vec                 vector         :inline)
   (fire-point              vector         :inline :offset 256)
   (fire-dir-backup         vector         :inline)
   (fire-dir-out            vector         :inline)
   (fire-pending            int32)
   (fire-pending-time       time-frame)
   (fire-start-time         time-frame)
   (fire-charge             float)
   (fire-spin               degrees)
   (fire-spinv              degrees)
   (fire-chamber            int32)
   (fire-range              meters)
   (laser-active?           symbol)
   (laser-point             vector         :inline)
   (laser-dir               vector         :inline)
   (unk-vec00               vector         :inline)
   (laser-hit-point         vector         :inline :offset 400)
   (track?                  gun-track-flags)
   (track-tilt              degrees)
   (track-turn              degrees)
   (track-find-range        meters)
   (track-turnv-range       meters)
   (track-tilt-range        meters)
   (track-turn-range        meters)
   (track-tilt-max          degrees)
   (track-turn-max          degrees)
   (track-angle-mult        float)
   (track-beam-size         float)
   (track-auto-fire         symbol)
   (track-require           uint32)
   (track-target-hold-time  time-frame)
   (track-start-time        time-frame)
   (track-press-start-time  time-frame)
   (track-target            focus          2 :inline)
   (track-trans             vector         :inline)
   (track-dir               vector         :inline)
   (turn-fast-hold-time     time-frame)
   (blue-whine-sound-id     sound-id)
   (blue-whine-volume       float)
   (mode-sound-bank         connection)
   (top-anim-twist          vector         :inline)
   (top-anim-twist-targ     vector         :inline)
   (top-anim-look-at        vector         :inline)
   (top-anim-twist-reset    uint64)
   (top-anim-gun-height     meters)
   (top-anim-blue-cycle     float)
   (top-anim-low-high       float)
   (top-anim-extra-twistv   degrees)
   (top-anim-tilt-up        degrees)
   (attack-combo            combo-tracker  :inline)
   (combo-window-start      time-frame)
   (combo-window-state      symbol)
   (combo-fire-delay        uint32)
   (charge-ammo             float)
   (charge-start-time       time-frame)
   (charge-inc-time         time-frame)
   (charge-active?          handle)
   (part                    sparticle-launch-control)
   (ammo-required           float)
   )
  (:methods
    (gun-info-method-9 (_type_) vector)
    )
  )

;; definition for method 3 of type gun-info
(defmethod inspect ((this gun-info))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tprocess: #x~X~%" (-> this process))
  (format #t "~1Tgun: #x~X~%" (-> this gun))
  (format #t "~1Tgun-pos: #<transformq @ #x~X>~%" (-> this gun-pos))
  (format #t "~1Tgun-trans: ~`vector`P~%" (-> this gun-pos))
  (format #t "~1Tgun-quat: ~`vector`P~%" (-> this gun-pos quat))
  (format #t "~1Tgun-scale: ~`vector`P~%" (-> this gun-pos scale))
  (format #t "~1Tgun-type: #x~X : ~S~%" (-> this gun-type) (pickup-type->string (-> this gun-type)))
  (format
    #t
    "~1Tusing-gun-type: #x~X : ~S~%"
    (-> this using-gun-type)
    (pickup-type->string (-> this using-gun-type))
    )
  (format #t "~1Tactive?: ~A~%" (-> this active?))
  (format #t "~1Tlatch?: ~A~%" (-> this latch?))
  (format #t "~1Tput-away?: ~A~%" (-> this put-away?))
  (format #t "~1Tsurpress-time: ~D~%" (-> this surpress-time))
  (format #t "~1Tfire-time: ~D~%" (-> this fire-time))
  (format #t "~1Tgun-delay-fire: ~f~%" (-> this gun-delay-fire))
  (format #t "~1Tgun-time: ~D~%" (-> this gun-time))
  (format #t "~1Tgun-get-on-time: ~D~%" (-> this gun-get-on-time))
  (format #t "~1Tactive-time: ~D~%" (-> this active-time))
  (format #t "~1Tfire-delay: ~D~%" (-> this fire-delay))
  (format #t "~1Tgun-control: ~D~%" (-> this gun-control))
  (format #t "~1Tgun-target: ~D~%" (-> this gun-target))
  (format #t "~1Tgun-daxter: ~f~%" (-> this gun-daxter))
  (format #t "~1Tgun-select-time[4] @ #x~X~%" (-> this gun-select-time))
  (format #t "~1Tgun-roty-rel: (deg ~r)~%" (-> this gun-roty-rel))
  (format #t "~1Tgun-roty: (deg ~r)~%" (-> this gun-roty))
  (format #t "~1Tgun-roty-targ: (deg ~r)~%" (-> this gun-roty-targ))
  (format #t "~1Thips: ~A~%" (-> this hips))
  (format #t "~1Tupper-body: ~A~%" (-> this upper-body))
  (format #t "~1Tchest: ~A~%" (-> this chest))
  (format #t "~1Tstrip: ~A~%" (-> this strip))
  (format #t "~1Tuv-slide: ~f~%" (-> this uv-slide))
  (format #t "~1Tfire-dir-rot: (deg ~r)~%" (-> this fire-dir-rot))
  (format #t "~1Tfire-dir: ~`vector`P~%" (-> this fire-dir))
  (format #t "~1Tfire-point: ~`vector`P~%" (-> this fire-point))
  (format #t "~1Tfire-dir-backup: ~`vector`P~%" (-> this fire-dir-backup))
  (format #t "~1Tfire-dir-out: ~`vector`P~%" (-> this fire-dir-out))
  (format #t "~1Tfire-pending: ~D~%" (-> this fire-pending))
  (format #t "~1Tfire-pending-time: ~D~%" (-> this fire-pending-time))
  (format #t "~1Tfire-start-time: ~D~%" (-> this fire-start-time))
  (format #t "~1Tfire-charge: ~f~%" (-> this fire-charge))
  (format #t "~1Tfire-spin: (deg ~r)~%" (-> this fire-spin))
  (format #t "~1Tfire-spinv: (deg ~r)~%" (-> this fire-spinv))
  (format #t "~1Tfire-chamber: ~D~%" (-> this fire-chamber))
  (format #t "~1Tfire-range: (meters ~m)~%" (-> this fire-range))
  (format #t "~1Tlaser-active?: ~A~%" (-> this laser-active?))
  (format #t "~1Tlaser-point: ~`vector`P~%" (-> this laser-point))
  (format #t "~1Tlaser-dir: ~`vector`P~%" (-> this laser-dir))
  (format #t "~1Tlaser-hit-point: ~`vector`P~%" (-> this laser-hit-point))
  (format #t "~1Ttrack?: ~D~%" (-> this track?))
  (format #t "~1Ttrack-tilt: (deg ~r)~%" (-> this track-tilt))
  (format #t "~1Ttrack-turn: (deg ~r)~%" (-> this track-turn))
  (format #t "~1Ttrack-find-range: (meters ~m)~%" (-> this track-find-range))
  (format #t "~1Ttrack-turnv-range: (meters ~m)~%" (-> this track-turnv-range))
  (format #t "~1Ttrack-tilt-range: (meters ~m)~%" (-> this track-tilt-range))
  (format #t "~1Ttrack-turn-range: (meters ~m)~%" (-> this track-turn-range))
  (format #t "~1Ttrack-tilt-max: (deg ~r)~%" (-> this track-tilt-max))
  (format #t "~1Ttrack-turn-max: (deg ~r)~%" (-> this track-turn-max))
  (format #t "~1Ttrack-angle-mult: ~f~%" (-> this track-angle-mult))
  (format #t "~1Ttrack-beam-size: ~f~%" (-> this track-beam-size))
  (format #t "~1Ttrack-auto-fire: ~A~%" (-> this track-auto-fire))
  (format #t "~1Ttrack-require: ~D~%" (-> this track-require))
  (format #t "~1Ttrack-target-hold-time: ~D~%" (-> this track-target-hold-time))
  (format #t "~1Ttrack-start-time: ~D~%" (-> this track-start-time))
  (format #t "~1Ttrack-press-start-time: ~D~%" (-> this track-press-start-time))
  (format #t "~1Ttrack-target[2] @ #x~X~%" (-> this track-target))
  (dotimes (s5-2 2)
    (format #t "~T  [~D]~1Ttrack-target: ~`focus`P~%" s5-2 (-> this track-target s5-2))
    )
  (format #t "~1Ttrack-trans: ~`vector`P~%" (-> this track-trans))
  (format #t "~1Ttrack-dir: ~`vector`P~%" (-> this track-dir))
  (format #t "~1Tturn-fast-hold-time: ~D~%" (-> this turn-fast-hold-time))
  (format #t "~1Tblue-whine-sound-id: ~D~%" (-> this blue-whine-sound-id))
  (format #t "~1Tblue-whine-volume: ~f~%" (-> this blue-whine-volume))
  (format #t "~1Tmode-sound-bank: #<connection @ #x~X>~%" (-> this mode-sound-bank))
  (format #t "~1Ttop-anim-twist: ~`vector`P~%" (-> this top-anim-twist))
  (format #t "~1Ttop-anim-twist-targ: ~`vector`P~%" (-> this top-anim-twist-targ))
  (format #t "~1Ttop-anim-look-at: ~`vector`P~%" (-> this top-anim-look-at))
  (format #t "~1Ttop-anim-twist-reset: ~D~%" (-> this top-anim-twist-reset))
  (format #t "~1Ttop-anim-gun-height: (meters ~m)~%" (-> this top-anim-gun-height))
  (format #t "~1Ttop-anim-blue-cycle: ~f~%" (-> this top-anim-blue-cycle))
  (format #t "~1Ttop-anim-low-high: ~f~%" (-> this top-anim-low-high))
  (format #t "~1Ttop-anim-extra-twistv: (deg ~r)~%" (-> this top-anim-extra-twistv))
  (format #t "~1Ttop-anim-tilt-up: (deg ~r)~%" (-> this top-anim-tilt-up))
  (format #t "~1Tattack-combo: #<combo-tracker @ #x~X>~%" (-> this attack-combo))
  (format #t "~1Tcombo-window-start: ~D~%" (-> this combo-window-start))
  (format #t "~1Tcombo-window-state: ~A~%" (-> this combo-window-state))
  (format #t "~1Tcombo-fire-delay: ~D~%" (-> this combo-fire-delay))
  (format #t "~1Tcharge-ammo: ~f~%" (-> this charge-ammo))
  (format #t "~1Tcharge-start-time: ~D~%" (-> this charge-start-time))
  (format #t "~1Tcharge-inc-time: ~D~%" (-> this charge-inc-time))
  (format #t "~1Tcharge-active?: ~D~%" (-> this charge-active?))
  (format #t "~1Tpart: ~A~%" (-> this part))
  (format #t "~1Tammo-required: ~f~%" (-> this ammo-required))
  (label cfg-7)
  this
  )

;; definition for function using-gun?
(defun using-gun? ((arg0 target))
  (nonzero? (-> arg0 gun gun-type))
  )

;; definition for function enabled-gun?
(defun enabled-gun? ((arg0 target))
  (nonzero? (-> arg0 gun using-gun-type))
  )

;; definition for function gun->ammo
;; WARN: Return type mismatch int vs pickup-type.
(defun gun->ammo ((arg0 pickup-type))
  (let ((v1-0 arg0))
    (the-as pickup-type (cond
                          ((or (= v1-0 (pickup-type eco-yellow))
                               (= v1-0 (pickup-type gun-yellow-1))
                               (= v1-0 (pickup-type gun-yellow-2))
                               (= v1-0 (pickup-type gun-yellow-3))
                               )
                           (the-as pickup-type (pickup-type ammo-yellow))
                           )
                          ((or (= v1-0 (pickup-type eco-red))
                               (= v1-0 (pickup-type gun-red-1))
                               (= v1-0 (pickup-type gun-red-2))
                               (= v1-0 (pickup-type gun-red-3))
                               )
                           (the-as pickup-type (pickup-type ammo-red))
                           )
                          ((or (= v1-0 (pickup-type eco-blue))
                               (= v1-0 (pickup-type gun-blue-1))
                               (= v1-0 (pickup-type gun-blue-2))
                               (= v1-0 (pickup-type gun-blue-3))
                               )
                           (the-as pickup-type (pickup-type ammo-blue))
                           )
                          ((or (= v1-0 (pickup-type eco-dark))
                               (= v1-0 (pickup-type gun-dark-1))
                               (= v1-0 (pickup-type gun-dark-2))
                               (= v1-0 (pickup-type gun-dark-3))
                               )
                           (the-as pickup-type (pickup-type ammo-dark))
                           )
                          (else
                            (the-as pickup-type (pickup-type none))
                            )
                          )
            )
    )
  )

;; definition for function gun->eco
;; WARN: Return type mismatch int vs pickup-type.
(defun gun->eco ((arg0 pickup-type))
  (let ((v1-0 arg0))
    (the-as pickup-type (cond
                          ((or (= v1-0 (pickup-type eco-yellow))
                               (= v1-0 (pickup-type gun-yellow-1))
                               (= v1-0 (pickup-type gun-yellow-2))
                               (= v1-0 (pickup-type gun-yellow-3))
                               )
                           (the-as pickup-type (pickup-type eco-yellow))
                           )
                          ((or (= v1-0 (pickup-type eco-red))
                               (= v1-0 (pickup-type gun-red-1))
                               (= v1-0 (pickup-type gun-red-2))
                               (= v1-0 (pickup-type gun-red-3))
                               )
                           (the-as pickup-type (pickup-type eco-red))
                           )
                          ((or (= v1-0 (pickup-type eco-blue))
                               (= v1-0 (pickup-type gun-blue-1))
                               (= v1-0 (pickup-type gun-blue-2))
                               (= v1-0 (pickup-type gun-blue-3))
                               )
                           (the-as pickup-type (pickup-type eco-blue))
                           )
                          ((or (= v1-0 (pickup-type eco-dark))
                               (= v1-0 (pickup-type gun-dark-1))
                               (= v1-0 (pickup-type gun-dark-2))
                               (= v1-0 (pickup-type gun-dark-3))
                               )
                           (the-as pickup-type (pickup-type eco-dark))
                           )
                          (else
                            (the-as pickup-type (pickup-type none))
                            )
                          )
            )
    )
  )

;; definition for method 12 of type fact-info-target
(defmethod get-gun-ammo ((this fact-info-target))
  (let ((v1-2 (gun->ammo (-> this process gun gun-type))))
    (if (= v1-2 (pickup-type none))
        0.0
        (-> this process game gun-ammo (+ v1-2 -15))
        )
    )
  )

;; definition of type beam-info
(deftype beam-info (structure)
  ((y-scale  float)
   )
  )

;; definition for method 3 of type beam-info
(defmethod inspect ((this beam-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'beam-info)
  (format #t "~1Ty-scale: ~f~%" (-> this y-scale))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-gun gun gun-lod0-jg -1
              ((gun-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1.5)
              :shadow gun-shadow-mg
              :sort 1
              :origin-joint-index 3
              )

;; definition for symbol *gun-shadow-control*, type shadow-control
(define *gun-shadow-control*
  (new 'static 'shadow-control :settings (new 'static 'shadow-settings
                                           :center (new 'static 'vector :w (the-as float #xa))
                                           :shadow-dir (new 'static 'vector :y -1.0 :w 614400.0)
                                           :bot-plane (new 'static 'plane :y 1.0 :w 81920.0)
                                           :top-plane (new 'static 'plane :y 1.0 :w 2048.0)
                                           )
                               )
  )

;; failed to figure out what this is:
(defskelgroup skel-ammo-yellow gun gun-ammo-yellow-lod0-jg gun-ammo-idle-ja
              ((gun-ammo-yellow-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :texture-level 10
              :sort 1
              )

;; failed to figure out what this is:
(defskelgroup skel-ammo-red gun gun-ammo-red-lod0-jg gun-ammo-idle-ja
              ((gun-ammo-red-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :texture-level 10
              :sort 1
              )

;; failed to figure out what this is:
(defskelgroup skel-ammo-blue gun gun-ammo-blue-lod0-jg gun-ammo-idle-ja
              ((gun-ammo-blue-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :texture-level 10
              :sort 1
              )

;; failed to figure out what this is:
(defskelgroup skel-ammo-dark gun gun-ammo-dark-lod0-jg gun-ammo-idle-ja
              ((gun-ammo-dark-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :texture-level 10
              :sort 1
              )

;; failed to figure out what this is:
(defskelgroup skel-gun-red-cone gun gun-red-cone-lod0-jg gun-red-cone-idle-ja
              ((gun-red-cone-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :texture-level 10
              )
