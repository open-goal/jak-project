;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpart 2893
  :init-specs ((:texture (gun-yellow-beam level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 30))
    (:r 0.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.0033333334))
    (:fade-a -3.2)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    )
  )

;; failed to figure out what this is:
(defpart 2894
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 8) (meters 1))
    (:rot-x (degrees 4.5))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 255.0)
    (:b 0.0)
    (:a 16.0)
    (:omega (degrees 6763.5))
    (:fade-a -0.3)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    )
  )

;; failed to figure out what this is:
(defpart 2895
  :init-specs ((:texture (radial-gradient-yellow level-default-sprite))
    (:num 4.0 8.0)
    (:z (meters 0) (meters -4))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0)
    (:scalevel-x (meters -0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.6)
    (:fade-g 0.8)
    (:fade-b 1.6)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2896
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 5))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:scalevel-x (meters 0.05))
    (:fade-r -3.6571429)
    (:fade-b -3.6571429)
    (:fade-a -3.6571429)
    (:timer (seconds 0.117))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-gun-warf-shot-hit
  :id 776
  :duration (seconds 1.5)
  :linger-duration (seconds 0.5)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2897 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2898 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2899 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 2900 :period (seconds 30) :length (seconds 0.167))
    )
  )

;; failed to figure out what this is:
(defpart 2897
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 255.0)
    (:b 32.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 2898
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 1) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 120.0)
    (:g 255.0)
    (:b 40.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.016666668))
    (:scalevel-x (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.4)
    (:fade-b -0.13333334)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.93)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2899
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 15))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 60.0)
    (:g 128.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 2900
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 1) (meters 0.5))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 80.0 20.0)
    (:g 128.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.006666667) (meters 0.006666667))
    (:scalevel-x (meters 0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.26666668)
    (:fade-b -0.1)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.99)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; definition of type warf-explosion-sphere
(deftype warf-explosion-sphere (process-drawable)
  ((current-alpha  float)
   (expanding?     symbol  :offset 216)
   )
  (:state-methods
    active
    )
  (:methods
    (warf-explosion-sphere-method-21 (_type_) none)
    (warf-explosion-sphere-method-22 (_type_) none)
    )
  )

;; definition for method 3 of type warf-explosion-sphere
(defmethod inspect ((this warf-explosion-sphere))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcurrent-alpha: ~f~%" (-> this current-alpha))
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (format #t "~2Texpanding?: ~A~%" (-> this expanding?))
  (label cfg-4)
  this
  )

;; definition of type warf-explosion-sphere-init-params
(deftype warf-explosion-sphere-init-params (structure)
  ((pos  vector  :inline)
   )
  )

;; definition for method 3 of type warf-explosion-sphere-init-params
(defmethod inspect ((this warf-explosion-sphere-init-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'warf-explosion-sphere-init-params)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-warf-explosion-sphere hemisplosion hemisplosion-lod0-jg hemisplosion-idle-ja
              ((hemisplosion-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition for function warf-explosion-sphere-init-by-other
;; INFO: Used lq/sq
(defbehavior warf-explosion-sphere-init-by-other warf-explosion-sphere ((arg0 warf-explosion-sphere-init-params))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self level) (level-get *level* 'factoryb))
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-warf-explosion-sphere" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (set! (-> self root trans quad) (-> arg0 pos quad))
  (quaternion-identity! (-> self root quat))
  (set! (-> self draw lod-set lod 0 dist) 14336000.0)
  (set! (-> self expanding?) #t)
  (go-virtual active)
  )

;; definition for function warf-explosion-sphere-event-handler
;; WARN: Return type mismatch symbol vs object.
(defbehavior warf-explosion-sphere-event-handler warf-explosion-sphere ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('dissapate)
     (set! (-> self expanding?) #f)
     #f
     )
    )
  )

;; failed to figure out what this is:
(defstate active (warf-explosion-sphere)
  :virtual #t
  :event warf-explosion-sphere-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
    )
  :trans (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (let* ((a2-0 (math-camera-matrix))
             (v1-0 (-> a2-0 rvec quad))
             (a0-0 (-> a2-0 uvec quad))
             (a1-0 (-> a2-0 fvec quad))
             (a2-1 (-> a2-0 trans quad))
             )
        (set! (-> gp-0 rvec quad) v1-0)
        (set! (-> gp-0 uvec quad) a0-0)
        (set! (-> gp-0 fvec quad) a1-0)
        (set! (-> gp-0 trans quad) a2-1)
        )
      (let ((a1-1 (-> gp-0 fvec))
            (v1-1 (-> gp-0 rvec))
            )
        (vector-float*! a1-1 a1-1 -1.0)
        (vector-float*! v1-1 v1-1 -1.0)
        )
      (matrix->quat gp-0 (-> self root quat))
      )
    (set! (-> self current-alpha) (* 0.008333334 (the float (- (current-time) (-> self state-time)))))
    (let ((f0-4 (-> self root scale x)))
      (if (-> self expanding?)
          (+! f0-4 (* 120.0 (seconds-per-frame)))
          )
      (set-vector! (-> self root scale) f0-4 f0-4 f0-4 1.0)
      (set! (-> self draw bounds w) (* 4505.6 f0-4))
      )
    (set-vector! (-> self draw color-mult) 0.0 0.0 0.0 1.0)
    (set-vector! (-> self draw color-emissive) 1.0 1.0 1.0 1.0)
    )
  :code (behavior ()
    (while (-> self expanding?)
      (suspend)
      )
    (let ((f30-0 1.0))
      (while (< 0.0 f30-0)
        (set! f30-0 (seek f30-0 0.0 (* 2.0 (seconds-per-frame))))
        (set-vector! (-> self draw color-emissive) f30-0 f30-0 f30-0 1.0)
        (suspend)
        )
      )
    (deactivate self)
    )
  :post (behavior ()
    (ja-post)
    )
  )

;; definition of type warf-projectile
(deftype warf-projectile (projectile)
  ((hit-actor?         symbol)
   (tail-pos           vector                    :inline)
   (hit-pos            vector                    :inline)
   (last-hit-time      time-frame)
   (snd-whoosh         sound-id)
   (muzzle-flash-part  sparticle-launch-control  :offset 576)
   )
  (:methods
    (warf-projectile-method-41 (_type_) none)
    (warf-projectile-method-42 (_type_ vector) none)
    (warf-projectile-method-43 (_type_) none)
    (send-attack (_type_ process-focusable) none)
    (warf-projectile-method-45 (_type_) none)
    )
  )

;; definition for method 3 of type warf-projectile
(defmethod inspect ((this warf-projectile))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Thit-actor?: ~A~%" (-> this hit-actor?))
  (format #t "~2Ttail-pos: #<vector @ #x~X>~%" (-> this tail-pos))
  (format #t "~2Thit-pos: #<vector @ #x~X>~%" (-> this hit-pos))
  (format #t "~2Tlast-hit-time: ~D~%" (-> this last-hit-time))
  (format #t "~2Tsnd-whoosh: ~D~%" (-> this snd-whoosh))
  (format #t "~2Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~2Tmuzzle-flash-part: ~A~%" (-> this muzzle-flash-part))
  (label cfg-4)
  this
  )

;; definition of type fac-gun-tower-projectile
(deftype fac-gun-tower-projectile (projectile)
  ((hit-actor?  symbol)
   (tail-pos    vector  :inline)
   )
  )

;; definition for method 3 of type fac-gun-tower-projectile
(defmethod inspect ((this fac-gun-tower-projectile))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Thit-actor?: ~A~%" (-> this hit-actor?))
  (format #t "~2Ttail-pos: #<vector @ #x~X>~%" (-> this tail-pos))
  (label cfg-4)
  this
  )

;; definition for function spawn-warf-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch (pointer process) vs projectile.
(defun spawn-warf-projectile ((arg0 process) (arg1 vector) (arg2 vector) (arg3 float))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg2 arg1)))
      (set! (-> gp-0 ent) (-> arg0 entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 pos quad) (-> arg1 quad))
      (set! (-> gp-0 notify-handle) (process->handle arg0))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle arg0))
      (let* ((a0-14 *game-info*)
             (a1-11 (+ (-> a0-14 attack-id) 1))
             )
        (set! (-> a0-14 attack-id) a1-11)
        (set! (-> gp-0 attack-id) a1-11)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (set! (-> gp-0 damage) 1.0)
      (logior! (-> gp-0 options) (projectile-options po14))
      (set! (-> gp-0 vehicle-damage-factor) 2.0)
      (logior! (-> gp-0 options) (projectile-options po15))
      (set! (-> gp-0 vehicle-impulse-factor) 2.0)
      (logior! (-> gp-0 options) (projectile-options po16))
      (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
      )
    (set! (-> gp-0 timeout) (the-as time-frame (the int (* 300.0 (/ 2457600.0 arg3)))))
    (the-as projectile (spawn-projectile warf-projectile gp-0 arg0 *default-dead-pool*))
    )
  )

;; definition for function spawn-fac-gun-tower-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch (pointer process) vs projectile.
(defun spawn-fac-gun-tower-projectile ((arg0 process) (arg1 vector) (arg2 vector) (arg3 float))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg2 arg1)))
      (set! (-> gp-0 ent) (-> arg0 entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 pos quad) (-> arg1 quad))
      (set! (-> gp-0 notify-handle) (process->handle arg0))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle arg0))
      (let* ((a0-14 *game-info*)
             (a1-11 (+ (-> a0-14 attack-id) 1))
             )
        (set! (-> a0-14 attack-id) a1-11)
        (set! (-> gp-0 attack-id) a1-11)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
      )
    (set! (-> gp-0 timeout) (the-as time-frame (the int (* 300.0 (/ 2457600.0 arg3)))))
    (the-as projectile (spawn-projectile fac-gun-tower-projectile gp-0 arg0 *default-dead-pool*))
    )
  )

;; definition for method 25 of type warf-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this warf-projectile))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((gp-0 (-> this root trans))
           (v1-1 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) gp-0 v1-1))
           (f30-0 (vector-length s5-1))
           )
      (let ((s3-0 (new 'stack-no-clear 'vector)))
        (let ((a0-4 s5-1))
          (let ((a1-2 0.8))
            (.mov vf7 a1-2)
            )
          (.lvf vf5 (&-> a0-4 quad))
          )
        (.lvf vf4 (&-> v1-1 quad))
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s3-0 quad) vf6)
        (vector-normalize! s5-1 1.0)
        (warf-projectile-method-42 this s3-0)
        )
      (let ((s4-1 (new 'stack-no-clear 'matrix)))
        (fmin 1.0 (* 0.0000061035157 f30-0))
        (-> *part-id-table* 2895 init-specs 3 initial-valuef)
        (forward-up->inv-matrix s4-1 s5-1 *up-vector*)
        (set! (-> s4-1 trans quad) (-> gp-0 quad))
        )
      )
    0
    (none)
    )
  )

;; definition for method 30 of type warf-projectile
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this warf-projectile))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd bot crate civilian obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec backgnd bot crate civilian obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

;; definition for method 45 of type warf-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod warf-projectile-method-45 ((this warf-projectile))
  (when (time-elapsed? (-> this spawn-time) (seconds 0.5))
    (set! (-> this hit-pos quad) (-> this root trans quad))
    (go (method-of-object this impact))
    )
  0
  (none)
  )

;; definition for function warf-projectile-move
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun warf-projectile-move ((arg0 warf-projectile))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 163840.0 f0-0)
          (vector-normalize! s4-0 163840.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (warf-projectile-method-45 arg0)
    (when (and (logtest? (-> s5-0 status) (collide-status touch-surface))
               (not (vector= (-> arg0 hit-pos) (-> arg0 root trans)))
               )
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (let ((v1-19 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
            (a1-6 (-> arg0 hit-pos))
            )
        (set! (-> a1-6 quad) (-> s5-0 trans quad))
        (vector+! a1-6 a1-6 v1-19)
        (move-to-point! (-> arg0 root) a1-6)
        )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

;; definition for method 44 of type warf-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod send-attack ((this warf-projectile) (arg0 process-focusable))
  (with-pp
    (let* ((v1-1 (get-trans arg0 3))
           (s4-1 (vector-! (new 'stack-no-clear 'vector) v1-1 (-> this root trans)))
           )
      (when (< (vector-length s4-1) (-> this hit-pos w))
        (when (not (type? arg0 h-warf))
          (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
            (set! (-> a1-3 from) (process->ppointer pp))
            (set! (-> a1-3 num-params) 2)
            (set! (-> a1-3 message) 'attack)
            (set! (-> a1-3 param 0) (the-as uint #f))
            (let ((v1-9 (new 'static 'attack-info :mask (attack-mask
                                                          trans
                                                          mode
                                                          id
                                                          penetrate-using
                                                          attacker-velocity
                                                          damage
                                                          vehicle-damage-factor
                                                          vehicle-impulse-factor
                                                          )
                                                  )
                        )
                  )
              (set! (-> v1-9 id) (-> this attack-id))
              (set! (-> v1-9 damage) 128.0)
              (set! (-> v1-9 vehicle-damage-factor) 1.0)
              (set! (-> v1-9 vehicle-impulse-factor) 0.0)
              (set! (-> v1-9 mode) 'explode)
              (set! (-> v1-9 attacker-velocity quad) (-> s4-1 quad))
              (set! (-> v1-9 trans quad) (-> this root trans quad))
              (set! (-> v1-9 penetrate-using) (penetrate explode enemy-yellow-shot))
              (set! (-> a1-3 param 1) (the-as uint v1-9))
              )
            (send-event-function arg0 a1-3)
            )
          )
        )
      )
    0
    (none)
    )
  )

;; definition for method 43 of type warf-projectile
;; WARN: Return type mismatch int vs none.
(defmethod warf-projectile-method-43 ((this warf-projectile))
  (let ((s5-0 (new 'stack-no-clear 'array 'collide-shape 384)))
    (countdown (s4-0 (fill-actor-list-for-box *actor-hash* (-> this hit-pos) s5-0 384))
      (let* ((s3-0 (-> s5-0 s4-0))
             (v1-3 (if (type? s3-0 collide-shape)
                       s3-0
                       )
                   )
             )
        (when v1-3
          (let* ((s3-1 (-> v1-3 process))
                 (a1-3 (if (type? s3-1 process-focusable)
                           s3-1
                           )
                       )
                 )
            (when a1-3
              (if (and (!= *target* a1-3)
                       (not (logtest? (-> (the-as process-focusable a1-3) focus-status) (focus-status disable dead inactive)))
                       )
                  (send-attack this (the-as process-focusable a1-3))
                  )
              )
            )
          )
        )
      )
    )
  (let* ((s4-1 *target*)
         (s5-1 (if (type? s4-1 process-focusable)
                   s4-1
                   )
               )
         )
    (when (and s5-1 (< (vector-vector-distance (get-trans s5-1 0) (-> this hit-pos)) (-> this hit-pos w)))
      (if (and (!= *target* s5-1) (not (logtest? (-> s5-1 focus-status) (focus-status disable dead inactive))))
          (send-attack this s5-1)
          )
      )
    )
  0
  (none)
  )

;; definition for method 40 of type warf-projectile
(defmethod projectile-method-40 ((this warf-projectile))
  128
  )

;; failed to figure out what this is:
(defstate impact (warf-projectile)
  :virtual #t
  :enter (behavior ()
    (local-vars (sv-32 int))
    (set! (-> self hit-pos w) 0.0)
    (kill-particles (-> self part))
    (let ((gp-0 (new 'stack-no-clear 'warf-explosion-sphere-init-params)))
      (set! (-> gp-0 pos quad) (-> self hit-pos quad))
      (let ((s5-0 sound-play-by-name)
            (sname (static-sound-name "impact-trigger2"))
            (s3-0 (new-sound-id))
            (s2-0 1024)
            (s1-0 0)
            (s0-0 0)
            )
        (set! sv-32 0)
        (let ((t2-0 (target-pos 0)))
          (s5-0 (the-as sound-name sname) s3-0 s2-0 s1-0 s0-0 (the-as sound-group sv-32) t2-0)
          )
        )
      (process-spawn warf-explosion-sphere gp-0 :name "warf-explosion-sphere" :to self)
      )
    (let ((t9-8 (-> (find-parent-state) enter)))
      (if t9-8
          (t9-8)
          )
      )
    )
  :code (behavior ()
    (while (< (-> self hit-pos w) 245760.0)
      (warf-projectile-method-43 self)
      (seek! (-> self hit-pos w) 245760.0 (* 491520.0 (seconds-per-frame)))
      (suspend)
      )
    (send-event (ppointer->process (-> self child)) 'dissapate)
    (while (-> self child)
      (suspend)
      )
    )
  )

;; definition for function spt-func-factory-move
;; WARN: Return type mismatch float vs none.
(defun spt-func-factory-move ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-2d))
  (let* ((v1-1 (-> arg1 key proc))
         (v1-3 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> v1-1 root quat)))
         )
    (vector-float*! v1-3 v1-3 (* (-> arg1 user-float) (seconds-per-frame)))
    (+! (-> arg2 x-y-z-sx x) (-> v1-3 x))
    (+! (-> arg2 x-y-z-sx y) (-> v1-3 y))
    (+! (-> arg2 x-y-z-sx z) (-> v1-3 z))
    )
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-fac-guntower-particle
  :id 777
  :duration (seconds 4)
  :linger-duration (seconds 4)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 2901 :flags (sp7))
    (sp-item 2902 :flags (sp7))
    (sp-item 2903 :flags (sp7))
    (sp-item 2904 :flags (sp7))
    )
  )

;; failed to figure out what this is:
(defpart 2901
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 80.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 2902
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 15))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 10.0)
    (:b 10.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 2903
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 3.0)
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 40.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 2904
  :init-specs ((:texture (diamond-star level-default-sprite))
    (:num 20.0)
    (:x (meters -2) (meters 4))
    (:y (meters -2) (meters 4))
    (:z (meters 0) (meters -20))
    (:scale-x (meters 0.5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 30.0 30.0)
    (:b 10.0)
    (:a 128.0)
    (:scalevel-x (meters -0.002) (meters -0.002))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters 0) (meters -0.00016666666))
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 launch-along-z))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-factory-vehicle-shot
  :id 778
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 100)
  :parts ((sp-item 2905 :flags (sp3 sp7))
    (sp-item 2906 :flags (sp3 sp7))
    (sp-item 2907 :flags (sp7))
    (sp-item 2908 :flags (sp7))
    )
  )

;; definition for method 31 of type warf-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this warf-projectile))
  (set! (-> this hit-actor?) #f)
  (set! (-> this hit-pos quad) (the-as uint128 0))
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (set! (-> this attack-mode) 'guard-shot)
  (set! (-> this max-speed) 327680.0)
  (set! (-> this move) warf-projectile-move)
  (logior! (-> this options) (projectile-options po13))
  (set! (-> this muzzle-flash-part) (the-as sparticle-launch-control (-> *part-id-table* 2896)))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 778) this))
  (let* ((v1-12 *game-info*)
         (a0-6 (+ (-> v1-12 attack-id) 1))
         )
    (set! (-> v1-12 attack-id) a0-6)
    (set! (-> this attack-id) a0-6)
    )
  0
  (none)
  )

;; definition for method 24 of type warf-projectile
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-24 ((this warf-projectile))
  (draw-beam
    (the-as sparticle-launcher (-> this muzzle-flash-part))
    (-> this tail-pos)
    (-> this starting-dir)
    #f
    )
  0
  (none)
  )

;; definition for method 41 of type warf-projectile
;; WARN: Return type mismatch int vs none.
(defmethod warf-projectile-method-41 ((this warf-projectile))
  0
  (none)
  )

;; failed to figure out what this is:
(defpart 2909
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 0.2))
    (:rot-x (degrees 4.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 128.0)
    (:a 196.0)
    (:omega (degrees 6763.5))
    (:fade-a -0.3)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpart 2905
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:rotvel-z (degrees -0.1))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'spt-func-factory-move)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2906
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:rotvel-z (degrees 0.1))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'spt-func-factory-move)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2907
  :init-specs ((:texture (colorflash level-default-sprite))
    (:num 8.0)
    (:x (meters 9))
    (:scale-x (meters 9))
    (:scale-y (meters 2))
    (:r 80.0)
    (:g 80.0)
    (:b 128.0)
    (:a 0.0)
    (:scalevel-x (meters -0.03))
    (:accel-x (meters -0.0016666667))
    (:friction 0.98 0.01)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'spt-func-part-crystal-torpedo-in)
    (:next-time (seconds 0.017))
    (:next-launcher 2910)
    (:rotate-x (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2910
  :init-specs ((:fade-a 1.28) (:next-time (seconds 0.167)) (:next-launcher 2911))
  )

;; failed to figure out what this is:
(defpart 2911
  :init-specs ((:fade-a -1.28))
  )

;; definition for function spt-func-part-crystal-torpedo-in
(defun spt-func-part-crystal-torpedo-in ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-2d))
  (spt-func-factory-move arg0 arg1 arg2)
  (sparticle-2d-spline-align-instant arg0 arg1 arg2)
  (none)
  )

;; failed to figure out what this is:
(defpart 2908
  :init-specs ((:texture (colorflash level-default-sprite))
    (:num 4.0)
    (:x (meters 1))
    (:scale-x (meters 0.1))
    (:scale-y (meters 2))
    (:r 80.0)
    (:g 80.0)
    (:b 128.0)
    (:a 0.0)
    (:scalevel-x (meters 0))
    (:accel-x (meters 0.006666667))
    (:friction 0.99 0.01)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:func 'spt-func-part-crystal-torpedo-out)
    (:next-time (seconds 0.017))
    (:next-launcher 2912)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-x (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2912
  :init-specs ((:scalevel-x (meters 0.033333335))
    (:fade-a 1.28)
    (:friction 0.93 0.01)
    (:next-time (seconds 0.167))
    (:next-launcher 2913)
    )
  )

;; failed to figure out what this is:
(defpart 2913
  :init-specs ((:fade-a -1.28))
  )

;; definition for function spt-func-part-crystal-torpedo-out
(defun spt-func-part-crystal-torpedo-out ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sprite-vec-data-2d))
  (spt-func-factory-move arg0 arg1 arg2)
  (sparticle-2d-spline-align-instant arg0 arg1 arg2)
  (none)
  )

;; definition for method 42 of type warf-projectile
;; WARN: Return type mismatch int vs none.
(defmethod warf-projectile-method-42 ((this warf-projectile) (arg0 vector))
  (the int (* 255.0 (/ (the float (- (current-time) (-> this spawn-time))) (the float (-> this timeout)))))
  (set! (-> *part-id-table* 2905 init-specs 12 initial-valuef) (vector-length (-> this root transv)))
  (set! (-> *part-id-table* 2906 init-specs 12 initial-valuef) (vector-length (-> this root transv)))
  (set! (-> *part-id-table* 2907 init-specs 14 initial-valuef) (vector-length (-> this root transv)))
  (set! (-> *part-id-table* 2908 init-specs 14 initial-valuef) (vector-length (-> this root transv)))
  (spawn (-> this part) arg0)
  0
  (none)
  )

;; definition for method 37 of type warf-projectile
(defmethod deal-damage! ((this warf-projectile) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

;; definition of type gun-warf-shot
(deftype gun-warf-shot (projectile)
  ((hit-actor?         symbol)
   (tail-pos           vector  :inline)
   (hit-pos            vector  :inline)
   (last-hit-time      time-frame)
   (snd-whoosh         sound-id)
   (muzzle-flash-part  sparticle-launch-control)
   (main-shot-part     sparticle-launch-control)
   (shot-aim-part      sparticle-launch-control)
   )
  (:methods
    (gun-warf-shot-method-41 (_type_ vector vector) none)
    (gun-warf-shot-method-42 (_type_ float float matrix) none)
    (launch-part (_type_ vector) none)
    )
  )

;; definition for method 3 of type gun-warf-shot
(defmethod inspect ((this gun-warf-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Thit-actor?: ~A~%" (-> this hit-actor?))
  (format #t "~2Ttail-pos: #<vector @ #x~X>~%" (-> this tail-pos))
  (format #t "~2Thit-pos: #<vector @ #x~X>~%" (-> this hit-pos))
  (format #t "~2Tlast-hit-time: ~D~%" (-> this last-hit-time))
  (format #t "~2Tsnd-whoosh: ~D~%" (-> this snd-whoosh))
  (format #t "~2Tmuzzle-flash-part: ~A~%" (-> this muzzle-flash-part))
  (format #t "~2Tmain-shot-part: ~A~%" (-> this main-shot-part))
  (format #t "~2Tshot-aim-part: ~A~%" (-> this shot-aim-part))
  (label cfg-4)
  this
  )

;; definition for method 24 of type gun-warf-shot
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-24 ((this gun-warf-shot))
  (draw-beam
    (the-as sparticle-launcher (-> this muzzle-flash-part))
    (-> this tail-pos)
    (-> this starting-dir)
    #f
    )
  0
  (none)
  )

;; definition for method 25 of type gun-warf-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this gun-warf-shot))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((s5-0 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s4-1 (vector-! (new 'stack-no-clear 'vector) s5-0 a1-0))
           (f30-0 (vector-length s4-1))
           )
      (let ((s3-0 (new 'stack-no-clear 'vector)))
        (let ((v1-4 a1-0))
          (let ((a0-2 s4-1))
            (let ((a2-1 0.8))
              (.mov vf7 a2-1)
              )
            (.lvf vf5 (&-> a0-2 quad))
            )
          (.lvf vf4 (&-> v1-4 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s3-0 quad) vf6)
        (gun-warf-shot-method-41 this a1-0 s4-1)
        (vector-normalize! s4-1 1.0)
        (launch-part this s3-0)
        )
      (let ((s3-1 (new 'stack-no-clear 'matrix))
            (f30-1 (fmin 1.0 (* 0.000008138021 f30-0)))
            (f28-0 (-> *part-id-table* 2895 init-specs 3 initial-valuef))
            )
        (forward-up->inv-matrix s3-1 s4-1 *up-vector*)
        (set! (-> s3-1 trans quad) (-> s5-0 quad))
        (gun-warf-shot-method-42 this f30-1 f28-0 s3-1)
        )
      )
    0
    (none)
    )
  )

;; definition for method 37 of type gun-warf-shot
(defmethod deal-damage! ((this gun-warf-shot) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

;; definition for method 37 of type fac-gun-tower-projectile
(defmethod deal-damage! ((this fac-gun-tower-projectile) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

;; definition for function fac-gun-tower-projectile-move
;; WARN: Return type mismatch int vs none.
(defun fac-gun-tower-projectile-move ((arg0 fac-gun-tower-projectile))
  (projectile-move-fill-line-sphere arg0)
  (let ((s4-0 (-> arg0 root))
        (gp-0 (new 'stack-no-clear 'vector))
        )
    (vector-! gp-0 (-> arg0 tail-pos) (-> s4-0 trans))
    (let ((f0-0 (vector-length gp-0)))
      (when (< 65536.0 f0-0)
        (vector-normalize! gp-0 65536.0)
        (vector+! (-> arg0 tail-pos) (-> s4-0 trans) gp-0)
        )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate impact (fac-gun-tower-projectile)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type projectile impact) enter)))
      (if t9-0
          (t9-0)
          )
      )
    )
  :code (behavior ()
    '()
    )
  )

;; definition for method 25 of type fac-gun-tower-projectile
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this fac-gun-tower-projectile))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((a1-0 (-> this root trans))
           (v1-1 (-> this tail-pos))
           (a2-1 (vector-! (new 'stack-no-clear 'vector) a1-0 v1-1))
           (a1-1 (new 'stack-no-clear 'vector))
           )
      (let ((a3-2 0.8))
        (.mov vf7 a3-2)
        )
      (.lvf vf5 (&-> a2-1 quad))
      (.lvf vf4 (&-> v1-1 quad))
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> a1-1 quad) vf6)
      (spawn (-> this part) a1-1)
      )
    0
    (none)
    )
  )

;; definition for method 28 of type fac-gun-tower-projectile
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this fac-gun-tower-projectile) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "gtower-fire")
       )
      ((= v1-0 (projectile-options po0 po1))
       (let ((f0-0 (doppler-pitch-shift (-> this root trans) (-> this root transv)))
             (a0-7 (static-sound-spec "tower-doppler" :group 0 :volume 0.0 :mask (pitch reg0)))
             )
         (set! (-> a0-7 volume) 1024)
         (set! (-> a0-7 pitch-mod) (the int (* 1524.0 f0-0)))
         (sound-play-by-spec a0-7 (-> this sound-id) (-> this root trans))
         )
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "laser-ricochets")
       )
      )
    )
  0
  (none)
  )

;; definition for method 26 of type fac-gun-tower-projectile
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-26 ((this fac-gun-tower-projectile))
  (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this tail-pos)))
        (s3-0
          (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this tail-pos) (-> this root trans)) 2048.0)
          )
        (gp-0 (new 'stack-no-clear 'matrix))
        )
    (forward-up->inv-matrix gp-0 s4-1 *up-vector*)
    (vector+! (-> gp-0 trans) (-> this root trans) s3-0)
    (cond
      ((-> this hit-actor?)
       (if (logtest? (-> *part-group-id-table* 734 flags) (sp-group-flag sp13))
           (part-tracker-spawn
             part-tracker-subsampler
             :to *entity-pool*
             :group (-> *part-group-id-table* 734)
             :mat-joint gp-0
             )
           (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 734) :mat-joint gp-0)
           )
       )
      ((logtest? (-> *part-group-id-table* 735 flags) (sp-group-flag sp13))
       (part-tracker-spawn
         part-tracker-subsampler
         :to *entity-pool*
         :group (-> *part-group-id-table* 735)
         :mat-joint gp-0
         )
       )
      (else
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 735) :mat-joint gp-0)
        )
      )
    )
  0
  (none)
  )

;; definition for method 30 of type fac-gun-tower-projectile
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this fac-gun-tower-projectile))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

;; definition for method 31 of type fac-gun-tower-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this fac-gun-tower-projectile))
  (set! (-> this hit-actor?) #f)
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (set! (-> this attack-mode) #t)
  (set! (-> this max-speed) 327680.0)
  (set! (-> this move) fac-gun-tower-projectile-move)
  (set! (-> this damage) 1.0)
  (set! (-> this sound-id) (new-sound-id))
  (logior! (-> this options) (projectile-options po13))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 777) this))
  (let* ((v1-10 *game-info*)
         (a0-6 (+ (-> v1-10 attack-id) 1))
         )
    (set! (-> v1-10 attack-id) a0-6)
    (set! (-> this attack-id) a0-6)
    )
  0
  (none)
  )

;; definition for method 26 of type gun-warf-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-26 ((this gun-warf-shot))
  (when (not (-> this hit-actor?))
    (let ((v1-10
            (cond
              ((-> this hit-actor?)
               (cond
                 ((logtest? (-> *part-group-id-table* 776 flags) (sp-group-flag sp13))
                  (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                  (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 776))
                  )
                 (else
                   (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                   (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 776))
                   )
                 )
               )
              ((logtest? (-> *part-group-id-table* 776 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
               (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 776))
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 776))
                )
              )
            )
          )
      (send-event (ppointer->process v1-10) 'clock this)
      )
    )
  0
  (none)
  )

;; definition for method 28 of type gun-warf-shot
;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound ((this gun-warf-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "yellow-shot-fir")
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "yellow-gun-burn")
       )
      ((= v1-0 (projectile-options po1))
       (sound-play "yellow-shot-fiz")
       )
      (else
        (sound-play "yellow-shot-std" :id (-> this sound-id) :position (-> this root trans))
        )
      )
    )
  (none)
  )

;; definition for method 38 of type gun-warf-shot
(defmethod made-impact? ((this gun-warf-shot))
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a0-1 t1-0))
      (set! (-> a0-1 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a0-1 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a0-1 ignore-process0) this)
      (set! (-> a0-1 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a0-1 ignore-pat) (-> v1-0 pat-ignore-mask))
      (set! (-> a0-1 action-mask) (collide-action solid))
      )
    (when (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -10240.0 12697.6 -4096.0 t1-0)
      (if (logtest? (-> this root status) (collide-status touch-actor))
          (set! (-> this hit-actor?) #t)
          )
      #t
      )
    )
  )

;; definition for function gun-warf-shot-move
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun gun-warf-shot-move ((arg0 gun-warf-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 122880.0 f0-0)
          (vector-normalize! s4-0 122880.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (let ((v1-14 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
            (a1-5 (-> arg0 hit-pos))
            )
        (set! (-> a1-5 quad) (-> s5-0 trans quad))
        (vector+! a1-5 a1-5 v1-14)
        (move-to-point! (-> arg0 root) a1-5)
        )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

;; definition for method 30 of type gun-warf-shot
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this gun-warf-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher shield)
            )
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

;; definition for method 31 of type gun-warf-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this gun-warf-shot))
  (set! (-> this hit-actor?) #f)
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
  (set! (-> this attack-mode) 'eco-yellow)
  (set! (-> this max-speed) 1638400.0)
  (set! (-> this move) gun-warf-shot-move)
  (set! (-> this timeout) (seconds 2))
  (set! (-> this sound-id) (new-sound-id))
  (logior! (-> this options) (projectile-options po13))
  (set! (-> this muzzle-flash-part) (the-as sparticle-launch-control (-> *part-id-table* 2896)))
  (set! (-> this main-shot-part) (the-as sparticle-launch-control (-> *part-id-table* 2893)))
  (set! (-> this shot-aim-part) (the-as sparticle-launch-control (-> *part-id-table* 2895)))
  0
  (none)
  )

;; definition for method 41 of type gun-warf-shot
;; WARN: Return type mismatch int vs none.
(defmethod gun-warf-shot-method-41 ((this gun-warf-shot) (arg0 vector) (arg1 vector))
  (let ((f30-0 (-> *part-id-table* 2893 init-specs 4 initial-valuef)))
    (set! (-> *part-id-table* 2893 init-specs 4 initial-valuef) (fmin f30-0 (vector-length arg1)))
    (draw-beam (the-as sparticle-launcher (-> this main-shot-part)) arg0 arg1 #f)
    (set! (-> *part-id-table* 2893 init-specs 4 initial-valuef) f30-0)
    )
  0
  (none)
  )

;; definition for method 42 of type gun-warf-shot
;; WARN: Return type mismatch int vs none.
(defmethod gun-warf-shot-method-42 ((this gun-warf-shot) (arg0 float) (arg1 float) (arg2 matrix))
  (set! (-> *part-id-table* 2895 init-specs 3 initial-valuef) (* arg0 arg1))
  (launch-particles (-> *part-id-table* 2895) arg2 :origin-is-matrix #t)
  (set! (-> *part-id-table* 2895 init-specs 3 initial-valuef) arg1)
  0
  (none)
  )

;; definition for method 43 of type gun-warf-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod launch-part ((this gun-warf-shot) (arg0 vector))
  (launch-particles (-> *part-id-table* 2894) arg0)
  0
  (none)
  )




