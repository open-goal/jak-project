;;-*-Lisp-*-
(in-package goal)

;; definition (perm) for symbol *factory-boss-dead-pool*, type dead-pool
(define-perm *factory-boss-dead-pool* dead-pool #f)

;; definition of type factory-boss-speech-instance
(deftype factory-boss-speech-instance (structure)
  ((speech       string)
   (probability  float)
   (flags        facboss-speech-instance-flag)
   (play-count   uint32)
   )
  )

;; definition for method 3 of type factory-boss-speech-instance
(defmethod inspect ((this factory-boss-speech-instance))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-speech-instance)
  (format #t "~1Tspeech: ~A~%" (-> this speech))
  (format #t "~1Tprobability: ~f~%" (-> this probability))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tplay-count: ~D~%" (-> this play-count))
  (label cfg-4)
  this
  )

;; definition of type factory-boss-speech-info
(deftype factory-boss-speech-info (structure)
  ((speeches          (array factory-boss-speech-instance))
   (play-time         time-frame)
   (current-random    time-frame)
   (minimum-interval  time-frame)
   (random-interval   time-frame)
   (last-played       int8)
   (flags             facboss-speech-info-flag)
   )
  )

;; definition for method 3 of type factory-boss-speech-info
(defmethod inspect ((this factory-boss-speech-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-speech-info)
  (format #t "~1Tspeeches: ~A~%" (-> this speeches))
  (format #t "~1Tplay-time: ~D~%" (-> this play-time))
  (format #t "~1Tcurrent-random: ~D~%" (-> this current-random))
  (format #t "~1Tminimum-interval: ~D~%" (-> this minimum-interval))
  (format #t "~1Trandom-interval: ~D~%" (-> this random-interval))
  (format #t "~1Tlast-played: ~D~%" (-> this last-played))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type factory-boss-speech-group
(deftype factory-boss-speech-group (structure)
  ((play-time  time-frame)
   (info       (array factory-boss-speech-info))
   )
  )

;; definition for method 3 of type factory-boss-speech-group
(defmethod inspect ((this factory-boss-speech-group))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-speech-group)
  (format #t "~1Tplay-time: ~D~%" (-> this play-time))
  (format #t "~1Tinfo: ~A~%" (-> this info))
  (label cfg-4)
  this
  )

;; definition for symbol *factory-boss-speech*, type factory-boss-speech-group
(define *factory-boss-speech*
  (new 'static 'factory-boss-speech-group
    :info (new 'static 'boxed-array :type factory-boss-speech-info
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "erol101" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero003" :probability 1.0)
          (new 'static 'factory-boss-speech-instance
            :speech "ero023"
            :probability 1.0
            :flags (facboss-speech-instance-flag fsi2)
            )
          (new 'static 'factory-boss-speech-instance
            :speech "ero024"
            :probability 1.0
            :flags (facboss-speech-instance-flag fsi2)
            )
          (new 'static 'factory-boss-speech-instance :speech "ero037" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero038" :probability 1.0)
          )
        :minimum-interval (seconds 15)
        :random-interval (seconds 5)
        :flags (facboss-speech-info-flag fsi0)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "erol105" :probability 1.0)
          (new 'static 'factory-boss-speech-instance
            :speech "erol107"
            :probability 1.0
            :flags (facboss-speech-instance-flag fsi2)
            )
          (new 'static 'factory-boss-speech-instance :speech "ero004" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero013" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero020" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero022" :probability 1.0)
          )
        :minimum-interval (seconds 10)
        :flags (facboss-speech-info-flag fsi0)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "ero014" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero017" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero036" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero059" :probability 1.0)
          )
        :minimum-interval (seconds 9)
        :flags (facboss-speech-info-flag fsi0)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "erol102" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol104" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol112" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol113" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol118" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero005" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero075" :probability 1.0)
          )
        :minimum-interval (seconds 15)
        :random-interval (seconds 5)
        :flags (facboss-speech-info-flag fsi0)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "erol114" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol115" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol116" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol117" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol118" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "erol119" :probability 1.0)
          )
        :minimum-interval (seconds 15)
        :random-interval (seconds 5)
        :flags (facboss-speech-info-flag fsi0)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "ero070" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero061" :probability 1.0)
          )
        :minimum-interval (seconds 15)
        :flags (facboss-speech-info-flag fsi0)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "ero078" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero079" :probability 1.0)
          (new 'static 'factory-boss-speech-instance :speech "ero096" :probability 1.0)
          )
        :minimum-interval (seconds 1)
        )
      (new 'static 'factory-boss-speech-info
        :speeches (new 'static 'boxed-array :type factory-boss-speech-instance
          (new 'static 'factory-boss-speech-instance :speech "dax684" :probability 1.0)
          (new 'static 'factory-boss-speech-instance
            :speech "dax685"
            :probability 1.0
            :flags (facboss-speech-instance-flag fsi2)
            )
          (new 'static 'factory-boss-speech-instance
            :speech "dax686"
            :probability 1.0
            :flags (facboss-speech-instance-flag fsi2)
            )
          )
        :minimum-interval (seconds 5)
        )
      )
    )
  )

;; definition for function reset-factory-boss-speeches
;; WARN: Return type mismatch symbol vs none.
(defun reset-factory-boss-speeches ()
  (set! (-> *factory-boss-speech* play-time) 0)
  (dotimes (v1-1 (-> *factory-boss-speech* info length))
    (let ((a0-2 (-> *factory-boss-speech* info v1-1)))
      (dotimes (a1-2 (-> a0-2 speeches length))
        (set! (-> a0-2 speeches a1-2 play-count) (the-as uint 0))
        )
      (set! (-> a0-2 play-time) 0)
      (set! (-> a0-2 current-random) 0)
      (set! (-> a0-2 last-played) -1)
      )
    )
  (none)
  )

;; definition for function factory-boss-play-speech
;; WARN: Return type mismatch int vs none.
;; WARN: Function factory-boss-play-speech has a return type of none, but the expression builder found a return statement.
(defun factory-boss-play-speech ((arg0 int) (arg1 factory-boss))
  (let ((gp-0 (-> *factory-boss-speech* info arg0)))
    (if (zero? (-> gp-0 speeches length))
        (return 0)
        )
    (if (logtest? (-> gp-0 flags) (facboss-speech-info-flag fsi0))
        (set! (-> gp-0 play-time) (-> *factory-boss-speech* play-time))
        )
    (if (not (time-elapsed? (-> gp-0 play-time) (+ (-> gp-0 minimum-interval) (-> gp-0 current-random))))
        (return 0)
        )
    (let ((f30-0 0.0)
          (s4-0 (-> gp-0 speeches 0 play-count))
          )
      (dotimes (v1-18 (-> gp-0 speeches length))
        (let ((a0-8 (-> gp-0 speeches v1-18)))
          (cond
            ((or (< s4-0 (-> a0-8 play-count))
                 (and (logtest? (-> a0-8 flags) (facboss-speech-instance-flag fsi1)) (nonzero? (-> gp-0 play-time)))
                 (and (logtest? (-> a0-8 flags) (facboss-speech-instance-flag fsi2)) (zero? (-> gp-0 play-time)))
                 (and (logtest? (-> a0-8 flags) (facboss-speech-instance-flag fsi0)) (> (-> a0-8 play-count) 0))
                 (and (not (logtest? (-> a0-8 flags) (facboss-speech-instance-flag fsi3))) (= (-> gp-0 last-played) v1-18))
                 )
             (logclear! (-> a0-8 flags) (facboss-speech-instance-flag fsi4))
             )
            ((= (-> a0-8 play-count) s4-0)
             (+! f30-0 (-> a0-8 probability))
             (logior! (-> a0-8 flags) (facboss-speech-instance-flag fsi4))
             )
            (else
              (set! s4-0 (-> a0-8 play-count))
              (set! f30-0 (-> a0-8 probability))
              (logior! (-> a0-8 flags) (facboss-speech-instance-flag fsi4))
              )
            )
          )
        )
      (let ((f0-2 (* f30-0 (rand-vu))))
        (dotimes (s3-0 (-> gp-0 speeches length))
          (let ((s2-0 (-> gp-0 speeches s3-0)))
            (cond
              ((or (not (logtest? (-> s2-0 flags) (facboss-speech-instance-flag fsi4))) (< s4-0 (-> s2-0 play-count)))
               )
              ((or (>= (-> s2-0 probability) f0-2) (logtest? (-> s2-0 flags) (facboss-speech-instance-flag fsi1)))
               (let ((a1-28 (add-process *gui-control* arg1 (gui-channel sig) (gui-action play) (-> s2-0 speech) 81920.0 0)))
                 (when (sound-params-set! *gui-control* a1-28 #f -1 -1 -1 (-> *setting-control* user-current talker-volume))
                   (set! (-> s2-0 play-count) (+ s4-0 1))
                   (set-time! (-> *factory-boss-speech* play-time))
                   (set-time! (-> gp-0 play-time))
                   (set! (-> gp-0 current-random)
                         (the-as time-frame (the int (* (rand-vu) (the float (-> gp-0 random-interval)))))
                         )
                   (set! (-> gp-0 last-played) s3-0)
                   )
                 )
               (return 0)
               )
              (else
                (set! f0-2 (- f0-2 (-> gp-0 speeches s3-0 probability)))
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

;; definition of type factory-boss-reticle-info
(deftype factory-boss-reticle-info (structure)
  ((reticle             sparticle-launch-control)
   (reticle-corner-0    sparticle-launch-control)
   (reticle-corner-1    sparticle-launch-control)
   (reticle-corner-2    sparticle-launch-control)
   (reticle-corner-3    sparticle-launch-control)
   (reticle-dot         sparticle-launch-control)
   (reticle-arrow       sparticle-launch-control)
   (reticle-super       sparticle-launch-control)
   (reticle-super-ring  sparticle-launch-control)
   (lock-time           time-frame)
   )
  (:methods
    (init! (_type_ process) none)
    (factory-boss-reticle-info-method-10 (_type_ vector vector int int) none)
    (factory-boss-reticle-info-method-11 (_type_) none)
    )
  )

;; definition for method 3 of type factory-boss-reticle-info
(defmethod inspect ((this factory-boss-reticle-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-reticle-info)
  (format #t "~1Treticle: ~A~%" (-> this reticle))
  (format #t "~1Treticle-corner-0: ~A~%" (-> this reticle-corner-0))
  (format #t "~1Treticle-corner-1: ~A~%" (-> this reticle-corner-1))
  (format #t "~1Treticle-corner-2: ~A~%" (-> this reticle-corner-2))
  (format #t "~1Treticle-corner-3: ~A~%" (-> this reticle-corner-3))
  (format #t "~1Treticle-dot: ~A~%" (-> this reticle-dot))
  (format #t "~1Treticle-arrow: ~A~%" (-> this reticle-arrow))
  (format #t "~1Treticle-super: ~A~%" (-> this reticle-super))
  (format #t "~1Treticle-super-ring: ~A~%" (-> this reticle-super-ring))
  (format #t "~1Tlock-time: ~D~%" (-> this lock-time))
  (label cfg-4)
  this
  )

;; definition for method 9 of type factory-boss-reticle-info
;; WARN: Return type mismatch int vs none.
(defmethod init! ((this factory-boss-reticle-info) (arg0 process))
  (set! (-> this reticle) (create-launch-control (-> *part-group-id-table* 1371) arg0))
  (set! (-> this reticle-corner-0) (create-launch-control (-> *part-group-id-table* 1372) arg0))
  (set! (-> this reticle-corner-1) (create-launch-control (-> *part-group-id-table* 1372) arg0))
  (set! (-> this reticle-corner-2) (create-launch-control (-> *part-group-id-table* 1372) arg0))
  (set! (-> this reticle-corner-3) (create-launch-control (-> *part-group-id-table* 1372) arg0))
  (set! (-> this reticle-dot) (create-launch-control (-> *part-group-id-table* 1373) arg0))
  (set! (-> this reticle-arrow) (create-launch-control (-> *part-group-id-table* 1374) arg0))
  (set! (-> this reticle-super) (create-launch-control (-> *part-group-id-table* 1375) arg0))
  (set! (-> this reticle-super-ring) (create-launch-control (-> *part-group-id-table* 1376) arg0))
  (set! (-> this lock-time) 0)
  0
  (none)
  )

;; definition for method 10 of type factory-boss-reticle-info
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod factory-boss-reticle-info-method-10 ((this factory-boss-reticle-info) (arg0 vector) (arg1 vector) (arg2 int) (arg3 int))
  (local-vars (sv-160 vector))
  (set! sv-160 arg0)
  (let ((s4-0 arg1)
        (s2-0 arg2)
        (s1-0 arg3)
        )
    (cond
      ((zero? s2-0)
       (if (zero? (-> this lock-time))
           (set-time! (-> this lock-time))
           )
       )
      (else
        (set! (-> this lock-time) 0)
        0
        )
      )
    (let ((s5-0 (new 'stack-no-clear 'matrix)))
      (let ((s0-0 (or (nonzero? (-> this lock-time)) (< 24 (mod s2-0 48))))
            (s3-0 #t)
            )
        (let ((f28-0 0.0)
              (f30-0 0.0)
              )
          (matrix-identity! s5-0)
          (set! (-> s5-0 trans quad) (-> sv-160 quad))
          (let ((v1-8 s1-0))
            (cond
              ((zero? v1-8)
               (if (zero? s2-0)
                   (set! f28-0 128.0)
                   (set! f30-0 128.0)
                   )
               )
              ((= v1-8 2)
               (cond
                 ((zero? s2-0)
                  (set! f28-0 128.0)
                  )
                 (else
                   (set! f28-0 128.0)
                   (set! f30-0 128.0)
                   )
                 )
               )
              ((zero? s2-0)
               (set! f28-0 128.0)
               )
              (else
                (set! f30-0 128.0)
                )
              )
            )
          (set! (-> *part-id-table* 4568 init-specs 5 initial-valuef) f28-0)
          (set! (-> *part-id-table* 4568 init-specs 6 initial-valuef) f30-0)
          (set! (-> *part-id-table* 4569 init-specs 5 initial-valuef) f28-0)
          (set! (-> *part-id-table* 4569 init-specs 6 initial-valuef) f30-0)
          (set! (-> *part-id-table* 4566 init-specs 5 initial-valuef) f28-0)
          (set! (-> *part-id-table* 4566 init-specs 6 initial-valuef) f30-0)
          (set! (-> *part-id-table* 4567 init-specs 5 initial-valuef) f28-0)
          (set! (-> *part-id-table* 4567 init-specs 6 initial-valuef) f30-0)
          (set! (-> *part-id-table* 4570 init-specs 5 initial-valuef) f28-0)
          (set! (-> *part-id-table* 4570 init-specs 6 initial-valuef) f30-0)
          (set! (-> *part-id-table* 4571 init-specs 5 initial-valuef) f28-0)
          (set! (-> *part-id-table* 4571 init-specs 6 initial-valuef) f30-0)
          )
        (cond
          ((zero? s1-0)
           (if s3-0
               (spawn-from-mat (-> this reticle) s5-0)
               )
           (let ((s1-1 (new 'stack-no-clear 'matrix)))
             (let* ((f0-2 (lerp-scale 1.0 0.1 (the float (mod s2-0 90)) 90.0 0.0))
                    (f30-1 (* 3686.4 f0-2))
                    )
               (let* ((a2-2 s1-1)
                      (a3-2 s5-0)
                      (v1-64 (-> a3-2 rvec quad))
                      (a0-9 (-> a3-2 uvec quad))
                      (a1-3 (-> a3-2 fvec quad))
                      (a3-3 (-> a3-2 trans quad))
                      )
                 (set! (-> a2-2 rvec quad) v1-64)
                 (set! (-> a2-2 uvec quad) a0-9)
                 (set! (-> a2-2 fvec quad) a1-3)
                 (set! (-> a2-2 trans quad) a3-3)
                 )
               (vector+float*! (-> s1-1 trans) (-> s5-0 trans) (-> s5-0 rvec) (- f30-1))
               (vector+float*! (-> s1-1 trans) (-> s1-1 trans) (-> s5-0 fvec) (- f30-1))
               (spawn-from-mat (-> this reticle-corner-0) s1-1)
               (vector+float*! (-> s1-1 trans) (-> s1-1 trans) (-> s5-0 rvec) (* 2.0 f30-1))
               (set! (-> s1-1 rvec quad) (-> s5-0 fvec quad))
               (vector-negate! (-> s1-1 fvec) (-> s5-0 rvec))
               (spawn-from-mat (-> this reticle-corner-1) s1-1)
               (vector+float*! (-> s1-1 trans) (-> s1-1 trans) (-> s5-0 fvec) (* 2.0 f30-1))
               (vector-negate! (-> s1-1 rvec) (-> s5-0 rvec))
               (vector-negate! (-> s1-1 fvec) (-> s5-0 fvec))
               (spawn-from-mat (-> this reticle-corner-2) s1-1)
               (vector+float*! (-> s1-1 trans) (-> s1-1 trans) (-> s5-0 rvec) (* -2.0 f30-1))
               )
             (vector-negate! (-> s1-1 rvec) (-> s5-0 fvec))
             (set! (-> s1-1 fvec quad) (-> s5-0 rvec quad))
             (spawn-from-mat (-> this reticle-corner-3) s1-1)
             )
           )
          ((= s1-0 2)
           (if s3-0
               (spawn-from-mat (-> this reticle-super) s5-0)
               )
           (if s0-0
               (spawn-from-mat (-> this reticle-super-ring) s5-0)
               )
           )
          (else
            (spawn-from-mat (-> this reticle-super-ring) s5-0)
            )
          )
        (if s3-0
            (spawn-from-mat (-> this reticle-dot) s5-0)
            )
        )
      (let ((a1-21 (new 'stack-no-clear 'vector)))
        (vector-! a1-21 (-> s5-0 trans) s4-0)
        (set! (-> a1-21 y) 0.0)
        (vector-normalize-copy! (-> s5-0 fvec) a1-21 1.8)
        )
      (vector-cross! (-> s5-0 rvec) (-> s5-0 uvec) (-> s5-0 fvec))
      (vector+float*! (-> s5-0 trans) (-> s5-0 trans) (-> s5-0 fvec) -4096.0)
      (spawn-from-mat (-> this reticle-arrow) s5-0)
      )
    )
  0
  (none)
  )

;; definition for method 7 of type factory-boss-reticle-info
;; WARN: Return type mismatch sparticle-launch-control vs factory-boss-reticle-info.
(defmethod relocate ((this factory-boss-reticle-info) (offset int))
  (if (nonzero? (-> this reticle))
      (&+! (-> this reticle) offset)
      )
  (if (nonzero? (-> this reticle-corner-0))
      (&+! (-> this reticle-corner-0) offset)
      )
  (if (nonzero? (-> this reticle-corner-1))
      (&+! (-> this reticle-corner-1) offset)
      )
  (if (nonzero? (-> this reticle-corner-2))
      (&+! (-> this reticle-corner-2) offset)
      )
  (if (nonzero? (-> this reticle-corner-3))
      (&+! (-> this reticle-corner-3) offset)
      )
  (if (nonzero? (-> this reticle-dot))
      (&+! (-> this reticle-dot) offset)
      )
  (if (nonzero? (-> this reticle-arrow))
      (&+! (-> this reticle-arrow) offset)
      )
  (if (nonzero? (-> this reticle-super))
      (&+! (-> this reticle-super) offset)
      )
  (the-as factory-boss-reticle-info (when (nonzero? (-> this reticle-super-ring))
                                      (let ((v0-0 (&+ (-> this reticle-super-ring) offset)))
                                        (set! (-> this reticle-super-ring) v0-0)
                                        v0-0
                                        )
                                      )
          )
  )

;; definition for method 11 of type factory-boss-reticle-info
;; WARN: Return type mismatch int vs none.
(defmethod factory-boss-reticle-info-method-11 ((this factory-boss-reticle-info))
  (if (nonzero? (-> this reticle))
      (kill-particles (-> this reticle))
      )
  (if (nonzero? (-> this reticle-corner-0))
      (kill-particles (-> this reticle-corner-0))
      )
  (if (nonzero? (-> this reticle-corner-1))
      (kill-particles (-> this reticle-corner-1))
      )
  (if (nonzero? (-> this reticle-corner-2))
      (kill-particles (-> this reticle-corner-2))
      )
  (if (nonzero? (-> this reticle-corner-3))
      (kill-particles (-> this reticle-corner-3))
      )
  (if (nonzero? (-> this reticle-dot))
      (kill-particles (-> this reticle-dot))
      )
  (if (nonzero? (-> this reticle-arrow))
      (kill-particles (-> this reticle-arrow))
      )
  (if (nonzero? (-> this reticle-super))
      (kill-particles (-> this reticle-super))
      )
  (if (nonzero? (-> this reticle-super-ring))
      (kill-particles (-> this reticle-super-ring))
      )
  0
  (none)
  )

;; definition of type factory-boss-shot
(deftype factory-boss-shot (projectile)
  ((trail-part             sparticle-launch-control)
   (traj                   trajectory  :inline)
   (traj-time              time-frame)
   (shot-dest              vector      :inline)
   (impact-played          symbol)
   (reticle-sound          sound-id)
   (reticle-sound-playing  symbol)
   )
  (:methods
    (stop-reticle-sound (_type_) none)
    )
  )

;; definition for method 3 of type factory-boss-shot
(defmethod inspect ((this factory-boss-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttrail-part: ~A~%" (-> this trail-part))
  (format #t "~2Ttraj: #<trajectory @ #x~X>~%" (-> this traj))
  (format #t "~2Ttraj-time: ~D~%" (-> this traj-time))
  (format #t "~2Tshot-dest: #<vector @ #x~X>~%" (-> this shot-dest))
  (format #t "~2Timpact-played: ~A~%" (-> this impact-played))
  (format #t "~2Treticle-sound: ~D~%" (-> this reticle-sound))
  (format #t "~2Treticle-sound-playing: ~A~%" (-> this reticle-sound-playing))
  (label cfg-4)
  this
  )

;; definition for method 37 of type factory-boss-shot
(defmethod deal-damage! ((this factory-boss-shot) (arg0 process) (arg1 event-message-block))
  (let* ((t9-0 (method-of-type projectile deal-damage!))
         (s5-0 (t9-0 this arg0 arg1))
         )
    (if (and s5-0 (= arg0 *target*))
        (factory-boss-play-speech 2 (the-as factory-boss this))
        )
    s5-0
    )
  )

;; definition for method 41 of type factory-boss-shot
;; WARN: Return type mismatch int vs none.
(defmethod stop-reticle-sound ((this factory-boss-shot))
  (when (-> this reticle-sound-playing)
    (sound-stop (-> this reticle-sound))
    (set! (-> this reticle-sound-playing) #f)
    )
  0
  (none)
  )

;; definition for method 7 of type factory-boss-shot
(defmethod relocate ((this factory-boss-shot) (offset int))
  (if (nonzero? (-> this trail-part))
      (&+! (-> this trail-part) offset)
      )
  (call-parent-method this offset)
  )

;; definition for method 10 of type factory-boss-shot
(defmethod deactivate ((this factory-boss-shot))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (stop-reticle-sound this)
  (call-parent-method this)
  (none)
  )

;; definition for method 25 of type factory-boss-shot
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this factory-boss-shot))
  (if (nonzero? (-> this trail-part))
      (push-back (-> this trail-part) (-> this root trans))
      )
  0
  (none)
  )

;; definition for method 30 of type factory-boss-shot
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this factory-boss-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-projectile)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-6 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-6 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-6 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> v1-6 prim-core action) (collide-action solid))
      (set-vector! (-> v1-6 local-sphere) 0.0 0.0 0.0 3072.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 2))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

;; definition for method 31 of type factory-boss-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this factory-boss-shot))
  (with-pp
    (set! (-> this attack-mode) 'eco-dark)
    (set! (-> this sound-id) (new-sound-id))
    (let ((t9-1 (method-of-type projectile init-proj-settings!)))
      (t9-1 this)
      )
    (set! (-> this shot-dest quad) (-> this root transv quad))
    (set-time! (-> this traj-time))
    (cond
      ((type? this factory-boss-shockwave-bomb)
       pp
       (set! (-> this trail-part)
             (the-as
               sparticle-launch-control
               (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 4533) 8.0)
               )
             )
       (setup-from-to-duration-and-height! (-> this traj) (-> this root trans) (-> this root transv) 300.0 8192.0)
       )
      (else
        pp
        (set! (-> this trail-part)
              (the-as
                sparticle-launch-control
                (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 4530) 10.0)
                )
              )
        (setup-from-to-duration-and-height! (-> this traj) (-> this root trans) (-> this root transv) 225.0 8192.0)
        )
      )
    (compute-transv-at-time (-> this traj) 0.0 (-> this root transv))
    (set! (-> this pre-move-transv quad) (-> this root transv quad))
    (vector-normalize-copy! (-> this starting-dir) (-> this root transv) 1.0)
    (vector+float*! (-> this base-target-pos) (-> this root trans) (-> this starting-dir) 2048000.0)
    (set! (-> this target-pos quad) (-> this base-target-pos quad))
    (set! (-> this impact-played) #f)
    (set! (-> this reticle-sound) (new-sound-id))
    (sound-play "reticle-lock" :id (-> this reticle-sound) :position (-> this shot-dest))
    (set! (-> this reticle-sound-playing) #t)
    0
    (none)
    )
  )

;; definition for method 28 of type factory-boss-shot
;; WARN: Return type mismatch symbol vs none.
(defmethod play-impact-sound ((this factory-boss-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       )
      ((= v1-0 (projectile-options po0))
       )
      ((= v1-0 (projectile-options po0 po1))
       )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate moving (factory-boss-shot)
  :virtual #t
  :trans (behavior ()
    (local-vars (at-0 int))
    (rlet ((vf0 :class vf)
           (vf1 :class vf)
           (vf2 :class vf)
           )
      (init-vf0-vector)
      (cond
        ((time-elapsed? (-> self traj-time) (the int (-> self traj time)))
         (go-virtual impact)
         )
        ((and (not (-> self impact-played))
              (time-elapsed? (+ (-> self traj-time) (seconds -0.5)) (the int (-> self traj time)))
              )
         (sound-play "erol-proj-incom" :position (-> self root trans))
         (set! (-> self impact-played) #t)
         )
        )
      (let ((gp-1 (new 'stack-no-clear 'vector)))
        (compute-trans-at-time
          (-> self traj)
          (fmin (-> self traj time) (the float (- (current-time) (-> self traj-time))))
          gp-1
          )
        (vector-! (-> self pre-move-transv) gp-1 (-> self root trans))
        (let ((v1-22 (-> self pre-move-transv)))
          (.lvf vf1 (&-> (-> self pre-move-transv) quad))
          (let ((f0-6 (-> self clock frames-per-second)))
            (.mov at-0 f0-6)
            )
          (.mov vf2 at-0)
          (.mov.vf vf1 vf0 :mask #b1000)
          (.mul.x.vf vf1 vf1 vf2 :mask #b111)
          (.svf (&-> v1-22 quad) vf1)
          )
        (set! (-> self root transv quad) (-> self pre-move-transv quad))
        (if (< 2191360.0 (-> gp-1 y))
            (integrate-and-collide! (-> self root) (-> self root transv))
            (projectile-move-fill-line-sphere self)
            )
        )
      (if (logtest? (collide-status
                      on-surface
                      on-ground
                      touch-surface
                      touch-wall
                      touch-ceiling
                      touch-actor
                      on-special-surface
                      touch-edge
                      no-touch
                      blocked
                      on-water
                      impact-surface
                      touch-background
                      stuck
                      touch-ceiling-sticky
                      glance
                      probe-hit
                      )
                    (-> self root status)
                    )
          (go-impact! self)
          )
      (cond
        ((type? self factory-boss-floorbuster-bomb)
         (send-event (ppointer->process (-> self parent)) 'draw-reticle (-> self shot-dest) (-> self traj) 1)
         )
        ((type? self factory-boss-shockwave-bomb)
         (send-event (ppointer->process (-> self parent)) 'draw-reticle (-> self shot-dest) (-> self traj) 2)
         )
        (else
          (send-event (ppointer->process (-> self parent)) 'draw-reticle (-> self shot-dest) (-> self traj) 0)
          )
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate impact (factory-boss-shot)
  :virtual #t
  :enter (behavior ()
    (stop-reticle-sound self)
    (sound-play "erol-proj-expl" :position (-> self root trans))
    (let ((v1-5 (-> self root root-prim)))
      (set! (-> v1-5 prim-core collide-as) (collide-spec))
      (set! (-> v1-5 prim-core collide-with) (collide-spec))
      )
    0
    (let ((gp-1 (new 'stack-no-clear 'explosion-init-params)))
      (set! (-> gp-1 spawn-point quad) (-> self root trans quad))
      (quaternion-identity! (-> gp-1 spawn-quat))
      (set! (-> gp-1 radius) 8192.0)
      (set! (-> gp-1 scale) 1.0)
      (set! (-> gp-1 group) (-> *part-group-id-table* 1360))
      (set! (-> gp-1 collide-with)
            (collide-spec backgnd jak crate enemy obstacle vehicle-sphere hit-by-others-list player-list pusher shield)
            )
      (set! (-> gp-1 damage) 2.0)
      (set! (-> gp-1 damage-scale) 1.0)
      (set! (-> gp-1 vehicle-damage-factor) 1.0)
      (set! (-> gp-1 vehicle-impulse-factor) 1.0)
      (set! (-> gp-1 ignore-proc) (process->handle #f))
      (explosion-spawn gp-1 (ppointer->process (-> self parent)))
      )
    (send-event (ppointer->process (-> self parent)) 'shot-hit (-> self root trans))
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (when (and (time-elapsed? (-> self state-time) (seconds 10)) (not (-> self child)))
      (deactivate self)
      (go empty-state)
      )
    )
  :code sleep-code
  )

;; definition of type factory-boss-shockwave-bomb
(deftype factory-boss-shockwave-bomb (factory-boss-shot)
  ()
  )

;; definition for method 3 of type factory-boss-shockwave-bomb
(defmethod inspect ((this factory-boss-shockwave-bomb))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type factory-boss-shot inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type shockwave-bomb-explosion
(deftype shockwave-bomb-explosion (explosion)
  ()
  )

;; definition for method 3 of type shockwave-bomb-explosion
(defmethod inspect ((this shockwave-bomb-explosion))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type explosion inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate impact (factory-boss-shockwave-bomb)
  :virtual #t
  :enter (behavior ()
    (local-vars (sv-272 entity-actor))
    (stop-reticle-sound self)
    (sound-play "erol-proj-expls" :position (-> self root trans))
    (let ((v1-4 (-> self root root-prim)))
      (set! (-> v1-4 prim-core collide-as) (collide-spec))
      (set! (-> v1-4 prim-core collide-with) (collide-spec))
      )
    0
    (let ((gp-1 (new 'stack-no-clear 'explosion-init-params)))
      (set! (-> gp-1 spawn-point quad) (-> self root trans quad))
      (quaternion-identity! (-> gp-1 spawn-quat))
      (set! (-> gp-1 radius) 8192.0)
      (set! (-> gp-1 scale) 1.0)
      (set! (-> gp-1 group) (-> *part-group-id-table* 1360))
      (set! (-> gp-1 collide-with)
            (collide-spec backgnd jak crate enemy obstacle vehicle-sphere hit-by-others-list player-list pusher shield)
            )
      (set! (-> gp-1 damage) 2.0)
      (set! (-> gp-1 damage-scale) 1.0)
      (set! (-> gp-1 vehicle-damage-factor) 1.0)
      (set! (-> gp-1 vehicle-impulse-factor) 1.0)
      (set! (-> gp-1 ignore-proc) (process->handle #f))
      (explosion-spawn-legacy-version (ppointer->process (-> self parent)) shockwave-bomb-explosion gp-1)
      )
    (send-event (ppointer->process (-> self parent)) 'shot-hit (-> self root trans))
    (set-time! (-> self state-time))
    (let ((s5-1 (new 'stack-no-clear 'vector)))
      (set! (-> s5-1 quad) (-> self root trans quad))
      (let ((gp-2 (new 'stack-no-clear 'quaternion)))
        (let ((s4-0 (new 'stack-no-clear 'matrix)))
          (+! (-> s5-1 y) 409.6)
          (quaternion-set! gp-2 0.0 0.0 0.0 1.0)
          (matrix-identity! s4-0)
          (set! (-> s4-0 trans quad) (-> s5-1 quad))
          )
        (let* ((s3-0 (get-process *default-dead-pool* manipy #x20000 1))
               (s4-1 (when s3-0
                       (let ((t9-9 (method-of-type manipy activate)))
                         (t9-9 (the-as manipy s3-0) self "manipy" (the-as pointer #x70004000))
                         )
                       (let ((s4-2 run-function-in-process)
                             (s2-0 s3-0)
                             (s1-0 manipy-init)
                             (s0-0 s5-1)
                             )
                         (set! sv-272 (-> self entity))
                         (let ((t0-2 (art-group-get-by-name *level* "skel-bomb-blast" (the-as (pointer level) #f)))
                               (t1-1 #f)
                               (t2-1 0)
                               )
                           ((the-as (function object object object object object object object none) s4-2)
                            s2-0
                            s1-0
                            s0-0
                            sv-272
                            t0-2
                            t1-1
                            t2-1
                            )
                           )
                         )
                       (-> s3-0 ppointer)
                       )
                     )
               )
          (when s4-1
            (send-event (ppointer->process s4-1) 'rot-quat gp-2)
            (send-event (ppointer->process s4-1) 'anim-mode 'play1)
            (send-event (ppointer->process s4-1) 'anim "idle")
            (set-vector! (-> (the-as (pointer manipy) s4-1) 0 root scale) 1.0 1.0 1.0 1.0)
            (let ((v1-60 (lambda :behavior manipy
                           ()
                           (set-vector! (-> self draw color-mult) 0.0 0.0 0.0 1.0)
                           (cond
                             ((>= 10.0 (ja-aframe-num 0))
                              (let ((v0-1 (the-as vector (-> self draw color-emissive))))
                                (set! (-> (the-as rgbaf v0-1) x) 1.0)
                                (set! (-> (the-as rgbaf v0-1) y) 1.0)
                                (set! (-> (the-as rgbaf v0-1) z) 1.0)
                                (set! (-> (the-as rgbaf v0-1) w) 1.0)
                                v0-1
                                )
                              )
                             ((>= 20.0 (ja-aframe-num 0))
                              (vector-lerp!
                                (-> self draw color-emissive)
                                (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                (new 'static 'vector :x 0.5 :z 1.0 :w 1.0)
                                (lerp-scale 0.0 1.0 (ja-aframe-num 0) 10.0 20.0)
                                )
                              )
                             (else
                               (vector-lerp!
                                 (-> self draw color-emissive)
                                 (new 'static 'vector :x 0.5 :z 1.0 :w 1.0)
                                 (new 'static 'vector :w 1.0)
                                 (lerp-scale 0.0 1.0 (ja-aframe-num 0) 20.0 30.0)
                                 )
                               )
                             )
                           )
                         )
                  )
              (send-event (ppointer->process s4-1) 'trans-hook v1-60)
              )
            )
          )
        (let ((s4-3 (process-spawn
                      manipy
                      :init manipy-init
                      s5-1
                      (-> self entity)
                      (art-group-get-by-name *level* "skel-generic-blast" (the-as (pointer level) #f))
                      #f
                      0
                      :name "manipy"
                      :to self
                      :stack-size #x20000
                      )
                    )
              )
          (when s4-3
            (send-event (ppointer->process s4-3) 'rot-quat gp-2)
            (send-event (ppointer->process s4-3) 'anim-mode 'play1)
            (send-event (ppointer->process s4-3) 'anim "idle")
            (set-vector! (-> (the-as (pointer manipy) s4-3) 0 root scale) 1.0 1.0 1.0 1.0)
            )
          )
        )
      )
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type factory-boss-shot impact) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((f30-1 (* 2048.0 (pow (the float (- (current-time) (-> self state-time))) 0.85)))
          (f28-1 (* 2048.0 (pow (the float (+ (- (seconds -0.05) (-> self state-time)) (current-time))) 0.85)))
          (s5-0 (new 'stack-no-clear 'vector))
          )
      (set! (-> s5-0 quad) (-> self root trans quad))
      (+! (-> s5-0 y) 409.6)
      (when *target*
        (let* ((gp-1 (vector-! (new 'stack-no-clear 'vector) (target-pos 0) s5-0))
               (v1-16 gp-1)
               (f0-12 (sqrtf (+ (* (-> v1-16 x) (-> v1-16 x)) (* (-> v1-16 z) (-> v1-16 z)))))
               )
          (if (and (< f0-12 (+ 4096.0 f30-1)) (< (+ -4096.0 f28-1) f0-12) (< (-> gp-1 y) 1638.4) (< -8192.0 (-> gp-1 y)))
              (deal-damage! self *target* (the-as event-message-block #f))
              )
          )
        )
      )
    )
  )

;; definition of type factory-boss-floorbuster-bomb
(deftype factory-boss-floorbuster-bomb (factory-boss-shot)
  ((targetted-group  int8)
   )
  )

;; definition for method 3 of type factory-boss-floorbuster-bomb
(defmethod inspect ((this factory-boss-floorbuster-bomb))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type factory-boss-shot inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttargetted-group: ~D~%" (-> this targetted-group))
  (label cfg-4)
  this
  )

;; definition of type floorbuster-bomb-explosion
(deftype floorbuster-bomb-explosion (explosion)
  ((targetted-group  int8)
   )
  )

;; definition for method 3 of type floorbuster-bomb-explosion
(defmethod inspect ((this floorbuster-bomb-explosion))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type explosion inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttargetted-group: ~D~%" (-> this targetted-group))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate impact (factory-boss-floorbuster-bomb)
  :virtual #t
  :enter (behavior ()
    (stop-reticle-sound self)
    (sound-play "erol-proj-expl" :position (-> self root trans))
    (let ((v1-5 (-> self root root-prim)))
      (set! (-> v1-5 prim-core collide-as) (collide-spec))
      (set! (-> v1-5 prim-core collide-with) (collide-spec))
      )
    0
    (let ((gp-1 (new 'stack-no-clear 'explosion-init-params)))
      (set! (-> gp-1 spawn-point quad) (-> self root trans quad))
      (quaternion-identity! (-> gp-1 spawn-quat))
      (set! (-> gp-1 radius) 8192.0)
      (set! (-> gp-1 scale) 1.0)
      (set! (-> gp-1 group) (-> *part-group-id-table* 1360))
      (set! (-> gp-1 collide-with)
            (collide-spec backgnd jak crate enemy obstacle vehicle-sphere hit-by-others-list player-list pusher shield)
            )
      (set! (-> gp-1 damage) 2.0)
      (set! (-> gp-1 damage-scale) 1.0)
      (set! (-> gp-1 vehicle-damage-factor) 1.0)
      (set! (-> gp-1 vehicle-impulse-factor) 1.0)
      (set! (-> gp-1 ignore-proc) (process->handle #f))
      (let ((v1-22
              (ppointer->process
                (explosion-spawn-legacy-version (ppointer->process (-> self parent)) floorbuster-bomb-explosion gp-1)
                )
              )
            )
        (if v1-22
            (set! (-> (the-as floorbuster-bomb-explosion v1-22) targetted-group) (-> self targetted-group))
            )
        )
      )
    (send-event (ppointer->process (-> self parent)) 'shot-hit (-> self root trans))
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (when (and (time-elapsed? (-> self state-time) (seconds 10)) (not (-> self child)))
      (deactivate self)
      (go empty-state)
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defskelgroup skel-fac-drop-plat fac-drop-plat fac-drop-plat-lod0-jg fac-drop-plat-idle-ja
              ((fac-drop-plat-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition of type fac-drop-plat-nocollide
(deftype fac-drop-plat-nocollide (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type fac-drop-plat-nocollide
(defmethod inspect ((this fac-drop-plat-nocollide))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (fac-drop-plat-nocollide)
  :virtual #t
  :enter (behavior ()
    (ja-post)
    )
  :trans (behavior ()
    (if (< (vector-vector-distance (-> self draw origin) (math-camera-pos)) (-> self draw origin w))
        (logclear! (-> self draw status) (draw-control-status force-vu1))
        (logior! (-> self draw status) (draw-control-status force-vu1))
        )
    )
  :code sleep-code
  )

;; definition for function fac-drop-plat-nocollide-init-by-other
(defbehavior fac-drop-plat-nocollide-init-by-other fac-drop-plat-nocollide ((arg0 entity-actor))
  (stack-size-set! (-> self main-thread) 16)
  (set! (-> self root) (new 'process 'trsqv))
  (process-drawable-from-entity! self arg0)
  (set! (-> self level) (level-get *level* 'factoryd))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fac-drop-plat" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self draw light-index) (the-as uint 17))
  (set! (-> self entity) arg0)
  (logclear! (-> self mask) (process-mask enemy))
  (go-virtual idle)
  )

;; definition of type fac-drop-plat
(deftype fac-drop-plat (process-drawable)
  ((root              collide-shape :override)
   (x-rotation-speed  float)
   (y-rotation-speed  float)
   (boss              entity-actor)
   )
  (:state-methods
    idle
    fall-away
    done-falling
    )
  )

;; definition for method 3 of type fac-drop-plat
(defmethod inspect ((this fac-drop-plat))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tx-rotation-speed: ~f~%" (-> this x-rotation-speed))
  (format #t "~2Ty-rotation-speed: ~f~%" (-> this y-rotation-speed))
  (format #t "~2Tboss: ~A~%" (-> this boss))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (fac-drop-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (let ((gp-0 -1))
         (cond
           ((type? proc factory-boss-floorbuster-bomb)
            (set! gp-0 (-> (the-as factory-boss-floorbuster-bomb proc) targetted-group))
            )
           ((type? proc floorbuster-bomb-explosion)
            (set! gp-0 (-> (the-as floorbuster-bomb-explosion proc) targetted-group))
            )
           )
         (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-3 from) (process->ppointer self))
           (set! (-> a1-3 num-params) 2)
           (set! (-> a1-3 message) 'fall?)
           (set! (-> a1-3 param 0) (the-as uint (-> self entity)))
           (set! (-> a1-3 param 1) (the-as uint gp-0))
           (let ((t9-2 send-event-function)
                 (v1-9 (-> self boss))
                 )
             (when (t9-2
                     (if v1-9
                         (-> v1-9 extra process)
                         )
                     a1-3
                     )
               (sound-play "break-grate" :position (-> self root trans))
               (logclear! (-> self mask) (process-mask actor-pause))
               (go-virtual fall-away)
               )
             )
           )
         )
       )
      (('fall!)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go-virtual fall-away)
       )
      )
    )
  :enter (behavior ()
    (transform-post)
    )
  :code sleep-code
  )

;; definition for function fac-drop-plat-setup-rots
;; WARN: Return type mismatch float vs object.
(defbehavior fac-drop-plat-setup-rots fac-drop-plat ()
  (set! (-> self x-rotation-speed) (rand-vu-float-range 546.13336 3094.7556))
  (if (< 1820.4445 (-> self x-rotation-speed))
      (+! (-> self x-rotation-speed) -3640.889)
      )
  (set! (-> self y-rotation-speed) (rand-vu-float-range 546.13336 3094.7556))
  (if (< 1820.4445 (-> self y-rotation-speed))
      (set! (-> self y-rotation-speed) (+ -3640.889 (-> self y-rotation-speed)))
      )
  )

;; definition for function fac-drop-plat-rot-once
;; INFO: Used lq/sq
;; ERROR: Stack slot load at 48 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 64 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 48 mismatch: defined as size 4, got size 16
;; ERROR: Stack slot load at 64 mismatch: defined as size 4, got size 16
;; WARN: Return type mismatch quaternion vs object.
(defbehavior fac-drop-plat-rot-once fac-drop-plat ((arg0 degrees))
  (local-vars (sv-48 float) (sv-64 float))
  (let ((gp-0 (new 'stack-no-clear 'quaternion)))
    (let ((s5-0 (new 'stack-no-clear 'quaternion)))
      (let ((s3-0 quaternion-set!)
            (s2-0 gp-0)
            (s1-0 (sin (* arg0 (-> self x-rotation-speed))))
            (s0-0 0.0)
            )
        (set! sv-48 (the-as float 0.0))
        (let ((t0-0 (cos (* arg0 (-> self x-rotation-speed)))))
          (s3-0 s2-0 s1-0 s0-0 sv-48 t0-0)
          )
        )
      (let ((s3-1 quaternion-set!)
            (s2-1 s5-0)
            (s1-1 0.0)
            (s0-1 (sin (* arg0 (-> self y-rotation-speed))))
            )
        (set! sv-64 (the-as float 0.0))
        (let ((t0-1 (cos (* arg0 (-> self y-rotation-speed)))))
          (s3-1 s2-1 s1-1 s0-1 sv-64 t0-1)
          )
        )
      (quaternion-normalize! (quaternion*! gp-0 gp-0 s5-0))
      )
    (quaternion-normalize! (quaternion*! (-> self root quat) gp-0 (-> self root quat)))
    )
  )

;; failed to figure out what this is:
(defstate fall-away (fac-drop-plat)
  :virtual #t
  :enter (behavior ()
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (fac-drop-plat-setup-rots)
    (fac-drop-plat-rot-once (the-as degrees #x3f800000))
    (fac-drop-plat-setup-rots)
    (set-time! (-> self state-time))
    (set! (-> self x-rotation-speed) (rand-vu-float-range 546.13336 1820.4445))
    (set! (-> self y-rotation-speed) (rand-vu-float-range 546.13336 1820.4445))
    (logclear! (-> self mask) (process-mask actor-pause))
    (if (-> self entity)
        (toggle-status (-> self entity) (entity-perm-status subtask-complete) #t)
        )
    )
  :code sleep-code
  :post (behavior ()
    (if (time-elapsed? (-> self state-time) (seconds 2.5))
        (go-virtual done-falling)
        )
    (when (time-elapsed? (-> self state-time) (seconds 0.5))
      (let ((f0-2 (lerp-scale 0.0 1.0 (the float (- (current-time) (-> self state-time))) 150.0 300.0)))
        (set! (-> self root trans y) (- (-> self root trans y) (* 2048.0 f0-2)))
        (fac-drop-plat-rot-once f0-2)
        )
      (vector-float*! (-> self root scale) (-> self root scale) 0.98)
      )
    (transform-post)
    )
  )

;; failed to figure out what this is:
(defstate done-falling (fac-drop-plat)
  :virtual #t
  :enter (behavior ()
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (ja-post)
    (logior! (-> self mask) (process-mask actor-pause))
    )
  :code sleep-code
  )

;; definition for method 10 of type fac-drop-plat
(defmethod deactivate ((this fac-drop-plat))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (call-parent-method this)
  (none)
  )

;; definition for method 11 of type fac-drop-plat
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this fac-drop-plat) (arg0 entity-actor))
  (local-vars (sv-16 res-tag))
  (with-pp
    (stack-size-set! (-> this main-thread) 32)
    (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
      (let ((v1-4 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> v1-4 prim-core collide-as) (collide-spec obstacle impenetrable-obj))
        (set! (-> v1-4 prim-core collide-with) (collide-spec jak bot enemy hit-by-others-list player-list projectile))
        (set! (-> v1-4 prim-core action) (collide-action solid))
        (set! (-> v1-4 transform-index) 3)
        (set-vector! (-> v1-4 local-sphere) 0.4096 0.0 -0.4096 12460.032)
        (set! (-> s4-0 total-prims) (the-as uint 1))
        (set! (-> s4-0 root-prim) v1-4)
        )
      (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
      (let ((v1-7 (-> s4-0 root-prim)))
        (set! (-> s4-0 backup-collide-as) (-> v1-7 prim-core collide-as))
        (set! (-> s4-0 backup-collide-with) (-> v1-7 prim-core collide-with))
        )
      (set! (-> this root) s4-0)
      )
    (process-drawable-from-entity! this arg0)
    (set! (-> pp level) (level-get *level* 'factoryd))
    (initialize-skeleton
      this
      (the-as skeleton-group (art-group-get-by-name *level* "skel-fac-drop-plat" (the-as (pointer level) #f)))
      (the-as pair 0)
      )
    (set! (-> this draw light-index) (the-as uint 17))
    (set! sv-16 (new 'static 'res-tag))
    (let ((v1-16 (res-lump-data arg0 'actor-groups (pointer actor-group) :tag-ptr (& sv-16))))
      (cond
        ((and v1-16 (nonzero? (-> sv-16 elt-count)) (nonzero? (-> v1-16 0 length)))
         (set! (-> this boss) (-> v1-16 0 data 0 actor))
         )
        (else
          (format 0 "ERROR: ~S: entity missing actor-group!~%" (-> this name))
          (set! (-> this boss) #f)
          )
        )
      )
    (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status subtask-complete)))
        (go (method-of-object this done-falling))
        (go (method-of-object this idle))
        )
    )
  )

;; definition for function fac-drop-plat-init-by-other
;; WARN: Return type mismatch entity-actor vs object.
(defbehavior fac-drop-plat-init-by-other fac-drop-plat ((arg0 entity-actor))
  (init-from-entity! self arg0)
  (set! (-> self entity) arg0)
  arg0
  )

;; failed to figure out what this is:
(defskelgroup skel-factory-boss errol-lowres errol-lowres-lod0-jg errol-lowres-idle30-ja
              ((errol-lowres-lod0-mg (meters 20)) (errol-lowres-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition of type factory-boss-critter-tracker
(deftype factory-boss-critter-tracker (structure)
  ((handle  handle)
   (flags   facboss-critter-tracker-flag)
   (dest    vector  :inline)
   )
  )

;; definition for method 3 of type factory-boss-critter-tracker
(defmethod inspect ((this factory-boss-critter-tracker))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-critter-tracker)
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tdest: #<vector @ #x~X>~%" (-> this dest))
  (label cfg-4)
  this
  )

;; definition of type factory-boss-machine-state
(deftype factory-boss-machine-state (structure)
  ((damaged-low-smoke-part    sparticle-launch-control)
   (damaged-high-smoke-part   sparticle-launch-control)
   (damaged-left-spark-part   sparticle-launch-control)
   (damaged-right-spark-part  sparticle-launch-control)
   (ring-part                 sparticle-launch-control)
   (lightning                 lightning-control)
   (machine-sound             sound-id)
   (state                     int8)
   (flags                     facboss-machine-state-flag)
   (left-spark-timer          time-frame)
   (right-spark-timer         time-frame)
   (ring-timer                time-frame)
   )
  )

;; definition for method 3 of type factory-boss-machine-state
(defmethod inspect ((this factory-boss-machine-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-machine-state)
  (format #t "~1Tdamaged-low-smoke-part: ~A~%" (-> this damaged-low-smoke-part))
  (format #t "~1Tdamaged-high-smoke-part: ~A~%" (-> this damaged-high-smoke-part))
  (format #t "~1Tdamaged-left-spark-part: ~A~%" (-> this damaged-left-spark-part))
  (format #t "~1Tdamaged-right-spark-part: ~A~%" (-> this damaged-right-spark-part))
  (format #t "~1Tring-part: ~A~%" (-> this ring-part))
  (format #t "~1Tlightning: ~A~%" (-> this lightning))
  (format #t "~1Tmachine-sound: ~D~%" (-> this machine-sound))
  (format #t "~1Tstate: ~D~%" (-> this state))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tleft-spark-timer: ~D~%" (-> this left-spark-timer))
  (format #t "~1Tright-spark-timer: ~D~%" (-> this right-spark-timer))
  (format #t "~1Tring-timer: ~D~%" (-> this ring-timer))
  (label cfg-4)
  this
  )

;; definition of type factory-boss-lightning-gate
(deftype factory-boss-lightning-gate (structure)
  ((center          vector             :inline)
   (x-off           float)
   (z-off           float)
   (blocking-plane  handle)
   (lightning       lightning-control  4)
   )
  (:methods
    (init! (_type_ int) none)
    (disable (_type_) none)
    (factory-boss-lightning-gate-method-11 (_type_ vector float float process) none)
    )
  )

;; definition for method 3 of type factory-boss-lightning-gate
(defmethod inspect ((this factory-boss-lightning-gate))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-boss-lightning-gate)
  (format #t "~1Tcenter: #<vector @ #x~X>~%" (-> this center))
  (format #t "~1Tx-off: ~f~%" (-> this x-off))
  (format #t "~1Tz-off: ~f~%" (-> this z-off))
  (format #t "~1Tblocking-plane: ~D~%" (-> this blocking-plane))
  (format #t "~1Tlightning[4] @ #x~X~%" (-> this lightning))
  (label cfg-4)
  this
  )

;; definition for method 9 of type factory-boss-lightning-gate
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init! ((this factory-boss-lightning-gate) (arg0 int))
  (set-factoryd-light! 1.0)
  (let ((v1-0 (new 'stack-no-clear 'vector))
        (a0-2 (new 'stack-no-clear 'vector))
        )
    (set! (-> v1-0 quad) (-> this center quad))
    (+! (-> v1-0 x) (-> this x-off))
    (+! (-> v1-0 z) (-> this z-off))
    (+! (-> v1-0 y) 9175.04)
    (set! (-> a0-2 quad) (-> this center quad))
    (set! (-> a0-2 x) (- (-> a0-2 x) (-> this x-off)))
    (set! (-> a0-2 z) (- (-> a0-2 z) (-> this z-off)))
    (+! (-> a0-2 y) 9011.2)
    (dotimes (a1-5 4)
      (let ((a2-7 (-> this lightning a1-5 state mode)))
        (when (or (zero? a2-7) (= a2-7 3))
          (let ((a3-2 (-> this lightning a1-5))
                (a2-11 v1-0)
                )
            (set! (-> a3-2 state meet data 0 quad) (-> a2-11 quad))
            )
          (let ((a3-5 (-> this lightning a1-5))
                (a2-15 a0-2)
                )
            (set! (-> a3-5 state meet data (+ (-> a3-5 state points-to-draw) -1) quad) (-> a2-15 quad))
            )
          (let ((a2-19 (-> this lightning a1-5))
                (a3-8 1)
                )
            (let ((t0-5 (!= a3-8 (-> a2-19 state mode))))
              (case a3-8
                ((3)
                 (if t0-5
                     (set! (-> a2-19 state counter) 0.0)
                     )
                 )
                ((1)
                 (set! (-> a2-19 state start-color) (-> a2-19 spec start-color))
                 (set! (-> a2-19 state end-color) (-> a2-19 spec end-color))
                 )
                )
              )
            (set! (-> a2-19 state mode) (the-as uint a3-8))
            )
          )
        )
      (+! (-> v1-0 y) 9830.4)
      (+! (-> a0-2 y) 9830.4)
      )
    )
  (let ((s4-0 (new 'static 'inline-array vector 2 (new 'static 'vector) (new 'static 'vector))))
    (set! (-> s4-0 0 quad) (-> this center quad))
    (+! (-> s4-0 0 x) (-> this x-off))
    (+! (-> s4-0 0 z) (-> this z-off))
    (set! (-> s4-0 1 quad) (-> s4-0 0 quad))
    (set! (-> s4-0 1 x) (- (-> s4-0 1 x) (* 2.0 (-> this x-off))))
    (set! (-> s4-0 1 z) (- (-> s4-0 1 z) (* 2.0 (-> this z-off))))
    (when (not (handle->process (-> this blocking-plane)))
      (set! (-> this blocking-plane)
            (ppointer->handle
              (process-spawn blocking-plane s4-0 45056.0 :name "blocking-plane" :to (the-as process-tree arg0))
              )
            )
      (send-event (handle->process (-> this blocking-plane)) 'collide-as #x4000000)
      (send-event (handle->process (-> this blocking-plane)) 'attack-mode 'shock)
      )
    )
  0
  (none)
  )

;; definition for method 10 of type factory-boss-lightning-gate
;; WARN: Return type mismatch int vs none.
(defmethod disable ((this factory-boss-lightning-gate))
  (set-factoryd-light! 0.0)
  (dotimes (s5-0 4)
    (let ((v1-3 (-> this lightning s5-0 state mode)))
      (cond
        ((or (zero? v1-3) (= v1-3 3))
         )
        (else
          (let ((v1-7 (-> this lightning s5-0))
                (a0-4 3)
                )
            (let ((a1-1 (!= a0-4 (-> v1-7 state mode))))
              (case a0-4
                ((3)
                 (if a1-1
                     (set! (-> v1-7 state counter) 0.0)
                     )
                 )
                ((1)
                 (set! (-> v1-7 state start-color) (-> v1-7 spec start-color))
                 (set! (-> v1-7 state end-color) (-> v1-7 spec end-color))
                 )
                )
              )
            (set! (-> v1-7 state mode) (the-as uint a0-4))
            )
          )
        )
      )
    (let ((a0-6 (handle->process (-> this blocking-plane))))
      (if a0-6
          (deactivate a0-6)
          )
      )
    )
  0
  (none)
  )

;; definition for method 11 of type factory-boss-lightning-gate
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod factory-boss-lightning-gate-method-11 ((this factory-boss-lightning-gate) (arg0 vector) (arg1 float) (arg2 float) (arg3 process))
  (set-factoryd-light! 0.0)
  (set! (-> this center quad) (-> arg0 quad))
  (set! (-> this x-off) arg1)
  (set! (-> this z-off) arg2)
  (set! (-> this blocking-plane) (the-as handle #f))
  (dotimes (s4-1 4)
    (set! (-> this lightning s4-1) (new
                                     'process
                                     'lightning-control
                                     (new 'static 'lightning-spec
                                       :name #f
                                       :flags (lightning-spec-flags lsf0)
                                       :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                       :end-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                       :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                       :fade-start-factor 0.2
                                       :fade-time 120.0
                                       :texture (new 'static 'texture-id :index #x3f :page #x4)
                                       :reduction 0.42
                                       :num-points 8
                                       :box-size 8192.0
                                       :merge-factor 0.5
                                       :merge-count 2
                                       :radius 512.0
                                       :duration -1.0
                                       :sound #f
                                       )
                                     arg3
                                     0.0
                                     )
          )
    (let ((v1-6 (-> this lightning s4-1))
          (a0-4 0)
          )
      (let ((a1-3 (!= a0-4 (-> v1-6 state mode))))
        (case a0-4
          ((3)
           (if a1-3
               (set! (-> v1-6 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-6 state start-color) (-> v1-6 spec start-color))
           (set! (-> v1-6 state end-color) (-> v1-6 spec end-color))
           )
          )
        )
      (set! (-> v1-6 state mode) (the-as uint a0-4))
      )
    )
  0
  (none)
  )

;; definition for method 7 of type factory-boss-lightning-gate
(defmethod relocate ((this factory-boss-lightning-gate) (offset int))
  (dotimes (v1-0 4)
    (if (nonzero? (-> this lightning v1-0))
        (&+! (-> this lightning v1-0) offset)
        )
    )
  (call-parent-method this offset)
  )

;; definition of type factory-boss
(deftype factory-boss (process-drawable)
  ((child                  (pointer process-drawable)   :override)
   (self                   factory-boss                 :override)
   (center                 vector                        :inline)
   (shot-timer             time-frame)
   (critter                factory-boss-critter-tracker  8 :inline)
   (ammo                   handle                        10)
   (catwalk-angle          float)
   (catwalk-vel            float)
   (bombs-to-drop          int8)
   (bomb-type              facboss-bomb-type)
   (root-angle             float)
   (machine-state          factory-boss-machine-state    4 :inline)
   (chosen-machine         int8)
   (command-index          int8)
   (command-timer          time-frame)
   (current-round          int32)
   (hits-taken             int8)
   (camera-timer           time-frame)
   (reticle-info           factory-boss-reticle-info     :inline)
   (actor-group            (pointer actor-group))
   (actor-group-count      int32)
   (launching-group        sparticle-launch-group)
   (floor-targets          int8                          7)
   (num-floor-targets      int8)
   (reticle-sound          sound-id)
   (reticle-sound-playing  symbol)
   (warp-blocker           factory-boss-lightning-gate   :inline)
   (entry-blocker          factory-boss-lightning-gate   :inline)
   )
  (:state-methods
    beaten
    run-to-machine
    get-hit
    launch-critters
    drop-bombs
    hidden
    )
  (:methods
    (factory-boss-method-26 (_type_ int vector vector symbol) symbol)
    (factory-boss-method-27 (_type_ vector) symbol)
    (next-catwalk-angle (_type_ int) float)
    (factory-boss-method-29 (_type_ float vector) none)
    (factory-boss-method-30 (_type_) none)
    )
  )

;; definition for method 3 of type factory-boss
(defmethod inspect ((this factory-boss))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcenter: #<vector @ #x~X>~%" (-> this center))
  (format #t "~2Tshot-timer: ~D~%" (-> this shot-timer))
  (format #t "~2Tcritter[8] @ #x~X~%" (-> this critter))
  (format #t "~2Tammo[10] @ #x~X~%" (-> this ammo))
  (format #t "~2Tcatwalk-angle: ~f~%" (-> this catwalk-angle))
  (format #t "~2Tcatwalk-vel: ~f~%" (-> this catwalk-vel))
  (format #t "~2Tbombs-to-drop: ~D~%" (-> this bombs-to-drop))
  (format #t "~2Tbomb-type: ~D~%" (-> this bomb-type))
  (format #t "~2Troot-angle: ~f~%" (-> this root-angle))
  (format #t "~2Tmachine-state[4] @ #x~X~%" (-> this machine-state))
  (format #t "~2Tchosen-machine: ~D~%" (-> this chosen-machine))
  (format #t "~2Tcommand-index: ~D~%" (-> this command-index))
  (format #t "~2Tcommand-timer: ~D~%" (-> this command-timer))
  (format #t "~2Tcurrent-round: ~D~%" (-> this current-round))
  (format #t "~2Thits-taken: ~D~%" (-> this hits-taken))
  (format #t "~2Tcamera-timer: ~D~%" (-> this camera-timer))
  (format #t "~2Treticle-info: #<factory-boss-reticle-info @ #x~X>~%" (-> this reticle-info))
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Tlaunching-group: ~A~%" (-> this launching-group))
  (format #t "~2Tfloor-targets[7] @ #x~X~%" (-> this floor-targets))
  (format #t "~2Tnum-floor-targets: ~D~%" (-> this num-floor-targets))
  (format #t "~2Treticle-sound: ~D~%" (-> this reticle-sound))
  (format #t "~2Treticle-sound-playing: ~A~%" (-> this reticle-sound-playing))
  (format #t "~2Twarp-blocker: #<factory-boss-lightning-gate @ #x~X>~%" (-> this warp-blocker))
  (format #t "~2Tentry-blocker: #<factory-boss-lightning-gate @ #x~X>~%" (-> this entry-blocker))
  (label cfg-7)
  this
  )

;; definition for method 30 of type factory-boss
;; WARN: Return type mismatch int vs none.
(defmethod factory-boss-method-30 ((this factory-boss))
  (when (-> this reticle-sound-playing)
    (sound-stop (-> this reticle-sound))
    (set! (-> this reticle-sound-playing) #f)
    )
  0
  (none)
  )

;; definition for method 27 of type factory-boss
;; INFO: Used lq/sq
(defmethod factory-boss-method-27 ((this factory-boss) (arg0 vector))
  (let ((v1-0 (new 'stack-no-clear 'vector)))
    (set! (-> v1-0 quad) (-> arg0 quad))
    (set! (-> v1-0 w) 16384.0)
    (add-root-sphere-to-hash! (-> this nav) v1-0 255)
    )
  )

;; definition for method 26 of type factory-boss
(defmethod factory-boss-method-26 ((this factory-boss) (arg0 int) (arg1 vector) (arg2 vector) (arg3 symbol))
  (let ((s4-0 (new 'stack-no-clear 'vector)))
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      (when arg3
        (let* ((v1-2 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-3 (the-as number (logior #x3f800000 v1-2)))
               (f0-2 (+ -1.0 (the-as float v1-3)))
               )
          (cond
            ((< f0-2 0.25)
             (+! arg0 -1)
             )
            ((< f0-2 0.5)
             (+! arg0 1)
             )
            )
          )
        (if (>= arg0 4)
            (+! arg0 -4)
            )
        (if (< arg0 0)
            (+! arg0 4)
            )
        )
      (cond
        ((zero? arg0)
         (set-vector! s3-0 1.0 0.0 1.0 1.0)
         (set-vector! s4-0 -1.0 0.0 1.0 1.0)
         )
        ((= arg0 1)
         (set-vector! s3-0 1.0 0.0 -1.0 1.0)
         (set-vector! s4-0 1.0 0.0 1.0 1.0)
         )
        ((= arg0 2)
         (set-vector! s3-0 -1.0 0.0 -1.0 1.0)
         (set-vector! s4-0 1.0 0.0 -1.0 1.0)
         )
        (else
          (set-vector! s3-0 -1.0 0.0 1.0 1.0)
          (set-vector! s4-0 -1.0 0.0 -1.0 1.0)
          )
        )
      (vector+float*! arg1 (-> this center) s3-0 98304.0)
      (+! (-> arg1 y) 4096.0)
      (if (factory-boss-method-27 this arg1)
          (return #f)
          )
      (vector+float*! arg2 (-> this center) s3-0 73728.0)
      )
    (+! (-> arg2 y) 1679.36)
    (if (not (factory-boss-method-27 this arg2))
        (return #t)
        )
    (vector+float*! arg2 arg2 s4-0 16384.0)
    (if (not (factory-boss-method-27 this arg2))
        (return #t)
        )
    (vector+float*! arg2 arg2 s4-0 -32768.0)
    (if (not (factory-boss-method-27 this arg2))
        (return #t)
        )
    (vector+float*! arg2 arg2 s4-0 49152.0)
    (if (not (factory-boss-method-27 this arg2))
        (return #t)
        )
    (vector+float*! arg2 arg2 s4-0 -65536.0)
    )
  (if (not (factory-boss-method-27 this arg2))
      (return #t)
      )
  #f
  )

;; definition for method 7 of type factory-boss
(defmethod relocate ((this factory-boss) (offset int))
  (relocate (-> this reticle-info) offset)
  (relocate (-> this warp-blocker) offset)
  (relocate (-> this entry-blocker) offset)
  (dotimes (v1-6 4)
    (let ((a0-6 (-> this machine-state v1-6)))
      (if (nonzero? (-> a0-6 damaged-low-smoke-part))
          (&+! (-> a0-6 damaged-low-smoke-part) offset)
          )
      (if (nonzero? (-> a0-6 damaged-high-smoke-part))
          (&+! (-> a0-6 damaged-high-smoke-part) offset)
          )
      (if (nonzero? (-> a0-6 damaged-left-spark-part))
          (&+! (-> a0-6 damaged-left-spark-part) offset)
          )
      (if (nonzero? (-> a0-6 damaged-right-spark-part))
          (&+! (-> a0-6 damaged-right-spark-part) offset)
          )
      (if (nonzero? (-> a0-6 ring-part))
          (&+! (-> a0-6 ring-part) offset)
          )
      (if (nonzero? (-> a0-6 lightning))
          (&+! (-> a0-6 lightning) offset)
          )
      )
    )
  (call-parent-method this offset)
  )

;; definition for method 10 of type factory-boss
(defmethod deactivate ((this factory-boss))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (factory-boss-reticle-info-method-11 (-> this reticle-info))
  (factory-boss-method-30 this)
  (dotimes (s5-0 4)
    (let ((s4-0 (-> this machine-state s5-0)))
      (if (nonzero? (-> s4-0 damaged-low-smoke-part))
          (kill-particles (-> s4-0 damaged-low-smoke-part))
          )
      (if (nonzero? (-> s4-0 damaged-high-smoke-part))
          (kill-particles (-> s4-0 damaged-high-smoke-part))
          )
      (if (nonzero? (-> s4-0 damaged-left-spark-part))
          (kill-particles (-> s4-0 damaged-left-spark-part))
          )
      (if (nonzero? (-> s4-0 damaged-right-spark-part))
          (kill-particles (-> s4-0 damaged-right-spark-part))
          )
      (if (nonzero? (-> s4-0 ring-part))
          (kill-particles (-> s4-0 ring-part))
          )
      (when (logtest? (-> s4-0 flags) (facboss-machine-state-flag fms0))
        (sound-stop (-> s4-0 machine-sound))
        (logclear! (-> s4-0 flags) (facboss-machine-state-flag fms0))
        )
      )
    )
  (call-parent-method this)
  (none)
  )

;; definition for method 11 of type factory-boss
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this factory-boss) (arg0 entity-actor))
  (local-vars (sv-16 res-tag))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((v1-2 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-2 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-2 prim-core action) (collide-action solid))
      (set! (-> v1-2 transform-index) 3)
      (set-vector! (-> v1-2 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-2)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-5 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-5 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-5 prim-core collide-with))
      )
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-factory-boss" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logior! (-> this skel status) (joint-control-status eye-anim))
  (logior! (-> this mask) (process-mask enemy))
  (set-vector! (-> this root scale) 1.6 1.6 1.6 1.0)
  (set! (-> this center quad) (-> this root trans quad))
  (+! (-> this center z) 83992.98)
  (+! (-> this center y) -65536.0)
  (+! (-> this center x) -83992.98)
  (+! (-> this root trans y) -6492.16)
  (dotimes (v1-24 8)
    (set! (-> this critter v1-24 handle) (the-as handle #f))
    )
  (dotimes (v1-27 10)
    (set! (-> this ammo v1-27) (the-as handle #f))
    )
  (init! (-> this reticle-info) this)
  (dotimes (s4-2 4)
    (let ((s3-1 (-> this machine-state s4-2)))
      (set! (-> s3-1 state) 0)
      (set! (-> s3-1 damaged-low-smoke-part) (create-launch-control (-> *part-group-id-table* 1362) this))
      (set! (-> s3-1 damaged-high-smoke-part) (create-launch-control (-> *part-group-id-table* 1361) this))
      (set! (-> s3-1 damaged-left-spark-part) (create-launch-control (-> *part-group-id-table* 1378) this))
      (set! (-> s3-1 damaged-right-spark-part) (create-launch-control (-> *part-group-id-table* 1378) this))
      (set! (-> s3-1 machine-sound) (new-sound-id))
      (set! (-> s3-1 flags) (facboss-machine-state-flag fms1))
      (set! (-> s3-1 left-spark-timer) 0)
      (set! (-> s3-1 right-spark-timer) 0)
      (set! (-> s3-1 ring-timer) 0)
      (let ((v1-47 s4-2))
        (cond
          ((zero? v1-47)
           (set! (-> s3-1 ring-part) (create-launch-control (-> *part-group-id-table* 1363) this))
           (set! (-> s3-1 lightning) (new
                                       'process
                                       'lightning-control
                                       (new 'static 'lightning-spec
                                         :name #f
                                         :flags (lightning-spec-flags lsf0)
                                         :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                         :end-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                         :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                         :fade-start-factor 0.2
                                         :fade-time 120.0
                                         :texture (new 'static 'texture-id :index #x3f :page #x4)
                                         :reduction 0.72
                                         :num-points 32
                                         :box-size 16384.0
                                         :merge-factor 0.5
                                         :merge-count 2
                                         :radius 2048.0
                                         :duration -1.0
                                         :sound #f
                                         )
                                       this
                                       0.0
                                       )
                 )
           )
          ((= v1-47 1)
           (set! (-> s3-1 ring-part) (create-launch-control (-> *part-group-id-table* 1364) this))
           (set! (-> s3-1 lightning) (new
                                       'process
                                       'lightning-control
                                       (new 'static 'lightning-spec
                                         :name #f
                                         :flags (lightning-spec-flags lsf0)
                                         :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                         :end-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                         :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                         :fade-start-factor 0.2
                                         :fade-time 120.0
                                         :texture (new 'static 'texture-id :index #x40 :page #x4)
                                         :reduction 0.72
                                         :num-points 32
                                         :box-size 16384.0
                                         :merge-factor 0.5
                                         :merge-count 2
                                         :radius 2048.0
                                         :duration -1.0
                                         :sound #f
                                         )
                                       this
                                       0.0
                                       )
                 )
           )
          ((= v1-47 2)
           (set! (-> s3-1 ring-part) (create-launch-control (-> *part-group-id-table* 1365) this))
           (set! (-> s3-1 lightning) (new
                                       'process
                                       'lightning-control
                                       (new 'static 'lightning-spec
                                         :name #f
                                         :flags (lightning-spec-flags lsf0)
                                         :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                         :end-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                         :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                         :fade-start-factor 0.2
                                         :fade-time 120.0
                                         :texture (new 'static 'texture-id :index #x3b :page #x4)
                                         :reduction 0.72
                                         :num-points 32
                                         :box-size 16384.0
                                         :merge-factor 0.5
                                         :merge-count 2
                                         :radius 2048.0
                                         :duration -1.0
                                         :sound #f
                                         )
                                       this
                                       0.0
                                       )
                 )
           )
          (else
            (set! (-> s3-1 ring-part) (create-launch-control (-> *part-group-id-table* 1366) this))
            (set! (-> s3-1 lightning) (new
                                        'process
                                        'lightning-control
                                        (new 'static 'lightning-spec
                                          :name #f
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :b #x80 :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :b #x80 :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 120.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.72
                                          :num-points 32
                                          :box-size 16384.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 2048.0
                                          :duration -1.0
                                          :sound #f
                                          )
                                        this
                                        0.0
                                        )
                  )
            )
          )
        )
      (let ((v1-68 (-> s3-1 lightning))
            (a0-41 0)
            )
        (let ((a1-21 (!= a0-41 (-> v1-68 state mode))))
          (case a0-41
            ((3)
             (if a1-21
                 (set! (-> v1-68 state counter) 0.0)
                 )
             )
            ((1)
             (set! (-> v1-68 state start-color) (-> v1-68 spec start-color))
             (set! (-> v1-68 state end-color) (-> v1-68 spec end-color))
             )
            )
          )
        (set! (-> v1-68 state mode) (the-as uint a0-41))
        )
      )
    )
  (set! (-> this chosen-machine) 0)
  (let ((a0-43 (nav-mesh-from-res-tag (-> this entity) 'nav-mesh-actor 0)))
    (if a0-43
        (change-to a0-43 this)
        )
    )
  (set! (-> this catwalk-angle) 0.0)
  (set! (-> this catwalk-vel) 0.0)
  (set! (-> this bombs-to-drop) 0)
  (set! (-> this root-angle) (+ 32768.0 (-> this catwalk-angle)))
  (set! (-> this hits-taken) 0)
  (set! (-> this camera-timer) 0)
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-76 (res-lump-data arg0 'actor-groups pointer :tag-ptr (& sv-16))))
    (cond
      ((and v1-76 (nonzero? (-> sv-16 elt-count)))
       (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
       (set! (-> this actor-group) (the-as (pointer actor-group) v1-76))
       )
      (else
        (format 0 "ERROR: ~S: entity missing actor-groups!~%" (-> this name))
        (set! (-> this actor-group-count) 0)
        0
        )
      )
    )
  (set! (-> this num-floor-targets) 0)
  (when (> (-> this actor-group-count) 0)
    (let ((s5-1 (-> this actor-group (+ (-> this actor-group-count) -1))))
      (dotimes (s4-3 (-> s5-1 length))
        (process-spawn
          fac-drop-plat-nocollide
          (-> s5-1 data s4-3 actor)
          :name "fac-drop-plat-nocollide"
          :from *factory-boss-dead-pool*
          :to this
          )
        )
      )
    )
  (set! (-> this reticle-sound) (new-sound-id))
  (set! (-> this reticle-sound-playing) #f)
  (let ((s5-2 (new 'stack-no-clear 'vector)))
    (set! (-> s5-2 quad) (-> this center quad))
    (+! (-> s5-2 z) 141312.0)
    (factory-boss-lightning-gate-method-11 (-> this warp-blocker) s5-2 28672.0 0.0 this)
    (set! (-> s5-2 quad) (-> this center quad))
    (+! (-> s5-2 z) -141312.0)
    (factory-boss-lightning-gate-method-11 (-> this entry-blocker) s5-2 28672.0 0.0 this)
    )
  (set! (-> this draw force-lod) 1)
  (go (method-of-object this hidden))
  )

;; definition of type hud-factory-boss
(deftype hud-factory-boss (hud)
  ()
  )

;; definition for method 3 of type hud-factory-boss
(defmethod inspect ((this hud-factory-boss))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 15 of type hud-factory-boss
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-factory-boss))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 472.0 (* 130.0 (-> this offset))))
    160
    )
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites)) 0 0)
  (let ((f30-0 (* 25.0 (the float (- 4 (-> this values 0 current))))))
    (set-as-offset-from! (-> this sprites 5) (the-as vector4w (-> this sprites)) 8 67)
    (set! (-> this sprites 5 scale-x) (* 0.164 f30-0))
    (cond
      ((< 50.0 f30-0)
       (set! (-> this sprites 5 color x) (the int (lerp-scale 0.0 128.0 f30-0 100.0 50.0)))
       (set! (-> this sprites 5 color y) (the int (lerp-scale 255.0 128.0 f30-0 100.0 50.0)))
       (set! (-> this sprites 5 color z) 0)
       0
       )
      ((< 20.0 f30-0)
       (set! (-> this sprites 5 color x) (the int (lerp-scale 128.0 255.0 f30-0 50.0 20.0)))
       (set! (-> this sprites 5 color y) (the int (lerp-scale 128.0 0.0 f30-0 50.0 20.0)))
       (set! (-> this sprites 5 color z) 0)
       0
       )
      (else
        (set! (-> this sprites 5 color x) 255)
        (set! (-> this sprites 5 color y) 0)
        (set! (-> this sprites 5 color z) 0)
        0
        )
      )
    )
  (set-as-offset-from! (-> this sprites 4) (the-as vector4w (-> this sprites)) 9 66)
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites)) -51 66)
  (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites)) 4 66)
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-factory-boss
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this hud-factory-boss))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type hud-factory-boss
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-factory-boss))
  (set! (-> this level) (level-get *level* 'factoryd))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :page #xab0)))
        )
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 1 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xab0)))
        )
  (set! (-> this sprites 1 scale-x) 1.0)
  (set! (-> this sprites 1 scale-y) 1.0)
  (set! (-> this sprites 1 flags) (hud-sprite-flags))
  (set! (-> this sprites 5 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #xab0)))
        )
  (set! (-> this sprites 5 scale-x) 1.0)
  (set! (-> this sprites 5 scale-y) 1.3)
  (set! (-> this sprites 5 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 4 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x4 :page #xab0)))
        )
  (set! (-> this sprites 4 scale-x) 1.0)
  (set! (-> this sprites 4 scale-y) 1.0)
  (set! (-> this sprites 4 flags) (hud-sprite-flags hsf0 hsf2))
  (set! (-> this sprites 3 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x4 :page #xab0)))
        )
  (set! (-> this sprites 3 scale-x) 1.0)
  (set! (-> this sprites 3 scale-y) 1.0)
  (set! (-> this sprites 3 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 2 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x5 :page #xab0)))
        )
  (set! (-> this sprites 2 scale-x) 14.0)
  (set! (-> this sprites 2 scale-y) 1.0)
  (set! (-> this sprites 2 flags) (hud-sprite-flags hsf2))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.6)
  (set! (-> this strings 0 flags) (font-flags shadow kerning right large))
  0
  (none)
  )

;; definition of type task-manager-factory-boss
(deftype task-manager-factory-boss (task-manager)
  ((button-up  symbol)
   )
  (:methods
    (task-manager-factory-boss-method-32 (_type_) none)
    )
  )

;; definition for method 3 of type task-manager-factory-boss
(defmethod inspect ((this task-manager-factory-boss))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tbutton-up: ~A~%" (-> this button-up))
  (label cfg-4)
  this
  )

;; definition for method 26 of type task-manager-factory-boss
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-factory-boss))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (if (>= (-> *game-info* counter) 3.0)
      (set-setting! 'extra-bank '((factory7 factor10)) 0.0 0)
      (remove-setting! 'extra-bank)
      )
  (if (>= (-> *game-info* counter) 3.0)
      (script-eval '(want-anim "factory-boss-res"))
      )
  (if (= (-> *game-info* counter) 4.0)
      (send-event this 'complete)
      )
  (none)
  )

;; definition for method 25 of type task-manager-factory-boss
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-25 ((this task-manager-factory-boss))
  (let ((t9-0 (method-of-type task-manager task-manager-method-25)))
    (t9-0 this)
    )
  (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
  (none)
  )

;; definition for method 21 of type task-manager-factory-boss
;; WARN: Return type mismatch connection vs none.
(defmethod set-time-limit ((this task-manager-factory-boss))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this hud-counter)
        (ppointer->handle (process-spawn hud-factory-boss :init hud-init-by-other :name "hud-factory-boss" :to this))
        )
  (set! (-> *game-info* counter) 0.0)
  (set! (-> this button-up) #f)
  (set-setting! 'string-min-height 'abs (meters 1) 0)
  (set-setting! 'string-max-height 'abs (meters 1.5) 0)
  (set-setting! 'fov 'abs (degrees 80.0) 0)
  (set-setting! 'music 'factboss 0.0 0)
  (none)
  )

;; definition for function factoryd-login
(defun factoryd-login ((arg0 level))
  (set! *factory-boss-dead-pool* (new 'loading-level 'dead-pool 222 1560 "*factory-boss-dead-pool*"))
  (set! (-> *factory-boss-dead-pool* clock) (-> *display* entity-clock))
  (set! *nav-network* (new 'loading-level 'nav-network))
  (alloc-nav-network-for-level! *nav-network* 64 10)
  (none)
  )

;; definition for function factoryd-logout
;; WARN: Return type mismatch int vs none.
(defun factoryd-logout ((arg0 level))
  (set! *factory-boss-dead-pool* #f)
  (set! *nav-network* (the-as nav-network 0))
  0
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-fac-warp-effect fac-warp-effect fac-warp-effect-lod0-jg fac-warp-effect-idle-ja
              ((fac-warp-effect-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition of type fac-warp-effect
(deftype fac-warp-effect (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type fac-warp-effect
(defmethod inspect ((this fac-warp-effect))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (fac-warp-effect)
  :virtual #t
  :code sleep-code
  :post (behavior ()
    (ja :num! (loop!))
    (ja-post)
    )
  )

;; definition for method 11 of type fac-warp-effect
(defmethod init-from-entity! ((this fac-warp-effect) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-fac-warp-effect" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (go (method-of-object this idle))
  )




