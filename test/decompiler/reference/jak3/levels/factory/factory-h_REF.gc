;;-*-Lisp-*-
(in-package goal)

;; definition of type fac-edge-list
(deftype fac-edge-list (basic)
  ((edge  int16  4)
   )
  )

;; definition for method 3 of type fac-edge-list
(defmethod inspect ((this fac-edge-list))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tedge[4] @ #x~X~%" (-> this edge))
  (label cfg-4)
  this
  )

;; definition of type factory-inout
(deftype factory-inout (structure)
  ((lpath  int16)
   (lpos   float)
   (flags  factory-inout-flag)
   )
  :allow-misaligned
  )

;; definition for method 3 of type factory-inout
(defmethod inspect ((this factory-inout))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-inout)
  (format #t "~1Tlpath: ~D~%" (-> this lpath))
  (format #t "~1Tlpos: ~f~%" (-> this lpos))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type factory-pathlist
(deftype factory-pathlist (structure)
  ((path    path-control   200)
   (inout   factory-inout  200 :inline)
   (loops   int16          200)
   (npath   int8)
   (nloop   int8)
   (curidx  int8)
   )
  :allow-misaligned
  )

;; definition for method 3 of type factory-pathlist
(defmethod inspect ((this factory-pathlist))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'factory-pathlist)
  (format #t "~1Tpath[200] @ #x~X~%" (-> this path))
  (format #t "~1Tinout[200] @ #x~X~%" (-> this inout))
  (format #t "~1Tloops[200] @ #x~X~%" (-> this loops))
  (format #t "~1Tnpath: ~D~%" (-> this npath))
  (format #t "~1Tnloop: ~D~%" (-> this nloop))
  (format #t "~1Tcuridx: ~D~%" (-> this curidx))
  (label cfg-4)
  this
  )

;; definition of type factory-manager
(deftype factory-manager (process)
  ((self               factory-manager  :override)
   (nfighters-spawned  uint8)
   (nfighters-total    uint8)
   (ntanks-spawned     uint8)
   (player-born        time-frame)
   (player-died        time-frame)
   (fighter-spawned    time-frame)
   (fighter-killed     time-frame)
   (tank-spawned       time-frame)
   (tank-killed        time-frame)
   (fpath              factory-pathlist  :inline)
   (tpath              factory-pathlist  :inline)
   (cur-wave           uint8)
   )
  (:state-methods
    idle
    )
  (:methods
    (factory-manager-method-15 (_type_) none)
    (init-paths-for-list! (_type_ factory-pathlist string) symbol)
    )
  )

;; definition for method 3 of type factory-manager
(defmethod inspect ((this factory-manager))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Tnfighters-spawned: ~D~%" (-> this nfighters-spawned))
  (format #t "~2Tnfighters-total: ~D~%" (-> this nfighters-total))
  (format #t "~2Tntanks-spawned: ~D~%" (-> this ntanks-spawned))
  (format #t "~2Tplayer-born: ~D~%" (-> this player-born))
  (format #t "~2Tplayer-died: ~D~%" (-> this player-died))
  (format #t "~2Tfighter-spawned: ~D~%" (-> this fighter-spawned))
  (format #t "~2Tfighter-killed: ~D~%" (-> this fighter-killed))
  (format #t "~2Ttank-spawned: ~D~%" (-> this tank-spawned))
  (format #t "~2Ttank-killed: ~D~%" (-> this tank-killed))
  (format #t "~2Tfpath: #<factory-pathlist @ #x~X>~%" (-> this fpath))
  (format #t "~2Ttpath: #<factory-pathlist @ #x~X>~%" (-> this tpath))
  (format #t "~2Tcur-wave: ~D~%" (-> this cur-wave))
  (label cfg-4)
  this
  )

;; definition of type factory-fighter
(deftype factory-fighter (rigid-body-object)
  ((parent                 (pointer factory-manager) :override)
   (first-time?            symbol)
   (path-pos               float)
   (forw                   vector                     :inline)
   (upvc                   vector                     :inline)
   (ppos                   vector                     :inline)
   (pvel                   vector                     :inline)
   (pacc                   vector                     :inline)
   (blendpath              float)
   (newpath                int8)
   (path-idx               int8)
   (last-hit-time          time-frame)
   (disappear              symbol)
   (last-fire              time-frame)
   (turret-gun             int8)
   (light-trail            handle)
   (rot-vel                float)
   (rot-acc                float)
   (engine-sound           sound-id)
   (engine-sound-playing?  symbol)
   (last-snd-cmd           time-frame)
   (red-tip-change-time    time-frame)
   (red-tip-on             symbol)
   )
  (:state-methods
    flying
    explode
    dive
    die
    )
  (:methods
    (fire-shot (_type_) projectile)
    (factory-fighter-method-61 (_type_) none)
    (factory-fighter-method-62 (_type_ symbol) none)
    )
  )

;; definition for method 3 of type factory-fighter
(defmethod inspect ((this factory-fighter))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type rigid-body-object inspect)))
    (t9-0 this)
    )
  (format #t "~2Tfirst-time?: ~A~%" (-> this first-time?))
  (format #t "~2Tpath-pos: ~f~%" (-> this path-pos))
  (format #t "~2Tforw: #<vector @ #x~X>~%" (-> this forw))
  (format #t "~2Tupvc: #<vector @ #x~X>~%" (-> this upvc))
  (format #t "~2Tppos: #<vector @ #x~X>~%" (-> this ppos))
  (format #t "~2Tpvel: #<vector @ #x~X>~%" (-> this pvel))
  (format #t "~2Tpacc: #<vector @ #x~X>~%" (-> this pacc))
  (format #t "~2Tblendpath: ~f~%" (-> this blendpath))
  (format #t "~2Tnewpath: ~D~%" (-> this newpath))
  (format #t "~2Tpath-idx: ~D~%" (-> this path-idx))
  (format #t "~2Tlast-hit-time: ~D~%" (-> this last-hit-time))
  (format #t "~2Tdisappear: ~A~%" (-> this disappear))
  (format #t "~2Tlast-fire: ~D~%" (-> this last-fire))
  (format #t "~2Tturret-gun: ~D~%" (-> this turret-gun))
  (format #t "~2Tlight-trail: ~D~%" (-> this light-trail))
  (format #t "~2Trot-vel: ~f~%" (-> this rot-vel))
  (format #t "~2Trot-acc: ~f~%" (-> this rot-acc))
  (format #t "~2Tengine-sound: ~D~%" (-> this engine-sound))
  (format #t "~2Tengine-sound-playing?: ~A~%" (-> this engine-sound-playing?))
  (format #t "~2Tlast-snd-cmd: ~D~%" (-> this last-snd-cmd))
  (format #t "~2Tred-tip-change-time: ~D~%" (-> this red-tip-change-time))
  (format #t "~2Tred-tip-on: ~A~%" (-> this red-tip-on))
  (label cfg-4)
  this
  )

;; definition of type fac-target
(deftype fac-target (process-focusable)
  ((sync      sync-paused  :inline)
   (minimap   connection-minimap)
   (light-jm  joint-mod)
   )
  (:state-methods
    idle
    die-fast
    retract
    retracted
    explode
    )
  (:methods
    (fac-target-method-33 (_type_) none)
    (fac-target-method-34 (_type_) none)
    )
  )

;; definition for method 3 of type fac-target
(defmethod inspect ((this fac-target))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsync: #<sync-paused @ #x~X>~%" (-> this sync))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tlight-jm: ~A~%" (-> this light-jm))
  (label cfg-4)
  this
  )

;; definition of type fac-gun-tower
(deftype fac-gun-tower (process-focusable)
  ((yaw                   float)
   (yawvel                float)
   (pitch                 float)
   (pitchvel              float)
   (dyaw                  float)
   (dpitch                float)
   (last-fire             time-frame)
   (last-hit-time         time-frame)
   (gunrot                int8)
   (muzzle                int8)
   (gun-idx               int8)
   (attack-id             int32)
   (gun-tilt-jm           joint-mod)
   (hit-points            float)
   (invincable            symbol)
   (rotate-sound          sound-id)
   (rotate-sound-playing  symbol)
   (blade-sound           sound-id)
   (blade-sound-playing   symbol)
   (snd-cmd-time          time-frame)
   (minimap               connection-minimap)
   )
  (:state-methods
    open
    idle
    die
    die-fast
    )
  (:methods
    (fac-gun-tower-method-32 (_type_) none)
    (fac-gun-tower-method-33 (_type_) none)
    (fac-gun-tower-method-34 (_type_) none)
    (fire-shot (_type_) projectile)
    (fac-gun-tower-method-36 (_type_) none)
    (send-attack (_type_ process-focusable) none)
    )
  )

;; definition for method 3 of type fac-gun-tower
(defmethod inspect ((this fac-gun-tower))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tyaw: ~f~%" (-> this yaw))
  (format #t "~2Tyawvel: ~f~%" (-> this yawvel))
  (format #t "~2Tpitch: ~f~%" (-> this pitch))
  (format #t "~2Tpitchvel: ~f~%" (-> this pitchvel))
  (format #t "~2Tdyaw: ~f~%" (-> this dyaw))
  (format #t "~2Tdpitch: ~f~%" (-> this dpitch))
  (format #t "~2Tlast-fire: ~D~%" (-> this last-fire))
  (format #t "~2Tlast-hit-time: ~D~%" (-> this last-hit-time))
  (format #t "~2Tgunrot: ~D~%" (-> this gunrot))
  (format #t "~2Tmuzzle: ~D~%" (-> this muzzle))
  (format #t "~2Tgun-idx: ~D~%" (-> this gun-idx))
  (format #t "~2Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~2Tgun-tilt-jm: ~A~%" (-> this gun-tilt-jm))
  (format #t "~2Thit-points: ~f~%" (-> this hit-points))
  (format #t "~2Tinvincable: ~A~%" (-> this invincable))
  (format #t "~2Trotate-sound: ~D~%" (-> this rotate-sound))
  (format #t "~2Trotate-sound-playing: ~A~%" (-> this rotate-sound-playing))
  (format #t "~2Tblade-sound: ~D~%" (-> this blade-sound))
  (format #t "~2Tblade-sound-playing: ~A~%" (-> this blade-sound-playing))
  (format #t "~2Tsnd-cmd-time: ~D~%" (-> this snd-cmd-time))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (label cfg-4)
  this
  )

;; definition of type fac-gun-tower-break
(deftype fac-gun-tower-break (process-drawable)
  ()
  (:state-methods
    idle
    idle-stick
    )
  )

;; definition for method 3 of type fac-gun-tower-break
(defmethod inspect ((this fac-gun-tower-break))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type fac-gun-tower-base-broken
(deftype fac-gun-tower-base-broken (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type fac-gun-tower-base-broken
(defmethod inspect ((this fac-gun-tower-base-broken))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-factory-damage
(deftype hud-factory-damage (hud)
  ()
  )

;; definition for method 3 of type hud-factory-damage
(defmethod inspect ((this hud-factory-damage))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
