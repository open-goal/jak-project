;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpartgroup group-fac-gunturret-hit
  :id 779
  :duration (seconds 3)
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 2914 :period (seconds 3) :length (seconds 0.017))
    (sp-item 2915 :period (seconds 0.067) :length (seconds 0.017))
    (sp-item 2916 :period (seconds 5) :length (seconds 0.017))
    (sp-item 2917 :period (seconds 0.335) :length (seconds 0.017))
    (sp-item 2918 :period (seconds 5) :length (seconds 2))
    )
  )

;; failed to figure out what this is:
(defpart 2914
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:y (meters -2))
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 50.0)
    (:b 0.0)
    (:a 32.0)
    (:fade-a -0.053333335)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 glow))
    (:userdata 40960.0)
    )
  )

;; failed to figure out what this is:
(defpart 2915
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 0.0 2.0)
    (:x (meters -1) (meters 2))
    (:y (meters -3) (meters 1))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 5) (meters 5))
    (:rot-x (degrees 22.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 200.0)
    (:b 180.0)
    (:a 128.0)
    (:omega (degrees 9011.25))
    (:scalevel-x (meters -0.16666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.067) (seconds 0.065))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 2916
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.33333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.7)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 180))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2917
  :init-specs ((:texture (middot level-default-sprite))
    (:num 0.0 1 50.0)
    (:scale-x (meters 0.1) (meters 0.1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 20.0 50.0)
    (:b 0.0)
    (:a 128.0)
    (:omega (degrees 0.045))
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:accel-y (meters -0.0016666667))
    (:friction 0.98)
    (:timer (seconds 0.167) (seconds 0.33))
    (:flags (sp-cpuinfo-flag-3 launch-along-z))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 0) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2918
  :init-specs ((:texture (lightning-anim-01 level-default-sprite))
    (:num 0.2 3.0)
    (:y (meters -3))
    (:scale-x (meters 3) (meters 5))
    (:rot-x 4)
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 0.5) (meters 1))
    (:r 255.0)
    (:g 80.0 20.0)
    (:b 20.0)
    (:a 255.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:timer (seconds 0.035) (seconds 0.165))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata :data (new 'static 'boxed-array :type int32 20 1 0 #x405700 #x405800 #x405900))
    (:func 'sparticle-texture-animate)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-fac-gunturret-smoke
  :id 780
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2919 :flags (sp7)))
  )

;; failed to figure out what this is:
(defpart 2919
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 0.5)
    (:scale-x (meters 0.5) (meters 0.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 64.0)
    (:g :copy r)
    (:b :copy g)
    (:a 16.0)
    (:vel-z (meters 0.006666667) (meters 0.006666667))
    (:scalevel-x (meters 0.0033333334) (meters 0.004))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.026666667 -0.10666667)
    (:accel-y (meters 0.0001) (meters 0.000033333334))
    (:friction 0.98)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x400000 #x400000 #x400700))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-fac-gunturret-casing
  :id 781
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2920 :fade-after (meters 80) :falloff-to (meters 100) :flags (sp7))
    (sp-item 2921 :fade-after (meters 80) :falloff-to (meters 100) :flags (sp7))
    )
  )

;; failed to figure out what this is:
(defpart 2921
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 3.0)
    (:scale-x (meters 0.5) (meters 0.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 0.0)
    (:a 32.0)
    (:vel-z (meters 0.006666667) (meters 0.006666667))
    (:scalevel-x (meters 0.0033333334) (meters 0.004))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -2.56)
    (:fade-g -2.56)
    (:fade-b 2.56)
    (:fade-a -0.32)
    (:accel-y (meters 0.0001) (meters 0.000033333334))
    (:friction 0.98)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x400000 #x400000 #x400700))
    (:next-time (seconds 0.167))
    (:next-launcher 2922)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2922
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.026666667 -0.10666667))
  )

;; failed to figure out what this is:
(defpart 2920
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 1.0)
    (:z (meters -0.4))
    (:scale-x (meters 2.5))
    (:rot-x 4)
    (:scale-y (meters 0.15) (meters 0.02))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:omega (degrees 0.03375))
    (:vel-z (meters 0.033333335) (meters 0.06666667))
    (:fade-b -8.0)
    (:accel-y (meters -0.0016666667) (meters -0.0016666667))
    (:friction 0.9 0.04)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.05))
    (:next-launcher 2923)
    (:conerot-x (degrees -20) (degrees 40))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2923
  :init-specs ((:r 255.0) (:g 255.0) (:b 0.0) (:fade-r 0.0) (:fade-g -2.45) (:fade-a -0.384 -0.96))
  )

;; failed to figure out what this is:
(defskelgroup skel-fac-gunturret fac-gun-tower-turret fac-gun-tower-turret-lod0-jg fac-gun-tower-turret-idle-ja
              ((fac-gun-tower-turret-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

;; failed to figure out what this is:
(defskelgroup skel-fac-gunturret-explode fac-gun-tower-turret fac-gun-tower-turret-explode-lod0-jg fac-gun-tower-turret-explode-idle-ja
              ((fac-gun-tower-turret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 100)
              )

;; definition for symbol *fac-gunturret-exploder-params*, type joint-exploder-static-params
(define *fac-gunturret-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index -1)
      )
    :collide-spec (collide-spec backgnd)
    )
  )

;; definition of type fac-gun-tower-turret-params
(deftype fac-gun-tower-turret-params (structure)
  ((normal-sg           skeleton-group)
   (explode-sg          skeleton-group)
   (enemy-info          enemy-info)
   (idle-anim           int32)
   (shoot-anim          int32)
   (track-joint         int32)
   (left-barrel-joint   int32)
   (right-barrel-joint  int32)
   (left-gun-joint      int32)
   (right-gun-joint     int32)
   )
  )

;; definition for method 3 of type fac-gun-tower-turret-params
(defmethod inspect ((this fac-gun-tower-turret-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'fac-gun-tower-turret-params)
  (format #t "~1Tnormal-sg: ~A~%" (-> this normal-sg))
  (format #t "~1Texplode-sg: ~A~%" (-> this explode-sg))
  (format #t "~1Tenemy-info: ~A~%" (-> this enemy-info))
  (format #t "~1Tidle-anim: ~D~%" (-> this idle-anim))
  (format #t "~1Tshoot-anim: ~D~%" (-> this shoot-anim))
  (format #t "~1Ttrack-joint: ~D~%" (-> this track-joint))
  (format #t "~1Tleft-barrel-joint: ~D~%" (-> this left-barrel-joint))
  (format #t "~1Tright-barrel-joint: ~D~%" (-> this right-barrel-joint))
  (format #t "~1Tleft-gun-joint: ~D~%" (-> this left-gun-joint))
  (format #t "~1Tright-gun-joint: ~D~%" (-> this right-gun-joint))
  (label cfg-4)
  this
  )

;; definition of type fac-gunturret
(deftype fac-gunturret (enemy)
  ((left-gun-tilt-jm      joint-mod)
   (right-gun-tilt-jm     joint-mod)
   (params                fac-gun-tower-turret-params)
   (aim-pos               vector  :inline)
   (gun-twist             float)
   (gun-tilt              float)
   (desired-twist         float)
   (desired-tilt          float)
   (los-clear             symbol)
   (smoke-part            sparticle-launch-control)
   (casing-part           sparticle-launch-control)
   (flash-state           symbol)
   (can-shoot             symbol)
   (last-hit-time         time-frame)
   (init-mat              matrix  :inline)
   (activate-distance     float)
   (aim-offset            vector  :inline)
   (use-alt-barrel        symbol)
   (rotate-sound          sound-id)
   (rotate-sound-playing  symbol)
   (snd-cmd-time          time-frame)
   )
  (:methods
    (track-target (_type_ symbol) none)
    (check-los (_type_) none)
    (reset-aim (_type_) none)
    (fire-shot (_type_ symbol) none)
    (init-turret-params! (_type_) none)
    (go-explode (_type_) (pointer joint-exploder))
    )
  )

;; definition for method 3 of type fac-gunturret
(defmethod inspect ((this fac-gunturret))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Tleft-gun-tilt-jm: ~A~%" (-> this left-gun-tilt-jm))
  (format #t "~2Tright-gun-tilt-jm: ~A~%" (-> this right-gun-tilt-jm))
  (format #t "~2Tparams: #<fac-gun-tower-turret-params @ #x~X>~%" (-> this params))
  (format #t "~2Taim-pos: #<vector @ #x~X>~%" (-> this aim-pos))
  (format #t "~2Tgun-twist: ~f~%" (-> this gun-twist))
  (format #t "~2Tgun-tilt: ~f~%" (-> this gun-tilt))
  (format #t "~2Tdesired-twist: ~f~%" (-> this desired-twist))
  (format #t "~2Tdesired-tilt: ~f~%" (-> this desired-tilt))
  (format #t "~2Tlos-clear: ~A~%" (-> this los-clear))
  (format #t "~2Tsmoke-part: ~A~%" (-> this smoke-part))
  (format #t "~2Tcasing-part: ~A~%" (-> this casing-part))
  (format #t "~2Tflash-state: ~A~%" (-> this flash-state))
  (format #t "~2Tcan-shoot: ~A~%" (-> this can-shoot))
  (format #t "~2Tlast-hit-time: ~D~%" (-> this last-hit-time))
  (format #t "~2Tinit-mat: #<matrix @ #x~X>~%" (-> this init-mat))
  (format #t "~2Tactivate-distance: ~f~%" (-> this activate-distance))
  (format #t "~2Taim-offset: #<vector @ #x~X>~%" (-> this aim-offset))
  (format #t "~2Tuse-alt-barrel: ~A~%" (-> this use-alt-barrel))
  (format #t "~2Trotate-sound: ~D~%" (-> this rotate-sound))
  (format #t "~2Trotate-sound-playing: ~A~%" (-> this rotate-sound-playing))
  (format #t "~2Tsnd-cmd-time: ~D~%" (-> this snd-cmd-time))
  (label cfg-4)
  this
  )

;; definition for symbol *fac-gunturret-enemy-info*, type enemy-info
(define *fac-gunturret-enemy-info* (new 'static 'enemy-info
                                     :use-die-falling #f
                                     :use-victory #f
                                     :use-jump-blocked #f
                                     :debug-draw-neck #f
                                     :jump-debug-draw #f
                                     :move-to-ground #f
                                     :hover-if-no-ground #f
                                     :idle-anim-script (new 'static 'inline-array idle-control-frame 2
                                       (new 'static 'idle-control-frame
                                         :command (idle-control-cmd play)
                                         :anim #x4
                                         :param0 2
                                         :param1 2
                                         :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
                                         )
                                       (new 'static 'idle-control-frame)
                                       )
                                     :idle-anim 4
                                     :notice-anim 4
                                     :hostile-anim 4
                                     :hit-anim 4
                                     :knocked-anim -1
                                     :knocked-land-anim -1
                                     :die-anim 4
                                     :die-falling-anim -1
                                     :victory-anim -1
                                     :jump-wind-up-anim -1
                                     :jump-in-air-anim -1
                                     :jump-land-anim -1
                                     :neck-joint -1
                                     :bullseye-joint 9
                                     :notice-distance (meters 50)
                                     :notice-distance-delta (meters 10)
                                     :proximity-notice-distance (meters 150)
                                     :default-hit-points 1.0
                                     :gnd-collide-with (collide-spec backgnd)
                                     :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
                                     :movement-gravity (meters -100)
                                     :friction 0.8
                                     :attack-shove-back (meters 3)
                                     :attack-shove-up (meters 2)
                                     :attack-mode 'generic
                                     :attack-damage 2
                                     :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
                                     :knocked-can-land-timeout (seconds 0.1)
                                     :knocked-recover-timeout (seconds 2)
                                     :ragdoll-blend-out-time (seconds 0.25)
                                     :ragdoll-rotate-velocity-mult 1.0
                                     :jump-height-min (meters 3)
                                     :jump-height-factor 0.5
                                     :knocked-seek-ry-clamp 2730.6667
                                     :knocked-soft-vxz-lo 72089.6
                                     :knocked-soft-vxz-hi 108134.4
                                     :knocked-soft-vy-lo 81920.0
                                     :knocked-soft-vy-hi 122880.0
                                     :knocked-medium-vxz-lo 147456.0
                                     :knocked-medium-vxz-hi 196608.0
                                     :knocked-medium-vy-lo 135168.0
                                     :knocked-medium-vy-hi 151552.0
                                     :knocked-hard-vxz-lo 78643.2
                                     :knocked-hard-vxz-hi 117964.8
                                     :knocked-hard-vy-lo 183500.8
                                     :knocked-hard-vy-hi 209715.2
                                     :knocked-huge-vxz-lo 164659.2
                                     :knocked-huge-vxz-hi 249036.8
                                     :knocked-huge-vy-lo 183500.8
                                     :knocked-huge-vy-hi 217907.2
                                     :knocked-yellow-vxz-lo 40960.0
                                     :knocked-yellow-vxz-hi 49152.0
                                     :knocked-yellow-vy-lo 57344.0
                                     :knocked-yellow-vy-hi 81920.0
                                     :knocked-red-vxz-lo 24576.0
                                     :knocked-red-vxz-hi 196608.0
                                     :knocked-red-vy-lo 94208.0
                                     :knocked-red-vy-hi 151552.0
                                     :knocked-blue-vxz-lo 40960.0
                                     :knocked-blue-vxz-hi 49152.0
                                     :knocked-blue-vy-lo 24576.0
                                     :knocked-blue-vy-hi 81920.0
                                     :ragdoll-info #f
                                     :shadow-size (meters 1)
                                     :shadow-max-y (meters 1)
                                     :shadow-min-y (meters -1)
                                     :shadow-locus-dist (meters 150)
                                     :gem-joint -1
                                     :gem-offset (new 'static 'sphere :r 163840.0)
                                     :knocked-off #t
                                     )
        )

;; failed to figure out what this is:
(set! (-> *fac-gunturret-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for method 155 of type fac-gunturret
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod track-target ((this fac-gunturret) (arg0 symbol))
  (cond
    ((and arg0 (-> this los-clear))
     (let ((a0-2 (the-as process-focusable (handle->process (-> this focus handle)))))
       (when a0-2
         (set! (-> this aim-pos quad) (-> (get-trans a0-2 3) quad))
         (vector+! (-> this aim-pos) (-> this aim-pos) (-> this aim-offset))
         )
       )
     )
    (else
      (reset-aim this)
      )
    )
  (let ((s4-0 (new 'stack-no-clear 'vector))
        (s5-1 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> this params track-joint))))
        )
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> this aim-pos) (-> this root trans))
      (vector-flatten! s4-0 s4-0 (-> this init-mat uvec))
      (vector-normalize! s4-0 1.0)
      (set! (-> this desired-twist)
            (atan (vector-dot (the-as vector (-> this init-mat)) s4-0) (vector-dot (-> this init-mat fvec) s4-0))
            )
      (cond
        (#t
          (vector-normalize-copy!
            s3-0
            (-> this node-list data (-> this params right-barrel-joint) bone transform uvec)
            1.0
            )
          (vector-! s4-0 (-> this aim-pos) s5-1)
          (vector-normalize! s4-0 1.0)
          (set! (-> this desired-tilt) (- (asin (-> s4-0 y))))
          (set! (-> this desired-tilt) (fmax -14563.556 (fmin 0.0 (+ 3640.889 (-> this desired-tilt)))))
          )
        (else
          )
        )
      )
    (vector-normalize-copy!
      (-> this aim-pos)
      (-> this node-list data (-> this params left-gun-joint) bone transform uvec)
      (vector-vector-distance s5-1 (-> this aim-pos))
      )
    )
  (vector+!
    (-> this aim-pos)
    (-> this aim-pos)
    (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> this params left-barrel-joint)))
    )
  (let ((s5-3 (new 'stack-no-clear 'matrix)))
    (+! (-> this gun-twist)
        (fmax -364.0889 (fmin 364.0889 (* 0.3 (- (-> this desired-twist) (-> this gun-twist)))))
        )
    (matrix-rotate-y! s5-3 (-> this gun-twist))
    (matrix*! s5-3 s5-3 (-> this init-mat))
    (matrix->quaternion (-> this root quat) s5-3)
    )
  (+! (-> this gun-tilt) (fmax -364.0889 (fmin 364.0889 (* 0.3 (- (-> this desired-tilt) (-> this gun-tilt))))))
  (quaternion-axis-angle! (-> this left-gun-tilt-jm quat) 1.0 0.0 0.0 (-> this gun-tilt))
  (quaternion-axis-angle! (-> this right-gun-tilt-jm quat) 1.0 0.0 0.0 (-> this gun-tilt))
  0
  (none)
  )

;; definition for method 156 of type fac-gunturret
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod check-los ((this fac-gunturret))
  (let ((a0-2 (the-as process-focusable (handle->process (-> this focus handle)))))
    (if a0-2
        (set! (-> this aim-pos quad) (-> (get-trans a0-2 3) quad))
        )
    )
  (let* ((s4-0
           (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> this params left-gun-joint)))
           )
         (s5-3 (vector-! (new 'stack-no-clear 'vector) (-> this aim-pos) s4-0))
         )
    (when (< (vector-dot (vector-normalize-copy! (new 'stack-no-clear 'vector) s5-3 1.0) (-> this init-mat fvec))
             (cos 364.0889)
             )
      (let ((a1-5 (new 'stack-no-clear 'collide-query)))
        (set! (-> a1-5 start-pos quad) (-> s4-0 quad))
        (set! (-> a1-5 move-dist quad) (-> s5-3 quad))
        (let ((v1-17 a1-5))
          (set! (-> v1-17 radius) 409.6)
          (set! (-> v1-17 collide-with)
                (collide-spec backgnd crate obstacle hit-by-player-list hit-by-others-list pusher)
                )
          (set! (-> v1-17 ignore-process0) this)
          (set! (-> v1-17 ignore-process1) #f)
          (set! (-> v1-17 ignore-pat)
                (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                )
          (set! (-> v1-17 action-mask) (collide-action solid))
          )
        (if (>= (fill-and-probe-using-line-sphere *collide-cache* a1-5) 0.0)
            (set! (-> this los-clear) #f)
            (set! (-> this los-clear) #t)
            )
        )
      )
    )
  0
  (none)
  )

;; definition for method 157 of type fac-gunturret
;; WARN: Return type mismatch int vs none.
(defmethod reset-aim ((this fac-gunturret))
  (vector+float*! (-> this aim-pos) (-> this root trans) (-> this init-mat fvec) 163840.0)
  (vector-reset! (-> this aim-offset))
  0
  (none)
  )

;; definition for method 158 of type fac-gunturret
;; INFO: Used lq/sq
;; WARN: Return type mismatch symbol vs none.
(defmethod fire-shot ((this fac-gunturret) (arg0 symbol))
  (let ((s0-0
          (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> this params right-barrel-joint)))
          )
        (s3-0
          (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> this params left-barrel-joint)))
          )
        (s4-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (let* ((s1-1 (vector-! (new 'stack-no-clear 'vector) (-> this aim-pos) s0-0))
           (f30-0 (/ 2013265900.0 (vector-length s1-1)))
           (s2-0 (new 'stack-no-clear 'vector))
           )
      (set! (-> s4-0 ent) (-> this entity))
      (set! (-> s4-0 charge) 1.0)
      (set! (-> s4-0 options) (projectile-options))
      (logclear! (-> s4-0 options) (projectile-options po14 po15 po16))
      (set! (-> s4-0 pos quad) (-> s0-0 quad))
      (set! (-> s4-0 notify-handle) (process->handle this))
      (set! (-> s4-0 owner-handle) (the-as handle #f))
      (set! (-> s4-0 target-handle) (the-as handle #f))
      (set! (-> s4-0 target-pos quad) (the-as uint128 0))
      (set! (-> s4-0 ignore-handle) (process->handle this))
      (let* ((v1-24 *game-info*)
             (a0-15 (+ (-> v1-24 attack-id) 1))
             )
        (set! (-> v1-24 attack-id) a0-15)
        (set! (-> s4-0 attack-id) a0-15)
        )
      (set! (-> s4-0 timeout) (seconds 4))
      (set! (-> s4-0 damage) 2.0)
      (logior! (-> s4-0 options) (projectile-options po14))
      (vector-normalize-copy! (-> s4-0 vel) s1-1 491520.0)
      (let ((f30-1 (fmin 16384.0 f30-0)))
        (set-vector! s2-0 (-> s1-1 z) (-> s1-1 y) (- (-> s1-1 x)) 1.0)
        (vector-normalize! s2-0 (rand-vu-float-range (- f30-1) f30-1))
        (vector+! (-> s4-0 vel) (-> s4-0 vel) s2-0)
        (vector-cross! s2-0 s2-0 (-> s4-0 vel))
        (vector-normalize! s2-0 (rand-vu-float-range (- f30-1) f30-1))
        )
      (vector+! (-> s4-0 vel) (-> s4-0 vel) s2-0)
      )
    (if (-> this use-alt-barrel)
        (set! (-> s4-0 pos quad) (-> s3-0 quad))
        )
    (set! (-> this use-alt-barrel) (not (-> this use-alt-barrel)))
    (spawn-projectile fturret-shot s4-0 this *default-dead-pool*)
    )
  (if arg0
      (sound-play "smallturret-fir")
      )
  (set! (-> this flash-state) #t)
  (none)
  )

;; failed to figure out what this is:
(defstate hostile (fac-gunturret)
  :virtual #t
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type enemy hostile) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (ja :group! (-> self draw art-group data (-> self params idle-anim)))
    (set! (-> self flash-state) #f)
    )
  :trans (behavior ()
    (if (and (logtest? (-> self enemy-flags) (enemy-flag victory)) (-> self enemy-info use-victory))
        (go-virtual victory)
        )
    (when (time-elapsed? (-> self state-time) (-> self reaction-time))
      (if (>= 2 (the-as int (-> self focus aware)))
          (go-stare self)
          )
      )
    (set! (-> self root penetrated-by) (get-penetrated-by self))
    )
  :code (behavior ()
    (reset-aim self)
    (until #f
      (current-time)
      (until (time-elapsed? (-> self last-hit-time) (seconds 2))
        (suspend)
        )
      (when (task-node-closed? (game-task-node factory-sky-battle-wave2))
        (cleanup-for-death self)
        (go-virtual die-fast)
        )
      (check-los self)
      (when (-> self los-clear)
        (new 'stack-no-clear 'vector)
        (rand-vu-sphere-point-uniform! (-> self aim-offset) (* 61440.0 (rand-vu)))
        )
      (set! (-> self rotate-sound-playing) #t)
      (sound-play-by-name
        (static-sound-name "smallturret-rot")
        (-> self rotate-sound)
        1024
        (the int (* 1524.0 (* 0.5 (doppler-pitch-shift (-> self root trans) (-> self root transv)))))
        0
        (sound-group)
        (-> self root trans)
        )
      (let ((gp-2 (current-time)))
        (until (time-elapsed? gp-2 (seconds 0.75))
          (let ((s5-2 (new 'stack-no-clear 'vector)))
            (set! (-> s5-2 quad) (-> self aim-pos quad))
            (track-target self #t)
            (vector-! s5-2 (-> self aim-pos) s5-2)
            (when (time-elapsed? (-> self snd-cmd-time) (seconds 0.12))
              0.0
              (vector-length s5-2)
              (sound-play-by-name
                (static-sound-name "smallturret-rot")
                (-> self rotate-sound)
                1024
                (the int (* 1524.0 (* 0.5 (doppler-pitch-shift (-> self root trans) (-> self root transv)))))
                0
                (sound-group)
                (-> self root trans)
                )
              (set-time! (-> self snd-cmd-time))
              )
            )
          (suspend)
          )
        )
      (when (-> self rotate-sound-playing)
        (sound-stop (-> self rotate-sound))
        (set! (-> self rotate-sound-playing) #f)
        )
      (ja :group! (-> self draw art-group data (-> self params shoot-anim)))
      (let ((s5-4 0)
            (gp-3 #t)
            )
        (sound-play "smallturret-fir")
        (cond
          ((not (-> self can-shoot))
           )
          ((time-elapsed? (the-as time-frame s5-4) (seconds 0.05))
           (fire-shot self gp-3)
           (current-time)
           (not gp-3)
           )
          (else
            (set! (-> self flash-state) #f)
            )
          )
        )
      (ja :num! (loop!))
      (set! (-> self flash-state) #f)
      (ja-channel-push! 1 (seconds 0.2))
      (ja :group! (-> self draw art-group data (-> self params idle-anim)))
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate stare (fac-gunturret)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type enemy stare) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (!= (-> self activate-distance) 0.0)
        (track-target self #f)
        )
    )
  )

;; definition for method 82 of type fac-gunturret
(defmethod event-handler ((this fac-gunturret) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (if (and (= arg2 'notify) (< 1 arg1) (= (-> arg3 param 0) 'attack) (= (-> arg3 param 1) *target*))
      (set-time! (-> this last-hit-time))
      )
  (case arg2
    (('start)
     (let ((v0-0 (the-as object #t)))
       (set! (-> this can-shoot) (the-as symbol v0-0))
       v0-0
       )
     )
    (('stop)
     (set! (-> this can-shoot) #f)
     #f
     )
    (('bonk)
     (send-event arg0 'target-mech-get-off (seconds 0.3))
     (send-event arg0 'shove #f (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                                    (damage 2.0)
                                                                                    (vehicle-damage-factor 1.0)
                                                                                    (vehicle-impulse-factor 1.0)
                                                                                    (shove-back (meters 2))
                                                                                    (shove-up (meters 0.5))
                                                                                    )
                                                    )
                 )
     #f
     )
    (('flash-state)
     (-> this flash-state)
     )
    (else
      ((method-of-type enemy event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 160 of type fac-gunturret
;; WARN: Return type mismatch (pointer process) vs (pointer joint-exploder).
(defmethod go-explode ((this fac-gunturret))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (let ((s4-0 (new 'stack-no-clear 'vector)))
        (sound-play "explosion")
        (let ((v1-2 (-> s5-0 fountain-rand-transv-lo)))
          (let ((a0-5 (-> this root trans)))
            (let ((a1-2 *up-vector*))
              (let ((a2-3 2048.0))
                (.mov vf7 a2-3)
                )
              (.lvf vf5 (&-> a1-2 quad))
              )
            (.lvf vf4 (&-> a0-5 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> v1-2 quad) vf6)
          )
        (vector-float*! s4-0 *up-vector* (* 4096.0 (rand-vu-float-range 20.0 30.0)))
        (let ((a1-4 (-> s5-0 fountain-rand-transv-lo)))
          (let ((v1-4 s4-0))
            (let ((a0-7 *identity-vector*))
              (let ((a2-5 -204800.0))
                (.mov vf7 a2-5)
                )
              (.lvf vf5 (&-> a0-7 quad))
              )
            (.lvf vf4 (&-> v1-4 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> a1-4 quad) vf6)
          )
        (let ((a0-8 (-> s5-0 fountain-rand-transv-hi)))
          (let ((v1-5 *identity-vector*))
            (let ((a1-6 204800.0))
              (.mov vf7 a1-6)
              )
            (.lvf vf5 (&-> v1-5 quad))
            )
          (.lvf vf4 (&-> s4-0 quad))
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> a0-8 quad) vf6)
          )
        )
      (set! (-> s5-0 gravity) -122880.0)
      (process-spawn
        joint-exploder
        (-> this params explode-sg)
        9
        s5-0
        *fac-gunturret-exploder-params*
        :name "joint-exploder"
        :to this
        :unk 0
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate die (fac-gunturret)
  :virtual #t
  :enter (behavior ()
    (on-dying self)
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (set! (-> self hit-points) 0.0)
    (when (-> self rotate-sound-playing)
      (sound-stop (-> self rotate-sound))
      (set! (-> self rotate-sound-playing) #f)
      )
    )
  :code (behavior ()
    (go-explode self)
    (activate! *camera-smush-control* 819.2 37 210 1.0 0.995 (-> self clock))
    (sound-play "smallturret-exp")
    (suspend)
    (cleanup-for-death self)
    (ja-channel-set! 0)
    (let ((gp-1 (new 'stack-no-clear 'vector)))
      (set! (-> gp-1 quad) (-> self root trans quad))
      (+! (-> gp-1 y) 12288.0)
      (let ((s5-1 (current-time)))
        (until (time-elapsed? s5-1 (seconds 2))
          (spawn (-> self part) gp-1)
          (suspend)
          )
        )
      )
    (let ((gp-2 (current-time)))
      (until (time-elapsed? gp-2 (seconds 1))
        (suspend)
        )
      )
    (send-event self 'death-end)
    (while (-> self child)
      (suspend)
      )
    )
  :post (behavior ()
    (enemy-common-post self)
    )
  )

;; definition for method 120 of type fac-gunturret
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this fac-gunturret))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 3) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 4))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) 0.0 9216.0 4096.0 24576.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-14 transform-index) 3)
      (set-vector! (-> v1-14 local-sphere) 0.0 8192.0 0.0 18432.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-16 transform-index) 5)
      (set-vector! (-> v1-16 local-sphere) 0.0 24576.0 0.0 4096.0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-18 transform-index) 7)
      (set-vector! (-> v1-18 local-sphere) 0.0 24576.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-21 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-21 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-21 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 107 of type fac-gunturret
(defmethod is-pfoc-in-mesh? ((this fac-gunturret) (arg0 process-focusable) (arg1 vector))
  (if (= (-> this activate-distance) 0.0)
      (return #t)
      (return (< (fabs (vector-dot
                         (vector-! (new 'stack-no-clear 'vector) (get-trans arg0 3) (-> this root trans))
                         (-> this init-mat fvec)
                         )
                       )
                 (-> this activate-distance)
                 )
              )
      )
  (the-as symbol 0)
  )

;; definition for method 10 of type fac-gunturret
(defmethod deactivate ((this fac-gunturret))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (when (-> this rotate-sound-playing)
    (sound-stop (-> this rotate-sound))
    (set! (-> this rotate-sound-playing) #f)
    )
  (if (nonzero? (-> this smoke-part))
      (kill-particles (-> this smoke-part))
      )
  (if (nonzero? (-> this casing-part))
      (kill-particles (-> this casing-part))
      )
  ((method-of-type enemy deactivate) this)
  (none)
  )

;; definition for method 67 of type fac-gunturret
(defmethod coin-flip? ((this fac-gunturret))
  #f
  )

;; definition for method 7 of type fac-gunturret
;; WARN: Return type mismatch enemy vs fac-gunturret.
(defmethod relocate ((this fac-gunturret) (offset int))
  (if (nonzero? (-> this left-gun-tilt-jm))
      (&+! (-> this left-gun-tilt-jm) offset)
      )
  (if (nonzero? (-> this right-gun-tilt-jm))
      (&+! (-> this right-gun-tilt-jm) offset)
      )
  (if (nonzero? (-> this smoke-part))
      (&+! (-> this smoke-part) offset)
      )
  (if (nonzero? (-> this casing-part))
      (&+! (-> this casing-part) offset)
      )
  (the-as fac-gunturret ((method-of-type enemy relocate) this offset))
  )

;; definition for method 159 of type fac-gunturret
;; WARN: Return type mismatch int vs none.
(defmethod init-turret-params! ((this fac-gunturret))
  (let ((s5-0
          (new 'static 'fac-gun-tower-turret-params
            :idle-anim 4
            :shoot-anim 4
            :track-joint 3
            :left-barrel-joint 6
            :right-barrel-joint 8
            :left-gun-joint 7
            :right-gun-joint 5
            )
          )
        )
    (set! (-> s5-0 normal-sg)
          (the-as skeleton-group (art-group-get-by-name *level* "skel-fac-gunturret" (the-as (pointer level) #f)))
          )
    (set! (-> s5-0 explode-sg)
          (the-as
            skeleton-group
            (art-group-get-by-name *level* "skel-fac-gunturret-explode" (the-as (pointer level) #f))
            )
          )
    (set! (-> s5-0 enemy-info) *fac-gunturret-enemy-info*)
    (set! (-> this params) s5-0)
    )
  0
  (none)
  )

;; definition for method 121 of type fac-gunturret
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this fac-gunturret))
  (init-turret-params! this)
  (initialize-skeleton this (-> this params normal-sg) (the-as pair 0))
  (init-enemy-defaults! this (-> this params enemy-info))
  (set! (-> this draw light-index) (the-as uint 10))
  (logclear! (-> this mask) (process-mask actor-pause))
  (logclear! (-> this enemy-flags) (enemy-flag actor-pause-backup))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 779) this))
  (set! (-> this smoke-part) (create-launch-control (-> *part-group-id-table* 780) this))
  (set! (-> this casing-part) (create-launch-control (-> *part-group-id-table* 781) this))
  (set! (-> this left-gun-tilt-jm)
        (new 'process 'joint-mod (joint-mod-mode joint-set*) this (-> this params left-gun-joint))
        )
  (set! (-> this right-gun-tilt-jm)
        (new 'process 'joint-mod (joint-mod-mode joint-set*) this (-> this params right-gun-joint))
        )
  (set! (-> this los-clear) #f)
  (set! (-> this gun-twist) 0.0)
  (set! (-> this gun-tilt) 0.0)
  (set! (-> this desired-twist) 0.0)
  (set! (-> this desired-tilt) 0.0)
  (set! (-> this flash-state) #f)
  (set! (-> this can-shoot) #t)
  (set! (-> this last-hit-time) 0)
  (set! (-> this use-alt-barrel) #f)
  (set! (-> this rotate-sound) (new-sound-id))
  (set! (-> this rotate-sound-playing) #f)
  (set-time! (-> this snd-cmd-time))
  (quaternion->matrix (-> this init-mat) (-> this root quat))
  (set! (-> this activate-distance) (res-lump-float (-> this entity) 'distance))
  (set! (-> this activate-distance) 163840.0)
  0
  (none)
  )

;; definition for method 122 of type fac-gunturret
(defmethod go-idle2 ((this fac-gunturret))
  (go (method-of-object this idle))
  )

;; definition of type fac-gun-tower-turret
(deftype fac-gun-tower-turret (fac-gunturret)
  ()
  )

;; definition for method 3 of type fac-gun-tower-turret
(defmethod inspect ((this fac-gun-tower-turret))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type fac-gunturret inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0




