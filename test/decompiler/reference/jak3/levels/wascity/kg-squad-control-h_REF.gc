;;-*-Lisp-*-
(in-package goal)

;; definition of type handle-array
(deftype handle-array (inline-array-class-uint64)
  ((data0  handle  :dynamic)
   )
  )

;; definition for method 3 of type handle-array
(defmethod inspect ((this handle-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data0))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> handle-array heap-base) (the-as uint 8))

;; definition of type kg-squad-member-settings
(deftype kg-squad-member-settings (structure)
  ((object-type               traffic-type)
   (max-target-count          int8)
   (min-target-count          int8)
   (target-count              int8)
   (enemy-type                traffic-type)
   (toggle-shield-percentage  float)
   (heat-shield-percentage    float)
   )
  )

;; definition for method 3 of type kg-squad-member-settings
(defmethod inspect ((this kg-squad-member-settings))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'kg-squad-member-settings)
  (format #t "~1Tobject-type: ~D~%" (-> this object-type))
  (format #t "~1Tmax-target-count: ~D~%" (-> this max-target-count))
  (format #t "~1Tmin-target-count: ~D~%" (-> this min-target-count))
  (format #t "~1Ttarget-count: ~D~%" (-> this target-count))
  (format #t "~1Tenemy-type: ~D~%" (-> this enemy-type))
  (format #t "~1Ttoggle-shield-percentage: ~f~%" (-> this toggle-shield-percentage))
  (format #t "~1Theat-shield-percentage: ~f~%" (-> this heat-shield-percentage))
  (label cfg-4)
  this
  )

;; definition of type kg-squad-settings
(deftype kg-squad-settings (structure)
  ((roboguard-settings        kg-squad-member-settings  :inline)
   (roboguard-giant-settings  kg-squad-member-settings  :inline)
   (flying-turret-settings    kg-squad-member-settings  :inline)
   (spydroid-settings         kg-squad-member-settings  :inline)
   (kg-enemy-settings         kg-squad-member-settings  4 :inline :overlay-at roboguard-settings)
   )
  )

;; definition for method 3 of type kg-squad-settings
(defmethod inspect ((this kg-squad-settings))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'kg-squad-settings)
  (format #t "~1Troboguard-settings: #<kg-squad-member-settings @ #x~X>~%" (-> this roboguard-settings))
  (format
    #t
    "~1Troboguard-giant-settings: #<kg-squad-member-settings @ #x~X>~%"
    (-> this roboguard-giant-settings)
    )
  (format #t "~1Tflying-turret-settings: #<kg-squad-member-settings @ #x~X>~%" (-> this flying-turret-settings))
  (format #t "~1Tspydroid-settings: #<kg-squad-member-settings @ #x~X>~%" (-> this spydroid-settings))
  (format #t "~1Tkg-enemy-settings[4] @ #x~X~%" (-> this roboguard-settings))
  (label cfg-4)
  this
  )

;; definition of type kg-squad-control
(deftype kg-squad-control (squad-control-city)
  ((guard-to-traffic-mapping        traffic-type       10)
   (guard-to-squad-setting-mapping  uint8              10)
   (used-guard-types                kg-squad-used-guard-types)
   (active-squad-member-list        handle-array               :offset 852)
   (enemy-type-seek-to-list         uint8              3)
   (enemy-type-seek-from-list       uint8              3)
   (enemy-type-seek-to              uint8                      :overlay-at (-> enemy-type-seek-to-list 0))
   (enemy-type-seek-from            uint8                      :overlay-at (-> enemy-type-seek-from-list 0))
   (enemy-type-seek-to-war          uint8                      :overlay-at (-> enemy-type-seek-to-list 1))
   (enemy-type-seek-from-war        uint8                      :overlay-at (-> enemy-type-seek-from-list 1))
   (enemy-type-seek-to-mission      uint8                      :overlay-at (-> enemy-type-seek-to-list 2))
   (enemy-type-seek-from-mission    uint8                      :overlay-at (-> enemy-type-seek-from-list 2))
   (alert-level                     int8)
   (squad-settings                  kg-squad-settings  3 :inline)
   (squad-normal-settings           kg-squad-settings  :inline :overlay-at (-> squad-settings 0))
   (squad-war-settings              kg-squad-settings  :inline :overlay-at (-> squad-settings 1))
   (squad-mission-settings          kg-squad-settings  :inline :overlay-at (-> squad-settings 2))
   (current-target-attackers        int8)
   )
  (:methods
    (increment-alert-level (_type_ int) int)
    (set-alert-level1 (_type_ int) int)
    (add-squad-member (_type_ process) int)
    (pop-squad-member-from-list (_type_ process) int)
    (get-alert-level1 (_type_) int)
    (copy-squad-settings-to-idx (_type_ (inline-array kg-squad-member-settings) int) none)
    (kg-squad-control-method-51 (_type_) symbol)
    (kg-squad-control-method-52 (_type_ process process) int)
    (kg-squad-control-method-53 (_type_) none)
    (kg-squad-control-method-54 (_type_) float)
    )
  )

;; definition for method 3 of type kg-squad-control
(defmethod inspect ((this kg-squad-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tsync-clock: ~D~%" (-> this sync-clock))
  (format #t "~1Tsync-mask-8: ~D~%" (-> this sync-mask-8))
  (format #t "~1Tsync-mask-16: ~D~%" (-> this sync-mask-16))
  (format #t "~1Tsync-mask-32: ~D~%" (-> this sync-mask-32))
  (format #t "~1Talert-state: #<squad-alert-state @ #x~X>~%" (-> this alert-state))
  (format #t "~1Tprimary-target-history[16] @ #x~X~%" (-> this primary-target-history))
  (format #t "~1Ttraffic: ~A~%" (-> this traffic))
  (format #t "~1Tcity-mode: ~D~%" (-> this city-mode))
  (format #t "~1Tguard-to-traffic-mapping[10] @ #x~X~%" (-> this guard-to-traffic-mapping))
  (format #t "~1Tguard-to-squad-setting-mapping[10] @ #x~X~%" (-> this guard-to-squad-setting-mapping))
  (format #t "~1Tused-guard-types: ~D~%" (-> this used-guard-types))
  (format #t "~1Ttraffic: ~A~%" (-> this traffic))
  (format #t "~1Tactive-squad-member-list: ~A~%" (-> this active-squad-member-list))
  (format #t "~1Tenemy-type-seek-to-list[3] @ #x~X~%" (-> this enemy-type-seek-to-list))
  (format #t "~1Tenemy-type-seek-from-list[3] @ #x~X~%" (-> this enemy-type-seek-from-list))
  (format #t "~1Tenemy-type-seek-to: ~D~%" (-> this enemy-type-seek-to))
  (format #t "~1Tenemy-type-seek-from: ~D~%" (-> this enemy-type-seek-from))
  (format #t "~1Tenemy-type-seek-to-war: ~D~%" (-> this enemy-type-seek-to-war))
  (format #t "~1Tenemy-type-seek-from-war: ~D~%" (-> this enemy-type-seek-from-war))
  (format #t "~1Tenemy-type-seek-to-mission: ~D~%" (-> this enemy-type-seek-to-mission))
  (format #t "~1Tenemy-type-seek-from-mission: ~D~%" (-> this enemy-type-seek-from-mission))
  (format #t "~1Talert-level: ~D~%" (-> this alert-level))
  (format #t "~1Tsquad-settings[3] @ #x~X~%" (-> this squad-settings))
  (format #t "~1Tsquad-normal-settings: #<kg-squad-settings @ #x~X>~%" (-> this squad-settings))
  (format #t "~1Tsquad-war-settings: #<kg-squad-settings @ #x~X>~%" (-> this squad-war-settings))
  (format #t "~1Tsquad-mission-settings: #<kg-squad-settings @ #x~X>~%" (-> this squad-mission-settings))
  (format #t "~1Tcurrent-target-attackers: ~D~%" (-> this current-target-attackers))
  (label cfg-4)
  this
  )

;; definition for symbol *kg-squad-control*, type kg-squad-control
(define *kg-squad-control* (the-as kg-squad-control #f))
