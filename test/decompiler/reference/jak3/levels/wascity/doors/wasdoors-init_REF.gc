;;-*-Lisp-*-
(in-package goal)

;; definition for function wasdoors-point-inside?
;; INFO: Used lq/sq
(defun wasdoors-point-inside? ((arg0 vector))
  (let ((gp-0 (new 'stack-no-clear 'inline-array 'vector 3)))
    (set! (-> gp-0 0 quad) (-> (new 'static 'vector :z -1.0 :w 957235.2) quad))
    (set! (-> gp-0 1 quad) (-> (new 'static 'vector :x 9246720.0 :y 125747.2 :z 625049.6 :w 450560.0) quad))
    (set! (-> gp-0 2 x) (vector4-dot (-> gp-0 0) arg0))
    (set! (-> gp-0 2 y) (vector-vector-distance (-> gp-0 1) arg0))
    (and (< 0.0 (-> gp-0 2 x)) (< (-> gp-0 2 y) (-> gp-0 1 w)))
    )
  )

;; definition for function wasdoors-cleanup
;; WARN: Return type mismatch int vs none.
(defun wasdoors-cleanup ((arg0 level))
  (let ((gp-0 12))
    (while (>= 19 gp-0)
      (let* ((s4-0 (handle->process (-> *vehicle-info* handle-by-vehicle-type gp-0)))
             (s5-0 (if (type? s4-0 process-focusable)
                       s4-0
                       )
                   )
             )
        (if (and s5-0 (wasdoors-point-inside? (-> (the-as process-focusable s5-0) root trans)))
            (send-event s5-0 'go-die)
            )
        )
      (+! gp-0 1)
      )
    )
  0
  (none)
  )

;; definition of type wasdoors-manager
(deftype wasdoors-manager (process)
  ()
  (:state-methods
    idle
    )
  (:methods
    (repair-vehicles (_type_) none)
    )
  )

;; definition for method 3 of type wasdoors-manager
(defmethod inspect ((this wasdoors-manager))
  (when (not this)
    (set! this this)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tmask: #x~X : (process-mask " (-> this mask))
  (let ((s5-0 (-> this mask)))
    (if (= (logand s5-0 (process-mask process-tree)) (process-mask process-tree))
        (format #t "process-tree ")
        )
    (if (= (logand s5-0 (process-mask target)) (process-mask target))
        (format #t "target ")
        )
    (if (= (logand (process-mask collectable) s5-0) (process-mask collectable))
        (format #t "collectable ")
        )
    (if (= (logand (process-mask projectile) s5-0) (process-mask projectile))
        (format #t "projectile ")
        )
    (if (= (logand s5-0 (process-mask sleep-code)) (process-mask sleep-code))
        (format #t "sleep-code ")
        )
    (if (= (logand s5-0 (process-mask actor-pause)) (process-mask actor-pause))
        (format #t "actor-pause ")
        )
    (if (= (logand (process-mask metalhead) s5-0) (shl #x8000 16))
        (format #t "metalhead ")
        )
    (if (= (logand (process-mask bot) s5-0) (process-mask bot))
        (format #t "bot ")
        )
    (if (= (logand (process-mask vehicle) s5-0) (process-mask vehicle))
        (format #t "vehicle ")
        )
    (if (= (logand (process-mask enemy) s5-0) (process-mask enemy))
        (format #t "enemy ")
        )
    (if (= (logand (process-mask entity) s5-0) (process-mask entity))
        (format #t "entity ")
        )
    (if (= (logand s5-0 (process-mask heap-shrunk)) (process-mask heap-shrunk))
        (format #t "heap-shrunk ")
        )
    (if (= (logand (process-mask sidekick) s5-0) (process-mask sidekick))
        (format #t "sidekick ")
        )
    (if (= (logand s5-0 (process-mask going)) (process-mask going))
        (format #t "going ")
        )
    (if (= (logand s5-0 (process-mask execute)) (process-mask execute))
        (format #t "execute ")
        )
    (if (= (logand (process-mask civilian) s5-0) (process-mask civilian))
        (format #t "civilian ")
        )
    (if (= (logand (process-mask death) s5-0) (process-mask death))
        (format #t "death ")
        )
    (if (= (logand (process-mask guard) s5-0) (process-mask guard))
        (format #t "guard ")
        )
    (if (= (logand s5-0 (process-mask no-kill)) (process-mask no-kill))
        (format #t "no-kill ")
        )
    (if (= (logand (process-mask kg-robot) s5-0) (process-mask kg-robot))
        (format #t "kg-robot ")
        )
    (if (= (logand (process-mask platform) s5-0) (process-mask platform))
        (format #t "platform ")
        )
    (if (= (logand s5-0 (process-mask freeze)) (process-mask freeze))
        (format #t "freeze ")
        )
    (if (= (logand s5-0 (process-mask sleep)) (process-mask sleep))
        (format #t "sleep ")
        )
    (if (= (logand s5-0 (process-mask progress)) (process-mask progress))
        (format #t "progress ")
        )
    (if (= (logand s5-0 (process-mask menu)) (process-mask menu))
        (format #t "menu ")
        )
    (if (= (logand (process-mask camera) s5-0) (process-mask camera))
        (format #t "camera ")
        )
    (if (= (logand (process-mask ambient) s5-0) (process-mask ambient))
        (format #t "ambient ")
        )
    (if (= (logand s5-0 (process-mask dark-effect)) (process-mask dark-effect))
        (format #t "dark-effect ")
        )
    (if (= (logand (process-mask crate) s5-0) (process-mask crate))
        (format #t "crate ")
        )
    (if (= (logand s5-0 (process-mask kernel-run)) (process-mask kernel-run))
        (format #t "kernel-run ")
        )
    (if (= (logand s5-0 (process-mask movie)) (process-mask movie))
        (format #t "movie ")
        )
    (if (= (logand s5-0 (process-mask pause)) (process-mask pause))
        (format #t "pause ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tclock: ~A~%" (-> this clock))
  (format #t "~1Tparent: #x~X~%" (-> this parent))
  (format #t "~1Tbrother: #x~X~%" (-> this brother))
  (format #t "~1Tchild: #x~X~%" (-> this child))
  (format #t "~1Tppointer: #x~X~%" (-> this ppointer))
  (format #t "~1Tself: ~A~%" (-> this self))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tstatus: ~A~%" (-> this status))
  (format #t "~1Tpid: ~D~%" (-> this pid))
  (format #t "~1Tmain-thread: ~A~%" (-> this main-thread))
  (format #t "~1Ttop-thread: ~A~%" (-> this top-thread))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (format #t "~1Tstate: ~A~%" (-> this state))
  (format #t "~1Tprev-state: ~A~%" (-> this prev-state))
  (format #t "~1Tnext-state: ~A~%" (-> this next-state))
  (format #t "~1Tstate-stack: ~A~%" (-> this state-stack))
  (format #t "~1Ttrans-hook: ~A~%" (-> this trans-hook))
  (format #t "~1Tpost-hook: ~A~%" (-> this post-hook))
  (format #t "~1Tevent-hook: ~A~%" (-> this event-hook))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Theap-base: #x~X~%" (-> this heap-base))
  (format #t "~1Theap-top: #x~X~%" (-> this heap-top))
  (format #t "~1Theap-cur: #x~X~%" (-> this heap-cur))
  (format #t "~1Tstack-frame-top: ~A~%" (-> this stack-frame-top))
  (format #t "~1Theap: #<kheap @ #x~X>~%" (&-> this heap-base))
  (format #t "~1Tconnection-list: ~`connectable`P~%" (-> this connection-list))
  (format #t "~1Tstack[0] @ #x~X~%" (-> this stack))
  (label cfg-68)
  this
  )

;; definition for method 15 of type wasdoors-manager
;; WARN: Return type mismatch int vs none.
(defmethod repair-vehicles ((this wasdoors-manager))
  (let ((gp-0 12)
        (f30-0 (* 0.2 (seconds-per-frame)))
        )
    (while (>= 19 gp-0)
      (let* ((s4-0 (handle->process (-> *vehicle-info* handle-by-vehicle-type gp-0)))
             (s5-0 (if (type? s4-0 process-focusable)
                       s4-0
                       )
                   )
             )
        (if (and s5-0
                 (not (focus-test? (the-as process-focusable s5-0) dead))
                 (wasdoors-point-inside? (-> (the-as process-focusable s5-0) root trans))
                 )
            (send-event s5-0 'repair f30-0)
            )
        )
      (+! gp-0 1)
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate idle (wasdoors-manager)
  :virtual #t
  :exit (behavior ()
    (let ((gp-0 'active)
          (a0-0 *level*)
          )
      (cond
        ((= (status-of-level-and-borrows a0-0 'desert #f) gp-0)
         (wasdoors-cleanup (the-as level a0-0))
         )
        (else
          (dotimes (gp-1 44)
            (send-event (handle->process (-> *vehicle-info* handle-by-vehicle-type gp-1)) 'go-die)
            )
          )
        )
      )
    )
  :trans (behavior ()
    (repair-vehicles self)
    )
  :code sleep-code
  )

;; definition for function wasdoors-manager-init-by-other
(defbehavior wasdoors-manager-init-by-other wasdoors-manager ()
  (go-virtual idle)
  )

;; definition for symbol *wasdoors-manager*, type (pointer wasdoors-manager)
(define *wasdoors-manager* (the-as (pointer wasdoors-manager) #f))

;; definition for function wasdoors-manager-start
;; WARN: Return type mismatch int vs none.
(defun wasdoors-manager-start ()
  (set! *wasdoors-manager* (process-spawn wasdoors-manager :name "wasdoors-manager" :to *entity-pool*))
  0
  (none)
  )

;; definition for function wasdoors-manager-kill
;; WARN: Return type mismatch symbol vs none.
(defun wasdoors-manager-kill ()
  (kill-by-type wasdoors-manager *active-pool*)
  (set! *wasdoors-manager* (the-as (pointer wasdoors-manager) #f))
  (none)
  )

;; definition for function wasdoors-activate
(defun wasdoors-activate ((arg0 level))
  (wasdoors-manager-start)
  (none)
  )

;; definition for function wasdoors-deactivate
;; WARN: Return type mismatch int vs none.
(defun wasdoors-deactivate ((arg0 level))
  (wasdoors-manager-kill)
  0
  (none)
  )




