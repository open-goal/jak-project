;;-*-Lisp-*-
(in-package goal)

;; definition of type task-manager-throne-rog
(deftype task-manager-throne-rog (task-manager)
  ((arrow-h  handle)
   )
  )

;; definition for method 3 of type task-manager-throne-rog
(defmethod inspect ((this task-manager-throne-rog))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tarrow-h: ~D~%" (-> this arrow-h))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate active (task-manager-throne-rog)
  :virtual #t
  :enter (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (let ((a0-0 (new 'static 'vector :x 9527214.0 :y 196812.8 :z -1693368.4 :w 1.0)))
        (set! (-> gp-0 pos quad) (-> a0-0 quad))
        )
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags taf5))
      (set! (-> gp-0 map-icon) (the-as uint 13))
      (set! (-> self arrow-h) (process->handle (task-arrow-spawn gp-0 self)))
      )
    (let ((t9-3 (-> (find-parent-state) enter)))
      (if t9-3
          (t9-3)
          )
      )
    )
  :trans (behavior ()
    (let ((t9-1 (-> (find-parent-state) trans)))
      (if t9-1
          (t9-1)
          )
      )
    (when (-> self arrow-h)
      (let ((gp-0 (-> self arrow-h process 0)))
        (when (or (< (vector-vector-distance (-> (the-as process-drawable gp-0) root trans) (target-pos 0)) 12288.0)
                  (movie?)
                  )
          (send-event gp-0 'leave)
          (set! (-> self arrow-h) (the-as handle #f))
          )
        )
      )
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-wstd-fight-plat-box wstd-fight-plat-box wstd-fight-plat-box-lod0-jg wstd-fight-plat-box-idle-ja
              ((wstd-fight-plat-box-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

;; definition of type wstd-fight-plat-box
(deftype wstd-fight-plat-box (base-plat)
  ((crate-h         handle)
   (next-lava-part  time-frame)
   )
  (:state-methods
    active
    open
    )
  (:methods
    (wstd-fight-plat-box-method-37 (_type_) none)
    (wstd-fight-plat-box-method-38 (_type_) none)
    (wstd-fight-plat-box-method-39 (_type_) symbol)
    (wstd-fight-plat-box-method-40 (_type_) none)
    )
  )

;; definition for method 3 of type wstd-fight-plat-box
(defmethod inspect ((this wstd-fight-plat-box))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcrate-h: ~D~%" (-> this crate-h))
  (format #t "~2Tnext-lava-part: ~D~%" (-> this next-lava-part))
  (label cfg-4)
  this
  )

;; definition for method 30 of type wstd-fight-plat-box
;; WARN: Return type mismatch int vs none.
(defmethod start-bounce! ((this wstd-fight-plat-box))
  0
  (none)
  )

;; definition for method 28 of type wstd-fight-plat-box
;; WARN: Return type mismatch int vs none.
(defmethod update-part-and-sfx! ((this wstd-fight-plat-box))
  0
  (none)
  )

;; definition for method 39 of type wstd-fight-plat-box
;; INFO: Used lq/sq
(defmethod wstd-fight-plat-box-method-39 ((this wstd-fight-plat-box))
  (local-vars (v0-2 symbol))
  (gpr->fpr #x7f800000)
  (let ((s4-0 (new 'stack-no-clear 'vector)))
    (set! (-> s4-0 quad) (-> this root trans quad))
    (set! (-> s4-0 w) 32768.0)
    (if (and *target* (< (vector-vector-distance (target-pos 0) s4-0) (-> s4-0 w)))
        (return #f)
        )
    (set! (-> s4-0 w) 16384.0)
    (let ((s5-1 (new 'stack-no-clear 'array 'collide-shape 64)))
      (countdown (s4-1 (fill-actor-list-for-box *actor-hash* s4-0 s5-1 64))
        (let* ((s3-0 (-> s5-1 s4-1))
               (v1-12 (if (type? s3-0 collide-shape)
                          s3-0
                          )
                      )
               )
          (when v1-12
            (let* ((s3-1 (-> v1-12 process))
                   (v1-13 (if (type? s3-1 process-focusable)
                              s3-1
                              )
                          )
                   )
              (new 'stack-no-clear 'vector)
              (if (and v1-13 (!= this v1-13) (logtest? (process-mask enemy) (-> v1-13 mask)))
                  (return #f)
                  )
              )
            )
          )
        )
      )
    )
  (return #t)
  v0-2
  )

;; definition for method 38 of type wstd-fight-plat-box
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod wstd-fight-plat-box-method-38 ((this wstd-fight-plat-box))
  (let ((s4-0 (new 'static 'fact-info :pickup-type (pickup-type ammo-red) :pickup-spawn-amount 20.0))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s4-0 pickup-type) (pickup-type ammo-random))
    (set! (-> s5-0 quad) (-> this root trans quad))
    (when (or (zero? (-> this crate-h)) (not (handle->process (-> this crate-h))))
      (let* ((s4-1 (ppointer->process (process-spawn crate #f s5-0 'wood s4-0 :name "crate" :to *entity-pool*)))
             (s5-1 (if (type? s4-1 process-focusable)
                       s4-1
                       )
                   )
             )
        (quaternion-copy! (-> (the-as process-drawable s5-1) root quat) (-> this root quat))
        (set! (-> this crate-h) (process->handle s5-1))
        )
      )
    )
  0
  (none)
  )

;; definition for method 40 of type wstd-fight-plat-box
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod wstd-fight-plat-box-method-40 ((this wstd-fight-plat-box))
  (local-vars
    (sv-144 (function sparticle-launch-control vector object))
    (sv-160 vector)
    (sv-176 vector)
    (sv-192 vector)
    )
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (when (and (< (-> this root trans y) 40960.0) (< 24576.0 (-> this root trans y)))
      (let ((f0-2 17203.2)
            (f1-2 13107.2)
            (s5-0 (new 'stack-no-clear 'inline-array 'vector 4))
            )
        (dotimes (v1-9 4)
          (set! (-> s5-0 v1-9 quad) (the-as uint128 0))
          )
        (let ((s4-0 3))
          (set-vector! (-> s5-0 0) f0-2 0.0 f1-2 1.0)
          (set-vector! (-> s5-0 1) (- f0-2) 0.0 f1-2 1.0)
          (set-vector! (-> s5-0 2) (- f0-2) 0.0 (- f1-2) 1.0)
          (set-vector! (-> s5-0 3) f0-2 0.0 (- f1-2) 1.0)
          (dotimes (s3-0 4)
            (vector-orient-by-quat! (-> s5-0 s3-0) (-> s5-0 s3-0) (-> this root quat))
            (vector+! (-> s5-0 s3-0) (-> s5-0 s3-0) (-> this root trans))
            (set! (-> s5-0 s3-0 y) 40960.0)
            )
          (dotimes (s3-1 4)
            (let ((s2-1 (vector-! (new 'stack-no-clear 'vector) (-> s5-0 s3-1) (-> s5-0 s4-0)))
                  (s0-0 (new 'stack-no-clear 'vector))
                  )
              (vector-rotate90-around-y! s0-0 s2-1)
              (vector-normalize! s0-0 1.0)
              (when (< (vector-dot s0-0 (vector-! (new 'stack-no-clear 'vector) (camera-pos) (-> s5-0 s4-0))) 16384.0)
                (dotimes (s1-2 5)
                  (let ((s0-1 (-> this part)))
                    (set! sv-144 (method-of-object s0-1 spawn))
                    (set! sv-192 (new 'stack-no-clear 'vector))
                    (set! sv-160 (-> s5-0 s4-0))
                    (set! sv-176 s2-1)
                    (let ((v1-39 (rand-vu)))
                      (.mov vf7 v1-39)
                      )
                    (.lvf vf5 (&-> sv-176 quad))
                    (.lvf vf4 (&-> sv-160 quad))
                    (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                    (.mul.x.vf acc vf5 vf7 :mask #b111)
                    (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                    (.svf (&-> sv-192 quad) vf6)
                    (sv-144 s0-1 sv-192)
                    )
                  )
                )
              )
            (set! s4-0 s3-1)
            )
          )
        )
      )
    (lerp-scale 0.0 1.0 (-> this root trans y) 45056.0 20480.0)
    (let ((v1-48 (ppointer->process (-> this parent))))
      (set! (-> this draw color-mult quad) (-> (the-as process-drawable v1-48) draw color-mult quad))
      )
    0
    (none)
    )
  )

;; failed to figure out what this is:
(defstate open (wstd-fight-plat-box)
  :virtual #t
  :event plat-event
  :enter (behavior ()
    (wstd-fight-plat-box-method-38 self)
    )
  :code (behavior ()
    (sound-play "ammo-door-open")
    (ja-no-eval :group! wstd-fight-plat-box-idle-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (while (handle->process (-> self crate-h))
      (suspend)
      )
    (while (not (wstd-fight-plat-box-method-39 self))
      (suspend)
      )
    (ja-no-eval :group! wstd-fight-plat-box-idle-ja :num! (seek! 0.0) :frame-num max)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! 0.0))
      )
    (sound-play "ammo-door-close")
    (go-virtual active)
    )
  :post plat-post
  )

;; failed to figure out what this is:
(defstate active (wstd-fight-plat-box)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('crate)
       (cond
         ((wstd-fight-plat-box-method-39 self)
          (go-virtual open)
          #t
          )
         (else
           #f
           )
         )
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :trans (behavior ()
    (plat-trans)
    (wstd-fight-plat-box-method-40 self)
    )
  :code sleep-code
  :post plat-post
  )

;; definition for function wstd-fight-plat-box-init-by-other
(defbehavior wstd-fight-plat-box-init-by-other wstd-fight-plat-box ()
  (let ((gp-0 (new 'process 'collide-shape self (collide-list-enum usually-hit-by-player))))
    (let ((s5-0 (new 'process 'collide-shape-prim-group gp-0 (the-as uint 1) 0)))
      (set! (-> gp-0 total-prims) (the-as uint 2))
      (set! (-> s5-0 prim-core collide-as) (collide-spec camera-blocker pusher))
      (set! (-> s5-0 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> s5-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s5-0 local-sphere) 0.0 0.0 0.0 40960.0)
      (set! (-> gp-0 root-prim) s5-0)
      )
    (pusher-init gp-0)
    (let ((v1-10 (new 'process 'collide-shape-prim-mesh gp-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec camera-blocker pusher))
      (set! (-> v1-10 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> v1-10 prim-core action) (collide-action solid rideable))
      (set! (-> v1-10 transform-index) 3)
      (set-vector! (-> v1-10 local-sphere) 0.0 0.0 0.0 40960.0)
      )
    (set! (-> gp-0 nav-radius) (* 0.75 (-> gp-0 root-prim local-sphere w)))
    (let ((v1-13 (-> gp-0 root-prim)))
      (set! (-> gp-0 backup-collide-as) (-> v1-13 prim-core collide-as))
      (set! (-> gp-0 backup-collide-with) (-> v1-13 prim-core collide-with))
      )
    (set! (-> self root) gp-0)
    )
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-wstd-fight-plat-box" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-bounce-params! self)
  (ja-no-eval :group! (ja-group) :num! (loop!) :frame-num 0.0)
  (ja-post)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self crate-h) (the-as handle #f))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 488) self))
  (set! (-> self draw light-index) (the-as uint 10))
  (logior! (-> self mask) (process-mask platform))
  (go-virtual active)
  )

;; failed to figure out what this is:
(defskelgroup skel-wstd-fight-house-a wstd-fight-house-a wstd-fight-house-a-lod0-jg wstd-fight-house-a-idle-ja
              ((wstd-fight-house-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 8 -5 17)
              )

;; definition of type wstd-fight-house-a
(deftype wstd-fight-house-a (process-drawable)
  ()
  (:state-methods
    active
    open
    )
  )

;; definition for method 3 of type wstd-fight-house-a
(defmethod inspect ((this wstd-fight-house-a))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate open (wstd-fight-house-a)
  :virtual #t
  :enter #f
  :code (behavior ()
    (when (logtest? (-> self draw status) (draw-control-status on-screen))
      (sound-play "door-open")
      (sound-play "door-open-hit")
      )
    (ja-no-eval :group! wstd-fight-house-a-open-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (let ((gp-2 (current-time)))
      (until (time-elapsed? gp-2 (seconds 1))
        (suspend)
        )
      )
    (ja-no-eval :group! wstd-fight-house-a-open-ja :num! (seek! 0.0) :frame-num 5.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! 0.0))
      )
    (if (logtest? (-> self draw status) (draw-control-status on-screen))
        (sound-play "door-close")
        )
    (go-virtual active)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate active (wstd-fight-house-a)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('open)
       (go-virtual open)
       #t
       )
      (('spawn-pos)
       (let ((s5-0 (the-as object (new 'static 'vector))))
         (vector+! (the-as vector s5-0) (-> self root trans) (vector-orient-by-quat!
                                                               (new 'stack-no-clear 'vector)
                                                               (new 'static 'vector :y 36864.0 :z -36864.0 :w 1.0)
                                                               (-> self root quat)
                                                               )
                   )
         s5-0
         )
       )
      )
    )
  :trans (behavior ()
    '()
    )
  :code sleep-code
  :post transform-post
  )

;; definition for function wstd-fight-house-a-init-by-other
(defbehavior wstd-fight-house-a-init-by-other wstd-fight-house-a ()
  (let ((gp-0 (new 'process 'collide-shape self (collide-list-enum usually-hit-by-player))))
    (let ((s5-0 (new 'process 'collide-shape-prim-group gp-0 (the-as uint 2) 0)))
      (set! (-> gp-0 total-prims) (the-as uint 3))
      (set! (-> s5-0 prim-core collide-as) (collide-spec camera-blocker pusher))
      (set! (-> s5-0 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> s5-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s5-0 local-sphere) 0.0 0.0 0.0 204800.0)
      (set! (-> gp-0 root-prim) s5-0)
      )
    (pusher-init gp-0)
    (let ((v1-10 (new 'process 'collide-shape-prim-mesh gp-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec camera-blocker pusher))
      (set! (-> v1-10 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> v1-10 prim-core action) (collide-action solid rideable))
      (set! (-> v1-10 transform-index) 3)
      (set-vector! (-> v1-10 local-sphere) 0.0 32768.0 -20480.0 69632.0)
      )
    (let ((v1-12 (new 'process 'collide-shape-prim-mesh gp-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-12 prim-core collide-as) (collide-spec camera-blocker pusher))
      (set! (-> v1-12 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> v1-12 prim-core action) (collide-action solid rideable))
      (set! (-> v1-12 transform-index) 4)
      (set-vector! (-> v1-12 local-sphere) 0.0 32768.0 -20480.0 69632.0)
      )
    (set! (-> gp-0 nav-radius) (* 0.75 (-> gp-0 root-prim local-sphere w)))
    (let ((v1-15 (-> gp-0 root-prim)))
      (set! (-> gp-0 backup-collide-as) (-> v1-15 prim-core collide-as))
      (set! (-> gp-0 backup-collide-with) (-> v1-15 prim-core collide-with))
      )
    (set! (-> self root) gp-0)
    )
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-wstd-fight-house-a" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self draw light-index) (the-as uint 10))
  (ja-no-eval :group! (ja-group) :num! (loop!) :frame-num 0.0)
  (ja-post)
  (logior! (-> self mask) (process-mask platform))
  (go-virtual active)
  )

;; failed to figure out what this is:
(defskelgroup skel-wstd-fight-plat wstd-fight-plat wstd-fight-plat-lod0-jg wstd-fight-plat-idle-ja
              ((wstd-fight-plat-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 45)
              )

;; definition for symbol *fight-plat-lava-pos*, type (array vector)
(define *fight-plat-lava-pos* (new 'static 'boxed-array :type vector
                                (new 'static 'vector :x 61849.6 :z -58777.6 :w 1.0)
                                (new 'static 'vector :x 40263.68 :z -77496.32 :w 1.0)
                                (new 'static 'vector :x 21340.16 :z -59555.84 :w 1.0)
                                (new 'static 'vector :z -80732.16 :w 1.0)
                                (new 'static 'vector :x -18268.16 :z -59392.0 :w 1.0)
                                (new 'static 'vector :x -37273.6 :z -78110.72 :w 1.0)
                                (new 'static 'vector :x -71884.8 :z -72540.16 :w 1.0)
                                (new 'static 'vector :x -77250.56 :z -39280.64 :w 1.0)
                                (new 'static 'vector :x -58531.84 :z -19333.12 :w 1.0)
                                (new 'static 'vector :x -18104.32 :z -20316.16 :w 1.0)
                                (new 'static 'vector :x -39567.36 :z 286.72 :w 1.0)
                                (new 'static 'vector :x -79544.32 :z 573.44 :w 1.0)
                                (new 'static 'vector :x 21667.84 :z -19742.72 :w 1.0)
                                (new 'static 'vector :x 43008.0 :w 1.0)
                                (new 'static 'vector :x 60948.48 :z 20234.24 :w 1.0)
                                (new 'static 'vector :x 58163.2 :z 56688.64 :w 1.0)
                                (new 'static 'vector :x 22282.24 :z 61194.24 :w 1.0)
                                (new 'static 'vector :x 737.28 :z 41656.32 :w 1.0)
                                (new 'static 'vector :x -19087.36 :z 62013.44 :w 1.0)
                                (new 'static 'vector :x -58081.28 :z 60416.0 :w 1.0)
                                (new 'static 'vector :x -37601.28 :z 79831.04 :w 1.0)
                                (new 'static 'vector :x -70778.88 :z 73932.8 :w 1.0)
                                (new 'static 'vector :x 778.24 :z 81100.8 :w 1.0)
                                (new 'static 'vector :x 41287.68 :z 79093.76 :w 1.0)
                                (new 'static 'vector :x -76840.96 :z 39403.52 :w 1.0)
                                )
        )

;; definition of type wstd-fight-plat
(deftype wstd-fight-plat (base-plat)
  ((basepos           vector   :inline)
   (box               handle   4)
   (door              handle   4)
   (next-crate-spawn  time-frame)
   (next-box-spawn    int32)
   (delta-y           float)
   (spawn-lava?       symbol)
   (next-lava-part    time-frame)
   (part-lava-pos     vector   :inline)
   (attack-pos        vector   8 :inline)
   (attack-ang        degrees  8)
   (cur-point         int32)
   (ambient-sound-id  sound-id)
   (depth             float)
   (go-up             symbol)
   (translate         float)
   (next-lava-sound   time-frame)
   (next-alarm-sound  time-frame)
   (y-offset-box      float)
   )
  (:state-methods
    plat-base-state
    undefined
    active
    go-down
    )
  (:methods
    (wstd-fight-plat-method-39 (_type_) none)
    (wstd-fight-plat-method-40 (_type_) none)
    )
  )

;; definition for method 3 of type wstd-fight-plat
(defmethod inspect ((this wstd-fight-plat))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tbasepos: #<vector @ #x~X>~%" (-> this basepos))
  (format #t "~2Tbox[4] @ #x~X~%" (-> this box))
  (format #t "~2Tdoor[4] @ #x~X~%" (-> this door))
  (format #t "~2Tnext-crate-spawn: ~D~%" (-> this next-crate-spawn))
  (format #t "~2Tnext-box-spawn: ~D~%" (-> this next-box-spawn))
  (format #t "~2Tdelta-y: ~f~%" (-> this delta-y))
  (format #t "~2Tspawn-lava?: ~A~%" (-> this spawn-lava?))
  (format #t "~2Tnext-lava-part: ~D~%" (-> this next-lava-part))
  (format #t "~2Tpart-lava-pos: #<vector @ #x~X>~%" (-> this part-lava-pos))
  (format #t "~2Tattack-pos[8] @ #x~X~%" (-> this attack-pos))
  (format #t "~2Tattack-ang[8] @ #x~X~%" (-> this attack-ang))
  (format #t "~2Tcur-point: ~D~%" (-> this cur-point))
  (format #t "~2Tambient-sound-id: ~D~%" (-> this ambient-sound-id))
  (format #t "~2Tdepth: ~f~%" (-> this depth))
  (format #t "~2Tgo-up: ~A~%" (-> this go-up))
  (format #t "~2Ttranslate: ~f~%" (-> this translate))
  (format #t "~2Tnext-lava-sound: ~D~%" (-> this next-lava-sound))
  (format #t "~2Tnext-alarm-sound: ~D~%" (-> this next-alarm-sound))
  (format #t "~2Ty-offset-box: ~f~%" (-> this y-offset-box))
  (label cfg-4)
  this
  )

;; definition for method 30 of type wstd-fight-plat
;; WARN: Return type mismatch int vs none.
(defmethod start-bounce! ((this wstd-fight-plat))
  0
  (none)
  )

;; definition for method 28 of type wstd-fight-plat
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod update-part-and-sfx! ((this wstd-fight-plat))
  (when (nonzero? (-> this sound))
    (set! (-> this sound trans quad) (-> this root trans quad))
    (update! (-> this sound))
    )
  (none)
  )

;; failed to figure out what this is:
(defstate plat-base-state (wstd-fight-plat)
  :virtual #t
  :event plat-event
  :trans plat-trans
  :code sleep-code
  :post plat-post
  )

;; definition for method 40 of type wstd-fight-plat
;; WARN: Return type mismatch int vs none.
(defmethod wstd-fight-plat-method-40 ((this wstd-fight-plat))
  (let ((s5-0 (-> this node-list data 4 bone transform))
        (s4-0 (the-as wstd-fight-plat-box (handle->process (-> this box 0))))
        )
    (matrix->trans s5-0 (-> s4-0 basetrans))
    (+! (-> s4-0 basetrans y) (-> this y-offset-box))
    (matrix->quaternion (-> s4-0 root quat) s5-0)
    )
  (let ((s5-1 (-> this node-list data 5 bone transform))
        (s4-1 (the-as wstd-fight-plat-box (handle->process (-> this box 1))))
        )
    (matrix->trans s5-1 (-> s4-1 basetrans))
    (+! (-> s4-1 basetrans y) (-> this y-offset-box))
    (matrix->quaternion (-> s4-1 root quat) s5-1)
    )
  (let ((s5-2 (-> this node-list data 6 bone transform))
        (s4-2 (the-as wstd-fight-plat-box (handle->process (-> this box 2))))
        )
    (matrix->trans s5-2 (-> s4-2 basetrans))
    (+! (-> s4-2 basetrans y) (-> this y-offset-box))
    (matrix->quaternion (-> s4-2 root quat) s5-2)
    )
  (let ((s5-3 (-> this node-list data 7 bone transform))
        (s4-3 (the-as wstd-fight-plat-box (handle->process (-> this box 3))))
        )
    (matrix->trans s5-3 (-> s4-3 basetrans))
    (+! (-> s4-3 basetrans y) (-> this y-offset-box))
    (matrix->quaternion (-> s4-3 root quat) s5-3)
    )
  (when (-> this door 0)
    (let ((s5-4 (-> this node-list data 11 bone transform))
          (s4-4 (the-as wstd-door (handle->process (-> this door 0))))
          )
      (matrix->trans s5-4 (-> s4-4 root trans))
      (matrix->quaternion (-> s4-4 root quat) s5-4)
      )
    )
  (when (-> this door 1)
    (let ((s5-5 (-> this node-list data 8 bone transform))
          (s4-5 (the-as wstd-door (handle->process (-> this door 1))))
          )
      (matrix->trans s5-5 (-> s4-5 root trans))
      (matrix->quaternion (-> s4-5 root quat) s5-5)
      )
    )
  (when (-> this door 2)
    (let ((s5-6 (-> this node-list data 10 bone transform))
          (s4-6 (the-as wstd-door (handle->process (-> this door 2))))
          )
      (matrix->trans s5-6 (-> s4-6 root trans))
      (matrix->quaternion (-> s4-6 root quat) s5-6)
      )
    )
  (when (-> this door 3)
    (let ((s5-7 (-> this node-list data 9 bone transform))
          (s4-7 (the-as wstd-door (handle->process (-> this door 3))))
          )
      (matrix->trans s5-7 (-> s4-7 root trans))
      (+! (-> s4-7 root trans x) (* 20480.0 (-> this translate)))
      (matrix->quaternion (-> s4-7 root quat) s5-7)
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate active (wstd-fight-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('go-down)
       (set! (-> self depth) (the-as float (-> block param 0)))
       (go-virtual go-down)
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :trans (behavior ()
    (wstd-fight-plat-method-40 self)
    (set! (-> self basetrans quad) (-> self basepos quad))
    (+! (-> self basetrans y) (-> self delta-y))
    (plat-trans)
    (when (and (< (-> self next-crate-spawn) (current-time)) (or (< (-> *game-info* gun-ammo 0) 20.0)
                                                                 (< (-> *game-info* gun-ammo 1) 10.0)
                                                                 (< (-> *game-info* gun-ammo 2) 20.0)
                                                                 (< (-> *game-info* gun-ammo 3) 1.0)
                                                                 )
               )
      (set! (-> self next-crate-spawn) (+ (current-time) (seconds 5)))
      (send-event (handle->process (-> self box (-> self next-box-spawn))) 'crate)
      (+! (-> self next-box-spawn) 1)
      (when (= (-> self next-box-spawn) 4)
        (set! (-> self next-box-spawn) 0)
        0
        )
      )
    )
  :code sleep-code
  :post plat-post
  )

;; failed to figure out what this is:
(defstate go-down (wstd-fight-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('is-down?)
       #t
       )
      (('go-up)
       (let ((v0-0 (the-as object #t)))
         (set! (-> self go-up) (the-as symbol v0-0))
         v0-0
         )
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self go-up) #f)
    (set-setting! 'allow-look-around #f 0.0 0)
    )
  :exit (behavior ()
    (remove-setting! 'allow-look-around)
    (sound-stop (-> self ambient-sound-id))
    )
  :trans (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (wstd-fight-plat-method-40 self)
      (set! (-> self basetrans quad) (-> self basepos quad))
      (+! (-> self basetrans y) (-> self delta-y))
      (when (-> self spawn-lava?)
        (activate!
          *camera-smush-control*
          (lerp-scale 409.6 0.0 (vector-vector-xz-distance (target-pos 0) (-> self root trans)) 114688.0 143360.0)
          37
          600
          1.0
          0.2
          (-> self clock)
          )
        (when (< (-> self next-lava-part) (current-time))
          102400.0
          102400.0
          (let ((gp-1 (new 'stack-no-clear 'vector)))
            (let ((s3-1 (matrix<-transformq! (new 'stack-no-clear 'matrix) (the-as transformq (-> self root trans)))))
              (vector-matrix*! gp-1 (-> *fight-plat-lava-pos* (rand-vu-int-count (-> *fight-plat-lava-pos* length))) s3-1)
              )
            (set! (-> gp-1 y) 40960.0)
            (set! (-> self part-lava-pos quad) (-> gp-1 quad))
            )
          (set! (-> self next-lava-part) (+ (current-time) (seconds 0.01)))
          )
        (spawn (-> self part) (-> self part-lava-pos))
        )
      (plat-trans)
      (let* ((gp-2 (entity-nav-mesh-by-aid (the-as actor-id #xab7e)))
             (v1-23 (if (type? gp-2 entity-nav-mesh)
                        gp-2
                        )
                    )
             )
        (when v1-23
          (let* ((a0-17 (-> v1-23 nav-mesh))
                 (t9-12 (method-of-object a0-17 nav-mesh-method-38))
                 (a1-7 (new 'stack-no-clear 'nav-poly))
                 )
            (let ((v1-26 (-> self root trans)))
              (let ((a2-3 *y-vector*))
                (let ((a3-3 4096.0))
                  (.mov vf7 a3-3)
                  )
                (.lvf vf5 (&-> a2-3 quad))
                )
              (.lvf vf4 (&-> v1-26 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a1-7 vertex0 quad) vf6)
            (t9-12 a0-17 a1-7)
            )
          )
        )
      )
    )
  :code (behavior ()
    (set! (-> self spawn-lava?) #t)
    (let ((gp-0 (current-time)))
      (until (or (-> self go-up) (time-elapsed? gp-0 (seconds 5)))
        (when (>= (+ (current-time) (seconds -0.3)) (-> self next-lava-sound))
          (set-time! (-> self next-lava-sound))
          (sound-play "lava-bubbles")
          )
        (when (>= (+ (current-time) (seconds -1)) (-> self next-alarm-sound))
          (set-time! (-> self next-alarm-sound))
          (sound-play "lava-plat-alarm")
          )
        (suspend)
        )
      )
    (set! (-> self spawn-lava?) #f)
    (set! (-> self ambient-sound-id) (new-sound-id))
    (let ((f30-0 0.0)
          (gp-1 (static-sound-spec "lava-plat-sink" :group 0))
          )
      (until #f
        (if (or (-> self go-up) (= f30-0 16384.0))
            (goto cfg-20)
            )
        (let ((f0-2 (lerp-scale 0.0 1.0 (-> self root trans y) 49152.0 40960.0)))
          (set-vector! (-> self draw color-mult) (+ 1.0 f0-2) (- 1.0 (* 0.5 f0-2)) (- 1.0 f0-2) 1.0)
          )
        (set! (-> self delta-y) (* (-> self depth) (- (sin f30-0))))
        (+! f30-0 (* 3276.8 (seconds-per-frame)))
        (if (< 16384.0 f30-0)
            (set! f30-0 16384.0)
            )
        (sound-play-by-spec gp-1 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      #f
      (label cfg-20)
      (when (= f30-0 16384.0)
        (dotimes (s5-2 4)
          (let ((v1-47 (the-as wstd-fight-plat-box (handle->process (-> self box s5-2)))))
            (when v1-47
              (when (handle->process (-> v1-47 crate-h))
                (let ((a0-25 (-> (the-as (pointer crate) (-> v1-47 crate-h process)) 0)))
                  (set! (-> a0-25 fact pickup-amount) 0.0)
                  (set! (-> a0-25 fact pickup-spawn-amount) 0.0)
                  (send-event a0-25 'die)
                  )
                )
              )
            )
          )
        )
      (while (< 0.0 f30-0)
        (set! (-> self delta-y) (* (-> self depth) (- (sin f30-0))))
        (set! f30-0 (- f30-0 (* 3276.8 (seconds-per-frame))))
        (if (< f30-0 0.0)
            (set! f30-0 0.0)
            )
        (let ((f0-21 (lerp-scale 0.0 1.0 (-> self root trans y) 49152.0 40960.0)))
          (set-vector! (-> self draw color-mult) (+ 1.0 f0-21) (- 1.0 (* 0.5 f0-21)) (- 1.0 f0-21) 1.0)
          )
        (sound-play-by-spec gp-1 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      )
    (set-vector! (-> self draw color-mult) 1.0 1.0 1.0 1.0)
    (go-virtual active)
    )
  :post plat-post
  )

;; definition for method 32 of type wstd-fight-plat
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this wstd-fight-plat))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 2))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 204800.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (let ((v1-10 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec pusher))
      (set! (-> v1-10 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> v1-10 prim-core action) (collide-action solid rideable))
      (set! (-> v1-10 transform-index) 3)
      (set-vector! (-> v1-10 local-sphere) 0.0 0.0 0.0 184320.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-13 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-13 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-13 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 11 of type wstd-fight-plat
;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this wstd-fight-plat) (arg0 entity-actor))
  (process-entity-status! this (entity-perm-status dead) #t)
  )

;; definition for function wstd-fight-plat-init-by-other
;; INFO: Used lq/sq
(defbehavior wstd-fight-plat-init-by-other wstd-fight-plat ((arg0 vector) (arg1 int) (arg2 float) (arg3 float))
  (init-collision! self)
  (set! (-> self basepos quad) (-> arg0 quad))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-wstd-fight-plat" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-bounce-params! self)
  (ja-no-eval :group! (ja-group) :num! (loop!) :frame-num 0.0)
  (ja-post)
  (logclear! (-> self mask) (process-mask actor-pause))
  (dotimes (v1-28 8)
    (set! (-> self attack-ang v1-28) (* 8192.0 (the float v1-28)))
    )
  (set! (-> self cur-point) 0)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 487) self))
  (set! (-> self translate) arg2)
  (dotimes (s4-1 4)
    (set! (-> self box s4-1)
          (ppointer->handle (process-spawn wstd-fight-plat-box :name "wstd-fight-plat-box" :to self))
          )
    )
  (set! (-> self y-offset-box) arg3)
  (dotimes (s5-1 4)
    (if (logtest? arg1 (ash 1 s5-1))
        (set! (-> self door s5-1)
              (ppointer->handle (process-spawn wstd-fight-house-a :name "wstd-fight-house-a" :to self))
              )
        (set! (-> self door s5-1) (the-as handle #f))
        )
    )
  (set! (-> self draw light-index) (the-as uint 10))
  (set! (-> self spawn-lava?) #f)
  (set! (-> self delta-y) 0.0)
  (logior! (-> self mask) (process-mask platform))
  (go-virtual active)
  )

;; failed to figure out what this is:
(defskelgroup skel-wstd-fight-plat-smlplat wstd-fight-plat-smlplat wstd-fight-plat-smlplat-lod0-jg wstd-fight-plat-smlplat-idle-ja
              ((wstd-fight-plat-smlplat-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 20)
              )

;; definition of type wstd-fight-plat-smlplat
(deftype wstd-fight-plat-smlplat (base-plat)
  ((basepos           vector  :inline)
   (box               handle)
   (next-crate-spawn  time-frame)
   (next-box-spawn    int32)
   (delta-y           float)
   (spawn-lava?       symbol)
   (next-lava-part    time-frame)
   (part-lava-pos     vector  :inline)
   (ambient-sound-id  sound-id)
   (depth             float)
   (translate         float)
   (angle-move        float)
   (ride-timer        time-frame)
   (lock              symbol)
   )
  (:state-methods
    plat-base-state
    undefined
    active
    go-down
    go-up
    go-up-fma
    )
  (:methods
    (wstd-fight-plat-smlplat-method-41 (_type_) none)
    (wstd-fight-plat-smlplat-method-42 (_type_) none)
    )
  )

;; definition for method 3 of type wstd-fight-plat-smlplat
(defmethod inspect ((this wstd-fight-plat-smlplat))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tbasepos: #<vector @ #x~X>~%" (-> this basepos))
  (format #t "~2Tbox: ~D~%" (-> this box))
  (format #t "~2Tnext-crate-spawn: ~D~%" (-> this next-crate-spawn))
  (format #t "~2Tnext-box-spawn: ~D~%" (-> this next-box-spawn))
  (format #t "~2Tdelta-y: ~f~%" (-> this delta-y))
  (format #t "~2Tspawn-lava?: ~A~%" (-> this spawn-lava?))
  (format #t "~2Tnext-lava-part: ~D~%" (-> this next-lava-part))
  (format #t "~2Tpart-lava-pos: #<vector @ #x~X>~%" (-> this part-lava-pos))
  (format #t "~2Tambient-sound-id: ~D~%" (-> this ambient-sound-id))
  (format #t "~2Tdepth: ~f~%" (-> this depth))
  (format #t "~2Ttranslate: ~f~%" (-> this translate))
  (format #t "~2Tangle-move: ~f~%" (-> this angle-move))
  (format #t "~2Tride-timer: ~D~%" (-> this ride-timer))
  (format #t "~2Tlock: ~A~%" (-> this lock))
  (label cfg-4)
  this
  )

;; definition for method 30 of type wstd-fight-plat-smlplat
;; WARN: Return type mismatch int vs none.
(defmethod start-bounce! ((this wstd-fight-plat-smlplat))
  0
  (none)
  )

;; definition for method 28 of type wstd-fight-plat-smlplat
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod update-part-and-sfx! ((this wstd-fight-plat-smlplat))
  (when (nonzero? (-> this sound))
    (set! (-> this sound trans quad) (-> this root trans quad))
    (update! (-> this sound))
    )
  (none)
  )

;; failed to figure out what this is:
(defstate plat-base-state (wstd-fight-plat-smlplat)
  :virtual #t
  :event plat-event
  :trans plat-trans
  :code sleep-code
  :post plat-post
  )

;; definition for method 42 of type wstd-fight-plat-smlplat
;; WARN: Return type mismatch int vs none.
(defmethod wstd-fight-plat-smlplat-method-42 ((this wstd-fight-plat-smlplat))
  (let ((gp-0 (-> this node-list data 4 bone transform))
        (s5-0 (the-as wstd-fight-plat-box (handle->process (-> this box))))
        )
    (matrix->trans gp-0 (-> s5-0 basetrans))
    (matrix->quaternion (-> s5-0 root quat) gp-0)
    (quaternion-rotate-y! (-> s5-0 root quat) (-> s5-0 root quat) 12743.111)
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate active (wstd-fight-plat-smlplat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('go-up-fma)
       (go-virtual go-up-fma)
       )
      (('go-down)
       (set! (-> self depth) (the-as float (-> block param 0)))
       (go-virtual go-down)
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :trans (behavior ()
    (if (movie?)
        (go-virtual go-up-fma)
        )
    (wstd-fight-plat-smlplat-method-42 self)
    (when (< (vector-vector-distance (target-pos 0) (-> self root trans)) 34816.0)
      )
    (plat-trans)
    )
  :code sleep-code
  :post plat-post
  )

;; failed to figure out what this is:
(defstate go-down (wstd-fight-plat-smlplat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('is-down?)
       #t
       )
      (('go-up)
       (if (not (-> self lock))
           (go-virtual go-up)
           )
       (set! (-> self lock) #f)
       #f
       )
      (('go-up-fma)
       (go-virtual go-up-fma)
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :trans (behavior ()
    (if (movie?)
        (go-virtual go-up-fma)
        )
    (wstd-fight-plat-smlplat-method-42 self)
    (set! (-> self basetrans quad) (-> self basepos quad))
    (+! (-> self basetrans y) (-> self delta-y))
    (plat-trans)
    )
  :code (behavior ()
    (set! (-> self spawn-lava?) #f)
    (set! (-> self ambient-sound-id) (new-sound-id))
    (let ((gp-0 (static-sound-spec "lava-plat-sink" :group 0)))
      (until #f
        (if (= (-> self angle-move) 16384.0)
            (goto cfg-7)
            )
        (set! (-> self delta-y) (* (-> self depth) (- (sin (-> self angle-move)))))
        (+! (-> self angle-move) (* 3276.8 (seconds-per-frame)))
        (if (< 16384.0 (-> self angle-move))
            (set! (-> self angle-move) 16384.0)
            )
        (sound-play-by-spec gp-0 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      )
    #f
    (label cfg-7)
    (sound-stop (-> self ambient-sound-id))
    (when (= (-> self angle-move) 16384.0)
      (let ((v1-14 (the-as wstd-fight-plat-box (handle->process (-> self box)))))
        (when v1-14
          (when (handle->process (-> v1-14 crate-h))
            (let ((a0-13 (-> (the-as (pointer crate) (-> v1-14 crate-h process)) 0)))
              (set! (-> a0-13 fact pickup-amount) 0.0)
              (set! (-> a0-13 fact pickup-spawn-amount) 0.0)
              (send-event a0-13 'die)
              )
            )
          )
        )
      )
    (until #f
      (suspend)
      )
    #f
    )
  :post plat-post
  )

;; failed to figure out what this is:
(defstate go-up (wstd-fight-plat-smlplat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('go-down)
       (go-virtual go-down)
       )
      (('go-up-fma)
       (go-virtual go-up-fma)
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :enter (behavior ()
    '()
    )
  :exit (behavior ()
    (sound-stop (-> self ambient-sound-id))
    )
  :trans (behavior ()
    (if (movie?)
        (go-virtual go-up-fma)
        )
    (wstd-fight-plat-smlplat-method-42 self)
    (set! (-> self basetrans quad) (-> self basepos quad))
    (+! (-> self basetrans y) (-> self delta-y))
    (plat-trans)
    )
  :code (behavior ()
    (set! (-> self spawn-lava?) #f)
    (set! (-> self ambient-sound-id) (new-sound-id))
    (let ((gp-0 (static-sound-spec "lava-plat-sink" :group 0)))
      (while (< 0.0 (-> self angle-move))
        (set! (-> self delta-y) (* (-> self depth) (- (sin (-> self angle-move)))))
        (set! (-> self angle-move) (- (-> self angle-move) (* 3276.8 (seconds-per-frame))))
        (if (< (-> self angle-move) 0.0)
            (set! (-> self angle-move) 0.0)
            )
        (sound-play-by-spec gp-0 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      )
    (send-event (handle->process (-> self box)) 'crate)
    (go-virtual active)
    )
  :post plat-post
  )

;; failed to figure out what this is:
(defstate go-up-fma (wstd-fight-plat-smlplat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('go-down)
       (go-virtual go-down)
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self delta-y) 0.0)
    )
  :exit (behavior ()
    '()
    )
  :trans (behavior ()
    (wstd-fight-plat-smlplat-method-42 self)
    (set! (-> self basetrans quad) (-> self basepos quad))
    (+! (-> self basetrans y) (-> self delta-y))
    (plat-trans)
    )
  :code (behavior ()
    (suspend)
    (until #f
      (if (not (movie?))
          (go-virtual go-down)
          )
      (suspend)
      )
    #f
    )
  :post plat-post
  )

;; definition for method 32 of type wstd-fight-plat-smlplat
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this wstd-fight-plat-smlplat))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 2))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 307200.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (let ((v1-10 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec pusher))
      (set! (-> v1-10 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> v1-10 prim-core action) (collide-action solid rideable))
      (set! (-> v1-10 transform-index) 3)
      (set-vector! (-> v1-10 local-sphere) 0.0 0.0 0.0 61440.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-13 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-13 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-13 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 11 of type wstd-fight-plat-smlplat
;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this wstd-fight-plat-smlplat) (arg0 entity-actor))
  (process-entity-status! this (entity-perm-status dead) #t)
  )

;; definition for function wstd-fight-plat-smlplat-init-by-other
;; INFO: Used lq/sq
(defbehavior wstd-fight-plat-smlplat-init-by-other wstd-fight-plat-smlplat ((arg0 vector) (arg1 object) (arg2 float))
  (init-collision! self)
  (set! (-> self basepos quad) (-> arg0 quad))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 0.7 0.7 0.7 1.0)
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-wstd-fight-plat-smlplat" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (init-bounce-params! self)
  (ja-no-eval :group! (ja-group) :num! (loop!) :frame-num 0.0)
  (ja-post)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 487) self))
  (set! (-> self translate) arg2)
  (set! (-> self box)
        (ppointer->handle (process-spawn wstd-fight-plat-box :name "wstd-fight-plat-box" :to self))
        )
  (set! (-> self draw light-index) (the-as uint 10))
  (set! (-> self spawn-lava?) #f)
  (set! (-> self delta-y) 0.0)
  (set! (-> self angle-move) 0.0)
  (set! (-> self depth) 24576.0)
  (set! (-> self lock) #f)
  (logior! (-> self mask) (process-mask platform))
  (go-virtual go-down)
  )

;; failed to figure out what this is:
(defskelgroup skel-wstd-fight-plat-large wstd-fight-plat-large wstd-fight-plat-large-lod0-jg wstd-fight-plat-large-idle-ja
              ((wstd-fight-plat-large-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 75)
              )

;; definition of type wstd-fight-plat-large
(deftype wstd-fight-plat-large (base-plat)
  ((basepos           vector   :inline)
   (box               handle   4)
   (door              handle   8)
   (next-crate-spawn  time-frame)
   (next-box-spawn    int32)
   (delta-y           float)
   (spawn-lava?       symbol)
   (next-lava-part    time-frame)
   (part-lava-pos     vector   :inline)
   (attack-pos        vector   8 :inline)
   (attack-ang        degrees  8)
   (cur-point         int32)
   (ambient-sound-id  sound-id)
   (depth             float)
   (go-up             symbol)
   (translate         float)
   (next-lava-sound   time-frame)
   (next-alarm-sound  time-frame)
   )
  (:state-methods
    plat-base-state
    undefined
    active
    go-down
    end
    )
  (:methods
    (wstd-fight-plat-large-method-40 (_type_) none)
    (wstd-fight-plat-large-method-41 (_type_) none)
    (wstd-fight-plat-large-method-42 (_type_) none)
    )
  )

;; definition for method 3 of type wstd-fight-plat-large
(defmethod inspect ((this wstd-fight-plat-large))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tbasepos: #<vector @ #x~X>~%" (-> this basepos))
  (format #t "~2Tbox[4] @ #x~X~%" (-> this box))
  (format #t "~2Tdoor[8] @ #x~X~%" (-> this door))
  (format #t "~2Tnext-crate-spawn: ~D~%" (-> this next-crate-spawn))
  (format #t "~2Tnext-box-spawn: ~D~%" (-> this next-box-spawn))
  (format #t "~2Tdelta-y: ~f~%" (-> this delta-y))
  (format #t "~2Tspawn-lava?: ~A~%" (-> this spawn-lava?))
  (format #t "~2Tnext-lava-part: ~D~%" (-> this next-lava-part))
  (format #t "~2Tpart-lava-pos: #<vector @ #x~X>~%" (-> this part-lava-pos))
  (format #t "~2Tattack-pos[8] @ #x~X~%" (-> this attack-pos))
  (format #t "~2Tattack-ang[8] @ #x~X~%" (-> this attack-ang))
  (format #t "~2Tcur-point: ~D~%" (-> this cur-point))
  (format #t "~2Tambient-sound-id: ~D~%" (-> this ambient-sound-id))
  (format #t "~2Tdepth: ~f~%" (-> this depth))
  (format #t "~2Tgo-up: ~A~%" (-> this go-up))
  (format #t "~2Ttranslate: ~f~%" (-> this translate))
  (format #t "~2Tnext-lava-sound: ~D~%" (-> this next-lava-sound))
  (format #t "~2Tnext-alarm-sound: ~D~%" (-> this next-alarm-sound))
  (label cfg-4)
  this
  )

;; definition for method 30 of type wstd-fight-plat-large
;; WARN: Return type mismatch int vs none.
(defmethod start-bounce! ((this wstd-fight-plat-large))
  0
  (none)
  )

;; definition for method 28 of type wstd-fight-plat-large
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod update-part-and-sfx! ((this wstd-fight-plat-large))
  (when (nonzero? (-> this sound))
    (set! (-> this sound trans quad) (-> this root trans quad))
    (update! (-> this sound))
    )
  (none)
  )

;; failed to figure out what this is:
(defstate plat-base-state (wstd-fight-plat-large)
  :virtual #t
  :event plat-event
  :trans plat-trans
  :code sleep-code
  :post plat-post
  )

;; definition of type house-info
(deftype house-info (structure)
  ((joint-index  uint32)
   (y-angle      float)
   (x-offset     float)
   )
  )

;; definition for method 3 of type house-info
(defmethod inspect ((this house-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'house-info)
  (format #t "~1Tjoint-index: ~D~%" (-> this joint-index))
  (format #t "~1Ty-angle: ~f~%" (-> this y-angle))
  (format #t "~1Tx-offset: ~f~%" (-> this x-offset))
  (label cfg-4)
  this
  )

;; definition for function wasstadc-tl
;; WARN: Return type mismatch (array plat-info) vs none.
(defun wasstadc-tl ()
  (set! *wstd-fight-large-house* (new 'static 'boxed-array :type house-info
                                   (new 'static 'house-info :joint-index #x4 :x-offset 28672.0)
                                   (new 'static 'house-info :joint-index #x5 :x-offset -28672.0)
                                   (new 'static 'house-info :joint-index #x6 :y-angle -16384.0)
                                   (new 'static 'house-info :joint-index #x7 :y-angle -16384.0)
                                   (new 'static 'house-info :joint-index #x8 :y-angle -16384.0)
                                   (new 'static 'house-info :joint-index #x9 :y-angle -16384.0)
                                   (new 'static 'house-info :joint-index #xa)
                                   (new 'static 'house-info :joint-index #xb)
                                   )
        )
  (set! *fight-plat-lava-large-pos* (new 'static 'boxed-array :type vector
                                      (new 'static 'vector :w 1.0)
                                      (new 'static 'vector :z 94208.0 :w 1.0)
                                      (new 'static 'vector :z 188416.0 :w 1.0)
                                      (new 'static 'vector :z -94208.0 :w 1.0)
                                      (new 'static 'vector :z -188416.0 :w 1.0)
                                      (new 'static 'vector :x 94208.0 :w 1.0)
                                      (new 'static 'vector :x 188416.0 :w 1.0)
                                      (new 'static 'vector :x -94208.0 :w 1.0)
                                      (new 'static 'vector :x -188416.0 :w 1.0)
                                      (new 'static 'vector :x 188416.0 :z 94208.0 :w 1.0)
                                      (new 'static 'vector :x -188416.0 :z 94208.0 :w 1.0)
                                      (new 'static 'vector :x 188416.0 :z -94208.0 :w 1.0)
                                      (new 'static 'vector :x -188416.0 :z -94208.0 :w 1.0)
                                      (new 'static 'vector :x 188416.0 :z 188416.0 :w 1.0)
                                      (new 'static 'vector :x 94208.0 :z 188416.0 :w 1.0)
                                      (new 'static 'vector :x -188416.0 :z 188416.0 :w 1.0)
                                      (new 'static 'vector :x -94208.0 :z 188416.0 :w 1.0)
                                      (new 'static 'vector :x 188416.0 :z -188416.0 :w 1.0)
                                      (new 'static 'vector :x 94208.0 :z -188416.0 :w 1.0)
                                      (new 'static 'vector :x -188416.0 :z -188416.0 :w 1.0)
                                      (new 'static 'vector :x -94208.0 :z -188416.0 :w 1.0)
                                      )
        )
  (type-new 'plat-info structure (the-as int (the-as uint #x90000000c)))
  (set! *wstd-fight-large-plat* (new 'static 'boxed-array :type plat-info
                                  (new 'static 'plat-info :joint-idx #xc :x-off -38912.0 :z-off -38912.0)
                                  (new 'static 'plat-info :joint-idx #xd :x-off 38912.0 :z-off -38912.0)
                                  (new 'static 'plat-info :joint-idx #xe :x-off 38912.0 :z-off 38912.0)
                                  (new 'static 'plat-info :joint-idx #xf :x-off -38912.0 :z-off 38912.0)
                                  )
        )
  (none)
  )

;; failed to figure out what this is:
(wasstadc-tl)

;; definition for method 41 of type wstd-fight-plat-large
;; WARN: Return type mismatch int vs none.
(defmethod wstd-fight-plat-large-method-41 ((this wstd-fight-plat-large))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (dotimes (s5-0 (length *wstd-fight-large-house*))
      (when (-> this door s5-0)
        (let ((s3-0 (-> this node-list data (-> *wstd-fight-large-house* s5-0 joint-index) bone transform))
              (s4-0 (the-as wstd-door (handle->process (-> this door s5-0))))
              )
          (matrix->trans s3-0 (-> s4-0 root trans))
          (matrix->quaternion (-> s4-0 root quat) s3-0)
          (quaternion-rotate-local-y!
            (-> s4-0 root quat)
            (-> s4-0 root quat)
            (-> *wstd-fight-large-house* s5-0 y-angle)
            )
          (let ((s3-1 (-> s4-0 root trans)))
            (let ((s2-0 (-> s4-0 root trans)))
              (let ((v1-22 (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> s4-0 root quat))))
                (let ((a0-16 (-> *wstd-fight-large-house* s5-0 x-offset)))
                  (.mov vf7 a0-16)
                  )
                (.lvf vf5 (&-> v1-22 quad))
                )
              (.lvf vf4 (&-> s2-0 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> s3-1 quad) vf6)
            )
          )
        )
      )
    0
    (none)
    )
  )

;; definition for method 42 of type wstd-fight-plat-large
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod wstd-fight-plat-large-method-42 ((this wstd-fight-plat-large))
  (when (< (-> this next-lava-part) (current-time))
    102400.0
    102400.0
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (let ((s2-0 (matrix<-transformq! (new 'stack-no-clear 'matrix) (the-as transformq (-> this root trans)))))
        (vector-matrix*!
          s5-0
          (-> *fight-plat-lava-large-pos* (rand-vu-int-count (-> *fight-plat-lava-large-pos* length)))
          s2-0
          )
        )
      (set! (-> s5-0 y) 40960.0)
      (set! (-> this part-lava-pos quad) (-> s5-0 quad))
      )
    (set! (-> this next-lava-part) (+ (current-time) (seconds 0.01)))
    )
  (spawn (-> this part) (-> this part-lava-pos))
  (spawn (-> this part) (-> this part-lava-pos))
  (spawn (-> this part) (-> this part-lava-pos))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate active (wstd-fight-plat-large)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('go-down)
       (set! (-> self depth) (the-as float (-> block param 0)))
       (go-virtual go-down)
       )
      (('end)
       (set! (-> self depth) (the-as float (-> block param 0)))
       (go-virtual end)
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (dotimes (gp-0 (length *wstd-fight-large-plat*))
      (if (-> self box gp-0)
          (send-event (handle->process (-> self box gp-0)) 'go-down 24576.0)
          )
      )
    )
  :trans (behavior ()
    (wstd-fight-plat-large-method-41 self)
    (set! (-> self basetrans quad) (-> self basepos quad))
    (+! (-> self basetrans y) (-> self delta-y))
    (plat-trans)
    )
  :code sleep-code
  :post plat-post
  )

;; failed to figure out what this is:
(defstate go-down (wstd-fight-plat-large)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('is-down?)
       #t
       )
      (('go-up)
       (let ((v0-0 (the-as object #t)))
         (set! (-> self go-up) (the-as symbol v0-0))
         v0-0
         )
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self go-up) #f)
    (set-setting! 'allow-look-around #f 0.0 0)
    (dotimes (gp-0 4)
      (when (-> self box gp-0)
        (let ((s5-0 (-> self node-list data (-> *wstd-fight-large-plat* gp-0 joint-idx) bone transform))
              (s4-0 (the-as wstd-fight-plat-smlplat (handle->process (-> self box gp-0))))
              )
          (matrix->trans s5-0 (-> s4-0 basepos))
          (cond
            ((< (vector-vector-distance (target-pos 0) (-> self root trans)) 122880.0)
             (+! (-> s4-0 basepos x) (-> *wstd-fight-large-plat* gp-0 x-off))
             (+! (-> s4-0 basepos z) (-> *wstd-fight-large-plat* gp-0 z-off))
             )
            (else
              (set! (-> s4-0 basepos x) (- (-> s4-0 basepos x) (-> *wstd-fight-large-plat* gp-0 x-off)))
              (set! (-> s4-0 basepos z) (- (-> s4-0 basepos z) (-> *wstd-fight-large-plat* gp-0 z-off)))
              )
            )
          (matrix->quaternion (-> s4-0 root quat) s5-0)
          )
        (send-event (handle->process (-> self box gp-0)) 'go-up)
        )
      )
    )
  :exit (behavior ()
    (remove-setting! 'allow-look-around)
    (sound-stop (-> self ambient-sound-id))
    )
  :trans (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (wstd-fight-plat-large-method-41 self)
      (set! (-> self basetrans quad) (-> self basepos quad))
      (+! (-> self basetrans y) (-> self delta-y))
      (when (-> self spawn-lava?)
        (wstd-fight-plat-large-method-42 self)
        (activate! *camera-smush-control* 409.6 37 600 1.0 0.2 (-> self clock))
        )
      (plat-trans)
      (let* ((gp-0 (entity-nav-mesh-by-aid (the-as actor-id #xab7e)))
             (v1-9 (if (type? gp-0 entity-nav-mesh)
                       gp-0
                       )
                   )
             )
        (when v1-9
          (let* ((a0-7 (-> v1-9 nav-mesh))
                 (t9-6 (method-of-object a0-7 nav-mesh-method-38))
                 (a1-2 (new 'stack-no-clear 'nav-poly))
                 )
            (let ((v1-12 (-> self root trans)))
              (let ((a2-1 *y-vector*))
                (let ((a3-2 4096.0))
                  (.mov vf7 a3-2)
                  )
                (.lvf vf5 (&-> a2-1 quad))
                )
              (.lvf vf4 (&-> v1-12 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a1-2 vertex0 quad) vf6)
            (t9-6 a0-7 a1-2)
            )
          )
        )
      )
    )
  :code (behavior ()
    (set! (-> self spawn-lava?) #t)
    (let ((gp-0 (current-time)))
      (until (or (-> self go-up) (time-elapsed? gp-0 (seconds 10)))
        (when (>= (+ (current-time) (seconds -0.3)) (-> self next-lava-sound))
          (set-time! (-> self next-lava-sound))
          (sound-play "lava-bubbles")
          )
        (when (>= (+ (current-time) (seconds -1)) (-> self next-alarm-sound))
          (set-time! (-> self next-alarm-sound))
          (sound-play "lava-plat-alarm")
          )
        (suspend)
        )
      )
    (set! (-> self spawn-lava?) #f)
    (set! (-> self ambient-sound-id) (new-sound-id))
    (let ((f30-0 0.0)
          (gp-1 (static-sound-spec "lava-plat-sink" :group 0))
          )
      (until #f
        (if (or (-> self go-up) (= f30-0 16384.0))
            (goto cfg-20)
            )
        (set! (-> self delta-y) (* (-> self depth) (- (sin f30-0))))
        (+! f30-0 (* 3276.8 (seconds-per-frame)))
        (if (< 16384.0 f30-0)
            (set! f30-0 16384.0)
            )
        (sound-play-by-spec gp-1 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      #f
      (label cfg-20)
      (while (< 0.0 f30-0)
        (set! (-> self delta-y) (* (-> self depth) (- (sin f30-0))))
        (set! f30-0 (- f30-0 (* 5461.3335 (seconds-per-frame))))
        (if (< f30-0 0.0)
            (set! f30-0 0.0)
            )
        (sound-play-by-spec gp-1 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      )
    (go-virtual active)
    )
  :post plat-post
  )

;; failed to figure out what this is:
(defstate end (wstd-fight-plat-large)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('is-down?)
       #f
       )
      (else
        (plat-event proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self go-up) #f)
    (set-setting! 'allow-look-around #f 0.0 0)
    (dotimes (gp-0 4)
      (when (-> self box gp-0)
        (let ((s5-0 (-> self node-list data (-> *wstd-fight-large-plat* gp-0 joint-idx) bone transform))
              (s4-0 (the-as wstd-fight-plat-smlplat (handle->process (-> self box gp-0))))
              )
          (matrix->trans s5-0 (-> s4-0 basepos))
          (set! (-> s4-0 basepos x) (- (-> s4-0 basepos x) (-> *wstd-fight-large-plat* gp-0 x-off)))
          (set! (-> s4-0 basepos z) (- (-> s4-0 basepos z) (-> *wstd-fight-large-plat* gp-0 z-off)))
          (matrix->quaternion (-> s4-0 root quat) s5-0)
          )
        (send-event (handle->process (-> self box gp-0)) 'go-up-fma)
        )
      )
    )
  :exit (behavior ()
    (remove-setting! 'allow-look-around)
    (sound-stop (-> self ambient-sound-id))
    )
  :trans (behavior ()
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (wstd-fight-plat-large-method-41 self)
      (set! (-> self basetrans quad) (-> self basepos quad))
      (+! (-> self basetrans y) (-> self delta-y))
      (if (-> self spawn-lava?)
          (wstd-fight-plat-large-method-42 self)
          )
      (plat-trans)
      (let* ((gp-0 (entity-nav-mesh-by-aid (the-as actor-id #xab7e)))
             (v1-7 (if (type? gp-0 entity-nav-mesh)
                       gp-0
                       )
                   )
             )
        (when v1-7
          (let* ((a0-6 (-> v1-7 nav-mesh))
                 (t9-5 (method-of-object a0-6 nav-mesh-method-38))
                 (a1-1 (new 'stack-no-clear 'nav-poly))
                 )
            (let ((v1-10 (-> self root trans)))
              (let ((a2-0 *y-vector*))
                (let ((a3-1 4096.0))
                  (.mov vf7 a3-1)
                  )
                (.lvf vf5 (&-> a2-0 quad))
                )
              (.lvf vf4 (&-> v1-10 quad))
              )
            (.add.x.vf vf6 vf0 vf0 :mask #b1000)
            (.mul.x.vf acc vf5 vf7 :mask #b111)
            (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
            (.svf (&-> a1-1 vertex0 quad) vf6)
            (t9-5 a0-6 a1-1)
            )
          )
        )
      )
    )
  :code (behavior ()
    (until #f
      (suspend)
      )
    #f
    (set! (-> self spawn-lava?) #t)
    (let ((gp-0 (current-time)))
      (until (or (-> self go-up) (time-elapsed? gp-0 (seconds 10)))
        (when (>= (+ (current-time) (seconds -0.3)) (-> self next-lava-sound))
          (set-time! (-> self next-lava-sound))
          (sound-play "lava-bubbles")
          )
        (when (>= (+ (current-time) (seconds -1)) (-> self next-alarm-sound))
          (set-time! (-> self next-alarm-sound))
          (sound-play "lava-plat-alarm")
          )
        (suspend)
        )
      )
    (set! (-> self spawn-lava?) #f)
    (set! (-> self ambient-sound-id) (new-sound-id))
    (let ((f30-0 0.0)
          (gp-1 (static-sound-spec "lava-plat-sink" :group 0))
          )
      (until #f
        (if (or (-> self go-up) (= f30-0 16384.0))
            (goto cfg-21)
            )
        (set! (-> self delta-y) (* (-> self depth) (- (sin f30-0))))
        (+! f30-0 (* 3276.8 (seconds-per-frame)))
        (if (< 16384.0 f30-0)
            (set! f30-0 16384.0)
            )
        (sound-play-by-spec gp-1 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      #f
      (label cfg-21)
      (while (< 0.0 f30-0)
        (set! (-> self delta-y) (* (-> self depth) (- (sin f30-0))))
        (set! f30-0 (- f30-0 (* 5461.3335 (seconds-per-frame))))
        (if (< f30-0 0.0)
            (set! f30-0 0.0)
            )
        (sound-play-by-spec gp-1 (-> self ambient-sound-id) (-> self root trans))
        (suspend)
        )
      )
    (go-virtual active)
    )
  :post plat-post
  )

;; definition for method 32 of type wstd-fight-plat-large
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this wstd-fight-plat-large))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 2))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 307200.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (let ((v1-10 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec pusher))
      (set! (-> v1-10 prim-core collide-with) (collide-spec jak enemy hit-by-others-list player-list))
      (set! (-> v1-10 prim-core action) (collide-action solid rideable))
      (set! (-> v1-10 transform-index) 3)
      (set-vector! (-> v1-10 local-sphere) 0.0 0.0 0.0 307200.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-13 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-13 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-13 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 11 of type wstd-fight-plat-large
;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this wstd-fight-plat-large) (arg0 entity-actor))
  (process-entity-status! this (entity-perm-status dead) #t)
  )

;; definition for function wstd-fight-plat-large-init-by-other
;; INFO: Used lq/sq
;; ERROR: Function may read a register that is not set: t0
(defbehavior wstd-fight-plat-large-init-by-other wstd-fight-plat-large ((arg0 vector) (arg1 int) (arg2 float))
  (local-vars (t0-0 none))
  (init-collision! self)
  (set! (-> self basepos quad) (-> arg0 quad))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-wstd-fight-plat-large" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (init-bounce-params! self)
  (ja-no-eval :group! (ja-group) :num! (loop!) :frame-num 0.0)
  (ja-post)
  (logclear! (-> self mask) (process-mask actor-pause))
  (dotimes (v1-28 8)
    (set! (-> self attack-ang v1-28) (* 8192.0 (the float v1-28)))
    )
  (set! (-> self cur-point) 0)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 487) self))
  (set! (-> self translate) arg2)
  (dotimes (s5-1 4)
    (let ((s4-2 (get-process *default-dead-pool* wstd-fight-plat-smlplat #x4000 1)))
      (set! (-> self box s5-1)
            (ppointer->handle
              (when s4-2
                (let ((t9-9 (method-of-type wstd-fight-plat-smlplat activate))
                      (a0-20 s4-2)
                      (a1-6 self)
                      (a2-5 "wstd-fight-plat-smlplat")
                      (a3-1 #x70004000)
                      )
                  (t9-9 (the-as wstd-fight-plat-smlplat a0-20) a1-6 a2-5 (the-as pointer a3-1))
                  (run-now-in-process s4-2 wstd-fight-plat-smlplat-init-by-other (the-as none a2-5) (the-as none a3-1) t0-0)
                  )
                (-> s4-2 ppointer)
                )
              )
            )
      )
    (when (-> self box s5-1)
      (let ((s4-3 (-> self node-list data (-> *wstd-fight-large-plat* s5-1 joint-idx) bone transform))
            (s3-1 (the-as wstd-fight-plat-smlplat (handle->process (-> self box s5-1))))
            )
        (matrix->trans s4-3 (-> s3-1 basepos))
        (set! (-> s3-1 basepos x) (- (-> s3-1 basepos x) (-> *wstd-fight-large-plat* s5-1 x-off)))
        (set! (-> s3-1 basepos z) (- (-> s3-1 basepos z) (-> *wstd-fight-large-plat* s5-1 z-off)))
        (matrix->quaternion (-> s3-1 root quat) s4-3)
        )
      )
    )
  (dotimes (s5-2 8)
    (if (logtest? arg1 (ash 1 s5-2))
        (set! (-> self door s5-2)
              (ppointer->handle (process-spawn wstd-fight-house-a :name "wstd-fight-house-a" :to self))
              )
        (set! (-> self door s5-2) (the-as handle #f))
        )
    )
  (set! (-> self draw light-index) (the-as uint 10))
  (set! (-> self spawn-lava?) #f)
  (set! (-> self delta-y) 0.0)
  (logior! (-> self mask) (process-mask platform))
  (go-virtual active)
  )

;; definition of type marauder-info
(deftype marauder-info (structure)
  ((handle     handle)
   (vis-point  int32)
   )
  )

;; definition for method 3 of type marauder-info
(defmethod inspect ((this marauder-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'marauder-info)
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tvis-point: ~D~%" (-> this vis-point))
  (label cfg-4)
  this
  )

;; definition of type task-manager-arena-fight-base
(deftype task-manager-arena-fight-base (task-manager)
  ((marauder           marauder-info  16 :inline)
   (last-count         uint32)
   (count-alive        uint32)
   (check-timer        time-frame     :offset 512)
   (next-spawn         time-frame)
   (count              uint32)
   (angle              uint32)
   (dark               symbol)
   (arrow-h            handle)
   (snd-id             sound-id)
   (crowd-intensity    float)
   (next-go-down       time-frame)
   (actor-group        (pointer actor-group))
   (actor-group-count  int32)
   (platform           handle         4)
   (gui-id             sound-id)
   (crate-h            handle         3)
   (darkbomb           symbol)
   )
  (:methods
    (spawn-marauder (_type_ vector quaternion actor-id symbol symbol) none)
    (task-manager-arena-fight-base-method-33 (_type_) none)
    (task-manager-arena-fight-base-method-34 (_type_) none)
    (task-manager-arena-fight-base-method-35 (_type_ text-id) none)
    (spawn-crate (_type_ vector quaternion pickup-type) handle)
    )
  )

;; definition for method 3 of type task-manager-arena-fight-base
(defmethod inspect ((this task-manager-arena-fight-base))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tmarauder[16] @ #x~X~%" (-> this marauder))
  (format #t "~2Tlast-count: ~D~%" (-> this last-count))
  (format #t "~2Tcount-alive: ~D~%" (-> this count-alive))
  (format #t "~2Tentity: ~A~%" (-> this entity))
  (format #t "~2Tcheck-timer: ~D~%" (-> this check-timer))
  (format #t "~2Tnext-spawn: ~D~%" (-> this next-spawn))
  (format #t "~2Tcount: ~D~%" (-> this count))
  (format #t "~2Tangle: ~D~%" (-> this angle))
  (format #t "~2Tdark: ~A~%" (-> this dark))
  (format #t "~2Tarrow-h: ~D~%" (-> this arrow-h))
  (format #t "~2Tsnd-id: ~D~%" (-> this snd-id))
  (format #t "~2Tcrowd-intensity: ~f~%" (-> this crowd-intensity))
  (format #t "~2Tnext-go-down: ~D~%" (-> this next-go-down))
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Tplatform[4] @ #x~X~%" (-> this platform))
  (format #t "~2Tgui-id: ~D~%" (-> this gui-id))
  (format #t "~2Tcrate-h[3] @ #x~X~%" (-> this crate-h))
  (format #t "~2Tdarkbomb: ~A~%" (-> this darkbomb))
  (label cfg-7)
  this
  )

;; definition for method 36 of type task-manager-arena-fight-base
;; INFO: Used lq/sq
(defmethod spawn-crate ((this task-manager-arena-fight-base) (arg0 vector) (arg1 quaternion) (arg2 pickup-type))
  (let ((s4-0
          (new 'static 'fact-info :pickup-type (pickup-type ammo-red) :pickup-amount 50.0 :pickup-spawn-amount 20.0)
          )
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s4-0 pickup-type) arg2)
    (set! (-> s5-0 quad) (-> arg0 quad))
    (let* ((s4-1 (ppointer->process (process-spawn crate #f s5-0 'wood s4-0 :name "crate" :to *entity-pool*)))
           (s5-1 (if (type? s4-1 process-focusable)
                     s4-1
                     )
                 )
           )
      (quaternion-copy! (-> (the-as process-focusable s5-1) root quat) arg1)
      (let ((v0-5 (process->handle s5-1)))
        (b! #t cfg-13 :delay (nop!))
        (the-as none 0)
        (set! v0-5 (the-as handle #f))
        (label cfg-13)
        v0-5
        )
      )
    )
  )

;; definition for method 30 of type task-manager-arena-fight-base
;; WARN: disable def twice: 66. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod taskman-event-handler ((this task-manager-arena-fight-base) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('killed)
     (let ((s5-0 (process->handle arg0)))
       (dotimes (s4-0 16)
         (when (= (-> this marauder s4-0 handle) s5-0)
           (set! (-> this marauder s4-0 handle) (the-as handle #f))
           (set! (-> this last-count) (-> this count))
           (+! (-> this count) -1)
           (+! (-> this crowd-intensity) 10.0)
           (if *crowd-manager*
               (send-event (ppointer->process *crowd-manager*) 'intensity #x3f800000)
               )
           )
         )
       )
     #f
     )
    (('notify)
     (case (-> arg3 param 0)
       (('attack)
        (when (= (-> arg3 param 1) 20)
          (let ((v0-1 (the-as object #t)))
            (set! (-> this darkbomb) (the-as symbol v0-1))
            v0-1
            )
          )
        )
       )
     )
    (else
      ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 34 of type task-manager-arena-fight-base
;; WARN: Return type mismatch int vs none.
(defmethod task-manager-arena-fight-base-method-34 ((this task-manager-arena-fight-base))
  0
  (none)
  )

;; definition for method 35 of type task-manager-arena-fight-base
;; WARN: Return type mismatch float vs none.
(defmethod task-manager-arena-fight-base-method-35 ((this task-manager-arena-fight-base) (arg0 text-id))
  (when (= (get-status *gui-control* (-> this gui-id)) (gui-status active))
    (let ((s5-1
            (new 'stack 'font-context *font-default-matrix* 32 290 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (set! (-> s5-1 flags) (font-flags shadow kerning middle middle-vert large))
      (let ((v1-4 s5-1))
        (set! (-> v1-4 width) (the float 440))
        )
      (let ((v1-5 s5-1))
        (set! (-> v1-5 height) (the float 80))
        )
      (let ((v1-6 s5-1))
        (set! (-> v1-6 scale) 0.8)
        )
      (let ((s4-0 print-game-text))
        (format (clear *temp-string*) (lookup-text! *common-text* arg0 #f))
        (s4-0 *temp-string* s5-1 #f 44 (bucket-id hud-draw-hud-alpha))
        )
      )
    )
  (none)
  )

;; definition for method 33 of type task-manager-arena-fight-base
;; WARN: Return type mismatch float vs none.
(defmethod task-manager-arena-fight-base-method-33 ((this task-manager-arena-fight-base))
  (set! (-> this count-alive) (the-as uint 0))
  (dotimes (v1-0 16)
    (when (!= (-> this marauder v1-0 handle) #f)
      (if (not (handle->process (-> this marauder v1-0 handle)))
          (set! (-> this marauder v1-0 handle) (the-as handle #f))
          (+! (-> this count-alive) 1)
          )
      )
    )
  (cond
    ((zero? (-> this count))
     (when (-> this hud-counter)
       (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
       (set! (-> this hud-counter) (the-as handle #f))
       )
     )
    (else
      (set! (-> *game-info* counter) (the float (-> this count)))
      )
    )
  (none)
  )

;; definition for method 32 of type task-manager-arena-fight-base
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
;; WARN: new jak 2 until loop case, check carefully
(defmethod spawn-marauder ((this task-manager-arena-fight-base)
                          (arg0 vector)
                          (arg1 quaternion)
                          (arg2 actor-id)
                          (arg3 symbol)
                          (arg4 symbol)
                          )
  (let ((s5-0 (new 'stack-no-clear 'marauder-init-by-other-params)))
    (set! (-> s5-0 trans quad) (-> arg0 quad))
    (quaternion-copy! (-> s5-0 quat) arg1)
    (set! (-> s5-0 entity) #f)
    (set! (-> s5-0 directed?) #f)
    (set! (-> s5-0 no-initial-move-to-ground?) #t)
    (set! (-> s5-0 multi-focus) arg3)
    (set! (-> s5-0 skip-jump) arg4)
    (let* ((s5-1 (ppointer->process (process-spawn marauder this s5-0 :name "marauder" :to this)))
           (s4-1 (entity-nav-mesh-by-aid arg2))
           (v1-6 (if (type? s4-1 entity-nav-mesh)
                     s4-1
                     )
                 )
           )
      (when s5-1
        (let ((a0-10 0))
          (until #f
            (when (= (-> this marauder a0-10 handle) #f)
              (set! (-> this marauder a0-10 handle) (process->handle s5-1))
              (+! (-> this count-alive) 1)
              (goto cfg-20)
              )
            (if (= a0-10 15)
                (goto cfg-20)
                )
            (+! a0-10 1)
            )
          )
        #f
        (label cfg-20)
        (when v1-6
          (change-to (-> v1-6 nav-mesh) (the-as process-drawable s5-1))
          (let ((v1-10 (-> (the-as process-drawable s5-1) nav state)))
            (set! (-> v1-10 current-poly) (the-as nav-poly #f))
            )
          0
          )
        )
      )
    )
  0
  (none)
  )

;; definition of type task-manager-arena-gun-training
(deftype task-manager-arena-gun-training (task-manager)
  ((gui-id   sound-id)
   (text-id  text-id)
   )
  (:methods
    (print-text (_type_ text-id) none)
    )
  )

;; definition for method 3 of type task-manager-arena-gun-training
(defmethod inspect ((this task-manager-arena-gun-training))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tgui-id: ~D~%" (-> this gui-id))
  (format #t "~2Ttext-id: ~D~%" (-> this text-id))
  (label cfg-4)
  this
  )

;; definition for method 32 of type task-manager-arena-gun-training
;; WARN: Return type mismatch float vs none.
(defmethod print-text ((this task-manager-arena-gun-training) (arg0 text-id))
  (when (= (get-status *gui-control* (-> this gui-id)) (gui-status active))
    (let ((s5-1
            (new 'stack 'font-context *font-default-matrix* 32 290 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (set! (-> s5-1 flags) (font-flags shadow kerning middle-vert large))
      (let ((v1-4 s5-1))
        (set! (-> v1-4 width) (the float 440))
        )
      (let ((v1-5 s5-1))
        (set! (-> v1-5 height) (the float 80))
        )
      (let ((v1-6 s5-1))
        (set! (-> v1-6 scale) 0.7)
        )
      (let ((s4-0 print-game-text))
        (format (clear *temp-string*) (lookup-text! *common-text* arg0 #f))
        (s4-0 *temp-string* s5-1 #f 44 (bucket-id hud-draw-hud-alpha))
        )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-arena-gun-training)
  :virtual #t
  :parent (task-manager-arena-gun-training active)
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (remove-setting! 'change-gun)
    )
  :code (behavior ()
    (let ((gp-0 (entity-by-name "wstd-arena-plat-10")))
      (when gp-0
        (send-event (-> gp-0 extra process) 'wait)
        (send-event (-> gp-0 extra process) 'go-pos 0)
        )
      )
    (let ((v1-10 (entity-by-name "wstd-blocker-1")))
      (if v1-10
          (send-event (-> v1-10 extra process) 'on)
          )
      )
    (until (process-grab? *target* #f)
      (suspend)
      )
    (let ((gp-1 (-> *game-info* gun-type)))
      (set-setting! 'change-gun #t 0.0 0)
      (let ((s5-0 (current-time)))
        (until (time-elapsed? s5-0 (seconds 5))
          (suspend)
          )
        )
      (set! (-> self gui-id)
            (add-process *gui-control* self (gui-channel message) (gui-action play) (-> self name) 81920.0 0)
            )
      (until (!= gp-1 (-> *game-info* gun-type))
        (print-text self (-> self text-id))
        (suspend)
        )
      )
    (send-event *target* 'end-mode 'grab)
    (let ((v1-33 (entity-by-name "wstd-blocker-1")))
      (if v1-33
          (send-event (-> v1-33 extra process) 'off)
          )
      )
    (let ((gp-2 (current-time)))
      (until (time-elapsed? gp-2 (seconds 2))
        (print-text self (-> self text-id))
        (suspend)
        )
      )
    (send-event self 'complete)
    (until #f
      (suspend)
      )
    #f
    )
  )

;; definition for method 21 of type task-manager-arena-gun-training
;; WARN: Return type mismatch int vs none.
(defmethod set-time-limit ((this task-manager-arena-gun-training))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this text-id) (text-id text-0131))
  (none)
  )

;; definition of type task-manager-arena-gun-training-blue
(deftype task-manager-arena-gun-training-blue (task-manager-arena-gun-training)
  ((pad  uint8  8)
   )
  )

;; definition for method 3 of type task-manager-arena-gun-training-blue
(defmethod inspect ((this task-manager-arena-gun-training-blue))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager-arena-gun-training inspect)))
    (t9-0 this)
    )
  (format #t "~2Tgui-id: ~D~%" (-> this gui-id))
  (format #t "~2Ttext-id: ~D~%" (-> this text-id))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate active (task-manager-arena-gun-training-blue)
  :virtual #t
  :parent (task-manager-arena-gun-training-blue active)
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (remove-setting! 'change-gun)
    )
  :code (behavior ()
    (let ((gp-0 (entity-by-name "wstd-arena-plat-10")))
      (when gp-0
        (send-event (-> gp-0 extra process) 'wait)
        (send-event (-> gp-0 extra process) 'go-pos 1)
        )
      )
    (let ((gp-1 (entity-by-name "wstd-arena-plat-11")))
      (when gp-1
        (send-event (-> gp-1 extra process) 'wait)
        (send-event (-> gp-1 extra process) 'go-pos 1)
        )
      )
    (let ((v1-22 (entity-by-name "wstd-blocker-1")))
      (if v1-22
          (send-event (-> v1-22 extra process) 'on)
          )
      )
    (let ((gp-2 32))
      (set-setting! 'change-gun #t 0.0 0)
      (let ((s5-0 (current-time)))
        (until (time-elapsed? s5-0 (seconds 5))
          (suspend)
          )
        )
      (set! (-> self gui-id)
            (add-process *gui-control* self (gui-channel message) (gui-action play) (-> self name) 81920.0 0)
            )
      (until (= gp-2 (-> *game-info* gun-type))
        (print-text self (-> self text-id))
        (suspend)
        )
      )
    (let ((v1-38 (entity-by-name "wstd-blocker-1")))
      (if v1-38
          (send-event (-> v1-38 extra process) 'off)
          )
      )
    (let ((gp-3 (current-time)))
      (until (time-elapsed? gp-3 (seconds 2))
        (print-text self (-> self text-id))
        (suspend)
        )
      )
    (send-event self 'complete)
    (until #f
      (suspend)
      )
    #f
    )
  )

;; definition for method 21 of type task-manager-arena-gun-training-blue
;; WARN: Return type mismatch int vs none.
(defmethod set-time-limit ((this task-manager-arena-gun-training-blue))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this text-id) (text-id text-058c))
  (none)
  )

;; definition of type task-manager-arena-fight
(deftype task-manager-arena-fight (task-manager-arena-fight-base)
  ((display-fire  symbol)
   )
  (:state-methods
    go-down
    throne
    )
  (:methods
    (task-manager-arena-fight-method-39 (_type_) none)
    )
  )

;; definition for method 3 of type task-manager-arena-fight
(defmethod inspect ((this task-manager-arena-fight))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager-arena-fight-base inspect)))
    (t9-0 this)
    )
  (format #t "~2Tdisplay-fire: ~A~%" (-> this display-fire))
  (label cfg-4)
  this
  )

;; definition for method 34 of type task-manager-arena-fight
(defmethod task-manager-arena-fight-base-method-34 ((this task-manager-arena-fight))
  (seek! (-> this crowd-intensity) 0.0 (* 5.0 (seconds-per-frame)))
  (when (cpad-pressed? 0 r1)
    (set! (-> this display-fire) #f)
    (set-action!
      *gui-control*
      (gui-action stop)
      (-> this gui-id)
      (gui-channel none)
      (gui-action none)
      (the-as string #f)
      (the-as (function gui-connection symbol) #f)
      (the-as process #f)
      )
    )
  (if (-> this display-fire)
      (task-manager-arena-fight-base-method-35 this (text-id text-012c))
      )
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-arena-fight)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    )
  )

;; failed to figure out what this is:
(defstate go-down (task-manager-arena-fight)
  :virtual #t
  :parent (task-manager-arena-fight active)
  :enter (behavior ()
    (let* ((s5-0 (handle->process (-> self platform 0)))
           (gp-0 (if (type? s5-0 wstd-fight-plat)
                     s5-0
                     )
                 )
           )
      (new 'stack-no-clear 'vector)
      (let ((s5-1 (new 'stack-no-clear 'vector)))
        0.0
        0.0
        (let ((s4-0 0))
          (when gp-0
            (send-event gp-0 'go-down 16384.0)
            (dotimes (s3-0 16)
              (when (-> self marauder s3-0 handle)
                (let ((s2-0 (-> self marauder s3-0 handle process 0)))
                  (when s2-0
                    (let ((v1-18 s4-0))
                      (cond
                        ((zero? v1-18)
                         (matrix->trans (-> (the-as process-drawable gp-0) node-list data 4 bone transform) s5-1)
                         )
                        ((= v1-18 1)
                         (matrix->trans (-> (the-as process-drawable gp-0) node-list data 5 bone transform) s5-1)
                         )
                        ((= v1-18 2)
                         (matrix->trans (-> (the-as process-drawable gp-0) node-list data 6 bone transform) s5-1)
                         )
                        ((= v1-18 3)
                         (matrix->trans (-> (the-as process-drawable gp-0) node-list data 7 bone transform) s5-1)
                         )
                        )
                      )
                    (send-event s2-0 'save s5-1)
                    (+! s4-0 1)
                    (if (= s4-0 4)
                        (set! s4-0 0)
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  :exit (behavior ()
    (let ((gp-0 (handle->process (-> self platform 0))))
      (when (if (type? gp-0 wstd-fight-plat)
                gp-0
                )
        (dotimes (gp-1 16)
          (if (handle->process (-> self marauder gp-1 handle))
              (send-event (handle->process (-> self marauder gp-1 handle)) 'stop-save)
              )
          )
        )
      )
    )
  :trans (behavior ()
    (task-manager-arena-fight-base-method-33 self)
    (task-manager-arena-fight-base-method-34 self)
    (if (and (zero? (-> self count-alive)) (zero? (-> self count)))
        (task-node-close! (game-task-node arena-fight-1-fight) 'event)
        )
    (when (>= (the-as uint 5) (-> self count))
      (set! (-> self display-fire) #f)
      (persist-with-delay *setting-control* 'gun (seconds 0.1) 'gun #f 0.0 0)
      (persist-with-delay *setting-control* 'board (seconds 0.1) 'board #f 0.0 0)
      (when (and *target* (not (logtest? (focus-status dark) (-> *target* focus-status))))
        (send-event *target* 'change-mode 'darkjak #f (darkjak-stage force-on active))
        (send-event (ppointer->process *crowd-manager*) 'darkjak)
        )
      )
    )
  :code (behavior ()
    (suspend)
    (let ((gp-0 (handle->process (-> self platform 0))))
      (if (type? gp-0 wstd-fight-plat)
          (empty)
          )
      )
    (while (send-event (handle->process (-> self platform 0)) 'is-down?)
      (suspend)
      )
    (set! (-> self next-go-down) (+ (current-time) (seconds 15)))
    (go-virtual active)
    )
  )

;; failed to figure out what this is:
(defstate throne (task-manager-arena-fight)
  :virtual #t
  :parent (task-manager-arena-fight active)
  :enter (behavior ()
    (task-node-close! (game-task-node arena-fight-1-fight) 'event)
    (let ((gp-0 (entity-by-name "wstd-arena-plat-10")))
      (when gp-0
        (send-event (-> gp-0 extra process) 'show)
        (send-event (-> gp-0 extra process) 'go-pos 0)
        )
      )
    (when (-> self hud-counter)
      (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
      (set! (-> self hud-counter) (the-as handle #f))
      )
    (let ((gp-1 (new 'stack-no-clear 'task-arrow-params)))
      (let ((a0-11 (new 'static 'vector :x 9527214.0 :y 196812.8 :z -1693368.4 :w 1.0)))
        (set! (-> gp-1 pos quad) (-> a0-11 quad))
        )
      (quaternion-identity! (-> gp-1 quat))
      (set! (-> gp-1 flags) (task-arrow-flags))
      (set! (-> gp-1 map-icon) (the-as uint 13))
      (set! (-> self arrow-h) (process->handle (task-arrow-spawn gp-1 self)))
      )
    )
  :trans (behavior ()
    (task-manager-arena-fight-base-method-34 self)
    )
  :code (behavior ()
    (remove-setting! 'music)
    (let ((gp-0 (new 'static 'vector :x 9527214.0 :y 196812.8 :z -1693368.4 :w 1.0)))
      (until (< (vector-vector-distance gp-0 (target-pos 0)) 12288.0)
        (persist-with-delay *setting-control* 'gun (seconds 0.1) 'gun #f 0.0 0)
        (persist-with-delay *setting-control* 'board (seconds 0.1) 'board #f 0.0 0)
        (if (and *target* (not (logtest? (focus-status dark) (-> *target* focus-status))))
            (send-event *target* 'change-mode 'darkjak #f (darkjak-stage force-on active))
            )
        (suspend)
        )
      )
    (until (process-grab? *target* #f)
      (suspend)
      )
    (send-event (handle->process (-> self arrow-h)) 'leave)
    (send-event *target* 'end-mode 'darkjak)
    (send-event *target* 'end-mode 'grab)
    (let ((gp-1 (current-time)))
      (until (time-elapsed? gp-1 (seconds 2))
        (suspend)
        )
      )
    (go-virtual complete)
    )
  )

;; definition for method 26 of type task-manager-arena-fight
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-arena-fight))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (task-manager-arena-fight-base-method-33 this)
  (task-manager-arena-fight-base-method-34 this)
  (cond
    ((or (task-node-closed? (game-task-node arena-fight-1-fight))
         (and (zero? (-> this count-alive)) (zero? (-> this count)))
         )
     (task-node-close! (game-task-node arena-fight-1-fight) 'event)
     (go (method-of-object this throne))
     )
    (else
      (if (and (not (task-node-closed? (game-task-node arena-fight-1-fight))) (< (-> this next-go-down) (current-time)))
          (go (method-of-object this go-down))
          )
      (when (and (< (-> this next-spawn) (current-time))
                 (> (- (-> this count) (-> this count-alive)) 0)
                 (< (-> this count-alive) (+ (/ (- 20 (the-as int (-> this count))) (the-as uint 6)) 2))
                 )
        (let* ((s5-0 (handle->process (-> this platform 0)))
               (s3-0 (if (type? s5-0 wstd-fight-plat)
                         (the-as wstd-fight-plat s5-0)
                         )
                     )
               (s5-1
                 (vector-rotate-around-y! (new 'stack-no-clear 'vector) *x-vector* (* 16384.0 (the float (-> this angle))))
                 )
               (s4-0 (new 'stack-no-clear 'quaternion))
               )
          (when s3-0
            (vector-orient-by-quat! s5-1 s5-1 (-> s3-0 root quat))
            (quaternion-look-at! s4-0 (vector-normalize-copy! (new 'stack-no-clear 'vector) s5-1 -1.0) *up-vector*)
            (vector-normalize! s5-1 135168.0)
            (vector+! s5-1 s5-1 (-> s3-0 root trans))
            (+! (-> s5-1 y) 32768.0)
            (when (send-event (handle->process (-> s3-0 door (-> this angle))) 'open)
              (spawn-marauder this s5-1 s4-0 (the-as actor-id #xab7e) #t #f)
              (set! (-> this next-spawn) (+ (current-time) (seconds 1)))
              (+! (-> this angle) 1)
              (when (= (-> this angle) 4)
                (set! (-> this angle) (the-as uint 0))
                0
                )
              )
            )
          )
        )
      (when (>= (the-as uint 5) (-> this count))
        (set! (-> this display-fire) #f)
        (persist-with-delay *setting-control* 'gun (seconds 0.1) 'gun #f 0.0 0)
        (persist-with-delay *setting-control* 'board (seconds 0.1) 'board #f 0.0 0)
        (if (and *target* (not (logtest? (focus-status dark) (-> *target* focus-status))))
            (send-event *target* 'change-mode 'darkjak #f (darkjak-stage force-on active))
            )
        )
      )
    )
  (none)
  )

;; definition for method 25 of type task-manager-arena-fight
(defmethod task-manager-method-25 ((this task-manager-arena-fight))
  (let ((t9-0 (method-of-type task-manager task-manager-method-25)))
    (t9-0 this)
    )
  (remove-setting! 'features)
  (if *crowd-manager*
      (send-event (ppointer->process *crowd-manager*) 'intensity 0)
      )
  (when (-> this hud-counter)
    (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
    (set! (-> this hud-counter) (the-as handle #f))
    )
  (when (nonzero? (-> this platform 0))
    (let ((a0-11 (handle->process (-> this platform 0))))
      (if a0-11
          (deactivate a0-11)
          )
      )
    )
  (none)
  )

;; definition for method 21 of type task-manager-arena-fight
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod set-time-limit ((this task-manager-arena-fight))
  (local-vars (sv-16 res-tag))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (let ((a0-3 (entity-by-name "arena-fight-1")))
    (when a0-3
      (set! (-> this entity) (the-as entity-actor a0-3))
      (set! sv-16 (new 'static 'res-tag))
      (let ((v1-3 (res-lump-data a0-3 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v1-3 (nonzero? (-> sv-16 elt-count)))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v1-3))
           )
          (else
            (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
            )
          )
        )
      )
    )
  (let ((t1-1 (shl 3072 32)))
    (set-setting! 'features 'clear (shr t1-1 32) t1-1)
    )
  (set! (-> this display-fire) #t)
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel message) (gui-action play) (-> this name) 81920.0 0)
        )
  (set! (-> this angle) (the-as uint 0))
  (set! (-> this dark) #f)
  (set! (-> this next-go-down) (+ (current-time) (seconds 15)))
  (cond
    ((task-node-closed? (game-task-node arena-fight-1-throne))
     (go (method-of-object this throne))
     )
    (else
      (set! (-> this count) (the-as uint 20))
      (set-setting! 'music 'arenafi 0.0 0)
      (set-setting! 'extra-bank '((wascity1 wasstad4)) 0.0 0)
      (talker-spawn-func (-> *talker-speech* 81) *entity-pool* (target-pos 0) (the-as region #f))
      (dotimes (v1-23 16)
        (set! (-> this marauder v1-23 handle) (the-as handle #f))
        (set! (-> this marauder v1-23 vis-point) -1)
        )
      (set! (-> this platform 0)
            (ppointer->handle (process-spawn
                                wstd-fight-plat
                                (new 'static 'vector :x 9515008.0 :y 51814.4 :z -1835008.0 :w 1.0)
                                -1
                                0
                                0
                                :name "wstd-fight-plat"
                                :to this
                                )
                              )
            )
      (cond
        ((task-node-closed? (game-task-node arena-fight-1-fight))
         (set! (-> this display-fire) #f)
         (set! (-> this hud-counter) (the-as handle #f))
         )
        (else
          (set! (-> this hud-counter)
                (ppointer->handle (process-spawn hud-marauder :init hud-init-by-other :name "hud-marauder" :to this))
                )
          )
        )
      )
    )
  (none)
  )

;; definition of type task-manager-arena-fight-2
(deftype task-manager-arena-fight-2 (task-manager-arena-fight-base)
  ((play-hint      symbol)
   (hint-time      time-frame)
   (dj-train-time  time-frame)
   (dj-train       uint32)
   )
  (:state-methods
    go-down
    done
    wait-start
    )
  )

;; definition for method 3 of type task-manager-arena-fight-2
(defmethod inspect ((this task-manager-arena-fight-2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager-arena-fight-base inspect)))
    (t9-0 this)
    )
  (format #t "~2Tplay-hint: ~A~%" (-> this play-hint))
  (format #t "~2Thint-time: ~D~%" (-> this hint-time))
  (format #t "~2Tdj-train-time: ~D~%" (-> this dj-train-time))
  (format #t "~2Tdj-train: ~D~%" (-> this dj-train))
  (label cfg-4)
  this
  )

;; definition for method 34 of type task-manager-arena-fight-2
;; WARN: Return type mismatch float vs none.
(defmethod task-manager-arena-fight-base-method-34 ((this task-manager-arena-fight-2))
  (seek! (-> this crowd-intensity) 0.0 (* 5.0 (seconds-per-frame)))
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-arena-fight-2)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    )
  )

;; failed to figure out what this is:
(defstate wait-start (task-manager-arena-fight-2)
  :virtual #t
  :exit (behavior ()
    (set! (-> self play-hint) #t)
    (set-time! (-> self hint-time))
    (set-setting! 'music 'arenafi 0.0 0)
    (case (-> self node-info task)
      (((game-task arena-fight-2))
       (set-setting! 'extra-bank '((wascity1 wasstad6) (wasstad2 wasstad5) (wasstad3 wasstad5)) 0.0 0)
       )
      (else
        (set-setting! 'extra-bank '((wascity1 wasstad4)) 0.0 0)
        )
      )
    (set! (-> self hud-counter)
          (ppointer->handle (process-spawn hud-marauder :init hud-init-by-other :name "hud-marauder" :to self))
          )
    (set! (-> self next-go-down) (+ (current-time) (seconds 15)))
    )
  :code (behavior ()
    (until #f
      (if (not (handle->process (-> self arrow-h)))
          (go-virtual active)
          )
      (let ((gp-0 (-> self arrow-h process 0))
            (s5-0 #f)
            )
        (dotimes (v1-9 3)
          (set! s5-0 (cond
                       ((handle->process (-> self crate-h v1-9))
                        (let ((a0-13 (-> self crate-h v1-9 process 0)))
                          (if (or (not a0-13) (and (-> a0-13 next-state) (= (-> a0-13 next-state name) 'die)))
                              (set! s5-0 #t)
                              )
                          )
                        s5-0
                        )
                       (else
                         #t
                         )
                       )
                )
          )
        (set! s5-0
              (and (< (vector-vector-distance (-> (the-as process-drawable gp-0) root trans) (target-pos 0)) 12288.0) s5-0)
              )
        (when s5-0
          (send-event gp-0 'leave)
          (set-setting! 'airlock #f 0.0 0)
          (let ((v1-20 (entity-by-name "wstd-arena-plat-10")))
            (if v1-20
                (send-event (-> v1-20 extra process) 'hide)
                )
            )
          (let ((v1-22 (entity-by-name "wstd-arena-plat-11")))
            (if v1-22
                (send-event (-> v1-22 extra process) 'hide)
                )
            )
          )
        )
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate go-down (task-manager-arena-fight-2)
  :virtual #t
  :parent (task-manager-arena-fight-2 active)
  :enter (behavior ()
    (let* ((s5-0 (handle->process (-> self platform 0)))
           (gp-0 (if (type? s5-0 wstd-fight-plat)
                     (the-as wstd-fight-plat s5-0)
                     )
                 )
           )
      (new 'stack-no-clear 'vector)
      (let ((s5-1 (new 'stack-no-clear 'vector)))
        0.0
        0.0
        (let ((s4-0 0))
          (when gp-0
            (send-event gp-0 'go-down)
            (dotimes (s3-0 16)
              (when (-> self marauder s3-0 handle)
                (let ((s2-0 (-> self marauder s3-0 handle process 0)))
                  (when s2-0
                    (let ((v1-16 s4-0))
                      (cond
                        ((zero? v1-16)
                         (matrix->trans (-> gp-0 node-list data 4 bone transform) s5-1)
                         )
                        ((= v1-16 1)
                         (matrix->trans (-> gp-0 node-list data 5 bone transform) s5-1)
                         )
                        ((= v1-16 2)
                         (matrix->trans (-> gp-0 node-list data 6 bone transform) s5-1)
                         )
                        ((= v1-16 3)
                         (matrix->trans (-> gp-0 node-list data 7 bone transform) s5-1)
                         )
                        )
                      )
                    (send-event s2-0 'save s5-1)
                    (+! s4-0 1)
                    (if (= s4-0 4)
                        (set! s4-0 0)
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  :exit (behavior ()
    (let ((gp-0 (handle->process (-> self platform 0))))
      (when (if (type? gp-0 wstd-fight-plat)
                gp-0
                )
        (dotimes (gp-1 16)
          (if (handle->process (-> self marauder gp-1 handle))
              (send-event (handle->process (-> self marauder gp-1 handle)) 'stop-save)
              )
          )
        )
      )
    )
  :trans (behavior ()
    (task-manager-arena-fight-base-method-34 self)
    (task-manager-arena-fight-base-method-33 self)
    )
  :code (behavior ()
    (suspend)
    (let ((gp-0 (handle->process (-> self platform 0))))
      (if (type? gp-0 wstd-fight-plat)
          (empty)
          )
      )
    (while (send-event (handle->process (-> self platform 0)) 'is-down?)
      (suspend)
      )
    (set! (-> self next-go-down) (+ (current-time) (seconds 15)))
    (go-virtual active)
    )
  )

;; failed to figure out what this is:
(defstate done (task-manager-arena-fight-2)
  :virtual #t
  :parent (task-manager-arena-fight-2 active)
  :enter (behavior ()
    (task-node-close! (game-task-node arena-fight-2-fight) 'event)
    (when (-> self hud-counter)
      (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
      (set! (-> self hud-counter) (the-as handle #f))
      )
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (let ((a0-6 (new 'static 'vector :x 9527214.0 :y 196812.8 :z -1693368.4 :w 1.0)))
        (set! (-> gp-0 pos quad) (-> a0-6 quad))
        )
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags taf8))
      (set! (-> gp-0 map-icon) (the-as uint 13))
      (set! (-> self arrow-h) (process->handle (task-arrow-spawn gp-0 self)))
      )
    )
  :exit #f
  :trans #f
  :code (behavior ()
    (suspend)
    (let ((v1-0 (entity-by-name "wstd-arena-plat-10")))
      (if v1-0
          (send-event (-> v1-0 extra process) 'show)
          )
      )
    (let ((v1-2 (entity-by-name "wstd-arena-plat-11")))
      (if v1-2
          (send-event (-> v1-2 extra process) 'show)
          )
      )
    (remove-setting! 'music)
    (let ((gp-0 (new 'static 'vector :x 9527214.0 :y 196812.8 :z -1693368.4 :w 1.0)))
      (until (< (vector-vector-distance gp-0 (target-pos 0)) 12288.0)
        (suspend)
        )
      )
    (until (process-grab? *target* #f)
      (suspend)
      )
    (send-event (handle->process (-> self arrow-h)) 'leave)
    (send-event *target* 'end-mode 'grab)
    (go-virtual complete)
    )
  )

;; definition for method 26 of type task-manager-arena-fight-2
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-arena-fight-2))
  (task-manager-arena-fight-base-method-34 this)
  (let ((t9-1 (method-of-type task-manager task-manager-method-26)))
    (t9-1 this)
    )
  (task-manager-arena-fight-base-method-33 this)
  (let ((v1-5 (-> this dj-train)))
    (cond
      ((zero? v1-5)
       (+! (-> this dj-train) 1)
       (set-time! (-> this dj-train-time))
       )
      ((= v1-5 1)
       (show-hud 'hud-health)
       (let ((s5-0
               (new 'stack 'font-context *font-default-matrix* 130 290 0.0 (font-color default) (font-flags shadow kerning))
               )
             )
         (set! (-> s5-0 flags) (font-flags shadow kerning middle-vert large))
         (let ((v1-12 s5-0))
           (set! (-> v1-12 width) (the float 350))
           )
         (let ((v1-13 s5-0))
           (set! (-> v1-13 height) (the float 80))
           )
         (let ((v1-14 s5-0))
           (set! (-> v1-14 scale) 0.7)
           )
         (let ((s4-0 print-game-text))
           (format (clear *temp-string*) (lookup-text! *common-text* (text-id text-0600) #f))
           (s4-0 *temp-string* s5-0 #f 44 (bucket-id hud-draw-hud-alpha))
           )
         )
       (if (time-elapsed? (-> this dj-train-time) (seconds 30))
           (set! (-> this dj-train) (the-as uint 3))
           )
       (when (and *target* (focus-test? *target* dark))
         (set-time! (-> this dj-train-time))
         (+! (-> this dj-train) 1)
         (send-event *target* 'get-notify this)
         )
       )
      ((= v1-5 2)
       (if (or (time-elapsed? (-> this dj-train-time) (seconds 30))
               (and *target* (not (logtest? (focus-status dark) (-> *target* focus-status))))
               )
           (set! (-> this dj-train) (the-as uint 3))
           )
       (show-hud 'hud-health)
       (let ((s5-1
               (new 'stack 'font-context *font-default-matrix* 130 290 0.0 (font-color default) (font-flags shadow kerning))
               )
             )
         (set! (-> s5-1 flags) (font-flags shadow kerning middle-vert large))
         (let ((v1-44 s5-1))
           (set! (-> v1-44 width) (the float 350))
           )
         (let ((v1-45 s5-1))
           (set! (-> v1-45 height) (the float 80))
           )
         (let ((v1-46 s5-1))
           (set! (-> v1-46 scale) 0.7)
           )
         (let ((s4-1 print-game-text))
           (format (clear *temp-string*) (lookup-text! *common-text* (text-id text-085a) #f))
           (s4-1 *temp-string* s5-1 #f 44 (bucket-id hud-draw-hud-alpha))
           )
         )
       (if (-> this darkbomb)
           (+! (-> this dj-train) 1)
           )
       )
      ((= v1-5 3)
       (+! (-> this dj-train) 1)
       (set-action!
         *gui-control*
         (gui-action stop)
         (-> this gui-id)
         (gui-channel none)
         (gui-action none)
         (the-as string #f)
         (the-as (function gui-connection symbol) #f)
         (the-as process #f)
         )
       (send-event *target* 'get-notify #f)
       )
      )
    )
  (when (and (time-elapsed? (-> this hint-time) (seconds 5)) (-> this play-hint) (kiosk?))
    (set! (-> this play-hint) #f)
    (talker-spawn-func (-> *talker-speech* 81) *entity-pool* (target-pos 0) (the-as region #f))
    )
  (when (and (< (-> this next-spawn) (current-time))
             (> (- (-> this count) (-> this count-alive)) 0)
             (< (-> this count-alive) (the-as uint 8))
             )
    (let ((s5-3 -1))
      0.0
      (let ((f30-0 0.0))
        (dotimes (s4-3 4)
          (let* ((s2-2 (handle->process (-> this platform s4-3)))
                 (s3-3 (if (type? s2-2 wstd-fight-plat)
                           (the-as wstd-fight-plat s2-2)
                           )
                       )
                 )
            (when (and s3-3 (not (send-event (handle->process (-> this platform s4-3)) 'is-down?)))
              (let ((f0-11 (vector-vector-distance (target-pos 0) (-> s3-3 root trans))))
                (when (or (= s5-3 -1) (< f0-11 f30-0))
                  (set! s5-3 s4-3)
                  (set! f30-0 f0-11)
                  )
                )
              )
            )
          )
        )
      (when (!= s5-3 -1)
        (let* ((s5-4 (handle->process (-> this platform s5-3)))
               (s3-4 (if (type? s5-4 wstd-fight-plat)
                         (the-as wstd-fight-plat s5-4)
                         )
                     )
               (s5-5 (new 'stack-no-clear 'vector))
               )
          (set! (-> s5-5 x) 0.0)
          (set! (-> s5-5 y) 32768.0)
          (set! (-> s5-5 z) -40960.0)
          (set! (-> s5-5 w) 1.0)
          (let ((s4-4 (new 'stack-no-clear 'quaternion)))
            (when (and s3-4 (< (-> this next-go-down) (current-time)) (> (-> this count) 0))
              (set! (-> this next-go-down) (+ (current-time) (seconds 20)))
              (send-event s3-4 'go-down 24576.0)
              (dotimes (s2-4 3)
                (when (handle->process (-> this crate-h s2-4))
                  (let ((a0-74 (-> (the-as (pointer crate) (-> this crate-h s2-4 process)) 0)))
                    (set! (-> a0-74 fact pickup-amount) 0.0)
                    (set! (-> a0-74 fact pickup-spawn-amount) 0.0)
                    (send-event a0-74 'die)
                    )
                  )
                )
              )
            (when (and s3-4 (-> s3-4 door) (send-event (handle->process (-> s3-4 door (-> this angle))) 'open))
              (let* ((s2-5 (handle->process (-> s3-4 door (-> this angle))))
                     (s3-5 (if (type? s2-5 process-drawable)
                               s2-5
                               )
                           )
                     )
                (when s3-5
                  (vector-orient-by-quat! s5-5 s5-5 (-> (the-as process-drawable s3-5) root quat))
                  (vector+! s5-5 s5-5 (-> (the-as process-drawable s3-5) root trans))
                  (quaternion-copy! s4-4 (-> (the-as process-drawable s3-5) root quat))
                  (spawn-marauder this s5-5 s4-4 (the-as actor-id #xb63b) #t #f)
                  (set! (-> this next-spawn) (+ (current-time) (seconds 1)))
                  )
                )
              )
            )
          )
        (+! (-> this angle) 1)
        (when (= (-> this angle) 4)
          (set! (-> this angle) (the-as uint 0))
          0
          )
        )
      )
    )
  (when (and (zero? (-> this count-alive)) (zero? (-> this count)))
    (let ((s5-6 #t))
      (dotimes (s4-5 4)
        (let ((s3-6 (handle->process (-> this platform s4-5))))
          (when (and (if (type? s3-6 wstd-fight-plat)
                         s3-6
                         )
                     (send-event (handle->process (-> this platform s4-5)) 'is-down?)
                     )
            (set! s5-6 #f)
            (send-event (handle->process (-> this platform s4-5)) 'go-up)
            )
          )
        )
      (if s5-6
          (go (method-of-object this done))
          )
      )
    )
  (none)
  )

;; definition for method 25 of type task-manager-arena-fight-2
;; WARN: Return type mismatch symbol vs none.
(defmethod task-manager-method-25 ((this task-manager-arena-fight-2))
  (let ((t9-0 (method-of-type task-manager task-manager-method-25)))
    (t9-0 this)
    )
  (when (-> this hud-counter)
    (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
    (set! (-> this hud-counter) (the-as handle #f))
    )
  (none)
  )

;; definition for method 21 of type task-manager-arena-fight-2
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod set-time-limit ((this task-manager-arena-fight-2))
  (local-vars (sv-16 res-tag))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this count) (the-as uint 30))
  (set! (-> this angle) (the-as uint 0))
  (set! (-> this gui-id) (new 'static 'sound-id))
  (set! (-> this dj-train) (the-as uint 0))
  (set! (-> this darkbomb) #f)
  (if (kiosk?)
      (talker-spawn-func (-> *talker-speech* 98) *entity-pool* (target-pos 0) (the-as region #f))
      )
  (dotimes (v1-5 16)
    (set! (-> this marauder v1-5 handle) (the-as handle #f))
    (set! (-> this marauder v1-5 vis-point) -1)
    )
  (let ((a0-8 (entity-by-name "arena-fight-1")))
    (when a0-8
      (set! (-> this entity) (the-as entity-actor a0-8))
      (set! sv-16 (new 'static 'res-tag))
      (let ((v1-10 (res-lump-data a0-8 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v1-10 (nonzero? (-> sv-16 elt-count)))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v1-10))
           )
          (else
            (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
            )
          )
        )
      )
    )
  (set! (-> this platform 0) (the-as handle #f))
  (set! (-> this platform 1) (the-as handle #f))
  (set! (-> this platform 2) (the-as handle #f))
  (set! (-> this platform 3) (the-as handle #f))
  (set! (-> this platform 0)
        (ppointer->handle
          (process-spawn
            wstd-fight-plat
            (new 'static 'vector :x 9416704.0 :y 51814.4 :z -1826816.0 :w 1.0)
            12
            -1082130432
            -968884224
            :name "wstd-fight-plat"
            :to this
            )
          )
        )
  (set! (-> this platform 1)
        (ppointer->handle
          (process-spawn
            wstd-fight-plat
            (new 'static 'vector :x 9633792.0 :y 51814.4 :z -1826816.0 :w 1.0)
            9
            #x3f800000
            -968884224
            :name "wstd-fight-plat"
            :to this
            )
          )
        )
  (set! (-> this platform 2)
        (ppointer->handle
          (process-spawn
            wstd-fight-plat
            (new 'static 'vector :x 9416704.0 :y 51814.4 :z -2043904.0 :w 1.0)
            6
            0
            -968884224
            :name "wstd-fight-plat"
            :to this
            )
          )
        )
  (set! (-> this platform 3)
        (ppointer->handle (process-spawn
                            wstd-fight-plat
                            (new 'static 'vector :x 9633792.0 :y 51814.4 :z -2043904.0 :w 1.0)
                            3
                            0
                            -968884224
                            :name "wstd-fight-plat"
                            :to this
                            )
                          )
        )
  (cond
    ((task-node-closed? (game-task-node arena-fight-2-fight))
     (let ((v1-33 (entity-by-name "wstd-arena-plat-10")))
       (if v1-33
           (send-event (-> v1-33 extra process) 'hide)
           )
       )
     (let ((v1-35 (entity-by-name "wstd-arena-plat-11")))
       (if v1-35
           (send-event (-> v1-35 extra process) 'hide)
           )
       )
     (go (method-of-object this done))
     )
    (else
      (let ((s5-6 (new 'stack-no-clear 'task-arrow-params)))
        (let ((a0-54 (new 'static 'vector :x 9419366.0 :y 47349.76 :z -1833369.6 :w 1.0)))
          (set! (-> s5-6 pos quad) (-> a0-54 quad))
          )
        (quaternion-identity! (-> s5-6 quat))
        (set! (-> s5-6 flags) (task-arrow-flags taf5 taf8))
        (set! (-> s5-6 map-icon) (the-as uint 13))
        (set! (-> this arrow-h) (process->handle (task-arrow-spawn s5-6 this)))
        )
      (let ((s5-7 (new 'static 'vector :x 9419366.0 :y 47349.76 :z -1833369.6 :w 1.0)))
        (set! (-> this crate-h 0)
              (spawn-crate
                this
                (vector+! (new 'stack-no-clear 'vector) s5-7 (new 'static 'vector :x 4915.2 :z 4915.2 :w 1.0))
                (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) *y-vector* 6189.511)
                (pickup-type eco-pill-dark)
                )
              )
        (set! (-> this crate-h 1)
              (spawn-crate
                this
                (vector+! (new 'stack-no-clear 'vector) s5-7 (new 'static 'vector :x 5734.4 :z -4505.6 :w 1.0))
                (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) *y-vector* 27852.8)
                (pickup-type eco-pill-dark)
                )
              )
        (set! (-> this crate-h 2)
              (spawn-crate
                this
                (vector+! (new 'stack-no-clear 'vector) s5-7 (new 'static 'vector :x -5324.8 :z -6963.2 :w 1.0))
                (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) *y-vector* -14745.6)
                (pickup-type eco-pill-dark)
                )
              )
        )
      (dotimes (v1-54 3)
        (let ((a0-73 (handle->process (-> this crate-h v1-54))))
          (set! (-> (the-as crate a0-73) fact pickup-amount) 20.0)
          (set! (-> (the-as crate a0-73) fact pickup-spawn-amount) 10.0)
          )
        )
      (go (method-of-object this wait-start))
      )
    )
  (none)
  )

;; definition of type task-manager-arena-fight-3
(deftype task-manager-arena-fight-3 (task-manager-arena-fight-2)
  ()
  )

;; definition for method 3 of type task-manager-arena-fight-3
(defmethod inspect ((this task-manager-arena-fight-3))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager-arena-fight-2 inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 26 of type task-manager-arena-fight-3
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-arena-fight-3))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (task-manager-arena-fight-base-method-34 this)
  (task-manager-arena-fight-base-method-33 this)
  (when (and (< (-> this next-spawn) (current-time))
             (> (- (-> this count) (-> this count-alive)) 0)
             (< (-> this count-alive) (the-as uint 12))
             )
    (let* ((s5-0 (handle->process (-> this platform 0)))
           (s3-0 (if (type? s5-0 wstd-fight-plat-large)
                     (the-as wstd-fight-plat-large s5-0)
                     )
                 )
           (s5-1 (new 'stack-no-clear 'vector))
           )
      (set! (-> s5-1 x) 0.0)
      (set! (-> s5-1 y) 32768.0)
      (set! (-> s5-1 z) -40960.0)
      (set! (-> s5-1 w) 1.0)
      (let ((s4-0 (new 'stack-no-clear 'quaternion)))
        (when (and s3-0 (< (-> this next-go-down) (current-time)) (> (-> this count) 0))
          (set! (-> this next-go-down) (+ (current-time) (seconds 50)))
          (send-event s3-0 'go-down 24576.0)
          (dotimes (s2-0 3)
            (when (handle->process (-> this crate-h s2-0))
              (let ((a0-22 (-> (the-as (pointer crate) (-> this crate-h s2-0 process)) 0)))
                (set! (-> a0-22 fact pickup-amount) 0.0)
                (set! (-> a0-22 fact pickup-spawn-amount) 0.0)
                (send-event a0-22 'die)
                )
              )
            )
          )
        (when (and s3-0
                   (-> s3-0 door)
                   (not (send-event s3-0 'is-down?))
                   (send-event (handle->process (-> s3-0 door (-> this angle))) 'open)
                   )
          (let* ((s2-1 (handle->process (-> s3-0 door (-> this angle))))
                 (s3-1 (if (type? s2-1 process-drawable)
                           (the-as process-drawable s2-1)
                           )
                       )
                 )
            (when s3-1
              (vector-orient-by-quat! s5-1 s5-1 (-> s3-1 root quat))
              (vector+! s5-1 s5-1 (-> s3-1 root trans))
              (quaternion-copy! s4-0 (-> s3-1 root quat))
              (spawn-marauder this s5-1 s4-0 (the-as actor-id #xc671) #f #t)
              (set! (-> this next-spawn) (+ (current-time) (seconds 1)))
              )
            )
          )
        )
      )
    (+! (-> this angle) 1)
    (when (= (-> this angle) 8)
      (set! (-> this angle) (the-as uint 0))
      0
      )
    )
  (when (and (zero? (-> this count-alive)) (zero? (-> this count)))
    (let ((s5-2 #t))
      (let ((s4-1 (handle->process (-> this platform 0))))
        (when (and (if (type? s4-1 wstd-fight-plat-large)
                       s4-1
                       )
                   (send-event (handle->process (-> this platform 0)) 'is-down?)
                   )
          (set! s5-2 #f)
          (send-event (handle->process (-> this platform 0)) 'go-up)
          )
        )
      (if s5-2
          (go (method-of-object this done))
          )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate done (task-manager-arena-fight-3)
  :virtual #t
  :parent (task-manager-arena-fight-3 active)
  :enter (behavior ()
    (send-event (handle->process (-> self platform 0)) 'end)
    (remove-setting! 'music)
    (task-node-close! (game-task-node arena-fight-3-fight) 'event)
    )
  :exit #f
  :trans #f
  :code (behavior ()
    (go-virtual complete)
    )
  )

;; failed to figure out what this is:
(defstate wait-start (task-manager-arena-fight-3)
  :virtual #t
  :enter (behavior ()
    '()
    )
  :trans (behavior ()
    (let ((gp-0 (entity-by-name "wstd-arena-plat-10")))
      (when gp-0
        (send-event (-> gp-0 extra process) 'wait)
        (send-event (-> gp-0 extra process) 'go-pos 1)
        )
      )
    (let ((gp-1 (entity-by-name "wstd-arena-plat-11")))
      (when gp-1
        (send-event (-> gp-1 extra process) 'wait)
        (send-event (-> gp-1 extra process) 'go-pos 1)
        )
      )
    (let ((gp-2 (new 'static 'vector :x 9526845.0 :y 196812.8 :z -1692794.9 :w 1.0)))
      (if (< 24576.0 (vector-vector-xz-distance gp-2 (target-pos 0)))
          (task-node-close! (game-task-node arena-fight-3-training) 'event)
          )
      )
    )
  )

;; definition for method 21 of type task-manager-arena-fight-3
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod set-time-limit ((this task-manager-arena-fight-3))
  (local-vars (sv-16 res-tag))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set! (-> this count) (the-as uint 30))
  (set! (-> this angle) (the-as uint 0))
  (if (kiosk?)
      (talker-spawn-func (-> *talker-speech* 98) *entity-pool* (target-pos 0) (the-as region #f))
      )
  (dotimes (v1-5 16)
    (set! (-> this marauder v1-5 handle) (the-as handle #f))
    (set! (-> this marauder v1-5 vis-point) -1)
    )
  (let ((a0-8 (entity-by-name "arena-fight-1")))
    (when a0-8
      (set! (-> this entity) (the-as entity-actor a0-8))
      (set! sv-16 (new 'static 'res-tag))
      (let ((v1-10 (res-lump-data a0-8 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v1-10 (nonzero? (-> sv-16 elt-count)))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v1-10))
           )
          (else
            (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
            )
          )
        )
      )
    )
  (set! (-> this platform 0)
        (ppointer->handle (process-spawn
                            wstd-fight-plat-large
                            (new 'static 'vector :x 9523200.0 :y 51814.4 :z -1929216.0 :w 1.0)
                            -1
                            -1.0
                            :name "wstd-fight-plat-large"
                            :to this
                            )
                          )
        )
  (cond
    ((task-node-closed? (game-task-node arena-fight-3-fight))
     (go (method-of-object this done))
     )
    (else
      (let ((s5-3 (new 'stack-no-clear 'task-arrow-params)))
        (let ((a0-24 (new 'static 'vector :x 9523200.0 :y 49152.0 :z -1929216.0 :w 1.0)))
          (set! (-> s5-3 pos quad) (-> a0-24 quad))
          )
        (quaternion-identity! (-> s5-3 quat))
        (set! (-> s5-3 flags) (task-arrow-flags taf5 taf8))
        (set! (-> s5-3 map-icon) (the-as uint 13))
        (set! (-> this arrow-h) (process->handle (task-arrow-spawn s5-3 this)))
        )
      (let ((s5-4 (new 'static 'vector :x 9523200.0 :y 49152.0 :z -1929216.0 :w 1.0)))
        (set! (-> this crate-h 0)
              (spawn-crate
                this
                (vector+! (new 'stack-no-clear 'vector) s5-4 (new 'static 'vector :x 4915.2 :z 4915.2 :w 1.0))
                (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) *y-vector* 6189.511)
                (pickup-type ammo-random)
                )
              )
        (set! (-> this crate-h 1)
              (spawn-crate
                this
                (vector+! (new 'stack-no-clear 'vector) s5-4 (new 'static 'vector :x 5734.4 :z -4505.6 :w 1.0))
                (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) *y-vector* 27852.8)
                (pickup-type ammo-random)
                )
              )
        (set! (-> this crate-h 2)
              (spawn-crate
                this
                (vector+! (new 'stack-no-clear 'vector) s5-4 (new 'static 'vector :x -5324.8 :z -6963.2 :w 1.0))
                (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) *y-vector* -14745.6)
                (pickup-type ammo-random)
                )
              )
        )
      (go (method-of-object this wait-start))
      )
    )
  (none)
  )
