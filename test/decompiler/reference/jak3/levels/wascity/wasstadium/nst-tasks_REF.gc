;;-*-Lisp-*-
(in-package goal)

;; definition for method 15 of type hud-nest-cocoons
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-nest-cocoons))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 462.0 (* 130.0 (-> this offset))))
    200
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -25 33)
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-nest-cocoons
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this hud-nest-cocoons))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type hud-nest-cocoons
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-nest-cocoons))
  (set! (-> this level) (level-get *level* 'nsta))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-center-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid) (the-as texture-id (get-texture hud-nest-cocoon-01 nsta-minimap)))
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 1.0)
  (set! (-> this strings 0 flags) (font-flags shadow kerning middle large))
  0
  (none)
  )

;; definition of type task-manager-nest-cocoons
(deftype task-manager-nest-cocoons (task-manager)
  ((vehicle-handle         handle)
   (cocoon-manager-entity  entity-actor)
   (cocoon-count           int32)
   (kill-cocoon-speech     int32)
   (minimap                connection-minimap)
   (actor-group            (pointer actor-group))
   (actor-group-count      int32)
   (tunnel                 basic)
   )
  (:methods
    (init-actor-group! (_type_) none)
    (task-manager-nest-cocoons-method-33 (_type_) none)
    (task-manager-nest-cocoons-method-34 (_type_) symbol)
    (task-manager-nest-cocoons-method-35 (_type_) none)
    )
  )

;; definition for method 3 of type task-manager-nest-cocoons
(defmethod inspect ((this task-manager-nest-cocoons))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tvehicle-handle: ~D~%" (-> this vehicle-handle))
  (format #t "~2Tcocoon-manager-entity: ~A~%" (-> this cocoon-manager-entity))
  (format #t "~2Tcocoon-count: ~D~%" (-> this cocoon-count))
  (format #t "~2Tkill-cocoon-speech: ~D~%" (-> this kill-cocoon-speech))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Ttunnel: ~A~%" (-> this tunnel))
  (label cfg-7)
  this
  )

;; definition for method 30 of type task-manager-nest-cocoons
(defmethod taskman-event-handler ((this task-manager-nest-cocoons) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('display-hud)
     (when (and (-> arg3 param 0) (not (handle->process (-> this hud-counter))))
       (set! (-> this hud-counter)
             (ppointer->handle (process-spawn hud-nest-cocoons :init hud-init-by-other :name "hud-nest-cocoons" :to this))
             )
       (let ((v1-12 (rand-vu-int-range 0 2)))
         (cond
           ((zero? v1-12)
            (talker-spawn-func (-> *nest-eggs-speech-list* 21) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-12 1)
            (talker-spawn-func (-> *nest-eggs-speech-list* 22) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-12 2)
            (talker-spawn-func (-> *nest-eggs-speech-list* 23) *entity-pool* (target-pos 0) (the-as region #f))
            )
           )
         )
       )
     #f
     )
    (else
      ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 26 of type task-manager-nest-cocoons
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-nest-cocoons))
  (set-nst-poison! (the-as mood-context 0))
  (cond
    ((= (status-of-level-and-borrows *level* 'nstb #f) 'active)
     (if (task-manager-nest-cocoons-method-34 this)
         (task-manager-nest-cocoons-method-33 this)
         (init-actor-group! this)
         )
     (if (and (not (handle->process (-> this hud-counter))) (task-node-closed? (game-task-node nest-eggs-tunnel)))
         (send-event this 'display-hud)
         )
     )
    (else
      (task-manager-nest-cocoons-method-35 this)
      )
    )
  (cond
    ((and (< 819200.0 (vector-vector-xz-distance (target-pos 0) (the-as vector (-> *minimap-class-list* 9))))
          (or (= (status-of-level-and-borrows *level* 'desert #f) 'active)
              (= (status-of-level-and-borrows *level* 'waswide #f) 'active)
              )
          )
     (if (not (-> this minimap))
         (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 9) (the-as int #f) (the-as vector #f) 0))
         )
     )
    ((-> this minimap)
     (logior! (-> this minimap flags) (minimap-flag fade-out))
     (set! (-> this minimap) #f)
     )
    )
  (when (and *target* (not (logtest? (focus-status teleporting) (-> *target* focus-status))))
    (let* ((s5-2 (handle->process (-> this vehicle-handle)))
           (a0-29 (if (type? s5-2 process-focusable)
                      s5-2
                      )
                  )
           )
      (if (and a0-29 (focus-test? (the-as process-focusable a0-29) dead))
          (send-event this 'fail)
          )
      )
    )
  (none)
  )

;; definition for method 33 of type task-manager-nest-cocoons
;; WARN: Return type mismatch int vs none.
(defmethod task-manager-nest-cocoons-method-33 ((this task-manager-nest-cocoons))
  (if (not (-> this cocoon-manager-entity))
      (init-actor-group! this)
      )
  (let ((s5-0 0))
    (when (> (-> this actor-group-count) 0)
      (let ((s4-0 0))
        (b! #t cfg-28 :delay (nop!))
        (label cfg-4)
        (when (-> this actor-group 0 data s4-0 actor)
          (let* ((s2-0 (-> this actor-group 0 data s4-0 actor))
                 (s3-0 (res-lump-value s2-0 'mode uint128 :time -1000000000.0))
                 (a0-6 (res-lump-value s2-0 'extra-id uint128 :default (the-as uint128 -1) :time -1000000000.0))
                 (a1-2 s2-0)
                 (v1-16 (if a1-2
                            (-> a1-2 extra process)
                            )
                        )
                 )
            (b! (logtest? (-> s2-0 extra perm status) (entity-perm-status subtask-complete)) cfg-14 :delay (nop!))
            (+! s5-0 1)
            (if (and (>= (the-as int a0-6) 0) (= (the-as uint s3-0) *nstb-light-mode*))
                (set-nstb-lights! (the-as int a0-6) 1.0 2.0 #t)
                )
            (b! #t cfg-27 :delay (nop!))
            (label cfg-14)
            (if (and (>= (the-as int a0-6) 0)
                     (= (the-as uint s3-0) *nstb-light-mode*)
                     (or (not v1-16) (not (and (-> v1-16 next-state) (= (-> v1-16 next-state name) 'die))))
                     )
                (set-nstb-lights! (the-as int a0-6) 0.0 2.0 #t)
                )
            )
          )
        (label cfg-27)
        (+! s4-0 1)
        (label cfg-28)
        (b! (< s4-0 (-> this actor-group 0 length)) cfg-4)
        )
      )
    (when (< s5-0 (-> this cocoon-count))
      (set! (-> this kill-cocoon-speech) (mod (+ (-> this kill-cocoon-speech) (rand-vu-int-range 1 4)) 9))
      (let ((v1-37 (-> this kill-cocoon-speech)))
        (cond
          ((zero? v1-37)
           (talker-spawn-func (-> *nest-eggs-speech-list* 28) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 1)
           (talker-spawn-func (-> *nest-eggs-speech-list* 29) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 2)
           (talker-spawn-func (-> *nest-eggs-speech-list* 30) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 3)
           (talker-spawn-func (-> *nest-eggs-speech-list* 31) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 4)
           (talker-spawn-func (-> *nest-eggs-speech-list* 32) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 5)
           (talker-spawn-func (-> *nest-eggs-speech-list* 33) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 6)
           (talker-spawn-func (-> *nest-eggs-speech-list* 34) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 7)
           (talker-spawn-func (-> *nest-eggs-speech-list* 35) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-37 8)
           (talker-spawn-func (-> *nest-eggs-speech-list* 36) *entity-pool* (target-pos 0) (the-as region #f))
           )
          )
        )
      )
    (if (and (> (-> this cocoon-count) 0) (zero? s5-0))
        (send-event this 'complete)
        )
    (set! (-> this cocoon-count) s5-0)
    )
  (set! (-> *game-info* counter) (the float (-> this cocoon-count)))
  0
  (none)
  )

;; definition for method 34 of type task-manager-nest-cocoons
;; WARN: Return type mismatch object vs symbol.
(defmethod task-manager-nest-cocoons-method-34 ((this task-manager-nest-cocoons))
  (the-as symbol (and (-> this cocoon-manager-entity)
                      (> (-> this actor-group-count) 0)
                      (begin
                        (dotimes (v1-2 (-> this actor-group 0 length))
                          (if (not (-> this actor-group 0 data v1-2 actor))
                              (return (the-as symbol #f))
                              )
                          )
                        #t
                        )
                      )
          )
  )

;; definition for function setup-scorpion
;; WARN: Return type mismatch connection vs none.
(defbehavior setup-scorpion task-manager-nest-cocoons ()
  (local-vars (v1-11 object))
  (while (begin
           (set! (-> self vehicle-handle) (-> *vehicle-info* handle-by-vehicle-type 14))
           (not (handle->process (-> self vehicle-handle)))
           )
    (format *stdebug* "waiting for scorpion~%")
    (suspend)
    )
  (sig-rider-spawn (the-as vehicle (handle->process (-> self vehicle-handle))) #t)
  (until v1-11
    (suspend)
    (set! v1-11 (and *target* (= (send-event *target* 'query 'mode) 'pilot)))
    )
  (set-setting! 'pilot-exit #f 0.0 0)
  (set-setting! 'pilot-death #t 0.0 0)
  (set-setting! 'scarf 'abs 1.0 0)
  (set-setting! 'goggles 'abs 1.0 0)
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-nest-cocoons)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self kill-cocoon-speech) (the int (rand-vu)))
    )
  :code (behavior ()
    (local-vars (a0-15 vector) (a1-7 vector) (gp-6 (function vector vector float)))
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.1))
        (suspend)
        )
      )
    (when (not (task-node-closed? (game-task-node nest-eggs-wall)))
      (until (level-get *level* 'wasdoors)
        (let ((gp-1 (current-time)))
          (until (time-elapsed? gp-1 (seconds 1))
            (format *stdebug* "wait for player to get to garage~%")
            (b! (task-node-closed? (game-task-node nest-eggs-wall)) cfg-34 :delay (nop!))
            (suspend)
            )
          )
        )
      (setup-scorpion)
      (task-node-close! (game-task-node nest-eggs-get-to-scorpion) 'event)
      (let ((gp-2 (current-time)))
        (until (time-elapsed? gp-2 (seconds 0.5))
          (suspend)
          )
        )
      (let ((v1-20 (rand-vu-int-range 0 1)))
        (b! (nonzero? v1-20) cfg-11 :delay (empty-form))
        (talker-spawn-func (-> *nest-eggs-speech-list* 8) *entity-pool* (target-pos 0) (the-as region #f))
        (b! #t cfg-13 :delay (nop!))
        (label cfg-11)
        (if (= v1-20 1)
            (talker-spawn-func (-> *nest-eggs-speech-list* 21) *entity-pool* (target-pos 0) (the-as region #f))
            )
        )
      (label cfg-13)
      (let ((gp-5 (current-time)))
        (until (time-elapsed? gp-5 (seconds 4))
          (suspend)
          )
        )
      (until (< (gp-6 a0-15 a1-7) 491520.0)
        (format *stdebug* "wait for player to drive to eggwall~%")
        (b! (task-node-closed? (game-task-node nest-eggs-wall)) cfg-34 :delay (nop!))
        (suspend)
        (set! gp-6 vector-vector-xz-distance)
        (set! a0-15 (target-pos 0))
        (set! a1-7 (new 'stack-no-clear 'vector))
        (set! (-> a1-7 x) 9149365.0)
        (set! (-> a1-7 y) 0.0)
        (set! (-> a1-7 z) 9168273.0)
        (set! (-> a1-7 w) 1.0)
        )
      (let ((gp-8
              (ppointer->handle
                (process-spawn scene-player :init scene-player-init "nest-destroy-barrier" #t #f :name "scene-player")
                )
              )
            )
        (b! #t cfg-25 :delay (nop!))
        (label cfg-24)
        (format *stdebug* "sig blows up eggwall~%")
        (suspend)
        (label cfg-25)
        (b! (handle->process (the-as handle gp-8)) cfg-24 :delay (nop!))
        )
      (let ((gp-9 (current-time)))
        (until (time-elapsed? gp-9 (seconds 0.5))
          (suspend)
          )
        )
      )
    (label cfg-34)
    (setup-scorpion)
    (set-setting! 'music 'nesteggs 0.0 0)
    (let ((gp-10 (current-time)))
      (until (time-elapsed? gp-10 (seconds 1))
        (suspend)
        )
      )
    (let ((v1-57 (rand-vu-int-range 0 6)))
      (cond
        ((zero? v1-57)
         (talker-spawn-func (-> *nest-eggs-speech-list* 2) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-57 1)
         (talker-spawn-func (-> *nest-eggs-speech-list* 3) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-57 2)
         (talker-spawn-func (-> *nest-eggs-speech-list* 4) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-57 3)
         (talker-spawn-func (-> *nest-eggs-speech-list* 5) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-57 4)
         (talker-spawn-func (-> *nest-eggs-speech-list* 6) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-57 5)
         (talker-spawn-func (-> *nest-eggs-speech-list* 7) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-57 6)
         (talker-spawn-func (-> *nest-eggs-speech-list* 8) *entity-pool* (target-pos 0) (the-as region #f))
         )
        )
      )
    (sleep-code)
    )
  )

;; failed to figure out what this is:
(defstate resolution (task-manager-nest-cocoons)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager resolution) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (remove-setting! 'pilot-exit)
    (remove-setting! 'pilot-death)
    )
  :code (behavior ()
    (task-node-close! (-> self info final-node) 'event)
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.6))
        (suspend)
        )
      )
    (let ((v1-6 (rand-vu-int-range 0 3)))
      (cond
        ((zero? v1-6)
         (talker-spawn-func (-> *nest-eggs-speech-list* 37) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-6 1)
         (talker-spawn-func (-> *nest-eggs-speech-list* 38) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-6 2)
         (talker-spawn-func (-> *nest-eggs-speech-list* 39) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-6 3)
         (talker-spawn-func (-> *nest-eggs-speech-list* 40) *entity-pool* (target-pos 0) (the-as region #f))
         )
        )
      )
    (let ((gp-5 (current-time)))
      (until (time-elapsed? gp-5 (seconds 3))
        (format *stdebug* "task-manager-nest-cocoons: done!~%")
        (suspend)
        )
      )
    (let ((t9-12 (-> (find-parent-state) code)))
      (if t9-12
          ((the-as (function none) t9-12))
          )
      )
    )
  )

;; definition for method 35 of type task-manager-nest-cocoons
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-nest-cocoons-method-35 ((this task-manager-nest-cocoons))
  (set! (-> this cocoon-manager-entity) #f)
  (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
  (none)
  )

;; definition for method 32 of type task-manager-nest-cocoons
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod init-actor-group! ((this task-manager-nest-cocoons))
  (local-vars (sv-16 res-tag))
  (let ((a0-2 (entity-by-name "nst-cocoon-manager-1")))
    (when a0-2
      (set! (-> this cocoon-manager-entity) (the-as entity-actor a0-2))
      (set! sv-16 (new 'static 'res-tag))
      (let ((v0-2 (res-lump-data a0-2 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v0-2 (nonzero? (-> sv-16 elt-count)))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v0-2))
           )
          (else
            (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
            )
          )
        )
      )
    )
  (none)
  )

;; definition for method 25 of type task-manager-nest-cocoons
(defmethod task-manager-method-25 ((this task-manager-nest-cocoons))
  (when (and (-> this minimap) (nonzero? (-> this minimap)))
    (logior! (-> this minimap flags) (minimap-flag fade-out))
    (set! (-> this minimap) #f)
    )
  (let ((t9-0 (method-of-type task-manager task-manager-method-25)))
    (t9-0 this)
    )
  (task-manager-nest-cocoons-method-35 this)
  (none)
  )

;; definition for method 21 of type task-manager-nest-cocoons
(defmethod set-time-limit ((this task-manager-nest-cocoons))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (let ((t1-0 4))
    (set-setting! 'vehicles 'set (shr t1-0 32) t1-0)
    )
  (set-setting! 'exclusive-task-list (new 'static 'boxed-array :type uint8 #x18 #x7) 0.0 0)
  (set! (-> this vehicle-handle) (the-as handle #f))
  (set! (-> this cocoon-manager-entity) #f)
  (set! (-> this cocoon-count) 0)
  (set! (-> this actor-group-count) 0)
  (set! (-> this tunnel) #f)
  (set! (-> this minimap) #f)
  (set! *nstb-light-mode* 0)
  (spawn-dust-storm-randomizer this)
  (none)
  )




