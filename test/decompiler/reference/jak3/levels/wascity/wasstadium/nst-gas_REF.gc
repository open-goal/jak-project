;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *nest-poison-center*, type vector
(define *nest-poison-center* (new 'static 'vector :x 4870144.0 :y -434176.0 :z 2195456.0 :w 1.0))

;; definition for symbol *garage-center*, type vector
(define *garage-center* (new 'static 'vector :x 9284602.0 :y 125607.94 :z 757338.1 :w 1.0))

;; definition for function set-nst-poison!
;; WARN: Return type mismatch mood-context vs none.
(defun set-nst-poison! ((arg0 mood-context))
  (let ((v1-1 (level-get *level* 'nsta)))
    (if (and v1-1 (= (-> v1-1 status) 'active))
        (set! (-> v1-1 mood-context state 0) (the-as uint arg0))
        )
    )
  (let ((v1-3 (level-get *level* 'nstb)))
    (if (and v1-3 (= (-> v1-3 status) 'active))
        (set! (-> v1-3 mood-context state 0) (the-as uint arg0))
        )
    )
  (none)
  )

;; definition of type task-manager-nest-cocoon-gas
(deftype task-manager-nest-cocoon-gas (task-manager)
  ((vehicle-handle         handle)
   (poison-cloud-timer     time-frame)
   (poison-level           float)
   (played-damus-talkbox?  symbol)
   (minimap                connection-minimap)
   (complain-time          time-frame)
   (played-gas-warning     symbol)
   (part                   sparticle-launch-control)
   )
  (:state-methods
    paused
    )
  )

;; definition for method 3 of type task-manager-nest-cocoon-gas
(defmethod inspect ((this task-manager-nest-cocoon-gas))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tvehicle-handle: ~D~%" (-> this vehicle-handle))
  (format #t "~2Tpoison-cloud-timer: ~D~%" (-> this poison-cloud-timer))
  (format #t "~2Tpoison-level: ~f~%" (-> this poison-level))
  (format #t "~2Tplayed-damus-talkbox?: ~A~%" (-> this played-damus-talkbox?))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tcomplain-time: ~D~%" (-> this complain-time))
  (format #t "~2Tplayed-gas-warning: ~A~%" (-> this played-gas-warning))
  (format #t "~2Tpart: ~A~%" (-> this part))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate active (task-manager-nest-cocoon-gas)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set-time! (-> self state-time))
    (set! (-> self complain-time) (+ (current-time) (the int (* 300.0 (rand-vu-float-range 50.0 80.0)))))
    (set! (-> self played-gas-warning) #f)
    (set-setting! 'pilot-exit #f 0.0 0)
    (set-setting! 'pilot-death #t 0.0 0)
    (set-setting! 'music 'nestgas 0.0 0)
    (if (and (< 6225920.0 (vector-vector-xz-distance (camera-pos) *nest-poison-center*))
             (!= (status-of-level-and-borrows *level* 'nsta #f) 'active)
             (!= (status-of-level-and-borrows *level* 'nstb #f) 'active)
             )
        (go-virtual paused)
        )
    (if (not (-> self minimap))
        (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 9) (the-as int #f) (the-as vector #f) 0))
        )
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (remove-setting! 'pilot-exit)
    (remove-setting! 'pilot-death)
    (remove-setting! 'music)
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    )
  :trans (behavior ()
    ((-> (method-of-object self wait) trans))
    (when (< (-> self complain-time) (current-time))
      (let ((v1-4 (rand-vu-int-range 0 2)))
        (cond
          ((zero? v1-4)
           (talker-spawn-func (-> *nest-eggs-speech-list* 46) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-4 1)
           (talker-spawn-func (-> *nest-eggs-speech-list* 47) *entity-pool* (target-pos 0) (the-as region #f))
           )
          ((= v1-4 2)
           (talker-spawn-func (-> *nest-eggs-speech-list* 48) *entity-pool* (target-pos 0) (the-as region #f))
           )
          )
        )
      (set! (-> self complain-time) (+ (current-time) (the int (* 300.0 (rand-vu-float-range 20.0 40.0)))))
      )
    (cond
      ((and (not (-> self played-gas-warning)) (time-elapsed? (-> self state-time) (seconds 5)))
       (let ((v1-22 (rand-vu-int-range 0 3)))
         (cond
           ((zero? v1-22)
            (talker-spawn-func (-> *nest-eggs-speech-list* 41) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-22 1)
            (talker-spawn-func (-> *nest-eggs-speech-list* 42) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-22 2)
            (talker-spawn-func (-> *nest-eggs-speech-list* 43) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-22 3)
            (talker-spawn-func (-> *nest-eggs-speech-list* 44) *entity-pool* (target-pos 0) (the-as region #f))
            )
           )
         )
       (set! (-> self played-gas-warning) #t)
       )
      ((time-elapsed? (-> self state-time) (seconds 150))
       (talker-spawn-func (-> *nest-eggs-speech-list* 45) *entity-pool* (target-pos 0) (the-as region #f))
       )
      )
    (task-manager-method-26 self)
    (if (logtest? (-> self info mask) (task-manager-mask time-limit))
        (hud-timer-handler self)
        )
    (if *debug-segment*
        (format *stdebug* "task-manager: alive task ~A~%" (game-task->string (-> self node-info task)))
        )
    )
  :code (behavior ()
    (while (begin
             (set! (-> self vehicle-handle) (-> *vehicle-info* handle-by-vehicle-type 14))
             (not (handle->process (-> self vehicle-handle)))
             )
      (suspend)
      )
    (sig-rider-spawn (the-as vehicle (handle->process (-> self vehicle-handle))) #t)
    (sleep-code)
    )
  )

;; failed to figure out what this is:
(defstate paused (task-manager-nest-cocoon-gas)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (send-event (handle->process (-> self hud-timer)) 'hide-and-die)
    (set! (-> self hud-timer) (the-as handle #f))
    (let ((gp-0 (new 'static 'resetter-params
                  :flags (resetter-flag auto-reset)
                  :fail (new 'static 'resetter-spec :continue "desert-nest-exit" :reset-mode 'life :execute #f)
                  :retry (new 'static 'resetter-spec :continue #f :reset-mode 'try :execute #f)
                  :reset-delay (seconds 6.5)
                  )
                )
          )
      (set-setting! 'fail-info gp-0 0.0 0)
      (set-setting! 'death-info gp-0 0.0 0)
      (set-setting! 'restart-info gp-0 0.0 0)
      )
    (let ((t1-3 4))
      (set-setting! 'vehicles 'set (shr t1-3 32) t1-3)
      )
    (let ((v1-16 (rand-vu-int-range 0 8)))
      (cond
        ((zero? v1-16)
         (talker-spawn-func (-> *nest-eggs-speech-list* 49) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-16 1)
         (talker-spawn-func (-> *nest-eggs-speech-list* 50) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-16 2)
         (talker-spawn-func (-> *nest-eggs-speech-list* 51) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-16 3)
         (talker-spawn-func (-> *nest-eggs-speech-list* 52) *entity-pool* (target-pos 0) (the-as region #f))
         )
        ((= v1-16 4)
         (talker-spawn-func (-> *nest-eggs-speech-list* 53) *entity-pool* (target-pos 0) (the-as region #f))
         )
        )
      )
    (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 26) (the-as int #f) (the-as vector #f) 0))
    )
  :exit (behavior ()
    (set-time! (-> self start-time))
    (set! (-> self poison-level) 1.0)
    (remove-setting! 'vehicles)
    (remove-setting! 'restart-info)
    (remove-setting! 'death-info)
    (remove-setting! 'fail-info)
    (send-event (handle->process (-> self arrow)) 'leave)
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    )
  :trans (behavior ()
    ((-> (method-of-object self wait) trans))
    (when (time-elapsed? (-> self state-time) (seconds 2))
      (when (not (-> self played-damus-talkbox?))
        (talker-spawn-func (-> *nest-eggs-speech-list* 1) self (target-pos 0) (the-as region #f))
        (set! (-> self played-damus-talkbox?) #t)
        )
      )
    (seek! (-> self poison-level) 1.0 (* 0.05 (seconds-per-frame)))
    (set-nst-poison! (the-as mood-context (-> self poison-level)))
    (if *debug-segment*
        (format *stdebug* "task-manager: ~A paused~%" (-> self node-info name))
        )
    (if (and (< (vector-vector-xz-distance (camera-pos) *nest-poison-center*) 5980160.0)
             (or (= (status-of-level-and-borrows *level* 'nsta #f) 'active)
                 (= (status-of-level-and-borrows *level* 'nstb #f) 'active)
                 )
             )
        (go-virtual active)
        )
    (-> *minimap-class-list* 26)
    (when (and (-> self minimap) (= (status-of-level-and-borrows *level* 'wasdoors #f) 'active))
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (let ((gp-2 (new 'stack-no-clear 'task-arrow-params)))
        (set! (-> gp-2 pos quad) (-> *garage-center* quad))
        (quaternion-identity! (-> gp-2 quat))
        (set! (-> gp-2 flags) (task-arrow-flags taf5))
        (set! (-> gp-2 map-icon) (the-as uint 12))
        (set! (-> self arrow) (process->handle (task-arrow-spawn gp-2 self)))
        )
      (set! (-> self minimap) #f)
      )
    (when (< (vector-vector-xz-distance *garage-center* (target-pos 0)) 81920.0)
      (send-event *target* 'end-mode 'pilot)
      (send-event self 'complete)
      )
    )
  :code sleep-code
  )

;; definition for method 26 of type task-manager-nest-cocoon-gas
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod task-manager-method-26 ((this task-manager-nest-cocoon-gas))
  (let ((t9-0 (method-of-type task-manager task-manager-method-26)))
    (t9-0 this)
    )
  (seek! (-> this poison-level) 1.0 (* 0.05 (seconds-per-frame)))
  (set-nst-poison! (the-as mood-context (-> this poison-level)))
  (format *stdebug* "poison-level: ~f~%" (-> this poison-level))
  (when *target*
    (let ((f30-0 (lerp-scale 1.0 0.0 (vector-vector-xz-distance (camera-pos) *nest-poison-center*) 1638400.0 6144000.0))
          )
      (cond
        ((and (< 0.0 f30-0) (or (= (status-of-level-and-borrows *level* 'nsta #f) 'active)
                                (= (status-of-level-and-borrows *level* 'nstb #f) 'active)
                                )
              )
         (let* ((s5-1 lerp-scale)
                (s4-1 0.4)
                (s3-1 1.6)
                (v1-13 (get-transv *target*))
                (f30-1
                  (* f30-0
                     (s5-1 s4-1 s3-1 (sqrtf (+ (* (-> v1-13 x) (-> v1-13 x)) (* (-> v1-13 z) (-> v1-13 z)))) 0.0 204800.0)
                     )
                  )
                )
           (while (< 0.0 f30-1)
             (when (or (< 1.0 f30-1) (rand-vu-percent? f30-1))
               (let ((s5-2 (new 'stack-no-clear 'vector)))
                 (set! (-> s5-2 quad) (-> *z-vector* quad))
                 (vector-rotate-around-y! s5-2 s5-2 (* 182.04445 (rand-vu-float-range -180.0 180.0)))
                 (vector-float*! s5-2 s5-2 (* 4096.0 (rand-vu-float-range 5.0 40.0)))
                 (set! (-> s5-2 y) (* 4096.0 (rand-vu-float-range -5.0 18.0)))
                 (vector+! s5-2 (camera-pos) s5-2)
                 (vector+float*! s5-2 s5-2 (get-transv *target*) 1.2)
                 (if (nonzero? (-> this part))
                     (spawn (-> this part) s5-2)
                     )
                 )
               )
             (set! f30-1 (+ -1.0 f30-1))
             )
           )
         )
        ((time-elapsed? (-> this state-time) (seconds 3))
         (go (method-of-object this paused))
         )
        )
      )
    )
  (when (and *target* (not (logtest? (focus-status teleporting) (-> *target* focus-status))))
    (let* ((s5-3 (handle->process (-> this vehicle-handle)))
           (a0-30 (if (type? s5-3 process-focusable)
                      s5-3
                      )
                  )
           )
      (if (and a0-30 (focus-test? (the-as process-focusable a0-30) dead))
          (send-event this 'fail)
          )
      )
    )
  (none)
  )

;; definition for method 25 of type task-manager-nest-cocoon-gas
(defmethod task-manager-method-25 ((this task-manager-nest-cocoon-gas))
  (send-event (handle->process (-> this arrow)) 'leave)
  (if (nonzero? (-> this part))
      (kill-particles (-> this part))
      )
  (logior! (-> this info mask) (task-manager-mask time-limit))
  (remove-setting! 'scarf)
  (remove-setting! 'goggles)
  ((method-of-type task-manager task-manager-method-25) this)
  (none)
  )

;; definition for method 7 of type task-manager-nest-cocoon-gas
;; WARN: Return type mismatch task-manager vs task-manager-nest-cocoon-gas.
(defmethod relocate ((this task-manager-nest-cocoon-gas) (offset int))
  (when (nonzero? (-> this part))
    (if (nonzero? (-> this part))
        (&+! (-> this part) offset)
        )
    )
  (the-as task-manager-nest-cocoon-gas ((method-of-type task-manager relocate) this offset))
  )

;; definition for method 21 of type task-manager-nest-cocoon-gas
;; WARN: Return type mismatch connection vs none.
(defmethod set-time-limit ((this task-manager-nest-cocoon-gas))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set-setting! 'exclusive-task-list (new 'static 'boxed-array :type uint8 #x18 #x7) 0.0 0)
  (set! (-> this vehicle-handle) (the-as handle #f))
  (set! (-> this poison-level) 0.0)
  (set! (-> this poison-cloud-timer) 0)
  (set! (-> this played-damus-talkbox?) #f)
  (set! (-> this minimap) #f)
  (set-setting! 'scarf 'abs 1.0 0)
  (set-setting! 'goggles 'abs 1.0 0)
  (none)
  )

;; definition for method 20 of type task-manager-nest-cocoon-gas
;; WARN: Return type mismatch sparticle-launch-control vs none.
(defmethod init! ((this task-manager-nest-cocoon-gas))
  (let ((t9-0 (method-of-type task-manager init!)))
    (t9-0 this)
    )
  (let ((a0-2 (-> *part-group-id-table* 640)))
    (if (nonzero? a0-2)
        (set! (-> this part) (create-launch-control a0-2 this))
        )
    )
  (none)
  )

;; definition for function birth-func-set-fog-num
;; WARN: Return type mismatch float vs none.
(defun birth-func-set-fog-num ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let* ((v1-2 (-> *game-info* sub-task-list (game-task-node nest-eggs-gas)))
         (v1-5 (handle->process (if (-> v1-2 manager)
                                    (-> v1-2 manager manager)
                                    (the-as handle #f)
                                    )
                                )
               )
         )
    (when v1-5
      (let ((f0-0 (-> (the-as task-manager-nest-cocoon-gas v1-5) poison-level)))
        (set! (-> arg1 fade w) (* 0.006666667 (lerp 4.0 12.0 (* f0-0 f0-0))))
        )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-nest-fog
  :id 640
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 10)
  :parts ((sp-item 2491 :fade-after (meters 100) :falloff-to (meters 200)))
  )

;; failed to figure out what this is:
(defpart 2491
  :init-specs ((:texture (big-cloud level-default-sprite))
    (:birth-func 'birth-func-set-fog-num)
    (:num 0.5)
    (:scale-x (meters 30))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0 64.0)
    (:g 255.0)
    (:b 0.0 32.0)
    (:a 0.0)
    (:rotvel-z (degrees -0.1) (degrees 0.2))
    (:fade-a 0.21333334)
    (:timer (seconds 3))
    (:flags (sp-cpuinfo-flag-14))
    (:next-time (seconds 0.5))
    (:next-launcher 2492)
    )
  )

;; failed to figure out what this is:
(defpart 2492
  :init-specs ((:fade-a -0.053333335) (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14)))
  )




