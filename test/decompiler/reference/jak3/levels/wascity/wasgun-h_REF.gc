;;-*-Lisp-*-
(in-package goal)

;; definition of type maker-info
(deftype maker-info (structure)
  ((pos         vector  :inline)
   (hit-points  float)
   (targeted    symbol)
   )
  )

;; definition for method 3 of type maker-info
(defmethod inspect ((this maker-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'maker-info)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Thit-points: ~f~%" (-> this hit-points))
  (format #t "~1Ttargeted: ~A~%" (-> this targeted))
  (label cfg-4)
  this
  )

;; definition of type hud-wasgun
(deftype hud-wasgun (hud)
  ((offscreen   uint8)
   (numscores   uint8)
   (head-idx    uint8)
   (tail-idx    uint8)
   (maker-idx   uint8)
   (shoot-pos   vector      :inline)
   (minfo       maker-info  15 :inline)
   (reticle     hud-sprite  20 :inline)
   (position    vector      14 :inline)
   (vel         float       14)
   (scores      int32       14)
   (multiplier  uint8       14)
   (scoretimes  time-frame  14 :offset 4896)
   )
  (:methods
    (hud-wasgun-method-27 (_type_) none)
    (hud-wasgun-method-28 (_type_ int int vector) none)
    )
  )

;; definition for method 3 of type hud-wasgun
(defmethod inspect ((this hud-wasgun))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (format #t "~2Toffscreen: ~D~%" (-> this offscreen))
  (format #t "~2Tnumscores: ~D~%" (-> this numscores))
  (format #t "~2Thead-idx: ~D~%" (-> this head-idx))
  (format #t "~2Ttail-idx: ~D~%" (-> this tail-idx))
  (format #t "~2Tmaker-idx: ~D~%" (-> this maker-idx))
  (format #t "~2Tshoot-pos: #<vector @ #x~X>~%" (-> this shoot-pos))
  (format #t "~2Tminfo[15] @ #x~X~%" (-> this minfo))
  (format #t "~2Treticle[20] @ #x~X~%" (-> this reticle))
  (format #t "~2Tposition[14] @ #x~X~%" (-> this position))
  (format #t "~2Tvel[14] @ #x~X~%" (-> this vel))
  (format #t "~2Tscores[14] @ #x~X~%" (-> this scores))
  (format #t "~2Tmultiplier[14] @ #x~X~%" (-> this multiplier))
  (format #t "~2Tscoretimes[14] @ #x~X~%" (-> this scoretimes))
  (label cfg-4)
  this
  )

;; definition of type maker-grenade
(deftype maker-grenade (projectile-bounce)
  ((minimap       connection-minimap)
   (blast-radius  float)
   (initial-dist  float)
   )
  (:methods
    (maker-grenade-method-44 () none)
    )
  )

;; definition for method 3 of type maker-grenade
(defmethod inspect ((this maker-grenade))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 this)
    )
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tblast-radius: ~f~%" (-> this blast-radius))
  (format #t "~2Tinitial-dist: ~f~%" (-> this initial-dist))
  (label cfg-4)
  this
  )

;; definition of type wascity-turret-hud-position
(deftype wascity-turret-hud-position (structure)
  ((x  float)
   (y  float)
   )
  :allow-misaligned
  )

;; definition for method 3 of type wascity-turret-hud-position
(defmethod inspect ((this wascity-turret-hud-position))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wascity-turret-hud-position)
  (format #t "~1Tx: ~f~%" (-> this x))
  (format #t "~1Ty: ~f~%" (-> this y))
  (label cfg-4)
  this
  )

;; definition of type wascity-turret
(deftype wascity-turret (target-turret)
  ((recoil                  float                        2)
   (lerp                    float)
   (lerp2                   float)
   (reticle-part            sparticle-launch-control)
   (my-fire-time            time-frame                   2)
   (ready-to-go-active      time-frame)
   (ready-to-go-active-sym  symbol                       :overlay-at ready-to-go-active)
   (move-start              time-frame)
   (facing-ocean            symbol)
   (facing-city             symbol)
   (reset-facing            symbol)
   (fire-delay              symbol)
   (left?                   symbol)
   (fire-idx                uint8)
   (speed-mult              float)
   (radar-object-counter    uint16)
   (radar-object            wascity-turret-hud-position  64 :inline)
   (aim-dir                 vector                       :inline)
   (reticle-dir             vector                       :inline)
   (target-handle           handle)
   )
  (:methods
    (wascity-turret-method-59 (_type_) none)
    (vector<-fire-pos! (_type_ vector) vector)
    (vector<-reticle-fire-pos! (_type_ vector) vector)
    (wascity-turret-method-62 (_type_) none)
    )
  )

;; definition for method 3 of type wascity-turret
(defmethod inspect ((this wascity-turret))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type target-turret inspect)))
    (t9-0 this)
    )
  (format #t "~2Trecoil[2] @ #x~X~%" (-> this recoil))
  (format #t "~2Tlerp: ~f~%" (-> this lerp))
  (format #t "~2Tlerp2: ~f~%" (-> this lerp2))
  (format #t "~2Treticle-part: ~A~%" (-> this reticle-part))
  (format #t "~2Tmy-fire-time[2] @ #x~X~%" (-> this my-fire-time))
  (format #t "~2Tready-to-go-active: ~A~%" (-> this ready-to-go-active-sym))
  (format #t "~2Tmove-start: ~D~%" (-> this move-start))
  (format #t "~2Tfacing-ocean: ~A~%" (-> this facing-ocean))
  (format #t "~2Tfacing-city: ~A~%" (-> this facing-city))
  (format #t "~2Treset-facing: ~A~%" (-> this reset-facing))
  (format #t "~2Tfire-delay: ~A~%" (-> this fire-delay))
  (format #t "~2Tleft?: ~A~%" (-> this left?))
  (format #t "~2Tfire-idx: ~D~%" (-> this fire-idx))
  (format #t "~2Tspeed-mult: ~f~%" (-> this speed-mult))
  (format #t "~2Tradar-object-counter: ~D~%" (-> this radar-object-counter))
  (format #t "~2Tradar-object[64] @ #x~X~%" (-> this radar-object))
  (format #t "~2Taim-dir: #<vector @ #x~X>~%" (-> this aim-dir))
  (format #t "~2Treticle-dir: #<vector @ #x~X>~%" (-> this reticle-dir))
  (format #t "~2Ttarget-handle: ~D~%" (-> this target-handle))
  (label cfg-4)
  this
  )

;; definition of type skeet
(deftype skeet (rigid-body-object)
  ((forw                  vector  :inline)
   (ppos                  vector  :inline)
   (pvel                  vector  :inline)
   (pacc                  vector  :inline)
   (angle                 float)
   (disappear             symbol)
   (rot-vel               float)
   (rot-acc               float)
   (initial-y             float)
   (time-to-live          time-frame)
   (birth-time            time-frame)
   (mult                  uint8)
   (score                 uint16)
   (minimap               connection-minimap)
   (skeet-type            skeet-type)
   (skeet-sound           sound-id)
   (skeet-sound-playing?  symbol)
   (mgr                   handle)
   (mode                  skeet-mode)
   )
  (:state-methods
    flying
    explode
    )
  (:methods
    (skeet-method-58 (_type_) none)
    (skeet-method-59 (_type_) none)
    (skeet-method-60 (_type_) none)
    (skeet-method-61 (_type_) none)
    (spawn-exploder (_type_) (pointer joint-exploder))
    )
  )

;; definition for method 3 of type skeet
(defmethod inspect ((this skeet))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type rigid-body-object inspect)))
    (t9-0 this)
    )
  (format #t "~2Tforw: #<vector @ #x~X>~%" (-> this forw))
  (format #t "~2Tppos: #<vector @ #x~X>~%" (-> this ppos))
  (format #t "~2Tpvel: #<vector @ #x~X>~%" (-> this pvel))
  (format #t "~2Tpacc: #<vector @ #x~X>~%" (-> this pacc))
  (format #t "~2Tangle: ~f~%" (-> this angle))
  (format #t "~2Tdisappear: ~A~%" (-> this disappear))
  (format #t "~2Trot-vel: ~f~%" (-> this rot-vel))
  (format #t "~2Trot-acc: ~f~%" (-> this rot-acc))
  (format #t "~2Tinitial-y: ~f~%" (-> this initial-y))
  (format #t "~2Ttime-to-live: ~D~%" (-> this time-to-live))
  (format #t "~2Tbirth-time: ~D~%" (-> this birth-time))
  (format #t "~2Tmult: ~D~%" (-> this mult))
  (format #t "~2Tscore: ~D~%" (-> this score))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tskeet-type: ~D~%" (-> this skeet-type))
  (format #t "~2Tskeet-sound: ~D~%" (-> this skeet-sound))
  (format #t "~2Tskeet-sound-playing?: ~A~%" (-> this skeet-sound-playing?))
  (format #t "~2Tmgr: ~D~%" (-> this mgr))
  (format #t "~2Tmode: ~D~%" (-> this mode))
  (label cfg-4)
  this
  )

;; definition of type hud-wasdef-damage
(deftype hud-wasdef-damage (hud)
  ()
  )

;; definition for method 3 of type hud-wasdef-damage
(defmethod inspect ((this hud-wasdef-damage))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
