;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-triangle
  :id 502
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 1975) (sp-item 1976) (sp-item 1977))
  )

;; failed to figure out what this is:
(defpart 1975
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.33)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.18) (meters -0.02))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1978)
    (:conerot-z (degrees 0))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

;; failed to figure out what this is:
(defpart 1976
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.33)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1978)
    (:conerot-z (degrees 30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

;; failed to figure out what this is:
(defpart 1977
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.33)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1978)
    (:conerot-z (degrees -30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

;; failed to figure out what this is:
(defpart 1978
  :init-specs ((:r 0.0)
    (:g 214.0)
    (:b 32.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 1979)
    )
  )

;; failed to figure out what this is:
(defpart 1979
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 1980))
  )

;; failed to figure out what this is:
(defpart 1980
  :init-specs ((:r 0.0) (:g 214.0) (:b 32.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 1979))
  )

;; failed to figure out what this is:
(defpart 1981
  :init-specs ((:texture (onin-game-triangle waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.080000006))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 1982
  :init-specs ((:texture (onin-game-triangle-darkener waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.103999995))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-circle
  :id 503
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 1983))
  )

;; failed to figure out what this is:
(defpart 1983
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1984)
    (:conerot-z (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

;; failed to figure out what this is:
(defpart 1984
  :init-specs ((:r 255.0)
    (:g 8.0)
    (:b 32.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 1985)
    )
  )

;; failed to figure out what this is:
(defpart 1985
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 1986))
  )

;; failed to figure out what this is:
(defpart 1986
  :init-specs ((:r 255.0) (:g 8.0) (:b 32.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 1985))
  )

;; failed to figure out what this is:
(defpart 1987
  :init-specs ((:texture (onin-game-circle waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.080000006))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 1988
  :init-specs ((:texture (onin-game-circle-darkener waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.103999995))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-square
  :id 504
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 1989) (sp-item 1990) (sp-item 1991) (sp-item 1992))
  )

;; failed to figure out what this is:
(defpart 1989
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.25)
    (:x (meters 0.08) (meters 0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 1990
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.25)
    (:x (meters -0.08) (meters -0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 1991
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.25)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.08) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 1992
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.25)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters 0.08) (meters 0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 1993
  :init-specs ((:r 255.0)
    (:g 0.0)
    (:b 128.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 1994)
    )
  )

;; failed to figure out what this is:
(defpart 1994
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 1995))
  )

;; failed to figure out what this is:
(defpart 1995
  :init-specs ((:r 255.0) (:g 0.0) (:b 128.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 1994))
  )

;; failed to figure out what this is:
(defpart 1996
  :init-specs ((:texture (onin-game-square waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.080000006))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 1997
  :init-specs ((:texture (onin-game-square-darkener waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.103999995))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-x
  :id 505
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 1998) (sp-item 1999))
  )

;; failed to figure out what this is:
(defpart 1998
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.5)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 2000)
    (:conerot-z (degrees 45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

;; failed to figure out what this is:
(defpart 1999
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 0.5)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:accel-y (meters -0.000033333334) (meters -0.000033333334))
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.05))
    (:next-launcher 2000)
    (:conerot-z (degrees -45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

;; failed to figure out what this is:
(defpart 2000
  :init-specs ((:r 48.0)
    (:g 64.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:fade-a -0.3 -1.2)
    (:next-time (seconds 0.085) (seconds 0.497))
    (:next-launcher 2001)
    )
  )

;; failed to figure out what this is:
(defpart 2001
  :init-specs ((:r 255.0) (:g 255.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 2002))
  )

;; failed to figure out what this is:
(defpart 2002
  :init-specs ((:r 48.0) (:g 64.0) (:b 255.0) (:next-time (seconds 0.085) (seconds 0.497)) (:next-launcher 2001))
  )

;; failed to figure out what this is:
(defpart 2003
  :init-specs ((:texture (onin-game-x waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.080000006))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0 64.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 2004
  :init-specs ((:texture (onin-game-x-darkener waspgame-sprite))
    (:num 1.0)
    (:scale-x (meters 0.103999995))
    (:rot-z (degrees 0) 359 (degrees 90))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-4))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-pop-triangle
  :id 506
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2005) (sp-item 2006) (sp-item 2007) (sp-item 2008 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2005
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 21.0)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.18) (meters -0.02))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1978)
    (:conerot-z (degrees 0))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

;; failed to figure out what this is:
(defpart 2006
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 21.0)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1978)
    (:conerot-z (degrees 30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

;; failed to figure out what this is:
(defpart 2007
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 21.0)
    (:y (meters 0.075) (meters -0.03))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1978)
    (:conerot-z (degrees -30))
    (:conerot-radius (meters -0.18) (meters 0.2))
    )
  )

;; failed to figure out what this is:
(defpart 2008
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r -6.375)
    (:fade-g -1.025)
    (:fade-b -5.575)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-pop-circle
  :id 507
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2009) (sp-item 2010 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2009
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 64.0)
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1984)
    (:conerot-z (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.09) (meters 0.01))
    )
  )

;; definition for function birth-func-pre-bubble-pop
;; WARN: Return type mismatch int vs none.
(defun birth-func-pre-bubble-pop ((arg0 sparticle-system)
                         (arg1 sparticle-cpuinfo)
                         (arg2 sprite-vec-data-3d)
                         (arg3 sparticle-launcher)
                         (arg4 sparticle-launch-state)
                         )
  (let* ((a0-1 (-> arg4 control))
         (v1-1 (vector-! (new 'stack-no-clear 'vector) (-> arg2 x-y-z-sx) (-> a0-1 origin trans)))
         )
    (set! (-> arg1 vel-sxvel x) (* 0.083333336 (-> v1-1 x)))
    (set! (-> arg1 vel-sxvel y) (* 0.083333336 (-> v1-1 y)))
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defpart 2010
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r 0.0)
    (:fade-g -6.1)
    (:fade-b -4.6)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-pop-square
  :id 508
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2011) (sp-item 2012) (sp-item 2013) (sp-item 2014) (sp-item 2015 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2011
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 16.0)
    (:x (meters 0.08) (meters 0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 2012
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 16.0)
    (:x (meters -0.08) (meters -0.01))
    (:y (meters -0.09) (meters 0.18))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 2013
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 16.0)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters -0.08) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 2014
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 16.0)
    (:x (meters -0.09) (meters 0.18))
    (:y (meters 0.08) (meters 0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 1993)
    )
  )

;; failed to figure out what this is:
(defpart 2015
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b -6.375)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-pop-x
  :id 509
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2016) (sp-item 2017) (sp-item 2018 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2016
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 32.0)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 2000)
    (:conerot-z (degrees 45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

;; failed to figure out what this is:
(defpart 2017
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-pop)
    (:num 32.0)
    (:y (meters 0.005) (meters -0.01))
    (:scale-x (meters 0.04))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0.01125) (degrees 0.01125))
    (:accel-y (meters -0.000033333334) (meters -0.0001))
    (:friction 0.94 0.01)
    (:timer (seconds 1.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:next-time (seconds 0.135))
    (:next-launcher 2000)
    (:conerot-z (degrees -45))
    (:conerot-radius (meters -0.12) (meters 0.24))
    )
  )

;; failed to figure out what this is:
(defpart 2018
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 0.1))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:fade-r 0.0)
    (:fade-g -5.175)
    (:fade-b -4.9)
    (:fade-a 0.0)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-birth-triangle
  :id 510
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2019) (sp-item 2020 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2019
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 214.0)
    (:b 16.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.0)
    (:fade-g 0.771875)
    (:fade-b 0.7)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

;; failed to figure out what this is:
(defpart 2020
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 2021)
    )
  )

;; failed to figure out what this is:
(defpart 2021
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -6.375)
    (:fade-b -3.2)
    (:fade-a -6.375)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-birth-circle
  :id 511
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2022) (sp-item 2023 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2022
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 8.0)
    (:b 32.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.0)
    (:fade-g 0.771875)
    (:fade-b 0.7)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

;; definition for function birth-func-pre-bubble-birth-pop
;; WARN: Return type mismatch int vs none.
(defun birth-func-pre-bubble-birth-pop ((arg0 sparticle-system)
                               (arg1 sparticle-cpuinfo)
                               (arg2 sprite-vec-data-3d)
                               (arg3 sparticle-launcher)
                               (arg4 sparticle-launch-state)
                               )
  (let* ((a0-1 (-> arg4 control))
         (v1-1 (vector-! (new 'stack-no-clear 'vector) (-> arg2 x-y-z-sx) (-> a0-1 origin trans)))
         )
    (set! (-> arg1 vel-sxvel x) (* -0.008333334 (-> v1-1 x)))
    (set! (-> arg1 vel-sxvel y) (* -0.008333334 (-> v1-1 y)))
    (set! (-> arg1 vel-sxvel z) (* -0.008333334 (-> v1-1 z)))
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defpart 2023
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 2024)
    )
  )

;; failed to figure out what this is:
(defpart 2024
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 0.0)
    (:fade-g -6.1)
    (:fade-b -4.6)
    (:fade-a -6.375)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-birth-square
  :id 512
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2025) (sp-item 2026 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2025
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 64.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.0)
    (:fade-g 0.771875)
    (:fade-b 0.7)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

;; failed to figure out what this is:
(defpart 2026
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 2027)
    )
  )

;; failed to figure out what this is:
(defpart 2027
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -6.375)
    (:fade-g -1.025)
    (:fade-b -5.6)
    (:fade-a -6.375)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-birth-x
  :id 513
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2028) (sp-item 2029 :flags (sp6)))
  )

;; failed to figure out what this is:
(defpart 2028
  :init-specs ((:texture (hotdot level-default-sprite))
    (:birth-func 'birth-func-pre-bubble-birth-pop)
    (:num 32.0)
    (:scale-x (meters 0.04))
    (:scale-y :copy scale-x)
    (:r 48.0)
    (:g 64.0)
    (:b 255.0)
    (:a 0.0)
    (:omega (degrees 0.00675) (degrees 0.00675))
    (:fade-r 0.646875)
    (:fade-g 0.6125)
    (:fade-a 0.8)
    (:timer (seconds 0.3))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -70) (degrees 140))
    (:conerot-y (degrees 0) (degrees 3600))
    (:rotate-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0.6) (meters 0.9))
    )
  )

;; failed to figure out what this is:
(defpart 2029
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters 0.2))
    (:scale-x (meters 0.6) (meters 0.1))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 0.0)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 0.0)
    (:next-time (seconds 0.267))
    (:next-launcher 2030)
    )
  )

;; failed to figure out what this is:
(defpart 2030
  :init-specs ((:a 255.0)
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters -0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -6.375)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-land-triangle
  :id 514
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2031 :flags (sp6)) (sp-item 2032 :flags (is-3d sp6)))
  )

;; failed to figure out what this is:
(defpart 2032
  :init-specs ((:texture (onin-game-scatter waspgame-sprite))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 214.0)
    (:b 16.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.067))
    (:next-launcher 2033)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2031
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-land-circle
  :id 515
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2034 :flags (sp6)) (sp-item 2035 :flags (is-3d sp6)))
  )

;; failed to figure out what this is:
(defpart 2035
  :init-specs ((:texture (onin-game-scatter waspgame-sprite))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 4.0)
    (:b 16.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.067))
    (:next-launcher 2033)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2034
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-land-square
  :id 516
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2036 :flags (sp6)) (sp-item 2037 :flags (is-3d sp6)))
  )

;; failed to figure out what this is:
(defpart 2036
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:a 128.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -3.2)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; failed to figure out what this is:
(defpart 2037
  :init-specs ((:texture (onin-game-scatter waspgame-sprite))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0)
    (:b 64.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.067))
    (:next-launcher 2033)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-pre-bubble-land-x
  :id 517
  :duration (seconds 0.017)
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2038 :flags (sp6)) (sp-item 2039 :flags (is-3d sp6)))
  )

;; failed to figure out what this is:
(defpart 2039
  :init-specs ((:texture (onin-game-scatter waspgame-sprite))
    (:num 4.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 24.0)
    (:g 32.0)
    (:b 255.0)
    (:a 128.0)
    (:scalevel-x (meters 0.02) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 0.067) (seconds 0.047))
    (:next-launcher 2033)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2033
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y (meters 0)) (:fade-a -0.8))
  )

;; failed to figure out what this is:
(defpart 2038
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:y (meters -0.1))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0)
    (:scalevel-x (meters -0.005))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -5.7)
    (:fade-g -4.9)
    (:fade-b 0.0)
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    )
  )

;; definition of type was-pre-game-wave
(deftype was-pre-game-wave (structure)
  ((event-count-min   int16)
   (event-count-max   int16)
   (bubble-count-min  int16)
   (bubble-count-max  int16)
   (event-interval    uint16)
   (delay             uint16)
   (gravity-min       meters)
   (gravity-max       meters)
   (beam-offset-max   float)
   (beam-size-min     float)
   (beam-size-max     float)
   )
  )

;; definition for method 3 of type was-pre-game-wave
(defmethod inspect ((this was-pre-game-wave))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'was-pre-game-wave)
  (format #t "~1Tevent-count-min: ~D~%" (-> this event-count-min))
  (format #t "~1Tevent-count-max: ~D~%" (-> this event-count-max))
  (format #t "~1Tbubble-count-min: ~D~%" (-> this bubble-count-min))
  (format #t "~1Tbubble-count-max: ~D~%" (-> this bubble-count-max))
  (format #t "~1Tevent-interval: ~D~%" (-> this event-interval))
  (format #t "~1Tdelay: ~D~%" (-> this delay))
  (format #t "~1Tgravity-min: (meters ~m)~%" (-> this gravity-min))
  (format #t "~1Tgravity-max: (meters ~m)~%" (-> this gravity-max))
  (format #t "~1Tbeam-offset-max: ~f~%" (-> this beam-offset-max))
  (format #t "~1Tbeam-size-min: ~f~%" (-> this beam-size-min))
  (format #t "~1Tbeam-size-max: ~f~%" (-> this beam-size-max))
  (label cfg-4)
  this
  )

;; definition of type was-pre-game-game
(deftype was-pre-game-game (structure)
  ((point-win  float)
   (miss-max   float)
   (wave       (inline-array was-pre-game-wave))
   )
  )

;; definition for method 3 of type was-pre-game-game
(defmethod inspect ((this was-pre-game-game))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'was-pre-game-game)
  (format #t "~1Tpoint-win: ~f~%" (-> this point-win))
  (format #t "~1Tmiss-max: ~f~%" (-> this miss-max))
  (format #t "~1Twave: #x~X~%" (-> this wave))
  (label cfg-4)
  this
  )

;; definition for symbol *pre-game*, type was-pre-game-game
(define *pre-game* (new 'static 'was-pre-game-game
                     :point-win 75.0
                     :miss-max 5.0
                     :wave (new 'static 'inline-array was-pre-game-wave 9
                       (new 'static 'was-pre-game-wave
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 1)
                         :delay (seconds 3)
                         :gravity-min (meters 0.0048828125)
                         :gravity-max (meters 0.0048828125)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 10
                         :event-count-max 10
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 1)
                         :delay (seconds 2)
                         :gravity-min (meters 0.0048828125)
                         :gravity-max (meters 0.0048828125)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 10
                         :event-count-max 10
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 1)
                         :delay (seconds 2)
                         :gravity-min (meters 0.007324219)
                         :gravity-max (meters 0.007324219)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 15
                         :event-count-max 15
                         :bubble-count-min 1
                         :bubble-count-max 2
                         :event-interval (seconds 1.5)
                         :delay (seconds 2)
                         :gravity-min (meters 0.007324219)
                         :gravity-max (meters 0.007324219)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 15
                         :event-count-max 15
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 1)
                         :delay (seconds 2)
                         :gravity-min (meters 0.009765625)
                         :gravity-max (meters 0.009765625)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 10
                         :event-count-max 10
                         :bubble-count-min 2
                         :bubble-count-max 2
                         :event-interval (seconds 2)
                         :delay (seconds 2)
                         :gravity-min (meters 0.0048828125)
                         :gravity-max (meters 0.0048828125)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 15
                         :event-count-max 15
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 0.75)
                         :delay (seconds 2)
                         :gravity-min (meters 0.012207031)
                         :gravity-max (meters 0.012207031)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min 20
                         :event-count-max 20
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 0.5)
                         :delay (seconds 2)
                         :gravity-min (meters 0.007324219)
                         :gravity-max (meters 0.007324219)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       (new 'static 'was-pre-game-wave
                         :event-count-min -1
                         :event-count-max 10
                         :bubble-count-min 1
                         :bubble-count-max 1
                         :event-interval (seconds 1)
                         :delay (seconds 2)
                         :gravity-min (meters 0.0048828125)
                         :gravity-max (meters 0.0048828125)
                         :beam-size-min 0.2
                         :beam-size-max 0.2
                         )
                       )
                     )
        )

;; definition for symbol *pre-game-fun*, type was-pre-game-game
(define *pre-game-fun* (new 'static 'was-pre-game-game
                         :point-win -1.0
                         :miss-max 5.0
                         :wave (new 'static 'inline-array was-pre-game-wave 9
                           (new 'static 'was-pre-game-wave
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 1)
                             :delay (seconds 3)
                             :gravity-min (meters 0.0048828125)
                             :gravity-max (meters 0.0048828125)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 10
                             :event-count-max 10
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 1)
                             :delay (seconds 2)
                             :gravity-min (meters 0.0048828125)
                             :gravity-max (meters 0.0048828125)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 10
                             :event-count-max 10
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 1)
                             :delay (seconds 2)
                             :gravity-min (meters 0.007324219)
                             :gravity-max (meters 0.007324219)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 15
                             :event-count-max 15
                             :bubble-count-min 1
                             :bubble-count-max 2
                             :event-interval (seconds 1.5)
                             :delay (seconds 2)
                             :gravity-min (meters 0.007324219)
                             :gravity-max (meters 0.007324219)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 15
                             :event-count-max 15
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 1)
                             :delay (seconds 2)
                             :gravity-min (meters 0.009765625)
                             :gravity-max (meters 0.009765625)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 10
                             :event-count-max 10
                             :bubble-count-min 2
                             :bubble-count-max 2
                             :event-interval (seconds 2)
                             :delay (seconds 2)
                             :gravity-min (meters 0.0048828125)
                             :gravity-max (meters 0.0048828125)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 15
                             :event-count-max 15
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 0.75)
                             :delay (seconds 2)
                             :gravity-min (meters 0.012207031)
                             :gravity-max (meters 0.012207031)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min 20
                             :event-count-max 20
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 0.5)
                             :delay (seconds 2)
                             :gravity-min (meters 0.007324219)
                             :gravity-max (meters 0.007324219)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           (new 'static 'was-pre-game-wave
                             :event-count-min -1
                             :event-count-max 10
                             :bubble-count-min 1
                             :bubble-count-max 1
                             :event-interval (seconds 1)
                             :delay (seconds 2)
                             :gravity-min (meters 0.0048828125)
                             :gravity-max (meters 0.0048828125)
                             :beam-size-min 0.2
                             :beam-size-max 0.2
                             )
                           )
                         )
        )

;; definition of type was-pre-beam-info
(deftype was-pre-beam-info (structure)
  ((index      int32)
   (min        float)
   (size       float)
   (fire-time  time-frame)
   (beam       handle)
   )
  :pack-me
  (:methods
    (get-beam-color (_type_) uint)
    )
  )

;; definition for method 3 of type was-pre-beam-info
(defmethod inspect ((this was-pre-beam-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'was-pre-beam-info)
  (format #t "~1Tindex: ~D~%" (-> this index))
  (format #t "~1Tmin: ~f~%" (-> this min))
  (format #t "~1Tsize: ~f~%" (-> this size))
  (format #t "~1Tfire-time: ~D~%" (-> this fire-time))
  (format #t "~1Tbeam: ~D~%" (-> this beam))
  (label cfg-4)
  this
  )

;; definition of type was-pre-beam
(deftype was-pre-beam (process-drawable)
  ((parent  (pointer was-pre-game) :override)
   (index   int32)
   )
  (:state-methods
    idle
    attack
    )
  )

;; definition for method 3 of type was-pre-beam
(defmethod inspect ((this was-pre-beam))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tindex: ~D~%" (-> this index))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-was-pre-beam neo-satellite-game-ring neo-satellite-game-ring-lod0-jg neo-satellite-game-ring-idle-ja
              ((neo-satellite-game-ring-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition of type was-pre-heart
(deftype was-pre-heart (process-drawable)
  ((parent     (pointer was-pre-game) :override)
   (cur-level  int32)
   )
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type was-pre-heart
(defmethod inspect ((this was-pre-heart))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcur-level: ~D~%" (-> this cur-level))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-was-pre-heart neo-satellite-heart neo-satellite-heart-lod0-jg neo-satellite-heart-idle0-ja
              ((neo-satellite-heart-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition of type was-pre-game
(deftype was-pre-game (process-drawable)
  ((self              was-pre-game      :override)
   (task              game-task-control)
   (hud-score         handle)
   (hud-goal          handle)
   (hud-miss          handle)
   (score             float)
   (score-time        time-frame)
   (miss-max          int32)
   (miss-count        int32)
   (miss-time         time-frame)
   (point-win         float)
   (game              was-pre-game-game)
   (game-start-time   time-frame)
   (wave-start-time   time-frame)
   (event-start-time  time-frame)
   (wave-index        int32)
   (event-index       int32)
   (event-count       int32)
   (beam-clock        float)
   (speech-time       time-frame)
   (speech-count      int32)
   (speech-last       int32              4)
   (screen-matrix     matrix             :inline)
   (screen-scale      vector             :inline)
   (spawn-time        time-frame)
   (beam              was-pre-beam-info  4 :inline)
   (heart             handle)
   )
  (:state-methods
    idle
    hide
    wait-for-start
    (active symbol)
    lose
    win
    )
  (:methods
    (handle-pad-input (_type_) none)
    (update-game-state (_type_) int)
    (start-next-wave (_type_ was-pre-game-wave) none)
    (pre-game-post (_type_) none)
    (update-score (_type_) none)
    (update-screen (_type_) none)
    (scale-to-screen! (_type_ vector float float) vector)
    (set-last-speech-at-idx (_type_ int int) none)
    )
  )

;; definition for method 3 of type was-pre-game
(defmethod inspect ((this was-pre-game))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttask: ~A~%" (-> this task))
  (format #t "~2Thud-score: ~D~%" (-> this hud-score))
  (format #t "~2Thud-goal: ~D~%" (-> this hud-goal))
  (format #t "~2Thud-miss: ~D~%" (-> this hud-miss))
  (format #t "~2Tscore: ~f~%" (-> this score))
  (format #t "~2Tscore-time: ~D~%" (-> this score-time))
  (format #t "~2Tmiss-max: ~D~%" (-> this miss-max))
  (format #t "~2Tmiss-count: ~D~%" (-> this miss-count))
  (format #t "~2Tmiss-time: ~D~%" (-> this miss-time))
  (format #t "~2Tpoint-win: ~f~%" (-> this point-win))
  (format #t "~2Tgame: #<was-pre-game-game @ #x~X>~%" (-> this game))
  (format #t "~2Tgame-start-time: ~D~%" (-> this game-start-time))
  (format #t "~2Twave-start-time: ~D~%" (-> this wave-start-time))
  (format #t "~2Tevent-start-time: ~D~%" (-> this event-start-time))
  (format #t "~2Twave-index: ~D~%" (-> this wave-index))
  (format #t "~2Tevent-index: ~D~%" (-> this event-index))
  (format #t "~2Tevent-count: ~D~%" (-> this event-count))
  (format #t "~2Tbeam-clock: ~f~%" (-> this beam-clock))
  (format #t "~2Tspeech-time: ~D~%" (-> this speech-time))
  (format #t "~2Tspeech-count: ~D~%" (-> this speech-count))
  (format #t "~2Tspeech-last[4] @ #x~X~%" (-> this speech-last))
  (format #t "~2Tscreen-matrix: #<matrix @ #x~X>~%" (-> this screen-matrix))
  (format #t "~2Tscreen-scale: #<vector @ #x~X>~%" (-> this screen-scale))
  (format #t "~2Tspawn-time: ~D~%" (-> this spawn-time))
  (format #t "~2Tbeam[4] @ #x~X~%" (-> this beam))
  (format #t "~2Theart: ~D~%" (-> this heart))
  (label cfg-4)
  this
  )

;; definition of type pre-game-bubble
(deftype pre-game-bubble (process-drawable)
  ((parent             (pointer was-pre-game) :override)
   (screen-pos         vector                  :inline)
   (bubble-type        int32)
   (bubble-start-time  time-frame)
   (start-delay        time-frame)
   (gravity            meters)
   (dead?              symbol)
   )
  (:state-methods
    idle
    fall
    )
  )

;; definition for method 3 of type pre-game-bubble
(defmethod inspect ((this pre-game-bubble))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tscreen-pos: ~`vector`P~%" (-> this screen-pos))
  (format #t "~2Tbubble-type: ~D~%" (-> this bubble-type))
  (format #t "~2Tbubble-start-time: ~D~%" (-> this bubble-start-time))
  (format #t "~2Tstart-delay: ~D~%" (-> this start-delay))
  (format #t "~2Tgravity: (meters ~m)~%" (-> this gravity))
  (format #t "~2Tdead?: ~A~%" (-> this dead?))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-was-pre-bubble neo-satellite-ps-symbols neo-satellite-ps-symbols-lod0-jg neo-satellite-ps-symbols-idle-ja
              ((neo-satellite-ps-symbols-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; failed to figure out what this is:
(defstate idle (pre-game-bubble)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('die)
       (go empty-state)
       )
      (('attack)
       (if (-> block param 0)
           (go empty-state)
           )
       )
      )
    )
  :code (behavior ()
    (let ((v1-0 (-> self bubble-type)))
      (cond
        ((logtest? (-> (cond
                         ((zero? v1-0)
                          (-> *part-group-id-table* 510)
                          )
                         ((= v1-0 1)
                          (-> *part-group-id-table* 511)
                          )
                         ((= v1-0 2)
                          (-> *part-group-id-table* 513)
                          )
                         (else
                           (-> *part-group-id-table* 512)
                           )
                         )
                       flags
                       )
                   (sp-group-flag sp13)
                   )
         (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
         (let ((gp-0 (get-process *default-dead-pool* part-tracker-subsampler #x4000 0)))
           (when gp-0
             (let ((t9-1 (method-of-type part-tracker-subsampler activate)))
               (t9-1
                 (the-as part-tracker-subsampler gp-0)
                 *entity-pool*
                 "part-tracker-subsampler"
                 (the-as pointer #x70004000)
                 )
               )
             (let ((t9-2 run-function-in-process)
                   (a0-7 gp-0)
                   (a1-2 part-tracker-subsampler-init)
                   )
               (let ((v1-13 (-> self bubble-type)))
                 (set! (-> *part-tracker-subsampler-params-default* group) (cond
                                                                             ((zero? v1-13)
                                                                              (-> *part-group-id-table* 510)
                                                                              )
                                                                             ((= v1-13 1)
                                                                              (-> *part-group-id-table* 511)
                                                                              )
                                                                             ((= v1-13 2)
                                                                              (-> *part-group-id-table* 513)
                                                                              )
                                                                             (else
                                                                               (-> *part-group-id-table* 512)
                                                                               )
                                                                             )
                       )
                 )
               (set! (-> *part-tracker-subsampler-params-default* duration) 0)
               (set! (-> *part-tracker-subsampler-params-default* callback) #f)
               (set! (-> *part-tracker-subsampler-params-default* userdata) (the-as uint #f))
               (set! (-> *part-tracker-subsampler-params-default* target) #f)
               (set! (-> *part-tracker-subsampler-params-default* mat-joint) *launch-matrix*)
               (set! (-> *part-tracker-subsampler-params-default* subsample-num) 1.0)
               ((the-as (function object object object none) t9-2) a0-7 a1-2 *part-tracker-subsampler-params-default*)
               )
             (-> gp-0 ppointer)
             )
           )
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
          (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000 0)))
            (when gp-1
              (let ((t9-4 (method-of-type part-tracker activate)))
                (t9-4 (the-as part-tracker gp-1) *entity-pool* "part-tracker" (the-as pointer #x70004000))
                )
              (let ((t9-5 run-function-in-process)
                    (a0-13 gp-1)
                    (a1-5 part-tracker-init)
                    )
                (let ((v1-32 (-> self bubble-type)))
                  (set! (-> *part-tracker-params-default* group) (cond
                                                                   ((zero? v1-32)
                                                                    (-> *part-group-id-table* 510)
                                                                    )
                                                                   ((= v1-32 1)
                                                                    (-> *part-group-id-table* 511)
                                                                    )
                                                                   ((= v1-32 2)
                                                                    (-> *part-group-id-table* 513)
                                                                    )
                                                                   (else
                                                                     (-> *part-group-id-table* 512)
                                                                     )
                                                                   )
                        )
                  )
                (set! (-> *part-tracker-params-default* duration) 0)
                (set! (-> *part-tracker-params-default* callback) #f)
                (set! (-> *part-tracker-params-default* userdata) (the-as uint #f))
                (set! (-> *part-tracker-params-default* target) #f)
                (set! (-> *part-tracker-params-default* mat-joint) *launch-matrix*)
                ((the-as (function object object object none) t9-5) a0-13 a1-5 *part-tracker-params-default*)
                )
              (-> gp-1 ppointer)
              )
            )
          )
        )
      )
    (let ((gp-2 (current-time)))
      (until (time-elapsed? gp-2 (-> self start-delay))
        (suspend)
        )
      )
    (go-virtual fall)
    )
  :post (behavior ()
    (scale-to-screen!
      (ppointer->process (-> self parent))
      (-> self root trans)
      (-> self screen-pos x)
      (-> self screen-pos y)
      )
    (spawn (-> self part) (-> self root trans))
    (matrix->quat (-> self parent 0 screen-matrix) (-> self root quat))
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate fall (pre-game-bubble)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (when (not (-> self dead?))
         (let ((v1-2 (-> self bubble-type)))
           (cond
             ((zero? v1-2)
              (sound-play "lock-icon-top")
              )
             ((= v1-2 1)
              (sound-play "lock-icon-right")
              )
             ((= v1-2 2)
              (sound-play "lock-icon-btm")
              )
             ((= v1-2 3)
              (sound-play "lock-icon-left")
              )
             )
           )
         (send-event (ppointer->process (-> self parent)) 'win)
         (let ((v1-21 (-> self bubble-type)))
           (cond
             ((logtest? (-> (cond
                              ((zero? v1-21)
                               (-> *part-group-id-table* 506)
                               )
                              ((= v1-21 1)
                               (-> *part-group-id-table* 507)
                               )
                              ((= v1-21 2)
                               (-> *part-group-id-table* 509)
                               )
                              (else
                                (-> *part-group-id-table* 508)
                                )
                              )
                            flags
                            )
                        (sp-group-flag sp13)
                        )
              (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
              (let ((gp-4 (get-process *default-dead-pool* part-tracker-subsampler #x4000 0)))
                (when gp-4
                  (let ((t9-10 (method-of-type part-tracker-subsampler activate)))
                    (t9-10
                      (the-as part-tracker-subsampler gp-4)
                      *entity-pool*
                      "part-tracker-subsampler"
                      (the-as pointer #x70004000)
                      )
                    )
                  (let ((t9-11 run-function-in-process)
                        (a0-30 gp-4)
                        (a1-8 part-tracker-subsampler-init)
                        )
                    (let ((v1-34 (-> self bubble-type)))
                      (set! (-> *part-tracker-subsampler-params-default* group) (cond
                                                                                  ((zero? v1-34)
                                                                                   (-> *part-group-id-table* 506)
                                                                                   )
                                                                                  ((= v1-34 1)
                                                                                   (-> *part-group-id-table* 507)
                                                                                   )
                                                                                  ((= v1-34 2)
                                                                                   (-> *part-group-id-table* 509)
                                                                                   )
                                                                                  (else
                                                                                    (-> *part-group-id-table* 508)
                                                                                    )
                                                                                  )
                            )
                      )
                    (set! (-> *part-tracker-subsampler-params-default* duration) 0)
                    (set! (-> *part-tracker-subsampler-params-default* callback) #f)
                    (set! (-> *part-tracker-subsampler-params-default* userdata) (the-as uint #f))
                    (set! (-> *part-tracker-subsampler-params-default* target) #f)
                    (set! (-> *part-tracker-subsampler-params-default* mat-joint) *launch-matrix*)
                    (set! (-> *part-tracker-subsampler-params-default* subsample-num) 1.0)
                    ((the-as (function object object object none) t9-11) a0-30 a1-8 *part-tracker-subsampler-params-default*)
                    )
                  (-> gp-4 ppointer)
                  )
                )
              )
             (else
               (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
               (let ((gp-5 (get-process *default-dead-pool* part-tracker #x4000 0)))
                 (when gp-5
                   (let ((t9-13 (method-of-type part-tracker activate)))
                     (t9-13 (the-as part-tracker gp-5) *entity-pool* "part-tracker" (the-as pointer #x70004000))
                     )
                   (let ((t9-14 run-function-in-process)
                         (a0-36 gp-5)
                         (a1-11 part-tracker-init)
                         )
                     (let ((v1-53 (-> self bubble-type)))
                       (set! (-> *part-tracker-params-default* group) (cond
                                                                        ((zero? v1-53)
                                                                         (-> *part-group-id-table* 506)
                                                                         )
                                                                        ((= v1-53 1)
                                                                         (-> *part-group-id-table* 507)
                                                                         )
                                                                        ((= v1-53 2)
                                                                         (-> *part-group-id-table* 509)
                                                                         )
                                                                        (else
                                                                          (-> *part-group-id-table* 508)
                                                                          )
                                                                        )
                             )
                       )
                     (set! (-> *part-tracker-params-default* duration) 0)
                     (set! (-> *part-tracker-params-default* callback) #f)
                     (set! (-> *part-tracker-params-default* userdata) (the-as uint #f))
                     (set! (-> *part-tracker-params-default* target) #f)
                     (set! (-> *part-tracker-params-default* mat-joint) *launch-matrix*)
                     ((the-as (function object object object none) t9-14) a0-36 a1-11 *part-tracker-params-default*)
                     )
                   (-> gp-5 ppointer)
                   )
                 )
               )
             )
           )
         (go empty-state)
         )
       )
      (('die)
       (set! (-> self dead?) #t)
       (go empty-state)
       )
      )
    )
  :code (behavior ()
    (while (and (< 10.0 (vector-length (-> self screen-pos))) (not (-> self dead?)))
      (suspend)
      )
    (set! (-> self dead?) #t)
    (let ((v1-8 (-> self bubble-type)))
      (cond
        ((logtest? (-> (cond
                         ((zero? v1-8)
                          (-> *part-group-id-table* 514)
                          )
                         ((= v1-8 1)
                          (-> *part-group-id-table* 515)
                          )
                         ((= v1-8 2)
                          (-> *part-group-id-table* 517)
                          )
                         (else
                           (-> *part-group-id-table* 516)
                           )
                         )
                       flags
                       )
                   (sp-group-flag sp13)
                   )
         (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
         (let ((gp-0 (get-process *default-dead-pool* part-tracker-subsampler #x4000 0)))
           (when gp-0
             (let ((t9-1 (method-of-type part-tracker-subsampler activate)))
               (t9-1
                 (the-as part-tracker-subsampler gp-0)
                 *entity-pool*
                 "part-tracker-subsampler"
                 (the-as pointer #x70004000)
                 )
               )
             (let ((t9-2 run-function-in-process)
                   (a0-7 gp-0)
                   (a1-2 part-tracker-subsampler-init)
                   )
               (let ((v1-21 (-> self bubble-type)))
                 (set! (-> *part-tracker-subsampler-params-default* group) (cond
                                                                             ((zero? v1-21)
                                                                              (-> *part-group-id-table* 514)
                                                                              )
                                                                             ((= v1-21 1)
                                                                              (-> *part-group-id-table* 515)
                                                                              )
                                                                             ((= v1-21 2)
                                                                              (-> *part-group-id-table* 517)
                                                                              )
                                                                             (else
                                                                               (-> *part-group-id-table* 516)
                                                                               )
                                                                             )
                       )
                 )
               (set! (-> *part-tracker-subsampler-params-default* duration) 0)
               (set! (-> *part-tracker-subsampler-params-default* callback) #f)
               (set! (-> *part-tracker-subsampler-params-default* userdata) (the-as uint #f))
               (set! (-> *part-tracker-subsampler-params-default* target) #f)
               (set! (-> *part-tracker-subsampler-params-default* mat-joint) *launch-matrix*)
               (set! (-> *part-tracker-subsampler-params-default* subsample-num) 1.0)
               ((the-as (function object object object none) t9-2) a0-7 a1-2 *part-tracker-subsampler-params-default*)
               )
             (-> gp-0 ppointer)
             )
           )
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
          (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000 0)))
            (when gp-1
              (let ((t9-4 (method-of-type part-tracker activate)))
                (t9-4 (the-as part-tracker gp-1) *entity-pool* "part-tracker" (the-as pointer #x70004000))
                )
              (let ((t9-5 run-function-in-process)
                    (a0-13 gp-1)
                    (a1-5 part-tracker-init)
                    )
                (let ((v1-40 (-> self bubble-type)))
                  (set! (-> *part-tracker-params-default* group) (cond
                                                                   ((zero? v1-40)
                                                                    (-> *part-group-id-table* 514)
                                                                    )
                                                                   ((= v1-40 1)
                                                                    (-> *part-group-id-table* 515)
                                                                    )
                                                                   ((= v1-40 2)
                                                                    (-> *part-group-id-table* 517)
                                                                    )
                                                                   (else
                                                                     (-> *part-group-id-table* 516)
                                                                     )
                                                                   )
                        )
                  )
                (set! (-> *part-tracker-params-default* duration) 0)
                (set! (-> *part-tracker-params-default* callback) #f)
                (set! (-> *part-tracker-params-default* userdata) (the-as uint #f))
                (set! (-> *part-tracker-params-default* target) #f)
                (set! (-> *part-tracker-params-default* mat-joint) *launch-matrix*)
                ((the-as (function object object object none) t9-5) a0-13 a1-5 *part-tracker-params-default*)
                )
              (-> gp-1 ppointer)
              )
            )
          )
        )
      )
    (sound-play "lose-icon")
    (send-event (ppointer->process (-> self parent)) 'done)
    (set! (-> self post-hook) #f)
    (let ((gp-3 (current-time)))
      (until (time-elapsed? gp-3 (seconds 0.2))
        (suspend)
        )
      )
    )
  :post (behavior ()
    (vector-normalize!
      (-> self screen-pos)
      (fmax 0.0 (- (vector-length (-> self screen-pos)) (* (-> self gravity) (seconds-per-frame))))
      )
    ((the-as (function none) (-> (method-of-object self idle) post)))
    )
  )

;; definition for function pre-game-bubble-init
;; INFO: Used lq/sq
(defbehavior pre-game-bubble-init pre-game-bubble ((arg0 entity-actor) (arg1 vector) (arg2 int) (arg3 time-frame) (arg4 float))
  (process-entity-set! self arg0)
  (sound-play "start-icon")
  (set-time! (-> self bubble-start-time))
  (set! (-> self bubble-type) arg2)
  (set! (-> self start-delay) arg3)
  (set! (-> self gravity) arg4)
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self screen-pos quad) (-> arg1 quad))
  (logclear! (-> self mask) (process-mask actor-pause))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-was-pre-bubble" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self dead?) #f)
  (set-vector! (-> self root scale) 0.04 0.04 0.04 1.0)
  (set-vector! (-> self draw color-mult) 0.0 0.0 0.0 0.0)
  (set-vector! (-> self draw color-emissive) 1.0 1.0 1.0 1.0)
  (set! (-> self part) (create-launch-control
                         (cond
                           ((zero? arg2)
                            (setup-masks (-> self draw) 0 11)
                            (-> *part-group-id-table* 502)
                            )
                           ((= arg2 1)
                            (setup-masks (-> self draw) 0 14)
                            (-> *part-group-id-table* 503)
                            )
                           ((= arg2 2)
                            (setup-masks (-> self draw) 0 7)
                            (-> *part-group-id-table* 505)
                            )
                           (else
                             (setup-masks (-> self draw) 0 13)
                             (-> *part-group-id-table* 504)
                             )
                           )
                         self
                         )
        )
  (set! (-> self event-hook) (-> (method-of-type pre-game-bubble idle) event))
  (go-virtual idle)
  )

;; failed to figure out what this is:
(defskelgroup skel-was-pre-game neo-satellite-fma neo-satellite-fma-lod0-jg neo-satellite-fma-idle-ja
              ((neo-satellite-fma-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -3 0 9)
              :origin-joint-index 3
              )

;; definition for method 33 of type was-pre-game
;; WARN: Return type mismatch int vs none.
(defmethod set-last-speech-at-idx ((this was-pre-game) (arg0 int) (arg1 int))
  (set! (-> this speech-last arg0) (mod (+ (-> this speech-last arg0) (rand-vu-int-range 1 2)) arg1))
  (none)
  )

;; definition for method 7 of type was-pre-game
;; WARN: Return type mismatch process-drawable vs was-pre-game.
(defmethod relocate ((this was-pre-game) (offset int))
  (if (nonzero? (-> this task))
      (&+! (-> this task) offset)
      )
  (the-as was-pre-game ((method-of-type process-drawable relocate) this offset))
  )

;; definition for method 26 of type was-pre-game
;; WARN: Return type mismatch int vs none.
(defmethod handle-pad-input ((this was-pre-game))
  (dotimes (s5-0 4)
    (let ((s4-0 (-> this beam s5-0)))
      (when (and (time-elapsed? (-> s4-0 fire-time) (seconds 0.02)) (let ((v1-6 (-> s4-0 index)))
                                                                      (cond
                                                                        ((zero? v1-6)
                                                                         (cpad-pressed? 0 triangle)
                                                                         )
                                                                        ((= v1-6 1)
                                                                         (cpad-pressed? 0 circle)
                                                                         )
                                                                        ((= v1-6 2)
                                                                         (cpad-pressed? 0 x)
                                                                         )
                                                                        (else
                                                                          (cpad-pressed? 0 square)
                                                                          )
                                                                        )
                                                                      )
                 )
        (set-time! (-> this beam s5-0 fire-time))
        (send-event (handle->process (-> this beam s5-0 beam)) 'attack)
        (sound-play "beam-fire")
        (let ((s2-1 (-> this child))
              (s3-1 0)
              )
          (while s2-1
            (let* ((s0-0 (ppointer->process s2-1))
                   (s1-0 (if (type? s0-0 pre-game-bubble)
                             (the-as pre-game-bubble s0-0)
                             )
                         )
                   )
              (when (and s1-0 (type? s1-0 pre-game-bubble) (= (-> s1-0 bubble-type) (-> s4-0 index)))
                (let ((f0-1 (* 0.01 (vector-length (-> s1-0 screen-pos)))))
                  (when (and (not (time-elapsed? (-> s4-0 fire-time) (seconds 0.02)))
                             (>= f0-1 (+ -0.15 (-> s4-0 min)))
                             (>= (+ 0.06 (-> s4-0 size) (-> s4-0 min)) f0-1)
                             )
                    (if (send-event s1-0 'attack)
                        (+! s3-1 1)
                        )
                    )
                  )
                )
              )
            (set! s2-1 (-> s2-1 0 brother))
            )
          (cond
            ((zero? s3-1)
             (sound-play "beam-miss")
             (set-time! (-> this miss-time))
             (+! (-> this miss-count) 1)
             )
            ((< 1 s3-1)
             (+! (-> this score) (the float (* s3-1 s3-1)))
             )
            )
          )
        )
      )
    )
  (when (and *cheat-mode* (cpad-pressed? 0 up))
    (set! (-> this event-index) (-> this event-count))
    (set! (-> this event-start-time) 0)
    0
    )
  (logclear!
    (-> *cpad-list* cpads 0 button0-abs 0)
    (pad-buttons up right down left l1 r1 triangle circle x square)
    )
  (logclear!
    (-> *cpad-list* cpads 0 button0-rel 0)
    (pad-buttons up right down left l1 r1 triangle circle x square)
    )
  0
  (none)
  )

;; definition for method 28 of type was-pre-game
;; WARN: Return type mismatch int vs none.
(defmethod start-next-wave ((this was-pre-game) (arg0 was-pre-game-wave))
  (set! (-> this event-index) 0)
  (set! (-> this event-count) (rand-vu-int-range (-> arg0 event-count-min) (-> arg0 event-count-max)))
  (set-time! (-> this wave-start-time))
  (set! (-> this event-start-time) 0)
  (dotimes (s4-0 4)
    (set! (-> this beam s4-0 size) (rand-vu-float-range (-> arg0 beam-size-min) (-> arg0 beam-size-max)))
    (set! (-> this beam s4-0 fire-time) 0)
    )
  0
  (none)
  )

;; definition for method 27 of type was-pre-game
;; INFO: Used lq/sq
(defmethod update-game-state ((this was-pre-game))
  (local-vars
    (sv-32 function)
    (sv-48 process)
    (sv-64 (function entity-actor vector int time-frame float object :behavior pre-game-bubble))
    (sv-80 entity-actor)
    (sv-96 int)
    )
  (+! (-> this beam-clock) (* 300.0 (seconds-per-frame)))
  (dotimes (s5-0 4)
    (set! (-> this beam s5-0 min) (+ 0.4 (* 0.2 (sin (* 36.40889 (-> this beam-clock))))))
    )
  (when (>= (-> this event-index) (-> this event-count))
    (if (not (time-elapsed? (-> this event-start-time) (the-as time-frame (-> this game wave (-> this wave-index) delay)))
             )
        (return (the-as int #f))
        )
    (sound-play "load-icon")
    (+! (-> this wave-index) 1)
    (if (< (-> this game wave (-> this wave-index) event-count-min) 0)
        (+! (-> this wave-index) -1)
        )
    (start-next-wave this (-> this game wave (-> this wave-index)))
    )
  (let ((s5-2 (-> this game wave (-> this wave-index))))
    (when (time-elapsed? (-> this event-start-time) (the-as time-frame (-> s5-2 event-interval)))
      (set-time! (-> this event-start-time))
      (let ((s4-2 (min 4 (rand-vu-int-range (-> s5-2 bubble-count-min) (-> s5-2 bubble-count-max))))
            (s3-0 0)
            )
        (while (nonzero? s4-2)
          (+! s4-2 -1)
          (set-time! (-> this spawn-time))
          (let ((s2-0 (new 'stack-no-clear 'vector))
                (s1-0 (rand-vu-int-range 0 3))
                )
            (while (logtest? (ash 1 s1-0) s3-0)
              (set! s1-0 (rand-vu-int-range 0 3))
              )
            (set! s3-0 (logior s3-0 (ash 1 s1-0)))
            (let ((v1-50 (cond
                           ((logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                            (case s1-0
                              ((1)
                               3
                               )
                              ((3)
                               1
                               )
                              (else
                                s1-0
                                )
                              )
                            )
                           (else
                             s1-0
                             )
                           )
                         )
                  )
              (cond
                ((zero? v1-50)
                 (set-vector! s2-0 0.0 90.0 0.0 1.0)
                 )
                ((= v1-50 1)
                 (set-vector! s2-0 90.0 0.0 0.0 1.0)
                 )
                ((= v1-50 2)
                 (set-vector! s2-0 0.0 -90.0 0.0 1.0)
                 )
                ((= v1-50 3)
                 (set-vector! s2-0 -90.0 0.0 0.0 1.0)
                 )
                )
              )
            (let ((s0-0 (get-process *default-dead-pool* pre-game-bubble #x4000 1)))
              (when s0-0
                (let ((t9-8 (method-of-type pre-game-bubble activate)))
                  (t9-8 (the-as pre-game-bubble s0-0) this "pre-game-bubble" (the-as pointer #x70004000))
                  )
                (set! sv-32 run-function-in-process)
                (set! sv-48 s0-0)
                (set! sv-64 pre-game-bubble-init)
                (set! sv-80 (-> this entity))
                (set! sv-96 0)
                (let ((t2-1 (rand-vu-float-range (-> s5-2 gravity-min) (-> s5-2 gravity-max))))
                  ((the-as (function object object object object object object object none) sv-32)
                   sv-48
                   sv-64
                   sv-80
                   s2-0
                   s1-0
                   sv-96
                   t2-1
                   )
                  )
                (-> s0-0 ppointer)
                )
              )
            )
          )
        )
      (+! (-> this event-index) 1)
      )
    )
  0
  )

;; definition for method 30 of type was-pre-game
;; WARN: Return type mismatch int vs none.
(defmethod update-score ((this was-pre-game))
  (cond
    ((>= (-> *game-info* score) (-> this score))
     (set! (-> *game-info* score) (-> this score))
     )
    ((and (< (-> *game-info* score) (-> this score)) (time-elapsed? (-> this score-time) (seconds 0.1)))
     (sound-play "point-increase")
     (seek! (-> *game-info* score) (-> this score) 1.0)
     (set-time! (-> this score-time))
     )
    )
  (when (!= (-> *game-info* miss) (the float (-> this miss-count)))
    (sound-play "point-decrease")
    (seek! (-> *game-info* miss) (the float (-> this miss-count)) 1.0)
    (set-time! (-> this miss-time))
    )
  (let ((f30-0 (-> this score)))
    (cond
      ((not (task-node-closed? (game-task-node wascity-pre-game-resolution)))
       )
      ((not (task-node-closed? (game-task-node wascity-pre-game-bronze)))
       (when (>= f30-0 (game-info-method-31 *game-info* 1 1))
         (sound-play-by-spec (static-sound-spec "skill-pickup" :group 0 :fo-curve 1) (new-sound-id) (the-as vector #t))
         (script-eval '(birth-pickup ("power-game-2" "screen") skill FACT_SUPER_SKILL_INC flags (suck-in)))
         (task-node-close! (game-task-node wascity-pre-game-bronze) 'event)
         (set! (-> *game-info* goal) (game-info-method-31 *game-info* 1 2))
         (let ((v1-39 (the-as hud (handle->process (-> this hud-goal)))))
           (when v1-39
             (let ((gp-1 format)
                   (s5-3 (clear (-> v1-39 strings 1 text)))
                   (s4-3 "~S")
                   )
               (format (clear *temp-string*) (lookup-text! *common-text* (text-id text-0138) #f))
               (gp-1 s5-3 s4-3 *temp-string*)
               )
             )
           )
         )
       )
      ((not (task-node-closed? (game-task-node wascity-pre-game-silver)))
       (when (>= f30-0 (game-info-method-31 *game-info* 1 2))
         (sound-play-by-spec (static-sound-spec "skill-pickup" :group 0 :fo-curve 1) (new-sound-id) (the-as vector #t))
         (script-eval '(birth-pickup ("power-game-2" "screen") skill FACT_SUPER_SKILL_INC flags (suck-in)))
         (task-node-close! (game-task-node wascity-pre-game-silver) 'event)
         (set! (-> *game-info* goal) (game-info-method-31 *game-info* 1 3))
         (let ((v1-53 (the-as hud (handle->process (-> this hud-goal)))))
           (when v1-53
             (let ((gp-2 format)
                   (s5-5 (clear (-> v1-53 strings 1 text)))
                   (s4-5 "~S")
                   )
               (format (clear *temp-string*) (lookup-text! *common-text* (text-id text-0137) #f))
               (gp-2 s5-5 s4-5 *temp-string*)
               )
             )
           )
         )
       )
      ((not (task-node-closed? (game-task-node wascity-pre-game-gold)))
       (when (>= f30-0 (game-info-method-31 *game-info* 1 3))
         (sound-play-by-spec (static-sound-spec "skill-pickup" :group 0 :fo-curve 1) (new-sound-id) (the-as vector #t))
         (script-eval '(birth-pickup ("power-game-2" "screen") skill FACT_SUPER_SKILL_INC flags (suck-in)))
         (task-node-close! (game-task-node wascity-pre-game-gold) 'event)
         (send-event (handle->process (-> this hud-goal)) 'hide-and-die)
         )
       )
      )
    )
  0
  (none)
  )

;; definition for method 29 of type was-pre-game
;; WARN: Return type mismatch int vs none.
(defmethod pre-game-post ((this was-pre-game))
  (update-score this)
  (update-screen this)
  0
  (none)
  )

;; definition for method 32 of type was-pre-game
(defmethod scale-to-screen! ((this was-pre-game) (arg0 vector) (arg1 float) (arg2 float))
  (let ((v1-0 (new 'stack-no-clear 'vector)))
    (set! (-> v1-0 x) (* arg1 (-> this screen-scale x)))
    (set! (-> v1-0 y) (* arg2 (-> this screen-scale y)))
    (set! (-> v1-0 z) 0.0)
    (set! (-> v1-0 w) 1.0)
    (vector-matrix*! arg0 v1-0 (-> this screen-matrix))
    )
  )

;; definition for method 9 of type was-pre-beam-info
(defmethod get-beam-color ((this was-pre-beam-info))
  (cond
    ((time-elapsed? (-> this fire-time) (seconds 0.02))
     (the-as uint #xffffff00)
     )
    ((time-elapsed? (-> this fire-time) (seconds 0.02))
     (the-as uint #xff808080)
     )
    (else
      (the-as uint #xff0000ff)
      )
    )
  )

;; definition for method 31 of type was-pre-game
;; WARN: Return type mismatch int vs none.
(defmethod update-screen ((this was-pre-game))
  (let ((a1-1 (matrix-rotate-y! (new 'stack-no-clear 'matrix) 16384.0)))
    (set! (-> a1-1 trans x) 40.96)
    (matrix*! (-> this screen-matrix) a1-1 (-> this node-list data 14 bone transform))
    )
  (format *stdebug* "~%~%wave ~3d event ~3d~%" (-> this wave-index) (-> this event-index))
  (scale-to-screen! this (new 'stack-no-clear 'vector) -100.0 -100.0)
  (scale-to-screen! this (new 'stack-no-clear 'vector) 100.0 -100.0)
  (scale-to-screen! this (new 'stack-no-clear 'vector) 100.0 100.0)
  (scale-to-screen! this (new 'stack-no-clear 'vector) -100.0 100.0)
  0
  0
  (none)
  )

;; failed to figure out what this is:
(defstate hide (was-pre-game)
  :virtual #t
  :trans (behavior ()
    (case (-> (get-current-task-event (-> self task)) action)
      (((game-task-action idle) (game-task-action talk))
       (go-virtual idle)
       )
      (((game-task-action play))
       (go-virtual wait-for-start)
       )
      )
    )
  :code (behavior ()
    (setup-masks (-> self draw) 0 2)
    (ja-channel-set! 0)
    (ja-post)
    (sleep-code)
    )
  )

;; failed to figure out what this is:
(defstate idle (was-pre-game)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (if (< (vector-vector-distance (-> self draw origin) (math-camera-pos)) (-> self draw origin w))
        (logclear! (-> self draw status) (draw-control-status force-vu1))
        (logior! (-> self draw status) (draw-control-status force-vu1))
        )
    (case (-> (get-current-task-event (-> self task)) action)
      (((game-task-action hide))
       (go-virtual hide)
       )
      (((game-task-action play))
       (go-virtual wait-for-start)
       )
      (((game-task-action talk))
       (let ((a0-11 (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data 14))))
         (when (and (time-elapsed? (-> self state-time) (seconds 3))
                    (and (and *target* (and (>= 20480.0 (vector-vector-distance a0-11 (-> *target* control trans)))
                                            (not (logtest? (focus-status teleporting) (-> *target* focus-status)))
                                            )
                              )
                         (not (focus-test? *target* in-head pole flut light board pilot dark))
                         (can-display-query? self "game" -99.0)
                         )
                    )
           (let ((gp-1
                   (new 'stack 'font-context *font-default-matrix* 32 320 0.0 (font-color default) (font-flags shadow kerning))
                   )
                 )
             (let ((v1-29 gp-1))
               (set! (-> v1-29 width) (the float 340))
               )
             (let ((v1-30 gp-1))
               (set! (-> v1-30 height) (the float 80))
               )
             (let ((v1-31 gp-1)
                   (a0-21 (-> *setting-control* user-default language))
                   )
               (set! (-> v1-31 scale) (if (or (= a0-21 (language-enum korean)) (= a0-21 (language-enum russian)))
                                          0.9
                                          0.7
                                          )
                     )
               )
             (set! (-> gp-1 flags) (font-flags shadow kerning large))
             (print-game-text
               (lookup-text! *common-text* (text-id text-0087) #f)
               gp-1
               #f
               44
               (bucket-id hud-draw-hud-alpha)
               )
             )
           (if (cpad-pressed? 0 triangle)
               (go-virtual wait-for-start)
               )
           )
         )
       )
      )
    )
  :code (behavior ()
    (setup-masks (-> self draw) 0 2)
    (ja-channel-push! 1 (seconds 0.05))
    (until #f
      (cond
        ((task-node-closed? (game-task-node wascity-pre-game-introduction))
         (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         )
        (else
          (ja-no-eval :group! (-> self draw art-group data 3) :num! (seek!) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!))
            )
          )
        )
      )
    #f
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate wait-for-start (was-pre-game)
  :virtual #t
  :code (behavior ()
    (setup-masks (-> self draw) 2 0)
    (while (or (not *target*) (not (process-grab? *target* #f)))
      (suspend)
      )
    (send-event *target* 'draw #f)
    (go-virtual active #t)
    )
  )

;; failed to figure out what this is:
(defstate active (was-pre-game)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('done)
       (set-time! (-> self miss-time))
       (let ((v0-0 (the-as number (+ (-> self miss-count) 1))))
         (set! (-> self miss-count) (the-as int v0-0))
         v0-0
         )
       )
      (('win)
       (if (time-elapsed? (-> self score-time) (seconds 0.25))
           (set! (-> self score-time) (+ (current-time) (seconds 0.25)))
           )
       (set! (-> self score) (+ 1.0 (-> self score)))
       )
      )
    )
  :enter (behavior ((arg0 symbol))
    (set-time! (-> self state-time))
    (when arg0
      (sound-play "zoom-in")
      (add-connection
        *task-manager-engine*
        self
        nothing
        self
        (-> *game-info* sub-task-list (game-task-node wascity-pre-game-resolution))
        #f
        )
      (let ((a0-5 (entity-by-name (res-lump-struct (-> self entity) 'camera-name string))))
        (if a0-5
            (add-32bit-data!
              a0-5
              (new 'static 'res-tag :name 'fov :key-frame -1000000000.0 :elt-count #x1 :elt-type float)
              (if (= (-> *setting-control* user-default aspect-ratio) 'aspect16x9)
                  #x461c71c7
                  #x45e2ea3d
                  )
              )
            )
        )
      (add-setting! 'music 'waspgame 0.0 0)
      (set-setting! 'entity-name (res-lump-struct (-> self entity) 'camera-name structure) 0.0 0)
      (set-setting! 'airlock #f 0.0 0)
      (set-setting! 'minimap 'clear 0.0 (minimap-flag minimap))
      (case (-> self task actor)
        (((game-task-actor was-pre-game-wascityb))
         (set-setting! 'extra-bank '((wascity3 wasgame1)) 0.0 0)
         )
        (((game-task-actor was-pre-game-deserte))
         (set-setting! 'extra-bank '((desert2 wasgame1)) 0.0 0)
         )
        )
      (set! (-> self hud-score)
            (ppointer->handle (process-spawn hud-big-score :init hud-init-by-other :name "hud-big-score" :to self))
            )
      (set! (-> self hud-miss)
            (ppointer->handle (process-spawn hud-miss :init hud-init-by-other :name "hud-miss" :to self))
            )
      (let ((s5-2 #t)
            (gp-5 (lookup-text! *common-text* (text-id text-0136) #f))
            )
        (cond
          ((< 0.0 (-> self point-win))
           )
          ((not (task-node-closed? (game-task-node wascity-pre-game-bronze)))
           (set! (-> *game-info* goal) (game-info-method-31 *game-info* 1 1))
           (set! gp-5 (lookup-text! *common-text* (text-id text-0139) #f))
           )
          ((not (task-node-closed? (game-task-node wascity-pre-game-silver)))
           (set! (-> *game-info* goal) (game-info-method-31 *game-info* 1 2))
           (set! gp-5 (lookup-text! *common-text* (text-id text-0138) #f))
           )
          ((not (task-node-closed? (game-task-node wascity-pre-game-gold)))
           (set! (-> *game-info* goal) (game-info-method-31 *game-info* 1 3))
           (set! gp-5 (lookup-text! *common-text* (text-id text-0137) #f))
           )
          (else
            (set! s5-2 #f)
            )
          )
        (when s5-2
          (set! (-> self hud-goal)
                (ppointer->handle (process-spawn hud-goal :init hud-init-by-other :name "hud-goal" :to self))
                )
          (let ((v1-66 (the-as hud (handle->process (-> self hud-goal)))))
            (if v1-66
                (format (clear (-> v1-66 strings 1 text)) "~S" gp-5)
                )
            )
          )
        )
      (set-time! (-> self game-start-time))
      (set! (-> self wave-index) 0)
      (start-next-wave self (-> self game wave (-> self wave-index)))
      (set-time! (-> self event-start-time))
      (send-event *target* 'draw #f)
      (set-setting! 'gun #f 0.0 0)
      (set-setting! 'calm #t 0.0 0)
      (set-setting! 'gem #f 0.0 0)
      (set-setting! 'citizen-fights #f 0.0 0)
      (talker-spawn-func (-> *talker-speech* 84) *entity-pool* (target-pos 0) (the-as region #f))
      )
    )
  :exit (behavior ()
    (when (not (and (-> self next-state) (let ((v1-3 (-> self next-state name)))
                                           (or (= v1-3 'active) (= v1-3 'win) (= v1-3 'lose))
                                           )
                    )
               )
      (format #t "score of ~f~%" (-> self score))
      (let ((gp-0 (-> self child)))
        (while gp-0
          (if (type? (ppointer->process gp-0) pre-game-bubble)
              (send-event (ppointer->process gp-0) 'die)
              )
          (set! gp-0 (-> gp-0 0 brother))
          )
        )
      (remove-from-process *task-manager-engine* self)
      (remove-setting! 'music)
      (send-event (handle->process (-> self hud-score)) 'hide-and-die)
      (send-event (handle->process (-> self hud-miss)) 'hide-and-die)
      (send-event (handle->process (-> self hud-goal)) 'hide-and-die)
      (remove-setting! 'entity-name)
      (if (and *target* (focus-test? *target* grabbed))
          (process-release? *target*)
          )
      (remove-setting! 'airlock)
      (remove-setting! 'borrow)
      (remove-setting! 'minimap)
      (remove-setting! 'gun)
      (remove-setting! 'calm)
      (remove-setting! 'gem)
      (remove-setting! 'fov)
      (remove-setting! 'citizen-fights)
      (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
      (remove-setting! 'extra-bank)
      (send-event *target* 'draw #t)
      (game-info-method-27 *game-info* (game-score gs0) (-> self score))
      (logclear!
        (-> *cpad-list* cpads 0 button0-abs 0)
        (pad-buttons up right down left l1 r1 triangle circle x square)
        )
      (logclear!
        (-> *cpad-list* cpads 0 button0-rel 0)
        (pad-buttons up right down left l1 r1 triangle circle x square)
        )
      )
    )
  :trans (behavior ()
    (cond
      ((or (and *cheat-mode* (cpad-pressed? 0 l1)) (>= (-> self miss-count) (-> self miss-max)))
       (go-virtual lose)
       )
      ((or (and *cheat-mode* (cpad-pressed? 0 r1))
           (and (< 0.0 (-> self point-win))
                (>= (-> self score) (-> self point-win))
                (not (task-node-closed? (game-task-node wascity-pre-game-resolution)))
                )
           )
       (go-virtual win)
       )
      )
    (let ((v1-19 *was-squad-control*))
      (set! (-> v1-19 reserve-count) 0)
      (set! (-> v1-19 target-count) 0)
      )
    0
    (when (time-elapsed? (-> self state-time) (seconds 2))
      (handle-pad-input self)
      (update-game-state self)
      )
    )
  :code (behavior ((arg0 symbol))
    (setup-masks (-> self draw) 2 0)
    (ja-channel-push! 1 (seconds 0.05))
    (until #f
      (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (pre-game-post self)
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate lose (was-pre-game)
  :virtual #t
  :exit (-> (method-of-type was-pre-game active) exit)
  :code (behavior ()
    (let* ((v1-2 (-> *game-info* sub-task-list (game-task-node wascity-pre-game-resolution)))
           (gp-0 (if (-> v1-2 manager)
                     (-> v1-2 manager manager)
                     (the-as handle #f)
                     )
                 )
           )
      (cond
        ((handle->process gp-0)
         (send-event (handle->process gp-0) 'fail)
         (while (handle->process gp-0)
           (suspend)
           )
         )
        (else
          (auto-save-user)
          (ja-channel-set! 0)
          (ja-post)
          (set-blackout-frames (seconds 0.2))
          )
        )
      )
    )
  :post (behavior ()
    (update-screen self)
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate win (was-pre-game)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (v0-0 draw-control-status))
    (case message
      (('draw)
       (cond
         ((-> block param 0)
          (set! v0-0 (logclear (-> self draw status) (draw-control-status no-draw)))
          (set! (-> self draw status) v0-0)
          )
         (else
           (set! v0-0 (logior (-> self draw status) (draw-control-status no-draw)))
           (set! (-> self draw status) v0-0)
           )
         )
       v0-0
       )
      )
    )
  :exit (-> (method-of-type was-pre-game active) exit)
  :code (behavior ()
    (let* ((v1-2 (-> *game-info* sub-task-list (game-task-node wascity-pre-game-resolution)))
           (gp-0 (if (-> v1-2 manager)
                     (-> v1-2 manager manager)
                     (the-as handle #f)
                     )
                 )
           )
      (send-event (handle->process gp-0) 'complete)
      (ja-channel-set! 0)
      (ja-post)
      (while (-> self child)
        (deactivate (-> self child 0))
        )
      (set-blackout-frames (seconds 0.2))
      (cond
        ((handle->process gp-0)
         )
        (else
          (auto-save-user)
          )
        )
      (while (handle->process gp-0)
        (suspend)
        )
      )
    )
  :post (-> (method-of-type was-pre-game lose) post)
  )

;; definition for method 11 of type was-pre-game
(defmethod init-from-entity! ((this was-pre-game) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) cshape-reaction-default)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 5) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 6))
      (set! (-> s3-0 prim-core collide-as) (collide-spec obstacle obstacle-for-jak))
      (set! (-> s3-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s3-0 prim-core action) (collide-action solid no-standon))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 40960.0)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec obstacle obstacle-for-jak))
      (set! (-> v1-13 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-13 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-13 transform-index) 3)
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 4) (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec obstacle obstacle-for-jak))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-15 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-15 transform-index) 24)
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 3) (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec obstacle obstacle-for-jak))
      (set! (-> v1-17 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-17 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-17 transform-index) 25)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 2) (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec obstacle obstacle-for-jak))
      (set! (-> v1-19 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-19 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-19 transform-index) 26)
      (set-vector! (-> v1-19 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-as) (collide-spec obstacle obstacle-for-jak))
      (set! (-> v1-21 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-21 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-21 transform-index) 28)
      (set-vector! (-> v1-21 local-sphere) 0.0 0.0 0.0 20480.0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-24 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-24 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-24 prim-core collide-with))
      )
    (set! (-> this root) s4-0)
    )
  (let ((a1-14 (entity-by-name "scene-stage-120"))
        (t9-9 process-drawable-from-entity!)
        (a0-37 this)
        )
    (set! a1-14 (cond
                  (a1-14
                    (empty)
                    a1-14
                    )
                  (else
                    arg0
                    )
                  )
          )
    (t9-9 a0-37 (the-as entity-actor a1-14))
    )
  (logclear! (-> this mask) (process-mask actor-pause))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-was-pre-game" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logior! (-> this draw global-effect) (draw-control-global-effect rim-lights2))
  (set! (-> this hud-score) (the-as handle #f))
  (set! (-> this hud-goal) (the-as handle #f))
  (set! (-> this hud-miss) (the-as handle #f))
  (dotimes (v1-35 4)
    (set! (-> this speech-last v1-35) 0)
    )
  (set! (-> this task)
        (new 'process 'game-task-control (res-lump-value arg0 'task-actor game-task-actor :time -1000000000.0))
        )
  (set! (-> this screen-scale x) 28.671999)
  (set! (-> this screen-scale y) 20.48)
  (let ((v1-43 (-> this task actor)))
    (set! (-> this game) (if (= v1-43 (game-task-actor was-pre-game-wascityb))
                             *pre-game*
                             *pre-game-fun*
                             )
          )
    )
  (set! (-> this miss-max) (the int (-> this game miss-max)))
  (set! (-> this point-win) (-> this game point-win))
  (set! (-> *game-info* score) 0.0)
  (set! (-> *game-info* goal) (-> this point-win))
  (set! (-> *game-info* miss) 0.0)
  (set! (-> *game-info* miss-max) (the float (-> this miss-max)))
  (dotimes (s4-3 4)
    (set! (-> this beam s4-3 index) s4-3)
    (set! (-> this beam s4-3 min) 0.4)
    (set! (-> this beam s4-3 size) 0.1)
    (set! (-> this beam s4-3 beam)
          (ppointer->handle
            (process-spawn was-pre-beam :init was-pre-beam-init s4-3 arg0 :name "was-pre-beam" :to this)
            )
          )
    )
  (set! (-> this heart)
        (ppointer->handle (process-spawn was-pre-heart :init was-pre-heart-init arg0 :name "was-pre-heart" :to this))
        )
  (set! *was-pre-game* (the-as (pointer was-pre-game) (process->ppointer this)))
  (go (method-of-object this hide))
  )

;; failed to figure out what this is:
(defstate idle (was-pre-beam)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (go-virtual attack)
       )
      )
    )
  :code (behavior ()
    (set-vector! (-> self draw color-emissive) 0.4 0.4 0.8 1.0)
    (ja-channel-push! 1 (seconds 0.05))
    (until #f
      (ja-no-eval :group! neo-satellite-game-ring-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    (sleep-code)
    )
  :post (behavior ()
    (matrix->quat (-> self parent 0 screen-matrix) (-> self root quat))
    (let ((a1-1 (-> self parent 0 beam (-> self index)))
          (v1-6 (new 'stack-no-clear 'vector))
          )
      (let ((a0-7 (cond
                    ((logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                     (case (-> self index)
                       ((1)
                        3
                        )
                       ((3)
                        1
                        )
                       (else
                         (-> self index)
                         )
                       )
                     )
                    (else
                      (-> self index)
                      )
                    )
                  )
            )
        (cond
          ((zero? a0-7)
           (set-vector! v1-6 0.0 (* 90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 1.0)
           )
          ((= a0-7 1)
           (set-vector! v1-6 (* 90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 0.0 1.0)
           )
          ((= a0-7 2)
           (set-vector! v1-6 0.0 (* -90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 1.0)
           )
          ((= a0-7 2)
           (set-vector! v1-6 0.0 (* 90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 1.0)
           )
          ((= a0-7 3)
           (set-vector! v1-6 (* -90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 0.0 1.0)
           )
          )
        )
      (scale-to-screen! (-> self parent 0) (-> self root trans) (-> v1-6 x) (-> v1-6 y))
      )
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate attack (was-pre-beam)
  :virtual #t
  :code (behavior ()
    (set-vector! (-> self draw color-emissive) 1.0 0.0 0.0 1.0)
    (ja-channel-push! 1 (seconds 0.05))
    (ja-no-eval :group! neo-satellite-game-ring-attack-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set-vector! (-> self draw color-emissive) 1.0 1.0 1.0 1.0)
    (go-virtual idle)
    )
  :post (behavior ()
    (matrix->quat (-> self parent 0 screen-matrix) (-> self root quat))
    (let ((a1-1 (-> self parent 0 beam (-> self index)))
          (v1-6 (new 'stack-no-clear 'vector))
          )
      (let ((a0-7 (cond
                    ((logtest? (-> *game-info* secrets) (game-secrets hflip-screen))
                     (case (-> self index)
                       ((1)
                        3
                        )
                       ((3)
                        1
                        )
                       (else
                         (-> self index)
                         )
                       )
                     )
                    (else
                      (-> self index)
                      )
                    )
                  )
            )
        (cond
          ((zero? a0-7)
           (set-vector! v1-6 0.0 (* 90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 1.0)
           )
          ((= a0-7 1)
           (set-vector! v1-6 (* 90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 0.0 1.0)
           )
          ((= a0-7 2)
           (set-vector! v1-6 0.0 (* -90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 1.0)
           )
          ((= a0-7 3)
           (set-vector! v1-6 (* -90.0 (+ (-> a1-1 min) (* 0.5 (-> a1-1 size)))) 0.0 0.0 1.0)
           )
          )
        )
      (scale-to-screen! (-> self parent 0) (-> self root trans) (-> v1-6 x) (-> v1-6 y))
      )
    (ja-post)
    )
  )

;; definition for function was-pre-beam-init
(defbehavior was-pre-beam-init was-pre-beam ((arg0 int) (arg1 entity-actor))
  (process-entity-set! self arg1)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self index) arg0)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-was-pre-beam" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set-vector! (-> self root scale) 0.06 0.06 0.06 1.0)
  (set-vector! (-> self draw color-mult) 0.0 0.0 0.0 0.0)
  (go-virtual idle)
  )

;; failed to figure out what this is:
(defstate idle (was-pre-heart)
  :virtual #t
  :code (behavior ()
    (until #f
      (let* ((v1-2 (-> self parent 0 miss-count))
             (a0-0 v1-2)
             )
        (cond
          ((zero? a0-0)
           (ja-no-eval :group! neo-satellite-heart-idle0-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          ((= a0-0 1)
           (when (< (-> self cur-level) v1-2)
             (ja-channel-push! 1 (seconds 0.1))
             (ja-no-eval :group! neo-satellite-heart-grow0-ja :num! (seek!) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek!))
               )
             (+! (-> self cur-level) 1)
             )
           (ja-no-eval :group! neo-satellite-heart-idle1-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          ((= a0-0 2)
           (when (< (-> self cur-level) v1-2)
             (ja-channel-push! 1 (seconds 0.1))
             (ja-no-eval :group! neo-satellite-heart-grow1-ja :num! (seek!) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek!))
               )
             (+! (-> self cur-level) 1)
             )
           (ja-no-eval :group! neo-satellite-heart-idle2-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          ((= a0-0 3)
           (when (< (-> self cur-level) v1-2)
             (ja-channel-push! 1 (seconds 0.1))
             (ja-no-eval :group! neo-satellite-heart-grow2-ja :num! (seek!) :frame-num 0.0)
             (until (ja-done? 0)
               (suspend)
               (ja :num! (seek!))
               )
             (+! (-> self cur-level) 1)
             )
           (ja-no-eval :group! neo-satellite-heart-idle3-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          (else
            (when (< (-> self cur-level) 4)
              (ja-channel-push! 1 (seconds 0.1))
              (ja-no-eval :group! neo-satellite-heart-grow3-ja :num! (seek!) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              (+! (-> self cur-level) 1)
              )
            (ja-no-eval :group! neo-satellite-heart-idle4-ja :num! (seek!) :frame-num 0.0)
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek!))
              )
            )
          )
        )
      )
    #f
    )
  :post (behavior ()
    (matrix->quat (-> self parent 0 screen-matrix) (-> self root quat))
    (matrix->trans (-> self parent 0 screen-matrix) (-> self root trans))
    (ja-post)
    )
  )

;; definition for function was-pre-heart-init
(defbehavior was-pre-heart-init was-pre-heart ((arg0 entity-actor))
  (process-entity-set! self arg0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-was-pre-heart" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set-vector! (-> self draw color-mult) 0.0 0.0 0.0 0.0)
  (set-vector! (-> self draw color-emissive) 1.0 1.0 1.0 1.0)
  (go-virtual idle)
  )




