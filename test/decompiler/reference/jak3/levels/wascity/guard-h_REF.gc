;;-*-Lisp-*-
(in-package goal)

;; definition of type guard-anim-info
(deftype guard-anim-info (structure)
  ((anim-index        int32  2)
   (anim-index-front  int32  :overlay-at (-> anim-index 0))
   (anim-index-back   int32  :overlay-at (-> anim-index 1))
   )
  :pack-me
  )

;; definition for method 3 of type guard-anim-info
(defmethod inspect ((this guard-anim-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'guard-anim-info)
  (format #t "~1Tanim-index[2] @ #x~X~%" (-> this anim-index))
  (format #t "~1Tanim-index-front: ~D~%" (-> this anim-index-front))
  (format #t "~1Tanim-index-back: ~D~%" (-> this anim-index-back))
  (label cfg-4)
  this
  )

;; definition of type guard-global-info
(deftype guard-global-info (basic)
  ((prev-yellow-hit          int8)
   (prev-blue-hit            int8)
   (knocked                  int32            2)
   (knocked-land             int32            2)
   (anim-knocked-front       int32            :overlay-at (-> knocked 0))
   (anim-knocked-back        int32            :overlay-at (-> knocked 1))
   (anim-knocked-front-land  int32            :overlay-at (-> knocked-land 0))
   (anim-knocked-back-land   int32            :overlay-at (-> knocked-land 1))
   (yellow-hit-anim          guard-anim-info  2 :inline)
   (yellow-land-anim         guard-anim-info  2 :inline)
   (blue-hit-anim            int32            1)
   (pad                      uint8            4)
   )
  )

;; definition for method 3 of type guard-global-info
(defmethod inspect ((this guard-global-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tprev-yellow-hit: ~D~%" (-> this prev-yellow-hit))
  (format #t "~1Tprev-blue-hit: ~D~%" (-> this prev-blue-hit))
  (format #t "~1Tknocked[2] @ #x~X~%" (-> this knocked))
  (format #t "~1Tknocked-land[2] @ #x~X~%" (-> this knocked-land))
  (format #t "~1Tanim-knocked-front: ~D~%" (-> this anim-knocked-front))
  (format #t "~1Tanim-knocked-back: ~D~%" (-> this anim-knocked-back))
  (format #t "~1Tanim-knocked-front-land: ~D~%" (-> this anim-knocked-front-land))
  (format #t "~1Tanim-knocked-back-land: ~D~%" (-> this anim-knocked-back-land))
  (format #t "~1Tyellow-hit-anim[2] @ #x~X~%" (-> this yellow-hit-anim))
  (format #t "~1Tyellow-land-anim[2] @ #x~X~%" (-> this yellow-land-anim))
  (format #t "~1Tblue-hit-anim[1] @ #x~X~%" (-> this blue-hit-anim))
  (label cfg-4)
  this
  )

;; definition of type guard-shoot-info
(deftype guard-shoot-info (structure)
  ((anim-index  int32)
   (start       float)
   (end         float)
   )
  :pack-me
  )

;; definition for method 3 of type guard-shoot-info
(defmethod inspect ((this guard-shoot-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'guard-shoot-info)
  (format #t "~1Tanim-index: ~D~%" (-> this anim-index))
  (format #t "~1Tstart: ~f~%" (-> this start))
  (format #t "~1Tend: ~f~%" (-> this end))
  (label cfg-4)
  this
  )

;; definition of type range
(deftype range (structure)
  ((start  float)
   (end    float)
   )
  )

;; definition for method 3 of type range
(defmethod inspect ((this range))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'range)
  (format #t "~1Tstart: ~f~%" (-> this start))
  (format #t "~1Tend: ~f~%" (-> this end))
  (label cfg-4)
  this
  )

;; definition of type crimson-guard-collide-shape
(deftype crimson-guard-collide-shape (collide-shape-moving)
  ()
  )

;; definition for method 3 of type crimson-guard-collide-shape
(defmethod inspect ((this crimson-guard-collide-shape))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Ttrans: ~`vector`P~%" (-> this trans))
  (format #t "~1Trot: ~`vector`P~%" (-> this quat))
  (format #t "~1Tscale: ~`vector`P~%" (-> this scale))
  (format #t "~1Tquat: #<quaternion @ #x~X>~%" (-> this quat))
  (format #t "~1Tpause-adjust-distance: (meters ~m)~%" (-> this pause-adjust-distance))
  (format #t "~1Tnav-radius: (meters ~m)~%" (-> this nav-radius))
  (format #t "~1Ttransv: ~`vector`P~%" (-> this transv))
  (format #t "~1Trotv: ~`vector`P~%" (-> this rotv))
  (format #t "~1Tscalev: ~`vector`P~%" (-> this scalev))
  (format #t "~1Tdir-targ: #<quaternion @ #x~X>~%" (-> this dir-targ))
  (format #t "~1Tangle-change-time: ~D~%" (-> this angle-change-time))
  (format #t "~1Told-y-angle-diff: ~f~%" (-> this old-y-angle-diff))
  (format #t "~1Tactor-hash-index: ~D~%" (-> this actor-hash-index))
  (format #t "~1Tprocess: ~A~%" (-> this process))
  (format #t "~1Tmax-iteration-count: ~D~%" (-> this max-iteration-count))
  (format #t "~1Tnav-flags: ~D~%" (-> this nav-flags))
  (format #t "~1Ttotal-prims: ~D~%" (-> this total-prims))
  (format #t "~1Tnum-riders: ~D~%" (-> this num-riders))
  (format #t "~1Tevent-self: ~A~%" (-> this event-self))
  (format #t "~1Tevent-other: ~A~%" (-> this event-other))
  (format #t "~1Troot-prim: ~A~%" (-> this root-prim))
  (format #t "~1Triders: #x~X~%" (-> this riders))
  (format #t "~1Tpenetrate-using: #x~X : (penetrate " (-> this penetrate-using))
  (penetrate->string (-> this penetrate-using))
  (format #t ")~%")
  (format #t "~1Tpenetrated-by: #x~X : (penetrate " (-> this penetrated-by))
  (penetrate->string (-> this penetrated-by))
  (format #t ")~%")
  (format #t "~1Tevent-priority: ~D~%" (-> this event-priority))
  (format #t "~1Trider-max-momentum: ~f~%" (-> this rider-max-momentum))
  (format #t "~1Trider-time: ~D~%" (-> this rider-time))
  (format #t "~1Trider-last-move: ~`vector`P~%" (-> this rider-last-move))
  (format #t "~1Ttrans-old: ~`vector`P~%" (-> this trans-old))
  (format #t "~1Tpoly-pat: #x~X~%" (-> this poly-pat))
  (format #t "~1Tcur-pat: #x~X~%" (-> this cur-pat))
  (format #t "~1Tground-pat: #x~X~%" (-> this ground-pat))
  (format #t "~1Tstatus: ~D~%" (-> this status))
  (format #t "~1Treaction: ~A~%" (-> this reaction))
  (format #t "~1Tno-reaction: ~A~%" (-> this no-reaction))
  (format #t "~1Tlocal-normal: ~`vector`P~%" (-> this local-normal))
  (format #t "~1Tsurface-normal: ~`vector`P~%" (-> this surface-normal))
  (format #t "~1Tpoly-normal: ~`vector`P~%" (-> this poly-normal))
  (format #t "~1Tground-poly-normal: ~`vector`P~%" (-> this ground-poly-normal))
  (format #t "~1Tgspot-pos: ~`vector`P~%" (-> this gspot-pos))
  (format #t "~1Tgspot-normal: ~`vector`P~%" (-> this gspot-normal))
  (format #t "~1Tground-touch-point: ~`vector`P~%" (-> this ground-touch-point))
  (format #t "~1Tground-impact-vel: (meters ~m)~%" (-> this ground-impact-vel))
  (format #t "~1Tsurface-angle: ~f~%" (-> this surface-angle))
  (format #t "~1Tpoly-angle: ~f~%" (-> this poly-angle))
  (format #t "~1Ttouch-angle: ~f~%" (-> this touch-angle))
  (format #t "~1Tcoverage: ~f~%" (-> this coverage))
  (format #t "~1Tdynam: ~A~%" (-> this dynam))
  (format #t "~1Tsurf: ~A~%" (-> this surf))
  (label cfg-4)
  this
  )

;; definition of type crimson-guard
(deftype crimson-guard (citizen)
  ((squad                            ff-squad-control            :override)
   (root                             crimson-guard-collide-shape :override)
   (info                             guard-global-info)
   (hit-face                         uint32)
   (anim-get-up-front                int32)
   (anim-get-up-back                 int32)
   (small-hit                        int32)
   (yellow-anim                      uint32)
   (guard-type                       guard-type)
   (settings                         squad-unit-settings)
   (next-time                        time-frame)
   (last-time-see-target             time-frame)
   (joint                            joint-mod)
   (joint-enable                     symbol)
   (already-shot                     symbol)
   (miss-amount                      float)
   (l-control                        lightning-control)
   (next-shot                        time-frame)
   (anim-shoot                       guard-shoot-info             3 :inline)
   (transport                        handle)
   (transport-side                   uint32)
   (target-flags                     uint8)
   (target-pos                       vector                       :inline)
   (target-pos-predict               vector                       :inline)
   (target-pos-predict-miss          vector                       :inline)
   (los-status                       uint64)
   (target-vel-vec                   vector                       :inline)
   (target-vel                       float)
   (target-self                      vector                       :inline)
   (target-self-xz                   vector                       :inline)
   (target-self-dist                 float)
   (target-self-xz-dist              float)
   (grenade-guard-min-player-dist    float)
   (flee-behavior                    flee-info                    :inline)
   (last-check-player-time           time-frame)
   (num-times-reloading-interrupted  int32)
   (total-flee-time                  time-frame)
   (last-fire-time                   time-frame)
   (ammo-count                       int8)
   (urgent-fire                      symbol)
   (last-onscreen-time               time-frame)
   (target-y-angle                   float)
   (rand-state-time                  time-frame)
   (pursuit-start-time               time-frame)
   (last-visible-target-pos          vector                       :inline)
   (lazer-sound                      sound-id)
   (move-position                    vector                       :inline)
   (move-index                       int32)
   (reloading-ammo                   handle)
   (guard-riot-shield                handle)
   (guard-shield-rotate-y-degrees    float)
   (attack-hit-shield-type           uint64)
   (current-shield-logic             uint64)
   (target-status                    squad-target-status          :inline)
   (minimap                          connection-minimap)
   (other-side                       symbol)
   (last-choose-new-enemy-time       time-frame)
   (last-quick-target-spot-angle     float)
   (next-update-target-time          time-frame)
   (last-player-attack-time          time-frame)
   (player-attack-count              int32)
   )
  (:state-methods
    get-up-front
    get-up-back
    search
    attack
    arrest
    gun-shoot
    grenade-throw
    grenade-throw-post-reloading
    grenade-throw-post-retreating
    exit-transport
    waiting-ambush
    close-attack
    attack-tazer
    knocked-off-vehicle
    roll-right
    roll-left
    close-attack-active
    flee-danger
    grenade-hostile
    rifle-hostile
    tazer-hostile
    undefined0
    undefined1
    undefined2
    undefined3
    undefined4
    undefined5
    undefined6
    undefined7
    undefined8
    undefined9
    undefined10
    undefined11
    undefined12
    rifle-reload
    )
  (:methods
    (crimson-guard-method-251 (_type_) none)
    (crimson-guard-method-252 (_type_) none)
    (crimson-guard-method-253 (_type_) none)
    (crimson-guard-method-254 (_type_) none)
    (crimson-guard-method-255 (_type_) none)
    (crimson-guard-method-256 (_type_) symbol)
    (crimson-guard-method-257 (_type_) symbol)
    (crimson-guard-method-258 (_type_ vector vector vector) int)
    (crimson-guard-method-259 (_type_ vector) none)
    (crimson-guard-method-260 (_type_) none)
    (crimson-guard-method-261 (_type_) none)
    (crimson-guard-method-262 (_type_) none)
    (crimson-guard-method-263 (_type_) none)
    (crimson-guard-method-264 (_type_) none)
    (crimson-guard-method-265 (_type_ float) none)
    (crimson-guard-method-266 (_type_ vector) float)
    (crimson-guard-method-267 (_type_ guard-type symbol) none)
    (crimson-guard-method-268 (_type_) object)
    (crimson-guard-method-269 (_type_ process-focusable) object)
    (crimson-guard-method-270 (_type_) symbol)
    (crimson-guard-method-271 (_type_) symbol)
    (crimson-guard-method-272 (_type_) symbol)
    (crimson-guard-method-273 (_type_) none)
    (crimson-guard-method-274 (_type_) none)
    (crimson-guard-method-275 (_type_) none)
    (crimson-guard-method-276 (_type_) none)
    (crimson-guard-method-277 (_type_) none)
    (crimson-guard-method-278 (_type_) none)
    (crimson-guard-method-279 (_type_) none)
    (crimson-guard-method-280 (_type_) symbol)
    (crimson-guard-method-281 (_type_) none)
    (crimson-guard-method-282 (_type_ vector traffic-target-formation (pointer float) int) symbol)
    (crimson-guard-method-283 (_type_) float)
    (crimson-guard-method-284 (_type_ vector) vector)
    (crimson-guard-method-285 (_type_ int) int)
    (crimson-guard-method-286 (_type_) int)
    (crimson-guard-method-287 (_type_ process-focusable) float)
    (crimson-guard-method-288 (_type_ process-focusable) float)
    (crimson-guard-method-289 (_type_ float) none)
    (crimson-guard-method-290 (_type_) process)
    )
  )

;; definition for method 3 of type crimson-guard
(defmethod inspect ((this crimson-guard))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type citizen inspect)))
    (t9-0 this)
    )
  (format #t "~2Tinfo: ~A~%" (-> this info))
  (format #t "~2Thit-face: ~D~%" (-> this hit-face))
  (format #t "~2Tanim-get-up-front: ~D~%" (-> this anim-get-up-front))
  (format #t "~2Tanim-get-up-back: ~D~%" (-> this anim-get-up-back))
  (format #t "~2Tsmall-hit: ~D~%" (-> this small-hit))
  (format #t "~2Tyellow-anim: ~D~%" (-> this yellow-anim))
  (format #t "~2Tguard-type: ~D~%" (-> this guard-type))
  (format #t "~2Tsettings: #<squad-unit-settings @ #x~X>~%" (-> this settings))
  (format #t "~2Tnext-time: ~D~%" (-> this next-time))
  (format #t "~2Tlast-time-see-target: ~D~%" (-> this last-time-see-target))
  (format #t "~2Tjoint: ~A~%" (-> this joint))
  (format #t "~2Tjoint-enable: ~A~%" (-> this joint-enable))
  (format #t "~2Talready-shot: ~A~%" (-> this already-shot))
  (format #t "~2Tmiss-amount: ~f~%" (-> this miss-amount))
  (format #t "~2Tl-control: ~A~%" (-> this l-control))
  (format #t "~2Tnext-shot: ~D~%" (-> this next-shot))
  (format #t "~2Tanim-shoot[3] @ #x~X~%" (-> this anim-shoot))
  (format #t "~2Ttransport: ~D~%" (-> this transport))
  (format #t "~2Ttransport-side: ~D~%" (-> this transport-side))
  (format #t "~2Ttarget-flags: ~D~%" (-> this target-flags))
  (format #t "~2Ttarget-pos: #<vector @ #x~X>~%" (-> this target-pos))
  (format #t "~2Ttarget-pos-predict: #<vector @ #x~X>~%" (-> this target-pos-predict))
  (format #t "~2Ttarget-pos-predict-miss: #<vector @ #x~X>~%" (-> this target-pos-predict-miss))
  (format #t "~2Tlos-status: ~D~%" (-> this los-status))
  (format #t "~2Ttarget-vel-vec: #<vector @ #x~X>~%" (-> this target-vel-vec))
  (format #t "~2Ttarget-vel: ~f~%" (-> this target-vel))
  (format #t "~2Ttarget-self: #<vector @ #x~X>~%" (-> this target-self))
  (format #t "~2Ttarget-self-xz: #<vector @ #x~X>~%" (-> this target-self-xz))
  (format #t "~2Ttarget-self-dist: ~f~%" (-> this target-self-dist))
  (format #t "~2Ttarget-self-xz-dist: ~f~%" (-> this target-self-xz-dist))
  (format #t "~2Tgrenade-guard-min-player-dist: ~f~%" (-> this grenade-guard-min-player-dist))
  (format #t "~2Tflee-behavior: #<flee-info @ #x~X>~%" (-> this flee-behavior))
  (format #t "~2Tlast-check-player-time: ~D~%" (-> this last-check-player-time))
  (format #t "~2Tnum-times-reloading-interrupted: ~D~%" (-> this num-times-reloading-interrupted))
  (format #t "~2Ttotal-flee-time: ~D~%" (-> this total-flee-time))
  (format #t "~2Tlast-fire-time: ~D~%" (-> this last-fire-time))
  (format #t "~2Tammo-count: ~D~%" (-> this ammo-count))
  (format #t "~2Turgent-fire: ~A~%" (-> this urgent-fire))
  (format #t "~2Tlast-onscreen-time: ~D~%" (-> this last-onscreen-time))
  (format #t "~2Ttarget-y-angle: ~f~%" (-> this target-y-angle))
  (format #t "~2Trand-state-time: ~D~%" (-> this rand-state-time))
  (format #t "~2Tpursuit-start-time: ~D~%" (-> this pursuit-start-time))
  (format #t "~2Tlast-visible-target-pos: #<vector @ #x~X>~%" (-> this last-visible-target-pos))
  (format #t "~2Tlazer-sound: ~D~%" (-> this lazer-sound))
  (format #t "~2Tmove-position: #<vector @ #x~X>~%" (-> this move-position))
  (format #t "~2Tmove-index: ~D~%" (-> this move-index))
  (format #t "~2Treloading-ammo: ~D~%" (-> this reloading-ammo))
  (format #t "~2Tguard-riot-shield: ~D~%" (-> this guard-riot-shield))
  (format #t "~2Tguard-shield-rotate-y-degrees: ~f~%" (-> this guard-shield-rotate-y-degrees))
  (format #t "~2Tattack-hit-shield-type: ~D~%" (-> this attack-hit-shield-type))
  (format #t "~2Tcurrent-shield-logic: ~D~%" (-> this current-shield-logic))
  (format #t "~2Ttarget-status: #<squad-target-status @ #x~X>~%" (-> this target-status))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tother-side: ~A~%" (-> this other-side))
  (format #t "~2Tlast-choose-new-enemy-time: ~D~%" (-> this last-choose-new-enemy-time))
  (format #t "~2Tlast-quick-target-spot-angle: ~f~%" (-> this last-quick-target-spot-angle))
  (format #t "~2Tnext-update-target-time: ~D~%" (-> this next-update-target-time))
  (format #t "~2Tlast-player-attack-time: ~D~%" (-> this last-player-attack-time))
  (format #t "~2Tplayer-attack-count: ~D~%" (-> this player-attack-count))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
0
