;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *wasall-reserve*, type symbol
(define *wasall-reserve* #f)

;; definition for function wasall-login
;; WARN: Return type mismatch int vs none.
(defun wasall-login ((arg0 level))
  (let ((gp-0 (the-as int (-> *game-info* current-vehicle))))
    (when (or (< (the-as uint gp-0) (the-as uint 12))
              (< (the-as uint 19) (the-as uint gp-0))
              (not (have-vehicle-v-type? (the-as vehicle-type gp-0)))
              )
      (let ((s5-0 12))
        (countdown (s4-0 8)
          (if (have-vehicle-v-type? (the-as vehicle-type s5-0))
              (set! gp-0 s5-0)
              )
          (+! s5-0 1)
          )
        )
      (set! (-> *game-info* current-vehicle) (the-as vehicle-type-u8 gp-0))
      )
    )
  0
  (none)
  )

;; definition for function wasall-logout
;; WARN: Return type mismatch int vs none.
(defun wasall-logout ((arg0 level))
  (set! *trail-graph* #f)
  0
  (none)
  )

;; definition for function wasall-activate
;; WARN: Return type mismatch int vs none.
(defun wasall-activate ((arg0 level))
  (let ((v1-0 *traffic-info*)
        (a1-0 (-> arg0 name))
        )
    (set! (-> v1-0 vehicle-level) arg0)
    (set! (-> v1-0 vehicle-levels 12) a1-0)
    (set! (-> v1-0 vehicle-levels 13) a1-0)
    (set! (-> v1-0 vehicle-levels 14) a1-0)
    (set! (-> v1-0 vehicle-levels 15) a1-0)
    (set! (-> v1-0 vehicle-levels 16) a1-0)
    (set! (-> v1-0 vehicle-levels 17) a1-0)
    (set! (-> v1-0 vehicle-levels 18) a1-0)
    (set! (-> v1-0 vehicle-levels 19) a1-0)
    )
  (vehicle-manager-start (the-as process *entity-pool*))
  0
  (none)
  )

;; definition for function wasall-deactivate
;; WARN: Return type mismatch int vs none.
(defun wasall-deactivate ((arg0 level))
  (let ((v1-0 *traffic-info*))
    (set! (-> v1-0 vehicle-level) (the-as level #f))
    )
  (vehicle-manager-kill)
  0
  (none)
  )

;; definition for function desert-game-activate
;; WARN: Return type mismatch int vs none.
(defun desert-game-activate ((arg0 level))
  (let ((v1-0 *traffic-info*)
        (a0-1 (-> arg0 name))
        )
    (set! (-> v1-0 vehicle-levels 20) a0-1)
    (set! (-> v1-0 vehicle-levels 22) a0-1)
    (set! (-> v1-0 vehicle-levels 23) a0-1)
    )
  0
  (none)
  )

;; definition for function desert-race-level-activate
;; WARN: Return type mismatch int vs none.
(defun desert-race-level-activate ((arg0 level))
  (let ((v1-0 *traffic-info*)
        (a1-0 (-> arg0 name))
        )
    (set! (-> v1-0 race-vehicle-level) arg0)
    (set! (-> v1-0 vehicle-levels 20) a1-0)
    )
  0
  (none)
  )

;; definition for function desert-race-level-deactivate
;; WARN: Return type mismatch int vs none.
(defun desert-race-level-deactivate ((arg0 level))
  (let ((v1-0 *traffic-info*))
    (set! (-> v1-0 race-vehicle-level) (the-as level #f))
    )
  0
  (none)
  )
