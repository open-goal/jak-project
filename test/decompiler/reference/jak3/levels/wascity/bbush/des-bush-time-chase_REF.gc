;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpartgroup group-goal-explode
  :id 1531
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 5054 :period (seconds 20) :length (seconds 0.035))
    (sp-item 5055 :period (seconds 20) :length (seconds 0.035))
    )
  )

;; failed to figure out what this is:
(defpart 5054
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 10.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 30.0)
    (:g 80.0 20.0)
    (:b 255.0)
    (:a 255.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.2)
    (:fade-g -0.53333336)
    (:fade-a -1.7 -1.7)
    (:friction 0.93)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 5055
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 20.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 30.0)
    (:g 80.0 20.0)
    (:b 255.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.1)
    (:fade-g -0.26666668)
    (:fade-a -0.42666668 -0.42666668)
    (:friction 0.75)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-trail-goal
  :id 1532
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 5056 :flags (sp7)))
  )

;; failed to figure out what this is:
(defpart 5056
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5) (meters 0.25))
    (:rot-x (degrees 11.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 255.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpartgroup group-trail-goal-touched
  :id 1533
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 5057 :flags (sp7)))
  )

;; failed to figure out what this is:
(defpart 5057
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5) (meters 0.25))
    (:rot-x (degrees 11.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 4096.0)
    )
  )

;; definition for symbol *tex-time-chase-level-list*, type (array symbol)
(define *tex-time-chase-level-list* (new 'static 'boxed-array :type symbol 'lbbtcha1 'lbbtcha2 'lbbtcha3))

;; definition for function find-time-chase-level-name
(defun find-time-chase-level-name ()
  (dotimes (gp-0 (-> *tex-time-chase-level-list* length))
    (let ((v1-3 (level-get *level* (-> *tex-time-chase-level-list* gp-0))))
      (if v1-3
          (return v1-3)
          )
      )
    )
  (the-as level #f)
  )

;; failed to figure out what this is:
(defpartgroup group-bb-finder
  :id 1534
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 5058 :flags (sp7)))
  )

;; failed to figure out what this is:
(defpart 5059
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 0.0)
    (:b 128.0)
    (:a 50.0)
    (:fade-r 0.027777778)
    (:fade-b -0.027777778)
    (:fade-a -0.055555556)
    (:timer (seconds 6))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; definition for symbol *bb-alpha*, type int
(define *bb-alpha* 50)

;; failed to figure out what this is:
(defpartgroup group-bb-finder-nofade
  :id 1535
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 5060 :flags (sp7)) (sp-item 5058 :flags (sp7)))
  )

;; failed to figure out what this is:
(defpart 5060
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 0.0)
    (:b 128.0)
    (:a 50.0)
    (:fade-r 0.027777778)
    (:fade-b -0.027777778)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'spt-func-bb-fader)
    )
  )

;; definition for function spt-func-bb-fader
;; WARN: Return type mismatch float vs none.
(defun spt-func-bb-fader ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (set! (-> arg2 coneradius) (the float *bb-alpha*))
  (none)
  )

;; failed to figure out what this is:
(defpart 5058
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 2.0)
    (:x (meters -2) (meters 4))
    (:y (meters -1) (meters 2))
    (:scale-x (meters 0.1) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 50.0)
    (:g 50.0)
    (:b 120.0)
    (:a 64.0)
    (:vel-y (meters 0.006666667) (meters 0.0016666667))
    (:scalevel-x (meters 0.00033333333))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.0)
    (:accel-y (meters -0.00033333333) (meters -0.00016666666))
    (:timer (seconds 1.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    )
  )

;; definition of type trail-effect
(deftype trail-effect (process-drawable)
  ((trail      handle)
   (goal-part  sparticle-launch-control)
   )
  (:state-methods
    idle
    dormant
    )
  )

;; definition for method 3 of type trail-effect
(defmethod inspect ((this trail-effect))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttrail: ~D~%" (-> this trail))
  (format #t "~2Tgoal-part: ~A~%" (-> this goal-part))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (trail-effect)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trans)
       (let ((v1-1 (the-as object (-> block param 0))))
         (set! (-> self root trans quad) (-> (the-as vector v1-1) quad))
         )
       (send-event (handle->process (-> self trail)) 'start-tracking)
       )
      (('fadeout)
       (send-event (handle->process (-> self trail)) 'fadeout)
       )
      )
    )
  :trans (behavior ()
    '()
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate dormant (trail-effect)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trans)
       (let ((v1-1 (the-as object (-> block param 0)))
             (v0-0 (the-as object (-> self root trans)))
             )
         (set! (-> (the-as vector v0-0) quad) (-> (the-as vector v1-1) quad))
         v0-0
         )
       )
      (('active)
       (go-virtual idle)
       )
      )
    )
  :trans (behavior ()
    (spawn (-> self goal-part) (-> self root trans))
    )
  :code sleep-code
  )

;; definition for method 7 of type trail-effect
;; WARN: Return type mismatch process-drawable vs trail-effect.
(defmethod relocate ((this trail-effect) (offset int))
  (if (nonzero? (-> this goal-part))
      (&+! (-> this goal-part) offset)
      )
  (the-as trail-effect ((method-of-type process-drawable relocate) this offset))
  )

;; failed to figure out what this is:
(if (or (zero? *bb-timer-chase-trail*) (!= loading-level global))
    (set! *bb-timer-chase-trail* (new 'loading-level 'light-trail-composition))
    )

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* color-mode) (the-as uint 0))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* color-repeat-dist) 40960.0)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* alpha-1-mode) (the-as uint 0))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* alpha-2-mode) (the-as uint 4))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* base-alpha) 0.5)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* alpha-repeat-dist) 1228800.0)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* width-mode) (the-as uint 2))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* base-width) 4096.0)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* width-repeat-dist) 163840.0)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* uv-mode) (the-as uint 1))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* uv-repeat-dist) 163840.0)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* lie-mode) (the-as uint 0))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* max-age) (seconds 4))

;; failed to figure out what this is:
(if #f
    (set! (-> *bb-timer-chase-trail* tex-id)
          (the-as uint (lookup-texture-id-by-name (the-as string #f) (the-as string #f)))
          )
    (set! (-> *bb-timer-chase-trail* tex-id) (the-as uint #x100300))
    )

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* width-curve) (the-as curve2d-piecewise *curve-linear-up*))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* color-curve) (the-as curve-color-piecewise *trail-color-curve-red*))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* alpha-curve-1) (the-as curve2d-piecewise *curve-linear-down*))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* alpha-curve-2) (the-as curve2d-piecewise *curve-linear-down*))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* zbuffer?) #f)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* lie-vector quad) (-> *up-vector* quad))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* use-tape-mode?) #f)

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* blend-mode) (the-as uint 1))

;; failed to figure out what this is:
(set! (-> *bb-timer-chase-trail* frame-stagger) (the-as uint 1))

;; definition of type timer-chase-trail
(deftype timer-chase-trail (light-trail-tracker-projectile)
  ((time-offset      time-frame  :offset 192)
   (start-tracking?  symbol)
   )
  (:state-methods
    fadeout
    )
  (:methods
    (timer-chase-trail-method-23 (_type_) none)
    )
  )

;; definition for method 3 of type timer-chase-trail
(defmethod inspect ((this timer-chase-trail))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type light-trail-tracker-projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (format #t "~2Ttime-offset: ~D~%" (-> this time-offset))
  (format #t "~2Tstart-tracking?: ~A~%" (-> this start-tracking?))
  (label cfg-4)
  this
  )

;; definition for method 23 of type timer-chase-trail
;; WARN: Return type mismatch int vs none.
(defmethod timer-chase-trail-method-23 ((this timer-chase-trail))
  (+! (-> this trail start-marker) (the int (* 1200.0 (seconds-per-frame))))
  (if (time-elapsed? (-> this state-time) (seconds 2))
      (go empty-state)
      )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate tracking (timer-chase-trail)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('fadeout)
       (format #t "fadeout~%")
       (go-virtual fadeout)
       )
      (('start-tracking)
       (let ((v0-1 (the-as object #t)))
         (set! (-> self start-tracking?) (the-as symbol v0-1))
         v0-1
         )
       )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self start-tracking?) #f)
    )
  :trans (behavior ()
    (let ((s5-0 (find-time-chase-level-name)))
      (when s5-0
        (let ((s3-0 (-> s5-0 draw-index))
              (gp-0 4)
              )
          (let ((s4-0 (vu1-bucket-map s3-0 gp-0 (merc-mode mercneric2)))
                (v1-1 (vu1-bucket-map s3-0 gp-0 (merc-mode mm5)))
                )
            (set! (-> self trail strip bucket) s4-0)
            (set! (-> self trail strip sink) (the-as uint v1-1))
            )
          (set! (-> self trail strip level) s5-0)
          (set! (-> self trail strip texture-index) (the-as uint gp-0))
          )
        (set! (-> self trail strip tex-id)
              (lookup-texture-id-by-name "des-bush-timer-chase-trail" (the-as string #f))
              )
        )
      )
    (let ((gp-1 (handle->process (-> self tracked-object))))
      (cond
        ((not gp-1)
         (go-virtual hang-on)
         )
        ((-> self start-tracking?)
         (when (time-elapsed? (-> self time-offset) (seconds 0.05))
           (set-time! (-> self time-offset))
           (when (light-trail-tracker-method-17 self (the-as process-focusable gp-1))
             (set! (-> self trail start-marker) (the-as uint 0))
             (set! (-> self trail end-marker) (the-as uint 0))
             (light-trail-method-11
               (-> self trail)
               (light-trail-tracker-method-16 self (the-as process-focusable gp-1) (new 'stack-no-clear 'vector))
               0
               )
             )
           )
         )
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate fadeout (timer-chase-trail)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (timer-chase-trail-method-23 self)
    )
  :code sleep-code
  :post light-trail-tracker-common-post
  )

;; definition for method 19 of type timer-chase-trail
(defmethod light-trail-tracker-method-19 ((this timer-chase-trail))
  #t
  )

;; definition for function trail-effect-init-by-other
;; INFO: Used lq/sq
(defbehavior trail-effect-init-by-other trail-effect ((arg0 vector))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1534) self))
  (set! (-> self goal-part) (create-launch-control (-> *part-group-id-table* 1532) self))
  (let ((gp-1 (new 'stack-no-clear 'light-trail-tracker-spawn-params)))
    (set! (-> gp-1 tracked-obj) (process->handle self))
    (set! (-> gp-1 appearance) *bb-timer-chase-trail*)
    (set! (-> *bb-timer-chase-trail* tex-id)
          (the-as uint (lookup-texture-id-by-name "des-bush-timer-chase-trail" (the-as string #f)))
          )
    (set! (-> gp-1 max-num-crumbs) 500)
    (set! (-> gp-1 track-immediately?) #f)
    (let* ((v1-18 (estimate-light-trail-mem-usage
                    (the-as uint (-> gp-1 max-num-crumbs))
                    (the-as uint (= (-> gp-1 appearance lie-mode) 3))
                    )
                  )
           (s5-0 (get-process *default-dead-pool* timer-chase-trail (+ v1-18 8192) 1))
           )
      (set! (-> self trail) (ppointer->handle (when s5-0
                                                (let ((t9-6 (method-of-type process activate)))
                                                  (t9-6 s5-0 self "light-trail" (the-as pointer #x70004000))
                                                  )
                                                (run-now-in-process s5-0 light-trail-tracker-init-by-other gp-1)
                                                (-> s5-0 ppointer)
                                                )
                                              )
            )
      )
    )
  (go-virtual dormant)
  )

;; failed to figure out what this is:
(defpartgroup group-bb-goal
  :id 1536
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 5061))
  )

;; failed to figure out what this is:
(defpart 5061
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 5) (meters 0.25))
    (:rot-x (degrees 11.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 255.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:userdata 4096.0)
    )
  )

;; definition of type bb-goal
(deftype bb-goal (process-drawable)
  ((activate-radius  float)
   (sound-id         sound-id)
   )
  (:state-methods
    idle
    die
    )
  )

;; definition for method 3 of type bb-goal
(defmethod inspect ((this bb-goal))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tactivate-radius: ~f~%" (-> this activate-radius))
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (bb-goal)
  :virtual #t
  :trans (behavior ()
    (spawn (-> self part) (-> self root trans))
    (if (< (vector-vector-distance (target-pos 0) (-> self root trans)) 81920.0)
        (set! (-> self sound-id)
              (add-process *gui-control* self (gui-channel bbush) (gui-action queue) "miss001" -99.0 0)
              )
        )
    (let ((f0-1 (vector-vector-distance-squared (target-pos 0) (-> self root trans)))
          (f1-1 (-> self activate-radius))
          )
      (when (< f0-1 (* f1-1 f1-1))
        (send-event (ppointer->process (-> self parent)) 'goal)
        (set-action!
          *gui-control*
          (gui-action play)
          (-> self sound-id)
          (gui-channel none)
          (gui-action none)
          (the-as string #f)
          (the-as (function gui-connection symbol) #f)
          (the-as process #f)
          )
        (go-virtual die)
        )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate die (bb-goal)
  :virtual #t
  :enter (behavior ()
    (cond
      ((logtest? (-> *part-group-id-table* 1531 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 1531))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 1531))
        )
      )
    )
  :code (behavior ()
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

;; definition for method 10 of type bb-goal
(defmethod deactivate ((this bb-goal))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this part))
      (kill-particles (-> this part))
      )
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

;; definition for method 11 of type bb-goal
;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this bb-goal) (arg0 entity-actor))
  (process-entity-status! this (entity-perm-status dead) #t)
  )

;; definition for function bb-goal-init-by-other
(defbehavior bb-goal-init-by-other bb-goal ((arg0 entity-actor) (arg1 float))
  (process-entity-set! self arg0)
  (set! (-> self root) (new 'process 'trsqv))
  (process-drawable-from-entity! self arg0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1536) self))
  (set! (-> self activate-radius) arg1)
  (go-virtual idle)
  )

;; failed to figure out what this is:
(defpartgroup group-bb-freeze-3
  :id 1537
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 5066 :flags (sp6 sp7))
    (sp-item 5067 :flags (sp3 sp7))
    (sp-item 5068 :flags (sp6 sp7))
    (sp-item 5069 :flags (sp3) :binding 5062)
    (sp-item 5062 :flags (sp2 sp3) :binding 5063)
    (sp-item 5069 :flags (sp3) :binding 5064)
    (sp-item 5064 :flags (sp2 sp3) :binding 5063)
    (sp-item 5069 :flags (sp3) :binding 5065)
    (sp-item 5065 :flags (sp2 sp3) :binding 5063)
    )
  )

;; failed to figure out what this is:
(defpart 5066
  :init-specs ((:texture (time-bubble-clock lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 16.0)
    (:b 16.0)
    (:a 255.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5067
  :init-specs ((:texture (time-bubble-clock lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 4.8))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 16.0)
    (:b 16.0)
    (:a 255.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 0.335))
    (:next-launcher 5070)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5070
  :init-specs ((:rot-z (degrees 1)) (:next-time (seconds 0.167)) (:next-launcher 5071))
  )

;; failed to figure out what this is:
(defpart 5071
  :init-specs ((:rot-z (degrees -9)) (:next-time (seconds 0.335)) (:next-launcher 5072))
  )

;; failed to figure out what this is:
(defpart 5072
  :init-specs ((:rot-z (degrees -8)) (:next-time (seconds 0.167)) (:next-launcher 5073))
  )

;; failed to figure out what this is:
(defpart 5073
  :init-specs ((:rot-z (degrees -18)) (:next-time (seconds 0.335)) (:next-launcher 5074))
  )

;; failed to figure out what this is:
(defpart 5074
  :init-specs ((:rot-z (degrees -17)) (:next-time (seconds 0.167)) (:next-launcher 5075))
  )

;; failed to figure out what this is:
(defpart 5075
  :init-specs ((:rot-z (degrees -27.000002)) (:next-time (seconds 0.335)) (:next-launcher 5076))
  )

;; failed to figure out what this is:
(defpart 5076
  :init-specs ((:rot-z (degrees -26.000002)) (:next-time (seconds 0.167)) (:next-launcher 5077))
  )

;; failed to figure out what this is:
(defpart 5077
  :init-specs ((:rot-z (degrees -36)) (:next-time (seconds 0.335)) (:next-launcher 5078))
  )

;; failed to figure out what this is:
(defpart 5078
  :init-specs ((:rot-z (degrees -35)) (:next-time (seconds 0.167)) (:next-launcher 5079))
  )

;; failed to figure out what this is:
(defpart 5079
  :init-specs ((:rot-z (degrees -45)) (:next-time (seconds 0.335)) (:next-launcher 5070))
  )

;; failed to figure out what this is:
(defpart 5068
  :init-specs ((:texture (time-bubble lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 6))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 32.0)
    (:b 32.0)
    (:a 64.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 5069
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 5062
  :init-specs ((:texture (time-bubble-orbiter lbbtcha1-sprite))
    (:num 1.0)
    (:y (meters 2))
    (:z (meters 2))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch aux-list))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5064
  :init-specs ((:texture (time-bubble-orbiter lbbtcha1-sprite))
    (:num 1.0)
    (:y (meters -2))
    (:z (meters 2))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 128.0)
    (:omega (degrees 45))
    (:vel-x (meters -0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch aux-list))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5065
  :init-specs ((:texture (time-bubble-orbiter lbbtcha1-sprite))
    (:num 1.0)
    (:z (meters 2))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 128.0)
    (:omega (degrees 90))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch aux-list))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5063
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.8))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 0.0)
    (:b 0.0)
    (:a 32.0)
    (:scalevel-x (meters -0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.32)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-bb-freeze-2
  :id 1538
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 5083 :flags (sp6 sp7))
    (sp-item 5084 :flags (sp3 sp7))
    (sp-item 5085 :flags (sp6 sp7))
    (sp-item 5086 :flags (sp3) :binding 5080)
    (sp-item 5080 :flags (sp2 sp3) :binding 5081)
    (sp-item 5086 :flags (sp3) :binding 5082)
    (sp-item 5082 :flags (sp2 sp3) :binding 5081)
    )
  )

;; failed to figure out what this is:
(defpart 5083
  :init-specs ((:texture (time-bubble-clock lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 16.0)
    (:a 255.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5084
  :init-specs ((:texture (time-bubble-clock lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 4.8))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 16.0)
    (:a 255.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 0.335))
    (:next-launcher 5087)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5087
  :init-specs ((:rot-z (degrees 1)) (:next-time (seconds 0.167)) (:next-launcher 5088))
  )

;; failed to figure out what this is:
(defpart 5088
  :init-specs ((:rot-z (degrees -9)) (:next-time (seconds 0.335)) (:next-launcher 5089))
  )

;; failed to figure out what this is:
(defpart 5089
  :init-specs ((:rot-z (degrees -8)) (:next-time (seconds 0.167)) (:next-launcher 5090))
  )

;; failed to figure out what this is:
(defpart 5090
  :init-specs ((:rot-z (degrees -18)) (:next-time (seconds 0.335)) (:next-launcher 5091))
  )

;; failed to figure out what this is:
(defpart 5091
  :init-specs ((:rot-z (degrees -17)) (:next-time (seconds 0.167)) (:next-launcher 5092))
  )

;; failed to figure out what this is:
(defpart 5092
  :init-specs ((:rot-z (degrees -27.000002)) (:next-time (seconds 0.335)) (:next-launcher 5093))
  )

;; failed to figure out what this is:
(defpart 5093
  :init-specs ((:rot-z (degrees -26.000002)) (:next-time (seconds 0.167)) (:next-launcher 5094))
  )

;; failed to figure out what this is:
(defpart 5094
  :init-specs ((:rot-z (degrees -36)) (:next-time (seconds 0.335)) (:next-launcher 5095))
  )

;; failed to figure out what this is:
(defpart 5095
  :init-specs ((:rot-z (degrees -35)) (:next-time (seconds 0.167)) (:next-launcher 5096))
  )

;; failed to figure out what this is:
(defpart 5096
  :init-specs ((:rot-z (degrees -45)) (:next-time (seconds 0.335)) (:next-launcher 5087))
  )

;; failed to figure out what this is:
(defpart 5085
  :init-specs ((:texture (time-bubble lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 6))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 32.0)
    (:a 64.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 5086
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 5080
  :init-specs ((:texture (time-bubble-orbiter lbbtcha1-sprite))
    (:num 1.0)
    (:z (meters 2))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 64.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch aux-list))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5082
  :init-specs ((:texture (time-bubble-orbiter lbbtcha1-sprite))
    (:num 1.0)
    (:z (meters 2))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 64.0)
    (:a 128.0)
    (:omega (degrees 180))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch aux-list))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5081
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.8))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 32.0)
    (:scalevel-x (meters -0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.32)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-bb-freeze
  :id 1539
  :linger-duration (seconds 2)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 5100 :flags (sp6 sp7))
    (sp-item 5101 :flags (sp3 sp7))
    (sp-item 5102 :flags (sp6 sp7))
    (sp-item 5103 :flags (sp3) :binding 5097)
    (sp-item 5097 :flags (sp2 sp3) :binding 5098)
    (sp-item 5103 :flags (sp3) :binding 5099)
    )
  )

;; failed to figure out what this is:
(defpart 5100
  :init-specs ((:texture (time-bubble-clock lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 5))
    (:scale-y :copy scale-x)
    (:r 16.0)
    (:g 16.0)
    (:b 255.0)
    (:a 255.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5101
  :init-specs ((:texture (time-bubble-clock lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 4.8))
    (:rot-z (degrees 0))
    (:scale-y :copy scale-x)
    (:r 16.0)
    (:g 16.0)
    (:b 255.0)
    (:a 255.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 0.335))
    (:next-launcher 5104)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 5104
  :init-specs ((:rot-z (degrees 1)) (:next-time (seconds 0.167)) (:next-launcher 5105))
  )

;; failed to figure out what this is:
(defpart 5105
  :init-specs ((:rot-z (degrees -9)) (:next-time (seconds 0.335)) (:next-launcher 5106))
  )

;; failed to figure out what this is:
(defpart 5106
  :init-specs ((:rot-z (degrees -8)) (:next-time (seconds 0.167)) (:next-launcher 5107))
  )

;; failed to figure out what this is:
(defpart 5107
  :init-specs ((:rot-z (degrees -18)) (:next-time (seconds 0.335)) (:next-launcher 5108))
  )

;; failed to figure out what this is:
(defpart 5108
  :init-specs ((:rot-z (degrees -17)) (:next-time (seconds 0.167)) (:next-launcher 5109))
  )

;; failed to figure out what this is:
(defpart 5109
  :init-specs ((:rot-z (degrees -27.000002)) (:next-time (seconds 0.335)) (:next-launcher 5110))
  )

;; failed to figure out what this is:
(defpart 5110
  :init-specs ((:rot-z (degrees -26.000002)) (:next-time (seconds 0.167)) (:next-launcher 5111))
  )

;; failed to figure out what this is:
(defpart 5111
  :init-specs ((:rot-z (degrees -36)) (:next-time (seconds 0.335)) (:next-launcher 5112))
  )

;; failed to figure out what this is:
(defpart 5112
  :init-specs ((:rot-z (degrees -35)) (:next-time (seconds 0.167)) (:next-launcher 5113))
  )

;; failed to figure out what this is:
(defpart 5113
  :init-specs ((:rot-z (degrees -45)) (:next-time (seconds 0.335)) (:next-launcher 5104))
  )

;; failed to figure out what this is:
(defpart 5102
  :init-specs ((:texture (time-bubble lbbtcha1-sprite))
    (:num 1.0)
    (:scale-x (meters 6))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 32.0)
    (:b 255.0)
    (:a 64.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 5103
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 5097
  :init-specs ((:texture (time-bubble-orbiter lbbtcha1-sprite))
    (:num 1.0)
    (:y (meters 4))
    (:z (meters 0.2))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 64.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds -0.005))
    (:flags (ready-to-launch aux-list))
    (:rotate-y (degrees 0))
    )
  )

;; definition (debug) for function bb-pickup-type->string
(defun-debug bb-pickup-type->string ((arg0 bb-pickup-type))
  (case arg0
    (((bb-pickup-type large))
     "large"
     )
    (((bb-pickup-type small))
     "small"
     )
    (((bb-pickup-type medium))
     "medium"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition for function set-time-chase-particle-texture
;; WARN: Return type mismatch texture-id vs none.
(defun set-time-chase-particle-texture ()
  (let ((gp-0 (find-time-chase-level-name)))
    (when gp-0
      (set! (-> *part-id-table* 5067 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5066 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5068 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble" gp-0 7))
            )
      (set! (-> *part-id-table* 5069 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "hotdot" gp-0 7))
            )
      (set! (-> *part-id-table* 5062 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-orbiter" gp-0 7))
            )
      (set! (-> *part-id-table* 5064 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-orbiter" gp-0 7))
            )
      (set! (-> *part-id-table* 5065 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-orbiter" gp-0 7))
            )
      (set! (-> *part-id-table* 5063 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5084 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5083 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5085 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble" gp-0 7))
            )
      (set! (-> *part-id-table* 5086 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "hotdot" gp-0 7))
            )
      (set! (-> *part-id-table* 5080 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-orbiter" gp-0 7))
            )
      (set! (-> *part-id-table* 5082 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-orbiter" gp-0 7))
            )
      (set! (-> *part-id-table* 5081 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5101 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5100 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-clock" gp-0 7))
            )
      (set! (-> *part-id-table* 5102 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble" gp-0 7))
            )
      (set! (-> *part-id-table* 5103 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "hotdot" gp-0 7))
            )
      (set! (-> *part-id-table* 5097 init-specs 0 initial-valuef)
            (the-as float (lookup-level-texture-id-by-name "time-bubble-orbiter" gp-0 7))
            )
      )
    )
  (none)
  )

;; definition of type bb-freeze
(deftype bb-freeze (process-drawable)
  ((launch-pos            vector  :inline)
   (activate-radius       float)
   (freeze-time           float)
   (freeze-pickup-radius  float)
   (bb-pickup-type        bb-pickup-type)
   )
  (:state-methods
    idle
    dormant
    die
    )
  )

;; definition for method 3 of type bb-freeze
(defmethod inspect ((this bb-freeze))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tlaunch-pos: #<vector @ #x~X>~%" (-> this launch-pos))
  (format #t "~2Tactivate-radius: ~f~%" (-> this activate-radius))
  (format #t "~2Tfreeze-time: ~f~%" (-> this freeze-time))
  (format #t "~2Tfreeze-pickup-radius: ~f~%" (-> this freeze-pickup-radius))
  (format #t "~2Tbb-pickup-type: ~D~%" (-> this bb-pickup-type))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate dormant (bb-freeze)
  :virtual #t
  :trans (behavior ()
    (let ((f0-0 (vector-vector-distance-squared (target-pos 0) (-> self root trans)))
          (f1-0 (-> self activate-radius))
          )
      (if (< f0-0 (* f1-0 f1-0))
          (go-virtual idle)
          )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate idle (bb-freeze)
  :virtual #t
  :enter (behavior ()
    '()
    )
  :exit (behavior ()
    (if (nonzero? (-> self part))
        (kill-particles (-> self part))
        )
    )
  :trans (behavior ()
    (let ((f0-0 (-> self activate-radius)))
      (if (< (* f0-0 f0-0) (vector-vector-distance-squared (target-pos 0) (-> self root trans)))
          (go-virtual dormant)
          )
      )
    (spawn (-> self part) (-> self root trans))
    (let ((f0-3 (vector-vector-distance-squared (target-pos 0) (-> self root trans)))
          (f1-0 (-> self freeze-pickup-radius))
          )
      (when (< f0-3 (* f1-0 f1-0))
        (send-event (ppointer->process (-> self parent)) 'freeze (-> self freeze-time))
        (case (-> self bb-pickup-type)
          (((bb-pickup-type small))
           (sound-play "small-pickup")
           )
          (((bb-pickup-type medium))
           (sound-play "medium-pickup")
           )
          (((bb-pickup-type large))
           (sound-play "large-pickup")
           )
          )
        (go-virtual die)
        )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate die (bb-freeze)
  :virtual #t
  :code (behavior ()
    (cleanup-for-death self)
    )
  )

;; definition for method 10 of type bb-freeze
(defmethod deactivate ((this bb-freeze))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this part))
      (kill-particles (-> this part))
      )
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

;; definition for method 11 of type bb-freeze
;; WARN: Return type mismatch entity-perm-status vs object.
(defmethod init-from-entity! ((this bb-freeze) (arg0 entity-actor))
  (stack-size-set! (-> this main-thread) 32)
  (process-entity-status! this (entity-perm-status dead) #t)
  )

;; definition for function bb-freeze-init-by-other
(defbehavior bb-freeze-init-by-other bb-freeze ((arg0 entity-actor) (arg1 object) (arg2 float) (arg3 float) (arg4 float))
  (process-entity-set! self arg0)
  (set! (-> self bb-pickup-type) (bb-pickup-type small))
  (set! (-> self root) (new 'process 'trsqv))
  (process-drawable-from-entity! self arg0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self activate-radius) arg2)
  (set! (-> self freeze-time) arg3)
  (set! (-> self freeze-pickup-radius) arg4)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1539) self))
  (go-virtual dormant)
  )

;; definition of type a-bb-freeze
(deftype a-bb-freeze (bb-freeze)
  ()
  )

;; definition for method 3 of type a-bb-freeze
(defmethod inspect ((this a-bb-freeze))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bb-freeze inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for function a-bb-freeze-init-by-other
(defbehavior a-bb-freeze-init-by-other a-bb-freeze ((arg0 entity-actor) (arg1 object) (arg2 float) (arg3 float) (arg4 float))
  (stack-size-set! (-> self main-thread) 32)
  (process-entity-set! self arg0)
  (set! (-> self bb-pickup-type) (bb-pickup-type medium))
  (set! (-> self root) (new 'process 'trsqv))
  (process-drawable-from-entity! self arg0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self activate-radius) arg2)
  (set! (-> self freeze-time) arg3)
  (set! (-> self freeze-pickup-radius) arg4)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1538) self))
  (go-virtual dormant)
  )

;; definition of type b-bb-freeze
(deftype b-bb-freeze (bb-freeze)
  ()
  )

;; definition for method 3 of type b-bb-freeze
(defmethod inspect ((this b-bb-freeze))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type bb-freeze inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for function b-bb-freeze-init-by-other
(defbehavior b-bb-freeze-init-by-other b-bb-freeze ((arg0 entity-actor) (arg1 object) (arg2 float) (arg3 float) (arg4 float))
  (stack-size-set! (-> self main-thread) 32)
  (process-entity-set! self arg0)
  (set! (-> self bb-pickup-type) (bb-pickup-type large))
  (set! (-> self root) (new 'process 'trsqv))
  (process-drawable-from-entity! self arg0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self activate-radius) arg2)
  (set! (-> self freeze-time) arg3)
  (set! (-> self freeze-pickup-radius) arg4)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1537) self))
  (go-virtual dormant)
  )

;; definition of type freeze-time-hud
(deftype freeze-time-hud (hud-goal)
  ()
  )

;; definition for method 3 of type freeze-time-hud
(defmethod inspect ((this freeze-time-hud))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud-goal inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 15 of type freeze-time-hud
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this freeze-time-hud))
  (set-hud-piece-position! (the-as hud-sprite (-> this sprites)) 447 70)
  (format (clear (-> this strings 0 text)) "~2,'0D" (/ (-> this values 0 current) 100))
  (format (clear (-> this strings 2 text)) ":")
  (format (clear (-> this strings 3 text)) "~2,'0D" (mod (-> this values 0 current) 100))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -15 -8)
  (set-as-offset-from! (the-as hud-sprite (-> this strings 2 pos)) (the-as vector4w (-> this sprites)) 0 -8)
  (set-as-offset-from! (the-as hud-sprite (-> this strings 3 pos)) (the-as vector4w (-> this sprites)) 15 -8)
  (set-as-offset-from! (the-as hud-sprite (-> this strings 1 pos)) (the-as vector4w (-> this sprites)) 0 -40)
  (let ((s5-3 (new
                'stack
                'font-context
                *font-default-matrix*
                (+ (-> this strings 1 pos x) -80)
                (+ (-> this strings 1 pos y) -20)
                0.0
                (font-color default)
                (font-flags shadow kerning)
                )
              )
        )
    (set! (-> s5-3 flags) (font-flags kerning middle large))
    (let ((v1-6 s5-3))
      (set! (-> v1-6 width) (the float 160))
      )
    (let ((v1-7 s5-3))
      (set! (-> v1-7 height) (the float 80))
      )
    (let ((v1-8 s5-3))
      (set! (-> v1-8 scale) 0.6)
      )
    (let ((a0-16 s5-3))
      (set! (-> a0-16 color) (-> this strings 1 color))
      )
    (let ((s4-0 print-game-text))
      (format (clear *temp-string*) (lookup-text! *common-text* (text-id text-0861) #f))
      (s4-0 *temp-string* s5-3 #f 44 (bucket-id hud-draw-hud-alpha))
      )
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type freeze-time-hud
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this freeze-time-hud))
  (set! (-> this values 0 target) (the int (-> *game-info* score)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type freeze-time-hud
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this freeze-time-hud))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid) (the-as texture-id (get-texture hud-scoreboard-01 level-default-minimap)))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf3))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.5)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 color) (font-color red))
  (alloc-string-if-needed this 2)
  (set! (-> this strings 2 scale) 0.5)
  (set! (-> this strings 2 flags) (font-flags kerning middle large))
  (set! (-> this strings 2 color) (font-color red))
  (alloc-string-if-needed this 3)
  (set! (-> this strings 3 scale) 0.5)
  (set! (-> this strings 3 flags) (font-flags kerning middle large))
  (set! (-> this strings 3 color) (font-color red))
  (alloc-string-if-needed this 1)
  (set! (-> this strings 1 scale) 0.75)
  (set! (-> this strings 1 flags) (font-flags kerning middle large))
  (set! (-> this strings 1 color) (font-color red))
  (let ((s5-0 format)
        (gp-1 (clear (-> this strings 1 text)))
        (s4-0 "")
        )
    (format (clear *temp-string*) (lookup-text! *common-text* (text-id text-0861) #f))
    *temp-string*
    (s5-0 gp-1 s4-0)
    )
  0
  (none)
  )

;; definition of type task-manager-bbush-timer-chase
(deftype task-manager-bbush-timer-chase (task-manager)
  ((actor-group               (pointer actor-group))
   (actor-group-count         int32)
   (freeze-time               float)
   (path-pos                  float)
   (trail-effect              handle)
   (trans                     vector  :inline)
   (freeze-activation-radius  float)
   (goal-activation-radius    float)
   (total-time                float)
   (touched                   symbol)
   (freeze-time-1             float   :offset 308)
   (freeze-time-2             float)
   (freeze-time-3             float)
   (freeze-pickup-radius      float)
   (freeze-time-hud           handle)
   (sound-id                  sound-id)
   (color-flash-time          time-frame)
   )
  (:methods
    (get-entity-name (_type_) string)
    (set-sbanks (_type_) none)
    (get-node-array (_type_) (array timer-chase-node))
    )
  )

;; definition for method 3 of type task-manager-bbush-timer-chase
(defmethod inspect ((this task-manager-bbush-timer-chase))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Tfreeze-time: ~f~%" (-> this freeze-time))
  (format #t "~2Tpath-pos: ~f~%" (-> this path-pos))
  (format #t "~2Ttrail-effect: ~D~%" (-> this trail-effect))
  (format #t "~2Ttrans: #<vector @ #x~X>~%" (-> this trans))
  (format #t "~2Tfreeze-activation-radius: ~f~%" (-> this freeze-activation-radius))
  (format #t "~2Tgoal-activation-radius: ~f~%" (-> this goal-activation-radius))
  (format #t "~2Ttotal-time: ~f~%" (-> this total-time))
  (format #t "~2Ttouched: ~A~%" (-> this touched))
  (format #t "~2Tfreeze-time: ~f~%" (-> this freeze-time))
  (format #t "~2Tfreeze-time-1: ~f~%" (-> this freeze-time-1))
  (format #t "~2Tfreeze-time-2: ~f~%" (-> this freeze-time-2))
  (format #t "~2Tfreeze-time-3: ~f~%" (-> this freeze-time-3))
  (format #t "~2Tfreeze-pickup-radius: ~f~%" (-> this freeze-pickup-radius))
  (format #t "~2Tfreeze-time-hud: ~D~%" (-> this freeze-time-hud))
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (format #t "~2Tcolor-flash-time: ~D~%" (-> this color-flash-time))
  (label cfg-7)
  this
  )

;; failed to figure out what this is:
(defstate resolution (task-manager-bbush-timer-chase)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :code (behavior ()
    (local-vars (v1-34 object))
    (when (logtest? (-> self info mask) (task-manager-mask resolution-scene))
      (let ((gp-1 (ppointer->handle (process-spawn
                                      scene-player
                                      :init scene-player-init
                                      (-> self info resolution-scene)
                                      #t
                                      (-> self info resolution-scene-continue)
                                      :name "scene-player"
                                      )
                                    )
                  )
            )
        (while (handle->process (the-as handle gp-1))
          (suspend)
          )
        )
      )
    (task-manager-method-27 self)
    (give *game-info* 'skill (the float (-> self info user-count)) (the-as handle #f))
    (until (< (* 45 (-> self info user-count)) (- (current-time) (-> self state-time)))
      (suspend)
      )
    (let ((gp-2 (-> self info on-complete)))
      (if gp-2
          (script-eval gp-2)
          )
      )
    (task-node-close! (-> self info final-node) 'event)
    (remove-setting! 'allow-progress)
    (while (begin
             (set! v1-34 (or (handle->process (-> self arrow)) (begin
                                                                 (countdown (v1-35 4)
                                                                   (when (handle->process (-> self hud v1-35))
                                                                     (set! v1-34 #t)
                                                                     (goto cfg-41)
                                                                     )
                                                                   )
                                                                 #f
                                                                 )
                             )
                   )
             (label cfg-41)
             v1-34
             )
      (suspend)
      )
    )
  )

;; definition for method 33 of type task-manager-bbush-timer-chase
;; WARN: Return type mismatch int vs none.
(defmethod set-sbanks ((this task-manager-bbush-timer-chase))
  (cond
    ((= (status-of-level-and-borrows *level* 'waswide #f) 'active)
     (set-setting! 'extra-bank '((wascity3 bbush1)) 0.0 0)
     (set-setting! 'music 'wastimer 0.0 0)
     )
    (else
      (set-setting! 'extra-bank '((desert2 bbush1) (nest2 bbush1)) 0.0 0)
      (set-setting! 'music 'destimer 0.0 0)
      )
    )
  0
  (none)
  )

;; definition for method 32 of type task-manager-bbush-timer-chase
(defmethod get-entity-name ((this task-manager-bbush-timer-chase))
  (format 0 "tag2~%")
  "tmanager-3"
  )

;; definition for method 34 of type task-manager-bbush-timer-chase
(defmethod get-node-array ((this task-manager-bbush-timer-chase))
  *timer-chase-path-0*
  )

;; definition for method 21 of type task-manager-bbush-timer-chase
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod set-time-limit ((this task-manager-bbush-timer-chase))
  (local-vars (s4-0 object) (sv-96 res-tag))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set-time-chase-particle-texture)
  (set-setting! 'airlock #f 0.0 0)
  (set! (-> this freeze-time) 0.0)
  (set-sbanks this)
  (set! (-> this trail-effect)
        (ppointer->handle (process-spawn trail-effect *null-vector* :name "trail-effect" :to this))
        )
  (set! (-> this freeze-time-hud)
        (ppointer->handle (process-spawn freeze-time-hud :init hud-init-by-other :name "freeze-time-hud" :to this))
        )
  (if (handle->process (-> this freeze-time-hud))
      (send-event (handle->process (-> this freeze-time-hud)) 'force-hide)
      )
  (set! (-> *game-info* score) 0.0)
  (set! (-> this touched) #f)
  (let ((s5-3 (entity-by-name (get-entity-name this))))
    (set! s4-0
          (when s5-3
            (set! (-> this entity) (the-as entity-actor s5-3))
            (set! (-> this freeze-activation-radius) (res-lump-float s5-3 'freezer-activation-radius :default 40960.0))
            (set! (-> this freeze-pickup-radius) (res-lump-float s5-3 'freeze-pickup-radius :default 10.0))
            (set! (-> this goal-activation-radius) (res-lump-float s5-3 'goal-activation-radius :default 40960.0))
            (set! (-> this total-time) (res-lump-float s5-3 'time-limit :default 10.0))
            (set! (-> this freeze-time) 0.0)
            (set! (-> this freeze-time-1) (res-lump-float s5-3 'freeze-time :default 10.0))
            (set! (-> this freeze-time-2) (res-lump-float s5-3 'a-freeze-time :default 10.0))
            (set! (-> this freeze-time-3) (res-lump-float s5-3 'b-freeze-time :default 10.0))
            (set! sv-96 (new 'static 'res-tag))
            (set! s4-0 (res-lump-data s5-3 'actor-groups pointer :tag-ptr (& sv-96)))
            (cond
              ((and (the-as pointer s4-0) (nonzero? (-> sv-96 elt-count)))
               (format 0 "elt: ~d~%" (the-as pointer s4-0))
               (format 0 "elt2: ~d~%" (-> sv-96 elt-count))
               (set! (-> this actor-group-count) (the-as int (-> sv-96 elt-count)))
               (set! (-> this actor-group) (the-as (pointer actor-group) s4-0))
               s4-0
               )
              (else
                (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
                )
              )
            )
          )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-bbush-timer-chase)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('freeze)
       (let ((f0-0 (the-as float (-> block param 0))))
         (+! (-> self time-limit) (the int (* 300.0 f0-0)))
         (+! (-> self freeze-time) f0-0)
         (when (-> self freeze-time-hud)
           (cond
             ((= f0-0 (-> self freeze-time-1))
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 0 color)
                    (font-color cyan)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 1 color)
                    (font-color cyan)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 2 color)
                    (font-color cyan)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 3 color)
                    (font-color cyan)
                    )
              )
             ((= f0-0 (-> self freeze-time-2))
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 0 color)
                    (font-color yellow)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 1 color)
                    (font-color yellow)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 2 color)
                    (font-color yellow)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 3 color)
                    (font-color yellow)
                    )
              )
             ((= f0-0 (-> self freeze-time-3))
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 0 color)
                    (font-color red)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 1 color)
                    (font-color red)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 2 color)
                    (font-color red)
                    )
              (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 3 color)
                    (font-color red)
                    )
              )
             )
           (let ((v0-0 (the-as object (current-time))))
             (set! (-> self color-flash-time) (the-as time-frame v0-0))
             v0-0
             )
           )
         )
       )
      (('goal)
       (send-event (handle->process (-> self trail-effect)) 'fadeout)
       (send-event self 'complete)
       )
      (('start)
       (when (and (nonzero? (-> self actor-group)) (-> self touched))
         (dotimes (gp-0 3)
           (dotimes (s5-0 (length (-> self actor-group gp-0)))
             (let ((s4-0 (-> self actor-group gp-0 data s5-0)))
               (cond
                 ((and (zero? s5-0) (zero? gp-0))
                  (process-spawn bb-goal (-> s4-0 actor) (-> self goal-activation-radius) :name "bb-goal" :to self)
                  )
                 (else
                   (cond
                     ((zero? gp-0)
                      (process-spawn
                        bb-freeze
                        (-> s4-0 actor)
                        (get-node-array self)
                        (-> self freeze-activation-radius)
                        (-> self freeze-time-1)
                        (-> self freeze-pickup-radius)
                        :name "bb-freeze"
                        :to self
                        )
                      )
                     ((= gp-0 1)
                      (process-spawn
                        a-bb-freeze
                        (-> s4-0 actor)
                        (get-node-array self)
                        (-> self freeze-activation-radius)
                        (-> self freeze-time-2)
                        (-> self freeze-pickup-radius)
                        :name "a-bb-freeze"
                        :to self
                        )
                      )
                     ((= gp-0 2)
                      (process-spawn
                        b-bb-freeze
                        (-> s4-0 actor)
                        (get-node-array self)
                        (-> self freeze-activation-radius)
                        (-> self freeze-time-3)
                        (-> self freeze-pickup-radius)
                        :name "b-bb-freeze"
                        :to self
                        )
                      )
                     )
                   )
                 )
               )
             )
           )
         #f
         )
       )
      (else
        (task-manager-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (when (-> self touched)
      (+! (-> self path-pos) (* 0.1 (seconds-per-frame)))
      (when (< (the float (+ (length (-> self actor-group 0)) -1)) (-> self path-pos))
        (set! (-> self path-pos) (the float (+ (length (-> self actor-group 0)) -1)))
        (send-event self 'complete)
        )
      )
    )
  :exit (behavior ()
    '()
    )
  :trans (behavior ()
    (local-vars (sv-208 (function vector float vector)) (sv-224 vector) (sv-240 (function vector float vector)))
    (seek! (-> self freeze-time) 0.0 (seconds-per-frame))
    (when (time-elapsed? (-> self color-flash-time) (seconds 1))
      (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 0 color)
            (font-color green)
            )
      (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 1 color)
            (font-color green)
            )
      (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 2 color)
            (font-color green)
            )
      (set! (-> (the-as freeze-time-hud (handle->process (-> self freeze-time-hud))) strings 3 color)
            (font-color green)
            )
      )
    (if (and (-> self touched) (= (-> self freeze-time) 0.0))
        (hud-timer-handler self)
        )
    (set! (-> *game-info* score) (* 100.0 (-> self freeze-time)))
    (dotimes (gp-0 (+ (length (-> self actor-group (+ (-> self actor-group-count) -1))) -1))
      (when (and (>= (-> self path-pos) (the float gp-0)) (>= (the float (+ gp-0 1)) (-> self path-pos)))
        (let ((v1-22 (-> self actor-group (+ (-> self actor-group-count) -1) data gp-0))
              (a1-23 (-> self actor-group (+ (-> self actor-group-count) -1) data (+ gp-0 1)))
              )
          (when (and v1-22 a1-23)
            (let ((s3-0 (-> v1-22 actor))
                  (s4-0 (-> a1-23 actor))
                  (s5-0 (new 'stack 'cubic-curve))
                  )
              (new 'stack-no-clear 'vector)
              (when (and s3-0 s4-0)
                (let ((s2-0 s5-0)
                      (s1-0 (method-of-type cubic-curve cubic-curve-method-9))
                      (s0-0 (-> s3-0 trans))
                      )
                  (set! sv-208 vector-normalize!)
                  (let* ((a0-26 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> s3-0 quat)))
                         (a1-26 204800.0)
                         (s3-1 (sv-208 a0-26 a1-26))
                         )
                    (set! sv-224 (-> s4-0 trans))
                    (set! sv-240 vector-normalize!)
                    (let* ((a0-28 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> s4-0 quat)))
                           (a1-28 204800.0)
                           (t0-0 (sv-240 a0-28 a1-28))
                           )
                      (s1-0 s2-0 s0-0 s3-1 sv-224 t0-0)
                      )
                    )
                  )
                (cubic-curve-method-10 s5-0 (-> self trans) (- (-> self path-pos) (the float gp-0)))
                )
              )
            )
          )
        )
      )
    (send-event (handle->process (-> self trail-effect)) 'trans (-> self trans))
    (cond
      ((-> self touched)
       (+! (-> self path-pos) (* 2.0 (seconds-per-frame)))
       )
      (else
        (set-time! (-> self start-time))
        (when (< (vector-vector-distance (target-pos 0) (-> self trans)) 20480.0)
          (set! (-> self touched) #t)
          (if (handle->process (-> self freeze-time-hud))
              (send-event (handle->process (-> self freeze-time-hud)) 'force-show)
              )
          (sound-play "start-pickup")
          (send-event self 'start)
          (set! (-> self time-limit) (the-as time-frame (the int (* 300.0 (-> self total-time)))))
          (send-event (handle->process (-> self trail-effect)) 'active)
          )
        (if (< 409600.0 (vector-vector-distance (target-pos 0) (-> self trans)))
            (send-event self 'fail)
            )
        )
      )
    )
  :code (behavior ()
    (until #f
      (suspend)
      )
    #f
    )
  )

;; definition of type task-manager-bbush-timer-chase-2
(deftype task-manager-bbush-timer-chase-2 (task-manager-bbush-timer-chase)
  ()
  )

;; definition for method 3 of type task-manager-bbush-timer-chase-2
(defmethod inspect ((this task-manager-bbush-timer-chase-2))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager-bbush-timer-chase inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 32 of type task-manager-bbush-timer-chase-2
(defmethod get-entity-name ((this task-manager-bbush-timer-chase-2))
  "t-manager-9"
  )

;; definition for method 34 of type task-manager-bbush-timer-chase-2
(defmethod get-node-array ((this task-manager-bbush-timer-chase-2))
  *timer-chase-path-1*
  )

;; definition of type task-manager-bbush-timer-chase-3
(deftype task-manager-bbush-timer-chase-3 (task-manager-bbush-timer-chase)
  ()
  )

;; definition for method 3 of type task-manager-bbush-timer-chase-3
(defmethod inspect ((this task-manager-bbush-timer-chase-3))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager-bbush-timer-chase inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 32 of type task-manager-bbush-timer-chase-3
(defmethod get-entity-name ((this task-manager-bbush-timer-chase-3))
  "t-manager-11"
  )

;; definition for method 33 of type task-manager-bbush-timer-chase-3
;; WARN: Return type mismatch int vs none.
(defmethod set-sbanks ((this task-manager-bbush-timer-chase-3))
  (set-setting! 'city-sound '(citybb1) 0.0 2)
  (set-setting! 'music 'ctytimer 0.0 0)
  0
  (none)
  )




