;;-*-Lisp-*-
(in-package goal)

;; definition for method 9 of type mission-squad-control
(defmethod init! ((this mission-squad-control) (arg0 int) (arg1 int) (arg2 int))
  (set! (-> this attackers) (new 'loading-level 'city-attacker-array arg0))
  (set! (-> this attacker-cache) (new 'loading-level 'city-attacker-cache-array arg0))
  (set! (-> this unused-list) (new 'loading-level 'boxed-array int16 arg0))
  (set! (-> this hatred-vals) (new 'loading-level 'city-hatred-array arg2))
  (set! (-> this hatred-indices) (new 'loading-level 'boxed-array uint8 (* arg1 arg1)))
  (set! (-> this max-num-object-types) arg1)
  (init-attackers this)
  (none)
  )

;; definition for method 10 of type city-attacker-info
;; WARN: Return type mismatch symbol vs none.
(defmethod reset! ((this city-attacker-info))
  (set! (-> this proc) (the-as handle #f))
  (set! (-> this enemy) (the-as handle #f))
  (set! (-> this next-update-target-time) 0)
  (set! (-> this flags) (city-attacker-info-flag))
  (set! (-> this num-current-attackers) (the-as uint 0))
  (set! (-> this self-type) -1)
  (set! (-> this enemy-type) -1)
  (set! (-> this enemy-index) -1)
  (set! (-> this callback) #f)
  (set! (-> this hatred-map-callback) #f)
  (none)
  )

;; definition for method 14 of type mission-squad-control
(defmethod init-attackers ((this mission-squad-control))
  (set! (-> this attackers length) (-> this attackers allocated-length))
  (dotimes (s5-0 (-> this attackers length))
    (reset! (-> this attackers data s5-0))
    (set! (-> this attackers data s5-0 self-index) s5-0)
    (set! (-> this unused-list s5-0) s5-0)
    )
  (set! (-> this unused-list length) (-> this unused-list allocated-length))
  (set! (-> this target-attacker) (allocate-attacker this))
  (set! (-> this target-attacker flags) (city-attacker-info-flag))
  (logior! (-> this target-attacker flags) (city-attacker-info-flag cai1))
  (set! (-> this target-attacker max-num-attackers) (the-as uint 4))
  (reset-hatred this)
  (none)
  )

;; definition for method 23 of type mission-squad-control
;; WARN: Return type mismatch city-hatred-info-flag vs none.
(defmethod reset-hatred ((this mission-squad-control))
  (set! (-> this hatred-vals length) 1)
  (dotimes (v1-1 (-> this hatred-indices length))
    (set! (-> this hatred-indices v1-1) (the-as uint 0))
    )
  (set! (-> this target-attacker flags) (city-attacker-info-flag))
  (logior! (-> this target-attacker flags) (city-attacker-info-flag cai1))
  (logior! (-> this hatred-vals data 0 flags) (city-hatred-info-flag chi0))
  (none)
  )

;; definition for method 10 of type mission-squad-control
(defmethod allocate-attacker ((this mission-squad-control))
  (let ((gp-0 (the-as city-attacker-info #f)))
    (cond
      ((> (-> this unused-list length) 0)
       (let ((v1-7 (-> this unused-list (+ (-> this unused-list length) -1))))
         (set! gp-0 (-> this attackers data v1-7))
         )
       (+! (-> this unused-list length) -1)
       )
      (else
        (format 0 "!!!! Unable to allocate new attacker for mission squad!~%")
        )
      )
    gp-0
    )
  )

;; definition for method 11 of type mission-squad-control
;; WARN: Return type mismatch int vs none.
(defmethod remove-attacker ((this mission-squad-control) (arg0 city-attacker-info))
  (let ((s5-0 (-> arg0 self-index)))
    (when (and (>= s5-0 0) (< s5-0 (-> this attackers length)))
      (dotimes (v1-3 (-> this attackers length))
        (let ((a0-5 (-> this attackers data v1-3)))
          (when (= (-> a0-5 enemy-index) s5-0)
            (set! (-> a0-5 enemy-index) -1)
            (set! (-> a0-5 enemy) (the-as handle #f))
            (logior! (-> a0-5 flags) (city-attacker-info-flag cai2))
            )
          )
        )
      (let ((v1-6 (-> arg0 enemy-index)))
        (when (and (>= v1-6 0) (< v1-6 (-> this attackers length)))
          (let ((v1-9 (-> this attackers data v1-6)))
            (+! (-> v1-9 num-current-attackers) -1)
            )
          )
        )
      (reset! arg0)
      (set! (-> this unused-list (-> this unused-list length)) s5-0)
      (+! (-> this unused-list length) 1)
      )
    )
  (none)
  )

;; definition for method 9 of type city-attacker-info
;; WARN: Return type mismatch symbol vs none.
(defmethod init! ((this city-attacker-info) (arg0 process) (arg1 int))
  (set! (-> this proc) (process->handle arg0))
  (set! (-> this self-type) arg1)
  (set! (-> this enemy) (the-as handle #f))
  (logior! (-> this flags) (city-attacker-info-flag cai0))
  (set! (-> this next-update-target-time) 0)
  (set! (-> this num-current-attackers) (the-as uint 0))
  (set! (-> this max-num-attackers) (the-as uint 127))
  (set! (-> this enemy-index) -1)
  (set! (-> this callback) #f)
  (none)
  )

;; definition for method 13 of type mission-squad-control
(defmethod mission-squad-control-method-13 ((this mission-squad-control) (arg0 city-attacker-info))
  (local-vars (v0-3 int))
  (let ((f30-0 0.0)
        (gp-0 -1)
        )
    (dotimes (s3-0 (-> this attackers length))
      (let ((s2-0 (-> this attackers data s3-0)))
        (when (and (!= (-> arg0 self-index) s3-0)
                   (logtest? (-> s2-0 flags) (city-attacker-info-flag cai0))
                   (not (logtest? (-> s2-0 flags) (city-attacker-info-flag cai3)))
                   (-> this attacker-cache data s3-0 attackable?)
                   )
          (let ((v1-11 -1))
            (if (-> arg0 hatred-map-callback)
                (set! v1-11 ((-> arg0 hatred-map-callback) (handle->process (-> arg0 proc)) s2-0))
                )
            (if (< v1-11 0)
                (set! v1-11
                      (the-as
                        int
                        (-> this hatred-indices (+ (* (-> arg0 self-type) (-> this max-num-object-types)) (-> s2-0 self-type)))
                        )
                      )
                )
            (when (> v1-11 0)
              (let ((s1-0 (-> this hatred-vals data v1-11)))
                (when (and (not (logtest? (-> s1-0 flags) (city-hatred-info-flag chi0)))
                           (or (not (-> arg0 callback)) ((-> arg0 callback) (handle->process (-> arg0 proc)) s2-0))
                           )
                  (let ((f28-0 (-> s1-0 hatred)))
                    1.0
                    (let ((f0-1 1.0)
                          (v1-30 (-> s2-0 num-current-attackers))
                          )
                      (if (= (-> arg0 enemy-index) s3-0)
                          (+! v1-30 -1)
                          )
                      (let* ((f1-2 (/ (the float v1-30) (the float (-> s2-0 max-num-attackers))))
                             (f2-3 (fmin 1.0 f1-2))
                             (f1-3 1.0)
                             (f26-0 (+ f1-3 (* f2-3 (- (-> s1-0 attacker-scale) f1-3))))
                             )
                        (when (< (-> s1-0 dist-scale) 1.0)
                          (let* ((f1-6 (vector-vector-xz-distance
                                         (-> this attacker-cache data (-> arg0 self-index) pos)
                                         (-> this attacker-cache data s3-0 pos)
                                         )
                                       )
                                 (f0-3 (/ f1-6 (-> s1-0 hatred-dist)))
                                 )
                            (set! f0-1 (cond
                                         ((>= f1-6 (-> s1-0 max-consider-dist))
                                          0.0
                                          )
                                         (else
                                           (let ((f1-8 (fmin 1.0 f0-3))
                                                 (f0-4 1.0)
                                                 )
                                             (+ f0-4 (* f1-8 (- (-> s1-0 dist-scale) f0-4)))
                                             )
                                           )
                                         )
                                  )
                            )
                          )
                        (let ((f0-7 (* f28-0 (* f26-0 f0-1))))
                          (if (= s3-0 (-> arg0 enemy-index))
                              (set! f0-7 (* 2.0 f0-7))
                              )
                          (when (< f30-0 f0-7)
                            (set! f30-0 f0-7)
                            (set! gp-0 s3-0)
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    (when #t
      (when (!= gp-0 (-> arg0 enemy-index))
        (when (and (>= (-> arg0 enemy-index) 0) (< gp-0 0))
          (if (logtest? (-> this attackers data (-> arg0 enemy-index) flags) (city-attacker-info-flag cai5))
              (return 0)
              )
          )
        (if (>= (-> arg0 enemy-index) 0)
            (+! (-> this attackers data (-> arg0 enemy-index) num-current-attackers) -1)
            )
        (logior! (-> arg0 flags) (city-attacker-info-flag cai2))
        (set! (-> arg0 enemy-index) gp-0)
        (cond
          ((>= gp-0 0)
           (set! (-> arg0 enemy) (-> this attackers data gp-0 proc))
           (set! (-> arg0 enemy-type) (-> this attackers data gp-0 self-type))
           (set! v0-3 (the-as int (+ (-> this attackers data gp-0 num-current-attackers) 1)))
           (set! (-> this attackers data gp-0 num-current-attackers) (the-as uint v0-3))
           )
          (else
            (set! (-> arg0 enemy) (the-as handle #f))
            (set! v0-3 -1)
            (set! (-> arg0 enemy-type) v0-3)
            )
          )
        v0-3
        )
      )
    )
  )

;; definition for method 12 of type mission-squad-control
(defmethod mission-squad-control-method-12 ((this mission-squad-control))
  (dotimes (s5-0 (-> this attackers length))
    (let ((a1-0 (-> this attackers data s5-0)))
      (when (logtest? (-> a1-0 flags) (city-attacker-info-flag cai0))
        (let ((v1-6 (handle->process (-> a1-0 proc))))
          (cond
            (v1-6
              (set! (-> this attacker-cache data s5-0 proc) v1-6)
              (set! (-> this attacker-cache data s5-0 pos) (-> (the-as process-drawable v1-6) root trans))
              (set! (-> this attacker-cache data s5-0 attackable?)
                    (or (= (-> v1-6 type) target)
                        (not (logtest? (-> (the-as process-focusable v1-6) focus-status) (focus-status disable dead inactive)))
                        )
                    )
              )
            ((!= (-> a1-0 self-index) (-> this target-attacker self-index))
             (remove-attacker this a1-0)
             )
            )
          )
        )
      )
    )
  (dotimes (s5-1 (-> this attackers length))
    (let ((a1-9 (-> this attackers data s5-1)))
      (when (logtest? (-> a1-9 flags) (city-attacker-info-flag cai0))
        (if (and (not (logtest? (-> a1-9 flags) (city-attacker-info-flag cai1)))
                 (or (< (-> a1-9 enemy-index) 0)
                     (not (logtest? (-> this attackers data (-> a1-9 enemy-index) flags) (city-attacker-info-flag cai0)))
                     (and (< (-> a1-9 next-update-target-time) (current-time))
                          (let ((a0-29
                                  (-> this hatred-indices (+ (* (-> a1-9 self-type) (-> this max-num-object-types)) (-> a1-9 enemy-type)))
                                  )
                                )
                            (or (when (> a0-29 0)
                                  (let ((a0-31 (-> this hatred-vals data a0-29)))
                                    (not (logtest? (-> a0-31 flags) (city-hatred-info-flag chi1)))
                                    )
                                  )
                                (-> a1-9 hatred-map-callback)
                                )
                            )
                          )
                     )
                 )
            (mission-squad-control-method-13 this a1-9)
            )
        )
      )
    )
  #f
  )

;; definition for method 22 of type mission-squad-control
;; WARN: Return type mismatch int vs none.
(defmethod update-attack-target ((this mission-squad-control))
  (cond
    ((or (not *target*) (focus-test? *target* disable dead inactive))
     (logclear! (-> this target-attacker flags) (city-attacker-info-flag cai0))
     (logclear! (-> this target-attacker flags) (city-attacker-info-flag cai5))
     )
    ((or (not *target*) (focus-test? *target* ignore))
     (logior! (-> this target-attacker flags) (city-attacker-info-flag cai0))
     (logior! (-> this target-attacker flags) (city-attacker-info-flag cai5))
     )
    (else
      (logior! (-> this target-attacker flags) (city-attacker-info-flag cai0 cai1 cai4))
      (logclear! (-> this target-attacker flags) (city-attacker-info-flag cai5))
      (set! (-> this target-attacker self-type) 0)
      (set! (-> this target-attacker proc) (process->handle *target*))
      )
    )
  (none)
  )

;; definition for method 16 of type mission-squad-control
;; WARN: Return type mismatch int vs none.
(defmethod mission-squad-control-method-16 ((this mission-squad-control))
  (update-attack-target this)
  (mission-squad-control-method-12 this)
  0
  (none)
  )

;; definition for method 21 of type mission-squad-control
(defmethod get-hatred-at-idx ((this mission-squad-control) (arg0 int) (arg1 int))
  (-> this hatred-vals data (-> this hatred-indices (+ (* arg0 (-> this max-num-object-types)) arg1)))
  )

;; definition for method 19 of type mission-squad-control
;; WARN: Return type mismatch object vs city-hatred-info.
(defmethod push-back-hatred ((this mission-squad-control))
  (the-as city-hatred-info (cond
                             ((= (-> this hatred-vals length) (-> this hatred-vals allocated-length))
                              (break!)
                              (-> this hatred-vals data)
                              )
                             (else
                               (let ((v1-4 (-> this hatred-vals length)))
                                 (set! (-> this hatred-vals data v1-4 index) (the-as uint v1-4))
                                 (+! (-> this hatred-vals length) 1)
                                 (-> this hatred-vals data v1-4)
                                 )
                               )
                             )
          )
  )

;; definition for method 20 of type mission-squad-control
(defmethod set-hatred-indices ((this mission-squad-control) (arg0 city-hatred-info) (arg1 int) (arg2 int))
  (let ((v0-0 (-> arg0 index)))
    (set! (-> this hatred-indices (+ (* arg1 (-> this max-num-object-types)) arg2)) v0-0)
    v0-0
    )
  )

;; definition for method 15 of type mission-squad-control
;; WARN: Return type mismatch int vs none.
(defmethod init-attack-controller ((this mission-squad-control))
  0
  (none)
  )

;; definition for method 17 of type mission-squad-control
(defmethod set-hatred-indices-for-all ((this mission-squad-control) (arg0 int) (arg1 city-hatred-info) (arg2 city-hatred-info) (arg3 int))
  (dotimes (s1-0 (-> this max-num-object-types))
    (let ((a0-2 (get-hatred-at-idx this s1-0 arg0)))
      (if (= (-> a0-2 index) (-> arg1 index))
          (set-hatred-indices this arg2 s1-0 arg3)
          )
      )
    )
  #f
  )

;; definition for method 18 of type mission-squad-control
(defmethod get-attacker-at-idx ((this mission-squad-control) (arg0 int))
  (if (or (< arg0 0) (>= arg0 (-> this attackers length)))
      (return (the-as city-attacker-info #f))
      )
  (let ((v0-0 (-> this attackers data arg0)))
    (cond
      ((= (-> v0-0 self-type) -1)
       (the-as city-attacker-info #f)
       )
      (else
        (empty)
        v0-0
        )
      )
    )
  )




