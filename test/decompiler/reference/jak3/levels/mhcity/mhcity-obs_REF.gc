;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpartgroup group-mhcity-dark-eco-door
  :id 328
  :flags (sp0 sp4 sp6)
  :bounds (static-bspherem 0 0 0 20)
  :rotate ((degrees 0) (degrees 180) (degrees 0))
  :parts ((sp-item 1387 :flags (is-3d sp6 sp7))
    (sp-item 1388 :flags (is-3d sp6 sp7))
    (sp-item 1389 :flags (is-3d sp6 sp7))
    (sp-item 1390 :flags (is-3d sp6 sp7))
    (sp-item 1391 :flags (is-3d sp6 sp7))
    (sp-item 1392 :flags (is-3d sp6 sp7))
    (sp-item 1393 :flags (is-3d sp6 sp7))
    (sp-item 1394 :flags (is-3d sp6 sp7))
    (sp-item 1395 :flags (is-3d sp6 sp7))
    (sp-item 1396 :flags (is-3d sp6 sp7))
    (sp-item 1397 :flags (is-3d sp6 sp7))
    (sp-item 1398 :flags (is-3d sp6 sp7))
    (sp-item 1399 :flags (is-3d sp6 sp7))
    (sp-item 1400 :flags (is-3d sp6 sp7))
    (sp-item 1401 :flags (is-3d sp6 sp7))
    (sp-item 1402 :flags (is-3d sp6 sp7))
    (sp-item 1403 :flags (is-3d sp6 sp7))
    (sp-item 1404 :flags (is-3d sp6 sp7))
    (sp-item 1405 :flags (is-3d sp6 sp7))
    (sp-item 1406 :flags (is-3d sp6 sp7))
    (sp-item 1407 :flags (is-3d sp6 sp7))
    (sp-item 1408 :flags (is-3d sp6 sp7))
    (sp-item 1409 :flags (is-3d sp6 sp7))
    (sp-item 1410 :flags (is-3d sp6 sp7))
    (sp-item 1411 :flags (is-3d sp6 sp7))
    (sp-item 1412 :flags (is-3d sp6 sp7))
    (sp-item 1413 :flags (is-3d sp6 sp7))
    (sp-item 1414 :flags (is-3d sp6 sp7))
    (sp-item 1415 :flags (is-3d sp6 sp7))
    (sp-item 1416 :flags (is-3d sp6 sp7))
    (sp-item 1417 :fade-after (meters 50) :falloff-to (meters 80) :flags (sp7))
    )
  )

;; failed to figure out what this is:
(defpart 1387
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -1.7))
    (:y (meters 9.6))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -67))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1388
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 6.5))
    (:z (meters 3))
    (:scale-x (meters 5.7))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -85))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1389
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 0.4))
    (:y (meters 7.5))
    (:z (meters 3))
    (:scale-x (meters 3))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 50.000004))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1390
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 0.5))
    (:y (meters 6.3))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -60))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1391
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -1.85))
    (:y (meters 10.9))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 20))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1392
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 0.8))
    (:y (meters 4))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 70))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1393
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 1.8))
    (:y (meters 4.5))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -60))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1394
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 1.5))
    (:y (meters 4))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 30))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1395
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -3))
    (:y (meters 5.3))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -61))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1396
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 2.6))
    (:y (meters 8))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -65))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1397
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -1.3))
    (:y (meters 20.6))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 56.000004))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1398
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -2.2))
    (:y (meters 17.9))
    (:z (meters 3))
    (:scale-x (meters 5.7))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -18))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1399
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -7.8))
    (:y (meters 16.8))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 55))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1400
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 0))
    (:y (meters 16.5))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -50.000004))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1401
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -5.85))
    (:y (meters 20.9))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 80))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1402
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -3.8))
    (:y (meters 15))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 30))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1403
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -7))
    (:y (meters 14.6))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -20))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1404
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -5.5))
    (:y (meters 13))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -10))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1405
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -7.9))
    (:y (meters 14.2))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -60))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1406
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters -2.8))
    (:y (meters 20))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -58))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1407
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 1.3))
    (:y (meters 20.6))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 56.000004))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1408
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 2.2))
    (:y (meters 17.9))
    (:z (meters 3))
    (:scale-x (meters 5.7))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -18))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1409
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 7.8))
    (:y (meters 16.8))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 55))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1410
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 2))
    (:y (meters 16.5))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -50.000004))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1411
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 5.85))
    (:y (meters 20.9))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 80))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1412
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 3.8))
    (:y (meters 15))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees 30))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1413
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 7))
    (:y (meters 14.6))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -20))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1414
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 5.5))
    (:y (meters 13))
    (:z (meters 3))
    (:scale-x (meters 6))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -10))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1415
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 7.9))
    (:y (meters 14.2))
    (:z (meters 3))
    (:scale-x (meters 4))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -60))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1416
  :init-specs ((:texture (vol-light level-default-sprite))
    (:num 1.0)
    (:x (meters 2.8))
    (:y (meters 20))
    (:z (meters 3))
    (:scale-x (meters 5))
    (:rot-x (degrees 0))
    (:rot-y (degrees 0))
    (:rot-z (degrees -58))
    (:scale-y (meters 6))
    (:r 64.0)
    (:g 64.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 1417
  :init-specs ((:texture (dust-sparkle mhcitya-sprite))
    (:num 0.0 0.2)
    (:x (meters -9) (meters 18))
    (:y (meters 10) (meters 10))
    (:z (meters -4) (meters 8))
    (:scale-x (meters 2) (meters 2))
    (:scale-y :copy scale-x)
    (:r 80.0)
    (:g 60.0)
    (:b 255.0)
    (:a 0.0)
    (:fade-a 1.28)
    (:accel-y (meters -0.001))
    (:friction 0.95)
    (:timer (seconds 10))
    (:flags (sp-cpuinfo-flag-2))
    (:next-time (seconds 0.335))
    (:next-launcher 1418)
    )
  )

;; failed to figure out what this is:
(defpart 1418
  :init-specs ((:fade-a -0.102 -0.102))
  )

;; definition of type mhcity-dark-eco-door
(deftype mhcity-dark-eco-door (process-focusable)
  ((should-break?  symbol)
   (broken-door    handle)
   )
  (:state-methods
    idle
    cracked
    cracked-idle
    broken
    broken-idle
    )
  )

;; definition for method 3 of type mhcity-dark-eco-door
(defmethod inspect ((this mhcity-dark-eco-door))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tshould-break?: ~A~%" (-> this should-break?))
  (format #t "~2Tbroken-door: ~D~%" (-> this broken-door))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-dark-eco-door mhcity-dark-eco-door mhcity-dark-eco-door-lod0-jg mhcity-dark-eco-door-idle-ja
              ((mhcity-dark-eco-door-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 10 0 22)
              )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-dark-eco-door-broken mhcity-dark-eco-door-break mhcity-dark-eco-door-break-lod0-jg mhcity-dark-eco-door-break-idle-ja
              ((mhcity-dark-eco-door-break-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 10 0 22)
              )

;; definition for method 11 of type mhcity-dark-eco-door
(defmethod init-from-entity! ((this mhcity-dark-eco-door) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 penetrated-by) (penetrate))
    (let ((v1-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-2 prim-core collide-with)
            (collide-spec jak enemy vehicle-sphere hit-by-others-list player-list projectile tobot)
            )
      (set! (-> v1-2 prim-core action) (collide-action solid))
      (set! (-> v1-2 transform-index) 3)
      (set-vector! (-> v1-2 local-sphere) 0.0 40960.0 0.0 90112.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-2)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-5 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-5 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-5 prim-core collide-with))
      )
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (set! (-> this broken-door) (the-as handle #f))
  (cond
    ((task-node-closed? (game-task-node city-destroy-darkeco-resolution))
     (process-entity-status! this (entity-perm-status dead) #t)
     (deactivate this)
     (go empty-state)
     )
    ((task-node-closed? (game-task-node city-destroy-darkeco-orbs))
     (initialize-skeleton
       this
       (the-as
         skeleton-group
         (art-group-get-by-name *level* "skel-mhcity-dark-eco-door" (the-as (pointer level) #f))
         )
       (the-as pair 0)
       )
     (let ((s5-2 (-> this skel status)))
       (logior! (-> this skel status) (joint-control-status sync-math))
       (ja-post)
       (update-transforms (-> this root))
       (set! (-> this skel status) s5-2)
       )
     (go (method-of-object this cracked))
     )
    (else
      (initialize-skeleton
        this
        (the-as
          skeleton-group
          (art-group-get-by-name *level* "skel-mhcity-dark-eco-door" (the-as (pointer level) #f))
          )
        (the-as pair 0)
        )
      (go (method-of-object this idle))
      )
    )
  )

;; definition of type mhcity-dark-eco-door-broken
(deftype mhcity-dark-eco-door-broken (process-drawable)
  ()
  (:state-methods
    crack
    shatter
    )
  )

;; definition for method 3 of type mhcity-dark-eco-door-broken
(defmethod inspect ((this mhcity-dark-eco-door-broken))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for function mhcity-dark-eco-door-broken-init-by-other
;; INFO: Used lq/sq
(defbehavior mhcity-dark-eco-door-broken-init-by-other mhcity-dark-eco-door-broken ((arg0 process-drawable))
  (set! (-> self level) (level-get *level* 'mhcitya))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 root trans quad))
  (quaternion-copy! (-> self root quat) (-> arg0 root quat))
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-dark-eco-door-broken" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (set! (-> self draw light-index) (the-as uint 10))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 328) self))
  (go-virtual crack)
  )

;; failed to figure out what this is:
(defstate crack (mhcity-dark-eco-door-broken)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('shatter)
       (go-virtual shatter)
       )
      )
    )
  :trans (behavior ()
    (let ((gp-0 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> self root quat))))
      (matrix<-trans gp-0 (-> self root trans))
      (spawn-from-mat (-> self part) gp-0)
      )
    )
  :code (behavior ()
    (ja-no-eval :group! (-> self draw art-group data 3) :num! (seek! max 0.5) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (sleep-code)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate shatter (mhcity-dark-eco-door-broken)
  :virtual #t
  :code (behavior ()
    (let ((v1-0 (new 'stack-no-clear 'vector)))
      (set! (-> v1-0 quad) (-> self root trans quad))
      (+! (-> v1-0 y) 40960.0)
      (cond
        ((logtest? (-> *part-group-id-table* 327 flags) (sp-group-flag sp13))
         (set! (-> *launch-matrix* trans quad) (-> v1-0 quad))
         (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 327))
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> v1-0 quad))
          (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 327))
          )
        )
      )
    (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((gp-2 (current-time)))
      (until (time-elapsed? gp-2 (seconds 0.5))
        (suspend)
        )
      )
    (task-node-close! (game-task-node city-destroy-darkeco-resolution) 'event)
    (sleep-code)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate broken-idle (mhcity-dark-eco-door)
  :virtual #t
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-4 (-> self root root-prim)))
      (set! (-> v1-4 prim-core collide-as) (collide-spec))
      (set! (-> v1-4 prim-core collide-with) (collide-spec))
      )
    0
    )
  :code (behavior ()
    (transform-and-sleep-code)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate idle (mhcity-dark-eco-door)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('break)
       (let ((v0-0 #t))
         (set! (-> self should-break?) v0-0)
         v0-0
         )
       )
      )
    )
  :code (behavior ()
    (set! (-> self should-break?) #f)
    (ja-channel-push! 1 0)
    (until #f
      (ja-no-eval :group! mhcity-dark-eco-door-idle-ja :num! (loop!) :frame-num (the-as float start))
      (until #f
        (if (or (-> self should-break?) (task-node-closed? (game-task-node city-destroy-darkeco-orbs)))
            (goto cfg-9)
            )
        (ja :num! (loop!))
        (suspend)
        )
      #f
      (label cfg-9)
      (ja-channel-push! 1 (seconds 0.5))
      (ja :group! mhcity-dark-eco-door-idle-ja :num! (seek! 15.0) :frame-num 15.0)
      (let ((gp-0 (current-time)))
        (until (time-elapsed? gp-0 (seconds 0.5))
          (suspend)
          )
        )
      (go-virtual cracked)
      )
    #f
    )
  :post transform-post
  )

;; failed to figure out what this is:
(defstate cracked (mhcity-dark-eco-door)
  :virtual #t
  :enter (behavior ()
    (sound-play "door-crack")
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((gp-1 (get-process *default-dead-pool* mhcity-dark-eco-door-broken #x4000 1)))
      (set! (-> self broken-door)
            (process->handle (-> (when gp-1
                                   (let ((t9-3 (method-of-type mhcity-dark-eco-door-broken activate)))
                                     (t9-3
                                       (the-as mhcity-dark-eco-door-broken gp-1)
                                       self
                                       "mhcity-dark-eco-door-broken"
                                       (the-as pointer #x70004000)
                                       )
                                     )
                                   (run-now-in-process gp-1 mhcity-dark-eco-door-broken-init-by-other self)
                                   (-> gp-1 ppointer)
                                   )
                                 0
                                 )
                             )
            )
      )
    (go-virtual cracked-idle)
    )
  :code sleep-code
  :post transform-post
  )

;; failed to figure out what this is:
(defstate cracked-idle (mhcity-dark-eco-door)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (let ((a0-2 (the-as object (-> block param 1))))
         (if (logtest? (penetrate dark-smack) (-> (the-as attack-info a0-2) penetrate-using))
             (go-virtual broken)
             )
         )
       )
      )
    )
  :enter (behavior ()
    (ja-channel-push! 1 0)
    (ja :group! mhcity-dark-eco-door-idle-ja :num! (seek! 15.0) :frame-num 15.0)
    )
  :code sleep-code
  :post ja-post
  )

;; failed to figure out what this is:
(defstate broken (mhcity-dark-eco-door)
  :virtual #t
  :enter (behavior ()
    (sound-play "door-explode")
    (logior! (-> self draw status) (draw-control-status no-draw))
    (send-event (handle->process (-> self broken-door)) 'shatter)
    (let ((v1-11 (-> self root root-prim)))
      (set! (-> v1-11 prim-core collide-as) (collide-spec))
      (set! (-> v1-11 prim-core collide-with) (collide-spec))
      )
    0
    )
  :code transform-and-sleep-code
  :post ja-post
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-puffer mhcity-puffer mhcity-puffer-lod0-jg mhcity-puffer-idle-ja
              ((mhcity-puffer-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

;; definition of type mhcity-lump
(deftype mhcity-lump (process-hidden)
  ()
  )

;; definition for method 3 of type mhcity-lump
(defmethod inspect ((this mhcity-lump))
  (when (not this)
    (set! this this)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tmask: #x~X : (process-mask " (-> this mask))
  (let ((s5-0 (-> this mask)))
    (if (= (logand s5-0 (process-mask process-tree)) (process-mask process-tree))
        (format #t "process-tree ")
        )
    (if (= (logand s5-0 (process-mask target)) (process-mask target))
        (format #t "target ")
        )
    (if (= (logand (process-mask collectable) s5-0) (process-mask collectable))
        (format #t "collectable ")
        )
    (if (= (logand (process-mask projectile) s5-0) (process-mask projectile))
        (format #t "projectile ")
        )
    (if (= (logand s5-0 (process-mask sleep-code)) (process-mask sleep-code))
        (format #t "sleep-code ")
        )
    (if (= (logand s5-0 (process-mask actor-pause)) (process-mask actor-pause))
        (format #t "actor-pause ")
        )
    (if (= (logand (process-mask metalhead) s5-0) (shl #x8000 16))
        (format #t "metalhead ")
        )
    (if (= (logand (process-mask bot) s5-0) (process-mask bot))
        (format #t "bot ")
        )
    (if (= (logand (process-mask vehicle) s5-0) (process-mask vehicle))
        (format #t "vehicle ")
        )
    (if (= (logand (process-mask enemy) s5-0) (process-mask enemy))
        (format #t "enemy ")
        )
    (if (= (logand (process-mask entity) s5-0) (process-mask entity))
        (format #t "entity ")
        )
    (if (= (logand s5-0 (process-mask heap-shrunk)) (process-mask heap-shrunk))
        (format #t "heap-shrunk ")
        )
    (if (= (logand (process-mask sidekick) s5-0) (process-mask sidekick))
        (format #t "sidekick ")
        )
    (if (= (logand s5-0 (process-mask going)) (process-mask going))
        (format #t "going ")
        )
    (if (= (logand s5-0 (process-mask execute)) (process-mask execute))
        (format #t "execute ")
        )
    (if (= (logand (process-mask civilian) s5-0) (process-mask civilian))
        (format #t "civilian ")
        )
    (if (= (logand (process-mask death) s5-0) (process-mask death))
        (format #t "death ")
        )
    (if (= (logand (process-mask guard) s5-0) (process-mask guard))
        (format #t "guard ")
        )
    (if (= (logand s5-0 (process-mask no-kill)) (process-mask no-kill))
        (format #t "no-kill ")
        )
    (if (= (logand (process-mask kg-robot) s5-0) (process-mask kg-robot))
        (format #t "kg-robot ")
        )
    (if (= (logand (process-mask platform) s5-0) (process-mask platform))
        (format #t "platform ")
        )
    (if (= (logand s5-0 (process-mask freeze)) (process-mask freeze))
        (format #t "freeze ")
        )
    (if (= (logand s5-0 (process-mask sleep)) (process-mask sleep))
        (format #t "sleep ")
        )
    (if (= (logand s5-0 (process-mask progress)) (process-mask progress))
        (format #t "progress ")
        )
    (if (= (logand s5-0 (process-mask menu)) (process-mask menu))
        (format #t "menu ")
        )
    (if (= (logand (process-mask camera) s5-0) (process-mask camera))
        (format #t "camera ")
        )
    (if (= (logand (process-mask ambient) s5-0) (process-mask ambient))
        (format #t "ambient ")
        )
    (if (= (logand s5-0 (process-mask dark-effect)) (process-mask dark-effect))
        (format #t "dark-effect ")
        )
    (if (= (logand (process-mask crate) s5-0) (process-mask crate))
        (format #t "crate ")
        )
    (if (= (logand s5-0 (process-mask kernel-run)) (process-mask kernel-run))
        (format #t "kernel-run ")
        )
    (if (= (logand s5-0 (process-mask movie)) (process-mask movie))
        (format #t "movie ")
        )
    (if (= (logand s5-0 (process-mask pause)) (process-mask pause))
        (format #t "pause ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tclock: ~A~%" (-> this clock))
  (format #t "~1Tparent: #x~X~%" (-> this parent))
  (format #t "~1Tbrother: #x~X~%" (-> this brother))
  (format #t "~1Tchild: #x~X~%" (-> this child))
  (format #t "~1Tppointer: #x~X~%" (-> this ppointer))
  (format #t "~1Tself: ~A~%" (-> this self))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tstatus: ~A~%" (-> this status))
  (format #t "~1Tpid: ~D~%" (-> this pid))
  (format #t "~1Tmain-thread: ~A~%" (-> this main-thread))
  (format #t "~1Ttop-thread: ~A~%" (-> this top-thread))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (format #t "~1Tstate: ~A~%" (-> this state))
  (format #t "~1Tprev-state: ~A~%" (-> this prev-state))
  (format #t "~1Tnext-state: ~A~%" (-> this next-state))
  (format #t "~1Tstate-stack: ~A~%" (-> this state-stack))
  (format #t "~1Ttrans-hook: ~A~%" (-> this trans-hook))
  (format #t "~1Tpost-hook: ~A~%" (-> this post-hook))
  (format #t "~1Tevent-hook: ~A~%" (-> this event-hook))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Theap-base: #x~X~%" (-> this heap-base))
  (format #t "~1Theap-top: #x~X~%" (-> this heap-top))
  (format #t "~1Theap-cur: #x~X~%" (-> this heap-cur))
  (format #t "~1Tstack-frame-top: ~A~%" (-> this stack-frame-top))
  (format #t "~1Theap: #<kheap @ #x~X>~%" (&-> this heap-base))
  (format #t "~1Tconnection-list: ~`connectable`P~%" (-> this connection-list))
  (format #t "~1Tstack[0] @ #x~X~%" (-> this stack))
  (label cfg-68)
  this
  )

;; definition of type mhcity-dark-eco-nodule
(deftype mhcity-dark-eco-nodule (process-drawable)
  ()
  (:state-methods
    idle
    explode
    )
  )

;; definition for method 3 of type mhcity-dark-eco-nodule
(defmethod inspect ((this mhcity-dark-eco-nodule))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-dark-eco-nodule mhcity-dark-eco-nodule mhcity-dark-eco-nodule-lod0-jg mhcity-dark-eco-nodule-idle-ja
              ((mhcity-dark-eco-nodule-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition for symbol *darkeco-nodule-task-nodes*, type array
(define *darkeco-nodule-task-nodes* (the-as array (new 'static 'boxed-array :type uint16)))

;; definition for method 11 of type mhcity-dark-eco-nodule
(defmethod init-from-entity! ((this mhcity-dark-eco-nodule) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-dark-eco-nodule" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (process-drawable-from-entity! this arg0)
  (set! (-> this entity) arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (setup-masks (-> this draw) 0 1)
  (res-lump-value arg0 'behavior-type uint128 :time -1000000000.0)
  (cond
    ((task-node-closed? (game-task-node city-destroy-darkeco-resolution))
     (process-entity-status! this (entity-perm-status dead) #t)
     (deactivate this)
     )
    (else
      (go (method-of-object this idle))
      )
    )
  )

;; definition for method 12 of type mhcity-dark-eco-nodule
(defmethod run-logic? ((this mhcity-dark-eco-nodule))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

;; failed to figure out what this is:
(defstate idle (mhcity-dark-eco-nodule)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('explode)
       (go-virtual explode)
       #t
       )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (until #f
      (ja-no-eval :group! mhcity-dark-eco-nodule-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate explode (mhcity-dark-eco-nodule)
  :virtual #t
  :code (behavior ()
    (sound-play "egg-explode")
    (cond
      ((logtest? (-> *part-group-id-table* 326 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 326))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 326))
        )
      )
    (let ((gp-3 (current-time)))
      (until (time-elapsed? gp-3 (seconds 0.1))
        (suspend)
        )
      )
    (process-entity-status! self (entity-perm-status dead) #t)
    )
  :post ja-post
  )

;; definition of type mhcity-ambient-killable
(deftype mhcity-ambient-killable (process-focusable)
  ((hit-points      float)
   (drop-type       int32)
   (drop-amount     float)
   (sphere-size     float)
   (last-attack-id  uint32)
   )
  (:state-methods
    die-hidden
    )
  (:methods
    (init-collision! (_type_) none)
    (init-fields! (_type_) none)
    )
  )

;; definition for method 3 of type mhcity-ambient-killable
(defmethod inspect ((this mhcity-ambient-killable))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Thit-points: ~f~%" (-> this hit-points))
  (format #t "~2Tdrop-type: ~D~%" (-> this drop-type))
  (format #t "~2Tdrop-amount: ~f~%" (-> this drop-amount))
  (format #t "~2Tsphere-size: ~f~%" (-> this sphere-size))
  (format #t "~2Tlast-attack-id: ~D~%" (-> this last-attack-id))
  (label cfg-4)
  this
  )

;; definition for function mhcity-ambient-killable-event-handler
(defbehavior mhcity-ambient-killable-event-handler mhcity-ambient-killable ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack)
     (let ((v1-1 (the-as attack-info (-> arg3 param 1))))
       (when (!= (-> v1-1 id) (-> self last-attack-id))
         (set! (-> self last-attack-id) (-> v1-1 id))
         (let ((f0-1 (if (logtest? (attack-mask damage) (-> v1-1 mask))
                         (-> v1-1 damage)
                         (penetrate-using->damage (-> v1-1 penetrate-using))
                         )
                     )
               )
           (set! (-> self hit-points) (- (-> self hit-points) f0-1))
           )
         (if (>= 0.0 (-> self hit-points))
             (go-virtual die-hidden)
             )
         )
       )
     )
    )
  )

;; definition for method 30 of type mhcity-ambient-killable
;; WARN: Return type mismatch float vs none.
(defmethod init-fields! ((this mhcity-ambient-killable))
  (set! (-> this sphere-size) 4096.0)
  (set! (-> this hit-points) 1.0)
  (set! (-> this drop-type) 7)
  (set! (-> this drop-amount) 1.0)
  (none)
  )

;; failed to figure out what this is:
(defstate die-hidden (mhcity-ambient-killable)
  :virtual #t
  :enter (behavior ()
    (sound-play "egg-explode")
    (cond
      ((logtest? (-> *part-group-id-table* 325 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 325))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 325))
        )
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-37 (-> self root root-prim)))
      (set! (-> v1-37 prim-core collide-as) (collide-spec))
      (set! (-> v1-37 prim-core collide-with) (collide-spec))
      )
    0
    (transform-post)
    (birth-pickup-at-point
      (-> self root trans)
      (the-as pickup-type (-> self drop-type))
      (-> self drop-amount)
      #t
      *entity-pool*
      (the-as fact-info #f)
      )
    )
  :code sleep-code
  )

;; definition for method 20 of type mhcity-ambient-killable
;; WARN: Return type mismatch int vs search-info-flag.
(defmethod process-mask->search-info-flag ((this mhcity-ambient-killable))
  (the-as search-info-flag 2)
  )

;; definition for method 29 of type mhcity-ambient-killable
;; WARN: Return type mismatch collide-shape vs none.
(defmethod init-collision! ((this mhcity-ambient-killable))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((v1-3 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-3 prim-core collide-as) (collide-spec crate))
      (set! (-> v1-3 prim-core collide-with)
            (collide-spec jak vehicle-sphere hit-by-player-list hit-by-others-list player-list projectile)
            )
      (set! (-> v1-3 prim-core action) (collide-action solid))
      (set-vector! (-> v1-3 local-sphere) 0.0 0.0 0.0 (-> this sphere-size))
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-3)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-6 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-6 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-6 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (none)
  )

;; definition of type mhcity-vein-writhing-large
(deftype mhcity-vein-writhing-large (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-vein-writhing-large
(defmethod inspect ((this mhcity-vein-writhing-large))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-vein-writhing-large mhcity-vein-writhing-large mhcity-vein-writhing-large-lod0-jg mhcity-vein-writhing-large-idle-ja
              ((mhcity-vein-writhing-large-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition for method 11 of type mhcity-vein-writhing-large
(defmethod init-from-entity! ((this mhcity-vein-writhing-large) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-vein-writhing-large" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (go (method-of-object this idle))
  )

;; failed to figure out what this is:
(defstate idle (mhcity-vein-writhing-large)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-channel-push! 1 (seconds 0.25))
      (ja-no-eval :group! mhcity-vein-writhing-large-idle-ja :num! (seek! max 0.25) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max 0.25))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition of type mhcity-vein-writhing-small
(deftype mhcity-vein-writhing-small (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-vein-writhing-small
(defmethod inspect ((this mhcity-vein-writhing-small))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-vein-writhing-small mhcity-vein-writhing-small mhcity-vein-writhing-small-lod0-jg mhcity-vein-writhing-small-idle-ja
              ((mhcity-vein-writhing-small-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition for method 11 of type mhcity-vein-writhing-small
(defmethod init-from-entity! ((this mhcity-vein-writhing-small) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-vein-writhing-small" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (go (method-of-object this idle))
  )

;; failed to figure out what this is:
(defstate idle (mhcity-vein-writhing-small)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-channel-push! 1 (seconds 0.25))
      (ja-no-eval :group! mhcity-vein-writhing-small-idle-ja :num! (seek! max 0.25) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max 0.25))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition of type mhcity-claw-finger-small
(deftype mhcity-claw-finger-small (mhcity-ambient-killable)
  ((twitch-speed          float)
   (twitch-angle-current  float)
   (twitch-angle-dest     float)
   (base-quat             quaternion  :inline)
   (jitter-count          int8)
   )
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-claw-finger-small
(defmethod inspect ((this mhcity-claw-finger-small))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttwitch-speed: ~f~%" (-> this twitch-speed))
  (format #t "~2Ttwitch-angle-current: ~f~%" (-> this twitch-angle-current))
  (format #t "~2Ttwitch-angle-dest: ~f~%" (-> this twitch-angle-dest))
  (format #t "~2Tbase-quat: #<quaternion @ #x~X>~%" (-> this base-quat))
  (format #t "~2Tjitter-count: ~D~%" (-> this jitter-count))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-claw-finger-small mhcity-claw-finger-small mhcity-claw-finger-small-lod0-jg mhcity-claw-finger-small-idle-ja
              ((mhcity-claw-finger-small-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition for method 11 of type mhcity-claw-finger-small
(defmethod init-from-entity! ((this mhcity-claw-finger-small) (arg0 entity-actor))
  (set! (-> this sphere-size) 12288.0)
  (set! (-> this hit-points) 1.0)
  (set! (-> this drop-type) 7)
  (set! (-> this drop-amount) 2.0)
  (init-collision! this)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-claw-finger-small" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (go (method-of-object this idle))
  )

;; failed to figure out what this is:
(defstate idle (mhcity-claw-finger-small)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :enter (behavior ()
    (quaternion-copy! (-> self base-quat) (-> self root quat))
    (set! (-> self twitch-angle-current) (-> self twitch-angle-dest))
    )
  :trans (behavior ()
    (set! (-> self twitch-angle-current) (deg-seek
                                           (-> self twitch-angle-current)
                                           (-> self twitch-angle-dest)
                                           (* (-> self twitch-speed) (seconds-per-frame))
                                           )
          )
    (quaternion-rotate-local-y! (-> self root quat) (-> self base-quat) (-> self twitch-angle-current))
    (when (= (the int (-> self twitch-angle-current)) (the int (-> self twitch-angle-dest)))
      (let ((gp-0 (or (> (-> self jitter-count) 0)
                      (>= (mod (the-as int (rand-uint31-gen *random-generator*)) 9) 7)
                      (< (vector-vector-xz-distance (-> self root trans) (target-pos 0)) 53248.0)
                      )
                  )
            )
        (let* ((f30-0 -1820.4445)
               (f28-0 10012.444)
               (v1-11 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-12 (the-as number (logior #x3f800000 v1-11)))
               )
          (set! (-> self twitch-angle-dest) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-12)))))
          )
        (cond
          ((not gp-0)
           (let* ((f30-1 2730.6667)
                  (f28-1 3640.889)
                  (v1-17 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                  (v1-18 (the-as number (logior #x3f800000 v1-17)))
                  )
             (set! (-> self twitch-speed) (+ f30-1 (* f28-1 (+ -1.0 (the-as float v1-18)))))
             )
           (cond
             ((< (-> self twitch-angle-current) 1820.4445)
              (let* ((f30-2 4551.1113)
                     (f28-2 3640.8887)
                     (v1-24 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                     (v1-25 (the-as number (logior #x3f800000 v1-24)))
                     )
                (set! (-> self twitch-angle-dest) (+ f30-2 (* f28-2 (+ -1.0 (the-as float v1-25)))))
                )
              )
             (else
               (let* ((f30-3 -1820.4445)
                      (f28-3 2730.6667)
                      (v1-30 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                      (v1-31 (the-as number (logior #x3f800000 v1-30)))
                      )
                 (set! (-> self twitch-angle-dest) (+ f30-3 (* f28-3 (+ -1.0 (the-as float v1-31)))))
                 )
               )
             )
           )
          (else
            (cond
              ((< (-> self twitch-angle-current) 0.0)
               (let* ((f30-4 910.2222)
                      (f28-4 1820.4446)
                      (v1-36 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                      (v1-37 (the-as number (logior #x3f800000 v1-36)))
                      )
                 (set! (-> self twitch-angle-dest) (+ f30-4 (* f28-4 (+ -1.0 (the-as float v1-37)))))
                 )
               )
              (else
                (let* ((f30-5 -2730.6667)
                       (f28-5 1820.4446)
                       (v1-43 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                       (v1-44 (the-as number (logior #x3f800000 v1-43)))
                       )
                  (set! (-> self twitch-angle-dest) (+ f30-5 (* f28-5 (+ -1.0 (the-as float v1-44)))))
                  )
                )
              )
            (if (<= (-> self jitter-count) 0)
                (set! (-> self jitter-count) (+ (mod (the-as int (rand-uint31-gen *random-generator*)) 3) 2))
                )
            (let* ((f30-6 12743.111)
                   (f28-6 3640.8887)
                   (v1-55 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                   (v1-56 (the-as number (logior #x3f800000 v1-55)))
                   )
              (set! (-> self twitch-speed) (+ f30-6 (* f28-6 (+ -1.0 (the-as float v1-56)))))
              )
            (+! (-> self jitter-count) -1)
            )
          )
        )
      )
    )
  :code sleep-code
  :post ja-post
  )

;; definition of type mhcity-twitch-blade
(deftype mhcity-twitch-blade (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-twitch-blade
(defmethod inspect ((this mhcity-twitch-blade))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-twitch-blade mhcity-twitch-blade mhcity-twitch-blade-lod0-jg mhcity-twitch-blade-idle-ja
              ((mhcity-twitch-blade-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-twitch-blade)
  :virtual #t
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-twitch-blade
(defmethod init-from-entity! ((this mhcity-twitch-blade) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mhcity-twitch-blade" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (go (method-of-object this idle))
  )

;; definition of type mhcity-vine-wriggler
(deftype mhcity-vine-wriggler (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-vine-wriggler
(defmethod inspect ((this mhcity-vine-wriggler))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-vine-wriggler mhcity-vine-wriggler mhcity-vine-wriggler-lod0-jg mhcity-vine-wriggler-idle-ja
              ((mhcity-vine-wriggler-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-vine-wriggler)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-vine-wriggler
(defmethod init-from-entity! ((this mhcity-vine-wriggler) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-vine-wriggler" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type mhcity-vine-wriggler-big
(deftype mhcity-vine-wriggler-big (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-vine-wriggler-big
(defmethod inspect ((this mhcity-vine-wriggler-big))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-vine-wriggler-big mhcity-vine-wriggler-big mhcity-vine-wriggler-big-lod0-jg mhcity-vine-wriggler-big-idle-ja
              ((mhcity-vine-wriggler-big-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-vine-wriggler-big)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-vine-wriggler-big
(defmethod init-from-entity! ((this mhcity-vine-wriggler-big) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-vine-wriggler-big" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type mhcity-de-tower-undervines
(deftype mhcity-de-tower-undervines (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-de-tower-undervines
(defmethod inspect ((this mhcity-de-tower-undervines))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-de-tower-undervines mhcity-de-tower-undervines 0 2
              ((1 (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-de-tower-undervines)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-de-tower-undervines
(defmethod init-from-entity! ((this mhcity-de-tower-undervines) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-mhcity-de-tower-undervines" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type mhcity-grunt-egg-c
(deftype mhcity-grunt-egg-c (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-grunt-egg-c
(defmethod inspect ((this mhcity-grunt-egg-c))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-grunt-egg-c mhcity-grunt-egg-c mhcity-grunt-egg-c-lod0-jg mhcity-grunt-egg-c-idle-ja
              ((mhcity-grunt-egg-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-grunt-egg-c)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-grunt-egg-c
(defmethod init-from-entity! ((this mhcity-grunt-egg-c) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mhcity-grunt-egg-c" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type mhcity-grunt-egg-b
(deftype mhcity-grunt-egg-b (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-grunt-egg-b
(defmethod inspect ((this mhcity-grunt-egg-b))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-grunt-egg-b mhcity-grunt-egg-b mhcity-grunt-egg-b-lod0-jg mhcity-grunt-egg-b-idle-ja
              ((mhcity-grunt-egg-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-grunt-egg-b)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-grunt-egg-b
(defmethod init-from-entity! ((this mhcity-grunt-egg-b) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mhcity-grunt-egg-b" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type mhcity-grunt-egg-d
(deftype mhcity-grunt-egg-d (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-grunt-egg-d
(defmethod inspect ((this mhcity-grunt-egg-d))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-grunt-egg-d mhcity-grunt-egg-d 0 3
              ((1 (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-grunt-egg-d)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-grunt-egg-d
(defmethod init-from-entity! ((this mhcity-grunt-egg-d) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mhcity-grunt-egg-d" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type mhcity-grunt-egg-a
(deftype mhcity-grunt-egg-a (mhcity-ambient-killable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-grunt-egg-a
(defmethod inspect ((this mhcity-grunt-egg-a))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type mhcity-ambient-killable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-grunt-egg-a mhcity-grunt-egg-a 0 3
              ((1 (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; failed to figure out what this is:
(defstate idle (mhcity-grunt-egg-a)
  :virtual #t
  :event mhcity-ambient-killable-event-handler
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-grunt-egg-a
(defmethod init-from-entity! ((this mhcity-grunt-egg-a) (arg0 entity-actor))
  (init-fields! this)
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mhcity-grunt-egg-a" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (transform-post)
  (go (method-of-object this idle))
  )

;; definition of type curve-bubbles-Shape
(deftype curve-bubbles-Shape (process-hidden)
  ()
  )

;; definition for method 3 of type curve-bubbles-Shape
(defmethod inspect ((this curve-bubbles-Shape))
  (when (not this)
    (set! this this)
    (goto cfg-68)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tmask: #x~X : (process-mask " (-> this mask))
  (let ((s5-0 (-> this mask)))
    (if (= (logand s5-0 (process-mask process-tree)) (process-mask process-tree))
        (format #t "process-tree ")
        )
    (if (= (logand s5-0 (process-mask target)) (process-mask target))
        (format #t "target ")
        )
    (if (= (logand (process-mask collectable) s5-0) (process-mask collectable))
        (format #t "collectable ")
        )
    (if (= (logand (process-mask projectile) s5-0) (process-mask projectile))
        (format #t "projectile ")
        )
    (if (= (logand s5-0 (process-mask sleep-code)) (process-mask sleep-code))
        (format #t "sleep-code ")
        )
    (if (= (logand s5-0 (process-mask actor-pause)) (process-mask actor-pause))
        (format #t "actor-pause ")
        )
    (if (= (logand (process-mask metalhead) s5-0) (shl #x8000 16))
        (format #t "metalhead ")
        )
    (if (= (logand (process-mask bot) s5-0) (process-mask bot))
        (format #t "bot ")
        )
    (if (= (logand (process-mask vehicle) s5-0) (process-mask vehicle))
        (format #t "vehicle ")
        )
    (if (= (logand (process-mask enemy) s5-0) (process-mask enemy))
        (format #t "enemy ")
        )
    (if (= (logand (process-mask entity) s5-0) (process-mask entity))
        (format #t "entity ")
        )
    (if (= (logand s5-0 (process-mask heap-shrunk)) (process-mask heap-shrunk))
        (format #t "heap-shrunk ")
        )
    (if (= (logand (process-mask sidekick) s5-0) (process-mask sidekick))
        (format #t "sidekick ")
        )
    (if (= (logand s5-0 (process-mask going)) (process-mask going))
        (format #t "going ")
        )
    (if (= (logand s5-0 (process-mask execute)) (process-mask execute))
        (format #t "execute ")
        )
    (if (= (logand (process-mask civilian) s5-0) (process-mask civilian))
        (format #t "civilian ")
        )
    (if (= (logand (process-mask death) s5-0) (process-mask death))
        (format #t "death ")
        )
    (if (= (logand (process-mask guard) s5-0) (process-mask guard))
        (format #t "guard ")
        )
    (if (= (logand s5-0 (process-mask no-kill)) (process-mask no-kill))
        (format #t "no-kill ")
        )
    (if (= (logand (process-mask kg-robot) s5-0) (process-mask kg-robot))
        (format #t "kg-robot ")
        )
    (if (= (logand (process-mask platform) s5-0) (process-mask platform))
        (format #t "platform ")
        )
    (if (= (logand s5-0 (process-mask freeze)) (process-mask freeze))
        (format #t "freeze ")
        )
    (if (= (logand s5-0 (process-mask sleep)) (process-mask sleep))
        (format #t "sleep ")
        )
    (if (= (logand s5-0 (process-mask progress)) (process-mask progress))
        (format #t "progress ")
        )
    (if (= (logand s5-0 (process-mask menu)) (process-mask menu))
        (format #t "menu ")
        )
    (if (= (logand (process-mask camera) s5-0) (process-mask camera))
        (format #t "camera ")
        )
    (if (= (logand (process-mask ambient) s5-0) (process-mask ambient))
        (format #t "ambient ")
        )
    (if (= (logand s5-0 (process-mask dark-effect)) (process-mask dark-effect))
        (format #t "dark-effect ")
        )
    (if (= (logand (process-mask crate) s5-0) (process-mask crate))
        (format #t "crate ")
        )
    (if (= (logand s5-0 (process-mask kernel-run)) (process-mask kernel-run))
        (format #t "kernel-run ")
        )
    (if (= (logand s5-0 (process-mask movie)) (process-mask movie))
        (format #t "movie ")
        )
    (if (= (logand s5-0 (process-mask pause)) (process-mask pause))
        (format #t "pause ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tclock: ~A~%" (-> this clock))
  (format #t "~1Tparent: #x~X~%" (-> this parent))
  (format #t "~1Tbrother: #x~X~%" (-> this brother))
  (format #t "~1Tchild: #x~X~%" (-> this child))
  (format #t "~1Tppointer: #x~X~%" (-> this ppointer))
  (format #t "~1Tself: ~A~%" (-> this self))
  (format #t "~1Tpool: ~A~%" (-> this pool))
  (format #t "~1Tstatus: ~A~%" (-> this status))
  (format #t "~1Tpid: ~D~%" (-> this pid))
  (format #t "~1Tmain-thread: ~A~%" (-> this main-thread))
  (format #t "~1Ttop-thread: ~A~%" (-> this top-thread))
  (format #t "~1Tentity: ~A~%" (-> this entity))
  (format #t "~1Tlevel: ~A~%" (-> this level))
  (format #t "~1Tstate: ~A~%" (-> this state))
  (format #t "~1Tprev-state: ~A~%" (-> this prev-state))
  (format #t "~1Tnext-state: ~A~%" (-> this next-state))
  (format #t "~1Tstate-stack: ~A~%" (-> this state-stack))
  (format #t "~1Ttrans-hook: ~A~%" (-> this trans-hook))
  (format #t "~1Tpost-hook: ~A~%" (-> this post-hook))
  (format #t "~1Tevent-hook: ~A~%" (-> this event-hook))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Theap-base: #x~X~%" (-> this heap-base))
  (format #t "~1Theap-top: #x~X~%" (-> this heap-top))
  (format #t "~1Theap-cur: #x~X~%" (-> this heap-cur))
  (format #t "~1Tstack-frame-top: ~A~%" (-> this stack-frame-top))
  (format #t "~1Theap: #<kheap @ #x~X>~%" (&-> this heap-base))
  (format #t "~1Tconnection-list: ~`connectable`P~%" (-> this connection-list))
  (format #t "~1Tstack[0] @ #x~X~%" (-> this stack))
  (label cfg-68)
  this
  )

;; definition of type mhcity-tower-door
(deftype mhcity-tower-door (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type mhcity-tower-door
(defmethod inspect ((this mhcity-tower-door))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mhcity-tower-door mhcity-tower-door mhcity-tower-door-lod0-jg mhcity-tower-door-idle-ja
              ((mhcity-tower-door-lod0-mg (meters 999999)))
              :bounds (static-spherem 5.5 10 0 10.5)
              :origin-joint-index 3
              )

;; failed to figure out what this is:
(defstate idle (mhcity-tower-door)
  :virtual #t
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post ja-post
  )

;; definition for method 11 of type mhcity-tower-door
(defmethod init-from-entity! ((this mhcity-tower-door) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((v1-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-2 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-2 prim-core collide-with) (collide-spec jak hit-by-others-list player-list))
      (set! (-> v1-2 prim-core action) (collide-action solid))
      (set! (-> v1-2 transform-index) 3)
      (set-vector! (-> v1-2 local-sphere) 22528.0 40960.0 0.0 43008.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-2)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-5 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-5 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-5 prim-core collide-with))
      )
    (set! (-> s4-0 event-self) 'touched)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mhcity-tower-door" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (when (task-node-closed? (game-task-node city-blow-tower-resolution))
    (cleanup-for-death this)
    (deactivate this)
    )
  (go (method-of-object this idle))
  )




