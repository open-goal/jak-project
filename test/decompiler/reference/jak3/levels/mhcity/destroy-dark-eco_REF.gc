;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defskelgroup skel-dark-eco-tower mhcity-eco-dark-tower mhcity-eco-dark-tower-lod0-jg mhcity-eco-dark-tower-idle-ja
              ((mhcity-eco-dark-tower-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 10 0 12)
              )

;; definition of type hud-eco-egg
(deftype hud-eco-egg (hud)
  ()
  )

;; definition for method 3 of type hud-eco-egg
(defmethod inspect ((this hud-eco-egg))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 15 of type hud-eco-egg
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-eco-egg))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 462.0 (* 130.0 (-> this offset))))
    165
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -20 50)
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-eco-egg
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this hud-eco-egg))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type hud-eco-egg
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-eco-egg))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-center-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :page #xc7d)))
        )
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf2))
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 1.0)
  (set! (-> this strings 0 flags) (font-flags shadow kerning middle large))
  0
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-part-dark-egg-mist-active
  :id 1449
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 5 0 10)
  :parts ((sp-item 4749) (sp-item 4750))
  )

;; failed to figure out what this is:
(defpart 4749
  :init-specs ((:texture (flame01 level-default-sprite))
    (:birth-func 'birth-func-flip-based-on-scale)
    (:num 1.0 1.0)
    (:x (meters 0) (meters 2))
    (:y (meters 4) (meters 15))
    (:scale-x (meters -4) (meters 8))
    (:rot-z (degrees -10) (degrees 20))
    (:scale-y (meters 3) (meters 1))
    (:r 0.0)
    (:g 0.0)
    (:b 255.0)
    (:a 0.0)
    (:scalevel-x (meters 0.00033333333))
    (:scalevel-y (meters 0.0033333334))
    (:fade-r 0.128 0.128)
    (:fade-g 0.08533333)
    (:fade-a 0.10666667 0.10666667)
    (:accel-y (meters -0.00033333333) (meters -0.00016666666))
    (:timer (seconds 5))
    (:flags (sp-cpuinfo-flag-3))
    (:func 'check-drop-group-center)
    (:conerot-x (degrees -50.000004) (degrees 100.00001))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4750
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0 1.0)
    (:y (meters 4))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 0.0 64.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-y (meters -0.033333335))
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.4) (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.10666667 0.21333334)
    (:fade-g -0.053333335 -0.053333335)
    (:fade-b 0.10666667 0.10666667)
    (:fade-a 0.21333334 0.21333334)
    (:accel-x (meters -0.00066666666) (meters 0.0013333333))
    (:accel-z (meters -0.00066666666) (meters 0.0013333333))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 1))
    (:next-launcher 4751)
    (:conerot-x (degrees 20))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4751
  :init-specs ((:fade-a -0.42666668 -0.42666668))
  )

;; definition for symbol *initial-orb-pos*, type vector
(define *initial-orb-pos* (new 'static 'vector :x -1552384.0 :y 39813.12 :z 4849664.0 :w 1.0))

;; definition of type lightning-bolt-tower
(deftype lightning-bolt-tower (lightning-bolt)
  ()
  )

;; definition for method 3 of type lightning-bolt-tower
(defmethod inspect ((this lightning-bolt-tower))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tcurrent-points: ~A~%" (-> this current-points))
  (format #t "~1Tdesired-points: ~A~%" (-> this desired-points))
  (format #t "~1Tspan-pts-start: ~A~%" (-> this span-pts-start))
  (format #t "~1Tspans: ~A~%" (-> this spans))
  (format #t "~1Tspans-internal: ~A~%" (-> this spans-internal))
  (format #t "~1Tstrip1: ~A~%" (-> this strip1))
  (format #t "~1Tstrip2: ~A~%" (-> this strip2))
  (format #t "~1Tinner-point-travel-time: ~D~%" (-> this inner-point-travel-time))
  (format #t "~1Tstart-fade-time: ~D~%" (-> this start-fade-time))
  (format #t "~1Tnew-inner-point-generate-time: ~D~%" (-> this new-inner-point-generate-time))
  (format #t "~1Tlast-generate-time: ~D~%" (-> this last-generate-time))
  (format #t "~1Tbase-width: ~f~%" (-> this base-width))
  (format #t "~1Tcurrent-uv-shift: ~f~%" (-> this current-uv-shift))
  (format #t "~1Tcurrent-fade-scalar: ~f~%" (-> this current-fade-scalar))
  (format #t "~1Tfractal-reduction: ~f~%" (-> this fractal-reduction))
  (format #t "~1Tappearance: #<lightning-appearance @ #x~X>~%" (-> this appearance))
  (format #t "~1Tfade-mode: ~D~%" (-> this fade-mode))
  (format #t "~1Tgenerate-mode: ~D~%" (-> this generate-mode))
  (format #t "~1Tsnap-inner-points?: ~A~%" (-> this snap-inner-points?))
  (format #t "~1Tspan-data[2] @ #x~X~%" (-> this span-data))
  (format #t "~1Tnum-active-spans: ~D~%" (-> this num-active-spans))
  (format #t "~1Tnum-spans: ~D~%" (-> this num-spans))
  (format #t "~1Tbase-color: ~D~%" (-> this base-color))
  (label cfg-4)
  this
  )

;; definition of type tower-lightning-disc
(deftype tower-lightning-disc (structure)
  ((bolt             lightning-bolt-tower)
   (orient           quaternion  :inline)
   (cur-state        symbol)
   (last-spawn-time  time-frame)
   (pts              vector      8 :inline)
   (last-rot-angle   float)
   )
  )

;; definition for method 3 of type tower-lightning-disc
(defmethod inspect ((this tower-lightning-disc))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tower-lightning-disc)
  (format #t "~1Tbolt: ~A~%" (-> this bolt))
  (format #t "~1Torient: #<quaternion @ #x~X>~%" (-> this orient))
  (format #t "~1Tcur-state: ~A~%" (-> this cur-state))
  (format #t "~1Tlast-spawn-time: ~D~%" (-> this last-spawn-time))
  (format #t "~1Tpts[8] @ #x~X~%" (-> this pts))
  (format #t "~1Tlast-rot-angle: ~f~%" (-> this last-rot-angle))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 46) (new 'static 'lightning-spec
                                          :name "orb-elec-lightning"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #x40 :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :g #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 1.5
                                          :fade-time 30.0
                                          :texture (new 'static 'texture-id :index #x3b :page #x4)
                                          :reduction 0.52
                                          :num-points 64
                                          :box-size 40960.0
                                          :merge-factor 0.8
                                          :merge-count 2
                                          :radius 2048.0
                                          :duration 45.0
                                          :sound #f
                                          )
      )

;; failed to figure out what this is:
(defskelgroup skel-dark-eco-orb mhcity-de-tower-egg mhcity-de-tower-egg-lod0-jg mhcity-de-tower-egg-idle-ja
              ((mhcity-de-tower-egg-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 6)
              )

;; definition of type dark-eco-orb
(deftype dark-eco-orb (process-focusable)
  ((last-attack-id    uint32)
   (hit-points        float)
   (alt-actor         entity-actor)
   (movie?            symbol)
   (minimap           connection-minimap)
   (discs             tower-lightning-disc  2 :inline)
   (shock-sound       sound-id)
   (plasma-sound      sound-id)
   (shock-spawn-time  time-frame)
   )
  (:state-methods
    active
    hit
    die
    die-movie
    )
  )

;; definition for method 3 of type dark-eco-orb
(defmethod inspect ((this dark-eco-orb))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tlast-attack-id: ~D~%" (-> this last-attack-id))
  (format #t "~2Thit-points: ~f~%" (-> this hit-points))
  (format #t "~2Talt-actor: ~A~%" (-> this alt-actor))
  (format #t "~2Tmovie?: ~A~%" (-> this movie?))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tdiscs[2] @ #x~X~%" (-> this discs))
  (format #t "~2Tshock-sound: ~D~%" (-> this shock-sound))
  (format #t "~2Tplasma-sound: ~D~%" (-> this plasma-sound))
  (format #t "~2Tshock-spawn-time: ~D~%" (-> this shock-spawn-time))
  (label cfg-4)
  this
  )

;; definition for function dark-eco-orb-event-handler
(defbehavior dark-eco-orb-event-handler dark-eco-orb ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('die-fast)
     (deactivate self)
     )
    (('touched)
     (send-event (ppointer->process (-> self parent)) 'child-touched)
     #t
     )
    (('attack)
     (let ((gp-0 (the-as attack-info (-> arg3 param 1))))
       (when (and (!= (-> gp-0 id) (-> self last-attack-id))
                  (logtest? (-> gp-0 penetrate-using) (penetrate flop punch spin uppercut))
                  (not (logtest? (penetrate dark-bomb) (-> gp-0 penetrate-using)))
                  )
         (sound-play "egg-gethit")
         (set! (-> self last-attack-id) (-> gp-0 id))
         (let ((f0-1 (if (logtest? (attack-mask damage) (-> gp-0 mask))
                         (-> gp-0 damage)
                         (penetrate-using->damage (-> gp-0 penetrate-using))
                         )
                     )
               )
           (set! (-> self hit-points) (- (-> self hit-points) f0-1))
           )
         (go-virtual hit)
         (return #t)
         )
       )
     #f
     )
    )
  )

;; failed to figure out what this is:
(defstate die-movie (dark-eco-orb)
  :virtual #t
  :code (behavior ()
    (until (process-grab? *target* #f)
      (suspend)
      )
    (process-spawn scene-player :init scene-player-init "city-get-dark-punch" #t #f :name "scene-player")
    (let ((v1-6 (-> self root root-prim)))
      (set! (-> v1-6 prim-core collide-as) (collide-spec))
      (set! (-> v1-6 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((gp-1 (current-time)))
      (until (time-elapsed? gp-1 (seconds 1))
        (suspend)
        )
      )
    (while *scene-player*
      (suspend)
      )
    (task-node-close! (game-task-node city-destroy-darkeco-dark-punch) 'event)
    (set-setting! 'airlock #f 0.0 0)
    (suspend)
    (send-event *target* 'change-mode 'darkjak #f (darkjak-stage force-on active no-anim))
    )
  )

;; failed to figure out what this is:
(defstate die (dark-eco-orb)
  :virtual #t
  :enter (behavior ()
    (if (-> self movie?)
        (go-virtual die-movie)
        )
    )
  :code (behavior ()
    (sound-play "egg-explode")
    (let ((v1-2 (-> self root root-prim)))
      (set! (-> v1-2 prim-core collide-as) (collide-spec))
      (set! (-> v1-2 prim-core collide-with) (collide-spec))
      )
    0
    (let ((gp-1 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> self root quat))))
      (set! (-> gp-1 trans quad) (-> self root trans quad))
      (if (logtest? (-> *part-group-id-table* 325 flags) (sp-group-flag sp13))
          (part-tracker-spawn
            part-tracker-subsampler
            :to *entity-pool*
            :group (-> *part-group-id-table* 325)
            :mat-joint gp-1
            )
          (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 325) :mat-joint gp-1)
          )
      )
    (let ((gp-2 (current-time)))
      (until (time-elapsed? gp-2 (seconds 0.1))
        (suspend)
        )
      )
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((t0-2 (res-lump-struct (-> self entity) 'camera-name structure)))
      (if t0-2
          (persist-with-delay *setting-control* #f (seconds 2) 'entity-name (the-as symbol t0-2) 0.0 0)
          )
      )
    (toggle-status (-> self entity) (entity-perm-status dead) #t)
    )
  :post (behavior ()
    (ja-post)
    )
  )

;; definition for function spawn-shock-effect
;; INFO: Used lq/sq
;; WARN: Stack slot offset 656 signed mismatch
;; WARN: Stack slot offset 656 signed mismatch
;; WARN: Stack slot offset 656 signed mismatch
;; WARN: Stack slot offset 656 signed mismatch
;; WARN: Return type mismatch int vs none.
(defun spawn-shock-effect ((arg0 dark-eco-orb)
                  (arg1 vector)
                  (arg2 lightning-spec)
                  (arg3 (function lightning-tracker none))
                  (arg4 sparticle-launcher)
                  (arg5 time-frame)
                  (arg6 float)
                  )
  (local-vars
    (sv-640 (pointer lightning-tracker))
    (sv-656 float)
    (sv-672 matrix)
    (sv-688 collide-query)
    (sv-704 symbol)
    (sv-720 vector)
    (sv-736 int)
    (sv-752 process)
    (sv-768 vector)
    )
  (set! sv-656 arg6)
  (let ((s5-0 *lightning-probe-vars*))
    (set! sv-672 (new 'stack-no-clear 'matrix))
    (set! sv-688 (new 'stack-no-clear 'collide-query))
    (set! sv-704 (the-as symbol #f))
    (set! sv-768 (new 'stack-no-clear 'vector))
    (set! (-> sv-688 start-pos quad) (-> arg1 quad))
    (set! sv-720 (-> sv-688 move-dist))
    (set! (-> sv-720 x) (rand-vu-float-range 0.0 65536.0))
    (set! (-> sv-720 y) (rand-vu-float-range 0.0 65536.0))
    (set! (-> sv-720 z) (rand-vu-float-range 0.0 65536.0))
    (set! (-> sv-720 w) 1.0)
    (matrix-rotate-zyx! sv-672 (-> sv-688 move-dist))
    (set! sv-736 6)
    (while (nonzero? sv-736)
      (set! sv-736 (+ sv-736 -1))
      (vector-rotate*! (-> sv-688 move-dist) (-> s5-0 probe-dirs sv-736) sv-672)
      (vector-normalize! (-> sv-688 move-dist) sv-656)
      (let ((v1-19 sv-688))
        (set! (-> v1-19 radius) 409.6)
        (set! (-> v1-19 collide-with) (collide-spec backgnd crate obstacle hit-by-others-list pusher))
        (set! (-> v1-19 ignore-process0) arg0)
        (set! (-> v1-19 ignore-process1) #f)
        (set! (-> v1-19 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-19 action-mask) (collide-action solid))
        )
      (when (>= (fill-and-probe-using-line-sphere *collide-cache* sv-688) 0.0)
        (set-time! (-> s5-0 last-valid-time))
        (set! (-> sv-768 quad) (-> sv-688 best-other-tri intersect quad))
        (when (< 16384.0 (vector-vector-distance sv-768 (-> sv-688 start-pos)))
          (set! sv-704 #t)
          (goto cfg-7)
          )
        )
      )
    (label cfg-7)
    (when sv-704
      (set! sv-752 (get-process *default-dead-pool* lightning-tracker #x4000 0))
      (set! sv-640
            (the-as
              (pointer lightning-tracker)
              (when sv-752
                (let ((t9-9 (method-of-type lightning-tracker activate)))
                  (t9-9 (the-as lightning-tracker sv-752) arg0 "lightning-tracker" (the-as pointer #x70004000))
                  )
                (run-now-in-process sv-752 lightning-tracker-init arg2 arg5 arg3 arg0 arg1 sv-768)
                (-> sv-752 ppointer)
                )
              )
            )
      (when sv-640
        (set! (-> sv-640 0 user-time 0) 0)
        (when arg4
          (let ((v1-47 (get-field-spec-by-id arg4 (sp-field-id spt-timer))))
            (if v1-47
                (set! (-> v1-47 initial-valuef) (the-as float (-> sv-640 0 duration)))
                )
            )
          (let ((t9-12 sp-launch-particles-var)
                (a0-26 *sp-particle-system-2d*)
                (a2-5 *launch-matrix*)
                )
            (set! (-> a2-5 trans quad) (-> s5-0 end-pos quad))
            (t9-12 a0-26 arg4 a2-5 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
            )
          )
        )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 47) (new 'static 'lightning-spec
                                          :name "lightning-dark-attack-tower"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.5
                                          :fade-time 30.0
                                          :texture (new 'static 'texture-id :index #x3a :page #x4)
                                          :reduction 0.42
                                          :num-points 4
                                          :box-size 8192.0
                                          :merge-factor 0.6
                                          :merge-count 2
                                          :radius 3276.8
                                          :duration 45.0
                                          :duration-rand 60.0
                                          :sound #f
                                          )
      )

;; failed to figure out what this is:
(if #t
    (set! *dark-lightning-width* (new 'static 'curve2d-fast
                                   :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                   :ys (new 'static 'vector :x 0.5 :y 4.5 :z 5.5 :w 6.5)
                                   :one-over-x-deltas (new 'static 'vector :x 4.0 :y 1.0 :z 1.0 :w 1.0)
                                   )
          )
    )

;; failed to figure out what this is:
(if (or (zero? *dark-tower-lightning*) (!= loading-level global))
    (set! *dark-tower-lightning* (new 'loading-level 'lightning-appearance))
    )

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* base-alpha) 0.5)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* tex-id) (the-as uint #x403a00))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* blend-mode) (the-as uint 1))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* alpha-1-curve) *curve-unity*)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* alpha-1-mode) (the-as uint 3))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* alpha-1-repeat-dist) 262144.0)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* alpha-2-curve) #f)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* alpha-2-mode) (the-as uint 3))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* alpha-2-repeat-dist) 4096.0)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* width-curve) *dark-lightning-width*)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* width-mode) (the-as uint 2))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* width-repeat-dist) 4096.0)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* uv-repeat-dist) 28672.0)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* regenerate-time-start) (seconds 0.167))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* regenerate-time-end) (seconds 0.25))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* width-range-start) 4096.0)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* width-range-end) 6144.0)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* fade-time) (seconds 0.1))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* uv-shift?) #f)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* uv-shift-speed) (seconds 0.1))

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* use-sprite-bucket?) #t)

;; failed to figure out what this is:
(set! (-> *dark-tower-lightning* use-accurate-interp?) #t)

;; failed to figure out what this is:
(defstate active (dark-eco-orb)
  :virtual #t
  :event dark-eco-orb-event-handler
  :exit (behavior ()
    (sound-stop (-> self shock-sound))
    (sound-stop (-> self plasma-sound))
    )
  :trans (behavior ()
    (spawn (-> self part) (-> self root trans))
    (if (>= 0.0 (-> self hit-points))
        (go-virtual die)
        )
    (when (and (< (vector-vector-xz-distance (-> self root trans) (camera-pos)) 614400.0)
               (time-elapsed? (-> self shock-spawn-time) (seconds 0.017))
               )
      (new 'stack-no-clear 'vector)
      (let ((gp-1 (new 'stack-no-clear 'vector)))
        (set-vector!
          gp-1
          (rand-vu-float-range -8192.0 8192.0)
          (rand-vu-float-range 0.0 12288.0)
          (rand-vu-float-range -8192.0 8192.0)
          1.0
          )
        (set-time! (-> self shock-spawn-time))
        (spawn-shock-effect
          self
          (vector+! (new 'stack-no-clear 'vector) (-> self root trans) gp-1)
          (-> *lightning-spec-id-table* 46)
          lightning-probe-callback
          (the-as sparticle-launcher #f)
          0
          409600.0
          )
        )
      (sound-play "de-tower-zap" :id (-> self plasma-sound) :position (-> self root trans))
      (let ((s3-0 (new 'stack-no-clear 'vector)))
        (set! (-> s3-0 quad) (-> self root trans quad))
        (let ((s4-0 (new 'stack-no-clear 'collide-query))
              (s5-2 (new 'stack-no-clear 'vector))
              (gp-2 (new 'stack-no-clear 'vector))
              )
          (let ((f0-6 -28672.0)
                (f1-3 (* 70.0 (the float (current-time))))
                (f2-3 (- -40960.0 (-> self root trans y)))
                )
            (set! (-> s3-0 y) (+ f0-6 (- f1-3 (* (the float (the int (/ f1-3 f2-3))) f2-3))))
            )
          (set! (-> gp-2 quad) (-> s3-0 quad))
          (sound-play "tree-shocker" :id (-> self shock-sound) :position gp-2)
          (+! (-> s3-0 x) 28672.0)
          (set! (-> s4-0 start-pos quad) (-> s3-0 quad))
          (vector-float*! (-> s4-0 move-dist) *x-vector* -40960.0)
          (let ((v1-39 s4-0))
            (set! (-> v1-39 radius) 2048.0)
            (set! (-> v1-39 collide-with) (collide-spec crate obstacle hit-by-others-list pusher))
            (set! (-> v1-39 ignore-process0) self)
            (set! (-> v1-39 ignore-process1) #f)
            (set! (-> v1-39 ignore-pat)
                  (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                  )
            (set! (-> v1-39 action-mask) (collide-action solid))
            )
          (let ((f0-12 (fill-and-probe-using-line-sphere *collide-cache* s4-0))
                (s3-1 (-> self discs))
                )
            (when (>= f0-12 0.0)
              (set! (-> s5-2 quad) (-> s4-0 best-other-tri intersect quad))
              (let ((s4-1 *x-vector*)
                    (f30-0 9362.286)
                    (s2-0 (vector-y-quaternion! (new 'stack-no-clear 'vector) (-> s3-1 0 orient)))
                    (s1-0 (new 'stack-no-clear 'vector))
                    (f28-0 0.0)
                    (f26-0 (vector-vector-distance gp-2 s5-2))
                    )
                (dotimes (s5-3 8)
                  (vector-rotate-around-axis! s1-0 (the-as quaternion s4-1) f28-0 s2-0)
                  (vector-float*! s1-0 s1-0 f26-0)
                  (vector+! (-> s3-1 0 pts s5-3) gp-2 s1-0)
                  (+! f28-0 f30-0)
                  )
                )
              )
            )
          )
        )
      (let* ((a0-27 0)
             (v1-55 (-> self discs a0-27))
             (gp-3 (-> self discs a0-27 bolt))
             )
        (set! (-> gp-3 base-color) (new 'static 'rgba :r #x78 :g #x78 :b #xff :a #xff))
        (set! (-> gp-3 inner-point-travel-time) (seconds 1))
        (set! (-> gp-3 snap-inner-points?) #t)
        (set! (-> gp-3 fractal-reduction) 0.4)
        (set! (-> gp-3 generate-mode) (the-as uint 1))
        (set! (-> gp-3 appearance) *dark-tower-lightning*)
        (set! (-> gp-3 num-active-spans) 7)
        (dotimes (a0-37 8)
          (set! (-> gp-3 spans data a0-37 random-offset-size-start) 4096.0)
          (set! (-> gp-3 spans-internal data a0-37 num-inner-points) 2)
          (set! (-> gp-3 spans data a0-37 inner-random-offset-size) 4096.0)
          (set! (-> gp-3 span-pts-start data a0-37 quad) (-> v1-55 pts a0-37 quad))
          )
        (set! (-> gp-3 spans data 0 random-offset-size-start) 0.0)
        (set! (-> gp-3 spans data 7 random-offset-size-start) 0.0)
        (set! (-> gp-3 spans-internal data 7 num-inner-points) 0)
        (case (-> v1-55 cur-state)
          (('inactive)
           (if (zero? (lightning-bolt-method-14 gp-3))
               (lightning-bolt-method-13 gp-3 2)
               )
           )
          (('active)
           (if (and (!= (lightning-bolt-method-14 gp-3) 0) (!= (lightning-bolt-method-14 gp-3) 1))
               (lightning-bolt-method-13 gp-3 1)
               )
           )
          )
        (lightning-bolt-method-11 gp-3)
        (lightning-bolt-method-12 gp-3)
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (until #f
      (let* ((f30-0 0.15)
             (f28-0 0.19999999)
             (v1-3 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-4 (the-as number (logior #x3f800000 v1-3)))
             (f30-1 (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-4)))))
             )
        (ja-no-eval :group! (-> self draw art-group data 2) :num! (seek! max f30-1) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek! max f30-1))
          )
        )
      )
    #f
    )
  :post (behavior ()
    (transform-post)
    )
  )

;; failed to figure out what this is:
(defstate hit (dark-eco-orb)
  :virtual #t
  :event dark-eco-orb-event-handler
  :trans (behavior ()
    (if (>= 0.0 (-> self hit-points))
        (go-virtual die)
        )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! (-> self draw art-group data 3) :num! (seek! max 0.5) :frame-num 5.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (go-virtual active)
    )
  :post (behavior ()
    (transform-post)
    (do-push-aways (-> self root))
    )
  )

;; definition for method 7 of type dark-eco-orb
(defmethod relocate ((this dark-eco-orb) (offset int))
  (dotimes (v1-0 2)
    (if (nonzero? (-> this discs v1-0 bolt))
        (&+! (-> this discs v1-0 bolt) offset)
        )
    )
  (call-parent-method this offset)
  )

;; definition for function dark-eco-orb-init-by-other
;; INFO: Used lq/sq
(defbehavior dark-eco-orb-init-by-other dark-eco-orb ((arg0 entity-actor))
  (set! (-> self level) (level-get *level* 'lctydest))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec crate))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid rideable))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 81920.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (set! (-> self shock-sound) (new-sound-id))
  (set! (-> self plasma-sound) (new-sound-id))
  (set! (-> self entity) arg0)
  (set! (-> self root trans quad) (-> arg0 extra trans quad))
  (quaternion-copy! (-> self root quat) (-> arg0 quat))
  (set! (-> self root scale quad) (-> (res-lump-struct arg0 'scale vector) quad))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dark-eco-orb" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self last-attack-id) (the-as uint 0))
  (set! (-> self hit-points) 1.0)
  (set! (-> self movie?) #f)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1449) self))
  (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 13) (the-as int #f) (-> arg0 extra trans) 0))
  (dotimes (gp-1 2)
    (quaternion-identity! (the-as quaternion (+ (the-as uint (-> self discs 0 orient)) (* 192 gp-1))))
    (set! (-> self discs gp-1 bolt) (new 'process 'lightning-bolt-tower))
    (set! (-> self discs gp-1 cur-state) 'active)
    (init! (-> self discs gp-1 bolt) 8 4 *dark-tower-lightning*)
    )
  (go-virtual active)
  )

;; definition for function dark-eco-orb-init-by-other-pos-scale
;; INFO: Used lq/sq
(defbehavior dark-eco-orb-init-by-other-pos-scale dark-eco-orb ((arg0 vector) (arg1 float))
  (set! (-> self level) (level-get *level* 'lctydest))
  (let ((s4-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) cshape-reaction-default)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s4-0 penetrate-using)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            flut-attack
            board
            mech-punch
            dark-punch
            dark-smack
            flut
            )
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s3-0 prim-core collide-with) (collide-spec jak player-list projectile))
      (set! (-> s3-0 prim-core action) (collide-action solid no-standon))
      (set! (-> s3-0 transform-index) 0)
      (set-vector! (-> s3-0 local-sphere) 0.0 8192.0 0.0 24576.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) s3-0)
      )
    (pusher-init s4-0)
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s4-0 event-self) 'touched)
    (set! (-> s4-0 max-iteration-count) (the-as uint 2))
    (set! (-> self root) s4-0)
    )
  (quaternion-identity! (-> self root quat))
  (set! (-> self root trans quad) (-> arg0 quad))
  (set-vector! (-> self root scale) arg1 arg1 arg1 1.0)
  (set! (-> self shock-sound) (new-sound-id))
  (set! (-> self plasma-sound) (new-sound-id))
  (set! (-> self last-attack-id) (the-as uint 0))
  (set! (-> self hit-points) 1.0)
  (set! (-> self movie?) #t)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dark-eco-orb" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 13) (the-as int #f) (the-as vector #t) 0))
  (dotimes (gp-2 2)
    (quaternion-identity! (the-as quaternion (+ (the-as uint (-> self discs 0 orient)) (* 192 gp-2))))
    (set! (-> self discs gp-2 bolt) (new 'process 'lightning-bolt-tower))
    (set! (-> self discs gp-2 cur-state) 'inactive)
    (init! (-> self discs gp-2 bolt) 8 4 *dark-tower-lightning*)
    )
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1449) self))
  (go-virtual active)
  )

;; definition of type dark-eco-tower
(deftype dark-eco-tower (process-drawable)
  ((puffer?      symbol)
   (puffer-h     handle)
   (jump-y       float)
   (jump-z       float)
   (creak-sound  ambient-sound)
   )
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type dark-eco-tower
(defmethod inspect ((this dark-eco-tower))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tpuffer?: ~A~%" (-> this puffer?))
  (format #t "~2Tpuffer-h: ~D~%" (-> this puffer-h))
  (format #t "~2Tjump-y: ~f~%" (-> this jump-y))
  (format #t "~2Tjump-z: ~f~%" (-> this jump-z))
  (format #t "~2Tcreak-sound: ~A~%" (-> this creak-sound))
  (label cfg-4)
  this
  )

;; definition of type tower-wave
(deftype tower-wave (structure)
  ((start  float)
   (end    float)
   (freq   float)
   (amp    float)
   )
  )

;; definition for method 3 of type tower-wave
(defmethod inspect ((this tower-wave))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'tower-wave)
  (format #t "~1Tstart: ~f~%" (-> this start))
  (format #t "~1Tend: ~f~%" (-> this end))
  (format #t "~1Tfreq: ~f~%" (-> this freq))
  (format #t "~1Tamp: ~f~%" (-> this amp))
  (label cfg-4)
  this
  )

;; definition for symbol *dark-eco-tower-waves*, type (array tower-wave)
(define *dark-eco-tower-waves* (new 'static 'boxed-array :type tower-wave
                                 (new 'static 'tower-wave :end 0.5 :freq 0.5 :amp 0.2)
                                 (new 'static 'tower-wave :end 0.2 :freq 0.2 :amp 0.1)
                                 )
        )

;; definition for function dark-eco-tower-callback
;; WARN: Return type mismatch int vs none.
(defun dark-eco-tower-callback ((arg0 cspace) (arg1 transformq))
  (-> arg0 param1)
  (-> arg0 param2)
  (let ((f30-0 1.0))
    (cspace<-parented-transformq-joint! arg0 arg1)
    (dotimes (s4-0 (length *dark-eco-tower-waves*))
      (let* ((s3-0 (-> *dark-eco-tower-waves* s4-0))
             (f0-2 (- (* 0.000012207031 (-> arg0 bone transform trans y))
                      (* 0.0033333334 (the float (current-time)) (-> s3-0 freq))
                      )
                   )
             )
        0.0
        (let* ((f0-8 (lerp-scale 0.0 1.0 (fabs (- f0-2 (the float (the int f0-2)))) (-> s3-0 start) (-> s3-0 end)))
               (f0-10 (sin (* 32768.0 f0-8)))
               )
          (+! f30-0 (* (-> s3-0 amp) f0-10))
          )
        )
      )
    (set! (-> arg1 scale x) f30-0)
    (set! (-> arg1 scale z) f30-0)
    )
  (cspace<-parented-transformq-joint! arg0 arg1)
  0
  (none)
  )

;; failed to figure out what this is:
(defstate idle (dark-eco-tower)
  :virtual #t
  :trans (behavior ()
    (update-trans! (-> self creak-sound) (-> self root trans))
    (set-falloff-far! (-> self creak-sound) 163840.0)
    (update! (-> self creak-sound))
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post transform-post
  )

;; definition for method 11 of type dark-eco-tower
(defmethod init-from-entity! ((this dark-eco-tower) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dark-eco-tower" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (go (method-of-object this idle))
  )

;; definition for method 10 of type dark-eco-tower
(defmethod deactivate ((this dark-eco-tower))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (-> this puffer-h)
      (deactivate (-> this puffer-h process 0))
      )
  (call-parent-method this)
  (none)
  )

;; definition for method 7 of type dark-eco-tower
(defmethod relocate ((this dark-eco-tower) (offset int))
  (if (nonzero? (-> this creak-sound))
      (&+! (-> this creak-sound) offset)
      )
  (call-parent-method this offset)
  )

;; definition for function dark-eco-tower-init-by-other
;; INFO: Used lq/sq
(defbehavior dark-eco-tower-init-by-other dark-eco-tower ((arg0 entity-actor))
  (set! (-> self level) (level-get *level* 'lctydest))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec crate camera-blocker))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid rideable))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 81920.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (set! (-> self root trans quad) (-> arg0 extra trans quad))
  (quaternion-copy! (-> self root quat) (-> arg0 quat))
  (set! (-> self root scale quad) (-> (res-lump-struct arg0 'scale vector) quad))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dark-eco-tower" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (ja-no-eval :group! (-> self draw art-group data 2) :num! zero)
  (transform-post)
  (let ((a0-20 (-> self node-list data 4)))
    (set! (-> a0-20 param0) dark-eco-tower-callback)
    (set! (-> a0-20 param1) self)
    (set! (-> a0-20 param2) (the-as basic 0))
    )
  (let ((v1-34 (-> self node-list data 5)))
    (set! (-> v1-34 param0) dark-eco-tower-callback)
    (set! (-> v1-34 param1) self)
    (set! (-> v1-34 param2) (the-as basic 1))
    )
  (let ((v1-36 (-> self node-list data 6)))
    (set! (-> v1-36 param0) dark-eco-tower-callback)
    (set! (-> v1-36 param1) self)
    (set! (-> v1-36 param2) (the-as basic 2))
    )
  (let ((v1-38 (-> self node-list data 7)))
    (set! (-> v1-38 param0) dark-eco-tower-callback)
    (set! (-> v1-38 param1) self)
    (set! (-> v1-38 param2) (the-as basic 3))
    )
  (let ((v1-40 (-> self node-list data 8)))
    (set! (-> v1-40 param0) dark-eco-tower-callback)
    (set! (-> v1-40 param1) self)
    (set! (-> v1-40 param2) (the-as basic 4))
    )
  (let ((v1-42 (-> self node-list data 9)))
    (set! (-> v1-42 param0) dark-eco-tower-callback)
    (set! (-> v1-42 param1) self)
    (set! (-> v1-42 param2) (the-as basic 5))
    )
  (let ((v1-44 (-> self node-list data 10)))
    (set! (-> v1-44 param0) dark-eco-tower-callback)
    (set! (-> v1-44 param1) self)
    (set! (-> v1-44 param2) (the-as basic 6))
    )
  (set! (-> self jump-y) (* 4096.0 (res-lump-float arg0 'jump-y :default 13.0)))
  (set! (-> self jump-z) (* 4096.0 (res-lump-float arg0 'jump-z :default 6.0)))
  (set! (-> self creak-sound) (new 'process 'ambient-sound "creak-loop" *zero-vector* 0.0))
  (set-falloff-far! (-> self creak-sound) 163840.0)
  (update-vol! (-> self creak-sound) 1.0)
  (update-pitch-mod! (-> self creak-sound) 0.0)
  (set! (-> self puffer?) #f)
  (let ((v1-57 (res-lump-value arg0 'extra-id uint128 :default (the-as uint128 -1) :time -1000000000.0)))
    (if (= (the-as uint v1-57) 1)
        (set! (-> self puffer?) #t)
        )
    )
  (cond
    ((not (-> self puffer?))
     (setup-masks (-> self draw) 0 8)
     (set! (-> self puffer-h) (the-as handle #f))
     )
    (else
      (new 'stack-no-clear 'vector)
      (new 'stack-no-clear 'vector)
      (let ((s5-3 (new 'stack-no-clear 'puffer-init-by-other-params)))
        (set! (-> s5-3 scale) 0.8)
        (set! (-> s5-3 jump-y) (* (-> self root scale x) (-> self jump-y)))
        (set! (-> s5-3 jump-z) (* (-> self root scale x) (-> self jump-z)))
        (vector<-cspace! (-> s5-3 pos) (-> self node-list data 13))
        (matrix->quaternion (-> s5-3 orient) (-> self node-list data 13 bone transform))
        (quaternion-copy! (-> s5-3 orient) (-> self root quat))
        (let ((v1-73 (entity-actor-lookup arg0 'alt-actor 0)))
          (when v1-73
            (quaternion-copy! (-> s5-3 orient) (-> v1-73 quat))
            (set! (-> s5-3 jump-y) (-> self jump-y))
            (set! (-> s5-3 jump-z) (-> self jump-z))
            )
          )
        (set! (-> self puffer-h)
              (ppointer->handle
                (process-spawn mhcity-puffer :init puffer-init-by-other s5-3 :name "mhcity-puffer" :to self)
                )
              )
        )
      )
    )
  (set! (-> self draw light-index) (the-as uint 10))
  (go-virtual idle)
  )

;; definition of type task-manager-destroy-darkeco
(deftype task-manager-destroy-darkeco (task-manager)
  ((actor-group        (pointer actor-group))
   (actor-group-count  int32)
   (handles            handle  64)
   (orb-handles        handle  8)
   (orb-status         uint32  8)
   (counter            uint32)
   (initial-orb        handle)
   )
  )

;; definition for method 3 of type task-manager-destroy-darkeco
(defmethod inspect ((this task-manager-destroy-darkeco))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Thandles[64] @ #x~X~%" (-> this handles))
  (format #t "~2Torb-handles[8] @ #x~X~%" (-> this orb-handles))
  (format #t "~2Torb-status[8] @ #x~X~%" (-> this orb-status))
  (format #t "~2Tcounter: ~D~%" (-> this counter))
  (format #t "~2Tinitial-orb: ~D~%" (-> this initial-orb))
  (label cfg-7)
  this
  )

;; definition for method 21 of type task-manager-destroy-darkeco
;; INFO: Used lq/sq
(defmethod set-time-limit ((this task-manager-destroy-darkeco))
  (local-vars (sv-16 res-tag))
  (let ((a0-2 (entity-by-name "tmanager-7")))
    (when a0-2
      (set! (-> this entity) (the-as entity-actor a0-2))
      (set! sv-16 (new 'static 'res-tag))
      (let ((v1-2 (res-lump-data a0-2 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v1-2 (nonzero? (-> sv-16 elt-count)))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v1-2))
           )
          (else
            (format 0 "ERROR: ~s: entity missing actor-group!~%" (game-task->string (-> this node-info task)))
            )
          )
        )
      )
    )
  (dotimes (v1-5 64)
    (set! (-> this handles v1-5) (the-as handle #f))
    )
  (dotimes (v1-8 8)
    (set! (-> this orb-handles v1-8) (the-as handle #f))
    (set! (-> this orb-status v1-8) (the-as uint 0))
    )
  (set-setting! 'city-sound '(darkeco1) 0.0 2)
  (set! (-> this initial-orb) (the-as handle #f))
  (set! (-> this counter) (the-as uint 5))
  (set! (-> this hud-counter)
        (ppointer->handle (process-spawn hud-eco-egg :init hud-init-by-other :name "hud-eco-egg" :to this))
        )
  (set-setting! 'music 'dstrdeco 0.0 0)
  ((method-of-type task-manager set-time-limit) this)
  (none)
  )

;; definition for method 26 of type task-manager-destroy-darkeco
;; WARN: Return type mismatch int vs none.
(defmethod task-manager-method-26 ((this task-manager-destroy-darkeco))
  (when (task-node-open? (game-task-node city-destroy-darkeco-dark-punch))
    (when (< (vector-vector-distance *initial-orb-pos* (target-pos 0)) 409600.0)
      (let ((a1-1 (new 'stack-no-clear 'array 'symbol 10)))
        (set! (-> a1-1 9) #f)
        (set! (-> a1-1 8) #f)
        (set! (-> a1-1 7) #f)
        (set! (-> a1-1 6) #f)
        (set! (-> a1-1 5) #f)
        (set! (-> a1-1 4) #f)
        (set! (-> a1-1 3) #f)
        (set! (-> a1-1 2) 'mhctycst)
        (set! (-> a1-1 1) 'mhcitya)
        (set! (-> a1-1 0) 'ctywide-mh)
        (want-levels *load-state* a1-1)
        )
      (if (not (movie?))
          (gui-control-method-12
            *gui-control*
            this
            (gui-channel art-load)
            (gui-action queue)
            "city-get-dark-punch"
            0
            -99.0
            (new 'static 'sound-id)
            )
          )
      )
    (when (not (-> this initial-orb))
      (let ((s5-1 (get-process *default-dead-pool* dark-eco-orb #x4000 1)))
        (set! (-> this initial-orb)
              (process->handle
                (-> (when s5-1
                      (let ((t9-7 (method-of-type dark-eco-orb activate)))
                        (t9-7 (the-as dark-eco-orb s5-1) this "dark-eco-orb" (the-as pointer #x70004000))
                        )
                      (run-now-in-process s5-1 dark-eco-orb-init-by-other-pos-scale *initial-orb-pos* #x3f800000)
                      (-> s5-1 ppointer)
                      )
                    0
                    )
                )
              )
        )
      )
    )
  (when (nonzero? (-> this actor-group))
    (let ((s5-2 0))
      (dotimes (s4-1 (length (-> this actor-group 1)))
        (let ((a0-15 (-> this actor-group 1 data s4-1)))
          (if (and (-> a0-15 actor) (logtest? (-> a0-15 actor extra perm status) (entity-perm-status dead)))
              (+! s5-2 1)
              )
          )
        )
      (set! (-> this counter) (the-as uint (- (length (-> this actor-group 1)) s5-2)))
      (cond
        ((zero? (-> this counter))
         (when (-> this hud-counter)
           (send-event (handle->process (-> this hud-counter)) 'hide-and-die)
           (set! (-> this hud-counter) (the-as handle #f))
           )
         )
        (else
          (set! (-> *game-info* counter) (the float (-> this counter)))
          )
        )
      (if (= s5-2 (length (-> this actor-group 1)))
          (task-node-close! (game-task-node city-destroy-darkeco-orbs) 'event)
          )
      )
    )
  (when (not (and *target* (focus-test? *target* grabbed)))
    (when (nonzero? (-> this actor-group))
      (dotimes (s5-3 (length (-> this actor-group 0)))
        (let ((s4-2 (-> this actor-group 0 data s5-3)))
          (cond
            ((and (-> s4-2 actor)
                  (= (-> s4-2 actor extra level display?) 'display)
                  (is-object-visible? (-> s4-2 actor extra level) (-> s4-2 actor vis-id))
                  )
             (if (not (-> this handles s5-3))
                 (set! (-> this handles s5-3)
                       (ppointer->handle (process-spawn dark-eco-tower (-> s4-2 actor) :name "dark-eco-tower" :to this))
                       )
                 )
             )
            (else
              (when (-> this handles s5-3)
                (deactivate (-> this handles s5-3 process 0))
                (set! (-> this handles s5-3) (the-as handle #f))
                )
              )
            )
          )
        )
      (dotimes (s5-4 (length (-> this actor-group 1)))
        (let ((s4-3 (-> this actor-group 1 data s5-4)))
          (when (-> s4-3 actor)
            (if (logtest? (-> s4-3 actor extra perm status) (entity-perm-status dead))
                (set! (-> this orb-status s5-4) (the-as uint 1))
                )
            (cond
              ((and (is-object-visible? (-> s4-3 actor extra level) (-> s4-3 actor vis-id))
                    (zero? (-> this orb-status s5-4))
                    )
               (if (not (-> this orb-handles s5-4))
                   (set! (-> this orb-handles s5-4)
                         (ppointer->handle (process-spawn dark-eco-orb (-> s4-3 actor) :name "dark-eco-orb" :to this))
                         )
                   )
               )
              (else
                (when (-> this orb-handles s5-4)
                  (deactivate (-> this orb-handles s5-4 process 0))
                  (set! (-> this orb-handles s5-4) (the-as handle #f))
                  )
                )
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

;; definition of type task-manager-dark-punch-training
(deftype task-manager-dark-punch-training (task-manager)
  ((gui-id  sound-id)
   )
  (:methods
    (print-text (_type_ text-id) none)
    )
  )

;; definition for method 3 of type task-manager-dark-punch-training
(defmethod inspect ((this task-manager-dark-punch-training))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tgui-id: ~D~%" (-> this gui-id))
  (label cfg-4)
  this
  )

;; definition for method 32 of type task-manager-dark-punch-training
;; WARN: Return type mismatch float vs none.
(defmethod print-text ((this task-manager-dark-punch-training) (arg0 text-id))
  (when (= (get-status *gui-control* (-> this gui-id)) (gui-status active))
    (let ((s5-1
            (new 'stack 'font-context *font-default-matrix* 32 290 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (set! (-> s5-1 flags) (font-flags shadow kerning middle middle-vert large))
      (let ((v1-4 s5-1))
        (set! (-> v1-4 width) (the float 440))
        )
      (let ((v1-5 s5-1))
        (set! (-> v1-5 height) (the float 80))
        )
      (let ((v1-6 s5-1))
        (set! (-> v1-6 scale) 0.7)
        )
      (let ((s4-0 print-game-text))
        (format (clear *temp-string*) (lookup-text! *common-text* arg0 #f))
        (s4-0 *temp-string* s5-1 #f 44 (bucket-id hud-draw-hud-alpha))
        )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-dark-punch-training)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self gui-id)
          (add-process *gui-control* self (gui-channel message) (gui-action play) (-> self name) 81920.0 0)
          )
    )
  :exit (behavior ()
    (send-event *target* 'end-mode 'darkjak)
    )
  :trans (behavior ()
    (print-text self (text-id text-05e7))
    (if (and (time-elapsed? (-> self state-time) (seconds 5))
             *target*
             (not (logtest? (focus-status dark) (-> *target* focus-status)))
             )
        (send-event *target* 'change-mode 'darkjak #f (darkjak-stage force-on active))
        )
    (let ((t9-3 (-> (find-parent-state) trans)))
      (if t9-3
          (t9-3)
          )
      )
    )
  )

;; definition of type grind-electricity
(deftype grind-electricity (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type grind-electricity
(defmethod inspect ((this grind-electricity))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 48) (new 'static 'lightning-spec
                                          :name "grind-elec-lightning"
                                          :flags (lightning-spec-flags lsf0)
                                          :start-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :end-color (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.42
                                          :num-points 16
                                          :box-size 8192.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 2048.0
                                          :duration 30.0
                                          :sound (static-sound-spec "shock" :group 0)
                                          )
      )

;; failed to figure out what this is:
(defstate idle (grind-electricity)
  :virtual #t
  :trans (behavior ()
    (local-vars (sv-48 (pointer lightning-tracker)) (sv-52 sparticle-launcher))
    (rlet ((acc :class vf)
           (vf0 :class vf)
           (vf4 :class vf)
           (vf5 :class vf)
           (vf6 :class vf)
           (vf7 :class vf)
           )
      (init-vf0-vector)
      (let ((s5-0 (new 'stack-no-clear 'vector))
            (gp-0 (new 'stack-no-clear 'vector))
            )
        (set! (-> s5-0 quad) (-> self root trans quad))
        (set! (-> gp-0 quad) (-> self root trans quad))
        (let ((s2-0 s5-0))
          (let ((s4-0 s5-0))
            (let ((s3-0 *x-vector*))
              (let ((v1-2 (rand-vu-float-range -4096.0 4096.0)))
                (.mov vf7 v1-2)
                )
              (.lvf vf5 (&-> s3-0 quad))
              )
            (.lvf vf4 (&-> s4-0 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> s2-0 quad) vf6)
          )
        (let ((s2-1 s5-0))
          (let ((s4-1 s5-0))
            (let ((s3-1 *y-vector*))
              (let ((v1-3 (rand-vu-float-range -4096.0 4096.0)))
                (.mov vf7 v1-3)
                )
              (.lvf vf5 (&-> s3-1 quad))
              )
            (.lvf vf4 (&-> s4-1 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> s2-1 quad) vf6)
          )
        (let ((s2-2 s5-0))
          (let ((s4-2 s5-0))
            (let ((s3-2 *z-vector*))
              (let ((v1-4 (rand-vu-float-range -4096.0 4096.0)))
                (.mov vf7 v1-4)
                )
              (.lvf vf5 (&-> s3-2 quad))
              )
            (.lvf vf4 (&-> s4-2 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> s2-2 quad) vf6)
          )
        (let ((s2-3 gp-0))
          (let ((s4-3 gp-0))
            (let ((s3-3 *x-vector*))
              (let ((v1-5 (rand-vu-float-range -4096.0 4096.0)))
                (.mov vf7 v1-5)
                )
              (.lvf vf5 (&-> s3-3 quad))
              )
            (.lvf vf4 (&-> s4-3 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> s2-3 quad) vf6)
          )
        (let ((s2-4 gp-0))
          (let ((s4-4 gp-0))
            (let ((s3-4 *y-vector*))
              (let ((v1-6 (rand-vu-float-range -4096.0 4096.0)))
                (.mov vf7 v1-6)
                )
              (.lvf vf5 (&-> s3-4 quad))
              )
            (.lvf vf4 (&-> s4-4 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> s2-4 quad) vf6)
          )
        (let ((s2-5 gp-0))
          (let ((s4-5 gp-0))
            (let ((s3-5 *z-vector*))
              (let ((v1-7 (rand-vu-float-range -4096.0 4096.0)))
                (.mov vf7 v1-7)
                )
              (.lvf vf5 (&-> s3-5 quad))
              )
            (.lvf vf4 (&-> s4-5 quad))
            )
          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf5 vf7 :mask #b111)
          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
          (.svf (&-> s2-5 quad) vf6)
          )
        (set! sv-48 (process-spawn
                      lightning-tracker
                      :init lightning-tracker-init
                      (-> *lightning-spec-id-table* 48)
                      0
                      lightning-probe-callback
                      self
                      s5-0
                      gp-0
                      :name "lightning-tracker"
                      :to self
                      :unk 0
                      )
              )
        (set! sv-52 (-> *part-id-table* 160))
        (when sv-48
          (set! (-> sv-48 0 user-time 0) 0)
          (when sv-52
            (let ((v1-19 (get-field-spec-by-id sv-52 (sp-field-id spt-timer))))
              (if v1-19
                  (set! (-> v1-19 initial-valuef) (the-as float (-> sv-48 0 duration)))
                  )
              )
            (let ((t9-10 sp-launch-particles-var)
                  (a0-20 *sp-particle-system-2d*)
                  (a1-10 sv-52)
                  (a2-3 *launch-matrix*)
                  )
              (set! (-> a2-3 trans quad) (-> s5-0 quad))
              (t9-10 a0-20 a1-10 a2-3 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
              )
            (let ((t9-11 sp-launch-particles-var)
                  (a0-21 *sp-particle-system-2d*)
                  (a1-11 sv-52)
                  (a2-4 *launch-matrix*)
                  )
              (set! (-> a2-4 trans quad) (-> gp-0 quad))
              (t9-11 a0-21 a1-11 a2-4 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
              )
            )
          )
        )
      )
    )
  :code sleep-code
  )

;; definition for method 11 of type grind-electricity
(defmethod init-from-entity! ((this grind-electricity) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (go (method-of-object this idle))
  )
