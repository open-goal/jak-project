;;-*-Lisp-*-
(in-package goal)

;; definition for method 38 of type vehicle
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod rigid-body-object-method-38 ((this vehicle))
  (cond
    ((< 0.0 (-> this scrape-sound-envelope))
     (if (zero? (-> this scrape-sound-id))
         (set! (-> this scrape-sound-id) (new-sound-id))
         )
     (sound-play-by-name
       (-> this info sound scrape-sound)
       (-> this scrape-sound-id)
       (the int (* 1024.0 (-> this scrape-sound-envelope)))
       0
       0
       (sound-group)
       (-> this impact-pos)
       )
     )
    (else
      (when (nonzero? (-> this scrape-sound-id))
        (sound-stop (-> this scrape-sound-id))
        (set! (-> this scrape-sound-id) (new 'static 'sound-id))
        0
        )
      )
    )
  0
  (none)
  )

;; definition for function calc-fade-vals
;; WARN: Return type mismatch object vs none.
(defun calc-fade-vals ((arg0 float))
  (let* ((f1-1 (* 0.00024414062 arg0))
         (f0-3 (- f1-1 (the float (the int f1-1))))
         (f1-3 (* 4096.0 (- f1-1 f0-3)))
         (f1-5 (/ -1.0 (* (- 1.0 f0-3) f1-3)))
         (f0-4 (/ f0-3 (- 1.0 f0-3)))
         )
    (format #t ":fade-a ~,,10f~%:fade-b ~,,10f~%" f1-5 f0-4)
    )
  (none)
  )

;; definition for symbol *vehicle-headlight-glow-template*, type sprite-glow-data
(define *vehicle-headlight-glow-template* (new 'static 'sprite-glow-data
                                            :position (new 'static 'vector :w 8192.0)
                                            :size-probe 163.84
                                            :z-offset 819.2
                                            :size-y 8192.0
                                            :color (new 'static 'rgbaf :x 255.0 :y 128.0 :w 16.0)
                                            :fade-a -0.0000122044
                                            :fade-b 8.997864
                                            :tex-id (new 'static 'texture-id :index #xd :page #x4)
                                            )
        )

;; definition for symbol *vehicle-taillight-glow-template*, type sprite-glow-data
(define *vehicle-taillight-glow-template* (new 'static 'sprite-glow-data
                                            :position (new 'static 'vector :w 3072.0)
                                            :size-probe 122.88
                                            :z-offset 409.6
                                            :size-y 3072.0
                                            :color (new 'static 'rgbaf :x 255.0 :y 64.0 :w 16.0)
                                            :fade-a -0.0000122044
                                            :fade-b 8.997864
                                            :tex-id (new 'static 'texture-id :index #xe :page #x4)
                                            )
        )

;; definition for symbol *vehicle-thruster-glow-template*, type sprite-glow-data
(define *vehicle-thruster-glow-template* (new 'static 'sprite-glow-data
                                           :position (new 'static 'vector :w 4096.0)
                                           :size-probe 102.4
                                           :size-y 4096.0
                                           :color (new 'static 'rgbaf :x 255.0 :y 64.0 :w 16.0)
                                           :fade-a -0.0000122044
                                           :fade-b 8.997864
                                           :tex-id (new 'static 'texture-id :index #xf :page #x4)
                                           )
        )

;; definition for method 9 of type vehicle-particle-common-info
;; WARN: Return type mismatch int vs none.
(defmethod init! ((this vehicle-particle-common-info))
  (set! (-> this sp-system2d) *sp-particle-system-2d*)
  (set! (-> this sp-system3d) *sp-particle-system-3d*)
  (set! (-> this part-quat) *particle-quat*)
  (set! (-> this part-vel) *particle-vel*)
  (set! (-> this part-thruster) (-> *part-id-table* 922))
  (set! (-> this part-thruster-x) (-> *part-id-table* 922 init-specs 2))
  (set! (-> this part-spec2) (-> *part-id-table* 922 init-specs 3))
  (set! (-> this headlight-glow-template) *vehicle-headlight-glow-template*)
  (set! (-> this taillight-glow-template) *vehicle-taillight-glow-template*)
  (set! (-> this thruster-glow-template) *vehicle-thruster-glow-template*)
  0
  (none)
  )

;; definition for symbol *vehicle-particle-common-info*, type vehicle-particle-common-info
(define *vehicle-particle-common-info* (new 'static 'vehicle-particle-common-info))

;; failed to figure out what this is:
(init! *vehicle-particle-common-info*)

;; definition for method 78 of type vehicle
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-78 ((this vehicle))
  (local-vars (sv-224 sparticle-launcher) (sv-228 sparticle-launcher))
  (let ((a1-0 (-> this clock))
        (a0-1 (-> this traffic-priority-id))
        )
    (when (not (logtest? (logxor a0-1 (-> a1-0 integral-frame-counter)) 31))
      (let ((f0-1
              (+ (-> *time-of-day-context* time) (* 0.048387095 (the float (logand (-> this traffic-priority-id) 31))))
              )
            )
        (cond
          ((and (logtest? (-> this v-flags) (vehicle-flag riding)) (or (< f0-1 7.0) (< 19.0 f0-1)))
           (if (not (logtest? (vehicle-flag lights-on) (-> this v-flags)))
               (vehicle-method-125 this)
               )
           )
          (else
            (if (logtest? (vehicle-flag lights-on) (-> this v-flags))
                (vehicle-method-126 this)
                )
            )
          )
        )
      )
    )
  (when (logtest? (vehicle-flag lights-update) (-> this v-flags))
    (let ((f30-0 (if (logtest? (vehicle-flag lights-on) (-> this v-flags))
                     1.0
                     0.0
                     )
                 )
          )
      (seek! (-> this lights-factor) f30-0 (* 2.0 (seconds-per-frame)))
      (if (= (-> this lights-factor) f30-0)
          (set! (-> this v-flags) (the-as vehicle-flag (logclear (-> this v-flags) (vehicle-flag lights-update))))
          )
      )
    )
  (let ((s5-0 (new 'stack-no-clear 'vehicle-stack-type3)))
    (let* ((v1-38 (-> s5-0 mat0))
           (a3-0 (-> this node-list data 0 bone transform))
           (a0-14 (-> a3-0 rvec quad))
           (a1-3 (-> a3-0 uvec quad))
           (a2-1 (-> a3-0 fvec quad))
           (a3-1 (-> a3-0 trans quad))
           )
      (set! (-> v1-38 rvec quad) a0-14)
      (set! (-> v1-38 uvec quad) a1-3)
      (set! (-> v1-38 fvec quad) a2-1)
      (set! (-> v1-38 trans quad) a3-1)
      )
    (set-vector! (-> s5-0 vec1) 0.0 0.0 -1.0 1.0)
    (vector-rotate*! (-> s5-0 vec1) (-> s5-0 vec1) (-> s5-0 mat0))
    (set! (-> this fog-fade) (calc-fade-from-fog (-> this root trans)))
    (set! (-> s5-0 float1) (* (-> this fog-fade) (-> this lights-factor)))
    (when (< 0.0 (-> s5-0 float1))
      (dotimes (s4-0 (-> this info particles headlight-count))
        (quad-copy!
          (the-as pointer (-> s5-0 glow))
          (the-as pointer (-> this info particle-common headlight-glow-template))
          4
          )
        (vector-matrix*! (-> s5-0 vec0) (-> this info particles headlight-local-pos s4-0) (-> s5-0 mat0))
        (let* ((v1-46 (-> s5-0 glow))
               (a1-8 (-> s5-0 vec0))
               (f0-15 (-> v1-46 position w))
               )
          (set! (-> v1-46 position quad) (-> a1-8 quad))
          (set! (-> v1-46 position w) f0-15)
          )
        0
        (set! (-> s5-0 glow rot-angle) (* 182.04445 (rand-vu-float-range -17.0 -13.0)))
        (set! (-> s5-0 glow color x) 255.0)
        (set! (-> s5-0 glow color y) (rand-vu-float-range 192.0 255.0))
        (set! (-> s5-0 glow color w) (* (-> s5-0 float1) (rand-vu-float-range 16.0 18.0)))
        (add! *simple-sprite-system* (-> s5-0 glow))
        (let ((f0-22 (-> this camera-dist2))
              (f1-7 245760.0)
              )
          (when (< f0-22 (* f1-7 f1-7))
            (let ((f0-23 3276.8))
              (set! (-> s5-0 glow position w) f0-23)
              (set! (-> s5-0 glow size-y) f0-23)
              )
            (set! (-> s5-0 glow fade-a) -0.00001356)
            (set! (-> s5-0 glow fade-b) 2.3332994)
            (set! (-> s5-0 glow color z) (rand-vu-float-range 128.0 160.0))
            (set! (-> s5-0 glow color w) (* (-> s5-0 float1) (rand-vu-float-range 32.0 36.0)))
            (add! *simple-sprite-system* (-> s5-0 glow))
            )
          )
        )
      (quad-copy!
        (the-as pointer (-> s5-0 glow))
        (the-as pointer (-> this info particle-common taillight-glow-template))
        4
        )
      (dotimes (s4-1 (-> this info particles taillight-count))
        (vector-matrix*! (-> s5-0 vec0) (-> this info particles taillight-local-pos s4-1) (-> s5-0 mat0))
        (let* ((v1-70 (-> s5-0 glow))
               (a1-20 (-> s5-0 vec0))
               (f0-29 (-> v1-70 position w))
               )
          (set! (-> v1-70 position quad) (-> a1-20 quad))
          (set! (-> v1-70 position w) f0-29)
          )
        0
        (set! (-> s5-0 glow rot-angle) (* 182.04445 (rand-vu-float-range -4.0 4.0)))
        (set! (-> s5-0 glow color y) (* 64.0 (rand-vu)))
        (set! (-> s5-0 glow color w) (* (-> s5-0 float1) (rand-vu-float-range 16.0 21.0)))
        (add! *simple-sprite-system* (-> s5-0 glow))
        )
      )
    (when (logtest? (-> this rbody flags) (rigid-body-flag enable-physics))
      (when (logtest? (vehicle-flag ignition) (-> this v-flags))
        (set! (-> *part-id-table* 923 init-specs 2 initial-valuef)
              (* 6.0 (+ 0.25 (-> this engine-power-factor)) (rand-vu))
              )
        (let* ((f0-39 1.0)
               (f1-12 (-> this engine-power-factor))
               (f0-40 (- f0-39 (* f1-12 f1-12)))
               )
          (set! (-> *part-id-table* 923 init-specs 9 initial-valuef) (* 16.0 f0-40))
          (set! (-> *part-id-table* 923 init-specs 9 random-rangef) (* 48.0 f0-40))
          )
        (set! (-> s5-0 float0)
              (* 0.2 (-> this info handling max-engine-thrust) (+ 0.5 (-> this engine-power-factor)))
              )
        (let ((s4-2 (-> *part-id-table* 923)))
          (dotimes (s3-0 2)
            (vector-matrix*! (-> s5-0 vec0) (-> this info particles exhaust-local-pos s3-0) (-> s5-0 mat0))
            (vector-rotate*! (-> s5-0 vec1) (-> this info particles exhaust-local-dir s3-0) (-> s5-0 mat0))
            (vector+float*! (-> s5-0 vec2) (-> this rbody lin-velocity) (-> s5-0 vec1) (-> s5-0 float0))
            (let ((v1-116 (-> this info particle-common part-vel))
                  (a0-40 (-> s5-0 vec2))
                  (f0-46 300.0)
                  )
              (vector-float*! v1-116 a0-40 (/ 1.0 f0-46))
              )
            (set! (-> s4-2 birthaccum) (the-as float (-> this exhaust-part-accum s3-0)))
            (let ((t9-23 sp-launch-particles-var)
                  (a0-41 (-> this info particle-common sp-system2d))
                  (a1-33 s4-2)
                  (a2-9 *launch-matrix*)
                  )
              (set! (-> a2-9 trans quad) (-> s5-0 vec0 quad))
              (t9-23 a0-41 a1-33 a2-9 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
              )
            (set! (-> this exhaust-part-accum s3-0) (the-as sparticle-launch-control (-> s4-2 birthaccum)))
            )
          )
        )
      (when (< (-> this hit-points) 0.75)
        (let* ((f28-1 (+ -32768.0 (* 32768.0 (rand-vu))))
               (f24-0 (* 65536.0 (rand-vu)))
               (f30-10 (cos f28-1))
               (f28-2 (sin f28-1))
               (f26-0 (cos f24-0))
               )
          (set! (-> s5-0 vec3 x) (* f30-10 (sin f24-0)))
          (set! (-> s5-0 vec3 y) f28-2)
          (set! (-> s5-0 vec3 z) (* f30-10 f26-0))
          )
        (set! sv-224 (the-as sparticle-launcher #f))
        (set! sv-228 (the-as sparticle-launcher #f))
        (cond
          ((< (-> this hit-points) 0.25)
           (set! sv-224 (-> *part-id-table* 925))
           (set! sv-228 (-> *part-id-table* 921))
           )
          ((< (-> this hit-points) 0.5)
           (set! sv-224 (-> *part-id-table* 928))
           )
          (else
            (if (< (rand-vu) 0.05)
                (set! sv-224 (-> *part-id-table* 930))
                )
            )
          )
        (when sv-224
          (set! (-> s5-0 byte0) 0)
          (dotimes (s4-3 2)
            (vector-matrix*! (-> s5-0 vec0) (-> this info particles smoke-local-pos s4-3) (-> s5-0 mat0))
            (vector-rotate*! (-> s5-0 vec2) (-> this info particles smoke-local-vel s4-3) (-> s5-0 mat0))
            (vector+! (-> s5-0 vec2) (-> s5-0 vec2) (-> this rbody lin-velocity))
            (vector+float*! (-> s5-0 vec2) (-> s5-0 vec2) (-> s5-0 vec3) (* 24576.0 (rand-vu)))
            (let ((v1-155 (-> this info particle-common part-vel))
                  (a0-50 (-> s5-0 vec2))
                  (f0-63 300.0)
                  )
              (vector-float*! v1-155 a0-50 (/ 1.0 f0-63))
              )
            (when (and sv-228 (< (rand-vu) 0.005))
              (let ((t9-35 sp-launch-particles-var)
                    (a0-51 (-> this info particle-common sp-system2d))
                    (a1-43 sv-228)
                    (a2-12 *launch-matrix*)
                    )
                (set! (-> a2-12 trans quad) (-> s5-0 vec0 quad))
                (t9-35 a0-51 a1-43 a2-12 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
                )
              (+! (-> s5-0 byte0) 1)
              )
            (set! (-> sv-224 birthaccum) (the-as float (-> this smoke-part-accum s4-3)))
            (let ((t9-36 sp-launch-particles-var)
                  (a0-52 (-> this info particle-common sp-system2d))
                  (a1-44 sv-224)
                  (a2-13 *launch-matrix*)
                  )
              (set! (-> a2-13 trans quad) (-> s5-0 vec0 quad))
              (t9-36 a0-52 a1-44 a2-13 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
              )
            (set! (-> this smoke-part-accum s4-3) (the-as sparticle-launch-control (-> sv-224 birthaccum)))
            )
          (if (> (-> s5-0 byte0) 0)
              (sound-play "damage-zaps" :id (-> this damage-zap-sound-id))
              )
          )
        )
      (when (>= (-> this scrape-sound-envelope) 0.75)
        (let ((a1-46 (-> *part-id-table* 920))
              (t9-38 sp-launch-particles-var)
              (a0-55 (-> this info particle-common sp-system2d))
              (a2-15 *launch-matrix*)
              )
          (set! (-> a2-15 trans quad) (-> this impact-pos quad))
          (t9-38 a0-55 a1-46 a2-15 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
          )
        )
      )
    )
  0
  (none)
  )

;; definition for function vehicle-draw-thruster
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun vehicle-draw-thruster ((arg0 vehicle-particle-common-info) (arg1 vehicle-draw-thruster-params))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack-no-clear 'vehicle-thruster-work)))
      (set! (-> s5-0 vec2 quad) (-> arg1 trans quad))
      (quaternion-copy! (-> s5-0 quat1) (-> arg1 quat))
      (quaternion-rotate-local-x! (-> s5-0 quat1) (-> s5-0 quat1) 32768.0)
      (quaternion->matrix (the-as matrix (-> s5-0 quat0)) (-> s5-0 quat1))
      (set! (-> s5-0 vec4 quad) (-> s5-0 vec0 quad))
      (let ((f0-0 (rand-vu-float-range 1.0 1.33)))
        (set! (-> s5-0 float0) (* f0-0 (-> arg1 length) (-> arg1 thrust)))
        (set! (-> s5-0 float1) (fmin (* (-> arg1 width) f0-0) (* 0.5 (-> s5-0 float0))))
        )
      (let ((a1-5 (-> s5-0 vec3)))
        (let ((v1-4 (-> arg1 trans)))
          (let ((a0-9 (-> s5-0 vec4)))
            (let ((a2-2 (* 0.25 (-> s5-0 float0))))
              (.mov vf7 a2-2)
              )
            (.lvf vf5 (&-> a0-9 quad))
            )
          (.lvf vf4 (&-> v1-4 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a1-5 quad) vf6)
        )
      (quad-copy! (the-as pointer (-> s5-0 glow)) (the-as pointer (-> arg0 thruster-glow-template)) 4)
      (let* ((v1-5 (-> s5-0 glow))
             (a1-7 (-> s5-0 vec3))
             (f0-5 (-> v1-5 position w))
             )
        (set! (-> v1-5 position quad) (-> a1-7 quad))
        (set! (-> v1-5 position w) f0-5)
        )
      0
      (set! (-> s5-0 glow color y) (rand-vu-float-range 0.0 64.0))
      (set! (-> s5-0 glow color w) (* (-> arg1 fog-fade) (+ (* 16.0 (-> arg1 thrust)) (* 4.0 (rand-vu)))))
      (let ((f0-13 (* 4.0 (-> s5-0 float1))))
        (set! (-> s5-0 glow position w) f0-13)
        (set! (-> s5-0 glow size-y) f0-13)
        (set! (-> s5-0 glow size-probe) (* 0.025 f0-13))
        )
      (add! *simple-sprite-system* (-> s5-0 glow))
      (let ((v1-15 (-> s5-0 vec3)))
        (let ((a0-14 (-> arg1 trans)))
          (let ((a1-11 (-> s5-0 vec4)))
            (let ((a2-5 (* 0.5 (-> s5-0 float0))))
              (.mov vf7 a2-5)
              )
            (.lvf vf5 (&-> a1-11 quad))
            )
          (.lvf vf4 (&-> a0-14 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> v1-15 quad) vf6)
        )
      (set! (-> arg0 part-thruster-x initial-valuef) (-> s5-0 float1))
      (set! (-> arg0 part-spec2 initial-valuef) (-> s5-0 float0))
      (set! (-> s5-0 vec1 quad) (-> s5-0 vec3 quad))
      (launch-particles
        :system (-> arg0 sp-system3d)
        (-> arg0 part-thruster)
        (the-as matrix (-> s5-0 quat0))
        :origin-is-matrix #t
        )
      (quaternion-rotate-local-z! (-> s5-0 quat1) (-> s5-0 quat1) 10922.667)
      (quaternion->matrix (the-as matrix (-> s5-0 quat0)) (-> s5-0 quat1))
      (set! (-> s5-0 vec1 quad) (-> s5-0 vec3 quad))
      (launch-particles
        :system (-> arg0 sp-system3d)
        (-> arg0 part-thruster)
        (the-as matrix (-> s5-0 quat0))
        :origin-is-matrix #t
        )
      (quaternion-rotate-local-z! (-> s5-0 quat1) (-> s5-0 quat1) 10922.667)
      (quaternion->matrix (the-as matrix (-> s5-0 quat0)) (-> s5-0 quat1))
      (set! (-> s5-0 vec1 quad) (-> s5-0 vec3 quad))
      (launch-particles
        :system (-> arg0 sp-system3d)
        (-> arg0 part-thruster)
        (the-as matrix (-> s5-0 quat0))
        :origin-is-matrix #t
        )
      )
    0
    (none)
    )
  )




