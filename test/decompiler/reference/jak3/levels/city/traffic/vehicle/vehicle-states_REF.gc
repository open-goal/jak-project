;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defstate idle (vehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (disable-physics! self)
    (go-virtual waiting)
    )
  :code sleep-code
  :post (behavior ()
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate inactive (vehicle)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('nav-mesh-kill 'traffic-activate 'traffic-off-force 'traffic-off 'rider-on 'rider-off)
       (rbody-event-handler self proc argc message block)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self focus-status) (focus-status disable inactive))
    (disable-physics! self)
    (rigid-body-object-method-43 self)
    (vehicle-method-81 self)
    (logior! (-> self draw status) (draw-control-status no-draw))
    )
  :exit (behavior ()
    (rigid-body-object-method-42 self)
    (logclear! (-> self focus-status) (focus-status disable inactive))
    (logclear! (-> self draw status) (draw-control-status no-draw))
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate waiting (vehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (vehicle-method-136 self)
    (logior! (-> self v-flags) (vehicle-flag waiting-for-player nav-spheres))
    (logclear! (-> self v-flags) (vehicle-flag riding player-driving))
    (update-transforms (-> self root))
    (vehicle-method-140 self)
    (let ((v1-13 (find-prim-by-id-logtest (-> self root) (the-as uint 32))))
      (when v1-13
        (set! (-> v1-13 prim-core collide-with) (collide-spec))
        (set! (-> v1-13 prim-core collide-as) (collide-spec))
        0
        )
      )
    )
  :exit (behavior ()
    (logclear! (-> self v-flags) (vehicle-flag waiting-for-player))
    (let ((v1-3 (find-prim-by-id-logtest (-> self root) (the-as uint 32))))
      (when v1-3
        (set! (-> v1-3 prim-core collide-with) (collide-spec
                                                 backgnd
                                                 bot
                                                 crate
                                                 civilian
                                                 enemy
                                                 obstacle
                                                 vehicle-sphere
                                                 hit-by-player-list
                                                 hit-by-others-list
                                                 collectable
                                                 pusher
                                                 shield
                                                 vehicle-sphere-no-probe
                                                 )
              )
        (set! (-> v1-3 prim-core collide-as) (collide-spec vehicle-sphere))
        )
      )
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (vehicle-method-118 self)
    )
  )

;; failed to figure out what this is:
(defstate player-control (vehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (iterate-prims (-> self root) (lambda ((arg0 collide-shape-prim))
                                    (when (!= (-> arg0 prim-core prim-type) 1)
                                      (logior! (-> arg0 prim-core collide-as) (collide-spec jak))
                                      (logior! (-> arg0 prim-core collide-with) (collide-spec blocking-plane))
                                      )
                                    (none)
                                    )
                   )
    (vehicle-method-135 self)
    (logior! (-> self v-flags) (vehicle-flag riding player-driving nav-spheres))
    (set! (-> self v-flags)
          (the-as
            vehicle-flag
            (logclear (-> self v-flags) (vehicle-flag reverse-gear camera-inside-view camera-look-mode))
            )
          )
    (set! (-> self unknown-flags)
          (the-as vehicle-flag (logclear (-> self unknown-flags) (vehicle-flag camera-inside-view)))
          )
    (set! (-> self controls flags) (vehicle-controls-flag))
    (set! (-> self controls prev-flags) (vehicle-controls-flag))
    (set! (-> self control-hook)
          (the-as (function vehicle vehicle-controls) (method-of-object self control-hook-player))
          )
    (set! (-> self max-time-step) 0.02)
    (apply-momentum! self)
    (vehicle-method-99 self)
    (vehicle-method-80 self)
    (logior! (-> self root penetrated-by) (penetrate jak-yellow-shot jak-red-shot jak-blue-shot jak-dark-shot))
    0
    )
  :exit (behavior ()
    (logclear! (-> self root penetrated-by) (penetrate jak-yellow-shot jak-red-shot jak-blue-shot jak-dark-shot))
    (iterate-prims (-> self root) (lambda ((arg0 collide-shape-prim))
                                    (when (!= (-> arg0 prim-core prim-type) 1)
                                      (logclear! (-> arg0 prim-core collide-as) (collide-spec jak))
                                      (logclear! (-> arg0 prim-core collide-with) (collide-spec blocking-plane))
                                      )
                                    (none)
                                    )
                   )
    (if (and (not (logtest? (-> self info flags) 9216))
             (not (-> *setting-control* user-current pilot-death))
             (= (send-event *target* 'query 'mode) 'pilot)
             )
        (send-event *target* 'end-mode 'pilot)
        )
    (set! (-> self max-time-step) 0.033333335)
    (vehicle-method-81 self)
    (impulse-handler self)
    (set! (-> self v-flags)
          (the-as
            vehicle-flag
            (logclear (-> self v-flags) (vehicle-flag player-driving reverse-gear camera-inside-view camera-look-mode))
            )
          )
    (set! (-> self controls flags) (vehicle-controls-flag))
    (set! (-> self controls prev-flags) (vehicle-controls-flag))
    (remove-setting! 'sound-flava)
    )
  :trans (behavior ()
    (set! (-> self v-flags) (the-as vehicle-flag (logclear (-> self v-flags) (vehicle-flag gun-dark-2-zero-g))))
    (when (time-elapsed? (-> self state-time) (seconds 0.1))
      (if (not *target*)
          (go-virtual waiting)
          )
      (when (and (cpad-pressed? 0 triangle) (and (not (logtest? (-> self info flags) 1024))
                                                 (-> *setting-control* user-current pilot-exit)
                                                 (not (focus-test? *target* dead hit grabbed))
                                                 (!= (-> self crash-level) 3)
                                                 (< (-> self water-height) (-> self rbody position y))
                                                 )
                 )
        (when (send-event *target* 'end-mode 'pilot)
          (let ((v1-32 (find-prim-by-id-logtest (-> self root) (the-as uint 64))))
            (if v1-32
                (set! (-> v1-32 prim-core collide-as) (collide-spec vehicle-sphere))
                )
            )
          (logior! (-> self v-flags) (vehicle-flag player-dismounting))
          (set! (-> self player-dismount-time) (the-as uint (current-time)))
          (go-virtual waiting)
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (local-vars (a0-3 int) (a0-5 int))
    (let* ((v1-1 (-> *perf-stats* data 18))
           (a0-0 (-> v1-1 ctrl))
           )
      (+! (-> v1-1 count) 1)
      (b! (zero? a0-0) cfg-2 :delay (nop!))
      (.mtc0 Perf 0)
      (.sync.l)
      (.sync.p)
      (.mtpc pcr0 0)
      (.mtpc pcr1 0)
      (.sync.l)
      (.sync.p)
      (.mtc0 Perf a0-0)
      )
    (.sync.l)
    (.sync.p)
    (label cfg-2)
    0
    (vehicle-method-119 self)
    (let ((v1-6 (-> *perf-stats* data 18)))
      (b! (zero? (-> v1-6 ctrl)) cfg-4 :delay (nop!))
      (.mtc0 Perf 0)
      (.sync.l)
      (.sync.p)
      (.mfpc a0-3 pcr0)
      (+! (-> v1-6 accum0) a0-3)
      (.mfpc a0-5 pcr1)
      (+! (-> v1-6 accum1) a0-5)
      )
    (label cfg-4)
    0
    )
  )

;; failed to figure out what this is:
(defstate crash (vehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (logclear! (-> self v-flags) (vehicle-flag player-driving net-player-driving))
    (set-time! (-> self state-time))
    (vehicle-method-124 self)
    (set! (-> self crash-level) 3)
    (vehicle-method-81 self)
    (dotimes (gp-0 (-> self info rider seat-count))
      (send-event (handle->process (-> self rider-array gp-0)) 'vehicle-crash)
      )
    )
  :trans (behavior ()
    (set! (-> self hit-points) (- (-> self hit-points) (* 0.5 (seconds-per-frame))))
    (if (and (time-elapsed? (-> self state-time) 1) (< (-> self hit-points) -0.25))
        (go-virtual explode)
        )
    )
  :code sleep-code
  :post (behavior ()
    (vehicle-method-117 self)
    )
  )

;; definition for function vehicle-explode-post
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defbehavior vehicle-explode-post vehicle ()
  (local-vars (v1-42 float) (v1-47 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (set! (-> self camera-dist2) (vector-vector-distance-squared (-> self root trans) (camera-pos)))
    (set! (-> self player-dist2) (vector-vector-distance-squared (-> self root trans) (target-pos 0)))
    (cond
      ((logtest? (-> self draw status) (draw-control-status on-screen))
       (set! (-> self offscreen-time) (the-as uint (current-time)))
       )
      (else
        (let ((v1-7 (new 'stack-no-clear 'array 'uint32 1)))
          (set! (-> v1-7 0) (the-as uint (current-time)))
          (if (or (>= (- (-> v1-7 0) (-> self offscreen-time)) (the-as uint 1500))
                  (let ((f0-2 409600.0))
                    (< (* f0-2 f0-2) (-> self camera-dist2))
                    )
                  )
              (go-virtual die)
              )
          )
        )
      )
    (let ((f0-5 819200.0))
      (if (< (* f0-5 f0-5) (-> self camera-dist2))
          (go-virtual die)
          )
      )
    (cond
      ((logtest? (-> self rbody flags) (rigid-body-flag enable-physics))
       (vehicle-method-117 self)
       (when (and (logtest? (-> self v-flags) (vehicle-flag disturbed)) (logtest? (-> self v-flags) (vehicle-flag impact)))
         (let* ((f0-9 (* 0.0033333334 (the float (- (current-time) (-> self disturbed-time)))))
                (f0-12 (* f0-9 f0-9 (-> self camera-dist2)))
                (f1-5 0.000016276043)
                (f0-13 (* f0-12 (* f1-5 f1-5)))
                )
           (.lvf vf1 (&-> (-> self rbody ang-velocity) quad))
           (.add.w.vf vf2 vf0 vf0 :mask #b1)
           (.mul.vf vf1 vf1 vf1)
           (.mul.x.vf acc vf2 vf1 :mask #b1)
           (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
           (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
           (.mov v1-42 vf1)
           (if (and (< v1-42 f0-13) (begin
                                      (.lvf vf1 (&-> (-> self rbody lin-velocity) quad))
                                      (.add.w.vf vf2 vf0 vf0 :mask #b1)
                                      (.mul.vf vf1 vf1 vf1)
                                      (.mul.x.vf acc vf2 vf1 :mask #b1)
                                      (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
                                      (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
                                      (.mov v1-47 vf1)
                                      (let ((f1-9 v1-47)
                                            (f2-0 614.4)
                                            )
                                        (< f1-9 (* f0-13 (* f2-0 f2-0)))
                                        )
                                      )
                    )
               (logclear! (-> self v-flags) (vehicle-flag disturbed))
               )
           )
         )
       (when (not (vehicle-method-102 self))
         (disable-physics! self)
         (let ((gp-2 (-> self rbody)))
           (logclear! (-> gp-2 flags) (rigid-body-flag enable-physics active))
           (vehicle-method-142 self)
           (set! (-> gp-2 force quad) (the-as uint128 0))
           (set! (-> gp-2 torque quad) (the-as uint128 0))
           )
         0
         (logior! (-> self v-flags) (vehicle-flag nav-spheres))
         (vehicle-method-140 self)
         )
       )
      (else
        (rigid-body-object-method-30 self)
        )
      )
    0
    (none)
    )
  )

;; failed to figure out what this is:
(defstate explode (vehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (vehicle-method-116 self 'big-explosion)
    (logior! (-> self focus-status) (focus-status dead))
    (set! (-> self crash-level) 3)
    (set! (-> self force-level) 3)
    (logclear! (-> self v-flags) (vehicle-flag persistent player-driving net-player-driving))
    (set! (-> self v-flags) (the-as vehicle-flag (logior (vehicle-flag lights-dead) (-> self v-flags))))
    (vehicle-method-126 self)
    (sound-play-by-name (-> self info sound explode-sound) (new-sound-id) 1024 0 0 (sound-group) #t)
    (sound-play-by-name (-> self info sound explode2-sound) (new-sound-id) 1024 0 0 (sound-group) #t)
    (vehicle-method-106 self)
    (vehicle-method-136 self)
    (vehicle-method-100 self)
    )
  :code sleep-code
  :post (behavior ()
    (vehicle-explode-post)
    )
  )

;; failed to figure out what this is:
(defstate die (vehicle)
  :virtual #t
  :code (behavior ()
    (cond
      ((logtest? (vehicle-flag traffic-managed) (-> self v-flags))
       (send-event (ppointer->process (-> self parent)) 'child-killed)
       (vehicle-method-109 self)
       )
      (else
        (cleanup-for-death self)
        )
      )
    )
  )




