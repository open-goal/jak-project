;;-*-Lisp-*-
(in-package goal)

;; definition of type vehicle-info
(deftype vehicle-info (structure)
  ((handle-by-vehicle-type  handle  44)
   )
  )

;; definition for method 3 of type vehicle-info
(defmethod inspect ((this vehicle-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-info)
  (format #t "~1Thandle-by-vehicle-type[44] @ #x~X~%" (-> this handle-by-vehicle-type))
  (label cfg-4)
  this
  )

;; definition of type vehicle-lookup-info
(deftype vehicle-lookup-info (structure)
  ((turn-radius        meters)
   (throttle-turning   float)
   (throttle-straight  float)
   )
  )

;; definition for method 3 of type vehicle-lookup-info
(defmethod inspect ((this vehicle-lookup-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-lookup-info)
  (format #t "~1Tturn-radius: (meters ~m)~%" (-> this turn-radius))
  (format #t "~1Tthrottle-turning: ~f~%" (-> this throttle-turning))
  (format #t "~1Tthrottle-straight: ~f~%" (-> this throttle-straight))
  (label cfg-4)
  this
  )

;; definition of type vehicle-control-point
(deftype vehicle-control-point (structure)
  ((local-pos  vector  :inline)
   (normal     vector  :inline)
   )
  )

;; definition for method 3 of type vehicle-control-point
(defmethod inspect ((this vehicle-control-point))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-control-point)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (label cfg-4)
  this
  )

;; definition of type vehicle-attach-point
(deftype vehicle-attach-point (structure)
  ((local-pos  vector  :inline)
   (rot        vector  :inline)
   )
  )

;; definition for method 3 of type vehicle-attach-point
(defmethod inspect ((this vehicle-attach-point))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-attach-point)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Trot: #<vector @ #x~X>~%" (-> this rot))
  (label cfg-4)
  this
  )

;; definition of type vehicle-wheel-info
(deftype vehicle-wheel-info (structure)
  ((local-pos           vector  :inline)
   (flags               vehicle-wheel-flag)
   (callback            (function rigid-body-object vehicle-wheel-state vehicle-wheel-info none))
   (inertia             float)
   (radius              float)
   (susp-arm-length     float)
   (steer-arm-length    float)
   (scale               float)
   (travel              float)
   (probe-y-offset      float)
   (width               float)
   (suspension-spring   float)
   (suspension-damping  float)
   (forward-grip        float)
   (side-grip           float)
   (max-brake-torque    float)
   (camber              float)
   (settle-pos          float)
   (probe-radius        float)
   (tread-texture       string)
   (tread-tid           texture-id)
   )
  )

;; definition for method 3 of type vehicle-wheel-info
(defmethod inspect ((this vehicle-wheel-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-wheel-info)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tcallback: ~A~%" (-> this callback))
  (format #t "~1Tinertia: ~f~%" (-> this inertia))
  (format #t "~1Tradius: ~f~%" (-> this radius))
  (format #t "~1Tsusp-arm-length: ~f~%" (-> this susp-arm-length))
  (format #t "~1Tsteer-arm-length: ~f~%" (-> this steer-arm-length))
  (format #t "~1Tscale: ~f~%" (-> this scale))
  (format #t "~1Ttravel: ~f~%" (-> this travel))
  (format #t "~1Tprobe-y-offset: ~f~%" (-> this probe-y-offset))
  (format #t "~1Twidth: ~f~%" (-> this width))
  (format #t "~1Tsuspension-spring: ~f~%" (-> this suspension-spring))
  (format #t "~1Tsuspension-damping: ~f~%" (-> this suspension-damping))
  (format #t "~1Tforward-grip: ~f~%" (-> this forward-grip))
  (format #t "~1Tside-grip: ~f~%" (-> this side-grip))
  (format #t "~1Tmax-brake-torque: ~f~%" (-> this max-brake-torque))
  (format #t "~1Tcamber: ~f~%" (-> this camber))
  (format #t "~1Tsettle-pos: ~f~%" (-> this settle-pos))
  (format #t "~1Tprobe-radius: ~f~%" (-> this probe-radius))
  (format #t "~1Ttread-texture: ~A~%" (-> this tread-texture))
  (format #t "~1Ttread-tid: ~D~%" (-> this tread-tid))
  (label cfg-4)
  this
  )

;; definition of type vehicle-engine-info
(deftype vehicle-engine-info (structure)
  ((max-torque           float)
   (inertia              float)
   (drag                 float)
   (idle-rpm             float)
   (clutch-min-rpm       float)
   (clutch-max-rpm       float)
   (min-rpm              float)
   (max-rpm              float)
   (peak-torque-rpm      float)
   (powerband-width-rpm  float)
   )
  :pack-me
  )

;; definition for method 3 of type vehicle-engine-info
(defmethod inspect ((this vehicle-engine-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-engine-info)
  (format #t "~1Tmax-torque: ~f~%" (-> this max-torque))
  (format #t "~1Tinertia: ~f~%" (-> this inertia))
  (format #t "~1Tdrag: ~f~%" (-> this drag))
  (format #t "~1Tidle-rpm: ~f~%" (-> this idle-rpm))
  (format #t "~1Tclutch-min-rpm: ~f~%" (-> this clutch-min-rpm))
  (format #t "~1Tclutch-max-rpm: ~f~%" (-> this clutch-max-rpm))
  (format #t "~1Tmin-rpm: ~f~%" (-> this min-rpm))
  (format #t "~1Tmax-rpm: ~f~%" (-> this max-rpm))
  (format #t "~1Tpeak-torque-rpm: ~f~%" (-> this peak-torque-rpm))
  (format #t "~1Tpowerband-width-rpm: ~f~%" (-> this powerband-width-rpm))
  (label cfg-4)
  this
  )

;; definition of type vehicle-transmission-info
(deftype vehicle-transmission-info (structure)
  ((inertia            float)
   (upshift-rpm        float)
   (downshift-rpm      float)
   (final-drive-ratio  float)
   (gear-ratio-array   float  8)
   (gear-count         int8)
   )
  )

;; definition for method 3 of type vehicle-transmission-info
(defmethod inspect ((this vehicle-transmission-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-transmission-info)
  (format #t "~1Tinertia: ~f~%" (-> this inertia))
  (format #t "~1Tupshift-rpm: ~f~%" (-> this upshift-rpm))
  (format #t "~1Tdownshift-rpm: ~f~%" (-> this downshift-rpm))
  (format #t "~1Tfinal-drive-ratio: ~f~%" (-> this final-drive-ratio))
  (format #t "~1Tgear-ratio-array[8] @ #x~X~%" (-> this gear-ratio-array))
  (format #t "~1Tgear-count: ~D~%" (-> this gear-count))
  (label cfg-4)
  this
  )

;; definition of type vehicle-handling-info
(deftype vehicle-handling-info (structure)
  ((max-engine-thrust                  meters)
   (inv-max-engine-thrust              float)
   (engine-response-rate               float)
   (engine-intake-factor               float)
   (brake-factor                       float)
   (turbo-boost-factor                 float)
   (turbo-boost-duration               uint16)
   (max-xz-speed                       meters)
   (player-turn-anim-bias              float)
   (player-turn-anim-min               float)
   (player-turn-anim-max               float)
   (pilot-x-accel-factor               float)
   (pilot-y-accel-factor               float)
   (pilot-z-accel-factor               float)
   (ground-probe-distance              meters)
   (ground-probe-offset                meters)
   (cos-ground-effect-angle            float)
   (spring-lift-factor                 float)
   (air-steering-factor                float)
   (air-drag-factor                    float)
   (steering-fin-angle                 float)
   (steering-thruster-factor           float)
   (steering-thruster-max-gain         float)
   (steering-thruster-half-gain-speed  meters)
   (tire-steering-angle                float)
   (tire-steering-speed-factor         float)
   (tire-steering-speed-bias           float)
   (ackermann-factor                   float)
   (tire-friction-factor               float)
   (tire-static-friction               float)
   (tire-static-friction-speed         meters)
   (tire-dynamic-friction              float)
   (tire-dynamic-friction-speed        meters)
   (tire-inv-max-friction-speed        float)
   (airfoil-factor                     float)
   (drag-force-factor                  float)
   (rolling-resistance                 float)
   (speed-scrubbing-drag               float)
   (speed-limiting-drag                float)
   (pitch-control-factor               float)
   (roll-control-factor                float)
   (roll-angle                         float)
   (jump-thrust-factor                 float)
   (buoyancy-factor                    float)
   (water-drag-factor                  float)
   (player-weight                      float)
   (player-shift-x                     meters)
   (player-shift-z                     meters)
   (air-roll-torque                    float)
   (air-pitch-torque                   float)
   (air-angular-damping                float)
   (hop-turn-torque                    float)
   (ground-torque-scale                float)
   (ai-steering-factor                 float)
   (ai-throttle-factor                 float)
   )
  :pack-me
  )

;; definition for method 3 of type vehicle-handling-info
(defmethod inspect ((this vehicle-handling-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-handling-info)
  (format #t "~1Tmax-engine-thrust: (meters ~m)~%" (-> this max-engine-thrust))
  (format #t "~1Tinv-max-engine-thrust: ~f~%" (-> this inv-max-engine-thrust))
  (format #t "~1Tengine-response-rate: ~f~%" (-> this engine-response-rate))
  (format #t "~1Tengine-intake-factor: ~f~%" (-> this engine-intake-factor))
  (format #t "~1Tbrake-factor: ~f~%" (-> this brake-factor))
  (format #t "~1Tturbo-boost-factor: ~f~%" (-> this turbo-boost-factor))
  (format #t "~1Tturbo-boost-duration: ~D~%" (-> this turbo-boost-duration))
  (format #t "~1Tmax-xz-speed: (meters ~m)~%" (-> this max-xz-speed))
  (format #t "~1Tplayer-turn-anim-bias: ~f~%" (-> this player-turn-anim-bias))
  (format #t "~1Tplayer-turn-anim-min: ~f~%" (-> this player-turn-anim-min))
  (format #t "~1Tplayer-turn-anim-max: ~f~%" (-> this player-turn-anim-max))
  (format #t "~1Tpilot-x-accel-factor: ~f~%" (-> this pilot-x-accel-factor))
  (format #t "~1Tpilot-y-accel-factor: ~f~%" (-> this pilot-y-accel-factor))
  (format #t "~1Tpilot-z-accel-factor: ~f~%" (-> this pilot-z-accel-factor))
  (format #t "~1Tground-probe-distance: (meters ~m)~%" (-> this ground-probe-distance))
  (format #t "~1Tground-probe-offset: (meters ~m)~%" (-> this ground-probe-offset))
  (format #t "~1Tcos-ground-effect-angle: ~f~%" (-> this cos-ground-effect-angle))
  (format #t "~1Tspring-lift-factor: ~f~%" (-> this spring-lift-factor))
  (format #t "~1Tair-steering-factor: ~f~%" (-> this air-steering-factor))
  (format #t "~1Tair-drag-factor: ~f~%" (-> this air-drag-factor))
  (format #t "~1Tsteering-fin-angle: ~f~%" (-> this steering-fin-angle))
  (format #t "~1Tsteering-thruster-factor: ~f~%" (-> this steering-thruster-factor))
  (format #t "~1Tsteering-thruster-max-gain: ~f~%" (-> this steering-thruster-max-gain))
  (format #t "~1Tsteering-thruster-half-gain-speed: (meters ~m)~%" (-> this steering-thruster-half-gain-speed))
  (format #t "~1Ttire-steering-angle: ~f~%" (-> this tire-steering-angle))
  (format #t "~1Ttire-steering-speed-factor: ~f~%" (-> this tire-steering-speed-factor))
  (format #t "~1Ttire-steering-speed-bias: ~f~%" (-> this tire-steering-speed-bias))
  (format #t "~1Tackermann-factor: ~f~%" (-> this ackermann-factor))
  (format #t "~1Ttire-friction-factor: ~f~%" (-> this tire-friction-factor))
  (format #t "~1Ttire-static-friction: ~f~%" (-> this tire-static-friction))
  (format #t "~1Ttire-static-friction-speed: (meters ~m)~%" (-> this tire-static-friction-speed))
  (format #t "~1Ttire-dynamic-friction: ~f~%" (-> this tire-dynamic-friction))
  (format #t "~1Ttire-dynamic-friction-speed: (meters ~m)~%" (-> this tire-dynamic-friction-speed))
  (format #t "~1Ttire-inv-max-friction-speed: ~f~%" (-> this tire-inv-max-friction-speed))
  (format #t "~1Tairfoil-factor: ~f~%" (-> this airfoil-factor))
  (format #t "~1Tdrag-force-factor: ~f~%" (-> this drag-force-factor))
  (format #t "~1Trolling-resistance: ~f~%" (-> this rolling-resistance))
  (format #t "~1Tspeed-scrubbing-drag: ~f~%" (-> this speed-scrubbing-drag))
  (format #t "~1Tspeed-limiting-drag: ~f~%" (-> this speed-limiting-drag))
  (format #t "~1Tpitch-control-factor: ~f~%" (-> this pitch-control-factor))
  (format #t "~1Troll-control-factor: ~f~%" (-> this roll-control-factor))
  (format #t "~1Troll-angle: ~f~%" (-> this roll-angle))
  (format #t "~1Tjump-thrust-factor: ~f~%" (-> this jump-thrust-factor))
  (format #t "~1Tbuoyancy-factor: ~f~%" (-> this buoyancy-factor))
  (format #t "~1Twater-drag-factor: ~f~%" (-> this water-drag-factor))
  (format #t "~1Tplayer-weight: ~f~%" (-> this player-weight))
  (format #t "~1Tplayer-shift-x: (meters ~m)~%" (-> this player-shift-x))
  (format #t "~1Tplayer-shift-z: (meters ~m)~%" (-> this player-shift-z))
  (format #t "~1Tair-roll-torque: ~f~%" (-> this air-roll-torque))
  (format #t "~1Tair-pitch-torque: ~f~%" (-> this air-pitch-torque))
  (format #t "~1Tair-angular-damping: ~f~%" (-> this air-angular-damping))
  (format #t "~1Thop-turn-torque: ~f~%" (-> this hop-turn-torque))
  (format #t "~1Tground-torque-scale: ~f~%" (-> this ground-torque-scale))
  (format #t "~1Tai-steering-factor: ~f~%" (-> this ai-steering-factor))
  (format #t "~1Tai-throttle-factor: ~f~%" (-> this ai-throttle-factor))
  (label cfg-4)
  this
  )

;; definition of type vehicle-physics-model-info
(deftype vehicle-physics-model-info (structure)
  ((lift-thruster-count      int8)
   (roll-thruster-count      int8)
   (stabilizer-count         int8)
   (inv-lift-thruster-count  float)
   (lift-thruster-array      vehicle-attach-point  4 :inline)
   (roll-thruster-array      vehicle-attach-point  2 :inline)
   (stabilizer-array         vehicle-attach-point  6 :inline)
   (engine-thrust-local-pos  vector                :inline)
   (brake-local-pos          vector                :inline)
   (wheel-count              int8)
   (drive-wheel-count        int8)
   (front-wheel              vehicle-wheel-info    :inline)
   (rear-wheel               vehicle-wheel-info    :inline)
   )
  )

;; definition for method 3 of type vehicle-physics-model-info
(defmethod inspect ((this vehicle-physics-model-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-physics-model-info)
  (format #t "~1Tlift-thruster-count: ~D~%" (-> this lift-thruster-count))
  (format #t "~1Troll-thruster-count: ~D~%" (-> this roll-thruster-count))
  (format #t "~1Tstabilizer-count: ~D~%" (-> this stabilizer-count))
  (format #t "~1Tinv-lift-thruster-count: ~f~%" (-> this inv-lift-thruster-count))
  (format #t "~1Tlift-thruster-array[4] @ #x~X~%" (-> this lift-thruster-array))
  (format #t "~1Troll-thruster-array[2] @ #x~X~%" (-> this roll-thruster-array))
  (format #t "~1Tstabilizer-array[6] @ #x~X~%" (-> this stabilizer-array))
  (format #t "~1Tengine-thrust-local-pos: #<vector @ #x~X>~%" (-> this engine-thrust-local-pos))
  (format #t "~1Tbrake-local-pos: #<vector @ #x~X>~%" (-> this brake-local-pos))
  (format #t "~1Twheel-count: ~D~%" (-> this wheel-count))
  (format #t "~1Tdrive-wheel-count: ~D~%" (-> this drive-wheel-count))
  (format #t "~1Tfront-wheel: #<vehicle-wheel-info @ #x~X>~%" (-> this front-wheel))
  (format #t "~1Trear-wheel: #<vehicle-wheel-info @ #x~X>~%" (-> this rear-wheel))
  (label cfg-4)
  this
  )

;; definition of type vehicle-camera-info
(deftype vehicle-camera-info (structure)
  ((string-min-height        meters)
   (string-max-height        meters)
   (string-min-length        meters)
   (string-max-length        meters)
   (min-fov                  float)
   (max-fov                  float)
   (head-offset              float)
   (foot-offset              float)
   (normal-max-angle-offset  float)
   (air-max-angle-offset     float)
   (max-lookaround-speed     float)
   (look-pos-array           vector  4 :inline)
   (look-front               vector  :inline :overlay-at (-> look-pos-array 0))
   (look-left                vector  :inline :overlay-at (-> look-pos-array 1))
   (look-right               vector  :inline :overlay-at (-> look-pos-array 2))
   (look-rear                vector  :inline :overlay-at (-> look-pos-array 3))
   )
  )

;; definition for method 3 of type vehicle-camera-info
(defmethod inspect ((this vehicle-camera-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-camera-info)
  (format #t "~1Tstring-min-height: (meters ~m)~%" (-> this string-min-height))
  (format #t "~1Tstring-max-height: (meters ~m)~%" (-> this string-max-height))
  (format #t "~1Tstring-min-length: (meters ~m)~%" (-> this string-min-length))
  (format #t "~1Tstring-max-length: (meters ~m)~%" (-> this string-max-length))
  (format #t "~1Tmin-fov: ~f~%" (-> this min-fov))
  (format #t "~1Tmax-fov: ~f~%" (-> this max-fov))
  (format #t "~1Thead-offset: ~f~%" (-> this head-offset))
  (format #t "~1Tfoot-offset: ~f~%" (-> this foot-offset))
  (format #t "~1Tnormal-max-angle-offset: ~f~%" (-> this normal-max-angle-offset))
  (format #t "~1Tair-max-angle-offset: ~f~%" (-> this air-max-angle-offset))
  (format #t "~1Tmax-lookaround-speed: ~f~%" (-> this max-lookaround-speed))
  (format #t "~1Tlook-pos-array[4] @ #x~X~%" (-> this look-pos-array))
  (format #t "~1Tlook-front: #<vector @ #x~X>~%" (-> this look-pos-array))
  (format #t "~1Tlook-left: #<vector @ #x~X>~%" (-> this look-left))
  (format #t "~1Tlook-right: #<vector @ #x~X>~%" (-> this look-right))
  (format #t "~1Tlook-rear: #<vector @ #x~X>~%" (-> this look-rear))
  (label cfg-4)
  this
  )

;; definition of type vehicle-sound-loop-info
(deftype vehicle-sound-loop-info (structure)
  ((sound         sound-name)
   (speed         float)
   (min-speed     float)
   (max-speed     float)
   (pitch-offset  float)
   (pitch-scale   float)
   (min-pitch     float)
   (max-pitch     float)
   )
  )

;; definition for method 3 of type vehicle-sound-loop-info
;; INFO: Used lq/sq
(defmethod inspect ((this vehicle-sound-loop-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-sound-loop-info)
  (format #t "~1Tsound: ~D~%" (-> this sound))
  (format #t "~1Tspeed: ~f~%" (-> this speed))
  (format #t "~1Tmin-speed: ~f~%" (-> this min-speed))
  (format #t "~1Tmax-speed: ~f~%" (-> this max-speed))
  (format #t "~1Tpitch-offset: ~f~%" (-> this pitch-offset))
  (format #t "~1Tpitch-scale: ~f~%" (-> this pitch-scale))
  (format #t "~1Tmin-pitch: ~f~%" (-> this min-pitch))
  (format #t "~1Tmax-pitch: ~f~%" (-> this max-pitch))
  (label cfg-4)
  this
  )

;; definition of type vehicle-sound-info
(deftype vehicle-sound-info (structure)
  ((engine-pitch-scale      float)
   (engine-pitch-offset     float)
   (engine-pitch-mod-amp    float)
   (engine-sound-select     int8)
   (thrust-sound            sound-name                       :offset  16)
   (scrape-sound            sound-name)
   (glance-sound            sound-name)
   (impact-sound            sound-name)
   (impact2-sound           sound-name)
   (explode-sound           sound-name)
   (explode2-sound          sound-name)
   (extra-sound             sound-name)
   (water-sound             sound-name)
   (jump-sound              sound-name)
   (turbo-sound             sound-name)
   (damage-sound            sound-name)
   (bank-replace            pair)
   (idle-rpm                float)
   (idle-pitch-scale        float)
   (idle-crossover-rpm      float)
   (engine-rpm              float)
   (engine-crossover-rpm    float)
   (start-sound             sound-name                       :offset 240)
   (stop-sound              sound-name)
   (idle-sound              sound-name)
   (engine-sound            sound-name)
   (engine-load-sound       sound-name)
   (susp-creak-sound        sound-name)
   (susp-bottom-out-sound   sound-name)
   (susp-speed-threshold    float)
   (tire-roll-sounds        vehicle-sound-loop-info  4 :inline)
   (tire-slide-sounds       vehicle-sound-loop-info  2 :inline)
   (tire-roll-hum-sound     vehicle-sound-loop-info  :inline :overlay-at (-> tire-roll-sounds 0))
   (tire-roll-dirt-sound    vehicle-sound-loop-info  :inline :offset 416)
   (tire-roll-sand-sound    vehicle-sound-loop-info  :inline :offset 464)
   (tire-roll-knobby-sound  vehicle-sound-loop-info  :inline :offset 512)
   (tire-slide-road-sound   vehicle-sound-loop-info  :inline :overlay-at (-> tire-slide-sounds 0))
   (tire-slide-dirt-sound   vehicle-sound-loop-info  :inline :offset 608)
   )
  )

;; definition for method 3 of type vehicle-sound-info
;; INFO: Used lq/sq
(defmethod inspect ((this vehicle-sound-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-sound-info)
  (format #t "~1Tengine-pitch-scale: ~f~%" (-> this engine-pitch-scale))
  (format #t "~1Tengine-pitch-offset: ~f~%" (-> this engine-pitch-offset))
  (format #t "~1Tengine-pitch-mod-amp: ~f~%" (-> this engine-pitch-mod-amp))
  (format #t "~1Tengine-sound-select: ~D~%" (-> this engine-sound-select))
  (format #t "~1Tthrust-sound: ~g~%" (-> this thrust-sound))
  (format #t "~1Tscrape-sound: ~g~%" (-> this scrape-sound))
  (format #t "~1Tglance-sound: ~g~%" (-> this glance-sound))
  (format #t "~1Timpact-sound: ~g~%" (-> this impact-sound))
  (format #t "~1Timpact2-sound: ~g~%" (-> this impact2-sound))
  (format #t "~1Texplode-sound: ~g~%" (-> this explode-sound))
  (format #t "~1Texplode2-sound: ~g~%" (-> this explode2-sound))
  (format #t "~1Textra-sound: ~g~%" (-> this extra-sound))
  (format #t "~1Twater-sound: ~g~%" (-> this water-sound))
  (format #t "~1Tjump-sound: ~g~%" (-> this jump-sound))
  (format #t "~1Tturbo-sound: ~g~%" (-> this turbo-sound))
  (format #t "~1Tdamage-sound: ~g~%" (-> this damage-sound))
  (format #t "~1Tbank-replace: ~A~%" (-> this bank-replace))
  (format #t "~1Tidle-rpm: ~f~%" (-> this idle-rpm))
  (format #t "~1Tidle-pitch-scale: ~f~%" (-> this idle-pitch-scale))
  (format #t "~1Tidle-crossover-rpm: ~f~%" (-> this idle-crossover-rpm))
  (format #t "~1Tengine-rpm: ~f~%" (-> this engine-rpm))
  (format #t "~1Tengine-crossover-rpm: ~f~%" (-> this engine-crossover-rpm))
  (format #t "~1Tstart-sound: ~g~%" (-> this start-sound))
  (format #t "~1Tstop-sound: ~g~%" (-> this stop-sound))
  (format #t "~1Tidle-sound: ~g~%" (-> this idle-sound))
  (format #t "~1Tengine-sound: ~g~%" (-> this engine-sound))
  (format #t "~1Tengine-load-sound: ~g~%" (-> this engine-load-sound))
  (format #t "~1Tsusp-creak-sound: ~g~%" (-> this susp-creak-sound))
  (format #t "~1Tsusp-bottom-out-sound: ~g~%" (-> this susp-bottom-out-sound))
  (format #t "~1Tsusp-speed-threshold: ~f~%" (-> this susp-speed-threshold))
  (format #t "~1Ttire-roll-sounds[4] @ #x~X~%" (-> this tire-roll-sounds))
  (format #t "~1Ttire-slide-sounds[2] @ #x~X~%" (-> this tire-slide-sounds))
  (format #t "~1Ttire-roll-hum-sound: #<vehicle-sound-loop-info @ #x~X>~%" (-> this tire-roll-sounds))
  (format #t "~1Ttire-roll-dirt-sound: #<vehicle-sound-loop-info @ #x~X>~%" (-> this tire-roll-dirt-sound))
  (format #t "~1Ttire-roll-sand-sound: #<vehicle-sound-loop-info @ #x~X>~%" (-> this tire-roll-sand-sound))
  (format #t "~1Ttire-roll-knobby-sound: #<vehicle-sound-loop-info @ #x~X>~%" (-> this tire-roll-knobby-sound))
  (format #t "~1Ttire-slide-road-sound: #<vehicle-sound-loop-info @ #x~X>~%" (-> this tire-slide-sounds))
  (format #t "~1Ttire-slide-dirt-sound: #<vehicle-sound-loop-info @ #x~X>~%" (-> this tire-slide-dirt-sound))
  (label cfg-4)
  this
  )

;; definition of type vehicle-particle-info
(deftype vehicle-particle-info (structure)
  ((headlight-count        int8)
   (taillight-count        int8)
   (thruster-flame-width   meters)
   (thruster-flame-length  meters)
   (thruster-local-pos     vector  2 :inline)
   (exhaust-local-pos      vector  2 :inline)
   (exhaust-local-dir      vector  2 :inline)
   (smoke-local-pos        vector  2 :inline)
   (smoke-local-vel        vector  2 :inline)
   (headlight-local-pos    vector  3 :inline)
   (taillight-local-pos    vector  2 :inline)
   )
  )

;; definition for method 3 of type vehicle-particle-info
(defmethod inspect ((this vehicle-particle-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-particle-info)
  (format #t "~1Theadlight-count: ~D~%" (-> this headlight-count))
  (format #t "~1Ttaillight-count: ~D~%" (-> this taillight-count))
  (format #t "~1Tthruster-flame-width: (meters ~m)~%" (-> this thruster-flame-width))
  (format #t "~1Tthruster-flame-length: (meters ~m)~%" (-> this thruster-flame-length))
  (format #t "~1Tthruster-local-pos[2] @ #x~X~%" (-> this thruster-local-pos))
  (format #t "~1Texhaust-local-pos[2] @ #x~X~%" (-> this exhaust-local-pos))
  (format #t "~1Texhaust-local-dir[2] @ #x~X~%" (-> this exhaust-local-dir))
  (format #t "~1Tsmoke-local-pos[2] @ #x~X~%" (-> this smoke-local-pos))
  (format #t "~1Tsmoke-local-vel[2] @ #x~X~%" (-> this smoke-local-vel))
  (format #t "~1Theadlight-local-pos[3] @ #x~X~%" (-> this headlight-local-pos))
  (format #t "~1Ttaillight-local-pos[2] @ #x~X~%" (-> this taillight-local-pos))
  (label cfg-4)
  this
  )

;; definition of type vehicle-section-info
(deftype vehicle-section-info (structure)
  ((damage-seg-array  uint64  3)
   (damage-seg-count  int8)
   )
  :pack-me
  )

;; definition for method 3 of type vehicle-section-info
(defmethod inspect ((this vehicle-section-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-section-info)
  (format #t "~1Tdamage-seg-array[3] @ #x~X~%" (-> this damage-seg-array))
  (format #t "~1Tdamage-seg-count: ~D~%" (-> this damage-seg-count))
  (label cfg-4)
  this
  )

;; definition of type vehicle-damage-info
(deftype vehicle-damage-info (structure)
  ((inv-toughness-factor     float)
   (hit-points               float)
   (inv-hit-points           float)
   (hit-threshold            float)
   (hit-small                float)
   (hit-big                  float)
   (hit-deadly               float)
   (impact-damage-factor     float)
   (section-count            int8)
   (section-array            vehicle-section-info  4 :inline)
   (section-bike-front       vehicle-section-info  :inline :overlay-at (-> section-array 0))
   (section-bike-rear        vehicle-section-info  :inline :offset  72)
   (section-car-front-left   vehicle-section-info  :inline :overlay-at (-> section-array 0))
   (section-car-rear-left    vehicle-section-info  :inline :overlay-at section-bike-rear)
   (section-car-front-right  vehicle-section-info  :inline :offset 104)
   (section-car-rear-right   vehicle-section-info  :inline :offset 136)
   )
  )

;; definition for method 3 of type vehicle-damage-info
(defmethod inspect ((this vehicle-damage-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-damage-info)
  (format #t "~1Tinv-toughness-factor: ~f~%" (-> this inv-toughness-factor))
  (format #t "~1Thit-points: ~f~%" (-> this hit-points))
  (format #t "~1Tinv-hit-points: ~f~%" (-> this inv-hit-points))
  (format #t "~1Thit-threshold: ~f~%" (-> this hit-threshold))
  (format #t "~1Thit-small: ~f~%" (-> this hit-small))
  (format #t "~1Thit-big: ~f~%" (-> this hit-big))
  (format #t "~1Thit-deadly: ~f~%" (-> this hit-deadly))
  (format #t "~1Timpact-damage-factor: ~f~%" (-> this impact-damage-factor))
  (format #t "~1Tsection-count: ~D~%" (-> this section-count))
  (format #t "~1Tsection-array[4] @ #x~X~%" (-> this section-array))
  (format #t "~1Tsection-bike-front: #<vehicle-section-info @ #x~X>~%" (-> this section-array))
  (format #t "~1Tsection-bike-rear: #<vehicle-section-info @ #x~X>~%" (-> this section-bike-rear))
  (format #t "~1Tsection-car-front-left: #<vehicle-section-info @ #x~X>~%" (-> this section-array))
  (format #t "~1Tsection-car-rear-left: #<vehicle-section-info @ #x~X>~%" (-> this section-bike-rear))
  (format #t "~1Tsection-car-front-right: #<vehicle-section-info @ #x~X>~%" (-> this section-car-front-right))
  (format #t "~1Tsection-car-rear-right: #<vehicle-section-info @ #x~X>~%" (-> this section-car-rear-right))
  (label cfg-4)
  this
  )

;; definition of type vehicle-setup-info
(deftype vehicle-setup-info (structure)
  ((settle-height        float)
   (settle-rot-x         float)
   (shadow-bot-clip      float)
   (shadow-locus-dist    float)
   (look-select          uint8)
   (color-option-count   int8)
   (color-option-select  int8)
   (color                (inline-array vector))
   (gun-yaw-min          float)
   (gun-yaw-max          float)
   (gun-pitch-min        float)
   (gun-pitch-max        float)
   (gun-z-offset         float)
   )
  :pack-me
  )

;; definition for method 3 of type vehicle-setup-info
(defmethod inspect ((this vehicle-setup-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-setup-info)
  (format #t "~1Tsettle-height: ~f~%" (-> this settle-height))
  (format #t "~1Tsettle-rot-x: ~f~%" (-> this settle-rot-x))
  (format #t "~1Tshadow-bot-clip: ~f~%" (-> this shadow-bot-clip))
  (format #t "~1Tshadow-locus-dist: ~f~%" (-> this shadow-locus-dist))
  (format #t "~1Tlook-select: ~D~%" (-> this look-select))
  (format #t "~1Tcolor-option-count: ~D~%" (-> this color-option-count))
  (format #t "~1Tcolor-option-select: ~D~%" (-> this color-option-select))
  (format #t "~1Tgun-yaw-min: ~f~%" (-> this gun-yaw-min))
  (format #t "~1Tgun-yaw-max: ~f~%" (-> this gun-yaw-max))
  (format #t "~1Tgun-pitch-min: ~f~%" (-> this gun-pitch-min))
  (format #t "~1Tgun-pitch-max: ~f~%" (-> this gun-pitch-max))
  (format #t "~1Tgun-z-offset: ~f~%" (-> this gun-z-offset))
  (label cfg-4)
  this
  )

;; definition of type vehicle-seat-info
(deftype vehicle-seat-info (structure)
  ((data      uint8              16)
   (position  vector             :inline :overlay-at (-> data 0))
   (pos-x     float                      :overlay-at (-> data 0))
   (pos-y     float                      :overlay-at (-> data 4))
   (pos-z     float                      :overlay-at (-> data 8))
   (angle     int16                      :overlay-at (-> data 12))
   (flags     vehicle-seat-flag          :overlay-at (-> data 14))
   )
  )

;; definition for method 3 of type vehicle-seat-info
(defmethod inspect ((this vehicle-seat-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-seat-info)
  (format #t "~1Tdata[16] @ #x~X~%" (-> this position))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tpos-x: ~f~%" (-> this position x))
  (format #t "~1Tpos-y: ~f~%" (-> this position y))
  (format #t "~1Tpos-z: ~f~%" (-> this position z))
  (format #t "~1Tangle: ~D~%" (-> this angle))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type vehicle-grab-rail-info
(deftype vehicle-grab-rail-info (structure)
  ((local-pos  vector  2 :inline)
   (normal     vector  :inline)
   )
  )

;; definition for method 3 of type vehicle-grab-rail-info
(defmethod inspect ((this vehicle-grab-rail-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-grab-rail-info)
  (format #t "~1Tlocal-pos[2] @ #x~X~%" (-> this local-pos))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (label cfg-4)
  this
  )

;; definition of type vehicle-rider-info
(deftype vehicle-rider-info (structure)
  ((seat-count          int8)
   (rider-stance        uint8)
   (grab-rail-count     int8)
   (attach-point-count  int8)
   (grab-rail-array     (inline-array vehicle-grab-rail-info))
   (seat-array          vehicle-seat-info  4 :inline)
   (rider-hand-offset   vector             2 :inline)
   (attach-point-array  (inline-array vehicle-attach-point))
   )
  )

;; definition for method 3 of type vehicle-rider-info
(defmethod inspect ((this vehicle-rider-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-rider-info)
  (format #t "~1Tseat-count: ~D~%" (-> this seat-count))
  (format #t "~1Trider-stance: ~D~%" (-> this rider-stance))
  (format #t "~1Tgrab-rail-count: ~D~%" (-> this grab-rail-count))
  (format #t "~1Tattach-point-count: ~D~%" (-> this attach-point-count))
  (format #t "~1Tgrab-rail-array: #x~X~%" (-> this grab-rail-array))
  (format #t "~1Tseat-array[4] @ #x~X~%" (-> this seat-array))
  (format #t "~1Trider-hand-offset[2] @ #x~X~%" (-> this rider-hand-offset))
  (format #t "~1Tattach-point-array: #x~X~%" (-> this attach-point-array))
  (label cfg-4)
  this
  )

;; definition of type vehicle-explosion-info
(deftype vehicle-explosion-info (joint-exploder-static-params)
  ((skel       skeleton-group)
   (skel-name  string)
   (anim       int32)
   )
  )

;; definition for method 3 of type vehicle-explosion-info
;; INFO: Used lq/sq
(defmethod inspect ((this vehicle-explosion-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tjoints: ~A~%" (-> this joints))
  (format #t "~1Tcollide-spec: ~D~%" (-> this collide-spec))
  (format #t "~1Tart-level: ~A~%" (-> this art-level))
  (format #t "~1Tcollide-sound: ~D~%" (-> this collide-sound))
  (format #t "~1Tcollide-sound-interval: ~D~%" (-> this collide-sound-interval))
  (format #t "~1Tskel: ~A~%" (-> this skel))
  (format #t "~1Tskel-name: ~A~%" (-> this skel-name))
  (format #t "~1Tanim: ~D~%" (-> this anim))
  (label cfg-4)
  this
  )

;; definition of type vehicle-particle-common-info
(deftype vehicle-particle-common-info (structure)
  ((sp-system2d              sparticle-system)
   (sp-system3d              sparticle-system)
   (part-thruster            sparticle-launcher)
   (part-thruster-x          sp-field-init-spec)
   (part-spec2               sp-field-init-spec)
   (part-quat                quaternion)
   (part-vel                 vector)
   (headlight-glow-template  sprite-glow-data)
   (taillight-glow-template  sprite-glow-data)
   (thruster-glow-template   sprite-glow-data)
   )
  (:methods
    (init! (_type_) none)
    )
  )

;; definition for method 3 of type vehicle-particle-common-info
(defmethod inspect ((this vehicle-particle-common-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-particle-common-info)
  (format #t "~1Theadlight-glow-template: #<sprite-glow-data @ #x~X>~%" (-> this headlight-glow-template))
  (format #t "~1Ttaillight-glow-template: #<sprite-glow-data @ #x~X>~%" (-> this taillight-glow-template))
  (format #t "~1Tthruster-glow-template: #<sprite-glow-data @ #x~X>~%" (-> this thruster-glow-template))
  (label cfg-4)
  this
  )

;; definition of type rigid-body-vehicle-constants
(deftype rigid-body-vehicle-constants (rigid-body-object-constants)
  ((flags                uint32)
   (object-type          traffic-type)
   (guard-type           uint8)
   (vehicle-type         vehicle-type-u8)
   (engine               vehicle-engine-info         :inline)
   (transmission         vehicle-transmission-info   :inline)
   (handling             vehicle-handling-info       :inline)
   (target-speed-offset  meters)
   (turning-accel        meters)
   (camera               vehicle-camera-info         :inline)
   (sound                vehicle-sound-info          :inline)
   (particles            vehicle-particle-info       :inline)
   (damage               vehicle-damage-info         :inline)
   (physics-model        vehicle-physics-model-info  :inline)
   (setup                vehicle-setup-info          :inline)
   (rider                vehicle-rider-info          :inline)
   (explosion            vehicle-explosion-info)
   (explosion-part       int32)
   (debris               debris-static-params)
   (name-text            text-id)
   (particle-common      vehicle-particle-common-info)
   )
  (:methods
    (init-part! (_type_) none)
    )
  )

;; definition for method 3 of type rigid-body-vehicle-constants
(defmethod inspect ((this rigid-body-vehicle-constants))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rigid-body-vehicle-constants)
  (format #t "~1Tinfo: #<rigid-body-info @ #x~X>~%" (-> this info))
  (format #t "~1Tmass: ~f~%" (-> this info mass))
  (format #t "~1Tinv-mass: ~f~%" (-> this info inv-mass))
  (format #t "~1Tcm-joint-x: (meters ~m)~%" (-> this info cm-offset-joint x))
  (format #t "~1Tcm-joint-y: (meters ~m)~%" (-> this info cm-offset-joint y))
  (format #t "~1Tcm-joint-z: (meters ~m)~%" (-> this info cm-offset-joint z))
  (format #t "~1Tlinear-damping: ~f~%" (-> this info linear-damping))
  (format #t "~1Tangular-damping: ~f~%" (-> this info angular-damping))
  (format #t "~1Tbounce-factor: ~f~%" (-> this info bounce-factor))
  (format #t "~1Tfriction-factor: ~f~%" (-> this info friction-factor))
  (format #t "~1Tinertial-tensor-x: (meters ~m)~%" (-> this inertial-tensor-x))
  (format #t "~1Tinertial-tensor-y: (meters ~m)~%" (-> this inertial-tensor-y))
  (format #t "~1Tinertial-tensor-z: (meters ~m)~%" (-> this inertial-tensor-z))
  (format #t "~1Textra: #<rigid-body-object-extra-info @ #x~X>~%" (-> this extra))
  (format #t "~1Tmax-time-step: ~f~%" (-> this extra max-time-step))
  (format #t "~1Tgravity: (meters ~m)~%" (-> this extra gravity))
  (format #t "~1Tidle-distance: (meters ~m)~%" (-> this extra idle-distance))
  (format #t "~1Tattack-force-scale: ~f~%" (-> this extra attack-force-scale))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tobject-type: ~D~%" (-> this object-type))
  (format #t "~1Tguard-type: ~D~%" (-> this guard-type))
  (format #t "~1Tvehicle-type: ~D~%" (-> this vehicle-type))
  (format #t "~1Tengine: #<vehicle-engine-info @ #x~X>~%" (-> this engine))
  (format #t "~1Ttransmission: #<vehicle-transmission-info @ #x~X>~%" (-> this transmission))
  (format #t "~1Thandling: #<vehicle-handling-info @ #x~X>~%" (-> this handling))
  (format #t "~1Ttarget-speed-offset: (meters ~m)~%" (-> this target-speed-offset))
  (format #t "~1Tturning-accel: (meters ~m)~%" (-> this turning-accel))
  (format #t "~1Tcamera: #<vehicle-camera-info @ #x~X>~%" (-> this camera))
  (format #t "~1Tsound: #<vehicle-sound-info @ #x~X>~%" (-> this sound))
  (format #t "~1Tparticles: #<vehicle-particle-info @ #x~X>~%" (-> this particles))
  (format #t "~1Tdamage: #<vehicle-damage-info @ #x~X>~%" (-> this damage))
  (format #t "~1Tphysics-model: #<vehicle-physics-model-info @ #x~X>~%" (-> this physics-model))
  (format #t "~1Tsetup: #<vehicle-setup-info @ #x~X>~%" (-> this setup))
  (format #t "~1Trider: #<vehicle-rider-info @ #x~X>~%" (-> this rider))
  (format #t "~1Texplosion: ~A~%" (-> this explosion))
  (format #t "~1Texplosion-part: ~D~%" (-> this explosion-part))
  (format #t "~1Tdebris: ~A~%" (-> this debris))
  (format #t "~1Tname-text: ~D~%" (-> this name-text))
  (format #t "~1Tparticle-common: #<vehicle-particle-common-info @ #x~X>~%" (-> this particle-common))
  (label cfg-4)
  this
  )

;; definition of type vehicle-section
(deftype vehicle-section (structure)
  ((damage  float)
   )
  :allow-misaligned
  )

;; definition for method 3 of type vehicle-section
(defmethod inspect ((this vehicle-section))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-section)
  (format #t "~1Tdamage: ~f~%" (-> this damage))
  (label cfg-4)
  this
  )

;; definition of type vehicle
(deftype vehicle (rigid-body-object)
  ((self                      vehicle                      :override)
   (info                      rigid-body-vehicle-constants :override)
   (v-flags                   vehicle-flag                  :overlay-at flags)
   (unknown-flags             vehicle-flag                  :offset 296)
   (squad                     squad-control)
   (control-hook              (function vehicle vehicle-controls))
   (controls                  vehicle-controls              :inline)
   (prev-controls             vehicle-controls              :inline)
   (engine-power-factor       float)
   (force-scale               float)
   (target-distance2          meters)
   (water-flags               uint32)
   (target-acceleration       vector                        :inline)
   (impact-pos                vector                        :inline)
   (impact-local-pos          vector                        :inline)
   (lin-acceleration          vector                        :inline)
   (hit-points                float)
   (damage-factor             float)
   (crash-level               int8)
   (force-level               int8)
   (traffic-hash-id           int8)
   (traffic-priority-id       int8)
   (power-fluctuation-factor  float)
   (power-level               float)
   (overlap-player-counter    uint8)
   (physics-counter           uint8)
   (cam-view                  int8)
   (brake-factor              float)
   (cam-speed-interp          float)
   (camera-dist2              float)
   (player-dist2              float)
   (bound-radius              float)
   (rider-array               handle                        4)
   (impact-proc               handle)
   (impact-pat                uint32)
   (impact-time               uint32)
   (prev-impact-time          uint32)
   (sent-attack-time          uint32)
   (air-time                  uint32)
   (water-time                uint32)
   (offscreen-time            uint32)
   (crash-time                uint32)
   (turbo-boost-time          uint32)
   (player-dismount-time      uint32)
   (crash-duration            uint16)
   (turbo-boost-duration      uint16)
   (turbo-boost-factor        float)
   (crash-impulse             float)
   (water-height              float)
   (lights-factor             float)
   (outgoing-attack-id        uint32)
   (fog-fade                  float)
   (scrape-sound-id           sound-id)
   (damage-zap-sound-id       sound-id)
   (scrape-sound-envelope     float)
   (exhaust-part-accum        sparticle-launch-control      2)
   (smoke-part-accum          sparticle-launch-control      2)
   (section-array             vehicle-section               4 :inline)
   )
  (:state-methods
    inactive
    waiting
    player-control
    crash
    explode
    die
    )
  (:methods
    (vehicle-method-62 (_type_) none)
    (vehicle-method-63 (_type_) none)
    (vehicle-method-64 (_type_) none)
    (vehicle-method-65 (_type_) int)
    (vehicle-method-66 (_type_ vector int) none)
    (get-rider-in-seat (_type_ int) process)
    (find-rider (_type_) process)
    (put-rider-in-seat (_type_ int process) none)
    (vehicle-method-70 (_type_) uint)
    (get-best-seat (_type_ vector vehicle-seat-flag int) int)
    (remove-riders (_type_ handle) none)
    (vehicle-method-73 (_type_) float)
    (vehicle-method-74 (_type_ int time-frame) none)
    (vehicle-method-75 (_type_) none)
    (vehicle-method-76 (_type_) none)
    (vehicle-method-77 (_type_) none)
    (vehicle-method-78 (_type_) none)
    (vehicle-method-79 (_type_) none)
    (vehicle-method-80 (_type_) none)
    (vehicle-method-81 (_type_) none)
    (vehicle-method-82 (_type_) none)
    (vehicle-method-83 (_type_) none)
    (vehicle-method-84 (_type_) none)
    (vehicle-method-85 (_type_) none)
    (vehicle-method-86 (_type_) none)
    (vehicle-method-87 (_type_) none)
    (vehicle-method-88 (_type_ vehicle-controls) none)
    (init-reverse (_type_ vehicle-controls) none)
    (control-hook-ai (_type_ vehicle-controls) none)
    (control-hook-player (_type_) none)
    (vehicle-method-92 (_type_ vehicle-controls) none)
    (vehicle-method-93 (_type_) none)
    (vehicle-method-94 (_type_) none)
    (vehicle-method-95 (_type_ vector float) none)
    (vehicle-method-96 (_type_ float) none)
    (vehicle-method-97 (_type_ float vehicle-physics-work) none)
    (vehicle-method-98 (_type_) none)
    (vehicle-method-99 (_type_) none)
    (vehicle-method-100 (_type_) none)
    (vehicle-method-101 (_type_) none)
    (vehicle-method-102 (_type_) symbol)
    (vehicle-method-103 (_type_) none)
    (vehicle-method-104 (_type_) none)
    (vehicle-method-105 (_type_) none)
    (vehicle-method-106 (_type_) none)
    (vehicle-method-107 (_type_ int process) none)
    (vehicle-method-108 (_type_ int) none)
    (vehicle-method-109 (_type_) none)
    (vehicle-method-110 (_type_) none)
    (get-linear-accel! (_type_ vector) none)
    (copy-vehicle-controls! (_type_ vehicle-controls) none)
    (vehicle-method-113 (_type_ vector int int) none)
    (vehicle-method-114 (_type_ int) none)
    (vehicle-method-115 (_type_) none)
    (vehicle-method-116 (_type_ symbol) none)
    (vehicle-method-117 (_type_) none)
    (vehicle-method-118 (_type_) none)
    (vehicle-method-119 (_type_) none)
    (apply-gravity (_type_ float) none)
    (apply-gravity1 (_type_ float) none)
    (vehicle-method-122 (_type_) none)
    (vehicle-method-123 (_type_) none)
    (vehicle-method-124 (_type_) none)
    (vehicle-method-125 (_type_) none)
    (vehicle-method-126 (_type_) none)
    (check-player-get-on (_type_ process-focusable) symbol)
    (vehicle-method-128 (_type_) symbol)
    (vehicle-method-129 (_type_) none)
    (vehicle-method-130 (_type_) none)
    (vehicle-method-131 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-132 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-133 (_type_ traffic-object-spawn-params) none)
    (vehicle-method-134 (_type_) none)
    (vehicle-method-135 (_type_) none)
    (vehicle-method-136 (_type_) none)
    (vehicle-method-137 (_type_) none)
    (vehicle-method-138 (_type_) none)
    (vehicle-method-139 (_type_) none)
    (vehicle-method-140 (_type_) none)
    (vehicle-method-141 (_type_) symbol)
    (vehicle-method-142 (_type_) none)
    (vehicle-method-143 (_type_ process) object)
    (vehicle-method-144 (_type_) none)
    (vehicle-method-145 (_type_) none)
    (vehicle-method-146 (_type_ vector) none)
    (vehicle-method-147 (_type_) none)
    (vehicle-method-148 (_type_) none)
    (vehicle-method-149 (_type_) none)
    (vehicle-method-150 (_type_) none)
    (set-hit-points (_type_ float) none)
    )
  )

;; definition for method 3 of type vehicle
(defmethod inspect ((this vehicle))
  (when (not this)
    (set! this this)
    (goto cfg-108)
    )
  (let ((t9-0 (method-of-type rigid-body-object inspect)))
    (t9-0 this)
    )
  (format #t "~2Tflags: #x~X : (vehicle-flag " (-> this v-flags))
  (let ((s5-0 (-> this v-flags)))
    (if (= (logand (vehicle-flag lights-update) s5-0) (shl 512 32))
        (format #t "lights-update ")
        )
    (if (= (logand (vehicle-flag camera-bike-mode) s5-0) (vehicle-flag camera-bike-mode))
        (format #t "camera-bike-mode ")
        )
    (if (= (logand s5-0 (vehicle-flag dead)) (vehicle-flag dead))
        (format #t "dead ")
        )
    (if (= (logand s5-0 (vehicle-flag impact)) (vehicle-flag impact))
        (format #t "impact ")
        )
    (if (= (logand (vehicle-flag waiting-for-player) s5-0) (vehicle-flag waiting-for-player))
        (format #t "waiting-for-player ")
        )
    (if (= (logand (vehicle-flag no-hijack) s5-0) (shl 2048 32))
        (format #t "no-hijack ")
        )
    (if (= (logand (vehicle-flag turbo-boost) s5-0) (vehicle-flag turbo-boost))
        (format #t "turbo-boost ")
        )
    (if (= (logand (vehicle-flag in-pursuit) s5-0) (shl 4 32))
        (format #t "in-pursuit ")
        )
    (if (= (logand (vehicle-flag traffic-managed) s5-0) (vehicle-flag traffic-managed))
        (format #t "traffic-managed ")
        )
    (if (= (logand s5-0 (vehicle-flag damaged)) (vehicle-flag damaged))
        (format #t "damaged ")
        )
    (if (= (logand s5-0 (vehicle-flag player-contact-force)) (vehicle-flag player-contact-force))
        (format #t "player-contact-force ")
        )
    (if (= (logand (vehicle-flag camera-look-mode) s5-0) (shl 1 32))
        (format #t "camera-look-mode ")
        )
    (if (= (logand s5-0 (vehicle-flag player-grabbed)) (vehicle-flag player-grabbed))
        (format #t "player-grabbed ")
        )
    (if (= (logand (vehicle-flag flight-level-transition-ending) s5-0) (vehicle-flag flight-level-transition-ending))
        (format #t "flight-level-transition-ending ")
        )
    (if (= (logand (vehicle-flag alert) s5-0) (shl 2 32))
        (format #t "alert ")
        )
    (if (= (logand s5-0 (vehicle-flag disturbed)) (vehicle-flag disturbed))
        (format #t "disturbed ")
        )
    (if (= (logand s5-0 (vehicle-flag enable-collision)) (vehicle-flag enable-collision))
        (format #t "enable-collision ")
        )
    (if (= (logand s5-0 (vehicle-flag player-edge-grabbing)) (vehicle-flag player-edge-grabbing))
        (format #t "player-edge-grabbing ")
        )
    (if (= (logand (vehicle-flag lights-on) s5-0) (shl 256 32))
        (format #t "lights-on ")
        )
    (if (= (logand (vehicle-flag reverse-gear) s5-0) (vehicle-flag reverse-gear))
        (format #t "reverse-gear ")
        )
    (if (= (logand (vehicle-flag net-player-driving) s5-0) (vehicle-flag net-player-driving))
        (format #t "net-player-driving ")
        )
    (if (= (logand (vehicle-flag ai-driving) s5-0) (vehicle-flag ai-driving))
        (format #t "ai-driving ")
        )
    (if (= (logand s5-0 (vehicle-flag persistent)) (vehicle-flag persistent))
        (format #t "persistent ")
        )
    (if (= (logand s5-0 (vehicle-flag riding)) (vehicle-flag riding))
        (format #t "riding ")
        )
    (if (= (logand s5-0 (vehicle-flag on-flight-level)) (vehicle-flag on-flight-level))
        (format #t "on-flight-level ")
        )
    (if (= (logand (vehicle-flag nav-spheres) s5-0) (vehicle-flag nav-spheres))
        (format #t "nav-spheres ")
        )
    (if (= (logand (vehicle-flag particles) s5-0) (shl 64 32))
        (format #t "particles ")
        )
    (if (= (logand (vehicle-flag player-driving) s5-0) (vehicle-flag player-driving))
        (format #t "player-driving ")
        )
    (if (= (logand (vehicle-flag camera-rapid-tracking-mode) s5-0) (vehicle-flag camera-rapid-tracking-mode))
        (format #t "camera-rapid-tracking-mode ")
        )
    (if (= (logand (vehicle-flag ignore-damage) s5-0) (shl #x10000 32))
        (format #t "ignore-damage ")
        )
    (if (= (logand (vehicle-flag ignition) s5-0) (vehicle-flag ignition))
        (format #t "ignition ")
        )
    (if (= (logand (vehicle-flag ignore-impulse) s5-0) (shl #x20000 32))
        (format #t "ignore-impulse ")
        )
    (if (= (logand (vehicle-flag tracking-mode) s5-0) (shl 8192 32))
        (format #t "tracking-mode ")
        )
    (if (= (logand s5-0 (vehicle-flag on-ground)) (vehicle-flag on-ground))
        (format #t "on-ground ")
        )
    (if (= (logand (vehicle-flag flight-level-transition) s5-0) (vehicle-flag flight-level-transition))
        (format #t "flight-level-transition ")
        )
    (if (= (logand (vehicle-flag sounds) s5-0) (shl 32 32))
        (format #t "sounds ")
        )
    (if (= (logand (vehicle-flag joints) s5-0) (shl 128 32))
        (format #t "joints ")
        )
    (if (= (logand (vehicle-flag lights-dead) s5-0) (shl 1024 32))
        (format #t "lights-dead ")
        )
    (if (= (logand s5-0 (vehicle-flag player-touching)) (vehicle-flag player-touching))
        (format #t "player-touching ")
        )
    (if (= (logand (vehicle-flag target-in-sight) s5-0) (shl 8 32))
        (format #t "target-in-sight ")
        )
    (if (= (logand s5-0 (vehicle-flag in-air)) (vehicle-flag in-air))
        (format #t "in-air ")
        )
    (if (= (logand (vehicle-flag player-killed) s5-0) (shl #x40000 32))
        (format #t "player-killed ")
        )
    (if (= (logand (vehicle-flag player-dismounting) s5-0) (vehicle-flag player-dismounting))
        (format #t "player-dismounting ")
        )
    (if (= (logand (vehicle-flag draw-marks) s5-0) (shl #x80000 32))
        (format #t "draw-marks ")
        )
    (if (= (logand (vehicle-flag camera) s5-0) (vehicle-flag camera))
        (format #t "camera ")
        )
    (if (= (logand s5-0 (vehicle-flag player-standing-on)) (vehicle-flag player-standing-on))
        (format #t "player-standing-on ")
        )
    (if (= (logand (vehicle-flag overturned) s5-0) (shl #x4000 32))
        (format #t "overturned ")
        )
    (if (= (logand s5-0 (vehicle-flag player-impulse-force)) (vehicle-flag player-impulse-force))
        (format #t "player-impulse-force ")
        )
    (if (= (logand (vehicle-flag unique) s5-0) (shl 4096 32))
        (format #t "unique ")
        )
    (if (= (logand (vehicle-flag rammed-target) s5-0) (shl 16 32))
        (format #t "rammed-target ")
        )
    (if (= (logand (vehicle-flag camera-inside-view) s5-0) (shl #x8000 16))
        (format #t "camera-inside-view ")
        )
    (if (= (logand (vehicle-flag gun-dark-2-zero-g) s5-0) (shl #x8000 32))
        (format #t "gun-dark-2-zero-g ")
        )
    )
  (format #t ")~%")
  (format #t "~2Tsquad: ~A~%" (-> this squad))
  (format #t "~2Tcontrol-hook: ~A~%" (-> this control-hook))
  (format #t "~2Tcontrols: #<vehicle-controls @ #x~X>~%" (-> this controls))
  (format #t "~2Tprev-controls: #<vehicle-controls @ #x~X>~%" (-> this prev-controls))
  (format #t "~2Tengine-power-factor: ~f~%" (-> this engine-power-factor))
  (format #t "~2Tforce-scale: ~f~%" (-> this force-scale))
  (format #t "~2Ttarget-distance2: (meters ~m)~%" (-> this target-distance2))
  (format #t "~2Twater-flags: ~D~%" (-> this water-flags))
  (format #t "~2Ttarget-acceleration: #<vector @ #x~X>~%" (-> this target-acceleration))
  (format #t "~2Timpact-pos: #<vector @ #x~X>~%" (-> this impact-pos))
  (format #t "~2Timpact-local-pos: #<vector @ #x~X>~%" (-> this impact-local-pos))
  (format #t "~2Tlin-acceleration: #<vector @ #x~X>~%" (-> this lin-acceleration))
  (format #t "~2Thit-points: ~f~%" (-> this hit-points))
  (format #t "~2Tdamage-factor: ~f~%" (-> this damage-factor))
  (format #t "~2Tcrash-level: ~D~%" (-> this crash-level))
  (format #t "~2Tforce-level: ~D~%" (-> this force-level))
  (format #t "~2Ttraffic-hash-id: ~D~%" (-> this traffic-hash-id))
  (format #t "~2Ttraffic-priority-id: ~D~%" (-> this traffic-priority-id))
  (format #t "~2Tpower-fluctuation-factor: ~f~%" (-> this power-fluctuation-factor))
  (format #t "~2Tpower-level: ~f~%" (-> this power-level))
  (format #t "~2Toverlap-player-counter: ~D~%" (-> this overlap-player-counter))
  (format #t "~2Tphysics-counter: ~D~%" (-> this physics-counter))
  (format #t "~2Tcam-view: ~D~%" (-> this cam-view))
  (format #t "~2Tbrake-factor: ~f~%" (-> this brake-factor))
  (format #t "~2Tcam-speed-interp: ~f~%" (-> this cam-speed-interp))
  (format #t "~2Tcamera-dist2: ~f~%" (-> this camera-dist2))
  (format #t "~2Tplayer-dist2: ~f~%" (-> this player-dist2))
  (format #t "~2Tbound-radius: ~f~%" (-> this bound-radius))
  (format #t "~2Trider-array[4] @ #x~X~%" (-> this rider-array))
  (format #t "~2Timpact-proc: ~D~%" (-> this impact-proc))
  (format #t "~2Timpact-pat: ~D~%" (-> this impact-pat))
  (format #t "~2Timpact-time: ~D~%" (-> this impact-time))
  (format #t "~2Tprev-impact-time: ~D~%" (-> this prev-impact-time))
  (format #t "~2Tsent-attack-time: ~D~%" (-> this sent-attack-time))
  (format #t "~2Tair-time: ~D~%" (-> this air-time))
  (format #t "~2Twater-time: ~D~%" (-> this water-time))
  (format #t "~2Toffscreen-time: ~D~%" (-> this offscreen-time))
  (format #t "~2Tcrash-time: ~D~%" (-> this crash-time))
  (format #t "~2Tturbo-boost-time: ~D~%" (-> this turbo-boost-time))
  (format #t "~2Tplayer-dismount-time: ~D~%" (-> this player-dismount-time))
  (format #t "~2Tcrash-duration: ~D~%" (-> this crash-duration))
  (format #t "~2Tturbo-boost-duration: ~D~%" (-> this turbo-boost-duration))
  (format #t "~2Tturbo-boost-factor: ~f~%" (-> this turbo-boost-factor))
  (format #t "~2Tcrash-impulse: ~f~%" (-> this crash-impulse))
  (format #t "~2Twater-height: ~f~%" (-> this water-height))
  (format #t "~2Tlights-factor: ~f~%" (-> this lights-factor))
  (format #t "~2Toutgoing-attack-id: ~D~%" (-> this outgoing-attack-id))
  (format #t "~2Tfog-fade: ~f~%" (-> this fog-fade))
  (format #t "~2Tscrape-sound-id: ~D~%" (-> this scrape-sound-id))
  (format #t "~2Tdamage-zap-sound-id: ~D~%" (-> this damage-zap-sound-id))
  (format #t "~2Tscrape-sound-envelope: ~f~%" (-> this scrape-sound-envelope))
  (format #t "~2Texhaust-part-accum[2] @ #x~X~%" (-> this exhaust-part-accum))
  (format #t "~2Tsmoke-part-accum[2] @ #x~X~%" (-> this smoke-part-accum))
  (format #t "~2Tsection-array[4] @ #x~X~%" (-> this section-array))
  (label cfg-108)
  this
  )

;; definition of type vehicle-probe-work
(deftype vehicle-probe-work (structure)
  ((local-pos      vector  :inline)
   (local-normal   vector  :inline)
   (world-pos      vector  :inline)
   (world-normal   vector  :inline)
   (probe-pos      vector  :inline)
   (ground-pos     vector  :inline)
   (ground-normal  vector  :inline)
   (velocity       vector  :inline)
   (tire-force     vector  :inline)
   (wheel-axis     vector  :inline)
   )
  )

;; definition for method 3 of type vehicle-probe-work
(defmethod inspect ((this vehicle-probe-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-probe-work)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tlocal-normal: #<vector @ #x~X>~%" (-> this local-normal))
  (format #t "~1Tworld-pos: #<vector @ #x~X>~%" (-> this world-pos))
  (format #t "~1Tworld-normal: #<vector @ #x~X>~%" (-> this world-normal))
  (format #t "~1Tprobe-pos: #<vector @ #x~X>~%" (-> this probe-pos))
  (format #t "~1Tground-pos: #<vector @ #x~X>~%" (-> this ground-pos))
  (format #t "~1Tground-normal: #<vector @ #x~X>~%" (-> this ground-normal))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Ttire-force: #<vector @ #x~X>~%" (-> this tire-force))
  (format #t "~1Twheel-axis: #<vector @ #x~X>~%" (-> this wheel-axis))
  (label cfg-4)
  this
  )

;; definition of type vehicle-physics-work
(deftype vehicle-physics-work (structure)
  ((mat               matrix              :inline)
   (force             vector              :inline)
   (velocity          vector              :inline)
   (world-pos         vector              :inline)
   (world-normal      vector              :inline)
   (local-pos         vector              :inline)
   (steering-axis     vector              :inline)
   (lift-dir          vector              :inline)
   (normal            vector              :inline)
   (tmp               vector              :inline)
   (p-body            vector              :inline)
   (axis              vector              :inline)
   (dir               vector              :inline)
   (ground-normal     vector              :inline)
   (impulse           float)
   (vel-dot-norm      float)
   (friction-coef     float)
   (speed-factor      float)
   (probe-work-array  vehicle-probe-work  4 :inline)
   )
  )

;; definition for method 3 of type vehicle-physics-work
(defmethod inspect ((this vehicle-physics-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-physics-work)
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (format #t "~1Tforce: #<vector @ #x~X>~%" (-> this force))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Tworld-pos: #<vector @ #x~X>~%" (-> this world-pos))
  (format #t "~1Tworld-normal: #<vector @ #x~X>~%" (-> this world-normal))
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tsteering-axis: #<vector @ #x~X>~%" (-> this steering-axis))
  (format #t "~1Tlift-dir: #<vector @ #x~X>~%" (-> this lift-dir))
  (format #t "~1Tnormal: #<vector @ #x~X>~%" (-> this normal))
  (format #t "~1Ttmp: #<vector @ #x~X>~%" (-> this tmp))
  (format #t "~1Tp-body: #<vector @ #x~X>~%" (-> this p-body))
  (format #t "~1Taxis: #<vector @ #x~X>~%" (-> this axis))
  (format #t "~1Tdir: #<vector @ #x~X>~%" (-> this dir))
  (format #t "~1Tground-normal: #<vector @ #x~X>~%" (-> this ground-normal))
  (format #t "~1Timpulse: ~f~%" (-> this impulse))
  (format #t "~1Tvel-dot-norm: ~f~%" (-> this vel-dot-norm))
  (format #t "~1Tfriction-coef: ~f~%" (-> this friction-coef))
  (format #t "~1Tspeed-factor: ~f~%" (-> this speed-factor))
  (format #t "~1Tprobe-work-array[4] @ #x~X~%" (-> this probe-work-array))
  (label cfg-4)
  this
  )

;; definition of type vehicle-draw-thruster-params
(deftype vehicle-draw-thruster-params (structure)
  ((quat      quaternion  :inline)
   (trans     vector      :inline)
   (thrust    float)
   (width     float)
   (length    float)
   (fog-fade  float)
   )
  )

;; definition for method 3 of type vehicle-draw-thruster-params
(defmethod inspect ((this vehicle-draw-thruster-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-draw-thruster-params)
  (format #t "~1Tquat: #<quaternion @ #x~X>~%" (-> this quat))
  (format #t "~1Ttrans: #<vector @ #x~X>~%" (-> this trans))
  (format #t "~1Tthrust: ~f~%" (-> this thrust))
  (format #t "~1Twidth: ~f~%" (-> this width))
  (format #t "~1Tlength: ~f~%" (-> this length))
  (format #t "~1Tfog-fade: ~f~%" (-> this fog-fade))
  (label cfg-4)
  this
  )

;; definition for function meters-per-sec->mph
(defun meters-per-sec->mph ((arg0 float))
  (* 0.00031568037 arg0)
  )

;; definition of type debug-vehicle-work
(deftype debug-vehicle-work (basic)
  ((impact-time   time-frame)
   (impact        rigid-body-impact  :inline)
   (prim-sphere1  sphere             :inline)
   (prim-sphere2  sphere             :inline)
   )
  )

;; failed to figure out what this is:
0
