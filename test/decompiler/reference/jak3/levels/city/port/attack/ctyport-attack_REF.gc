;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *ctyport-attack-speech-list*, type (inline-array talker-speech-class)
(define *ctyport-attack-speech-list* (new 'static 'inline-array talker-speech-class 49
                                       (new 'static 'talker-speech-class :name "none")
                                       (new 'static 'talker-speech-class
                                         :name "torn208"
                                         :channel (gui-channel voicebox)
                                         :flags (talker-flags tf0)
                                         :speech #x1
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn209"
                                         :channel (gui-channel voicebox)
                                         :flags (talker-flags tf0)
                                         :speech #x2
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn210"
                                         :channel (gui-channel voicebox)
                                         :flags (talker-flags tf0)
                                         :speech #x3
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn211"
                                         :channel (gui-channel voicebox)
                                         :flags (talker-flags tf0)
                                         :speech #x4
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn212"
                                         :channel (gui-channel voicebox)
                                         :speech #x5
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn213"
                                         :channel (gui-channel voicebox)
                                         :speech #x6
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn214"
                                         :channel (gui-channel voicebox)
                                         :speech #x7
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn215"
                                         :channel (gui-channel voicebox)
                                         :speech #x8
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn216"
                                         :channel (gui-channel voicebox)
                                         :speech #x9
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn217"
                                         :channel (gui-channel voicebox)
                                         :speech #xa
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn218"
                                         :channel (gui-channel voicebox)
                                         :speech #xb
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn219"
                                         :channel (gui-channel voicebox)
                                         :speech #xc
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn220"
                                         :channel (gui-channel voicebox)
                                         :flags (talker-flags tf0)
                                         :speech #xd
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn221"
                                         :channel (gui-channel voicebox)
                                         :flags (talker-flags tf0)
                                         :speech #xe
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn222"
                                         :channel (gui-channel voicebox)
                                         :speech #xf
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn223"
                                         :channel (gui-channel voicebox)
                                         :speech #x10
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn224"
                                         :channel (gui-channel voicebox)
                                         :speech #x11
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn225"
                                         :channel (gui-channel voicebox)
                                         :speech #x12
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "torn226"
                                         :channel (gui-channel voicebox)
                                         :speech #x13
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax552"
                                         :channel (gui-channel daxter)
                                         :speech #x14
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax553"
                                         :channel (gui-channel daxter)
                                         :speech #x15
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax554"
                                         :channel (gui-channel daxter)
                                         :speech #x16
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax555"
                                         :channel (gui-channel daxter)
                                         :speech #x17
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax556"
                                         :channel (gui-channel daxter)
                                         :speech #x18
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax557"
                                         :channel (gui-channel daxter)
                                         :speech #x19
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax558"
                                         :channel (gui-channel daxter)
                                         :speech #x1a
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax559"
                                         :channel (gui-channel daxter)
                                         :speech #x1b
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax560"
                                         :channel (gui-channel daxter)
                                         :speech #x1c
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax561"
                                         :channel (gui-channel daxter)
                                         :speech #x1d
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax562"
                                         :channel (gui-channel daxter)
                                         :speech #x1e
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax563"
                                         :channel (gui-channel daxter)
                                         :speech #x1f
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax564"
                                         :channel (gui-channel daxter)
                                         :speech #x20
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax565"
                                         :channel (gui-channel daxter)
                                         :speech #x21
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax566"
                                         :channel (gui-channel daxter)
                                         :speech #x22
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax567"
                                         :channel (gui-channel daxter)
                                         :speech #x23
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax568"
                                         :channel (gui-channel daxter)
                                         :speech #x24
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax569"
                                         :channel (gui-channel daxter)
                                         :speech #x25
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax570"
                                         :channel (gui-channel daxter)
                                         :speech #x26
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax571"
                                         :channel (gui-channel daxter)
                                         :speech #x27
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax572"
                                         :channel (gui-channel daxter)
                                         :speech #x28
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax573"
                                         :channel (gui-channel daxter)
                                         :speech #x29
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax574"
                                         :channel (gui-channel daxter)
                                         :speech #x2a
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax575"
                                         :channel (gui-channel daxter)
                                         :speech #x2b
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax576"
                                         :channel (gui-channel daxter)
                                         :speech #x2c
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax577"
                                         :channel (gui-channel daxter)
                                         :speech #x2d
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax578"
                                         :channel (gui-channel daxter)
                                         :speech #x2e
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "dax579"
                                         :channel (gui-channel daxter)
                                         :speech #x2f
                                         :neg #x1
                                         :on-close #f
                                         :camera #f
                                         )
                                       (new 'static 'talker-speech-class
                                         :name "port-attack-jump-hint"
                                         :channel (gui-channel message)
                                         :flags (talker-flags tf0)
                                         :speech #x30
                                         :text-duration (seconds 3)
                                         :neg #x1
                                         :text-message (text-id text-0408)
                                         :on-close #f
                                         :camera #f
                                         )
                                       )
        )

;; definition of type port-attack-speech-instance
(deftype port-attack-speech-instance (speech-instance)
  ()
  )

;; definition for method 3 of type port-attack-speech-instance
(defmethod inspect ((this port-attack-speech-instance))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'port-attack-speech-instance)
  (format #t "~1Tspeech: ~D~%" (-> this speech))
  (format #t "~1Tnum-play-times: ~D~%" (-> this num-play-times))
  (format #t "~1Tprobability: ~f~%" (-> this probability))
  (label cfg-4)
  this
  )

;; definition for symbol *port-attack-speech*, type (array speech-info)
(define *port-attack-speech*
  (new 'static 'boxed-array :type speech-info
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x1 :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x2 :probability 1.0))
      :flags (speech-info-flag si0 si3)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #xe :probability 1.0)
        (new 'static 'speech-instance :speech #xd :probability 1.0)
        )
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x3 :probability 1.0)
        (new 'static 'speech-instance :speech #x16 :probability 1.0)
        )
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x4 :probability 1.0)
        (new 'static 'speech-instance :speech #x18 :probability 1.0)
        )
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x5 :probability 1.0)
        (new 'static 'speech-instance :speech #xf :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x7 :probability 1.0))
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x6 :probability 1.0)
        (new 'static 'speech-instance :speech #x17 :probability 1.0)
        )
      :flags (speech-info-flag si0)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x11 :probability 1.0))
      :flags (speech-info-flag si0 si4)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x9 :probability 1.0)
        (new 'static 'speech-instance :speech #xa :probability 1.0)
        (new 'static 'speech-instance :speech #x10 :probability 1.0)
        (new 'static 'speech-instance :speech #x13 :probability 1.0)
        (new 'static 'speech-instance :speech #x15 :probability 1.0)
        (new 'static 'speech-instance :speech #x2d :probability 1.0)
        )
      :flags (speech-info-flag si4)
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x1b :probability 1.0)
        (new 'static 'speech-instance :speech #x1c :probability 1.0)
        (new 'static 'speech-instance :speech #x1e :probability 1.0)
        (new 'static 'speech-instance :speech #x24 :probability 1.0)
        (new 'static 'speech-instance :speech #x25 :probability 1.0)
        (new 'static 'speech-instance :speech #x26 :probability 1.0)
        (new 'static 'speech-instance :speech #x2a :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x1f :probability 1.0)
        (new 'static 'speech-instance :speech #x20 :probability 1.0)
        (new 'static 'speech-instance :speech #x22 :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x27 :probability 1.0)
        (new 'static 'speech-instance :speech #x2b :probability 1.0)
        (new 'static 'speech-instance :speech #x28 :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x30 :probability 1.0))
      )
    )
  )

;; failed to figure out what this is:
(defpartgroup group-nuke-fuel
  :id 530
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 100)
  :parts ((sp-item 2082 :flags (sp7))
    (sp-item 2083 :flags (sp7))
    (sp-item 2084 :flags (sp7))
    (sp-item 2085 :flags (sp7))
    (sp-item 2086 :flags (sp3) :binding 2078)
    (sp-item 2078 :flags (sp2) :binding 2079)
    (sp-item 2086 :flags (sp3) :binding 2080)
    (sp-item 2080 :flags (sp2) :binding 2079)
    (sp-item 2086 :flags (sp3) :binding 2081)
    (sp-item 2081 :flags (sp2) :binding 2079)
    (sp-item 2079 :flags (sp2))
    (sp-item 2079 :flags (sp2))
    (sp-item 2079 :flags (sp2))
    )
  )

;; failed to figure out what this is:
(defpart 2082
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 40.0 20.0)
    (:b 0.0)
    (:a 60.0 2.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 2083
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 30.0)
    (:b 0.0)
    (:a 30.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 2084
  :init-specs ((:texture (shockwave level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 9))
    (:rot-x (degrees 22.5))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 30.0)
    (:b 0.0)
    (:a 30.0)
    (:omega (degrees 4511.25))
    (:timer (seconds 0.017))
    (:flags (glow))
    (:userdata 409.6)
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 2086
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 80.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 90))
    )
  )

;; failed to figure out what this is:
(defpart 2078
  :init-specs ((:texture (middot level-default-sprite))
    (:num 0.016)
    (:y (meters 2))
    (:z (meters 4))
    (:scale-x (meters 0.4))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 80.0)
    (:a 128.0)
    (:omega (degrees 0))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds 1))
    (:flags (ready-to-launch))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2080
  :init-specs ((:texture (middot level-default-sprite))
    (:num 0.016)
    (:y (meters -2))
    (:z (meters 4))
    (:scale-x (meters 0.4))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 80.0)
    (:a 128.0)
    (:omega (degrees 45))
    (:vel-x (meters -0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds 1))
    (:flags (ready-to-launch))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2081
  :init-specs ((:texture (middot level-default-sprite))
    (:num 0.016)
    (:z (meters 4))
    (:scale-x (meters 0.4))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 80.0)
    (:a 128.0)
    (:omega (degrees 90))
    (:vel-x (meters 0.053333335))
    (:vel-y (meters 0))
    (:timer (seconds 1))
    (:flags (ready-to-launch))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2079
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.4))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 0.0)
    (:a 128.0)
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -1.0)
    (:fade-a -1.28)
    (:timer (seconds 0.335))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 2085
  :init-specs ((:texture (light-burst level-default-sprite))
    (:num 0.06 0.06)
    (:scale-x (meters 4) (meters 6.5))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y (meters 0.3) (meters 0.3))
    (:r 128.0)
    (:g 80.0)
    (:b 0.0)
    (:a 0.0)
    (:scalevel-x (meters -0.0033333334) (meters 0.0033333334))
    (:scalevel-y (meters 0) (meters 0.00033333333))
    (:fade-a 0.42666668)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-3 left-multiply-quat))
    (:next-time (seconds 1))
    (:next-launcher 2087)
    )
  )

;; failed to figure out what this is:
(defpart 2087
  :init-specs ((:scalevel-y (meters -0.0013333333) (meters 0.002)) (:fade-a -0.42666668))
  )

;; failed to figure out what this is:
(defpartgroup group-fuel-pickup-pop
  :id 531
  :duration (seconds 2)
  :linger-duration (seconds 2)
  :flags (sp0 sp4 sp12)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2090 :period (seconds 2) :length (seconds 0.017))
    (sp-item 2091 :period (seconds 2) :length (seconds 0.017) :binding 2088)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2088 :flags (sp2) :binding 2089)
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    (sp-item 2089 :flags (sp2))
    )
  )

;; failed to figure out what this is:
(defpart 2090
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 64.0)
    (:a 128.0)
    (:scalevel-x (meters 0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-3))
    (:func 'spt-func-relative-pos)
    (:next-time (seconds 0.05))
    (:next-launcher 2092)
    )
  )

;; failed to figure out what this is:
(defpart 2092
  :init-specs ((:scalevel-x (meters -0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -3.6571429)
    (:fade-g -1.8285714)
    (:fade-b -1.8285714)
    )
  )

;; failed to figure out what this is:
(defpart 2091
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.001))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 64.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:func 'spt-func-relative-pos)
    )
  )

;; failed to figure out what this is:
(defpart 2088
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 16.0)
    (:y (meters -4) (meters 16))
    (:scale-x (meters 1.3))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 0.0)
    (:a 255.0)
    (:omega (degrees 0) (degrees 360))
    (:vel-x (meters -0.017777778) 1 (meters 0.035555556))
    (:vel-z (meters 0.08))
    (:scalevel-x (meters -0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:accel-z (meters -0.0053333333))
    (:timer (seconds 0.467))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 ready-to-launch))
    (:func 'spt-func-relative-pos)
    )
  )

;; failed to figure out what this is:
(defpart 2089
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0)
    (:y (meters -0.05))
    (:scale-x (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 0.0)
    (:a 128.0)
    (:scalevel-x (meters -0.002))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.13333334 -0.13333334)
    (:accel-y (meters -0.00066666666))
    (:friction 0.6 0.3)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'spt-func-relative-pos)
    )
  )

;; definition (perm) for symbol *port-attack-dead-pool*, type dead-pool
(define-perm *port-attack-dead-pool* dead-pool #f)

;; definition of type ctyport-mine-layout
(deftype ctyport-mine-layout (structure)
  ((mine-type            mine-type)
   (num-mines            int8)
   (inout?               symbol)
   (spin?                symbol)
   (active?              symbol)
   (checked-this-frame?  symbol)
   (origin               vector  :inline)
   (secondary-pos        vector  :inline)
   (initial-angle        float)
   (spacing              float)
   (spinrate             float)
   (period               float)
   (offset               float)
   (stored-handles       (pointer handle))
   )
  )

;; definition for method 3 of type ctyport-mine-layout
(defmethod inspect ((this ctyport-mine-layout))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ctyport-mine-layout)
  (format #t "~1Tmine-type: ~D~%" (-> this mine-type))
  (format #t "~1Tnum-mines: ~D~%" (-> this num-mines))
  (format #t "~1Tinout?: ~A~%" (-> this inout?))
  (format #t "~1Tspin?: ~A~%" (-> this spin?))
  (format #t "~1Tactive?: ~A~%" (-> this active?))
  (format #t "~1Tchecked-this-frame?: ~A~%" (-> this checked-this-frame?))
  (format #t "~1Torigin: #<vector @ #x~X>~%" (-> this origin))
  (format #t "~1Tsecondary-pos: #<vector @ #x~X>~%" (-> this secondary-pos))
  (format #t "~1Tinitial-angle: ~f~%" (-> this initial-angle))
  (format #t "~1Tspacing: ~f~%" (-> this spacing))
  (format #t "~1Tspinrate: ~f~%" (-> this spinrate))
  (format #t "~1Tperiod: ~f~%" (-> this period))
  (format #t "~1Toffset: ~f~%" (-> this offset))
  (format #t "~1Tstored-handles: #x~X~%" (-> this stored-handles))
  (label cfg-4)
  this
  )

;; definition of type ctyport-attack-package-info
(deftype ctyport-attack-package-info (structure)
  ((pos        vector  :inline)
   (locked?    symbol)
   (on-water?  symbol)
   (probe?     symbol)
   )
  )

;; definition for method 3 of type ctyport-attack-package-info
(defmethod inspect ((this ctyport-attack-package-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'ctyport-attack-package-info)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tlocked?: ~A~%" (-> this locked?))
  (format #t "~1Ton-water?: ~A~%" (-> this on-water?))
  (format #t "~1Tprobe?: ~A~%" (-> this probe?))
  (label cfg-4)
  this
  )

;; definition of type ctyport-attack-hud
(deftype ctyport-attack-hud (hud)
  ((pos-tt      float)
   (tt-current  float)
   (tt-prev     float)
   (tt-next     float)
   (spike-time  time-frame)
   )
  )

;; definition for method 3 of type ctyport-attack-hud
(defmethod inspect ((this ctyport-attack-hud))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (format #t "~2Tpos-tt: ~f~%" (-> this pos-tt))
  (format #t "~2Ttt-current: ~f~%" (-> this tt-current))
  (format #t "~2Ttt-prev: ~f~%" (-> this tt-prev))
  (format #t "~2Ttt-next: ~f~%" (-> this tt-next))
  (format #t "~2Tspike-time: ~D~%" (-> this spike-time))
  (label cfg-4)
  this
  )

;; definition of type ctyport-attack-manager
(deftype ctyport-attack-manager (task-manager)
  ((active-torpedo            handle)
   (inactive-mine-list        handle-array)
   (mine-clock                time-frame)
   (current-package-index     int16)
   (rod-of-god                handle)
   (wall-h                    handle)
   (passed-cutscene-trigger?  symbol)
   (finish-type               (array type))
   (mine-layout               (array ctyport-mine-layout))
   (package-positions         (array ctyport-attack-package-info))
   (h-hud                     handle)
   )
  (:state-methods
    pickup-nukes
    head-to-wall
    undefined0
    watch-approach
    nuke-wall
    wait-for-cleanup
    start-mission
    get-on-nuke
    exit-naughty-ottsel
    play-get-on-movie
    )
  (:methods
    (ctyport-attack-manager-method-42 (_type_ ctyport-mine-layout) symbol)
    (ctyport-attack-manager-method-43 (_type_ ctyport-mine-layout) symbol)
    (ctyport-attack-manager-method-44 (_type_ ctyport-mine-layout) symbol)
    (ctyport-attack-manager-method-45 (_type_) handle)
    (ctyport-attack-manager-method-46 (_type_) float)
    (hit-cutscene-trigger? (_type_) symbol)
    (ctyport-attack-manager-method-48 (_type_ int) object)
    (ctyport-attack-manager-method-49 (_type_) int)
    (play-speech (_type_ int) int)
    (ctyport-attack-manager-method-51 (_type_ traffic-object-spawn-params) object)
    )
  )

;; definition for method 3 of type ctyport-attack-manager
(defmethod inspect ((this ctyport-attack-manager))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tactive-torpedo: ~D~%" (-> this active-torpedo))
  (format #t "~2Tinactive-mine-list: ~A~%" (-> this inactive-mine-list))
  (format #t "~2Tmine-clock: ~D~%" (-> this mine-clock))
  (format #t "~2Tcurrent-package-index: ~D~%" (-> this current-package-index))
  (format #t "~2Trod-of-god: ~D~%" (-> this rod-of-god))
  (format #t "~2Twall-h: ~D~%" (-> this wall-h))
  (format #t "~2Tpassed-cutscene-trigger?: ~A~%" (-> this passed-cutscene-trigger?))
  (format #t "~2Tfinish-type: ~A~%" (-> this finish-type))
  (format #t "~2Tmine-layout: ~A~%" (-> this mine-layout))
  (format #t "~2Tpackage-positions: ~A~%" (-> this package-positions))
  (format #t "~2Th-hud: ~D~%" (-> this h-hud))
  (label cfg-4)
  this
  )

;; definition for function ctyport-attack-manager-event-handler
(defbehavior ctyport-attack-manager-event-handler ctyport-attack-manager ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (taskman-event-handler self arg0 arg1 arg2 arg3)
  )

;; definition of type ctyport-mine
(deftype ctyport-mine (process-drawable)
  ((root            collide-shape :override)
   (bob-scalar      float)
   (last-play-time  time-frame)
   )
  (:state-methods
    hidden
    idle
    menacing
    )
  (:methods
    (update (_type_ float) float)
    )
  )

;; definition for method 3 of type ctyport-mine
(defmethod inspect ((this ctyport-mine))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tbob-scalar: ~f~%" (-> this bob-scalar))
  (format #t "~2Tlast-play-time: ~D~%" (-> this last-play-time))
  (label cfg-4)
  this
  )

;; definition for function classify-mine-layout
(defun classify-mine-layout ()
  (math-camera-matrix)
  1
  )

;; definition for symbol *recorded-pos*, type (inline-array vector)
(define *recorded-pos* (new 'static 'inline-array vector 100
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         (new 'static 'vector)
                         )
        )

;; definition for symbol *recorded-length*, type int
(define *recorded-length* 0)

;; definition for function record-pos
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun record-pos ()
  (when (cpad-pressed? 0 r1)
    (set! (-> *recorded-pos* *recorded-length* quad) (-> (target-pos 0) quad))
    (set! *recorded-length* (+ *recorded-length* 1))
    )
  (none)
  )

;; definition for function print-record-pos
;; WARN: Return type mismatch symbol vs none.
(defun print-record-pos ()
  (dotimes (gp-0 *recorded-length*)
    (format 0 "~m ~m ~m~%" (-> *recorded-pos* gp-0 x) (-> *recorded-pos* gp-0 y) (-> *recorded-pos* gp-0 z))
    )
  (none)
  )

;; definition for symbol *ctyport-mine-positions*, type (array ctyport-mine-layout)
(define *ctyport-mine-positions*
  (new 'static 'boxed-array :type ctyport-mine-layout
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -466699.88 :z 7545836.5)
      :initial-angle 24576.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 5
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -384163.84 :z 7424286.5)
      :initial-angle 24576.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -229376.0 :z 7364608.0)
      :initial-angle 24576.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -98304.0 :z 6156288.0)
      :initial-angle 8192.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1515520.0 :z 6443008.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1515520.0 :z 6299648.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1024000.0 :z 6410240.0)
      :initial-angle 16384.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -184320.0 :z 6348800.0)
      :initial-angle 30037.334
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 3
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 348160.0 :z 5816320.0)
      :initial-angle 18204.445
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 4
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 6
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 688128.0 :z 5763072.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 7
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1560576.0 :z 5939200.0)
      :initial-angle 57344.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 8
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 4
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1478656.0 :z 5840896.0)
      :initial-angle 8192.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 4
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 4
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1372160.0 :z 6758400.0)
      :initial-angle 16384.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 4
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 2060288.0 :z 6434816.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1937408.0 :z 6361088.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1880064.0 :z 6512640.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1085440.0 :z 7430144.0)
      :initial-angle 49152.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1355776.0 :z 7655424.0)
      :initial-angle 49152.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    )
  )

;; definition for symbol *ctyport-package-positions*, type (array ctyport-attack-package-info)
(define *ctyport-package-positions* (new 'static 'boxed-array :type ctyport-attack-package-info
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 176601.5 :y 9759.949 :z 5997813.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 794268.06 :y 11748.967 :z 6622295.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1978120.6 :y 45374.258 :z 6765555.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 2511750.0 :y 43253.76 :z 6474803.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 2282202.8 :y 51744.77 :z 5972653.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1543227.0 :y 43601.92 :z 5386458.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1016602.6 :y 3454.5664 :z 5883377.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 394521.0 :y 43427.02 :z 7135567.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 535983.3 :y 12885.606 :z 7634002.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1529036.0 :y 11782.144 :z 7476193.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1898319.9 :y 44371.56 :z 6786346.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1798895.6 :y 43897.242 :z 5534053.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 680631.94 :y 11468.8 :z 5853921.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x -29300.326 :y 11419.238 :z 5714965.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x -724783.1 :y 66355.2 :z 5979098.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x -660525.06 :y 11522.867 :z 6854534.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 397337.4 :y 43441.355 :z 7084683.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 911933.44 :y 82042.88 :z 7137771.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1371545.6 :y 43990.63 :z 6956851.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1733304.4 :y 17202.791 :z 6412861.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1415546.9 :y 11537.613 :z 5855169.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #t
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 836484.3 :y 43537.613 :z 5581822.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x -100679.27 :y 10898.228 :z 5999107.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x -220959.55 :y 7761.1006 :z 7171646.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 766397.25 :y 11571.2 :z 7237588.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 1560256.9 :y 11873.895 :z 6397272.5 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      (new 'static 'ctyport-attack-package-info
                                        :pos (new 'static 'vector :x 2526945.2 :y 43130.88 :z 5991219.0 :w 1.0)
                                        :locked? #t
                                        :on-water? #f
                                        :probe? #f
                                        )
                                      )
        )

;; definition for symbol *ctyport-barrier-pos*, type vector
(define *ctyport-barrier-pos* (new 'static 'vector :x 3039846.5 :y 17735.68 :z 5309112.5 :w 1.0))

;; definition for function get-ctyport-attack-death-count
(defun get-ctyport-attack-death-count ()
  (let* ((gp-0 #t)
         (v1-0 (cond
                 ((task-node-closed? (game-task-node city-port-attack-mission))
                  129
                  )
                 ((not (task-node-closed? (game-task-node city-port-attack-mission)))
                  128
                  )
                 (else
                   (set! gp-0 #f)
                   128
                   )
                 )
               )
         (v0-2 0)
         )
    (if gp-0
        (set! v0-2 (the-as int (-> *game-info* sub-task-list v1-0 death-count)))
        )
    v0-2
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-ctyport-mine cty-port-mine cty-port-mine-lod0-jg cty-port-mine-idle-ja
              ((cty-port-mine-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 12.5)
              )

;; definition for function ctyport-mine-init-by-other
(defbehavior ctyport-mine-init-by-other ctyport-mine ()
  (stack-size-set! (-> self main-thread) 32)
  (let ((gp-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> gp-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> gp-0 reaction) cshape-reaction-default)
    (set! (-> gp-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-sphere gp-0 (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec crate))
      (set! (-> v1-8 prim-core collide-with) (collide-spec jak vehicle-sphere hit-by-others-list player-list tobot))
      (set! (-> v1-8 prim-core action) (collide-action solid deadly))
      (set! (-> v1-8 transform-index) 3)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 14745.601)
      (set! (-> gp-0 total-prims) (the-as uint 1))
      (set! (-> gp-0 root-prim) v1-8)
      )
    (set! (-> gp-0 nav-radius) (* 0.75 (-> gp-0 root-prim local-sphere w)))
    (let ((v1-11 (-> gp-0 root-prim)))
      (set! (-> gp-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> gp-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> gp-0 event-self) 'touched)
    (set! (-> self root) gp-0)
    )
  (logclear! (-> self mask) (process-mask actor-pause))
  (logior! (-> self mask) (process-mask crate))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-ctyport-mine" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set-vector! (-> self root scale) 2.0 2.0 2.0 1.0)
  (let* ((f30-0 819.2)
         (f28-0 819.2)
         (v1-26 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
         (v1-27 (the-as number (logior #x3f800000 v1-26)))
         )
    (set! (-> self bob-scalar) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-27)))))
    )
  (let* ((gp-2 quaternion-rotate-x!)
         (s5-1 (-> self root quat))
         (s4-0 (-> self root quat))
         (f30-1 2730.6667)
         (v1-33 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
         (v1-34 (the-as number (logior #x3f800000 v1-33)))
         )
    (gp-2 s5-1 s4-0 (* f30-1 (+ -1.0 (the-as float v1-34))))
    )
  (let* ((gp-3 quaternion-rotate-z!)
         (s5-2 (-> self root quat))
         (s4-1 (-> self root quat))
         (f30-2 2730.6667)
         (v1-40 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
         (v1-41 (the-as number (logior #x3f800000 v1-40)))
         )
    (gp-3 s5-2 s4-1 (* f30-2 (+ -1.0 (the-as float v1-41))))
    )
  (let* ((gp-4 quaternion-rotate-y!)
         (s5-3 (-> self root quat))
         (s4-2 (-> self root quat))
         (f30-3 65536.0)
         (v1-47 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
         (v1-48 (the-as number (logior #x3f800000 v1-47)))
         )
    (gp-4 s5-3 s4-2 (* f30-3 (+ -1.0 (the-as float v1-48))))
    )
  (set! (-> self draw lod-set lod 0 dist) 1638400.0)
  (set! (-> self draw lod-set lod 1 dist) 1638400.0)
  (go-virtual hidden)
  )

;; failed to figure out what this is:
(defstate hidden (ctyport-mine)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('activate)
       (let ((v1-1 (the-as object (-> block param 0))))
         (set! (-> self root trans quad) (-> (the-as vector v1-1) quad))
         )
       (logclear! (-> self mask) (process-mask actor-pause))
       (go-virtual idle)
       #t
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-4 (-> self root root-prim)))
      (set! (-> v1-4 prim-core collide-as) (collide-spec))
      (set! (-> v1-4 prim-core collide-with) (collide-spec))
      )
    0
    (send-event (ppointer->process (-> self parent)) 'hidden (process->handle self))
    (logior! (-> self mask) (process-mask actor-pause))
    )
  :code sleep-code
  )

;; definition for method 23 of type ctyport-mine
(defmethod update ((this ctyport-mine) (arg0 float))
  (when (>= (+ (current-time) (seconds -0.5)) (-> this last-play-time))
    (let ((f0-0 (vector-vector-xz-distance-squared (-> this root trans) (target-pos 0)))
          (f1-0 491520.0)
          )
      (if (< f0-0 (* f1-0 f1-0))
          (sound-play "port-mine-flash" :position (-> this root trans))
          )
      )
    (set-time! (-> this last-play-time))
    )
  (let* ((f0-1 (vector-length (-> this root trans)))
         (f1-3 122880.0)
         (f0-3 (/ (- f0-1 (* (the float (the int (/ f0-1 f1-3))) f1-3)) f1-3))
         (f1-4 600.0)
         )
    0.0
    (let* ((f2-6 (the float (current-time)))
           (f0-4 (+ f0-3 (/ (- f2-6 (* (the float (the int (/ f2-6 f1-4))) f1-4)) f1-4)))
           )
      (set! (-> this root trans y) (* (cos (* 65536.0 f0-4)) (-> this bob-scalar) arg0))
      )
    )
  )

;; failed to figure out what this is:
(defstate idle (ctyport-mine)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hide)
       (go-virtual hidden)
       )
      (('menace)
       (go-virtual menacing)
       )
      (('activate)
       (let ((v1-5 (the-as object (-> block param 0)))
             (v0-0 (the-as object (-> self root trans)))
             )
         (set! (-> (the-as vector v0-0) quad) (-> (the-as vector v1-5) quad))
         v0-0
         )
       )
      )
    )
  :enter (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
      )
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (update self 1.0)
    )
  :code transform-and-sleep-code
  :post (behavior ()
    (transform-post)
    )
  )

;; failed to figure out what this is:
(defstate menacing (ctyport-mine)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hide)
       (go-virtual hidden)
       )
      (('activate)
       (let ((v1-3 (the-as object (-> block param 0)))
             (v0-0 (the-as object (-> self root trans)))
             )
         (set! (-> (the-as vector v0-0) quad) (-> (the-as vector v1-3) quad))
         v0-0
         )
       )
      )
    )
  :enter (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-3 prim-core collide-with) (-> self root backup-collide-with))
      )
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (update self 2.0)
    )
  :code transform-and-sleep-code
  :post (behavior ()
    (transform-post)
    )
  )

;; definition for method 20 of type ctyport-attack-manager
;; WARN: Return type mismatch symbol vs none.
(defmethod init! ((this ctyport-attack-manager))
  (call-parent-method this)
  (speeches-reset *port-attack-speech*)
  (send-event (ppointer->process *time-of-day*) 'change 'hour 17)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 0.1)
  (set! (-> this passed-cutscene-trigger?) #f)
  (set! (-> this inactive-mine-list) (new 'process 'handle-array 80))
  (set! (-> this inactive-mine-list length) 0)
  (set-setting! 'extra-bank '((ctywide2 cityff) (ctywide3 portatk1)) 0.0 0)
  (set-setting! 'lock-sound-camera-to-target #t 0.0 0)
  (set-setting! 'disable-parking-spots? #t 0.0 0)
  (dotimes (s5-0 80)
    (let ((v1-25 (process-spawn
                   ctyport-mine
                   :name "ctyport-mine"
                   :from (if (>= s5-0 40)
                       *port-attack-dead-pool*
                       *default-dead-pool*
                       )
                   :to this
                   :stack-size 2048
                   )
                 )
          )
      (push-back (-> this inactive-mine-list) (process->handle (-> v1-25 0)))
      )
    )
  (set! (-> this mine-layout) *ctyport-mine-positions*)
  (set! (-> this package-positions) *ctyport-package-positions*)
  (dotimes (v1-34 (-> this mine-layout length))
    (set! (-> this mine-layout v1-34 active?) #f)
    (dotimes (a0-19 (-> this mine-layout v1-34 num-mines))
      (set! (-> this mine-layout v1-34 stored-handles a0-19) (the-as handle #f))
      )
    )
  (none)
  )

;; definition for method 21 of type ctyport-attack-manager
;; WARN: Return type mismatch int vs none.
(defmethod set-time-limit ((this ctyport-attack-manager))
  (set-setting! 'rain 'abs 0.0 0)
  (set-cloud-and-fog-interp! *mood-control* 0.0 0.0 0.0 0.0)
  (set-time-for-random-weather! *mood-control* 100000000.0 100000000.0)
  (set-setting! 'city-sound '(portatk1) 0.0 2)
  (set-setting! 'exclusive-task #f 0.0 (-> this node-info task))
  0
  (none)
  )

;; definition for method 7 of type ctyport-attack-manager
(defmethod relocate ((this ctyport-attack-manager) (offset int))
  (if (nonzero? (-> this inactive-mine-list))
      (&+! (-> this inactive-mine-list) offset)
      )
  (call-parent-method this offset)
  )

;; definition for method 30 of type ctyport-attack-manager
;; INFO: Used lq/sq
(defmethod taskman-event-handler ((this ctyport-attack-manager) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('notify)
     (case (-> arg3 param 0)
       (('pickup)
        (+! (-> this current-package-index) 1)
        (cond
          ((= (-> this current-package-index) 1)
           (play-speech this 4)
           )
          ((= (-> this current-package-index) 2)
           (process-spawn-function
             process
             (lambda :behavior process
               ()
               (let ((gp-0 (current-time)))
                 (until (time-elapsed? gp-0 (seconds 0.75))
                   (suspend)
                   )
                 )
               (let ((a0-0 (ppointer->process (-> self parent))))
                 (if a0-0
                     (play-speech (the-as ctyport-attack-manager a0-0) 13)
                     )
                 )
               )
             :to this
             )
           )
          ((= (-> this current-package-index) (+ (-> this package-positions length) -9))
           (play-speech this 6)
           )
          ((= (-> this current-package-index) (+ (-> this package-positions length) -1))
           (play-speech this 7)
           )
          ((= (-> this current-package-index) (-> this package-positions length))
           )
          ((and (or (not (logtest? (-> *port-attack-speech* 9 flags) (speech-info-flag si6)))
                    (and (> (-> *port-attack-speech* 9 play-time) 0)
                         (time-elapsed? (-> *port-attack-speech* 9 play-time) (seconds 10))
                         )
                    )
                (or (not (logtest? (-> *port-attack-speech* 10 flags) (speech-info-flag si6)))
                    (and (> (-> *port-attack-speech* 10 play-time) 0)
                         (time-elapsed? (-> *port-attack-speech* 10 play-time) (seconds 4))
                         )
                    )
                (and (zero? (mod (the-as int (rand-uint31-gen *random-generator*)) 3))
                     (< (-> this current-package-index) (+ (-> this package-positions length) -3))
                     (< 3 (-> this current-package-index))
                     )
                )
           (play-speech this 9)
           )
          )
        (set-time! (-> *port-attack-speech* 4 play-time))
        (send-event (handle->process (-> this active-torpedo)) 'boost #x45800000)
        (if (< 13 (-> this current-package-index))
            (task-node-close! (game-task-node city-port-attack-mission) 'event)
            )
        (cond
          ((< (-> this current-package-index) (-> this package-positions length))
           (ctyport-attack-manager-method-45 this)
           )
          (else
            (let ((a0-42 *ctyport-barrier-pos*)
                  (s5-1 (new 'stack-no-clear 'task-arrow-params))
                  )
              (set! (-> s5-1 pos quad) (-> a0-42 quad))
              (quaternion-identity! (-> s5-1 quat))
              (set! (-> s5-1 flags) (task-arrow-flags))
              (set! (-> s5-1 map-icon) (the-as uint 12))
              (logior! (-> s5-1 flags) (task-arrow-flags taf3))
              (let ((v0-0 (the-as object (process->handle (task-arrow-spawn s5-1 this)))))
                (set! (-> this rod-of-god) (the-as handle v0-0))
                v0-0
                )
              )
            )
          )
        )
       )
     )
    (else
      ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition of type ctyport-attack-package
(deftype ctyport-attack-package (process-drawable)
  ((hum-sound  sound-id)
   )
  (:state-methods
    idle
    die
    )
  )

;; definition for method 3 of type ctyport-attack-package
(defmethod inspect ((this ctyport-attack-package))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Thum-sound: ~D~%" (-> this hum-sound))
  (label cfg-4)
  this
  )

;; definition for function ctyport-attack-package-init-by-other
;; INFO: Used lq/sq
(defbehavior ctyport-attack-package-init-by-other ctyport-attack-package ((arg0 vector))
  (stack-size-set! (-> self main-thread) 128)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self hum-sound) (new-sound-id))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (quaternion-identity! (-> self root quat))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 530) self))
  (go-virtual idle)
  )

;; failed to figure out what this is:
(defstate idle (ctyport-attack-package)
  :virtual #t
  :trans (behavior ()
    (let ((f30-0 (vector-vector-xz-distance (-> self root trans) (target-pos 0))))
      (if (< f30-0 245760.0)
          (sound-play "rocket-pill" :id (-> self hum-sound) :position (-> self root trans))
          )
      (let* ((f1-0 (lerp-scale-clamp 0.0 1.0 f30-0 204800.0 819200.0))
             (f28-0 (fmax 0.0 (fmin 1.0 f1-0)))
             (gp-1 (-> self child))
             )
        (while gp-1
          (send-event (ppointer->process gp-1) 'set-alpha f28-0)
          (set! gp-1 (-> gp-1 0 brother))
          )
        )
      (spawn (-> self part) (-> self root trans))
      (when *target*
        (let* ((f26-0 (the float (get-ctyport-attack-death-count)))
               (f28-1 (lerp-scale-clamp 61440.0 90112.0 f26-0 5.0 15.0))
               )
          (when (and (>= (lerp-scale-clamp 28672.0 40960.0 f26-0 5.0 15.0) f30-0)
                     (>= f28-1 (- (-> (target-pos 0) y) (-> self root trans y)))
                     (>= 16384.0 (- (-> self root trans y) (-> (target-pos 0) y)))
                     )
            (sound-play "rocket-pickup" :position (target-pos 0))
            (send-event (ppointer->process (-> self parent)) 'notify 'pickup)
            (let* ((a0-19 *screen-filter*)
                   (t9-15 (method-of-object a0-19 setup))
                   (a1-9 (new 'stack-no-clear 'vector))
                   )
              (set! (-> a1-9 x) 128.0)
              (set! (-> a1-9 y) 128.0)
              (set! (-> a1-9 z) 128.0)
              (set! (-> a1-9 w) 128.0)
              (let ((a2-5 (new 'stack-no-clear 'vector)))
                (set! (-> a2-5 x) 128.0)
                (set! (-> a2-5 y) 128.0)
                (set! (-> a2-5 z) 128.0)
                (set! (-> a2-5 w) 0.0)
                (t9-15 a0-19 a1-9 a2-5 (* 2.0 (seconds-per-frame)) (bucket-id tex-hud-pris2) #x3fffff #x33001 #f)
                )
              )
            (go-virtual die)
            )
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate die (ctyport-attack-package)
  :virtual #t
  :code (behavior ()
    (sound-stop (-> self hum-sound))
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 1))
        (suspend)
        )
      )
    (disable *screen-filter*)
    (deactivate self)
    )
  )

;; definition for method 45 of type ctyport-attack-manager
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs handle.
(defmethod ctyport-attack-manager-method-45 ((this ctyport-attack-manager))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 quad) (-> this package-positions (-> this current-package-index) pos quad))
    (let ((s4-0 (process-spawn ctyport-attack-package s5-0 :name "ctyport-attack-package" :to this))
          (s3-1 (new 'stack-no-clear 'task-arrow-params))
          )
      (if (-> this package-positions (-> this current-package-index) on-water?)
          (set! (-> s5-0 y) 0.0)
          )
      (when (-> this package-positions (-> this current-package-index) probe?)
        (let ((s2-0 (new 'stack-no-clear 'collide-query)))
          (let ((v1-21 (new 'stack-no-clear 'vector)))
            (set! (-> v1-21 quad) (-> s5-0 quad))
            (vector+float*! (-> s2-0 start-pos) v1-21 *up-vector* 24576.0)
            )
          (set! (-> s2-0 move-dist quad) (the-as uint128 0))
          (set! (-> s2-0 move-dist y) -163840.0)
          (let ((v1-24 s2-0))
            (set! (-> v1-24 radius) 40.96)
            (set! (-> v1-24 collide-with) (collide-spec backgnd))
            (set! (-> v1-24 ignore-process0) #f)
            (set! (-> v1-24 ignore-process1) #f)
            (set! (-> v1-24 ignore-pat)
                  (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                  )
            (set! (-> v1-24 action-mask) (collide-action solid))
            )
          (if (>= (fill-and-probe-using-line-sphere *collide-cache* s2-0) 0.0)
              (set! (-> s5-0 y) (-> s2-0 best-other-tri intersect y))
              (set! (-> s5-0 y) 0.0)
              )
          )
        )
      (set! (-> s3-1 pos quad) (-> s5-0 quad))
      (quaternion-identity! (-> s3-1 quat))
      (set! (-> s3-1 flags) (task-arrow-flags))
      (set! (-> s3-1 map-icon) (the-as uint 13))
      (logior! (-> s3-1 flags) (task-arrow-flags taf3))
      (let ((v0-6 (process->handle (task-arrow-spawn s3-1 (-> s4-0 0)))))
        (set! (-> this rod-of-god) (the-as handle v0-6))
        (the-as handle v0-6)
        )
      )
    )
  )

;; definition for method 51 of type ctyport-attack-manager
;; INFO: Used lq/sq
(defmethod ctyport-attack-manager-method-51 ((this ctyport-attack-manager) (arg0 traffic-object-spawn-params))
  (cond
    ((task-node-closed? (game-task-node city-port-attack-mission))
     (set! (-> arg0 position quad) (-> (new 'static 'vector :x -197263.36 :y 52101.12 :z 5516165.0 :w 1.0) quad))
     (quaternion-identity! (-> arg0 rotation))
     (quaternion-rotate-y! (-> arg0 rotation) (-> arg0 rotation) -9102.223)
     )
    (else
      (set! (-> arg0 position quad) (-> (entity-by-name "cty-dax-missile-launcher-1") extra trans quad))
      (quaternion-copy!
        (-> arg0 rotation)
        (-> (the-as entity-actor (entity-by-name "cty-dax-missile-launcher-1")) quat)
        )
      (set! (-> arg0 position y) (+ 8192.0 (-> arg0 position y)))
      )
    )
  )

;; definition for function ctyport-attack-setup
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defbehavior ctyport-attack-setup ctyport-attack-manager ()
  (let ((gp-0 (new 'stack 'traffic-object-spawn-params)))
    (ctyport-attack-manager-method-51 self gp-0)
    (set! (-> gp-0 velocity quad) (the-as uint128 0))
    (set! (-> gp-0 behavior) (the-as uint 0))
    (set! (-> gp-0 flags) (traffic-spawn-flags))
    (let ((s5-0 (get-process *default-dead-pool* htorpedo #x4000 1)))
      (set! (-> self active-torpedo)
            (process->handle
              (-> (when s5-0
                    (let ((t9-3 (method-of-type htorpedo activate)))
                      (t9-3 (the-as htorpedo s5-0) *vehicle-manager* "torpedo" (the-as pointer #x70004000))
                      )
                    (run-now-in-process s5-0 vehicle-init-by-other 2 gp-0)
                    (-> s5-0 ppointer)
                    )
                  0
                  )
              )
            )
      )
    )
  (set! (-> self rod-of-god) (the-as handle #f))
  (set-time! (-> self state-time))
  (set-time! (-> self mine-clock))
  (dotimes (v1-15 (-> self mine-layout length))
    (set! (-> self mine-layout v1-15 active?) #f)
    )
  (suspend)
  (dotimes (gp-1 (-> self mine-layout length))
    (let ((s5-1 (-> self mine-layout gp-1)))
      (cond
        ((-> s5-1 active?)
         (cond
           ((zero? (classify-mine-layout))
            (ctyport-attack-manager-method-42 self s5-1)
            )
           (else
             (if (or (-> s5-1 spin?) (-> s5-1 inout?))
                 (ctyport-attack-manager-method-44 self s5-1)
                 )
             )
           )
         )
        (else
          (set! (-> s5-1 checked-this-frame?) #f)
          )
        )
      )
    )
  (when (> (-> self inactive-mine-list length) 0)
    (dotimes (gp-2 (-> self mine-layout length))
      (let ((s5-2 (-> self mine-layout gp-2)))
        (when (and (not (-> s5-2 active?))
                   (not (-> s5-2 checked-this-frame?))
                   (>= (-> self inactive-mine-list length) (-> s5-2 num-mines))
                   )
          (case (classify-mine-layout)
            ((1)
             (ctyport-attack-manager-method-43 self s5-2)
             (ctyport-attack-manager-method-44 self s5-2)
             )
            )
          )
        )
      )
    )
  (until *target*
    (suspend)
    )
  (suspend)
  0
  (none)
  )

;; failed to figure out what this is:
(defstate wait (ctyport-attack-manager)
  :virtual #t
  :code (behavior ()
    (while (or (not *target*) (not *spawn-actors*) (!= (status-of-level-and-borrows *level* 'lpatkcs #f) 'active))
      (if *target*
          (process-grab? *target* #f)
          )
      (suspend)
      )
    (process-release? *target*)
    (set-time-limit self)
    (ctyport-attack-setup)
    (while (or (not (level-get-target-inside *level*)) (= (-> (level-get-target-inside *level*) name) 'hiphog))
      (suspend)
      )
    (set-setting! 'airlock #f 0.0 0)
    (cond
      ((or (task-node-closed? (game-task-node city-port-attack-mission))
           (or (task-node-closed? (game-task-node city-port-attack-get-on)) (kiosk?))
           )
       (kill-by-type barge *active-pool*)
       (go-virtual start-mission)
       )
      (else
        (go-virtual exit-naughty-ottsel)
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate wait-for-cleanup (ctyport-attack-manager)
  :virtual #t
  :event task-manager-event-handler
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (if (not (handle->process (-> self active-torpedo)))
        (send-event self (the-as symbol (-> self finish-type)))
        )
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 1))
        (suspend)
        )
      )
    (let ((gp-1 (new 'stack-no-clear 'event-message-block)))
      (set! (-> gp-1 from) (process->ppointer self))
      (set! (-> gp-1 num-params) 0)
      (set! (-> gp-1 message) 'kill)
      (let ((s5-0 send-event-function)
            (v1-7 (entity-by-name "krimson-wall-8"))
            )
        (s5-0
          (if v1-7
              (-> v1-7 extra process)
              )
          gp-1
          )
        )
      )
    (let ((gp-2 (new 'stack-no-clear 'event-message-block)))
      (set! (-> gp-2 from) (process->ppointer self))
      (set! (-> gp-2 num-params) 0)
      (set! (-> gp-2 message) 'kill)
      (let ((s5-1 send-event-function)
            (v1-12 (entity-by-name "krimson-wall-9"))
            )
        (s5-1
          (if v1-12
              (-> v1-12 extra process)
              )
          gp-2
          )
        )
      )
    (let ((gp-3 (new 'stack-no-clear 'event-message-block)))
      (set! (-> gp-3 from) (process->ppointer self))
      (set! (-> gp-3 num-params) 0)
      (set! (-> gp-3 message) 'kill)
      (let ((s5-2 send-event-function)
            (v1-17 (entity-by-name "krimson-wall-10"))
            )
        (s5-2
          (if v1-17
              (-> v1-17 extra process)
              )
          gp-3
          )
        )
      )
    (suspend)
    (until #f
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate nuke-wall (ctyport-attack-manager)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    )
  :code (behavior ()
    (let ((gp-0 (entity-by-name "krimson-wall-10")))
      (when gp-0
        (send-event (-> gp-0 extra process) 'break)
        (set! (-> self wall-h)
              (ppointer->handle
                (process-spawn krimson-wall-break gp-0 'lctypatk :name "krimson-wall-break" :to *entity-pool*)
                )
              )
        )
      )
    (suspend)
    (send-event (handle->process (-> self wall-h)) 'break)
    (while (not (send-event (handle->process (-> self wall-h)) 'done))
      (suspend)
      )
    (send-event self 'complete)
    )
  )

;; definition for method 46 of type ctyport-attack-manager
(defmethod ctyport-attack-manager-method-46 ((this ctyport-attack-manager))
  (when (can-display-query? this (the-as string #f) -99.0)
    (let ((gp-0
            (new 'stack 'font-context *font-default-matrix* 32 320 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (let ((v1-1 gp-0))
        (set! (-> v1-1 width) (the float 340))
        )
      (let ((v1-2 gp-0))
        (set! (-> v1-2 height) (the float 80))
        )
      (let ((v1-3 gp-0))
        (set! (-> v1-3 scale) 0.9)
        )
      (set! (-> gp-0 flags) (font-flags shadow kerning large))
      (print-game-text
        (lookup-text! *common-text* (text-id text-0086) #f)
        gp-0
        #f
        44
        (bucket-id hud-draw-hud-alpha)
        )
      )
    )
  )

;; definition for symbol *cutscene-trigger-plane-normal*, type vector
(define *cutscene-trigger-plane-normal* (new 'static 'vector :x -0.0799 :z -0.9967 :w 1.0))

;; definition for symbol *cutscene-trigger-plane-pt*, type vector
(define *cutscene-trigger-plane-pt* (new 'static 'vector :x 3025019.0 :z 5512233.0 :w 1.0))

;; definition for method 47 of type ctyport-attack-manager
;; INFO: Used lq/sq
(defmethod hit-cutscene-trigger? ((this ctyport-attack-manager))
  (when (not (-> this passed-cutscene-trigger?))
    (let ((f30-0 (vector-dot *cutscene-trigger-plane-normal* *cutscene-trigger-plane-pt*)))
      (when (handle->process (-> this active-torpedo))
        (let* ((s5-0 (handle->process (-> this active-torpedo)))
               (a1-3 (if (type? s5-0 process-focusable)
                         s5-0
                         )
                     )
               (a0-10 (new 'stack-no-clear 'vector))
               )
          (set! (-> a0-10 quad) (-> (the-as process-focusable a1-3) rbody position quad))
          (if (and (< f30-0 (vector-dot *cutscene-trigger-plane-normal* a0-10))
                   (< (vector-vector-xz-distance a0-10 *cutscene-trigger-plane-pt*) 225280.0)
                   )
              (set! (-> this passed-cutscene-trigger?) #t)
              )
          )
        )
      )
    )
  (-> this passed-cutscene-trigger?)
  )

;; definition for symbol *approach-camera-pt*, type vector
(define *approach-camera-pt* (new 'static 'vector :x 3040789.8 :y 138802.38 :z 5532802.5 :w 1.0))

;; definition for symbol *approach-camera-matrix*, type matrix
(define *approach-camera-matrix* (new 'static 'matrix
                                   :rvec (new 'static 'vector :x 0.0436 :y -0.1756 :z -0.9834)
                                   :uvec (new 'static 'vector :x 0.0077 :y 0.9844 :z -0.1754)
                                   :fvec (new 'static 'vector :x -0.999 :z -0.0443)
                                   )
        )

;; failed to figure out what this is:
(defstate watch-approach (ctyport-attack-manager)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (format 0 "Msg is ~s, from ~s~%" message (-> proc name))
    (case message
      (('nuke-hit)
       (if (or (not (-> block param 0)) (not *target*) (focus-test? *target* pilot-riding))
           (send-event self 'fail)
           (go-virtual nuke-wall)
           )
       )
      (else
        (ctyport-attack-manager-event-handler proc argc message block)
        )
      )
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (send-event (handle->process (-> self active-torpedo)) 'override-camera #t)
    (if (not (handle->process (-> self active-torpedo)))
        (send-event self 'fail)
        )
    (when *target*
      (cond
        ((focus-test? *target* pilot-riding)
         )
        (else
          )
        )
      )
    )
  :code sleep-code
  )

;; definition for symbol *port-attack-fail-sphere*, type sphere
(define *port-attack-fail-sphere* (new 'static 'sphere :x -1074094.1 :y 31539.2 :z 5908275.0 :r 1.0))

;; definition for symbol *port-attack-fail-radius*, type float
(define *port-attack-fail-radius* 163840.0)

;; failed to figure out what this is:
(defstate head-to-wall (ctyport-attack-manager)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :enter (behavior ()
    '()
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (if (< (vector-vector-xz-distance (target-pos 0) *port-attack-fail-sphere*) *port-attack-fail-radius*)
        (send-event self 'fail)
        )
    (let ((gp-1 (handle->process (-> self active-torpedo))))
      (cond
        ((focus-test?
           (the-as process-focusable (if (type? gp-1 process-focusable)
                                         (the-as process-focusable gp-1)
                                         )
                   )
           dead
           )
         (send-event self 'fail)
         )
        ((hit-cutscene-trigger? self)
         (send-event (handle->process (-> self active-torpedo)) 'hide)
         (send-event (handle->process (-> self rod-of-god)) 'leave)
         (send-event self 'complete)
         )
        )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate pickup-nukes (ctyport-attack-manager)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :enter (behavior ()
    (set-setting! 'disable-guard-chatter? #t 0.0 0)
    (set! (-> self h-hud)
          (ppointer->handle
            (process-spawn ctyport-attack-hud :init hud-init-by-other :name "ctyport-attack-hud" :to self)
            )
          )
    (set-time! (-> self state-time))
    (if (zero? (-> self current-package-index))
        (play-speech self 1)
        )
    (dotimes (gp-1 (-> self mine-layout length))
      (let ((s5-0 (-> self mine-layout gp-1)))
        (when (-> s5-0 active?)
          (dotimes (s4-0 (-> s5-0 num-mines))
            (let ((v1-19 (-> s5-0 stored-handles s4-0)))
              (send-event (handle->process v1-19) 'menace)
              )
            )
          )
        )
      )
    )
  :trans (behavior ()
    (local-vars (gp-1 symbol))
    ((-> (method-of-type task-manager active) trans))
    (if (and (time-elapsed? (-> self state-time) (seconds 0.2))
             (not (time-elapsed? (-> self state-time) (seconds 0.5)))
             )
        (set-blackout-frames 0)
        )
    (let ((v1-12 (-> self package-positions length)))
      (set! (-> *game-info* goal) (/ (the float (-> self current-package-index)) (the float (+ v1-12 -1))))
      )
    (ctyport-attack-manager-method-49 self)
    (if (and (zero? (-> self current-package-index))
             (> (-> *port-attack-speech* 1 play-time) 0)
             (time-elapsed? (-> *port-attack-speech* 1 play-time) (seconds 1))
             )
        (play-speech self 3)
        )
    (if (< (vector-vector-xz-distance (target-pos 0) *port-attack-fail-sphere*) *port-attack-fail-radius*)
        (send-event self 'fail)
        )
    (if (and (> (-> self current-package-index) 0)
             (< (-> self current-package-index) (+ (-> self package-positions length) -9))
             (and (> (-> *port-attack-speech* 4 play-time) 0)
                  (time-elapsed? (-> *port-attack-speech* 4 play-time) (seconds 12))
                  )
             (or (not (logtest? (-> *port-attack-speech* 5 flags) (speech-info-flag si6)))
                 (and (> (-> *port-attack-speech* 5 play-time) 0)
                      (time-elapsed? (-> *port-attack-speech* 5 play-time) (seconds 20))
                      )
                 )
             )
        (play-speech self 5)
        )
    (cond
      ((< (-> self current-package-index) (-> self package-positions length))
       (if (or (not *target*)
               (not (handle->process (-> self active-torpedo)))
               (begin
                 (let* ((gp-2 #t)
                        (s5-0 (handle->process (-> self active-torpedo)))
                        (v1-67 (the-as focus-status (logand (-> (the-as process-focusable (if (type? s5-0 process-focusable)
                                                                                              (the-as process-focusable s5-0)
                                                                                              )
                                                                        )
                                                                focus-status
                                                                )
                                                            (focus-status dead)
                                                            )
                                       )
                               )
                        )
                   (cmove-#f-zero gp-1 v1-67 gp-2)
                   )
                 gp-1
                 )
               )
           (send-event self 'fail)
           )
       )
      (else
        (go-virtual head-to-wall)
        )
      )
    )
  :code (behavior ()
    (sleep-code)
    )
  )

;; definition for method 48 of type ctyport-attack-manager
(defmethod ctyport-attack-manager-method-48 ((this ctyport-attack-manager) (arg0 int))
  0.0
  (when (< 2 arg0)
    (let ((f30-0 (* -6144.0 (the float (+ arg0 -2)))))
      (if (task-node-closed? (game-task-node city-port-attack-mission))
          (set! f30-0 (* 2.0 f30-0))
          )
      (let ((f0-4 (fmax -81920.0 f30-0)))
        (send-event (handle->process (-> this active-torpedo)) 'boost f0-4)
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate start-mission (ctyport-attack-manager)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :enter (behavior ()
    (set-setting! 'music 'portattk 0.0 0)
    (set-setting! 'exclusive-load '((ignore all)) 0.0 0)
    (let ((a1-2 (new 'stack-no-clear 'array 'symbol 10)))
      (set! (-> a1-2 9) #f)
      (set! (-> a1-2 8) #f)
      (set! (-> a1-2 7) #f)
      (set! (-> a1-2 6) #f)
      (set! (-> a1-2 5) #f)
      (set! (-> a1-2 4) #f)
      (set! (-> a1-2 3) #f)
      (set! (-> a1-2 2) 'ctyinda)
      (set! (-> a1-2 1) 'ctyport)
      (set! (-> a1-2 0) 'ctywide-ff)
      (want-levels *load-state* a1-2)
      )
    (want-display-level *load-state* 'ctyport 'display)
    (want-display-level *load-state* 'ctyinda 'display)
    (ctyport-attack-manager-method-48 self (get-ctyport-attack-death-count))
    (if (task-node-closed? (game-task-node city-port-attack-mission))
        (send-event (handle->process (-> self active-torpedo)) 'boost 57344.0)
        )
    (set! (-> self current-package-index) 0)
    (if (task-node-closed? (game-task-node city-port-attack-mission))
        (set! (-> self current-package-index) 14)
        )
    (ctyport-attack-manager-method-45 self)
    (send-event *target* 'change-mode 'pilot-daxter (handle->process (-> self active-torpedo)))
    (go-virtual pickup-nukes)
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate exit-naughty-ottsel (ctyport-attack-manager)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (if (!= (status-of-level-and-borrows *level* 'hiphog #f) 'active)
        (go-virtual get-on-nuke)
        )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate get-on-nuke (ctyport-attack-manager)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :enter (behavior ()
    (set-setting! 'airlock #f 0.0 0)
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (if (and *target* (not (logtest? (focus-status teleporting) (-> *target* focus-status))))
        (play-speech self 0)
        )
    (when (and (not (handle->process (-> self rod-of-god)))
               (not (task-node-closed? (game-task-node city-port-attack-get-on)))
               (handle-command-list *gui-control* (gui-channel voicebox) (the-as gui-connection #f))
               (> (-> *port-attack-speech* 0 play-time) 0)
               (time-elapsed? (-> *port-attack-speech* 0 play-time) (seconds 1))
               )
      (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
        (set! (-> gp-0 pos quad) (-> (entity-by-name "cty-dax-missile-launcher-1") extra trans quad))
        (quaternion-identity! (-> gp-0 quat))
        (set! (-> gp-0 flags) (task-arrow-flags))
        (set! (-> gp-0 map-icon) (the-as uint 13))
        (logior! (-> gp-0 flags) (task-arrow-flags taf3 taf8))
        (set! (-> self rod-of-god) (process->handle (task-arrow-spawn gp-0 self)))
        )
      )
    (when (and *target* (and (handle-command-list *gui-control* (gui-channel voicebox) (the-as gui-connection #f))
                             (not (focus-test? *target* pilot-riding))
                             (let ((gp-1 vector-vector-xz-distance)
                                   (s5-1 (target-pos 0))
                                   (s4-0 (handle->process (-> self active-torpedo)))
                                   )
                               (and (< (gp-1 s5-1 (get-trans
                                                    (the-as process-focusable (if (type? s4-0 process-focusable)
                                                                                  (the-as process-focusable s4-0)
                                                                                  )
                                                            )
                                                    0
                                                    )
                                             )
                                       32768.0
                                       )
                                    (> (-> *port-attack-speech* 0 play-time) 0)
                                    (time-elapsed? (-> *port-attack-speech* 0 play-time) (seconds 1))
                                    )
                               )
                             )
               )
      (send-event (handle->process (-> self rod-of-god)) 'leave)
      (go-virtual play-get-on-movie)
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate play-get-on-movie (ctyport-attack-manager)
  :virtual #t
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    )
  :code (behavior ()
    (set-blackout-frames (seconds 0.05))
    (set-setting! 'stop-boats? #t 0.0 0)
    (let ((gp-0 (get-process *default-dead-pool* scene-player #x4000 1)))
      (process->handle
        (-> (when gp-0
              (let ((t9-3 (method-of-type scene-player activate)))
                (t9-3 (the-as scene-player gp-0) *default-pool* "scene-player" (the-as pointer #x70004000))
                )
              (run-now-in-process gp-0 scene-player-init "ctyport-attack-get-on-nuke" #t #f)
              (-> gp-0 ppointer)
              )
            0
            )
        )
      )
    (while *scene-player*
      (when (< 0.0 (-> *scene-player* 0 last-frame))
        (set-setting! 'stop-boats? #t 0.0 0)
        (send-event (handle->process (-> self active-torpedo)) 'hide)
        )
      (suspend)
      )
    (task-node-close! (game-task-node city-port-attack-get-on) 'event)
    (send-event (handle->process (-> self active-torpedo)) 'show)
    (set-setting! 'stop-boats? #t 0.0 0)
    (apply-settings *setting-control*)
    (kill-by-type barge *active-pool*)
    (suspend)
    (go-virtual start-mission)
    )
  )

;; definition for method 10 of type ctyport-attack-package
(defmethod deactivate ((this ctyport-attack-package))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (sound-stop (-> this hum-sound))
  (call-parent-method this)
  (none)
  )

;; definition for method 42 of type ctyport-attack-manager
(defmethod ctyport-attack-manager-method-42 ((this ctyport-attack-manager) (arg0 ctyport-mine-layout))
  (set! (-> arg0 active?) #f)
  (set! (-> arg0 checked-this-frame?) #t)
  (dotimes (s4-0 (-> arg0 num-mines))
    (push-back (-> this inactive-mine-list) (-> arg0 stored-handles s4-0))
    (send-event (handle->process (-> arg0 stored-handles s4-0)) 'hide)
    )
  #f
  )

;; definition for method 44 of type ctyport-attack-manager
;; INFO: Used lq/sq
(defmethod ctyport-attack-manager-method-44 ((this ctyport-attack-manager) (arg0 ctyport-mine-layout))
  (local-vars (sv-208 vector) (sv-224 vector))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    0.0
    (new 'stack-no-clear 'vector)
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (set! (-> s4-0 quad) (-> *x-vector* quad))
      (let ((f30-0 (-> arg0 initial-angle)))
        (cond
          ((-> arg0 inout?)
           (let* ((f0-2 (* 0.0033333334 (the float (- (current-time) (-> this mine-clock)))))
                  (f1-3 (* 0.0033333334 (-> arg0 period)))
                  (f0-5 (+ (/ (- f0-2 (* (the float (the int (/ f0-2 f1-3))) f1-3)) (* 0.0033333334 (-> arg0 period)))
                           (-> arg0 offset)
                           )
                        )
                  (f0-6 (- f0-5 (* (the float (the int (/ f0-5 1.0))) 1.0)))
                  )
             (if (< 0.5 f0-6)
                 (set! f0-6 (- 1.0 f0-6))
                 )
             (let ((f0-7 (* 2.0 f0-6)))
               (vector-lerp! s5-0 (-> arg0 origin) (-> arg0 secondary-pos) f0-7)
               )
             )
           )
          (else
            (set! (-> s5-0 quad) (-> arg0 origin quad))
            )
          )
        (if (-> arg0 spin?)
            (+! f30-0 (* 0.0033333334 (-> arg0 spinrate) (the float (- (current-time) (-> this mine-clock)))))
            )
        (vector-rotate-around-y! s4-0 s4-0 f30-0)
        )
      (let ((s3-1 (matrix-f-u-compose (new 'stack-no-clear 'matrix) s4-0 *up-vector*)))
        (dotimes (s2-0 (-> arg0 num-mines))
          (let ((v1-28 (-> arg0 stored-handles s2-0)))
            (send-event (handle->process v1-28) 'activate s5-0)
            )
          (let ((s1-0 s5-0)
                (s0-0 s5-0)
                )
            (set! sv-208 s4-0)
            (let* ((f30-1 1.0)
                   (f28-0 0.29999995)
                   (v1-33 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                   (v1-34 (the-as number (logior #x3f800000 v1-33)))
                   (f0-16 (* (+ f30-1 (* f28-0 (+ -1.0 (the-as float v1-34)))) (-> arg0 spacing)))
                   )
              (vector+float*! s1-0 s0-0 sv-208 f0-16)
              )
            )
          (let ((s1-2 s5-0)
                (s0-1 s5-0)
                )
            (set! sv-224 (-> s3-1 rvec))
            (let* ((f30-2 -10240.0)
                   (f28-1 20480.0)
                   (v1-40 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                   (v1-41 (the-as number (logior #x3f800000 v1-40)))
                   (f0-21 (+ f30-2 (* f28-1 (+ -1.0 (the-as float v1-41)))))
                   )
              (vector+float*! s1-2 s0-1 sv-224 f0-21)
              )
            )
          )
        )
      )
    )
  #f
  )

;; definition for method 43 of type ctyport-attack-manager
(defmethod ctyport-attack-manager-method-43 ((this ctyport-attack-manager) (arg0 ctyport-mine-layout))
  (set! (-> arg0 active?) #t)
  (dotimes (s4-0 (-> arg0 num-mines))
    (set! (-> arg0 stored-handles s4-0) (-> this inactive-mine-list data0 0))
    (pop-front (-> this inactive-mine-list) 0)
    )
  #f
  )

;; definition for function copy-record-pos
;; INFO: Used lq/sq
(defun copy-record-pos ()
  (dotimes (v1-0 *recorded-length*)
    (set! (-> *ctyport-package-positions* v1-0 pos quad) (-> *recorded-pos* v1-0 quad))
    )
  #f
  )

;; definition for function print-record-pos-2
(defun print-record-pos-2 ()
  (dotimes (gp-0 (-> *ctyport-package-positions* length))
    (format
      0
      "(static-cty-package ~m ~m ~m  :locked? #t)~%"
      (-> *ctyport-package-positions* gp-0 pos x)
      (-> *ctyport-package-positions* gp-0 pos y)
      (-> *ctyport-package-positions* gp-0 pos z)
      )
    )
  #f
  )

;; failed to figure out what this is:
(dotimes (v1-116 (-> *ctyport-package-positions* length))
  (when (not (-> *ctyport-package-positions* v1-116 locked?))
    0
    (goto cfg-14)
    )
  (set! *recorded-length* (+ v1-116 1))
  )

;; failed to figure out what this is:
(label cfg-14)

;; definition for method 25 of type ctyport-attack-manager
(defmethod task-manager-method-25 ((this ctyport-attack-manager))
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 1.0)
  (disable *screen-filter*)
  (call-parent-method this)
  (none)
  )

;; definition for function lctypatk-login
;; WARN: Return type mismatch clock vs none.
(defun lctypatk-login ((arg0 level))
  (set! *port-attack-dead-pool* (new 'loading-level 'dead-pool 40 2048 "*port-attack-dead-pool*"))
  (set! (-> *port-attack-dead-pool* clock) (-> *display* entity-clock))
  (none)
  )

;; definition for function lctypatk-logout
;; WARN: Return type mismatch symbol vs none.
(defun lctypatk-logout ((arg0 level))
  (set! *port-attack-dead-pool* #f)
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-cty-dax-missile-launcher cty-dax-missile-launcher cty-dax-missile-launcher-lod0-jg cty-dax-missile-launcher-idle-ja
              ((cty-dax-missile-launcher-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 12.5)
              )

;; definition of type cty-dax-missile-launcher
(deftype cty-dax-missile-launcher (process-drawable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type cty-dax-missile-launcher
(defmethod inspect ((this cty-dax-missile-launcher))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 11 of type cty-dax-missile-launcher
(defmethod init-from-entity! ((this cty-dax-missile-launcher) (arg0 entity-actor))
  (stack-size-set! (-> this main-thread) 128)
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((v1-4 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-4 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-4 prim-core collide-with) (collide-spec jak player-list tobot))
      (set-vector! (-> v1-4 local-sphere) 0.0 0.0 0.0 12288.0)
      (set! (-> s4-0 total-prims) (the-as uint 1))
      (set! (-> s4-0 root-prim) v1-4)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-7 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-7 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-7 prim-core collide-with))
      )
    (set! (-> this root) s4-0)
    )
  (initialize-skeleton
    this
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-cty-dax-missile-launcher" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (process-drawable-from-entity! this arg0)
  (go (method-of-object this idle))
  )

;; failed to figure out what this is:
(defstate idle (cty-dax-missile-launcher)
  :virtual #t
  :code transform-and-sleep-code
  :post ja-post
  )

;; definition for method 49 of type ctyport-attack-manager
(defmethod ctyport-attack-manager-method-49 ((this ctyport-attack-manager))
  (local-vars (v0-0 int))
  (if (or (< (-> this current-package-index) 2)
          (< (+ (-> this package-positions length) -2) (-> this current-package-index))
          )
      (return 0)
      )
  (when (or (not (logtest? (-> *port-attack-speech* 9 flags) (speech-info-flag si6)))
            (and (> (-> *port-attack-speech* 9 play-time) 0)
                 (time-elapsed? (-> *port-attack-speech* 9 play-time) (seconds 4))
                 )
            )
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (new 'stack-no-clear 'vector)
      (let* ((s3-0 (handle->process (-> this active-torpedo)))
             (s4-0 (if (type? s3-0 process-focusable)
                       s3-0
                       )
                   )
             )
        (when (the-as process-focusable s4-0)
          (let ((s3-1 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> (the-as process-focusable s4-0) root quat))))
            (set! (-> s3-1 y) 0.0)
            (vector-normalize! s3-1 1.0)
            (vector+float*! s5-0 (-> (the-as process-focusable s4-0) root trans) s3-1 122880.0)
            )
          (set! (-> s5-0 w) 40960.0)
          (when (and (or (not (logtest? (-> *port-attack-speech* 10 flags) (speech-info-flag si6)))
                         (and (> (-> *port-attack-speech* 10 play-time) 0)
                              (time-elapsed? (-> *port-attack-speech* 10 play-time) (seconds 5))
                              )
                         )
                     (or (not (logtest? (-> *port-attack-speech* 12 flags) (speech-info-flag si6)))
                         (and (> (-> *port-attack-speech* 12 play-time) 0)
                              (time-elapsed? (-> *port-attack-speech* 12 play-time) (seconds 2))
                              )
                         )
                     (not (logtest? (rand-uint31-gen *random-generator*) 1))
                     )
            (let ((s3-4 0))
              (let ((s2-0 (new 'stack-no-clear 'array 'collide-shape 384)))
                (countdown (s1-0 (fill-actor-list-for-box *actor-hash* s5-0 s2-0 384))
                  (let* ((s0-0 (-> s2-0 s1-0))
                         (v1-52 (if (type? s0-0 collide-shape)
                                    s0-0
                                    )
                                )
                         )
                    (when v1-52
                      (let* ((s0-1 (-> v1-52 process))
                             (v1-53 (if (type? s0-1 process-focusable)
                                        s0-1
                                        )
                                    )
                             )
                        (when v1-53
                          (if (and (!= v1-53 *target*) (!= v1-53 s4-0) (logtest? (process-mask guard civilian) (-> v1-53 mask)))
                              (+! s3-4 1)
                              )
                          )
                        )
                      )
                    )
                  )
                )
              (let* ((s1-1 *target*)
                     (s2-1 (if (type? s1-1 process-focusable)
                               s1-1
                               )
                           )
                     )
                (when (and s2-1 (< (vector-vector-distance (get-trans s2-1 0) s5-0) (-> s5-0 w)))
                  (if (and (!= s2-1 *target*) (!= s2-1 s4-0) (logtest? (process-mask guard civilian) (-> s2-1 mask)))
                      (+! s3-4 1)
                      )
                  )
                )
              (when (< 2 s3-4)
                (play-speech this 10)
                (return 0)
                v0-0
                )
              )
            )
          )
        )
      )
    )
  )

;; definition for method 50 of type ctyport-attack-manager
(defmethod play-speech ((this ctyport-attack-manager) (arg0 int))
  (speech-play *port-attack-speech* arg0 *ctyport-attack-speech-list* (target-pos 0))
  )

;; definition for method 17 of type ctyport-attack-hud
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this ctyport-attack-hud))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-lower-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid)
        (the-as
          texture-id
          (lookup-texture-by-name "hud-dax-missle-meter-01" (the-as string #f) (the-as (pointer texture-page) #f))
          )
        )
  (set! (-> this sprites 0 pos z) #xfffff0)
  (set! (-> this sprites 1 tid)
        (the-as
          texture-id
          (lookup-texture-by-name "hud-dax-missle-meter-03" (the-as string #f) (the-as (pointer texture-page) #f))
          )
        )
  (set! (-> this sprites 1 pos z) #xfffff2)
  (set! (-> this sprites 2 tid)
        (the-as
          texture-id
          (lookup-texture-by-name "hud-dax-missle-meter-03" (the-as string #f) (the-as (pointer texture-page) #f))
          )
        )
  (set! (-> this sprites 2 pos z) #xfffff4)
  (set! (-> this sprites 3 tid)
        (the-as
          texture-id
          (lookup-texture-by-name "hud-dax-missle-meter-02" (the-as string #f) (the-as (pointer texture-page) #f))
          )
        )
  (set! (-> this sprites 3 pos z) #xffffff)
  0
  (none)
  )

;; failed to figure out what this is:
(if #t
    (set! *hud-boost-curve* (new 'static 'curve2d-fast
                              :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                              :ys (new 'static 'vector :y 5.0 :z 1.0 :w 2.0)
                              :one-over-x-deltas (new 'static 'vector :x 10.0 :y -8.0 :z 1.0 :w 1.0)
                              )
          )
    )

;; definition for method 15 of type ctyport-attack-hud
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this ctyport-attack-hud))
  (set-hud-piece-position!
    (-> this sprites 2)
    (the int (+ 65.0 (* 18.0 (-> *video-params* relative-x-scale)) (* -130.0 (-> this offset))))
    (the int (+ 350.0 (* 130.0 (-> this offset))))
    )
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 2)) 5 -25)
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites 2)) 5 5)
  (logior! (-> this sprites 0 flags) (hud-sprite-flags hsf3))
  (logior! (-> this sprites 2 flags) (hud-sprite-flags hsf3 hsf4))
  (logior! (-> this sprites 3 flags) (hud-sprite-flags hsf3))
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites 2)) 1110 0)
  (logior! (-> this sprites 1 flags) (hud-sprite-flags hsf3 hsf5))
  (set! (-> this sprites 2 scale-x) 1.4)
  (set! (-> this sprites 1 scale-x) 1.4)
  (set! (-> this sprites 1 scale-y) 1.1)
  (set! (-> this sprites 0 color w) 128)
  (set! (-> this sprites 2 color w) 128)
  (set! (-> this sprites 3 color w) 128)
  (set! (-> this sprites 2 color x) 128)
  (set! (-> this sprites 2 color y) 128)
  (set! (-> this sprites 2 color z) 128)
  (set! (-> this sprites 1 color x) 128)
  (set! (-> this sprites 1 color y) 128)
  (set! (-> this sprites 1 color z) 128)
  (set! (-> this sprites 1 color w) 0)
  (let ((f0-11 (* 0.011111111 (the float (- (current-time) (-> this spike-time))))))
    0.0
    (let ((f0-12 (curve2d-method-9 *hud-boost-curve* f0-11 3)))
      (set! (-> this tt-current) (lerp (-> this tt-prev) (-> this tt-next) f0-12))
      )
    )
  (let ((f30-0 (-> this tt-current)))
    (when (and (not (paused?)) (time-elapsed? (-> this spike-time) (seconds 0.3)))
      (let* ((f28-0 -1.0)
             (f26-0 2.0)
             (v1-40 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-41 (the-as number (logior #x3f800000 v1-40)))
             )
        (+! f30-0 (* (+ f28-0 (* f26-0 (+ -1.0 (the-as float v1-41)))) (lerp 0.01 0.06 (* f30-0 f30-0))))
        )
      )
    (let ((f30-1 (fmax 0.0 (fmin 1.15 f30-0))))
      (when (not (paused?))
        (let* ((f28-2 (* (-> this tt-current) (-> this tt-current)))
               (f0-23 (lerp 1.0 0.3 f28-2))
               (f1-16 (* 0.0033333334 (the float (current-time))))
               (f0-24 (/ (- f1-16 (* (the float (the int (/ f1-16 f0-23))) f0-23)) f0-23))
               (f1-18 (* f28-2 (curve2d-method-9 *curve-linear-up-down* f0-24 3)))
               (f28-3 (fmax 0.0 (fmin 1.0 f1-18)))
               )
          (set! (-> this sprites 3 color x) (the int (lerp 128.0 192.0 f28-3)))
          (set! (-> this sprites 3 color y) (the int (lerp 128.0 64.0 f28-3)))
          (set! (-> this sprites 3 color z) (the int (lerp 128.0 0.0 f28-3)))
          (set! (-> this sprites 0 color x) (the int (lerp 128.0 192.0 f28-3)))
          (set! (-> this sprites 0 color y) (the int (lerp 128.0 64.0 f28-3)))
          (set! (-> this sprites 0 color z) (the int (lerp 128.0 0.0 f28-3)))
          )
        (when (not (time-elapsed? (-> this spike-time) (seconds 0.1)))
          (set! (-> this sprites 3 color x) 255)
          (set! (-> this sprites 3 color y) 255)
          (set! (-> this sprites 3 color z) 255)
          (set! (-> this sprites 0 color x) 255)
          (set! (-> this sprites 0 color y) 255)
          (set! (-> this sprites 0 color z) 255)
          )
        )
      (let ((f0-39 (lerp 32403.91 3185.7778 f30-1)))
        (set! (-> this sprites 2 angle) f0-39)
        (set! (-> this sprites 1 angle) f0-39)
        )
      )
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type ctyport-attack-hud
(defmethod update-values! ((this ctyport-attack-hud))
  (set! (-> this values 0 target) (the-as int (-> *game-info* goal)))
  (when (and (< 0.0 (-> *game-info* goal)) (< (-> this tt-next) (-> *game-info* goal)))
    (set! (-> this tt-prev) (-> this tt-current))
    (set-time! (-> this spike-time))
    (set! (-> this tt-next) (-> *game-info* goal))
    )
  (call-parent-method this)
  (none)
  )




