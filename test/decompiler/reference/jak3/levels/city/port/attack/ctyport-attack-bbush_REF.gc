;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *ctyport-attack-bbush-positions*, type (array ctyport-attack-package-info)
(define *ctyport-attack-bbush-positions* (new 'loading-level 'boxed-array ctyport-attack-package-info 64))

;; failed to figure out what this is:
(dotimes (gp-0 (-> *ctyport-attack-bbush-positions* allocated-length))
  (set! (-> *ctyport-attack-bbush-positions* gp-0) (new 'loading-level 'ctyport-attack-package-info))
  )

;; failed to figure out what this is:
(set! (-> *ctyport-attack-bbush-positions* length) 0)

;; definition for symbol *ctyport-bbush-mine-positions*, type (array ctyport-mine-layout)
(define *ctyport-bbush-mine-positions*
  (new 'static 'boxed-array :type ctyport-mine-layout
    (new 'static 'ctyport-mine-layout
      :num-mines 7
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1984389.1 :z 6423224.5)
      :initial-angle 16384.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 7
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1924341.8 :z 7077519.5)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 5
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1087733.8 :z 7747666.0)
      :initial-angle 16384.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 4
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -262144.0 :z 5992448.0)
      :initial-angle 24576.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 4
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 7
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 205496.31 :z 5999370.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 8
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 7
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 965550.06 :z 6243574.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 8
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 6
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 507904.0 :z 6541312.0)
      :initial-angle 16384.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 958177.25 :z 7158210.5)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 623411.2 :z 7167959.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -81920.0 :z 5771264.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 81920.0 :z 5578752.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 1
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 156999.69 :z 5603287.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 4
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 639508.5 :z 5754306.5)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 4
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 3
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1331200.0 :z 5947392.0)
      :initial-angle 8192.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 4
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 2
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1544192.0 :z 5701632.0)
      :initial-angle 24576.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 2 (new 'static 'handle) (new 'static 'handle))
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 6
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x -593920.0 :z 6385664.0)
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 6
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 1454080.0 :z 6524928.0)
      :initial-angle 8192.0
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    (new 'static 'ctyport-mine-layout
      :num-mines 6
      :inout? #f
      :spin? #f
      :active? #f
      :origin (new 'static 'vector :x 442368.0 :z 7557120.0)
      :initial-angle 10922.667
      :spacing 24576.0
      :spinrate 10922.667
      :period 3000.0
      :stored-handles (new 'static 'array handle 6
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        (new 'static 'handle)
        )
      )
    )
  )

;; definition of type ctyport-attack-manager-bbush
(deftype ctyport-attack-manager-bbush (ctyport-attack-manager)
  ((actor-group        (pointer actor-group))
   (actor-group-count  int32)
   (clock-speed        float)
   (countdown-timer    handle  :offset 336)
   )
  (:state-methods
    wait-award
    )
  )

;; definition for method 3 of type ctyport-attack-manager-bbush
(defmethod inspect ((this ctyport-attack-manager-bbush))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type ctyport-attack-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Tclock-speed: ~f~%" (-> this clock-speed))
  (format #t "~2Thud-timer: ~D~%" (-> this hud-timer))
  (format #t "~2Tcountdown-timer: ~D~%" (-> this countdown-timer))
  (label cfg-7)
  this
  )

;; definition for method 20 of type ctyport-attack-manager-bbush
;; INFO: Used lq/sq
;; WARN: Return type mismatch symbol vs none.
(defmethod init! ((this ctyport-attack-manager-bbush))
  (local-vars (sv-96 res-tag))
  (let ((t9-0 (method-of-type task-manager init!)))
    (t9-0 this)
    )
  (set-setting! 'stop-boats? #t 0.0 0)
  (set-setting! 'extra-bank '((ctywide2 cityff) (ctywide3 portatk1)) 0.0 0)
  (set-setting! 'lock-sound-camera-to-target #t 0.0 0)
  (set! (-> this hud-timer)
        (ppointer->handle (process-spawn hud-timer :init hud-init-by-other :name "hud-timer" :to this))
        )
  (send-event (ppointer->process *time-of-day*) 'change 'hour 16)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 0.0)
  (set! (-> this inactive-mine-list) (new 'process 'handle-array 80))
  (set! (-> this inactive-mine-list length) 0)
  (set! (-> this clock-speed) 1.0)
  (dotimes (s5-1 80)
    (let ((v1-31 (process-spawn
                   ctyport-mine
                   :name "ctyport-mine"
                   :from (if (>= s5-1 40)
                       *port-attack-dead-pool*
                       *default-dead-pool*
                       )
                   :to this
                   :stack-size 2048
                   )
                 )
          )
      (push-back (-> this inactive-mine-list) (process->handle (-> v1-31 0)))
      )
    )
  (set! (-> this mine-layout) *ctyport-bbush-mine-positions*)
  (set! sv-96 (new 'static 'res-tag))
  (let ((v1-40 (res-lump-data (entity-by-name "port-attack-bbush-1") 'actor-groups pointer :tag-ptr (& sv-96))))
    (cond
      ((and v1-40 (nonzero? (-> sv-96 elt-count)))
       (set! (-> this actor-group) (the-as (pointer actor-group) v1-40))
       (set! (-> this actor-group-count) (the-as int (-> sv-96 elt-count)))
       )
      (else
        (set! (-> this actor-group) (the-as (pointer actor-group) #f))
        (set! (-> this actor-group-count) 0)
        0
        )
      )
    )
  (dotimes (v1-46 (-> *ctyport-package-positions* length))
    (set! (-> *ctyport-attack-bbush-positions* v1-46 pos quad) (-> *ctyport-package-positions* v1-46 pos quad))
    (set! (-> *ctyport-attack-bbush-positions* v1-46 on-water?) (-> *ctyport-package-positions* v1-46 on-water?))
    )
  (set! (-> *ctyport-attack-bbush-positions* length) (-> *ctyport-package-positions* length))
  (when (-> this actor-group)
    (let ((v1-53 0))
      (dotimes (a0-35 (-> this actor-group 0 length))
        (let ((a1-36 (-> this actor-group 0 data a0-35 actor)))
          (when a1-36
            (set! (-> *ctyport-attack-bbush-positions* v1-53 pos quad) (-> a1-36 extra trans quad))
            (set! (-> *ctyport-attack-bbush-positions* v1-53 on-water?) #f)
            (set! (-> *ctyport-attack-bbush-positions* v1-53 probe?) #t)
            (+! v1-53 1)
            )
          )
        )
      (set! (-> *ctyport-attack-bbush-positions* length) v1-53)
      )
    )
  (set! (-> this package-positions) *ctyport-attack-bbush-positions*)
  (dotimes (v1-55 (-> this mine-layout length))
    (set! (-> this mine-layout v1-55 active?) #f)
    (dotimes (a0-42 (-> this mine-layout v1-55 num-mines))
      (set! (-> this mine-layout v1-55 stored-handles a0-42) (the-as handle #f))
      )
    )
  (none)
  )

;; definition for method 50 of type ctyport-attack-manager-bbush
(defmethod play-speech ((this ctyport-attack-manager-bbush) (arg0 int))
  (let ((v1-0 arg0))
    (if (or (zero? v1-0)
            (= v1-0 1)
            (= v1-0 2)
            (= v1-0 3)
            (= v1-0 4)
            (= v1-0 5)
            (= v1-0 6)
            (= v1-0 7)
            (= v1-0 8)
            (= v1-0 13)
            )
        (the-as int #f)
        (call-parent-method this arg0)
        )
    )
  )

;; failed to figure out what this is:
(defstate wait (ctyport-attack-manager-bbush)
  :virtual #t
  :code (behavior ()
    (set-setting! 'board #f 0.0 0)
    (send-event *target* 'end-mode 'board)
    (suspend)
    (while (or (not *target*)
               (not *spawn-actors*)
               (!= (status-of-level-and-borrows *level* 'lpatkcs #f) 'active)
               (focus-test? *target* board)
               )
      (if *target*
          (process-grab? *target* #f)
          )
      (suspend)
      )
    (process-release? *target*)
    (set-time-limit self)
    (ctyport-attack-setup)
    (set-setting! 'exclusive-load '((ignore all)) 0.0 0)
    (let ((a1-7 (new 'stack-no-clear 'array 'symbol 10)))
      (set! (-> a1-7 9) #f)
      (set! (-> a1-7 8) #f)
      (set! (-> a1-7 7) #f)
      (set! (-> a1-7 6) #f)
      (set! (-> a1-7 5) #f)
      (set! (-> a1-7 4) #f)
      (set! (-> a1-7 3) #f)
      (set! (-> a1-7 2) 'ctyinda)
      (set! (-> a1-7 1) 'ctyport)
      (set! (-> a1-7 0) 'ctywide-ff)
      (want-levels *load-state* a1-7)
      )
    (want-display-level *load-state* 'ctyport 'display)
    (want-display-level *load-state* 'ctyinda 'display)
    (set! (-> self current-package-index) 0)
    (let* ((a0-15 *setting-control*)
           (t9-11 (method-of-object a0-15 set-setting))
           (a2-5 'stop-boats?)
           (a3-2 #t)
           )
      (t9-11 a0-15 self a2-5 a3-2 0 0)
      (let ((t9-12 kill-by-type)
            (a0-16 barge)
            (a1-11 *active-pool*)
            )
        (t9-12 a0-16 a1-11)
        (apply-settings *setting-control*)
        (let* ((v1-34 (the-as entity-actor (entity-by-name "boat-manager-1")))
               (a0-19 (if v1-34
                          (-> v1-34 extra process)
                          )
                      )
               )
          (if a0-19
              (apply-alignment
                (the-as process-focusable a0-19)
                (the-as align-opts a1-11)
                (the-as transformq a2-5)
                (the-as vector a3-2)
                )
              )
          )
        )
      )
    (ctyport-attack-manager-method-45 self)
    (send-event *target* 'change-mode 'pilot-daxter (handle->process (-> self active-torpedo)))
    (go-virtual pickup-nukes)
    )
  )

;; definition for symbol *port-attack-bbush-fail-sphere*, type sphere
(define *port-attack-bbush-fail-sphere* (new 'static 'sphere :x 2651996.2 :y 31539.2 :z 5880709.0 :r 1.0))

;; definition for symbol *port-attack-bbush-fail-radius*, type float
(define *port-attack-bbush-fail-radius* 163840.0)

;; failed to figure out what this is:
(defstate pickup-nukes (ctyport-attack-manager-bbush)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (set! (-> self countdown-timer) (the-as handle (current-time)))
    )
  :trans (behavior ()
    (let ((t9-1 (-> (find-parent-state) trans)))
      (if t9-1
          (t9-1)
          )
      )
    (if (< (vector-vector-xz-distance (target-pos 0) *port-attack-bbush-fail-sphere*) *port-attack-bbush-fail-radius*)
        (send-event self 'fail)
        )
    (set! (-> *game-info* timer) (- (seconds 140) (- (current-time) (the-as int (-> self countdown-timer)))))
    (if (<= (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    )
  )

;; failed to figure out what this is:
(defstate head-to-wall (ctyport-attack-manager-bbush)
  :virtual #t
  :event ctyport-attack-manager-event-handler
  :enter (behavior ()
    (set! (-> self state-time) (-> *display* game-clock frame-counter))
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (let ((f30-0
            (fmax
              0.0
              (fmin 1.0 (* 0.0022222223 (the float (- (-> *display* game-clock frame-counter) (-> self state-time)))))
              )
            )
          )
      (set! (-> self clock-speed) (lerp 1.0 0.0 f30-0))
      (update-rates! (-> *display* entity-clock) (-> self clock-speed))
      (update-rates! (-> *display* target-clock) (-> self clock-speed))
      (set-setting! 'bg-r 'abs 1.0 0)
      (set-setting! 'bg-g 'abs 1.0 0)
      (set-setting! 'bg-b 'abs 1.0 0)
      (set-setting! 'bg-a 'abs f30-0 0)
      (when (= f30-0 1.0)
        (update-rates! (-> *display* entity-clock) 1.0)
        (update-rates! (-> *display* target-clock) 1.0)
        (let ((a1-10 (get-continue-by-name *game-info* "ctyport-bbush-port-4")))
          (when a1-10
            (start 'play a1-10)
            (go-virtual wait-award)
            )
          )
        )
      )
    )
  )

;; definition for method 51 of type ctyport-attack-manager-bbush
;; INFO: Used lq/sq
;; WARN: Return type mismatch quaternion vs object.
(defmethod ctyport-attack-manager-method-51 ((this ctyport-attack-manager-bbush) (arg0 traffic-object-spawn-params))
  (set! (-> arg0 position quad) (-> (new 'static 'vector :x 2492384.8 :y 34605.055 :z 6578958.5 :w 1.0) quad))
  (quaternion-copy! (-> arg0 rotation) (new 'static 'quaternion :x 0.0002 :y 0.6305 :z 0.0011 :w -0.7761))
  (let ((v1-1 (the-as entity-actor (entity-by-name "port-attack-bbush-1"))))
    (when v1-1
      (set! (-> arg0 position quad) (-> v1-1 extra trans quad))
      (quaternion-copy! (-> arg0 rotation) (-> v1-1 quat))
      )
    )
  )

;; definition for method 25 of type ctyport-attack-manager-bbush
(defmethod task-manager-method-25 ((this ctyport-attack-manager-bbush))
  (update-rates! (-> *display* entity-clock) 1.0)
  (update-rates! (-> *display* target-clock) 1.0)
  (call-parent-method this)
  (none)
  )

;; failed to figure out what this is:
(defstate wait-award (ctyport-attack-manager-bbush)
  :virtual #t
  :event task-manager-event-handler
  :code (behavior ()
    (while (or (not *target*) (not *spawn-actors*) (not (entity-by-name "burning-bush-36")))
      (if *target*
          (process-grab? *target* #f)
          )
      (suspend)
      )
    (remove-setting! 'bg-r)
    (remove-setting! 'bg-g)
    (remove-setting! 'bg-b)
    (remove-setting! 'bg-a)
    (remove-setting! 'music)
    (until (process-grab? *target* #f)
      (suspend)
      )
    (until (= (-> *setting-control* user-current bg-a) 0.0)
      (suspend)
      )
    (give *game-info* 'skill (the float (-> self info user-count)) (the-as handle #f))
    (until (process-release? *target*)
      (suspend)
      )
    (send-event self 'complete)
    (sleep-code)
    )
  )




