;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *cty-sniper-fight-kg-squad-member-settings*, type (inline-array kg-squad-member-settings)
(define *cty-sniper-fight-kg-squad-member-settings* (new 'static 'inline-array kg-squad-member-settings 4
                                                      (new 'static 'kg-squad-member-settings
                                                        :object-type (traffic-type roboguard)
                                                        :max-target-count #x7f
                                                        :enemy-type (traffic-type guard-a)
                                                        )
                                                      (new 'static 'kg-squad-member-settings
                                                        :object-type (traffic-type roboguard)
                                                        :max-target-count #x7f
                                                        :enemy-type (traffic-type guard-b)
                                                        )
                                                      (new 'static 'kg-squad-member-settings
                                                        :object-type (traffic-type flying-turret)
                                                        :max-target-count #x7f
                                                        :enemy-type (traffic-type metalhead-grunt)
                                                        )
                                                      (new 'static 'kg-squad-member-settings
                                                        :object-type (traffic-type spydroid)
                                                        :max-target-count #x7f
                                                        :target-count 7
                                                        :enemy-type (traffic-type metalhead-flitter)
                                                        )
                                                      )
        )

;; definition of type task-manager-city-sniper-fight
(deftype task-manager-city-sniper-fight (task-manager)
  ((sniper-turrets-marker-entity           entity-actor)
   (check-timer                            time-frame)
   (actor-group                            (pointer actor-group))
   (actor-group-count                      int32)
   (cur-group                              int8)
   (win-time                               time-frame)
   (music-started                          symbol)
   (torn-said-turret-rising                symbol)
   (torn-said-dodge                        symbol)
   (torn-said-battery-retract              symbol)
   (torn-speech-one-down                   symbol)
   (dax-said-bop-the-core                  symbol)
   (last-torn-speech-time                  time-frame)
   (battery-retractions-since-last-kaboom  int32)
   (minimap                                connection-minimap)
   )
  (:methods
    (task-manager-city-sniper-fight-method-32 (_type_) none)
    )
  )

;; definition for method 3 of type task-manager-city-sniper-fight
(defmethod inspect ((this task-manager-city-sniper-fight))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsniper-turrets-marker-entity: ~A~%" (-> this sniper-turrets-marker-entity))
  (format #t "~2Tcheck-timer: ~D~%" (-> this check-timer))
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Tcur-group: ~D~%" (-> this cur-group))
  (format #t "~2Twin-time: ~D~%" (-> this win-time))
  (format #t "~2Tmusic-started: ~A~%" (-> this music-started))
  (format #t "~2Ttorn-said-turret-rising: ~A~%" (-> this torn-said-turret-rising))
  (format #t "~2Ttorn-said-dodge: ~A~%" (-> this torn-said-dodge))
  (format #t "~2Ttorn-said-battery-retract: ~A~%" (-> this torn-said-battery-retract))
  (format #t "~2Ttorn-speech-one-down: ~A~%" (-> this torn-speech-one-down))
  (format #t "~2Tdax-said-bop-the-core: ~A~%" (-> this dax-said-bop-the-core))
  (format #t "~2Tlast-torn-speech-time: ~D~%" (-> this last-torn-speech-time))
  (format #t "~2Tbattery-retractions-since-last-kaboom: ~D~%" (-> this battery-retractions-since-last-kaboom))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (label cfg-7)
  this
  )

;; failed to figure out what this is:
(defstate active (task-manager-city-sniper-fight)
  :virtual #t
  :code (behavior ()
    (local-vars (v1-4 object) (v1-20 symbol))
    (until #f
      (when *debug-segment*
        )
      (set! v1-4
            (and (-> self actor-group)
                 (begin
                   (dotimes (v1-5 (-> self actor-group 0 length))
                     (when (not (logtest? (-> self actor-group 0 data v1-5 actor extra perm status) (entity-perm-status subtask-complete))
                                )
                       (if (-> self minimap)
                           (set! (-> self minimap position quad) (-> self actor-group 0 data v1-5 actor trans quad))
                           (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 15) (the-as int #f) (the-as vector #f) 0))
                           )
                       (set! v1-4 #f)
                       (goto cfg-14)
                       )
                     )
                   #t
                   )
                 )
            )
      (label cfg-14)
      (when v1-4
        (talker-spawn-func (-> *talker-speech* 94) *entity-pool* (target-pos 0) (the-as region #f))
        (until v1-20
          (suspend)
          (let ((v1-19 (-> self level bsp actors)))
            (when (nonzero? v1-19)
              (dotimes (a0-18 (-> v1-19 length))
                (let* ((a2-2 (-> v1-19 data a0-18 actor))
                       (a1-7 (if a2-2
                                 (-> a2-2 extra process)
                                 )
                             )
                       )
                  (when a1-7
                    (when (logtest? (-> (the-as process-drawable a1-7) draw status) (draw-control-status on-screen))
                      (set! v1-20 #f)
                      (goto cfg-28)
                      )
                    )
                  )
                )
              )
            )
          (set! v1-20 #t)
          (label cfg-28)
          )
        (send-event self 'complete)
        )
      (suspend)
      )
    #f
    )
  )

;; definition for method 30 of type task-manager-city-sniper-fight
;; WARN: disable def twice: 121. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
;; WARN: disable def twice: 181. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
;; WARN: disable def twice: 241. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
;; WARN: disable def twice: 53. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod taskman-event-handler ((this task-manager-city-sniper-fight) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-2 object))
  (case arg2
    (('start-music)
     (if (not (-> this music-started))
         (set-setting! 'music 'citysnpr 0.0 0)
         )
     (set-setting! 'pilot #f 0.0 0)
     (send-event *target* 'end-mode 'pilot)
     )
    (('turret-awakens)
     (when (and (< (+ (-> this last-torn-speech-time) (seconds 8)) (current-time))
                (not (-> this torn-said-turret-rising))
                )
       (set! (-> this torn-said-turret-rising) #t)
       (let ((v1-16 (rand-vu-int-range 0 2)))
         (cond
           ((zero? v1-16)
            (talker-spawn-func (-> *talker-speech* 143) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-16 1)
            (talker-spawn-func (-> *talker-speech* 144) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-16 2)
            (talker-spawn-func (-> *talker-speech* 145) *entity-pool* (target-pos 0) (the-as region #f))
            )
           )
         )
       (set! v0-2 (current-time))
       (set! (-> this last-torn-speech-time) (the-as time-frame v0-2))
       v0-2
       )
     )
    (('battery-extend)
     (when (and (not (-> this dax-said-bop-the-core)) (>= (-> this battery-retractions-since-last-kaboom) 2))
       (let ((v1-28 (rand-vu-int-range 0 1)))
         (cond
           ((zero? v1-28)
            (talker-spawn-func (-> *talker-speech* 156) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-28 1)
            (talker-spawn-func (-> *talker-speech* 157) *entity-pool* (target-pos 0) (the-as region #f))
            )
           )
         )
       (set! v0-2 #t)
       (set! (-> this dax-said-bop-the-core) (the-as symbol v0-2))
       v0-2
       )
     )
    (('battery-retract)
     (+! (-> this battery-retractions-since-last-kaboom) 1)
     (when (and (< (+ (-> this last-torn-speech-time) (seconds 8)) (current-time))
                (or (not (-> this torn-said-battery-retract)) (rand-vu-percent? 0.15))
                )
       (set! (-> this torn-said-battery-retract) #t)
       (let ((v1-41 (rand-vu-int-range 0 1)))
         (cond
           ((zero? v1-41)
            (talker-spawn-func (-> *talker-speech* 151) *entity-pool* (target-pos 0) (the-as region #f))
            )
           ((= v1-41 1)
            (talker-spawn-func (-> *talker-speech* 152) *entity-pool* (target-pos 0) (the-as region #f))
            )
           )
         )
       (set! v0-2 (current-time))
       (set! (-> this last-torn-speech-time) (the-as time-frame v0-2))
       v0-2
       )
     )
    (('turret-firing)
     (when (and (< (+ (-> this last-torn-speech-time) (seconds 8)) (current-time))
                (or (not (-> this torn-said-dodge)) (rand-vu-percent? 0.05))
                )
       (set! (-> this torn-said-dodge) #t)
       (talker-spawn-func (-> *talker-speech* 154) *entity-pool* (target-pos 0) (the-as region #f))
       (set! v0-2 (current-time))
       (set! (-> this last-torn-speech-time) (the-as time-frame v0-2))
       v0-2
       )
     )
    (('turret-killed)
     (set! (-> this battery-retractions-since-last-kaboom) 0)
     (when (not (-> this torn-speech-one-down))
       (set! (-> this torn-speech-one-down) #t)
       (talker-spawn-func (-> *talker-speech* 147) *entity-pool* (target-pos 0) (the-as region #f))
       )
     )
    (else
      ((method-of-type task-manager taskman-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 26 of type task-manager-city-sniper-fight
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod task-manager-method-26 ((this task-manager-city-sniper-fight))
  (local-vars (v1-10 object) (sv-16 res-tag))
  (when (not (-> this sniper-turrets-marker-entity))
    (let ((s5-0 (entity-by-name "cty-sniper-fight-turret-manager-1")))
      (set! sv-16 (new 'static 'res-tag))
      (let ((v1-3 (res-lump-data s5-0 'actor-groups pointer :tag-ptr (& sv-16))))
        (cond
          ((and v1-3 (nonzero? (-> sv-16 elt-count)))
           (set! (-> this actor-group) (the-as (pointer actor-group) v1-3))
           (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
           )
          (else
            (set! (-> this actor-group) (the-as (pointer actor-group) #f))
            (set! (-> this actor-group-count) 0)
            0
            )
          )
        )
      (set! v1-10 (and (-> this actor-group) (begin
                                               (dotimes (v1-11 (-> this actor-group 0 length))
                                                 (when (not (-> this actor-group 0 data v1-11))
                                                   (set! v1-10 #f)
                                                   (goto cfg-16)
                                                   )
                                                 )
                                               #t
                                               )
                       )
            )
      (label cfg-16)
      (if v1-10
          (set! (-> this sniper-turrets-marker-entity) (the-as entity-actor s5-0))
          )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate wait (task-manager-city-sniper-fight)
  :virtual #t
  :code (behavior ()
    (while (or (not *target*) (not *spawn-actors*))
      (suspend)
      )
    (set-time-limit self)
    (while (and (= (status-of-level-and-borrows *level* 'hiphog #t) 'active)
                (or (not (level-get-target-inside *level*)) (!= (-> (level-get-target-inside *level*) name) 'ctyport))
                )
      (suspend)
      )
    (set-setting! 'airlock #f 0.0 0)
    (go-virtual active)
    )
  )

;; definition for method 21 of type task-manager-city-sniper-fight
;; WARN: Return type mismatch connection vs none.
(defmethod set-time-limit ((this task-manager-city-sniper-fight))
  (set! (-> this sniper-turrets-marker-entity) #f)
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (set-setting! 'city-sound '(ctysnip1) 0.0 2)
  (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 15) (the-as int #f) (the-as vector #f) 0))
  (set! (-> this music-started) #f)
  (set-time! (-> this last-torn-speech-time))
  (set! (-> this torn-said-turret-rising) #f)
  (set! (-> this torn-said-dodge) #f)
  (set! (-> this torn-speech-one-down) #f)
  (set! (-> this torn-said-battery-retract) #f)
  (set! (-> this dax-said-bop-the-core) #f)
  (set! (-> this battery-retractions-since-last-kaboom) 0)
  (set-setting! 'kg-enemy-settings #f 0.0 *cty-sniper-fight-kg-squad-member-settings*)
  (none)
  )

;; definition for method 25 of type task-manager-city-sniper-fight
(defmethod task-manager-method-25 ((this task-manager-city-sniper-fight))
  '()
  ((method-of-type task-manager task-manager-method-25) this)
  (none)
  )

;; definition of type hud-cty-sniper-fight
(deftype hud-cty-sniper-fight (hud)
  ((buttons      (pointer actor-group))
   (num-buttons  int8)
   )
  (:methods
    (draw-hud-buttons (_type_ (pointer actor-group)) symbol)
    )
  )

;; definition for method 3 of type hud-cty-sniper-fight
(defmethod inspect ((this hud-cty-sniper-fight))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (format #t "~2Tbuttons: #x~X~%" (-> this buttons))
  (format #t "~2Tnum-buttons: ~D~%" (-> this num-buttons))
  (label cfg-4)
  this
  )

;; definition for method 27 of type hud-cty-sniper-fight
(defmethod draw-hud-buttons ((this hud-cty-sniper-fight) (arg0 (pointer actor-group)))
  (let ((s5-0 (length (-> arg0 0))))
    (set! (-> this num-buttons) s5-0)
    (set! (-> this buttons) arg0)
    (dotimes (s4-1 s5-0)
      (set! (-> this sprites s4-1 tid)
            (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xc0f)))
            )
      (set! (-> this sprites s4-1 scale-x) 1.0)
      (set! (-> this sprites s4-1 scale-y) 1.0)
      (set! (-> this sprites s4-1 flags) (hud-sprite-flags hsf3 hsf4))
      )
    )
  #f
  )

;; definition for method 15 of type hud-cty-sniper-fight
(defmethod draw ((this hud-cty-sniper-fight))
  (with-pp
    (if (odd? (-> this num-buttons))
        (set-hud-piece-position!
          (the-as hud-sprite (-> this sprites))
          (- 256 (* 48 (/ (+ (-> this num-buttons) -1) 2)))
          (- 32 (the int (* 48.0 (-> this offset))))
          )
        (set-hud-piece-position!
          (the-as hud-sprite (-> this sprites))
          (- 232 (* 48 (+ (/ (-> this num-buttons) 2) -1)))
          (- 32 (the int (* 48.0 (-> this offset))))
          )
        )
    (let ((s5-0 1))
      (while (< s5-0 (-> this num-buttons))
        (set-as-offset-from! (-> this sprites s5-0) (the-as vector4w (-> this sprites)) (* 48 s5-0) 0)
        (+! s5-0 1)
        )
      )
    (let ((s2-0 0)
          (s4-0 0)
          (s5-1 0)
          (s3-0 (mod (current-time) 150))
          )
      (dotimes (s1-0 (-> this num-buttons))
        (let* ((a0-8 (-> this buttons 0 data s1-0 actor))
               (v1-15 (if a0-8
                          (-> a0-8 extra process)
                          )
                      )
               )
          (when v1-15
            (let ((a1-7 (new 'stack-no-clear 'event-message-block)))
              (set! (-> a1-7 from) (process->ppointer pp))
              (set! (-> a1-7 num-params) 0)
              (set! (-> a1-7 message) 'get-colormode)
              (case (send-event-function (handle->process (-> (the-as cty-sniper-button-top v1-15) colormode)) a1-7)
                ((1)
                 (+! s2-0 1)
                 )
                ((2)
                 (+! s4-0 1)
                 )
                (else
                  (+! s5-1 1)
                  )
                )
              )
            )
          )
        )
      (let ((s1-1 0))
        (while (> s2-0 0)
          (set! (-> this sprites s1-1 tid)
                (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :page #xc0f)))
                )
          (+! s1-1 1)
          (+! s2-0 -1)
          )
        (while (> s4-0 0)
          (set! (-> this sprites s1-1 tid)
                (if (< s3-0 75)
                    (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xc0f)))
                    (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :page #xc0f)))
                    )
                )
          (+! s1-1 1)
          (+! s4-0 -1)
          )
        (while (> s5-1 0)
          (set! (-> this sprites s1-1 tid)
                (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xc0f)))
                )
          (+! s1-1 1)
          (+! s5-1 -1)
          )
        )
      )
    ((method-of-type hud draw) this)
    (none)
    )
  )

;; definition for method 17 of type hud-cty-sniper-fight
;; WARN: Return type mismatch sound-id vs none.
(defmethod init-callback ((this hud-cty-sniper-fight))
  (set! (-> this level) (level-get *level* 'lctysnpr))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-center) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-sniper-turret-explosion
  :id 1465
  :duration (seconds 4)
  :flags (sp0 sp5)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 4834 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 4835 :period (seconds 30) :length (seconds 0.035))
    (sp-item 4836 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 4837 :period (seconds 30) :length (seconds 0.035))
    (sp-item 4838 :period (seconds 30) :length (seconds 0.035))
    (sp-item 4839 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 4840 :period (seconds 30) :length (seconds 0.167))
    (sp-item 4841 :period (seconds 30) :length (seconds 0.5))
    (sp-item 4842 :flags (sp3) :binding 4833)
    (sp-item 4842 :flags (sp3) :binding 4833)
    (sp-item 4842 :flags (sp3) :binding 4833)
    (sp-item 4842 :flags (sp3) :binding 4833)
    (sp-item 4842 :flags (sp3) :binding 4833)
    (sp-item 4833 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 4833 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 4833 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 4833 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 4833 :flags (sp2) :period (seconds 4) :length (seconds 2))
    )
  )

;; failed to figure out what this is:
(defpart 4834
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 128.0)
    (:b 60.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

;; failed to figure out what this is:
(defpart 4835
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 0.8) (meters 1.2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0 20.0)
    (:a 128.0)
    (:vel-y (meters 0.16666667) (meters 0.33333334))
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.9)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4836
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 160.0)
    (:b 40.0 20.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.22857143)
    (:fade-b -0.08571429)
    (:fade-a -0.36571428 -0.36571428)
    (:friction 0.93)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4837
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 8.0 8.0)
    (:g :copy r)
    (:b :copy r)
    (:a 64.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.75)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4838
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 30.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 1.0)
    (:g 1.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.05))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-color* (new 'static 'curve-color-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'inline-array vector 4
                                         (new 'static 'vector :x 70.0 :y 70.0 :z 70.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         )
                                       :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 64.0 :y 32.0 :z 33.0 :w 34.0)
                                       :one-over-x-deltas (new 'static 'vector :x -32.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-dust-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.7 :z -1.0 :w -2.0)
                                       :ys (new 'static 'vector :y 1.0 :w 1.0)
                                       :one-over-x-deltas (new 'static 'vector :x 1.4285715 :y -3.3333333 :z 1.0 :w 1.0)
                                       )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-dust-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                         :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                         :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                         )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-dust-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                         :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                         :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                         )
          )
    )

;; definition for symbol *part-sniper-turret-explosion-dust-in-curve-settings*, type particle-curve-settings
(define *part-sniper-turret-explosion-dust-in-curve-settings* (new 'static 'particle-curve-settings
                                                                :lifetime-base (seconds 0.5)
                                                                :lifetime-offset (seconds 1)
                                                                :flags (particle-curve-flags pcf0)
                                                                )
        )

;; failed to figure out what this is:
(set! (-> *part-id-table* 4838 init-specs 14 initial-valuef)
      (the-as float *part-sniper-turret-explosion-dust-in-curve-settings*)
      )

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* color-start) *range-ftexplo-dust-color*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* alpha-start) *range-ftexplo-dust-alpha*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* scale-x-start) *range-ftexplo-dust-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* scale-y-start) *range-ftexplo-dust-scale-y*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* r-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* g-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* b-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* a-scalar) *curve-ftexplo-dust-alpha*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* scale-x-scalar) *curve-ftexplo-dust-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-dust-in-curve-settings* scale-y-scalar) *curve-ftexplo-dust-scale-y*)

;; failed to figure out what this is:
(defpart 4840
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.75)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4841
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 8.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags ())
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-color* (new 'static 'curve-color-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'inline-array vector 4
                                    (new 'static 'vector :x 255.0 :y 200.0 :z 100.0 :w 128.0)
                                    (new 'static 'vector :x 255.0 :y 200.0 :z 100.0 :w 128.0)
                                    (new 'static 'vector :x 255.0 :y 200.0 :z 100.0 :w 128.0)
                                    (new 'static 'vector :x 255.0 :y 200.0 :z 100.0 :w 128.0)
                                    )
                                  :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-alpha* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                  :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-scale-x* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 5.0 :y 7.0 :z 8.0 :w 9.0)
                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-scale-y* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 5.0 :y 7.0 :z 8.0 :w 9.0)
                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-alpha* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                  :ys (new 'static 'vector :y 1.0 :z 0.8)
                                  :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                  )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-scale-x* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                    :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                    )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-scale-y* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                    :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                    )
          )
    )

;; definition for symbol *part-sniper-turret-explosion-texture-curve-settings*, type particle-curve-settings
(define *part-sniper-turret-explosion-texture-curve-settings* (new 'static 'particle-curve-settings
                                                                :lifetime-base (seconds 0.1)
                                                                :lifetime-offset (seconds 0.6)
                                                                :flags (particle-curve-flags pcf0)
                                                                )
        )

;; failed to figure out what this is:
(set! (-> *part-id-table* 4841 init-specs 16 initial-valuef)
      (the-as float *part-sniper-turret-explosion-texture-curve-settings*)
      )

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* color-start) *range-ftexplo-color*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* alpha-start) *range-ftexplo-alpha*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* scale-x-start) *range-ftexplo-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* scale-y-start) *range-ftexplo-scale-y*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* r-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* g-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* b-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* a-scalar) *curve-ftexplo-alpha*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* scale-x-scalar) *curve-ftexplo-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-sniper-turret-explosion-texture-curve-settings* scale-y-scalar) *curve-ftexplo-scale-y*)

;; failed to figure out what this is:
(defpart 4839
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 4842
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 200.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:scalevel-x (meters -0.02) (meters -0.02))
    (:rotvel-z (degrees -300) (degrees 600))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00066666666) (meters -0.001))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 70))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 4833
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 1.0)
    (:scale-x (meters 0.00024414062) (meters 0.00012207031))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 200.0)
    (:b 100.0)
    (:a 128.0)
    (:fade-r -1.7)
    (:fade-g -1.3333334)
    (:fade-b -1.0)
    (:fade-a -0.36571428 -0.36571428)
    (:accel-y (meters 0) (meters -0.00033333333))
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2))
    )
  )

;; failed to figure out what this is:
(defpart 4843
  :init-specs ((:texture (common-white common))
    (:num 10.0 1.0)
    (:x (meters 0))
    (:y (meters 0))
    (:z (meters 0))
    (:scale-x (meters 1))
    (:rot-x (degrees 90))
    (:rot-y (degrees 0))
    (:rot-z (degrees 0))
    (:scale-y (meters 0.1))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:accel-y (meters -0.00033333333) (meters -0.001))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-14))
    )
  )

;; failed to figure out what this is:
(defpart 4844
  :init-specs ((:texture (gun-blue-beam level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 16))
    (:r 32.0)
    (:g 32.0)
    (:b 128.0)
    (:a 64.0)
    (:scalevel-x (meters -0.0033333334))
    (:fade-a -1.6)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    )
  )

;; failed to figure out what this is:
(defpart 4845
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1))
    (:rot-x (degrees 4.5))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 0.0)
    (:b 128.0)
    (:a 16.0)
    (:omega (degrees 6763.5))
    (:fade-a -0.15)
    (:timer (seconds 0.085))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    )
  )

;; failed to figure out what this is:
(defpart 4846
  :init-specs ((:texture (glow level-default-sprite))
    (:num 0.0)
    (:scale-x (meters 0.3) (meters 0.3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 64.0 32.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    )
  )

;; failed to figure out what this is:
(defpart 4847
  :init-specs ((:texture (colorflash level-default-sprite))
    (:num 1.0 10.0)
    (:z (meters 0) (meters -4))
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 32.0)
    (:scalevel-x (meters -0.006666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -1.6)
    (:fade-g -1.6)
    (:fade-b 1.6)
    (:fade-a -0.375)
    (:timer (seconds 0.267))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 4848
  :init-specs ((:texture (gun-enemy-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y (meters 2))
    (:r 0.0)
    (:g 0.0)
    (:b 255.0)
    (:a 255.0)
    (:fade-a -2.56)
    (:timer (seconds 0.167))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 left-multiply-quat))
    )
  )

;; failed to figure out what this is:
(defpart 4849
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-x (meters 0.10666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -5.1)
    (:timer (seconds 0.167))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-cty-sniper-turret-shot-hit-object
  :id 1466
  :duration (seconds 1)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 4850 :flags (sp3)) (sp-item 4851 :flags (sp7) :period (seconds 4) :length (seconds 0.1)))
  )

;; failed to figure out what this is:
(defpart 4850
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-x (degrees 90))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:fade-a -0.21333334)
    (:timer (seconds 0.035))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 glow))
    (:userdata 16384.0)
    )
  )

;; failed to figure out what this is:
(defpart 4851
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 2))
    (:rot-x 4)
    (:scale-y (meters 0.15))
    (:r 0.0)
    (:g 0.0 64.0)
    (:b 255.0)
    (:a 128.0 128.0)
    (:omega (degrees 0.0225))
    (:vel-z (meters 0.33333334) (meters 0.16666667))
    (:fade-b -0.21333334 -0.21333334)
    (:fade-a -0.21333334 -0.21333334)
    (:accel-y (meters -0.0016666667))
    (:friction 0.8 0.02)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees -10) (degrees 20))
    (:conerot-y (degrees -10) (degrees 20))
    (:rotate-x (degrees -45))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-cty-sniper-turret-shot-hit
  :id 1467
  :duration (seconds 1)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 4852 :flags (sp3 sp7)))
  )

;; failed to figure out what this is:
(defpart 4852
  :init-specs ((:texture (laser-hit2 level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 1.5) (meters 0.66))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 30.0)
    (:b 255.0)
    (:a 255.0)
    (:vel-z (meters -0.033333335))
    (:scalevel-x (meters 0.26666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -4.25)
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-cty-sniper-turret-shot-die
  :id 1468
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 249))
  )

;; definition of type cty-sniper-turret-shot
(deftype cty-sniper-turret-shot (projectile)
  ((hit-actor?  symbol)
   (tail-pos    vector  :inline)
   )
  )

;; definition for method 3 of type cty-sniper-turret-shot
(defmethod inspect ((this cty-sniper-turret-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Thit-actor?: ~A~%" (-> this hit-actor?))
  (format #t "~2Ttail-pos: #<vector @ #x~X>~%" (-> this tail-pos))
  (label cfg-4)
  this
  )

;; definition for method 37 of type cty-sniper-turret-shot
(defmethod deal-damage! ((this cty-sniper-turret-shot) (arg0 process) (arg1 event-message-block))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

;; definition for method 24 of type cty-sniper-turret-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-24 ((this cty-sniper-turret-shot))
  (draw-beam (-> *part-id-table* 4848) (-> this tail-pos) (-> this starting-dir) #f)
  (let* ((a0-3 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this starting-dir) 2048.0))
         (v1-2 (vector+! (new 'stack-no-clear 'vector) (-> this tail-pos) a0-3))
         (t9-2 sp-launch-particles-var)
         (a0-4 *sp-particle-system-2d*)
         (a1-4 (-> *part-id-table* 4849))
         (a2-2 *launch-matrix*)
         )
    (set! (-> a2-2 trans quad) (-> v1-2 quad))
    (t9-2 a0-4 a1-4 a2-2 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
    )
  0
  (none)
  )

;; definition for method 25 of type cty-sniper-turret-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this cty-sniper-turret-shot))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((gp-0 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) gp-0 a1-0))
           (f30-0 (vector-length s5-1))
           )
      (let ((s4-0 (new 'stack-no-clear 'vector)))
        (let ((v1-4 a1-0))
          (let ((a0-2 s5-1))
            (let ((a2-1 0.8))
              (.mov vf7 a2-1)
              )
            (.lvf vf5 (&-> a0-2 quad))
            )
          (.lvf vf4 (&-> v1-4 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s4-0 quad) vf6)
        (let ((f28-0 (-> *part-id-table* 4844 init-specs 4 initial-valuef)))
          (set! (-> *part-id-table* 4844 init-specs 4 initial-valuef) (vector-length s5-1))
          (draw-beam (-> *part-id-table* 4844) a1-0 s5-1 #f)
          (set! (-> *part-id-table* 4844 init-specs 4 initial-valuef) f28-0)
          )
        (vector-normalize! s5-1 1.0)
        (launch-particles (-> *part-id-table* 4845) s4-0)
        (launch-particles (-> *part-id-table* 4846) s4-0)
        )
      (let ((s4-1 (new 'stack-no-clear 'matrix))
            (f28-1 (* 0.000015258789 f30-0))
            (f30-1 (-> *part-id-table* 4847 init-specs 3 initial-valuef))
            )
        (-> *part-id-table* 4847 init-specs 4 initial-valuef)
        (forward-up->inv-matrix s4-1 s5-1 *up-vector*)
        (set! (-> s4-1 trans quad) (-> gp-0 quad))
        (set! (-> *part-id-table* 4847 init-specs 3 initial-valuef) (* f28-1 f30-1))
        (launch-particles (-> *part-id-table* 4847) s4-1 :origin-is-matrix #t)
        (set! (-> *part-id-table* 4847 init-specs 3 initial-valuef) f30-1)
        )
      )
    0
    (none)
    )
  )

;; definition for method 26 of type cty-sniper-turret-shot
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-26 ((this cty-sniper-turret-shot))
  (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this tail-pos)))
        (s3-0
          (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this tail-pos) (-> this root trans)) 2048.0)
          )
        (gp-0 (new 'stack-no-clear 'matrix))
        )
    (forward-up->inv-matrix gp-0 s4-1 *up-vector*)
    (vector+! (-> gp-0 trans) (-> this root trans) s3-0)
    (cond
      ((-> this hit-actor?)
       (if (logtest? (-> *part-group-id-table* 1466 flags) (sp-group-flag sp13))
           (part-tracker-spawn
             part-tracker-subsampler
             :to *entity-pool*
             :group (-> *part-group-id-table* 1466)
             :mat-joint gp-0
             )
           (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1466) :mat-joint gp-0)
           )
       )
      ((logtest? (-> *part-group-id-table* 1467 flags) (sp-group-flag sp13))
       (part-tracker-spawn
         part-tracker-subsampler
         :to *entity-pool*
         :group (-> *part-group-id-table* 1467)
         :mat-joint gp-0
         )
       )
      (else
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1467) :mat-joint gp-0)
        )
      )
    )
  0
  (none)
  )

;; definition for method 28 of type cty-sniper-turret-shot
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this cty-sniper-turret-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "tank-fire")
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "laser-ricochets")
       )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate impact (cty-sniper-turret-shot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type projectile impact) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (when *traffic-manager*
      (let ((v1-5 (new 'stack-no-clear 'traffic-danger-info)))
        (set! (-> v1-5 sphere quad) (-> self root trans quad))
        (set! (-> v1-5 sphere r) 40960.0)
        (set! (-> v1-5 velocity quad) (-> self root transv quad))
        (set! (-> v1-5 notify-radius) 122880.0)
        (set! (-> v1-5 danger-level) 1.0)
        (set! (-> v1-5 decay-rate) 0.0)
        (set! (-> v1-5 flags) (the-as uint 1))
        (set! (-> v1-5 danger-type) (the-as uint 0))
        (set! (-> v1-5 handle) (the-as handle #f))
        (send-event *traffic-manager* 'add-danger-sphere v1-5)
        )
      )
    )
  )

;; definition for function cty-sniper-turret-shot-move
;; WARN: Return type mismatch int vs none.
(defun cty-sniper-turret-shot-move ((arg0 cty-sniper-turret-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 65536.0 f0-0)
          (vector-normalize! s4-0 65536.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

;; definition for method 38 of type cty-sniper-turret-shot
(defmethod made-impact? ((this cty-sniper-turret-shot))
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a0-1 t1-0))
      (set! (-> a0-1 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a0-1 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a0-1 ignore-process0) this)
      (set! (-> a0-1 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a0-1 ignore-pat) (-> v1-0 pat-ignore-mask))
      (set! (-> a0-1 action-mask) (collide-action solid))
      )
    (when (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -6144.0 0.0 -2048.0 t1-0)
      (if (logtest? (-> this root status) (collide-status touch-actor))
          (set! (-> this hit-actor?) #t)
          )
      #t
      )
    )
  )

;; definition for method 30 of type cty-sniper-turret-shot
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this cty-sniper-turret-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd jak bot crate obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid deadly))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with) (collide-spec jak bot crate hit-by-others-list player-list))
      (set! (-> v1-15 prim-core action) (collide-action deadly))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

;; definition for method 31 of type cty-sniper-turret-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this cty-sniper-turret-shot))
  (set! (-> this hit-actor?) #f)
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (set! (-> this attack-mode) 'fac-robotank-shot)
  (set! (-> this max-speed) 819200.0)
  (set! (-> this move) cty-sniper-turret-shot-move)
  (set! (-> this update-velocity) projectile-update-velocity-space-wars)
  (set! (-> this timeout) (seconds 0.5))
  (set! (-> this damage) 2.0)
  (set! (-> this vehicle-damage-factor) 0.5)
  (logior! (-> this options) (projectile-options po13))
  (set-gravity-length (-> this root dynam) 573440.0)
  0
  (none)
  )

;; definition for function spawn-cty-sniper-turret-projectile
;; INFO: Used lq/sq
;; WARN: Return type mismatch (pointer process) vs (pointer cty-sniper-turret-shot).
(defun spawn-cty-sniper-turret-projectile ((arg0 cty-sniper-turret) (arg1 vector) (arg2 vector) (arg3 float) (arg4 vector))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg2 arg1)))
      (set! (-> gp-0 ent) (-> arg0 entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 notify-handle) (process->handle arg0))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle arg0))
      (let* ((a0-13 *game-info*)
             (a2-12 (+ (-> a0-13 attack-id) 1))
             )
        (set! (-> a0-13 attack-id) a2-12)
        (set! (-> gp-0 attack-id) a2-12)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (if arg4
          (set! (-> gp-0 pos quad) (-> arg4 quad))
          (set! (-> gp-0 pos quad) (-> arg1 quad))
          )
      (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
      )
    (the-as
      (pointer cty-sniper-turret-shot)
      (spawn-projectile cty-sniper-turret-shot gp-0 arg0 *default-dead-pool*)
      )
    )
  )

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 49) (new 'static 'lightning-spec
                                          :name "lightning-trail-cty-sniper-turret-cty-sniper-turret"
                                          :flags (lightning-spec-flags lsf1)
                                          :rand-func #x2
                                          :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 120.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.6
                                          :num-points 16
                                          :box-size 2048.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 1638.4
                                          :duration -1.0
                                          :sound #f
                                          )
      )

;; failed to figure out what this is:
(set! (-> *lightning-spec-id-table* 50) (new 'static 'lightning-spec
                                          :name "lightning-fractal-cty-sniper-turret-cty-sniper-turret"
                                          :flags (lightning-spec-flags lsf1)
                                          :start-color (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80)
                                          :fade-to-color (new 'static 'rgba :r #xbf :b #x8f :a #x5)
                                          :fade-start-factor 0.2
                                          :fade-time 120.0
                                          :texture (new 'static 'texture-id :index #x3f :page #x4)
                                          :reduction 0.6
                                          :num-points 16
                                          :box-size 2048.0
                                          :merge-factor 0.5
                                          :merge-count 2
                                          :radius 1638.4
                                          :duration -1.0
                                          :sound #f
                                          )
      )

;; failed to figure out what this is:
(defpart 4853
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 0.8) (meters 0.2))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees -17) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 32.0 96.0)
    (:g :copy r)
    (:b 255.0)
    (:a 32.0 16.0)
    (:omega (degrees 2265.75))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 819.2)
    )
  )

;; failed to figure out what this is:
(defpart 4854
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2.5) (meters 1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees -17))
    (:scale-y :copy scale-x)
    (:r 0.0 64.0)
    (:g :copy r)
    (:b 255.0)
    (:a 16.0 16.0)
    (:omega (degrees 2265.75))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 819.2)
    )
  )

;; failed to figure out what this is:
(defpartgroup part-cty-sniper-turret-lightning-glow
  :id 1469
  :duration (seconds 0.017)
  :linger-duration (seconds 0.035)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 4854 :fade-after (meters 100) :flags (sp6)) (sp-item 4853 :fade-after (meters 100) :flags (sp6)))
  )

;; definition of type cty-sniper-turret
(deftype cty-sniper-turret (process-focusable)
  ((los                           los-control             :inline)
   (reticle                       handle)
   (tank-quat                     quaternion              :inline)
   (rotate-quat                   quaternion              :inline)
   (rotate-rate                   float)
   (rotate-mult                   float)
   (shot-range                    float)
   (fov-mult                      float)
   (offset                        vector                  :inline)
   (sight-pos                     vector                  :inline)
   (firing-sight-pos              vector                  :inline)
   (gun-timer                     time-frame)
   (gun-elev-jmod                 joint-mod-rotate-world  :inline)
   (gun-elev-joint-index          int32)
   (gun-elev-desired-rotation     quaternion              :inline)
   (gun-azimuth-jmod              joint-mod-rotate-world  :inline)
   (gun-azimuth-joint-index       int32)
   (gun-azimuth-desired-rotation  quaternion              :inline)
   (gun-elev                      float)
   (gun-elev-cam                  float)
   (gun-aims-from-joint           int32)
   (gun-spread                    float)
   (gun-current-aim-location      vector                  :inline)
   (gun-elbow-jmod                joint-mod-rotate-local  :inline)
   (gun-shoulder-jmod             joint-mod-rotate-local  :inline)
   (pos-cam-offset                vector                  :inline)
   (flags                         cty-sniper-turret-flag)
   (turn-sound-id                 sound-id)
   (h-reticle-strip               handle)
   (minimap                       connection-minimap)
   (actor-group                   (pointer actor-group))
   (actor-group-count             int32)
   (hud-buttons                   handle)
   )
  (:state-methods
    waiting-for-batteries
    asleep
    (ready symbol)
    fire
    locked-on
    die
    explode
    )
  (:methods
    (cty-sniper-turret-method-35 (_type_) none)
    (fire-shot (_type_) (pointer process))
    (cty-sniper-turret-method-37 (_type_ vector float) symbol)
    (cty-sniper-turret-method-38 (_type_ vector quaternion vector float) object)
    (cty-sniper-turret-method-39 (_type_) symbol)
    (cty-sniper-turret-method-40 (_type_) symbol)
    (cty-sniper-turret-method-41 (_type_) symbol)
    )
  )

;; definition for method 3 of type cty-sniper-turret
(defmethod inspect ((this cty-sniper-turret))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tlos: #<los-control @ #x~X>~%" (-> this los))
  (format #t "~2Treticle: ~D~%" (-> this reticle))
  (format #t "~2Ttank-quat: #<quaternion @ #x~X>~%" (-> this tank-quat))
  (format #t "~2Trotate-quat: #<quaternion @ #x~X>~%" (-> this rotate-quat))
  (format #t "~2Trotate-rate: ~f~%" (-> this rotate-rate))
  (format #t "~2Trotate-mult: ~f~%" (-> this rotate-mult))
  (format #t "~2Tshot-range: ~f~%" (-> this shot-range))
  (format #t "~2Tfov-mult: ~f~%" (-> this fov-mult))
  (format #t "~2Toffset: #<vector @ #x~X>~%" (-> this offset))
  (format #t "~2Tsight-pos: #<vector @ #x~X>~%" (-> this sight-pos))
  (format #t "~2Tfiring-sight-pos: #<vector @ #x~X>~%" (-> this firing-sight-pos))
  (format #t "~2Tgun-timer: ~D~%" (-> this gun-timer))
  (format #t "~2Tgun-elev-jmod: #<joint-mod-rotate-world @ #x~X>~%" (-> this gun-elev-jmod))
  (format #t "~2Tgun-elev-joint-index: ~D~%" (-> this gun-elev-joint-index))
  (format #t "~2Tgun-elev-desired-rotation: #<quaternion @ #x~X>~%" (-> this gun-elev-desired-rotation))
  (format #t "~2Tgun-azimuth-jmod: #<joint-mod-rotate-world @ #x~X>~%" (-> this gun-azimuth-jmod))
  (format #t "~2Tgun-azimuth-joint-index: ~D~%" (-> this gun-azimuth-joint-index))
  (format #t "~2Tgun-azimuth-desired-rotation: #<quaternion @ #x~X>~%" (-> this gun-azimuth-desired-rotation))
  (format #t "~2Tgun-elev: ~f~%" (-> this gun-elev))
  (format #t "~2Tgun-elev-cam: ~f~%" (-> this gun-elev-cam))
  (format #t "~2Tgun-aims-from-joint: ~D~%" (-> this gun-aims-from-joint))
  (format #t "~2Tgun-spread: ~f~%" (-> this gun-spread))
  (format #t "~2Tgun-current-aim-location: #<vector @ #x~X>~%" (-> this gun-current-aim-location))
  (format #t "~2Tgun-elbow-jmod: #<joint-mod-rotate-local @ #x~X>~%" (-> this gun-elbow-jmod))
  (format #t "~2Tgun-shoulder-jmod: #<joint-mod-rotate-local @ #x~X>~%" (-> this gun-shoulder-jmod))
  (format #t "~2Tpos-cam-offset: #<vector @ #x~X>~%" (-> this pos-cam-offset))
  (format #t "~2Tflags: ~D~%" (-> this flags))
  (format #t "~2Tturn-sound-id: ~D~%" (-> this turn-sound-id))
  (format #t "~2Th-reticle-strip: ~D~%" (-> this h-reticle-strip))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Thud-buttons: ~D~%" (-> this hud-buttons))
  (label cfg-7)
  this
  )

;; definition of type simple-prim-turret-reticle
(deftype simple-prim-turret-reticle (simple-prim)
  ((h-parent-turret  handle)
   )
  )

;; definition for method 3 of type simple-prim-turret-reticle
(defmethod inspect ((this simple-prim-turret-reticle))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type simple-prim inspect)))
    (t9-0 this)
    )
  (format #t "~2Th-parent-turret: ~D~%" (-> this h-parent-turret))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate active (simple-prim-turret-reticle)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('die)
       (go empty-state)
       )
      )
    )
  )

;; definition for method 22 of type simple-prim-turret-reticle
;; WARN: Return type mismatch int vs none.
(defmethod strip-setup ((this simple-prim-turret-reticle))
  (cond
    ((logtest? (-> (the-as cty-sniper-turret (-> this h-parent-turret process 0)) flags)
               (cty-sniper-turret-flag cst7)
               )
     (set! (-> this strip num-verts) (the-as uint 4))
     (set! (-> this strip alpha) *simple-prim-additive*)
     (set! (-> this strip data0) (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always)))
     (set! (-> this strip adnops 0 cmds) (gs-reg64 test-1))
     (set! (-> this strip bucket) (bucket-id generic-sprite-1))
     (set! (-> this strip sink) (the-as uint 65))
     )
    (else
      (set! (-> this strip num-verts) (the-as uint 0))
      0
      )
    )
  (none)
  )

;; definition for method 25 of type simple-prim-turret-reticle
;; WARN: Return type mismatch int vs rgba.
(defmethod get-color ((this simple-prim-turret-reticle))
  (the-as rgba #x20808070)
  )

;; definition for method 23 of type simple-prim-turret-reticle
(defmethod get-alpha ((this simple-prim-turret-reticle))
  32
  )

;; definition of type cty-sniper-turret-reticle
(deftype cty-sniper-turret-reticle (process)
  ((ring-inner                prim-strip)
   (ring-middle               prim-strip)
   (ring-outer                prim-strip)
   (ring-inner-radius         float)
   (ring-middle-radius        float)
   (ring-outer-radius         float)
   (h-parent-turret           handle)
   (root                      collide-shape)
   (wander-offset             vector  2 :inline)
   (wander-offset-reset-time  time-frame)
   (inner-ring-offset         float)
   (middle-ring-offset        float)
   (outer-ring-offset         float)
   (ring-scale-multiplier     float)
   (reticle-looping-sound     sound-id)
   (reticle-lockon-sound      sound-id)
   (current-color             rgba)
   (current-alpha             uint8)
   (lockon-start-time         time-frame)
   (flags                     cty-sniper-turret-reticle-flag)
   )
  (:state-methods
    idle
    lock
    )
  (:methods
    (gen-prim-verts (_type_) none)
    (init-strips (_type_) none)
    (get-alpha (_type_) uint)
    (cty-sniper-turret-reticle-method-19 (_type_) none)
    (get-curr-color (_type_) rgba)
    )
  )

;; definition for method 3 of type cty-sniper-turret-reticle
(defmethod inspect ((this cty-sniper-turret-reticle))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Tring-inner: ~A~%" (-> this ring-inner))
  (format #t "~2Tring-middle: ~A~%" (-> this ring-middle))
  (format #t "~2Tring-outer: ~A~%" (-> this ring-outer))
  (format #t "~2Tring-inner-radius: ~f~%" (-> this ring-inner-radius))
  (format #t "~2Tring-middle-radius: ~f~%" (-> this ring-middle-radius))
  (format #t "~2Tring-outer-radius: ~f~%" (-> this ring-outer-radius))
  (format #t "~2Th-parent-turret: ~D~%" (-> this h-parent-turret))
  (format #t "~2Troot: ~A~%" (-> this root))
  (format #t "~2Twander-offset[2] @ #x~X~%" (-> this wander-offset))
  (format #t "~2Twander-offset-reset-time: ~D~%" (-> this wander-offset-reset-time))
  (format #t "~2Tinner-ring-offset: ~f~%" (-> this inner-ring-offset))
  (format #t "~2Tmiddle-ring-offset: ~f~%" (-> this middle-ring-offset))
  (format #t "~2Touter-ring-offset: ~f~%" (-> this outer-ring-offset))
  (format #t "~2Tring-scale-multiplier: ~f~%" (-> this ring-scale-multiplier))
  (format #t "~2Treticle-looping-sound: ~D~%" (-> this reticle-looping-sound))
  (format #t "~2Treticle-lockon-sound: ~D~%" (-> this reticle-lockon-sound))
  (format #t "~2Tcurrent-color: ~D~%" (-> this current-color))
  (format #t "~2Tcurrent-alpha: ~D~%" (-> this current-alpha))
  (format #t "~2Tlockon-start-time: ~D~%" (-> this lockon-start-time))
  (format #t "~2Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition for method 19 of type cty-sniper-turret-reticle
;; WARN: Return type mismatch quaternion vs none.
(defmethod cty-sniper-turret-reticle-method-19 ((this cty-sniper-turret-reticle))
  (set! (-> this root) (the-as collide-shape (new 'process 'trsq)))
  (quaternion-identity! (-> this root quat))
  (none)
  )

;; definition for function cty-sniper-turret-reticle-init-by-other
;; INFO: Used lq/sq
(defbehavior cty-sniper-turret-reticle-init-by-other cty-sniper-turret-reticle ((arg0 vector) (arg1 vector) (arg2 texture-id))
  (cty-sniper-turret-reticle-method-19 self)
  (set! (-> self root trans quad) (-> arg0 quad))
  (set! (-> self root scale quad) (-> arg1 quad))
  (matrix->quaternion (-> self root quat) (math-camera-matrix))
  (set! (-> self wander-offset 0 quad) (the-as uint128 0))
  (set! (-> self wander-offset 1 quad) (the-as uint128 0))
  (set! (-> self ring-inner) (new 'process 'prim-strip 4 arg2 (the-as string #f)))
  (set! (-> self ring-middle) (new 'process 'prim-strip 4 arg2 (the-as string #f)))
  (set! (-> self ring-outer) (new 'process 'prim-strip 4 arg2 (the-as string #f)))
  (set! (-> self ring-scale-multiplier) 1.0)
  (set! (-> self flags) (cty-sniper-turret-reticle-flag))
  (set! (-> self inner-ring-offset) 0.0)
  (set! (-> self middle-ring-offset) 0.0)
  (set! (-> self outer-ring-offset) 0.0)
  (set! (-> self reticle-looping-sound) (new-sound-id))
  (set! (-> self reticle-lockon-sound) (new-sound-id))
  (go-virtual idle)
  )

;; definition for method 17 of type cty-sniper-turret-reticle
;; WARN: Return type mismatch int vs none.
(defmethod init-strips ((this cty-sniper-turret-reticle))
  (set! (-> this ring-inner alpha) *simple-prim-additive*)
  (set! (-> this ring-inner data0) (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always)))
  (set! (-> this ring-inner adnops 0 cmds) (gs-reg64 test-1))
  (set! (-> this ring-inner bucket) (bucket-id generic-sprite-1))
  (set! (-> this ring-inner sink) (the-as uint 65))
  (set! (-> this ring-middle alpha) *simple-prim-additive*)
  (set! (-> this ring-middle data0) (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always)))
  (set! (-> this ring-middle adnops 0 cmds) (gs-reg64 test-1))
  (set! (-> this ring-middle bucket) (bucket-id generic-sprite-1))
  (set! (-> this ring-middle sink) (the-as uint 65))
  (set! (-> this ring-outer alpha) *simple-prim-additive*)
  (set! (-> this ring-outer data0) (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always)))
  (set! (-> this ring-outer adnops 0 cmds) (gs-reg64 test-1))
  (set! (-> this ring-outer bucket) (bucket-id generic-sprite-1))
  (set! (-> this ring-outer sink) (the-as uint 65))
  (none)
  )

;; definition for method 20 of type cty-sniper-turret-reticle
(defmethod get-curr-color ((this cty-sniper-turret-reticle))
  (-> this current-color)
  )

;; definition for method 18 of type cty-sniper-turret-reticle
(defmethod get-alpha ((this cty-sniper-turret-reticle))
  (-> this current-alpha)
  )

;; definition for method 16 of type cty-sniper-turret-reticle
;; INFO: Used lq/sq
;; WARN: Return type mismatch rgba vs none.
(defmethod gen-prim-verts ((this cty-sniper-turret-reticle))
  (when (logtest? (-> this flags) (cty-sniper-turret-reticle-flag cstr0))
    (let ((gp-0 (new-stack-vector0)))
      (let ((f30-0
              (- 1.0
                 (* 0.0033333334 (the float (- (-> this wander-offset-reset-time) (-> *display* game-clock frame-counter))))
                 )
              )
            )
        (set! (-> gp-0 x) (lerp-clamp (-> this wander-offset 0 x) (-> this wander-offset 1 x) f30-0))
        (set! (-> gp-0 y) (lerp-clamp (-> this wander-offset 0 y) (-> this wander-offset 1 y) f30-0))
        )
      (vector-orient-by-quat! gp-0 gp-0 (-> this root quat))
      (vector+! gp-0 gp-0 (-> this root trans))
      (let* ((s4-0
               (quaternion-rotate-local-z! (new 'stack-no-clear 'quaternion) (-> this root quat) (-> this inner-ring-offset))
               )
             (s0-0 (vector-x-quaternion! (new 'stack-no-clear 'vector) s4-0))
             (s1-0 (vector-y-quaternion! (new 'stack-no-clear 'vector) s4-0))
             (s4-1 (get-alpha this))
             (s2-0 (new 'stack-no-clear 'vector))
             (s3-0 (get-curr-color this))
             )
        (vector-normalize! s0-0 (* 4096.0 (-> this ring-scale-multiplier)))
        (vector-normalize! s1-0 (* 4096.0 (-> this ring-scale-multiplier)))
        (let ((v1-14 (-> this ring-inner data)))
          (vector+! s2-0 gp-0 s0-0)
          (vector+! s2-0 s2-0 s1-0)
          (set! (-> v1-14 0 pos quad) (-> s2-0 quad))
          (set! (-> v1-14 0 stq z) 0.0)
          (set! (-> v1-14 0 stq x) 0.0)
          (set! (-> v1-14 0 stq y) 0.0)
          (set! (-> v1-14 0 col) s3-0)
          (set! (-> v1-14 0 col a) s4-1)
          (let ((v1-15 (-> v1-14 1)))
            (vector+float*! s2-0 gp-0 s0-0 -1.0)
            (vector+! s2-0 s2-0 s1-0)
            (set! (-> v1-15 pos quad) (-> s2-0 quad))
            (set! (-> v1-15 stq z) 0.0)
            (set! (-> v1-15 stq x) 1.0)
            (set! (-> v1-15 stq y) 0.0)
            (set! (-> v1-15 col) s3-0)
            (set! (-> v1-15 col a) s4-1)
            (let ((v1-16 (&+ v1-15 32)))
              (vector+! s2-0 gp-0 s0-0)
              (vector+float*! s2-0 s2-0 s1-0 -1.0)
              (set! (-> v1-16 pos quad) (-> s2-0 quad))
              (set! (-> v1-16 stq z) 0.0)
              (set! (-> v1-16 stq x) 0.0)
              (set! (-> v1-16 stq y) 1.0)
              (set! (-> v1-16 col) s3-0)
              (set! (-> v1-16 col a) s4-1)
              (let ((v1-17 (&+ v1-16 32)))
                (vector+float*! s2-0 gp-0 s0-0 -1.0)
                (vector+float*! s2-0 s2-0 s1-0 -1.0)
                (set! (-> v1-17 pos quad) (-> s2-0 quad))
                (set! (-> v1-17 stq z) 0.0)
                (set! (-> v1-17 stq x) 1.0)
                (set! (-> v1-17 stq y) 1.0)
                (set! (-> v1-17 col) s3-0)
                (set! (-> v1-17 col a) s4-1)
                )
              )
            )
          )
        )
      (let* ((s4-2 (quaternion-rotate-local-z!
                     (new 'stack-no-clear 'quaternion)
                     (-> this root quat)
                     (- (-> this middle-ring-offset))
                     )
                   )
             (s0-1 (vector-x-quaternion! (new 'stack-no-clear 'vector) s4-2))
             (s1-1 (vector-y-quaternion! (new 'stack-no-clear 'vector) s4-2))
             (s4-3 (get-alpha this))
             (s2-1 (new 'stack-no-clear 'vector))
             (s3-1 (get-curr-color this))
             )
        (vector-normalize! s0-1 (* 6553.6 (-> this ring-scale-multiplier)))
        (vector-normalize! s1-1 (* 6553.6 (-> this ring-scale-multiplier)))
        (let ((v1-24 (-> this ring-middle data)))
          (vector+! s2-1 gp-0 s0-1)
          (vector+! s2-1 s2-1 s1-1)
          (set! (-> v1-24 0 pos quad) (-> s2-1 quad))
          (set! (-> v1-24 0 stq z) 0.0)
          (set! (-> v1-24 0 stq x) 0.0)
          (set! (-> v1-24 0 stq y) 0.0)
          (set! (-> v1-24 0 col) s3-1)
          (set! (-> v1-24 0 col a) s4-3)
          (let ((v1-25 (-> v1-24 1)))
            (vector+float*! s2-1 gp-0 s0-1 -1.0)
            (vector+! s2-1 s2-1 s1-1)
            (set! (-> v1-25 pos quad) (-> s2-1 quad))
            (set! (-> v1-25 stq z) 0.0)
            (set! (-> v1-25 stq x) 1.0)
            (set! (-> v1-25 stq y) 0.0)
            (set! (-> v1-25 col) s3-1)
            (set! (-> v1-25 col a) s4-3)
            (let ((v1-26 (&+ v1-25 32)))
              (vector+! s2-1 gp-0 s0-1)
              (vector+float*! s2-1 s2-1 s1-1 -1.0)
              (set! (-> v1-26 pos quad) (-> s2-1 quad))
              (set! (-> v1-26 stq z) 0.0)
              (set! (-> v1-26 stq x) 0.0)
              (set! (-> v1-26 stq y) 1.0)
              (set! (-> v1-26 col) s3-1)
              (set! (-> v1-26 col a) s4-3)
              (let ((v1-27 (&+ v1-26 32)))
                (vector+float*! s2-1 gp-0 s0-1 -1.0)
                (vector+float*! s2-1 s2-1 s1-1 -1.0)
                (set! (-> v1-27 pos quad) (-> s2-1 quad))
                (set! (-> v1-27 stq z) 0.0)
                (set! (-> v1-27 stq x) 1.0)
                (set! (-> v1-27 stq y) 1.0)
                (set! (-> v1-27 col) s3-1)
                (set! (-> v1-27 col a) s4-3)
                )
              )
            )
          )
        )
      (let* ((s4-4
               (quaternion-rotate-local-z! (new 'stack-no-clear 'quaternion) (-> this root quat) (-> this outer-ring-offset))
               )
             (s0-2 (vector-x-quaternion! (new 'stack-no-clear 'vector) s4-4))
             (s1-2 (vector-y-quaternion! (new 'stack-no-clear 'vector) s4-4))
             (s4-5 (get-alpha this))
             (s2-2 (new 'stack-no-clear 'vector))
             (s3-2 (get-curr-color this))
             )
        (vector-normalize! s0-2 (* 9420.8 (-> this ring-scale-multiplier)))
        (vector-normalize! s1-2 (* 9420.8 (-> this ring-scale-multiplier)))
        (let ((v1-34 (-> this ring-outer data)))
          (vector+! s2-2 gp-0 s0-2)
          (vector+! s2-2 s2-2 s1-2)
          (set! (-> v1-34 0 pos quad) (-> s2-2 quad))
          (set! (-> v1-34 0 stq z) 0.0)
          (set! (-> v1-34 0 stq x) 0.0)
          (set! (-> v1-34 0 stq y) 0.0)
          (set! (-> v1-34 0 col) s3-2)
          (set! (-> v1-34 0 col a) s4-5)
          (let ((v1-35 (-> v1-34 1)))
            (vector+float*! s2-2 gp-0 s0-2 -1.0)
            (vector+! s2-2 s2-2 s1-2)
            (set! (-> v1-35 pos quad) (-> s2-2 quad))
            (set! (-> v1-35 stq z) 0.0)
            (set! (-> v1-35 stq x) 1.0)
            (set! (-> v1-35 stq y) 0.0)
            (set! (-> v1-35 col) s3-2)
            (set! (-> v1-35 col a) s4-5)
            (let ((v1-36 (&+ v1-35 32)))
              (vector+! s2-2 gp-0 s0-2)
              (vector+float*! s2-2 s2-2 s1-2 -1.0)
              (set! (-> v1-36 pos quad) (-> s2-2 quad))
              (set! (-> v1-36 stq z) 0.0)
              (set! (-> v1-36 stq x) 0.0)
              (set! (-> v1-36 stq y) 1.0)
              (set! (-> v1-36 col) s3-2)
              (set! (-> v1-36 col a) s4-5)
              (let ((v1-37 (&+ v1-36 32)))
                (vector+float*! s2-2 gp-0 s0-2 -1.0)
                (vector+float*! s2-2 s2-2 s1-2 -1.0)
                (set! (-> v1-37 pos quad) (-> s2-2 quad))
                (set! (-> v1-37 stq z) 0.0)
                (set! (-> v1-37 stq x) 1.0)
                (set! (-> v1-37 stq y) 1.0)
                (set! (-> v1-37 col) s3-2)
                (set! (-> v1-37 col a) s4-5)
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

;; definition for method 7 of type simple-prim
(defmethod relocate ((this simple-prim) (offset int))
  (if (nonzero? (-> this strip))
      (&+! (-> this strip) offset)
      )
  (call-parent-method this offset)
  )

;; definition for function sloppy-lead-player-location
(defun sloppy-lead-player-location ((arg0 vector) (arg1 vector) (arg2 float))
  (let* ((s4-0 (get-trans *target* 0))
         (f30-1 (+ 0.49 (/ (vector-vector-distance s4-0 arg1) arg2)))
         )
    (vector-! arg0 (vector+float*! (new 'stack-no-clear 'vector) s4-0 (get-transv *target*) f30-1) arg1)
    )
  )

;; definition for function cty-sniper-turret-reticle-post
(defbehavior cty-sniper-turret-reticle-post cty-sniper-turret-reticle ()
  (if (logtest? (-> self flags) (cty-sniper-turret-reticle-flag cstr0))
      (sound-play "reticle-steady" :id (-> self reticle-looping-sound))
      )
  (init-strips self)
  (gen-prim-verts self)
  (none)
  )

;; definition for function cty-sniper-turret-reticle-handler
;; INFO: Used lq/sq
(defbehavior cty-sniper-turret-reticle-handler cty-sniper-turret-reticle ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('update)
     (-> arg3 param 0)
     (set! (-> self root trans quad) (-> (the-as vector (-> arg3 param 0)) quad))
     (matrix->quaternion (-> self root quat) (math-camera-matrix))
     )
    (('collide-dist)
     #f
     )
    (('on)
     (logior! (-> self flags) (cty-sniper-turret-reticle-flag cstr0))
     (set! (-> self ring-inner num-verts) (the-as uint 4))
     (set! (-> self ring-middle num-verts) (the-as uint 4))
     (let ((v0-1 (the-as object 4)))
       (set! (-> self ring-outer num-verts) (the-as uint v0-1))
       v0-1
       )
     )
    (('off)
     (logclear! (-> self flags) (cty-sniper-turret-reticle-flag cstr0))
     (set! (-> self ring-inner num-verts) (the-as uint 0))
     (set! (-> self ring-middle num-verts) (the-as uint 0))
     (set! (-> self ring-outer num-verts) (the-as uint 0))
     (sound-stop (-> self reticle-looping-sound))
     (sound-stop (-> self reticle-lockon-sound))
     )
    (('lock)
     (go-virtual lock)
     )
    (('unlock)
     (go-virtual idle)
     )
    (('die)
     (sound-stop (-> self reticle-looping-sound))
     (sound-stop (-> self reticle-lockon-sound))
     (go empty-state)
     )
    )
  )

;; failed to figure out what this is:
(defstate idle (cty-sniper-turret-reticle)
  :virtual #t
  :event cty-sniper-turret-reticle-handler
  :enter (behavior ()
    (set! (-> self current-color) (new 'static 'rgba :r #x70 :g #x80 :b #x30 :a #x10))
    (set! (-> self ring-scale-multiplier) 1.3)
    (set! (-> self current-alpha) (the-as uint 16))
    (set! (-> self wander-offset 0 quad) (the-as uint128 0))
    (let ((gp-0 (-> self wander-offset 1)))
      (let* ((f30-0 -16384.0)
             (f28-0 32768.0)
             (v1-7 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-8 (the-as number (logior #x3f800000 v1-7)))
             )
        (set! (-> gp-0 x) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-8)))))
        )
      (let* ((f30-1 -16384.0)
             (f28-1 32768.0)
             (v1-13 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-14 (the-as number (logior #x3f800000 v1-13)))
             )
        (set! (-> gp-0 y) (+ f30-1 (* f28-1 (+ -1.0 (the-as float v1-14)))))
        )
      (set! (-> gp-0 z) 0.0)
      (set! (-> gp-0 w) 1.0)
      )
    (set! (-> self wander-offset-reset-time) (+ (-> *display* game-clock frame-counter) (seconds 1)))
    (sound-stop (-> self reticle-lockon-sound))
    )
  :trans (behavior ()
    (let ((v1-1 (current-time)))
      (set! (-> self inner-ring-offset) (* 312.0762 (the float (mod v1-1 210))))
      (set! (-> self middle-ring-offset) (* 43.690666 (the float (mod v1-1 1500))))
      (set! (-> self outer-ring-offset) (* 70.46882 (the float (mod v1-1 930))))
      )
    (when (< (-> self wander-offset-reset-time) (-> *display* game-clock frame-counter))
      (set! (-> self wander-offset 0 quad) (-> self wander-offset 1 quad))
      (let ((gp-0 (-> self wander-offset 1)))
        (let* ((f30-0 -16384.0)
               (f28-0 32768.0)
               (v1-10 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-11 (the-as number (logior #x3f800000 v1-10)))
               )
          (set! (-> gp-0 x) (+ f30-0 (* f28-0 (+ -1.0 (the-as float v1-11)))))
          )
        (let* ((f30-1 -16384.0)
               (f28-1 32768.0)
               (v1-16 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-17 (the-as number (logior #x3f800000 v1-16)))
               )
          (set! (-> gp-0 y) (+ f30-1 (* f28-1 (+ -1.0 (the-as float v1-17)))))
          )
        (set! (-> gp-0 z) 0.0)
        (set! (-> gp-0 w) 1.0)
        )
      (set! (-> self wander-offset-reset-time) (+ (-> *display* game-clock frame-counter) (seconds 1)))
      )
    (if (logtest? (-> self flags) (cty-sniper-turret-reticle-flag cstr0))
        (sound-play "turret-scan" :id (-> self reticle-lockon-sound))
        )
    )
  :code sleep-code
  :post cty-sniper-turret-reticle-post
  )

;; failed to figure out what this is:
(defstate lock (cty-sniper-turret-reticle)
  :virtual #t
  :event cty-sniper-turret-reticle-handler
  :enter (behavior ()
    (set-time! (-> self lockon-start-time))
    (let ((gp-0 (new-stack-vector0)))
      (let ((f30-0
              (- 1.0
                 (* 0.0033333334 (the float (- (-> self wander-offset-reset-time) (-> *display* game-clock frame-counter))))
                 )
              )
            )
        (set! (-> gp-0 x) (lerp-clamp (-> self wander-offset 0 x) (-> self wander-offset 1 x) f30-0))
        (set! (-> gp-0 y) (lerp-clamp (-> self wander-offset 0 y) (-> self wander-offset 1 y) f30-0))
        )
      (set! (-> self wander-offset 0 quad) (-> gp-0 quad))
      )
    (set-vector! (-> self wander-offset 1) 0.0 0.0 0.0 1.0)
    (set! (-> self wander-offset-reset-time) (+ (-> *display* game-clock frame-counter) (seconds 1)))
    )
  :trans (behavior ()
    450
    (let ((v1-3 (- (current-time) (+ (-> self lockon-start-time) (seconds 1.5)))))
      (cond
        ((< v1-3 0)
         (set! (-> self current-color) (new 'static 'rgba :r #x70 :g #x80 :b #x30 :a #x18))
         )
        ((< v1-3 (seconds 0.49))
         (let ((f30-0 (* 0.006802721 (the float v1-3))))
           (set! (-> self current-color) (rgba-lerp
                                           (new 'static 'rgba :r #x70 :g #x80 :b #x30 :a #x18)
                                           (new 'static 'rgba :r #x10 :g #x40 :b #xf0 :a #x80)
                                           (the-as rgba f30-0)
                                           )
                 )
           (set! (-> self current-alpha) (the-as uint (the int (lerp 24.0 128.0 f30-0))))
           )
         )
        (else
          (set! (-> self current-color) (new 'static 'rgba :r #x10 :g #x40 :b #xf0 :a #x80))
          (set! (-> self current-alpha) (the-as uint 128))
          )
        )
      )
    )
  :code (behavior ()
    (let ((f30-0 (-> self inner-ring-offset))
          (f28-0 (-> self middle-ring-offset))
          (f26-0 (-> self outer-ring-offset))
          (gp-0 450)
          )
      (while (< (current-time) (+ gp-0 (-> self lockon-start-time)))
        (let ((f24-0 (/ (the float (- (current-time) (-> self lockon-start-time))) (the float gp-0))))
          (set! (-> self inner-ring-offset) (lerp-clamp f30-0 0.0 (* 3.0 f24-0)))
          (set! (-> self middle-ring-offset) (lerp-clamp f28-0 0.0 (* 2.0 f24-0)))
          (set! (-> self outer-ring-offset) (lerp-clamp f26-0 0.0 f24-0))
          )
        (suspend)
        )
      )
    (sound-stop (-> self reticle-lockon-sound))
    (let ((gp-1 (current-time))
          (f30-1 147.0)
          )
      (while (< (the float (current-time)) (+ f30-1 (the float gp-1)))
        (set! (-> self ring-scale-multiplier)
              (lerp-clamp 1.3 0.5 (/ (- (the float (current-time)) (the float gp-1)) f30-1))
              )
        (if (logtest? (-> self flags) (cty-sniper-turret-reticle-flag cstr0))
            (sound-play "turret-lock" :id (-> self reticle-lockon-sound))
            )
        (suspend)
        )
      )
    (sleep-code)
    )
  :post cty-sniper-turret-reticle-post
  )

;; definition for method 7 of type cty-sniper-turret-reticle
;; WARN: Return type mismatch process vs cty-sniper-turret-reticle.
(defmethod relocate ((this cty-sniper-turret-reticle) (offset int))
  (if (nonzero? (-> this ring-inner))
      (&+! (-> this ring-inner) offset)
      )
  (if (nonzero? (-> this ring-middle))
      (&+! (-> this ring-middle) offset)
      )
  (if (nonzero? (-> this ring-outer))
      (&+! (-> this ring-outer) offset)
      )
  (if (nonzero? (-> this root))
      (&+! (-> this root) offset)
      )
  (the-as cty-sniper-turret-reticle ((method-of-type process relocate) this offset))
  )

;; failed to figure out what this is:
(defskelgroup skel-cty-sniper-turret cty-sniper-turret cty-sniper-turret-lod0-jg cty-sniper-turret-idle-ja
              ((cty-sniper-turret-lod0-mg (meters 20)) (cty-sniper-turret-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 36864 0 36864)
              :origin-joint-index 3
              )

;; failed to figure out what this is:
(defskelgroup skel-cty-sniper-turret-explode cty-sniper-turret cty-sniper-turret-explode-lod0-jg cty-sniper-turret-explode-idle-ja
              ((cty-sniper-turret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 80)
              )

;; definition for symbol *cty-sniper-turret-exploder-params*, type joint-exploder-static-params
(define *cty-sniper-turret-exploder-params*
  (new 'static 'joint-exploder-static-params
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 20 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 21 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 22 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 23 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 24 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 25 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 26 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 27 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 28 :parent-joint-index 3)
      (new 'static 'joint-exploder-static-joint-params :joint-index 29 :parent-joint-index 3)
      )
    :collide-spec (collide-spec backgnd)
    )
  )

;; failed to figure out what this is:
(defpart 4855
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1.5) (meters 0.1))
    (:rot-x (degrees 1.125))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 0.0)
    (:b :copy g)
    (:a 96.0 64.0)
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 glow))
    (:userdata 1.0)
    )
  )

;; definition for function citysniper-draw-2d-hud
;; INFO: Used lq/sq
;; WARN: Return type mismatch pointer vs symbol.
;; ERROR: Failed load: (set! t0-6 (l.d (+ a0-28 8))) at op 170
(defun citysniper-draw-2d-hud ((arg0 vector))
  (let ((s5-0 (new 'stack-no-clear 'inline-array 'vector4w 4))
        (gp-0 (new 'stack-no-clear 'vector4w))
        )
    (set! (-> arg0 w) 1.0)
    (the-as
      symbol
      (when (transform-point-qword! (-> s5-0 0) arg0)
        (set! (-> s5-0 1 quad) (-> s5-0 0 quad))
        (set! (-> s5-0 2 quad) (-> s5-0 0 quad))
        (set! (-> s5-0 3 quad) (-> s5-0 0 quad))
        (let ((v1-5 160))
          (set! (-> s5-0 0 x) (- (-> s5-0 0 x) v1-5))
          (set! (-> s5-0 0 y) (- (-> s5-0 0 y) v1-5))
          (+! (-> s5-0 1 x) v1-5)
          (set! (-> s5-0 1 y) (- (-> s5-0 1 y) v1-5))
          (+! (-> s5-0 2 x) v1-5)
          (+! (-> s5-0 2 y) v1-5)
          (set! (-> s5-0 3 x) (- (-> s5-0 3 x) v1-5))
          (+! (-> s5-0 3 y) v1-5)
          )
        (set! (-> gp-0 x) 0)
        (set! (-> gp-0 y) 128)
        (set! (-> gp-0 z) 128)
        (set! (-> gp-0 w) 128)
        (with-dma-buffer-add-bucket ((v1-15 (-> *display* frames (-> *display* on-screen) global-buf))
                                     (bucket-id debug-no-zbuf1)
                                     )
          (let ((a1-1 (-> s5-0 0))
                (t3-0 (-> s5-0 1))
                (t2-0 (-> s5-0 2))
                (a3-0 (-> s5-0 3))
                (t0-0 (make-u128 0 (the-as uint #x4024c00000008001)))
                (t1-0 #x4141)
                )
            (+! (-> a1-1 z) -8192)
            (+! (-> t3-0 z) -8192)
            (+! (-> t2-0 z) -8192)
            (+! (-> a3-0 z) -8192)
            (let ((a0-28 (-> v1-15 base)))
              (let* ((t4-0 v1-15)
                     (t5-0 (-> t4-0 base))
                     )
                (set! (-> (the-as (pointer int64) t5-0)) #x10000000)
                (s.w! (+ t5-0 8) 0)
                (let ((t6-1 #x50000000))
                  (s.w! (+ t5-0 12) t6-1)
                  )
                (set! (-> t4-0 base) (&+ t5-0 16))
                )
              (let* ((t4-1 v1-15)
                     (t5-2 (-> t4-1 base))
                     )
                (set! (-> (the-as (pointer uint64) t5-2)) t0-0)
                (s.d! (+ t5-2 8) t1-0)
                (set! (-> t4-1 base) (&+ t5-2 16))
                )
              (let* ((t4-2 v1-15)
                     (t5-4 (-> t4-2 base))
                     )
                (set! (-> (the-as (pointer uint128) t5-4)) (-> gp-0 quad))
                (let ((t6-3 (-> a1-1 quad)))
                  (s.q! (+ t5-4 16) t6-3)
                  )
                (let ((t6-4 (-> gp-0 quad)))
                  (s.q! (+ t5-4 32) t6-4)
                  )
                (let ((t6-5 (-> t3-0 quad)))
                  (s.q! (+ t5-4 48) t6-5)
                  )
                (set! (-> t4-2 base) (&+ t5-4 64))
                )
              (let* ((t4-3 v1-15)
                     (t5-6 (-> t4-3 base))
                     )
                (set! (-> (the-as (pointer uint64) t5-6)) t0-0)
                (s.d! (+ t5-6 8) t1-0)
                (set! (-> t4-3 base) (&+ t5-6 16))
                )
              (let* ((t4-4 v1-15)
                     (t5-8 (-> t4-4 base))
                     )
                (set! (-> (the-as (pointer uint128) t5-8)) (-> gp-0 quad))
                (let ((t3-1 (-> t3-0 quad)))
                  (s.q! (+ t5-8 16) t3-1)
                  )
                (let ((t3-2 (-> gp-0 quad)))
                  (s.q! (+ t5-8 32) t3-2)
                  )
                (let ((t3-3 (-> t2-0 quad)))
                  (s.q! (+ t5-8 48) t3-3)
                  )
                (set! (-> t4-4 base) (&+ t5-8 64))
                )
              (let* ((t3-5 v1-15)
                     (t4-5 (-> t3-5 base))
                     )
                (set! (-> (the-as (pointer uint64) t4-5)) t0-0)
                (s.d! (+ t4-5 8) t1-0)
                (set! (-> t3-5 base) (&+ t4-5 16))
                )
              (let* ((t3-6 v1-15)
                     (t4-7 (-> t3-6 base))
                     )
                (set! (-> (the-as (pointer uint128) t4-7)) (-> gp-0 quad))
                (let ((t2-1 (-> t2-0 quad)))
                  (s.q! (+ t4-7 16) t2-1)
                  )
                (let ((t2-2 (-> gp-0 quad)))
                  (s.q! (+ t4-7 32) t2-2)
                  )
                (let ((t2-3 (-> a3-0 quad)))
                  (s.q! (+ t4-7 48) t2-3)
                  )
                (set! (-> t3-6 base) (&+ t4-7 64))
                )
              (let* ((t2-5 v1-15)
                     (t3-7 (-> t2-5 base))
                     )
                (set! (-> (the-as (pointer uint64) t3-7)) t0-0)
                (s.d! (+ t3-7 8) t1-0)
                (set! (-> t2-5 base) (&+ t3-7 16))
                )
              (let* ((t0-2 v1-15)
                     (t1-1 (-> t0-2 base))
                     )
                (set! (-> (the-as (pointer uint128) t1-1)) (-> gp-0 quad))
                (let ((a3-1 (-> a3-0 quad)))
                  (s.q! (+ t1-1 16) a3-1)
                  )
                (let ((a3-2 (-> gp-0 quad)))
                  (s.q! (+ t1-1 32) a3-2)
                  )
                (let ((a1-2 (-> a1-1 quad)))
                  (s.q! (+ t1-1 48) a1-2)
                  )
                (set! (-> t0-2 base) (&+ t1-1 64))
                )
              (let ((a3-6 (/ (the-as int (+ (- -16 (the-as int a0-28)) (the-as int (-> v1-15 base)))) 16)))
                (cond
                  ((nonzero? a3-6)
                   (logior! (-> (the-as (pointer uint64) a0-28)) (shr (shl a3-6 48) 48))
                   (let ((a3-10 (logior (l.d (&+ a0-28 8)) (shl (shr (shl a3-6 48) 48) 32))))
                     (s.d! (+ a0-28 8) a3-10)
                     )
                   )
                  (else
                    (set! (-> v1-15 base) a0-28)
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )

;; definition for method 36 of type cty-sniper-turret
;; INFO: Used lq/sq
(defmethod fire-shot ((this cty-sniper-turret))
  (let* ((s5-0 (-> this node-list data (-> this gun-aims-from-joint)))
         (s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) s5-0))
         (s5-1 (-> s5-0 bone transform fvec))
         (v1-5 (rand-vu-sphere-point-uniform! (new 'stack-no-clear 'vector) (* 0.05 (rand-vu))))
         (s3-2 (vector+! (new 'stack-no-clear 'vector) s5-1 v1-5))
         (s5-2 (new 'stack-no-clear 'projectile-init-by-other-params))
         )
    (vector-normalize! s3-2 512000.0)
    (set! (-> s5-2 ent) (-> this entity))
    (set! (-> s5-2 charge) 1.0)
    (set! (-> s5-2 options) (projectile-options))
    (logclear! (-> s5-2 options) (projectile-options po14 po15 po16))
    (set! (-> s5-2 pos quad) (-> s4-0 quad))
    (set! (-> s5-2 vel quad) (-> s3-2 quad))
    (set! (-> s5-2 notify-handle) (process->handle this))
    (set! (-> s5-2 owner-handle) (the-as handle #f))
    (set! (-> s5-2 target-handle) (the-as handle #f))
    (set! (-> s5-2 target-pos quad) (the-as uint128 0))
    (set! (-> s5-2 ignore-handle) (process->handle this))
    (let* ((v1-19 *game-info*)
           (a0-17 (+ (-> v1-19 attack-id) 1))
           )
      (set! (-> v1-19 attack-id) a0-17)
      (set! (-> s5-2 attack-id) a0-17)
      )
    (set! (-> s5-2 timeout) (seconds 4))
    (spawn-projectile cty-sniper-turret-shot s5-2 this *default-dead-pool*)
    )
  )

;; definition for method 21 of type cty-sniper-turret
(defmethod get-trans ((this cty-sniper-turret) (arg0 int))
  "Get the `trans` for this process."
  (case arg0
    ((2 3)
     (let ((v1-2 (new 'static 'vector :w 1.0)))
       (vector<-cspace! v1-2 (-> this node-list data (-> this gun-aims-from-joint)))
       )
     )
    (else
      (vector+!
        (new 'static 'vector :w 1.0)
        (the-as vector (-> this root root-prim prim-core))
        (-> this pos-cam-offset)
        )
      )
    )
  )

;; definition for method 40 of type cty-sniper-turret
(defmethod cty-sniper-turret-method-40 ((this cty-sniper-turret))
  (and (should-check-los? (-> this los) 0)
       (< (vector-vector-xz-distance (-> this root trans) (target-pos 0)) 163840.0)
       (< -16384.0 (- (-> (target-pos 0) y) (-> this root trans y)))
       )
  )

;; definition for method 41 of type cty-sniper-turret
(defmethod cty-sniper-turret-method-41 ((this cty-sniper-turret))
  (and (logtest? (-> this flags) (cty-sniper-turret-flag cst7))
       (or (los-control-method-11 (-> this los) 0)
           (< 204800.0 (vector-vector-xz-distance (-> this root trans) (target-pos 0)))
           (< (- (-> (target-pos 0) y) (-> this root trans y)) -24576.0)
           )
       )
  )

;; definition for function sniper-turret-post
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defbehavior sniper-turret-post cty-sniper-turret ()
  (rlet ((acc :class vf)
         (Q :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         )
    (init-vf0-vector)
    (let* ((gp-0 *target*)
           (a1-1 (if (type? gp-0 process-focusable)
                     gp-0
                     )
                 )
           )
      (cond
        ((and (logtest? (-> self flags) (cty-sniper-turret-flag cst0)) a1-1)
         (if (logtest? (-> self flags) (cty-sniper-turret-flag cst9))
             (los-control-method-9 (-> self los) a1-1 (the-as vector #f) 819.2 4096.0)
             )
         (when (or (logtest? (-> self flags) (cty-sniper-turret-flag cst12)) (cty-sniper-turret-method-41 self))
           (cond
             ((logtest? (-> self flags) (cty-sniper-turret-flag cst12))
              (logclear! (-> self flags) (cty-sniper-turret-flag cst12))
              (remove-setting! 'pov-offset)
              (send-event self 'pov-cam-off)
              (send-event (handle->process (-> self reticle)) 'off)
              '(go (ready))
              )
             (else
               (remove-setting! 'interp-time)
               (logior! (-> self flags) (cty-sniper-turret-flag cst12))
               )
             )
           )
         (when *target*
           (let ((f30-0 (if *target*
                            (vector-vector-xz-distance (-> self root trans) (-> *target* control trans))
                            4096000.0
                            )
                        )
                 )
             (let ((gp-1 (vector<-cspace! (new 'stack-no-clear 'vector) (-> self node-list data (-> self gun-aims-from-joint))))
                   )
               (let* ((v1-43 (sloppy-lead-player-location (new 'stack-no-clear 'vector) gp-1 512000.0))
                      (s4-1 (vector+! (new 'stack-no-clear 'vector) v1-43 gp-1))
                      )
                 (set! s4-1 (cond
                              ((logtest? (-> self flags) (cty-sniper-turret-flag cst11))
                               (empty)
                               s4-1
                               )
                              (else
                                (get-trans *target* 3)
                                )
                              )
                       )
                 (let* ((s5-1 (vector-! (new 'stack-no-clear 'vector) s4-1 (-> self gun-current-aim-location)))
                        (f28-0 (vector-length s5-1))
                        )
                   (if *target*
                       (look-at! (-> *target* neck) gp-1 'attacking self)
                       )
                   (if (< (* 98304.0 (seconds-per-frame)) f28-0)
                       (vector+!
                         (-> self gun-current-aim-location)
                         (-> self gun-current-aim-location)
                         (vector-normalize! s5-1 (* 98304.0 (seconds-per-frame)))
                         )
                       (set! (-> self gun-current-aim-location quad) (-> s4-1 quad))
                       )
                   )
                 )
               (let ((t9-13 quaternion-look-at!)
                     (a0-21 (-> self gun-elev-jmod rotation))
                     (a1-14 (vector-! (new 'stack-no-clear 'vector) (-> self gun-current-aim-location) gp-1))
                     )
                 (let ((f0-4 1.0))
                   (.lvf vf1 (&-> a1-14 quad))
                   (.mul.vf vf2 vf1 vf1 :mask #b111)
                   (let ((v1-63 f0-4))
                     (.mov vf3 v1-63)
                     )
                   )
                 (.mul.x.vf acc vf0 vf2 :mask #b1000)
                 (.add.mul.y.vf acc vf0 vf2 acc :mask #b1000)
                 (.add.mul.z.vf vf2 vf0 vf2 acc :mask #b1000)
                 (.isqrt.vf Q vf3 vf2 :fsf #b0 :ftf #b11)
                 (.wait.vf)
                 (.mul.vf vf1 vf1 Q :mask #b111)
                 (.nop.vf)
                 (.nop.vf)
                 (.nop.vf)
                 (.svf (&-> a1-14 quad) vf1)
                 (t9-13 a0-21 a1-14 *up-vector*)
                 )
               )
             (when (logtest? (-> self flags) (cty-sniper-turret-flag cst7))
               (send-event (handle->process (-> self reticle)) 'update (-> self gun-current-aim-location))
               (let ((f0-6 (* 0.000018780049 (+ -20480.0 f30-0))))
                 (set! (-> self pos-cam-offset y) (lerp-clamp 53248.0 106496.0 f0-6))
                 )
               (set-setting! 'pov-offset 'abs (-> self pos-cam-offset) 0)
               (let ((a1-20 (vector-xz-normalize-copy!
                              (new 'stack-no-clear 'vector)
                              (vector-! (new 'stack-no-clear 'vector) (-> self root trans) (-> self gun-current-aim-location))
                              1.0
                              )
                            )
                     )
                 (quaternion-look-at! (-> self gun-azimuth-jmod rotation) a1-20 *up-vector*)
                 )
               (quaternion-copy! (-> self gun-shoulder-jmod rotation) (new 'static 'quaternion :x 0.5 :w 0.8660254))
               (quaternion-copy! (-> self gun-elbow-jmod rotation) (new 'static 'quaternion :x -0.5 :w 0.8660254))
               (set! (-> self fov-mult) (lerp-clamp 1.3 0.45 (* 0.0000048828124 f30-0)))
               (set-setting! 'fov 'rel (-> self fov-mult) 0)
               )
             )
           )
         )
        (else
          (send-event (handle->process (-> self reticle)) 'off)
          )
        )
      )
    (transform-post)
    (none)
    )
  )

;; definition for function cty-sniper-turret-handler
(defbehavior cty-sniper-turret-handler cty-sniper-turret ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 object))
  (case arg2
    (('fire-suppress)
     (cond
       ((-> arg3 param 0)
        (set! v0-0 (logior (-> self flags) (cty-sniper-turret-flag cst4)))
        (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
        )
       (else
         (set! v0-0 (logclear (-> self flags) (cty-sniper-turret-flag cst4)))
         (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
         )
       )
     v0-0
     )
    (('set-spread)
     (set! (-> self gun-spread) (the-as float (-> arg3 param 0)))
     )
    (('use-los)
     (cond
       ((-> arg3 param 0)
        (set! v0-0 (logior (-> self flags) (cty-sniper-turret-flag cst9)))
        (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
        )
       (else
         (set! v0-0 (logclear (-> self flags) (cty-sniper-turret-flag cst9)))
         (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
         )
       )
     v0-0
     )
    (('limit-reticle-elev)
     (cond
       ((-> arg3 param 0)
        (set! v0-0 (logior (-> self flags) (cty-sniper-turret-flag cst10)))
        (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
        )
       (else
         (set! v0-0 (logclear (-> self flags) (cty-sniper-turret-flag cst10)))
         (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
         )
       )
     v0-0
     )
    (('pov-cam-on)
     (sound-play "interface-open")
     (remove-setting! 'entity-name)
     (let ((v1-18 (-> (the-as collide-shape-prim-group (-> self root root-prim)) child 3)))
       (set! (-> v1-18 prim-core collide-as) (collide-spec obstacle pusher))
       (set! (-> v1-18 prim-core collide-with) (collide-spec jak player-list))
       )
     (persist-with-delay *setting-control* 'rapid-tracking (seconds 0.5) 'rapid-tracking #f 0.0 0)
     (set-setting! 'interp-time 'abs 0.0 0)
     (set-setting! 'mode-name 'cam-pov-track 0.0 0)
     (set-setting! 'allow-look-around #f 0.0 0)
     (let ((v1-27 (process->ppointer self)))
       (set-setting! 'pov-handle v1-27 3.0 (-> v1-27 0 pid))
       )
     (set-setting! 'pov-offset 'abs (-> self pos-cam-offset) 0)
     (set-setting! 'scanlines 'abs 0.2 0)
     (set-setting! 'matrix-blend-max-angle 'abs (degrees 360.0) 0)
     (setup-masks (-> self draw) 0 1)
     (let ((gp-1 (process-spawn hud-cty-sniper-fight :init hud-init-by-other :name "hud-cty-sniper-fight" :to self)))
       (set! (-> self hud-buttons) (ppointer->handle gp-1))
       (send-event (handle->process (-> self hud-buttons)) 'enable)
       (send-event (handle->process (-> self hud-buttons)) 'force-show)
       (let ((a1-18 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-18 from) (process->ppointer self))
         (set! (-> a1-18 num-params) 0)
         (set! (-> a1-18 message) 'get-buttons-actor-group)
         (let* ((t9-17 send-event-function)
                (v1-60 (-> self actor-group 0 data 0 actor))
                (a1-19 (the-as (pointer actor-group) (t9-17
                                                       (if v1-60
                                                           (-> v1-60 extra process)
                                                           )
                                                       a1-18
                                                       )
                               )
                       )
                )
           (if a1-19
               (draw-hud-buttons (the-as hud-cty-sniper-fight (-> gp-1 0)) a1-19)
               )
           )
         )
       )
     (logior! (-> self flags) (cty-sniper-turret-flag cst7))
     (set! v0-0 (logclear (-> self flags) (cty-sniper-turret-flag cst12)))
     (set! (-> self flags) (the-as cty-sniper-turret-flag v0-0))
     v0-0
     )
    (('pov-cam-off)
     (let ((v1-71 (-> (the-as collide-shape-prim-group (-> self root root-prim)) child 3)))
       (set! (-> v1-71 prim-core collide-as) (collide-spec))
       (set! (-> v1-71 prim-core collide-with) (collide-spec))
       )
     0
     (sound-play "interface-close")
     (let ((v1-76 (-> *camera* slave)))
       (when (and (-> v1-76 0 next-state) (= (-> v1-76 0 next-state name) 'cam-pov-track))
         (set! (-> v1-76 0 blend-from-type) (camera-blend-from-type unknown-0))
         0
         )
       )
     (remove-setting! 'interp-time)
     (remove-setting! 'pov-handle)
     (remove-setting! 'mode-name)
     (remove-setting! 'allow-look-around)
     (remove-setting! 'pov-offset)
     (remove-setting! 'scanlines)
     (remove-setting! 'matrix-blend-max-angle)
     (setup-masks (-> self draw) 1 0)
     (quaternion-identity! (-> self gun-azimuth-jmod rotation))
     (quaternion-identity! (-> self gun-shoulder-jmod rotation))
     (quaternion-identity! (-> self gun-elbow-jmod rotation))
     (send-event (handle->process (-> self hud-buttons)) 'hide-and-die)
     (logclear! (-> *target* focus-status) (focus-status ignore))
     (logclear! (-> self flags) (cty-sniper-turret-flag cst7))
     (remove-setting! 'fov)
     )
    (('get-rotate-quat)
     (-> self rotate-quat)
     )
    (('get-gun-elevation-cam)
     (-> self gun-elev-cam)
     )
    (('update)
     (-> arg3 param 1)
     (new 'stack-no-clear 'vector)
     (let ((gp-3 (new 'stack-no-clear 'quaternion))
           (s5-3 (the-as cspace (-> arg3 param 2)))
           )
       (vector<-cspace+vector! (-> self root trans) s5-3 (-> self offset))
       (matrix->quaternion gp-3 (-> s5-3 bone transform))
       )
     )
    (('die)
     (go-virtual die)
     )
    )
  )

;; definition for method 37 of type cty-sniper-turret
;; INFO: Used lq/sq
(defmethod cty-sniper-turret-method-37 ((this cty-sniper-turret) (arg0 vector) (arg1 float))
  (let ((s4-1 (vector-! (new 'stack-no-clear 'vector) arg0 (-> this root trans)))
        (s3-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s5-0 quad) (-> s4-1 quad))
    (set! (-> s3-0 y) 0.0)
    (vector-normalize! s3-0 1.0)
    (set! (-> s5-0 y) 0.0)
    (vector-normalize! s5-0 1.0)
    (>= (vector-dot s3-0 s5-0) (cos arg1))
    )
  )

;; failed to figure out what this is:
(defstate waiting-for-batteries (cty-sniper-turret)
  :virtual #t
  :event cty-sniper-turret-handler
  :enter (behavior ()
    '()
    )
  :trans (behavior ()
    (dotimes (gp-0 (length (-> self actor-group 0)))
      (let ((v1-2 (-> self actor-group 0 data gp-0))
            (a1-0 (new 'stack-no-clear 'event-message-block))
            )
        (set! (-> a1-0 from) (process->ppointer self))
        (set! (-> a1-0 num-params) 0)
        (set! (-> a1-0 message) 'alive)
        (let ((t9-0 send-event-function)
              (v1-3 (-> v1-2 actor))
              )
          (if (t9-0
                (if v1-3
                    (-> v1-3 extra process)
                    )
                a1-0
                )
              (go-virtual asleep)
              )
          )
        )
      )
    )
  :code sleep-code
  :post (behavior ()
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate asleep (cty-sniper-turret)
  :virtual #t
  :enter (behavior ()
    (send-event self 'pov-cam-off)
    (send-event (handle->process (-> self reticle)) 'unlock)
    )
  :exit (behavior ()
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer self))
      (set! (-> a1-0 num-params) 0)
      (set! (-> a1-0 message) 'start-music)
      (let ((t9-0 send-event-function)
            (v1-4 (-> *game-info* sub-task-list (game-task-node city-sniper-fight-resolution)))
            )
        (t9-0
          (handle->process (if (-> v1-4 manager)
                               (-> v1-4 manager manager)
                               (the-as handle #f)
                               )
                           )
          a1-0
          )
        )
      )
    (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-1 from) (process->ppointer self))
      (set! (-> a1-1 num-params) 0)
      (set! (-> a1-1 message) 'turret-awakens)
      (let ((t9-1 send-event-function)
            (v1-14 (-> *game-info* sub-task-list (game-task-node city-sniper-fight-resolution)))
            )
        (t9-1
          (handle->process (if (-> v1-14 manager)
                               (-> v1-14 manager manager)
                               (the-as handle #f)
                               )
                           )
          a1-1
          )
        )
      )
    )
  :code (behavior ()
    (ja-no-eval :group! cty-sniper-turret-deactivate-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (sleep-code)
    )
  :post (behavior ()
    (if (and (ja-done? 0) (< (if *target*
                                 (vector-vector-xz-distance (-> self root trans) (-> *target* control trans))
                                 4096000.0
                                 )
                             266240.0
                             )
             )
        (go-virtual ready #t)
        )
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate locked-on (cty-sniper-turret)
  :virtual #t
  :event cty-sniper-turret-handler
  :exit (behavior ()
    (logclear! (-> self flags) (cty-sniper-turret-flag cst3))
    )
  :trans (behavior ()
    (if (cty-sniper-turret-method-39 self)
        (go-virtual die)
        )
    )
  :code (behavior ()
    (logior! (-> self flags) (cty-sniper-turret-flag cst3))
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.49))
        (suspend)
        )
      )
    (let ((gp-1 (rand-vu-int-range 3 6)))
      (dotimes (s5-0 gp-1)
        (fire-shot self)
        (ja-no-eval :group! cty-sniper-turret-barrelfire-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))
          )
        (suspend)
        (if (and *target* (logtest? (-> *target* target-flags) (target-flags tf2 tinvuln1)))
            (go-virtual fire)
            )
        )
      )
    (go-virtual fire)
    )
  :post (behavior ()
    (let* ((gp-0 *target*)
           (a1-1 (if (type? gp-0 process-focusable)
                     gp-0
                     )
                 )
           )
      (if a1-1
          (los-control-method-9 (-> self los) a1-1 (the-as vector #f) 819.2 4096.0)
          )
      )
    (when (or (cty-sniper-turret-method-41 self) (logtest? (-> self flags) (cty-sniper-turret-flag cst12)))
      (cond
        ((logtest? (-> self flags) (cty-sniper-turret-flag cst12))
         (logclear! (-> self flags) (cty-sniper-turret-flag cst12))
         (remove-setting! 'pov-offset)
         (send-event self 'pov-cam-off)
         (send-event (handle->process (-> self reticle)) 'off)
         (go-virtual fire)
         )
        (else
          (remove-setting! 'interp-time)
          (logior! (-> self flags) (cty-sniper-turret-flag cst12))
          )
        )
      )
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate ready (cty-sniper-turret)
  :virtual #t
  :event cty-sniper-turret-handler
  :enter (behavior ((arg0 symbol))
    (logior! (-> self flags) (cty-sniper-turret-flag cst0))
    (set-time! (-> self gun-timer))
    (send-event (handle->process (-> self reticle)) 'unlock)
    (set! (-> self gun-current-aim-location quad) (-> *target* control trans quad))
    (send-event (handle->process (-> self reticle)) 'update (-> self gun-current-aim-location))
    )
  :trans (behavior ()
    (if (cty-sniper-turret-method-39 self)
        (go-virtual die)
        )
    )
  :code (behavior ((arg0 symbol))
    (when arg0
      (ja-no-eval :group! cty-sniper-turret-activate-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      (ja :group! cty-sniper-turret-activate-ja :num! max)
      )
    (if (not (cty-sniper-turret-method-39 self))
        (go-virtual fire)
        )
    (until #f
      (ja-no-eval :group! cty-sniper-turret-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post sniper-turret-post
  )

;; failed to figure out what this is:
(defstate fire (cty-sniper-turret)
  :virtual #t
  :event cty-sniper-turret-handler
  :enter (behavior ()
    (logior! (-> self flags) (cty-sniper-turret-flag cst8))
    (send-event (handle->process (-> self reticle)) 'unlock)
    (logclear! (-> self flags) (cty-sniper-turret-flag cst11))
    )
  :exit (behavior ()
    (disable *screen-filter*)
    )
  :trans (behavior ()
    (cond
      ((cty-sniper-turret-method-39 self)
       (go-virtual die)
       )
      ((< 266240.0 (if *target*
                       (vector-vector-xz-distance (-> self root trans) (-> *target* control trans))
                       4096000.0
                       )
          )
       (go-virtual asleep)
       )
      )
    )
  :code (behavior ()
    (local-vars (v1-56 time-frame) (a0-17 int) (gp-5 time-frame) (f30-1 float))
    (until #f
      (while (not (logtest? (-> self flags) (cty-sniper-turret-flag cst7)))
        (until (cty-sniper-turret-method-40 self)
          (suspend)
          )
        1.0
        (remove-setting! 'entity-name)
        (set-setting! 'interp-time 'abs 450.0 0)
        (set-setting! 'allow-look-around #f 0.0 0)
        (suspend)
        (let ((gp-1 (vector-! (new 'stack-no-clear 'vector) (-> self root trans) (target-pos 0)))
              (s5-2 (vector-! (new 'stack-no-clear 'vector) (camera-pos) (target-pos 0)))
              )
          (set! (-> gp-1 y) 0.0)
          (set! (-> s5-2 y) 0.0)
          (let ((f30-0 (vector-dot gp-1 s5-2)))
            (when (and (< f30-0 0.0) (not (-> *setting-control* user-current freeze-screen)))
              (set-setting! 'mode-name 'cam-no-trans 0.0 0)
              (suspend)
              (let ((s4-1 (current-time)))
                (until (time-elapsed? s4-1 (seconds 0.5))
                  (let ((s3-0 (new 'stack-no-clear 'vector)))
                    (set! (-> s3-0 quad) (the-as uint128 0))
                    (cond
                      ((< (* (-> s5-2 x) (-> gp-1 z)) (* (-> s5-2 z) (-> gp-1 x)))
                       (set! (-> s3-0 z) (- (-> s5-2 x)))
                       (set! (-> s3-0 x) (-> s5-2 z))
                       )
                      (else
                        (set! (-> s3-0 z) (-> s5-2 x))
                        (set! (-> s3-0 x) (- (-> s5-2 z)))
                        )
                      )
                    (vector+! s3-0 s3-0 (target-pos 0))
                    (+! (-> s3-0 y) 20480.0)
                    (set! (-> *camera* slave 0 trans quad) (-> s3-0 quad))
                    )
                  (vector-! gp-1 (-> self root trans) (target-pos 0))
                  (vector-! s5-2 (camera-pos) (target-pos 0))
                  (set-setting! 'interp-time 'abs 300.0 0)
                  (suspend)
                  )
                )
              )
            (set-setting! 'mode-name 'cam-pov-track 0.0 0)
            (let ((v1-43 (process->ppointer self)))
              (set-setting! 'pov-handle v1-43 3.0 (-> v1-43 0 pid))
              )
            (set-setting! 'pov-offset 'abs (-> self pos-cam-offset) 0)
            (when (not (-> *setting-control* user-current freeze-screen))
              (set-setting! 'matrix-blend-max-angle 'abs (degrees 10.0) 0)
              (let ((gp-2 (current-time)))
                (until (>= v1-56 a0-17)
                  (suspend)
                  (set! v1-56 (- (current-time) gp-2))
                  (set! a0-17 (if (< 0.0 f30-0)
                                  450
                                  300
                                  )
                        )
                  )
                )
              (remove-setting! 'matrix-blend-max-angle)
              )
            )
          )
        (cond
          ((not (-> *setting-control* user-current freeze-screen))
           (setup
             *screen-filter*
             (new 'static 'vector)
             (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
             (* 0.08 (seconds-per-frame))
             (bucket-id tex-hud-pris2)
             #x3fffff
             #x33001
             #t
             )
           (logior! (-> *target* focus-status) (focus-status ignore))
           (let ((gp-3 (current-time)))
             (until (time-elapsed? gp-3 (seconds 0.08))
               (suspend)
               )
             )
           (send-event self 'pov-cam-on)
           (send-event (handle->process (-> self reticle)) 'on)
           (setup
             *screen-filter*
             (new 'static 'vector :x 255.0 :y 255.0 :z 255.0 :w 128.0)
             (new 'static 'vector)
             (* 0.08 (seconds-per-frame))
             (bucket-id tex-hud-pris2)
             #x3fffff
             #x33001
             #t
             )
           (let ((gp-4 (current-time)))
             (until (time-elapsed? gp-4 (seconds 0.08))
               (suspend)
               )
             )
           (disable *screen-filter*)
           )
          (else
            (suspend)
            0
            )
          )
        )
      (until (not (focus-test? *target* grabbed))
        (until (not (focus-test? *target* grabbed))
          (suspend)
          (set! f30-1 (rand-vu-float-range 2.0 4.5))
          (set! gp-5 (current-time))
          (label cfg-43)
          )
        (label cfg-44)
        (suspend)
        (b! (not (time-elapsed? gp-5 (the int (* 300.0 f30-1)))) cfg-43)
        (logclear! (-> *target* focus-status) (focus-status ignore))
        )
      (logior! (-> self flags) (cty-sniper-turret-flag cst11))
      (set! (-> self firing-sight-pos quad) (-> self sight-pos quad))
      (send-event (handle->process (-> self reticle)) 'lock)
      (let ((a1-17 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-17 from) (process->ppointer self))
        (set! (-> a1-17 num-params) 0)
        (set! (-> a1-17 message) 'turret-firing)
        (let ((t9-25 send-event-function)
              (v1-126 (-> *game-info* sub-task-list (game-task-node city-sniper-fight-resolution)))
              )
          (t9-25
            (handle->process (if (-> v1-126 manager)
                                 (-> v1-126 manager manager)
                                 (the-as handle #f)
                                 )
                             )
            a1-17
            )
          )
        )
      (let ((gp-6 (current-time)))
        (until (time-elapsed? gp-6 (seconds 1.5))
          (when (focus-test? *target* grabbed)
            (logclear! (-> self flags) (cty-sniper-turret-flag cst11))
            (send-event (handle->process (-> self reticle)) 'unlock)
            (goto cfg-44)
            )
          (suspend)
          )
        )
      (if (and (logtest? (-> self flags) (cty-sniper-turret-flag cst7)) (not (cty-sniper-turret-method-39 self)))
          (go-virtual locked-on)
          )
      (logclear! (-> self flags) (cty-sniper-turret-flag cst11))
      (send-event (handle->process (-> self reticle)) 'unlock)
      )
    #f
    )
  :post sniper-turret-post
  )

;; failed to figure out what this is:
(defstate die (cty-sniper-turret)
  :virtual #t
  :event cty-sniper-turret-handler
  :code (behavior ()
    (set-setting! 'faction-command '((faction-strength kg -5)) 0.0 0)
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    (quaternion-identity! (-> self gun-azimuth-jmod rotation))
    (quaternion-identity! (-> self gun-shoulder-jmod rotation))
    (quaternion-identity! (-> self gun-elbow-jmod rotation))
    (remove-setting! 'interp-time)
    (suspend)
    (send-event self 'pov-cam-off)
    (send-event (handle->process (-> self reticle)) 'off)
    (set-setting! 'mode-name 'cam-no-trans 0.0 0)
    (persist-with-delay *setting-control* 'rapid-tracking (seconds 0.1) 'rapid-tracking #f 0.0 0)
    (suspend)
    (let ((a3-4 (res-lump-struct (-> self entity) 'cutaway-camera structure)))
      (when a3-4
        (set-setting! 'entity-name a3-4 0.0 0)
        (suspend)
        (suspend)
        (suspend)
        (suspend)
        (suspend)
        (remove-setting! 'interp-time)
        (suspend)
        (remove-setting! 'entity-name)
        )
      )
    (suspend)
    (ja-no-eval :group! cty-sniper-turret-collapse-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (suspend)
    (set-setting! 'interp-time 'abs 600.0 0)
    (remove-setting! 'mode-name)
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 0.25))
        (suspend)
        )
      )
    (send-event (handle->process (-> self reticle)) 'die)
    (let ((v1-71 (-> self root root-prim)))
      (set! (-> v1-71 prim-core collide-as) (collide-spec))
      (set! (-> v1-71 prim-core collide-with) (collide-spec))
      )
    0
    (process-entity-status! self (entity-perm-status subtask-complete) #t)
    (go-virtual explode)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate explode (cty-sniper-turret)
  :virtual #t
  :enter (behavior ()
    (sound-play "turret-explode")
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (set! (-> self root root-prim local-sphere w) 491520.0)
    )
  :exit (behavior ()
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer self))
      (set! (-> a1-0 num-params) 0)
      (set! (-> a1-0 message) 'turret-killed)
      (let ((t9-0 send-event-function)
            (v1-4 (-> *game-info* sub-task-list (game-task-node city-sniper-fight-resolution)))
            )
        (t9-0
          (handle->process (if (-> v1-4 manager)
                               (-> v1-4 manager manager)
                               (the-as handle #f)
                               )
                           )
          a1-0
          )
        )
      )
    )
  :code (behavior ()
    (cond
      ((logtest? (-> *part-group-id-table* 1465 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 1465))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 1465))
        )
      )
    (suspend)
    (let ((gp-2 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
      (let ((s5-0 (new 'stack-no-clear 'vector)))
        (set! (-> s5-0 quad) (-> *up-vector* quad))
        (vector-normalize-copy! (-> gp-2 fountain-rand-transv-lo) s5-0 81920.0)
        (vector-normalize-copy! (-> gp-2 fountain-rand-transv-hi) s5-0 245760.0)
        )
      (set! (-> gp-2 fountain-rand-transv-lo x) -61440.0)
      (set! (-> gp-2 fountain-rand-transv-lo z) -61440.0)
      (set! (-> gp-2 fountain-rand-transv-hi x) 61440.0)
      (set! (-> gp-2 fountain-rand-transv-hi z) 61440.0)
      (process-spawn
        joint-exploder
        (art-group-get-by-name *level* "skel-cty-sniper-turret-explode" (the-as (pointer level) #f))
        10
        gp-2
        *cty-sniper-turret-exploder-params*
        :name "joint-exploder"
        :to self
        :unk 0
        )
      )
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

;; definition for method 39 of type cty-sniper-turret
(defmethod cty-sniper-turret-method-39 ((this cty-sniper-turret))
  (with-pp
    (cond
      ((and (= (length (-> this actor-group 0)) 1) (not (-> this actor-group 0 data 0 actor)))
       #f
       )
      (else
        (dotimes (s5-0 (length (-> this actor-group 0)))
          (let ((v1-10 (-> this actor-group 0 data s5-0))
                (a1-0 (new 'stack-no-clear 'event-message-block))
                )
            (set! (-> a1-0 from) (process->ppointer pp))
            (set! (-> a1-0 num-params) 0)
            (set! (-> a1-0 message) 'alive)
            (let ((t9-1 send-event-function)
                  (v1-11 (-> v1-10 actor))
                  )
              (if (t9-1
                    (if v1-11
                        (-> v1-11 extra process)
                        )
                    a1-0
                    )
                  (return #f)
                  )
              )
            )
          )
        #t
        )
      )
    )
  )

;; definition for method 10 of type cty-sniper-turret
(defmethod deactivate ((this cty-sniper-turret))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (logclear! (-> this flags) (cty-sniper-turret-flag cst6))
  (sound-stop (-> this turn-sound-id))
  (disable *screen-filter*)
  ((method-of-type process-focusable deactivate) this)
  (none)
  )

;; definition for method 7 of type cty-sniper-turret
;; WARN: Return type mismatch process-focusable vs cty-sniper-turret.
(defmethod relocate ((this cty-sniper-turret) (offset int))
  (the-as cty-sniper-turret ((method-of-type process-focusable relocate) this offset))
  )

;; definition for method 38 of type cty-sniper-turret
;; INFO: Used lq/sq
(defmethod cty-sniper-turret-method-38 ((this cty-sniper-turret) (arg0 vector) (arg1 quaternion) (arg2 vector) (arg3 float))
  (let ((s1-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s1-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s1-0 reaction) cshape-reaction-default)
    (set! (-> s1-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((s0-0 (new 'process 'collide-shape-prim-group s1-0 (the-as uint 5) 0)))
      (set! (-> s1-0 total-prims) (the-as uint 6))
      (set! (-> s0-0 prim-core collide-as) (collide-spec obstacle camera-blocker pusher))
      (set! (-> s0-0 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> s0-0 prim-core action) (collide-action solid))
      (set-vector! (-> s0-0 local-sphere) 0.0 0.0 0.0 32768.0)
      (set! (-> s1-0 root-prim) s0-0)
      )
    (pusher-init s1-0)
    (let ((v1-14 (new 'process 'collide-shape-prim-mesh s1-0 (the-as uint 4) (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set! (-> v1-14 transform-index) 3)
      (set-vector! (-> v1-14 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-mesh s1-0 (the-as uint 3) (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid))
      (set! (-> v1-16 transform-index) 5)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-mesh s1-0 (the-as uint 2) (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid))
      (set! (-> v1-18 transform-index) 6)
      (set-vector! (-> v1-18 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-mesh s1-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-20 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-20 prim-core action) (collide-action solid))
      (set! (-> v1-20 transform-index) 7)
      (set-vector! (-> v1-20 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-mesh s1-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-22 prim-core collide-as) (collide-spec obstacle pusher))
      (set! (-> v1-22 prim-core collide-with) (collide-spec jak bot player-list))
      (set! (-> v1-22 prim-core action) (collide-action solid))
      (set! (-> v1-22 transform-index) 8)
      (set-vector! (-> v1-22 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (set! (-> s1-0 nav-radius) (* 0.75 (-> s1-0 root-prim local-sphere w)))
    (let ((v1-25 (-> s1-0 root-prim)))
      (set! (-> s1-0 backup-collide-as) (-> v1-25 prim-core collide-as))
      (set! (-> s1-0 backup-collide-with) (-> v1-25 prim-core collide-with))
      )
    (set! (-> this root) s1-0)
    )
  (set! (-> this root trans quad) (-> arg0 quad))
  (quaternion-copy! (-> this root quat) arg1)
  (set! (-> this offset quad) (-> arg2 quad))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-cty-sniper-turret" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this draw light-index) (the-as uint 10))
  (init-los! (-> this los) this (seconds 0.3) 327680.0 (collide-spec backgnd))
  (init (-> this gun-elev-jmod) this (the-as uint 8) (joint-mod-base-flags attached))
  (init (-> this gun-azimuth-jmod) this (the-as uint 4) (joint-mod-base-flags attached))
  (init (-> this gun-elbow-jmod) this (the-as uint 6) (joint-mod-base-flags attached))
  (init (-> this gun-shoulder-jmod) this (the-as uint 5) (joint-mod-base-flags attached))
  (set! (-> this gun-elev) 0.0)
  (set! (-> this gun-elev-cam) 0.0)
  (set! (-> this gun-spread) 728.1778)
  (set! (-> this gun-elev-joint-index) 8)
  (set! (-> this gun-azimuth-joint-index) 4)
  (quaternion-zero! (-> this tank-quat))
  (quaternion-copy! (-> this rotate-quat) arg1)
  (set! (-> this rotate-rate) 0.0)
  (set! (-> this rotate-mult) arg3)
  (set! (-> this pos-cam-offset quad) (-> (new 'static 'vector :y 61440.0 :w 1.0) quad))
  (set-time! (-> this gun-timer))
  (set! (-> this flags) (cty-sniper-turret-flag))
  (set! (-> this fov-mult) 1.0)
  (set! (-> this shot-range) 327680.0)
  (set! (-> this gun-aims-from-joint) 10)
  (set! (-> this reticle)
        (process->handle (ppointer->process (process-spawn
                                              cty-sniper-turret-reticle
                                              arg0
                                              (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                              (lookup-texture-id-by-name "holo-curve" (the-as string #f))
                                              :name "cty-sniper-turret-reticle"
                                              :to this
                                              )
                                            )
                         )
        )
  (let ((a0-62 (-> this skel root-channel 0)))
    (set! (-> a0-62 frame-group) (the-as art-joint-anim (-> this draw art-group data 3)))
    (set! (-> a0-62 frame-num) 0.0)
    (joint-control-channel-group! a0-62 (the-as art-joint-anim (-> this draw art-group data 3)) num-func-identity)
    )
  (transform-post)
  (set! (-> this turn-sound-id) (new-sound-id))
  (logior! (-> this flags) (cty-sniper-turret-flag cst9))
  (set! (-> this minimap) (add-icon! *minimap* this (the-as uint 129) (the-as int #f) (the-as vector #t) 0))
  (go (method-of-object this waiting-for-batteries))
  )

;; definition for method 11 of type cty-sniper-turret
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this cty-sniper-turret) (arg0 entity-actor))
  (local-vars (sv-16 res-tag))
  (set! (-> this entity) arg0)
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-1 (res-lump-data arg0 'actor-groups (pointer actor-group) :tag-ptr (& sv-16))))
    (when (and v1-1 (nonzero? (-> sv-16 elt-count)))
      (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
      (set! (-> this actor-group) v1-1)
      )
    )
  (set! (-> this hud-buttons) (the-as handle #f))
  (let ((t9-1 (method-of-object this cty-sniper-turret-method-38))
        (a1-6 (-> arg0 extra trans))
        (a2-1 (-> arg0 quat))
        (a3-1 (new 'stack-no-clear 'vector))
        )
    (set! (-> a3-1 x) 0.0)
    (set! (-> a3-1 y) 0.0)
    (set! (-> a3-1 z) 0.0)
    (set! (-> a3-1 w) 1.0)
    (t9-1 this a1-6 a2-1 a3-1 0.0)
    )
  )




