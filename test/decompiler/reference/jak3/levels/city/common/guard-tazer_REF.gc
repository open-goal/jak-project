;;-*-Lisp-*-
(in-package goal)

;; definition for function spread-lightning-lazer
;; INFO: Used lq/sq
(defun spread-lightning-lazer ((arg0 lightning-control) (arg1 vector) (arg2 vector) (arg3 vector))
  (local-vars (sv-640 int) (sv-656 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (set! (-> s5-0 quad) (-> arg1 quad))
      (let ((s4-0 (new 'stack-no-clear 'vector)))
        (set! (-> s4-0 quad) (-> arg2 quad))
        (let ((s3-0 (new 'stack-no-clear 'vector))
              (s2-0 (new 'stack-no-clear 'quaternion))
              )
          (vector-length arg2)
          (let ((s1-0 (new 'stack-no-clear 'vector)))
            (set! (-> s1-0 quad) (-> arg3 quad))
            (let ((s0-0 (new 'stack-no-clear 'collide-query)))
              (set! sv-640 0)
              (while (< sv-640 6)
                (let ((v1-6 s0-0))
                  (set! (-> v1-6 radius) 2867.2)
                  (set! (-> v1-6 collide-with)
                        (collide-spec jak bot civilian enemy vehicle-sphere hit-by-others-list player-list)
                        )
                  (set! (-> v1-6 ignore-process0) #f)
                  (set! (-> v1-6 ignore-process1) #f)
                  (set! (-> v1-6 ignore-pat)
                        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
                        )
                  (set! (-> v1-6 action-mask) (collide-action solid))
                  )
                (set! (-> s0-0 start-pos quad) (-> s5-0 quad))
                (set! (-> s0-0 move-dist quad) (-> s4-0 quad))
                (set-from-point-offset-pad! (-> s0-0 bbox) (-> s0-0 start-pos) (-> s0-0 move-dist) (-> s0-0 radius))
                (fill-using-bounding-box *collide-cache* s0-0)
                (set! (-> s0-0 radius) 409.6)
                (let ((f0-4 (probe-using-line-sphere *collide-cache* s0-0)))
                  (cond
                    ((>= f0-4 0.0)
                     (let ((a1-4 s3-0))
                       (let ((v1-13 (-> s0-0 start-pos)))
                         (let ((a0-12 (-> s0-0 move-dist)))
                           (let ((a2-2 f0-4))
                             (.mov vf7 a2-2)
                             )
                           (.lvf vf5 (&-> a0-12 quad))
                           )
                         (.lvf vf4 (&-> v1-13 quad))
                         )
                       (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                       (.mul.x.vf acc vf5 vf7 :mask #b111)
                       (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                       (.svf (&-> a1-4 quad) vf6)
                       )
                     (set! (-> s5-0 quad) (-> s3-0 quad))
                     )
                    (else
                      (vector+! (-> s0-0 start-pos) s5-0 s4-0)
                      (let ((a1-7 (-> s0-0 start-pos)))
                        (let ((v1-16 (-> s0-0 start-pos)))
                          (let ((a0-16 s1-0))
                            (let ((a2-4 -2048.0))
                              (.mov vf7 a2-4)
                              )
                            (.lvf vf5 (&-> a0-16 quad))
                            )
                          (.lvf vf4 (&-> v1-16 quad))
                          )
                        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                        (.mul.x.vf acc vf5 vf7 :mask #b111)
                        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                        (.svf (&-> a1-7 quad) vf6)
                        )
                      (vector-negate! (-> s0-0 move-dist) s4-0)
                      (set! f0-4 (probe-using-line-sphere *collide-cache* s0-0))
                      (when (>= f0-4 0.0)
                        (let ((a1-10 s3-0))
                          (let ((v1-19 (-> s0-0 start-pos)))
                            (let ((a0-19 (-> s0-0 move-dist)))
                              (let ((a2-5 f0-4))
                                (.mov vf7 a2-5)
                                )
                              (.lvf vf5 (&-> a0-19 quad))
                              )
                            (.lvf vf4 (&-> v1-19 quad))
                            )
                          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                          (.mul.x.vf acc vf5 vf7 :mask #b111)
                          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                          (.svf (&-> a1-10 quad) vf6)
                          )
                        (let ((a1-11 s3-0))
                          (let ((v1-20 s3-0))
                            (let ((a0-20 s1-0))
                              (let ((a2-7 2048.0))
                                (.mov vf7 a2-7)
                                )
                              (.lvf vf5 (&-> a0-20 quad))
                              )
                            (.lvf vf4 (&-> v1-20 quad))
                            )
                          (.add.x.vf vf6 vf0 vf0 :mask #b1000)
                          (.mul.x.vf acc vf5 vf7 :mask #b111)
                          (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
                          (.svf (&-> a1-11 quad) vf6)
                          )
                        (set! (-> s5-0 quad) (-> s3-0 quad))
                        )
                      )
                    )
                  (cond
                    ((>= f0-4 0.0)
                     (+! (-> s3-0 x) (rand-vu-float-range -819.2 819.2))
                     (+! (-> s3-0 y) (rand-vu-float-range -819.2 819.2))
                     (+! (-> s3-0 z) (rand-vu-float-range -819.2 819.2))
                     (set-point! arg0 (-> arg0 state points-to-draw) s3-0)
                     (+! (-> arg0 state points-to-draw) 1)
                     (set! sv-656 (-> s0-0 best-other-tri normal))
                     (quaternion-from-two-vectors! s2-0 s1-0 sv-656)
                     (vector-orient-by-quat! s4-0 s4-0 s2-0)
                     (set! (-> s1-0 quad) (-> sv-656 quad))
                     (vector-flatten! s4-0 s4-0 sv-656)
                     )
                    (else
                      (vector+! s5-0 s5-0 s4-0)
                      (when (< sv-640 6)
                        (set-point! arg0 (-> arg0 state points-to-draw) s5-0)
                        (+! (-> arg0 state points-to-draw) 1)
                        )
                      )
                    )
                  )
                (set! sv-640 (+ sv-640 1))
                )
              )
            )
          )
        )
      )
    #f
    )
  )

;; definition for method 263 of type crimson-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defmethod crimson-guard-method-263 ((this crimson-guard))
  (local-vars (sv-832 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 14)))
           (v0-1 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 15)))
           (s2-0 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) s4-0 v0-1) 16384.0))
           (s1-0
             (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> this target-pos-predict-miss) s4-0) 16384.0)
             )
           (s5-0 (new 'stack-no-clear 'vector))
           (s3-0 (new 'stack-no-clear 'collide-query))
           )
      (when (< 1820.4445 (vector-vector-angle-safe s2-0 s1-0))
        (let* ((a1-9 (vector-normalize! (vector-cross! (new 'stack-no-clear 'vector) s2-0 s1-0) 1.0))
               (a2-1 (quaternion-vector-angle! (new 'stack-no-clear 'quaternion) a1-9 1820.4445))
               )
          (vector-orient-by-quat! s1-0 s2-0 a2-1)
          )
        )
      (let ((a0-12 s4-0))
        (let ((v1-8 s4-0))
          (let ((a1-12 0.2))
            (.mov vf7 a1-12)
            )
          (.lvf vf5 (&-> s2-0 quad))
          (.lvf vf4 (&-> v1-8 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> a0-12 quad) vf6)
        )
      (vector+! s5-0 s4-0 s1-0)
      (let ((v1-10 s3-0))
        (set! (-> v1-10 radius) 409.6)
        (set! (-> v1-10 collide-with)
              (collide-spec jak bot civilian enemy vehicle-sphere hit-by-others-list player-list)
              )
        (set! (-> v1-10 ignore-process0) #f)
        (set! (-> v1-10 ignore-process1) #f)
        (set! (-> v1-10 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-10 action-mask) (collide-action solid))
        )
      (set! (-> s3-0 start-pos quad) (-> s4-0 quad))
      (set! (-> s3-0 move-dist quad) (-> s1-0 quad))
      (set! (-> this l-control state points-to-draw) 0)
      (let ((f0-3 (fill-and-probe-using-line-sphere *collide-cache* s3-0))
            (s2-1 (new 'stack-no-clear 'vector))
            )
        (cond
          ((>= f0-3 0.0)
           (vector-float*! s1-0 (-> s3-0 move-dist) f0-3)
           (vector+! s5-0 s4-0 s1-0)
           (point-in-plane-<-point+normal! s2-1 s5-0 (-> s3-0 best-other-tri normal))
           (vector-! s2-1 s2-1 s5-0)
           (let ((s1-1 quaternion-vector-angle!)
                 (s0-0 (new 'stack-no-clear 'quaternion))
                 )
             (set! sv-832 (-> s3-0 best-other-tri normal))
             (let* ((a2-3 (rand-vu-float-range 0.0 65536.0))
                    (a2-4 (s1-1 s0-0 sv-832 a2-3))
                    )
               (vector-orient-by-quat! s2-1 s2-1 a2-4)
               )
             )
           (cond
             ((logtest? (-> *part-group-id-table* 254 flags) (sp-group-flag sp13))
              (set! (-> *launch-matrix* trans quad) (-> s4-0 quad))
              (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 254))
              )
             (else
               (set! (-> *launch-matrix* trans quad) (-> s4-0 quad))
               (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 254))
               )
             )
           (cond
             ((logtest? (-> *part-group-id-table* 254 flags) (sp-group-flag sp13))
              (set! (-> *launch-matrix* trans quad) (-> s5-0 quad))
              (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 254))
              )
             (else
               (set! (-> *launch-matrix* trans quad) (-> s5-0 quad))
               (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 254))
               )
             )
           (set-point! (-> this l-control) 0 s4-0)
           (set-point! (-> this l-control) 1 s5-0)
           (set! (-> this l-control spec) (-> *lightning-spec-id-table* 19))
           (+! (-> this l-control state points-to-draw) 2)
           (let* ((s1-6 (-> s3-0 best-other-tri collide-ptr))
                  (v1-91 (if (type? s1-6 collide-shape-prim)
                             s1-6
                             )
                         )
                  (s1-7 #t)
                  )
             (when v1-91
               (set! s1-7 #f)
               (let ((s0-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
                 (set! (-> s0-1 ent) (-> this entity))
                 (set! (-> s0-1 charge) 1.0)
                 (set! (-> s0-1 options) (projectile-options))
                 (logclear! (-> s0-1 options) (projectile-options po14 po15 po16))
                 (set! (-> s0-1 notify-handle) (process->handle this))
                 (set! (-> s0-1 owner-handle) (the-as handle #f))
                 (set! (-> s0-1 target-handle) (the-as handle #f))
                 (set! (-> s0-1 target-pos quad) (the-as uint128 0))
                 (set! (-> s0-1 ignore-handle) (process->handle this))
                 (set! (-> s0-1 attack-id) (-> this attack-id))
                 (set! (-> s0-1 timeout) (seconds 4))
                 (set! (-> s0-1 pos quad) (-> s4-0 quad))
                 (vector-! (-> s0-1 vel) s5-0 s4-0)
                 (vector-normalize! (-> s0-1 vel) 131072.0)
                 (spawn-projectile guard-lazer-shot s0-1 this *default-dead-pool*)
                 )
               )
             )
           (spread-lightning-lazer (-> this l-control) s5-0 s2-1 (-> s3-0 best-other-tri normal))
           )
          (else
            (cond
              ((logtest? (-> *part-group-id-table* 254 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> s4-0 quad))
               (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 254))
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> s4-0 quad))
                (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 254))
                )
              )
            (cond
              ((logtest? (-> *part-group-id-table* 254 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> s5-0 quad))
               (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 254))
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> s5-0 quad))
                (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 254))
                )
              )
            (set! (-> this l-control state points-to-draw) 9)
            (set! (-> this l-control spec) (-> *lightning-spec-id-table* 20))
            (let ((v1-176 s4-0))
              (set! (-> this l-control state meet data 0 quad) (-> v1-176 quad))
              )
            (let ((a0-97 (-> this l-control))
                  (v1-178 s5-0)
                  )
              (set! (-> a0-97 state meet data (+ (-> a0-97 state points-to-draw) -1) quad) (-> v1-178 quad))
              )
            )
          )
        )
      )
    (none)
    )
  )

;; failed to figure out what this is:
(defstate attack (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (set! (-> self joint-enable) #t)
    (logior! (-> self focus-status) (focus-status dangerous))
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-5 nav callback-info) *null-nav-callback-info*)
      )
    0
    (let ((v1-8 self))
      (set! (-> v1-8 enemy-flags) (the-as enemy-flag (logclear (-> v1-8 enemy-flags) (enemy-flag ef38))))
      )
    0
    (set! (-> self miss-amount) 0.0)
    (set-time! (-> self state-time))
    (set! (-> self lazer-sound) (new 'static 'sound-id))
    0
    )
  :exit (behavior ()
    (if (nonzero? (-> self lazer-sound))
        (sound-stop (-> self lazer-sound))
        )
    (iterate-prims
      (-> self root)
      (lambda ((arg0 collide-shape-prim)) (logclear! (-> arg0 prim-core action) (collide-action deadly)) (none))
      )
    (let ((v1-5 (-> self l-control))
          (a0-2 0)
          )
      (let ((a1-2 (!= a0-2 (-> v1-5 state mode))))
        (case a0-2
          ((3)
           (if a1-2
               (set! (-> v1-5 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-5 state start-color) (-> v1-5 spec start-color))
           (set! (-> v1-5 state end-color) (-> v1-5 spec end-color))
           )
          )
        )
      (set! (-> v1-5 state mode) (the-as uint a0-2))
      )
    (set! (-> self joint-enable) #f)
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (if (and (time-elapsed? (-> self state-time) (seconds 1))
             (or (< 32768.0 (-> self target-self-xz-dist)) (not (logtest? (-> self flags) (citizen-flag target-in-sight))))
             )
        (go-hostile self)
        )
    (let ((v1-12 (handle->process (-> self focus handle))))
      (if (and v1-12 (or (focus-test? (the-as process-focusable v1-12) inactive)
                         (focus-test? (the-as process-focusable v1-12) disable)
                         )
               )
          (set! v1-12 (the-as process #f))
          )
      (cond
        ((not v1-12)
         (go-virtual active)
         )
        ((and (and (handle->process (-> self focus handle))
                   (not (logtest? (-> (the-as process-focusable (handle->process (-> self focus handle))) focus-status)
                                  (focus-status disable dead ignore grabbed)
                                  )
                        )
                   )
              (< (fabs (-> self target-y-angle)) 8192.0)
              )
         (if (< (-> self target-self-xz-dist) 16384.0)
             (go-virtual close-attack)
             (go-virtual attack-tazer)
             )
         )
        (else
          (set! (-> self next-shot) (+ (current-time) (seconds 1)))
          )
        )
      )
    )
  :code (behavior ()
    (local-vars (v1-37 symbol))
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! crimson-guard-idle-to-stab-idle-ja :num! (seek! (ja-aframe 7.0 0)) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! (ja-aframe 7.0 0)))
      )
    (until #f
      (while (or (< 7281.778 (fabs (-> self target-y-angle))) (>= (-> self next-shot) (current-time)))
        (when (not (orient-towards-code (the-as degrees #x45e38e39)))
          (let ((v1-17 (ja-group)))
            (if (not (and v1-17 (= v1-17 crimson-guard-stab-idle-loop-ja)))
                (ja-channel-push! 1 (seconds 0.1))
                )
            )
          (ja-no-eval :group! crimson-guard-stab-idle-loop-ja :num! (loop!))
          (until v1-37
            (suspend)
            (ja :num! (loop!))
            (set! v1-37
                  (or (< (current-time) (-> self next-shot))
                      (< (-> self target-self-xz-dist) 16384.0)
                      (not (and (handle->process (-> self focus handle))
                                (not (logtest? (-> (the-as process-focusable (handle->process (-> self focus handle))) focus-status)
                                               (focus-status disable dead ignore grabbed)
                                               )
                                     )
                                )
                           )
                      (>= (fabs (-> self target-y-angle)) 7281.778)
                      )
                  )
            )
          )
        (when (< (-> self target-self-xz-dist) 16384.0)
          (set! (-> self next-shot) 0)
          0
          )
        (suspend)
        )
      )
    #f
    )
  :post (behavior ()
    (citizen-method-213 self)
    (nav-enemy-method-187 self)
    )
  )

;; failed to figure out what this is:
(defstate attack-tazer (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (set! (-> self joint-enable) #t)
    (logior! (-> self focus-status) (focus-status dangerous))
    (let ((v1-5 self))
      (set! (-> v1-5 enemy-flags) (the-as enemy-flag (logclear (-> v1-5 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-5 nav callback-info) *null-nav-callback-info*)
      )
    0
    (let ((v1-8 self))
      (set! (-> v1-8 enemy-flags) (the-as enemy-flag (logclear (-> v1-8 enemy-flags) (enemy-flag ef38))))
      )
    0
    (set! (-> self miss-amount) 0.0)
    (set-time! (-> self state-time))
    (set! (-> self lazer-sound) (new 'static 'sound-id))
    0
    )
  :exit (behavior ()
    (if (nonzero? (-> self lazer-sound))
        (sound-stop (-> self lazer-sound))
        )
    (iterate-prims
      (-> self root)
      (lambda ((arg0 collide-shape-prim)) (logclear! (-> arg0 prim-core action) (collide-action deadly)) (none))
      )
    (let ((v1-5 (-> self l-control))
          (a0-2 0)
          )
      (let ((a1-2 (!= a0-2 (-> v1-5 state mode))))
        (case a0-2
          ((3)
           (if a1-2
               (set! (-> v1-5 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-5 state start-color) (-> v1-5 spec start-color))
           (set! (-> v1-5 state end-color) (-> v1-5 spec end-color))
           )
          )
        )
      (set! (-> v1-5 state mode) (the-as uint a0-2))
      )
    (set! (-> self joint-enable) #f)
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (if (and (time-elapsed? (-> self state-time) (seconds 1))
             (or (< 32768.0 (-> self target-self-xz-dist)) (not (logtest? (-> self flags) (citizen-flag target-in-sight))))
             )
        (go-hostile self)
        )
    (let ((v1-12 (handle->process (-> self focus handle))))
      (if (and v1-12 (or (focus-test? (the-as process-focusable v1-12) inactive)
                         (focus-test? (the-as process-focusable v1-12) disable)
                         )
               )
          (set! v1-12 (the-as process #f))
          )
      (if (not v1-12)
          (go-virtual active)
          )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja-no-eval :group! crimson-guard-stab-idle-to-attack-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (crimson-guard-method-262 self)
    (set! (-> self next-shot) (+ (current-time) (seconds 0.1)))
    (let ((v1-32 (-> (the-as collide-shape-prim-group (-> self root root-prim)) child 2)))
      (logior! (-> v1-32 prim-core action) (collide-action deadly))
      )
    (let* ((v1-33 *game-info*)
           (a0-8 (+ (-> v1-33 attack-id) 1))
           )
      (set! (-> v1-33 attack-id) a0-8)
      (set! (-> self attack-id) a0-8)
      )
    (set! (-> self lazer-sound) (sound-play "guard-zap"))
    (let ((v1-35 (-> self l-control))
          (a0-11 1)
          )
      (let ((a1-5 (!= a0-11 (-> v1-35 state mode))))
        (case a0-11
          ((3)
           (if a1-5
               (set! (-> v1-35 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-35 state start-color) (-> v1-35 spec start-color))
           (set! (-> v1-35 state end-color) (-> v1-35 spec end-color))
           )
          )
        )
      (set! (-> v1-35 state mode) (the-as uint a0-11))
      )
    (let ((gp-1 (current-time))
          (s5-1 150)
          (f30-0 1.0)
          )
      (ja-no-eval :group! crimson-guard-stab-attack-ja :num! (loop! f30-0) :frame-num 0.0)
      (until (time-elapsed? gp-1 s5-1)
        (crimson-guard-method-263 self)
        (suspend)
        (ja :num! (loop! f30-0))
        )
      )
    (let ((v1-58 (-> (the-as collide-shape-prim-group (-> self root root-prim)) child 2)))
      (logclear! (-> v1-58 prim-core action) (collide-action deadly))
      )
    (let ((v1-59 (-> self l-control))
          (a0-17 3)
          )
      (let ((a1-18 (!= a0-17 (-> v1-59 state mode))))
        (case a0-17
          ((3)
           (if a1-18
               (set! (-> v1-59 state counter) 0.0)
               )
           )
          ((1)
           (set! (-> v1-59 state start-color) (-> v1-59 spec start-color))
           (set! (-> v1-59 state end-color) (-> v1-59 spec end-color))
           )
          )
        )
      (set! (-> v1-59 state mode) (the-as uint a0-17))
      )
    (ja-no-eval :group! crimson-guard-stab-attack-to-stab-idle-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go-hostile self)
    )
  :post (behavior ()
    (citizen-method-213 self)
    (nav-enemy-method-187 self)
    )
  )

;; failed to figure out what this is:
(defstate tazer-hostile (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (crimson-guard-method-251 self)
    )
  :exit (behavior ()
    '()
    )
  :trans (behavior ()
    (crimson-guard-method-252 self)
    (if (or (< (-> self target-self-xz-dist) 32768.0) (>= 2 (the-as int (-> self focus aware))))
        (go-virtual attack)
        )
    (if (< (vector-vector-xz-distance (-> self root trans) (-> self move-position)) 8192.0)
        (crimson-guard-method-289 self (-> self last-quick-target-spot-angle))
        )
    )
  :code (behavior ()
    (citizen-travel-anim (the-as int (-> self draw art-group data (-> self enemy-info walk-anim))) 60)
    )
  :post (behavior ()
    (crimson-guard-method-253 self)
    (crimson-guard-method-254 self)
    )
  )




