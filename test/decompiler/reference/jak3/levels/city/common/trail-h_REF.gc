;;-*-Lisp-*-
(in-package goal)

;; definition of type trail-node
(deftype trail-node (structure)
  ((next-id          int16)
   (prev-id          int16)
   (parent-id        int16)
   (x                int16)
   (y                int16)
   (z                int16)
   (first-conn       uint16)
   (cost-from-start  uint16)
   (cost-to-goal     uint16)
   (flags            trail-node-flag)
   (conn-count       uint8)
   )
  (:methods
    (trail-node-method-9 () none)
    (trail-node-method-10 () none)
    (trail-node-method-11 () none)
    )
  )

;; definition for method 3 of type trail-node
(defmethod inspect ((this trail-node))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-node)
  (format #t "~1Tnext-id: ~D~%" (-> this next-id))
  (format #t "~1Tprev-id: ~D~%" (-> this prev-id))
  (format #t "~1Tparent-id: ~D~%" (-> this parent-id))
  (format #t "~1Tx: ~D~%" (-> this x))
  (format #t "~1Ty: ~D~%" (-> this y))
  (format #t "~1Tz: ~D~%" (-> this z))
  (format #t "~1Tfirst-conn: ~D~%" (-> this first-conn))
  (format #t "~1Tcost-from-start: ~D~%" (-> this cost-from-start))
  (format #t "~1Tcost-to-goal: ~D~%" (-> this cost-to-goal))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tconn-count: ~D~%" (-> this conn-count))
  (label cfg-4)
  this
  )

;; definition of type trail-visgroup
(deftype trail-visgroup (structure)
  ((first-node  uint16)
   (node-count  uint8)
   (pad         uint8)
   )
  )

;; definition for method 3 of type trail-visgroup
(defmethod inspect ((this trail-visgroup))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-visgroup)
  (format #t "~1Tfirst-node: ~D~%" (-> this first-node))
  (format #t "~1Tnode-count: ~D~%" (-> this node-count))
  (format #t "~1Tpad: ~D~%" (-> this pad))
  (label cfg-4)
  this
  )

;; definition of type trail-blocker
(deftype trail-blocker (structure)
  ((plane           plane   :inline)
   (center          vector  :inline)
   (radius-squared  float   :overlay-at (-> center data 3))
   )
  )

;; definition for method 3 of type trail-blocker
(defmethod inspect ((this trail-blocker))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-blocker)
  (format #t "~1Tplane: #<plane @ #x~X>~%" (-> this plane))
  (format #t "~1Tcenter: #<vector @ #x~X>~%" (-> this center))
  (format #t "~1Tradius-squared: ~f~%" (-> this center w))
  (label cfg-4)
  this
  )

;; definition of type trail-conn
(deftype trail-conn (structure)
  ((head-id      uint16)
   (tail-id      uint16)
   (flags        conn-flag)
   (visgroup-id  uint8)
   (cost         uint16)
   )
  (:methods
    (trail-conn-method-9 () none)
    )
  )

;; definition for method 3 of type trail-conn
(defmethod inspect ((this trail-conn))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-conn)
  (format #t "~1Thead-id: ~D~%" (-> this head-id))
  (format #t "~1Ttail-id: ~D~%" (-> this tail-id))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tvisgroup-id: ~D~%" (-> this visgroup-id))
  (format #t "~1Tcost: ~D~%" (-> this cost))
  (label cfg-4)
  this
  )

;; definition of type trail-conn-hash-cell
(deftype trail-conn-hash-cell (structure)
  ((first-conn  uint16)
   (conn-count  uint8)
   (pov-count   uint8)
   (first-pov   uint16)
   )
  )

;; definition for method 3 of type trail-conn-hash-cell
(defmethod inspect ((this trail-conn-hash-cell))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-conn-hash-cell)
  (format #t "~1Tfirst-conn: ~D~%" (-> this first-conn))
  (format #t "~1Tconn-count: ~D~%" (-> this conn-count))
  (format #t "~1Tpov-count: ~D~%" (-> this pov-count))
  (format #t "~1Tfirst-pov: ~D~%" (-> this first-pov))
  (label cfg-4)
  this
  )

;; definition of type trail-conn-search
(deftype trail-conn-search (structure)
  ((best-conn-id          int32)
   (best-dist             float)
   (src-pos               vector)
   (conn-pos              vector)
   (debug-cells-searched  int32)
   (debug-conns-searched  int32)
   (bounds                bounding-box4w  :inline)
   (cell-quads            qword           2 :inline)
   (conn-quads            qword           7 :inline)
   (cell-bits             vector16ub      2 :inline :overlay-at cell-quads)
   (conn-bits             vector16ub      2 :inline :overlay-at conn-quads)
   )
  )

;; definition for method 3 of type trail-conn-search
(defmethod inspect ((this trail-conn-search))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-conn-search)
  (format #t "~1Tbest-conn-id: ~D~%" (-> this best-conn-id))
  (format #t "~1Tbest-dist: ~f~%" (-> this best-dist))
  (format #t "~1Tsrc-pos: #<vector @ #x~X>~%" (-> this src-pos))
  (format #t "~1Tconn-pos: #<vector @ #x~X>~%" (-> this conn-pos))
  (format #t "~1Tdebug-cells-searched: ~D~%" (-> this debug-cells-searched))
  (format #t "~1Tdebug-conns-searched: ~D~%" (-> this debug-conns-searched))
  (format #t "~1Tbounds: #<bounding-box4w @ #x~X>~%" (-> this bounds))
  (format #t "~1Tcell-quads[2] @ #x~X~%" (-> this cell-quads))
  (format #t "~1Tconn-quads[7] @ #x~X~%" (-> this conn-quads))
  (format #t "~1Tcell-bits[2] @ #x~X~%" (-> this cell-quads))
  (format #t "~1Tconn-bits[2] @ #x~X~%" (-> this conn-quads))
  (label cfg-4)
  this
  )

;; definition of type trail-conn-hash
(deftype trail-conn-hash (basic)
  ((cell-width  meters)
   (origin      vector  :inline)
   (cell        (inline-array trail-conn-hash-cell))
   (conn-ids    (pointer uint16))
   )
  )

;; definition for method 3 of type trail-conn-hash
(defmethod inspect ((this trail-conn-hash))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tcell-width: (meters ~m)~%" (-> this cell-width))
  (format #t "~1Torigin: #<vector @ #x~X>~%" (-> this origin))
  (format #t "~1Tcell: #x~X~%" (-> this cell))
  (format #t "~1Tconn-ids: #x~X~%" (-> this conn-ids))
  (label cfg-4)
  this
  )

;; definition of type trail-cached-search-info
(deftype trail-cached-search-info (structure)
  ((goal-conn-id   int16)
   (orig-goal-pos  vector  :inline)
   (conn-goal-pos  vector  :inline)
   )
  )

;; definition for method 3 of type trail-cached-search-info
(defmethod inspect ((this trail-cached-search-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-cached-search-info)
  (format #t "~1Tgoal-conn-id: ~D~%" (-> this goal-conn-id))
  (format #t "~1Torig-goal-pos: #<vector @ #x~X>~%" (-> this orig-goal-pos))
  (format #t "~1Tconn-goal-pos: #<vector @ #x~X>~%" (-> this conn-goal-pos))
  (label cfg-4)
  this
  )

;; definition of type trail-cached-start-pov
(deftype trail-cached-start-pov (structure)
  ((last-updated       uint64)
   (pov-can-see-start  uint64)
   (next-node-id       int32)
   (start-pos          vector  :inline)
   )
  )

;; definition for method 3 of type trail-cached-start-pov
(defmethod inspect ((this trail-cached-start-pov))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'trail-cached-start-pov)
  (format #t "~1Tlast-updated: ~D~%" (-> this last-updated))
  (format #t "~1Tpov-can-see-start: ~D~%" (-> this pov-can-see-start))
  (format #t "~1Tnext-node-id: ~D~%" (-> this next-node-id))
  (format #t "~1Tstart-pos: #<vector @ #x~X>~%" (-> this start-pos))
  (label cfg-4)
  this
  )

;; definition of type trail-graph
(deftype trail-graph (basic)
  ((mode                       uint8)
   (search-id                  uint32)
   (open-head-id               int16)
   (goal-conn-id               int16)
   (goal-node-id               int16)
   (over-under-thresh          float)
   (over-under-above-too-low   float)
   (over-under-below-too-high  float)
   (pov-node-count             uint16)
   (node-count                 uint16)
   (conn-count                 uint16)
   (blocker-count              uint16)
   (conn-mask                  uint8)
   (node                       (inline-array trail-node))
   (conn                       (inline-array trail-conn))
   (blocker                    uint32)
   (conn-ids                   (pointer uint16))
   (visgroup                   (inline-array trail-conn-hash-cell))
   (visnode-ids                (pointer uint16))
   (conn-hash                  trail-conn-hash)
   (cell-pov-bit-arrays        uint32)
   (pov-can-see-goal           uint64)
   (cached-start-pov           trail-cached-start-pov  :inline)
   (orig-start-pos             vector                  :inline)
   (orig-goal-pos              vector                  :inline)
   (conn-start-pos             vector                  :inline)
   (conn-goal-pos              vector                  :inline)
   (open-quads                 qword                   6 :inline)
   (closed-quads               qword                   6 :inline)
   (open-bits                  vector16ub              2 :inline :overlay-at open-quads)
   (closed-bits                vector16ub              2 :inline :overlay-at closed-quads)
   )
  (:methods
    (trail-graph-method-9 () none)
    (trail-graph-method-10 () none)
    (trail-graph-method-11 () none)
    (trail-graph-method-12 () none)
    (trail-graph-method-13 () none)
    (trail-graph-method-14 () none)
    (trail-graph-method-15 () none)
    (trail-graph-method-16 () none)
    (trail-graph-method-17 () none)
    (trail-graph-method-18 () none)
    (trail-graph-method-19 () none)
    (trail-graph-method-20 () none)
    (trail-graph-method-21 () none)
    (trail-graph-method-22 () none)
    (trail-graph-method-23 () none)
    (trail-graph-method-24 () none)
    (trail-graph-method-25 () none)
    (trail-graph-method-26 () none)
    (trail-graph-method-27 () none)
    (trail-graph-method-28 () none)
    (trail-graph-method-29 () none)
    (trail-graph-method-30 () none)
    (trail-graph-method-31 () none)
    (trail-graph-method-32 () none)
    (trail-graph-method-33 () none)
    )
  )

;; definition for method 3 of type trail-graph
(defmethod inspect ((this trail-graph))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tmode: ~D~%" (-> this mode))
  (format #t "~1Tsearch-id: ~D~%" (-> this search-id))
  (format #t "~1Topen-head-id: ~D~%" (-> this open-head-id))
  (format #t "~1Tgoal-conn-id: ~D~%" (-> this goal-conn-id))
  (format #t "~1Tgoal-node-id: ~D~%" (-> this goal-node-id))
  (format #t "~1Tover-under-thresh: ~f~%" (-> this over-under-thresh))
  (format #t "~1Tover-under-above-too-low: ~f~%" (-> this over-under-above-too-low))
  (format #t "~1Tover-under-below-too-high: ~f~%" (-> this over-under-below-too-high))
  (format #t "~1Tpov-node-count: ~D~%" (-> this pov-node-count))
  (format #t "~1Tnode-count: ~D~%" (-> this node-count))
  (format #t "~1Tconn-count: ~D~%" (-> this conn-count))
  (format #t "~1Tblocker-count: ~D~%" (-> this blocker-count))
  (format #t "~1Tconn-mask: ~D~%" (-> this conn-mask))
  (format #t "~1Tnode: #x~X~%" (-> this node))
  (format #t "~1Tconn: #x~X~%" (-> this conn))
  (format #t "~1Tblocker: #x~X~%" (-> this blocker))
  (format #t "~1Tconn-ids: #x~X~%" (-> this conn-ids))
  (format #t "~1Tvisgroup: #x~X~%" (-> this visgroup))
  (format #t "~1Tvisnode-ids: #x~X~%" (-> this visnode-ids))
  (format #t "~1Tconn-hash: ~A~%" (-> this conn-hash))
  (format #t "~1Tcell-pov-bit-arrays: #x~X~%" (-> this cell-pov-bit-arrays))
  (format #t "~1Tpov-can-see-goal: ~D~%" (-> this pov-can-see-goal))
  (format #t "~1Tcached-start-pov: #<trail-cached-start-pov @ #x~X>~%" (-> this cached-start-pov))
  (format #t "~1Torig-start-pos: #<vector @ #x~X>~%" (-> this orig-start-pos))
  (format #t "~1Torig-goal-pos: #<vector @ #x~X>~%" (-> this orig-goal-pos))
  (format #t "~1Tconn-start-pos: #<vector @ #x~X>~%" (-> this conn-start-pos))
  (format #t "~1Tconn-goal-pos: #<vector @ #x~X>~%" (-> this conn-goal-pos))
  (format #t "~1Topen-quads[6] @ #x~X~%" (-> this open-quads))
  (format #t "~1Tclosed-quads[6] @ #x~X~%" (-> this closed-quads))
  (format #t "~1Topen-bits[2] @ #x~X~%" (-> this open-quads))
  (format #t "~1Tclosed-bits[2] @ #x~X~%" (-> this closed-quads))
  (label cfg-4)
  this
  )

;; definition for symbol *trail-graph*, type trail-graph
(define *trail-graph* (the-as trail-graph #f))




