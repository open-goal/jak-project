;;-*-Lisp-*-
(in-package goal)

;; definition for method 264 of type crimson-guard
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod crimson-guard-method-264 ((this crimson-guard))
  (let ((s4-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 14))))
    (new 'stack-no-clear 'vector)
    (let ((s5-0 (new 'stack-no-clear 'traj3d-params))
          (s3-1 (vector-! (new 'stack-no-clear 'vector) (-> this target-pos-predict-miss) s4-0))
          (f30-0 1.0)
          )
      (set! (-> s3-1 y) 0.0)
      (vector-rotate-around-y! s3-1 s3-1 (* 182.04445 (+ (if (zero? (rand-vu-int-count 2))
                                                             90.0
                                                             -90.0
                                                             )
                                                         (rand-vu-float-range -45.0 45.0)
                                                         )
                                            )
                               )
      (set! f30-0
            (cond
              ((!= (-> (handle->process (-> this focus handle)) type) target)
               (set! (-> s3-1 quad) (the-as uint128 0))
               (set! (-> s5-0 dest quad)
                     (-> (get-trans (the-as process-focusable (handle->process (-> this focus handle))) 3) quad)
                     )
               0.0
               )
              (else
                (if (logtest? (-> this draw status) (draw-control-status on-screen))
                    (vector-normalize! s3-1 (* 4096.0 (rand-vu-float-range 1.0 2.0)))
                    (vector-normalize! s3-1 (* 4096.0 (rand-vu-float-range 1.0 3.0)))
                    )
                (set! (-> s5-0 dest quad)
                      (-> (vector+! (new 'stack-no-clear 'vector) s3-1 (-> this target-pos-predict-miss)) quad)
                      )
                f30-0
                )
              )
            )
      (set! (-> s5-0 src quad) (-> s4-0 quad))
      (set! (-> s5-0 initial-tilt) 8192.0)
      (set! (-> s5-0 gravity) 184320.0)
      (when (traj3d-calc-initial-velocity-using-tilt s5-0)
        (let ((a1-14 (new 'stack-no-clear 'projectile-init-by-other-params)))
          (set! (-> a1-14 ent) (-> this entity))
          (set! (-> a1-14 charge) f30-0)
          (set! (-> a1-14 options) (projectile-options))
          (logclear! (-> a1-14 options) (projectile-options po14 po15 po16))
          (set! (-> a1-14 pos quad) (-> s5-0 src quad))
          (set! (-> a1-14 vel quad) (-> s5-0 initial-velocity quad))
          (set! (-> a1-14 notify-handle) (the-as handle #f))
          (set! (-> a1-14 owner-handle) (process->handle this))
          (set! (-> a1-14 target-handle) (the-as handle #f))
          (set! (-> a1-14 target-pos quad) (the-as uint128 0))
          (set! (-> a1-14 ignore-handle) (process->handle this))
          (let* ((v1-38 *game-info*)
                 (a0-37 (+ (-> v1-38 attack-id) 1))
                 )
            (set! (-> v1-38 attack-id) a0-37)
            (set! (-> a1-14 attack-id) a0-37)
            )
          (set! (-> a1-14 timeout) (seconds 4))
          (spawn-projectile vehicle-grenade-deflect a1-14 this *default-dead-pool*)
          )
        )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate grenade-throw-post-retreating (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (logior! (-> self focus-status) (focus-status dangerous))
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef38) (-> v1-4 enemy-flags))))
      )
    0
    (let ((v1-6 self))
      (if (not (logtest? (enemy-flag ef37) (-> v1-6 enemy-flags)))
          (set! (-> v1-6 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef39) (-> v1-6 enemy-flags))))
          )
      (set! (-> v1-6 enemy-flags) (the-as enemy-flag (logior (enemy-flag ef37) (-> v1-6 enemy-flags))))
      (set! (-> v1-6 nav callback-info) (-> v1-6 enemy-info callback-info))
      )
    0
    (set-time! (-> self state-time))
    (nav-enemy-method-177 self)
    (flee-info-method-12 (-> self flee-behavior) self)
    (set-time! (-> self last-check-player-time))
    (go-active-if-necessary)
    (set! (-> self danger-pos quad) (-> self focus-pos quad))
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (go-active-if-necessary)
    (+! (-> self total-flee-time)
        (- (-> *display* game-clock frame-counter) (-> *display* game-clock old-frame-counter))
        )
    (when (time-elapsed? (-> self last-check-player-time) (seconds 0.5))
      (set-time! (-> self last-check-player-time))
      (set! (-> self danger-pos quad) (-> self focus-pos quad))
      )
    (flee-info-method-11 (-> self flee-behavior) self)
    (cond
      ((< (seconds 2) (-> self total-flee-time))
       (set! (-> self urgent-fire) #t)
       (go-hostile self)
       )
      ((>= (-> self target-self-xz-dist) (* 1.2 (-> self grenade-guard-min-player-dist)))
       (go-virtual grenade-throw-post-reloading)
       )
      ((< (-> self target-self-xz-dist) 16384.0)
       (go-virtual close-attack)
       )
      )
    )
  :code (behavior ()
    (loop
      (let ((a2-0 (new 'stack-no-clear 'vector)))
        (let ((a1-0 (-> self nav state)))
          (set! (-> a2-0 quad) (-> a1-0 target-pos quad))
          )
        (add-debug-sphere #t (bucket-id debug-no-zbuf1) a2-0 (meters 2) *color-red*)
        )
      (citizen-travel-anim (the-as int (-> self draw art-group data (-> self enemy-info run-anim))) 60)
      )
    )
  :post (behavior ()
    (flee-info-method-13 (-> self flee-behavior) self)
    )
  )

;; definition of type reload-grenade-spawn-params
(deftype reload-grenade-spawn-params (structure)
  ((owner        handle)
   (joint-index  uint16)
   )
  )

;; definition for method 3 of type reload-grenade-spawn-params
(defmethod inspect ((this reload-grenade-spawn-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'reload-grenade-spawn-params)
  (format #t "~1Towner: ~D~%" (-> this owner))
  (format #t "~1Tjoint-index: ~D~%" (-> this joint-index))
  (label cfg-4)
  this
  )

;; definition of type reload-grenade
(deftype reload-grenade (process-drawable)
  ((owner        handle)
   (joint-index  uint16)
   )
  (:state-methods
    dormant
    visible
    shrinking
    die
    )
  (:methods
    (move-to-joint (_type_) quaternion)
    )
  )

;; definition for method 3 of type reload-grenade
(defmethod inspect ((this reload-grenade))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Towner: ~D~%" (-> this owner))
  (format #t "~2Tjoint-index: ~D~%" (-> this joint-index))
  (label cfg-4)
  this
  )

;; definition for function reload-grenade-init-by-other
;; WARN: Return type mismatch int vs object.
(defbehavior reload-grenade-init-by-other reload-grenade ((arg0 reload-grenade-spawn-params))
  (ctywide-entity-hack)
  (stack-size-set! (-> self main-thread) 128)
  (set! (-> self owner) (-> arg0 owner))
  (set! (-> self joint-index) (-> arg0 joint-index))
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-vehicle-grenade" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set-vector! (-> self root scale) 1.4 1.4 1.4 1.0)
  (go-virtual dormant)
  0
  )

;; failed to figure out what this is:
(defstate dormant (reload-grenade)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('wake-up)
       (go-virtual visible)
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate visible (reload-grenade)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('sleep)
       (go-virtual shrinking)
       )
      )
    )
  :enter (behavior ()
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (let* ((f0-1 (fmin 1.0 (* 0.016666668 (the float (- (current-time) (-> self state-time))))))
           (f0-2 (lerp 0.01 1.4 f0-1))
           )
      (set-vector! (-> self root scale) f0-2 f0-2 f0-2 1.0)
      )
    (move-to-joint self)
    )
  :code sleep-code
  :post (behavior ()
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate shrinking (reload-grenade)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (let* ((f0-1 (fmin 1.0 (* 0.016666668 (the float (- (current-time) (-> self state-time))))))
           (f0-2 (lerp 1.4 0.01 f0-1))
           )
      (set-vector! (-> self root scale) f0-2 f0-2 f0-2 1.0)
      )
    (move-to-joint self)
    (if (time-elapsed? (-> self state-time) (seconds 0.2))
        (go-virtual die)
        )
    )
  :code sleep-code
  :post (behavior ()
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate die (reload-grenade)
  :virtual #t
  :enter (behavior ()
    (logior! (-> self draw status) (draw-control-status no-draw))
    )
  :code (behavior ()
    '()
    )
  )

;; definition for method 24 of type reload-grenade
(defmethod move-to-joint ((this reload-grenade))
  (let ((s5-0 (the-as process-focusable (handle->process (-> this owner)))))
    (when s5-0
      (vector<-cspace! (-> this root trans) (-> s5-0 node-list data (-> this joint-index)))
      (matrix->quaternion (-> this root quat) (-> s5-0 node-list data (-> this joint-index) bone transform))
      )
    )
  )

;; definition for function reload-grenade-spawn
;; WARN: Return type mismatch process vs reload-grenade.
(defun reload-grenade-spawn ((arg0 crimson-guard) (arg1 type) (arg2 reload-grenade-spawn-params))
  (let ((gp-0 (the-as process #f)))
    (let* ((s3-0 (get-process *default-dead-pool* arg1 #x4000 1))
           (v1-1 (when s3-0
                   (let ((t9-1 (method-of-type process activate)))
                     (t9-1 s3-0 arg0 "grenade" (the-as pointer #x70004000))
                     )
                   (run-now-in-process s3-0 reload-grenade-init-by-other arg2)
                   (-> s3-0 ppointer)
                   )
                 )
           )
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as reload-grenade gp-0)
    )
  )

;; failed to figure out what this is:
(defstate grenade-throw-post-reloading (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (let ((v1-0 self))
      (set! (-> v1-0 enemy-flags) (the-as enemy-flag (logclear (-> v1-0 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-0 nav callback-info) *null-nav-callback-info*)
      )
    0
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (logior! (-> self focus-status) (focus-status dangerous))
    (let ((v1-7 self))
      (set! (-> v1-7 enemy-flags) (the-as enemy-flag (logclear (-> v1-7 enemy-flags) (enemy-flag ef38))))
      )
    0
    (set-time! (-> self state-time))
    (set! (-> self urgent-fire) #f)
    (let ((a2-0 (new 'stack-no-clear 'reload-grenade-spawn-params)))
      (set! (-> a2-0 owner) (process->handle self))
      (set! (-> a2-0 joint-index) (the-as uint 9))
      (set! (-> self reloading-ammo) (process->handle (reload-grenade-spawn self reload-grenade a2-0)))
      )
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((a0-3 (handle->process (-> self reloading-ammo))))
      (if a0-3
          (send-event a0-3 'sleep)
          )
      )
    (set! (-> self reloading-ammo) (the-as handle #f))
    )
  :trans (behavior ()
    (when (>= (* 0.5 (-> self grenade-guard-min-player-dist)) (-> self target-self-xz-dist))
      (cond
        ((not (time-elapsed? (-> self state-time) (seconds 1.5)))
         (+! (-> self num-times-reloading-interrupted) 1)
         (cond
           ((>= (-> self num-times-reloading-interrupted) 2)
            (set! (-> self num-times-reloading-interrupted) 0)
            (set! (-> self urgent-fire) #t)
            (go-hostile self)
            )
           (else
             (go-virtual grenade-throw-post-retreating)
             )
           )
         )
        (else
          (set! (-> self urgent-fire) #t)
          )
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! crimson-guard-grenade-reload-ja :num! (seek! max 0.92) :frame-num 0.0)
    (until (ja-done? 0)
      (let ((gp-0 (handle->process (-> self reloading-ammo)))
            (f0-4 (ja-frame-num 0))
            )
        (when gp-0
          (cond
            ((and (>= f0-4 4.0) (< f0-4 13.0))
             (send-event gp-0 'wake-up)
             )
            ((< 14.0 f0-4)
             (send-event gp-0 'sleep)
             )
            )
          )
        )
      (suspend)
      (ja :num! (seek! max 0.92))
      )
    (ja-channel-push! 1 0)
    (ja-no-eval :group! crimson-guard-cock-gun-ja :num! (seek! max 0.5) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (crimson-guard-method-285 self 1)
    (go-hostile self)
    )
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

;; failed to figure out what this is:
(defstate grenade-throw (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (logior! (-> self focus-status) (focus-status dangerous))
    (let ((v1-4 self))
      (set! (-> v1-4 enemy-flags) (the-as enemy-flag (logclear (-> v1-4 enemy-flags) (enemy-flag ef38))))
      )
    0
    (let ((v1-6 self))
      (set! (-> v1-6 enemy-flags) (the-as enemy-flag (logclear (-> v1-6 enemy-flags) (enemy-flag ef37))))
      (set! (-> v1-6 nav callback-info) *null-nav-callback-info*)
      )
    0
    (let ((v1-9 (-> self nav)))
      (set! (-> v1-9 target-speed) 0.0)
      )
    0
    (let ((v1-12 (-> self nav state)))
      (set! (-> v1-12 speed) 0.0)
      )
    0
    (let ((a0-8 (-> self nav state))
          (v1-15 *null-vector*)
          )
      (set! (-> a0-8 velocity quad) (-> v1-15 quad))
      )
    0
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (set-time! (-> self last-fire-time))
    )
  :trans (behavior ()
    '()
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! crimson-guard-grenade-attack-ja
                :num! (seek! (ja-aframe 12.0 0) 1.5)
                :frame-num (ja-aframe 1.0 0)
                )
    (until (ja-done? 0)
      (seek-toward-heading-vec! (-> self root) (-> self target-self-xz) 65536.0 (seconds 0.02))
      (suspend)
      (ja :num! (seek! (ja-aframe 12.0 0) 1.5))
      )
    (go-active-if-necessary)
    (crimson-guard-method-264 self)
    (crimson-guard-method-285 self -1)
    (set! (-> self urgent-fire) #f)
    (set! (-> self grenade-guard-min-player-dist) 81920.0)
    (ja-no-eval :group! crimson-guard-grenade-attack-ja
                :num! (seek! (ja-aframe 32.0 0))
                :frame-num (ja-aframe 22.0 0)
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! (ja-aframe 32.0 0)))
      )
    (ja-no-eval :group! crimson-guard-grenade-attack-ja
                :num! (seek! (ja-aframe 37.0 0))
                :frame-num (ja-aframe 33.0 0)
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! (ja-aframe 37.0 0)))
      )
    (set! (-> self total-flee-time) 0)
    (cond
      ((crimson-guard-method-272 self)
       (crimson-guard-method-275 self)
       )
      ((>= (-> self target-self-xz-dist) (-> self grenade-guard-min-player-dist))
       (go-virtual grenade-throw-post-reloading)
       )
      (else
        (go-virtual grenade-throw-post-retreating)
        )
      )
    )
  :post (behavior ()
    (nav-enemy-method-187 self)
    )
  )

;; failed to figure out what this is:
(defstate grenade-hostile (crimson-guard)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (crimson-guard-method-251 self)
    (let* ((f30-0 150.0)
           (v1-4 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-5 (the-as number (logior #x3f800000 v1-4)))
           )
      (set! (-> self rand-state-time) (the-as time-frame (the int (* f30-0 (+ -1.0 (the-as float v1-5))))))
      )
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    '()
    )
  :trans (behavior ()
    (crimson-guard-method-252 self)
    (cond
      ((> (-> self ammo-count) 0)
       (if (and (or (time-elapsed? (-> self state-time) (-> self rand-state-time)) (-> self urgent-fire))
                (and (logtest? (-> self flags) (citizen-flag target-in-sight)) (< (-> self target-self-xz-dist) 81920.0))
                )
           (go-virtual grenade-throw)
           )
       )
      (else
        (if (or (and (time-elapsed? (-> self state-time) (seconds 1.5)) (not (-> self urgent-fire)))
                (>= (-> self target-self-xz-dist) (* 0.75 (-> self grenade-guard-min-player-dist)))
                )
            (go-virtual grenade-throw-post-reloading)
            )
        )
      )
    (when (< (vector-vector-xz-distance (-> self root trans) (-> self move-position)) 8192.0)
      (crimson-guard-method-289 self (-> self last-quick-target-spot-angle))
      (go-virtual grenade-throw-post-reloading)
      )
    )
  :code (behavior ()
    (citizen-travel-anim (the-as int (-> self draw art-group data (-> self enemy-info walk-anim))) 60)
    )
  :post (behavior ()
    (crimson-guard-method-253 self)
    (crimson-guard-method-254 self)
    )
  )




