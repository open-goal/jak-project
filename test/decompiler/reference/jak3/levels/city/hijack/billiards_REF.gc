;;-*-Lisp-*-
(in-package goal)

;; definition of type billiard-ball
(deftype billiard-ball (structure)
  ((pos       vector  :inline)
   (prev-pos  vector  :inline)
   (size      float)
   (flags     billiard-ball-flag)
   )
  )

;; definition for method 3 of type billiard-ball
(defmethod inspect ((this billiard-ball))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'billiard-ball)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tprev-pos: #<vector @ #x~X>~%" (-> this prev-pos))
  (format #t "~1Tsize: ~f~%" (-> this size))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition of type billiard-ball-array
(deftype billiard-ball-array (inline-array-class)
  ((data  billiard-ball  :inline :dynamic)
   )
  )

;; definition for method 3 of type billiard-ball-array
(defmethod inspect ((this billiard-ball-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> billiard-ball-array heap-base) (the-as uint 48))

;; definition of type billiard-table
(deftype billiard-table (basic)
  ((billiards             billiard-ball-array)
   (accum-force           vector  :inline)
   (drag                  float)
   (bounds                vector  2 :inline)
   (min-xyz               vector  :inline :overlay-at (-> bounds 0))
   (max-xyz               vector  :inline :overlay-at (-> bounds 1))
   (bounce-wall-friction  float)
   (ball-friction         float)
   )
  (:methods
    (init! (_type_ int vector vector) none)
    (billiard-table-method-10 (_type_) none)
    (debug-draw (_type_) none)
    (reset-accum-force (_type_) none)
    (billiard-table-method-13 (_type_) symbol)
    (billiard-table-method-14 (_type_) symbol)
    (billiard-table-method-15 (_type_ float) none)
    )
  )

;; definition for method 3 of type billiard-table
(defmethod inspect ((this billiard-table))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tbilliards: ~A~%" (-> this billiards))
  (format #t "~1Taccum-force: #<vector @ #x~X>~%" (-> this accum-force))
  (format #t "~1Tdrag: ~f~%" (-> this drag))
  (format #t "~1Tbounds[2] @ #x~X~%" (-> this min-xyz))
  (format #t "~1Tmin-xyz: #<vector @ #x~X>~%" (-> this min-xyz))
  (format #t "~1Tmax-xyz: #<vector @ #x~X>~%" (-> this max-xyz))
  (format #t "~1Tbounce-wall-friction: ~f~%" (-> this bounce-wall-friction))
  (format #t "~1Tball-friction: ~f~%" (-> this ball-friction))
  (label cfg-4)
  this
  )

;; definition for method 12 of type billiard-table
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod reset-accum-force ((this billiard-table))
  (set! (-> this accum-force quad) (the-as uint128 0))
  0
  (none)
  )

;; definition for method 9 of type billiard-table
;; INFO: Used lq/sq
;; WARN: Return type mismatch symbol vs none.
(defmethod init! ((this billiard-table) (arg0 int) (arg1 vector) (arg2 vector))
  (set! (-> this billiards) (new 'process 'billiard-ball-array arg0))
  (set! (-> this billiards length) arg0)
  (set! (-> this min-xyz quad) (-> arg1 quad))
  (set! (-> this max-xyz quad) (-> arg2 quad))
  (dotimes (v1-4 (-> this billiards length))
    (set! (-> this billiards data v1-4 size) 4096.0)
    )
  (billiard-table-method-13 this)
  (none)
  )

;; definition for method 13 of type billiard-table
;; INFO: Used lq/sq
(defmethod billiard-table-method-13 ((this billiard-table))
  (dotimes (s5-0 (-> this billiards length))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (let ((s2-1 (vector-! (new 'stack-no-clear 'vector) (-> this max-xyz) (-> this min-xyz)))
            (s3-0 s4-0)
            )
        (let* ((v1-2 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-3 (the-as number (logior #x3f800000 v1-2)))
               )
          (set! (-> s3-0 x) (* (+ -1.0 (the-as float v1-3)) (-> s2-1 x)))
          )
        (let* ((v1-6 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-7 (the-as number (logior #x3f800000 v1-6)))
               )
          (set! (-> s3-0 y) (* (+ -1.0 (the-as float v1-7)) (-> s2-1 y)))
          )
        (let* ((v1-10 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
               (v1-11 (the-as number (logior #x3f800000 v1-10)))
               )
          (set! (-> s3-0 z) (* (+ -1.0 (the-as float v1-11)) (-> s2-1 z)))
          )
        (set! (-> s3-0 w) 1.0)
        )
      (vector+! (the-as vector (-> this billiards data s5-0)) (-> this min-xyz) s4-0)
      )
    )
  (billiard-table-method-14 this)
  (dotimes (v1-23 (-> this billiards length))
    (set! (-> (the-as (pointer uint128) (+ (the-as uint (-> this billiards data 0 prev-pos)) (* 48 v1-23))))
          (-> this billiards data v1-23 pos quad)
          )
    )
  #f
  )

;; definition for method 10 of type billiard-table
(defmethod billiard-table-method-10 ((this billiard-table))
  (with-pp
    (dotimes (v1-0 (-> this billiards length))
      (set! (-> this billiards data v1-0 flags) (billiard-ball-flag))
      )
    (reset-accum-force this)
    (billiard-table-method-15
      this
      (* 0.0033333334 (the float (- (current-time) (-> pp clock old-frame-counter))))
      )
    (billiard-table-method-14 this)
    (debug-draw this)
    (none)
    )
  )

;; definition for method 15 of type billiard-table
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod billiard-table-method-15 ((this billiard-table) (arg0 float))
  (let ((f0-1 (* arg0 arg0))
        (f1-1 (-> this drag))
        )
    (dotimes (v1-0 (-> this billiards length))
      (let ((a2-1 (-> this billiards data v1-0))
            (a1-4 (new 'stack-no-clear 'vector))
            )
        (let ((a3-0 (new 'stack-no-clear 'vector)))
          (set! (-> a3-0 quad) (-> this accum-force quad))
          (vector-float*! a1-4 (-> a2-1 pos) (- 2.0 f1-1))
          (vector-! a1-4 a1-4 (vector-float*! (new 'stack-no-clear 'vector) (-> a2-1 prev-pos) (- 1.0 f1-1)))
          (vector+float*! a1-4 a1-4 a3-0 f0-1)
          )
        (set! (-> a2-1 prev-pos quad) (-> a2-1 pos quad))
        (set! (-> a2-1 pos quad) (-> a1-4 quad))
        )
      )
    )
  0
  (none)
  )

;; definition for method 7 of type billiard-table
(defmethod relocate ((this billiard-table) (offset int))
  (if (nonzero? (-> this billiards))
      (&+! (-> this billiards) offset)
      )
  (call-parent-method this offset)
  )

;; definition for method 14 of type billiard-table
;; INFO: Used lq/sq
(defmethod billiard-table-method-14 ((this billiard-table))
  (dotimes (s5-0 (-> this billiards length))
    (let ((s4-0 (+ s5-0 1))
          (s3-0 (+ (-> this billiards length) -1))
          )
      (while (>= s3-0 s4-0)
        (let* ((s1-0 (-> this billiards data s5-0))
               (s2-0 (-> this billiards data s4-0))
               (s0-1 (vector-! (new 'stack-no-clear 'vector) (-> s2-0 pos) (-> s1-0 pos)))
               )
          0.0
          (let ((f0-2 (+ (-> s1-0 size) (-> s2-0 size)))
                (f1-1 (vector-length s0-1))
                )
            (when (< f1-1 f0-2)
              (let ((f28-0 (/ (-> s2-0 size) f0-2))
                    (f30-0 (/ (-> s1-0 size) f0-2))
                    )
                (logior! (-> s1-0 flags) (billiard-ball-flag bb1))
                (logior! (-> s2-0 flags) (billiard-ball-flag bb1))
                (vector-normalize! s0-1 (- f0-2 f1-1))
                (vector+float*! (-> s1-0 pos) (-> s1-0 pos) s0-1 (- f28-0))
                (vector+float*! (-> s2-0 pos) (-> s2-0 pos) s0-1 f30-0)
                )
              (let ((a0-9 (vector-! (new 'stack-no-clear 'vector) (-> s1-0 prev-pos) (-> s1-0 pos)))
                    (v1-21 (vector-! (new 'stack-no-clear 'vector) (-> s2-0 prev-pos) (-> s2-0 pos)))
                    )
                (vector+float*! (-> s1-0 prev-pos) (-> s1-0 pos) a0-9 (- 1.0 (-> this ball-friction)))
                (vector+float*! (-> s2-0 prev-pos) (-> s2-0 pos) v1-21 (- 1.0 (-> this ball-friction)))
                )
              )
            )
          )
        (+! s4-0 1)
        )
      )
    )
  (dotimes (s5-1 1)
    (dotimes (s4-1 (-> this billiards length))
      (let ((s3-1 (-> this billiards data s4-1))
            (s1-1 #f)
            (f30-1 2.0)
            (s2-1 -1)
            )
        -1
        (add-debug-line #t (bucket-id debug) (-> s3-1 prev-pos) (-> s3-1 pos) *color-blue* #f *color-green*)
        (dotimes (v1-33 3)
          (when (!= v1-33 1)
            (let ((f0-10 (- (-> s3-1 prev-pos data v1-33) (-> s3-1 pos data v1-33))))
              0.0
              (dotimes (a0-20 2)
                (let ((f1-8 (/ (- (-> s3-1 prev-pos data v1-33)
                                  (-> (the-as billiard-table (+ (+ (* v1-33 4) (* a0-20 16)) (the-as int this))) min-xyz x)
                                  )
                               f0-10
                               )
                            )
                      )
                  (when (and (< f1-8 f30-1) (>= f1-8 0.0) (< f1-8 1.0))
                    (set! s1-1 #t)
                    (set! f30-1 f1-8)
                    (set! s2-1 v1-33)
                    )
                  )
                )
              )
            )
          )
        (when s1-1
          (let ((a0-24 (vector-! (new 'stack-no-clear 'vector) (-> s3-1 pos) (-> s3-1 prev-pos)))
                (v1-38 (new 'stack-no-clear 'vector))
                (s1-2 (new 'stack-no-clear 'vector))
                )
            (logior! (-> s3-1 flags) (billiard-ball-flag bb0))
            (vector+float*! v1-38 (-> s3-1 prev-pos) a0-24 f30-1)
            (set! (-> s1-2 quad) (-> a0-24 quad))
            (set! (-> s1-2 data s2-1) (* -1.0 (-> s1-2 data s2-1)))
            (vector+float*! (-> s3-1 pos) v1-38 s1-2 (- 1.0 f30-1))
            (let ((v1-39 (vector-normalize-copy! (new 'stack-no-clear 'vector) s1-2 1.0)))
              0.0
              (let* ((f0-18 (fabs (-> v1-39 data s2-1)))
                     (f1-10 (* f0-18 f0-18))
                     )
                (vector-float*! s1-2 s1-2 (* -1.0 (- 1.0 (* f1-10 (-> this bounce-wall-friction)))))
                )
              )
            (vector+! (-> s3-1 prev-pos) (-> s3-1 pos) s1-2)
            )
          )
        )
      )
    )
  (dotimes (v1-51 (-> this billiards length))
    (let ((a0-40 (-> this billiards data v1-51)))
      (dotimes (a1-30 3)
        (set! (-> a0-40 pos data a1-30)
              (fmax (fmin (-> a0-40 pos data a1-30) (-> this max-xyz data a1-30)) (-> this min-xyz data a1-30))
              )
        )
      )
    )
  #f
  )

;; definition for method 11 of type billiard-table
;; WARN: Return type mismatch symbol vs none.
(defmethod debug-draw ((this billiard-table))
  (dotimes (s5-0 (-> this billiards length))
    (let ((v1-3 (-> this billiards data s5-0)))
      (add-debug-sphere #t (bucket-id debug) (-> v1-3 pos) (-> v1-3 size) *color-red*)
      )
    )
  (add-debug-box #t (bucket-id debug) (-> this min-xyz) (-> this max-xyz) *color-red*)
  (none)
  )




