;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defskelgroup skel-h-kg-pickup kg-pickup kg-pickup-lod0-jg kg-pickup-idle-ja
              ((kg-pickup-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5.2)
              :shadow kg-pickup-shadow-mg
              :origin-joint-index 3
              )

;; failed to figure out what this is:
(when (or (zero? *hijack-suck-curve*) (!= loading-level global))
  (set! *hijack-suck-curve* (new 'loading-level 'curve2d-piecewise))
  (curve2d-piecewise-method-10 *hijack-suck-curve* 4 'loading-level (the-as int #t))
  )

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 0 first) 0.0)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 0 second) 0.85)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 1 first) 3.0)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 1 second) 0.85)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 2 first) 10.0)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 2 second) 0.7)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 3 first) 15.0)

;; failed to figure out what this is:
(set! (-> *hijack-suck-curve* pts data 3 second) 0.6)

;; definition for function compute-suck-speed-scalar
(defun compute-suck-speed-scalar ()
  (let ((f30-0 1.0))
    (when (not (task-node-closed? (game-task-node city-hijack-vehicle-escape)))
      (let* ((f1-0 (the float (-> *game-info* sub-task-list (game-task-node city-hijack-vehicle-escape) death-count)))
             (f0-2 (fmax 0.0 (fmin 15.0 f1-0)))
             )
        (set! f30-0 (curve2d-method-9 *hijack-suck-curve* f0-2 2))
        )
      )
    f30-0
    )
  )

;; definition for symbol *h-kg-pickup-constants*, type rigid-body-vehicle-constants
(define *h-kg-pickup-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 8.0
      :inv-mass 0.125
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 8) (meters 3) (meters 14))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*h-kg-pickup-constants*
    :flags #x468
    :object-type (traffic-type kg-pickup)
    :guard-type #xb
    :vehicle-type (vehicle-type-u8 vt27)
    :transmission (new 'static 'vehicle-transmission-info :gear-count 1)
    :handling (new 'static 'vehicle-handling-info
      :max-engine-thrust (meters 59)
      :inv-max-engine-thrust 0.0000041379767
      :engine-response-rate 20.0
      :engine-intake-factor 1.0
      :brake-factor 2.25
      :turbo-boost-factor 1.0
      :turbo-boost-duration (seconds 1)
      :max-xz-speed (meters 60)
      :player-turn-anim-min -1.0
      :player-turn-anim-max 1.0
      :pilot-x-accel-factor 1.0
      :pilot-y-accel-factor 1.0
      :pilot-z-accel-factor 1.0
      :ground-probe-distance (meters 4.5)
      :cos-ground-effect-angle 0.42261827
      :spring-lift-factor 0.4
      :air-drag-factor 1.0
      :steering-thruster-factor 2.0
      :steering-thruster-max-gain 2.5
      :steering-thruster-half-gain-speed (meters 1200)
      :tire-steering-speed-factor 61440.0
      :tire-friction-factor 0.6
      :tire-static-friction 0.55
      :tire-dynamic-friction 0.4
      :tire-dynamic-friction-speed (meters 2)
      :tire-inv-max-friction-speed 0.000024414063
      :airfoil-factor 1.0
      :drag-force-factor 1.0
      :speed-scrubbing-drag 10.0
      :speed-limiting-drag 0.7
      :pitch-control-factor 0.5
      :roll-control-factor 1.0
      :jump-thrust-factor 0.5
      :buoyancy-factor 1.0
      :water-drag-factor 1.0
      :player-weight 163840.0
      :player-shift-x (meters 0.6)
      :player-shift-z (meters 1)
      :air-angular-damping 1.0
      :ground-torque-scale 1.0
      :ai-steering-factor 1.0
      :ai-throttle-factor 1.0
      )
    :target-speed-offset (meters 3)
    :turning-accel (meters 20)
    :camera (new 'static 'vehicle-camera-info
      :string-min-height (meters 4.5)
      :string-max-height (meters 4.5)
      :string-min-length (meters 5)
      :string-max-length (meters 12.5)
      :min-fov 15109.688
      :max-fov 17476.268
      :head-offset 8192.0
      :foot-offset 4096.0
      :normal-max-angle-offset 182.04445
      :air-max-angle-offset 5461.3335
      :max-lookaround-speed 40960.0
      :look-pos-array (new 'static 'inline-array vector 4
        (new 'static 'vector :y 8192.0 :z -10240.0 :w 1.0)
        (new 'static 'vector :x -10240.0 :y 8192.0 :w 1.0)
        (new 'static 'vector :x 10240.0 :y 8192.0 :w 1.0)
        (new 'static 'vector :y 8192.0 :z 10240.0 :w 1.0)
        )
      )
    :sound (new 'static 'vehicle-sound-info
      :engine-pitch-scale 0.09
      :engine-pitch-mod-amp 0.01
      :engine-sound-select 5
      :thrust-sound (static-sound-name "bike-thrust")
      :scrape-sound (static-sound-name "car-scrape-stn")
      :glance-sound (static-sound-name "car-glance-stn")
      :impact-sound (static-sound-name "car-impact-stn")
      :explode-sound (static-sound-name "vehicle-explode")
      :explode2-sound (static-sound-name "vehicle-explo-b")
      :extra-sound (static-sound-name "car-by-5")
      :bank-replace '()
      :idle-pitch-scale 1.0
      :idle-crossover-rpm 1000.0
      :engine-crossover-rpm 4000.0
      :start-sound (static-sound-name "vehicl-ignition")
      :susp-speed-threshold 40960.0
      :tire-roll-sounds (new 'static 'inline-array vehicle-sound-loop-info 4
        (new 'static 'vehicle-sound-loop-info
          :speed 409600.0
          :max-speed 409600.0
          :pitch-scale 1.0
          :min-pitch -10.0
          :max-pitch 10.0
          )
        (new 'static 'vehicle-sound-loop-info
          :speed 409600.0
          :max-speed 409600.0
          :pitch-scale 1.0
          :min-pitch -10.0
          :max-pitch 10.0
          )
        (new 'static 'vehicle-sound-loop-info
          :speed 409600.0
          :max-speed 409600.0
          :pitch-scale 1.0
          :min-pitch -10.0
          :max-pitch 10.0
          )
        (new 'static 'vehicle-sound-loop-info
          :speed 409600.0
          :max-speed 409600.0
          :pitch-scale 1.0
          :min-pitch -10.0
          :max-pitch 10.0
          )
        )
      :tire-slide-sounds (new 'static 'inline-array vehicle-sound-loop-info 2
        (new 'static 'vehicle-sound-loop-info
          :speed 409600.0
          :max-speed 409600.0
          :pitch-scale 1.0
          :min-pitch -10.0
          :max-pitch 10.0
          )
        (new 'static 'vehicle-sound-loop-info
          :speed 409600.0
          :max-speed 409600.0
          :pitch-scale 1.0
          :min-pitch -10.0
          :max-pitch 10.0
          )
        )
      )
    :particles (new 'static 'vehicle-particle-info
      :headlight-count 2
      :taillight-count 2
      :thruster-flame-width (meters 0.6)
      :thruster-flame-length (meters 2)
      :thruster-local-pos (new 'static 'inline-array vector 2
        (new 'static 'vector :x 3072.0 :z -14336.0 :w 1.0)
        (new 'static 'vector :x -3072.0 :z -14336.0 :w 1.0)
        )
      :exhaust-local-pos (new 'static 'inline-array vector 2
        (new 'static 'vector :x 6963.2 :y -1024.0 :z -7372.8 :w 1.0)
        (new 'static 'vector :x -6963.2 :y -1024.0 :z -7372.8 :w 1.0)
        )
      :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
      :smoke-local-pos (new 'static 'inline-array vector 2
        (new 'static 'vector :x 3072.0 :z -13926.4 :w 1.0)
        (new 'static 'vector :x -3072.0 :z -13926.4 :w 1.0)
        )
      :smoke-local-vel (new 'static 'inline-array vector 2
        (new 'static 'vector :x 12288.0 :w 1.0)
        (new 'static 'vector :x -12288.0 :w 1.0)
        )
      :headlight-local-pos (new 'static 'inline-array vector 3
        (new 'static 'vector :x 4915.2 :z 15564.8 :w 1.0)
        (new 'static 'vector :x -4915.2 :z 15564.8 :w 1.0)
        (new 'static 'vector)
        )
      :taillight-local-pos (new 'static 'inline-array vector 2
        (new 'static 'vector :x 3276.8 :y 3276.8 :z -14131.2 :w 1.0)
        (new 'static 'vector :x -3276.8 :y 3276.8 :z -14131.2 :w 1.0)
        )
      )
    :damage (new 'static 'vehicle-damage-info
      :inv-toughness-factor 1.0
      :hit-points 24.0
      :inv-hit-points 0.041666668
      :hit-small 102400.0
      :hit-big 131072.0
      :hit-deadly 286720.0
      :impact-damage-factor 1.0
      :section-count 4
      :section-array (new 'static 'inline-array vehicle-section-info 4
        (new 'static 'vehicle-section-info
          :damage-seg-array (new 'static 'array uint64 3 #x20 #x2 #x0)
          :damage-seg-count 2
          )
        (new 'static 'vehicle-section-info
          :damage-seg-array (new 'static 'array uint64 3 #x40 #x4 #x0)
          :damage-seg-count 2
          )
        (new 'static 'vehicle-section-info
          :damage-seg-array (new 'static 'array uint64 3 #x80 #x8 #x0)
          :damage-seg-count 2
          )
        (new 'static 'vehicle-section-info
          :damage-seg-array (new 'static 'array uint64 3 #x100 #x10 #x0)
          :damage-seg-count 2
          )
        )
      )
    :physics-model (new 'static 'vehicle-physics-model-info
      :lift-thruster-count 2
      :roll-thruster-count 2
      :stabilizer-count 4
      :inv-lift-thruster-count 0.5
      :lift-thruster-array (new 'static 'inline-array vehicle-attach-point 4
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :y 819.2 :z 8192.0 :w 1.0)
          :rot (new 'static 'vector :y -1.0 :w 1.0)
          )
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :y 819.2 :z -8192.0 :w 1.0)
          :rot (new 'static 'vector :y -1.0 :w 1.0)
          )
        (new 'static 'vehicle-attach-point)
        (new 'static 'vehicle-attach-point)
        )
      :roll-thruster-array (new 'static 'inline-array vehicle-attach-point 2
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :w 1.0)
          :rot (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
          )
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :w 1.0)
          :rot (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
          )
        )
      :stabilizer-array (new 'static 'inline-array vehicle-attach-point 6
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :z -8192.0 :w 1.0)
          :rot (new 'static 'vector :x 1.0 :w 1.0)
          )
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :z 8192.0 :w 1.0)
          :rot (new 'static 'vector :x 1.0 :w 0.5)
          )
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :w 1.0)
          :rot (new 'static 'vector :x 1.0 :w 2.0)
          )
        (new 'static 'vehicle-attach-point
          :local-pos (new 'static 'vector :z -8192.0 :w 1.0)
          :rot (new 'static 'vector :y 1.0 :w 1.0)
          )
        (new 'static 'vehicle-attach-point)
        (new 'static 'vehicle-attach-point)
        )
      :engine-thrust-local-pos (new 'static 'vector :z -5734.4 :w 1.0)
      :brake-local-pos (new 'static 'vector :z -8192.0 :w 1.0)
      :wheel-count 4
      :drive-wheel-count 2
      :front-wheel (new 'static 'vehicle-wheel-info
        :local-pos (new 'static 'vector :w 1.0)
        :inertia 1.0
        :radius 4096.0
        :scale 1.0
        :travel 2048.0
        :width 4096.0
        :suspension-spring 0.5
        :suspension-damping 0.5
        :forward-grip 1.0
        :side-grip 1.0
        :max-brake-torque 1.0
        :settle-pos 0.8
        :probe-radius 409.6
        :tread-texture "common-white"
        )
      :rear-wheel (new 'static 'vehicle-wheel-info
        :local-pos (new 'static 'vector :w 1.0)
        :inertia 1.0
        :radius 4096.0
        :scale 1.0
        :travel 2048.0
        :width 4096.0
        :suspension-spring 0.5
        :suspension-damping 0.5
        :forward-grip 1.0
        :side-grip 1.0
        :max-brake-torque 1.0
        :settle-pos 0.8
        :probe-radius 409.6
        :tread-texture "common-white"
        )
      )
    :setup (new 'static 'vehicle-setup-info
      :settle-height 6144.0
      :shadow-bot-clip -40960.0
      :shadow-locus-dist 409600.0
      :color-option-count 3
      :color (new 'static 'inline-array vector 3
        (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
        (new 'static 'vector :x 1.0 :y 0.7 :z 1.0 :w 1.0)
        (new 'static 'vector :x 1.0 :y 0.7 :z 0.7 :w 1.0)
        )
      :gun-yaw-min -65536.0
      :gun-yaw-max 65536.0
      :gun-pitch-min -16384.0
      :gun-pitch-max 16384.0
      )
    :rider (new 'static 'vehicle-rider-info
      :seat-count 2
      :grab-rail-count 6
      :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 6
        (new 'static 'vehicle-grab-rail-info
          :local-pos (new 'static 'inline-array vector 2
            (new 'static 'vector :x 4505.6 :y -2662.4 :z 15360.0 :w 1.0)
            (new 'static 'vector :x -4505.6 :y -2662.4 :z 15360.0 :w 1.0)
            )
          :normal (new 'static 'vector :z 1.0 :w 1.0)
          )
        (new 'static 'vehicle-grab-rail-info
          :local-pos (new 'static 'inline-array vector 2
            (new 'static 'vector :x 7372.8 :y -819.2 :z -4096.0 :w 1.0)
            (new 'static 'vector :x 7372.8 :y -819.2 :z 4096.0 :w 1.0)
            )
          :normal (new 'static 'vector :x 1.0 :w 1.0)
          )
        (new 'static 'vehicle-grab-rail-info
          :local-pos (new 'static 'inline-array vector 2
            (new 'static 'vector :x -7372.8 :y -819.2 :z 4096.0 :w 1.0)
            (new 'static 'vector :x -7372.8 :y -819.2 :z -4096.0 :w 1.0)
            )
          :normal (new 'static 'vector :x -1.0 :w 1.0)
          )
        (new 'static 'vehicle-grab-rail-info
          :local-pos (new 'static 'inline-array vector 2
            (new 'static 'vector :x -3686.4 :y -409.6 :z -14950.4 :w 1.0)
            (new 'static 'vector :x 3686.4 :y -409.6 :z -14950.4 :w 1.0)
            )
          :normal (new 'static 'vector :z -1.0 :w 1.0)
          )
        (new 'static 'vehicle-grab-rail-info
          :local-pos (new 'static 'inline-array vector 2
            (new 'static 'vector :x 3837.952 :y -409.6 :z -14950.4 :w 1.0)
            (new 'static 'vector :x 6041.6 :y -614.4 :z -9011.2 :w 1.0)
            )
          :normal (new 'static 'vector :x 0.707 :z -0.707 :w 1.0)
          )
        (new 'static 'vehicle-grab-rail-info
          :local-pos (new 'static 'inline-array vector 2
            (new 'static 'vector :x -6041.6 :y -614.4 :z -9011.2 :w 1.0)
            (new 'static 'vector :x -3837.952 :y -409.6 :z -14950.4 :w 1.0)
            )
          :normal (new 'static 'vector :x -0.707 :z -0.707 :w 1.0)
          )
        )
      :seat-array (new 'static 'inline-array vehicle-seat-info 4
        (new 'static 'vehicle-seat-info
          :position (new 'static 'vector :y 819.2 :z 8503.296 :w (the-as float #x10000))
          )
        (new 'static 'vehicle-seat-info
          :position (new 'static 'vector :x 409.6 :y 819.2 :z -10563.584 :w (the-as float #x40000))
          )
        (new 'static 'vehicle-seat-info)
        (new 'static 'vehicle-seat-info)
        )
      :rider-hand-offset (new 'static 'inline-array vector 2
        (new 'static 'vector :x 2252.8 :y 1638.4 :z 11264.0 :w 1.0)
        (new 'static 'vector :x -2252.8 :y 1638.4 :z 11264.0 :w 1.0)
        )
      :attach-point-array #f
      )
    :explosion #f
    :explosion-part #xdb
    :debris #f
    )
  )

;; definition of type pickup-sled-sim
(deftype pickup-sled-sim (billiard-table)
  ((mat             matrix  :inline)
   (external-force  vector  :inline)
   )
  )

;; definition for method 3 of type pickup-sled-sim
(defmethod inspect ((this pickup-sled-sim))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tbilliards: ~A~%" (-> this billiards))
  (format #t "~1Taccum-force: #<vector @ #x~X>~%" (-> this accum-force))
  (format #t "~1Tdrag: ~f~%" (-> this drag))
  (format #t "~1Tbounds[2] @ #x~X~%" (-> this min-xyz))
  (format #t "~1Tmin-xyz: #<vector @ #x~X>~%" (-> this min-xyz))
  (format #t "~1Tmax-xyz: #<vector @ #x~X>~%" (-> this max-xyz))
  (format #t "~1Tbounce-wall-friction: ~f~%" (-> this bounce-wall-friction))
  (format #t "~1Tball-friction: ~f~%" (-> this ball-friction))
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (format #t "~1Texternal-force: #<vector @ #x~X>~%" (-> this external-force))
  (label cfg-4)
  this
  )

;; definition for method 11 of type pickup-sled-sim
;; WARN: Return type mismatch int vs none.
(defmethod debug-draw ((this pickup-sled-sim))
  0
  (none)
  )

;; definition for method 12 of type pickup-sled-sim
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod reset-accum-force ((this pickup-sled-sim))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 quad) (-> this mat uvec quad))
    (set! (-> s5-0 y) 0.0)
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (set! (-> s4-0 quad) (-> this mat fvec quad))
      (let ((s3-0 (new 'stack-no-clear 'vector)))
        (set! (-> s3-0 quad) (-> this mat rvec quad))
        (let ((s2-0 (new 'stack-no-clear 'matrix)))
          (set! (-> s4-0 y) 0.0)
          (set! (-> s3-0 y) 0.0)
          (vector-normalize! s4-0 1.0)
          (vector-normalize! s3-0 1.0)
          (matrix-fr-compose s2-0 s4-0 s3-0)
          (matrix-transpose! s2-0 s2-0)
          (set! (-> s5-0 w) 0.0)
          (vector-matrix*! s5-0 s5-0 s2-0)
          )
        )
      )
    (vector-float*! (-> this accum-force) s5-0 81920.0)
    )
  (let ((a2-2 (matrix-transpose! (new 'stack-no-clear 'matrix) (-> this mat)))
        (s5-1 (new 'stack-no-clear 'vector))
        )
    (vector-matrix*! s5-1 (-> this external-force) a2-2)
    (vector+float*! (-> this accum-force) (-> this accum-force) s5-1 0.3)
    )
  0
  (none)
  )

;; definition of type h-kg-pickup
(deftype h-kg-pickup (h-car-base)
  ((fin-fr                 joint-mod-rotate-local  :inline)
   (fin-fl                 joint-mod-rotate-local  :inline)
   (fin-r                  joint-mod-rotate-local  :inline)
   (fin-l                  joint-mod-rotate-local  :inline)
   (rudder-l               joint-mod-rotate-local  :inline)
   (rudder-r               joint-mod-rotate-local  :inline)
   (turn-rate              float)
   (target-turn-rate       float)
   (camera-override?       symbol)
   (initial-creation-time  time-frame)
   (auto-boost?            symbol)
   (steering-val           float)
   (sled                   pickup-sled-sim)
   (barrels                handle-array)
   (taskman                handle)
   (last-jitter-time       time-frame)
   (last-slide-time        time-frame)
   )
  )

;; definition for method 3 of type h-kg-pickup
(defmethod inspect ((this h-kg-pickup))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type h-car-base inspect)))
    (t9-0 this)
    )
  (format #t "~2Tfin-fr: #<joint-mod-rotate-local @ #x~X>~%" (-> this fin-fr))
  (format #t "~2Tfin-fl: #<joint-mod-rotate-local @ #x~X>~%" (-> this fin-fl))
  (format #t "~2Tfin-r: #<joint-mod-rotate-local @ #x~X>~%" (-> this fin-r))
  (format #t "~2Tfin-l: #<joint-mod-rotate-local @ #x~X>~%" (-> this fin-l))
  (format #t "~2Trudder-l: #<joint-mod-rotate-local @ #x~X>~%" (-> this rudder-l))
  (format #t "~2Trudder-r: #<joint-mod-rotate-local @ #x~X>~%" (-> this rudder-r))
  (format #t "~2Tturn-rate: ~f~%" (-> this turn-rate))
  (format #t "~2Ttarget-turn-rate: ~f~%" (-> this target-turn-rate))
  (format #t "~2Tcamera-override?: ~A~%" (-> this camera-override?))
  (format #t "~2Tinitial-creation-time: ~D~%" (-> this initial-creation-time))
  (format #t "~2Tauto-boost?: ~A~%" (-> this auto-boost?))
  (format #t "~2Tsteering-val: ~f~%" (-> this steering-val))
  (format #t "~2Tsled: ~A~%" (-> this sled))
  (format #t "~2Tbarrels: ~A~%" (-> this barrels))
  (format #t "~2Ttaskman: ~D~%" (-> this taskman))
  (format #t "~2Tlast-jitter-time: ~D~%" (-> this last-jitter-time))
  (format #t "~2Tlast-slide-time: ~D~%" (-> this last-slide-time))
  (label cfg-4)
  this
  )

;; definition for method 30 of type h-kg-pickup
;; INFO: Used lq/sq
;; WARN: Return type mismatch symbol vs object.
(defmethod rigid-body-object-method-30 ((this h-kg-pickup))
  (let ((t9-0 (method-of-type hvehicle rigid-body-object-method-30)))
    (t9-0 this)
    )
  (set! (-> this draw lod-set lod 0 dist) 1228800.0)
  (dotimes (s5-0 (-> this sled billiards length))
    (let ((f30-0 (vector-vector-xz-distance
                   (the-as vector (-> this sled billiards data s5-0))
                   (the-as vector (+ (the-as uint (-> this sled billiards data 0 prev-pos)) (* 48 s5-0)))
                   )
                 )
          )
      (when (and (< 204.8 f30-0) (time-elapsed? (-> this last-slide-time) (seconds 0.25)))
        (set-time! (-> this last-slide-time))
        (sound-play "hj-cans-slide")
        )
      (when (logtest? (-> this sled billiards data s5-0 flags) (billiard-ball-flag bb0 bb1))
        (let* ((f1-0 (* 0.0022194602 f30-0))
               (f30-1 (fmax 0.0 (fmin 1.0 f1-0)))
               )
          (set-time! (-> this last-jitter-time))
          (sound-play-by-name
            (static-sound-name "hj-cans-bump")
            (new-sound-id)
            (the int (* 1024.0 f30-1))
            0
            0
            (sound-group)
            #t
            )
          )
        )
      )
    )
  (set! (-> this sled drag) 0.05)
  (set! (-> this sled bounce-wall-friction) 0.3)
  (set! (-> this sled ball-friction) 0.05)
  (let* ((v1-45 (-> this sled mat))
         (a3-2 (-> this rbody matrix))
         (a0-13 (-> a3-2 rvec quad))
         (a1-5 (-> a3-2 uvec quad))
         (a2-2 (-> a3-2 fvec quad))
         (a3-3 (-> a3-2 trans quad))
         )
    (set! (-> v1-45 rvec quad) a0-13)
    (set! (-> v1-45 uvec quad) a1-5)
    (set! (-> v1-45 fvec quad) a2-2)
    (set! (-> v1-45 trans quad) a3-3)
    )
  (let ((s5-1 (new 'stack-no-clear 'vector)))
    (get-linear-accel! this s5-1)
    (let ((f0-10 (vector-normalize-ret-len! s5-1 1.0)))
      (vector-float*! (-> this sled external-force) s5-1 (* -1.0 f0-10))
      (if (< 40960.0 f0-10)
          (vector-z-quaternion! s5-1 (-> this root quat))
          )
      )
    )
  (billiard-table-method-10 (-> this sled))
  (dotimes (s5-2 (-> this barrels length))
    (let* ((s3-2 (handle->process (-> this barrels data0 s5-2)))
           (s4-2 (if (type? s3-2 process-focusable)
                     (the-as dark-barrel s3-2)
                     )
                 )
           )
      (quaternion-copy! (-> s4-2 root quat) (-> this root quat))
      (-> this sled billiards data s5-2)
      (let ((s3-3 (new 'stack-no-clear 'vector)))
        (vector-matrix*! s3-3 (the-as vector (-> this sled billiards data s5-2)) (-> this sled mat))
        (set! (-> s4-2 root trans quad) (-> s3-3 quad))
        )
      )
    )
  #f
  )

;; failed to figure out what this is:
(defskelgroup skel-dark-barrel eco-canister eco-canister-dark-lod0-jg eco-canister-dark-idle-ja
              ((eco-canister-dark-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 0.3)
              )

;; definition of type dark-barrel
(deftype dark-barrel (process-focusable)
  ()
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type dark-barrel
(defmethod inspect ((this dark-barrel))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for function dark-barrel-init-by-other
(defbehavior dark-barrel-init-by-other dark-barrel ()
  (set! (-> self level) (level-get *level* 'ctywide))
  (let ((gp-0 (new 'process 'collide-shape self (collide-list-enum hit-by-player))))
    (set! (-> gp-0 penetrate-using) (penetrate))
    (let ((v1-4 (new 'process 'collide-shape-prim-sphere gp-0 (the-as uint 0))))
      (set! (-> v1-4 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-4 prim-core action) (collide-action solid))
      (set-vector! (-> v1-4 local-sphere) 0.0 0.0 0.0 2048.0)
      (set! (-> gp-0 total-prims) (the-as uint 1))
      (set! (-> gp-0 root-prim) v1-4)
      )
    (set! (-> gp-0 nav-radius) (* 0.75 (-> gp-0 root-prim local-sphere w)))
    (let ((v1-7 (-> gp-0 root-prim)))
      (set! (-> gp-0 backup-collide-as) (-> v1-7 prim-core collide-as))
      (set! (-> gp-0 backup-collide-with) (-> v1-7 prim-core collide-with))
      )
    (set! (-> self root) gp-0)
    )
  (set-vector! (-> self root scale) 2.0 2.0 2.0 1.0)
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-dark-barrel" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (logior! (-> self focus-status) (focus-status pilot-riding))
  (go-virtual idle)
  )

;; failed to figure out what this is:
(defstate idle (dark-barrel)
  :virtual #t
  :code transform-and-sleep-code
  :post ja-post
  )

;; definition for method 7 of type h-kg-pickup
(defmethod relocate ((this h-kg-pickup) (offset int))
  (if (nonzero? (-> this sled))
      (&+! (-> this sled) offset)
      )
  (if (nonzero? (-> this barrels))
      (&+! (-> this barrels) offset)
      )
  (call-parent-method this offset)
  )

;; definition for method 35 of type h-kg-pickup
;; WARN: Return type mismatch int vs none.
(defmethod init-rbody-control! ((this h-kg-pickup))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-h-kg-pickup" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (alloc-rbody-control! this *h-kg-pickup-constants*)
  (set! (-> this taskman) (the-as handle #f))
  (init (-> this fin-fl) this (the-as uint 4) (joint-mod-base-flags attached))
  (init (-> this fin-fr) this (the-as uint 5) (joint-mod-base-flags attached))
  (init (-> this fin-l) this (the-as uint 7) (joint-mod-base-flags attached))
  (init (-> this fin-r) this (the-as uint 6) (joint-mod-base-flags attached))
  (init (-> this rudder-l) this (the-as uint 9) (joint-mod-base-flags attached))
  (init (-> this rudder-r) this (the-as uint 8) (joint-mod-base-flags attached))
  (set! (-> this target-turn-rate) 0.0)
  (set! (-> this turn-rate) 0.0)
  (set! (-> this camera-override?) #f)
  (vector-float*!
    (-> this rbody lin-momentum)
    (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat))
    1843200.0
    )
  (set-time! (-> this initial-creation-time))
  (set! (-> this auto-boost?) #f)
  (set! (-> this sled) (new 'process 'pickup-sled-sim))
  (init!
    (-> this sled)
    5
    (new 'static 'vector :x -4096.0 :z -10240.0 :w 1.0)
    (new 'static 'vector :x 4096.0 :z 2048.0 :w 1.0)
    )
  (set! (-> this barrels) (the-as handle-array (new 'process 'boxed-array handle 5)))
  (dotimes (s5-3 5)
    (set! (-> this barrels data0 s5-3)
          (ppointer->handle (process-spawn dark-barrel :name "dark-barrel" :to this))
          )
    )
  (set! (-> this barrels length) (-> this barrels allocated-length))
  (dotimes (v1-35 5)
    (set! (-> this sled billiards data v1-35 size) 1638.4)
    )
  (billiard-table-method-13 (-> this sled))
  0
  (none)
  )

;; definition for method 34 of type h-kg-pickup
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this h-kg-pickup))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 18432.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 3686.4 0.0 12288.0 4096.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) -3686.4 0.0 12288.0 4096.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> v1-15 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 0.0 819.2 5734.4 4915.2)
      (set! (-> v1-15 nav-radius) 14336.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 144))))
      (set! (-> v1-17 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 2048.0 -4096.0 5734.4)
      (set! (-> v1-17 nav-radius) 14336.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 4915.2 0.0 -11468.8 4096.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set! (-> v1-21 transform-index) 0)
      (set-vector! (-> v1-21 local-sphere) -4915.2 0.0 -11468.8 4096.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-23 prim-core action) (collide-action solid rideable))
      (set! (-> v1-23 transform-index) 3)
      (set-vector! (-> v1-23 local-sphere) 0.0 0.0 0.0 18432.0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-25 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-25 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-25 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 79 of type h-kg-pickup
;; WARN: Return type mismatch quaternion vs none.
(defmethod vehicle-method-79 ((this h-kg-pickup))
  (let ((f30-0 (* 3640.889 (-> this controls steering))))
    (* 9102.223 (-> this controls steering))
    (let* ((f0-4 (* -3640.889 (-> this controls lean-z)))
           (s5-0 (new 'static 'vector :x 1.0 :w 1.0))
           (f28-0 (* -1.0 f0-4))
           )
      (quaternion-vector-angle! (-> this fin-fl rotation) s5-0 f28-0)
      (quaternion-vector-angle! (-> this fin-fr rotation) s5-0 f28-0)
      (quaternion-vector-angle! (-> this fin-r rotation) s5-0 f28-0)
      (quaternion-vector-angle! (-> this fin-l rotation) s5-0 f28-0)
      )
    (quaternion-vector-angle! (-> this rudder-l rotation) *up-vector* (- f30-0))
    (quaternion-vector-angle! (-> this rudder-r rotation) *up-vector* (- f30-0))
    )
  (none)
  )

;; definition for function spawn-pickup
;; INFO: Used lq/sq
;; WARN: Return type mismatch symbol vs none.
(defun spawn-pickup ()
  (let ((gp-0 (new 'stack 'traffic-object-spawn-params)))
    (set! (-> gp-0 proc) #f)
    (set! (-> gp-0 position quad) (-> (target-pos 0) quad))
    (quaternion-identity! (-> gp-0 rotation))
    (set! (-> gp-0 velocity quad) (the-as uint128 0))
    (set! (-> gp-0 behavior) (the-as uint 0))
    (process-spawn h-kg-pickup :init vehicle-init-by-other 11 gp-0 :name "torpedo")
    )
  (none)
  )

;; definition for method 31 of type h-kg-pickup
;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
;; WARN: Function (method 31 h-kg-pickup) has a return type of none, but the expression builder found a return statement.
(defmethod apply-gravity! ((this h-kg-pickup) (arg0 float))
  (when (and (-> this next-state) (= (-> this next-state name) 'waiting))
    ((method-of-type hvehicle apply-gravity!) this arg0)
    (return 0)
    )
  (if (-> this auto-boost?)
      (vector-float*!
        (-> this rbody lin-momentum)
        (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat))
        1843200.0
        )
      )
  (if (time-elapsed? (-> this initial-creation-time) (seconds 0.2))
      (set! (-> this auto-boost?) #f)
      )
  (when #f
    (set! (-> this info handling steering-thruster-factor) 2.0)
    (call-parent-method this arg0)
    (return 0)
    )
  (set! (-> this info handling steering-thruster-factor) 0.0)
  (let* ((f1-0 (fabs (-> this controls steering)))
         (f0-5 (- 1.0 (* (- 1.0 f1-0) (- 1.0 f1-0))))
         )
    (if (< (-> this controls steering) 0.0)
        (set! f0-5 (* -1.0 f0-5))
        )
    (set! (-> this steering-val) f0-5)
    )
  (set! (-> this target-turn-rate) (* 21845.334 (-> this steering-val)))
  (let ((f0-9 (* 2.0 arg0)))
    (if (< (fabs (-> this target-turn-rate)) (fabs (-> this turn-rate)))
        (set! f0-9 (* 4.0 f0-9))
        )
    (let ((f0-11 (fmax 0.0 (fmin 1.0 f0-9))))
      (set! (-> this turn-rate) (lerp (-> this turn-rate) (-> this target-turn-rate) f0-11))
      )
    )
  (quaternion-rotate-y!
    (the-as quaternion (-> this rbody rot))
    (the-as quaternion (-> this rbody rot))
    (* arg0 (-> this turn-rate))
    )
  (let ((s3-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (the-as quaternion (-> this rbody rot))))
        (s4-2 (new 'stack-no-clear 'vector))
        )
    (set! (-> s4-2 quad) (-> this rbody lin-momentum quad))
    0.0
    (set! (-> s3-0 y) 0.0)
    (vector-normalize! s3-0 1.0)
    (set! (-> s4-2 y) 0.0)
    (let ((f30-0 (vector-normalize-ret-len! s4-2 1.0)))
      0.0
      (let ((f0-20 (vector-dot s4-2 s3-0)))
        (cond
          (#f
            (set! (-> s4-2 quad) (-> s3-0 quad))
            )
          (else
            (let ((s2-1 (vector-cross! (new 'stack-no-clear 'vector) s4-2 s3-0))
                  (f28-0 (acos f0-20))
                  )
              (vector-normalize! s2-1 1.0)
              (let ((f0-23 (fmin f28-0 (* 16384.0 arg0))))
                (vector-rotate-around-axis! s4-2 (the-as quaternion s4-2) f0-23 s2-1)
                )
              )
            )
          )
        )
      (if (not (-> this auto-boost?))
          (set! f30-0 (fmin f30-0 (* 1843200.0 (compute-suck-speed-scalar))))
          )
      (vector-normalize! s4-2 f30-0)
      )
    (set! (-> this rbody lin-momentum x) (-> s4-2 x))
    (set! (-> this rbody lin-momentum z) (-> s4-2 z))
    )
  (call-parent-method this arg0)
  (none)
  )

;; definition for method 94 of type h-kg-pickup
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-94 ((this h-kg-pickup))
  (call-parent-method this)
  (when (-> this camera-override?)
    (remove-setting! 'string-min-length)
    (remove-setting! 'string-max-length)
    (remove-setting! 'string-min-height)
    (remove-setting! 'string-max-height)
    )
  0
  (none)
  )

;; definition for method 49 of type h-kg-pickup
(defmethod rbody-event-handler ((this h-kg-pickup) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('set-taskman)
     (let ((v0-0 (the-as object (-> arg3 param 0))))
       (set! (-> this taskman) (the-as handle v0-0))
       v0-0
       )
     )
    (('impact-impulse)
     (send-event (handle->process (-> this taskman)) 'vehicle-bump)
     (call-parent-method this arg0 arg1 arg2 arg3)
     )
    (('override-camera)
     (set! (-> this camera-override?) (the-as symbol (-> arg3 param 0)))
     #t
     )
    (('die)
     (deactivate this)
     )
    (('flight-up)
     (hvehicle-method-154 this)
     )
    (('boost)
     (set-time! (-> this initial-creation-time))
     (set! (-> this auto-boost?) #t)
     (hvehicle-method-154 this)
     )
    (else
      (call-parent-method this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 88 of type h-kg-pickup
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-88 ((this h-kg-pickup) (arg0 vehicle-controls))
  (call-parent-method this arg0)
  (set! (-> arg0 throttle) (- 1.0 (* (- 1.0 (-> arg0 throttle)) (- 1.0 (-> arg0 throttle)))))
  0
  (none)
  )

;; definition for method 50 of type h-kg-pickup
(defmethod attack-handler ((this h-kg-pickup) (arg0 process-drawable) (arg1 attack-info) (arg2 touching-shapes-entry) (arg3 penetrate))
  (local-vars (v0-0 symbol))
  (cond
    ((logtest? (penetrate jak-dark-nuke) arg3)
     (return #f)
     v0-0
     )
    (else
      (call-parent-method this arg0 arg1 arg2 arg3)
      )
    )
  )
