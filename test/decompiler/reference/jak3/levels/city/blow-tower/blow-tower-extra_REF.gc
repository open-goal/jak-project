;;-*-Lisp-*-
(in-package goal)

;; definition of type hud-pickup
(deftype hud-pickup (hud)
  ()
  )

;; definition for method 3 of type hud-pickup
(defmethod inspect ((this hud-pickup))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition of type hud-hellcat
(deftype hud-hellcat (hud)
  ()
  )

;; definition for method 3 of type hud-hellcat
(defmethod inspect ((this hud-hellcat))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 15 of type hud-pickup
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-pickup))
  (set-hud-piece-position!
    (-> this sprites 2)
    (the int (+ 20.0 (* -130.0 (-> this offset))))
    (the int (+ 15.0 (* -100.0 (-> this offset))))
    )
  (set! (-> this sprites 0 angle) (* 182.04445 (the float (- 270 (/ (* 90 (-> this values 0 current)) 100)))))
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 2)) 40 16)
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites 2)) 1 16)
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites 2)) 15 2)
  (let* ((f0-9 (the float (-> this sprites 2 color x)))
         (f26-0 (the float (-> this sprites 2 color y)))
         (f30-0 (the float (-> this sprites 2 color z)))
         (f28-0 (seek f0-9 128.0 (* 512.0 (seconds-per-frame))))
         (f26-1 (seek f26-0 128.0 (* 512.0 (seconds-per-frame))))
         (f0-16 (seek f30-0 128.0 (* 512.0 (seconds-per-frame))))
         )
    (set! (-> this sprites 2 color x) (the int f28-0))
    (set! (-> this sprites 2 color y) (the int f26-1))
    (set! (-> this sprites 2 color z) (the int f0-16))
    )
  (let* ((f0-19 (the float (-> this sprites 3 color x)))
         (f26-2 (the float (-> this sprites 3 color y)))
         (f30-1 (the float (-> this sprites 3 color z)))
         (f28-1 (seek f0-19 128.0 (* 512.0 (seconds-per-frame))))
         (f26-3 (seek f26-2 128.0 (* 512.0 (seconds-per-frame))))
         (f0-26 (seek f30-1 128.0 (* 512.0 (seconds-per-frame))))
         )
    (set! (-> this sprites 3 color x) (the int f28-1))
    (set! (-> this sprites 3 color y) (the int f26-3))
    (set! (-> this sprites 3 color z) (the int f0-26))
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-pickup
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this hud-pickup))
  (set! (-> this values 0 target) (the int (-> *game-info* bot-health 0)))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type hud-pickup
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-pickup))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid) (the-as texture-id (get-texture hud-transparent-01 level-default-minimap)))
  (set! (-> this sprites 0 scale-x) 12.0)
  (set! (-> this sprites 0 scale-y) 11.2)
  (set! (-> this sprites 0 pos z) #xfffff2)
  (set! (-> this sprites 1 tid) (the-as texture-id (get-texture hud-npcring-bar-01 level-default-minimap)))
  (set! (-> this sprites 1 pos z) #xfffff0)
  (set! (-> this sprites 2 tid) (the-as texture-id (get-texture hud-npcring-01 level-default-minimap)))
  (set! (-> this sprites 2 pos z) #xffffff)
  (set! (-> this sprites 3 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x7 :page #xc16)))
        )
  (set! (-> this sprites 3 scale-x) 1.0)
  (set! (-> this sprites 3 scale-y) 1.4)
  (set! (-> this sprites 3 pos z) #xffffff)
  0
  (none)
  )

;; definition for method 18 of type hud-pickup
(defmethod event-callback ((this hud-pickup) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('hit)
     (set! (-> this sprites 2 color x) 255)
     (set! (-> this sprites 2 color y) 0)
     (set! (-> this sprites 2 color z) 0)
     (set! (-> this sprites 3 color x) 255)
     (set! (-> this sprites 3 color y) 255)
     (let ((v0-0 (the-as object 255)))
       (set! (-> this sprites 3 color z) (the-as int v0-0))
       v0-0
       )
     )
    (else
      (call-parent-method this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 15 of type hud-hellcat
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-hellcat))
  (set-hud-piece-position! (the-as hud-sprite (-> this sprites)) 5 366)
  (set! (-> this sprites 0 pos z) #xffffff)
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites)) 4 9)
  (set! (-> this sprites 1 pos z) #xffffff)
  (let ((f0-1 (fmax 0.0 (fmin 1.0 (the-as float (-> this values 0 current))))))
    (set! (-> this sprites 1 color x) (the int (* 255.0 (- 1.0 f0-1))))
    (set! (-> this sprites 1 color y) (the int (* 255.0 f0-1)))
    (set! (-> this sprites 1 color z) 0)
    (set! (-> this sprites 1 scale-x) (* 20.5 f0-1))
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-hellcat
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this hud-hellcat))
  (set! (-> this values 0 target) (the-as int (-> *game-info* health-bar-vehicle)))
  (logclear! (-> this flags) (hud-flags disable))
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type hud-hellcat
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-hellcat))
  (vehicle-entity-hack 27)
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-lower-center) (gui-action play) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tid)
        (the-as
          texture-id
          (lookup-texture-by-name "hud-vehicle-health-bar-01" (the-as string #f) (the-as (pointer texture-page) #f))
          )
        )
  (set! (-> this sprites 0 flags) (hud-sprite-flags))
  (set! (-> this sprites 0 scale-x) 0.7)
  (set! (-> this sprites 0 scale-y) 0.8)
  (set! (-> this sprites 1 tid) (the-as texture-id (get-texture common-white common)))
  (set! (-> this sprites 1 flags) (hud-sprite-flags))
  (set! (-> this sprites 1 scale-x) 0.0)
  (set! (-> this sprites 1 scale-y) 2.0)
  (set! (-> this sprites 1 color w) 48)
  0
  (none)
  )

;; definition of type hud-pickup-arrows
(deftype hud-pickup-arrows (hud)
  ((offscreen  uint8)
   (alpha      float  2)
   )
  )

;; definition for method 3 of type hud-pickup-arrows
(defmethod inspect ((this hud-pickup-arrows))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hud inspect)))
    (t9-0 this)
    )
  (format #t "~2Toffscreen: ~D~%" (-> this offscreen))
  (format #t "~2Talpha[2] @ #x~X~%" (-> this alpha))
  (label cfg-4)
  this
  )

;; definition for method 15 of type hud-pickup-arrows
;; WARN: Return type mismatch int vs none.
(defmethod draw ((this hud-pickup-arrows))
  (set! (-> this sprites 0 color w) 0)
  (set-hud-piece-position! (the-as hud-sprite (-> this sprites)) 32 208)
  (set! (-> this sprites 0 color w) (the int (-> this alpha 0)))
  (set! (-> this sprites 1 color w) 0)
  (set-hud-piece-position! (-> this sprites 1) 480 208)
  (set! (-> this sprites 1 color w) (the int (-> this alpha 1)))
  ((method-of-type hud draw) this)
  0
  (none)
  )

;; definition for method 16 of type hud-pickup-arrows
;; WARN: Return type mismatch int vs none.
(defmethod update-values! ((this hud-pickup-arrows))
  (logclear! (-> this flags) (hud-flags disable))
  (when (not (logtest? (-> *kernel-context* prevent-from-run) (process-mask pause)))
    (dotimes (s5-0 2)
      (if (not (logtest? (-> this offscreen) (ash 1 s5-0)))
          (seek! (-> this alpha s5-0) 0.0 (* 256.0 (seconds-per-frame)))
          (seek!
            (-> this alpha s5-0)
            (+ 80.0 (* 32.0 (sin (* 218.45334 (the float (mod (current-time) 300))))))
            (* 128.0 (seconds-per-frame))
            )
          )
      )
    )
  ((method-of-type hud update-values!) this)
  0
  (none)
  )

;; definition for method 17 of type hud-pickup-arrows
;; WARN: Return type mismatch int vs none.
(defmethod init-callback ((this hud-pickup-arrows))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this offscreen) (the-as uint 0))
  (set! (-> this alpha 0) 0.0)
  (set! (-> this alpha 1) 0.0)
  (set! (-> this sprites 0 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #xc16)))
        )
  (set! (-> this sprites 0 flags) (hud-sprite-flags hsf0 hsf3))
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (set! (-> this sprites 1 tid)
        (the-as texture-id (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #xc16)))
        )
  (set! (-> this sprites 1 flags) (hud-sprite-flags hsf3))
  (set! (-> this sprites 1 scale-x) 1.0)
  (set! (-> this sprites 1 scale-y) 1.0)
  0
  (none)
  )

;; definition for method 18 of type hud-pickup-arrows
(defmethod event-callback ((this hud-pickup-arrows) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('reset-arrows)
     (set! (-> this offscreen) (the-as uint 0))
     0
     )
    (('off-to-left)
     (logior! (-> this offscreen) 1)
     )
    (('off-to-right)
     (logior! (-> this offscreen) 2)
     )
    )
  ((method-of-type hud event-callback) this arg0 arg1 arg2 arg3)
  )




