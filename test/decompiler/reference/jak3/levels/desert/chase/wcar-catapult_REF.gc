;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defskelgroup skel-v-catapult catapult 38 41
              ((39 (meters 999999)))
              :bounds (static-spherem 0 0 0 24)
              :shadow 40
              :origin-joint-index 3
              )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-wheel catapult catapult-wheel-lod0-jg catapult-wheel-idle-ja
              ((catapult-wheel-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1.5)
              :longest-edge (meters 1.07)
              :shadow catapult-wheel-shadow-mg
              )

;; definition for symbol *v-catapult-turret-control-info*, type turret-control-info
(define *v-catapult-turret-control-info* (new 'static 'turret-control-info
                                           :joint-index 59
                                           :barrel-count 1
                                           :shot-speed 819200.0
                                           :attack-range 819200.0
                                           :damage 2.0
                                           :vehicle-damage-factor 1.0
                                           :vehicle-impulse-factor 1.0
                                           :rot-min (new 'static 'array float 2 -1820.4445 -16384.0)
                                           :rot-max (new 'static 'array float 2 16384.0 16384.0)
                                           :local-pos (new 'static 'vector :z 4096.0 :w 1.0)
                                           :local-dir (new 'static 'vector :z 1.0 :w 1.0)
                                           :barrel-array (new 'static 'inline-array turret-barrel-info 4
                                             (new 'static 'turret-barrel-info
                                               :local-pos (new 'static 'vector :w 1.0)
                                               :local-dir (new 'static 'vector :z 1.0 :w 1.0)
                                               )
                                             (new 'static 'turret-barrel-info)
                                             (new 'static 'turret-barrel-info)
                                             (new 'static 'turret-barrel-info)
                                             )
                                           )
        )

;; failed to figure out what this is:
(set! (-> *v-catapult-turret-control-info* shot-type) v-marauder-shot)

;; definition for symbol *v-catapult-turret-guard-settings*, type squad-unit-settings
(define *v-catapult-turret-guard-settings* (new 'static 'squad-unit-settings
                                             :shot-count 2
                                             :rand-shot-count 2
                                             :inaccuracy 0.5
                                             :acquire-delay (seconds 0.2)
                                             :shot-delay (seconds 0.1)
                                             :burst-delay (seconds 0.5)
                                             :rand-burst-delay (seconds 1)
                                             :rand-shot-delay (seconds 0.2)
                                             )
        )

;; failed to figure out what this is:
(set! (-> *v-catapult-constants* debris)
      (new 'static 'debris-static-params
        :joints (new 'static 'boxed-array :type debris-static-joint-params
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-ring")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-nut")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-rod")
          (new 'static 'debris-static-joint-params :parent-joint-index 4 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-v-marauder-debris-panel")
          (new 'static 'debris-static-joint-params :parent-joint-index 8 :group "skel-v-marauder-debris-panel")
          )
        :collide-spec (collide-spec backgnd)
        :sound-hit (static-sound-name "inter-pieces")
        :art-level 'wasall
        )
      )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-longspike catapult catapult-debris-longspike-lod0-jg -1
              ((catapult-debris-longspike-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              )

;; definition for symbol *v-catapult-debris-longspike-params*, type debris-static-params
(define *v-catapult-debris-longspike-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 29 :group "skel-v-catapult-debris-longspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-bar catapult catapult-debris-bar-lod0-jg -1
              ((catapult-debris-bar-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

;; definition for symbol *v-catapult-debris-bar-params*, type debris-static-params
(define *v-catapult-debris-bar-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 18 :group "skel-v-catapult-debris-bar")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-panel catapult catapult-debris-panel-lod0-jg -1
              ((catapult-debris-panel-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              )

;; definition for symbol *v-catapult-debris-lpanel-params*, type debris-static-params
(define *v-catapult-debris-lpanel-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 11 :group "skel-v-catapult-debris-panel")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rpanel-params*, type debris-static-params
(define *v-catapult-debris-rpanel-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 10 :group "skel-v-catapult-debris-panel")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-bumper catapult catapult-debris-bumper-lod0-jg -1
              ((catapult-debris-bumper-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7)
              )

;; definition for symbol *v-catapult-debris-lbumperspikes-params*, type debris-static-params
(define *v-catapult-debris-lbumperspikes-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 17 :group "skel-v-catapult-debris-bumper")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rbumperspikes-params*, type debris-static-params
(define *v-catapult-debris-rbumperspikes-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 16 :group "skel-v-catapult-debris-bumper")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-smlspike catapult catapult-debris-smlspike-lod0-jg -1
              ((catapult-debris-smlspike-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              )

;; definition for symbol *v-catapult-debris-lfspike-params*, type debris-static-params
(define *v-catapult-debris-lfspike-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 13 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rfspike-params*, type debris-static-params
(define *v-catapult-debris-rfspike-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 12 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-ltopspike-params*, type debris-static-params
(define *v-catapult-debris-ltopspike-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 15 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rtopspike-params*, type debris-static-params
(define *v-catapult-debris-rtopspike-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 14 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-lsidespikea-params*, type debris-static-params
(define *v-catapult-debris-lsidespikea-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 24 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-lsidespikeb-params*, type debris-static-params
(define *v-catapult-debris-lsidespikeb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 25 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-lsidespikec-params*, type debris-static-params
(define *v-catapult-debris-lsidespikec-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 26 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-lsidespiked-params*, type debris-static-params
(define *v-catapult-debris-lsidespiked-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 27 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-lsidespikee-params*, type debris-static-params
(define *v-catapult-debris-lsidespikee-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 28 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rsidespikea-params*, type debris-static-params
(define *v-catapult-debris-rsidespikea-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 19 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rsidespikeb-params*, type debris-static-params
(define *v-catapult-debris-rsidespikeb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 20 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rsidespikec-params*, type debris-static-params
(define *v-catapult-debris-rsidespikec-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 21 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rsidespiked-params*, type debris-static-params
(define *v-catapult-debris-rsidespiked-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 22 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rsidespikee-params*, type debris-static-params
(define *v-catapult-debris-rsidespikee-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 23 :group "skel-v-catapult-debris-smlspike")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-frontpanel-a catapult catapult-debris-frontpanel-a-lod0-jg -1
              ((catapult-debris-frontpanel-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lfpanela-params*, type debris-static-params
(define *v-catapult-debris-lfpanela-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 33 :group "skel-v-catapult-debris-frontpanel-a")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rfpanela-params*, type debris-static-params
(define *v-catapult-debris-rfpanela-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 45 :group "skel-v-catapult-debris-frontpanel-a")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-frontpanel-b catapult catapult-debris-frontpanel-b-lod0-jg -1
              ((catapult-debris-frontpanel-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lfpanelb-params*, type debris-static-params
(define *v-catapult-debris-lfpanelb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 34 :group "skel-v-catapult-debris-frontpanel-b")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rfpanelb-params*, type debris-static-params
(define *v-catapult-debris-rfpanelb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 46 :group "skel-v-catapult-debris-frontpanel-b")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-frontpanel-c catapult catapult-debris-frontpanel-c-lod0-jg -1
              ((catapult-debris-frontpanel-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lfpanelc-params*, type debris-static-params
(define *v-catapult-debris-lfpanelc-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 35 :group "skel-v-catapult-debris-frontpanel-c")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rfpanelc-params*, type debris-static-params
(define *v-catapult-debris-rfpanelc-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 47 :group "skel-v-catapult-debris-frontpanel-c")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-frontpanel-d catapult catapult-debris-frontpanel-d-lod0-jg -1
              ((catapult-debris-frontpanel-d-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lfpaneld-params*, type debris-static-params
(define *v-catapult-debris-lfpaneld-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 36 :group "skel-v-catapult-debris-frontpanel-d")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rfpaneld-params*, type debris-static-params
(define *v-catapult-debris-rfpaneld-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 48 :group "skel-v-catapult-debris-frontpanel-d")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-midpanel-a catapult catapult-debris-midpanel-a-lod0-jg -1
              ((catapult-debris-midpanel-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lmpanela-params*, type debris-static-params
(define *v-catapult-debris-lmpanela-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 37 :group "skel-v-catapult-debris-midpanel-a")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rmpanela-params*, type debris-static-params
(define *v-catapult-debris-rmpanela-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 49 :group "skel-v-catapult-debris-midpanel-a")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-midpanel-b catapult catapult-debris-midpanel-b-lod0-jg -1
              ((catapult-debris-midpanel-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lmpanelb-params*, type debris-static-params
(define *v-catapult-debris-lmpanelb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 38 :group "skel-v-catapult-debris-midpanel-b")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rmpanelb-params*, type debris-static-params
(define *v-catapult-debris-rmpanelb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 50 :group "skel-v-catapult-debris-midpanel-b")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-midpanel-c catapult catapult-debris-midpanel-c-lod0-jg -1
              ((catapult-debris-midpanel-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lmpanelc-params*, type debris-static-params
(define *v-catapult-debris-lmpanelc-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 39 :group "skel-v-catapult-debris-midpanel-c")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rmpanelc-params*, type debris-static-params
(define *v-catapult-debris-rmpanelc-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 51 :group "skel-v-catapult-debris-midpanel-c")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-midpanel-d catapult catapult-debris-midpanel-d-lod0-jg -1
              ((catapult-debris-midpanel-d-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lmpaneld-params*, type debris-static-params
(define *v-catapult-debris-lmpaneld-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 40 :group "skel-v-catapult-debris-midpanel-d")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rmpaneld-params*, type debris-static-params
(define *v-catapult-debris-rmpaneld-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 52 :group "skel-v-catapult-debris-midpanel-d")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-rearpanel-a catapult catapult-debris-rearpanel-a-lod0-jg -1
              ((catapult-debris-rearpanel-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lrpanela-params*, type debris-static-params
(define *v-catapult-debris-lrpanela-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 41 :group "skel-v-catapult-debris-rearpanel-a")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rrpanela-params*, type debris-static-params
(define *v-catapult-debris-rrpanela-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 53 :group "skel-v-catapult-debris-rearpanel-a")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-rearpanel-b catapult catapult-debris-rearpanel-b-lod0-jg -1
              ((catapult-debris-rearpanel-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lrpanelb-params*, type debris-static-params
(define *v-catapult-debris-lrpanelb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 42 :group "skel-v-catapult-debris-rearpanel-b")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rrpanelb-params*, type debris-static-params
(define *v-catapult-debris-rrpanelb-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 54 :group "skel-v-catapult-debris-rearpanel-b")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-rearpanel-c catapult catapult-debris-rearpanel-c-lod0-jg -1
              ((catapult-debris-rearpanel-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lrpanelc-params*, type debris-static-params
(define *v-catapult-debris-lrpanelc-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 43 :group "skel-v-catapult-debris-rearpanel-c")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rrpanelc-params*, type debris-static-params
(define *v-catapult-debris-rrpanelc-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 55 :group "skel-v-catapult-debris-rearpanel-c")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-v-catapult-debris-rearpanel-d catapult catapult-debris-rearpanel-d-lod0-jg -1
              ((catapult-debris-rearpanel-d-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition for symbol *v-catapult-debris-lrpaneld-params*, type debris-static-params
(define *v-catapult-debris-lrpaneld-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 44 :group "skel-v-catapult-debris-rearpanel-d")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; definition for symbol *v-catapult-debris-rrpaneld-params*, type debris-static-params
(define *v-catapult-debris-rrpaneld-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 56 :group "skel-v-catapult-debris-rearpanel-d")
      )
    :collide-spec (collide-spec backgnd)
    :art-level #f
    )
  )

;; failed to figure out what this is:
(defpartgroup group-v-catapult-shot-chargeup
  :id 448
  :linger-duration (seconds 0)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1783 :flags (sp6) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1784 :period (seconds 30) :length (seconds 0.017))
    )
  )

;; failed to figure out what this is:
(defpart 1783
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 0.0)
    (:scalevel-x (meters 0.015555556))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.06666667)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 3))
    (:next-launcher 1785)
    )
  )

;; failed to figure out what this is:
(defpart 1784
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 0.0)
    (:fade-a 0.14222223)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 3))
    (:next-launcher 1785)
    )
  )

;; failed to figure out what this is:
(defpart 1785
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y :copy scalevel-x) (:fade-a -0.85333335) (:flags (sp-cpuinfo-flag-2)))
  )

;; failed to figure out what this is:
(defpartgroup group-v-catapult-shot-idle
  :id 449
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1786 :fade-after (meters 270) :falloff-to (meters 270) :flags (sp6))
    (sp-item 1787 :fade-after (meters 270))
    (sp-item 1788 :fade-after (meters 270))
    )
  )

;; failed to figure out what this is:
(defpart 1786
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12) (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 20.0 10.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 1787
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 60.0 60.0)
    (:scalevel-x (meters -0.060000002))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-v-catapult-shot
  :id 450
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1789 :flags (sp6)) (sp-item 1790))
  )

;; failed to figure out what this is:
(defpart 1789
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12) (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 20.0 40.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpart 1790
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-x (meters -0.060000002))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-v-catapult-shot-trail
  :id 451
  :flags (sp0 sp13)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1788))
  )

;; failed to figure out what this is:
(defpart 1788
  :init-specs ((:texture (radial-gradient-yellow level-default-sprite))
    (:num 1.0)
    (:x (meters 0) (meters 2))
    (:scale-x (meters 3.2) (meters 0.8))
    (:scale-y (meters 2.4) (meters 0.4))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:scalevel-x (meters -0.0053333333) (meters -0.0053333333))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -2.6666667)
    (:fade-b -3.4)
    (:accel-y (meters -0.00033333333) (meters -0.001))
    (:friction 0.99)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:next-time (seconds 0.25))
    (:next-launcher 1791)
    (:rotate-y (degrees 0) (degrees 3600))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1791
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.48 -0.48))
  )

;; failed to figure out what this is:
(defpartgroup group-v-catapult-shot-explosion
  :id 452
  :duration (seconds 4)
  :flags (sp0 sp5)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 1793 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1794 :period (seconds 30) :length (seconds 0.035))
    (sp-item 1795 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1796 :period (seconds 30) :length (seconds 0.035))
    (sp-item 1797 :period (seconds 30) :length (seconds 0.035))
    (sp-item 1798 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1799 :period (seconds 30) :length (seconds 0.167))
    (sp-item 1800 :period (seconds 30) :length (seconds 0.5))
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    )
  )

;; failed to figure out what this is:
(defpart 1793
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 30.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

;; failed to figure out what this is:
(defpart 1794
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 0.8) (meters 1.2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0 20.0)
    (:a 128.0)
    (:vel-y (meters 0.16666667) (meters 0.33333334))
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.9)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1795
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 20.0 10.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.114285715)
    (:fade-b -0.042857144)
    (:fade-a -0.36571428 -0.36571428)
    (:friction 0.93)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1796
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 8.0 8.0)
    (:g :copy r)
    (:b :copy r)
    (:a 64.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.75)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1797
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 30.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 1.0)
    (:g 1.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.05))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-color* (new 'static 'curve-color-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'inline-array vector 4
                                         (new 'static 'vector :x 70.0 :y 70.0 :z 70.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         )
                                       :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 64.0 :y 32.0 :z 33.0 :w 34.0)
                                       :one-over-x-deltas (new 'static 'vector :x -32.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-dust-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-dust-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.7 :z -1.0 :w -2.0)
                                       :ys (new 'static 'vector :y 1.0 :w 1.0)
                                       :one-over-x-deltas (new 'static 'vector :x 1.4285715 :y -3.3333333 :z 1.0 :w 1.0)
                                       )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-dust-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                         :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                         :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                         )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-dust-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                         :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                         :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                         )
          )
    )

;; definition for symbol *part-v-catapult-shot-explosion-dust-in-curve-settings*, type particle-curve-settings
(define *part-v-catapult-shot-explosion-dust-in-curve-settings* (new 'static 'particle-curve-settings
                                                                  :lifetime-base (seconds 0.5)
                                                                  :lifetime-offset (seconds 1)
                                                                  :flags (particle-curve-flags pcf0)
                                                                  )
        )

;; failed to figure out what this is:
(set! (-> *part-id-table* 1797 init-specs 14 initial-valuef)
      (the-as float *part-v-catapult-shot-explosion-dust-in-curve-settings*)
      )

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* color-start) *range-ftexplo-dust-color*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* alpha-start) *range-ftexplo-dust-alpha*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-x-start) *range-ftexplo-dust-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-y-start) *range-ftexplo-dust-scale-y*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* r-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* g-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* b-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* a-scalar) *curve-ftexplo-dust-alpha*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-x-scalar)
      *curve-ftexplo-dust-scale-x*
      )

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-y-scalar)
      *curve-ftexplo-dust-scale-y*
      )

;; failed to figure out what this is:
(defpart 1799
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.75)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1800
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 8.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags ())
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-color* (new 'static 'curve-color-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'inline-array vector 4
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    )
                                  :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-alpha* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                  :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-scale-x* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 5.0 :y 7.0 :z 8.0 :w 9.0)
                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *range-ftexplo-scale-y* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 5.0 :y 7.0 :z 8.0 :w 9.0)
                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-alpha* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                  :ys (new 'static 'vector :y 1.0 :z 0.8)
                                  :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                  )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-scale-x* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                    :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                    )
          )
    )

;; failed to figure out what this is:
(if #t
    (set! *curve-ftexplo-scale-y* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                    :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                    )
          )
    )

;; definition for symbol *part-v-catapult-shot-explosion-texture-curve-settings*, type particle-curve-settings
(define *part-v-catapult-shot-explosion-texture-curve-settings* (new 'static 'particle-curve-settings
                                                                  :lifetime-base (seconds 0.1)
                                                                  :lifetime-offset (seconds 0.6)
                                                                  :flags (particle-curve-flags pcf0)
                                                                  )
        )

;; failed to figure out what this is:
(set! (-> *part-id-table* 1800 init-specs 16 initial-valuef)
      (the-as float *part-v-catapult-shot-explosion-texture-curve-settings*)
      )

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* color-start) *range-ftexplo-color*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* alpha-start) *range-ftexplo-alpha*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-x-start) *range-ftexplo-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-y-start) *range-ftexplo-scale-y*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* r-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* g-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* b-scalar) #f)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* a-scalar) *curve-ftexplo-alpha*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-x-scalar) *curve-ftexplo-scale-x*)

;; failed to figure out what this is:
(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-y-scalar) *curve-ftexplo-scale-y*)

;; failed to figure out what this is:
(defpart 1798
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 1801
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 100.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:scalevel-x (meters -0.02) (meters -0.02))
    (:rotvel-z (degrees -300) (degrees 600))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00066666666) (meters -0.001))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 70))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 1792
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 1.0)
    (:scale-x (meters 0.00024414062) (meters 0.00012207031))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 100.0)
    (:b 50.0)
    (:a 128.0)
    (:fade-r -0.85333335)
    (:fade-g -0.6666667)
    (:fade-b -0.5)
    (:fade-a -0.36571428 -0.36571428)
    (:accel-y (meters 0) (meters -0.00033333333))
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2))
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-catapult-shot-sphere gun gun-red-sphere-lod0-jg gun-red-sphere-idle-ja
              ((gun-red-sphere-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 30)
              :texture-level 10
              :sort 4
              )

;; definition of type catapult-shot-sphere
(deftype catapult-shot-sphere (process-drawable)
  ((current-alpha  float)
   (pad            uint8  12)
   )
  (:state-methods
    active
    )
  )

;; definition for method 3 of type catapult-shot-sphere
(defmethod inspect ((this catapult-shot-sphere))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcurrent-alpha: ~f~%" (-> this current-alpha))
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (label cfg-4)
  this
  )

;; definition of type catapult-shot-sphere-init-params
(deftype catapult-shot-sphere-init-params (structure)
  ((pos  vector  :inline)
   )
  )

;; definition for method 3 of type catapult-shot-sphere-init-params
(defmethod inspect ((this catapult-shot-sphere-init-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'catapult-shot-sphere-init-params)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (label cfg-4)
  this
  )

;; definition for function catapult-shot-sphere-init-by-other
;; INFO: Used lq/sq
(defbehavior catapult-shot-sphere-init-by-other catapult-shot-sphere ((arg0 catapult-shot-sphere-init-params))
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-catapult-shot-sphere" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (set! (-> self root trans quad) (-> arg0 pos quad))
  (quaternion-identity! (-> self root quat))
  (go-virtual active)
  )

;; failed to figure out what this is:
(defstate active (catapult-shot-sphere)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
    )
  :trans (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (let* ((a2-0 (math-camera-matrix))
             (v1-0 (-> a2-0 rvec quad))
             (a0-0 (-> a2-0 uvec quad))
             (a1-0 (-> a2-0 fvec quad))
             (a2-1 (-> a2-0 trans quad))
             )
        (set! (-> gp-0 rvec quad) v1-0)
        (set! (-> gp-0 uvec quad) a0-0)
        (set! (-> gp-0 fvec quad) a1-0)
        (set! (-> gp-0 trans quad) a2-1)
        )
      (-> gp-0 fvec)
      (-> gp-0 rvec)
      (matrix->quat gp-0 (-> self root quat))
      )
    (set! (-> self current-alpha) (* 0.008333334 (the float (- (current-time) (-> self state-time)))))
    (let ((f0-3 (+ (-> self root scale x) (* 24.0 (seconds-per-frame)))))
      (set-vector! (-> self root scale) f0-3 f0-3 f0-3 1.0)
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (ja-no-eval :group! (-> self draw art-group data 77) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (ja-no-eval :group! (-> self draw art-group data 78) :num! (seek! max 5.0) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 5.0))
      )
    (deactivate self)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(when (or (zero? *v-catapult-shot-impact-blur*) (!= loading-level global))
  (set! *v-catapult-shot-impact-blur* (new 'loading-level 'curve2d-piecewise))
  (curve2d-piecewise-method-10 *v-catapult-shot-impact-blur* 3 'loading-level (the-as int #f))
  )

;; failed to figure out what this is:
(set! (-> *v-catapult-shot-impact-blur* pts data 0 first) 0.0)

;; failed to figure out what this is:
(set! (-> *v-catapult-shot-impact-blur* pts data 0 second) 0.0)

;; failed to figure out what this is:
(set! (-> *v-catapult-shot-impact-blur* pts data 1 first) 0.2)

;; failed to figure out what this is:
(set! (-> *v-catapult-shot-impact-blur* pts data 1 second) 1.0)

;; failed to figure out what this is:
(set! (-> *v-catapult-shot-impact-blur* pts data 2 first) 1.0)

;; failed to figure out what this is:
(set! (-> *v-catapult-shot-impact-blur* pts data 2 second) 0.0)

;; definition of type v-catapult-shot
(deftype v-catapult-shot (metalhead-grenade-shot)
  ((trail-part  sparticle-launch-control)
   )
  )

;; definition for method 3 of type v-catapult-shot
(defmethod inspect ((this v-catapult-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type metalhead-grenade-shot inspect)))
    (t9-0 this)
    )
  (format #t "~2Ttrail-part: ~A~%" (-> this trail-part))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate impact (v-catapult-shot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type metalhead-grenade-shot impact) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (send-event (handle->process (-> self desired-target)) 'die)
    )
  )

;; definition for method 25 of type v-catapult-shot
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this v-catapult-shot))
  (if (nonzero? (-> this part))
      (spawn (-> this part) (-> this root trans))
      )
  (if (nonzero? (-> this trail-part))
      (push-back (-> this trail-part) (-> this root trans))
      )
  0
  (none)
  )

;; definition for method 39 of type v-catapult-shot
;; WARN: Return type mismatch object vs none.
(defmethod projectile-method-39 ((this v-catapult-shot))
  (let ((t9-0 (method-of-type metalhead-grenade-shot projectile-method-39)))
    (t9-0 this)
    )
  (send-event (handle->process (-> this desired-target)) 'update (-> this root trans))
  (none)
  )

;; definition for method 26 of type v-catapult-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-26 ((this v-catapult-shot))
  (cond
    ((logtest? (-> *part-group-id-table* 452 flags) (sp-group-flag sp13))
     (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
     (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 452))
     )
    (else
      (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
      (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 452))
      )
    )
  0
  (none)
  )

;; definition for method 28 of type v-catapult-shot
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this v-catapult-shot) (arg0 projectile-options))
  (case arg0
    (((projectile-options po0))
     (if (task-node-closed? (game-task-node desert-chase-marauders-get-to-stronghold))
         (sound-play "firebomb")
         (sound-play "proj-incoming")
         )
     )
    (((projectile-options po0 po1))
     (let ((f0-0 (vector-vector-distance-squared (-> this self root trans) (-> this desired-target-pos)))
           (f1-0 614400.0)
           )
       (when (< f0-0 (* f1-0 f1-0))
         (let ((a0-9 (static-sound-spec "incoming" :group 0 :volume 0.0)))
           (set! (-> a0-9 volume) 1024)
           (sound-play-by-spec a0-9 (-> this sound-id) (-> this root trans))
           )
         )
       )
     )
    )
  0
  (none)
  )

;; definition for method 7 of type v-catapult-shot
;; WARN: Return type mismatch metalhead-grenade-shot vs v-catapult-shot.
(defmethod relocate ((this v-catapult-shot) (offset int))
  (if (nonzero? (-> this trail-part))
      (&+! (-> this trail-part) offset)
      )
  (the-as v-catapult-shot ((method-of-type metalhead-grenade-shot relocate) this offset))
  )

;; definition for method 40 of type v-catapult-shot
(defmethod projectile-method-40 ((this v-catapult-shot))
  512
  )

;; definition for method 31 of type v-catapult-shot
;; WARN: Return type mismatch sound-id vs none.
(defmethod init-proj-settings! ((this v-catapult-shot))
  (with-pp
    (set! (-> this attack-mode) 'eco-yellow)
    (set! (-> this blast-radius) 20480.0)
    (set! (-> this max-speed) 135168.0)
    (set! (-> this update-velocity) projectile-update-velocity-add-gravity)
    (set! (-> this move) gren-canister-move)
    (set! (-> this root dynam gravity y) 102400.0)
    (set! (-> this root dynam gravity-length) 102400.0)
    (set! (-> this root dynam gravity-max) 102400.0)
    (let ((f0-5 1092.2667))
      (quaternion-axis-angle! (-> this tumble-quat) 1.0 0.0 0.0 f0-5)
      )
    (set! (-> this part) (create-launch-control (-> *part-group-id-table* 450) this))
    pp
    (set! (-> this trail-part)
          (the-as
            sparticle-launch-control
            (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 1788) 5.0)
            )
          )
    (set! (-> this sound-id) (new-sound-id))
    (none)
    )
  )

;; definition of type v-catapult
(deftype v-catapult (wcar-base)
  ((jmod-axles          joint-mod-rotate-local  4 :inline)
   (jmod-gun-x          joint-mod-rotate-local  :inline)
   (jmod-gun-y          joint-mod-rotate-local  :inline)
   (turret-control      turret-control          :inline)
   (sub-state-time      uint32)
   (sub-state           int8)
   (launch-projectile?  symbol)
   (targ-pos            vector                  :inline)
   (notify-handle       handle)
   (spawn-part?         symbol)
   (charge-time         time-frame)
   (exploding?          symbol)
   )
  (:methods
    (fire-catapult-shot (_type_ vector vector) none)
    (v-catapult-method-204 (_type_) symbol)
    )
  )

;; definition for method 3 of type v-catapult
(defmethod inspect ((this v-catapult))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type wcar-base inspect)))
    (t9-0 this)
    )
  (format #t "~2Tjmod-axles[4] @ #x~X~%" (-> this jmod-axles))
  (format #t "~2Tjmod-gun-x: #<joint-mod-rotate-local @ #x~X>~%" (-> this jmod-gun-x))
  (format #t "~2Tjmod-gun-y: #<joint-mod-rotate-local @ #x~X>~%" (-> this jmod-gun-y))
  (format #t "~2Tturret-control: #<turret-control @ #x~X>~%" (-> this turret-control))
  (format #t "~2Tsub-state-time: ~D~%" (-> this sub-state-time))
  (format #t "~2Tsub-state: ~D~%" (-> this sub-state))
  (format #t "~2Tlaunch-projectile?: ~A~%" (-> this launch-projectile?))
  (format #t "~2Ttarg-pos: #<vector @ #x~X>~%" (-> this targ-pos))
  (format #t "~2Tnotify-handle: ~D~%" (-> this notify-handle))
  (format #t "~2Tspawn-part?: ~A~%" (-> this spawn-part?))
  (format #t "~2Tcharge-time: ~D~%" (-> this charge-time))
  (format #t "~2Texploding?: ~A~%" (-> this exploding?))
  (label cfg-4)
  this
  )

;; definition for method 90 of type v-catapult
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod control-hook-ai ((this v-catapult) (arg0 vehicle-controls))
  (let ((t9-0 (method-of-type wcar-base control-hook-ai)))
    (t9-0 this arg0)
    )
  (let ((v1-1 (-> this target-status)))
    (let ((f0-0 (vector-length (-> v1-1 velocity))))
      (set! (-> this turret-control inaccuracy) (* 0.000012207031 (+ 20480.0 f0-0)))
      )
    (turret-control-method-11 (-> this turret-control) this (-> v1-1 position) (-> v1-1 velocity))
    )
  (when (-> this launch-projectile?)
    (let ((v1-5 (-> this sub-state)))
      (cond
        ((zero? v1-5)
         (sound-play "proj-launch")
         (let ((a0-11 (-> this skel root-channel 0)))
           (set! (-> a0-11 frame-group) (the-as art-joint-anim (-> this draw art-group data 42)))
           (set! (-> a0-11 param 0)
                 (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 42)) frames num-frames) -1))
                 )
           (set! (-> a0-11 param 1) 1.0)
           (set! (-> a0-11 frame-num) 0.0)
           (joint-control-channel-group! a0-11 (the-as art-joint-anim (-> this draw art-group data 42)) num-func-seek!)
           )
         (+! (-> this sub-state) 1)
         )
        ((= v1-5 1)
         (when (not (ja-done? 0))
           (let ((a0-15 (-> this skel root-channel 0)))
             (set! (-> a0-15 param 0) (the float (+ (-> a0-15 frame-group frames num-frames) -1)))
             (set! (-> a0-15 param 1) 1.0)
             (joint-control-channel-group-eval! a0-15 (the-as art-joint-anim #f) num-func-seek!)
             )
           )
         (when (ja-done? 0)
           (set! (-> this sub-state-time) (the-as uint (current-time)))
           (+! (-> this sub-state) 1)
           )
         )
        ((= v1-5 2)
         (when (>= (the-as uint (- (current-time) (the-as int (-> this sub-state-time)))) (the-as uint 900))
           (sound-play "catapult-retrct")
           (let ((a0-22 (-> this skel root-channel 0)))
             (set! (-> a0-22 frame-group) (the-as art-joint-anim (-> this draw art-group data 43)))
             (set! (-> a0-22 param 0)
                   (the float (+ (-> (the-as art-joint-anim (-> this draw art-group data 43)) frames num-frames) -1))
                   )
             (set! (-> a0-22 param 1) 1.0)
             (set! (-> a0-22 frame-num) 0.0)
             (joint-control-channel-group! a0-22 (the-as art-joint-anim (-> this draw art-group data 43)) num-func-seek!)
             )
           (+! (-> this sub-state) 1)
           )
         )
        ((= v1-5 3)
         (when (not (ja-done? 0))
           (let ((a0-26 (-> this skel root-channel 0)))
             (set! (-> a0-26 param 0) (the float (+ (-> a0-26 frame-group frames num-frames) -1)))
             (set! (-> a0-26 param 1) 1.0)
             (joint-control-channel-group-eval! a0-26 (the-as art-joint-anim #f) num-func-seek!)
             )
           )
         (if (ja-done? 0)
             (+! (-> this sub-state) 1)
             )
         )
        ((= v1-5 4)
         (+! (-> this sub-state) 1)
         (set! (-> this notify-handle) (the-as handle #f))
         (set-time! (-> this charge-time))
         (logior! (-> this mask) (process-mask actor-pause))
         (let* ((s5-2 (-> this node-list data 7 bone))
                (v1-79 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-2 transform uvec) -12288.0))
                )
           (vector+! v1-79 (-> s5-2 transform trans) v1-79)
           (cond
             ((logtest? (-> *part-group-id-table* 448 flags) (sp-group-flag sp13))
              (set! (-> *launch-matrix* trans quad) (-> v1-79 quad))
              (part-tracker-spawn
                part-tracker-subsampler
                :to this
                :group (-> *part-group-id-table* 448)
                :duration (seconds 4)
                )
              )
             (else
               (set! (-> *launch-matrix* trans quad) (-> v1-79 quad))
               (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 448) :duration (seconds 4))
               )
             )
           )
         )
        ((= v1-5 5)
         (when (time-elapsed? (-> this charge-time) (seconds 3))
           (set! (-> this sub-state) 0)
           (set! (-> this launch-projectile?) #f)
           (set! (-> this spawn-part?) #t)
           )
         )
        )
      )
    )
  0
  (none)
  )

;; definition for method 203 of type v-catapult
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod fire-catapult-shot ((this v-catapult) (arg0 vector) (arg1 vector))
  (let ((s4-0 (new 'stack-no-clear 'traj2d-params))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    0.0
    (set! (-> s4-0 initial-tilt) 8192.0)
    (set! (-> s4-0 gravity) 102400.0)
    (vector-! s5-0 arg1 arg0)
    (let* ((v1-3 s5-0)
           (f0-11
             (* (- (* (sqrtf (+ (* (-> v1-3 x) (-> v1-3 x)) (* (-> v1-3 z) (-> v1-3 z)))) (tan (-> s4-0 initial-tilt)))
                   (-> s5-0 y)
                   )
                (/ 2.0 (-> s4-0 gravity))
                )
             )
           )
      (if (< 0.0 f0-11)
          (sqrtf f0-11)
          )
      )
    (let ((v1-8 s5-0))
      (set! (-> s4-0 x) (sqrtf (+ (* (-> v1-8 x) (-> v1-8 x)) (* (-> v1-8 z) (-> v1-8 z)))))
      )
    (set! (-> s4-0 y) (-> s5-0 y))
    (when (traj2d-calc-initial-speed-using-tilt s4-0)
      (let ((s1-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
        (set! (-> s1-0 ent) (-> this entity))
        (set! (-> s1-0 charge) 1.0)
        (set! (-> s1-0 options) (projectile-options))
        (logclear! (-> s1-0 options) (projectile-options po14 po15 po16))
        (set! (-> s1-0 pos quad) (-> arg0 quad))
        (set! (-> s1-0 notify-handle) (process->handle (handle->process (-> this notify-handle))))
        (set! (-> s1-0 owner-handle) (process->handle this))
        (set! (-> s1-0 target-handle) (the-as handle #f))
        (set! (-> s1-0 target-pos quad) (-> arg1 quad))
        (set! (-> s1-0 ignore-handle) (process->handle this))
        (let* ((v1-29 *game-info*)
               (a0-22 (+ (-> v1-29 attack-id) 1))
               )
          (set! (-> v1-29 attack-id) a0-22)
          (set! (-> s1-0 attack-id) a0-22)
          )
        (set! (-> s1-0 timeout) (seconds 10))
        (set! (-> s1-0 damage) 4.0)
        (logior! (-> s1-0 options) (projectile-options po14))
        (let ((s3-1 (new 'stack-no-clear 'quaternion)))
          (vector-normalize! s5-0 1.0)
          (quaternion-look-at! s3-1 s5-0 *up-vector*)
          (quaternion-rotate-local-x! s3-1 s3-1 -8192.0)
          (vector-z-quaternion! s5-0 s3-1)
          )
        (vector-normalize-copy! (-> s1-0 vel) s5-0 (-> s4-0 initial-speed))
        (spawn-projectile v-catapult-shot s1-0 this *default-dead-pool*)
        )
      )
    )
  0
  (none)
  )

;; definition for method 34 of type v-catapult
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this v-catapult))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((a0-5 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> a0-5 prim-core action) (collide-action solid))
      (set! (-> a0-5 transform-index) 0)
      )
    (let ((a0-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> a0-7 prim-core action) (collide-action solid))
      (set! (-> a0-7 transform-index) 0)
      )
    (let ((a0-9 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> a0-9 prim-core action) (collide-action solid))
      (set! (-> a0-9 transform-index) 0)
      )
    (let ((a0-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> a0-11 prim-core action) (collide-action solid))
      (set! (-> a0-11 transform-index) 0)
      )
    (let ((a0-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> a0-13 prim-core action) (collide-action solid))
      (set! (-> a0-13 transform-index) 0)
      )
    (let ((a0-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 144))))
      (set! (-> a0-15 prim-core action) (collide-action solid))
      (set! (-> a0-15 transform-index) 0)
      )
    (let ((a0-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 10))))
      (set! (-> a0-17 prim-core action) (collide-action solid))
      (set! (-> a0-17 transform-index) 0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-24 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-24 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-24 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 62 of type v-catapult
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-62 ((this v-catapult))
  (let ((s5-0 (-> this root root-prim)))
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 0 local-sphere))
      (the-as pointer (new 'static 'vector :x 32768.0 :z 15687.68 :w 8192.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 1 local-sphere))
      (the-as pointer (new 'static 'vector :x -32768.0 :z 15687.68 :w 8192.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 2 local-sphere))
      (the-as pointer (new 'static 'vector :x 28672.0 :z -24166.4 :w 8192.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 3 local-sphere))
      (the-as pointer (new 'static 'vector :x -28672.0 :z -24166.4 :w 8192.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 4 local-sphere))
      (the-as pointer (new 'static 'vector :y 11468.8 :z 26624.0 :w 20480.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 5 local-sphere))
      (the-as pointer (new 'static 'vector :y 12288.0 :z -3276.8 :w 20480.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 6 local-sphere))
      (the-as pointer (new 'static 'vector :y 8192.0 :z -26624.0 :w 16384.0))
      16
      )
    )
  ((method-of-type wcar-base vehicle-method-62) this)
  0
  (none)
  )

;; definition for method 79 of type v-catapult
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-79 ((this v-catapult))
  (let ((s5-0 (new 'stack-no-clear 'inline-array 'quaternion 3)))
    (set-vector! (-> s5-0 2) 1092.2667 1092.2667 0.0 0.0)
    (dotimes (s4-0 (-> this info physics-model wheel-count))
      (let ((s3-0 (-> this wheel s4-0)))
        (-> s3-0 info)
        (quaternion-set!
          (-> s5-0 0)
          0.0
          0.0
          (* (-> s3-0 sin-susp-ang) (-> s3-0 x-scale))
          (+ 1.0 (-> s3-0 cos-susp-ang))
          )
        (quaternion-normalize! (-> s5-0 0))
        (quaternion-axis-angle! (-> s5-0 1) 0.0 0.0 (-> s3-0 x-scale) (-> (&-> s5-0 0 data s4-0) 8))
        )
      (let ((v1-10 (-> this jmod-axles s4-0)))
        (quaternion*! (-> v1-10 rotation) (-> s5-0 0) (-> s5-0 1))
        )
      0
      )
    )
  (quaternion-axis-angle! (-> this jmod-gun-x rotation) 1.0 0.0 0.0 (- (-> this turret-control aim-rot-x)))
  (quaternion-axis-angle! (-> this jmod-gun-y rotation) 0.0 1.0 0.0 (-> this turret-control aim-rot-y))
  0
  (none)
  )

;; definition for method 204 of type v-catapult
;; INFO: Used lq/sq
(defmethod v-catapult-method-204 ((this v-catapult))
  (let* ((s4-0 (-> this node-list data 7 bone))
         (s5-0 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s4-0 transform uvec) -12288.0))
         )
    (vector+! s5-0 (-> s4-0 transform trans) s5-0)
    (if (and (nonzero? (-> this part)) (-> this spawn-part?))
        (spawn (-> this part) s5-0)
        )
    (when (and (not (-> this exploding?))
               *target*
               (and (>= 28672.0 (vector-vector-distance s5-0 (-> *target* control trans)))
                    (not (logtest? (focus-status teleporting) (-> *target* focus-status)))
                    )
               )
      (send-event
        this
        'attack
        #f
        (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                            (damage 2000.0)
                                                            (vehicle-damage-factor 1.0)
                                                            (vehicle-impulse-factor 0.0)
                                                            (attacker-velocity (new 'static 'vector :w 1.0))
                                                            )
                            )
        )
      (cond
        ((logtest? (-> *part-group-id-table* 452 flags) (sp-group-flag sp13))
         (set! (-> *launch-matrix* trans quad) (-> s5-0 quad))
         (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 452))
         )
        (else
          (set! (-> *launch-matrix* trans quad) (-> s5-0 quad))
          (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 452))
          )
        )
      (if (and *target* (nonzero? (-> *target* pilot)))
          (send-event
            (handle->process (-> *target* pilot vehicle))
            'attack
            #f
            (static-attack-info
              :mask (vehicle-impulse-factor)
              ((id (new-attack-id)) (damage 2.0) (vehicle-damage-factor 40.0) (vehicle-impulse-factor 20.0))
              )
            )
          )
      (let ((v0-3 #t))
        (set! (-> this exploding?) v0-3)
        v0-3
        )
      )
    )
  )

;; definition for method 46 of type v-catapult
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod apply-damage ((this v-catapult) (arg0 float) (arg1 rigid-body-impact))
  (let ((t9-0 (method-of-type wcar-base apply-damage)))
    (t9-0 this arg0 arg1)
    )
  (let* ((s5-0 (-> this node-list data 3 bone transform))
         (s4-0 (-> this node-list data 3 bone transform fvec))
         (a1-4 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg1 point) (-> this root trans)) 1.0))
         (f0-1 (vector-dot (the-as vector s5-0) a1-4))
         (s5-1 (< 0.0 f0-1))
         (s4-1 (< (vector-vector-angle-safe s4-0 a1-4) 5461.3335))
         (a1-6 (new 'stack 'debris-tuning (the-as uint 1)))
         )
    (set! (-> a1-6 fountain-rand-transv-lo quad) (-> this root trans quad))
    (set! (-> a1-6 hit-xz-reaction) 0.95)
    (set! (-> a1-6 hit-y-reaction) 0.6)
    (set! (-> a1-6 scale-rand-lo) 1.0)
    (set! (-> a1-6 scale-rand-hi) 1.0)
    (set! (-> a1-6 fountain-rand-transv-hi x) 40960.0)
    (set! (-> a1-6 fountain-rand-transv-hi y) 81920.0)
    (set! (-> a1-6 fountain-rand-transv-hi z) 8192.0)
    (set! (-> a1-6 fountain-rand-transv-hi w) 20480.0)
    (set! (-> a1-6 duration) (seconds 0.5))
    (cond
      ((and s5-1 s4-1)
       (cond
         ((not (logtest? (-> this draw seg-mask) 4))
          (debris-spawn this a1-6 *v-catapult-debris-longspike-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 4)
          )
         ((not (logtest? (-> this draw seg-mask) 2))
          (debris-spawn this a1-6 *v-catapult-debris-bar-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 2)
          )
         ((not (logtest? (-> this draw seg-mask) 128))
          (debris-spawn this a1-6 *v-catapult-debris-lbumperspikes-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 128)
          )
         ((not (logtest? #x10000 (-> this draw seg-mask)))
          (debris-spawn this a1-6 *v-catapult-debris-lfspike-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 #x10000)
          )
         ((not (logtest? #x800000 (-> this draw seg-mask)))
          (debris-spawn this a1-6 *v-catapult-debris-ltopspike-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 #x800000)
          )
         ((not (logtest? (-> this draw seg-mask) 4096))
          (debris-spawn this a1-6 *v-catapult-debris-lfpanela-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 4096)
          )
         ((not (logtest? (-> this draw seg-mask) 8192))
          (debris-spawn this a1-6 *v-catapult-debris-lfpanelb-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 8192)
          )
         ((not (logtest? (-> this draw seg-mask) #x4000))
          (debris-spawn this a1-6 *v-catapult-debris-lfpanelc-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 #x4000)
          )
         ((not (logtest? (-> this draw seg-mask) #x8000))
          (debris-spawn this a1-6 *v-catapult-debris-lfpaneld-params* (the-as process-drawable #f))
          (setup-masks (-> this draw) 0 #x8000)
          )
         )
       )
      (s4-1
        (cond
          ((not (logtest? (-> this draw seg-mask) 2))
           (debris-spawn this a1-6 *v-catapult-debris-bar-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 2)
           )
          ((not (logtest? #x20000000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rbumperspikes-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x20000000)
           )
          ((not (logtest? (shl 64 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rfspike-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 64 32))
           )
          ((not (logtest? (shl 4096 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rtopspike-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 4096 32))
           )
          ((not (logtest? (shl 4 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rfpanela-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 4 32))
           )
          ((not (logtest? (shl 8 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rfpanelb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 8 32))
           )
          ((not (logtest? (shl 16 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rfpanelc-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 16 32))
           )
          ((not (logtest? (shl 32 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rfpaneld-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 32 32))
           )
          )
        )
      (s5-1
        (cond
          ((not (logtest? #x40000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-lsidespikea-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x40000)
           )
          ((not (logtest? #x80000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-lsidespikeb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x80000)
           )
          ((not (logtest? #x100000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-lsidespikec-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x100000)
           )
          ((not (logtest? #x200000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-lsidespiked-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x200000)
           )
          ((not (logtest? #x400000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-lsidespikee-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x400000)
           )
          ((not (logtest? (-> this draw seg-mask) 256))
           (debris-spawn this a1-6 *v-catapult-debris-lmpanela-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 256)
           )
          ((not (logtest? (-> this draw seg-mask) 512))
           (debris-spawn this a1-6 *v-catapult-debris-lmpanelb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 512)
           )
          ((not (logtest? (-> this draw seg-mask) 1024))
           (debris-spawn this a1-6 *v-catapult-debris-lmpanelc-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 1024)
           )
          ((not (logtest? (-> this draw seg-mask) 2048))
           (debris-spawn this a1-6 *v-catapult-debris-lmpaneld-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 2048)
           )
          ((not (logtest? (-> this draw seg-mask) 8))
           (debris-spawn this a1-6 *v-catapult-debris-lrpanela-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 8)
           )
          ((not (logtest? (-> this draw seg-mask) 16))
           (debris-spawn this a1-6 *v-catapult-debris-lrpanelb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 16)
           )
          ((not (logtest? (-> this draw seg-mask) 32))
           (debris-spawn this a1-6 *v-catapult-debris-lrpanelc-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 32)
           )
          ((not (logtest? (-> this draw seg-mask) 64))
           (debris-spawn this a1-6 *v-catapult-debris-lrpaneld-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 64)
           )
          )
        )
      (else
        (cond
          ((not (logtest? (shl 128 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rsidespikea-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 128 32))
           )
          ((not (logtest? (shl 256 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rsidespikeb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 256 32))
           )
          ((not (logtest? (shl 512 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rsidespikec-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 512 32))
           )
          ((not (logtest? (shl 1024 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rsidespiked-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 1024 32))
           )
          ((not (logtest? (shl 2048 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rsidespikee-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 2048 32))
           )
          ((not (logtest? #x40000000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rmpanela-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x40000000)
           )
          ((not (logtest? (shl #x8000 16) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rmpanelb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl #x8000 16))
           )
          ((not (logtest? (shl 1 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rmpanelc-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 1 32))
           )
          ((not (logtest? (shl 2 32) (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rmpaneld-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 (shl 2 32))
           )
          ((not (logtest? #x2000000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rrpanela-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x2000000)
           )
          ((not (logtest? #x4000000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rrpanelb-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x4000000)
           )
          ((not (logtest? #x8000000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rrpanelc-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x8000000)
           )
          ((not (logtest? #x10000000 (-> this draw seg-mask)))
           (debris-spawn this a1-6 *v-catapult-debris-rrpaneld-params* (the-as process-drawable #f))
           (setup-masks (-> this draw) 0 #x10000000)
           )
          )
        )
      )
    )
  0
  (none)
  )

;; definition for method 49 of type v-catapult
;; INFO: Used lq/sq
;; WARN: disable def twice: 9. This may happen when a cond (no else) is nested inside of another conditional, but it should be rare.
(defmethod rbody-event-handler ((this v-catapult) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('launch)
     (let ((a0-2 (the-as vector (-> arg3 param 0)))
           (v1-1 (the-as process (-> arg3 param 1)))
           )
       (when (and a0-2 v1-1)
         (logclear! (-> this mask) (process-mask actor-pause))
         (set! (-> this targ-pos quad) (-> a0-2 quad))
         (set! (-> this notify-handle) (process->handle v1-1))
         (let ((v0-0 (the-as object #t)))
           (set! (-> this launch-projectile?) (the-as symbol v0-0))
           v0-0
           )
         )
       )
     )
    (('event-fire)
     (set! (-> this spawn-part?) #f)
     (fire-catapult-shot this (-> this node-list data 7 bone transform trans) (-> this targ-pos))
     (let* ((s4-0 (-> this root quat))
            (s5-1 (vector-normalize! (vector-z-quaternion! (new 'stack-no-clear 'vector) s4-0) 40960.0))
            (v1-11 (vector-normalize! (vector-y-quaternion! (new 'stack-no-clear 'vector) s4-0) -409600.0))
            )
       (vector+! s5-1 (-> this root trans) s5-1)
       (send-event this 'apply-impulse s5-1 v1-11)
       )
     )
    (('event-reset)
     (let* ((s4-1 (-> this root quat))
            (s5-3 (vector-normalize! (vector-z-quaternion! (new 'stack-no-clear 'vector) s4-1) -40960.0))
            (v1-13 (vector-normalize! (vector-y-quaternion! (new 'stack-no-clear 'vector) s4-1) -409600.0))
            )
       (vector+! s5-3 (-> this root trans) s5-3)
       (send-event this 'apply-impulse s5-3 v1-13)
       )
     )
    (else
      ((method-of-type wcar-base rbody-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 35 of type v-catapult
;; WARN: Return type mismatch int vs none.
(defmethod init-rbody-control! ((this v-catapult))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-catapult" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (alloc-rbody-control! this *v-catapult-constants*)
  (set! (-> this draw lod-set lod 0 dist) 1105920.0)
  (set! (-> this rider-hand-joint-array 0) 3)
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-axles))
   this
   (the-as uint 5)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-axles 1) this (the-as uint 8) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 2) this (the-as uint 4) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 3) this (the-as uint 9) (joint-mod-base-flags attached))
  (init (-> this jmod-gun-x) this (the-as uint 58) (joint-mod-base-flags attached))
  (init (-> this jmod-gun-y) this (the-as uint 57) (joint-mod-base-flags attached))
  (set-info (-> this turret-control) *v-catapult-turret-control-info*)
  (set! (-> this turret-control flags) (-> this turret-control flags))
  (set! (-> this turret-control ignore-handle) (process->handle this))
  (set! (-> this turret-control guard-settings) *v-catapult-turret-guard-settings*)
  (spawn-wheels!
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-catapult-wheel" (the-as (pointer level) #f)))
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-catapult-wheel" (the-as (pointer level) #f)))
    (the-as skeleton-group #f)
    (the-as skeleton-group #f)
    )
  (set! (-> this eng-pitch-offset) (rand-vu-float-range -0.5 0.5))
  (set! (-> this launch-projectile?) #f)
  (set! (-> this notify-handle) (the-as handle #f))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 449) this))
  (set! (-> this spawn-part?) #t)
  (set! (-> this exploding?) #f)
  0
  (none)
  )

;; failed to figure out what this is:
(defstate explode (v-catapult)
  :virtual #t
  :enter (behavior ()
    (if (not (logtest? (vehicle-flag vf55) (-> self v-flags)))
        (turbo-pickup-spawn (-> self root trans))
        )
    (let ((t9-1 (-> (method-of-type wcar-base explode) enter)))
      (if t9-1
          (t9-1)
          )
      )
    )
  )

;; failed to figure out what this is:
(defstate hostile (v-catapult)
  :virtual #t
  :enter (behavior ()
    (if (not (-> self minimap))
        (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 129) (the-as int #f) (the-as vector #t) 0))
        )
    (let ((t9-1 (-> (method-of-type wcar-base hostile) enter)))
      (if t9-1
          (t9-1)
          )
      )
    )
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type wcar-base hostile) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (v-catapult-method-204 self)
    )
  )

;; failed to figure out what this is:
(defstate die (v-catapult)
  :virtual #t
  :code (behavior ()
    (kill-by-type vehicle-wheel self)
    (while (-> self child)
      (suspend)
      )
    (let ((t9-1 (-> (method-of-type wcar-base die) code)))
      (if t9-1
          ((the-as (function none) t9-1))
          )
      )
    )
  )




