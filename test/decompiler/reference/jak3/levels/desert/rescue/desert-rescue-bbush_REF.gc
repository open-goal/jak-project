;;-*-Lisp-*-
(in-package goal)

;; definition of type task-manager-desert-rescue-bbush
(deftype task-manager-desert-rescue-bbush (task-manager-desert-rescue)
  ((actor-group        (pointer actor-group))
   (actor-group-count  int32)
   (final-timeout      time-frame)
   )
  (:state-methods
    show-finish
    finish-bbush
    )
  )

;; definition for method 3 of type task-manager-desert-rescue-bbush
(defmethod inspect ((this task-manager-desert-rescue-bbush))
  (when (not this)
    (set! this this)
    (goto cfg-7)
    )
  (let ((t9-0 (method-of-type task-manager-desert-rescue inspect)))
    (t9-0 this)
    )
  (format #t "~2Tactor-group: #x~X~%" (-> this actor-group))
  (dotimes (s5-0 (-> this actor-group-count))
    (format #t "~T  [~D]~2Tactor-group: ~`actor-group`P~%" s5-0 (-> this actor-group s5-0))
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> this actor-group-count))
  (format #t "~2Tfinal-timeout: ~D~%" (-> this final-timeout))
  (label cfg-7)
  this
  )

;; definition for symbol *bbush-passenger-pos*, type (array desert-passenger-info)
(define *bbush-passenger-pos* (new 'loading-level 'boxed-array desert-passenger-info 8))

;; failed to figure out what this is:
(dotimes (gp-0 (-> *bbush-passenger-pos* allocated-length))
  (set! (-> *bbush-passenger-pos* gp-0) (new 'loading-level 'desert-passenger-info))
  )

;; definition for symbol *__bbush-transport-path__*, type (inline-array vector)
(define *__bbush-transport-path__* (new 'static 'inline-array vector 50
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     (new 'static 'vector)
                                     )
        )

;; failed to figure out what this is:
(dotimes (v1-10 (-> *desresc-transport-path-1* length))
  (set! (-> *__bbush-transport-path__* v1-10 quad) (-> *desresc-transport-path-1* v1-10 pos quad))
  )

;; definition for method 46 of type task-manager-desert-rescue-bbush
;; INFO: Used lq/sq
;; WARN: Return type mismatch quaternion vs none.
(defmethod init-transport-params! ((this task-manager-desert-rescue-bbush) (arg0 desert-rescue-transport-init-params))
  (set! (-> arg0 path-pts) *__bbush-transport-path__*)
  (set! (-> arg0 num-pts) (-> this desresc-path allocated-length))
  (set! (-> arg0 pos quad) (-> this desresc-path 0 pos quad))
  (set! (-> arg0 desresc-path) (-> this desresc-path))
  (quaternion-identity! (-> arg0 quat))
  (none)
  )

;; definition for method 21 of type task-manager-desert-rescue-bbush
;; INFO: Used lq/sq
;; WARN: Return type mismatch connection vs none.
(defmethod set-time-limit ((this task-manager-desert-rescue-bbush))
  (local-vars (sv-16 res-tag))
  (set-setting! 'pilot-exit #f 0.0 0)
  (let ((t1-1 2))
    (set-setting! 'vehicles 'set (shr t1-1 32) t1-1)
    )
  (set-setting! 'airlock #f 0.0 0)
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-7 (res-lump-data (entity-by-name "desresc-bbush-info-1") 'actor-groups pointer :tag-ptr (& sv-16))))
    (cond
      ((and v1-7 (nonzero? (-> sv-16 elt-count)))
       (set! (-> this actor-group) (the-as (pointer actor-group) v1-7))
       (set! (-> this actor-group-count) (the-as int (-> sv-16 elt-count)))
       )
      (else
        (set! (-> this actor-group) (the-as (pointer actor-group) #f))
        (set! (-> this actor-group-count) 0)
        0
        )
      )
    )
  (set! (-> this passenger-pos) *bbush-passenger-pos*)
  (set! (-> this desresc-path) *desresc-transport-path-1*)
  (dotimes (s5-1 (-> *passenger-pos* length))
    (mem-copy! (the-as pointer (-> *bbush-passenger-pos* s5-1)) (the-as pointer (-> *passenger-pos* s5-1)) 56)
    )
  (set! (-> this passenger-pos length) (-> *passenger-pos* length))
  (when (-> this actor-group)
    (dotimes (s5-2 (-> this actor-group 0 length))
      (set! (-> *bbush-passenger-pos* s5-2 passenger-pos quad)
            (-> this actor-group 0 data s5-2 actor extra trans quad)
            )
      (set! (-> *bbush-passenger-pos* s5-2 beacon-pos quad)
            (-> this actor-group 1 data s5-2 actor extra trans quad)
            )
      (set! (-> *bbush-passenger-pos* s5-2 is-final?) #f)
      (let ((s4-0
              (res-lump-value
                (-> this actor-group 0 data s5-2 actor)
                'marauders
                uint128
                :default (the-as uint128 3)
                :time -1000000000.0
                )
              )
            (v1-47 (the int (* 300.0 (res-lump-float (-> this actor-group 0 data s5-2 actor) 'timeout :default 45.0))))
            )
        (set! (-> *bbush-passenger-pos* s5-2 num-marauders) (the-as int s4-0))
        (set! (-> *bbush-passenger-pos* s5-2 total-time) (the-as time-frame v1-47))
        )
      (set! (-> *bbush-passenger-pos* s5-2 sandstorm-intensity)
            (* 0.5 (/ (the float (+ s5-2 1)) (the float (-> this actor-group 0 length))))
            )
      )
    (set! (-> this passenger-pos length) (-> this actor-group 0 length))
    (set! (-> this passenger-pos) *bbush-passenger-pos*)
    )
  (let ((a0-41 (entity-by-name "desresc-bbush-info-1")))
    (if a0-41
        (set! (-> this final-timeout)
              (the-as time-frame (the int (* 300.0 (res-lump-float a0-41 'timeout :default 60.0))))
              )
        )
    )
  ((method-of-type task-manager set-time-limit) this)
  (dotimes (gp-1 3)
    (speeches-reset (-> *rescue-speech-array* gp-1))
    )
  (set-setting! 'extra-bank '((desert2 desresc1)) 0.0 0)
  (none)
  )

;; failed to figure out what this is:
(defstate active (task-manager-desert-rescue-bbush)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type task-manager active) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self entity) #f)
    (dotimes (v1-4 (-> self passenger-pos length))
      (if (-> self passenger-pos v1-4 is-final?)
          (set! (-> self current-passenger-index) v1-4)
          )
      )
    (set-setting! 'fog-special-interp-targ #f 0.2 0)
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (task-manager-desert-rescue-method-49 self)
    (when (= (status-of-level-and-borrows *level* 'desert #f) 'active)
      (send-event (handle->process (-> *game-info* dust-storm)) 'set-intensity #x3e4ccccd)
      (when (and *target* (focus-test? *target* pilot-riding))
        (set! (-> self jak-vehicle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
        (when (handle->process (-> self jak-vehicle))
          (send-event (handle->process (-> self jak-vehicle)) 'scale-max-hit-points #x3fa66666)
          (go-virtual rescue-start)
          )
        )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate drop-off-passenger (task-manager-desert-rescue-bbush)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('dropped-off)
       (task-manager-desert-rescue-method-45 self 2)
       (+! (-> self current-passenger-index) 1)
       (send-event (handle->process (-> self current-task-arrow)) 'leave)
       (if (= (-> self current-passenger-index) (-> self passenger-pos length))
           (go-virtual show-finish)
           (go-virtual pickup-passenger)
           )
       )
      (else
        (task-manager-event-handler proc argc message block)
        )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate show-finish (task-manager-desert-rescue-bbush)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (let ((a0-1 (entity-by-name "des-burning-bush-40")))
      (when a0-1
        (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
          (set! (-> gp-0 pos quad) (-> a0-1 extra trans quad))
          (quaternion-identity! (-> gp-0 quat))
          (set! (-> gp-0 flags) (task-arrow-flags))
          (set! (-> gp-0 map-icon) (the-as uint 13))
          (logior! (-> gp-0 flags) (task-arrow-flags taf3))
          (set! (-> self current-task-arrow) (process->handle (task-arrow-spawn gp-0 self)))
          )
        )
      )
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (let ((v1-0 (entity-by-name "des-burning-bush-40")))
      (when v1-0
        (let ((s5-0 (-> v1-0 extra trans)))
          (if (< (vector-vector-xz-distance (target-pos 0) s5-0) 163840.0)
              (go-virtual finish-bbush)
              )
          )
        )
      )
    (set! (-> *game-info* timer) (- (-> self final-timeout) (- (current-time) (-> self state-time))))
    (if (< (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate finish-bbush (task-manager-desert-rescue-bbush)
  :virtual #t
  :event task-manager-event-handler
  :code (behavior ()
    (give *game-info* 'skill (the float (-> self info user-count)) (the-as handle #f))
    (until (< (* 45 (-> self info user-count)) (- (current-time) (-> self state-time)))
      (suspend)
      )
    (send-event self 'complete)
    (sleep-code)
    )
  )

;; failed to figure out what this is:
(defstate pickup-passenger (task-manager-desert-rescue-bbush)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self current-passenger) (the-as handle #f))
    (task-manager-desert-rescue-method-42 self)
    (set-time! (-> self taxi-timer))
    (let ((v1-6 *was-squad-control*))
      (set! (-> v1-6 target-count) (-> self passenger-pos (-> self current-passenger-index) num-marauders))
      )
    )
  )

;; definition for method 49 of type task-manager-desert-rescue
;; WARN: Return type mismatch connection vs none.
(defmethod task-manager-desert-rescue-method-49 ((this task-manager-desert-rescue))
  (set-setting! 'music 'desresbb 0.0 0)
  (none)
  )




