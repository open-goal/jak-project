;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *desert-rescue-speech-list*, type (inline-array talker-speech-class)
(define *desert-rescue-speech-list* (new 'static 'inline-array talker-speech-class 85
                                      (new 'static 'talker-speech-class :name "none")
                                      (new 'static 'talker-speech-class
                                        :name "resc101"
                                        :channel (gui-channel citizen)
                                        :speech #x1
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc102"
                                        :channel (gui-channel citizen)
                                        :speech #x2
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc103"
                                        :channel (gui-channel citizen)
                                        :speech #x3
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc104"
                                        :channel (gui-channel citizen)
                                        :speech #x4
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc105"
                                        :channel (gui-channel citizen)
                                        :speech #x5
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc106"
                                        :channel (gui-channel citizen)
                                        :speech #x6
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc107"
                                        :channel (gui-channel citizen)
                                        :speech #x7
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc108"
                                        :channel (gui-channel citizen)
                                        :speech #x8
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc109"
                                        :channel (gui-channel citizen)
                                        :speech #x9
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc110"
                                        :channel (gui-channel citizen)
                                        :speech #xa
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc111"
                                        :channel (gui-channel citizen)
                                        :speech #xb
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc112"
                                        :channel (gui-channel citizen)
                                        :speech #xc
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc113"
                                        :channel (gui-channel citizen)
                                        :speech #xd
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc114"
                                        :channel (gui-channel citizen)
                                        :speech #xe
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc115"
                                        :channel (gui-channel citizen)
                                        :speech #xf
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc116"
                                        :channel (gui-channel citizen)
                                        :speech #x10
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc117"
                                        :channel (gui-channel citizen)
                                        :speech #x11
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc118"
                                        :channel (gui-channel citizen)
                                        :speech #x12
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc119"
                                        :channel (gui-channel citizen)
                                        :speech #x13
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc120"
                                        :channel (gui-channel citizen)
                                        :speech #x14
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc121"
                                        :channel (gui-channel citizen)
                                        :speech #x15
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc122"
                                        :channel (gui-channel citizen)
                                        :speech #x16
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc123"
                                        :channel (gui-channel citizen)
                                        :speech #x17
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc124"
                                        :channel (gui-channel citizen)
                                        :speech #x18
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc125"
                                        :channel (gui-channel citizen)
                                        :speech #x19
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc126"
                                        :channel (gui-channel citizen)
                                        :speech #x1a
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc127"
                                        :channel (gui-channel citizen)
                                        :speech #x1b
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc101a"
                                        :channel (gui-channel citizen)
                                        :speech #x1c
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc102a"
                                        :channel (gui-channel citizen)
                                        :speech #x1d
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc103a"
                                        :channel (gui-channel citizen)
                                        :speech #x1e
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc104a"
                                        :channel (gui-channel citizen)
                                        :speech #x1f
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc105a"
                                        :channel (gui-channel citizen)
                                        :speech #x20
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc106a"
                                        :channel (gui-channel citizen)
                                        :speech #x21
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc107a"
                                        :channel (gui-channel citizen)
                                        :speech #x22
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc108a"
                                        :channel (gui-channel citizen)
                                        :speech #x23
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc109a"
                                        :channel (gui-channel citizen)
                                        :speech #x24
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc110a"
                                        :channel (gui-channel citizen)
                                        :speech #x25
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc111a"
                                        :channel (gui-channel citizen)
                                        :speech #x26
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc112a"
                                        :channel (gui-channel citizen)
                                        :speech #x27
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc113a"
                                        :channel (gui-channel citizen)
                                        :speech #x28
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc114a"
                                        :channel (gui-channel citizen)
                                        :speech #x29
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc115a"
                                        :channel (gui-channel citizen)
                                        :speech #x2a
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc116a"
                                        :channel (gui-channel citizen)
                                        :speech #x2b
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc117a"
                                        :channel (gui-channel citizen)
                                        :speech #x2c
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc118a"
                                        :channel (gui-channel citizen)
                                        :speech #x2d
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc119a"
                                        :channel (gui-channel citizen)
                                        :speech #x2e
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc120a"
                                        :channel (gui-channel citizen)
                                        :speech #x2f
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc121a"
                                        :channel (gui-channel citizen)
                                        :speech #x30
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc122a"
                                        :channel (gui-channel citizen)
                                        :speech #x31
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc123a"
                                        :channel (gui-channel citizen)
                                        :speech #x32
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc124a"
                                        :channel (gui-channel citizen)
                                        :speech #x33
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc125a"
                                        :channel (gui-channel citizen)
                                        :speech #x34
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc126a"
                                        :channel (gui-channel citizen)
                                        :speech #x35
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc127a"
                                        :channel (gui-channel citizen)
                                        :speech #x36
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc101b"
                                        :channel (gui-channel citizen)
                                        :speech #x37
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc102b"
                                        :channel (gui-channel citizen)
                                        :speech #x38
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc103b"
                                        :channel (gui-channel citizen)
                                        :speech #x39
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc104b"
                                        :channel (gui-channel citizen)
                                        :speech #x3a
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc105b"
                                        :channel (gui-channel citizen)
                                        :speech #x3b
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc106b"
                                        :channel (gui-channel citizen)
                                        :speech #x3c
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc107b"
                                        :channel (gui-channel citizen)
                                        :speech #x3d
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc108b"
                                        :channel (gui-channel citizen)
                                        :speech #x3e
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc109b"
                                        :channel (gui-channel citizen)
                                        :speech #x3f
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc110b"
                                        :channel (gui-channel citizen)
                                        :speech #x40
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc111b"
                                        :channel (gui-channel citizen)
                                        :speech #x41
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc112b"
                                        :channel (gui-channel citizen)
                                        :speech #x42
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc113b"
                                        :channel (gui-channel citizen)
                                        :speech #x43
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc114b"
                                        :channel (gui-channel citizen)
                                        :speech #x44
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc115b"
                                        :channel (gui-channel citizen)
                                        :speech #x45
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc116b"
                                        :channel (gui-channel citizen)
                                        :speech #x46
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc117b"
                                        :channel (gui-channel citizen)
                                        :speech #x47
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc118b"
                                        :channel (gui-channel citizen)
                                        :speech #x48
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc119b"
                                        :channel (gui-channel citizen)
                                        :speech #x49
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc120b"
                                        :channel (gui-channel citizen)
                                        :speech #x4a
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc121b"
                                        :channel (gui-channel citizen)
                                        :speech #x4b
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc122b"
                                        :channel (gui-channel citizen)
                                        :speech #x4c
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc123b"
                                        :channel (gui-channel citizen)
                                        :speech #x4d
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc124b"
                                        :channel (gui-channel citizen)
                                        :speech #x4e
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc125b"
                                        :channel (gui-channel citizen)
                                        :speech #x4f
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc126b"
                                        :channel (gui-channel citizen)
                                        :speech #x50
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "resc127b"
                                        :channel (gui-channel citizen)
                                        :speech #x51
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "dax232"
                                        :channel (gui-channel daxter)
                                        :speech #x52
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "dax198"
                                        :channel (gui-channel daxter)
                                        :speech #x53
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      (new 'static 'talker-speech-class
                                        :name "dax128"
                                        :channel (gui-channel daxter)
                                        :speech #x54
                                        :text-duration (seconds 1)
                                        :neg #x1
                                        :on-close #f
                                        :camera #f
                                        )
                                      )
        )

;; definition of type rescue-speech-instance
(deftype rescue-speech-instance (speech-instance)
  ()
  )

;; definition for method 3 of type rescue-speech-instance
(defmethod inspect ((this rescue-speech-instance))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rescue-speech-instance)
  (format #t "~1Tspeech: ~D~%" (-> this speech))
  (format #t "~1Tnum-play-times: ~D~%" (-> this num-play-times))
  (format #t "~1Tprobability: ~f~%" (-> this probability))
  (label cfg-4)
  this
  )

;; definition of type desert-rescue-transport-init-params
(deftype desert-rescue-transport-init-params (structure)
  ((pos           vector      :inline)
   (quat          quaternion  :inline)
   (path-pts      (inline-array vector))
   (num-pts       int32)
   (desresc-path  (array desert-transport-node))
   )
  )

;; definition for method 3 of type desert-rescue-transport-init-params
(defmethod inspect ((this desert-rescue-transport-init-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'desert-rescue-transport-init-params)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tquat: #<quaternion @ #x~X>~%" (-> this quat))
  (format #t "~1Tpath-pts: #x~X~%" (-> this path-pts))
  (format #t "~1Tnum-pts: ~D~%" (-> this num-pts))
  (format #t "~1Tdesresc-path: ~A~%" (-> this desresc-path))
  (label cfg-4)
  this
  )

;; definition of type desert-passenger-info
(deftype desert-passenger-info (structure)
  ((passenger-pos        vector  :inline)
   (beacon-pos           vector  :inline)
   (transport-angle      float)
   (is-final?            symbol)
   (total-time           time-frame)
   (num-marauders        int8)
   (sandstorm-intensity  float)
   )
  )

;; definition for method 3 of type desert-passenger-info
(defmethod inspect ((this desert-passenger-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'desert-passenger-info)
  (format #t "~1Tpassenger-pos: #<vector @ #x~X>~%" (-> this passenger-pos))
  (format #t "~1Tbeacon-pos: #<vector @ #x~X>~%" (-> this beacon-pos))
  (format #t "~1Ttransport-angle: ~f~%" (-> this transport-angle))
  (format #t "~1Tis-final?: ~A~%" (-> this is-final?))
  (format #t "~1Ttotal-time: ~D~%" (-> this total-time))
  (format #t "~1Tnum-marauders: ~D~%" (-> this num-marauders))
  (format #t "~1Tsandstorm-intensity: ~f~%" (-> this sandstorm-intensity))
  (label cfg-4)
  this
  )

;; definition of type task-manager-desert-rescue
(deftype task-manager-desert-rescue (task-manager)
  ((current-passenger-index  int8)
   (current-passenger        handle)
   (current-task-arrow       handle)
   (current-transport        handle)
   (taxi-timer               time-frame)
   (num-enemies-remaining    int8  :offset 288)
   (current-enemy            handle)
   (jak-vehicle              handle)
   (dust-storm               handle)
   (passenger-pos            (array desert-passenger-info))
   (desresc-path             (array desert-transport-node))
   )
  (:state-methods
    pickup-passenger
    drop-off-passenger
    finish-task
    fight
    race-home
    rescue-start
    play-dead-wlander-movie
    wait-for-vehicle-return
    investigate-dead-wlander
    fail-delay
    )
  (:methods
    (task-manager-desert-rescue-method-42 (_type_) none)
    (spawn-sat (_type_) none)
    (task-manager-desert-rescue-method-44 (_type_) none)
    (task-manager-desert-rescue-method-45 (_type_ int) none)
    (init-transport-params! (_type_ desert-rescue-transport-init-params) none)
    (task-manager-desert-rescue-method-47 (_type_) time-frame)
    (task-manager-desert-rescue-method-48 (_type_) float)
    (task-manager-desert-rescue-method-49 (_type_) none)
    )
  )

;; definition for method 3 of type task-manager-desert-rescue
(defmethod inspect ((this task-manager-desert-rescue))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type task-manager inspect)))
    (t9-0 this)
    )
  (format #t "~2Tcurrent-passenger-index: ~D~%" (-> this current-passenger-index))
  (format #t "~2Tcurrent-passenger: ~D~%" (-> this current-passenger))
  (format #t "~2Tcurrent-task-arrow: ~D~%" (-> this current-task-arrow))
  (format #t "~2Tcurrent-transport: ~D~%" (-> this current-transport))
  (format #t "~2Ttaxi-timer: ~D~%" (-> this taxi-timer))
  (format #t "~2Thud-timer: ~D~%" (-> this hud-timer))
  (format #t "~2Tnum-enemies-remaining: ~D~%" (-> this num-enemies-remaining))
  (format #t "~2Tcurrent-enemy: ~D~%" (-> this current-enemy))
  (format #t "~2Tjak-vehicle: ~D~%" (-> this jak-vehicle))
  (format #t "~2Tdust-storm: ~D~%" (-> this dust-storm))
  (format #t "~2Tpassenger-pos: ~A~%" (-> this passenger-pos))
  (format #t "~2Tdesresc-path: ~A~%" (-> this desresc-path))
  (label cfg-4)
  this
  )

;; definition for symbol *rescue-speech*, type (array speech-info)
(define *rescue-speech*
  (new 'static 'boxed-array :type speech-info :length 7 :allocated-length 8
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x1 :probability 1.0)
        (new 'static 'speech-instance :speech #x2 :probability 1.0)
        (new 'static 'speech-instance :speech #x3 :probability 1.0)
        (new 'static 'speech-instance :speech #x4 :probability 1.0)
        (new 'static 'speech-instance :speech #x5 :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x6 :probability 1.0)
        (new 'static 'speech-instance :speech #x7 :probability 1.0)
        (new 'static 'speech-instance :speech #x8 :probability 1.0)
        (new 'static 'speech-instance :speech #xe :probability 1.0)
        (new 'static 'speech-instance :speech #xf :probability 1.0)
        (new 'static 'speech-instance :speech #x10 :probability 1.0)
        (new 'static 'speech-instance :speech #x11 :probability 1.0)
        (new 'static 'speech-instance :speech #x12 :probability 1.0)
        (new 'static 'speech-instance :speech #x13 :probability 1.0)
        (new 'static 'speech-instance :speech #x14 :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x9 :probability 1.0)
        (new 'static 'speech-instance :speech #xa :probability 1.0)
        (new 'static 'speech-instance :speech #xb :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #x15 :probability 1.0)
        (new 'static 'speech-instance :speech #x16 :probability 1.0)
        (new 'static 'speech-instance :speech #x17 :probability 1.0)
        (new 'static 'speech-instance :speech #xd :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance
        (new 'static 'speech-instance :speech #xc :probability 1.0)
        (new 'static 'speech-instance :speech #x18 :probability 1.0)
        (new 'static 'speech-instance :speech #x19 :probability 1.0)
        (new 'static 'speech-instance :speech #x1a :probability 1.0)
        (new 'static 'speech-instance :speech #x1b :probability 1.0)
        )
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x52 :probability 1.0))
      )
    (new 'static 'speech-info
      :speeches (new 'static 'boxed-array :type speech-instance (new 'static 'speech-instance :speech #x53 :probability 1.0))
      )
    )
  )

;; definition for symbol *rescue-speech-1*, type (array speech-info)
(define *rescue-speech-1*
  (new 'static 'boxed-array :type speech-info :length 5 :allocated-length 8
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x1c :probability 1.0)
                                          (new 'static 'speech-instance :speech #x1d :probability 1.0)
                                          (new 'static 'speech-instance :speech #x1e :probability 1.0)
                                          (new 'static 'speech-instance :speech #x1f :probability 1.0)
                                          (new 'static 'speech-instance :speech #x20 :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x21 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x22 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x23 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x29 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x2a :probability 1.0)
                                          (new 'static 'speech-instance :speech #x2b :probability 1.0)
                                          (new 'static 'speech-instance :speech #x2c :probability 1.0)
                                          (new 'static 'speech-instance :speech #x2d :probability 1.0)
                                          (new 'static 'speech-instance :speech #x2e :probability 1.0)
                                          (new 'static 'speech-instance :speech #x2f :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x24 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x25 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x26 :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x30 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x31 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x32 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x28 :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x27 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x33 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x34 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x35 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x36 :probability 1.0)
                                          )
                              )
    )
  )

;; definition for symbol *rescue-speech-2*, type (array speech-info)
(define *rescue-speech-2*
  (new 'static 'boxed-array :type speech-info :length 5 :allocated-length 8
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x37 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x38 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x39 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x3a :probability 1.0)
                                          (new 'static 'speech-instance :speech #x3b :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x3c :probability 1.0)
                                          (new 'static 'speech-instance :speech #x3d :probability 1.0)
                                          (new 'static 'speech-instance :speech #x3e :probability 1.0)
                                          (new 'static 'speech-instance :speech #x44 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x45 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x46 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x47 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x48 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x49 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x4a :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x3f :probability 1.0)
                                          (new 'static 'speech-instance :speech #x40 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x41 :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x4b :probability 1.0)
                                          (new 'static 'speech-instance :speech #x4c :probability 1.0)
                                          (new 'static 'speech-instance :speech #x4d :probability 1.0)
                                          (new 'static 'speech-instance :speech #x43 :probability 1.0)
                                          )
                              )
    (new 'static 'speech-info :speeches (new 'static 'boxed-array :type speech-instance
                                          (new 'static 'speech-instance :speech #x42 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x4e :probability 1.0)
                                          (new 'static 'speech-instance :speech #x4f :probability 1.0)
                                          (new 'static 'speech-instance :speech #x50 :probability 1.0)
                                          (new 'static 'speech-instance :speech #x51 :probability 1.0)
                                          )
                              )
    )
  )

;; definition for symbol *rescue-speech-array*, type (array (array speech-info))
(define *rescue-speech-array*
  (the-as (array (array speech-info)) (new 'static 'boxed-array :type array :length 0 :allocated-length 3))
  )

;; failed to figure out what this is:
(set! (-> *rescue-speech-array* 0) *rescue-speech*)

;; failed to figure out what this is:
(set! (-> *rescue-speech-array* 1) *rescue-speech-1*)

;; failed to figure out what this is:
(set! (-> *rescue-speech-array* 2) *rescue-speech-2*)

;; definition for symbol *duststorm-gate-pos*, type vector
(define *duststorm-gate-pos* (new 'static 'vector :x 9175730.0 :y 130316.695 :z 1006544.06 :w 1.0))

;; definition for symbol *duststorm-wind-angle*, type float
(define *duststorm-wind-angle* 14563.556)

;; definition for symbol *home-pos*, type vector
(define *home-pos* (new 'static 'vector :x 9258721.0 :y 125009.92 :z 787988.5 :w 1.0))

;; definition for symbol *snake-start-pos*, type vector
(define *snake-start-pos* (new 'static 'vector :x 2217369.5 :y 103464.96 :z 10151731.0 :w 1.0))

;; definition for symbol *snake-start-angle*, type float
(define *snake-start-angle* 1820.4445)

;; definition for symbol *passenger-pos*, type (array desert-passenger-info)
(define *passenger-pos* (new 'static 'boxed-array :type desert-passenger-info
                          (new 'static 'desert-passenger-info
                            :passenger-pos (new 'static 'vector :x 3470704.8 :y 275742.72 :z 5098496.0 :w 1.0)
                            :beacon-pos (new 'static 'vector :x 5855805.5 :y 107233.28 :z 8262902.0 :w 1.0)
                            :is-final? #f
                            :total-time (seconds 100)
                            :num-marauders 1
                            :sandstorm-intensity 0.3
                            )
                          (new 'static 'desert-passenger-info
                            :passenger-pos (new 'static 'vector :x 1681981.5 :y 102400.0 :z 7980359.5 :w 1.0)
                            :beacon-pos (new 'static 'vector :x 5408399.5 :y 82821.12 :z 7242465.5 :w 1.0)
                            :is-final? #f
                            :total-time (seconds 90)
                            :num-marauders 2
                            :sandstorm-intensity 0.5
                            )
                          (new 'static 'desert-passenger-info
                            :passenger-pos (new 'static 'vector :x 2482667.5 :y 389038.1 :z 6811853.0 :w 1.0)
                            :beacon-pos (new 'static 'vector :x 6194995.0 :y 87859.2 :z 4850729.0 :w 1.0)
                            :is-final? #f
                            :total-time (seconds 90)
                            :num-marauders 3
                            :sandstorm-intensity 0.7
                            )
                          (new 'static 'desert-passenger-info
                            :passenger-pos (new 'static 'vector :x 2281472.0 :y 86135.195 :z 10281697.0 :w 1.0)
                            :beacon-pos (new 'static 'vector :x 2383872.0 :y 61559.195 :z 10273505.0 :w 1.0)
                            :is-final? #t
                            :total-time (seconds 260)
                            :sandstorm-intensity 1.0
                            )
                          )
        )

;; definition of type transport-path-control
(deftype transport-path-control (path-control)
  ()
  (:methods
    (new (symbol type process-drawable (inline-array vector) int) _type_)
    )
  )

;; definition for method 3 of type transport-path-control
(defmethod inspect ((this transport-path-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tflags: #x~X~%" (-> this flags))
  (format #t "~1Tname: ~A~%" (-> this name))
  (format #t "~1Tprocess: ~A~%" (-> this process))
  (format #t "~1Tcurve: #<curve @ #x~X>~%" (-> this curve))
  (format #t "~1Tnum-cverts: ~D~%" (-> this curve num-cverts))
  (format #t "~1Tcverts: #x~X~%" (-> this curve cverts))
  (label cfg-4)
  this
  )

;; definition for symbol *__transport-path__*, type (inline-array vector)
(define *__transport-path__* (new 'static 'inline-array vector 50
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               (new 'static 'vector)
                               )
        )

;; failed to figure out what this is:
(dotimes (v1-20 (-> *desresc-transport-path-0* length))
  (set! (-> *__transport-path__* v1-20 quad) (-> *desresc-transport-path-0* v1-20 pos quad))
  )

;; definition for method 0 of type transport-path-control
(defmethod new transport-path-control ((allocation symbol) (type-to-make type) (arg0 process-drawable) (arg1 (inline-array vector)) (arg2 int))
  0
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 process) arg0)
    (set! (-> v0-0 name) #f)
    (set! (-> v0-0 curve num-cverts) arg2)
    (set! (-> v0-0 curve cverts) arg1)
    v0-0
    )
  )

;; definition for method 19 of type transport-path-control
(defmethod get-num-verts ((this transport-path-control))
  (-> this curve num-cverts)
  )

;; failed to figure out what this is:
(if (or (zero? *transport-tread-settings*) (!= loading-level global))
    (set! *transport-tread-settings* (new 'loading-level 'light-trail-composition))
    )

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* color-mode) (the-as uint 3))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* color-repeat-dist) 73728.0)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* alpha-1-mode) (the-as uint 0))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* alpha-2-mode) (the-as uint 6))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* base-alpha) 0.2)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* alpha-repeat-dist) 12288.0)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* width-mode) (the-as uint 0))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* base-width) 12288.0)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* width-repeat-dist) 4096.0)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* uv-mode) (the-as uint 3))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* uv-repeat-dist) 20480.0)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* lie-mode) (the-as uint 0))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* max-age) (seconds 20))

;; failed to figure out what this is:
(if "tread-marks"
    (set! (-> *transport-tread-settings* tex-id)
          (the-as uint (lookup-texture-id-by-name "tread-marks" (the-as string #f)))
          )
    (set! (-> *transport-tread-settings* tex-id) (the-as uint #x100300))
    )

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* width-curve) (the-as curve2d-piecewise *curve-unity*))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* color-curve) (the-as curve-color-piecewise *trail-color-curve-white*))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* alpha-curve-1) (the-as curve2d-piecewise *curve-linear-down*))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* alpha-curve-2) #f)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* zbuffer?) #f)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* lie-vector quad) (-> *up-vector* quad))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* use-tape-mode?) #f)

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* blend-mode) (the-as uint 2))

;; failed to figure out what this is:
(set! (-> *transport-tread-settings* frame-stagger) (the-as uint 5))

;; definition of type desert-rescue-transport
(deftype desert-rescue-transport (process-focusable)
  ((pitch                    float)
   (target-pitch             float)
   (down-force               float)
   (ground-offset            float)
   (offset-dist              float)
   (angular-speed            float)
   (path-t                   float)
   (current-node-index       int16)
   (current-stop-node-index  int16)
   (move-speed               float)
   (target-move-speed        float)
   (has-passenger?           symbol)
   (seek-speed               float)
   (is-braking?              symbol)
   (teleport-when-ready?     symbol)
   (die-when-ready?          symbol)
   (is-last-passenger?       symbol)
   (tread1                   handle)
   (tread2                   handle)
   (tread-frequency          uint8)
   (tread-last-spawn-index   uint8)
   (desresc-path             (array desert-transport-node))
   (can-board?               symbol)
   )
  (:state-methods
    undefined0
    die
    undefined1
    following-path
    waiting-for-passenger
    preparing-for-launch
    )
  (:methods
    (desert-rescue-transport-method-34 (_type_) float)
    (probe-ground (_type_ vector) float)
    (get-node-stop-idx (_type_) int)
    (desert-rescue-transport-method-37 (_type_ int int) quaternion)
    (desert-rescue-transport-method-38 (_type_) quaternion)
    (desert-rescue-transport-method-39 (_type_) quaternion)
    (desert-rescue-transport-method-40 (_type_) none)
    (desert-rescue-transport-method-41 (_type_) none)
    (probe-ground2 (_type_ vector vector) float)
    (desert-rescue-transport-method-43 (_type_) none)
    (desert-rescue-transport-method-44 (_type_) symbol)
    (desert-rescue-transport-method-45 (_type_) symbol)
    )
  (:states
    hidden-idle
    idle-hidden
    )
  )

;; definition for method 3 of type desert-rescue-transport
(defmethod inspect ((this desert-rescue-transport))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tpitch: ~f~%" (-> this pitch))
  (format #t "~2Ttarget-pitch: ~f~%" (-> this target-pitch))
  (format #t "~2Tdown-force: ~f~%" (-> this down-force))
  (format #t "~2Tground-offset: ~f~%" (-> this ground-offset))
  (format #t "~2Toffset-dist: ~f~%" (-> this offset-dist))
  (format #t "~2Tangular-speed: ~f~%" (-> this angular-speed))
  (format #t "~2Tpath-t: ~f~%" (-> this path-t))
  (format #t "~2Tcurrent-node-index: ~D~%" (-> this current-node-index))
  (format #t "~2Tcurrent-stop-node-index: ~D~%" (-> this current-stop-node-index))
  (format #t "~2Tmove-speed: ~f~%" (-> this move-speed))
  (format #t "~2Ttarget-move-speed: ~f~%" (-> this target-move-speed))
  (format #t "~2Thas-passenger?: ~A~%" (-> this has-passenger?))
  (format #t "~2Tseek-speed: ~f~%" (-> this seek-speed))
  (format #t "~2Tis-braking?: ~A~%" (-> this is-braking?))
  (format #t "~2Tteleport-when-ready?: ~A~%" (-> this teleport-when-ready?))
  (format #t "~2Tdie-when-ready?: ~A~%" (-> this die-when-ready?))
  (format #t "~2Tis-last-passenger?: ~A~%" (-> this is-last-passenger?))
  (format #t "~2Ttread1: ~D~%" (-> this tread1))
  (format #t "~2Ttread2: ~D~%" (-> this tread2))
  (format #t "~2Ttread-frequency: ~D~%" (-> this tread-frequency))
  (format #t "~2Ttread-last-spawn-index: ~D~%" (-> this tread-last-spawn-index))
  (format #t "~2Tdesresc-path: ~A~%" (-> this desresc-path))
  (format #t "~2Tcan-board?: ~A~%" (-> this can-board?))
  (label cfg-4)
  this
  )

;; definition for symbol *replace-last*, type object
(define *replace-last* (the-as object 0))

;; definition for symbol *frequency*, type int
(define *frequency* 10)

;; definition for method 43 of type desert-rescue-transport
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod desert-rescue-transport-method-43 ((this desert-rescue-transport))
  (let ((s2-0 (new 'stack-no-clear 'vector)))
    (set! (-> s2-0 quad) (-> this root trans quad))
    (let ((v1-4 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> this root quat)))
          (s3-0 (new 'stack-no-clear 'vector))
          (s5-0 (new 'stack-no-clear 'vector))
          (s4-0 (new 'stack-no-clear 'vector))
          )
      (set! (-> this tread-frequency) (the-as uint 10))
      (vector+float*! s2-0 s2-0 (-> v1-4 fvec) -27852.8)
      (vector+float*! s3-0 s2-0 (-> v1-4 rvec) -14131.2)
      (vector+float*! s5-0 s2-0 (-> v1-4 rvec) 14131.2)
      (set! (-> *transport-tread-settings* tex-id)
            (the-as uint (lookup-texture-id-by-name "tread-marks" (the-as string #f)))
            )
      (set! (-> s3-0 y) (probe-ground2 this s3-0 s4-0))
      (+! (-> s3-0 y) 409.6)
      (let ((v1-11 (the-as tread-trail-tracker (handle->process (-> this tread1)))))
        (if (zero? (mod (-> this tread-last-spawn-index) (-> this tread-frequency)))
            (tread-trail-method-22 (-> v1-11 trail) s3-0 s4-0)
            (tread-trail-method-23 (-> v1-11 trail) s3-0 s4-0)
            )
        )
      (set! (-> s5-0 y) (probe-ground2 this s5-0 s4-0))
      (+! (-> s5-0 y) 409.6)
      (let ((v1-21 (the-as tread-trail-tracker (handle->process (-> this tread2)))))
        (if (zero? (mod (-> this tread-last-spawn-index) (-> this tread-frequency)))
            (tread-trail-method-22 (-> v1-21 trail) s5-0 s4-0)
            (tread-trail-method-23 (-> v1-21 trail) s5-0 s4-0)
            )
        )
      )
    )
  (+! (-> this tread-last-spawn-index) 1)
  0
  (none)
  )

;; definition for method 42 of type desert-rescue-transport
;; INFO: Used lq/sq
(defmethod probe-ground2 ((this desert-rescue-transport) (arg0 vector) (arg1 vector))
  (let ((gp-0 (new 'stack-no-clear 'collide-query)))
    (vector+float*! (-> gp-0 start-pos) arg0 *up-vector* 24576.0)
    (set! (-> gp-0 move-dist quad) (the-as uint128 0))
    (set! (-> gp-0 move-dist y) -81920.0)
    (let ((v1-4 gp-0))
      (set! (-> v1-4 radius) 40.96)
      (set! (-> v1-4 collide-with) (collide-spec backgnd))
      (set! (-> v1-4 ignore-process0) #f)
      (set! (-> v1-4 ignore-process1) #f)
      (set! (-> v1-4 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-4 action-mask) (collide-action solid))
      )
    (cond
      ((>= (fill-and-probe-using-line-sphere *collide-cache* gp-0) 0.0)
       (set! (-> arg1 quad) (-> gp-0 best-other-tri normal quad))
       (-> gp-0 best-other-tri intersect y)
       )
      (else
        -40960000.0
        )
      )
    )
  )

;; definition for method 35 of type desert-rescue-transport
;; INFO: Used lq/sq
(defmethod probe-ground ((this desert-rescue-transport) (arg0 vector))
  (let ((gp-0 (new 'stack-no-clear 'collide-query)))
    (vector+float*! (-> gp-0 start-pos) arg0 *up-vector* 24576.0)
    (set! (-> gp-0 move-dist quad) (the-as uint128 0))
    (set! (-> gp-0 move-dist y) -81920.0)
    (let ((v1-4 gp-0))
      (set! (-> v1-4 radius) 40.96)
      (set! (-> v1-4 collide-with) (collide-spec backgnd))
      (set! (-> v1-4 ignore-process0) #f)
      (set! (-> v1-4 ignore-process1) #f)
      (set! (-> v1-4 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-4 action-mask) (collide-action solid))
      )
    (if (>= (fill-and-probe-using-line-sphere *collide-cache* gp-0) 0.0)
        (-> gp-0 best-other-tri intersect y)
        -40960000.0
        )
    )
  )

;; definition for function desert-transport-event-handler
;; WARN: Return type mismatch symbol vs object.
(defbehavior desert-transport-event-handler desert-rescue-transport ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-0 symbol))
  (case arg2
    (('passenger-pickup)
     (set! v0-0 #t)
     (set! (-> self has-passenger?) v0-0)
     v0-0
     )
    (('note-last-passenger)
     (set! v0-0 #t)
     (set! (-> self is-last-passenger?) v0-0)
     v0-0
     )
    (('die-when-ready)
     (when (-> self is-last-passenger?)
       (set! v0-0 #t)
       (set! (-> self die-when-ready?) v0-0)
       v0-0
       )
     )
    )
  )

;; definition for method 12 of type desert-rescue-transport
(defmethod run-logic? ((this desert-rescue-transport))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

;; definition for method 34 of type desert-rescue-transport
(defmethod desert-rescue-transport-method-34 ((this desert-rescue-transport))
  (let ((s3-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
        (f30-0 (-> this offset-dist))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (vector+float*! s4-0 (-> this root trans) s3-0 0.0)
    (set! (-> s3-0 y) 0.0)
    (vector-normalize! s3-0 1.0)
    (let* ((s5-1 (vector+float*! (new 'stack-no-clear 'vector) s4-0 s3-0 (* 0.5 f30-0)))
           (s2-1 (vector+float*! (new 'stack-no-clear 'vector) s4-0 s3-0 (* -0.5 f30-0)))
           (f28-0 (probe-ground this s5-1))
           (f0-6 (probe-ground this s2-1))
           )
      (set! (-> s5-1 y) f28-0)
      (set! (-> s2-1 y) f0-6)
      (let* ((f0-8 (- (+ f28-0 (-> this ground-offset)) (+ f0-6 (-> this ground-offset))))
             (f0-10 (asin (/ f0-8 f30-0)))
             )
        (set! (-> this target-pitch) (- (fmax -8192.0 (fmin 8192.0 f0-10))))
        )
      )
    )
  (let ((f0-17 (* (+ (* 15.0 (- (-> this target-pitch) (-> this pitch))) (* 2.0 (- (-> this angular-speed))))
                  (seconds-per-frame)
                  )
               )
        )
    (+! (-> this angular-speed) f0-17)
    )
  (set! (-> this pitch) (+ (-> this pitch) (* (-> this angular-speed) (seconds-per-frame))))
  )

;; failed to figure out what this is:
(defskelgroup skel-desert-rescue-transport desert-transport desert-transport-lod0-jg desert-transport-idle-ja
              ((desert-transport-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 2 -2 12.5)
              )

;; definition for function desert-rescue-transport-init-by-other
;; INFO: Used lq/sq
(defbehavior desert-rescue-transport-init-by-other desert-rescue-transport ((arg0 desert-rescue-transport-init-params))
  (stack-size-set! (-> self main-thread) 256)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self level) (level-get *level* 'desrescg))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 69632.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak hit-by-others-list player-list projectile))
      (set! (-> v1-18 prim-core action) (collide-action solid))
      (set! (-> v1-18 transform-index) 4)
      (set-vector! (-> v1-18 local-sphere) 0.0 0.0 0.0 32768.0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 0))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-20 prim-core collide-with) (collide-spec jak hit-by-others-list player-list projectile))
      (set! (-> v1-20 prim-core action) (collide-action solid))
      (set! (-> v1-20 transform-index) 3)
      (set-vector! (-> v1-20 local-sphere) 0.0 0.0 0.0 69632.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-23 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-23 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-23 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-desert-rescue-transport" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (ja :group! (-> self draw art-group data 3) :num! (identity 1.0))
  (set! (-> self desresc-path) (-> arg0 desresc-path))
  (set! (-> self path) (new 'process 'transport-path-control self (-> arg0 path-pts) (-> arg0 num-pts)))
  (set! (-> self root trans quad) (-> arg0 pos quad))
  (quaternion-copy! (-> self root quat) (-> arg0 quat))
  (set! (-> self target-pitch) 0.0)
  (set! (-> self pitch) 0.0)
  (set! (-> self ground-offset) -4096.0)
  (set! (-> self offset-dist) 49152.0)
  (set! (-> self current-node-index) -1)
  (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
  (set! (-> self current-node-index) 0)
  (desert-rescue-transport-method-37 self 0 0)
  (set! (-> self current-stop-node-index) (get-node-stop-idx self))
  (set! (-> self has-passenger?) #f)
  (set! (-> self move-speed) 40960.0)
  (set! (-> self seek-speed) 10240.0)
  (set! (-> self target-move-speed) 12288.0)
  (set! (-> self teleport-when-ready?) #f)
  (logclear! (-> self mask) (process-mask actor-pause))
  (set! (-> self die-when-ready?) #f)
  (set! (-> self is-last-passenger?) #f)
  (let ((gp-1 (new 'stack-no-clear 'light-trail-tracker-spawn-params)))
    (set! (-> gp-1 tracked-obj) (process->handle self))
    (set! (-> gp-1 max-num-crumbs) 325)
    (set! (-> gp-1 appearance) *transport-tread-settings*)
    (let* ((v1-64
             (estimate-light-trail-mem-usage
               (the-as uint (-> gp-1 max-num-crumbs))
               (the-as uint (= (-> gp-1 appearance lie-mode) 3))
               )
             )
           (s5-2 (get-process *default-dead-pool* tread-trail-tracker (+ v1-64 8192) 1))
           )
      (set! (-> self tread1)
            (process->handle (-> (when s5-2
                                   (let ((t9-16 (method-of-type process activate)))
                                     (t9-16 s5-2 self "light-trail" (the-as pointer #x70004000))
                                     )
                                   (run-now-in-process s5-2 tread-trail-tracker-init-by-other gp-1)
                                   (-> s5-2 ppointer)
                                   )
                                 0
                                 )
                             )
            )
      )
    (let* ((v1-73
             (estimate-light-trail-mem-usage
               (the-as uint (-> gp-1 max-num-crumbs))
               (the-as uint (= (-> gp-1 appearance lie-mode) 3))
               )
             )
           (s5-3 (get-process *default-dead-pool* tread-trail-tracker (+ v1-73 8192) 1))
           )
      (set! (-> self tread2)
            (process->handle (-> (when s5-3
                                   (let ((t9-20 (method-of-type process activate)))
                                     (t9-20 s5-3 self "light-trail" (the-as pointer #x70004000))
                                     )
                                   (run-now-in-process s5-3 tread-trail-tracker-init-by-other gp-1)
                                   (-> s5-3 ppointer)
                                   )
                                 0
                                 )
                             )
            )
      )
    )
  (set! (-> self tread-last-spawn-index) (the-as uint 0))
  (go-virtual following-path)
  )

;; definition for method 7 of type desert-rescue-transport
(defmethod relocate ((this desert-rescue-transport) (offset int))
  (call-parent-method this offset)
  )

;; failed to figure out what this is:
(defstate die (desert-rescue-transport)
  :virtual #t
  :code (behavior ()
    '()
    )
  )

;; definition for symbol *transport-move-speed*, type float
(define *transport-move-speed* 0.0)

;; definition for method 36 of type desert-rescue-transport
(defmethod get-node-stop-idx ((this desert-rescue-transport))
  (let ((v1-1 (+ (-> this current-node-index) 1))
        (a1-2 (+ (-> this desresc-path allocated-length) -1))
        )
    (while (>= a1-2 v1-1)
      (if (-> this desresc-path v1-1 is-stop?)
          (return v1-1)
          )
      (+! v1-1 1)
      )
    )
  -1
  )

;; definition for method 38 of type desert-rescue-transport
(defmethod desert-rescue-transport-method-38 ((this desert-rescue-transport))
  (let ((s5-0 (displacement-between-points-at-percent-normalized!
                (-> this path)
                (new 'stack-no-clear 'vector)
                (-> this path-t)
                )
              )
        )
    (set! (-> s5-0 y) 0.0)
    (vector-normalize! s5-0 1.0)
    (quaternion-look-at! (-> this root quat) s5-0 *up-vector*)
    )
  )

;; definition for method 37 of type desert-rescue-transport
(defmethod desert-rescue-transport-method-37 ((this desert-rescue-transport) (arg0 int) (arg1 int))
  (get-point-at-percent-along-path! (-> this path) (-> this root trans) (the-as float arg1) 'interp)
  (set! (-> this root trans y) (probe-ground this (-> this root trans)))
  (set! (-> this current-node-index) arg0)
  (set! (-> this path-t) (the-as float arg1))
  (desert-rescue-transport-method-38 this)
  )

;; failed to figure out what this is:
(defstate idle-hidden (desert-rescue-transport)
  :event desert-transport-event-handler
  :enter (behavior ()
    '()
    )
  :trans (behavior ()
    (if (logtest? (-> self draw status) (draw-control-status on-screen))
        (go-virtual following-path)
        )
    )
  :code sleep-code
  )

;; definition for method 39 of type desert-rescue-transport
;; INFO: Used lq/sq
(defmethod desert-rescue-transport-method-39 ((this desert-rescue-transport))
  (let* ((v1-4 (-> this desresc-path (-> this current-node-index) pos))
         (s3-1 (vector-! (new 'stack-no-clear 'vector) v1-4 (-> this root trans)))
         (s5-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
         )
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      0.0
      (set! (-> s5-0 y) 0.0)
      (vector-normalize! s5-0 1.0)
      (set! (-> s3-1 y) 0.0)
      (vector-normalize! s3-1 1.0)
      (let ((f0-4 (vector-dot s3-1 s5-0)))
        (cond
          ((>= f0-4 0.9999)
           (set! (-> s5-0 quad) (-> s3-1 quad))
           )
          (else
            (vector-cross! s4-0 s5-0 s3-1)
            (let ((f0-6 (fmin (acos f0-4) (* 5461.3335 (seconds-per-frame)))))
              (vector-rotate-around-axis! s5-0 (the-as quaternion s5-0) f0-6 s4-0)
              )
            )
          )
        )
      )
    (quaternion-look-at! (-> this root quat) s5-0 *up-vector*)
    )
  )

;; failed to figure out what this is:
(defstate preparing-for-launch (desert-rescue-transport)
  :virtual #t
  :event desert-transport-event-handler
  :code (behavior ()
    (ja-no-eval :group! (-> self draw art-group data 5) :num! (seek! max 0.5) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 0.5))
      )
    (+! (-> self current-node-index) 1)
    (set! (-> self current-stop-node-index) (get-node-stop-idx self))
    (set! (-> self target-move-speed) 20480.0)
    (go-virtual following-path)
    )
  :post transform-post
  )

;; definition for method 41 of type desert-rescue-transport
;; WARN: Return type mismatch int vs none.
(defmethod desert-rescue-transport-method-41 ((this desert-rescue-transport))
  0
  (none)
  )

;; definition for method 44 of type desert-rescue-transport
;; INFO: Used lq/sq
(defmethod desert-rescue-transport-method-44 ((this desert-rescue-transport))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (set! (-> gp-0 quad) (-> this root trans quad))
    (let ((a1-1 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> this root quat)))
          (f30-0 43008.0)
          )
      *color-green*
      (vector+float*! gp-0 gp-0 (-> a1-1 fvec) -40960.0)
      (< (vector-vector-distance (target-pos 0) gp-0) f30-0)
      )
    )
  )

;; definition for method 45 of type desert-rescue-transport
;; INFO: Used lq/sq
(defmethod desert-rescue-transport-method-45 ((this desert-rescue-transport))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (set! (-> gp-0 quad) (-> this root trans quad))
    (let ((a1-1 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> this root quat)))
          (f30-0 43008.0)
          )
      *color-green*
      (vector+float*! gp-0 gp-0 (-> a1-1 fvec) 49152.0)
      (< (vector-vector-distance (target-pos 0) gp-0) f30-0)
      )
    )
  )

;; failed to figure out what this is:
(defstate waiting-for-passenger (desert-rescue-transport)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('can-board?)
       (-> self can-board?)
       )
      (('leave)
       (go-virtual preparing-for-launch)
       )
      (else
        (desert-transport-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self teleport-when-ready?) #f)
    (set! (-> self can-board?) #f)
    )
  :trans (behavior ()
    (desert-rescue-transport-method-41 self)
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (ja-no-eval :group! (-> self draw art-group data 4) :num! (seek!) :frame-num 0.0)
    (until (= (-> self skel root-channel 0 frame-num) (the float (ja-num-frames 0)))
      (if (desert-rescue-transport-method-44 self)
          (ja :num! (seek! 0.0))
          (ja :num! (seek!))
          )
      (suspend)
      )
    (set! (-> self can-board?) #t)
    (sleep-code)
    )
  :post transform-post
  )

;; failed to figure out what this is:
(defstate hidden-idle (desert-rescue-transport)
  :event desert-transport-event-handler
  :trans (behavior ()
    (if (and (-> self die-when-ready?) (not (logtest? (-> self draw status) (draw-control-status on-screen))))
        (go-virtual die)
        )
    (let ((f0-0 (vector-vector-xz-distance (target-pos 0) (-> self desresc-path (-> self current-stop-node-index) pos)))
          )
      (when (or (logtest? (-> self draw status) (draw-control-status on-screen)) (< f0-0 1024000.0))
        0.0
        (let* ((f0-1 (* 0.0000048828124 f0-0))
               (f0-3 (fmax 1.0 (+ -2.0 f0-1)))
               )
          (set! (-> self move-speed) (/ 245760.0 f0-3))
          )
        (set! (-> self target-move-speed) (-> self move-speed))
        (go-virtual following-path)
        )
      )
    )
  :code sleep-code
  :post transform-post
  )

;; failed to figure out what this is:
(defstate following-path (desert-rescue-transport)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('passenger-pickup)
       (set! (-> self teleport-when-ready?) #t)
       (desert-transport-event-handler proc argc message block)
       )
      (('die)
       (go-virtual die)
       )
      (else
        (desert-transport-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self is-braking?) #f)
    (set! (-> self teleport-when-ready?) #f)
    (send-event (handle->process (-> self tread1)) 'reset)
    (send-event (handle->process (-> self tread2)) 'reset)
    )
  :trans (behavior ()
    (desert-rescue-transport-method-43 self)
    (if (and (-> self die-when-ready?) (not (logtest? (-> self draw status) (draw-control-status on-screen))))
        (go-virtual die)
        )
    (when (and (-> self teleport-when-ready?)
               (not (logtest? (-> self draw status) (draw-control-status on-screen)))
               (< 286720.0
                  (vector-vector-distance (-> self root trans) (-> self desresc-path (-> self current-stop-node-index) pos))
                  )
               )
      (let* ((f0-3 (/ (the float (-> self current-stop-node-index)) (the float (+ (-> self path curve num-cverts) -1))))
             (f0-4 (path-control-method-26 (-> self path) f0-3 -245760.0))
             )
        (set! (-> self teleport-when-ready?) #f)
        (desert-rescue-transport-method-37
          self
          (the int (+ 1.0 (* f0-4 (the float (+ (-> self path curve num-cverts) -1)))))
          (the-as int f0-4)
          )
        )
      (go hidden-idle)
      )
    (let ((f0-5
            (vector-vector-xz-distance (-> self root trans) (-> self desresc-path (-> self current-node-index) pos))
            )
          )
      (cond
        ((= (-> self current-node-index) (-> self current-stop-node-index))
         (when (< f0-5 81920.0)
           (when (not (-> self is-braking?))
             (set! (-> self is-braking?) #t)
             (let ((f1-6 0.5)
                   (f2-3 (-> self move-speed))
                   )
               (set! (-> self seek-speed) (/ (* f1-6 (* f2-3 f2-3)) f0-5))
               )
             )
           (set! (-> self target-move-speed) 0.0)
           )
         (if (= (-> self move-speed) 0.0)
             (go-virtual waiting-for-passenger)
             )
         )
        (else
          (if (and (< f0-5 40960.0) (< (-> self current-node-index) (+ (-> self desresc-path length) -1)))
              (+! (-> self current-node-index) 1)
              )
          )
        )
      )
    (let ((f0-9 (probe-ground self (-> self root trans))))
      (set! (-> self down-force) (- (-> self down-force) (* 204800.0 (seconds-per-frame))))
      (+! (-> self root trans y) (* (-> self down-force) (seconds-per-frame)))
      (when (< (-> self root trans y) (+ f0-9 (-> self ground-offset)))
        (set! (-> self root trans y) (+ f0-9 (-> self ground-offset)))
        (set! (-> self down-force) 0.0)
        )
      )
    (desert-rescue-transport-method-34 self)
    (cond
      ((< 4096.0 (-> self move-speed))
       (desert-rescue-transport-method-39 self)
       )
      (else
        (let ((gp-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat))))
          (set! (-> gp-0 y) 0.0)
          (vector-normalize! gp-0 1.0)
          (quaternion-look-at! (-> self root quat) gp-0 *up-vector*)
          )
        )
      )
    (let ((gp-1 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat))))
      (if (not (desert-rescue-transport-method-45 self))
          (vector+float*! (-> self root trans) (-> self root trans) gp-1 (* (-> self move-speed) (seconds-per-frame)))
          )
      )
    (seek! (-> self move-speed) (-> self target-move-speed) (* (-> self seek-speed) (seconds-per-frame)))
    (quaternion-rotate-local-x! (-> self root quat) (-> self root quat) (-> self pitch))
    )
  :code (behavior ()
    (transform-and-sleep-code)
    )
  :post transform-post
  )

;; definition for symbol *nav-mesh-aid*, type int
(define *nav-mesh-aid* #xb5d9)

;; definition for method 21 of type task-manager-desert-rescue
;; WARN: Return type mismatch (array desert-passenger-info) vs none.
(defmethod set-time-limit ((this task-manager-desert-rescue))
  (let ((t9-0 (method-of-type task-manager set-time-limit)))
    (t9-0 this)
    )
  (dotimes (s5-0 3)
    (speeches-reset (-> *rescue-speech-array* s5-0))
    )
  (set-setting! 'dust-storm-sound-scalar #f 0.9 0)
  (set-setting! 'extra-bank '((desert2 desresc1)) 0.0 0)
  (let ((t1-2 2))
    (set-setting! 'vehicles 'set (shr t1-2 32) t1-2)
    )
  (set-setting! 'goggles 'abs 1.0 0)
  (set-setting! 'scarf 'abs 1.0 0)
  (set! (-> this desresc-path) *desresc-transport-path-0*)
  (set! (-> this passenger-pos) *passenger-pos*)
  (none)
  )

;; definition for method 42 of type task-manager-desert-rescue
;; WARN: Return type mismatch int vs none.
(defmethod task-manager-desert-rescue-method-42 ((this task-manager-desert-rescue))
  (set! (-> this current-passenger)
        (ppointer->handle (spawn-wlander (-> this passenger-pos (-> this current-passenger-index)) this))
        )
  (none)
  )

;; definition for method 43 of type task-manager-desert-rescue
;; WARN: Return type mismatch int vs none.
(defmethod spawn-sat ((this task-manager-desert-rescue))
  (set! (-> this current-enemy)
        (ppointer->handle (spawn-neo-sat
                            (-> this passenger-pos (-> this current-passenger-index) beacon-pos)
                            (quaternion-identity! (new 'stack-no-clear 'quaternion))
                            this
                            )
                          )
        )
  (none)
  )

;; failed to figure out what this is:
(defstate wait (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :code (behavior ()
    (while (or (not *target*) (not *spawn-actors*) (!= (status-of-level-and-borrows *level* 'desrescg #f) 'active))
      (suspend)
      )
    (set-time-limit self)
    (go-virtual active)
    )
  )

;; failed to figure out what this is:
(defstate active (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (set! (-> self entity) #f)
    (dotimes (v1-2 (-> self passenger-pos length))
      (if (-> self passenger-pos v1-2 is-final?)
          (set! (-> self current-passenger-index) v1-2)
          )
      )
    (cond
      ((or (task-node-open? (game-task-node desert-rescue-satellite-fight))
           (task-node-closed? (game-task-node desert-rescue-satellite-fight))
           )
       (let ((f30-0 (-> self passenger-pos (+ (-> self current-passenger-index) -1) sandstorm-intensity)))
         (send-event (handle->process (-> *game-info* dust-storm)) 'set-intensity f30-0)
         (set-setting! 'fog-special-interp-targ #f f30-0 0)
         )
       )
      ((and *target* (focus-test? *target* pilot-riding))
       (set-setting! 'fog-special-interp-targ #f 0.2 0)
       )
      (else
        (set-setting! 'fog-special-interp-targ #f 0.2 0)
        )
      )
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (cond
      ((task-node-open? (game-task-node desert-rescue-satellite-fight))
       (let ((gp-0 (new 'stack 'traffic-object-spawn-params)))
         (set! (-> gp-0 object-type) (traffic-type guard-a))
         (set! (-> gp-0 behavior) (the-as uint 0))
         (set! (-> gp-0 id) (the-as uint 0))
         (set! (-> gp-0 nav-mesh) #f)
         (set! (-> gp-0 nav-branch) #f)
         (set! (-> gp-0 proc) #f)
         (set! (-> gp-0 handle) (the-as handle #f))
         (set! (-> gp-0 user-data) (the-as uint 0))
         (set! (-> gp-0 flags) (traffic-spawn-flags tsf5))
         (set! (-> gp-0 guard-type) (the-as uint 11))
         (set! (-> gp-0 entity) #f)
         (vector-reset! (-> gp-0 velocity))
         (set! (-> gp-0 position quad) (-> *snake-start-pos* quad))
         (quaternion-identity! (-> gp-0 rotation))
         (quaternion-rotate-y! (-> gp-0 rotation) (-> gp-0 rotation) *snake-start-angle*)
         (set! (-> self jak-vehicle) (process->handle (vehicle-spawn (vehicle-type v-snake) gp-0)))
         )
       (set! (-> self current-transport) (the-as handle #f))
       (set! (-> self current-passenger) (the-as handle #f))
       (set! (-> self hud-timer)
             (ppointer->handle (process-spawn hud-timer :init hud-init-by-other :name "hud-timer" :to self))
             )
       (set! (-> self num-enemies-remaining) 1)
       (set! (-> self current-enemy) (the-as handle #f))
       (spawn-sat self)
       (go-virtual fight)
       )
      ((task-node-closed? (game-task-node desert-rescue-satellite-fight))
       (let ((gp-2 (new 'stack 'traffic-object-spawn-params)))
         (set! (-> gp-2 object-type) (traffic-type guard-a))
         (set! (-> gp-2 behavior) (the-as uint 0))
         (set! (-> gp-2 id) (the-as uint 0))
         (set! (-> gp-2 nav-mesh) #f)
         (set! (-> gp-2 nav-branch) #f)
         (set! (-> gp-2 proc) #f)
         (set! (-> gp-2 handle) (the-as handle #f))
         (set! (-> gp-2 user-data) (the-as uint 0))
         (set! (-> gp-2 flags) (traffic-spawn-flags tsf5))
         (set! (-> gp-2 guard-type) (the-as uint 11))
         (set! (-> gp-2 entity) #f)
         (vector-reset! (-> gp-2 velocity))
         (set! (-> gp-2 position quad) (-> *snake-start-pos* quad))
         (quaternion-identity! (-> gp-2 rotation))
         (quaternion-rotate-y! (-> gp-2 rotation) (-> gp-2 rotation) *snake-start-angle*)
         (set! (-> self jak-vehicle) (process->handle (vehicle-spawn (vehicle-type v-snake) gp-2)))
         )
       (set! (-> self current-transport) (the-as handle #f))
       (set! (-> self current-passenger) (the-as handle #f))
       (set! (-> self hud-timer)
             (ppointer->handle (process-spawn hud-timer :init hud-init-by-other :name "hud-timer" :to self))
             )
       (set! (-> self num-enemies-remaining) 0)
       (set! (-> self current-enemy) (the-as handle #f))
       (set! (-> self taxi-timer) (+ (current-time) (seconds -60)))
       (go-virtual wait-for-vehicle-return)
       )
      (else
        (task-manager-desert-rescue-method-49 self)
        (when (= (status-of-level-and-borrows *level* 'desert #f) 'active)
          (send-event (handle->process (-> *game-info* dust-storm)) 'set-intensity #x3e4ccccd)
          (when (and *target* (focus-test? *target* pilot-riding))
            (set! (-> self jak-vehicle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
            (if (handle->process (-> self jak-vehicle))
                (go-virtual rescue-start)
                )
            )
          )
        )
      )
    )
  :code sleep-code
  )

;; definition for method 49 of type task-manager-desert-rescue
;; WARN: Return type mismatch connection vs none.
(defmethod task-manager-desert-rescue-method-49 ((this task-manager-desert-rescue))
  (set-setting! 'music 'desres1 0.0 0)
  (none)
  )

;; definition for method 46 of type task-manager-desert-rescue
;; INFO: Used lq/sq
;; WARN: Return type mismatch quaternion vs none.
(defmethod init-transport-params! ((this task-manager-desert-rescue) (arg0 desert-rescue-transport-init-params))
  (set! (-> arg0 path-pts) *__transport-path__*)
  (set! (-> arg0 num-pts) (-> this desresc-path allocated-length))
  (set! (-> arg0 pos quad) (-> this desresc-path 0 pos quad))
  (set! (-> arg0 desresc-path) (-> this desresc-path))
  (quaternion-identity! (-> arg0 quat))
  (none)
  )

;; failed to figure out what this is:
(defstate rescue-start (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (set! (-> self current-passenger-index) 0)
    (set! (-> self current-transport) (the-as handle #f))
    (set! (-> self current-passenger) (the-as handle #f))
    (set! (-> self hud-timer)
          (ppointer->handle (process-spawn hud-timer :init hud-init-by-other :name "hud-timer" :to self))
          )
    (task-node-close! (game-task-node desert-rescue-post-intro) 'event)
    (let ((gp-1 (new 'stack-no-clear 'desert-rescue-transport-init-params)))
      (init-transport-params! self gp-1)
      (let ((s5-0 (get-process *default-dead-pool* desert-rescue-transport #x4000 1)))
        (set! (-> self current-transport)
              (process->handle
                (-> (when s5-0
                      (let ((t9-6 (method-of-type desert-rescue-transport activate)))
                        (t9-6 (the-as desert-rescue-transport s5-0) self "desert-rescue-transport" (the-as pointer #x70004000))
                        )
                      (run-now-in-process s5-0 desert-rescue-transport-init-by-other gp-1)
                      (-> s5-0 ppointer)
                      )
                    0
                    )
                )
              )
        )
      )
    (was-squad-manager-start self)
    (let ((v1-13 *was-squad-control*))
      (set! (-> v1-13 reserve-count) 40)
      )
    )
  :trans (behavior ()
    (go-virtual pickup-passenger)
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate race-home (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (set-setting! 'dust-storm-sound-scalar #f 1.0 0)
    (remove-setting! 'vehicles)
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (set! (-> gp-0 pos quad) (-> *home-pos* quad))
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags))
      (set! (-> gp-0 map-icon) (the-as uint 12))
      (logior! (-> gp-0 flags) (task-arrow-flags taf3))
      (set! (-> self current-task-arrow) (process->handle (task-arrow-spawn gp-0 self)))
      )
    (set-time! (-> self state-time))
    (task-node-close! (game-task-node desert-rescue-satellite-fight) 'event)
    (was-squad-manager-start self)
    (let ((v1-13 *was-squad-control*))
      (set! (-> v1-13 reserve-count) 40)
      )
    )
  :trans (behavior ()
    (local-vars (gp-1 symbol))
    ((-> (method-of-type task-manager active) trans))
    (task-manager-desert-rescue-method-44 self)
    (if (< (vector-vector-xz-distance (target-pos 0) *home-pos*) 61440.0)
        (go-virtual finish-task)
        )
    (if (or (not (handle->process (-> self jak-vehicle)))
            (begin
              (let* ((gp-2 #t)
                     (s5-0 (handle->process (-> self jak-vehicle)))
                     (v1-17 (the-as focus-status (logand (-> (the-as process-focusable (if (type? s5-0 process-focusable)
                                                                                           (the-as process-focusable s5-0)
                                                                                           )
                                                                     )
                                                             focus-status
                                                             )
                                                         (focus-status dead)
                                                         )
                                    )
                            )
                     )
                (cmove-#f-zero gp-1 v1-17 gp-2)
                )
              gp-1
              )
            )
        (send-event self 'fail)
        )
    (set! (-> *game-info* timer)
          (- (task-manager-desert-rescue-method-47 self) (- (current-time) (-> self taxi-timer)))
          )
    (let ((v1-25 *was-squad-control*))
      (when v1-25
        (cond
          ((< (-> *game-info* timer) (seconds 30))
           (set! (-> v1-25 target-count) 0)
           0
           )
          (else
            (set! (-> v1-25 target-count) 4)
            )
          )
        )
      )
    (let ((f0-1 (vector-vector-xz-distance (target-pos 0) *home-pos*)))
      (if (and (not (logtest? (-> *rescue-speech-array* 0 6 flags) (speech-info-flag si6))) (< f0-1 4096000.0))
          (speech-play (-> *rescue-speech-array* 0) 6 *desert-rescue-speech-list* (target-pos 0))
          )
      )
    (if (< (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate investigate-dead-wlander (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-setting! 'stop-vehicle? #t 0.0 0)
    )
  :exit (behavior ()
    (remove-setting! 'stop-vehicle?)
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (cond
      ((and *target* (focus-test? *target* pilot-riding) (< (vector-length (get-transv *target*)) 6144.0))
       (send-event *target* 'change-mode 'normal)
       (set-time! (-> self state-time))
       (set-setting! 'pilot #f 0.0 0)
       )
      ((and *target* (not (focus-test? *target* pilot-riding)) (time-elapsed? (-> self state-time) (seconds 1.7)))
       (go-virtual play-dead-wlander-movie)
       )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate play-dead-wlander-movie (task-manager-desert-rescue)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('hide-wlander)
       (let ((v1-2 (the-as wland-passenger (handle->process (-> self current-passenger)))))
         (when v1-2
           (let ((v0-0 (the-as object (logior (-> v1-2 draw status) (draw-control-status no-draw)))))
             (set! (-> v1-2 draw status) (the-as draw-control-status v0-0))
             v0-0
             )
           )
         )
       )
      (('spawn-enemy)
       (spawn-sat self)
       )
      (else
        (task-manager-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (cond
      (#t
        (remove-setting! 'music)
        (set! (-> self num-enemies-remaining) 1)
        (set! (-> self current-enemy) (the-as handle #f))
        (process-spawn scene-player :init scene-player-init "desert-rescue-res-a" #t #f :name "scene-player")
        )
      (else
        (task-node-close! (game-task-node desert-rescue-dead-wlander-movie) 'event)
        )
      )
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (when (task-node-closed? (game-task-node desert-rescue-dead-wlander-movie))
      (let ((v1-3 (the-as wland-passenger (handle->process (-> self current-passenger)))))
        (if v1-3
            (logclear! (-> v1-3 draw status) (draw-control-status no-draw))
            )
        )
      (go-virtual fight)
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate wait-for-vehicle-return (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (set-setting! 'music 'desres3 0.0 0)
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (let ((s5-0 (-> gp-0 pos))
            (s4-0 (handle->process (-> self jak-vehicle)))
            )
        (set! (-> s5-0 quad) (-> (get-trans
                                   (the-as process-focusable (if (type? s4-0 process-focusable)
                                                                 (the-as process-focusable s4-0)
                                                                 )
                                           )
                                   0
                                   )
                                 quad
                                 )
              )
        )
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags))
      (set! (-> gp-0 map-icon) (the-as uint 13))
      (logior! (-> gp-0 flags) (task-arrow-flags taf3))
      (set! (-> self current-task-arrow) (process->handle (task-arrow-spawn gp-0 self)))
      )
    (set-setting! 'dust-storm-sound-scalar #f 1.0 0)
    )
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    (send-event (handle->process (-> self jak-vehicle)) 'ignore-damage #f)
    (send-event (handle->process (-> self jak-vehicle)) 'ignore-impulse #f)
    (task-manager-desert-rescue-method-44 self)
    (when (and *target* (focus-test? *target* pilot-riding))
      (send-event (handle->process (-> self current-task-arrow)) 'leave)
      (go-virtual race-home)
      )
    (set! (-> *game-info* timer)
          (- (task-manager-desert-rescue-method-47 self) (- (current-time) (-> self taxi-timer)))
          )
    (if (< (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    )
  :code (behavior ()
    (until (time-elapsed? (-> self state-time) (seconds 3))
      (suspend)
      )
    (talker-spawn-func (-> *desert-rescue-speech-list* 84) *entity-pool* (target-pos 0) (the-as region #f))
    (sleep-code)
    )
  )

;; failed to figure out what this is:
(defstate fight (task-manager-desert-rescue)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('notify)
       (when (and (= (-> block param 0) 'die) (= (process->handle proc) (-> self current-enemy)))
         (+! (-> self num-enemies-remaining) -1)
         (if (zero? (-> self num-enemies-remaining))
             (go-virtual wait-for-vehicle-return)
             (spawn-sat self)
             )
         )
       )
      (else
        (task-manager-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set-setting! 'pilot #f 0.0 0)
    (when #f
      (remove-setting! 'music)
      (set! (-> self num-enemies-remaining) 1)
      (set! (-> self current-enemy) (the-as handle #f))
      (spawn-sat self)
      )
    (set-time! (-> self taxi-timer))
    (when #f
      (let ((gp-0 (new 'stack 'traffic-object-spawn-params)))
        (set! (-> gp-0 object-type) (traffic-type guard-a))
        (set! (-> gp-0 behavior) (the-as uint 0))
        (set! (-> gp-0 id) (the-as uint 0))
        (set! (-> gp-0 nav-mesh) #f)
        (set! (-> gp-0 nav-branch) #f)
        (set! (-> gp-0 proc) #f)
        (set! (-> gp-0 handle) (the-as handle #f))
        (set! (-> gp-0 user-data) (the-as uint 0))
        (set! (-> gp-0 flags) (traffic-spawn-flags tsf5))
        (set! (-> gp-0 guard-type) (the-as uint 11))
        (set! (-> gp-0 entity) #f)
        (vector-reset! (-> gp-0 velocity))
        (set! (-> gp-0 position quad) (-> *snake-start-pos* quad))
        (quaternion-identity! (-> gp-0 rotation))
        (quaternion-rotate-y! (-> gp-0 rotation) (-> gp-0 rotation) *snake-start-angle*)
        (set! (-> self jak-vehicle) (process->handle (vehicle-spawn (vehicle-type v-snake) gp-0)))
        )
      )
    (send-event (handle->process (-> self jak-vehicle)) 'ignore-damage #t)
    (send-event (handle->process (-> self jak-vehicle)) 'ignore-impulse #t)
    )
  :exit (behavior ()
    (remove-setting! 'pilot)
    )
  :trans (behavior ()
    (local-vars (gp-0 symbol))
    ((-> (method-of-type task-manager active) trans))
    (task-manager-desert-rescue-method-44 self)
    (set! (-> *game-info* timer)
          (- (task-manager-desert-rescue-method-47 self) (- (current-time) (-> self taxi-timer)))
          )
    (if (< (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    (if (or (not (handle->process (-> self jak-vehicle)))
            (begin
              (let* ((gp-1 #t)
                     (s5-0 (handle->process (-> self jak-vehicle)))
                     (v1-21 (the-as focus-status (logand (-> (the-as process-focusable (if (type? s5-0 process-focusable)
                                                                                           (the-as process-focusable s5-0)
                                                                                           )
                                                                     )
                                                             focus-status
                                                             )
                                                         (focus-status dead)
                                                         )
                                    )
                            )
                     )
                (cmove-#f-zero gp-0 v1-21 gp-1)
                )
              gp-0
              )
            )
        (send-event self 'fail)
        )
    )
  :code sleep-code
  )

;; definition for method 48 of type task-manager-desert-rescue
(defmethod task-manager-desert-rescue-method-48 ((this task-manager-desert-rescue))
  (let ((f30-0 (the-as float 0.0)))
    (when (not (task-node-closed? (game-task-node desert-rescue-rescue)))
      (let ((f0-1 (the float (-> *game-info* sub-task-list (game-task-node desert-rescue-rescue) death-count))))
        (set! f30-0 (lerp-scale-clamp 0.0 1.0 f0-1 3.0 8.0))
        )
      )
    f30-0
    )
  )

;; definition for method 47 of type task-manager-desert-rescue
;; WARN: Return type mismatch int vs time-frame.
(defmethod task-manager-desert-rescue-method-47 ((this task-manager-desert-rescue))
  (let ((gp-0 (-> this passenger-pos (-> this current-passenger-index) total-time))
        (f0-0 (task-manager-desert-rescue-method-48 this))
        )
    (the time-frame (* (the float gp-0) (lerp 1.0 2.0 f0-0)))
    )
  )

;; failed to figure out what this is:
(defstate pickup-passenger (task-manager-desert-rescue)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('fight)
       (go-virtual investigate-dead-wlander)
       )
      (('picked-up)
       (go-virtual drop-off-passenger)
       )
      (('fail-delay)
       (go-virtual fail-delay)
       )
      (else
        (task-manager-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (send-event
      (handle->process (-> self jak-vehicle))
      'scale-max-hit-points
      (lerp 1.0 2.0 (task-manager-desert-rescue-method-48 self))
      )
    (set-time! (-> self state-time))
    (set! (-> self current-passenger) (the-as handle #f))
    (task-manager-desert-rescue-method-42 self)
    (set-time! (-> self taxi-timer))
    (if (= (-> self current-passenger-index) (+ (-> self passenger-pos length) -1))
        (send-event (handle->process (-> self current-transport)) 'note-last-passenger)
        )
    (let ((v1-24 *was-squad-control*))
      (set! (-> v1-24 target-count)
            (the int (the float (-> self passenger-pos (-> self current-passenger-index) num-marauders)))
            )
      )
    )
  :trans (behavior ()
    (local-vars (gp-3 symbol))
    ((-> (method-of-type task-manager active) trans))
    (task-manager-desert-rescue-method-44 self)
    (let ((gp-0 (the-as wland-passenger (handle->process (-> self current-passenger)))))
      (when gp-0
        (if (and (< (vector-vector-xz-distance (target-pos 0) (-> gp-0 root trans)) 225280.0)
                 (or (not (logtest? (-> *rescue-speech* 0 flags) (speech-info-flag si6)))
                     (and (> (-> *rescue-speech* 0 play-time) 0) (time-elapsed? (-> *rescue-speech* 0 play-time) (seconds 5)))
                     )
                 )
            (task-manager-desert-rescue-method-45 self 0)
            )
        )
      )
    (when (time-elapsed? (-> self state-time) (seconds 1))
      (let* ((gp-1 (handle->process (-> self current-passenger)))
             (a0-16 (if (type? gp-1 process-focusable)
                        (the-as process-focusable gp-1)
                        )
                    )
             )
        (if (or (not a0-16) (focus-test? a0-16 disable dead inactive))
            (send-event self 'fail-delay)
            )
        )
      )
    (if (and (not (handle->process (-> self current-transport))) (= (-> *was-squad-control* active-count) 0))
        (task-node-close! (game-task-node desert-rescue-rescue) 'event)
        )
    (send-event
      (handle->process (-> self current-passenger))
      'set-nav-mesh
      (get-nav-mesh (the-as actor-id *nav-mesh-aid*))
      )
    (set! (-> *game-info* timer)
          (- (task-manager-desert-rescue-method-47 self) (- (current-time) (-> self taxi-timer)))
          )
    (if (< (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    (if (or (not (handle->process (-> self jak-vehicle)))
            (begin
              (let* ((gp-4 #t)
                     (s5-1 (handle->process (-> self jak-vehicle)))
                     (v1-70 (the-as focus-status (logand (-> (the-as process-focusable (if (type? s5-1 process-focusable)
                                                                                           (the-as process-focusable s5-1)
                                                                                           )
                                                                     )
                                                             focus-status
                                                             )
                                                         (focus-status dead)
                                                         )
                                    )
                            )
                     )
                (cmove-#f-zero gp-3 v1-70 gp-4)
                )
              gp-3
              )
            )
        (send-event self 'fail)
        )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate drop-off-passenger (task-manager-desert-rescue)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('dropped-off)
       (task-manager-desert-rescue-method-45 self 2)
       (+! (-> self current-passenger-index) 1)
       (send-event (handle->process (-> self current-task-arrow)) 'leave)
       (if (= (-> self current-passenger-index) (-> self passenger-pos length))
           (go-virtual complete)
           (go-virtual pickup-passenger)
           )
       )
      (else
        (task-manager-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (task-manager-desert-rescue-method-45 self 1)
    (send-event (handle->process (-> self current-transport)) 'passenger-pickup)
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (set! (-> gp-0 pos quad) (-> self passenger-pos (-> self current-passenger-index) beacon-pos quad))
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags))
      (set! (-> gp-0 map-icon) (the-as uint 13))
      (logior! (-> gp-0 flags) (task-arrow-flags taf3))
      (set! (-> self current-task-arrow) (process->handle (task-arrow-spawn gp-0 self)))
      )
    )
  :trans (behavior ()
    (local-vars (gp-0 symbol))
    ((-> (method-of-type task-manager active) trans))
    (task-manager-desert-rescue-method-44 self)
    (set! (-> *game-info* timer)
          (- (task-manager-desert-rescue-method-47 self) (- (current-time) (-> self taxi-timer)))
          )
    (if (< (-> *game-info* timer) 0)
        (send-event self 'fail)
        )
    (if (or (not (handle->process (-> self jak-vehicle)))
            (begin
              (let* ((gp-1 #t)
                     (s5-0 (handle->process (-> self jak-vehicle)))
                     (v1-21 (the-as focus-status (logand (-> (the-as process-focusable (if (type? s5-0 process-focusable)
                                                                                           (the-as process-focusable s5-0)
                                                                                           )
                                                                     )
                                                             focus-status
                                                             )
                                                         (focus-status dead)
                                                         )
                                    )
                            )
                     )
                (cmove-#f-zero gp-0 v1-21 gp-1)
                )
              gp-0
              )
            )
        (send-event self 'fail)
        )
    (let ((f30-0
            (vector-vector-distance (target-pos 0) (-> self passenger-pos (-> self current-passenger-index) beacon-pos))
            )
          )
      (if (and (< (-> *game-info* timer) (seconds 30))
               (and (< 614400.0 f30-0)
                    (or (not (logtest? (-> *rescue-speech* 3 flags) (speech-info-flag si6)))
                        (and (> (-> *rescue-speech* 3 play-time) 0) (time-elapsed? (-> *rescue-speech* 3 play-time) (seconds 40)))
                        )
                    )
               )
          (task-manager-desert-rescue-method-45 self 3)
          )
      (if (and (< (-> *game-info* timer) (seconds 10))
               (and (< 614400.0 f30-0)
                    (and (> (-> *rescue-speech* 3 play-time) 0) (time-elapsed? (-> *rescue-speech* 3 play-time) (seconds 10)))
                    (or (not (logtest? (-> *rescue-speech* 4 flags) (speech-info-flag si6)))
                        (and (> (-> *rescue-speech* 4 play-time) 0) (time-elapsed? (-> *rescue-speech* 4 play-time) (seconds 45)))
                        )
                    )
               )
          (task-manager-desert-rescue-method-45 self 4)
          )
      (if (< f30-0 81920.0)
          (send-event (handle->process (-> self current-passenger)) 'exit-vehicle (-> self current-transport))
          )
      (if (< f30-0 20480.0)
          (send-event (handle->process (-> self current-task-arrow)) 'hide)
          (send-event (handle->process (-> self current-task-arrow)) 'show)
          )
      )
    )
  :code sleep-code
  )

;; definition for method 25 of type task-manager-desert-rescue
;; INFO: this function exists in multiple non-identical object files
(defmethod task-manager-method-25 ((this task-manager-desert-rescue))
  (send-event (handle->process (-> this current-passenger)) 'die-fast)
  (call-parent-method this)
  (none)
  )

;; failed to figure out what this is:
(defstate finish-task (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :enter (behavior ()
    (talker-spawn-func (-> *talker-speech* 170) *entity-pool* (target-pos 0) (the-as region #f))
    (deactivate (handle->process (-> self hud-timer)))
    (send-event (handle->process (-> self current-task-arrow)) 'leave)
    )
  :trans (behavior ()
    '()
    )
  :code (behavior ()
    (set-time! (-> self state-time))
    (until (time-elapsed? (-> self state-time) (seconds 1.5))
      (suspend)
      )
    (send-event self 'complete)
    )
  )

;; definition for method 44 of type task-manager-desert-rescue
;; WARN: Return type mismatch connection vs none.
(defmethod task-manager-desert-rescue-method-44 ((this task-manager-desert-rescue))
  (let ((f0-0 (-> this passenger-pos (-> this current-passenger-index) sandstorm-intensity))
        (f1-1 (if (> (-> this current-passenger-index) 0)
                  (-> this passenger-pos (+ (-> this current-passenger-index) -1) sandstorm-intensity)
                  0.2
                  )
              )
        (f2-2 (/ (the float (- (current-time) (-> this taxi-timer)))
                 (the float (-> this passenger-pos (-> this current-passenger-index) total-time))
                 )
              )
        )
    (if (-> this passenger-pos (-> this current-passenger-index) is-final?)
        (set! f2-2 (* f2-2 f2-2))
        )
    (set-setting! 'fog-special-interp-targ #f (lerp f1-1 f0-0 f2-2) 0)
    )
  (set-setting! 'fog-special-interp-rate #f 0.01 0)
  (none)
  )

;; definition for method 25 of type task-manager-desert-rescue
;; INFO: this function exists in multiple non-identical object files
(defmethod task-manager-method-25 ((this task-manager-desert-rescue))
  (call-parent-method this)
  (none)
  )

;; definition for method 45 of type task-manager-desert-rescue
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod task-manager-desert-rescue-method-45 ((this task-manager-desert-rescue) (arg0 int))
  (let ((v1-0 arg0))
    (cond
      ((or (zero? v1-0) (= v1-0 1) (= v1-0 2) (= v1-0 3) (= v1-0 4))
       (let ((s5-0 (mod (-> this current-passenger-index) 3)))
         0
         (let ((s4-0 (new 'stack-no-clear 'vector)))
           (set! (-> s4-0 quad) (-> (target-pos 0) quad))
           (let ((a0-8 (the-as process-focusable (handle->process (-> this current-passenger)))))
             (if a0-8
                 (set! (-> s4-0 quad) (-> (get-trans a0-8 3) quad))
                 )
             )
           (let ((s4-1 (speech-play (-> *rescue-speech-array* s5-0) arg0 *desert-rescue-speech-list* s4-0)))
             (when (>= s4-1 0)
               (dotimes (s3-3 3)
                 (if (!= s3-3 s5-0)
                     (mark-speech-played (-> *rescue-speech-array* s3-3 arg0) s4-1)
                     )
                 )
               )
             )
           )
         )
       )
      (else
        (speech-play (-> *rescue-speech-array* 0) arg0 *desert-rescue-speech-list* (target-pos 0))
        )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate fail-delay (task-manager-desert-rescue)
  :virtual #t
  :event task-manager-event-handler
  :trans (behavior ()
    ((-> (method-of-type task-manager active) trans))
    )
  :code (behavior ()
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 1))
        (suspend)
        )
      )
    (send-event self 'fail)
    (sleep-code)
    )
  )
