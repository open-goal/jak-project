;;-*-Lisp-*-
(in-package goal)

;; definition of type rope-knot
(deftype rope-knot (structure)
  ((pos       vector  :inline)
   (prev-pos  vector  :inline)
   (force     vector  :inline)
   (mass      float)
   )
  )

;; definition for method 3 of type rope-knot
(defmethod inspect ((this rope-knot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rope-knot)
  (format #t "~1Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~1Tprev-pos: #<vector @ #x~X>~%" (-> this prev-pos))
  (format #t "~1Tforce: #<vector @ #x~X>~%" (-> this force))
  (format #t "~1Tmass: ~f~%" (-> this mass))
  (label cfg-4)
  this
  )

;; definition of type rope-knot-constraint
(deftype rope-knot-constraint (structure)
  ((dir                     vector  :inline)
   (length                  float)
   (max-angle               float)
   (rest-seek-rate          float)
   (constrained-angle-time  time-frame)
   )
  )

;; definition for method 3 of type rope-knot-constraint
(defmethod inspect ((this rope-knot-constraint))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rope-knot-constraint)
  (format #t "~1Tdir: #<vector @ #x~X>~%" (-> this dir))
  (format #t "~1Tlength: ~f~%" (-> this length))
  (format #t "~1Tmax-angle: ~f~%" (-> this max-angle))
  (format #t "~1Trest-seek-rate: ~f~%" (-> this rest-seek-rate))
  (format #t "~1Tconstrained-angle-time: ~D~%" (-> this constrained-angle-time))
  (label cfg-4)
  this
  )

;; definition of type rope-knot-constraint-array
(deftype rope-knot-constraint-array (inline-array-class)
  ((data  rope-knot-constraint  :inline :dynamic)
   )
  )

;; definition for method 3 of type rope-knot-constraint-array
(defmethod inspect ((this rope-knot-constraint-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> rope-knot-constraint-array heap-base) (the-as uint 48))

;; definition of type rope-knot-array
(deftype rope-knot-array (inline-array-class)
  ((data  rope-knot  :inline :dynamic)
   )
  )

;; definition for method 3 of type rope-knot-array
(defmethod inspect ((this rope-knot-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> rope-knot-array heap-base) (the-as uint 64))

;; definition of type rope-system
(deftype rope-system (basic)
  ((knots                   rope-knot-array)
   (knot-constraints        rope-knot-constraint-array)
   (accum-force             vector  :inline)
   (gravity                 float)
   (gravity-dir             vector  :inline)
   (drag                    float)
   (flags                   rope-system-flag)
   (angular-mass-seek-rate  float)
   )
  (:methods
    (init! (_type_ int) object)
    (rope-system-method-10 (_type_) vector)
    (rope-system-method-11 (_type_) vector)
    (rope-system-method-12 (_type_ float) none)
    (rope-system-method-13 (_type_) symbol)
    (rope-system-method-14 (_type_) symbol)
    (rope-system-method-15 (_type_) symbol)
    (rope-system-method-16 (_type_ vector vector int) vector)
    (rope-system-method-17 (_type_) symbol)
    (rope-system-method-18 (_type_) object)
    (rope-system-method-19 (_type_) symbol)
    (rope-system-method-20 (_type_) symbol)
    (rope-system-method-21 (_type_) rope-system-flag)
    (rope-system-method-22 (_type_) rope-system-flag)
    (rope-system-method-23 (_type_) symbol)
    )
  )

;; definition for method 3 of type rope-system
(defmethod inspect ((this rope-system))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tknots: ~A~%" (-> this knots))
  (format #t "~1Tknot-constraints: ~A~%" (-> this knot-constraints))
  (format #t "~1Taccum-force: #<vector @ #x~X>~%" (-> this accum-force))
  (format #t "~1Tgravity: ~f~%" (-> this gravity))
  (format #t "~1Tgravity-dir: #<vector @ #x~X>~%" (-> this gravity-dir))
  (format #t "~1Tdrag: ~f~%" (-> this drag))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tangular-mass-seek-rate: ~f~%" (-> this angular-mass-seek-rate))
  (label cfg-4)
  this
  )

;; definition of type rope-joint-info
(deftype rope-joint-info (structure)
  ((joint-index  int16)
   )
  :pack-me
  )

;; definition for method 3 of type rope-joint-info
(defmethod inspect ((this rope-joint-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rope-joint-info)
  (format #t "~1Tjoint-index: ~D~%" (-> this joint-index))
  (label cfg-4)
  this
  )

;; definition of type rope-joint-system-info
(deftype rope-joint-system-info (structure)
  ((joint-info-array  (array rope-joint-info))
   )
  )

;; definition for method 3 of type rope-joint-system-info
(defmethod inspect ((this rope-joint-system-info))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'rope-joint-system-info)
  (format #t "~1Tjoint-info-array: ~A~%" (-> this joint-info-array))
  (label cfg-4)
  this
  )

;; definition of type joint-mod-world-array
(deftype joint-mod-world-array (inline-array-class)
  ((data  joint-mod-set-world  :inline :dynamic)
   )
  )

;; definition for method 3 of type joint-mod-world-array
(defmethod inspect ((this joint-mod-world-array))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tlength: ~D~%" (-> this length))
  (format #t "~1Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~1Tdata[0] @ #x~X~%" (-> this data))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(set! (-> joint-mod-world-array heap-base) (the-as uint 64))




