;;-*-Lisp-*-
(in-package goal)

;; definition of type v-turtle
(deftype v-turtle (wcar-base)
  ((jmod-axles       joint-mod-rotate-local  4 :inline)
   (jmod-shock-tops  joint-mod-rotate-local  4 :inline)
   (jmod-shock-mids  joint-mod-set-local     4 :inline)
   (jmod-antenna     joint-mod-rotate-local  4 :inline)
   (ant-tip-vel      vector                  :inline)
   (spring-pos       vector                  :inline)
   (spring-vel       vector                  :inline)
   )
  )

;; definition for method 3 of type v-turtle
(defmethod inspect ((this v-turtle))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type wcar-base inspect)))
    (t9-0 this)
    )
  (format #t "~2Tjmod-axles[4] @ #x~X~%" (-> this jmod-axles))
  (format #t "~2Tjmod-shock-tops[4] @ #x~X~%" (-> this jmod-shock-tops))
  (format #t "~2Tjmod-shock-mids[4] @ #x~X~%" (-> this jmod-shock-mids))
  (format #t "~2Tjmod-antenna[4] @ #x~X~%" (-> this jmod-antenna))
  (format #t "~2Tant-tip-vel: #<vector @ #x~X>~%" (-> this ant-tip-vel))
  (format #t "~2Tspring-pos: #<vector @ #x~X>~%" (-> this spring-pos))
  (format #t "~2Tspring-vel: #<vector @ #x~X>~%" (-> this spring-vel))
  (label cfg-4)
  this
  )

;; definition for method 34 of type v-turtle
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this v-turtle))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((a0-5 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> a0-5 prim-core action) (collide-action solid))
      (set! (-> a0-5 transform-index) 0)
      )
    (let ((a0-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> a0-7 prim-core action) (collide-action solid))
      (set! (-> a0-7 transform-index) 0)
      )
    (let ((a0-9 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> a0-9 prim-core action) (collide-action solid))
      (set! (-> a0-9 transform-index) 0)
      )
    (let ((a0-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> a0-11 prim-core action) (collide-action solid))
      (set! (-> a0-11 transform-index) 0)
      )
    (let ((a0-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> a0-13 prim-core action) (collide-action solid))
      (set! (-> a0-13 transform-index) 0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 16))))
      (set! (-> v1-20 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-20 transform-index) 0)
      (set! (-> v1-20 nav-radius) 20480.0)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-22 prim-core action) (collide-action solid rideable))
      (set! (-> v1-22 transform-index) 3)
      (set-vector! (-> v1-22 local-sphere) 0.0 0.0 0.0 16384.0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-24 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-24 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-24 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 62 of type v-turtle
(defmethod vehicle-method-62 ((this v-turtle))
  (let ((s5-0 (-> this root root-prim)))
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 0 local-sphere))
      (the-as pointer (new 'static 'vector :x 7782.4 :y 1638.4 :z 7987.2 :w 3276.8))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 1 local-sphere))
      (the-as pointer (new 'static 'vector :x -7782.4 :y 1638.4 :z 7987.2 :w 3276.8))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 2 local-sphere))
      (the-as pointer (new 'static 'vector :x 7372.8 :y 4096.0 :z -8601.6 :w 3686.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 3 local-sphere))
      (the-as pointer (new 'static 'vector :x -7372.8 :y 4096.0 :z -8601.6 :w 3686.4))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 4 local-sphere))
      (the-as pointer (new 'static 'vector :y 4505.6 :z 4096.0 :w 6144.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 5 local-sphere))
      (the-as pointer (new 'static 'vector :y 5324.8 :z -6553.6 :w 6144.0))
      16
      )
    )
  ((method-of-type wcar-base vehicle-method-62) this)
  (none)
  )

;; definition for method 79 of type v-turtle
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-79 ((this v-turtle))
  (local-vars (v1-33 float) (v1-47 float) (v1-52 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (set-vector! (-> this root scale) 1.0 1.0 1.07 1.0)
    (let ((s5-0 (new 'stack-no-clear 'inline-array 'quaternion 3)))
      (set-vector! (-> s5-0 2) -3640.889 3640.889 3640.889 -3640.889)
      (dotimes (s4-0 (-> this info physics-model wheel-count))
        (let ((v1-6 (-> this wheel s4-0)))
          (-> v1-6 info)
          (let ((s3-0 (-> this jmod-axles s4-0)))
            (quaternion-set!
              (-> s5-0 0)
              0.0
              0.0
              (* (-> v1-6 sin-susp-ang) (-> v1-6 x-scale))
              (+ 1.0 (-> v1-6 cos-susp-ang))
              )
            (quaternion-normalize! (-> s5-0 0))
            (quaternion-axis-angle! (-> s5-0 1) 0.0 1.0 0.0 (-> (&-> s5-0 0 data s4-0) 8))
            (quaternion*! (-> s3-0 rotation) (-> s5-0 0) (-> s5-0 1))
            )
          )
        0
        )
      )
    (let ((s5-1 (new 'stack-no-clear 'wvehicle-physics-work)))
      (set! (-> s5-1 mat trans x) (seconds-per-frame))
      (vector-matrix*! (-> s5-1 mat uvec) (new 'static 'vector :y 20480.0 :z -8192.0 :w 1.0) (-> this rbody matrix))
      (rigid-body-control-method-23 (-> this rbody) (-> s5-1 mat uvec) (the-as vector (-> s5-1 mat)))
      (vector-! (-> s5-1 mat fvec) (the-as vector (-> s5-1 mat)) (-> this ant-tip-vel))
      (set! (-> this ant-tip-vel quad) (-> s5-1 mat rvec quad))
      (vector-float*! (-> s5-1 mat fvec) (-> s5-1 mat fvec) (/ 1.0 (-> s5-1 mat trans x)))
      (vector+float*!
        (-> this spring-vel)
        (-> this spring-vel)
        (-> s5-1 mat fvec)
        (* -0.00024414062 (-> s5-1 mat trans x))
        )
      (set! (-> s5-1 mat trans y) 500.0)
      (set! (-> s5-1 mat trans z) 5.0)
      (vector+float*!
        (-> this spring-vel)
        (-> this spring-vel)
        (-> this spring-pos)
        (* -1.0 (-> s5-1 mat trans x) (-> s5-1 mat trans y))
        )
      (vector-float*!
        (-> this spring-vel)
        (-> this spring-vel)
        (fmax 0.0 (+ 1.0 (* -1.0 (-> s5-1 mat trans z) (-> s5-1 mat trans x))))
        )
      (vector+float*! (-> this spring-pos) (-> this spring-pos) (-> this spring-vel) (-> s5-1 mat trans x))
      )
    (set! (-> this spring-pos y) 0.0)
    (.lvf vf1 (&-> (-> this spring-pos) quad))
    (.add.w.vf vf2 vf0 vf0 :mask #b1)
    (.mul.vf vf1 vf1 vf1)
    (.mul.x.vf acc vf2 vf1 :mask #b1)
    (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
    (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
    (.mov v1-33 vf1)
    (let ((f0-27 v1-33))
      (when (< 1.0 f0-27)
        (vector-float*! (-> this spring-pos) (-> this spring-pos) (/ 1.0 (sqrtf f0-27)))
        (vector-reset! (-> this spring-vel))
        )
      )
    (let ((s5-2 (new 'stack-no-clear 'wvehicle-jmod-work)))
      (quaternion-conjugate! (-> s5-2 quat1) (-> this root quat))
      (quaternion->matrix (-> s5-2 mat0) (-> s5-2 quat1))
      (set! (-> s5-2 float0) 8192.0)
      (set! (-> s5-2 float2) (sin (* 0.5 (-> s5-2 float0))))
      (set! (-> s5-2 float1) (cos (* 0.5 (-> s5-2 float0))))
      (vector-rotate90-around-y! (-> s5-2 vec0) (-> this spring-pos))
      (vector-float*! (-> s5-2 vec0) (-> s5-2 vec0) (* -1.0 (-> s5-2 float2)))
      (vector-rotate*! (-> s5-2 vec0) (-> s5-2 vec0) (-> s5-2 mat0))
      (set! (-> s5-2 quat0 x) (-> s5-2 vec0 x))
      (set! (-> s5-2 quat0 y) (-> s5-2 vec0 y))
      (set! (-> s5-2 quat0 z) (-> s5-2 vec0 z))
      (let ((f0-42 1.0))
        (.lvf vf1 (&-> (-> s5-2 vec0) quad))
        (.add.w.vf vf2 vf0 vf0 :mask #b1)
        (.mul.vf vf1 vf1 vf1)
        (.mul.x.vf acc vf2 vf1 :mask #b1)
        (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
        (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
        (.mov v1-47 vf1)
        (set! (-> s5-2 quat0 w) (sqrtf (- f0-42 v1-47)))
        )
      (quaternion-copy! (-> this jmod-antenna 0 rotation) (-> s5-2 quat0))
      (vector-float*! (-> s5-2 vec0) (-> s5-2 vec0) 1.0)
      (set! (-> s5-2 quat0 x) (-> s5-2 vec0 x))
      (set! (-> s5-2 quat0 y) (-> s5-2 vec0 y))
      (set! (-> s5-2 quat0 z) (-> s5-2 vec0 z))
      (let ((f0-49 1.0))
        (.lvf vf1 (&-> (-> s5-2 vec0) quad))
        (.add.w.vf vf2 vf0 vf0 :mask #b1)
        (.mul.vf vf1 vf1 vf1)
        (.mul.x.vf acc vf2 vf1 :mask #b1)
        (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
        (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
        (.mov v1-52 vf1)
        (set! (-> s5-2 quat0 w) (sqrtf (- f0-49 v1-52)))
        )
      (quaternion-copy! (-> this jmod-antenna 1 rotation) (-> s5-2 quat0))
      (quaternion-copy! (-> this jmod-antenna 2 rotation) (-> s5-2 quat0))
      (quaternion-copy! (-> this jmod-antenna 3 rotation) (-> s5-2 quat0))
      )
    0
    (none)
    )
  )

;; definition for method 35 of type v-turtle
;; WARN: Return type mismatch int vs none.
(defmethod init-rbody-control! ((this v-turtle))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-turtle" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (alloc-rbody-control! this *v-turtle-constants*)
  (set! (-> this rider-hand-joint-array 0) 8)
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-axles))
   this
   (the-as uint 5)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-axles 1) this (the-as uint 6) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 2) this (the-as uint 4) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 3) this (the-as uint 7) (joint-mod-base-flags attached))
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-antenna))
   this
   (the-as uint 9)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-antenna 1) this (the-as uint 10) (joint-mod-base-flags attached))
  (init (-> this jmod-antenna 2) this (the-as uint 11) (joint-mod-base-flags attached))
  (init (-> this jmod-antenna 3) this (the-as uint 12) (joint-mod-base-flags attached))
  (vector-reset! (-> this ant-tip-vel))
  (vector-reset! (-> this spring-pos))
  (vector-reset! (-> this spring-vel))
  (spawn-wheels!
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-turtle-wheel" (the-as (pointer level) #f)))
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-turtle-wheel-blur" (the-as (pointer level) #f)))
    (the-as skeleton-group #f)
    (the-as skeleton-group #f)
    )
  0
  (none)
  )
