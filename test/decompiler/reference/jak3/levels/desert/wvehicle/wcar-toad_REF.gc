;;-*-Lisp-*-
(in-package goal)

;; definition of type v-toad
(deftype v-toad (wcar-base)
  ((jmod-axles       joint-mod-rotate-local  4 :inline)
   (jmod-shock-tops  joint-mod-rotate-local  2 :inline)
   (jmod-shock-bots  joint-mod-set-local     2 :inline)
   )
  (:methods
    (v-toad-method-203 (_type_ vehicle-wheel-state vehicle-wheel-info) none)
    )
  )

;; definition for method 3 of type v-toad
(defmethod inspect ((this v-toad))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type wcar-base inspect)))
    (t9-0 this)
    )
  (format #t "~2Tjmod-axles[4] @ #x~X~%" (-> this jmod-axles))
  (format #t "~2Tjmod-shock-tops[2] @ #x~X~%" (-> this jmod-shock-tops))
  (format #t "~2Tjmod-shock-bots[2] @ #x~X~%" (-> this jmod-shock-bots))
  (label cfg-4)
  this
  )

;; definition for method 169 of type v-toad
;; INFO: Used lq/sq
;; WARN: Return type mismatch (pointer process) vs none.
(defmethod wvehicle-method-169 ((this v-toad))
  (sound-play "toad-shot-fire")
  (set! (-> this i-barrel) (logand (+ (-> this i-barrel) 1) 1))
  (let ((gp-1 (new 'stack-no-clear 'wcar-toad-stack-var0)))
    (set! (-> gp-1 barrel-idx) (-> this i-barrel))
    (set! (-> gp-1 vec10 x) 61440.0)
    (set! (-> gp-1 vec10 y) 204800.0)
    (set! (-> gp-1 vec10 z) 409600.0)
    (set! (-> gp-1 vec10 w) 163840.0)
    (let* ((v1-9 (-> gp-1 mat0))
           (a3-1 (-> this rbody matrix))
           (a0-4 (-> a3-1 rvec quad))
           (a1-1 (-> a3-1 uvec quad))
           (a2-1 (-> a3-1 fvec quad))
           (a3-2 (-> a3-1 trans quad))
           )
      (set! (-> v1-9 rvec quad) a0-4)
      (set! (-> v1-9 uvec quad) a1-1)
      (set! (-> v1-9 fvec quad) a2-1)
      (set! (-> v1-9 trans quad) a3-2)
      )
    (let ((v1-10 (new 'static 'inline-array vector 2
                   (new 'static 'vector :x 2048.0 :y 7372.8 :z 6144.0 :w 1.0)
                   (new 'static 'vector :x -2048.0 :y 7372.8 :z 6144.0 :w 1.0)
                   )
                 )
          )
      (vector-matrix*! (-> gp-1 vec0) (-> v1-10 (-> gp-1 barrel-idx)) (-> gp-1 mat0))
      )
    0
    (vector-reset! (-> gp-1 vec4))
    (set! (-> gp-1 vec4 z) (-> gp-1 vec10 y))
    (set! (-> gp-1 vec4 y) (* 0.2678 (-> gp-1 vec10 y)))
    (set! (-> gp-1 vec8 quad) (-> gp-1 mat0 fvec quad))
    (vector-float*! (-> gp-1 vec9) (-> gp-1 vec8) (- (-> gp-1 vec10 z) (-> gp-1 vec10 x)))
    (vector+float*! (-> gp-1 vec3) (-> gp-1 vec0) (-> gp-1 vec8) (+ 32768.0 (-> gp-1 vec10 x)))
    (let ((s4-1 (new 'stack 'boxed-array collide-shape 128)))
      (set! (-> s4-1 length) (fill-actor-list-for-sphere
                               *actor-hash*
                               (-> gp-1 vec3)
                               (-> gp-1 vec9)
                               (-> gp-1 vec10 x)
                               (the-as (pointer collide-shape) (-> s4-1 data))
                               (-> s4-1 allocated-length)
                               -1
                               )
            )
      (let ((s4-2 (find-nearest-focusable
                    (the-as (array collide-shape) s4-1)
                    (-> gp-1 vec3)
                    (-> gp-1 vec10 z)
                    (search-info-flag attackable enemy attackable-priority high-priority)
                    (search-info-flag)
                    (-> gp-1 vec1)
                    (the-as vector #f)
                    8192.0
                    )
                  )
            )
        (when s4-2
          (set! (-> gp-1 vec6 quad) (-> (get-trans s4-2 3) quad))
          (set! (-> gp-1 vec7 quad) (-> (get-transv s4-2) quad))
          (vector+float*! (-> gp-1 vec2) (-> this rbody lin-velocity) (-> gp-1 vec8) (-> gp-1 vec10 y))
          (vector-! (-> gp-1 vec5) (-> gp-1 vec6) (-> gp-1 vec0))
          (set! (-> gp-1 vec11 x) (vector-dot (-> gp-1 vec8) (-> gp-1 vec5)))
          (vector-! (-> gp-1 vec5) (-> gp-1 vec7) (-> gp-1 vec2))
          (set! (-> gp-1 vec11 y) (vector-dot (-> gp-1 vec8) (-> gp-1 vec5)))
          (set! (-> gp-1 vec11 w) (fmax 0.1 (/ (-> gp-1 vec11 x) (fmax 4096.0 (- (-> gp-1 vec11 y))))))
          (set! (-> gp-1 vec11 z) (+ (-> gp-1 vec6 y) (* (-> gp-1 vec11 w) (-> gp-1 vec7 y))))
          (set! (-> gp-1 vec4 y) (+ (* (/ 1.0 (-> gp-1 vec11 w)) (- (-> gp-1 vec11 z) (-> gp-1 vec0 y)))
                                    (* 0.5 (-> gp-1 vec11 w) (-> gp-1 vec10 w))
                                    )
                )
          (set! (-> gp-1 vec4 y) (* (-> gp-1 vec4 y) (/ 1.0 (fmax 0.1 (-> gp-1 mat0 uvec y)))))
          (set! (-> gp-1 vec4 y) (fmax (fmin (-> gp-1 vec4 y) (* 0.3638 (-> gp-1 vec10 y))) (* 0.0 (-> gp-1 vec10 y))))
          0
          )
        )
      )
    (vector-rotate*! (-> gp-1 vec2) (-> gp-1 vec4) (-> gp-1 mat0))
    (vector+! (-> gp-1 vec2) (-> gp-1 vec2) (-> this rbody lin-velocity))
    (set! (-> gp-1 params ent) (-> this entity))
    (set! (-> gp-1 params charge) 1.0)
    (set! (-> gp-1 params options) (projectile-options))
    (logclear! (-> gp-1 params options) (projectile-options po14 po15 po16))
    (set! (-> gp-1 params pos quad) (-> gp-1 vec0 quad))
    (set! (-> gp-1 params vel quad) (-> gp-1 vec2 quad))
    (set! (-> gp-1 params notify-handle) (the-as handle #f))
    (set! (-> gp-1 params owner-handle) (process->handle this))
    (set! (-> gp-1 params target-handle) (the-as handle #f))
    (set! (-> gp-1 params target-pos quad) (the-as uint128 0))
    (set! (-> gp-1 params ignore-handle) (process->handle this))
    (let* ((v1-60 *game-info*)
           (a0-37 (+ (-> v1-60 attack-id) 1))
           )
      (set! (-> v1-60 attack-id) a0-37)
      (set! (-> gp-1 params attack-id) a0-37)
      )
    (set! (-> gp-1 params timeout) (seconds 4))
    (spawn-projectile v-toad-shot (-> gp-1 params) *rigid-body-queue-manager* *default-dead-pool*)
    )
  (none)
  )

;; definition for method 88 of type v-toad
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-88 ((this v-toad) (arg0 vehicle-controls))
  ((method-of-type wcar-base vehicle-method-88) this arg0)
  0
  (none)
  )

;; definition for method 48 of type v-toad
(defmethod on-impact ((this v-toad) (arg0 rigid-body-impact))
  (when (and (logtest? (vehicle-flag vf56) (-> this v-flags)) (-> arg0 process))
    (let ((a0-2 (-> arg0 process)))
      (if a0-2
          (send-event
            a0-2
            'attack
            #f
            (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                (damage 2000.0)
                                                                (vehicle-damage-factor 1.0)
                                                                (vehicle-impulse-factor 0.0)
                                                                (attacker (process->handle this))
                                                                )
                                )
            )
          )
      )
    )
  ((method-of-type wcar-base on-impact) this arg0)
  (none)
  )

;; definition for method 93 of type v-toad
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-93 ((this v-toad))
  (let ((t9-0 (method-of-type wcar-base vehicle-method-93)))
    (t9-0 this)
    )
  (if (logtest? (vehicle-flag vf56) (-> this v-flags))
      (set! (-> this rbody lin-momentum y) (* -409600.0 (-> this info info mass)))
      )
  0
  (none)
  )

;; definition for method 34 of type v-toad
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this v-toad))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 8) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 9))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 18432.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((a0-6 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> a0-6 prim-core action) (collide-action solid))
      (set! (-> a0-6 transform-index) 0)
      )
    (let ((a0-8 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> a0-8 prim-core action) (collide-action solid))
      (set! (-> a0-8 transform-index) 0)
      )
    (let ((a0-10 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> a0-10 prim-core action) (collide-action solid))
      (set! (-> a0-10 transform-index) 0)
      )
    (let ((a0-12 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> a0-12 prim-core action) (collide-action solid))
      (set! (-> a0-12 transform-index) 0)
      )
    (let ((a0-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> a0-14 prim-core action) (collide-action solid))
      (set! (-> a0-14 transform-index) 0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1168))))
      (set! (-> v1-21 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-21 transform-index) 0)
      (set! (-> v1-21 nav-radius) 20480.0)
      )
    (let ((a0-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 16))))
      (set! (-> a0-19 prim-core action) (collide-action solid))
      (set! (-> a0-19 transform-index) 0)
      )
    (let ((v1-25 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-25 prim-core action) (collide-action solid rideable))
      (set! (-> v1-25 transform-index) 3)
      (set-vector! (-> v1-25 local-sphere) 0.0 0.0 0.0 28672.0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-27 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-27 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-27 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 62 of type v-toad
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-62 ((this v-toad))
  (let ((s5-0 (-> this root root-prim)))
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 0 local-sphere))
      (the-as pointer (new 'static 'vector :x 11264.0 :y 2252.8 :z 20275.2 :w 5120.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 1 local-sphere))
      (the-as pointer (new 'static 'vector :x -11264.0 :y 2252.8 :z 20275.2 :w 5120.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 2 local-sphere))
      (the-as pointer (new 'static 'vector :x 12697.6 :y 3481.6 :z -12083.2 :w 6553.6))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 3 local-sphere))
      (the-as pointer (new 'static 'vector :x -12697.6 :y 3481.6 :z -12083.2 :w 6553.6))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 4 local-sphere))
      (the-as pointer (new 'static 'vector :y 4096.0 :z 14336.0 :w 6963.2))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 5 local-sphere))
      (the-as pointer (new 'static 'vector :y 5324.8 :z 1228.8 :w 8192.0))
      16
      )
    (mem-copy!
      (the-as pointer (-> (the-as collide-shape-prim-group s5-0) child 6 local-sphere))
      (the-as pointer (new 'static 'vector :y 5324.8 :z -10649.6 :w 6963.2))
      16
      )
    )
  ((method-of-type wcar-base vehicle-method-62) this)
  0
  (none)
  )

;; definition for method 203 of type v-toad
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod v-toad-method-203 ((this v-toad) (arg0 vehicle-wheel-state) (arg1 vehicle-wheel-info))
  (let ((gp-0 (new 'stack-no-clear 'wvehicle-physics-work)))
    (set-vector! (-> gp-0 p-body) 1.0 0.0 0.0 1.0)
    (set-vector! (-> gp-0 axis) 0.0 1.0 0.0 1.0)
    (quaternion-copy! (the-as quaternion (-> gp-0 world-normal)) (-> this root quat))
    (let* ((v1-3 (-> gp-0 mat))
           (a3-0 (-> this rbody matrix))
           (a0-7 (-> a3-0 rvec quad))
           (a1-2 (-> a3-0 uvec quad))
           (a2-1 (-> a3-0 fvec quad))
           (a3-1 (-> a3-0 trans quad))
           )
      (set! (-> v1-3 rvec quad) a0-7)
      (set! (-> v1-3 uvec quad) a1-2)
      (set! (-> v1-3 fvec quad) a2-1)
      (set! (-> v1-3 trans quad) a3-1)
      )
    (set! (-> gp-0 wsphere y) (* (-> arg1 radius) (-> arg1 scale)))
    (set! (-> gp-0 wsphere z) 13590.528)
    (set! (-> gp-0 wsphere r) 0.0)
    (set! (-> gp-0 friction-coef)
          (+ (-> gp-0 wsphere r) (* 2.0 (asin (/ (* 0.5 (-> arg1 travel)) (-> gp-0 wsphere z)))))
          )
    (set! (-> gp-0 steering-axis quad) (-> (new 'static 'vector :x 10649.6 :y 2662.4 :z 7618.56 :w 1.0) quad))
    (set-vector!
      (-> gp-0 ground-pos)
      0.0
      (* -1.0 (- (sin (-> gp-0 friction-coef)) (sin (-> gp-0 wsphere r))) (-> gp-0 wsphere z))
      (* (- (cos (-> gp-0 friction-coef)) (cos (-> gp-0 wsphere r))) (-> gp-0 wsphere z))
      1.0
      )
    (vector-normalize! (-> gp-0 ground-pos) 1.0)
    (set! (-> gp-0 tmp quad) (-> gp-0 steering-axis quad))
    (+! (-> gp-0 tmp z) (* (-> gp-0 wsphere z) (cos (-> gp-0 wsphere r))))
    (+! (-> gp-0 tmp y) (* -1.0 (sin (-> gp-0 wsphere r)) (-> gp-0 wsphere z)))
    (set! (-> gp-0 tmp y) (- (-> gp-0 tmp y) (-> gp-0 wsphere y)))
    (set! (-> gp-0 tmp x) (* (-> gp-0 tmp x) (-> arg0 x-scale)))
    (vector+float*!
      (-> gp-0 tmp)
      (-> gp-0 tmp)
      (-> arg0 local-axis)
      (* (-> arg1 steer-arm-length) (-> arg0 x-scale))
      )
    (set! (-> arg0 probe-local-pos quad) (-> gp-0 tmp quad))
    (set! (-> arg0 probe-local-dir quad) (-> gp-0 ground-pos quad))
    (vector-matrix*! (-> gp-0 side-dir) (-> gp-0 tmp) (-> gp-0 mat))
    (vector-rotate*! (-> gp-0 forward-dir) (-> gp-0 ground-pos) (-> gp-0 mat))
    (set! (-> gp-0 wsphere x)
          (- (+ (-> arg0 probe-local-pos y)
                (-> gp-0 wsphere y)
                (* (-> arg0 probe-local-dir y) (-> arg0 pos2) (-> arg1 travel))
                )
             (-> gp-0 steering-axis y)
             )
          )
    (set! (-> arg0 sin-susp-ang) (fmax -1.0 (fmin 1.0 (/ (- (-> gp-0 wsphere x)) (-> gp-0 wsphere z)))))
    (let ((f0-52 1.0)
          (f1-16 (-> arg0 sin-susp-ang))
          )
      (set! (-> arg0 cos-susp-ang) (sqrtf (- f0-52 (* f1-16 f1-16))))
      )
    (quaternion-identity! (the-as quaternion (-> gp-0 local-pos)))
    (set! (-> gp-0 local-pos z) (* (sin (-> arg1 camber)) (-> arg0 x-scale)))
    (set! (-> gp-0 local-pos w) (cos (-> arg1 camber)))
    (when (logtest? (-> arg1 flags) (vehicle-wheel-flag vwf5))
      (quaternion-set!
        (the-as quaternion (-> gp-0 force))
        0.0
        0.0
        (* (-> arg0 sin-susp-ang) (-> arg0 x-scale))
        (+ 1.0 (-> arg0 cos-susp-ang))
        )
      (quaternion-normalize! (the-as quaternion (-> gp-0 force)))
      (quaternion*!
        (the-as quaternion (-> gp-0 local-pos))
        (the-as quaternion (-> gp-0 local-pos))
        (the-as quaternion (-> gp-0 force))
        )
      )
    (set! (-> gp-0 dir quad) (-> gp-0 steering-axis quad))
    (+! (-> gp-0 dir z) (* (-> gp-0 wsphere z) (-> arg0 cos-susp-ang)))
    (+! (-> gp-0 dir y) (* -1.0 (-> arg0 sin-susp-ang) (-> gp-0 wsphere z)))
    (set! (-> gp-0 dir x) (* (-> gp-0 dir x) (-> arg0 x-scale)))
    (vector+float*!
      (-> gp-0 dir)
      (-> gp-0 dir)
      (-> arg0 local-axis)
      (* (-> arg1 steer-arm-length) (-> arg0 x-scale))
      )
    (vector-matrix*! (-> gp-0 ground-normal-sum) (-> gp-0 dir) (-> gp-0 mat))
    (quaternion-vector-angle! (the-as quaternion (-> gp-0 world-pos)) (-> gp-0 axis) (-> arg0 steer-angle))
    (quaternion-vector-angle! (the-as quaternion (-> gp-0 velocity)) (-> gp-0 p-body) (-> arg0 angle))
    (quaternion*!
      (the-as quaternion (-> gp-0 force))
      (the-as quaternion (-> gp-0 world-pos))
      (the-as quaternion (-> gp-0 local-pos))
      )
    (quaternion*!
      (the-as quaternion (-> gp-0 force))
      (the-as quaternion (-> gp-0 force))
      (the-as quaternion (-> gp-0 velocity))
      )
    (quaternion*! (-> arg0 quat) (the-as quaternion (-> gp-0 world-normal)) (the-as quaternion (-> gp-0 force)))
    (set! (-> arg0 trans quad) (-> gp-0 ground-normal-sum quad))
    )
  0
  (none)
  )

;; definition for method 79 of type v-toad
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod vehicle-method-79 ((this v-toad))
  (let ((s5-0 (new 'stack-no-clear 'inline-array 'quaternion 2)))
    (quaternion-axis-angle! (-> s5-0 1) 1.0 0.0 0.0 -5355.7476)
    (dotimes (s4-0 2)
      (let ((v1-3 (-> this wheel s4-0)))
        (-> v1-3 info)
        (quaternion-set! (-> s5-0 0) (-> v1-3 sin-susp-ang) 0.0 0.0 (+ 1.0 (-> v1-3 cos-susp-ang)))
        )
      (quaternion-normalize! (-> s5-0 0))
      (let ((v1-6 (-> this jmod-axles s4-0)))
        (quaternion*! (-> v1-6 rotation) (-> s5-0 1) (-> s5-0 0))
        )
      0
      )
    )
  (let ((s5-1 (new 'stack-no-clear 'inline-array 'quaternion 1))
        (s4-1 2)
        )
    (while (< s4-1 4)
      (let ((v1-13 (-> this wheel s4-1)))
        (-> v1-13 info)
        (quaternion-set!
          (-> s5-1 0)
          0.0
          0.0
          (* (-> v1-13 sin-susp-ang) (-> v1-13 x-scale))
          (+ 1.0 (-> v1-13 cos-susp-ang))
          )
        )
      (quaternion-normalize! (-> s5-1 0))
      (let ((v1-16 (-> this jmod-axles s4-1)))
        (quaternion-copy! (-> v1-16 rotation) (-> s5-1 0))
        )
      0
      (+! s4-1 1)
      )
    )
  (let ((s5-2 (new 'stack-no-clear 'wvehicle-physics-work)))
    (let* ((v1-19 (-> s5-2 mat))
           (a3-3 (-> this node-list data 0 bone transform))
           (a0-12 (-> a3-3 rvec quad))
           (a1-5 (-> a3-3 uvec quad))
           (a2-4 (-> a3-3 fvec quad))
           (a3-4 (-> a3-3 trans quad))
           )
      (set! (-> v1-19 rvec quad) a0-12)
      (set! (-> v1-19 uvec quad) a1-5)
      (set! (-> v1-19 fvec quad) a2-4)
      (set! (-> v1-19 trans quad) a3-4)
      )
    (set! (-> s5-2 force quad) (-> (new 'static 'vector :x 8806.4 :y 5324.8 :z -11878.4 :w 1.0) quad))
    (set! (-> s5-2 velocity quad) (-> (new 'static 'vector :x 8806.4 :y 5324.8 :z -11878.4 :w 1.0) quad))
    (set-vector! (-> s5-2 local-pos) 32768.0 32768.0 0.0 0.0)
    (dotimes (s4-2 2)
      (let ((v1-26 (-> this wheel (+ s4-2 2))))
        (let ((a0-20 (-> v1-26 info)))
          (set! (-> s5-2 ground-pos y) (+ -2048.0 (-> a0-20 susp-arm-length)))
          (set! (-> s5-2 tmp quad) (-> (the-as (pointer uint128) (+ (+ (* s4-2 16) 64) (the-as int s5-2)))))
          (set! (-> s5-2 steering-axis quad) (-> a0-20 local-pos quad))
          )
        (+! (-> s5-2 steering-axis x) (* (-> s5-2 ground-pos y) (-> v1-26 cos-susp-ang)))
        (+! (-> s5-2 steering-axis y) (* (-> s5-2 ground-pos y) (-> v1-26 sin-susp-ang)))
        (set! (-> s5-2 p-body quad) (-> s5-2 steering-axis quad))
        (set! (-> s5-2 p-body x) (* (-> s5-2 p-body x) (-> v1-26 x-scale)))
        (set! (-> s5-2 tmp x) (* (-> s5-2 tmp x) (-> v1-26 x-scale)))
        )
      (vector-! (-> s5-2 axis) (-> s5-2 p-body) (-> s5-2 tmp))
      (set! (-> s5-2 ground-pos x) (vector-length (-> s5-2 axis)))
      (set! (-> s5-2 ground-pos z) (- (-> s5-2 local-pos data s4-2) (atan (-> s5-2 axis x) (-> s5-2 axis y))))
      (let ((v1-34 (-> this jmod-shock-tops s4-2)))
        (quaternion-axis-angle! (-> v1-34 rotation) 0.0 0.0 1.0 (-> s5-2 ground-pos z))
        )
      0
      (let ((v1-38 (-> this jmod-shock-bots s4-2)))
        (set! (-> v1-38 transform trans y) (* -1.0 (+ -3686.4 (-> s5-2 ground-pos x))))
        )
      0
      0
      )
    )
  0
  (none)
  )

;; definition for method 37 of type v-toad
;; WARN: Return type mismatch (function v-toad vehicle-wheel-state vehicle-wheel-info none) vs none.
(defmethod rigid-body-object-method-37 ((this v-toad))
  (let ((t9-0 (method-of-type wcar-base rigid-body-object-method-37)))
    (t9-0 this)
    )
  (set! (-> this info physics-model front-wheel callback) (method-of-object this v-toad-method-203))
  (none)
  )

;; definition for method 35 of type v-toad
;; WARN: Return type mismatch int vs none.
(defmethod init-rbody-control! ((this v-toad))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-toad" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (alloc-rbody-control! this *v-toad-constants*)
  (set! (-> this rider-hand-joint-array 0) 14)
  (set! (-> this shoot-delay) (the-as uint 300))
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-axles))
   this
   (the-as uint 5)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-axles 1) this (the-as uint 6) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 2) this (the-as uint 4) (joint-mod-base-flags attached))
  (init (-> this jmod-axles 3) this (the-as uint 7) (joint-mod-base-flags attached))
  ((method-of-type joint-mod-rotate-local init)
   (the-as joint-mod-rotate-local (-> this jmod-shock-tops))
   this
   (the-as uint 10)
   (joint-mod-base-flags attached)
   )
  (init (-> this jmod-shock-tops 1) this (the-as uint 12) (joint-mod-base-flags attached))
  ((method-of-type joint-mod-set-local init)
   (the-as joint-mod-set-local (-> this jmod-shock-bots))
   this
   (the-as uint 11)
   (joint-mod-base-flags attached trans)
   )
  (init (-> this jmod-shock-bots 1) this (the-as uint 13) (joint-mod-base-flags attached trans))
  (spawn-wheels!
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-toad-wheel" (the-as (pointer level) #f)))
    (the-as skeleton-group (art-group-get-by-name *level* "skel-v-toad-wheel-blur" (the-as (pointer level) #f)))
    (the-as skeleton-group #f)
    (the-as skeleton-group #f)
    )
  0
  (none)
  )




