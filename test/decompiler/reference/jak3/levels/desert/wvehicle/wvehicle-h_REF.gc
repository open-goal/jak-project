;;-*-Lisp-*-
(in-package goal)

;; definition of type wvehicle-sound-loop-state
(deftype wvehicle-sound-loop-state (structure)
  ((id     sound-id)
   (vol    float)
   (pitch  float)
   )
  :allow-misaligned
  )

;; definition for method 3 of type wvehicle-sound-loop-state
(defmethod inspect ((this wvehicle-sound-loop-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wvehicle-sound-loop-state)
  (format #t "~1Tid: ~D~%" (-> this id))
  (format #t "~1Tvol: ~f~%" (-> this vol))
  (format #t "~1Tpitch: ~f~%" (-> this pitch))
  (label cfg-4)
  this
  )

;; definition of type vehicle-wheel-surface
(deftype vehicle-wheel-surface (structure)
  ((flags             vehicle-wheel-surface-flag)
   (surface-type      vehicle-wheel-surface-type)
   (friction          float)
   (drag              float)
   (depth             float)
   (damage            float)
   (tire-roll-mix     float  4)
   (tire-roll-hum     float  :overlay-at (-> tire-roll-mix 0))
   (tire-roll-dirt    float  :overlay-at (-> tire-roll-mix 1))
   (tire-roll-sand    float  :overlay-at (-> tire-roll-mix 2))
   (tire-roll-knobby  float  :overlay-at (-> tire-roll-mix 3))
   (tire-slide-mix    float  2)
   (tire-slide-road   float  :overlay-at (-> tire-slide-mix 0))
   (tire-slide-dirt   float  :overlay-at (-> tire-slide-mix 1))
   )
  )

;; definition for method 3 of type vehicle-wheel-surface
(defmethod inspect ((this vehicle-wheel-surface))
  (when (not this)
    (set! this this)
    (goto cfg-23)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-wheel-surface)
  (format #t "~1Tflags: #x~X : (vehicle-wheel-surface-flag " (-> this flags))
  (let ((a0-3 (-> this flags)))
    (if (= (logand a0-3 (vehicle-wheel-surface-flag moving)) (vehicle-wheel-surface-flag moving))
        (format #t "moving ")
        )
    )
  (format #t ")~%")
  (let ((t9-4 format)
        (a0-7 #t)
        (a1-4 "~1Tsurface-type: #x~X : ~S~%")
        (a2-2 (-> this surface-type))
        (v1-5 (-> this surface-type))
        )
    (t9-4 a0-7 a1-4 a2-2 (cond
                           ((= v1-5 (vehicle-wheel-surface-type wall))
                            "wall"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type conveyor))
                            "conveyor"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type stone))
                            "stone"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type dirt))
                            "dirt"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type water))
                            "water"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type quicksand))
                            "quicksand"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type none))
                            "none"
                            )
                           ((= v1-5 (vehicle-wheel-surface-type sand))
                            "sand"
                            )
                           (else
                             "*unknown*"
                             )
                           )
          )
    )
  (format #t "~1Tfriction: ~f~%" (-> this friction))
  (format #t "~1Tdrag: ~f~%" (-> this drag))
  (format #t "~1Tdepth: ~f~%" (-> this depth))
  (format #t "~1Tdamage: ~f~%" (-> this damage))
  (format #t "~1Ttire-roll-mix[4] @ #x~X~%" (-> this tire-roll-mix))
  (format #t "~1Ttire-roll-hum: ~f~%" (-> this tire-roll-hum))
  (format #t "~1Ttire-roll-dirt: ~f~%" (-> this tire-roll-dirt))
  (format #t "~1Ttire-roll-sand: ~f~%" (-> this tire-roll-sand))
  (format #t "~1Ttire-roll-knobby: ~f~%" (-> this tire-roll-knobby))
  (format #t "~1Ttire-slide-mix[2] @ #x~X~%" (-> this tire-slide-mix))
  (format #t "~1Ttire-slide-road: ~f~%" (-> this tire-slide-road))
  (format #t "~1Ttire-slide-dirt: ~f~%" (-> this tire-slide-dirt))
  (label cfg-23)
  this
  )

;; definition of type vehicle-wheel-state
(deftype vehicle-wheel-state (structure)
  ((info              vehicle-wheel-info)
   (flags             uint8)
   (prev-flags        uint8)
   (handle            handle)
   (probe-local-pos   vector                    :inline)
   (probe-local-dir   vector                    :inline)
   (local-axis        vector                    :inline)
   (surface-pos       vector                    :inline)
   (ground-pos        vector                    :inline)
   (ground-normal     vector                    :inline)
   (trans             vector                    :inline)
   (quat              quaternion                :inline)
   (trail-pos         vector                    2 :inline)
   (surface           vehicle-wheel-surface)
   (pos               float)
   (pos2              float)
   (inertia           float)
   (steer-angle       float)
   (angle             float)
   (rev               float)
   (x-scale           float)
   (torque            float)
   (braking-torque    float)
   (up-force          float)
   (drive-diff        float)
   (side-vel          float)
   (up-vel            float)
   (forward-vel       float)
   (forward-slip-vel  float)
   (friction-coef     float)
   (sink-depth        float)
   (sin-susp-ang      float)
   (cos-susp-ang      float)
   (part-birth-accum  sparticle-launch-control  4)
   (tread-time        uint32)
   (tread-tracker     handle)
   )
  )

;; definition for method 3 of type vehicle-wheel-state
(defmethod inspect ((this vehicle-wheel-state))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'vehicle-wheel-state)
  (format #t "~1Tinfo: #<vehicle-wheel-info @ #x~X>~%" (-> this info))
  (format #t "~1Tflags: ~D~%" (-> this flags))
  (format #t "~1Tprev-flags: ~D~%" (-> this prev-flags))
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tprobe-local-pos: #<vector @ #x~X>~%" (-> this probe-local-pos))
  (format #t "~1Tprobe-local-dir: #<vector @ #x~X>~%" (-> this probe-local-dir))
  (format #t "~1Tlocal-axis: #<vector @ #x~X>~%" (-> this local-axis))
  (format #t "~1Tsurface-pos: #<vector @ #x~X>~%" (-> this surface-pos))
  (format #t "~1Tground-pos: #<vector @ #x~X>~%" (-> this ground-pos))
  (format #t "~1Tground-normal: #<vector @ #x~X>~%" (-> this ground-normal))
  (format #t "~1Ttrans: #<vector @ #x~X>~%" (-> this trans))
  (format #t "~1Tquat: #<quaternion @ #x~X>~%" (-> this quat))
  (format #t "~1Ttrail-pos[2] @ #x~X~%" (-> this trail-pos))
  (format #t "~1Tsurface: #<vehicle-wheel-surface @ #x~X>~%" (-> this surface))
  (format #t "~1Tpos: ~f~%" (-> this pos))
  (format #t "~1Tpos2: ~f~%" (-> this pos2))
  (format #t "~1Tinertia: ~f~%" (-> this inertia))
  (format #t "~1Tsteer-angle: ~f~%" (-> this steer-angle))
  (format #t "~1Tangle: ~f~%" (-> this angle))
  (format #t "~1Trev: ~f~%" (-> this rev))
  (format #t "~1Tx-scale: ~f~%" (-> this x-scale))
  (format #t "~1Ttorque: ~f~%" (-> this torque))
  (format #t "~1Tbraking-torque: ~f~%" (-> this braking-torque))
  (format #t "~1Tup-force: ~f~%" (-> this up-force))
  (format #t "~1Tdrive-diff: ~f~%" (-> this drive-diff))
  (format #t "~1Tside-vel: ~f~%" (-> this side-vel))
  (format #t "~1Tup-vel: ~f~%" (-> this up-vel))
  (format #t "~1Tforward-vel: ~f~%" (-> this forward-vel))
  (format #t "~1Tforward-slip-vel: ~f~%" (-> this forward-slip-vel))
  (format #t "~1Tfriction-coef: ~f~%" (-> this friction-coef))
  (format #t "~1Tsink-depth: ~f~%" (-> this sink-depth))
  (format #t "~1Tsin-susp-ang: ~f~%" (-> this sin-susp-ang))
  (format #t "~1Tcos-susp-ang: ~f~%" (-> this cos-susp-ang))
  (format #t "~1Tpart-birth-accum[4] @ #x~X~%" (-> this part-birth-accum))
  (format #t "~1Ttread-time: ~D~%" (-> this tread-time))
  (format #t "~1Ttread-tracker: ~D~%" (-> this tread-tracker))
  (label cfg-4)
  this
  )

;; definition of type wvehicle-probe-work
(deftype wvehicle-probe-work (structure)
  ((local-pos     vector  :inline)
   (local-normal  vector  :inline)
   (world-pos     vector  :inline)
   (world-normal  vector  :inline)
   (wheel-axis    vector  :inline)
   (side-dir      vector  :inline)
   (forward-dir   vector  :inline)
   (velocity      vector  :inline)
   (probe-uu      float)
   )
  )

;; definition for method 3 of type wvehicle-probe-work
(defmethod inspect ((this wvehicle-probe-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wvehicle-probe-work)
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tlocal-normal: #<vector @ #x~X>~%" (-> this local-normal))
  (format #t "~1Tworld-pos: #<vector @ #x~X>~%" (-> this world-pos))
  (format #t "~1Tworld-normal: #<vector @ #x~X>~%" (-> this world-normal))
  (format #t "~1Twheel-axis: #<vector @ #x~X>~%" (-> this wheel-axis))
  (format #t "~1Tside-dir: #<vector @ #x~X>~%" (-> this side-dir))
  (format #t "~1Tforward-dir: #<vector @ #x~X>~%" (-> this forward-dir))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Tprobe-uu: ~f~%" (-> this probe-uu))
  (label cfg-4)
  this
  )

;; definition of type wvehicle-physics-work
(deftype wvehicle-physics-work (structure)
  ((mat                    matrix               :inline)
   (force                  vector               :inline)
   (velocity               vector               :inline)
   (world-pos              vector               :inline)
   (world-normal           vector               :inline)
   (local-pos              vector               :inline)
   (steering-axis          vector               :inline)
   (probe-dir              vector               :inline)
   (tmp                    vector               :inline)
   (p-body                 vector               :inline)
   (axis                   vector               :inline)
   (dir                    vector               :inline)
   (ground-normal-sum      vector               :inline)
   (ground-pos             vector               :inline)
   (forward-dir            vector               :inline)
   (side-dir               vector               :inline)
   (wheel-axis             vector               :inline)
   (wsphere                sphere               :inline)
   (friction-coef          float)
   (wheel-radius           float)
   (side-force             float)
   (forward-force          float)
   (max-forward-tire-grip  float)
   (max-side-tire-grip     float)
   (inertia-eff            float)
   (ground-torque          float)
   (braking-torque         float)
   (total-torque           float)
   (limit-braking-torque   float)
   (max-braking-torque     float)
   (surface-drag           float)
   (water-y                float)
   (cur-time               uint32)
   (surface-type           uint8)
   (surface-depth          float)
   (material               uint64)
   (probe-work-array       wvehicle-probe-work  4 :inline)
   (cquery                 collide-query        :inline)
   )
  )

;; definition for method 3 of type wvehicle-physics-work
(defmethod inspect ((this wvehicle-physics-work))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wvehicle-physics-work)
  (format #t "~1Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (format #t "~1Tforce: #<vector @ #x~X>~%" (-> this force))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Tworld-pos: #<vector @ #x~X>~%" (-> this world-pos))
  (format #t "~1Tworld-normal: #<vector @ #x~X>~%" (-> this world-normal))
  (format #t "~1Tlocal-pos: #<vector @ #x~X>~%" (-> this local-pos))
  (format #t "~1Tsteering-axis: #<vector @ #x~X>~%" (-> this steering-axis))
  (format #t "~1Tprobe-dir: #<vector @ #x~X>~%" (-> this probe-dir))
  (format #t "~1Ttmp: #<vector @ #x~X>~%" (-> this tmp))
  (format #t "~1Tp-body: #<vector @ #x~X>~%" (-> this p-body))
  (format #t "~1Taxis: #<vector @ #x~X>~%" (-> this axis))
  (format #t "~1Tdir: #<vector @ #x~X>~%" (-> this dir))
  (format #t "~1Tground-normal-sum: #<vector @ #x~X>~%" (-> this ground-normal-sum))
  (format #t "~1Tground-pos: #<vector @ #x~X>~%" (-> this ground-pos))
  (format #t "~1Tforward-dir: #<vector @ #x~X>~%" (-> this forward-dir))
  (format #t "~1Tside-dir: #<vector @ #x~X>~%" (-> this side-dir))
  (format #t "~1Twheel-axis: #<vector @ #x~X>~%" (-> this wheel-axis))
  (format #t "~1Twsphere: #<sphere @ #x~X>~%" (-> this wsphere))
  (format #t "~1Tfriction-coef: ~f~%" (-> this friction-coef))
  (format #t "~1Twheel-radius: ~f~%" (-> this wheel-radius))
  (format #t "~1Tside-force: ~f~%" (-> this side-force))
  (format #t "~1Tforward-force: ~f~%" (-> this forward-force))
  (format #t "~1Tmax-forward-tire-grip: ~f~%" (-> this max-forward-tire-grip))
  (format #t "~1Tmax-side-tire-grip: ~f~%" (-> this max-side-tire-grip))
  (format #t "~1Tinertia-eff: ~f~%" (-> this inertia-eff))
  (format #t "~1Tground-torque: ~f~%" (-> this ground-torque))
  (format #t "~1Tbraking-torque: ~f~%" (-> this braking-torque))
  (format #t "~1Ttotal-torque: ~f~%" (-> this total-torque))
  (format #t "~1Tlimit-braking-torque: ~f~%" (-> this limit-braking-torque))
  (format #t "~1Tmax-braking-torque: ~f~%" (-> this max-braking-torque))
  (format #t "~1Tsurface-drag: ~f~%" (-> this surface-drag))
  (format #t "~1Twater-y: ~f~%" (-> this water-y))
  (format #t "~1Tcur-time: ~D~%" (-> this cur-time))
  (format #t "~1Tsurface-type: ~D~%" (-> this surface-type))
  (format #t "~1Tsurface-depth: ~f~%" (-> this surface-depth))
  (format #t "~1Tmaterial: ~D~%" (-> this material))
  (format #t "~1Tprobe-work-array[4] @ #x~X~%" (-> this probe-work-array))
  (format #t "~1Tcquery: #<collide-query @ #x~X>~%" (-> this cquery))
  (label cfg-4)
  this
  )

;; definition of type wvehicle
(deftype wvehicle (vehicle)
  ((race                     race-control               :inline)
   (target-status            squad-target-status        :inline)
   (ai-controls              vehicle-controls           :inline)
   (minimap                  connection-minimap)
   (net                      basic)
   (engine-rev               float)
   (engine-inertia           float)
   (engine-torque            float)
   (engine-max-torque        float)
   (engine-rpm               float)
   (sound-engine-rpm         float)
   (wheel-rev                float)
   (wheel-inertia            float)
   (wheel-torque             float)
   (wheel-braking-torque     float)
   (wheel-ground-torque      float)
   (clutch-grab              float)
   (gear-ratio               float)
   (final-drive-ratio        float)
   (total-gear-ratio         float)
   (inv-total-gear-ratio     float)
   (avg-drive-wheel-radius   float)
   (drive-wheel-inertia      float)
   (clutch-inertia           float)
   (idle-throttle            float)
   (susp-spring-control      float)
   (jump-control             float)
   (ai-min-speed             float)
   (ai-max-speed             float)
   (shortcut-speed-factor    float)
   (path-deviation           float)
   (turbo-supply             float)
   (turbo-ready              float)
   (ai-state                 uint8)
   (return-ai-state          uint8)
   (i-barrel                 int8)
   (shift-state              uint8)
   (gear-select              int8)
   (next-gear-select         int8)
   (shift-time               uint32)
   (impact                   rigid-body-impact          :inline)
   (wheel                    vehicle-wheel-state        4 :inline)
   (gravity-dir              vector                     :inline)
   (ai-target-point          vector                     :inline)
   (surface-velocity         vector                     :inline)
   (turret-local-pos         vector                     :inline)
   (gun-local-pos            vector                     :inline)
   (gun-local-dir            vector                     :inline)
   (gun-aim-yaw              float)
   (gun-aim-yaw-vel          float)
   (gun-targ-yaw             float)
   (gun-targ-pitch           float)
   (gun-yaw                  float)
   (gun-pitch                float)
   (gun-yaw-vel              float)
   (gun-pitch-vel            float)
   (gun-kick                 float)
   (lock-turret              basic)
   (tire-roll-loop-state     wvehicle-sound-loop-state  4 :inline)
   (tire-slide-loop-state    wvehicle-sound-loop-state  2 :inline)
   (engine1-sound-id         sound-id                   :offset 2472)
   (engine2-sound-id         sound-id)
   (engine3-sound-id         sound-id)
   (damage-sound-id          sound-id)
   (water-sound-id           sound-id)
   (turbo-sound-id           sound-id)
   (shortcut-time            uint32)
   (overturned-time          uint32)
   (splash-time              uint32)
   (knobby-time              uint32)
   (susp-creak-time          uint32)
   (shoot-time               uint32)
   (shoot-delay              uint32)
   (jump-time                uint32)
   (ground-time              uint32)
   (ram-time                 uint32)
   (attached-array           handle                     16)
   (eng1-vol                 float)
   (eng2-vol                 float)
   (eng3-vol                 float)
   (eng-pitch-variance       float)
   (eng-pitch-variance-seek  float)
   (eng-vol-variance         float)
   (eng-vol-variance-seek    float)
   (eng-pitch-offset         float)
   (eng-flutter-envelope     float)
   (water-sound-envelope     float)
   (other-proc               handle)
   (other-pos                vector                     :inline)
   )
  :allow-misaligned
  (:state-methods
    hostile
    undefined0
    race-waiting
    race-racing
    race-finished
    undefined1
    explode-into-nothing
    sink
    )
  (:methods
    (wvehicle-method-160 (_type_ wvehicle-physics-work) none)
    (spawn-wheels! (_type_ skeleton-group skeleton-group skeleton-group skeleton-group) none)
    (wvehicle-method-162 (_type_ float) none)
    (wvehicle-method-163 (_type_) none)
    (wvehicle-method-164 (_type_ vehicle-wheel-state vehicle-wheel-info) none)
    (wvehicle-method-165 (_type_) none)
    (wvehicle-method-166 (_type_ float float) float)
    (wvehicle-method-167 (_type_) none)
    (wvehicle-method-168 (_type_) none)
    (wvehicle-method-169 (_type_) none)
    (wvehicle-method-170 (_type_) none)
    (wvehicle-method-171 (_type_ vector int) none)
    (wvehicle-method-172 (_type_ quaternion int) none)
    (wvehicle-method-173 (_type_ vector) int)
    (get-attached-by-idx (_type_ int) process-focusable)
    (add-attached-at-idx (_type_ int process-focusable) none)
    (remove-attached-from-arr (_type_ process-focusable) symbol)
    (wvehicle-method-177 (_type_ vehicle-controls) none)
    (wvehicle-method-178 (_type_) none)
    (wvehicle-method-179 (_type_) none)
    (race-select-path-randomly-from-mask (_type_ uint) none)
    (wvehicle-method-181 (_type_) none)
    (wvehicle-method-182 (_type_) none)
    (wvehicle-method-183 (_type_ vehicle-controls) none)
    (wvehicle-method-184 (_type_) none)
    (wvehicle-method-185 (_type_) none)
    (wvehicle-method-186 (_type_) none)
    (wvehicle-method-187 (_type_) none)
    (wvehicle-method-188 (_type_) none)
    (wvehicle-method-189 (_type_ vehicle-wheel-state wvehicle-part-work wvehicle-wheel-launcher-spec) none)
    (wvehicle-method-190 (_type_ vehicle-wheel-state wvehicle-part-work) none)
    (wvehicle-method-191 (_type_ vehicle-wheel-state wvehicle-part-work) symbol)
    (wvehicle-method-192 (_type_ vehicle-wheel-state wvehicle-part-work) none)
    (wvehicle-method-193 (_type_ vehicle-wheel-state wvehicle-part-work) none)
    (wvehicle-method-194 (_type_ vehicle-wheel-state wvehicle-part-work) none)
    (wvehicle-method-195 (_type_) none)
    (wvehicle-method-196 (_type_) none)
    (race-setup (_type_ int) symbol)
    (wvehicle-method-198 (_type_) none)
    (wvehicle-method-199 (_type_) none)
    (wvehicle-method-200 (_type_ vector wvehicle-part-work) none)
    (wvehicle-method-201 (_type_ float) none)
    (wvehicle-method-202 (_type_ float) none)
    )
  )

;; definition for method 3 of type wvehicle
(defmethod inspect ((this wvehicle))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type vehicle inspect)))
    (t9-0 this)
    )
  (format #t "~2Trace: #<race-control @ #x~X>~%" (-> this race))
  (format #t "~2Ttarget-status: #<squad-target-status @ #x~X>~%" (-> this target-status))
  (format #t "~2Tai-controls: #<vehicle-controls @ #x~X>~%" (-> this ai-controls))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tnet: ~A~%" (-> this net))
  (format #t "~2Tengine-rev: ~f~%" (-> this engine-rev))
  (format #t "~2Tengine-inertia: ~f~%" (-> this engine-inertia))
  (format #t "~2Tengine-torque: ~f~%" (-> this engine-torque))
  (format #t "~2Tengine-max-torque: ~f~%" (-> this engine-max-torque))
  (format #t "~2Tengine-rpm: ~f~%" (-> this engine-rpm))
  (format #t "~2Tsound-engine-rpm: ~f~%" (-> this sound-engine-rpm))
  (format #t "~2Twheel-rev: ~f~%" (-> this wheel-rev))
  (format #t "~2Twheel-inertia: ~f~%" (-> this wheel-inertia))
  (format #t "~2Twheel-torque: ~f~%" (-> this wheel-torque))
  (format #t "~2Twheel-braking-torque: ~f~%" (-> this wheel-braking-torque))
  (format #t "~2Twheel-ground-torque: ~f~%" (-> this wheel-ground-torque))
  (format #t "~2Tclutch-grab: ~f~%" (-> this clutch-grab))
  (format #t "~2Tgear-ratio: ~f~%" (-> this gear-ratio))
  (format #t "~2Tfinal-drive-ratio: ~f~%" (-> this final-drive-ratio))
  (format #t "~2Ttotal-gear-ratio: ~f~%" (-> this total-gear-ratio))
  (format #t "~2Tinv-total-gear-ratio: ~f~%" (-> this inv-total-gear-ratio))
  (format #t "~2Tavg-drive-wheel-radius: ~f~%" (-> this avg-drive-wheel-radius))
  (format #t "~2Tdrive-wheel-inertia: ~f~%" (-> this drive-wheel-inertia))
  (format #t "~2Tclutch-inertia: ~f~%" (-> this clutch-inertia))
  (format #t "~2Tidle-throttle: ~f~%" (-> this idle-throttle))
  (format #t "~2Tsusp-spring-control: ~f~%" (-> this susp-spring-control))
  (format #t "~2Tjump-control: ~f~%" (-> this jump-control))
  (format #t "~2Tai-min-speed: ~f~%" (-> this ai-min-speed))
  (format #t "~2Tai-max-speed: ~f~%" (-> this ai-max-speed))
  (format #t "~2Tshortcut-speed-factor: ~f~%" (-> this shortcut-speed-factor))
  (format #t "~2Tpath-deviation: ~f~%" (-> this path-deviation))
  (format #t "~2Tturbo-supply: ~f~%" (-> this turbo-supply))
  (format #t "~2Tturbo-ready: ~f~%" (-> this turbo-ready))
  (format #t "~2Tai-state: ~D~%" (-> this ai-state))
  (format #t "~2Treturn-ai-state: ~D~%" (-> this return-ai-state))
  (format #t "~2Ti-barrel: ~D~%" (-> this i-barrel))
  (format #t "~2Tshift-state: ~D~%" (-> this shift-state))
  (format #t "~2Tgear-select: ~D~%" (-> this gear-select))
  (format #t "~2Tnext-gear-select: ~D~%" (-> this next-gear-select))
  (format #t "~2Tshift-time: ~D~%" (-> this shift-time))
  (format #t "~2Timpact: #<rigid-body-impact @ #x~X>~%" (-> this impact))
  (format #t "~2Twheel[4] @ #x~X~%" (-> this wheel))
  (format #t "~2Tgravity-dir: #<vector @ #x~X>~%" (-> this gravity-dir))
  (format #t "~2Tai-target-point: #<vector @ #x~X>~%" (-> this ai-target-point))
  (format #t "~2Tsurface-velocity: #<vector @ #x~X>~%" (-> this surface-velocity))
  (format #t "~2Tturret-local-pos: #<vector @ #x~X>~%" (-> this turret-local-pos))
  (format #t "~2Tgun-local-pos: #<vector @ #x~X>~%" (-> this gun-local-pos))
  (format #t "~2Tgun-local-dir: #<vector @ #x~X>~%" (-> this gun-local-dir))
  (format #t "~2Tgun-aim-yaw: ~f~%" (-> this gun-aim-yaw))
  (format #t "~2Tgun-aim-yaw-vel: ~f~%" (-> this gun-aim-yaw-vel))
  (format #t "~2Tgun-targ-yaw: ~f~%" (-> this gun-targ-yaw))
  (format #t "~2Tgun-targ-pitch: ~f~%" (-> this gun-targ-pitch))
  (format #t "~2Tgun-yaw: ~f~%" (-> this gun-yaw))
  (format #t "~2Tgun-pitch: ~f~%" (-> this gun-pitch))
  (format #t "~2Tgun-yaw-vel: ~f~%" (-> this gun-yaw-vel))
  (format #t "~2Tgun-pitch-vel: ~f~%" (-> this gun-pitch-vel))
  (format #t "~2Tgun-kick: ~f~%" (-> this gun-kick))
  (format #t "~2Tlock-turret: ~A~%" (-> this lock-turret))
  (format #t "~2Ttire-roll-loop-state[4] @ #x~X~%" (-> this tire-roll-loop-state))
  (format #t "~2Ttire-slide-loop-state[2] @ #x~X~%" (-> this tire-slide-loop-state))
  (format #t "~2Tengine1-sound-id: ~D~%" (-> this engine1-sound-id))
  (format #t "~2Tengine2-sound-id: ~D~%" (-> this engine2-sound-id))
  (format #t "~2Tengine3-sound-id: ~D~%" (-> this engine3-sound-id))
  (format #t "~2Tdamage-sound-id: ~D~%" (-> this damage-sound-id))
  (format #t "~2Twater-sound-id: ~D~%" (-> this water-sound-id))
  (format #t "~2Tturbo-sound-id: ~D~%" (-> this turbo-sound-id))
  (format #t "~2Tshortcut-time: ~D~%" (-> this shortcut-time))
  (format #t "~2Toverturned-time: ~D~%" (-> this overturned-time))
  (format #t "~2Tsplash-time: ~D~%" (-> this splash-time))
  (format #t "~2Tknobby-time: ~D~%" (-> this knobby-time))
  (format #t "~2Tsusp-creak-time: ~D~%" (-> this susp-creak-time))
  (format #t "~2Tshoot-time: ~D~%" (-> this shoot-time))
  (format #t "~2Tshoot-delay: ~D~%" (-> this shoot-delay))
  (format #t "~2Tjump-time: ~D~%" (-> this jump-time))
  (format #t "~2Tground-time: ~D~%" (-> this ground-time))
  (format #t "~2Tram-time: ~D~%" (-> this ram-time))
  (format #t "~2Tattached-array[16] @ #x~X~%" (-> this attached-array))
  (format #t "~2Teng1-vol: ~f~%" (-> this eng1-vol))
  (format #t "~2Teng2-vol: ~f~%" (-> this eng2-vol))
  (format #t "~2Teng3-vol: ~f~%" (-> this eng3-vol))
  (format #t "~2Teng-pitch-variance: ~f~%" (-> this eng-pitch-variance))
  (format #t "~2Teng-pitch-variance-seek: ~f~%" (-> this eng-pitch-variance-seek))
  (format #t "~2Teng-vol-variance: ~f~%" (-> this eng-vol-variance))
  (format #t "~2Teng-vol-variance-seek: ~f~%" (-> this eng-vol-variance-seek))
  (format #t "~2Teng-pitch-offset: ~f~%" (-> this eng-pitch-offset))
  (format #t "~2Teng-flutter-envelope: ~f~%" (-> this eng-flutter-envelope))
  (format #t "~2Twater-sound-envelope: ~f~%" (-> this water-sound-envelope))
  (format #t "~2Tother-proc: ~D~%" (-> this other-proc))
  (format #t "~2Tother-pos: #<vector @ #x~X>~%" (-> this other-pos))
  (label cfg-4)
  this
  )

;; definition for function rpm->radians-per-sec
;; WARN: Return type mismatch float vs degrees.
(defun rpm->radians-per-sec ((arg0 float))
  (the-as degrees (* 0.10471976 arg0))
  )

;; definition for function radians-per-sec->rpm
(defun radians-per-sec->rpm ((arg0 degrees))
  (* 9.549297 arg0)
  )

;; definition of type wvehicle-ai-drop-off-params
(deftype wvehicle-ai-drop-off-params (structure)
  ((dest  vector  :inline)
   (proc  process)
   )
  )

;; definition for method 3 of type wvehicle-ai-drop-off-params
(defmethod inspect ((this wvehicle-ai-drop-off-params))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'wvehicle-ai-drop-off-params)
  (format #t "~1Tdest: #<vector @ #x~X>~%" (-> this dest))
  (format #t "~1Tproc: ~A~%" (-> this proc))
  (label cfg-4)
  this
  )

;; definition for function wvehicle-surface-type-from-material
(defun wvehicle-surface-type-from-material ((arg0 int))
  (let ((v1-0 arg0))
    (cond
      ((or (= v1-0 23) (= v1-0 6))
       0
       )
      ((or (= v1-0 15) (zero? v1-0))
       1
       )
      ((= v1-0 5)
       2
       )
      ((= v1-0 2)
       3
       )
      ((= v1-0 16)
       6
       )
      (else
        1
        )
      )
    )
  )

;; failed to figure out what this is:
0
