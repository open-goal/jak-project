;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defstate idle (wvehicle)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (go-virtual waiting)
    )
  )

;; failed to figure out what this is:
(defstate player-control (wvehicle)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type vehicle player-control) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (send-event *vehicle-manager* 'extra-bank (-> self info sound bank-replace))
    (iterate-prims (-> self root) (lambda ((arg0 collide-shape-prim))
                                    (logclear! (-> arg0 prim-core collide-as) (collide-spec camera-blocker))
                                    (none)
                                    )
                   )
    (wvehicle-method-195 self)
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type vehicle player-control) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (set! (-> self sound-engine-rpm) 0.0)
    (iterate-prims (-> self root) (lambda ((arg0 collide-shape-prim))
                                    (logior! (-> arg0 prim-core collide-as) (collide-spec camera-blocker))
                                    (none)
                                    )
                   )
    )
  )

;; failed to figure out what this is:
(defstate crash (wvehicle)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type vehicle crash) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (go-virtual explode)
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate explode (wvehicle)
  :virtual #t
  :enter (behavior ()
    (rlet ((vf0 :class vf))
      (init-vf0-vector)
      (let ((t9-0 (-> (method-of-type vehicle explode) enter)))
        (if t9-0
            (t9-0)
            )
        )
      (let ((gp-0 (new 'stack-no-clear 'matrix)))
        (dotimes (s5-0 (-> self info physics-model wheel-count))
          (let ((s4-0 (-> self wheel s5-0)))
            (cond
              ((or (not (logtest? (-> self info flags) #x4000)) (< (rand-vu) 0.6))
               (rigid-body-control-method-23 (-> self rbody) (-> s4-0 trans) (-> gp-0 rvec))
               (vector-! (-> gp-0 uvec) (-> s4-0 trans) (-> self rbody position))
               (vector+float*! (-> gp-0 rvec) (-> gp-0 rvec) (-> gp-0 uvec) 6.0)
               (+! (-> gp-0 rvec y) 81920.0)
               (send-event (handle->process (-> s4-0 handle)) 'explode (-> gp-0 rvec))
               (set! (-> s4-0 handle) (the-as handle #f))
               )
              (else
                (send-event (handle->process (-> s4-0 handle)) 'explode #f)
                )
              )
            )
          )
        )
      (if (not (logtest? (-> self info flags) #x4000))
          (go-virtual explode-into-nothing)
          )
      (let ((a0-14 (-> self draw color-mult)))
        (vector-float*! (the-as vector a0-14) (the-as vector a0-14) 0.25)
        )
      (impulse-handler self)
      (let ((s4-1 (new 'stack-no-clear 'vector))
            (s5-1 (new 'stack-no-clear 'vector))
            (gp-1 (-> self rbody))
            )
        (set! (-> gp-1 linear-damping) 0.99)
        (set! (-> gp-1 angular-damping) 0.97)
        (vector-reset! s4-1)
        (set! (-> s4-1 y) (* 122880.0 (-> self info info mass)))
        (dotimes (s3-0 3)
          (set! (-> s5-1 data s3-0) (* 12288.0 (+ -1.0 (* 2.0 (rand-vu)))))
          )
        (vector+! s5-1 s5-1 (-> gp-1 position))
        (apply-impact! gp-1 s5-1 s4-1)
        (rigid-body-control-method-12 gp-1 1.0)
        (init-velocities! gp-1)
        )
      (let ((gp-2 (new 'stack-no-clear 'explosion-init-params)))
        (set! (-> gp-2 spawn-point quad) (-> self root trans quad))
        (quaternion-identity! (-> gp-2 spawn-quat))
        (set! (-> gp-2 radius) (+ 12288.0 (-> self root root-prim local-sphere w)))
        (set! (-> gp-2 scale) (* 0.00008877841 (-> self draw bounds w)))
        (set! (-> gp-2 group) (-> *part-group-id-table* (-> self info explosion-part)))
        (set! (-> gp-2 collide-with)
              (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
              )
        (set! (-> gp-2 damage) 2.0)
        (set! (-> gp-2 damage-scale) 1.0)
        (set! (-> gp-2 vehicle-damage-factor) 1.0)
        (set! (-> gp-2 vehicle-impulse-factor) 1.0)
        (set! (-> gp-2 ignore-proc) (process->handle #f))
        (explosion-spawn gp-2 (the-as process-drawable *default-pool*))
        )
      (let ((gp-3 (-> self info explosion)))
        (when gp-3
          (set! (-> gp-3 skel)
                (the-as skeleton-group (art-group-get-by-name *level* (-> gp-3 skel-name) (the-as (pointer level) #f)))
                )
          (let ((s5-2 (new 'stack 'joint-exploder-tuning (the-as uint 0))))
            (set! (-> s5-2 duration) (seconds 4))
            (set! (-> s5-2 gravity) -327680.0)
            (set! (-> s5-2 rot-speed) 10.2)
            (set-vector! (-> s5-2 fountain-rand-transv-lo) -81920.0 61440.0 -81920.0 1.0)
            (set-vector! (-> s5-2 fountain-rand-transv-hi) 81920.0 131072.0 81920.0 1.0)
            (let ((v1-100
                    (process-spawn joint-exploder (-> gp-3 skel) (-> gp-3 anim) s5-2 gp-3 :name "joint-exploder" :to self :unk 0)
                    )
                  )
              (when v1-100
                (let ((v1-103 (-> (the-as process-drawable (-> v1-100 0)) draw)))
                  (if v1-103
                      (.svf (&-> (-> v1-103 color-mult) quad) vf0)
                      )
                  )
                )
              )
            )
          )
        )
      (if (and (logtest? (vehicle-flag unique) (-> self v-flags))
               (not (logtest? (vehicle-flag player-killed) (-> self v-flags)))
               (-> *setting-control* user-current unique-vehicle-mission-critical)
               )
          (fail-mission)
          )
      )
    )
  )

;; failed to figure out what this is:
(defstate explode-into-nothing (wvehicle)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self v-flags) (the-as vehicle-flag (logclear (-> self v-flags) (vehicle-flag rammed-target))))
    (let ((gp-0 (new 'stack-no-clear 'explosion-init-params)))
      (set! (-> gp-0 spawn-point quad) (-> self root trans quad))
      (quaternion-identity! (-> gp-0 spawn-quat))
      (set! (-> gp-0 radius) 4096.0)
      (set! (-> gp-0 scale) (* 0.00008877841 (-> self draw bounds w)))
      (set! (-> gp-0 group) (-> *part-group-id-table* (-> self info explosion-part)))
      (set! (-> gp-0 collide-with)
            (collide-spec backgnd jak crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> gp-0 damage) 2.0)
      (set! (-> gp-0 damage-scale) 1.0)
      (set! (-> gp-0 vehicle-damage-factor) 1.0)
      (set! (-> gp-0 vehicle-impulse-factor) 1.0)
      (set! (-> gp-0 ignore-proc) (process->handle #f))
      (explosion-spawn gp-0 (the-as process-drawable *default-pool*))
      )
    (logior! (-> self focus-status) (focus-status disable inactive))
    (disable-physics! self)
    (rigid-body-object-method-43 self)
    )
  :code sleep-code
  :post (behavior ()
    (when (and (not (logtest? (vehicle-flag rammed-target) (-> self v-flags)))
               (time-elapsed? (-> self state-time) (seconds 0.035))
               )
      (set! (-> self v-flags) (the-as vehicle-flag (logior (vehicle-flag rammed-target) (-> self v-flags))))
      (let ((a1-1 (new 'stack 'debris-tuning (the-as uint 0)))
            (a2-1 (-> self info debris))
            )
        (when a2-1
          (set! (-> a1-1 duration) (seconds 5))
          (set! (-> a1-1 hit-xz-reaction) 0.95)
          (set! (-> a1-1 hit-y-reaction) 0.6)
          (set! (-> a1-1 gravity) -163840.0)
          (set! (-> a1-1 scale-rand-lo) 2.0)
          (set! (-> a1-1 scale-rand-hi) (* 2.0 (-> a1-1 scale-rand-lo)))
          (set! (-> a1-1 rot-speed) 1000.0)
          (vector+!
            (-> a1-1 fountain-rand-transv-lo)
            (-> self root transv)
            (new 'static 'vector :x -81920.0 :y 61440.0 :z -81920.0 :w 1.0)
            )
          (vector+!
            (-> a1-1 fountain-rand-transv-hi)
            (-> self root transv)
            (new 'static 'vector :x 81920.0 :y 131072.0 :z 81920.0 :w 1.0)
            )
          (debris-spawn self a1-1 a2-1 (the-as process-drawable #f))
          )
        )
      (logior! (-> self draw status) (draw-control-status no-draw))
      )
    (if (not (-> self child))
        (go-virtual die)
        )
    )
  )

;; failed to figure out what this is:
(defstate waiting (wvehicle)
  :virtual #t
  :enter (behavior ()
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    )
  :exit (behavior ()
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    (let ((t9-1 (-> (find-parent-state) exit)))
      (if t9-1
          (t9-1)
          )
      )
    )
  )

;; failed to figure out what this is:
(defstate hostile (wvehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (wvehicle-method-195 self)
    (if (not (-> self minimap))
        (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 10) (the-as int #f) (the-as vector #t) 0))
        )
    (set! (-> self control-hook)
          (the-as (function vehicle vehicle-controls) (method-of-object self control-hook-ai))
          )
    (set! (-> self ai-state) (the-as uint 1))
    (logior! (-> self v-flags) (vehicle-flag ai-driving ignition))
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (logclear! (-> self v-flags) (vehicle-flag ai-driving ignition))
    (when (-> self minimap)
      (logior! (-> self minimap flags) (minimap-flag fade-out))
      (set! (-> self minimap) #f)
      )
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (wvehicle-method-168 self)
    )
  )

;; failed to figure out what this is:
(defstate sink (wvehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (vehicle-method-116 self 'drown-death)
    (set! (-> self crash-level) 3)
    (set! (-> self force-level) 3)
    (logior! (-> self focus-status) (focus-status dead))
    (logclear! (-> self v-flags) (vehicle-flag persistent player-driving net-player-driving))
    (set! (-> self v-flags) (the-as vehicle-flag (logior (vehicle-flag dead lights-dead) (-> self v-flags))))
    (vehicle-method-126 self)
    (sound-play "car-bubbles")
    (vehicle-method-106 self)
    (vehicle-method-136 self)
    (vehicle-method-100 self)
    (let ((v1-21 (-> self rbody)))
      (set! (-> v1-21 linear-damping) 0.95)
      (set! (-> v1-21 angular-damping) 0.25)
      )
    (if (and (logtest? (vehicle-flag unique) (-> self v-flags))
             (not (logtest? (vehicle-flag player-killed) (-> self v-flags)))
             (-> *setting-control* user-current unique-vehicle-mission-critical)
             )
        (fail-mission)
        )
    )
  :code sleep-code
  :post (behavior ()
    (let ((v1-1 (-> self draw color-mult)))
      (let ((f0-1 (fmax 0.0 (- 1.0 (* 0.0033333334 (the float (- (current-time) (-> self state-time))))))))
        (set-vector! v1-1 f0-1 f0-1 f0-1 1.0)
        )
      (dotimes (a0-6 (-> self info physics-model wheel-count))
        (let ((a1-6 (handle->process (-> self wheel a0-6 handle))))
          (if a1-6
              (set! (-> (the-as process-drawable a1-6) draw color-mult quad) (-> v1-1 quad))
              )
          )
        )
      )
    (vehicle-explode-post)
    )
  )

;; failed to figure out what this is:
(defstate race-waiting (wvehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (wvehicle-method-195 self)
    (vehicle-method-140 self)
    (logior! (-> self v-flags) (vehicle-flag ignition))
    )
  :code sleep-code
  :post (behavior ()
    (vector-reset! (-> self target-acceleration))
    (logclear! (-> self v-flags) (vehicle-flag player-impulse-force player-contact-force))
    (let ((v1-3 (-> self rbody)))
      (set! (-> v1-3 force quad) (the-as uint128 0))
      (set! (-> v1-3 torque quad) (the-as uint128 0))
      )
    0
    (reset-momentum! (-> self rbody))
    (rigid-body-object-method-30 self)
    (vehicle-method-115 self)
    )
  )

;; failed to figure out what this is:
(defstate race-racing (wvehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logior! (-> self v-flags) (vehicle-flag riding ai-driving ignition))
    (set! (-> self controls throttle) 0.0)
    (set! (-> self controls brake) 0.0)
    (set! (-> self controls steering) 0.0)
    (set! (-> self control-hook)
          (the-as (function vehicle vehicle-controls) (method-of-object self wvehicle-method-177))
          )
    )
  :exit (behavior ()
    (logclear! (-> self v-flags) (vehicle-flag waiting-for-player))
    (let ((v1-3 (find-prim-by-id-logtest (-> self root) (the-as uint 32))))
      (when v1-3
        (set! (-> v1-3 prim-core collide-with) (collide-spec
                                                 backgnd
                                                 bot
                                                 crate
                                                 civilian
                                                 enemy
                                                 obstacle
                                                 vehicle-sphere
                                                 hit-by-player-list
                                                 hit-by-others-list
                                                 collectable
                                                 pusher
                                                 shield
                                                 vehicle-sphere-no-probe
                                                 )
              )
        (set! (-> v1-3 prim-core collide-as) (collide-spec vehicle-sphere))
        )
      )
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (wvehicle-method-182 self)
    )
  )

;; failed to figure out what this is:
(defstate race-finished (wvehicle)
  :virtual #t
  :event vehicle-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logior! (-> self v-flags) (vehicle-flag persistent riding nav-spheres))
    (set! (-> self controls throttle) 0.0)
    (set! (-> self controls brake) 0.0)
    (set! (-> self controls steering) 0.0)
    )
  :trans #f
  :code sleep-code
  :post (behavior ()
    (wvehicle-method-185 self)
    )
  )

;; failed to figure out what this is:
(defstate die (wvehicle)
  :virtual #t
  :code (behavior ()
    (cleanup-for-death self)
    )
  )




