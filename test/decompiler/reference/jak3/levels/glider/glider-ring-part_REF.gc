;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *hanga-sprite-texture-anim-array*, type texture-anim-array
(define *hanga-sprite-texture-anim-array*
  (new 'static 'texture-anim-array :type texture-anim
    (new 'static 'texture-anim
      :num-layers #x11
      :func #f
      :init-func-id 'texture-anim-overide-size-init
      :tex #f
      :tex-name "glider-ring-dest2"
      :extra (new 'static 'vector :x 128.0 :y 128.0 :z 1.0)
      :color (new 'static 'rgba :a #x80)
      :frame-delta 300.0
      :frame-mod 150.0
      :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
      :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
      :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
      :data (new 'static 'array texture-anim-layer 18
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 25.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.9166667 0.9166667))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 25.0
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.9166667 0.9166667))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 25.0
          :end-time 50.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -1.0 -1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 70)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.875 -0.875))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 70)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 50.0
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.875 -0.875))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 70)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.2)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.375 -0.375))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 70)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 25.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.2)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.375 -0.375))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 70)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.25 -0.25))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 70)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 50.0
          :end-time 75.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 115)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.8833334 0.8833334))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 115)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 75.0
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.8833334 0.8833334))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 115)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.4)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.55 0.55))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 115)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 50.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.4)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.55 0.55))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 115)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.33333334 0.33333334))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 115)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 75.0
          :end-time 100.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -1.0 -1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 185)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.93333334 -0.93333334))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 185)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 100.0
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.93333334 -0.93333334))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 185)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.6)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.8 -0.8))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 185)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 75.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.6)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.8 -0.8))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 185)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.5833333 -0.5833333))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 185)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 100.0
          :end-time 125.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 249.99998)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.94166666 0.94166666))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 249.99998)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 125.0
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.94166666 0.94166666))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 249.99998)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.8)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.8833334 0.8833334))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 249.99998)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 100.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 0.8)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.8833334 0.8833334))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 249.99998)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 0.6666667 0.6666667))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 249.99998)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :start-time 125.0
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -1.0 -1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 305)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.9166667 -0.9166667))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 305)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 125.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
          :start-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.9166667 -0.9166667))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 305)
          :end-color (new 'static 'vector :x 0.078125 :y 0.5 :z 1.9921875)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 -0.5 -0.5))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 305)
          )
        (new 'static 'texture-anim-layer
          :func-id 'set-alpha-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 150.0
          :tex-name "splash-foam"
          :test (new 'static 'gs-test :ate #x1 :afail #x3 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
          :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        )
      )
    (new 'static 'texture-anim
      :num-layers #x3
      :func #f
      :init-func-id 'texture-anim-overide-size-init
      :tex #f
      :tex-name "glider-ring-dest"
      :extra (new 'static 'vector :x 128.0 :y 128.0 :z 1.0)
      :color (new 'static 'rgba :a #x80)
      :frame-delta 300.0
      :frame-mod 9000.0
      :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
      :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
      :clamp (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp))
      :data (new 'static 'array texture-anim-layer 6
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 9000.0
          :tex-name "glider-ring-dest2"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 9000.0
          :tex-name "racegate"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :start-color (new 'static 'vector :x 0.5 :y 0.625 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 0.5 :y 0.625 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-rot (degrees 360)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 9000.0
          :tex-name "racegate"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :start-color (new 'static 'vector :x 0.5 :y 0.625 :z 1.9921875 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 -1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-rot (degrees 360)
          :end-color (new 'static 'vector :x 0.5 :y 0.625 :z 1.9921875 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 -1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        )
      )
    )
  )

;; failed to figure out what this is:
(defpartgroup group-glider-ring
  :id 652
  :duration (seconds 218.45)
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2536 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2536 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2536 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2536 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2536 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2536 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2537 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    (sp-item 2537 :fade-after (meters 400) :falloff-to (meters 2000) :flags (is-3d sp7))
    )
  )

;; failed to figure out what this is:
(defpart 2536
  :init-specs ((:texture (racegate hanga-sprite))
    (:num 1.0)
    (:scale-x (meters 16.5))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 80.0)
    (:b 255.0)
    (:a 64.0)
    (:rotvel-y (degrees 0.026666665) (degrees 0.033333335))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90) 1 (degrees 180))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

;; failed to figure out what this is:
(defpart 2537
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.0 0.5)
    (:scale-x (meters 16.5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 10.0)
    (:g 0.0 64.0)
    (:b 255.0)
    (:a 0.0)
    (:scalevel-x (meters -0.093333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 6.4)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.067))
    (:next-launcher 2538)
    (:rotate-x (degrees -90))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

;; failed to figure out what this is:
(defpart 2538
  :init-specs ((:fade-a -1.28))
  )

;; failed to figure out what this is:
(defpartgroup group-glider-ring-shootable
  :id 653
  :duration (seconds 218.45)
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2539 :flags (is-3d sp7))
    (sp-item 2539 :flags (is-3d sp7))
    (sp-item 2539 :flags (is-3d sp7))
    (sp-item 2539 :flags (is-3d sp7))
    (sp-item 2539 :flags (is-3d sp7))
    (sp-item 2539 :flags (is-3d sp7))
    (sp-item 2540 :flags (is-3d sp7))
    (sp-item 2540 :flags (is-3d sp7))
    )
  )

;; failed to figure out what this is:
(defpart 2539
  :init-specs ((:texture (racegate hanga-sprite))
    (:num 1.0)
    (:scale-x (meters 16.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 80.0)
    (:b 40.0)
    (:a 64.0)
    (:rotvel-y (degrees 0.026666665) (degrees 0.033333335))
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90) 1 (degrees 180))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

;; failed to figure out what this is:
(defpart 2540
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 0.0 0.5)
    (:scale-x (meters 16.5) (meters 1))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 0.0 64.0)
    (:b 10.0)
    (:a 0.0)
    (:scalevel-x (meters -0.093333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 6.4)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.067))
    (:next-launcher 2541)
    (:rotate-x (degrees -90))
    (:rotate-z (degrees -90) (degrees 180))
    )
  )

;; failed to figure out what this is:
(defpart 2541
  :init-specs ((:fade-a -1.28))
  )

;; failed to figure out what this is:
(defpartgroup group-distant-glider-ring
  :id 654
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2542 :flags (is-3d sp3 sp7)) (sp-item 2543 :flags (is-3d sp3 sp7)))
  )

;; failed to figure out what this is:
(defpart 2542
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 17))
    (:scale-y :copy scale-x)
    (:r 10.0)
    (:g 64.0)
    (:b 255.0)
    (:a 128.0)
    (:rotvel-y (degrees 1))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-track-root)
    (:rotate-x (degrees -90))
    )
  )

;; failed to figure out what this is:
(defpart 2543
  :init-specs ((:texture (splash-foam level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 17))
    (:scale-y :copy scale-x)
    (:r 10.0)
    (:g 64.0)
    (:b 255.0)
    (:a 128.0)
    (:rotvel-y (degrees -1))
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:func 'sparticle-track-root)
    (:rotate-x (degrees -90))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-glider-ring-explode
  :id 655
  :duration (seconds 0.067)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2544 :flags (is-3d sp6 sp7)) (sp-item 2545 :flags (sp6 sp7)))
  )

;; failed to figure out what this is:
(defpart 2544
  :init-specs ((:texture (middot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 16.5))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 128.0)
    (:fade-r -8.5)
    (:fade-g -4.25)
    (:fade-b 0.0)
    (:fade-a -2.1333334)
    (:timer (seconds 0.2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14))
    (:rotate-x (degrees -90))
    )
  )

;; failed to figure out what this is:
(defpart 2545
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 36))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 32.0)
    (:fade-r -17.0)
    (:fade-g -8.5)
    (:fade-b 0.0)
    (:fade-a -1.0666667)
    (:timer (seconds 0.1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 0.0)
    (:rotate-x (degrees -90))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-wind-thermal
  :id 656
  :flags (sp0)
  :bounds (static-bspherem 0 -50 0 50)
  :parts ((sp-item 2546 :fade-after (meters 1000) :falloff-to (meters 2000)))
  )

;; failed to figure out what this is:
(defpart 2546
  :init-specs ((:texture (big-cloud level-default-sprite))
    (:num 0.1)
    (:x (meters -20) (meters 40))
    (:y (meters -100) (meters 20))
    (:scale-x (meters 10) (meters 20))
    (:scale-y (meters 40) (meters 80))
    (:r 120.0)
    (:g 120.0)
    (:b 255.0)
    (:a 0.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:fade-a 0.256)
    (:timer (seconds 16.667))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 left-multiply-quat))
    (:next-time (seconds 1.667))
    (:next-launcher 2547)
    (:conerot-x (degrees -1) (degrees 2))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

;; failed to figure out what this is:
(defpart 2547
  :init-specs ((:fade-a 0.0) (:next-time (seconds 3.335) (seconds 3.33)) (:next-launcher 2548))
  )

;; failed to figure out what this is:
(defpart 2548
  :init-specs ((:fade-a -0.42666668 -0.42666668))
  )

;; failed to figure out what this is:
(defpartgroup group-glider-cloud
  :id 657
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 2549 :flags (sp3)))
  )

;; failed to figure out what this is:
(defpartgroup group-glider-cloud-shadow
  :id 658
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 2550 :flags (is-3d sp3 sp7)))
  )

;; failed to figure out what this is:
(defpart 2549
  :init-specs ((:texture (big-cloud level-default-sprite))
    (:birth-func 'birth-func-fader)
    (:num 15.0)
    (:x (meters -20) (meters 40))
    (:y (meters -8) (meters 16))
    (:z (meters -20) (meters 40))
    (:scale-x (meters 10) (meters 20))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 200.0)
    (:g 200.0)
    (:b 200.0)
    (:a 32.0 64.0)
    (:timer (seconds -0.005))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata 1228800.0)
    (:func 'sparticle-cloud-update)
    )
  )

;; failed to figure out what this is:
(defpart 2550
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:birth-func 'birth-func-fader)
    (:num 1.0)
    (:scale-x (meters 10) (meters 25))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 10.0)
    (:b 10.0)
    (:a 255.0)
    (:timer (seconds -0.005))
    (:userdata 1228800.0)
    (:func 'sparticle-shadow-update)
    (:rotate-y (degrees 0))
    )
  )

;; definition for function cloud-shadow-find-ground
;; INFO: Used lq/sq
(defun cloud-shadow-find-ground ((arg0 vector) (arg1 matrix) (arg2 vector) (arg3 vector))
  (let ((s3-0 (new 'stack-no-clear 'collide-query))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 start-pos quad) (-> arg0 quad))
    (set! (-> s3-0 move-dist quad) (the-as uint128 0))
    (set! (-> s3-0 move-dist y) -2048000.0)
    (let ((v1-3 s3-0))
      (set! (-> v1-3 radius) 40.96)
      (set! (-> v1-3 collide-with) (collide-spec backgnd))
      (set! (-> v1-3 ignore-process0) #f)
      (set! (-> v1-3 ignore-process1) #f)
      (set! (-> v1-3 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> v1-3 action-mask) (collide-action solid))
      )
    (cond
      ((>= (fill-and-probe-using-line-sphere *collide-cache* s3-0) 0.0)
       (set! (-> s4-0 quad) (-> s3-0 best-other-tri normal quad))
       (set! (-> arg0 y) (-> s3-0 best-other-tri intersect y))
       )
      (else
        (set! (-> s4-0 quad) (-> *up-vector* quad))
        (set! (-> arg0 y) (get-base-height *ocean-map*))
        )
      )
    (matrix-u-compose arg1 s4-0 arg2 arg3)
    )
  (+! (-> arg0 y) 8192.0)
  (set! (-> arg1 trans quad) (-> arg0 quad))
  (set! (-> arg1 rvec w) 0.0)
  (set! (-> arg1 uvec w) 0.0)
  (set! (-> arg1 fvec w) 0.0)
  (set! (-> arg1 trans w) 1.0)
  )

;; definition for function birth-func-fader
;; WARN: Return type mismatch float vs none.
(defun birth-func-fader ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (set! (-> arg1 omega) (-> arg2 coneradius))
  (set! (-> arg2 coneradius) 1.0)
  (none)
  )

;; definition for function sparticle-fader
;; WARN: Return type mismatch int vs none.
(defun sparticle-fader ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  0.0
  0.0
  (let ((a1-1 (new 'stack-no-clear 'vector)))
    (set! (-> a1-1 x) (-> arg2 launchrot x))
    (set! (-> a1-1 y) (-> arg2 launchrot y))
    (set! (-> a1-1 z) (-> arg2 launchrot z))
    (set! (-> a1-1 w) 1.0)
    (when *target*
      (let ((f0-6 (vector-vector-distance (-> *target* control trans) a1-1)))
        (set! (-> arg2 coneradius) (if (< f0-6 (-> arg1 user-float))
                                       (* (- 1.0 (/ f0-6 (-> arg1 user-float))) (-> arg1 omega))
                                       0.0
                                       )
              )
        )
      )
    )
  0
  (none)
  )

;; definition for function sparticle-cloud-update
(defun sparticle-cloud-update ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 sparticle-launchinfo))
  (let ((s3-0 (new 'stack-no-clear 'vector)))
    (set! (-> s3-0 x) (-> arg2 launchrot x))
    (set! (-> s3-0 y) (-> arg2 launchrot y))
    (set! (-> s3-0 z) (-> arg2 launchrot z))
    (set! (-> s3-0 w) 1.0)
    (when (not (inside-cloudbox? s3-0))
      (move-pos-inside-cloudbox! s3-0)
      (set! (-> arg2 launchrot x) (-> s3-0 x))
      (set! (-> arg2 launchrot y) (-> s3-0 y))
      (set! (-> arg2 launchrot z) (-> s3-0 z))
      (-> arg2 launchrot)
      )
    )
  (sparticle-fader arg0 arg1 arg2)
  (none)
  )

;; definition for function sparticle-shadow-update
(defun sparticle-shadow-update ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector) (arg3 vector))
  (let ((s4-0 arg2))
    (let ((s3-0 (new 'stack-no-clear 'vector)))
      (set! (-> s3-0 x) (-> s4-0 x))
      (set! (-> s3-0 y) (-> s4-0 y))
      (set! (-> s3-0 z) (-> s4-0 z))
      (set! (-> s3-0 w) 1.0)
      (let ((s2-0 (new 'stack-no-clear 'matrix)))
        (new 'stack-no-clear 'vector)
        (when (not (inside-cloudbox-xz? s3-0))
          (move-pos-inside-cloudbox! s3-0)
          (cloud-shadow-find-ground s3-0 s2-0 arg2 arg3)
          (set! (-> s4-0 x) (-> s3-0 x))
          (set! (-> s4-0 y) (-> s3-0 y))
          (set! (-> s4-0 z) (-> s3-0 z))
          (&-> s4-0 x)
          )
        )
      )
    (sparticle-fader arg0 arg1 (the-as sparticle-launchinfo s4-0))
    )
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-volcano-smoke
  :id 659
  :flags (sp0 sp4 sp11)
  :bounds (static-bspherem 0 0 0 1000)
  :parts ((sp-item 2551 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7)))
  )

;; failed to figure out what this is:
(defpart 2551
  :init-specs ((:texture (topglow level-default-sprite))
    (:num 0.001 0.05)
    (:x (meters -10) (meters 20))
    (:y (meters -30))
    (:z (meters -10) (meters 20))
    (:scale-x (meters 40) (meters 10))
    (:rot-z (degrees 160) (degrees 40))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 100.0)
    (:b 10.0)
    (:a 0.0)
    (:vel-y (meters 0.1))
    (:scalevel-x (meters 0.006666667) (meters 0.033333335))
    (:rotvel-z (degrees -0.033333335) (degrees 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.13333334 0.26666668)
    (:accel-x (meters 0.00016666666))
    (:friction 0.997)
    (:timer (seconds 166.67))
    (:flags (sp-cpuinfo-flag-2 launch-along-z))
    (:next-time (seconds 1))
    (:next-launcher 2552)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 2552
  :init-specs ((:scalevel-x (meters 0.026666667) (meters 0.013333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.0)
    (:next-time (seconds 2))
    (:next-launcher 2553)
    )
  )

;; failed to figure out what this is:
(defpart 2553
  :init-specs ((:scalevel-x (meters 0.016666668) (meters 0.01))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.14222223)
    (:fade-g 0.031111112)
    (:fade-b 0.13111112)
    (:next-time (seconds 2))
    (:next-launcher 2554)
    )
  )

;; failed to figure out what this is:
(defpart 2554
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.006 -0.0024))
  )




