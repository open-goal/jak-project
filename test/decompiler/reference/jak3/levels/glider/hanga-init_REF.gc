;;-*-Lisp-*-
(in-package goal)

;; definition for function hanga-login
;; WARN: Return type mismatch int vs none.
(defun hanga-login ((arg0 level))
  (format 0 "hanga-login~%")
  0
  (none)
  )

;; definition for function hanga-activate
;; WARN: Return type mismatch int vs none.
(defun hanga-activate ((arg0 level))
  (format 0 "hanga-activate~%")
  (let ((v1-0 *traffic-info*))
    (set! (-> v1-0 vehicle-level) arg0)
    (set! (-> v1-0 vehicle-levels 9) (-> arg0 name))
    )
  (vehicle-manager-start (the-as process *entity-pool*))
  0
  (none)
  )

;; definition for function hanga-deactivate
;; WARN: Return type mismatch int vs none.
(defun hanga-deactivate ((arg0 level))
  (format 0 "hanga-deactivate~%")
  0
  (none)
  )

;; definition for symbol *hanga-water-texture-anim-array*, type texture-anim-array
(define *hanga-water-texture-anim-array*
  (new 'static 'texture-anim-array :type texture-anim
    (new 'static 'texture-anim
      :num-layers #x3
      :func #f
      :init-func-id 'texture-anim-overide-size-init
      :tex #f
      :tex-name "des-thermal-01-dest"
      :extra (new 'static 'vector :x 128.0 :y 64.0 :z 1.0)
      :color (new 'static 'rgba :a #x80)
      :frame-delta 300.0
      :frame-mod 1200.0
      :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
      :alpha (new 'static 'gs-alpha :b #x1 :d #x1)
      :data (new 'static 'array texture-anim-layer 6
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 1200.0
          :tex-name "des-thermal-01"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.0 -0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 -1.0 -0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 1200.0
          :tex-name "des-thermal-01"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 -0.5 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 -2.5 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        (new 'static 'texture-anim-layer
          :func-id 'default-texture-anim-layer-func
          :init-func #f
          :tex #f
          :end-time 1200.0
          :tex-name "des-thermal-01"
          :test (new 'static 'gs-test :ate #x1 :afail #x1 :zte #x1 :ztst (gs-ztest always))
          :alpha (new 'static 'gs-alpha :b #x2 :d #x1)
          :start-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :start-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :start-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :start-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 -0.25 0.5))
          :start-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-color (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          :end-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-offset (new 'static 'vector2 :data (new 'static 'array float 2 0.5 0.5))
          :end-st-scale (new 'static 'vector2 :data (new 'static 'array float 2 1.0 1.0))
          :end-st-offset (new 'static 'vector2 :data (new 'static 'array float 2 -3.25 0.5))
          :end-qs (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
          )
        )
      )
    )
  )




