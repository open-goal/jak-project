;;-*-Lisp-*-
(in-package goal)

;; definition of type eco-green-board-hint
(deftype eco-green-board-hint (process)
  ((state-time  time-frame)
   )
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type eco-green-board-hint
(defmethod inspect ((this eco-green-board-hint))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Tstate-time: ~D~%" (-> this state-time))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (eco-green-board-hint)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (let ((gp-0
            (new 'stack 'font-context *font-default-matrix* 20 320 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (let ((v1-1 gp-0))
        (set! (-> v1-1 width) (the float 500))
        )
      (let ((v1-2 gp-0))
        (set! (-> v1-2 height) (the float 80))
        )
      (let ((v1-3 gp-0))
        (set! (-> v1-3 scale) 0.7)
        )
      (set! (-> gp-0 flags) (font-flags shadow kerning large))
      (print-game-text
        (lookup-text! *common-text* (text-id text-044f) #f)
        gp-0
        #f
        44
        (bucket-id hud-draw-hud-alpha)
        )
      )
    )
  :code (behavior ()
    (until (time-elapsed? (-> self state-time) (seconds 5))
      (suspend)
      )
    )
  )

;; definition for function eco-green-board-hint-init-by-other
(defbehavior eco-green-board-hint-init-by-other eco-green-board-hint ((arg0 entity-actor))
  (process-entity-set! self arg0)
  (go-virtual idle)
  )

;; definition of type mh-plant
(deftype mh-plant (process-focusable)
  ((root            collide-shape-moving :override)
   (attack-id       uint32)
   (sound-id        sound-id)
   (sub-state       uint32)
   (sub-state-time  time-frame)
   )
  (:state-methods
    pop-up
    idle
    repopulate
    die
    )
  (:methods
    (init-collision! (_type_) none)
    (spawn-board-hint (_type_) none)
    (init! (_type_ entity-actor) none)
    (try-repopulate (_type_) none)
    (toggle-dead (_type_) none)
    )
  )

;; definition for method 3 of type mh-plant
(defmethod inspect ((this mh-plant))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tattack-id: ~D~%" (-> this attack-id))
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (format #t "~2Tsub-state: ~D~%" (-> this sub-state))
  (format #t "~2Tsub-state-time: ~D~%" (-> this sub-state-time))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-mh-plant mh-plant mh-plant-lod0-jg mh-plant-idle-ja
              ((mh-plant-lod0-mg (meters 20)) (mh-plant-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :origin-joint-index 3
              )

;; definition for function mh-plant-event-handler
(defbehavior mh-plant-event-handler mh-plant ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('green-eco-attack)
     (go-virtual die)
     )
    (('attack 'touch)
     (when (or (= arg2 'touch) (case (-> (the-as attack-info (-> arg3 param 1)) mode)
                                 (('board 'board-spin)
                                  #f
                                  )
                                 (else
                                   #t
                                   )
                                 )
               )
       (let* ((s5-0 arg0)
              (a0-2 (if (type? s5-0 process-focusable)
                        s5-0
                        )
                    )
              )
         (if a0-2
             (send-event
               a0-2
               'attack
               (-> arg3 param 0)
               (static-attack-info
                 :mask (vehicle-impulse-factor)
                 ((id (-> self attack-id))
                  (damage 2.0)
                  (vehicle-damage-factor 1.0)
                  (vehicle-impulse-factor 1.0)
                  (mode 'generic)
                  (shove-back (meters 3))
                  (shove-up (meters 3))
                  (control (if (focus-test? (the-as process-focusable a0-2) board)
                               1.0
                               0.0
                               )
                           )
                  )
                 )
               )
             )
         )
       )
     )
    )
  )

;; failed to figure out what this is:
(defstate pop-up (mh-plant)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('event-sprout)
       (sound-play "plant-sprout")
       (cond
         ((logtest? (-> *part-group-id-table* 571 flags) (sp-group-flag sp13))
          (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
          (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 571))
          )
         (else
           (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
           (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 571))
           )
         )
       )
      (('event-go-idle)
       (go-virtual idle)
       )
      )
    )
  :enter (behavior ()
    (set! (-> self sub-state) (the-as uint 0))
    (set! (-> self sub-state-time)
          (- (current-time) (the-as time-frame (the int (* 300.0 (rand-vu-float-range 0.0 0.35)))))
          )
    )
  :trans (behavior ()
    (let ((v1-0 (-> self sub-state)))
      (cond
        ((zero? v1-0)
         (when (time-elapsed? (-> self sub-state-time) (seconds 1))
           (toggle-dead self)
           (ja-no-eval :group! mh-plant-pop-up-ja :num! (seek!) :frame-num 0.0)
           (ja-post)
           (+! (-> self sub-state) 1)
           )
         )
        ((= v1-0 1)
         (cond
           ((ja-done? 0)
            (go-virtual idle)
            )
           (else
             (ja :num! (seek!))
             (ja-post)
             )
           )
         )
        )
      )
    )
  :code sleep-code
  )

;; failed to figure out what this is:
(defstate idle (mh-plant)
  :virtual #t
  :event mh-plant-event-handler
  :enter (behavior ()
    (set-time! (-> self state-time))
    (+! (-> self state-time) (rand-vu-int-range 0 (seconds 1)))
    (ja-channel-push! 1 (seconds 0.035))
    )
  :trans (behavior ()
    (try-repopulate self)
    (if (nonzero? (-> self part))
        (spawn (-> self part) (-> self root trans))
        )
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! mh-plant-idle-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (spawn-board-hint self)
    (ja-post)
    )
  )

;; failed to figure out what this is:
(defstate repopulate (mh-plant)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('event-pop)
       (sound-play "plant-pop")
       (cond
         ((logtest? (-> *part-group-id-table* 576 flags) (sp-group-flag sp13))
          (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
          (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 576))
          )
         (else
           (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
           (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 576))
           )
         )
       )
      (else
        (mh-plant-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self sub-state) (the-as uint 0))
    (set-time! (-> self sub-state-time))
    )
  :trans (behavior ()
    (try-repopulate self)
    (let ((v1-2 (-> self sub-state)))
      (cond
        ((zero? v1-2)
         (ja-channel-push! 1 (seconds 0.167))
         (ja-no-eval :group! mh-plant-idle-ja :num! (seek!) :frame-num 0.0)
         (+! (-> self sub-state) 1)
         )
        ((= v1-2 1)
         (cond
           ((time-elapsed? (-> self sub-state-time) (seconds 4))
            (cond
              ((logtest? (-> *part-group-id-table* 575 flags) (sp-group-flag sp13))
               (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
               (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 575))
               )
              (else
                (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
                (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 575))
                )
              )
            (sound-play "plant-throb")
            (ja-channel-push! 1 (seconds 0.167))
            (ja-no-eval :group! mh-plant-throb-ja :num! (seek!) :frame-num 0.0)
            (+! (-> self sub-state) 1)
            )
           (else
             (ja :num! (seek!))
             (if (ja-done? 0)
                 (ja-no-eval :group! mh-plant-idle-ja :num! (seek!) :frame-num 0.0)
                 )
             )
           )
         )
        ((= v1-2 2)
         (cond
           ((ja-done? 0)
            (ja-channel-push! 1 (seconds 0.167))
            (ja-no-eval :group! mh-plant-swell-ja :num! (seek!) :frame-num 0.0)
            (+! (-> self sub-state) 1)
            )
           (else
             (ja :num! (seek!))
             )
           )
         )
        ((= v1-2 3)
         (cond
           ((ja-done? 0)
            (toggle-dead self)
            (go-virtual idle)
            )
           (else
             (ja :num! (seek!))
             )
           )
         )
        )
      )
    )
  :code sleep-code
  :post ja-post
  )

;; failed to figure out what this is:
(defstate die (mh-plant)
  :virtual #t
  :enter (behavior ()
    (cond
      ((logtest? (-> *part-group-id-table* 574 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 574))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 574))
        )
      )
    (sound-play "kill-plants")
    (ja-channel-push! 1 (seconds 0.05))
    )
  :exit (behavior ()
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer self))
      (set! (-> a1-0 num-params) 0)
      (set! (-> a1-0 message) 'mh-plant-death)
      (let ((t9-0 send-event-function)
            (v1-4 (-> *game-info* sub-task-list (game-task-node forest-kill-plants-pillars)))
            )
        (t9-0
          (handle->process (if (-> v1-4 manager)
                               (-> v1-4 manager manager)
                               (the-as handle #f)
                               )
                           )
          a1-0
          )
        )
      )
    )
  :code (behavior ()
    (ja-no-eval :group! mh-plant-burrow-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (process-entity-status! self (entity-perm-status subtask-complete) #t)
    (cleanup-for-death self)
    )
  :post ja-post
  )

;; definition for method 36 of type mh-plant
;; WARN: Return type mismatch symbol vs none.
(defmethod toggle-dead ((this mh-plant))
  (let ((s5-0 (entity-actor-count (-> this entity) 'alt-actor)))
    (dotimes (s4-0 s5-0)
      (let ((a0-3 (entity-actor-lookup (-> this entity) 'alt-actor s4-0)))
        (if (logtest? (-> a0-3 extra perm status) (entity-perm-status subtask-complete))
            (toggle-status a0-3 (entity-perm-status dead) #f)
            )
        )
      )
    )
  (none)
  )

;; definition for method 35 of type mh-plant
;; WARN: Return type mismatch time-frame vs none.
(defmethod try-repopulate ((this mh-plant))
  (when (time-elapsed? (-> this state-time) (seconds 1))
    (let ((s5-0 #t)
          (s3-0 0)
          (s4-0 0)
          )
      (let ((s2-0 (entity-actor-count (-> this entity) 'alt-actor)))
        (dotimes (s1-0 s2-0)
          (cond
            ((logtest? (-> (entity-actor-lookup (-> this entity) 'alt-actor s1-0) extra perm status)
                       (entity-perm-status subtask-complete)
                       )
             (+! s4-0 1)
             )
            (else
              (set! s5-0 #f)
              (+! s3-0 1)
              )
            )
          )
        )
      (cond
        ((and (> s3-0 0) (and (> s4-0 0) (not (and (-> this next-state) (= (-> this next-state name) 'repopulate)))))
         (go (method-of-object this repopulate))
         )
        (s5-0
          (go (method-of-object this die))
          )
        )
      )
    (set-time! (-> this state-time))
    )
  (none)
  )

;; definition for method 33 of type mh-plant
;; WARN: Return type mismatch int vs none.
(defmethod spawn-board-hint ((this mh-plant))
  (let* ((v1-2 (-> *game-info* sub-task-list (game-task-node forest-kill-plants-pillars)))
         (v1-4 (if (-> v1-2 manager)
                   (-> v1-2 manager manager)
                   (the-as handle #f)
                   )
               )
         )
    (when (handle->process v1-4)
      (let ((s5-0 (-> v1-4 process 0)))
        (when (and s5-0
                   (send-event s5-0 'displayed-hint? #f)
                   (can-display-query? this "dark-eco-plant" -99.0)
                   (and *target* (and (>= 102400.0 (vector-vector-distance (-> this root trans) (-> *target* control trans)))
                                      (not (logtest? (focus-status teleporting) (-> *target* focus-status)))
                                      )
                        )
                   (focus-test? *target* board)
                   (< 0.0 (-> *target* fact eco-green))
                   )
          (process-spawn eco-green-board-hint (-> this entity) :name "eco-green-board-hint" :to this)
          (send-event s5-0 'displayed-hint? #t)
          )
        )
      )
    )
  0
  (none)
  )

;; definition for method 32 of type mh-plant
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this mh-plant))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate board))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 1) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 2))
      (set! (-> s4-0 prim-core collide-as) (collide-spec obstacle))
      (set! (-> s4-0 prim-core action) (collide-action solid no-standon))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) 0.0 -6144.0 0.0 12288.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-13 prim-core action) (collide-action solid no-standon))
      (set! (-> v1-13 transform-index) 3)
      (set-vector! (-> v1-13 local-sphere) 0.0 -6144.0 0.0 8192.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-16 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-16 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-16 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 34 of type mh-plant
;; WARN: Return type mismatch sound-id vs none.
(defmethod init! ((this mh-plant) (arg0 entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-mh-plant" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (set! (-> this root pause-adjust-distance) 614400.0)
  (let ((f30-0 (rand-vu-float-range 1.0 2.0)))
    (let ((f0-3 (* 182.04445 (the float (rand-vu-int-range 0 360))))
          (s5-2 (-> this root root-prim))
          )
      (quaternion-rotate-local-y! (-> this root quat) (-> this root quat) f0-3)
      (set-vector! (-> this root scale) f30-0 f30-0 f30-0 1.0)
      (set! (-> this root root-prim local-sphere w) (* (-> this root root-prim local-sphere w) f30-0))
      (dotimes (v1-17 (the-as int (-> s5-2 specific 0)))
        (set! (-> (the-as collide-shape-prim-group s5-2) child v1-17 local-sphere w)
              (* (-> (the-as collide-shape-prim-group s5-2) child v1-17 local-sphere w) f30-0)
              )
        )
      )
    (set! (-> this draw bounds w) (* (-> this draw bounds w) f30-0))
    )
  (let* ((v1-23 *game-info*)
         (a0-15 (+ (-> v1-23 attack-id) 1))
         )
    (set! (-> v1-23 attack-id) a0-15)
    (set! (-> this attack-id) a0-15)
    )
  (set! (-> this sound-id) (new-sound-id))
  (none)
  )

;; definition for method 11 of type mh-plant
(defmethod init-from-entity! ((this mh-plant) (arg0 entity-actor))
  (stack-size-set! (-> this main-thread) 16)
  (init! this arg0)
  (cond
    ((logtest? (-> arg0 extra perm status) (entity-perm-status subtask-complete))
     (toggle-status arg0 (entity-perm-status subtask-complete) #f)
     (go (method-of-object this pop-up))
     )
    (else
      (go (method-of-object this idle))
      )
    )
  )




