;;-*-Lisp-*-
(in-package goal)

;; definition of type sew-plat-updown
(deftype sew-plat-updown (base-plat)
  ((sync      sync-eased  :inline)
   (path-pos  float)
   )
  (:state-methods
    idle
    active
    )
  (:methods
    (get-skel (_type_) art-group)
    )
  )

;; definition for method 3 of type sew-plat-updown
(defmethod inspect ((this sew-plat-updown))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsync: #<sync-eased @ #x~X>~%" (-> this sync))
  (format #t "~2Tpath-pos: ~f~%" (-> this path-pos))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (sew-plat-updown)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object) eco-door-event-handler)
  :code sleep-code
  :post ja-post
  )

;; failed to figure out what this is:
(defstate active (sew-plat-updown)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (plat-event proc argc message block)
    )
  :trans (behavior ()
    (set! (-> self path-pos) (get-norm! (-> self sync) 0))
    (get-point-at-percent-along-path! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
    (plat-trans)
    )
  :code (behavior ()
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post plat-post
  )

;; definition for method 34 of type sew-plat-updown
;; WARN: Return type mismatch int vs none.
(defmethod base-plat-method-34 ((this sew-plat-updown))
  0
  (none)
  )

;; definition for method 11 of type sew-plat-updown
(defmethod init-from-entity! ((this sew-plat-updown) (arg0 entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this (the-as skeleton-group (get-skel this)) (the-as pair 0))
  (let ((a0-5 (-> this skel root-channel 0)))
    (set! (-> a0-5 frame-group) (if (> (-> this skel active-channels) 0)
                                    (-> this skel root-channel 0 frame-group)
                                    )
          )
    (set! (-> a0-5 param 0) 1.0)
    (set! (-> a0-5 frame-num) 0.0)
    (joint-control-channel-group!
      a0-5
      (if (> (-> this skel active-channels) 0)
          (-> this skel root-channel 0 frame-group)
          )
      num-func-loop!
      )
    )
  (ja-post)
  (set! (-> this path) (new 'process 'path-control this 'path 0.0 arg0 #f))
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this fact)
        (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-eco-pill-green-inc))
        )
  (let ((a1-6 (new 'stack-no-clear 'sync-info-params)))
    (let ((v1-24 0))
      (if (not (logtest? (-> this fact options) (actor-option loop)))
          (set! v1-24 (logior v1-24 1))
          )
      (set! (-> a1-6 sync-type) 'sync-eased)
      (set! (-> a1-6 sync-flags) (the-as sync-flags v1-24))
      )
    (set! (-> a1-6 period) (the-as uint 1800))
    (set! (-> a1-6 entity) arg0)
    (set! (-> a1-6 percent) 0.0)
    (set! (-> a1-6 ease-in) 0.15)
    (set! (-> a1-6 ease-out) 0.15)
    (set! (-> a1-6 pause-in) 0.2)
    (set! (-> a1-6 pause-out) 0.0)
    (initialize! (-> this sync) a1-6)
    )
  (base-plat-method-34 this)
  (cond
    ((logtest? (-> this path flags) (path-control-flag not-found))
     (go (method-of-object this idle))
     )
    ((> (-> this sync period) 0)
     (go (method-of-object this active))
     )
    (else
      (go (method-of-object this idle))
      )
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-sew-slide-step sew-slide-step sew-slide-step-lod0-jg sew-slide-step-idle-ja
              ((sew-slide-step-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 9)
              )

;; definition of type sew-slide-step
(deftype sew-slide-step (sew-plat-updown)
  ((last-played-start?  symbol)
   )
  )

;; definition for method 3 of type sew-slide-step
(defmethod inspect ((this sew-slide-step))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type sew-plat-updown inspect)))
    (t9-0 this)
    )
  (format #t "~2Tlast-played-start?: ~A~%" (-> this last-played-start?))
  (label cfg-4)
  this
  )

;; definition for method 37 of type sew-slide-step
(defmethod get-skel ((this sew-slide-step))
  (art-group-get-by-name *level* "skel-sew-slide-step" (the-as (pointer level) #f))
  )

;; failed to figure out what this is:
(defstate active (sew-slide-step)
  :virtual #t
  :enter (behavior ()
    (set! (-> self last-played-start?) #f)
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    )
  :trans (behavior ()
    (let ((t9-1 (-> (find-parent-state) trans)))
      (if t9-1
          (t9-1)
          )
      )
    (cond
      ((and (-> self last-played-start?) (< 0.9 (-> self path-pos)))
       (sound-play "moving-step-out")
       (set! (-> self last-played-start?) #f)
       )
      ((and (not (-> self last-played-start?)) (< (-> self path-pos) 0.1))
       (set! (-> self last-played-start?) #t)
       (sound-play "moving-step-in")
       )
      )
    )
  )

;; definition for method 32 of type sew-slide-step
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this sew-slide-step))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid semi-solid rideable pull-rider-can-collide))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 32768.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defskelgroup skel-sew-moving-step-a sew-moving-step-a sew-moving-step-a-lod0-jg sew-moving-step-a-idle-ja
              ((sew-moving-step-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 6 0 4)
              )

;; definition of type sew-moving-step-a
(deftype sew-moving-step-a (sew-plat-updown)
  ((last-played-start?  symbol)
   (last-val            float)
   )
  )

;; definition for method 3 of type sew-moving-step-a
(defmethod inspect ((this sew-moving-step-a))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type sew-plat-updown inspect)))
    (t9-0 this)
    )
  (format #t "~2Tlast-played-start?: ~A~%" (-> this last-played-start?))
  (format #t "~2Tlast-val: ~f~%" (-> this last-val))
  (label cfg-4)
  this
  )

;; definition for method 34 of type sew-moving-step-a
;; WARN: Return type mismatch sparticle-launch-control vs none.
(defmethod base-plat-method-34 ((this sew-moving-step-a))
  (call-parent-method this)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 1496) this))
  (none)
  )

;; definition for method 28 of type sew-moving-step-a
;; WARN: Return type mismatch int vs none.
(defmethod update-part-and-sfx! ((this sew-moving-step-a))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate active (sew-moving-step-a)
  :virtual #t
  :enter (behavior ()
    (set! (-> self last-played-start?) #f)
    (let ((t9-1 (-> (find-parent-state) enter)))
      (if t9-1
          (t9-1)
          )
      )
    (set! (-> self last-val) -1.0)
    )
  :trans (behavior ()
    (let ((t9-1 (-> (find-parent-state) trans)))
      (if t9-1
          (t9-1)
          )
      )
    (when (< (-> self path-pos) 0.5)
      (new 'stack-no-clear 'vector)
      (let ((gp-0 (new 'stack-no-clear 'matrix)))
        (let ((s5-0 (new 'stack-no-clear 'quaternion)))
          (quaternion-copy! s5-0 (-> self entity quat))
          (quaternion->matrix gp-0 s5-0)
          )
        (set! (-> gp-0 trans quad) (-> self entity extra trans quad))
        (+! (-> gp-0 trans y) 20480.0)
        (spawn-from-mat (-> self part) gp-0)
        )
      )
    (if (and (< 0.65 (-> self last-val)) (>= 0.65 (-> self path-pos)))
        (sound-play "mv-stp-a-splash")
        )
    (if (and (< (-> self last-val) 0.95) (>= (-> self path-pos) 0.95))
        (sound-play "move-step-a-hit")
        )
    (set! (-> self last-val) (-> self path-pos))
    )
  )

;; definition for method 37 of type sew-moving-step-a
(defmethod get-skel ((this sew-moving-step-a))
  (art-group-get-by-name *level* "skel-sew-moving-step-a" (the-as (pointer level) #f))
  )

;; definition for method 32 of type sew-moving-step-a
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this sew-moving-step-a))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable pull-rider-can-collide))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 24576.0 0.0 16384.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition of type sew-moving-step-b
(deftype sew-moving-step-b (process-drawable)
  ((sync            sync-linear  :inline)
   (num-steps       int8)
   (step-delay      time-frame)
   (start-step-pos  vector       :inline)
   (end-step-pos    vector       :inline)
   (last-sync-val   float)
   (sound-idle      sound-id)
   )
  (:state-methods
    idle
    active
    )
  (:methods
    (sew-moving-step-b-method-22 (_type_ float) int)
    (sew-moving-step-b-method-23 (_type_) float)
    (sew-moving-step-b-method-24 (_type_) int)
    (alloc-trsqv! (_type_) none)
    (sew-moving-step-b-method-26 (_type_ int float) float)
    )
  )

;; definition for method 3 of type sew-moving-step-b
(defmethod inspect ((this sew-moving-step-b))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsync: #<sync-linear @ #x~X>~%" (-> this sync))
  (format #t "~2Tnum-steps: ~D~%" (-> this num-steps))
  (format #t "~2Tstep-delay: ~D~%" (-> this step-delay))
  (format #t "~2Tstart-step-pos: #<vector @ #x~X>~%" (-> this start-step-pos))
  (format #t "~2Tend-step-pos: #<vector @ #x~X>~%" (-> this end-step-pos))
  (format #t "~2Tlast-sync-val: ~f~%" (-> this last-sync-val))
  (format #t "~2Tsound-idle: ~D~%" (-> this sound-idle))
  (label cfg-4)
  this
  )

;; definition for method 25 of type sew-moving-step-b
;; WARN: Return type mismatch int vs none.
(defmethod alloc-trsqv! ((this sew-moving-step-b))
  (set! (-> this root) (new 'process 'trsqv))
  0
  (none)
  )

;; definition for method 11 of type sew-moving-step-b
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this sew-moving-step-b) (arg0 entity-actor))
  (alloc-trsqv! this)
  (process-drawable-from-entity! this arg0)
  (set! (-> this sound-idle) (new-sound-id))
  (set! (-> this path) (new 'process 'path-control this 'path 0.0 arg0 #f))
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (let ((a1-3 (new 'stack-no-clear 'sync-info-params)))
    (let ((v1-6 0))
      (if #f
          (set! v1-6 (logior v1-6 1))
          )
      (set! (-> a1-3 sync-type) 'sync-linear)
      (set! (-> a1-3 sync-flags) (the-as sync-flags v1-6))
      )
    (set! (-> a1-3 entity) arg0)
    (set! (-> a1-3 period) (the-as uint 4800))
    (set! (-> a1-3 percent) 0.0)
    (initialize! (-> this sync) a1-3)
    )
  (set! (-> this num-steps)
        (res-lump-value (-> this entity) 'sesc-num-steps int :default (the-as uint128 4) :time -1000000000.0)
        )
  (set! (-> this step-delay)
        (the-as time-frame (the int (* 300.0 (res-lump-float (-> this entity) 'sesc-step-delay :default 4.0))))
        )
  (set! (-> this num-steps) (min (-> this num-steps) (sew-moving-step-b-method-24 this)))
  (set! (-> this last-sync-val) (- 1.0 (* 0.5 (sew-moving-step-b-method-23 this))))
  (cond
    ((logtest? (-> this path flags) (path-control-flag not-found))
     (go (method-of-object this idle))
     )
    ((> (-> this sync period) 0)
     (let ((s4-0 (get-point-at-percent-along-path! (-> this path) (new 'stack-no-clear 'vector) 0.0 'interp))
           (s5-3 (get-point-at-percent-along-path! (-> this path) (new 'stack-no-clear 'vector) 1.0 'interp))
           )
       (let ((s3-1 (vector-! (new 'stack-no-clear 'vector) s5-3 s4-0)))
         (set! (-> s3-1 y) 0.0)
         (vector-normalize! s3-1 16384.0)
         (vector-! s4-0 s4-0 s3-1)
         (vector-! s5-3 s5-3 s3-1)
         )
       (set! (-> this start-step-pos quad) (-> s4-0 quad))
       (set! (-> this end-step-pos quad) (-> s5-3 quad))
       )
     (go (method-of-object this active))
     )
    (else
      (go (method-of-object this idle))
      )
    )
  )

;; failed to figure out what this is:
(defstate idle (sew-moving-step-b)
  :virtual #t
  :code sleep-code
  :post ja-post
  )

;; definition for method 24 of type sew-moving-step-b
(defmethod sew-moving-step-b-method-24 ((this sew-moving-step-b))
  (the int (/ (the float (-> this sync period)) (the float (-> this step-delay))))
  )

;; definition for method 23 of type sew-moving-step-b
(defmethod sew-moving-step-b-method-23 ((this sew-moving-step-b))
  (/ (the float (-> this step-delay)) (the float (-> this sync period)))
  )

;; definition for method 22 of type sew-moving-step-b
(defmethod sew-moving-step-b-method-22 ((this sew-moving-step-b) (arg0 float))
  (the int (/ arg0 (sew-moving-step-b-method-23 this)))
  )

;; definition for method 26 of type sew-moving-step-b
(defmethod sew-moving-step-b-method-26 ((this sew-moving-step-b) (arg0 int) (arg1 float))
  (let ((f30-1 (- arg1 (* (the float arg0) (sew-moving-step-b-method-23 this)))))
    (if (< f30-1 0.0)
        (+! f30-1 (* (the float (-> this num-steps)) (sew-moving-step-b-method-23 this)))
        )
    f30-1
    )
  )

;; definition of type sew-moving-step-b-step
(deftype sew-moving-step-b-step (base-plat)
  ((start-pos       vector       :inline)
   (end-pos         vector       :inline)
   (start-path-pos  vector       :inline)
   (end-path-pos    vector       :inline)
   (sync            sync-linear  :inline)
   (path-pos        float)
   (last-t-val      float)
   )
  (:state-methods
    active
    die
    )
  )

;; definition for method 3 of type sew-moving-step-b-step
(defmethod inspect ((this sew-moving-step-b-step))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tstart-pos: #<vector @ #x~X>~%" (-> this start-pos))
  (format #t "~2Tend-pos: #<vector @ #x~X>~%" (-> this end-pos))
  (format #t "~2Tstart-path-pos: #<vector @ #x~X>~%" (-> this start-path-pos))
  (format #t "~2Tend-path-pos: #<vector @ #x~X>~%" (-> this end-path-pos))
  (format #t "~2Tsync: #<sync-linear @ #x~X>~%" (-> this sync))
  (format #t "~2Tpath-pos: ~f~%" (-> this path-pos))
  (format #t "~2Tlast-t-val: ~f~%" (-> this last-t-val))
  (label cfg-4)
  this
  )

;; definition of type sew-moving-step-b-step-param
(deftype sew-moving-step-b-step-param (structure)
  ((start-pos  vector  :inline)
   (end-pos    vector  :inline)
   (ent        entity-actor)
   (period     time-frame)
   (offset     float)
   )
  )

;; definition for method 3 of type sew-moving-step-b-step-param
(defmethod inspect ((this sew-moving-step-b-step-param))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'sew-moving-step-b-step-param)
  (format #t "~1Tstart-pos: #<vector @ #x~X>~%" (-> this start-pos))
  (format #t "~1Tend-pos: #<vector @ #x~X>~%" (-> this end-pos))
  (format #t "~1Tent: ~A~%" (-> this ent))
  (format #t "~1Tperiod: ~D~%" (-> this period))
  (format #t "~1Toffset: ~f~%" (-> this offset))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-sew-moving-step-b sew-moving-step-b sew-moving-step-b-lod0-jg sew-moving-step-b-idle-ja
              ((sew-moving-step-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 6)
              )

;; definition for function sew-moving-step-b-step-init-by-other
;; INFO: Used lq/sq
(defbehavior sew-moving-step-b-step-init-by-other sew-moving-step-b-step ((arg0 sew-moving-step-b-step-param))
  (process-entity-set! self (-> arg0 ent))
  (init-collision! self)
  (set! (-> self root trans quad) (-> arg0 start-pos quad))
  (set! (-> self start-pos quad) (-> arg0 start-pos quad))
  (set! (-> self end-pos quad) (-> arg0 end-pos quad))
  (initialize-skeleton
    self
    (the-as skeleton-group (art-group-get-by-name *level* "skel-sew-moving-step-b" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (quaternion-rotate-y! (-> self root quat) (-> self root quat) 16384.0)
  (set! (-> self path) (new 'process 'path-control self 'path 0.0 (-> arg0 ent) #f))
  (get-point-at-percent-along-path! (-> self path) (-> self start-path-pos) 0.0 'interp)
  (get-point-at-percent-along-path! (-> self path) (-> self end-path-pos) 1.0 'interp)
  (let ((a1-7 (new 'stack-no-clear 'sync-info-params)))
    (let ((v1-16 0))
      (if #f
          (set! v1-16 (logior v1-16 1))
          )
      (set! (-> a1-7 sync-type) 'sync-linear)
      (set! (-> a1-7 sync-flags) (the-as sync-flags v1-16))
      )
    (set! (-> a1-7 entity) #f)
    (set! (-> a1-7 period) (the-as uint (-> arg0 period)))
    (set! (-> a1-7 percent) 0.0)
    (initialize! (-> self sync) a1-7)
    )
  (sync-now! (-> self sync) (-> arg0 offset))
  (set! (-> self last-t-val) -1.0)
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 1497) self))
  (go-virtual active)
  )

;; definition for function fmod
(defun fmod ((arg0 float) (arg1 float))
  (- arg0 (* (the float (the int (/ arg0 arg1))) arg1))
  )

;; definition for function spawn-moving-step-b-step
;; INFO: Used lq/sq
;; WARN: Return type mismatch process vs sew-moving-step-b-step.
(defun spawn-moving-step-b-step ((arg0 sew-moving-step-b) (arg1 float))
  (let ((gp-0 (new 'stack-no-clear 'sew-moving-step-b-step-param)))
    (set! (-> gp-0 start-pos quad) (-> arg0 start-step-pos quad))
    (set! (-> gp-0 end-pos quad) (-> arg0 end-step-pos quad))
    (set! (-> gp-0 ent) (-> arg0 entity))
    (set! (-> gp-0 period) (the-as time-frame (-> arg0 sync period)))
    (set! (-> gp-0 offset) arg1)
    (let ((s5-0 (the-as process #f)))
      (let ((v1-5 (process-spawn sew-moving-step-b-step gp-0 :name "sew-moving-step-b-step")))
        (if v1-5
            (set! s5-0 (-> v1-5 0))
            )
        )
      (the-as sew-moving-step-b-step s5-0)
      )
    )
  )

;; definition for method 10 of type sew-moving-step-b
(defmethod deactivate ((this sew-moving-step-b))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this sound-idle))
      (sound-stop (-> this sound-idle))
      )
  (call-parent-method this)
  (none)
  )

;; failed to figure out what this is:
(defstate active (sew-moving-step-b)
  :virtual #t
  :enter (behavior ()
    '()
    )
  :trans (behavior ()
    (sound-play "move-step-b-lp" :id (-> self sound-idle))
    (let ((f30-0 (get-norm! (-> self sync) 0)))
      (let* ((s5-0 (sew-moving-step-b-method-22 self (-> self last-sync-val)))
             (gp-0 (- (sew-moving-step-b-method-22 self f30-0) s5-0))
             (f28-1 (fmod f30-0 (* (the float (-> self num-steps)) (sew-moving-step-b-method-23 self))))
             )
        (if (< gp-0 0)
            (+! gp-0 (sew-moving-step-b-method-24 self))
            )
        (dotimes (s4-1 gp-0)
          (set! s5-0 (mod (+ s5-0 1) (sew-moving-step-b-method-24 self)))
          (if (< s5-0 (-> self num-steps))
              (spawn-moving-step-b-step self (sew-moving-step-b-method-26 self s5-0 f28-1))
              )
          )
        )
      (set! (-> self last-sync-val) f30-0)
      )
    )
  :code sleep-code
  )

;; definition for method 32 of type sew-moving-step-b-step
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this sew-moving-step-b-step))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid semi-solid rideable pull-rider-can-collide))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 61440.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 28 of type sew-moving-step-b-step
;; WARN: Return type mismatch int vs none.
(defmethod update-part-and-sfx! ((this sew-moving-step-b-step))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate die (sew-moving-step-b-step)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object) eco-door-event-handler)
  :code (behavior ()
    '()
    )
  )

;; failed to figure out what this is:
(defstate active (sew-moving-step-b-step)
  :virtual #t
  :event plat-event
  :enter (behavior ()
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (if (time-elapsed? (-> self state-time) (the-as time-frame (-> self sync period)))
        (go-virtual die)
        )
    (let ((f30-0 (get-norm! (-> self sync) 0)))
      (if (< f30-0 (-> self last-t-val))
          (go-virtual die)
          )
      (if (and (< (-> self last-t-val) 0.5) (>= f30-0 0.5))
          (sound-play "move-step-b-hit")
          )
      (set! (-> self last-t-val) f30-0)
      (cond
        ((< f30-0 0.2)
         (let ((f0-5 (* 5.0 f30-0)))
           (vector-lerp! (-> self basetrans) (-> self start-pos) (-> self start-path-pos) f0-5)
           )
         (spawn (-> self part) (-> self start-path-pos))
         )
        ((< 0.8 f30-0)
         (let ((f0-8 (* 5.0 (+ -0.8 f30-0))))
           (vector-lerp! (-> self basetrans) (-> self end-path-pos) (-> self end-pos) f0-8)
           )
         )
        (else
          (let ((f28-0 (* 1.6666666 (+ -0.2 f30-0))))
            (set! (-> self path-pos) f28-0)
            (get-point-at-percent-along-path! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
            (let ((f0-12 (fmax 0.25 (fmin 1.0 (* 2.0 (- 1.0 f28-0))))))
              (set-vector! (-> self draw color-mult) f0-12 f0-12 f0-12 1.0)
              )
            )
          (if (< f30-0 0.48)
              (spawn (-> self part) (-> self basetrans))
              )
          )
        )
      )
    (plat-trans)
    )
  :code (behavior ()
    (until #f
      (suspend)
      )
    #f
    )
  :post plat-post
  )

;; failed to figure out what this is:
(defskelgroup skel-sew-rove-plat sew-rove-plat sew-rove-plat-lod0-jg sew-rove-plat-idle-ja
              ((sew-rove-plat-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 6.5)
              )

;; definition of type sew-rove-plat
(deftype sew-rove-plat (sew-plat-updown)
  ((sound-id  sound-id)
   )
  )

;; definition for method 3 of type sew-rove-plat
(defmethod inspect ((this sew-rove-plat))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type sew-plat-updown inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (label cfg-4)
  this
  )

;; definition for method 37 of type sew-rove-plat
(defmethod get-skel ((this sew-rove-plat))
  (art-group-get-by-name *level* "skel-sew-rove-plat" (the-as (pointer level) #f))
  )

;; definition for method 12 of type sew-rove-plat
(defmethod run-logic? ((this sew-rove-plat))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )

;; definition for method 10 of type sew-rove-plat
(defmethod deactivate ((this sew-rove-plat))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (sound-stop (-> this sound-id))
  (call-parent-method this)
  (none)
  )

;; definition for method 32 of type sew-rove-plat
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this sew-rove-plat))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid semi-solid rideable pull-rider-can-collide))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) -15.5648 -3650.3552 0.8192 29212.262)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-12 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-12 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-12 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (set! (-> this sound-id) (new-sound-id))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate active (sew-rove-plat)
  :virtual #t
  :trans (behavior ()
    (sound-play "rove-plat-loop" :id (-> self sound-id))
    (set! (-> self path-pos) (get-norm! (-> self sync) 0))
    (get-point-at-percent-along-path! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
    (plat-trans)
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-sew-move-plat sew-move-plat sew-move-plat-lod0-jg sew-move-plat-idle-ja
              ((sew-move-plat-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

;; definition of type sew-move-plat
(deftype sew-move-plat (base-plat)
  ((sound-id           sound-id)
   (positions          vector  2 :inline)
   (current-pos-index  int8)
   (dest-pos-index     int8)
   (speed              float)
   )
  (:state-methods
    waiting
    active
    )
  (:methods
    (sew-move-plat-method-37 (_type_) int)
    )
  )

;; definition for method 3 of type sew-move-plat
(defmethod inspect ((this sew-move-plat))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type base-plat inspect)))
    (t9-0 this)
    )
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (format #t "~2Tpositions[2] @ #x~X~%" (-> this positions))
  (format #t "~2Tcurrent-pos-index: ~D~%" (-> this current-pos-index))
  (format #t "~2Tdest-pos-index: ~D~%" (-> this dest-pos-index))
  (format #t "~2Tspeed: ~f~%" (-> this speed))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate waiting (sew-move-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk)
       (go-virtual active)
       )
      )
    (plat-event proc argc message block)
    )
  :enter (behavior ()
    (set! (-> self basetrans quad) (-> self positions (-> self current-pos-index) quad))
    )
  :trans (behavior ()
    (plat-trans)
    (if (> (-> self root num-riders) 0)
        (go-virtual active)
        )
    )
  :code sleep-code
  :post (behavior ()
    (plat-post)
    )
  )

;; definition for method 37 of type sew-move-plat
(defmethod sew-move-plat-method-37 ((this sew-move-plat))
  (let ((f30-0 (vector-vector-xz-distance-squared (target-pos 0) (the-as vector (-> this positions)))))
    (logand (+ (-> this dest-pos-index) 1) 1)
    (if (< f30-0 (vector-vector-xz-distance-squared (target-pos 0) (-> this positions 1)))
        0
        1
        )
    )
  )

;; failed to figure out what this is:
(defstate active (sew-move-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('foo)
       (format 0 "FOo~%")
       )
      )
    )
  :enter (behavior ()
    (set! (-> self dest-pos-index) (logand (+ (-> self current-pos-index) 1) 1))
    (set-time! (-> self state-time))
    )
  :trans (behavior ()
    (sound-play "move-plat-loop" :id (-> self sound-id))
    (when (time-elapsed? (-> self state-time) (seconds 2))
      (if (>= (vector-vector-xz-distance (-> self basetrans) (target-pos 0)) 40960.0)
          (set! (-> self dest-pos-index) (sew-move-plat-method-37 self))
          )
      (set-time! (-> self state-time))
      )
    (let ((gp-2
            (vector-! (new 'stack-no-clear 'vector) (-> self positions (-> self dest-pos-index)) (-> self basetrans))
            )
          )
      0.0
      (let ((f0-2 (vector-normalize-ret-len! gp-2 1.0))
            (f1-2 (* 20480.0 (seconds-per-frame)))
            )
        (cond
          ((< f0-2 f1-2)
           (set! (-> self current-pos-index) (-> self dest-pos-index))
           (sound-stop (-> self sound-id))
           (sound-play "move-plat-hit")
           (go-virtual waiting)
           )
          (else
            (vector+float*! (-> self basetrans) (-> self basetrans) gp-2 f1-2)
            (set! (-> self root trans quad) (-> self basetrans quad))
            )
          )
        )
      )
    (plat-trans)
    )
  :code sleep-code
  :post plat-post
  )

;; definition for method 32 of type sew-move-plat
;; WARN: Return type mismatch int vs none.
(defmethod init-collision! ((this sew-move-plat))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-spec pusher))
      (set! (-> s4-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable pull-rider-can-collide))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 24576.0 0.0 32768.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) s4-0)
      )
    (pusher-init s5-0)
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (set! (-> this sound-id) (new-sound-id))
  0
  (none)
  )

;; definition for method 11 of type sew-move-plat
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this sew-move-plat) (arg0 entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-sew-move-plat" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (let ((a0-5 (-> this skel root-channel 0)))
    (set! (-> a0-5 frame-group) (if (> (-> this skel active-channels) 0)
                                    (-> this skel root-channel 0 frame-group)
                                    )
          )
    (set! (-> a0-5 param 0) 1.0)
    (set! (-> a0-5 frame-num) 0.0)
    (joint-control-channel-group!
      a0-5
      (if (> (-> this skel active-channels) 0)
          (-> this skel root-channel 0 frame-group)
          )
      num-func-loop!
      )
    )
  (ja-post)
  (set! (-> this current-pos-index) 0)
  (set! (-> this path) (new 'process 'path-control this 'path 0.0 arg0 #f))
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (get-point-at-percent-along-path! (-> this path) (the-as vector (-> this positions)) 0.0 'interp)
  (get-point-at-percent-along-path! (-> this path) (-> this positions 1) 1.0 'interp)
  (set! (-> this basetrans quad) (-> this root trans quad))
  (set! (-> this current-pos-index) (sew-move-plat-method-37 this))
  (logclear! (-> this mask) (process-mask actor-pause))
  (go (method-of-object this waiting))
  )

;; definition for method 10 of type sew-move-plat
(defmethod deactivate ((this sew-move-plat))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this sound-id))
      (sound-stop (-> this sound-id))
      )
  (call-parent-method this)
  (none)
  )

;; definition for method 12 of type sew-move-plat
(defmethod run-logic? ((this sew-move-plat))
  "Should this process be run? Checked by execute-process-tree."
  #t
  )




