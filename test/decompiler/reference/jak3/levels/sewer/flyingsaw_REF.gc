;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defskelgroup skel-flyingsaw flyingsaw flyingsaw-lod0-jg flyingsaw-idle-ja
              ((flyingsaw-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition of type flyingsaw-node
(deftype flyingsaw-node (structure)
  ((position    vector  :inline)
   (spark       vector  :inline)
   (make-spark  symbol)
   (pos-x       float   :overlay-at (-> position data 0))
   (pos-y       float   :overlay-at (-> position data 1))
   (pos-z       float   :overlay-at (-> position data 2))
   (spark-x     float   :overlay-at (-> spark data 0))
   (spark-y     float   :overlay-at (-> spark data 1))
   (spark-z     float   :overlay-at (-> spark data 2))
   )
  )

;; definition for method 3 of type flyingsaw-node
(defmethod inspect ((this flyingsaw-node))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'flyingsaw-node)
  (format #t "~1Tposition: ~`vector`P~%" (-> this position))
  (format #t "~1Tspark: ~`vector`P~%" (-> this spark))
  (format #t "~1Tmake-spark: ~A~%" (-> this make-spark))
  (format #t "~1Tpos-x: ~f~%" (-> this position x))
  (format #t "~1Tpos-y: ~f~%" (-> this position y))
  (format #t "~1Tpos-z: ~f~%" (-> this position z))
  (format #t "~1Tspark-x: ~f~%" (-> this spark x))
  (format #t "~1Tspark-y: ~f~%" (-> this spark y))
  (format #t "~1Tspark-z: ~f~%" (-> this spark z))
  (label cfg-4)
  this
  )

;; definition of type flyingsaw-graph
(deftype flyingsaw-graph (structure)
  ((node-count  uint16)
   (node        (inline-array flyingsaw-node))
   )
  )

;; definition for method 3 of type flyingsaw-graph
(defmethod inspect ((this flyingsaw-graph))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'flyingsaw-graph)
  (format #t "~1Tnode-count: ~D~%" (-> this node-count))
  (format #t "~1Tnode: #x~X~%" (-> this node))
  (label cfg-4)
  this
  )

;; definition for symbol *flyingsaw_2-graph*, type flyingsaw-graph
(define *flyingsaw_2-graph* (new 'static 'flyingsaw-graph
                              :node-count #xa
                              :node (new 'static 'inline-array flyingsaw-node 10
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1098825.4 :y -520576.62 :z 842305.1)
                                  :spark (new 'static 'vector :x -1089674.9 :y -520576.62 :z 842473.06)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1141427.9 :y -520576.62 :z 789245.56)
                                  :spark (new 'static 'vector :x -1151217.2 :y -520576.62 :z 789520.0)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1102884.5 :y -520576.62 :z 727539.3)
                                  :spark (new 'static 'vector :x -1092578.9 :y -520576.62 :z 727211.6)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1124216.4 :y -520576.62 :z 699195.0)
                                  :spark (new 'static 'vector :x -1124028.0 :y -520576.62 :z 689110.6)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1173180.0 :y -520576.62 :z 740445.8)
                                  :spark (new 'static 'vector :x -1173720.6 :y -520576.62 :z 749952.6)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1236938.4 :y -520576.62 :z 697720.44)
                                  :spark (new 'static 'vector :x -1236922.0 :y -520576.62 :z 687300.2)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1287159.4 :y -520576.62 :z 730726.0)
                                  :spark (new 'static 'vector :x -1296391.8 :y -520576.62 :z 729828.94)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1248677.5 :y -520576.62 :z 784715.4)
                                  :spark (new 'static 'vector :x -1238855.2 :y -520576.62 :z 784912.0)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1288515.1 :y -520576.62 :z 844316.25)
                                  :spark (new 'static 'vector :x -1298149.0 :y -520576.62 :z 844267.1)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1208016.5 :y -520576.62 :z 885255.8)
                                  :spark (new 'static 'vector :x -1208127.1 :y -520576.62 :z 894377.56)
                                  :make-spark #t
                                  )
                                )
                              )
        )

;; definition for symbol *flyingsaw_3-graph*, type flyingsaw-graph
(define *flyingsaw_3-graph* (new 'static 'flyingsaw-graph
                              :node-count #x10
                              :node (new 'static 'inline-array flyingsaw-node 16
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1121496.6 :y -520576.62 :z 676691.56)
                                  :spark (new 'static 'vector :x -1121263.2 :y -520576.62 :z 686517.9)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1167695.5 :y -520576.62 :z 603250.25)
                                  :spark (new 'static 'vector :x -1167769.2 :y -520576.62 :z 592457.3)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1240649.4 :y -520576.62 :z 674680.44)
                                  :spark (new 'static 'vector :x -1240821.4 :y -520576.62 :z 685108.8)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1323937.4 :y -520576.62 :z 630042.2)
                                  :spark (new 'static 'vector :x -1323773.5 :y -520576.62 :z 619765.4)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1355013.8 :y -520576.62 :z 662523.5)
                                  :spark (new 'static 'vector :x -1365765.8 :y -520576.62 :z 662638.2)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1311104.6 :y -520576.62 :z 706780.75)
                                  :spark (new 'static 'vector :x -1299799.6 :y -520576.62 :z 706735.7)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1379835.5 :y -520576.62 :z 765841.0)
                                  :spark (new 'static 'vector :x -1390481.0 :y -520576.62 :z 765738.6)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1312382.6 :y -520576.62 :z 846651.0)
                                  :spark (new 'static 'vector :x -1299639.9 :y -520576.62 :z 846458.5)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1351437.9 :y -520576.62 :z 916631.1)
                                  :spark (new 'static 'vector :x -1362247.2 :y -520576.62 :z 915631.7)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1312100.0 :y -520576.62 :z 951983.7)
                                  :spark (new 'static 'vector :x -1311145.6 :y -520576.62 :z 963677.8)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1255632.5 :y -520576.62 :z 911060.56)
                                  :spark (new 'static 'vector :x -1255268.0 :y -520576.62 :z 899370.6)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1070534.2 :y -520576.62 :z 954035.8)
                                  :spark (new 'static 'vector :x -1070378.6 :y -520576.62 :z 966237.8)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1026002.56 :y -520576.62 :z 911081.06)
                                  :spark (new 'static 'vector :x -1015377.5 :y -520576.62 :z 911040.1)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1076493.9 :y -520576.62 :z 839827.06)
                                  :spark (new 'static 'vector :x -1087700.6 :y -520576.62 :z 839609.94)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1003118.2 :y -520576.62 :z 731070.06)
                                  :spark (new 'static 'vector :x -991248.0 :y -520576.62 :z 730869.4)
                                  :make-spark #t
                                  )
                                (new 'static 'flyingsaw-node
                                  :position (new 'static 'vector :x -1059540.6 :y -520576.62 :z 631385.7)
                                  :spark (new 'static 'vector :x -1059245.6 :y -520576.62 :z 620105.3)
                                  :make-spark #t
                                  )
                                )
                              )
        )

;; definition of type flyingsaw
(deftype flyingsaw (process-drawable)
  ((root                collide-shape       :override)
   (no-collision-timer  time-frame)
   (graph               flyingsaw-graph)
   (current-node        uint16)
   (hip-angle           float)
   (blade-angle         float)
   (spin-1              joint-mod)
   (spin-2              joint-mod)
   (spin-3              joint-mod)
   (spin-4              joint-mod)
   (base-quat           quaternion           :inline)
   (wobble-target       delayed-rand-vector  :inline)
   (wobble              oscillating-vector   :inline)
   (fly-sound           sound-id)
   (fly-sound-playing   symbol)
   (spark-timer         time-frame)
   (spark-mat           matrix               :inline)
   )
  (:state-methods
    idle
    )
  )

;; definition for method 3 of type flyingsaw
(defmethod inspect ((this flyingsaw))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~2Tno-collision-timer: ~D~%" (-> this no-collision-timer))
  (format #t "~2Tgraph: #<flyingsaw-graph @ #x~X>~%" (-> this graph))
  (format #t "~2Tcurrent-node: ~D~%" (-> this current-node))
  (format #t "~2Thip-angle: ~f~%" (-> this hip-angle))
  (format #t "~2Tblade-angle: ~f~%" (-> this blade-angle))
  (format #t "~2Tspin-1: ~A~%" (-> this spin-1))
  (format #t "~2Tspin-2: ~A~%" (-> this spin-2))
  (format #t "~2Tspin-3: ~A~%" (-> this spin-3))
  (format #t "~2Tspin-4: ~A~%" (-> this spin-4))
  (format #t "~2Tbase-quat: #<quaternion @ #x~X>~%" (-> this base-quat))
  (format #t "~2Twobble-target: #<delayed-rand-vector @ #x~X>~%" (-> this wobble-target))
  (format #t "~2Twobble: #<oscillating-vector @ #x~X>~%" (-> this wobble))
  (format #t "~2Tfly-sound: ~D~%" (-> this fly-sound))
  (format #t "~2Tfly-sound-playing: ~A~%" (-> this fly-sound-playing))
  (format #t "~2Tspark-timer: ~D~%" (-> this spark-timer))
  (format #t "~2Tspark-mat: #<matrix @ #x~X>~%" (-> this spark-mat))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defstate idle (flyingsaw)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (when (and ((method-of-type touching-shapes-entry prims-touching?)
                   (the-as touching-shapes-entry (-> block param 0))
                   (-> self root)
                   (the-as uint 1)
                   )
                  (= (-> proc type) target)
                  )
         (when (send-event
                 proc
                 'attack
                 (-> block param 0)
                 (static-attack-info
                   :mask (vehicle-impulse-factor)
                   ((id (new-attack-id)) (damage 2.0) (vehicle-damage-factor 1.0) (vehicle-impulse-factor 1.0))
                   )
                 )
           (set-time! (-> self no-collision-timer))
           (let ((v1-14 (-> self root root-prim)))
             (set! (-> v1-14 prim-core collide-as) (collide-spec))
             (set! (-> v1-14 prim-core collide-with) (collide-spec))
             )
           0
           (sound-play "impact-jak" :position (-> self root trans))
           )
         )
       )
      )
    )
  :enter (behavior ()
    (set! (-> self spark-timer) 0)
    0
    )
  :exit (behavior ()
    (when (-> self fly-sound-playing)
      (sound-stop (-> self fly-sound))
      (set! (-> self fly-sound-playing) #f)
      )
    )
  :trans (behavior ()
    (ja :num! (loop!))
    (when (-> self graph)
      (let ((gp-0 (-> self graph node (-> self current-node))))
        (let ((f0-1 (vector-vector-distance-squared (-> self root trans) (-> gp-0 position)))
              (f1-0 512.0)
              )
          (when (< f0-1 (* f1-0 f1-0))
            (when (-> gp-0 make-spark)
              (let ((s5-1 (vector-! (new 'stack-no-clear 'vector) (-> gp-0 spark) (-> gp-0 position))))
                (vector-normalize! s5-1 1.0)
                (forward-down->inv-matrix (-> self spark-mat) s5-1 (new 'static 'vector :y -1.0))
                )
              (set! (-> self spark-mat trans quad) (-> gp-0 spark quad))
              (set-time! (-> self spark-timer))
              (sound-play "flysaw-hit-wall" :position (-> self root trans))
              )
            (+! (-> self current-node) 1)
            (when (>= (-> self current-node) (-> self graph node-count))
              (set! (-> self current-node) (the-as uint 0))
              0
              )
            (set! gp-0 (-> self graph node (-> self current-node)))
            )
          )
        (if (not (time-elapsed? (-> self spark-timer) (seconds 0.3)))
            (spawn-from-mat (-> self part) (-> self spark-mat))
            )
        (let* ((v1-36 (vector-! (new 'stack-no-clear 'vector) (-> gp-0 position) (-> self root trans)))
               (f0-2 (vector-length v1-36))
               )
          (if (< 1228.8 f0-2)
              (vector+float*! (-> self root trans) (-> self root trans) v1-36 (/ 1228.8 f0-2))
              (set! (-> self root trans quad) (-> gp-0 position quad))
              )
          )
        (let ((s5-3 (quaternion->matrix (new 'stack-no-clear 'matrix) (-> self base-quat)))
              (a2-4
                (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> gp-0 position) (-> self root trans)) 1.0)
                )
              (gp-2 (new 'stack-no-clear 'matrix))
              )
          (v-slrp2! (-> gp-2 fvec) (-> s5-3 fvec) a2-4 0.25 (the-as vector #f) 546.13336)
          (set-vector! (-> gp-2 uvec) 0.0 1.0 0.0 0.0)
          (vector-flatten! (-> gp-2 fvec) (-> gp-2 fvec) (-> gp-2 uvec))
          (vector-normalize! (-> gp-2 fvec) 1.0)
          (vector-cross! (-> gp-2 rvec) (-> gp-2 uvec) (-> gp-2 fvec))
          (matrix->quaternion (-> self base-quat) gp-2)
          )
        )
      (update-with-delay! (-> self wobble-target))
      (let ((s5-4 (new 'stack-no-clear 'vector)))
        (set! (-> s5-4 quad) (-> self wobble-target value quad))
        (let ((gp-3 (new 'stack-no-clear 'quaternion)))
          (set! (-> s5-4 y) 0.0)
          (update! (-> self wobble) (-> self wobble-target value))
          (set! (-> s5-4 quad) (-> self wobble value quad))
          (set! (-> s5-4 y) 1.0)
          (vector-normalize! s5-4 1.0)
          (quaternion-from-two-vectors! gp-3 (new 'static 'vector :y 1.0) s5-4)
          (quaternion-normalize! (quaternion*! (-> self root quat) gp-3 (-> self base-quat)))
          (+! (-> self blade-angle) 8082.7734)
          (quaternion-axis-angle! (-> self spin-2 quat) 0.0 1.0 0.0 (-> self blade-angle))
          (quaternion-normalize! (quaternion*! (-> self spin-2 quat) gp-3 (-> self spin-2 quat)))
          (quaternion-copy! (-> self spin-3 quat) (-> self spin-2 quat))
          (quaternion-copy! (-> self spin-4 quat) (-> self spin-2 quat))
          (+! (-> self hip-angle) 1747.6267)
          (quaternion-axis-angle! (-> self spin-1 quat) 0.0 1.0 0.0 (-> self hip-angle))
          (quaternion-normalize! (quaternion*! (-> self spin-1 quat) gp-3 (-> self spin-1 quat)))
          )
        )
      )
    (sound-play "flysaw-spin" :id (-> self fly-sound) :position (-> self root trans))
    (set! (-> self fly-sound-playing) #t)
    (when (and (nonzero? (-> self no-collision-timer)) (time-elapsed? (-> self no-collision-timer) (seconds 0.3)))
      (let ((v1-75 (-> self root root-prim)))
        (set! (-> v1-75 prim-core collide-as) (-> self root backup-collide-as))
        (set! (-> v1-75 prim-core collide-with) (-> self root backup-collide-with))
        )
      (set! (-> self no-collision-timer) 0)
      0
      )
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (do-push-aways (-> self root))
    )
  )

;; definition for method 10 of type flyingsaw
(defmethod deactivate ((this flyingsaw))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (-> this fly-sound-playing)
      (sound-stop (-> this fly-sound))
      )
  (call-parent-method this)
  (none)
  )

;; definition for method 7 of type flyingsaw
;; WARN: Return type mismatch process-drawable vs flyingsaw.
(defmethod relocate ((this flyingsaw) (offset int))
  (if (nonzero? (-> this spin-1))
      (&+! (-> this spin-1) offset)
      )
  (if (nonzero? (-> this spin-2))
      (&+! (-> this spin-2) offset)
      )
  (if (nonzero? (-> this spin-3))
      (&+! (-> this spin-3) offset)
      )
  (if (nonzero? (-> this spin-4))
      (&+! (-> this spin-4) offset)
      )
  (the-as flyingsaw ((method-of-type process-drawable relocate) this offset))
  )

;; definition for method 11 of type flyingsaw
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this flyingsaw) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum usually-hit-by-player))))
    (set! (-> s4-0 penetrated-by)
          (penetrate
            generic-attack
            lunge
            flop
            punch
            spin
            roll
            uppercut
            bonk
            tube
            flut-attack
            board
            mech-punch
            dark-punch
            dark-smack
            flut
            )
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 4) 0)))
      (set! (-> s4-0 total-prims) (the-as uint 5))
      (set! (-> s3-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s3-0 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> s3-0 prim-core action) (collide-action solid no-standon))
      (set! (-> s3-0 transform-index) 3)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 20480.0)
      (set! (-> s4-0 root-prim) s3-0)
      )
    (let ((v1-10 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
      (set! (-> v1-10 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-10 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-10 prim-core action) (collide-action solid))
      (set! (-> v1-10 transform-index) 14)
      (set-vector! (-> v1-10 local-sphere) 0.0 0.0 0.0 6144.0)
      )
    (let ((v1-12 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
      (set! (-> v1-12 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-12 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-12 prim-core action) (collide-action solid))
      (set! (-> v1-12 transform-index) 24)
      (set-vector! (-> v1-12 local-sphere) 0.0 0.0 0.0 6144.0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set! (-> v1-14 transform-index) 19)
      (set-vector! (-> v1-14 local-sphere) 0.0 0.0 0.0 6144.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid))
      (set! (-> v1-16 transform-index) 5)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 8192.0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (let ((v1-19 (-> s4-0 root-prim)))
      (set! (-> s4-0 backup-collide-as) (-> v1-19 prim-core collide-as))
      (set! (-> s4-0 backup-collide-with) (-> v1-19 prim-core collide-with))
      )
    (set! (-> s4-0 event-self) 'touched)
    (set! (-> this root) s4-0)
    )
  (set! (-> this root pause-adjust-distance) 204800.0)
  (let ((v1-25 (-> this root root-prim)))
    (set! (-> this root backup-collide-as) (-> v1-25 prim-core collide-as))
    (set! (-> this root backup-collide-with) (-> v1-25 prim-core collide-with))
    )
  (set! (-> this no-collision-timer) 0)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-flyingsaw" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (let ((v1-31 (res-lump-value arg0 'mode uint128 :time -1000000000.0)))
    (set! (-> this graph) (cond
                            ((= (the-as uint v1-31) 2)
                             *flyingsaw_2-graph*
                             )
                            ((= (the-as uint v1-31) 3)
                             *flyingsaw_3-graph*
                             )
                            (else
                              (the-as flyingsaw-graph #f)
                              )
                            )
          )
    )
  (set! (-> this current-node) (the-as uint 0))
  (if (-> this graph)
      (set! (-> this root trans quad) (-> this graph node (-> this current-node) position quad))
      )
  (set! (-> this spin-1) (new 'process 'joint-mod (joint-mod-mode foot-rot) this 10))
  (set! (-> this spin-1 track-mode) (track-mode no-trans no-scale))
  (set! (-> this spin-2) (new 'process 'joint-mod (joint-mod-mode foot-rot) this 14))
  (set! (-> this spin-2 track-mode) (track-mode no-trans no-scale))
  (set! (-> this spin-3) (new 'process 'joint-mod (joint-mod-mode foot-rot) this 24))
  (set! (-> this spin-3 track-mode) (track-mode no-trans no-scale))
  (set! (-> this spin-4) (new 'process 'joint-mod (joint-mod-mode foot-rot) this 19))
  (set! (-> this spin-4 track-mode) (track-mode no-trans no-scale))
  (quaternion-copy! (-> this base-quat) (-> this root quat))
  (set-params! (-> this wobble-target) 30 60 0.25 0.0)
  (set-params! (-> this wobble) (the-as vector #f) 0.007 0.1 0.99)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 1500) this))
  (set! (-> this fly-sound) (new-sound-id))
  (set! (-> this fly-sound-playing) #f)
  (go (method-of-object this idle))
  )




