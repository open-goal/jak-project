;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defstate hit (bot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hit) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (bot-method-232 self (gui-channel none) #t)
    (bot-method-203 self)
    (logclear! (-> self bot-flags) (bot-flag bf11))
    )
  :exit (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hit) exit)))
      (if t9-0
          (t9-0)
          )
      )
    (logior! (-> self bot-flags) (bot-flag bf11))
    )
  :code (behavior ()
    (local-vars (v1-37 enemy-flag) (v1-39 enemy-flag) (v1-41 enemy-flag))
    (ja-channel-push! 1 (seconds 0.2))
    (let ((f30-0 (rnd-float-range self 0.9 1.1)))
      (ja-no-eval :group! (-> self draw art-group data (-> self enemy-info hit-anim))
                  :num! (seek! max f30-0)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-36 (-> self enemy-flags)))
      (if (logtest? v1-36 (enemy-flag vulnerable-backup))
          (set! v1-37 (logior v1-36 (enemy-flag vulnerable)))
          (set! v1-37 (logclear v1-36 (enemy-flag vulnerable)))
          )
      )
    (set! (-> self enemy-flags) v1-37)
    (let ((v1-38 (-> self enemy-flags)))
      (if (logtest? v1-38 (enemy-flag attackable-backup))
          (set! v1-39 (logior v1-38 (enemy-flag attackable)))
          (set! v1-39 (logclear v1-38 (enemy-flag attackable)))
          )
      )
    (set! (-> self enemy-flags) v1-39)
    (let ((v1-40 (-> self enemy-flags)))
      (if (logtest? (enemy-flag trackable-backup) v1-40)
          (set! v1-41 (logior (enemy-flag trackable) v1-40))
          (set! v1-41 (logclear v1-40 (enemy-flag trackable)))
          )
      )
    (set! (-> self enemy-flags) v1-41)
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (logclear! (-> self focus-status) (focus-status hit))
    (go-best-state self)
    )
  )

;; failed to figure out what this is:
(defstate knocked (bot)
  :virtual #t
  :enter (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag victory))
    (bot-method-232 self (gui-channel none) #t)
    (if (and (logtest? (-> self bot-flags) (bot-flag attacked))
             (and (!= (-> self hit-points) 0.0) (zero? (-> self fated-time)))
             )
        (logior! (-> self bot-flags) (bot-flag bf12))
        )
    (bot-method-203 self)
    (when (= (-> self hit-points) 0.0)
      (set! (-> self hit-points) 1.0)
      (set-time! (-> self fated-time))
      )
    (logclear! (-> self bot-flags) (bot-flag bf11))
    (let ((t9-2 (-> (method-of-type nav-enemy knocked) enter)))
      (if t9-2
          (t9-2)
          )
      )
    )
  :exit (behavior ()
    (let ((gp-0 (-> self incoming attack-id)))
      (let ((t9-0 (-> (method-of-type nav-enemy knocked) exit)))
        (if t9-0
            (t9-0)
            )
        )
      (set! (-> self incoming attack-id) gp-0)
      )
    (logior! (-> self bot-flags) (bot-flag bf11))
    (logclear! (-> self bot-flags) (bot-flag bf12))
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy knocked) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (when (and (logtest? (-> self bot-flags) (bot-flag bf12)) (!= (-> self state-time) (current-time)))
      (logclear! (-> self bot-flags) (bot-flag bf12))
      (play-next-speech self)
      )
    )
  )

;; failed to figure out what this is:
(defstate die-falling (bot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy die-falling) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (kill-nearby-enemies (-> self root trans) 61440.0)
    (bot-method-232 self (gui-channel none) #f)
    (logclear! (-> self bot-flags) (bot-flag bf06 bf11))
    (set! (-> self delay-too-far-check) -1)
    (logior! (-> self root nav-flags) (nav-flags has-root-sphere))
    (bot-method-209 self)
    )
  :exit (behavior ()
    (logior! (-> self bot-flags) (bot-flag bf11))
    (logclear! (-> self bot-flags) (bot-flag bf13 bf14))
    (let ((t9-0 (-> (method-of-type nav-enemy die-falling) exit)))
      (if t9-0
          (t9-0)
          )
      )
    )
  :trans (behavior ()
    (bot-method-212 self)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (let ((gp-0 (-> self draw art-group data (if (falling? self)
                                                 (-> self enemy-info die-falling-anim)
                                                 (-> self enemy-info die-anim)
                                                 )
                    )
                )
          (f30-0 (rnd-float-range self 0.8 1.2))
          )
      (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (until (not (channel-active? self (gui-channel none)))
      (suspend)
      )
    (until #f
      (when (logtest? (-> self bot-flags) (bot-flag failed))
        (let ((a0-10 (res-lump-struct (-> self entity) 'task-name structure)))
          (when a0-10
            (let ((gp-1 (new 'stack-no-clear 'event-message-block)))
              (set! (-> gp-1 from) (process->ppointer self))
              (set! (-> gp-1 num-params) 0)
              (set! (-> gp-1 message) 'fail)
              (let ((s5-0 send-event-function)
                    (v1-35 (-> *game-info* sub-task-list (task-node-index-by-name (the-as string a0-10))))
                    )
                (s5-0
                  (handle->process (if (-> v1-35 manager)
                                       (-> v1-35 manager manager)
                                       (the-as handle #f)
                                       )
                                   )
                  gp-1
                  )
                )
              )
            )
          )
        )
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate failed (bot)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    ((-> (method-of-type bot die-falling) enter))
    (logclear! (-> self bot-flags) (bot-flag bf11))
    (when (logtest? (-> self bot-flags) (bot-flag failed))
      (let ((a0-1 (-> self course too-far-fail-speeches)))
        (when (and (nonzero? a0-1) a0-1)
          (let ((a1-1 (get-next-speech-idx a0-1 self (-> self course speeches) (bot-speech-info-flag))))
            (if (>= a1-1 0)
                (play-speech-by-id self a1-1)
                )
            )
          )
        )
      )
    )
  :exit (behavior ()
    (logior! (-> self bot-flags) (bot-flag bf11))
    )
  :trans (behavior ()
    ((-> (method-of-type bot die-falling) trans))
    (if (channel-active? self (gui-channel none))
        (set-time! (-> self state-time))
        )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (let ((f30-0 (rnd-float-range self 0.9 1.1))
          (gp-0 (-> self draw art-group data (-> self enemy-info idle-anim)))
          )
      (until #f
        (ja-no-eval :group! gp-0 :num! (seek! max f30-0) :frame-num 0.0)
        (until (ja-done? 0)
          (when (and (logtest? (-> self bot-flags) (bot-flag failed)) (time-elapsed? (-> self state-time) (seconds 0.5)) #f)
            (cleanup-for-death self)
            (process-entity-status! self (entity-perm-status no-kill) #f)
            (let ((a0-10 (res-lump-struct (-> self entity) 'task-name string)))
              (when a0-10
                (let ((s5-0 (new 'stack-no-clear 'event-message-block)))
                  (set! (-> s5-0 from) (process->ppointer self))
                  (set! (-> s5-0 num-params) 0)
                  (set! (-> s5-0 message) 'fail)
                  (let ((s4-0 send-event-function)
                        (v1-27 (-> *game-info* sub-task-list (task-node-index-by-name a0-10)))
                        )
                    (s4-0
                      (handle->process (if (-> v1-27 manager)
                                           (-> v1-27 manager manager)
                                           (the-as handle #f)
                                           )
                                       )
                      s5-0
                      )
                    )
                  )
                )
              )
            )
          (suspend)
          (ja :num! (seek! max f30-0))
          )
        )
      )
    #f
    )
  :post nav-enemy-die-falling-post
  )

;; failed to figure out what this is:
(defstate hidden (bot)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self focus-status) (focus-status disable))
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (set! (-> self notice-enemy-dist) 0.0)
    (logclear! (-> self enemy-flags) (enemy-flag check-water))
    )
  :exit (behavior ()
    (local-vars (v0-0 enemy-flag))
    (logclear! (-> self draw status) (draw-control-status no-draw))
    (logclear! (-> self focus-status) (focus-status disable))
    (let ((v1-5 (-> self root root-prim)))
      (set! (-> v1-5 prim-core collide-as) (-> self root backup-collide-as))
      (set! (-> v1-5 prim-core collide-with) (-> self root backup-collide-with))
      )
    (let ((v1-6 (-> self enemy-flags)))
      (if (logtest? (enemy-flag check-water-backup) v1-6)
          (set! v0-0 (logior (enemy-flag check-water) v1-6))
          (set! v0-0 (logclear v1-6 (enemy-flag check-water)))
          )
      )
    (set! (-> self enemy-flags) v0-0)
    )
  :code sleep-code
  :post nav-enemy-simple-post
  )




