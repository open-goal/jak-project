;;-*-Lisp-*-
(in-package goal)

;; definition of type squad-unit-settings
(deftype squad-unit-settings (structure)
  ((target-count      int8)
   (shot-count        int8)
   (rand-shot-count   int8)
   (inaccuracy        float)
   (acquire-delay     uint16)
   (shot-delay        uint16)
   (burst-delay       uint16)
   (rand-burst-delay  uint16)
   (rand-shot-delay   uint16)
   )
  :allow-misaligned
  )

;; definition for method 3 of type squad-unit-settings
(defmethod inspect ((this squad-unit-settings))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'squad-unit-settings)
  (format #t "~1Ttarget-count: ~D~%" (-> this target-count))
  (format #t "~1Tshot-count: ~D~%" (-> this shot-count))
  (format #t "~1Trand-shot-count: ~D~%" (-> this rand-shot-count))
  (format #t "~1Tinaccuracy: ~f~%" (-> this inaccuracy))
  (format #t "~1Tacquire-delay: ~D~%" (-> this acquire-delay))
  (format #t "~1Tshot-delay: ~D~%" (-> this shot-delay))
  (format #t "~1Tburst-delay: ~D~%" (-> this burst-delay))
  (format #t "~1Trand-burst-delay: ~D~%" (-> this rand-burst-delay))
  (format #t "~1Trand-shot-delay: ~D~%" (-> this rand-shot-delay))
  (label cfg-4)
  this
  )

;; definition of type squad-target-status
(deftype squad-target-status (structure)
  ((flags           squad-target-flag)
   (handle          handle)
   (last-seen-time  time-frame)
   (position        vector  :inline)
   (velocity        vector  :inline)
   (threat-level    float)
   )
  )

;; definition for method 3 of type squad-target-status
(defmethod inspect ((this squad-target-status))
  (when (not this)
    (set! this this)
    (goto cfg-14)
    )
  (format #t "[~8x] ~A~%" this 'squad-target-status)
  (format #t "~1Tflags: #x~X : (squad-target-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (squad-target-flag visible-now)) (squad-target-flag visible-now))
        (format #t "visible-now ")
        )
    (if (= (logand s5-0 (squad-target-flag visible-ever)) (squad-target-flag visible-ever))
        (format #t "visible-ever ")
        )
    (if (= (logand s5-0 (squad-target-flag force-visible)) (squad-target-flag force-visible))
        (format #t "force-visible ")
        )
    (if (= (logand s5-0 (squad-target-flag visible-recently)) (squad-target-flag visible-recently))
        (format #t "visible-recently ")
        )
    (if (= (logand s5-0 (squad-target-flag updated)) (squad-target-flag updated))
        (format #t "updated ")
        )
    )
  (format #t ")~%")
  (format #t "~1Thandle: ~D~%" (-> this handle))
  (format #t "~1Tlast-seen-time: ~D~%" (-> this last-seen-time))
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Tthreat-level: ~f~%" (-> this threat-level))
  (label cfg-14)
  this
  )

;; definition of type squad-alert-state
(deftype squad-alert-state (structure)
  ((flags                      squad-alert-flag)
   (level                      uint8)
   (max-level                  uint8)
   (guards-in-sight-of-target  int8)
   (guard-aim-count            int8)
   (guard-inaccuracy-factor    float)
   (guard-target-level         float)
   (duration                   uint32)
   (start-time                 time-frame)
   (notify-time                time-frame)
   (alarm-sound-id             sound-id)
   (target-status-array        squad-target-status  3 :inline)
   (target-status              squad-target-status  :inline :overlay-at (-> target-status-array 0))
   )
  (:methods
    (init! (_type_) none)
    )
  )

;; definition for method 3 of type squad-alert-state
(defmethod inspect ((this squad-alert-state))
  (when (not this)
    (set! this this)
    (goto cfg-18)
    )
  (format #t "[~8x] ~A~%" this 'squad-alert-state)
  (format #t "~1Tflags: #x~X : (squad-alert-flag " (-> this flags))
  (let ((s5-0 (-> this flags)))
    (if (= (logand s5-0 (squad-alert-flag update-target-search)) (squad-alert-flag update-target-search))
        (format #t "update-target-search ")
        )
    (if (= (logand s5-0 (squad-alert-flag disable-pursuit-control)) (squad-alert-flag disable-pursuit-control))
        (format #t "disable-pursuit-control ")
        )
    (if (= (logand s5-0 (squad-alert-flag sticky-guard-settings)) (squad-alert-flag sticky-guard-settings))
        (format #t "sticky-guard-settings ")
        )
    (if (= (logand s5-0 (squad-alert-flag alarm-on)) (squad-alert-flag alarm-on))
        (format #t "alarm-on ")
        )
    (if (= (logand s5-0 (squad-alert-flag war)) (squad-alert-flag war))
        (format #t "war ")
        )
    (if (= (logand s5-0 (squad-alert-flag alert-ending)) (squad-alert-flag alert-ending))
        (format #t "alert-ending ")
        )
    (if (= (logand s5-0 (squad-alert-flag guard-multi-focus)) (squad-alert-flag guard-multi-focus))
        (format #t "guard-multi-focus ")
        )
    )
  (format #t ")~%")
  (format #t "~1Tlevel: ~D~%" (-> this level))
  (format #t "~1Tmax-level: ~D~%" (-> this max-level))
  (format #t "~1Tguards-in-sight-of-target: ~D~%" (-> this guards-in-sight-of-target))
  (format #t "~1Tguard-aim-count: ~D~%" (-> this guard-aim-count))
  (format #t "~1Tguard-inaccuracy-factor: ~f~%" (-> this guard-inaccuracy-factor))
  (format #t "~1Tguard-target-level: ~f~%" (-> this guard-target-level))
  (format #t "~1Tduration: ~D~%" (-> this duration))
  (format #t "~1Tstart-time: ~D~%" (-> this start-time))
  (format #t "~1Tnotify-time: ~D~%" (-> this notify-time))
  (format #t "~1Talarm-sound-id: ~D~%" (-> this alarm-sound-id))
  (format #t "~1Ttarget-status-array[3] @ #x~X~%" (-> this target-status-array))
  (format #t "~1Ttarget-status: #<squad-target-status @ #x~X>~%" (-> this target-status-array))
  (label cfg-18)
  this
  )

;; definition of type primary-target-pos-vel
(deftype primary-target-pos-vel (structure)
  ((position  vector  :inline)
   (velocity  vector  :inline)
   (time      uint32  :overlay-at (-> velocity data 3))
   )
  )

;; definition for method 3 of type primary-target-pos-vel
(defmethod inspect ((this primary-target-pos-vel))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this 'primary-target-pos-vel)
  (format #t "~1Tposition: #<vector @ #x~X>~%" (-> this position))
  (format #t "~1Tvelocity: #<vector @ #x~X>~%" (-> this velocity))
  (format #t "~1Ttime: ~D~%" (-> this time))
  (label cfg-4)
  this
  )

;; definition of type squad-control
(deftype squad-control (basic)
  ((sync-clock              uint8)
   (sync-mask-8             uint8)
   (sync-mask-16            uint16)
   (sync-mask-32            uint32)
   (alert-state             squad-alert-state       :inline)
   (primary-target-history  primary-target-pos-vel  16 :inline)
   )
  (:methods
    (initialize (_type_ process) none)
    (squad-control-method-10 (_type_) none)
    (stop-alarm-sound (_type_) none)
    (init-alert (_type_) none)
    (update (_type_) none)
    (set-sync-mask (_type_) none)
    (probe-backgnd-collision (_type_ vector vector) symbol)
    (squad-control-method-16 (_type_ vector process-focusable squad-target-status) none)
    (squad-control-method-17 (_type_ vector int squad-target-status) squad-target-status)
    (squad-control-method-18 (_type_ int process) int)
    (set-alert-level0 (_type_ int) int)
    (start-alert (_type_ int) none)
    (set-alert-level (_type_ int) none)
    (get-alert-level (_type_) int)
    (set-alert-duration (_type_ time-frame) none)
    (squad-control-method-24 (_type_) int)
    (squad-control-method-25 (_type_ primary-target-pos-vel time-frame) none)
    (set-pos-vel (_type_ primary-target-pos-vel) primary-target-pos-vel)
    (squad-control-method-27 (_type_ process float) none)
    (get-idx-in-status-arr (_type_ handle) int)
    (valid-target-handle? (_type_ handle) symbol)
    (get-target-focus (_type_) process-focusable)
    (squad-control-method-31 (_type_ vector process-focusable handle float float) none)
    (get-handle-pos (_type_ handle vector) vector)
    (get-focus-in-range (_type_ process-focusable) process-focusable)
    )
  )

;; definition for method 3 of type squad-control
(defmethod inspect ((this squad-control))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~1Tsync-clock: ~D~%" (-> this sync-clock))
  (format #t "~1Tsync-mask-8: ~D~%" (-> this sync-mask-8))
  (format #t "~1Tsync-mask-16: ~D~%" (-> this sync-mask-16))
  (format #t "~1Tsync-mask-32: ~D~%" (-> this sync-mask-32))
  (format #t "~1Talert-state: #<squad-alert-state @ #x~X>~%" (-> this alert-state))
  (format #t "~1Tprimary-target-history[16] @ #x~X~%" (-> this primary-target-history))
  (label cfg-4)
  this
  )

;; definition for symbol *waswide-squad-control*, type squad-control
(define *waswide-squad-control* (the-as squad-control #f))

;; failed to figure out what this is:
0
