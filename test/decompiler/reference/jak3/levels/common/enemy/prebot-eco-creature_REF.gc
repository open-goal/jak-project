;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpartgroup group-prebot-critter-trail
  :id 440
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1754 :fade-after (meters 120) :falloff-to (meters 120))
    (sp-item 1755 :flags (sp6))
    (sp-item 1756 :fade-after (meters 120) :falloff-to (meters 120))
    )
  )

;; failed to figure out what this is:
(defpart 1756
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 1.0 4.0)
    (:scale-x (meters 0.3) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 48.0 16.0)
    (:b 64.0)
    (:a 128.0)
    (:omega (degrees 6761.25))
    (:vel-y (meters 0) (meters 0.01))
    (:fade-a -0.10666667)
    (:accel-y (meters -0.000033333334) (meters -0.000016666667))
    (:friction 0.96)
    (:timer (seconds 0.5) (seconds 3.997))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:next-time (seconds 0.017) (seconds 0.497))
    (:next-launcher 1757)
    (:conerot-x (degrees 0) (degrees 3600))
    (:conerot-y (degrees 0) (degrees 3600))
    (:conerot-radius (meters 0) (meters 0.5))
    )
  )

;; failed to figure out what this is:
(defpart 1757
  :init-specs ((:r 32.0) (:g 128.0 128.0) (:b 255.0) (:next-time (seconds 0.017)) (:next-launcher 1758))
  )

;; failed to figure out what this is:
(defpart 1758
  :init-specs ((:r 0.0) (:g 48.0 16.0) (:b 64.0) (:next-time (seconds 0.017) (seconds 0.497)) (:next-launcher 1757))
  )

;; failed to figure out what this is:
(defpart 1755
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2.5) (meters 0.2))
    (:rot-x (degrees 11.25))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 192.0 64.0)
    (:b 255.0)
    (:a 16.0)
    (:omega (degrees 6761.25))
    (:fade-a -0.8)
    (:timer (seconds 0.05))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 3072.0)
    )
  )

;; failed to figure out what this is:
(defpart 1754
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 1.0 3.0)
    (:scale-x (meters 0.8) (meters 0.8))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0)
    (:b 255.0)
    (:a 64.0 8.0)
    (:vel-y (meters -0.006666667) (meters -0.006666667))
    (:scalevel-x (meters 0.005) (meters 0.008333334))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-r 3.2)
    (:fade-g 0.0)
    (:fade-b -3.2)
    (:fade-a -0.8)
    (:accel-y (meters 0.0001) (meters 0.000033333334))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #x400000 #x400000 #x400700))
    (:next-time (seconds 0.135))
    (:next-launcher 1759)
    )
  )

;; failed to figure out what this is:
(defpart 1759
  :init-specs ((:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:fade-r 0.0)
    (:fade-g 0.0)
    (:fade-b 0.0)
    (:fade-a -0.10666667 -0.21333334)
    (:func 'nothing)
    )
  )

;; failed to figure out what this is:
(defskelgroup skel-cav-eco-lg cav-eco-lg cav-eco-lg-lod0-jg cav-eco-lg-idle-ja
              ((cav-eco-lg-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              :origin-joint-index 3
              )

;; definition of type prebot-large-eco-creature
(deftype prebot-large-eco-creature (nav-enemy)
  ((old-y-deg          float)
   (diff-angle         float)
   (attack-anims       (array int32))
   (victory-anims      (array int32))
   (turn-left-anim     int32)
   (turn-right-anim    int32)
   (split-type         type)
   (attack-stop-frame  float)
   (traj               trajectory  :inline)
   (which-trajectory   int8)
   (x-rotate           float)
   (y-rotate           float)
   (launch-pos         vector      :inline)
   (launch             vector      :inline)
   (spin-jm            joint-mod)
   (trail-part         sparticle-launch-control)
   (trail-sound        sound-id)
   (flags              eco-creature-flag)
   )
  (:state-methods
    unfold
    fly-to-dest
    attack
    wait-for-children
    )
  (:methods
    (prebot-large-eco-creature-method-194 (_type_) none)
    (prebot-large-eco-creature-method-195 (_type_) none)
    )
  )

;; definition for method 3 of type prebot-large-eco-creature
(defmethod inspect ((this prebot-large-eco-creature))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type nav-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Told-y-deg: ~f~%" (-> this old-y-deg))
  (format #t "~2Tdiff-angle: ~f~%" (-> this diff-angle))
  (format #t "~2Tattack-anims: ~A~%" (-> this attack-anims))
  (format #t "~2Tvictory-anims: ~A~%" (-> this victory-anims))
  (format #t "~2Tturn-left-anim: ~D~%" (-> this turn-left-anim))
  (format #t "~2Tturn-right-anim: ~D~%" (-> this turn-right-anim))
  (format #t "~2Tsplit-type: ~A~%" (-> this split-type))
  (format #t "~2Tattack-stop-frame: ~f~%" (-> this attack-stop-frame))
  (format #t "~2Ttraj: #<trajectory @ #x~X>~%" (-> this traj))
  (format #t "~2Twhich-trajectory: ~D~%" (-> this which-trajectory))
  (format #t "~2Tx-rotate: ~f~%" (-> this x-rotate))
  (format #t "~2Ty-rotate: ~f~%" (-> this y-rotate))
  (format #t "~2Tlaunch-pos: #<vector @ #x~X>~%" (-> this launch-pos))
  (format #t "~2Tlaunch: #<vector @ #x~X>~%" (-> this launch))
  (format #t "~2Tspin-jm: ~A~%" (-> this spin-jm))
  (format #t "~2Ttrail-part: ~A~%" (-> this trail-part))
  (format #t "~2Ttrail-sound: ~D~%" (-> this trail-sound))
  (format #t "~2Tflags: ~D~%" (-> this flags))
  (label cfg-4)
  this
  )

;; definition for symbol *prebot-large-eco-creature-nav-enemy-info*, type nav-enemy-info
(define *prebot-large-eco-creature-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 3
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x2
        :param0 100
        :param1 100
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 2
    :notice-anim 2
    :hostile-anim 3
    :hit-anim 2
    :knocked-anim 2
    :knocked-land-anim 2
    :die-anim 2
    :die-falling-anim 2
    :victory-anim 10
    :jump-wind-up-anim 2
    :jump-in-air-anim 2
    :jump-land-anim 2
    :neck-joint 5
    :look-at-joint 5
    :bullseye-joint 4
    :notice-distance (meters 200)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 20)
    :default-hit-points 6.0
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      jak-red-shockwave
      jak-dark-nuke
      jak-dark-blackhole
      emp-blast
      penetrate38
      penetrate39
      penetrate40
      penetrate41
      penetrate42
      penetrate43
      penetrate44
      penetrate45
      penetrate46
      penetrate47
      penetrate48
      penetrate49
      penetrate50
      penetrate51
      penetrate52
      penetrate53
      penetrate54
      penetrate55
      penetrate56
      penetrate57
      penetrate58
      penetrate59
      penetrate60
      penetrate61
      penetrate64
      penetrate63
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3.5)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 16384.0
    :knocked-red-vxz-hi 40960.0
    :knocked-red-vy-lo 49152.0
    :knocked-red-vy-hi 61440.0
    :knocked-blue-vxz-lo 20480.0
    :knocked-blue-vxz-hi 28672.0
    :knocked-blue-vy-lo 16384.0
    :knocked-blue-vy-hi 40960.0
    :ragdoll-info (new 'static 'ragdoll-setup
      :scale (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
      :bg-collide-with (collide-spec backgnd player-list)
      :joint-setup (new 'static 'boxed-array :type ragdoll-joint-setup
        (new 'static 'ragdoll-joint-setup
          :joint-index 3
          :parent-joint -1
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 4
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 1.0 :w 35404.914)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 5
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 8223.438)
          :geo-tform (new 'static 'vector :x 1.0 :w 27181.492)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 6
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 14248.819)
          :geo-tform (new 'static 'vector :x -1.0 :w 10623.986)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 7
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 12262.859)
          :geo-tform (new 'static 'vector :x 1.0 :w 33438.652)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 8
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.137 :z -0.9905 :w 11373.791)
          :geo-tform (new 'static 'vector :x 0.2271 :y 0.9734 :z 0.0279 :w 36639.176)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 9
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5102 :z -0.86 :w 20530.754)
          :geo-tform (new 'static 'vector :x 0.409 :y -0.0529 :z 0.9109 :w 32271.676)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 10
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.6644 :z -0.7473 :w 1968.9199)
          :geo-tform (new 'static 'vector :x 0.4093 :y 0.033 :z 0.9117 :w 33077.91)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 11
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9613 :z -0.2752 :w 2214.5525)
          :geo-tform (new 'static 'vector :x 0.4059 :y -0.0481 :z 0.9126 :w 34502.54)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 12
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.5153 :z 0.8569 :w 2080.0034)
          :geo-tform (new 'static 'vector :x 0.4027 :y -0.0356 :z 0.9146 :w 32440.574)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 13
          :parent-joint 10
          :pre-tform (new 'static 'vector :x 0.4859 :z 0.8739 :w 3273.5598)
          :geo-tform (new 'static 'vector :x 0.414 :y 0.0464 :z 0.909 :w 29818.152)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 14
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8326 :z -0.5538 :w 3106.5886)
          :geo-tform (new 'static 'vector :x 0.419 :y -0.032 :z 0.9073 :w 32459.652)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 15
          :parent-joint 10
          :pre-tform (new 'static 'vector :x -0.9421 :z -0.3352 :w 6646.0605)
          :geo-tform (new 'static 'vector :x 0.3914 :y -0.2 :z 0.8982 :w 37623.16)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 16
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.3413 :z -0.9399 :w 1832.5868)
          :geo-tform (new 'static 'vector :x 0.4204 :y -0.1424 :z 0.896 :w 38915.023)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 17
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.1371 :z 0.9905 :w 11369.786)
          :geo-tform (new 'static 'vector :x -0.2272 :y 0.9734 :z 0.0279 :w 28896.426)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 18
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5101 :z 0.86 :w 20534.176)
          :geo-tform (new 'static 'vector :x -0.026 :y 0.9979 :z 0.0579 :w 23979.531)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 19
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.6645 :z 0.7472 :w 1958.0337)
          :geo-tform (new 'static 'vector :x 0.016 :y 0.9992 :z -0.0358 :w 23969.791)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 20
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9615 :z 0.2744 :w 2230.645)
          :geo-tform (new 'static 'vector :x 0.0911 :y 0.9943 :z 0.0536 :w 24079.475)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 21
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.5098 :z -0.8602 :w 2098.3352)
          :geo-tform (new 'static 'vector :x -0.0178 :y 0.999 :z 0.0406 :w 24125.459)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 22
          :parent-joint 19
          :pre-tform (new 'static 'vector :x 0.4819 :z -0.8762 :w 3256.2107)
          :geo-tform (new 'static 'vector :x -0.1538 :y 0.9868 :z -0.0491 :w 23956.574)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 23
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8364 :z 0.548 :w 3087.583)
          :geo-tform (new 'static 'vector :x -0.017 :y 0.9991 :z 0.0369 :w 23745.531)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 24
          :parent-joint 19
          :pre-tform (new 'static 'vector :x -0.9425 :z 0.3339 :w 6655.1807)
          :geo-tform (new 'static 'vector :x 0.2492 :y 0.945 :z 0.2115 :w 24615.268)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 25
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.3403 :z 0.9402 :w 1852.0657)
          :geo-tform (new 'static 'vector :x 0.3178 :y 0.9363 :z 0.1493 :w 24121.836)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 26
          :parent-joint 3
          :pre-tform (new 'static 'vector :x -1.0 :w 20948.764)
          :geo-tform (new 'static 'vector :x -1.0 :w 9182.285)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 27
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9999 :z 0.0068 :w 7387.509)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.003 :z -0.0014 :w 16198.405)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 28
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9697 :z -0.244 :w 191.6382)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 29
          :parent-joint -1
          :pre-tform (new 'static 'vector :y -1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 30
          :parent-joint -1
          :pre-tform (new 'static 'vector :y -1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 31
          :parent-joint -1
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 32
          :parent-joint 26
          :pre-tform (new 'static 'vector :x -0.4854 :z -0.8742 :w 21186.406)
          :geo-tform (new 'static 'vector :x 0.6599 :y 0.6796 :z 0.3201 :w 35879.65)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 33
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9993 :z 0.0363 :w 2717.3774)
          :geo-tform (new 'static 'vector :x 0.6708 :y 0.7057 :z 0.2277 :w 34044.242)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 34
          :parent-joint 26
          :pre-tform (new 'static 'vector :x 0.3584 :z -0.9335 :w 11286.792)
          :geo-tform (new 'static 'vector :x -0.4444 :y 0.7119 :z -0.5437 :w 28463.65)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 35
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1147 :z -0.9933 :w 2024.0066)
          :geo-tform (new 'static 'vector :x -0.5154 :y 0.6809 :z -0.5201 :w 27281.908)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 36
          :parent-joint 26
          :pre-tform (new 'static 'vector :x -0.4859 :z 0.8739 :w 21191.012)
          :geo-tform (new 'static 'vector :x 0.1968 :y 0.4177 :z -0.8869 :w 17933.508)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 37
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9993 :z -0.0361 :w 2729.0828)
          :geo-tform (new 'static 'vector :x 0.0825 :y 0.3055 :z -0.9485 :w 17459.846)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 38
          :parent-joint 26
          :pre-tform (new 'static 'vector :x 0.3588 :z 0.9333 :w 11281.3125)
          :geo-tform (new 'static 'vector :x 0.2273 :y 0.5912 :z 0.7738 :w 23386.34)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 39
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1145 :z 0.9934 :w 2026.6462)
          :geo-tform (new 'static 'vector :x 0.2996 :y 0.5792 :z 0.758 :w 21904.426)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        )
      )
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #t
    :use-pacing #t
    :walk-anim 3
    :turn-anim -1
    :run-anim 3
    :taunt-anim -1
    :run-travel-speed (meters 5)
    :run-acceleration (meters 32)
    :run-turning-acceleration (meters 40)
    :walk-travel-speed (meters 5)
    :walk-acceleration (meters 16)
    :walk-turning-acceleration (meters 40)
    :maximum-rotation-rate (degrees 360)
    :notice-nav-radius (meters 4)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

;; failed to figure out what this is:
(set! (-> *prebot-large-eco-creature-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for method 74 of type prebot-large-eco-creature
(defmethod go-ambush-delay ((this prebot-large-eco-creature))
  (if (type? (ppointer->process (-> this parent)) prebot-large-eco-creature)
      (go-idle2 this)
      ((method-of-type nav-enemy go-ambush-delay) this)
      )
  )

;; definition for method 71 of type prebot-large-eco-creature
(defmethod go-dormant ((this prebot-large-eco-creature))
  (if (type? (ppointer->process (-> this parent)) prebot-large-eco-creature)
      (go-idle2 this)
      ((method-of-type nav-enemy go-dormant) this)
      )
  )

;; definition for method 72 of type prebot-large-eco-creature
(defmethod go-dormant-aware ((this prebot-large-eco-creature))
  (if (type? (ppointer->process (-> this parent)) prebot-large-eco-creature)
      (go-idle2 this)
      ((method-of-type nav-enemy go-dormant-aware) this)
      )
  )

;; definition for method 82 of type prebot-large-eco-creature
(defmethod event-handler ((this prebot-large-eco-creature) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack)
     (let ((s4-0 (the-as object (-> arg3 param 1))))
       (cond
         ((or (not (logtest? (attack-mask penetrate-using) (-> (the-as attack-info s4-0) mask)))
              (logand (penetrate
                        vehicle
                        dark-skin
                        dark-punch
                        dark-bomb
                        dark-smack
                        explode
                        jak-yellow-shot
                        jak-red-shot
                        jak-blue-shot
                        jak-dark-shot
                        jak-red-shockwave
                        jak-dark-nuke
                        jak-dark-blackhole
                        )
                      (-> (the-as attack-info s4-0) penetrate-using)
                      )
              )
          ((method-of-type nav-enemy event-handler) this arg0 arg1 arg2 arg3)
          )
         (else
           (send-event arg0 'attack #f (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                                           (damage 2.0)
                                                                                           (vehicle-damage-factor 1.0)
                                                                                           (vehicle-impulse-factor 1.0)
                                                                                           (shove-up (meters 1))
                                                                                           (shove-back (meters 3))
                                                                                           )
                                                           )
                       )
           (when (and (logtest? (-> (the-as attack-info s4-0) mask) (attack-mask id))
                      (!= (-> (the-as attack-info s4-0) id) (-> this incoming attack-id))
                      )
             (set! (-> this incoming attack-id) (-> (the-as attack-info s4-0) id))
             #t
             )
           )
         )
       )
     )
    (('death-end)
     (prebot-large-eco-creature-method-195 this)
     ((method-of-type nav-enemy event-handler) this arg0 arg1 arg2 arg3)
     )
    (('eco-creature-died)
     (let ((a1-4 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-4 from) (process->ppointer arg0))
       (set! (-> a1-4 num-params) arg1)
       (set! (-> a1-4 message) arg2)
       (set! (-> a1-4 param 0) (-> arg3 param 0))
       (set! (-> a1-4 param 1) (-> arg3 param 1))
       (set! (-> a1-4 param 2) (-> arg3 param 2))
       (set! (-> a1-4 param 3) (-> arg3 param 3))
       (set! (-> a1-4 param 4) (-> arg3 param 4))
       (set! (-> a1-4 param 5) (-> arg3 param 5))
       (send-event-function (ppointer->process (-> this parent)) a1-4)
       )
     )
    (else
      ((method-of-type nav-enemy event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 67 of type prebot-large-eco-creature
(defmethod coin-flip? ((this prebot-large-eco-creature))
  #f
  )

;; definition for method 59 of type prebot-large-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod enemy-common-post ((this prebot-large-eco-creature))
  (let ((t9-0 (method-of-type nav-enemy enemy-common-post)))
    (t9-0 this)
    )
  (let ((f0-0 (quaternion-y-angle (-> this root quat))))
    (set! (-> this diff-angle) (- (-> this old-y-deg) f0-0))
    (cond
      ((< 32768.0 (-> this diff-angle))
       (+! (-> this diff-angle) -65536.0)
       )
      ((< (-> this diff-angle) -32768.0)
       (+! (-> this diff-angle) 65536.0)
       )
      )
    (set! (-> this old-y-deg) f0-0)
    )
  (if (< (+ 0.5 (* 0.00024414062 (-> this nav state speed))) (* 0.005493164 (fabs (-> this diff-angle))))
      (logior! (-> this flags) (eco-creature-flag ecf0))
      (logclear! (-> this flags) (eco-creature-flag ecf0))
      )
  0
  (none)
  )

;; definition for method 194 of type prebot-large-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod prebot-large-eco-creature-method-194 ((this prebot-large-eco-creature))
  (cond
    ((< 0.0 (-> this diff-angle))
     (let ((v1-2 (if (> (-> this skel active-channels) 0)
                     (-> this skel root-channel 0 frame-group)
                     )
                 )
           )
       (cond
         ((not (and v1-2 (= v1-2 (-> this draw art-group data (-> this turn-left-anim)))))
          (ja-channel-push! 1 (seconds 0.1))
          (let ((s5-0 (-> this skel root-channel 0)))
            (joint-control-channel-group-eval!
              s5-0
              (the-as art-joint-anim (-> this draw art-group data (-> this turn-left-anim)))
              num-func-identity
              )
            (set! (-> s5-0 frame-num) 0.0)
            )
          )
         (else
           (let ((a0-8 (-> this skel root-channel 0)))
             (set! (-> a0-8 param 0) (* 0.0019975142 (-> this diff-angle)))
             (joint-control-channel-group-eval! a0-8 (the-as art-joint-anim #f) num-func-loop!)
             )
           )
         )
       )
     )
    (else
      (let ((v1-17 (if (> (-> this skel active-channels) 0)
                       (-> this skel root-channel 0 frame-group)
                       )
                   )
            )
        (cond
          ((not (and v1-17 (= v1-17 (-> this draw art-group data (-> this turn-right-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (let ((s5-1 (-> this skel root-channel 0)))
             (joint-control-channel-group-eval!
               s5-1
               (the-as art-joint-anim (-> this draw art-group data (-> this turn-right-anim)))
               num-func-identity
               )
             (set! (-> s5-1 frame-num) 0.0)
             )
           )
          (else
            (let ((a0-16 (-> this skel root-channel 0)))
              (set! (-> a0-16 param 0) (* -0.0019975142 (-> this diff-angle)))
              (joint-control-channel-group-eval! a0-16 (the-as art-joint-anim #f) num-func-loop!)
              )
            )
          )
        )
      )
    )
  0
  (none)
  )

;; definition for method 195 of type prebot-large-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod prebot-large-eco-creature-method-195 ((this prebot-large-eco-creature))
  (when (not (logtest? (-> this flags) (eco-creature-flag ecf2)))
    (logior! (-> this flags) (eco-creature-flag ecf2))
    (send-event (ppointer->process (-> this parent)) 'eco-creature-died (-> this root trans))
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate knocked (prebot-large-eco-creature)
  :virtual #t
  :enter (behavior ()
    (cond
      ((and (-> self split-type) (or (= (-> self hit-points) 0.0) (nonzero? (-> self fated-time))))
       (large-eco-creature-split)
       (go-virtual wait-for-children)
       )
      (else
        (let ((t9-2 (-> (method-of-type nav-enemy knocked) enter)))
          (if t9-2
              (t9-2)
              )
          )
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate wait-for-children (prebot-large-eco-creature)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('eco-creature-died)
       (let ((v1-1 (new 'stack-no-clear 'event-message-block)))
         (set! (-> v1-1 from) (process->ppointer proc))
         (set! (-> v1-1 num-params) argc)
         (set! (-> v1-1 message) message)
         (set! (-> v1-1 param 0) (-> block param 0))
         (set! (-> v1-1 param 1) (-> block param 1))
         (set! (-> v1-1 param 2) (-> block param 2))
         (set! (-> v1-1 param 3) (-> block param 3))
         (set! (-> v1-1 param 4) (-> block param 4))
         (set! (-> v1-1 param 5) (-> block param 5))
         (send-event-function (ppointer->process (-> self parent)) v1-1)
         )
       )
      )
    )
  :enter (behavior ()
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (let ((v1-6 (-> self nav)))
      (logclear! (-> v1-6 shape nav-flags) (nav-flags has-extra-sphere))
      )
    0
    (logclear! (-> self root nav-flags) (nav-flags has-root-sphere))
    )
  :code (behavior ()
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    (process-entity-status! self (entity-perm-status subtask-complete) #t)
    )
  )

;; failed to figure out what this is:
(defstate attack (prebot-large-eco-creature)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logclear! (-> self flags) (eco-creature-flag ecf1))
    (logior! (-> self enemy-flags) (enemy-flag lock-focus))
    (set! (-> self root penetrate-using) (penetrate generic-attack lunge))
    (reset-penetrate! self)
    (logior! (-> self focus-status) (focus-status dangerous))
    (let* ((v1-9 *game-info*)
           (a0-5 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-5)
      (set! (-> self attack-id) a0-5)
      )
    (ja-channel-push! 1 (seconds 0.1))
    (ja :group! (-> self draw art-group data (-> self attack-anims (rand-vu-int-count (-> self attack-anims length))))
        )
    )
  :exit (behavior ()
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (nav-enemy-method-179 self)
    (let ((v1-4 (-> self nav)))
      (set! (-> v1-4 target-speed) (-> self enemy-info run-travel-speed))
      )
    0
    (let ((v1-6 (-> self nav)))
      (set! (-> v1-6 max-rotation-rate) (-> self enemy-info maximum-rotation-rate))
      )
    0
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    )
  :trans (behavior ()
    (reset-penetrate! self)
    nav-state
    (if (logtest? (-> self enemy-flags) (enemy-flag victory))
        (logior! (-> self flags) (eco-creature-flag ecf1))
        )
    (cond
      ((ja-group-in-array? (-> self attack-anims))
       (ja :num! (seek!))
       (when (>= (ja-aframe-num 0) (-> self attack-stop-frame))
         (let ((v1-17 (-> self nav)))
           (set! (-> v1-17 target-speed) 0.0)
           )
         0
         (let ((v1-20 (-> self nav state)))
           (set! (-> v1-20 speed) 0.0)
           )
         0
         (let ((v1-22 (-> self nav)))
           (set! (-> v1-22 max-rotation-rate) 0.0)
           )
         0
         )
       (when (ja-done? 0)
         (if (logtest? (-> self flags) (eco-creature-flag ecf1))
             (go-virtual victory)
             (go-hostile self)
             )
         )
       )
      ((logtest? (-> self flags) (eco-creature-flag ecf1))
       (go-virtual victory)
       )
      (else
        (go-hostile self)
        )
      )
    )
  :code sleep-code
  :post nav-enemy-chase-post
  )

;; failed to figure out what this is:
(defstate notice (prebot-large-eco-creature)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy notice) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (go-best-state self)
    )
  )

;; failed to figure out what this is:
(defstate hostile (prebot-large-eco-creature)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((a0-1 (handle->process (-> self focus handle))))
      (when (and a0-1 (time-elapsed? (-> self state-time) (seconds 0.1)))
        (let ((gp-1
                (vector-! (new 'stack-no-clear 'vector) (get-trans (the-as process-focusable a0-1) 0) (-> self root trans))
                )
              )
          (if (and (< (vector-normalize-ret-len! gp-1 1.0) 18432.0)
                   (< (cos 5461.3335) (vector-dot gp-1 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> self root quat))))
                   )
              (go-virtual attack)
              )
          )
        )
      )
    (cond
      ((not (logtest? (-> self flags) (eco-creature-flag ecf0)))
       (let ((v1-29 (ja-group)))
         (when (not (and v1-29 (= v1-29 (-> self draw art-group data (-> self enemy-info hostile-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info hostile-anim)) :num! min)
           )
         )
       (ja :num! (loop! (/ (-> self nav state speed) (* 0.5 (-> self enemy-info run-travel-speed)))))
       )
      (else
        (prebot-large-eco-creature-method-194 self)
        )
      )
    )
  :code (behavior ()
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate circling (prebot-large-eco-creature)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy circling) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (cond
      ((not (logtest? (-> self flags) (eco-creature-flag ecf0)))
       (let ((v1-8 (ja-group)))
         (when (not (and v1-8 (= v1-8 (-> self draw art-group data (-> self enemy-info walk-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info walk-anim)) :num! min)
           )
         )
       (ja :num! (loop! (/ (-> self nav state speed) (* 0.5 (-> self enemy-info run-travel-speed)))))
       )
      (else
        (prebot-large-eco-creature-method-194 self)
        )
      )
    )
  :code (behavior ()
    (nav-enemy-method-176 self)
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate pacing (prebot-large-eco-creature)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy pacing) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (cond
      ((not (logtest? (-> self flags) (eco-creature-flag ecf0)))
       (let ((v1-8 (ja-group)))
         (when (not (and v1-8 (= v1-8 (-> self draw art-group data (-> self enemy-info walk-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info walk-anim)) :num! min)
           )
         )
       (ja :num! (loop! (/ (-> self nav state speed) (* 0.5 (-> self enemy-info run-travel-speed)))))
       )
      (else
        (prebot-large-eco-creature-method-194 self)
        )
      )
    )
  :code (behavior ()
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate stare (prebot-large-eco-creature)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type nav-enemy stare) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (cond
      ((not (logtest? (-> self flags) (eco-creature-flag ecf0)))
       (let ((v1-8 (ja-group)))
         (when (not (and v1-8 (= v1-8 (-> self draw art-group data (-> self enemy-info idle-anim)))))
           (ja-channel-push! 1 (seconds 0.1))
           (ja :group! (-> self draw art-group data (-> self enemy-info idle-anim)) :num! min)
           )
         )
       (ja :num! (loop!))
       )
      (else
        (prebot-large-eco-creature-method-194 self)
        )
      )
    )
  :code (behavior ()
    (until #f
      (logior! (-> self mask) (process-mask sleep-code))
      (suspend)
      )
    #f
    )
  )

;; failed to figure out what this is:
(defstate victory (prebot-large-eco-creature)
  :virtual #t
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.075))
    (let ((f30-0 (rnd-float-range self 0.8 1.2)))
      (ja-no-eval :group! (-> self draw art-group data (-> self victory-anims (rand-vu-int-count (-> self victory-anims length))))
                  :num! (seek! max f30-0)
                  :frame-num 0.0
                  )
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max f30-0))
        )
      )
    (go-best-state self)
    )
  )

;; failed to figure out what this is:
(defstate unfold (prebot-large-eco-creature)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (event-handler self proc argc message block)
    )
  :enter (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja :group! (-> self draw art-group data 13) :num! min)
    )
  :trans (behavior ()
    (ja :num! (seek!))
    (if (ja-done? 0)
        (go-best-state self)
        )
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (do-push-aways (-> self root))
    )
  )

;; failed to figure out what this is:
(defstate fly-to-dest (prebot-large-eco-creature)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (let ((v1-1 (the-as object (-> block param 1))))
         (if (or (not (logtest? (attack-mask penetrate-using) (-> (the-as attack-info v1-1) mask)))
                 (logand (penetrate
                           vehicle
                           dark-skin
                           dark-punch
                           dark-bomb
                           dark-smack
                           explode
                           jak-yellow-shot
                           jak-red-shot
                           jak-blue-shot
                           jak-dark-shot
                           jak-red-shockwave
                           jak-dark-nuke
                           jak-dark-blackhole
                           )
                         (-> (the-as attack-info v1-1) penetrate-using)
                         )
                 )
             (enemy-event-handler proc argc message block)
             (send-event proc 'attack #f (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                                             (damage 2.0)
                                                                                             (vehicle-damage-factor 1.0)
                                                                                             (vehicle-impulse-factor 1.0)
                                                                                             (shove-up (meters 1))
                                                                                             (shove-back (meters 3))
                                                                                             )
                                                             )
                         )
             )
         )
       #f
       )
      (('touch 'bonk)
       (if (and (< (-> self which-trajectory) 2) (= proc *target*))
           (send-event
             *target*
             'attack
             #f
             (static-attack-info :mask (vehicle-impulse-factor) ((id (new-attack-id))
                                                                 (damage 2.0)
                                                                 (vehicle-damage-factor 1.0)
                                                                 (vehicle-impulse-factor 1.0)
                                                                 (shove-up (meters 1))
                                                                 (shove-back (meters 3))
                                                                 )
                                 )
             )
           (event-handler self proc argc message block)
           )
       #t
       )
      (('set-dest)
       (let ((s5-0 (the-as object (-> block param 0)))
             (gp-0 (the-as object (-> block param 1)))
             )
         (let ((f30-0 (the-as float (-> block param 2)))
               (f28-0 (the-as float (-> block param 3)))
               )
           (if (< (-> (the-as vector s5-0) y) (-> (the-as vector gp-0) y))
               (+! f30-0 (- (-> (the-as vector gp-0) y) (-> (the-as vector s5-0) y)))
               )
           (let ((f0-15 (* 0.0000061035157 (vector-vector-xz-distance (the-as vector s5-0) (the-as vector gp-0)) f28-0)))
             (setup-from-to-duration-and-height! (-> self traj) (the-as vector s5-0) (the-as vector gp-0) f0-15 f30-0)
             )
           )
         (let ((v1-27 (new 'stack-no-clear 'vector)))
           (vector-! v1-27 (the-as vector gp-0) (the-as vector s5-0))
           (set! (-> v1-27 y) 0.0)
           (let ((f30-1 (atan (-> v1-27 x) (-> v1-27 z))))
             (quaternion-set! (-> self root quat) 0.0 (sin (* 0.5 f30-1)) 0.0 (cos (* 0.5 f30-1)))
             )
           )
         (set! (-> self which-trajectory) 0)
         (set! (-> self x-rotate) 0.0)
         (set! (-> self y-rotate) 0.0)
         (set! (-> self root trans quad) (-> (the-as vector s5-0) quad))
         (set! (-> self launch-pos quad) (-> (the-as vector s5-0) quad))
         (set! (-> self launch quad) (-> (the-as vector s5-0) quad))
         (let* ((v1-36 (-> self nav))
                (f0-25 (-> v1-36 extra-nav-sphere w))
                )
           (set! (-> v1-36 extra-nav-sphere quad) (-> (the-as vector gp-0) quad))
           (set! (-> v1-36 extra-nav-sphere w) f0-25)
           )
         )
       0
       (let ((v1-39 (-> self nav)))
         (set! (-> v1-39 extra-nav-sphere w) 16384.0)
         )
       0
       (let ((v1-41 (-> self nav)))
         (logior! (-> v1-41 shape nav-flags) (nav-flags has-extra-sphere))
         )
       0
       )
      (else
        (if (> (-> self which-trajectory) 0)
            (event-handler self proc argc message block)
            )
        )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (ja :group! (-> self draw art-group data 12) :num! min)
    )
  :exit (behavior ()
    (quaternion-identity! (-> self spin-jm quat))
    (let ((v1-1 (-> self nav)))
      (logclear! (-> v1-1 shape nav-flags) (nav-flags has-extra-sphere))
      )
    0
    )
  :trans (behavior ()
    (let ((v1-0 (-> self which-trajectory)))
      (cond
        ((zero? v1-0)
         (sound-play "launch-trail" :id (-> self trail-sound) :position (-> self root trans))
         (logior! (-> self flags) (eco-creature-flag ecf4))
         (+! (-> self x-rotate) 4369.067)
         (+! (-> self y-rotate) 3458.8445)
         )
        ((= v1-0 1)
         (when (logtest? (-> self flags) (eco-creature-flag ecf4))
           (sound-stop (-> self trail-sound))
           (logclear! (-> self flags) (eco-creature-flag ecf4))
           )
         (+! (-> self x-rotate) 7281.778)
         (set! (-> self y-rotate) 0.0)
         )
        (else
          (seek! (-> self x-rotate) 65353.957 7281.778)
          )
        )
      )
    (if (< 65536.0 (-> self x-rotate))
        (+! (-> self x-rotate) -65536.0)
        )
    (if (< 65536.0 (-> self y-rotate))
        (+! (-> self y-rotate) -65536.0)
        )
    (let ((s5-0 (new 'stack-no-clear 'quaternion))
          (gp-0 (new 'stack-no-clear 'quaternion))
          )
      (quaternion-set! s5-0 (sin (* 0.5 (-> self x-rotate))) 0.0 0.0 (cos (* 0.5 (-> self x-rotate))))
      (quaternion-set! gp-0 0.0 (sin (* 0.5 (-> self y-rotate))) 0.0 (cos (* 0.5 (-> self y-rotate))))
      (quaternion-normalize! (quaternion*! (-> self spin-jm quat) gp-0 s5-0))
      )
    (cond
      ((time-elapsed? (-> self state-time) (the int (-> self traj time)))
       (let ((v1-34 (-> self which-trajectory)))
         (cond
           ((zero? v1-34)
            (set! (-> self which-trajectory) 1)
            (sound-play "caveco-land" :position (-> self root trans))
            (compute-trans-at-time
              (-> self traj)
              (fmin (-> self traj time) (the float (- (current-time) (-> self state-time))))
              (-> self root trans)
              )
            (set-time! (-> self state-time))
            (let ((gp-3 (vector-! (new 'stack-no-clear 'vector) (-> self root trans) (the-as vector (-> self traj)))))
              (set! (-> gp-3 y) 0.0)
              (vector-normalize! gp-3 12288.0)
              (vector+! gp-3 gp-3 (-> self root trans))
              (setup-from-to-duration-and-height! (-> self traj) (-> self root trans) gp-3 75.0 4096.0)
              )
            )
           ((= v1-34 1)
            (set! (-> self which-trajectory) 2)
            (compute-trans-at-time
              (-> self traj)
              (fmin (-> self traj time) (the float (- (current-time) (-> self state-time))))
              (-> self root trans)
              )
            (set-time! (-> self state-time))
            (let ((gp-5 (vector-! (new 'stack-no-clear 'vector) (-> self root trans) (the-as vector (-> self traj)))))
              (set! (-> gp-5 y) 0.0)
              (vector-normalize! gp-5 4096.0)
              (vector+! gp-5 gp-5 (-> self root trans))
              (setup-from-to-duration-and-height! (-> self traj) (-> self root trans) gp-5 37.5 1024.0)
              )
            )
           ((= v1-34 2)
            (compute-trans-at-time
              (-> self traj)
              (fmin (-> self traj time) (the float (- (current-time) (-> self state-time))))
              (-> self root trans)
              )
            (set! (-> self which-trajectory) 3)
            (let* ((gp-6 (-> self state-time))
                   (f30-0 300.0)
                   (v1-76 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
                   (v1-77 (the-as number (logior #x3f800000 v1-76)))
                   )
              (set! (-> self state-time) (+ gp-6 (the int (* f30-0 (+ -1.0 (the-as float v1-77))))))
              )
            )
           (else
             (go-virtual unfold)
             )
           )
         )
       )
      ((< (-> self which-trajectory) 3)
       (compute-trans-at-time
         (-> self traj)
         (fmin (-> self traj time) (the float (- (current-time) (-> self state-time))))
         (-> self root trans)
         )
       (if (logtest? (-> self flags) (eco-creature-flag ecf3))
           (spawn-from-cspace (-> self trail-part) (-> self node-list data 3))
           )
       )
      )
    (ja :num! (loop! 0.2))
    )
  :code sleep-code
  :post (behavior ()
    (transform-post)
    (logior! (-> self flags) (eco-creature-flag ecf3))
    (do-push-aways (-> self root))
    )
  )

;; definition for method 122 of type prebot-large-eco-creature
(defmethod go-idle2 ((this prebot-large-eco-creature))
  (set! (-> this event-hook) (-> (method-of-object this fly-to-dest) event))
  (go (method-of-object this fly-to-dest))
  )

;; definition for method 120 of type prebot-large-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this prebot-large-eco-creature))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 16) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 17))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd jak bot hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid deadly))
      (set! (-> s4-0 transform-index) 26)
      (set-vector! (-> s4-0 local-sphere) 1076.4288 -3118.6943 2700.0833 18061.312)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec backgnd))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set-vector! (-> v1-14 local-sphere) 0.0 5734.4 0.0 8192.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid deadly))
      (set! (-> v1-16 transform-index) 3)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid deadly))
      (set! (-> v1-18 transform-index) 4)
      (set-vector! (-> v1-18 local-sphere) -26.2144 -2495.2832 378.88 4096.0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-20 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-20 prim-core action) (collide-action solid deadly))
      (set! (-> v1-20 transform-index) 6)
      (set-vector! (-> v1-20 local-sphere) -32.3584 281.8048 1412.7104 2940.109)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-22 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-22 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-22 prim-core action) (collide-action solid deadly))
      (set! (-> v1-22 transform-index) 9)
      (set-vector! (-> v1-22 local-sphere) -12.288 84.3776 -2.4576 2387.5583)
      )
    (let ((v1-24 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-24 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-24 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-24 prim-core action) (collide-action solid deadly))
      (set! (-> v1-24 transform-index) 10)
      (set-vector! (-> v1-24 local-sphere) 178.5856 -1004.3392 81.5104 2358.4768)
      )
    (let ((v1-26 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-26 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-26 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-26 prim-core action) (collide-action solid deadly))
      (set! (-> v1-26 transform-index) 18)
      (set-vector! (-> v1-26 local-sphere) 0.0 0.0 0.0 2896.6912)
      )
    (let ((v1-28 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-28 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-28 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-28 prim-core action) (collide-action solid deadly))
      (set! (-> v1-28 transform-index) 19)
      (set-vector! (-> v1-28 local-sphere) -130.2528 1489.7152 -119.1936 2784.8704)
      )
    (let ((v1-30 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-30 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-30 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-30 prim-core action) (collide-action solid deadly))
      (set! (-> v1-30 transform-index) 28)
      (set-vector! (-> v1-30 local-sphere) 0.0 0.0 0.0 2600.5503)
      )
    (let ((v1-32 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-32 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-32 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-32 prim-core action) (collide-action solid deadly))
      (set! (-> v1-32 transform-index) 29)
      (set-vector! (-> v1-32 local-sphere) 0.0 0.0 0.0 2296.6272)
      )
    (let ((v1-34 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-34 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-34 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-34 prim-core action) (collide-action solid deadly))
      (set! (-> v1-34 transform-index) 30)
      (set-vector! (-> v1-34 local-sphere) 82.7392 -43.008 -394.0352 1869.824)
      )
    (let ((v1-36 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-36 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-36 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-36 prim-core action) (collide-action solid deadly))
      (set! (-> v1-36 transform-index) 31)
      (set-vector! (-> v1-36 local-sphere) 151.9616 0.0 -608.256 1713.3568)
      )
    (let ((v1-38 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-38 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-38 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-38 prim-core action) (collide-action solid deadly))
      (set! (-> v1-38 transform-index) 33)
      (set-vector! (-> v1-38 local-sphere) -1664.2048 -741.7856 -648.8064 3235.4304)
      )
    (let ((v1-40 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-40 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-40 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-40 prim-core action) (collide-action solid deadly))
      (set! (-> v1-40 transform-index) 35)
      (set-vector! (-> v1-40 local-sphere) 1078.4768 509.1328 511.1808 3509.8623)
      )
    (let ((v1-42 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-42 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-42 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-42 prim-core action) (collide-action solid deadly))
      (set! (-> v1-42 transform-index) 37)
      (set-vector! (-> v1-42 local-sphere) 791.7568 571.8016 355.9424 3460.3008)
      )
    (let ((v1-44 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-44 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-44 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-44 prim-core action) (collide-action solid deadly))
      (set! (-> v1-44 transform-index) 39)
      (set-vector! (-> v1-44 local-sphere) -593.1008 -499.712 -635.6992 3313.2544)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-46 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-46 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-46 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 7 of type prebot-large-eco-creature
(defmethod relocate ((this prebot-large-eco-creature) (offset int))
  (if (nonzero? (-> this spin-jm))
      (&+! (-> this spin-jm) offset)
      )
  (if (nonzero? (-> this trail-part))
      (&+! (-> this trail-part) offset)
      )
  (call-parent-method this offset)
  )

;; definition for method 10 of type prebot-large-eco-creature
(defmethod deactivate ((this prebot-large-eco-creature))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this trail-part))
      (kill-particles (-> this trail-part))
      )
  (when (logtest? (-> this flags) (eco-creature-flag ecf4))
    (sound-stop (-> this trail-sound))
    (logclear! (-> this flags) (eco-creature-flag ecf4))
    )
  (call-parent-method this)
  (none)
  )

;; definition for method 121 of type prebot-large-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this prebot-large-eco-creature))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-cav-eco-lg" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-enemy-defaults! this *prebot-large-eco-creature-nav-enemy-info*)
  (logior! (-> this draw global-effect) (draw-control-global-effect rim-lights2))
  (let ((v1-8 (-> this neck)))
    (set! (-> v1-8 up) (the-as uint 1))
    (set! (-> v1-8 nose) (the-as uint 2))
    (set! (-> v1-8 ear) (the-as uint 0))
    (set-vector! (-> v1-8 twist-max) 3640.889 11832.889 0.0 1.0)
    (set! (-> v1-8 ignore-angle) 15473.777)
    )
  (let ((v1-10 (-> this nav)))
    (set! (-> v1-10 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> this root dynam) 573440.0)
  (logior! (-> this nav flags) (nav-control-flag momentum-ignore-heading))
  (logclear! (-> this mask) (process-mask actor-pause))
  (logclear! (-> this enemy-flags) (enemy-flag actor-pause-backup))
  (logior! (-> this focus-status) (focus-status dangerous))
  (logior! (-> this enemy-flags) (enemy-flag dangerous-backup))
  (set! (-> this attack-anims) (new 'static 'boxed-array :type int32 8 9))
  (set! (-> this victory-anims) (new 'static 'boxed-array :type int32 10 11))
  (set! (-> this turn-left-anim) 6)
  (set! (-> this turn-right-anim) 7)
  (set! (-> this split-type) prebot-medium-eco-creature)
  (set! (-> this attack-stop-frame) 0.0)
  (set! (-> this which-trajectory) 0)
  (set! (-> this spin-jm) (new 'process 'joint-mod (joint-mod-mode joint-set*) this 3))
  (set! (-> this trail-part) (create-launch-control (-> *part-group-id-table* 440) this))
  (set! (-> this flags) (eco-creature-flag))
  (set! (-> this trail-sound) (new-sound-id))
  (send-event (ppointer->process (-> this parent)) 'start-critter)
  0
  (none)
  )

;; definition of type prebot-medium-eco-creature
(deftype prebot-medium-eco-creature (prebot-large-eco-creature)
  ((is-top         basic)
   (is-bottom      basic)
   (initial-scale  float)
   (final-scale    float)
   )
  (:methods
    (prebot-medium-eco-creature-method-196 (_type_) none)
    (prebot-medium-eco-creature-method-197 (_type_) none)
    )
  )

;; definition for method 3 of type prebot-medium-eco-creature
(defmethod inspect ((this prebot-medium-eco-creature))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-large-eco-creature inspect)))
    (t9-0 this)
    )
  (format #t "~2Tis-top: ~A~%" (-> this is-top))
  (format #t "~2Tis-bottom: ~A~%" (-> this is-bottom))
  (format #t "~2Tinitial-scale: ~f~%" (-> this initial-scale))
  (format #t "~2Tfinal-scale: ~f~%" (-> this final-scale))
  (label cfg-4)
  this
  )

;; definition for function large-eco-creature-split
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defbehavior large-eco-creature-split prebot-large-eco-creature ()
  (sound-play "caveco-spawn" :position (-> self root trans))
  (let ((gp-1 (new 'stack-no-clear 'enemy-init-by-other-params)))
    (let ((v1-2 (new 'stack-no-clear 'vector)))
      (-> self root transv)
      (set! (-> v1-2 quad) (-> self root trans quad))
      (set! (-> gp-1 trans quad) (-> v1-2 quad))
      )
    (quaternion-copy! (-> gp-1 quat) (-> self root quat))
    (set! (-> gp-1 entity) (-> self entity))
    (set! (-> gp-1 directed?) #f)
    (set! (-> gp-1 no-initial-move-to-ground?) #f)
    (set! (-> gp-1 art-level) (-> self level name))
    (let* ((s5-1 (get-process *default-dead-pool* (-> self split-type) #x4000 1))
           (v1-9 (when s5-1
                   (let ((t9-4 (method-of-type process activate)))
                     (t9-4 s5-1 self "eco-creature" (the-as pointer #x70004000))
                     )
                   (run-now-in-process s5-1 enemy-init-by-other self gp-1)
                   (-> s5-1 ppointer)
                   )
                 )
           )
      (when v1-9
        (set-vector!
          (-> (the-as (pointer prebot-medium-eco-creature) v1-9) 0 incoming attack-direction)
          (-> self incoming attack-direction z)
          (-> self incoming attack-direction y)
          (- (-> self incoming attack-direction x))
          1.0
          )
        (set! (-> (the-as (pointer prebot-medium-eco-creature) v1-9) 0 incoming knocked-type)
              (knocked-type blue-shot)
              )
        (if (logtest? (-> self flags) (eco-creature-flag ecf2))
            (set! (-> (the-as prebot-medium-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-9) 0)) flags)
                  (logior (-> (the-as prebot-large-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-9) 0)) flags)
                          (eco-creature-flag ecf2)
                          )
                  )
            (logclear!
              (-> (the-as prebot-medium-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-9) 0)) flags)
              (eco-creature-flag ecf2)
              )
            )
        (prebot-medium-eco-creature-method-196
          (the-as prebot-medium-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-9) 0))
          )
        )
      )
    (let* ((s5-2 (get-process *default-dead-pool* (-> self split-type) #x4000 1))
           (v1-13 (when s5-2
                    (let ((t9-8 (method-of-type process activate)))
                      (t9-8 s5-2 self "eco-creature" (the-as pointer #x70004000))
                      )
                    (run-now-in-process s5-2 enemy-init-by-other self gp-1)
                    (-> s5-2 ppointer)
                    )
                  )
           )
      (when v1-13
        (set-vector!
          (-> (the-as (pointer prebot-medium-eco-creature) v1-13) 0 incoming attack-direction)
          (- (-> self incoming attack-direction z))
          (-> self incoming attack-direction y)
          (-> self incoming attack-direction x)
          1.0
          )
        (set! (-> (the-as (pointer prebot-medium-eco-creature) v1-13) 0 incoming knocked-type)
              (knocked-type blue-shot)
              )
        (if (logtest? (-> self flags) (eco-creature-flag ecf2))
            (logior!
              (-> (the-as prebot-medium-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-13) 0)) flags)
              (eco-creature-flag ecf2)
              )
            (logclear!
              (-> (the-as prebot-medium-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-13) 0)) flags)
              (eco-creature-flag ecf2)
              )
            )
        (prebot-medium-eco-creature-method-197
          (the-as prebot-medium-eco-creature (-> (the-as (pointer prebot-medium-eco-creature) v1-13) 0))
          )
        )
      )
    )
  (prebot-large-eco-creature-method-195 self)
  0
  (none)
  )

;; definition for symbol *prebot-medium-eco-creature-nav-enemy-info*, type nav-enemy-info
(define *prebot-medium-eco-creature-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 3
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x2
        :param0 100
        :param1 100
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 2
    :notice-anim 2
    :hostile-anim 15
    :hit-anim 2
    :knocked-anim 2
    :knocked-land-anim 2
    :die-anim 2
    :die-falling-anim 2
    :victory-anim 2
    :jump-wind-up-anim 2
    :jump-in-air-anim 2
    :jump-land-anim 2
    :neck-joint 5
    :look-at-joint 5
    :bullseye-joint 4
    :notice-distance (meters 200)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 20)
    :default-hit-points 6.0
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      jak-red-shockwave
      jak-dark-nuke
      jak-dark-blackhole
      emp-blast
      penetrate38
      penetrate39
      penetrate40
      penetrate41
      penetrate42
      penetrate43
      penetrate44
      penetrate45
      penetrate46
      penetrate47
      penetrate48
      penetrate49
      penetrate50
      penetrate51
      penetrate52
      penetrate53
      penetrate54
      penetrate55
      penetrate56
      penetrate57
      penetrate58
      penetrate59
      penetrate60
      penetrate61
      penetrate64
      penetrate63
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3.5)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 49152.0
    :knocked-red-vy-lo 57344.0
    :knocked-red-vy-hi 69632.0
    :knocked-blue-vxz-lo 32768.0
    :knocked-blue-vxz-hi 40960.0
    :knocked-blue-vy-lo 20480.0
    :knocked-blue-vy-hi 53248.0
    :ragdoll-info (new 'static 'ragdoll-setup
      :scale (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
      :bg-collide-with (collide-spec backgnd player-list)
      :joint-setup (new 'static 'boxed-array :type ragdoll-joint-setup
        (new 'static 'ragdoll-joint-setup
          :joint-index 3
          :parent-joint -1
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 4
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 1.0 :w 35404.914)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 5
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 8223.438)
          :geo-tform (new 'static 'vector :x 1.0 :w 27181.492)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 6
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 14248.819)
          :geo-tform (new 'static 'vector :x -1.0 :w 10623.986)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 7
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 12262.859)
          :geo-tform (new 'static 'vector :x 1.0 :w 33438.652)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 8
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.137 :z -0.9905 :w 11373.791)
          :geo-tform (new 'static 'vector :x 0.2271 :y 0.9734 :z 0.0279 :w 36639.176)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 9
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5102 :z -0.86 :w 20530.754)
          :geo-tform (new 'static 'vector :x 0.409 :y -0.0529 :z 0.9109 :w 32271.676)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 10
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.6644 :z -0.7473 :w 1968.9199)
          :geo-tform (new 'static 'vector :x 0.4093 :y 0.033 :z 0.9117 :w 33077.91)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 11
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9613 :z -0.2752 :w 2214.5525)
          :geo-tform (new 'static 'vector :x 0.4059 :y -0.0481 :z 0.9126 :w 34502.54)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 12
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.5153 :z 0.8569 :w 2080.0034)
          :geo-tform (new 'static 'vector :x 0.4027 :y -0.0356 :z 0.9146 :w 32440.574)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 13
          :parent-joint 10
          :pre-tform (new 'static 'vector :x 0.4859 :z 0.8739 :w 3273.5598)
          :geo-tform (new 'static 'vector :x 0.414 :y 0.0464 :z 0.909 :w 29818.152)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 14
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8326 :z -0.5538 :w 3106.5886)
          :geo-tform (new 'static 'vector :x 0.419 :y -0.032 :z 0.9073 :w 32459.652)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 15
          :parent-joint 10
          :pre-tform (new 'static 'vector :x -0.9421 :z -0.3352 :w 6646.0605)
          :geo-tform (new 'static 'vector :x 0.3914 :y -0.2 :z 0.8982 :w 37623.16)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 16
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.3413 :z -0.9399 :w 1832.5868)
          :geo-tform (new 'static 'vector :x 0.4204 :y -0.1424 :z 0.896 :w 38915.023)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 17
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.1371 :z 0.9905 :w 11369.786)
          :geo-tform (new 'static 'vector :x -0.2272 :y 0.9734 :z 0.0279 :w 28896.426)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 18
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5101 :z 0.86 :w 20534.176)
          :geo-tform (new 'static 'vector :x -0.026 :y 0.9979 :z 0.0579 :w 23979.531)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 19
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.6645 :z 0.7472 :w 1958.0337)
          :geo-tform (new 'static 'vector :x 0.016 :y 0.9992 :z -0.0358 :w 23969.791)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 20
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9615 :z 0.2744 :w 2230.645)
          :geo-tform (new 'static 'vector :x 0.0911 :y 0.9943 :z 0.0536 :w 24079.475)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 21
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.5098 :z -0.8602 :w 2098.3352)
          :geo-tform (new 'static 'vector :x -0.0178 :y 0.999 :z 0.0406 :w 24125.459)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 22
          :parent-joint 19
          :pre-tform (new 'static 'vector :x 0.4819 :z -0.8762 :w 3256.2107)
          :geo-tform (new 'static 'vector :x -0.1538 :y 0.9868 :z -0.0491 :w 23956.574)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 23
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8364 :z 0.548 :w 3087.583)
          :geo-tform (new 'static 'vector :x -0.017 :y 0.9991 :z 0.0369 :w 23745.531)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 24
          :parent-joint 19
          :pre-tform (new 'static 'vector :x -0.9425 :z 0.3339 :w 6655.1807)
          :geo-tform (new 'static 'vector :x 0.2492 :y 0.945 :z 0.2115 :w 24615.268)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 25
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.3403 :z 0.9402 :w 1852.0657)
          :geo-tform (new 'static 'vector :x 0.3178 :y 0.9363 :z 0.1493 :w 24121.836)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 26
          :parent-joint 3
          :pre-tform (new 'static 'vector :x -1.0 :w 20948.764)
          :geo-tform (new 'static 'vector :x -1.0 :w 9182.285)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 27
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9999 :z 0.0068 :w 7387.509)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.003 :z -0.0014 :w 16198.405)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 28
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9697 :z -0.244 :w 191.6382)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 29
          :parent-joint -1
          :pre-tform (new 'static 'vector :y -1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 30
          :parent-joint -1
          :pre-tform (new 'static 'vector :y -1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 31
          :parent-joint -1
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 32
          :parent-joint 26
          :pre-tform (new 'static 'vector :x -0.4854 :z -0.8742 :w 21186.406)
          :geo-tform (new 'static 'vector :x 0.6599 :y 0.6796 :z 0.3201 :w 35879.65)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 33
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9993 :z 0.0363 :w 2717.3774)
          :geo-tform (new 'static 'vector :x 0.6708 :y 0.7057 :z 0.2277 :w 34044.242)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 34
          :parent-joint 26
          :pre-tform (new 'static 'vector :x 0.3584 :z -0.9335 :w 11286.792)
          :geo-tform (new 'static 'vector :x -0.4444 :y 0.7119 :z -0.5437 :w 28463.65)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 35
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1147 :z -0.9933 :w 2024.0066)
          :geo-tform (new 'static 'vector :x -0.5154 :y 0.6809 :z -0.5201 :w 27281.908)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 36
          :parent-joint 26
          :pre-tform (new 'static 'vector :x -0.4859 :z 0.8739 :w 21191.012)
          :geo-tform (new 'static 'vector :x 0.1968 :y 0.4177 :z -0.8869 :w 17933.508)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 37
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9993 :z -0.0361 :w 2729.0828)
          :geo-tform (new 'static 'vector :x 0.0825 :y 0.3055 :z -0.9485 :w 17459.846)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 38
          :parent-joint 26
          :pre-tform (new 'static 'vector :x 0.3588 :z 0.9333 :w 11281.3125)
          :geo-tform (new 'static 'vector :x 0.2273 :y 0.5912 :z 0.7738 :w 23386.34)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 39
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1145 :z 0.9934 :w 2026.6462)
          :geo-tform (new 'static 'vector :x 0.2996 :y 0.5792 :z 0.758 :w 21904.426)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        )
      )
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #t
    :use-pacing #t
    :walk-anim 15
    :turn-anim -1
    :run-anim 15
    :taunt-anim -1
    :run-travel-speed (meters 5)
    :run-acceleration (meters 32)
    :run-turning-acceleration (meters 40)
    :walk-travel-speed (meters 5)
    :walk-acceleration (meters 16)
    :walk-turning-acceleration (meters 40)
    :maximum-rotation-rate (degrees 360)
    :notice-nav-radius (meters 3)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

;; failed to figure out what this is:
(set! (-> *prebot-medium-eco-creature-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for function prebot-eco-creature-joint-callback
(defun prebot-eco-creature-joint-callback ((arg0 cspace) (arg1 transformq))
  (when (and (= (the-as float (-> arg0 param1)) 1.0) (= (-> arg0 param0) prebot-eco-creature-joint-callback))
    (let ((a2-1 arg0))
      (set! (-> a2-1 param0) cspace<-parented-transformq-joint!)
      )
    )
  (set-vector!
    (-> arg1 scale)
    (the-as float (-> arg0 param1))
    (the-as float (-> arg0 param1))
    (the-as float (-> arg0 param1))
    1.0
    )
  (cspace<-parented-transformq-joint! arg0 arg1)
  (none)
  )

;; definition for method 196 of type prebot-medium-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod prebot-medium-eco-creature-method-196 ((this prebot-medium-eco-creature))
  (set! (-> this is-top) (the-as basic #t))
  (let ((v1-2 (-> this node-list data 32)))
    (set! (-> v1-2 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-2 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-4 (-> this node-list data 33)))
    (set! (-> v1-4 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-4 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-6 (-> this node-list data 36)))
    (set! (-> v1-6 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-6 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-8 (-> this node-list data 37)))
    (set! (-> v1-8 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-8 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-10 (-> this node-list data 34)))
    (set! (-> v1-10 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-10 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-12 (-> this node-list data 35)))
    (set! (-> v1-12 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-12 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-14 (-> this node-list data 38)))
    (set! (-> v1-14 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-14 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-16 (-> this node-list data 39)))
    (set! (-> v1-16 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-16 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-18 (-> this node-list data 27)))
    (set! (-> v1-18 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-18 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-20 (-> this node-list data 28)))
    (set! (-> v1-20 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-20 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-22 (-> this node-list data 29)))
    (set! (-> v1-22 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-22 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-24 (-> this node-list data 30)))
    (set! (-> v1-24 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-24 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-26 (-> this node-list data 31)))
    (set! (-> v1-26 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-26 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-28 (-> this node-list data 26)))
    (set! (-> v1-28 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-28 param1) (the-as basic #x3e99999a))
    )
  0
  (none)
  )

;; definition for method 197 of type prebot-medium-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod prebot-medium-eco-creature-method-197 ((this prebot-medium-eco-creature))
  (set! (-> this is-bottom) (the-as basic #t))
  (let ((v1-2 (-> this node-list data 4)))
    (set! (-> v1-2 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-2 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-4 (-> this node-list data 5)))
    (set! (-> v1-4 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-4 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-6 (-> this node-list data 6)))
    (set! (-> v1-6 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-6 param1) (the-as basic #x3d23d70a))
    )
  (let ((v1-8 (-> this node-list data 7)))
    (set! (-> v1-8 param0) prebot-eco-creature-joint-callback)
    (set! (-> v1-8 param1) (the-as basic #x3d23d70a))
    )
  0
  (none)
  )

;; definition for method 122 of type prebot-medium-eco-creature
(defmethod go-idle2 ((this prebot-medium-eco-creature))
  (set-vector! (-> this root scale) (-> this initial-scale) (-> this initial-scale) (-> this initial-scale) 1.0)
  (go (method-of-object this knocked))
  )

;; definition for method 120 of type prebot-medium-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this prebot-medium-eco-creature))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 12) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 13))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd jak bot hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid deadly))
      (set! (-> s4-0 transform-index) 26)
      (set-vector! (-> s4-0 local-sphere) 532.48 -1556.48 1310.72 9011.2)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec backgnd))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set-vector! (-> v1-14 local-sphere) 0.0 2867.2 0.0 4096.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid deadly))
      (set! (-> v1-16 transform-index) 3)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid deadly))
      (set! (-> v1-18 transform-index) 4)
      (set-vector! (-> v1-18 local-sphere) 0.0 -1228.8 204.8 2048.0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-20 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-20 prim-core action) (collide-action solid deadly))
      (set! (-> v1-20 transform-index) 6)
      (set-vector! (-> v1-20 local-sphere) 0.0 163.84 696.32 1474.56)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-22 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-22 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-22 prim-core action) (collide-action solid deadly))
      (set! (-> v1-22 transform-index) 28)
      (set-vector! (-> v1-22 local-sphere) 0.0 0.0 0.0 1269.76)
      )
    (let ((v1-24 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-24 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-24 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-24 prim-core action) (collide-action solid deadly))
      (set! (-> v1-24 transform-index) 29)
      (set-vector! (-> v1-24 local-sphere) 0.0 0.0 0.0 1146.88)
      )
    (let ((v1-26 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-26 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-26 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-26 prim-core action) (collide-action solid deadly))
      (set! (-> v1-26 transform-index) 30)
      (set-vector! (-> v1-26 local-sphere) 40.96 0.0 -204.8 942.08)
      )
    (let ((v1-28 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-28 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-28 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-28 prim-core action) (collide-action solid deadly))
      (set! (-> v1-28 transform-index) 31)
      (set-vector! (-> v1-28 local-sphere) 81.92 0.0 -286.72 860.16)
      )
    (let ((v1-30 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-30 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-30 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-30 prim-core action) (collide-action solid deadly))
      (set! (-> v1-30 transform-index) 33)
      (set-vector! (-> v1-30 local-sphere) -819.2 -368.64 -327.68 1597.44)
      )
    (let ((v1-32 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-32 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-32 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-32 prim-core action) (collide-action solid deadly))
      (set! (-> v1-32 transform-index) 35)
      (set-vector! (-> v1-32 local-sphere) 532.48 245.76 245.76 1761.28)
      )
    (let ((v1-34 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-34 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-34 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-34 prim-core action) (collide-action solid deadly))
      (set! (-> v1-34 transform-index) 37)
      (set-vector! (-> v1-34 local-sphere) 368.64 286.72 163.84 1720.32)
      )
    (let ((v1-36 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-36 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-36 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-36 prim-core action) (collide-action solid deadly))
      (set! (-> v1-36 transform-index) 39)
      (set-vector! (-> v1-36 local-sphere) -286.72 -245.76 -327.68 1638.4)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-38 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-38 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-38 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 121 of type prebot-medium-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this prebot-medium-eco-creature))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-cav-eco-lg" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-enemy-defaults! this *prebot-medium-eco-creature-nav-enemy-info*)
  (logior! (-> this draw global-effect) (draw-control-global-effect rim-lights2))
  (let ((v1-8 (-> this neck)))
    (set! (-> v1-8 up) (the-as uint 1))
    (set! (-> v1-8 nose) (the-as uint 2))
    (set! (-> v1-8 ear) (the-as uint 0))
    (set-vector! (-> v1-8 twist-max) 3640.889 11832.889 0.0 1.0)
    (set! (-> v1-8 ignore-angle) 15473.777)
    )
  (let ((v1-10 (-> this nav)))
    (set! (-> v1-10 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> this root dynam) 573440.0)
  (logior! (-> this nav flags) (nav-control-flag momentum-ignore-heading))
  (logclear! (-> this mask) (process-mask actor-pause))
  (logclear! (-> this enemy-flags) (enemy-flag actor-pause-backup))
  (logior! (-> this focus-status) (focus-status dangerous))
  (logior! (-> this enemy-flags) (enemy-flag dangerous-backup))
  (set! (-> this attack-anims) (new 'static 'boxed-array :type int32 14))
  (set! (-> this victory-anims) (new 'static 'boxed-array :type int32 10 11))
  (set! (-> this turn-left-anim) 6)
  (set! (-> this turn-right-anim) 7)
  (setup-masks (-> this draw) 0 2)
  (set! (-> this is-top) #f)
  (set! (-> this is-bottom) #f)
  (set! (-> this initial-scale) 1.0)
  (set! (-> this final-scale) 0.6)
  (set! (-> this split-type) prebot-small-eco-creature)
  (set! (-> this attack-stop-frame) 7.0)
  (when (type? this medium-eco-creature-launched)
    (set! (-> this spin-jm) (new 'process 'joint-mod (joint-mod-mode joint-set*) this 3))
    (set! (-> this trail-part) (create-launch-control (-> *part-group-id-table* 440) this))
    (logclear! (-> this flags) (eco-creature-flag ecf3))
    )
  (set! (-> this flags) (eco-creature-flag))
  (send-event (ppointer->process (-> this parent)) 'start-critter)
  0
  (none)
  )

;; definition for function adjust-split-joints
;; WARN: Return type mismatch float vs none.
(defbehavior adjust-split-joints prebot-medium-eco-creature ()
  (cond
    ((-> self is-top)
     (let ((f0-2 (lerp-scale (-> self initial-scale) (-> self final-scale) (ja-aframe-num 0) 3.0 8.0)))
       (set-vector! (-> self root scale) f0-2 f0-2 f0-2 1.0)
       )
     (let ((f0-4 (lerp-scale 0.04 1.0 (ja-aframe-num 0) 2.0 7.0)))
       (set! (-> self node-list data 32 param1) (the-as basic f0-4))
       (set! (-> self node-list data 33 param1) (the-as basic f0-4))
       (set! (-> self node-list data 36 param1) (the-as basic f0-4))
       (set! (-> self node-list data 37 param1) (the-as basic f0-4))
       (set! (-> self node-list data 34 param1) (the-as basic f0-4))
       (set! (-> self node-list data 35 param1) (the-as basic f0-4))
       (set! (-> self node-list data 38 param1) (the-as basic f0-4))
       (set! (-> self node-list data 39 param1) (the-as basic f0-4))
       (set! (-> self node-list data 27 param1) (the-as basic f0-4))
       (set! (-> self node-list data 28 param1) (the-as basic f0-4))
       (set! (-> self node-list data 29 param1) (the-as basic f0-4))
       (set! (-> self node-list data 30 param1) (the-as basic f0-4))
       (set! (-> self node-list data 31 param1) (the-as basic f0-4))
       (set! (-> self node-list data 26 param1) (the-as basic f0-4))
       )
     )
    (else
      (let ((f0-7 (lerp-scale (-> self initial-scale) (-> self final-scale) (ja-aframe-num 0) 4.0 8.0)))
        (set-vector! (-> self root scale) f0-7 f0-7 f0-7 1.0)
        )
      (let ((f0-9 (lerp-scale 0.04 1.0 (ja-aframe-num 0) 3.0 7.0)))
        (set! (-> self node-list data 4 param1) (the-as basic f0-9))
        (set! (-> self node-list data 5 param1) (the-as basic f0-9))
        (set! (-> self node-list data 6 param1) (the-as basic f0-9))
        (set! (-> self node-list data 7 param1) (the-as basic f0-9))
        )
      )
    )
  (none)
  )

;; failed to figure out what this is:
(defstate knocked-recover (prebot-medium-eco-creature)
  :virtual #t
  :code (behavior ()
    (cond
      ((or (-> self is-top) (-> self is-bottom))
       (let ((gp-0 (if (-> self is-top)
                       (-> self draw art-group data 4)
                       (-> self draw art-group data 5)
                       )
                   )
             )
         (cond
           ((handle->process (-> self ragdoll-proc))
            (ja-channel-push! 1 0)
            (ja-no-eval :group! gp-0 :num! (seek!) :frame-num 0.0)
            (enable-ragdoll! (-> (the-as ragdoll-proc (handle->process (-> self ragdoll-proc))) ragdoll) self)
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek!))
              (adjust-split-joints)
              )
            )
           (else
             (ja-channel-push! 1 (seconds 0.2))
             (ja-no-eval :group! gp-0 :num! (seek!) :frame-num 0.0)
             (until (ja-done? 0)
               (adjust-split-joints)
               (suspend)
               (ja :num! (seek!))
               )
             )
           )
         )
       (set! (-> self is-top) #f)
       (set! (-> self is-bottom) #f)
       (if (enemy-method-109 self)
           (go-die self)
           (go-hostile self)
           )
       )
      (else
        (let ((t9-14 (-> (method-of-type prebot-large-eco-creature knocked-recover) code)))
          (if t9-14
              ((the-as (function none) t9-14))
              )
          )
        )
      )
    )
  )

;; definition of type prebot-small-eco-creature
(deftype prebot-small-eco-creature (prebot-medium-eco-creature)
  ()
  )

;; definition for method 3 of type prebot-small-eco-creature
(defmethod inspect ((this prebot-small-eco-creature))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-medium-eco-creature inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for symbol *prebot-small-eco-creature-nav-enemy-info*, type nav-enemy-info
(define *prebot-small-eco-creature-nav-enemy-info*
  (new 'static 'nav-enemy-info
    :use-die-falling #t
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #t
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'inline-array idle-control-frame 3
      (new 'static 'idle-control-frame :command (idle-control-cmd push) :param0 30)
      (new 'static 'idle-control-frame
        :command (idle-control-cmd play)
        :anim #x2
        :param0 100
        :param1 100
        :param2 '((new 'static 'bfloat :data 1.0) (new 'static 'bfloat :data 1.0))
        )
      (new 'static 'idle-control-frame)
      )
    :idle-anim 2
    :notice-anim 2
    :hostile-anim 19
    :hit-anim 2
    :knocked-anim 2
    :knocked-land-anim 2
    :die-anim 2
    :die-falling-anim 2
    :victory-anim 2
    :jump-wind-up-anim 2
    :jump-in-air-anim 2
    :jump-land-anim 2
    :neck-joint 5
    :look-at-joint 5
    :bullseye-joint 4
    :sound-die (static-sound-name "caveco-death")
    :notice-distance (meters 200)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 20)
    :default-hit-points 1.0
    :gnd-collide-with (collide-spec backgnd obstacle hit-by-others-list)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :penetrate-knocked (penetrate
      touch
      generic-attack
      lunge
      flop
      punch
      spin
      roll
      uppercut
      bonk
      tube
      vehicle
      flut-attack
      board
      mech
      mech-punch
      mech-bonk
      dark-skin
      dark-punch
      dark-bomb
      dark-smack
      flut
      shield
      explode
      jak-yellow-shot
      jak-red-shot
      jak-blue-shot
      jak-dark-shot
      enemy-yellow-shot
      enemy-dark-shot
      eco-yellow
      eco-red
      eco-blue
      eco-green
      knocked
      jak-red-shockwave
      jak-dark-nuke
      jak-dark-blackhole
      emp-blast
      penetrate38
      penetrate39
      penetrate40
      penetrate41
      penetrate42
      penetrate43
      penetrate44
      penetrate45
      penetrate46
      penetrate47
      penetrate48
      penetrate49
      penetrate50
      penetrate51
      penetrate52
      penetrate53
      penetrate54
      penetrate55
      penetrate56
      penetrate57
      penetrate58
      penetrate59
      penetrate60
      penetrate61
      penetrate64
      penetrate63
      )
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3.5)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
    :knocked-can-land-timeout (seconds 0.1)
    :knocked-recover-timeout (seconds 2)
    :ragdoll-blend-out-time (seconds 0.25)
    :ragdoll-rotate-velocity-mult 1.0
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 6371.5557
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 32768.0
    :knocked-red-vxz-hi 57344.0
    :knocked-red-vy-lo 65536.0
    :knocked-red-vy-hi 77824.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 61440.0
    :ragdoll-info (new 'static 'ragdoll-setup
      :scale (new 'static 'vector :x 1.0 :y 1.0 :z 1.0)
      :bg-collide-with (collide-spec backgnd player-list)
      :joint-setup (new 'static 'boxed-array :type ragdoll-joint-setup
        (new 'static 'ragdoll-joint-setup
          :joint-index 3
          :parent-joint -1
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 4
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 1.0 :w 35404.914)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 5
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 8223.438)
          :geo-tform (new 'static 'vector :x 1.0 :w 27181.492)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 6
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 14248.819)
          :geo-tform (new 'static 'vector :x -1.0 :w 10623.986)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 7
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 1.0 :w 12262.859)
          :geo-tform (new 'static 'vector :x 1.0 :w 33438.652)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 8
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.137 :z -0.9905 :w 11373.791)
          :geo-tform (new 'static 'vector :x 0.2271 :y 0.9734 :z 0.0279 :w 36639.176)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 9
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5102 :z -0.86 :w 20530.754)
          :geo-tform (new 'static 'vector :x 0.409 :y -0.0529 :z 0.9109 :w 32271.676)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 10
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.6644 :z -0.7473 :w 1968.9199)
          :geo-tform (new 'static 'vector :x 0.4093 :y 0.033 :z 0.9117 :w 33077.91)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 11
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9613 :z -0.2752 :w 2214.5525)
          :geo-tform (new 'static 'vector :x 0.4059 :y -0.0481 :z 0.9126 :w 34502.54)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 12
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.5153 :z 0.8569 :w 2080.0034)
          :geo-tform (new 'static 'vector :x 0.4027 :y -0.0356 :z 0.9146 :w 32440.574)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 13
          :parent-joint 10
          :pre-tform (new 'static 'vector :x 0.4859 :z 0.8739 :w 3273.5598)
          :geo-tform (new 'static 'vector :x 0.414 :y 0.0464 :z 0.909 :w 29818.152)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 14
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8326 :z -0.5538 :w 3106.5886)
          :geo-tform (new 'static 'vector :x 0.419 :y -0.032 :z 0.9073 :w 32459.652)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 15
          :parent-joint 10
          :pre-tform (new 'static 'vector :x -0.9421 :z -0.3352 :w 6646.0605)
          :geo-tform (new 'static 'vector :x 0.3914 :y -0.2 :z 0.8982 :w 37623.16)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 16
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.3413 :z -0.9399 :w 1832.5868)
          :geo-tform (new 'static 'vector :x 0.4204 :y -0.1424 :z 0.896 :w 38915.023)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 17
          :parent-joint 4
          :pre-tform (new 'static 'vector :x -0.1371 :z 0.9905 :w 11369.786)
          :geo-tform (new 'static 'vector :x -0.2272 :y 0.9734 :z 0.0279 :w 28896.426)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 18
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.5101 :z 0.86 :w 20534.176)
          :geo-tform (new 'static 'vector :x -0.026 :y 0.9979 :z 0.0579 :w 23979.531)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 19
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.6645 :z 0.7472 :w 1958.0337)
          :geo-tform (new 'static 'vector :x 0.016 :y 0.9992 :z -0.0358 :w 23969.791)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 20
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9615 :z 0.2744 :w 2230.645)
          :geo-tform (new 'static 'vector :x 0.0911 :y 0.9943 :z 0.0536 :w 24079.475)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 21
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.5098 :z -0.8602 :w 2098.3352)
          :geo-tform (new 'static 'vector :x -0.0178 :y 0.999 :z 0.0406 :w 24125.459)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 22
          :parent-joint 19
          :pre-tform (new 'static 'vector :x 0.4819 :z -0.8762 :w 3256.2107)
          :geo-tform (new 'static 'vector :x -0.1538 :y 0.9868 :z -0.0491 :w 23956.574)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 23
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.8364 :z 0.548 :w 3087.583)
          :geo-tform (new 'static 'vector :x -0.017 :y 0.9991 :z 0.0369 :w 23745.531)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 24
          :parent-joint 19
          :pre-tform (new 'static 'vector :x -0.9425 :z 0.3339 :w 6655.1807)
          :geo-tform (new 'static 'vector :x 0.2492 :y 0.945 :z 0.2115 :w 24615.268)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 25
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.3403 :z 0.9402 :w 1852.0657)
          :geo-tform (new 'static 'vector :x 0.3178 :y 0.9363 :z 0.1493 :w 24121.836)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 26
          :parent-joint 3
          :pre-tform (new 'static 'vector :x -1.0 :w 20948.764)
          :geo-tform (new 'static 'vector :x -1.0 :w 9182.285)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 27
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9999 :z 0.0068 :w 7387.509)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.003 :z -0.0014 :w 16198.405)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 28
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.9697 :z -0.244 :w 191.6382)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 29
          :parent-joint -1
          :pre-tform (new 'static 'vector :y -1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 30
          :parent-joint -1
          :pre-tform (new 'static 'vector :y -1.0 :w 10.176285)
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 31
          :parent-joint -1
          :geo-tform (new 'static 'vector :x 0.9999 :y -0.0008 :z 0.0008 :w 16384.0)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 32
          :parent-joint 26
          :pre-tform (new 'static 'vector :x -0.4854 :z -0.8742 :w 21186.406)
          :geo-tform (new 'static 'vector :x 0.6599 :y 0.6796 :z 0.3201 :w 35879.65)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 33
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9993 :z 0.0363 :w 2717.3774)
          :geo-tform (new 'static 'vector :x 0.6708 :y 0.7057 :z 0.2277 :w 34044.242)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 34
          :parent-joint 26
          :pre-tform (new 'static 'vector :x 0.3584 :z -0.9335 :w 11286.792)
          :geo-tform (new 'static 'vector :x -0.4444 :y 0.7119 :z -0.5437 :w 28463.65)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 35
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1147 :z -0.9933 :w 2024.0066)
          :geo-tform (new 'static 'vector :x -0.5154 :y 0.6809 :z -0.5201 :w 27281.908)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 36
          :parent-joint 26
          :pre-tform (new 'static 'vector :x -0.4859 :z 0.8739 :w 21191.012)
          :geo-tform (new 'static 'vector :x 0.1968 :y 0.4177 :z -0.8869 :w 17933.508)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 37
          :parent-joint -1
          :pre-tform (new 'static 'vector :x 0.9993 :z -0.0361 :w 2729.0828)
          :geo-tform (new 'static 'vector :x 0.0825 :y 0.3055 :z -0.9485 :w 17459.846)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 38
          :parent-joint 26
          :pre-tform (new 'static 'vector :x 0.3588 :z 0.9333 :w 11281.3125)
          :geo-tform (new 'static 'vector :x 0.2273 :y 0.5912 :z 0.7738 :w 23386.34)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        (new 'static 'ragdoll-joint-setup
          :joint-index 39
          :parent-joint -1
          :pre-tform (new 'static 'vector :x -0.1145 :z 0.9934 :w 2026.6462)
          :geo-tform (new 'static 'vector :x 0.2996 :y 0.5792 :z 0.758 :w 21904.426)
          :axial-slop 1780.067
          :max-angle 4683.2207
          :coll-rad 1734.656
          )
        )
      )
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    :knocked-off #t
    :callback-info #f
    :use-momentum #t
    :use-frustration #t
    :use-stop-chase #f
    :use-circling #t
    :use-pacing #t
    :walk-anim 19
    :turn-anim -1
    :run-anim 19
    :taunt-anim -1
    :run-travel-speed (meters 6)
    :run-acceleration (meters 32)
    :run-turning-acceleration (meters 40)
    :walk-travel-speed (meters 6)
    :walk-acceleration (meters 16)
    :walk-turning-acceleration (meters 40)
    :maximum-rotation-rate (degrees 360)
    :notice-nav-radius (meters 2)
    :frustration-distance (meters 8)
    :frustration-time (seconds 4)
    :blocked-time (seconds 0.3)
    :circle-dist-lo 20480.0
    :circle-dist-hi 61440.0
    :nav-mesh #f
    )
  )

;; failed to figure out what this is:
(set! (-> *prebot-small-eco-creature-nav-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

;; definition for method 120 of type prebot-small-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this prebot-small-eco-creature))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 12) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 13))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd jak bot hit-by-others-list player-list))
      (set! (-> s4-0 prim-core action) (collide-action solid deadly))
      (set! (-> s4-0 transform-index) 26)
      (set-vector! (-> s4-0 local-sphere) 532.48 -1556.48 1310.72 9011.2)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-14 prim-core collide-with) (collide-spec backgnd))
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set-vector! (-> v1-14 local-sphere) 0.0 2867.2 0.0 4096.0)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-16 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-16 prim-core action) (collide-action solid deadly))
      (set! (-> v1-16 transform-index) 3)
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 2048.0)
      )
    (let ((v1-18 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-18 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-18 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-18 prim-core action) (collide-action solid deadly))
      (set! (-> v1-18 transform-index) 4)
      (set-vector! (-> v1-18 local-sphere) 0.0 -1228.8 204.8 2048.0)
      )
    (let ((v1-20 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-20 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-20 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-20 prim-core action) (collide-action solid deadly))
      (set! (-> v1-20 transform-index) 6)
      (set-vector! (-> v1-20 local-sphere) 0.0 163.84 696.32 1474.56)
      )
    (let ((v1-22 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-22 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-22 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-22 prim-core action) (collide-action solid deadly))
      (set! (-> v1-22 transform-index) 28)
      (set-vector! (-> v1-22 local-sphere) 0.0 0.0 0.0 1269.76)
      )
    (let ((v1-24 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-24 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-24 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-24 prim-core action) (collide-action solid deadly))
      (set! (-> v1-24 transform-index) 29)
      (set-vector! (-> v1-24 local-sphere) 0.0 0.0 0.0 1146.88)
      )
    (let ((v1-26 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-26 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-26 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-26 prim-core action) (collide-action solid deadly))
      (set! (-> v1-26 transform-index) 30)
      (set-vector! (-> v1-26 local-sphere) 40.96 0.0 -204.8 942.08)
      )
    (let ((v1-28 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-28 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-28 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-28 prim-core action) (collide-action solid deadly))
      (set! (-> v1-28 transform-index) 31)
      (set-vector! (-> v1-28 local-sphere) 81.92 0.0 -286.72 860.16)
      )
    (let ((v1-30 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-30 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-30 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-30 prim-core action) (collide-action solid deadly))
      (set! (-> v1-30 transform-index) 33)
      (set-vector! (-> v1-30 local-sphere) -819.2 -368.64 -327.68 1597.44)
      )
    (let ((v1-32 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-32 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-32 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-32 prim-core action) (collide-action solid deadly))
      (set! (-> v1-32 transform-index) 35)
      (set-vector! (-> v1-32 local-sphere) 532.48 245.76 245.76 1761.28)
      )
    (let ((v1-34 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-34 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-34 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-34 prim-core action) (collide-action solid deadly))
      (set! (-> v1-34 transform-index) 37)
      (set-vector! (-> v1-34 local-sphere) 368.64 286.72 163.84 1720.32)
      )
    (let ((v1-36 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-36 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-36 prim-core collide-with) (collide-spec jak bot hit-by-others-list player-list))
      (set! (-> v1-36 prim-core action) (collide-action solid deadly))
      (set! (-> v1-36 transform-index) 39)
      (set-vector! (-> v1-36 local-sphere) -286.72 -245.76 -327.68 1638.4)
      )
    (set! (-> s5-0 nav-radius) 8192.0)
    (let ((v1-38 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-38 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-38 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 121 of type prebot-small-eco-creature
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this prebot-small-eco-creature))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-cav-eco-lg" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  (init-enemy-defaults! this *prebot-small-eco-creature-nav-enemy-info*)
  (logior! (-> this draw global-effect) (draw-control-global-effect rim-lights2))
  (let ((v1-8 (-> this neck)))
    (set! (-> v1-8 up) (the-as uint 1))
    (set! (-> v1-8 nose) (the-as uint 2))
    (set! (-> v1-8 ear) (the-as uint 0))
    (set-vector! (-> v1-8 twist-max) 3640.889 11832.889 0.0 1.0)
    (set! (-> v1-8 ignore-angle) 15473.777)
    )
  (let ((v1-10 (-> this nav)))
    (set! (-> v1-10 speed-scale) 1.0)
    )
  0
  (set-gravity-length (-> this root dynam) 573440.0)
  (logior! (-> this nav flags) (nav-control-flag momentum-ignore-heading))
  (logclear! (-> this mask) (process-mask actor-pause))
  (logclear! (-> this enemy-flags) (enemy-flag actor-pause-backup))
  (logior! (-> this focus-status) (focus-status dangerous))
  (logior! (-> this enemy-flags) (enemy-flag dangerous-backup))
  (set! (-> this attack-anims) (new 'static 'boxed-array :type int32 18))
  (set! (-> this victory-anims) (new 'static 'boxed-array :type int32 10 11))
  (set! (-> this turn-left-anim) 16)
  (set! (-> this turn-right-anim) 17)
  (setup-masks (-> this draw) 0 2)
  (set! (-> this is-top) #f)
  (set! (-> this is-bottom) #f)
  (set! (-> this initial-scale) 0.6)
  (set! (-> this final-scale) 0.4)
  (set! (-> this split-type) #f)
  (set! (-> this attack-stop-frame) 10.0)
  (when (type? this small-eco-creature-launched)
    (set! (-> this spin-jm) (new 'process 'joint-mod (joint-mod-mode joint-set*) this 3))
    (set! (-> this trail-part) (create-launch-control (-> *part-group-id-table* 440) this))
    (logclear! (-> this flags) (eco-creature-flag ecf3))
    )
  (set! (-> this flags) (eco-creature-flag))
  (send-event (ppointer->process (-> this parent)) 'start-critter)
  (let ((a0-21 (-> this skel root-channel 0)))
    (set! (-> a0-21 frame-group) (the-as art-joint-anim (-> this draw art-group data 2)))
    (set! (-> a0-21 frame-num) 0.0)
    (joint-control-channel-group! a0-21 (the-as art-joint-anim (-> this draw art-group data 2)) num-func-identity)
    )
  (transform-post)
  0
  (none)
  )

;; definition of type medium-eco-creature-launched
(deftype medium-eco-creature-launched (prebot-medium-eco-creature)
  ()
  )

;; definition for method 3 of type medium-eco-creature-launched
(defmethod inspect ((this medium-eco-creature-launched))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-medium-eco-creature inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 121 of type medium-eco-creature-launched
;; WARN: Return type mismatch vector vs none.
(defmethod init-enemy! ((this medium-eco-creature-launched))
  (call-parent-method this)
  (set-vector! (-> this root scale) (-> this final-scale) (-> this final-scale) (-> this final-scale) 1.0)
  (none)
  )

;; definition for method 122 of type medium-eco-creature-launched
(defmethod go-idle2 ((this medium-eco-creature-launched))
  ((method-of-type prebot-large-eco-creature go-idle2) this)
  )

;; definition of type small-eco-creature-launched
(deftype small-eco-creature-launched (prebot-small-eco-creature)
  ()
  )

;; definition for method 3 of type small-eco-creature-launched
(defmethod inspect ((this small-eco-creature-launched))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-small-eco-creature inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 121 of type small-eco-creature-launched
;; WARN: Return type mismatch vector vs none.
(defmethod init-enemy! ((this small-eco-creature-launched))
  (call-parent-method this)
  (set-vector! (-> this root scale) (-> this final-scale) (-> this final-scale) (-> this final-scale) 1.0)
  (none)
  )

;; definition for method 122 of type small-eco-creature-launched
(defmethod go-idle2 ((this small-eco-creature-launched))
  ((method-of-type prebot-large-eco-creature go-idle2) this)
  )

;; definition of type large-eco-creature
(deftype large-eco-creature (prebot-large-eco-creature)
  ()
  )

;; definition for method 3 of type large-eco-creature
(defmethod inspect ((this large-eco-creature))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-large-eco-creature inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 122 of type large-eco-creature
(defmethod go-idle2 ((this large-eco-creature))
  ((method-of-type nav-enemy go-idle2) this)
  )

;; definition for method 121 of type large-eco-creature
;; WARN: Return type mismatch eco-creature-flag vs none.
(defmethod init-enemy! ((this large-eco-creature))
  (call-parent-method this)
  (logior! (-> this flags) (eco-creature-flag ecf2))
  (none)
  )

;; definition of type medium-eco-creature
(deftype medium-eco-creature (prebot-medium-eco-creature)
  ()
  )

;; definition for method 3 of type medium-eco-creature
(defmethod inspect ((this medium-eco-creature))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-medium-eco-creature inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 122 of type medium-eco-creature
(defmethod go-idle2 ((this medium-eco-creature))
  ((method-of-type nav-enemy go-idle2) this)
  )

;; definition for method 121 of type medium-eco-creature
;; WARN: Return type mismatch eco-creature-flag vs none.
(defmethod init-enemy! ((this medium-eco-creature))
  (call-parent-method this)
  (set-vector! (-> this root scale) (-> this final-scale) (-> this final-scale) (-> this final-scale) 1.0)
  (logior! (-> this flags) (eco-creature-flag ecf2))
  (none)
  )

;; definition of type small-eco-creature
(deftype small-eco-creature (prebot-small-eco-creature)
  ()
  )

;; definition for method 3 of type small-eco-creature
(defmethod inspect ((this small-eco-creature))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type prebot-small-eco-creature inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 122 of type small-eco-creature
(defmethod go-idle2 ((this small-eco-creature))
  ((method-of-type nav-enemy go-idle2) this)
  )

;; definition for method 121 of type small-eco-creature
;; WARN: Return type mismatch eco-creature-flag vs none.
(defmethod init-enemy! ((this small-eco-creature))
  (call-parent-method this)
  (set-vector! (-> this root scale) (-> this final-scale) (-> this final-scale) (-> this final-scale) 1.0)
  (logior! (-> this flags) (eco-creature-flag ecf2))
  (none)
  )
