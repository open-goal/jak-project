;;-*-Lisp-*-
(in-package goal)

;; definition of type dp-bipedal-grenade-shot
(deftype dp-bipedal-grenade-shot (projectile-bounce)
  ((blast-radius  float)
   )
  )

;; definition for method 3 of type dp-bipedal-grenade-shot
(defmethod inspect ((this dp-bipedal-grenade-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile-bounce inspect)))
    (t9-0 this)
    )
  (format #t "~2Tblast-radius: ~f~%" (-> this blast-radius))
  (label cfg-4)
  this
  )

;; definition for method 26 of type dp-bipedal-grenade-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-26 ((this dp-bipedal-grenade-shot))
  (cond
    ((logtest? (-> *part-group-id-table* 246 flags) (sp-group-flag sp13))
     (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
     (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 246))
     )
    (else
      (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
      (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 246))
      )
    )
  0
  (none)
  )

;; definition for method 28 of type dp-bipedal-grenade-shot
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this dp-bipedal-grenade-shot) (arg0 projectile-options))
  (case arg0
    (((projectile-options po0))
     (sound-play "gren-shot-hit")
     )
    (((projectile-options po0 po1))
     (sound-play-by-name
       (static-sound-name "gren-missile")
       (-> this sound-id)
       1024
       (the int (* 1524.0 (doppler-pitch-shift (-> this root trans) (-> this root transv))))
       0
       (sound-group)
       (-> this root trans)
       )
     )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate impact (dp-bipedal-grenade-shot)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (let* ((s4-0 proc)
              (v1-1 (if (type? s4-0 process-drawable)
                        s4-0
                        )
                    )
              )
         (when v1-1
           (let ((s4-1 (-> (the-as process-drawable v1-1) root))
                 (a1-3 (new 'stack 'collide-query))
                 )
             0.0
             (set! (-> a1-3 start-pos quad) (-> self root root-prim prim-core world-sphere quad))
             (vector-!
               (-> a1-3 move-dist)
               (the-as vector (-> (the-as collide-shape s4-1) root-prim prim-core))
               (-> a1-3 start-pos)
               )
             (let ((v1-6 a1-3))
               (set! (-> v1-6 radius) 40.96)
               (set! (-> v1-6 collide-with) (collide-spec backgnd))
               (set! (-> v1-6 ignore-process0) self)
               (set! (-> v1-6 ignore-process1) (ppointer->process (-> self parent)))
               (set! (-> v1-6 ignore-pat) (-> self root pat-ignore-mask))
               (set! (-> v1-6 action-mask) (collide-action solid))
               )
             (when (< (fill-and-probe-using-line-sphere *collide-cache* a1-3) 0.0)
               (deal-damage! self proc (the-as event-message-block (-> block param 0)))
               (let ((v1-11 (-> self notify-handle)))
                 (if (handle->process v1-11)
                     (send-event (-> v1-11 process 0) 'notify 'attack proc)
                     )
                 )
               )
             )
           )
         )
       )
      )
    )
  :enter (behavior ()
    (projectile-method-26 self)
    (play-impact-sound self (projectile-options po0))
    (let* ((v1-5 (-> self root root-prim))
           (a0-3 (-> (the-as collide-shape-prim-group v1-5) child 0))
           )
      (set! (-> v1-5 local-sphere w) (-> self blast-radius))
      (set! (-> a0-3 local-sphere w) (-> self blast-radius))
      )
    (update-transforms (-> self root))
    (let ((a1-1 (new 'stack-no-clear 'overlaps-others-params)))
      (set! (-> a1-1 options) (overlaps-others-options))
      (set! (-> a1-1 collide-with-filter) (the-as collide-spec -1))
      (set! (-> a1-1 tlist) *touching-list*)
      (find-overlapping-shapes (-> self root) a1-1)
      )
    )
  :code (behavior ()
    (suspend)
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (while (-> self child)
      (suspend)
      )
    )
  )

;; failed to figure out what this is:
(defstate dissipate (dp-bipedal-grenade-shot)
  :virtual #t
  :enter (behavior ()
    (go-virtual impact)
    )
  )

;; definition for method 25 of type dp-bipedal-grenade-shot
;; WARN: Return type mismatch int vs none.
(defmethod projectile-method-25 ((this dp-bipedal-grenade-shot))
  (spawn (-> this part) (-> this root trans))
  0
  (none)
  )

;; definition for method 30 of type dp-bipedal-grenade-shot
;; WARN: Return type mismatch int vs none.
(defmethod setup-collision! ((this dp-bipedal-grenade-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) gren-cshape-reaction-canister)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-dark-shot))
    (set! (-> s5-0 penetrated-by) (the-as penetrate -1))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              special-obstacle
              )
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 8192.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-14 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              special-obstacle
              )
            )
      (set! (-> v1-14 prim-core action) (collide-action solid))
      (set-vector! (-> v1-14 local-sphere) 0.0 0.0 0.0 2457.6)
      )
    (let ((v1-16 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-16 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-16 prim-core collide-with)
            (collide-spec jak bot crate civilian obstacle vehicle-sphere hit-by-others-list player-list special-obstacle)
            )
      (set! (-> v1-16 prim-core action) (collide-action solid))
      (set-vector! (-> v1-16 local-sphere) 0.0 0.0 0.0 8192.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-19 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-19 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-19 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 2))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  (none)
  )

;; definition for method 31 of type dp-bipedal-grenade-shot
;; WARN: Return type mismatch sound-id vs none.
(defmethod init-proj-settings! ((this dp-bipedal-grenade-shot))
  (set! (-> this attack-mode) 'explode)
  (set! (-> this blast-radius) 12288.0)
  (set! (-> this max-speed) 135168.0)
  (set! (-> this timeout) (seconds 4))
  (set! (-> this update-velocity) projectile-update-velocity-add-gravity)
  (set! (-> this move) gren-canister-move)
  (set! (-> this damage) 4.0)
  (set! (-> this root dynam gravity y) 102400.0)
  (set! (-> this root dynam gravity-length) 102400.0)
  (set! (-> this root dynam gravity-max) 102400.0)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 245) this))
  (set! (-> this sound-id) (new-sound-id))
  (none)
  )

;; definition for function spawn-dp-bipedal-grenade
;; INFO: Used lq/sq
;; WARN: Return type mismatch (pointer process) vs (pointer dp-bipedal-grenade-shot).
(defun spawn-dp-bipedal-grenade ((arg0 process-focusable) (arg1 vector) (arg2 vector) (arg3 float))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (let ((v1-1 (vector-! (new 'stack-no-clear 'vector) arg2 arg1)))
      (set! (-> gp-0 ent) (-> arg0 entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 notify-handle) (process->handle arg0))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 target-handle) (the-as handle #f))
      (set! (-> gp-0 target-pos quad) (the-as uint128 0))
      (set! (-> gp-0 ignore-handle) (process->handle arg0))
      (let* ((a0-13 *game-info*)
             (a2-12 (+ (-> a0-13 attack-id) 1))
             )
        (set! (-> a0-13 attack-id) a2-12)
        (set! (-> gp-0 attack-id) a2-12)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (set! (-> gp-0 pos quad) (-> arg1 quad))
      (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
      )
    (the-as
      (pointer dp-bipedal-grenade-shot)
      (spawn-projectile dp-bipedal-grenade-shot gp-0 arg0 *default-dead-pool*)
      )
    )
  )




