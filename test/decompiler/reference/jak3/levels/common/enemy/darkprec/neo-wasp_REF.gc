;;-*-Lisp-*-
(in-package goal)

;; definition of type neo-wasp-shot
(deftype neo-wasp-shot (metalhead-shot)
  ()
  )

;; definition for method 3 of type neo-wasp-shot
(defmethod inspect ((this neo-wasp-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type metalhead-shot inspect)))
    (t9-0 this)
    )
  (label cfg-4)
  this
  )

;; definition for method 28 of type neo-wasp-shot
;; WARN: Return type mismatch int vs none.
(defmethod play-impact-sound ((this neo-wasp-shot) (arg0 projectile-options))
  (case arg0
    (((projectile-options po0))
     (sound-play "wasp-shot-hit")
     )
    )
  0
  (none)
  )

;; definition for method 31 of type neo-wasp-shot
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-proj-settings! ((this neo-wasp-shot))
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (set! (-> this attack-mode) 'neo-wasp-shot)
  (set! (-> this max-speed) 491520.0)
  (set! (-> this move) metalhead-shot-move)
  (set! (-> this timeout) (seconds 1.375))
  0
  (none)
  )

;; definition of type neo-wasp
(deftype neo-wasp (hover-enemy)
  ((gun-jmod               joint-mod-rotate-local  :inline)
   (entity-group           actor-group)
   (smoke-part             sparticle-launch-control)
   (engine-part            sparticle-launch-control)
   (minimap                connection-minimap)
   (old-gravity            float                   :offset 1028)
   (knocked-anim           int32)
   (knocked-recover-anim   int32)
   (last-fire-time         time-frame)
   (bridge-index           int32)
   (gun-x-angle            float)
   (gun-x-angle-final      float)
   (path-u                 float)
   (path-du                float)
   (path-du-final          float)
   (path-dest              float)
   (plat-pos               vector                  :inline)
   (sound-id               sound-id)
   (on-screen-timer        time-frame)
   (attack-wait-min        float)
   (attack-wait-max        float)
   (attack-miss-dist-min   float)
   (attack-miss-dist-max   float)
   (attack-miss-dist-curr  float)
   (mech-flame-texture-id  sound-id)
   )
  (:state-methods
    ambush-flying
    ambush-attack
    attack
    die-now
    die-explode
    )
  (:methods
    (neo-wasp-method-182 (_type_) process-focusable)
    (spawn-debris (_type_) none)
    (fire-shot-from-cspace-idx (_type_ projectile-init-by-other-params int int) none)
    )
  )

;; definition for method 3 of type neo-wasp
(defmethod inspect ((this neo-wasp))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type hover-enemy inspect)))
    (t9-0 this)
    )
  (format #t "~2Tgun-jmod: #<joint-mod-rotate-local @ #x~X>~%" (-> this gun-jmod))
  (format #t "~2Tentity-group: ~A~%" (-> this entity-group))
  (format #t "~2Tsmoke-part: ~A~%" (-> this smoke-part))
  (format #t "~2Tengine-part: ~A~%" (-> this engine-part))
  (format #t "~2Tminimap: #<connection-minimap @ #x~X>~%" (-> this minimap))
  (format #t "~2Tknocked-start-level: ~f~%" (-> this knocked-start-level))
  (format #t "~2Told-gravity: ~f~%" (-> this old-gravity))
  (format #t "~2Tknocked-anim: ~D~%" (-> this knocked-anim))
  (format #t "~2Tknocked-recover-anim: ~D~%" (-> this knocked-recover-anim))
  (format #t "~2Tlast-fire-time: ~D~%" (-> this last-fire-time))
  (format #t "~2Tbridge-index: ~D~%" (-> this bridge-index))
  (format #t "~2Tgun-x-angle: ~f~%" (-> this gun-x-angle))
  (format #t "~2Tgun-x-angle-final: ~f~%" (-> this gun-x-angle-final))
  (format #t "~2Tpath-u: ~f~%" (-> this path-u))
  (format #t "~2Tpath-du: ~f~%" (-> this path-du))
  (format #t "~2Tpath-du-final: ~f~%" (-> this path-du-final))
  (format #t "~2Tpath-dest: ~f~%" (-> this path-dest))
  (format #t "~2Tplat-pos: #<vector @ #x~X>~%" (-> this plat-pos))
  (format #t "~2Tsound-id: ~D~%" (-> this sound-id))
  (format #t "~2Ton-screen-timer: ~D~%" (-> this on-screen-timer))
  (format #t "~2Tattack-wait-min: ~f~%" (-> this attack-wait-min))
  (format #t "~2Tattack-wait-max: ~f~%" (-> this attack-wait-max))
  (format #t "~2Tattack-miss-dist-min: ~f~%" (-> this attack-miss-dist-min))
  (format #t "~2Tattack-miss-dist-max: ~f~%" (-> this attack-miss-dist-max))
  (format #t "~2Tattack-miss-dist-curr: ~f~%" (-> this attack-miss-dist-curr))
  (format #t "~2Tmech-flame-texture-id: ~D~%" (-> this mech-flame-texture-id))
  (label cfg-4)
  this
  )

;; failed to figure out what this is:
(defskelgroup skel-neo-wasp neo-wasp-b neo-wasp-b-lod0-jg -1
              ((neo-wasp-b-lod0-mg (meters 20)) (neo-wasp-b-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7.5)
              :shadow neo-wasp-b-shadow-mg
              :origin-joint-index 3
              :global-effects 32
              )

;; definition for symbol *neo-wasp-debris-params*, type debris-static-params
(define *neo-wasp-debris-params*
  (new 'static 'debris-static-params
    :joints (new 'static 'boxed-array :type debris-static-joint-params
      (new 'static 'debris-static-joint-params :parent-joint-index 3 :group "skel-neo-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 5 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 7 :group "skel-neo-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 9 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 10 :group "skel-neo-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 13 :group "skel-neo-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 14 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 16 :group "skel-neo-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 17 :group "skel-neo-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 18 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 23 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 24 :group "skel-neo-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 25 :group "skel-neo-debris-d")
      (new 'static 'debris-static-joint-params :parent-joint-index 26 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 27 :group "skel-neo-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 28 :group "skel-neo-debris-b")
      (new 'static 'debris-static-joint-params :parent-joint-index 30 :group "skel-neo-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 31 :group "skel-neo-debris-c")
      (new 'static 'debris-static-joint-params :parent-joint-index 36 :group "skel-neo-debris-a")
      (new 'static 'debris-static-joint-params :parent-joint-index 40 :group "skel-neo-debris-a")
      )
    :collide-spec (collide-spec bot obstacle player-list)
    )
  )

;; definition for symbol *fact-info-neo-wasp-defaults*, type fact-info-enemy-defaults
(define *fact-info-neo-wasp-defaults* (new 'static 'fact-info-enemy-defaults :idle-distance (meters 80)))

;; definition for symbol *neo-wasp-enemy-info*, type enemy-info
(define *neo-wasp-enemy-info* (new 'static 'enemy-info
                                :use-die-falling #t
                                :use-victory #f
                                :use-jump-blocked #f
                                :debug-draw-neck #f
                                :jump-debug-draw #f
                                :move-to-ground #f
                                :hover-if-no-ground #f
                                :idle-anim-script #f
                                :idle-anim 4
                                :notice-anim 4
                                :hostile-anim 4
                                :hit-anim 12
                                :knocked-anim 10
                                :knocked-land-anim 11
                                :die-anim 4
                                :die-falling-anim 4
                                :victory-anim 4
                                :jump-wind-up-anim -1
                                :jump-in-air-anim -1
                                :jump-land-anim -1
                                :neck-joint 18
                                :look-at-joint 18
                                :bullseye-joint 16
                                :sound-hit (static-sound-name "wasp-hit")
                                :sound-die (static-sound-name "wasp-die")
                                :notice-distance (meters 70)
                                :notice-distance-delta (meters 1000)
                                :proximity-notice-distance (meters 55)
                                :default-hit-points 6.0
                                :gnd-collide-with (collide-spec backgnd)
                                :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
                                :movement-gravity (meters -100)
                                :friction 0.8
                                :attack-shove-back (meters 3)
                                :attack-shove-up (meters 2)
                                :attack-mode 'generic
                                :attack-damage 2
                                :recover-gnd-collide-with (collide-spec backgnd crate obstacle hit-by-others-list pusher)
                                :knocked-can-land-timeout (seconds 0.1)
                                :knocked-recover-timeout (seconds 2)
                                :ragdoll-blend-out-time (seconds 0.25)
                                :ragdoll-rotate-velocity-mult 1.0
                                :jump-height-min (meters 3)
                                :jump-height-factor 0.5
                                :knocked-seek-ry-clamp 2730.6667
                                :knocked-soft-vxz-lo 72089.6
                                :knocked-soft-vxz-hi 108134.4
                                :knocked-soft-vy-lo 81920.0
                                :knocked-soft-vy-hi 122880.0
                                :knocked-medium-vxz-lo 147456.0
                                :knocked-medium-vxz-hi 196608.0
                                :knocked-medium-vy-lo 135168.0
                                :knocked-medium-vy-hi 151552.0
                                :knocked-hard-vxz-lo 53248.0
                                :knocked-hard-vxz-hi 101580.8
                                :knocked-hard-vy-lo 60620.8
                                :knocked-hard-vy-hi 95027.2
                                :knocked-huge-vxz-lo 164659.2
                                :knocked-huge-vxz-hi 249036.8
                                :knocked-huge-vy-lo 183500.8
                                :knocked-huge-vy-hi 217907.2
                                :knocked-yellow-vxz-lo 40960.0
                                :knocked-yellow-vxz-hi 49152.0
                                :knocked-yellow-vy-lo 57344.0
                                :knocked-yellow-vy-hi 81920.0
                                :knocked-red-vxz-lo 24576.0
                                :knocked-red-vxz-hi 196608.0
                                :knocked-red-vy-lo 94208.0
                                :knocked-red-vy-hi 151552.0
                                :knocked-blue-vxz-lo 40960.0
                                :knocked-blue-vxz-hi 49152.0
                                :knocked-blue-vy-lo 24576.0
                                :knocked-blue-vy-hi 81920.0
                                :ragdoll-info #f
                                :shadow-size (meters 2)
                                :shadow-max-y (meters 10)
                                :shadow-min-y (meters -20)
                                :shadow-locus-dist (meters 150)
                                :gem-joint -1
                                :gem-offset (new 'static 'sphere :r 163840.0)
                                :knocked-off #t
                                )
        )

;; failed to figure out what this is:
(set! (-> *neo-wasp-enemy-info* fact-defaults) *fact-info-neo-wasp-defaults*)

;; definition for method 82 of type neo-wasp
(defmethod event-handler ((this neo-wasp) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('hit 'hit-knocked)
     (logclear! (-> this mask) (process-mask actor-pause))
     (logclear! (-> this focus-status) (focus-status dangerous))
     (logclear! (-> this enemy-flags) (enemy-flag use-notice-distance))
     (logior! (-> this enemy-flags) (enemy-flag alert))
     (logior! (-> this focus-status) (focus-status hit))
     (if (= (-> this hit-points) 0.0)
         (logior! (-> this focus-status) (focus-status dead))
         )
     (logclear! (-> this enemy-flags) (enemy-flag lock-focus))
     (enemy-method-69 this)
     (logior! (-> this enemy-flags) (enemy-flag lock-focus))
     (process-contact-action arg0)
     (send-event arg0 'get-attack-count 1)
     (freeze-hit-begin)
     (hover-nav-control-method-19 (-> this hover))
     (hover-enemy-method-159 this #t)
     (if (= (-> this hit-points) 0.0)
         (go (method-of-object this die-explode))
         (go (method-of-object this knocked))
         )
     )
    (else
      ((method-of-type hover-enemy event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; definition for method 56 of type neo-wasp
(defmethod knocked-handler ((this neo-wasp) (arg0 vector))
  (let ((s4-0 (-> this root)))
    (case (-> this incoming knocked-type)
      (((knocked-type explode-or-darkjak))
       (let ((gp-1 (-> this root transv)))
         (let ((a1-1 (handle->process (-> this incoming attacker-handle))))
           (if a1-1
               (vector-! gp-1 (-> (the-as process-drawable a1-1) root trans) (-> this root trans))
               (vector-! gp-1 (-> this incoming attacker-pos) (-> this root trans))
               )
           )
         (set! (-> gp-1 y) 0.0)
         (vector-normalize! gp-1 1.0)
         (vector-rotate90-around-y! gp-1 gp-1)
         (if (< 0.0 (vector-dot
                      (vector-! (new 'stack-no-clear 'vector) (-> this incoming attacker-pos) (-> s4-0 trans))
                      (vector-x-quaternion! (new 'stack-no-clear 'vector) (-> s4-0 quat))
                      )
                )
             (vector-negate! gp-1 gp-1)
             )
         (let ((f30-1 (rnd-float-range this 0.0 1.0))
               (s5-1 (-> this enemy-info))
               )
           (vector-float*! gp-1 gp-1 (lerp (-> s5-1 knocked-hard-vxz-lo) (-> s5-1 knocked-hard-vxz-hi) f30-1))
           (set! (-> gp-1 y) (lerp (-> s5-1 knocked-hard-vy-lo) (-> s5-1 knocked-hard-vy-hi) f30-1))
           )
         )
       )
      (else
        (call-parent-method this arg0)
        )
      )
    )
  )

;; definition for method 122 of type neo-wasp
(defmethod go-idle2 ((this neo-wasp))
  (if (logtest? (enemy-option ambush) (-> this fact enemy-options))
      (go (method-of-object this ambush))
      (go (method-of-object this notice))
      )
  )

;; definition for method 78 of type neo-wasp
(defmethod go-hostile ((this neo-wasp))
  (go (method-of-object this hostile))
  )

;; definition for method 80 of type neo-wasp
(defmethod go-best-state ((this neo-wasp))
  (go-hostile this)
  )

;; definition for method 71 of type neo-wasp
(defmethod go-dormant ((this neo-wasp))
  (send-event (ppointer->process (-> this parent)) 'going-dormant)
  ((method-of-type hover-enemy go-dormant) this)
  )

;; definition for method 59 of type neo-wasp
(defmethod enemy-common-post ((this neo-wasp))
  (if (not (logtest? (-> this draw status) (draw-control-status on-screen)))
      (set-time! (-> this on-screen-timer))
      )
  (seek! (-> this gun-x-angle) (-> this gun-x-angle-final) (* 21845.334 (seconds-per-frame)))
  ((method-of-type hover-enemy enemy-common-post) this)
  (none)
  )

;; definition for method 160 of type neo-wasp
;; WARN: Return type mismatch symbol vs object.
(defmethod hover-enemy-method-160 ((this neo-wasp))
  #t
  )

;; failed to figure out what this is:
(defstate ambush (neo-wasp)
  :virtual #t
  :enter (behavior ()
    (set! (-> self minimap) (add-icon! *minimap* self (the-as uint 160) (the-as int #f) (the-as vector #t) 0))
    (cond
      ((logtest? (-> self path flags) (path-control-flag not-found))
       (logior! (-> self enemy-flags) (enemy-flag alert))
       (logior! (-> self enemy-flags) (enemy-flag cam-attack-mode))
       (hover-enemy-method-159 self #f)
       (set-time! (-> self scale-timer))
       (cond
         ((not (logtest? (-> self fact enemy-options) (enemy-option user0)))
          (logclear! (-> self enemy-flags) (enemy-flag vulnerable))
          (hover-enemy-method-162 self 0.0)
          )
         (else
           (hover-enemy-method-162 self 1.0)
           )
         )
       (hover-enemy-method-165 self)
       (set-time! (-> self state-time))
       )
      (else
        (let ((t9-5 (-> (method-of-type hover-enemy ambush) enter)))
          (if t9-5
              (t9-5)
              )
          )
        )
      )
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy ambush) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (and (time-elapsed?
               (-> self last-fire-time)
               (the int (* 300.0 (rand-vu-float-range (-> self attack-wait-min) (-> self attack-wait-max))))
               )
             (neo-wasp-method-182 self)
             )
        (go-virtual ambush-attack)
        )
    )
  :code hover-enemy-fly-code
  :post (behavior ()
    (local-vars (v1-19 enemy-flag))
    (when (not (logtest? (-> self fact enemy-options) (enemy-option user0)))
      (let ((f0-1 (the float (- (current-time) (-> self scale-timer))))
            (f1-0 600.0)
            )
        (when (< f0-1 f1-0)
          (let ((f30-0 (fmin 1.0 (/ (+ 30.0 f0-1) f1-0))))
            (hover-enemy-method-162 self f30-0)
            (when (and (not (logtest? (-> self enemy-flags) (enemy-flag vulnerable))) (>= f30-0 1.0))
              (let ((v1-18 (-> self enemy-flags)))
                (if (logtest? v1-18 (enemy-flag vulnerable-backup))
                    (set! v1-19 (logior v1-18 (enemy-flag vulnerable)))
                    (set! v1-19 (logclear v1-18 (enemy-flag vulnerable)))
                    )
                )
              (set! (-> self enemy-flags) v1-19)
              )
            )
          )
        )
      )
    (set! (-> self last-fire-time) (+ (current-time) (seconds -1.5)))
    (if (not (logtest? (-> self path flags) (path-control-flag not-found)))
        (hover-nav-control-method-12 (-> self hover) (the-as vector #f))
        )
    (hover-enemy-hostile-post)
    )
  )

;; failed to figure out what this is:
(defstate ambush-flying (neo-wasp)
  :virtual #t
  :event enemy-event-handler
  :enter (behavior ()
    (logior! (-> self focus-status) (focus-status dangerous))
    )
  :trans (behavior ()
    ((-> (method-of-type hover-enemy ambush) trans))
    (if (and (time-elapsed?
               (-> self last-fire-time)
               (the int (* 300.0 (rand-vu-float-range (-> self attack-wait-min) (-> self attack-wait-max))))
               )
             (neo-wasp-method-182 self)
             )
        (go-virtual ambush-attack)
        )
    )
  :code (-> (method-of-type neo-wasp ambush) code)
  :post (-> (method-of-type neo-wasp ambush) post)
  )

;; failed to figure out what this is:
(defstate notice (neo-wasp)
  :virtual #t
  :post (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy notice) post)))
      (if t9-0
          ((the-as (function none) t9-0))
          )
      )
    (set! (-> self last-fire-time) (+ (current-time) (seconds -1.5)))
    (go-virtual hostile)
    )
  )

;; failed to figure out what this is:
(defstate hostile (neo-wasp)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy hostile) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (logior! (-> self focus-status) (focus-status dangerous))
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type hover-enemy hostile) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((gp-0 (ja-group))
          (f0-0 (ja-aframe-num 0))
          )
      (when (and (= gp-0 neo-wasp-idle-ja)
                 (or (and (>= f0-0 0.0) (>= 1.0 f0-0))
                     (and (>= f0-0 16.0)
                          (>= (the float (+ (-> (the-as art-joint-anim neo-wasp-idle-ja) frames num-frames) -1)) (ja-frame-num 0))
                          )
                     )
                 )
        (if (and (time-elapsed?
                   (-> self last-fire-time)
                   (the int (* 300.0 (rand-vu-float-range (-> self attack-wait-min) (-> self attack-wait-max))))
                   )
                 (neo-wasp-method-182 self)
                 )
            (go-virtual attack)
            )
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate attack (neo-wasp)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('event-attack)
       (when (should-check-los? (-> self los) (seconds 0.2))
         (let ((a1-2 (new 'stack-no-clear 'projectile-init-by-other-params)))
           (set! (-> a1-2 ent) (-> self entity))
           (set! (-> a1-2 charge) 1.0)
           (set! (-> a1-2 options) (projectile-options))
           (logclear! (-> a1-2 options) (projectile-options po14 po15 po16))
           (set! (-> a1-2 notify-handle) (the-as handle #f))
           (set! (-> a1-2 owner-handle) (the-as handle #f))
           (set! (-> a1-2 target-handle) (the-as handle #f))
           (set! (-> a1-2 target-pos quad) (the-as uint128 0))
           (set! (-> a1-2 ignore-handle) (process->handle self))
           (let* ((v1-11 *game-info*)
                  (a0-8 (+ (-> v1-11 attack-id) 1))
                  )
             (set! (-> v1-11 attack-id) a0-8)
             (set! (-> a1-2 attack-id) a0-8)
             )
           (set! (-> a1-2 timeout) (seconds 4))
           (fire-shot-from-cspace-idx self a1-2 31 30)
           )
         (sound-play "wasp-fire" :position (-> self root trans))
         )
       )
      (else
        (enemy-event-handler proc argc message block)
        )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self attack-miss-dist-curr) (-> self attack-miss-dist-min))
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (sound-play "wasp-warn" :position (-> self root trans))
    (ja-no-eval :group! (-> self draw art-group data (-> self hover-info shoot-anim))
                :num! (seek!)
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set-time! (-> self last-fire-time))
    (set! (-> self restart-fly-anims) #t)
    (go-hostile self)
    )
  :post (behavior ()
    (let* ((a1-0 (-> self node-list data (-> self hover-info gun-base)))
           (a0-2 (vector<-cspace! (new 'stack-no-clear 'vector) a1-0))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-4 (new 'stack-no-clear 'vector)))
        (set! (-> v1-4 quad) (-> self focus-pos quad))
        (+! (-> v1-4 y) (-> self attack-miss-dist-curr))
        (vector-! gp-0 v1-4 a0-2)
        )
      (vector-normalize! gp-0 1.0)
      (set! (-> self gun-x-angle-final) (- (vector-x-angle gp-0)))
      )
    (quaternion-vector-angle! (-> self gun-jmod rotation) *x-vector* (-> self gun-x-angle))
    (seek!
      (-> self attack-miss-dist-curr)
      (-> self attack-miss-dist-max)
      (* 0.5 (seconds-per-frame) (- (-> self attack-miss-dist-max) (-> self attack-miss-dist-min)))
      )
    (hover-enemy-hostile-post)
    )
  )

;; failed to figure out what this is:
(defstate ambush-attack (neo-wasp)
  :virtual #t
  :event (-> (method-of-type neo-wasp attack) event)
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self attack-miss-dist-curr) (-> self attack-miss-dist-min))
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (sound-play "wasp-warn" :position (-> self root trans))
    (ja-no-eval :group! (-> self draw art-group data (-> self hover-info shoot-anim))
                :num! (seek!)
                :frame-num 0.0
                )
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set-time! (-> self last-fire-time))
    (set! (-> self restart-fly-anims) #t)
    (go-virtual ambush-flying)
    )
  :post (behavior ()
    (let* ((a1-0 (-> self node-list data (-> self hover-info gun-base)))
           (a0-2 (vector<-cspace! (new 'stack-no-clear 'vector) a1-0))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-4 (new 'stack-no-clear 'vector)))
        (set! (-> v1-4 quad) (-> self focus-pos quad))
        (+! (-> v1-4 y) (-> self attack-miss-dist-curr))
        (vector-! gp-0 v1-4 a0-2)
        )
      (vector-normalize! gp-0 1.0)
      (set! (-> self gun-x-angle-final) (- (vector-x-angle gp-0)))
      )
    (quaternion-vector-angle! (-> self gun-jmod rotation) *x-vector* (-> self gun-x-angle))
    (seek!
      (-> self attack-miss-dist-curr)
      (-> self attack-miss-dist-max)
      (* 0.5 (seconds-per-frame) (- (-> self attack-miss-dist-max) (-> self attack-miss-dist-min)))
      )
    ((the-as (function none) (-> (method-of-type neo-wasp ambush) post)))
    )
  )

;; failed to figure out what this is:
(defstate knocked-recover (neo-wasp)
  :virtual #t
  :event enemy-event-handler
  :code (behavior ()
    (local-vars (v1-35 enemy-flag) (v1-37 enemy-flag) (v1-39 enemy-flag))
    (ja-channel-push! 1 (seconds 0.5))
    (ja-no-eval :group! (-> self draw art-group data (-> self knocked-recover-anim)) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (set! (-> self restart-fly-anims) #t)
    (if (logtest? (-> self enemy-flags) (enemy-flag dangerous-backup))
        (logior! (-> self focus-status) (focus-status dangerous))
        (logclear! (-> self focus-status) (focus-status dangerous))
        )
    (let ((v1-34 (-> self enemy-flags)))
      (if (logtest? v1-34 (enemy-flag vulnerable-backup))
          (set! v1-35 (logior v1-34 (enemy-flag vulnerable)))
          (set! v1-35 (logclear v1-34 (enemy-flag vulnerable)))
          )
      )
    (set! (-> self enemy-flags) v1-35)
    (let ((v1-36 (-> self enemy-flags)))
      (if (logtest? v1-36 (enemy-flag attackable-backup))
          (set! v1-37 (logior v1-36 (enemy-flag attackable)))
          (set! v1-37 (logclear v1-36 (enemy-flag attackable)))
          )
      )
    (set! (-> self enemy-flags) v1-37)
    (let ((v1-38 (-> self enemy-flags)))
      (if (logtest? (enemy-flag trackable-backup) v1-38)
          (set! v1-39 (logior (enemy-flag trackable) v1-38))
          (set! v1-39 (logclear v1-38 (enemy-flag trackable)))
          )
      )
    (set! (-> self enemy-flags) v1-39)
    (logclear! (-> self enemy-flags) (enemy-flag lock-focus))
    (logclear! (-> self focus-status) (focus-status hit))
    (hover-nav-control-method-20 (-> self hover))
    (go-hostile self)
    )
  )

;; failed to figure out what this is:
(defstate die-explode (neo-wasp)
  :virtual #t
  :event enemy-event-handler
  :code (behavior ()
    (on-dying self)
    (set! (-> self hit-points) 0.0)
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (logior! (-> self draw status) (draw-control-status no-draw))
    (sound-stop (-> self sound-id))
    (sound-play "wasp-explode")
    (spawn-debris self)
    (cond
      ((logtest? (-> *part-group-id-table* 219 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to self :group (-> *part-group-id-table* 219))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to self :group (-> *part-group-id-table* 219))
        )
      )
    (while (-> self child)
      (suspend)
      )
    (cleanup-for-death self)
    )
  )

;; failed to figure out what this is:
(defstate die-now (neo-wasp)
  :virtual #t
  :event enemy-event-handler
  :code (behavior ()
    (on-dying self)
    (let ((v1-3 (-> self root root-prim)))
      (set! (-> v1-3 prim-core collide-as) (collide-spec))
      (set! (-> v1-3 prim-core collide-with) (collide-spec))
      )
    0
    (set! (-> self hit-points) 0.0)
    (do-effect (-> self skel effect) "death-default" 0.0 -1)
    (let ((gp-0 (current-time)))
      (until (time-elapsed? gp-0 (seconds 1))
        (suspend)
        )
      )
    (send-event self 'death-end)
    (cleanup-for-death self)
    )
  :post transform-post
  )

;; definition for method 143 of type neo-wasp
(defmethod on-dying ((this neo-wasp))
  (when (-> this minimap)
    (kill-callback (-> *minimap* engine) (-> this minimap))
    (set! (-> this minimap) #f)
    )
  ((method-of-type hover-enemy on-dying) this)
  (none)
  )

;; definition for method 183 of type neo-wasp
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod spawn-debris ((this neo-wasp))
  (let ((a1-1 (new 'stack 'debris-tuning (the-as uint 1))))
    (set! (-> a1-1 hit-xz-reaction) 0.95)
    (set! (-> a1-1 hit-y-reaction) 0.6)
    (set! (-> a1-1 fountain-rand-transv-lo quad) (-> this incoming attack-position quad))
    (vector-! (-> a1-1 fountain-rand-transv-lo) (-> a1-1 fountain-rand-transv-lo) (-> this root transv))
    (debris-spawn this a1-1 *neo-wasp-debris-params* (the-as process-drawable #f))
    )
  0
  (none)
  )

;; definition for method 182 of type neo-wasp
;; WARN: Return type mismatch process vs process-focusable.
(defmethod neo-wasp-method-182 ((this neo-wasp))
  (let ((s5-0 (handle->process (-> this focus handle))))
    (the-as
      process-focusable
      (when s5-0
        (let* ((a0-4 (-> this root))
               (s4-1 (vector+! (new 'stack-no-clear 'vector) (-> a0-4 trans) (-> a0-4 transv)))
               (s3-1 (vector-! (new 'stack-no-clear 'vector) s4-1 (-> this focus-pos)))
               )
          (vector-z-quaternion! (new 'stack-no-clear 'vector) (get-quat (the-as process-focusable s5-0) 0))
          (let ((s3-2 (vector-normalize-copy! (new 'stack-no-clear 'vector) s3-1 1.0)))
            (if (and (and s5-0
                          (not (logtest? (-> (the-as process-focusable s5-0) focus-status) (focus-status disable dead ignore grabbed)))
                          )
                     (and (time-elapsed? (-> this on-screen-timer) (seconds 0.5))
                          (< (vector-vector-distance s4-1 (-> this focus-pos)) 225280.0)
                          (and (< (fabs (vector-x-angle s3-2)) 7281.778)
                               (enemy-method-104 this (-> this focus-pos) 4551.1113)
                               (should-check-los? (-> this los) (seconds 0.4))
                               )
                          )
                     )
                s5-0
                )
            )
          )
        )
      )
    )
  )

;; definition for method 85 of type neo-wasp
(defmethod knocked-anim ((this neo-wasp) (arg0 enemy-knocked-info))
  (cond
    ((rnd-chance? this 0.5)
     (set! (-> this knocked-anim) 10)
     (set! (-> this knocked-recover-anim) 11)
     )
    (else
      (set! (-> this knocked-anim) 12)
      (set! (-> this knocked-recover-anim) 13)
      )
    )
  (ja-channel-push! 1 0)
  (let ((a1-3 (-> this draw art-group data (-> this knocked-anim)))
        (a0-5 (-> this skel root-channel 0))
        )
    (set! (-> a0-5 frame-group) (the-as art-joint-anim a1-3))
    (set! (-> a0-5 param 0) (the float (+ (-> (the-as art-joint-anim a1-3) frames num-frames) -1)))
    (set! (-> a0-5 param 1) (-> arg0 anim-speed))
    (set! (-> a0-5 frame-num) 0.0)
    (joint-control-channel-group! a0-5 (the-as art-joint-anim a1-3) num-func-seek!)
    )
  #t
  )

;; definition for method 86 of type neo-wasp
(defmethod knocked-land-anim ((this neo-wasp) (arg0 enemy-knocked-info))
  (let ((v1-4 (-> this draw art-group data (-> this enemy-info knocked-land-anim)))
        (a0-3 (-> this skel root-channel 0))
        )
    (set! (-> a0-3 frame-group) (the-as art-joint-anim v1-4))
    (set! (-> a0-3 param 0) (the float (+ (-> (the-as art-joint-anim v1-4) frames num-frames) -1)))
    (set! (-> a0-3 param 1) (-> arg0 anim-speed))
    (set! (-> a0-3 frame-num) 0.0)
    (joint-control-channel-group! a0-3 (the-as art-joint-anim v1-4) num-func-seek!)
    )
  #t
  )

;; definition for method 88 of type neo-wasp
(defmethod enemy-method-88 ((this neo-wasp) (arg0 enemy-knocked-info))
  (-> this root)
  (>= (-> arg0 on-surface-count) 1)
  )

;; definition for method 89 of type neo-wasp
(defmethod within-gspot-range? ((this neo-wasp))
  #f
  )

;; definition for method 81 of type neo-wasp
(defmethod go-die ((this neo-wasp))
  (cond
    ((and (-> this next-state) (= (-> this next-state name) 'knocked))
     (go (method-of-object this die-now))
     )
    ((-> this enemy-info use-die-falling)
     (go (method-of-object this die-falling))
     )
    (else
      (go (method-of-object this die))
      )
    )
  )

;; definition for method 184 of type neo-wasp
;; WARN: Return type mismatch int vs none.
(defmethod fire-shot-from-cspace-idx ((this neo-wasp) (arg0 projectile-init-by-other-params) (arg1 int) (arg2 int))
  (vector<-cspace! (-> arg0 pos) (-> this node-list data arg1))
  (let ((s3-1
          (quaternion-vector-angle!
            (new 'stack-no-clear 'quaternion)
            (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this node-list data arg1 bone transform uvec) 1.0)
            273.06668
            )
          )
        (a1-8
          (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> this node-list data arg1 bone transform fvec) 1.0)
          )
        )
    (vector-orient-by-quat! (-> arg0 vel) a1-8 s3-1)
    )
  (vector-normalize! (-> arg0 vel) 491520.0)
  (spawn-projectile neo-wasp-shot arg0 this *default-dead-pool*)
  0
  (none)
  )

;; definition for method 163 of type neo-wasp
;; WARN: Return type mismatch int vs none.
(defmethod hover-enemy-method-163 ((this neo-wasp))
  (let* ((s4-0 (-> this main-joint-movement 2))
         (a1-0 (-> this main-joint-movement 1))
         (s5-0 (vector-inv-orient-by-quat! (new 'stack-no-clear 'vector) a1-0 (-> this root quat)))
         (v1-2 (vector-inv-orient-by-quat! (new 'stack-no-clear 'vector) s4-0 (-> this root quat)))
         (f0-0 1.0)
         (f30-0 (* 1146880.0 (seconds-per-frame)))
         (f28-0 (seek
                  (-> this thrust 0)
                  (+ (* 0.4 (fmax 0.0 (* (-> v1-2 x) f0-0)))
                     (fmax 0.0 (-> v1-2 y))
                     (fabs (* 0.2 (-> v1-2 z)))
                     (fmax 0.0 (-> s5-0 y))
                     )
                  (* 0.2 f30-0)
                  )
                )
         )
    (let ((f22-0 (lerp-scale 409.6 2048.0 f28-0 1638.4 f30-0))
          (f24-0 (lerp-scale 2457.6 5734.4 f28-0 1638.4 f30-0))
          )
      (lerp-scale 0.0 -4915.2 f28-0 1638.4 f30-0)
      (let ((f20-0 (lerp-scale 0.8 1.2 f28-0 1638.4 f30-0))
            (f26-0 (lerp-scale 0.1 1.0 f28-0 1638.4 f30-0))
            )
        (lerp-scale 0.1 1.0 f28-0 1638.4 f30-0)
        (let ((f0-11 (lerp-scale 0.02 0.6 f28-0 1638.4 f30-0))
              (f2-6 (fmin 1.0 (-> this root scale x)))
              (f1-12 (fmin 1.0 (-> this root scale y)))
              )
          (set! (-> *part-id-table* 2195 init-specs 0 initial-valuef) (the-as float (-> this mech-flame-texture-id)))
          (set! (-> *part-id-table* 2195 init-specs 4 initial-valuef) (* f22-0 f2-6))
          (set! (-> *part-id-table* 2195 init-specs 5 initial-valuef) (* f24-0 f1-12))
          (set! (-> *part-id-table* 2199 init-specs 3 initial-valuef) (* f20-0 f2-6))
          (set! (-> *part-id-table* 2196 init-specs 1 initial-valuef) (* f26-0 f1-12))
          (set! (-> *part-id-table* 2197 init-specs 1 initial-valuef) (* f0-11 f1-12))
          (set! (-> *part-id-table* 2198 init-specs 0 initial-valuef) (* f26-0 f1-12))
          )
        )
      )
    (set! (-> this thrust 0) f28-0)
    (let ((f0-14 (lerp-scale 0.75 1.0 f28-0 1638.4 f30-0)))
      (sound-play-by-name
        (static-sound-name "wasp-jets")
        (-> this sound-id)
        (the int (* 1024.0 f0-14))
        0
        0
        (sound-group)
        (-> this root trans)
        )
      )
    )
  (let ((s5-1
          (lambda ((arg0 neo-wasp) (arg1 cspace) (arg2 transformq) (arg3 float) (arg4 float))
            (local-vars (sv-144 vector) (sv-148 matrix) (sv-152 quaternion) (sv-156 quaternion) (sv-160 vector))
            (set! sv-144 (vector<-cspace! (new 'stack-no-clear 'vector) arg1))
            (set! sv-148 (new 'stack-no-clear 'matrix))
            (set! sv-152 (matrix-with-scale->quaternion (new 'stack-no-clear 'quaternion) (-> arg1 bone transform)))
            (set! sv-156 (new 'stack-no-clear 'quaternion))
            (let ((v1-3 (new 'stack-no-clear 'vector)))
              (set! (-> v1-3 quad) (-> arg0 root scale quad))
              (set! sv-160 v1-3)
              )
            (vector-float*! sv-160 sv-160 arg4)
            (quaternion-rotate-local-x! sv-156 sv-152 (the-as float arg2))
            (quaternion->matrix sv-148 sv-156)
            (scale-matrix! sv-148 sv-160 sv-148)
            (set! (-> sv-148 trans quad) (-> sv-144 quad))
            (spawn-from-mat (-> arg0 engine-part) sv-148)
            (none)
            )
          )
        )
    (s5-1 this (-> this node-list data 38) (the-as transformq (-> this hover-info thrust-rotate-left)) -1.0 1.0)
    (s5-1 this (-> this node-list data 37) (the-as transformq (-> this hover-info thrust-rotate-left)) -1.0 0.8)
    (s5-1 this (-> this node-list data 42) (the-as transformq (-> this hover-info thrust-rotate-right)) 1.0 1.0)
    (s5-1 this (-> this node-list data 41) (the-as transformq (-> this hover-info thrust-rotate-right)) 1.0 0.8)
    )
  0
  (none)
  )

;; definition for method 159 of type neo-wasp
;; WARN: Return type mismatch int vs none.
(defmethod hover-enemy-method-159 ((this neo-wasp) (arg0 symbol))
  (let ((v1-0 0)
        (a0-2 (-> this root root-prim))
        )
    (if arg0
        (set! v1-0 545)
        )
    (set! (-> (the-as collide-shape-prim-group a0-2) child 0 prim-core collide-with) (the-as collide-spec v1-0))
    (set! (-> (the-as collide-shape-prim-group a0-2) child 1 prim-core collide-with) (the-as collide-spec v1-0))
    )
  0
  (none)
  )

;; definition for method 120 of type neo-wasp
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy-collision! ((this neo-wasp))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrated-by) (penetrate
                                    generic-attack
                                    lunge
                                    flop
                                    punch
                                    spin
                                    roll
                                    uppercut
                                    bonk
                                    tube
                                    flut-attack
                                    board
                                    mech-punch
                                    dark-punch
                                    dark-smack
                                    flut
                                    )
          )
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 8) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 9))
      (set! (-> s4-0 prim-core collide-as) (collide-spec enemy los-blocker))
      (set! (-> s4-0 prim-core collide-with) (collide-spec backgnd obstacle hit-by-others-list))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 4915.2 -2048.0 15564.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd obstacle hit-by-others-list))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 3276.8 -2048.0 4915.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-15 prim-core collide-with) (collide-spec backgnd obstacle hit-by-others-list))
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 7372.8 -2048.0 4915.2)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-17 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-17 prim-core action) (collide-action semi-solid))
      (set! (-> v1-17 transform-index) 3)
      (set-vector! (-> v1-17 local-sphere) 0.0 0.0 1228.8 3481.6)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-19 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-19 prim-core action) (collide-action semi-solid))
      (set! (-> v1-19 transform-index) 18)
      (set-vector! (-> v1-19 local-sphere) 0.0 0.0 0.0 3072.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-21 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-21 prim-core action) (collide-action semi-solid))
      (set! (-> v1-21 transform-index) 25)
      (set-vector! (-> v1-21 local-sphere) 0.0 1638.4 0.0 2048.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-23 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-23 prim-core action) (collide-action semi-solid))
      (set! (-> v1-23 transform-index) 28)
      (set-vector! (-> v1-23 local-sphere) 0.0 -1638.4 0.0 2048.0)
      )
    (let ((v1-25 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-25 prim-core collide-as) (collide-spec enemy))
      (set! (-> v1-25 prim-core action) (collide-action semi-solid))
      (set! (-> v1-25 transform-index) 30)
      (set-vector! (-> v1-25 local-sphere) 0.0 0.0 0.0 3072.0)
      )
    (let ((v1-27 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-27 prim-core collide-as) (collide-spec los-blocker))
      (set! (-> v1-27 prim-core action) (collide-action solid))
      (set-vector! (-> v1-27 local-sphere) 0.0 4096.0 -2048.0 8192.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-30 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-30 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-30 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 3))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 10 of type neo-wasp
(defmethod deactivate ((this neo-wasp))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  (if (nonzero? (-> this smoke-part))
      (kill-particles (-> this smoke-part))
      )
  (if (nonzero? (-> this engine-part))
      (kill-particles (-> this engine-part))
      )
  (sound-stop (-> this sound-id))
  ((method-of-type hover-enemy deactivate) this)
  (none)
  )

;; definition for method 7 of type neo-wasp
;; WARN: Return type mismatch hover-enemy vs neo-wasp.
(defmethod relocate ((this neo-wasp) (offset int))
  (if (nonzero? (-> this smoke-part))
      (&+! (-> this smoke-part) offset)
      )
  (if (nonzero? (-> this engine-part))
      (&+! (-> this engine-part) offset)
      )
  (the-as neo-wasp ((method-of-type hover-enemy relocate) this offset))
  )

;; definition for method 170 of type neo-wasp
;; WARN: Return type mismatch int vs none.
(defmethod hover-enemy-method-170 ((this neo-wasp))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-neo-wasp" (the-as (pointer level) #f)))
    (the-as pair 0)
    )
  0
  (none)
  )

;; definition for method 171 of type neo-wasp
(defmethod get-enemy-info ((this neo-wasp))
  *neo-wasp-enemy-info*
  )

;; definition for method 172 of type neo-wasp
(defmethod get-hover-info ((this neo-wasp))
  (new 'static 'hover-enemy-info
    :fly-forward-anim 7
    :fly-backward-anim 8
    :fly-left-anim 6
    :fly-right-anim 5
    :shoot-anim 9
    :main-joint 3
    :gun-base 31
    :engine-left 38
    :engine-right 42
    :thrust-rotate-left -16384.0
    :thrust-rotate-right 16384.0
    :hover-y-offset 36864.0
    :hover-xz-offset 81920.0
    :use-flying-death #f
    :fly-x-anim-seek 1.3
    :fly-z-anim-seek 1.3
    )
  )

;; definition for method 173 of type neo-wasp
(defmethod get-hover-params ((this neo-wasp))
  (new 'static 'hover-nav-params
    :max-speed 32768.0
    :max-acceleration 57344.0
    :max-rotation-rate 14563.556
    :friction 0.05
    )
  )

;; definition for method 121 of type neo-wasp
;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defmethod init-enemy! ((this neo-wasp))
  (local-vars (sv-16 res-tag) (sv-32 res-tag) (sv-48 res-tag) (sv-64 res-tag))
  (when (= (status-of-level-and-borrows *level* 'precura #f) 'active)
    (let ((v1-4 (level-get *level* 'lprenme)))
      (if (and v1-4 (= (-> v1-4 status) 'active))
          (set! (-> this level) v1-4)
          )
      )
    )
  (hover-enemy-method-170 this)
  (init-enemy-defaults! this (get-enemy-info this))
  (hover-enemy-method-176 this)
  (set! (-> this mech-flame-texture-id)
        (the-as sound-id (lookup-texture-id-by-name "mech-flame" (the-as string #f)))
        )
  (set! (-> this neck up) (the-as uint 1))
  (set! (-> this neck nose) (the-as uint 2))
  (set! (-> this neck ear) (the-as uint 0))
  (set! (-> this scale) (rnd-float-range this 0.9 1.3))
  (set! (-> this sound-id) (new-sound-id))
  (set-time! (-> this on-screen-timer))
  (set-vector! (-> this draw color-mult) 0.75 0.75 1.0 1.0)
  (set! (-> this root dynam gravity y) 327680.0)
  (set! (-> this root dynam gravity-length) 327680.0)
  (set! (-> this root dynam gravity-max) 327680.0)
  (init
    (-> this gun-jmod)
    this
    (the-as uint (-> this hover-info gun-base))
    (joint-mod-base-flags attached quat)
    )
  (set! (-> this gun-x-angle) 0.0)
  (set! (-> this gun-x-angle-final) 0.0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (logclear! (-> this enemy-flags) (enemy-flag actor-pause-backup))
  (set! sv-16 (new 'static 'res-tag))
  (let ((v1-38 (res-lump-data (-> this entity) 'actor-groups (pointer actor-group) :tag-ptr (& sv-16))))
    (if (and v1-38 (= (-> sv-16 elt-count) 1))
        (set! (-> this entity-group) (-> v1-38 0))
        (set! (-> this entity-group) #f)
        )
    )
  (set! sv-32 (new 'static 'res-tag))
  (let ((v1-42 (res-lump-data (-> this entity) 'timeout (pointer float) :tag-ptr (& sv-32))))
    (cond
      ((and v1-42 (= (-> sv-32 elt-count) 2))
       (set! (-> this attack-wait-min) (-> v1-42 0))
       (set! (-> this attack-wait-max) (-> v1-42 1))
       )
      (else
        (set! (-> this attack-wait-min) 1.0)
        (set! (-> this attack-wait-max) 3.0)
        )
      )
    )
  (if (and (task-node-closed? (game-task-node forest-turn-on-machine-introduction))
           (not (task-node-closed? (game-task-node forest-turn-on-machine-resolution)))
           )
      (set! (-> this draw force-lod) 1)
      )
  (let ((f30-0 4096.0))
    (set! sv-48 (new 'static 'res-tag))
    (let ((v1-52 (res-lump-data (-> this entity) 'min-max (pointer float) :tag-ptr (& sv-48))))
      (set! (-> this attack-miss-dist-min) (* f30-0 (if (and v1-52 (> (the-as int (-> sv-48 elt-count)) 0))
                                                        (-> v1-52 0)
                                                        -10.0
                                                        )
                                              )
            )
      )
    )
  (let ((f30-1 4096.0))
    (set! sv-64 (new 'static 'res-tag))
    (let ((v1-56 (res-lump-data (-> this entity) 'min-max (pointer float) :tag-ptr (& sv-64))))
      (set! (-> this attack-miss-dist-max) (* f30-1 (if (and v1-56 (< 1 (the-as int (-> sv-64 elt-count))))
                                                        (-> v1-56 1)
                                                        8.0
                                                        )
                                              )
            )
      )
    )
  (set! (-> this path) (new 'process 'curve-control this 'intro -1000000000.0))
  (set! (-> this path-u) 0.0)
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this smoke-part) (create-launch-control (-> *part-group-id-table* 555) this))
  (set! (-> this engine-part) (create-launch-control (-> *part-group-id-table* 557) this))
  (set! (-> this minimap) #f)
  (add-connection
    *part-engine*
    this
    18
    this
    2203
    (new 'static 'vector :x 1597.44 :y 696.32 :z 737.28 :w 163840.0)
    )
  (add-connection
    *part-engine*
    this
    18
    this
    2203
    (new 'static 'vector :x -1597.44 :y 696.32 :z 737.28 :w 163840.0)
    )
  (add-connection *part-engine* this 18 this 2204 (new 'static 'vector :y 1433.6 :z 1228.8 :w 163840.0))
  (process-entity-status! this (entity-perm-status save) #t)
  0
  (none)
  )

;; failed to figure out what this is:
(defpart 2203
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:z (meters 0))
    (:scale-x (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 153.0)
    (:g 115.0)
    (:b 250.0)
    (:a 24.0)
    (:vel-z (meters 0.033333335))
    (:scalevel-x (meters 0.026666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.32)
    (:timer (seconds 0.085))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 1638.4)
    (:rotate-y (degrees 0))
    )
  )

;; definition of type neo-wasp-spawner
(deftype neo-wasp-spawner (process)
  ((spawn-pos         vector  :inline)
   (spawn-timer       time-frame)
   (enemies-spawned   int32)
   (enemies-to-spawn  int32)
   )
  (:state-methods
    idle
    die
    )
  )

;; definition for method 3 of type neo-wasp-spawner
(defmethod inspect ((this neo-wasp-spawner))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~2Tspawn-pos: #<vector @ #x~X>~%" (-> this spawn-pos))
  (format #t "~2Tspawn-timer: ~D~%" (-> this spawn-timer))
  (format #t "~2Tenemies-spawned: ~D~%" (-> this enemies-spawned))
  (format #t "~2Tenemies-to-spawn: ~D~%" (-> this enemies-to-spawn))
  (label cfg-4)
  this
  )

;; definition for function neo-wasp-spawner-event-handler
;; WARN: Return type mismatch event-message-block vs object.
(defbehavior neo-wasp-spawner-event-handler neo-wasp ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('going-dormant)
     (when (< (-> *event-queue* length) (-> *event-queue* allocated-length))
       (let ((v0-0 (-> *event-queue* data (-> *event-queue* length))))
         (+! (-> *event-queue* length) 1)
         (set! (-> v0-0 from-handle) (process->handle self))
         (set! (-> v0-0 to-handle) (process->handle arg0))
         (set! (-> v0-0 num-params) 0)
         (set! (-> v0-0 message) 'die-fast)
         v0-0
         )
       )
     )
    )
  )

;; failed to figure out what this is:
(defstate idle (neo-wasp-spawner)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object) neo-wasp-spawner-event-handler)
  :trans (behavior ()
    (if (>= (-> self enemies-spawned) (-> self enemies-to-spawn))
        (go-virtual die)
        )
    )
  :code sleep-code
  :post (behavior ()
    (when (and (time-elapsed? (-> self spawn-timer) (seconds 4)) (not (-> *setting-control* user-current nuke-active?)))
      (let ((s5-0 (-> self entity))
            (gp-0 (new 'stack-no-clear 'enemy-init-by-other-params))
            )
        (set! (-> gp-0 trans quad) (-> s5-0 extra trans quad))
        (quaternion-copy! (-> gp-0 quat) (-> s5-0 quat))
        (set! (-> gp-0 entity) s5-0)
        (set! (-> gp-0 directed?) #f)
        (set! (-> gp-0 no-initial-move-to-ground?) #f)
        (set! (-> gp-0 art-level) #f)
        (let ((s5-1 (get-process *default-dead-pool* neo-wasp #x4000 1)))
          (if (ppointer->handle (when s5-1
                                  (let ((t9-2 (method-of-type process activate)))
                                    (t9-2 s5-1 self "neo-wasp" (the-as pointer #x70004000))
                                    )
                                  (run-now-in-process s5-1 enemy-init-by-other self gp-0)
                                  (-> s5-1 ppointer)
                                  )
                                )
              (+! (-> self enemies-spawned) 1)
              )
          )
        )
      (set-time! (-> self spawn-timer))
      )
    )
  )

;; failed to figure out what this is:
(defstate die (neo-wasp-spawner)
  :virtual #t
  :event (the-as (function process int symbol event-message-block object) neo-wasp-spawner-event-handler)
  :code (behavior ()
    (while (-> self child)
      (suspend)
      )
    (process-entity-status! self (entity-perm-status subtask-complete) #t)
    (process-entity-status! self (entity-perm-status dead) #t)
    )
  )

;; definition for method 11 of type neo-wasp-spawner
;; INFO: Used lq/sq
(defmethod init-from-entity! ((this neo-wasp-spawner) (arg0 entity-actor))
  (set! (-> this spawn-pos quad) (-> arg0 extra trans quad))
  (set-time! (-> this spawn-timer))
  (set! (-> this enemies-spawned) 0)
  (set! (-> this enemies-to-spawn)
        (res-lump-value (-> this entity) 'extra-id int :default (the-as uint128 4) :time -1000000000.0)
        )
  (go (method-of-object this idle))
  )




