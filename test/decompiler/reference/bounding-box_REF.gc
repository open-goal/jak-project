;;-*-Lisp-*-
(in-package goal)

;; definition for function box-vector-enside?
(defun box-vector-enside? ((box bounding-box) (pt vector))
  (and
   (< (-> box min data 0) (-> pt data 0))
   (< (-> box min data 1) (-> pt data 1))
   (< (-> box min data 2) (-> pt data 2))
   (< (-> pt data 0) (-> box max data 0))
   (< (-> pt data 1) (-> box max data 1))
   (< (-> pt data 2) (-> box max data 2))
   )
  )

;; definition for function box-vector-inside?
(defun box-vector-inside? ((box bounding-box) (pt vector))
  (and
   (>= (-> pt data 0) (-> box min data 0))
   (>= (-> pt data 1) (-> box min data 1))
   (>= (-> pt data 2) (-> box min data 2))
   (>= (-> box max data 0) (-> pt data 0))
   (>= (-> box max data 1) (-> pt data 1))
   (>= (-> box max data 2) (-> pt data 2))
   )
  )

;; definition for method 11 of type bounding-box
(defmethod
  set-from-point-offset!
  bounding-box
  ((obj bounding-box) (arg0 vector3s) (arg1 vector3s))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         )
   (.lvf vf0 (new 'static 'vector :x 0.0 :y 0.0 :z 0.0 :w 1.0))
   (.lvf vf3 arg1)
   (.lvf vf4 arg0)
   (.add.vf vf5 vf4 vf3)
   (.min.vf vf1 vf4 vf5)
   (.max.vf vf2 vf4 vf5)
   (.mov.vf vf1 vf0 :mask #b1000)
   (.mov.vf vf2 vf0 :mask #b1000)
   (.svf (&-> obj min quad) vf1)
   (.svf (&-> obj max quad) vf2)
   0
   )
  )

;; definition for method 10 of type bounding-box
(defmethod add-point! bounding-box ((obj bounding-box) (arg0 vector3s))
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         )
   (.lvf vf1 (&-> obj min quad))
   (.lvf vf2 (&-> obj max quad))
   (.lvf vf3 arg0)
   (.min.vf vf1 vf1 vf3)
   (.max.vf vf2 vf2 vf3)
   (.svf (&-> obj min quad) vf1)
   (.svf (&-> obj max quad) vf2)
   0
   )
  )

;; definition for method 15 of type bounding-box
(defmethod add-box! bounding-box ((obj bounding-box) (arg0 bounding-box))
  (rlet ((vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         )
   (.lvf vf1 (&-> obj min quad))
   (.lvf vf2 (&-> obj max quad))
   (.lvf vf3 (&-> arg0 min quad))
   (.lvf vf4 (&-> arg0 max quad))
   (.min.vf vf1 vf1 vf3)
   (.max.vf vf2 vf2 vf4)
   (.svf (&-> obj min quad) vf1)
   (.svf (&-> obj max quad) vf2)
   0
   )
  )

;; definition for method 12 of type bounding-box
(defmethod
  set-from-point-offset-pad!
  bounding-box
  ((obj bounding-box) (arg0 vector3s) (arg1 vector3s) (arg2 float))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
   (.lvf vf0 (new 'static 'vector :x 0.0 :y 0.0 :z 0.0 :w 1.0))
   (.lvf vf4 arg1)
   (.lvf vf5 arg0)
   (.mov vf1 arg2)
   (.add.vf vf6 vf5 vf4)
   (.min.vf vf2 vf5 vf6)
   (.max.vf vf3 vf5 vf6)
   (.add.x.vf vf3 vf3 vf1 :mask #b111)
   (.sub.x.vf vf2 vf2 vf1 :mask #b111)
   (.mov.vf vf2 vf0 :mask #b1000)
   (.mov.vf vf3 vf0 :mask #b1000)
   (.svf (&-> obj min quad) vf2)
   (.svf (&-> obj max quad) vf3)
   0
   )
  )

;; definition for method 13 of type bounding-box
(defmethod set-from-sphere! bounding-box ((obj bounding-box) (arg0 sphere))
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         )
   (.lvf vf0 (new 'static 'vector :x 0.0 :y 0.0 :z 0.0 :w 1.0))
   (.lvf vf1 (&-> arg0 quad))
   (.sub.w.vf vf2 vf1 vf1 :mask #b111)
   (.add.w.vf vf3 vf1 vf1 :mask #b111)
   (.mov.vf vf2 vf0 :mask #b1000)
   (.mov.vf vf3 vf0 :mask #b1000)
   (.svf (&-> obj min quad) vf2)
   (.svf (&-> obj max quad) vf3)
   0
   )
  )

;; definition for method 14 of type bounding-box
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for method 9 of type bounding-box
;; ERROR: function was not converted to expressions. Cannot decompile.

;; failed to figure out what this is:
(none)
