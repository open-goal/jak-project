;;-*-Lisp-*-
(in-package goal)

;; definition of type quaternion
(deftype quaternion (structure)
  ((data float   4                   :offset-assert 0)
   (x    float   :offset   0)
   (y    float   :offset   4)
   (z    float   :offset   8)
   (w    float   :offset  12)
   (vec  vector  :inline :offset   0)
   (quad uint128 :offset   0)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type quaternion
;; Used lq/sq
(defmethod inspect quaternion ((obj quaternion))
  (format #t "[~8x] ~A~%" obj 'quaternion)
  (format #t "~Tdata[4] @ #x~X~%" (-> obj data))
  (format #t "~Tx: ~f~%" (-> obj data 0))
  (format #t "~Ty: ~f~%" (-> obj data 1))
  (format #t "~Tz: ~f~%" (-> obj data 2))
  (format #t "~Tw: ~f~%" (-> obj data 3))
  (format #t "~Tvec: #<vector @ #x~X>~%" (-> obj data))
  (format #t "~Tquad: ~D~%" (-> obj vec quad))
  obj
  )

;; definition for symbol *unity-quaternion*, type quaternion
(define *unity-quaternion* (new 'static 'quaternion :w 1.0))

;; failed to figure out what this is:
(let ((v0-1 0))
  )

;; failed to figure out what this is:
(none)
