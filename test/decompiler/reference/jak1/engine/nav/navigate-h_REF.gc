;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-poly
(deftype nav-poly (structure)
  ((id        uint8)
   (vertex    uint8  3)
   (adj-poly  uint8  3)
   (pat       uint8)
   )
  :pack-me
  )

;; definition for method 3 of type nav-poly
(defmethod inspect ((this nav-poly))
  (format #t "[~8x] ~A~%" this 'nav-poly)
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tvertex[3] @ #x~X~%" (-> this vertex))
  (format #t "~Tadj-poly[3] @ #x~X~%" (-> this adj-poly))
  (format #t "~Tpat: ~D~%" (-> this pat))
  this
  )

;; definition of type nav-vertex
(deftype nav-vertex (vector)
  ()
  )

;; definition for method 3 of type nav-vertex
;; INFO: Used lq/sq
(defmethod inspect ((this nav-vertex))
  (format #t "[~8x] ~A~%" this 'nav-vertex)
  (format #t "~Tdata[4] @ #x~X~%" (&-> this x))
  (format #t "~Tx: ~f~%" (-> this x))
  (format #t "~Ty: ~f~%" (-> this y))
  (format #t "~Tz: ~f~%" (-> this z))
  (format #t "~Tw: ~f~%" (-> this w))
  (format #t "~Tquad: ~D~%" (-> this quad))
  this
  )

;; definition of type nav-sphere
(deftype nav-sphere (structure)
  ((trans  sphere  :inline)
   )
  )

;; definition for method 3 of type nav-sphere
(defmethod inspect ((this nav-sphere))
  (format #t "[~8x] ~A~%" this 'nav-sphere)
  (format #t "~Ttrans: #<sphere @ #x~X>~%" (-> this trans))
  this
  )

;; definition of type nav-ray
(deftype nav-ray (structure)
  ((current-pos   vector  :inline)
   (dir           vector  :inline)
   (dest-pos      vector  :inline)
   (current-poly  nav-poly)
   (next-poly     nav-poly)
   (len           meters)
   (last-edge     int8)
   (terminated    symbol)
   (reached-dest  symbol)
   (hit-boundary  symbol)
   (hit-gap       symbol)
   )
  )

;; definition for method 3 of type nav-ray
(defmethod inspect ((this nav-ray))
  (format #t "[~8x] ~A~%" this 'nav-ray)
  (format #t "~Tcurrent-pos: #<vector @ #x~X>~%" (-> this current-pos))
  (format #t "~Tdir: #<vector @ #x~X>~%" (-> this dir))
  (format #t "~Tdest-pos: #<vector @ #x~X>~%" (-> this dest-pos))
  (format #t "~Tcurrent-poly: #<nav-poly @ #x~X>~%" (-> this current-poly))
  (format #t "~Tnext-poly: #<nav-poly @ #x~X>~%" (-> this next-poly))
  (format #t "~Tlen: (meters ~m)~%" (-> this len))
  (format #t "~Tlast-edge: ~D~%" (-> this last-edge))
  (format #t "~Tterminated: ~A~%" (-> this terminated))
  (format #t "~Treached-dest: ~A~%" (-> this reached-dest))
  (format #t "~Thit-boundary: ~A~%" (-> this hit-boundary))
  (format #t "~Thit-gap: ~A~%" (-> this hit-gap))
  this
  )

;; definition of type nav-route-portal
(deftype nav-route-portal (structure)
  ((next-poly   nav-poly)
   (vertex      nav-vertex  2)
   (edge-index  int8)
   )
  )

;; definition for method 3 of type nav-route-portal
(defmethod inspect ((this nav-route-portal))
  (format #t "[~8x] ~A~%" this 'nav-route-portal)
  (format #t "~Tnext-poly: #<nav-poly @ #x~X>~%" (-> this next-poly))
  (format #t "~Tvertex[2] @ #x~X~%" (-> this vertex))
  (format #t "~Tedge-index: ~D~%" (-> this edge-index))
  this
  )

;; definition of type clip-travel-vector-to-mesh-return-info
(deftype clip-travel-vector-to-mesh-return-info (structure)
  ((found-boundary   symbol)
   (intersection     vector  :inline)
   (boundary-normal  vector  :inline)
   (prev-normal      vector  :inline)
   (next-normal      vector  :inline)
   (poly             nav-poly)
   (gap-poly         nav-poly)
   (edge             int32)
   (vert-prev        vector  :inline)
   (vert-0           vector  :inline)
   (vert-1           vector  :inline)
   (vert-next        vector  :inline)
   )
  )

;; definition for method 3 of type clip-travel-vector-to-mesh-return-info
(defmethod inspect ((this clip-travel-vector-to-mesh-return-info))
  (format #t "[~8x] ~A~%" this 'clip-travel-vector-to-mesh-return-info)
  (format #t "~Tfound-boundary: ~A~%" (-> this found-boundary))
  (format #t "~Tintersection: #<vector @ #x~X>~%" (-> this intersection))
  (format #t "~Tboundary-normal: #<vector @ #x~X>~%" (-> this boundary-normal))
  (format #t "~Tprev-normal: #<vector @ #x~X>~%" (-> this prev-normal))
  (format #t "~Tnext-normal: #<vector @ #x~X>~%" (-> this next-normal))
  (format #t "~Tpoly: #<nav-poly @ #x~X>~%" (-> this poly))
  (format #t "~Tgap-poly: #<nav-poly @ #x~X>~%" (-> this gap-poly))
  (format #t "~Tedge: ~D~%" (-> this edge))
  (format #t "~Tvert-prev: #<vector @ #x~X>~%" (-> this vert-prev))
  (format #t "~Tvert-0: #<vector @ #x~X>~%" (-> this vert-0))
  (format #t "~Tvert-1: #<vector @ #x~X>~%" (-> this vert-1))
  (format #t "~Tvert-next: #<vector @ #x~X>~%" (-> this vert-next))
  this
  )

;; definition of type nav-node
(deftype nav-node (structure)
  ((center-x       float)
   (center-y       float)
   (center-z       float)
   (type           uint16)
   (parent-offset  uint16)
   (center         vector  :inline :overlay-at center-x)
   (radius-x       float)
   (radius-y       float)
   (radius-z       float)
   (left-offset    uint16)
   (right-offset   uint16)
   (num-tris       uint32          :overlay-at left-offset)
   (radius         vector  :inline :overlay-at radius-x)
   (scale-x        float)
   (first-tris     uint8   4)
   (scale-z        float)
   (last-tris      uint8   4)
   (scale          vector  :inline :overlay-at scale-x)
   )
  )

;; definition for method 3 of type nav-node
(defmethod inspect ((this nav-node))
  (format #t "[~8x] ~A~%" this 'nav-node)
  (format #t "~Tcenter-x: ~f~%" (-> this center-x))
  (format #t "~Tcenter-y: ~f~%" (-> this center-y))
  (format #t "~Tcenter-z: ~f~%" (-> this center-z))
  (format #t "~Ttype: ~D~%" (-> this type))
  (format #t "~Tparent-offset: ~D~%" (-> this parent-offset))
  (format #t "~Tcenter: #<vector @ #x~X>~%" (&-> this center-x))
  (format #t "~Tradius-x: ~f~%" (-> this radius-x))
  (format #t "~Tradius-y: ~f~%" (-> this radius-y))
  (format #t "~Tradius-z: ~f~%" (-> this radius-z))
  (format #t "~Tleft-offset: ~D~%" (-> this left-offset))
  (format #t "~Tright-offset: ~D~%" (-> this right-offset))
  (format #t "~Tnum-tris: ~D~%" (-> this num-tris))
  (format #t "~Tradius: #<vector @ #x~X>~%" (&-> this radius-x))
  (format #t "~Tscale-x: ~f~%" (-> this scale-x))
  (format #t "~Tfirst-tris[4] @ #x~X~%" (-> this first-tris))
  (format #t "~Tscale-z: ~f~%" (-> this scale-z))
  (format #t "~Tlast-tris[4] @ #x~X~%" (-> this last-tris))
  (format #t "~Tscale: #<vector @ #x~X>~%" (&-> this scale-x))
  this
  )

;; definition of type nav-lookup-elem
(deftype nav-lookup-elem (structure)
  ((vec          vector  :inline)
   (y-thresh     float   :overlay-at (-> vec w))
   (time         uint32)
   (node-offset  uint32)
   (lookup-type  uint8)
   (poly-ind     uint8)
   (dummy0       uint16)
   (dummy        uint32)
   )
  )

;; definition for method 3 of type nav-lookup-elem
(defmethod inspect ((this nav-lookup-elem))
  (format #t "[~8x] ~A~%" this 'nav-lookup-elem)
  (format #t "~Tvec: #<vector @ #x~X>~%" (-> this vec))
  (format #t "~Ty-thresh: ~f~%" (-> this vec w))
  (format #t "~Ttime: ~D~%" (-> this time))
  (format #t "~Tnode-offset: ~D~%" (-> this node-offset))
  (format #t "~Tlookup-type: ~D~%" (-> this lookup-type))
  (format #t "~Tpoly-ind: ~D~%" (-> this poly-ind))
  (format #t "~Tdummy0: ~D~%" (-> this dummy0))
  (format #t "~Tdummy: ~D~%" (-> this dummy))
  this
  )

;; definition of type nav-mesh
(deftype nav-mesh (basic)
  ((user-list            engine)
   (poly-lookup-history  uint8            2)
   (debug-time           uint8)
   (static-sphere-count  uint8)
   (static-sphere        (inline-array nav-sphere))
   (bounds               sphere           :inline)
   (origin               vector           :inline)
   (cache                nav-lookup-elem  4 :inline)
   (node-count           int32)
   (nodes                (inline-array nav-node))
   (vertex-count         int32)
   (vertex               (inline-array nav-vertex))
   (poly-count           int32)
   (poly                 (inline-array nav-poly))
   (route                (inline-array vector4ub))
   )
  (:methods
    (tri-centroid-world (_type_ nav-poly vector) vector)
    (tri-centroid-local (_type_ nav-poly vector) vector)
    (get-adj-poly (_type_ nav-poly nav-poly symbol) nav-poly)
    (setup-portal (_type_ nav-poly nav-poly nav-route-portal) object)
    (initialize-mesh! (_type_) none)
    (move-along-nav-ray! (_type_ nav-ray) none)
    (try-move-along-ray (_type_ nav-poly vector vector float) meters)
    (nav-mesh-method-16 (_type_ vector nav-poly vector symbol float clip-travel-vector-to-mesh-return-info) none)
    (update-route-table (_type_) none)
    (nav-mesh-method-18 (_type_ int vector int (pointer int8) int) none)
    (compute-bounding-box (_type_ vector vector) none)
    (debug-draw-poly (_type_ nav-poly rgba) none)
    (point-in-poly? (_type_ nav-poly vector) symbol)
    (find-opposite-vertices (_type_ nav-poly nav-poly) uint)
    (nav-mesh-method-23 (_type_ nav-poly vector vector vector nav-route-portal) vector)
    (closest-point-on-boundary (_type_ nav-poly vector vector) vector)
    (project-point-into-tri-3d (_type_ nav-poly vector vector) none)
    (project-point-into-tri-2d (_type_ nav-poly vector vector) vector)
    (find-poly-fast (_type_ vector meters) nav-poly)
    (find-poly (_type_ vector meters (pointer nav-control-flags)) nav-poly)
    (is-in-mesh? (_type_ vector float meters) symbol)
    )
  )

;; definition for method 3 of type nav-mesh
(defmethod inspect ((this nav-mesh))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tuser-list: ~A~%" (-> this user-list))
  (format #t "~Tpoly-lookup-history[2] @ #x~X~%" (-> this poly-lookup-history))
  (format #t "~Tdebug-time: ~D~%" (-> this debug-time))
  (format #t "~Tstatic-sphere-count: ~D~%" (-> this static-sphere-count))
  (format #t "~Tstatic-sphere: #x~X~%" (-> this static-sphere))
  (format #t "~Tbounds: ~`sphere`P~%" (-> this bounds))
  (format #t "~Torigin: ~`vector`P~%" (-> this origin))
  (format #t "~Tcache[4] @ #x~X~%" (-> this cache))
  (format #t "~Tnode-count: ~D~%" (-> this node-count))
  (format #t "~Tnodes: #x~X~%" (-> this nodes))
  (format #t "~Tvertex-count: ~D~%" (-> this vertex-count))
  (format #t "~Tvertex: #x~X~%" (-> this vertex))
  (format #t "~Tpoly-count: ~D~%" (-> this poly-count))
  (format #t "~Tpoly: #x~X~%" (-> this poly))
  (format #t "~Troute: #x~X~%" (-> this route))
  this
  )

;; definition of type check-vector-collision-with-nav-spheres-info
(deftype check-vector-collision-with-nav-spheres-info (structure)
  ((u          float)
   (intersect  vector  :inline)
   (normal     vector  :inline)
   )
  )

;; definition for method 3 of type check-vector-collision-with-nav-spheres-info
(defmethod inspect ((this check-vector-collision-with-nav-spheres-info))
  (format #t "[~8x] ~A~%" this 'check-vector-collision-with-nav-spheres-info)
  (format #t "~Tu: ~f~%" (-> this u))
  (format #t "~Tintersect: #<vector @ #x~X>~%" (-> this intersect))
  (format #t "~Tnormal: #<vector @ #x~X>~%" (-> this normal))
  this
  )

;; definition of type nav-gap-info
(deftype nav-gap-info (structure)
  ((dest  vector  :inline)
   (poly  nav-poly)
   )
  )

;; definition for method 3 of type nav-gap-info
(defmethod inspect ((this nav-gap-info))
  (format #t "[~8x] ~A~%" this 'nav-gap-info)
  (format #t "~Tdest: #<vector @ #x~X>~%" (-> this dest))
  (format #t "~Tpoly: #<nav-poly @ #x~X>~%" (-> this poly))
  this
  )

;; definition of type nav-control
(deftype nav-control (basic)
  ((flags                nav-control-flags)
   (process              basic)
   (shape                collide-shape)
   (mesh                 nav-mesh)
   (gap-event            basic)
   (block-event          basic)
   (current-poly         nav-poly)
   (next-poly            nav-poly)
   (target-poly          nav-poly)
   (portal               nav-route-portal  2)
   (nearest-y-threshold  meters)
   (event-temp           vector            :inline)
   (old-travel           vector            :inline)
   (blocked-travel       vector            :inline)
   (prev-pos             vector            :inline)
   (extra-nav-sphere     vector            :inline)
   (travel               vector            :inline)
   (target-pos           vector            :inline)
   (destination-pos      vector            :inline)
   (block-time           time-frame)
   (block-count          float)
   (user-poly            nav-poly)
   (nav-cull-radius      float)
   (num-spheres          int16)
   (max-spheres          int16)
   (sphere               sphere            :inline :dynamic)
   )
  (:methods
    (new (symbol type collide-shape int float) _type_)
    (debug-draw (_type_) none)
    (point-in-bounds? (_type_ vector) symbol)
    (nav-control-method-11 (_type_ vector) vector)
    (nav-control-method-12 (_type_ nav-gap-info) symbol)
    (nav-control-method-13 (_type_ vector vector) vector)
    (set-current-poly! (_type_ nav-poly) none)
    (set-target-pos! (_type_ vector) none)
    (nav-control-method-16 (_type_ vector) nav-poly)
    (project-onto-nav-mesh (_type_ vector vector) vector)
    (find-poly (_type_ vector) nav-poly)
    (nav-control-method-19 (_type_ vector collide-shape-moving vector float) none)
    (project-point-into-tri-3d (_type_ nav-poly vector vector) vector)
    (nav-control-method-21 (_type_ vector) nav-poly)
    (nav-control-method-22 (_type_ vector float) symbol)
    (nav-control-method-23 (_type_ vector check-vector-collision-with-nav-spheres-info) float)
    (nav-control-method-24 (_type_ float clip-travel-vector-to-mesh-return-info) none)
    (is-in-mesh? (_type_ vector float) symbol)
    (nav-control-method-26 (_type_) none)
    (nav-control-method-27 (_type_) none)
    (nav-control-method-28 (_type_ collide-kind) none)
    (should-display? (_type_) symbol)
    (nav-control-method-30 (_type_ vector vector vector) sphere)
    (intersect-ray-line-segment? (_type_ vector vector vector vector) symbol)
    (nav-control-method-32 (_type_ vector vector vector vector float) symbol)
    (nav-control-method-33 (_type_ vector vector vector vector float) symbol)
    (nav-control-method-34 () none)
    (nav-control-method-35 (_type_ vector vector vector vector float) none)
    )
  )

;; definition for method 3 of type nav-control
(defmethod inspect ((this nav-control))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tflags: #x~X~%" (-> this flags))
  (format #t "~Tprocess: ~A~%" (-> this process))
  (format #t "~Tshape: ~A~%" (-> this shape))
  (format #t "~Tmesh: ~A~%" (-> this mesh))
  (format #t "~Tgap-event: ~A~%" (-> this gap-event))
  (format #t "~Tblock-event: ~A~%" (-> this block-event))
  (format #t "~Tcurrent-poly: #<nav-poly @ #x~X>~%" (-> this current-poly))
  (format #t "~Tnext-poly: #<nav-poly @ #x~X>~%" (-> this next-poly))
  (format #t "~Ttarget-poly: #<nav-poly @ #x~X>~%" (-> this target-poly))
  (format #t "~Tportal[2] @ #x~X~%" (-> this portal))
  (format #t "~Tnearest-y-threshold: (meters ~m)~%" (-> this nearest-y-threshold))
  (format #t "~Tevent-temp: ~`vector`P~%" (-> this event-temp))
  (format #t "~Told-travel: ~`vector`P~%" (-> this old-travel))
  (format #t "~Tblocked-travel: ~`vector`P~%" (-> this blocked-travel))
  (format #t "~Tprev-pos: ~`vector`P~%" (-> this prev-pos))
  (format #t "~Textra-nav-sphere: ~`vector`P~%" (-> this extra-nav-sphere))
  (format #t "~Ttravel: ~`vector`P~%" (-> this travel))
  (format #t "~Ttarget-pos: ~`vector`P~%" (-> this target-pos))
  (format #t "~Tdestination-pos: ~`vector`P~%" (-> this destination-pos))
  (format #t "~Tblock-time: ~D~%" (-> this block-time))
  (format #t "~Tblock-count: ~f~%" (-> this block-count))
  (format #t "~Tuser-poly: #<nav-poly @ #x~X>~%" (-> this user-poly))
  (format #t "~Tnav-cull-radius: ~f~%" (-> this nav-cull-radius))
  (format #t "~Tnum-spheres: ~D~%" (-> this num-spheres))
  (format #t "~Tmax-spheres: ~D~%" (-> this max-spheres))
  (format #t "~Tsphere[0] @ #x~X~%" (-> this sphere))
  this
  )

;; definition for function nav-mesh-connect
;; INFO: Used lq/sq
(defbehavior nav-mesh-connect process ((proc process) (trans trsqv) (nav-cont nav-control))
  (local-vars (sv-16 type) (sv-32 symbol))
  (let ((ent (-> proc entity)))
    (when (zero? (-> ent nav-mesh))
      (let ((lookup-entity (entity-actor-lookup ent 'nav-mesh-actor 0)))
        (if lookup-entity
            (set! ent lookup-entity)
            )
        )
      )
    (let ((entity-nav-mesh (-> ent nav-mesh)))
      (cond
        ((nonzero? entity-nav-mesh)
         (when (zero? (-> entity-nav-mesh user-list))
           (set! process-level-heap (-> self entity extra level heap))
           (let ((s1-0 (method-of-type engine new))
                 (s0-0 'process-level-heap)
                 )
             (set! sv-16 engine)
             (set! sv-32 'nav-engine)
             (let ((a3-1 (res-lump-value ent 'nav-max-users uint128 :default (the-as uint128 32))))
               (set! (-> entity-nav-mesh user-list) (s1-0 s0-0 sv-16 sv-32 (the-as int a3-1)))
               )
             )
           (initialize-mesh! entity-nav-mesh)
           (update-route-table entity-nav-mesh)
           )
         (add-connection (-> entity-nav-mesh user-list) proc nothing proc nav-cont trans)
         )
        (else
          (if (and nav-cont (-> proc entity))
              (logior! (-> proc entity extra perm status) (entity-perm-status bit-1))
              )
          (set! entity-nav-mesh *default-nav-mesh*)
          )
        )
      entity-nav-mesh
      )
    )
  )

;; definition for method 0 of type nav-control
;; INFO: Return type mismatch object vs nav-control.
(defmethod new nav-control ((allocation symbol)
                          (type-to-make type)
                          (shape collide-shape)
                          (sphere-count int)
                          (nearest-y-threshold-default float)
                          )
  (let ((this (object-new allocation type-to-make (the-as int (+ (-> type-to-make size) (* sphere-count 16))))))
    (when (zero? this)
      (go process-drawable-art-error "memory")
      (set! this (the-as nav-control 0))
      (goto cfg-4)
      )
    (set! (-> this max-spheres) sphere-count)
    (set! (-> this flags) (nav-control-flags navcf8 navcf13))
    (set! (-> this mesh) (nav-mesh-connect (-> shape process) shape this))
    (let ((ent (-> shape process entity)))
      (set! (-> this nearest-y-threshold)
            (res-lump-float ent 'nearest-y-threshold :default nearest-y-threshold-default)
            )
      )
    (set! (-> this shape) shape)
    (set! (-> this process) (-> shape process))
    (set! (-> this gap-event) #f)
    (set! (-> this current-poly) #f)
    (set! (-> this next-poly) #f)
    (set! (-> this target-poly) #f)
    (set! (-> this user-poly) #f)
    (set! (-> this portal 0) #f)
    (set! (-> this portal 1) #f)
    (set! (-> this nav-cull-radius) 40960.0)
    (label cfg-4)
    (the-as nav-control this)
    )
  )

;; definition for method 29 of type nav-control
(defmethod should-display? ((this nav-control))
  (and *display-nav-marks* (logtest? (-> this flags) (nav-control-flags display-marks)))
  )

;; definition for method 10 of type nav-control
(defmethod point-in-bounds? ((this nav-control) (arg0 vector))
  (let ((v1-1 (-> this mesh bounds)))
    (>= (-> v1-1 w) (vector-vector-distance arg0 v1-1))
    )
  )

;; definition for method 15 of type nav-control
;; INFO: Used lq/sq
;; INFO: Return type mismatch vector vs none.
(defmethod set-target-pos! ((this nav-control) (arg0 vector))
  (set! (-> this target-pos quad) (-> arg0 quad))
  (none)
  )

;; definition for function has-nav-mesh?
;; INFO: Return type mismatch structure vs symbol.
(defun has-nav-mesh? ((arg0 entity-actor))
  (the-as symbol (or (-> arg0 nav-mesh) (res-lump-struct arg0 'nav-mesh-actor structure)))
  )
