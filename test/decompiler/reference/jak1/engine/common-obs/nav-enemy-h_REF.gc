;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-enemy-info
(deftype nav-enemy-info (basic)
  ((idle-anim                  int32)
   (walk-anim                  int32)
   (turn-anim                  int32)
   (notice-anim                int32)
   (run-anim                   int32)
   (jump-anim                  int32)
   (jump-land-anim             int32)
   (victory-anim               int32)
   (taunt-anim                 int32)
   (die-anim                   int32)
   (neck-joint                 int32)
   (player-look-at-joint       int32)
   (run-travel-speed           meters)
   (run-rotate-speed           degrees)
   (run-acceleration           meters)
   (run-turn-time              seconds)
   (walk-travel-speed          meters)
   (walk-rotate-speed          degrees)
   (walk-acceleration          meters)
   (walk-turn-time             seconds)
   (attack-shove-back          meters)
   (attack-shove-up            meters)
   (shadow-size                meters)
   (notice-nav-radius          meters)
   (nav-nearest-y-threshold    meters)
   (notice-distance            meters)
   (proximity-notice-distance  meters)
   (stop-chase-distance        meters)
   (frustration-distance       meters)
   (frustration-time           time-frame)
   (die-anim-hold-frame        float)
   (jump-anim-start-frame      float)
   (jump-land-anim-end-frame   float)
   (jump-height-min            meters)
   (jump-height-factor         float)
   (jump-start-anim-speed      float)
   (shadow-max-y               meters)
   (shadow-min-y               meters)
   (shadow-locus-dist          meters)
   (use-align                  symbol)
   (draw-shadow                symbol)
   (move-to-ground             symbol)
   (hover-if-no-ground         symbol)
   (use-momentum               symbol)
   (use-flee                   symbol)
   (use-proximity-notice       symbol)
   (use-jump-blocked           symbol)
   (use-jump-patrol            symbol)
   (gnd-collide-with           collide-kind)
   (debug-draw-neck            symbol)
   (debug-draw-jump            symbol)
   )
  )

;; definition for method 3 of type nav-enemy-info
(defmethod inspect ((this nav-enemy-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tidle-anim: ~D~%" (-> this idle-anim))
  (format #t "~Twalk-anim: ~D~%" (-> this walk-anim))
  (format #t "~Tturn-anim: ~D~%" (-> this turn-anim))
  (format #t "~Tnotice-anim: ~D~%" (-> this notice-anim))
  (format #t "~Trun-anim: ~D~%" (-> this run-anim))
  (format #t "~Tjump-anim: ~D~%" (-> this jump-anim))
  (format #t "~Tjump-land-anim: ~D~%" (-> this jump-land-anim))
  (format #t "~Tvictory-anim: ~D~%" (-> this victory-anim))
  (format #t "~Ttaunt-anim: ~D~%" (-> this taunt-anim))
  (format #t "~Tdie-anim: ~D~%" (-> this die-anim))
  (format #t "~Tneck-joint: ~D~%" (-> this neck-joint))
  (format #t "~Tplayer-look-at-joint: ~D~%" (-> this player-look-at-joint))
  (format #t "~Trun-travel-speed: (meters ~m)~%" (-> this run-travel-speed))
  (format #t "~Trun-rotate-speed: (deg ~r)~%" (-> this run-rotate-speed))
  (format #t "~Trun-acceleration: (meters ~m)~%" (-> this run-acceleration))
  (format #t "~Trun-turn-time: (seconds ~e)~%" (-> this run-turn-time))
  (format #t "~Twalk-travel-speed: (meters ~m)~%" (-> this walk-travel-speed))
  (format #t "~Twalk-rotate-speed: (deg ~r)~%" (-> this walk-rotate-speed))
  (format #t "~Twalk-acceleration: (meters ~m)~%" (-> this walk-acceleration))
  (format #t "~Twalk-turn-time: (seconds ~e)~%" (-> this walk-turn-time))
  (format #t "~Tattack-shove-back: (meters ~m)~%" (-> this attack-shove-back))
  (format #t "~Tattack-shove-up: (meters ~m)~%" (-> this attack-shove-up))
  (format #t "~Tshadow-size: (meters ~m)~%" (-> this shadow-size))
  (format #t "~Tnotice-nav-radius: (meters ~m)~%" (-> this notice-nav-radius))
  (format #t "~Tnav-nearest-y-threshold: (meters ~m)~%" (-> this nav-nearest-y-threshold))
  (format #t "~Tnotice-distance: (meters ~m)~%" (-> this notice-distance))
  (format #t "~Tproximity-notice-distance: (meters ~m)~%" (-> this proximity-notice-distance))
  (format #t "~Tstop-chase-distance: (meters ~m)~%" (-> this stop-chase-distance))
  (format #t "~Tfrustration-distance: (meters ~m)~%" (-> this frustration-distance))
  (format #t "~Tfrustration-time: ~D~%" (-> this frustration-time))
  (format #t "~Tdie-anim-hold-frame: ~f~%" (-> this die-anim-hold-frame))
  (format #t "~Tjump-anim-start-frame: ~f~%" (-> this jump-anim-start-frame))
  (format #t "~Tjump-land-anim-end-frame: ~f~%" (-> this jump-land-anim-end-frame))
  (format #t "~Tjump-height-min: (meters ~m)~%" (-> this jump-height-min))
  (format #t "~Tjump-height-factor: ~f~%" (-> this jump-height-factor))
  (format #t "~Tjump-start-anim-speed: ~f~%" (-> this jump-start-anim-speed))
  (format #t "~Tshadow-max-y: (meters ~m)~%" (-> this shadow-max-y))
  (format #t "~Tshadow-min-y: (meters ~m)~%" (-> this shadow-min-y))
  (format #t "~Tshadow-locus-dist: (meters ~m)~%" (-> this shadow-locus-dist))
  (format #t "~Tuse-align: ~A~%" (-> this use-align))
  (format #t "~Tdraw-shadow: ~A~%" (-> this draw-shadow))
  (format #t "~Tmove-to-ground: ~A~%" (-> this move-to-ground))
  (format #t "~Thover-if-no-ground: ~A~%" (-> this hover-if-no-ground))
  (format #t "~Tuse-momentum: ~A~%" (-> this use-momentum))
  (format #t "~Tuse-flee: ~A~%" (-> this use-flee))
  (format #t "~Tuse-proximity-notice: ~A~%" (-> this use-proximity-notice))
  (format #t "~Tuse-jump-blocked: ~A~%" (-> this use-jump-blocked))
  (format #t "~Tuse-jump-patrol: ~A~%" (-> this use-jump-patrol))
  (format #t "~Tgnd-collide-with: ~D~%" (-> this gnd-collide-with))
  (format #t "~Tdebug-draw-neck: ~A~%" (-> this debug-draw-neck))
  (format #t "~Tdebug-draw-jump: ~A~%" (-> this debug-draw-jump))
  this
  )

;; definition of type nav-enemy
(deftype nav-enemy (process-drawable)
  ((collide-info         collide-shape-moving  :overlay-at root)
   (enemy-info           fact-info-enemy       :overlay-at fact)
   (hit-from-dir         vector                :inline)
   (event-param-point    vector                :inline)
   (frustration-point    vector                :inline)
   (jump-dest            vector                :inline)
   (jump-trajectory      trajectory            :inline)
   (jump-time            time-frame)
   (nav-info             nav-enemy-info)
   (target-speed         float)
   (momentum-speed       float)
   (acceleration         float)
   (rotate-speed         float)
   (turn-time            time-frame)
   (frustration-time     time-frame)
   (speed-scale          float)
   (neck                 joint-mod)
   (reaction-time        time-frame)
   (notice-time          time-frame)
   (state-timeout        time-frame)
   (free-time            time-frame)
   (touch-time           time-frame)
   (nav-enemy-flags      nav-enemy-flags)
   (incomming-attack-id  handle)
   (jump-return-state    (state process))
   (rand-gen             random-generator)
   )
  (:state-methods
    nav-enemy-attack
    nav-enemy-chase
    nav-enemy-flee
    nav-enemy-die
    nav-enemy-fuel-cell
    nav-enemy-give-up
    nav-enemy-jump
    nav-enemy-jump-land
    nav-enemy-idle
    nav-enemy-notice
    nav-enemy-patrol
    nav-enemy-stare
    nav-enemy-stop-chase
    nav-enemy-victory
    )
  (:methods
    (nav-enemy-method-34 (_type_) none)
    (nav-enemy-wait-for-cue () _type_ :state)
    (nav-enemy-jump-to-point () _type_ :state)
    (nav-enemy-method-37 (_type_) none)
    (nav-enemy-method-38 (_type_) none)
    (common-post (_type_) none)
    (nav-enemy-method-40 (_type_) none)
    (nav-enemy-method-41 (_type_) none)
    (new-patrol-point! (_type_) int)
    (attack-handler (_type_ process event-message-block) object)
    (touch-handler (_type_ process event-message-block) object)
    (init-defaults! (_type_ nav-enemy-info) none)
    (target-in-range? (_type_ float) basic)
    (initialize-collision (_type_) none)
    (nav-enemy-method-48 (_type_) none)
    (init-jm! (_type_ nav-enemy-info) float)
    (nav-enemy-method-50 (_type_ vector) symbol)
    (nav-enemy-method-51 (_type_) none)
    (nav-enemy-method-52 (_type_ vector) symbol)
    (nav-enemy-method-53 (_type_) symbol)
    (nav-enemy-method-54 (_type_ vector) symbol)
    (nav-enemy-method-55 (_type_) symbol)
    (set-jump-height-factor! (_type_ int) none)
    (nav-enemy-method-57 (_type_) none)
    (nav-enemy-method-58 (_type_) none)
    (nav-enemy-method-59 (_type_) none)
    (nav-enemy-method-60 (_type_ symbol) symbol)
    (snow-bunny-attack () _type_ :state)
    (snow-bunny-chase-hop () _type_ :state)
    (snow-bunny-defend () _type_ :state)
    (nav-enemy-method-64 () _type_ :state)
    (snow-bunny-lunge () _type_ :state)
    (snow-bunny-nav-resume () _type_ :state)
    (snow-bunny-patrol-hop () _type_ :state)
    (snow-bunny-patrol-idle () _type_ :state)
    (nav-enemy-method-69 () _type_ :state)
    (snow-bunny-retreat-hop () _type_ :state)
    (snow-bunny-tune-spheres () _type_ :state)
    (nav-enemy-touch-handler (_type_ process event-message-block) object)
    (nav-enemy-attack-handler (_type_ process event-message-block) object)
    (nav-enemy-jump-blocked () _type_ :state)
    (nav-enemy-method-75 () _type_ :state)
    )
  )

;; definition for method 3 of type nav-enemy
(defmethod inspect ((this nav-enemy))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Thit-from-dir: ~`vector`P~%" (-> this hit-from-dir))
  (format #t "~T~Tevent-param-point: ~`vector`P~%" (-> this event-param-point))
  (format #t "~T~Tfrustration-point: ~`vector`P~%" (-> this frustration-point))
  (format #t "~T~Tjump-dest: ~`vector`P~%" (-> this jump-dest))
  (format #t "~T~Tjump-trajectory: #<trajectory @ #x~X>~%" (-> this jump-trajectory))
  (format #t "~T~Tjump-time: ~D~%" (-> this jump-time))
  (format #t "~T~Tnav-info: ~A~%" (-> this nav-info))
  (format #t "~T~Ttarget-speed: ~f~%" (-> this target-speed))
  (format #t "~T~Tmomentum-speed: ~f~%" (-> this momentum-speed))
  (format #t "~T~Tacceleration: ~f~%" (-> this acceleration))
  (format #t "~T~Trotate-speed: ~f~%" (-> this rotate-speed))
  (format #t "~T~Tturn-time: ~D~%" (-> this turn-time))
  (format #t "~T~Tfrustration-time: ~D~%" (-> this frustration-time))
  (format #t "~T~Tspeed-scale: ~f~%" (-> this speed-scale))
  (format #t "~T~Tneck: ~A~%" (-> this neck))
  (format #t "~T~Treaction-time: ~D~%" (-> this reaction-time))
  (format #t "~T~Tnotice-time: ~D~%" (-> this notice-time))
  (format #t "~T~Tstate-timeout: ~D~%" (-> this state-timeout))
  (format #t "~T~Tfree-time: ~D~%" (-> this free-time))
  (format #t "~T~Ttouch-time: ~D~%" (-> this touch-time))
  (format #t "~T~Tnav-enemy-flags: ~D~%" (-> this nav-enemy-flags))
  (format #t "~T~Tincomming-attack-id: ~D~%" (-> this incomming-attack-id))
  (format #t "~T~Tjump-return-state: ~A~%" (-> this jump-return-state))
  (format #t "~T~Trand-gen: ~A~%" (-> this rand-gen))
  this
  )

;; failed to figure out what this is:
0
