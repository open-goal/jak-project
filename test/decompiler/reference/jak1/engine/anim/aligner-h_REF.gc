;;-*-Lisp-*-
(in-package goal)

;; definition of type align-control
(deftype align-control (basic)
  ((flags        align-flags)
   (process      process-drawable)
   (frame-group  art-joint-anim)
   (frame-num    float)
   (matrix       matrix      2 :inline)
   (transform    transform   2 :inline)
   (delta        transformq  :inline)
   (last-speed   meters)
   (align        transformq  :inline :overlay-at (-> transform 0 trans x))
   )
  (:methods
    (new (symbol type process-drawable) _type_)
    (compute-alignment! (_type_) transformq)
    (align! (_type_ align-opts float float float) trsqv)
    (align-vel-and-quat-only! (_type_ align-opts vector int float float) trsqv)
    (first-transform (_type_) transform)
    (snd-transform (_type_) transform)
    )
  )

;; definition for method 3 of type align-control
(defmethod inspect ((this align-control))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tflags: #x~X~%" (-> this flags))
  (format #t "~Tprocess: ~A~%" (-> this process))
  (format #t "~Tframe-group: ~A~%" (-> this frame-group))
  (format #t "~Tframe-num: ~f~%" (-> this frame-num))
  (format #t "~Tmatrix[2] @ #x~X~%" (-> this matrix))
  (format #t "~Ttransform[2] @ #x~X~%" (-> this transform))
  (format #t "~Tdelta: #<transformq @ #x~X>~%" (-> this delta))
  (format #t "~Tlast-speed: (meters ~m)~%" (-> this last-speed))
  (format #t "~Talign: #<transformq @ #x~X>~%" (-> this transform))
  this
  )

;; definition for method 0 of type align-control
;; INFO: Return type mismatch object vs align-control.
(defmethod new align-control ((allocation symbol) (type-to-make type) (arg0 process-drawable))
  (let ((this (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (when (zero? this)
      (go process-drawable-art-error "memory")
      (return (the-as align-control 0))
      )
    (set! (-> this process) arg0)
    this
    )
  )
