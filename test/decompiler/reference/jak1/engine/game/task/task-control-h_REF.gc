;;-*-Lisp-*-
(in-package goal)

;; definition of type task-cstage
(deftype task-cstage (structure)
  ((game-task  game-task)
   (status     task-status)
   (flags      task-flags)
   (condition  (function task-control symbol))
   )
  (:methods
    (get-task (_type_) game-task)
    (get-status (_type_) task-status)
    (task-available? (_type_ task-control) symbol)
    (closed? (_type_) symbol)
    (closed-by-default? (_type_) symbol)
    (close-task! (_type_) int)
    (open-task! (_type_) int)
    )
  )

;; definition for method 3 of type task-cstage
(defmethod inspect ((this task-cstage))
  (format #t "[~8x] ~A~%" this 'task-cstage)
  (format #t "~Tgame-task: ~D~%" (-> this game-task))
  (format #t "~Tstatus: ~D~%" (-> this status))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tcondition: ~A~%" (-> this condition))
  this
  )

;; definition of type task-control
(deftype task-control (basic)
  ((current-stage  int16)
   (stage          (array task-cstage))
   )
  (:methods
    (current-task (_type_) game-task)
    (current-status (_type_) task-status)
    (close-current! (_type_) game-task)
    (close-status! (_type_ task-status) game-task)
    (first-any (_type_ symbol) game-task)
    (reset! (_type_ symbol symbol) int)
    (closed? (_type_ game-task task-status) symbol)
    (get-reminder (_type_ int) int)
    (save-reminder (_type_ int int) int)
    (exists? (_type_ game-task task-status) symbol)
    )
  )

;; definition for method 3 of type task-control
(defmethod inspect ((this task-control))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tcurrent-stage: ~D~%" (-> this current-stage))
  (format #t "~Tstage: ~A~%" (-> this stage))
  this
  )

;; definition of type ambient-control
(deftype ambient-control (structure)
  ((last-ambient-time  time-frame)
   (last-ambient       string)
   (last-ambient-id    sound-id)
   )
  :pack-me
  (:methods
    (ambient-control-method-9 (_type_) none)
    (ambient-control-method-10 (_type_ vector time-frame float process-drawable) vector)
    (play-ambient (_type_ string symbol vector) symbol)
    )
  )

;; definition for method 3 of type ambient-control
(defmethod inspect ((this ambient-control))
  (format #t "[~8x] ~A~%" this 'ambient-control)
  (format #t "~Tlast-ambient-time: ~D~%" (-> this last-ambient-time))
  (format #t "~Tlast-ambient: ~A~%" (-> this last-ambient))
  (format #t "~Tlast-ambient-id: ~D~%" (-> this last-ambient-id))
  this
  )

;; definition of type process-taskable
(deftype process-taskable (process-drawable)
  ((root                  collide-shape   :override)
   (tasks                 task-control)
   (query                 gui-query        :inline)
   (old-target-pos        transformq       :inline)
   (cell-for-task         game-task)
   (cell-x                handle)
   (cam-joint-index       int32)
   (skippable             symbol)
   (blend-on-exit         art-joint-anim)
   (camera                handle)
   (will-talk             symbol)
   (talk-message          text-id)
   (last-talk             time-frame)
   (bounce-away           symbol)
   (ambient               ambient-control  :inline)
   (center-joint-index    int32)
   (draw-bounds-y-offset  float)
   (neck-joint-index      int32)
   (fuel-cell-anim        spool-anim)
   (sound-flava           music-flava)
   (have-flava            symbol)
   (music                 symbol)
   (have-music            symbol)
   (been-kicked           symbol)
   (cur-trans-hook        (function none))
   (shadow-backup         shadow-geo)
   )
  (:state-methods
    release
    give-cell
    lose
    enter-playing
    play-accept
    play-reject
    query
    play-anim
    hidden
    (be-clone handle)
    idle
    )
  (:methods
    (get-art-elem (_type_) art-element)
    (play-anim! (_type_ symbol) basic)
    (process-taskable-method-33 (_type_) none)
    (get-accept-anim (_type_ symbol) spool-anim)
    (push-accept-anim (_type_) none)
    (get-reject-anim (_type_ symbol) spool-anim)
    (push-reject-anim (_type_) none)
    (process-taskable-method-38 (_type_) none)
    (should-display? (_type_) symbol)
    (process-taskable-method-40 (_type_ object skeleton-group int int vector int) none)
    (initialize-collision (_type_ int vector) none)
    (process-taskable-method-42 (_type_) none)
    (process-taskable-method-43 (_type_) symbol)
    (play-reminder (_type_) symbol)
    (process-taskable-method-45 (_type_) symbol)
    (process-taskable-method-46 (_type_) none)
    (target-above-threshold? (_type_) symbol)
    (draw-npc-shadow (_type_) none)
    (hidden-other () _type_ :state)
    (process-taskable-method-50 (_type_) symbol)
    (close-anim-file! (_type_) symbol)
    (process-taskable-method-52 (_type_) none)
    )
  )

;; definition for method 3 of type process-taskable
(defmethod inspect ((this process-taskable))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Ttasks: ~A~%" (-> this tasks))
  (format #t "~T~Tquery: #<gui-query @ #x~X>~%" (-> this query))
  (format #t "~T~Told-target-pos: #<transformq @ #x~X>~%" (-> this old-target-pos))
  (format #t "~T~Tcell-for-task: ~D~%" (-> this cell-for-task))
  (format #t "~T~Tcell-x: ~D~%" (-> this cell-x))
  (format #t "~T~Tcam-joint-index: ~D~%" (-> this cam-joint-index))
  (format #t "~T~Tskippable: ~A~%" (-> this skippable))
  (format #t "~T~Tblend-on-exit: ~A~%" (-> this blend-on-exit))
  (format #t "~T~Tcamera: ~D~%" (-> this camera))
  (format #t "~T~Twill-talk: ~A~%" (-> this will-talk))
  (format #t "~T~Ttalk-message: ~D~%" (-> this talk-message))
  (format #t "~T~Tlast-talk: ~D~%" (-> this last-talk))
  (format #t "~T~Tbounce-away: ~A~%" (-> this bounce-away))
  (format #t "~T~Tambient: #<ambient-control @ #x~X>~%" (-> this ambient))
  (format #t "~T~Tcenter-joint-index: ~D~%" (-> this center-joint-index))
  (format #t "~T~Tdraw-bounds-y-offset: ~f~%" (-> this draw-bounds-y-offset))
  (format #t "~T~Tneck-joint-index: ~D~%" (-> this neck-joint-index))
  (format #t "~T~Tfuel-cell-anim: ~A~%" (-> this fuel-cell-anim))
  (format #t "~T~Tsound-flava: ~D~%" (-> this sound-flava))
  (format #t "~T~Thave-flava: ~A~%" (-> this have-flava))
  (format #t "~T~Tmusic: ~A~%" (-> this music))
  (format #t "~T~Thave-music: ~A~%" (-> this have-music))
  (format #t "~T~Tbeen-kicked: ~A~%" (-> this been-kicked))
  (format #t "~T~Tcur-trans-hook: ~A~%" (-> this cur-trans-hook))
  (format #t "~T~Tshadow-backup: ~A~%" (-> this shadow-backup))
  this
  )

;; failed to figure out what this is:
0
