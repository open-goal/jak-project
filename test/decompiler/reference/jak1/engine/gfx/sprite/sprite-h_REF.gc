;;-*-Lisp-*-
(in-package goal)

;; definition of type sprite-vec-data-2d
(deftype sprite-vec-data-2d (structure)
  ((x-y-z-sx     vector    :inline)
   (flag-rot-sy  vector    :inline)
   (r-g-b-a      vector    :inline)
   (x            float             :overlay-at (-> x-y-z-sx x))
   (y            float             :overlay-at (-> x-y-z-sx y))
   (z            float             :overlay-at (-> x-y-z-sx z))
   (sx           float             :overlay-at (-> x-y-z-sx w))
   (sy           float             :overlay-at (-> flag-rot-sy w))
   (rot          float             :overlay-at (-> flag-rot-sy z))
   (flag         int32             :overlay-at (-> flag-rot-sy x))
   (matrix       int32             :overlay-at (-> flag-rot-sy y))
   (warp-turns   int32             :overlay-at (-> flag-rot-sy x))
   (r            float             :overlay-at (-> r-g-b-a x))
   (g            float             :overlay-at (-> r-g-b-a y))
   (b            float             :overlay-at (-> r-g-b-a z))
   (a            float             :overlay-at (-> r-g-b-a w))
   (trans        vector3s  :inline :overlay-at (-> x-y-z-sx x))
   (color        rgbaf     :inline :overlay-at (-> r-g-b-a x))
   (data         uint128   1       :overlay-at (-> x-y-z-sx quad))
   (data64       uint64    6       :overlay-at (-> x-y-z-sx x))
   )
  )

;; definition for method 3 of type sprite-vec-data-2d
(defmethod inspect ((this sprite-vec-data-2d))
  (format #t "[~8x] ~A~%" this 'sprite-vec-data-2d)
  (format #t "~Tx-y-z-sx: #<vector @ #x~X>~%" (&-> this x))
  (format #t "~Tflag-rot-sy: #<vector @ #x~X>~%" (&-> this flag))
  (format #t "~Tr-g-b-a: #<vector @ #x~X>~%" (&-> this r))
  (format #t "~Tx: ~f~%" (-> this x))
  (format #t "~Ty: ~f~%" (-> this y))
  (format #t "~Tz: ~f~%" (-> this z))
  (format #t "~Tsx: ~f~%" (-> this sx))
  (format #t "~Tsy: ~f~%" (-> this sy))
  (format #t "~Trot: ~f~%" (-> this rot))
  (format #t "~Tflag: ~D~%" (-> this flag))
  (format #t "~Tmatrix: ~D~%" (-> this matrix))
  (format #t "~Twarp-turns: ~D~%" (-> this flag))
  (format #t "~Tr: ~f~%" (-> this r))
  (format #t "~Tg: ~f~%" (-> this g))
  (format #t "~Tb: ~f~%" (-> this b))
  (format #t "~Ta: ~f~%" (-> this a))
  (format #t "~Ttrans: #<vector3s @ #x~X>~%" (&-> this x))
  (format #t "~Tcolor: #<rgbaf @ #x~X>~%" (&-> this r))
  (format #t "~Tdata[1] @ #x~X~%" (&-> this x))
  (format #t "~Tdata64[6] @ #x~X~%" (&-> this x))
  this
  )

;; definition of type sprite-array-2d
(deftype sprite-array-2d (basic)
  ((num-sprites  int32    2)
   (num-valid    int32    2)
   (vec-data     pointer)
   (adgif-data   (inline-array adgif-shader))
   (pad          uint128  4)
   (data         uint128  1)
   )
  (:methods
    (new (symbol type int int) _type_)
    )
  )

;; definition for method 3 of type sprite-array-2d
(defmethod inspect ((this sprite-array-2d))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tnum-sprites[2] @ #x~X~%" (-> this num-sprites))
  (format #t "~Tnum-valid[2] @ #x~X~%" (-> this num-valid))
  (format #t "~Tvec-data: #x~X~%" (-> this vec-data))
  (format #t "~Tadgif-data: #x~X~%" (-> this adgif-data))
  (format #t "~Tpad[4] @ #x~X~%" (-> this pad))
  (format #t "~Tdata[1] @ #x~X~%" (-> this data))
  this
  )

;; definition of type sprite-vec-data-3d
(deftype sprite-vec-data-3d (structure)
  ((x-y-z-sx     vector    :inline)
   (qx-qy-qz-sy  vector    :inline)
   (r-g-b-a      vector    :inline)
   (x            float             :overlay-at (-> x-y-z-sx x))
   (y            float             :overlay-at (-> x-y-z-sx y))
   (z            float             :overlay-at (-> x-y-z-sx z))
   (sx           float             :overlay-at (-> x-y-z-sx w))
   (sy           float             :overlay-at (-> qx-qy-qz-sy w))
   (qx           float             :overlay-at (-> qx-qy-qz-sy x))
   (qy           float             :overlay-at (-> qx-qy-qz-sy y))
   (qz           float             :overlay-at (-> qx-qy-qz-sy z))
   (r            float             :overlay-at (-> r-g-b-a x))
   (g            float             :overlay-at (-> r-g-b-a y))
   (b            float             :overlay-at (-> r-g-b-a z))
   (a            float             :overlay-at (-> r-g-b-a w))
   (trans        vector3s  :inline :overlay-at (-> x-y-z-sx x))
   (rot          vector3s  :inline :overlay-at (-> qx-qy-qz-sy x))
   (color        rgbaf     :inline :overlay-at (-> r-g-b-a x))
   (data         uint128   1       :overlay-at (-> x-y-z-sx quad))
   )
  )

;; definition for method 3 of type sprite-vec-data-3d
(defmethod inspect ((this sprite-vec-data-3d))
  (format #t "[~8x] ~A~%" this 'sprite-vec-data-3d)
  (format #t "~Tx-y-z-sx: #<vector @ #x~X>~%" (-> this x-y-z-sx))
  (format #t "~Tqx-qy-qz-sy: #<vector @ #x~X>~%" (-> this qx-qy-qz-sy))
  (format #t "~Tr-g-b-a: #<vector @ #x~X>~%" (-> this r-g-b-a))
  (format #t "~Tx: ~f~%" (-> this x-y-z-sx x))
  (format #t "~Ty: ~f~%" (-> this x-y-z-sx y))
  (format #t "~Tz: ~f~%" (-> this x-y-z-sx z))
  (format #t "~Tsx: ~f~%" (-> this x-y-z-sx w))
  (format #t "~Tsy: ~f~%" (-> this qx-qy-qz-sy w))
  (format #t "~Tqx: ~f~%" (-> this qx-qy-qz-sy x))
  (format #t "~Tqy: ~f~%" (-> this qx-qy-qz-sy y))
  (format #t "~Tqz: ~f~%" (-> this qx-qy-qz-sy z))
  (format #t "~Tr: ~f~%" (-> this r-g-b-a x))
  (format #t "~Tg: ~f~%" (-> this r-g-b-a y))
  (format #t "~Tb: ~f~%" (-> this r-g-b-a z))
  (format #t "~Ta: ~f~%" (-> this r-g-b-a w))
  (format #t "~Ttrans: #<vector3s @ #x~X>~%" (-> this x-y-z-sx))
  (format #t "~Trot: #<vector3s @ #x~X>~%" (-> this qx-qy-qz-sy))
  (format #t "~Tcolor: #<rgbaf @ #x~X>~%" (-> this r-g-b-a))
  (format #t "~Tdata[1] @ #x~X~%" (-> this x-y-z-sx))
  this
  )

;; definition of type sprite-array-3d
(deftype sprite-array-3d (basic)
  ((num-sprites  int32    2)
   (num-valid    int32    2)
   (vec-data     pointer)
   (adgif-data   (inline-array adgif-shader))
   (data         uint128  1)
   )
  (:methods
    (new (symbol type int int) _type_)
    )
  )

;; definition for method 3 of type sprite-array-3d
(defmethod inspect ((this sprite-array-3d))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tnum-sprites[2] @ #x~X~%" (-> this num-sprites))
  (format #t "~Tnum-valid[2] @ #x~X~%" (-> this num-valid))
  (format #t "~Tvec-data: #x~X~%" (-> this vec-data))
  (format #t "~Tadgif-data: #x~X~%" (-> this adgif-data))
  (format #t "~Tdata[1] @ #x~X~%" (-> this data))
  this
  )

;; failed to figure out what this is:
0
