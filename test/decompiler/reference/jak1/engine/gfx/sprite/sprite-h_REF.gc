;;-*-Lisp-*-
(in-package goal)

;; definition of type sprite-vec-data-2d
(deftype sprite-vec-data-2d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert   0)
   (flag-rot-sy vector   :inline :offset-assert  16)
   (r-g-b-a     vector   :inline :offset-assert  32)
   (x           float            :offset          0)
   (y           float            :offset          4)
   (z           float            :offset          8)
   (sx          float            :offset         12)
   (sy          float            :offset         28)
   (rot         float            :offset         24)
   (flag        int32            :offset         16)
   (matrix      int32            :offset         20)
   (warp-turns  int32            :offset         16)
   (r           float            :offset         32)
   (g           float            :offset         36)
   (b           float            :offset         40)
   (a           float            :offset         44)
   (trans       vector3s :inline :offset          0)
   (color       rgbaf    :inline :offset         32)
   (data        uint128  1       :offset          0)
   (data64      uint64   6       :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type sprite-vec-data-2d
(defmethod inspect sprite-vec-data-2d ((this sprite-vec-data-2d))
  (format #t "[~8x] ~A~%" this 'sprite-vec-data-2d)
  (format #t "~Tx-y-z-sx: #<vector @ #x~X>~%" (&-> this x))
  (format #t "~Tflag-rot-sy: #<vector @ #x~X>~%" (&-> this flag))
  (format #t "~Tr-g-b-a: #<vector @ #x~X>~%" (&-> this r))
  (format #t "~Tx: ~f~%" (-> this x))
  (format #t "~Ty: ~f~%" (-> this y))
  (format #t "~Tz: ~f~%" (-> this z))
  (format #t "~Tsx: ~f~%" (-> this sx))
  (format #t "~Tsy: ~f~%" (-> this sy))
  (format #t "~Trot: ~f~%" (-> this rot))
  (format #t "~Tflag: ~D~%" (-> this flag))
  (format #t "~Tmatrix: ~D~%" (-> this matrix))
  (format #t "~Twarp-turns: ~D~%" (-> this flag))
  (format #t "~Tr: ~f~%" (-> this r))
  (format #t "~Tg: ~f~%" (-> this g))
  (format #t "~Tb: ~f~%" (-> this b))
  (format #t "~Ta: ~f~%" (-> this a))
  (format #t "~Ttrans: #<vector3s @ #x~X>~%" (&-> this x))
  (format #t "~Tcolor: #<rgbaf @ #x~X>~%" (&-> this r))
  (format #t "~Tdata[1] @ #x~X~%" (&-> this x))
  (format #t "~Tdata64[6] @ #x~X~%" (&-> this x))
  this
  )

;; definition of type sprite-array-2d
(deftype sprite-array-2d (basic)
  ((num-sprites int32                       2 :offset-assert   4)
   (num-valid   int32                       2 :offset-assert  12)
   (vec-data    pointer                       :offset-assert  20)
   (adgif-data  (inline-array adgif-shader)   :offset-assert  24)
   (pad         uint128                     4 :offset-assert  32)
   (data        uint128                     1 :offset-assert  96)
   )
  :method-count-assert 9
  :size-assert         #x70
  :flag-assert         #x900000070
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  )

;; definition for method 3 of type sprite-array-2d
(defmethod inspect sprite-array-2d ((this sprite-array-2d))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tnum-sprites[2] @ #x~X~%" (-> this num-sprites))
  (format #t "~Tnum-valid[2] @ #x~X~%" (-> this num-valid))
  (format #t "~Tvec-data: #x~X~%" (-> this vec-data))
  (format #t "~Tadgif-data: #x~X~%" (-> this adgif-data))
  (format #t "~Tpad[4] @ #x~X~%" (-> this pad))
  (format #t "~Tdata[1] @ #x~X~%" (-> this data))
  this
  )

;; definition of type sprite-vec-data-3d
(deftype sprite-vec-data-3d (structure)
  ((x-y-z-sx    vector   :inline :offset-assert   0)
   (qx-qy-qz-sy vector   :inline :offset-assert  16)
   (r-g-b-a     vector   :inline :offset-assert  32)
   (x           float            :offset          0)
   (y           float            :offset          4)
   (z           float            :offset          8)
   (sx          float            :offset         12)
   (sy          float            :offset         28)
   (qx          float            :offset         16)
   (qy          float            :offset         20)
   (qz          float            :offset         24)
   (r           float            :offset         32)
   (g           float            :offset         36)
   (b           float            :offset         40)
   (a           float            :offset         44)
   (trans       vector3s :inline :offset          0)
   (rot         vector3s :inline :offset         16)
   (color       rgbaf    :inline :offset         32)
   (data        uint128  1       :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  )

;; definition for method 3 of type sprite-vec-data-3d
(defmethod inspect sprite-vec-data-3d ((this sprite-vec-data-3d))
  (format #t "[~8x] ~A~%" this 'sprite-vec-data-3d)
  (format #t "~Tx-y-z-sx: #<vector @ #x~X>~%" (-> this x-y-z-sx))
  (format #t "~Tqx-qy-qz-sy: #<vector @ #x~X>~%" (-> this qx-qy-qz-sy))
  (format #t "~Tr-g-b-a: #<vector @ #x~X>~%" (-> this r-g-b-a))
  (format #t "~Tx: ~f~%" (-> this x-y-z-sx x))
  (format #t "~Ty: ~f~%" (-> this x-y-z-sx y))
  (format #t "~Tz: ~f~%" (-> this x-y-z-sx z))
  (format #t "~Tsx: ~f~%" (-> this x-y-z-sx w))
  (format #t "~Tsy: ~f~%" (-> this qx-qy-qz-sy w))
  (format #t "~Tqx: ~f~%" (-> this qx-qy-qz-sy x))
  (format #t "~Tqy: ~f~%" (-> this qx-qy-qz-sy y))
  (format #t "~Tqz: ~f~%" (-> this qx-qy-qz-sy z))
  (format #t "~Tr: ~f~%" (-> this r-g-b-a x))
  (format #t "~Tg: ~f~%" (-> this r-g-b-a y))
  (format #t "~Tb: ~f~%" (-> this r-g-b-a z))
  (format #t "~Ta: ~f~%" (-> this r-g-b-a w))
  (format #t "~Ttrans: #<vector3s @ #x~X>~%" (-> this x-y-z-sx))
  (format #t "~Trot: #<vector3s @ #x~X>~%" (-> this qx-qy-qz-sy))
  (format #t "~Tcolor: #<rgbaf @ #x~X>~%" (-> this r-g-b-a))
  (format #t "~Tdata[1] @ #x~X~%" (-> this x-y-z-sx))
  this
  )

;; definition of type sprite-array-3d
(deftype sprite-array-3d (basic)
  ((num-sprites int32                       2 :offset-assert   4)
   (num-valid   int32                       2 :offset-assert  12)
   (vec-data    pointer                       :offset-assert  20)
   (adgif-data  (inline-array adgif-shader)   :offset-assert  24)
   (data        uint128                     1 :offset-assert  32)
   )
  :method-count-assert 9
  :size-assert         #x30
  :flag-assert         #x900000030
  (:methods
    (new (symbol type int int) _type_ 0)
    )
  )

;; definition for method 3 of type sprite-array-3d
(defmethod inspect sprite-array-3d ((this sprite-array-3d))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tnum-sprites[2] @ #x~X~%" (-> this num-sprites))
  (format #t "~Tnum-valid[2] @ #x~X~%" (-> this num-valid))
  (format #t "~Tvec-data: #x~X~%" (-> this vec-data))
  (format #t "~Tadgif-data: #x~X~%" (-> this adgif-data))
  (format #t "~Tdata[1] @ #x~X~%" (-> this data))
  this
  )

;; failed to figure out what this is:
0
