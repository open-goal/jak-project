;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *sp-frame-time*, type vector
(define *sp-frame-time* (new 'global 'vector))

;; failed to figure out what this is:
(set-vector! *sp-frame-time* 0.00000000000000000000000000000000000001175495 5.0 1.0 1.0)

;; definition for symbol *sp-60-hz*, type symbol
(define *sp-60-hz* #t)

;; definition of type sparticle-cpuinfo
(deftype sparticle-cpuinfo (structure)
  ((sprite         sprite-vec-data-2d)
   (adgif          adgif-shader)
   (radius         float)
   (omega          float)
   (vel-sxvel      vector              :inline)
   (rot-syvel      vector              :inline)
   (fade           rgbaf               :inline)
   (acc            vector              :inline)
   (rotvel3d       quaternion          :inline)
   (vel            vector3s            :inline :overlay-at (-> vel-sxvel x))
   (accel          vector3s            :inline :overlay-at (-> acc x))
   (scalevelx      float                       :overlay-at (-> vel-sxvel w))
   (scalevely      float                       :overlay-at (-> rot-syvel w))
   (friction       float)
   (timer          int32)
   (flags          sp-cpuinfo-flag)
   (user-int32     int32)
   (user-uint32    uint32                      :overlay-at user-int32)
   (user-float     float                       :overlay-at user-int32)
   (user-pntr      uint32                      :overlay-at user-int32)
   (user-sprite    sprite-vec-data-2d          :overlay-at user-int32)
   (func           basic)
   (next-time      uint32)
   (next-launcher  basic)
   (cache-alpha    float)
   (valid          symbol)
   (key            sparticle-launch-control)
   (binding        sparticle-launch-state)
   (data           uint32              1       :overlay-at omega)
   (dataf          float               1       :overlay-at omega)
   (datac          uint8               1       :overlay-at omega)
   )
  )

;; definition for method 3 of type sparticle-cpuinfo
(defmethod inspect ((this sparticle-cpuinfo))
  (format #t "[~8x] ~A~%" this 'sparticle-cpuinfo)
  (format #t "~Tsprite: #<sprite-vec-data-2d @ #x~X>~%" (-> this sprite))
  (format #t "~Tadgif: #<adgif-shader @ #x~X>~%" (-> this adgif))
  (format #t "~Tradius: ~f~%" (-> this radius))
  (format #t "~Tomega: ~f~%" (-> this omega))
  (format #t "~Tvel-sxvel: #<vector @ #x~X>~%" (-> this vel-sxvel))
  (format #t "~Trot-syvel: #<vector @ #x~X>~%" (-> this rot-syvel))
  (format #t "~Tfade: #<rgbaf @ #x~X>~%" (-> this fade))
  (format #t "~Tacc: #<vector @ #x~X>~%" (-> this acc))
  (format #t "~Trotvel3d: #<quaternion @ #x~X>~%" (-> this rotvel3d))
  (format #t "~Tvel: #<vector3s @ #x~X>~%" (-> this vel-sxvel))
  (format #t "~Taccel: #<vector3s @ #x~X>~%" (-> this acc))
  (format #t "~Tscalevelx: ~f~%" (-> this vel-sxvel w))
  (format #t "~Tscalevely: ~f~%" (-> this rot-syvel w))
  (format #t "~Tfriction: ~f~%" (-> this friction))
  (format #t "~Ttimer: ~D~%" (-> this timer))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tuser-int32: ~D~%" (-> this user-float))
  (format #t "~Tuser-uint32: ~D~%" (-> this user-float))
  (format #t "~Tuser-float: ~f~%" (the-as float (-> this user-float)))
  (format #t "~Tuser-pntr: #x~X~%" (-> this user-float))
  (format #t "~Tuser-sprite: #<sprite-vec-data-2d @ #x~X>~%" (-> this user-float))
  (format #t "~Tfunc: ~A~%" (-> this func))
  (format #t "~Tnext-time: ~D~%" (-> this next-time))
  (format #t "~Tnext-launcher: ~A~%" (-> this next-launcher))
  (format #t "~Tcache-alpha: ~f~%" (-> this cache-alpha))
  (format #t "~Tvalid: ~A~%" (-> this valid))
  (format #t "~Tkey: ~A~%" (-> this key))
  (format #t "~Tbinding: #<sparticle-launch-state @ #x~X>~%" (-> this binding))
  (format #t "~Tdata[1] @ #x~X~%" (&-> this omega))
  (format #t "~Tdataf[1] @ #x~X~%" (&-> this omega))
  (format #t "~Tdatac[1] @ #x~X~%" (&-> this omega))
  this
  )

;; definition of type sparticle-launchinfo
(deftype sparticle-launchinfo (structure)
  ((launchrot   vector  :inline)
   (conerot     vector  :inline)
   (coneradius  float)
   (rotate-y    float)
   (data        uint8   1 :overlay-at (-> launchrot x))
   )
  )

;; definition for method 3 of type sparticle-launchinfo
(defmethod inspect ((this sparticle-launchinfo))
  (format #t "[~8x] ~A~%" this 'sparticle-launchinfo)
  (format #t "~Tlaunchrot: #<vector @ #x~X>~%" (-> this launchrot))
  (format #t "~Tconerot: #<vector @ #x~X>~%" (-> this conerot))
  (format #t "~Tconeradius: ~f~%" (-> this coneradius))
  (format #t "~Trotate-y: ~f~%" (-> this rotate-y))
  (format #t "~Tdata[1] @ #x~X~%" (-> this launchrot))
  this
  )

;; definition of type sparticle-system
(deftype sparticle-system (basic)
  ((blocks           int32  2)
   (length           int32  2)
   (num-alloc        int32  2)
   (is-3d            basic)
   (flags            uint32)
   (alloc-table      (pointer uint64))
   (cpuinfo-table    (inline-array sparticle-cpuinfo))
   (vecdata-table    pointer)
   (adgifdata-table  (inline-array adgif-shader))
   )
  (:methods
    (new (symbol type int int symbol pointer (inline-array adgif-shader)) _type_)
    )
  )

;; definition for method 3 of type sparticle-system
(defmethod inspect ((this sparticle-system))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tblocks[2] @ #x~X~%" (-> this blocks))
  (format #t "~Tlength[2] @ #x~X~%" (-> this length))
  (format #t "~Tnum-alloc[2] @ #x~X~%" (-> this num-alloc))
  (format #t "~Tis-3d: ~A~%" (-> this is-3d))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Talloc-table: #x~X~%" (-> this alloc-table))
  (format #t "~Tcpuinfo-table: #x~X~%" (-> this cpuinfo-table))
  (format #t "~Tvecdata-table: #x~X~%" (-> this vecdata-table))
  (format #t "~Tadgifdata-table: #x~X~%" (-> this adgifdata-table))
  this
  )

;; failed to figure out what this is:
0
