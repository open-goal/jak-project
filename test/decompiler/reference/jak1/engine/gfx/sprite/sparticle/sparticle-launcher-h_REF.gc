;;-*-Lisp-*-
(in-package goal)

;; definition of type sp-field-init-spec
(deftype sp-field-init-spec (structure)
  ((field          sp-field-id  :offset-assert   0)
   (flags          sp-flag      :offset-assert   2)
   (initial-valuef float        :offset-assert   4)
   (random-rangef  float        :offset-assert   8)
   (random-multf   float        :offset-assert  12)
   (initial-value  int32        :offset          4)
   (random-range   int32        :offset          8)
   (random-mult    int32        :offset         12)
   (func           symbol       :offset          4)
   (tex            texture-id   :offset          4)
   (pntr           pointer      :offset          4)
   (sym            symbol       :offset          4)
   (sound          sound-spec   :offset          4)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type sp-field-init-spec
(defmethod inspect sp-field-init-spec ((this sp-field-init-spec))
  (format #t "[~8x] ~A~%" this 'sp-field-init-spec)
  (format #t "~Tfield: ~D~%" (-> this field))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tinitial-valuef: ~f~%" (-> this initial-valuef))
  (format #t "~Trandom-rangef: ~f~%" (-> this random-rangef))
  (format #t "~Trandom-multf: ~f~%" (-> this random-multf))
  (format #t "~Tinitial-value: ~D~%" (-> this initial-valuef))
  (format #t "~Trandom-range: ~D~%" (-> this random-rangef))
  (format #t "~Trandom-mult: ~D~%" (-> this random-multf))
  (format #t "~Tfunc: ~A~%" (-> this initial-valuef))
  (format #t "~Ttex: ~D~%" (-> this initial-valuef))
  (format #t "~Tpntr: #x~X~%" (-> this initial-valuef))
  (format #t "~Tsym: ~A~%" (-> this initial-valuef))
  (format #t "~Tsound: ~A~%" (-> this initial-valuef))
  this
  )

;; definition of type sparticle-launcher
(deftype sparticle-launcher (basic)
  ((birthaccum float                              :offset-assert   4)
   (soundaccum float                              :offset-assert   8)
   (init-specs (inline-array sp-field-init-spec)  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type sparticle-launcher
(defmethod inspect sparticle-launcher ((this sparticle-launcher))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tbirthaccum: ~f~%" (-> this birthaccum))
  (format #t "~Tsoundaccum: ~f~%" (-> this soundaccum))
  (format #t "~Tinit-specs: #x~X~%" (-> this init-specs))
  this
  )

;; definition of type sparticle-group-item
(deftype sparticle-group-item (structure)
  ((launcher   uint32              :offset-assert   0)
   (fade-after meters              :offset-assert   4)
   (falloff-to meters              :offset-assert   8)
   (flags      sp-group-item-flag  :offset-assert  12)
   (period     uint16              :offset-assert  14)
   (length     uint16              :offset-assert  16)
   (offset     uint16              :offset-assert  18)
   (hour-mask  uint32              :offset-assert  20)
   (binding    uint32              :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type sparticle-group-item
(defmethod inspect sparticle-group-item ((this sparticle-group-item))
  (format #t "[~8x] ~A~%" this 'sparticle-group-item)
  (format #t "~Tlauncher: ~D~%" (-> this launcher))
  (format #t "~Tfade-after: (meters ~m)~%" (-> this fade-after))
  (format #t "~Tfalloff-to: (meters ~m)~%" (-> this falloff-to))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tperiod: ~D~%" (-> this period))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Toffset: ~D~%" (-> this offset))
  (format #t "~Thour-mask: ~D~%" (-> this hour-mask))
  (format #t "~Tbinding: ~D~%" (-> this binding))
  this
  )

;; definition of type sparticle-launch-state
(deftype sparticle-launch-state (structure)
  ((group-item sparticle-group-item   :offset-assert   0)
   (flags      sp-launch-state-flags  :offset-assert   4)
   (randomize  uint16                 :offset-assert   6)
   (origin     vector                 :offset-assert   8)
   (sprite3d   sprite-vec-data-3d     :offset-assert  12)
   (sprite     sparticle-cpuinfo      :offset-assert  16)
   (offset     uint32                 :offset-assert  20)
   (accum      float                  :offset-assert  24)
   (spawn-time uint32                 :offset-assert  28)
   (swarm      basic                  :offset         20)
   (seed       uint32                 :offset         24)
   (time       uint32                 :offset         28)
   (spec       basic                  :offset         16)
   (id         uint32                 :offset         12)
   )
  :method-count-assert 9
  :size-assert         #x20
  :flag-assert         #x900000020
  )

;; definition for method 3 of type sparticle-launch-state
(defmethod inspect sparticle-launch-state ((this sparticle-launch-state))
  (format #t "[~8x] ~A~%" this 'sparticle-launch-state)
  (format #t "~Tgroup-item: #<sparticle-group-item @ #x~X>~%" (-> this group-item))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Trandomize: ~D~%" (-> this randomize))
  (format #t "~Torigin: #<vector @ #x~X>~%" (-> this origin))
  (format #t "~Tsprite3d: #<sprite-vec-data-3d @ #x~X>~%" (-> this sprite3d))
  (format #t "~Tsprite: ~A~%" (-> this sprite))
  (format #t "~Toffset: ~D~%" (-> this offset))
  (format #t "~Taccum: ~f~%" (-> this accum))
  (format #t "~Tspawn-time: ~D~%" (-> this spawn-time))
  (format #t "~Tswarm: ~A~%" (-> this offset))
  (format #t "~Tseed: ~D~%" (-> this accum))
  (format #t "~Ttime: ~D~%" (-> this spawn-time))
  (format #t "~Tspec: ~A~%" (-> this sprite))
  (format #t "~Tid: ~D~%" (-> this sprite3d))
  this
  )

;; definition of type sparticle-launch-group
(deftype sparticle-launch-group (basic)
  ((length          int16                                       :offset-assert   4)
   (duration        uint16                                      :offset-assert   6)
   (linger-duration uint16                                      :offset-assert   8)
   (flags           sp-group-flag                               :offset-assert  10)
   (name            string                                      :offset-assert  12)
   (launcher        (inline-array sparticle-group-item)         :offset-assert  16)
   (bounds          sphere                              :inline :offset-assert  32)
   )
  :method-count-assert 10
  :size-assert         #x30
  :flag-assert         #xa00000030
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control 9)
    )
  )

;; definition for method 3 of type sparticle-launch-group
(defmethod inspect sparticle-launch-group ((this sparticle-launch-group))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tduration: ~D~%" (-> this duration))
  (format #t "~Tlinger-duration: ~D~%" (-> this linger-duration))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tlauncher: #x~X~%" (-> this launcher))
  (format #t "~Tbounds: #<sphere @ #x~X>~%" (-> this bounds))
  this
  )

;; definition of type sparticle-launch-control
(deftype sparticle-launch-control (inline-array-class)
  ((group            sparticle-launch-group                  :offset-assert  16)
   (proc             process                                 :offset-assert  20)
   (local-clock      int32                                   :offset-assert  24)
   (fade             float                                   :offset-assert  28)
   (matrix           int32                                   :offset-assert  32)
   (last-spawn-frame int32                                   :offset-assert  36)
   (last-spawn-time  int32                                   :offset-assert  40)
   (center           vector                 :inline          :offset-assert  48)
   (data             sparticle-launch-state :inline :dynamic :offset-assert  64)
   )
  :method-count-assert 14
  :size-assert         #x40
  :flag-assert         #xe00000040
  (:methods
    (initialize (_type_ sparticle-launch-group process) none 9)
    (is-visible? (_type_ vector) symbol 10)
    (spawn (_type_ vector) object 11)
    (kill-and-free-particles (_type_) none 12)
    (kill-particles (_type_) none 13)
    )
  )

;; definition for method 3 of type sparticle-launch-control
(defmethod inspect sparticle-launch-control ((this sparticle-launch-control))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tgroup: ~A~%" (-> this group))
  (format #t "~Tproc: ~A~%" (-> this proc))
  (format #t "~Tlocal-clock: ~D~%" (-> this local-clock))
  (format #t "~Tfade: ~f~%" (-> this fade))
  (format #t "~Tmatrix: ~D~%" (-> this matrix))
  (format #t "~Tlast-spawn-frame: ~D~%" (-> this last-spawn-frame))
  (format #t "~Tlast-spawn-time: ~D~%" (-> this last-spawn-time))
  (format #t "~Tcenter: ~`vector`P~%" (-> this center))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; failed to figure out what this is:
(set! (-> sparticle-launch-control heap-base) (the-as uint 32))

;; failed to figure out what this is:
0
