;;-*-Lisp-*-
(in-package goal)

;; definition of type tfragment-stats
(deftype tfragment-stats (structure)
  ((num-tris    uint16  4)
   (num-dverts  uint16  4)
   )
  )

;; definition for method 3 of type tfragment-stats
(defmethod inspect ((this tfragment-stats))
  (format #t "[~8x] ~A~%" this 'tfragment-stats)
  (format #t "~Tnum-tris[4] @ #x~X~%" (-> this num-tris))
  (format #t "~Tnum-dverts[4] @ #x~X~%" (-> this num-dverts))
  this
  )

;; definition of type tfragment-debug-data
(deftype tfragment-debug-data (structure)
  ((stats        tfragment-stats  :inline)
   (debug-lines  (array vector-array))
   )
  )

;; definition for method 3 of type tfragment-debug-data
(defmethod inspect ((this tfragment-debug-data))
  (format #t "[~8x] ~A~%" this 'tfragment-debug-data)
  (format #t "~Tstats: #<tfragment-stats @ #x~X>~%" (-> this stats))
  (format #t "~Tdebug-lines: ~A~%" (-> this debug-lines))
  this
  )

;; definition of type generic-tfragment
(deftype generic-tfragment (structure)
  ((dummy  int32)
   )
  )

;; definition for method 3 of type generic-tfragment
(defmethod inspect ((this generic-tfragment))
  (format #t "[~8x] ~A~%" this 'generic-tfragment)
  (format #t "~Tdummy: ~D~%" (-> this dummy))
  this
  )

;; definition of type tfragment
(deftype tfragment (drawable)
  ((color-index        uint16                         :offset   6)
   (debug-data         tfragment-debug-data           :offset   8)
   (color-indices      uint32                         :offset  12)
   (colors             uint32                         :overlay-at color-indices)
   (dma-chain          uint32                       3)
   (dma-common         uint32                         :overlay-at (-> dma-chain 0))
   (dma-level-0        uint32                         :overlay-at (-> dma-chain 0))
   (dma-base           uint32                         :overlay-at (-> dma-chain 1))
   (dma-level-1        uint32                         :overlay-at (-> dma-chain 2))
   (dma-qwc            uint8                        4 :offset  44)
   (shader             (inline-array adgif-shader)    :offset  48)
   (num-shaders        uint8                          :offset  52)
   (num-base-colors    uint8                          :offset  53)
   (num-level0-colors  uint8                          :offset  54)
   (num-level1-colors  uint8                          :offset  55)
   (color-offset       uint8                          :offset  56)
   (color-count        uint8                          :offset  57)
   (pad0               uint8                          :offset  58)
   (pad1               uint8                          :offset  59)
   (generic            generic-tfragment)
   (generic-u32        uint32                         :overlay-at generic)
   )
  )

;; definition for method 3 of type tfragment
(defmethod inspect ((this tfragment))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~Tdebug-data: #<tfragment-debug-data @ #x~X>~%" (-> this debug-data))
  (format #t "~Tcolor-indices: #x~X~%" (-> this color-indices))
  (format #t "~Tcolors: #x~X~%" (-> this color-indices))
  (format #t "~Tdma-chain[3] @ #x~X~%" (-> this dma-chain))
  (format #t "~Tdma-common: #x~X~%" (-> this dma-common))
  (format #t "~Tdma-level-0: #x~X~%" (-> this dma-common))
  (format #t "~Tdma-base: #x~X~%" (-> this dma-base))
  (format #t "~Tdma-level-1: #x~X~%" (-> this dma-level-1))
  (format #t "~Tdma-qwc[4] @ #x~X~%" (-> this dma-qwc))
  (format #t "~Tshader: #x~X~%" (-> this shader))
  (format #t "~Tnum-shaders: ~D~%" (-> this num-shaders))
  (format #t "~Tnum-base-colors: ~D~%" (-> this num-base-colors))
  (format #t "~Tnum-level0-colors: ~D~%" (-> this num-level0-colors))
  (format #t "~Tnum-level1-colors: ~D~%" (-> this num-level1-colors))
  (format #t "~Tcolor-offset: ~D~%" (-> this color-offset))
  (format #t "~Tcolor-count: ~D~%" (-> this color-count))
  (format #t "~Tpad0: ~D~%" (-> this pad0))
  (format #t "~Tpad1: ~D~%" (-> this pad1))
  (format #t "~Tgeneric: #<generic-tfragment @ #x~X>~%" (-> this generic))
  this
  )

;; definition of type drawable-inline-array-tfrag
(deftype drawable-inline-array-tfrag (drawable-inline-array)
  ((data  tfragment  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type drawable-inline-array-trans-tfrag
(deftype drawable-inline-array-trans-tfrag (drawable-inline-array-tfrag)
  ((data2  tfragment  1 :inline)
   (pad2   uint32)
   )
  )

;; definition of type drawable-tree-tfrag
(deftype drawable-tree-tfrag (drawable-tree)
  ((time-of-day-pal  time-of-day-palette      :offset  12)
   (arrays           drawable-inline-array  1 :overlay-at (-> data 0))
   )
  )

;; definition of type drawable-tree-trans-tfrag
(deftype drawable-tree-trans-tfrag (drawable-tree-tfrag)
  ()
  )

;; definition of type drawable-tree-dirt-tfrag
(deftype drawable-tree-dirt-tfrag (drawable-tree-tfrag)
  ()
  )

;; definition of type drawable-tree-ice-tfrag
(deftype drawable-tree-ice-tfrag (drawable-tree-tfrag)
  ()
  )

;; definition of type drawable-tree-lowres-tfrag
(deftype drawable-tree-lowres-tfrag (drawable-tree-tfrag)
  ()
  )

;; definition of type drawable-tree-lowres-trans-tfrag
(deftype drawable-tree-lowres-trans-tfrag (drawable-tree-trans-tfrag)
  ()
  )

;; definition of type tfrag-dists
(deftype tfrag-dists (structure)
  ((data    uint32  16)
   (vector  vector  4 :inline :overlay-at (-> data 0))
   (k0s     vector  2 :inline :overlay-at (-> data 0))
   (k1s     vector  2 :inline :overlay-at (-> data 8))
   )
  )

;; definition for method 3 of type tfrag-dists
(defmethod inspect ((this tfrag-dists))
  (format #t "[~8x] ~A~%" this 'tfrag-dists)
  (format #t "~Tdata[16] @ #x~X~%" (-> this k0s))
  (format #t "~Tvector[4] @ #x~X~%" (-> this k0s))
  (format #t "~Tk0s[2] @ #x~X~%" (-> this k0s))
  (format #t "~Tk1s[2] @ #x~X~%" (-> this k1s))
  this
  )

;; definition of type tfrag-data
(deftype tfrag-data (structure)
  ((data         uint32       56         :offset   0)
   (vector       vector       14 :inline :overlay-at (-> data 0))
   (fog          vector       :inline    :overlay-at (-> vector 0))
   (val          vector       :inline    :overlay-at (-> vector 1))
   (strgif       gs-gif-tag   :inline    :overlay-at (-> data 8))
   (fangif       gs-gif-tag   :inline    :overlay-at (-> data 12))
   (adgif        gs-gif-tag   :inline    :overlay-at (-> data 16))
   (hvdf-offset  vector       :inline    :overlay-at (-> vector 5))
   (hmge-scale   vector       :inline    :overlay-at (-> vector 6))
   (invh-scale   vector       :inline    :overlay-at (-> vector 7))
   (ambient      vector       :inline    :overlay-at (-> vector 8))
   (guard        vector       :inline    :overlay-at (-> vector 9))
   (dists        tfrag-dists  :inline    :overlay-at (-> data 40))
   (k0s          uint128      2          :overlay-at (-> data 40))
   (k1s          uint128      2          :overlay-at (-> data 48))
   )
  )

;; definition for method 3 of type tfrag-data
(defmethod inspect ((this tfrag-data))
  (format #t "[~8x] ~A~%" this 'tfrag-data)
  (format #t "~Tdata[56] @ #x~X~%" (-> this fog))
  (format #t "~Tvector[14] @ #x~X~%" (-> this fog))
  (format #t "~Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~Tval: #<vector @ #x~X>~%" (-> this val))
  (format #t "~Tstrgif: #<qword @ #x~X>~%" (-> this strgif))
  (format #t "~Tfangif: #<qword @ #x~X>~%" (-> this fangif))
  (format #t "~Tadgif: #<qword @ #x~X>~%" (-> this adgif))
  (format #t "~Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~Thmge-scale: #<vector @ #x~X>~%" (-> this hmge-scale))
  (format #t "~Tinvh-scale: #<vector @ #x~X>~%" (-> this invh-scale))
  (format #t "~Tambient: #<vector @ #x~X>~%" (-> this ambient))
  (format #t "~Tguard: #<vector @ #x~X>~%" (-> this guard))
  (format #t "~Tdists: #<tfrag-dists @ #x~X>~%" (-> this dists))
  (format #t "~Tk0s[2] @ #x~X~%" (-> this dists))
  (format #t "~Tk1s[2] @ #x~X~%" (-> this dists k1s))
  this
  )

;; definition of type tfrag-control
(deftype tfrag-control (structure)
  ((num-base-points            uint32)
   (num-shared-base-points     uint32)
   (num-level0-points          uint32)
   (num-shared-level0-points   uint32)
   (num-level1-points          uint32)
   (num-shared-level1-points   uint32)
   (ptr-vtxdata                uint32)
   (ptr-base-points            uint32)
   (ptr-shared-base-points     uint32)
   (ptr-level0-points          uint32)
   (ptr-shared-level0-points   uint32)
   (ptr-level1-points          uint32)
   (ptr-shared-level1-points   uint32)
   (ptr-draw-points            uint32)
   (ptr-interpolated-0         uint32)
   (ptr-shared-interpolated-0  uint32)
   (ptr-interpolated1          uint32)
   (ptr-shared-interpolated1   uint32)
   (ptr-strip-data             uint32)
   (ptr-texture-data           uint32)
   )
  )

;; definition for method 3 of type tfrag-control
(defmethod inspect ((this tfrag-control))
  (format #t "[~8x] ~A~%" this 'tfrag-control)
  (format #t "~Tnum-base-points: ~D~%" (-> this num-base-points))
  (format #t "~Tnum-shared-base-points: ~D~%" (-> this num-shared-base-points))
  (format #t "~Tnum-level0-points: ~D~%" (-> this num-level0-points))
  (format #t "~Tnum-shared-level0-points: ~D~%" (-> this num-shared-level0-points))
  (format #t "~Tnum-level1-points: ~D~%" (-> this num-level1-points))
  (format #t "~Tnum-shared-level1-points: ~D~%" (-> this num-shared-level1-points))
  (format #t "~Tptr-vtxdata: ~D~%" (-> this ptr-vtxdata))
  (format #t "~Tptr-base-points: ~D~%" (-> this ptr-base-points))
  (format #t "~Tptr-shared-base-points: ~D~%" (-> this ptr-shared-base-points))
  (format #t "~Tptr-level0-points: ~D~%" (-> this ptr-level0-points))
  (format #t "~Tptr-shared-level0-points: ~D~%" (-> this ptr-shared-level0-points))
  (format #t "~Tptr-level1-points: ~D~%" (-> this ptr-level1-points))
  (format #t "~Tptr-shared-level1-points: ~D~%" (-> this ptr-shared-level1-points))
  (format #t "~Tptr-draw-points: ~D~%" (-> this ptr-draw-points))
  (format #t "~Tptr-interpolated-0: ~D~%" (-> this ptr-interpolated-0))
  (format #t "~Tptr-shared-interpolated-0: ~D~%" (-> this ptr-shared-interpolated-0))
  (format #t "~Tptr-interpolated1: ~D~%" (-> this ptr-interpolated1))
  (format #t "~Tptr-shared-interpolated1: ~D~%" (-> this ptr-shared-interpolated1))
  (format #t "~Tptr-strip-data: ~D~%" (-> this ptr-strip-data))
  (format #t "~Tptr-texture-data: ~D~%" (-> this ptr-texture-data))
  this
  )

;; definition of type tfrag-stats
(deftype tfrag-stats (structure)
  ((from          int32)
   (to            int32)
   (cnt           int32)
   (tris          int32)
   (tfaces        int32)
   (tfrags        int32)
   (dtris         int32)
   (base-verts    int32)
   (level0-verts  int32)
   (level1-verts  int32)
   (dma-cnt       int32)
   (dma-dta       int32)
   (dma-tex       int32)
   (strips        int32)
   (drawpoints    int32)
   (vif           int32)
   )
  )

;; definition for method 3 of type tfrag-stats
(defmethod inspect ((this tfrag-stats))
  (format #t "[~8x] ~A~%" this 'tfrag-stats)
  (format #t "~Tfrom: ~D~%" (-> this from))
  (format #t "~Tto: ~D~%" (-> this to))
  (format #t "~Tcnt: ~D~%" (-> this cnt))
  (format #t "~Ttris: ~D~%" (-> this tris))
  (format #t "~Ttfaces: ~D~%" (-> this tfaces))
  (format #t "~Ttfrags: ~D~%" (-> this tfrags))
  (format #t "~Tdtris: ~D~%" (-> this dtris))
  (format #t "~Tbase-verts: ~D~%" (-> this base-verts))
  (format #t "~Tlevel0-verts: ~D~%" (-> this level0-verts))
  (format #t "~Tlevel1-verts: ~D~%" (-> this level1-verts))
  (format #t "~Tdma-cnt: ~D~%" (-> this dma-cnt))
  (format #t "~Tdma-dta: ~D~%" (-> this dma-dta))
  (format #t "~Tdma-tex: ~D~%" (-> this dma-tex))
  (format #t "~Tstrips: ~D~%" (-> this strips))
  (format #t "~Tdrawpoints: ~D~%" (-> this drawpoints))
  (format #t "~Tvif: ~D~%" (-> this vif))
  this
  )

;; definition of type tfrag-packet
(deftype tfrag-packet (structure)
  ((tag  uint128  2)
   )
  )

;; definition for method 3 of type tfrag-packet
(defmethod inspect ((this tfrag-packet))
  (format #t "[~8x] ~A~%" this 'tfrag-packet)
  (format #t "~Ttag[2] @ #x~X~%" (-> this tag))
  this
  )

;; definition of type tfrag-work
(deftype tfrag-work (structure)
  ((base-tmpl              dma-packet  :inline)
   (level-0-tmpl           dma-packet  :inline)
   (common-tmpl            dma-packet  :inline)
   (level-1-tmpl           dma-packet  :inline)
   (color-tmpl             dma-packet  :inline)
   (frag-dists             vector      :inline)
   (max-dist               vector      :inline)
   (min-dist               vector      :inline)
   (color-ptr              vector4w    :inline)
   (tr-stat-tfrag          tr-stat)
   (tr-stat-tfrag-near     tr-stat)
   (vu1-enable-tfrag       int32)
   (vu1-enable-tfrag-near  int32)
   (cur-vis-bits           uint32)
   (end-vis-bits           uint32)
   (src-ptr                uint32)
   (last-call              uint32)
   (dma-buffer             basic)
   (test-id                uint32)
   (wait-from-spr          uint32)
   (wait-to-spr            uint32)
   (near-wait-from-spr     uint32)
   (near-wait-to-spr       uint32)
   )
  )

;; definition for method 3 of type tfrag-work
(defmethod inspect ((this tfrag-work))
  (format #t "[~8x] ~A~%" this 'tfrag-work)
  (format #t "~Tbase-tmpl: #<dma-packet @ #x~X>~%" (-> this base-tmpl))
  (format #t "~Tlevel-0-tmpl: #<dma-packet @ #x~X>~%" (-> this level-0-tmpl))
  (format #t "~Tcommon-tmpl: #<dma-packet @ #x~X>~%" (-> this common-tmpl))
  (format #t "~Tlevel-1-tmpl: #<dma-packet @ #x~X>~%" (-> this level-1-tmpl))
  (format #t "~Tcolor-tmpl: #<dma-packet @ #x~X>~%" (-> this color-tmpl))
  (format #t "~Tfrag-dists: #<vector @ #x~X>~%" (-> this frag-dists))
  (format #t "~Tmax-dist: #<vector @ #x~X>~%" (-> this max-dist))
  (format #t "~Tmin-dist: #<vector @ #x~X>~%" (-> this min-dist))
  (format #t "~Tcolor-ptr: #<vector4w @ #x~X>~%" (-> this color-ptr))
  (format #t "~Ttr-stat-tfrag: #<tr-stat @ #x~X>~%" (-> this tr-stat-tfrag))
  (format #t "~Ttr-stat-tfrag-near: #<tr-stat @ #x~X>~%" (-> this tr-stat-tfrag-near))
  (format #t "~Tvu1-enable-tfrag: ~D~%" (-> this vu1-enable-tfrag))
  (format #t "~Tvu1-enable-tfrag-near: ~D~%" (-> this vu1-enable-tfrag-near))
  (format #t "~Tcur-vis-bits: ~D~%" (-> this cur-vis-bits))
  (format #t "~Tend-vis-bits: ~D~%" (-> this end-vis-bits))
  (format #t "~Tsrc-ptr: ~D~%" (-> this src-ptr))
  (format #t "~Tlast-call: ~D~%" (-> this last-call))
  (format #t "~Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~Ttest-id: ~D~%" (-> this test-id))
  (format #t "~Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~Tnear-wait-from-spr: ~D~%" (-> this near-wait-from-spr))
  (format #t "~Tnear-wait-to-spr: ~D~%" (-> this near-wait-to-spr))
  this
  )

;; definition of type tfrag-dma
(deftype tfrag-dma (structure)
  ((banka   tfragment  16 :inline)
   (bankb   tfragment  16 :inline)
   (outa    uint128    128)
   (outb    uint128    128)
   (colors  rgba       2047)
   )
  )

;; definition for method 3 of type tfrag-dma
(defmethod inspect ((this tfrag-dma))
  (format #t "[~8x] ~A~%" this 'tfrag-dma)
  (format #t "~Tbanka[16] @ #x~X~%" (-> this banka))
  (format #t "~Tbankb[16] @ #x~X~%" (-> this bankb))
  (format #t "~Touta[128] @ #x~X~%" (-> this outa))
  (format #t "~Toutb[128] @ #x~X~%" (-> this outb))
  (format #t "~Tcolors[2048] @ #x~X~%" (-> this colors))
  this
  )

;; failed to figure out what this is:
0
