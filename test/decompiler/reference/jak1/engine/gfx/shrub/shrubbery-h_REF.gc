;;-*-Lisp-*-
(in-package goal)

;; definition of type billboard
(deftype billboard (drawable)
  ((flat  adgif-shader  :inline)
   )
  )

;; definition for method 3 of type billboard
(defmethod inspect ((this billboard))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tflat: #<adgif-shader @ #x~X>~%" (-> this flat))
  this
  )

;; definition of type shrub-view-data
(deftype shrub-view-data (structure)
  ((data            uint128     3)
   (texture-giftag  gs-gif-tag  :inline :overlay-at (-> data 0))
   (consts          vector      :inline :overlay-at (-> data 1))
   (fog-clamp       vector      :inline :overlay-at (-> data 2))
   (tex-start-ptr   int32               :overlay-at (-> data 1))
   (gifbufsum       float               :overlay-at (-> data 1))
   (mtx-buf-ptr     int32               :overlay-at (-> consts y))
   (exp23           float               :overlay-at mtx-buf-ptr)
   (fog-0           float               :overlay-at (-> consts z))
   (fog-1           float               :overlay-at (-> consts w))
   (fog-min         float               :overlay-at (-> data 2))
   (fog-max         float               :overlay-at (-> fog-clamp y))
   )
  )

;; definition for method 3 of type shrub-view-data
(defmethod inspect ((this shrub-view-data))
  (format #t "[~8x] ~A~%" this 'shrub-view-data)
  (format #t "~Tdata[3] @ #x~X~%" (-> this data))
  (format #t "~Ttexture-giftag: #<qword @ #x~X>~%" (-> this data))
  (format #t "~Tconsts: #<vector @ #x~X>~%" (&-> this tex-start-ptr))
  (format #t "~Tfog-clamp: #<vector @ #x~X>~%" (&-> this fog-min))
  (format #t "~Ttex-start-ptr: ~D~%" (-> this tex-start-ptr))
  (format #t "~Tgifbufsum: ~f~%" (-> this gifbufsum))
  (format #t "~Tmtx-buf-ptr: ~D~%" (-> this mtx-buf-ptr))
  (format #t "~Texp23: ~f~%" (-> this exp23))
  (format #t "~Tfog-0: ~f~%" (-> this fog-0))
  (format #t "~Tfog-1: ~f~%" (-> this fog-1))
  (format #t "~Tfog-min: ~f~%" (-> this fog-min))
  (format #t "~Tfog-max: ~f~%" (-> this fog-max))
  this
  )

;; definition of type shrubbery
(deftype shrubbery (drawable)
  ((textures  (inline-array adgif-shader)  :overlay-at id)
   (header    qword                        :offset   8)
   (obj-qwc   uint8                        :offset  12)
   (vtx-qwc   uint8                        :offset  13)
   (col-qwc   uint8                        :offset  14)
   (stq-qwc   uint8                        :offset  15)
   (obj       uint32                       :overlay-at (-> bsphere x))
   (vtx       uint32                       :overlay-at (-> bsphere y))
   (col       uint32                       :overlay-at (-> bsphere z))
   (stq       uint32                       :overlay-at (-> bsphere w))
   )
  )

;; definition for method 3 of type shrubbery
(defmethod inspect ((this shrubbery))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (&-> this obj))
  (format #t "~Ttextures: #x~X~%" (-> this textures))
  (format #t "~Theader: #<qword @ #x~X>~%" (-> this header))
  (format #t "~Tobj-qwc: ~D~%" (-> this obj-qwc))
  (format #t "~Tvtx-qwc: ~D~%" (-> this vtx-qwc))
  (format #t "~Tcol-qwc: ~D~%" (-> this col-qwc))
  (format #t "~Tstq-qwc: ~D~%" (-> this stq-qwc))
  (format #t "~Tobj: #x~X~%" (-> this obj))
  (format #t "~Tvtx: #x~X~%" (-> this vtx))
  (format #t "~Tcol: #x~X~%" (-> this col))
  (format #t "~Tstq: #x~X~%" (-> this stq))
  this
  )

;; definition of type instance-shrubbery
(deftype instance-shrubbery (instance)
  ((color-indices  uint32  :overlay-at error)
   (flat-normal    vector  :inline)
   (flat-hwidth    float   :overlay-at (-> flat-normal w))
   (color          uint32  :overlay-at color-indices)
   )
  )

;; definition for method 3 of type instance-shrubbery
(defmethod inspect ((this instance-shrubbery))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tbucket-index: ~D~%" (-> this bucket-index))
  (format #t "~Torigin: #<matrix4h @ #x~X>~%" (-> this origin))
  (format #t "~Twind-index: ~D~%" (-> this wind-index))
  (format #t "~Tflat-normal: #<vector @ #x~X>~%" (-> this flat-normal))
  (format #t "~Tflat-hwidth: ~f~%" (-> this flat-normal w))
  (format #t "~Tcolor: ~D~%" (-> this error))
  this
  )

;; definition of type drawable-inline-array-instance-shrub
(deftype drawable-inline-array-instance-shrub (drawable-inline-array)
  ((data  instance-shrubbery  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type drawable-tree-instance-shrub
(deftype drawable-tree-instance-shrub (drawable-tree)
  ((info          prototype-array-shrub-info  :offset   8)
   (colors-added  time-of-day-palette         :offset  12)
   )
  )

;; definition of type generic-shrub-fragment
(deftype generic-shrub-fragment (drawable)
  ((textures  (inline-array adgif-shader)  :overlay-at id)
   (vtx-cnt   uint32                       :offset   8)
   (cnt-qwc   uint8                        :offset  12)
   (vtx-qwc   uint8                        :offset  13)
   (col-qwc   uint8                        :offset  14)
   (stq-qwc   uint8                        :offset  15)
   (cnt       uint32                       :overlay-at (-> bsphere x))
   (vtx       uint32                       :overlay-at (-> bsphere y))
   (col       uint32                       :overlay-at (-> bsphere z))
   (stq       uint32                       :overlay-at (-> bsphere w))
   )
  )

;; definition for method 3 of type generic-shrub-fragment
(defmethod inspect ((this generic-shrub-fragment))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (&-> this cnt))
  (format #t "~Ttextures: #x~X~%" (-> this textures))
  (format #t "~Tvtx-cnt: ~D~%" (-> this vtx-cnt))
  (format #t "~Tcnt-qwc: ~D~%" (-> this cnt-qwc))
  (format #t "~Tvtx-qwc: ~D~%" (-> this vtx-qwc))
  (format #t "~Tcol-qwc: ~D~%" (-> this col-qwc))
  (format #t "~Tstq-qwc: ~D~%" (-> this stq-qwc))
  (format #t "~Tcnt: #x~X~%" (-> this cnt))
  (format #t "~Tvtx: #x~X~%" (-> this vtx))
  (format #t "~Tcol: #x~X~%" (-> this col))
  (format #t "~Tstq: #x~X~%" (-> this stq))
  this
  )

;; definition of type prototype-shrubbery
(deftype prototype-shrubbery (drawable-inline-array)
  ((data  shrubbery  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type prototype-trans-shrubbery
(deftype prototype-trans-shrubbery (prototype-shrubbery)
  ()
  )

;; definition of type prototype-generic-shrub
(deftype prototype-generic-shrub (drawable-group)
  ()
  )

;; definition of type shrubbery-matrix
(deftype shrubbery-matrix (structure)
  ((mat    matrix  :inline)
   (color  qword   :inline)
   )
  )

;; definition for method 3 of type shrubbery-matrix
(defmethod inspect ((this shrubbery-matrix))
  (format #t "[~8x] ~A~%" this 'shrubbery-matrix)
  (format #t "~Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (format #t "~Tcolor: #<qword @ #x~X>~%" (-> this color))
  this
  )

;; definition for function shrubbery-login-post-texture
;; INFO: Used lq/sq
;; INFO: Return type mismatch symbol vs none.
(defun shrubbery-login-post-texture ((this shrubbery))
  (let* ((shader-count (-> this header data 0))
         (dst (the-as qword (+ (the-as uint (-> this header)) (* (+ (-> this header data 1) 1) 16))))
         (tex-dst (the-as qword (+ (the-as int dst) (* shader-count 64))))
         (src (the-as qword (-> this textures)))
         )
    (dotimes (a0-1 (the-as int shader-count))
      (set! (-> tex-dst quad) (-> src quad))
      (let ((text-dst2 (the-as qword (+ (the-as int tex-dst) 16)))
            (src-2 (the-as qword (&+ (the-as pointer src) 16)))
            )
        (set! (-> dst vector4w x) (the-as int (-> src-2 data 0)))
        (set! (-> dst vector4w y) (the-as int (-> src-2 data 1)))
        (set! (-> dst vector4w z) (the-as int (-> src-2 data 2)))
        (set! dst (the-as qword (+ (the-as int dst) 16)))
        (let ((src-3 (the-as qword (&+ (the-as pointer src-2) 16))))
          (dotimes (t0-4 3)
            (set! (-> dst quad) (-> src-3 quad))
            (set! dst (the-as qword (+ (the-as int dst) 16)))
            (set! src-3 (the-as qword (&+ (the-as pointer src-3) 16)))
            )
          (set! (-> text-dst2 quad) (-> src-3 quad))
          (set! tex-dst (the-as qword (+ (the-as int text-dst2) 16)))
          (set! src (the-as qword (&+ (the-as pointer src-3) 80)))
          )
        )
      )
    )
  (none)
  )

;; definition for symbol *shrub-state*, type int
(define *shrub-state* 0)

;; definition of type shrub-near-packet
(deftype shrub-near-packet (structure)
  ((matrix-tmpl  dma-packet  :inline)
   (header-tmpl  dma-packet  :inline)
   (stq-tmpl     dma-packet  :inline)
   (color-tmpl   dma-packet  :inline)
   (vertex-tmpl  dma-packet  :inline)
   (mscal-tmpl   dma-packet  :inline)
   (init-tmpl    dma-packet  :inline)
   (init-data    uint32      8)
   )
  )

;; definition for method 3 of type shrub-near-packet
(defmethod inspect ((this shrub-near-packet))
  (format #t "[~8x] ~A~%" this 'shrub-near-packet)
  (format #t "~Tmatrix-tmpl: #<dma-packet @ #x~X>~%" (-> this matrix-tmpl))
  (format #t "~Theader-tmpl: #<dma-packet @ #x~X>~%" (-> this header-tmpl))
  (format #t "~Tstq-tmpl: #<dma-packet @ #x~X>~%" (-> this stq-tmpl))
  (format #t "~Tcolor-tmpl: #<dma-packet @ #x~X>~%" (-> this color-tmpl))
  (format #t "~Tvertex-tmpl: #<dma-packet @ #x~X>~%" (-> this vertex-tmpl))
  (format #t "~Tmscal-tmpl: #<dma-packet @ #x~X>~%" (-> this mscal-tmpl))
  (format #t "~Tinit-tmpl: #<dma-packet @ #x~X>~%" (-> this init-tmpl))
  (format #t "~Tinit-data[8] @ #x~X~%" (-> this init-data))
  this
  )

;; definition of type instance-shrub-work
(deftype instance-shrub-work (structure)
  ((dummy                      qword              3 :inline)
   (chaina                     qword              8 :inline)
   (chainb                     qword              8 :inline)
   (colors                     rgba               1024)
   (matrix-tmpl                qword              20 :inline)
   (count-tmpl                 vector4w           20 :inline)
   (mscalf-tmpl                dma-packet         :inline)
   (mscalf-ret-tmpl            dma-packet         :inline)
   (adgif-tmpl                 dma-gif-packet     :inline)
   (billboard-tmpl             dma-gif-packet     :inline)
   (billboard-const            vector             :inline)
   (shrub-near-packets         shrub-near-packet  6 :inline)
   (dma-ref                    dma-packet         :inline)
   (dma-end                    dma-packet         :inline)
   (wind-const                 vector             :inline)
   (constants                  vector             :inline)
   (color-constant             vector4w           :inline)
   (hmge-d                     vector             :inline)
   (hvdf-offset                vector             :inline)
   (wind-force                 vector             :inline)
   (color                      vector             :inline)
   (bb-color                   vector             :inline)
   (min-dist                   vector             :inline)
   (temp-vec                   vector             :inline)
   (guard-plane                plane              4 :inline)
   (plane                      plane              4 :inline)
   (last                       uint32             4)
   (next                       uint32             4)
   (count                      uint16             4)
   (mod-count                  uint16             4)
   (wind-vectors               uint32)
   (instance-ptr               uint32)
   (chain-ptr                  uint32)
   (chain-ptr-next             uint32)
   (stack-ptr                  uint32)
   (bucket-ptr                 uint32)
   (src-ptr                    uint32)
   (to-spr                     uint32)
   (from-spr                   uint32)
   (shrub-count                uint32)
   (node                       uint32             6  :offset 6428)
   (length                     uint32             6)
   (prototypes                 uint32)
   (start-bank                 uint8              20 :offset 6484)
   (buffer-index               uint32)
   (current-spr                uint32)
   (current-mem                uint32)
   (current-shrub-near-packet  uint32)
   (dma-buffer                 basic                 :offset 6524)
   (near-last                  uint32)
   (near-next                  uint32)
   (near-count                 uint32)
   (last-shrubs                uint32)
   (chains                     uint32)
   (flags                      uint32)
   (paused                     basic)
   (node-count                 uint32)
   (inst-count                 uint32)
   (wait-from-spr              uint32)
   (wait-to-spr                uint32)
   )
  )

;; definition for method 3 of type instance-shrub-work
(defmethod inspect ((this instance-shrub-work))
  (format #t "[~8x] ~A~%" this 'instance-shrub-work)
  (format #t "~Tdummy[3] @ #x~X~%" (-> this dummy))
  (format #t "~Tchaina[8] @ #x~X~%" (-> this chaina))
  (format #t "~Tchainb[8] @ #x~X~%" (-> this chainb))
  (format #t "~Tcolors[1024] @ #x~X~%" (-> this colors))
  (format #t "~Tmatrix-tmpl[20] @ #x~X~%" (-> this matrix-tmpl))
  (format #t "~Tcount-tmpl[20] @ #x~X~%" (-> this count-tmpl))
  (format #t "~Tmscalf-tmpl: #<dma-packet @ #x~X>~%" (-> this mscalf-tmpl))
  (format #t "~Tmscalf-ret-tmpl: #<dma-packet @ #x~X>~%" (-> this mscalf-ret-tmpl))
  (format #t "~Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~Tbillboard-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this billboard-tmpl))
  (format #t "~Tbillboard-const: #<vector @ #x~X>~%" (-> this billboard-const))
  (format #t "~Tshrub-near-packets[6] @ #x~X~%" (-> this shrub-near-packets))
  (format #t "~Tdma-ref: #<dma-packet @ #x~X>~%" (-> this dma-ref))
  (format #t "~Tdma-end: #<dma-packet @ #x~X>~%" (-> this dma-end))
  (format #t "~Twind-const: #<vector @ #x~X>~%" (-> this wind-const))
  (format #t "~Tconstants: #<vector @ #x~X>~%" (-> this constants))
  (format #t "~Tcolor-constant: #<vector4w @ #x~X>~%" (-> this color-constant))
  (format #t "~Thmge-d: #<vector @ #x~X>~%" (-> this hmge-d))
  (format #t "~Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~Twind-force: #<vector @ #x~X>~%" (-> this wind-force))
  (format #t "~Tcolor: #<vector @ #x~X>~%" (-> this color))
  (format #t "~Tbb-color: #<vector @ #x~X>~%" (-> this bb-color))
  (format #t "~Tmin-dist: #<vector @ #x~X>~%" (-> this min-dist))
  (format #t "~Ttemp-vec: #<vector @ #x~X>~%" (-> this temp-vec))
  (format #t "~Tguard-plane[4] @ #x~X~%" (-> this guard-plane))
  (format #t "~Tplane[4] @ #x~X~%" (-> this plane))
  (format #t "~Tlast[4] @ #x~X~%" (-> this last))
  (format #t "~Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~Tcount[4] @ #x~X~%" (-> this count))
  (format #t "~Tmod-count[4] @ #x~X~%" (-> this mod-count))
  (format #t "~Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~Tinstance-ptr: ~D~%" (-> this instance-ptr))
  (format #t "~Tchain-ptr: ~D~%" (-> this chain-ptr))
  (format #t "~Tchain-ptr-next: ~D~%" (-> this chain-ptr-next))
  (format #t "~Tstack-ptr: ~D~%" (-> this stack-ptr))
  (format #t "~Tbucket-ptr: ~D~%" (-> this bucket-ptr))
  (format #t "~Tsrc-ptr: ~D~%" (-> this src-ptr))
  (format #t "~Tto-spr: ~D~%" (-> this to-spr))
  (format #t "~Tfrom-spr: ~D~%" (-> this from-spr))
  (format #t "~Tshrub-count: ~D~%" (-> this shrub-count))
  (format #t "~Tstack-ptr: ~D~%" (-> this stack-ptr))
  (format #t "~Tnode[6] @ #x~X~%" (-> this node))
  (format #t "~Tlength[6] @ #x~X~%" (-> this length))
  (format #t "~Tprototypes: ~D~%" (-> this prototypes))
  (format #t "~Tbucket-ptr: ~D~%" (-> this bucket-ptr))
  (format #t "~Tstart-bank[20] @ #x~X~%" (-> this start-bank))
  (format #t "~Tbuffer-index: ~D~%" (-> this buffer-index))
  (format #t "~Tcurrent-spr: ~D~%" (-> this current-spr))
  (format #t "~Tcurrent-mem: ~D~%" (-> this current-mem))
  (format #t "~Tcurrent-shrub-near-packet: ~D~%" (-> this current-shrub-near-packet))
  (format #t "~Tto-spr: ~D~%" (-> this to-spr))
  (format #t "~Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~Tnear-last: ~D~%" (-> this near-last))
  (format #t "~Tnear-next: ~D~%" (-> this near-next))
  (format #t "~Tnear-count: ~D~%" (-> this near-count))
  (format #t "~Tlast-shrubs: ~D~%" (-> this last-shrubs))
  (format #t "~Tchains: ~D~%" (-> this chains))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tpaused: ~A~%" (-> this paused))
  (format #t "~Tnode-count: ~D~%" (-> this node-count))
  (format #t "~Tinst-count: ~D~%" (-> this inst-count))
  (format #t "~Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~Twait-to-spr: ~D~%" (-> this wait-to-spr))
  this
  )

;; definition of type instance-shrub-dma
(deftype instance-shrub-dma (structure)
  ((instancea  uint128  325)
   (instanceb  uint128  325)
   (outa       uint128  128)
   (outb       uint128  128)
   )
  )

;; definition for method 3 of type instance-shrub-dma
(defmethod inspect ((this instance-shrub-dma))
  (format #t "[~8x] ~A~%" this 'instance-shrub-dma)
  (format #t "~Tinstancea[325] @ #x~X~%" (-> this instancea))
  (format #t "~Tinstanceb[325] @ #x~X~%" (-> this instanceb))
  (format #t "~Touta[128] @ #x~X~%" (-> this outa))
  (format #t "~Toutb[128] @ #x~X~%" (-> this outb))
  this
  )

;; failed to figure out what this is:
0
