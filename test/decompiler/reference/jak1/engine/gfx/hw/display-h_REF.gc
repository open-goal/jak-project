;;-*-Lisp-*-
(in-package goal)

;; definition of type display-env
(deftype display-env (structure)
  ((pmode    gs-pmode)
   (smode2   gs-smode2)
   (dspfb    gs-display-fb)
   (display  gs-display)
   (bgcolor  gs-bgcolor)
   )
  :pack-me
  )

;; definition for method 3 of type display-env
(defmethod inspect ((this display-env))
  (format #t "[~8x] ~A~%" this 'display-env)
  (format #t "~Tpmode: #x~X~%" (-> this pmode))
  (format #t "~Tsmode2: #x~X~%" (-> this smode2))
  (format #t "~Tdspfb: #x~X~%" (-> this dspfb))
  (format #t "~Tdisplay: #x~X~%" (-> this display))
  (format #t "~Tbgcolor: #x~X~%" (-> this bgcolor))
  this
  )

;; definition of type draw-env
(deftype draw-env (structure)
  ((frame1          gs-frame)
   (frame1addr      gs-reg64)
   (zbuf1           gs-zbuf)
   (zbuf1addr       gs-reg64)
   (xyoffset1       gs-xy-offset)
   (xyoffset1addr   gs-reg64)
   (scissor1        gs-scissor)
   (scissor1addr    gs-reg64)
   (prmodecont      gs-prmode-cont)
   (prmodecontaddr  gs-reg64)
   (colclamp        gs-color-clamp)
   (colclampaddr    gs-reg64)
   (dthe            gs-dthe)
   (dtheaddr        gs-reg64)
   (test1           gs-test)
   (test1addr       gs-reg64)
   )
  )

;; definition for method 3 of type draw-env
(defmethod inspect ((this draw-env))
  (format #t "[~8x] ~A~%" this 'draw-env)
  (format #t "~Tframe1: #x~X~%" (-> this frame1))
  (format #t "~Tframe1addr: #x~X~%" (-> this frame1addr))
  (format #t "~Tzbuf1: #x~X~%" (-> this zbuf1))
  (format #t "~Tzbuf1addr: #x~X~%" (-> this zbuf1addr))
  (format #t "~Txyoffset1: #x~X~%" (-> this xyoffset1))
  (format #t "~Txyoffset1addr: #x~X~%" (-> this xyoffset1addr))
  (format #t "~Tscissor1: #x~X~%" (-> this scissor1))
  (format #t "~Tscissor1addr: #x~X~%" (-> this scissor1addr))
  (format #t "~Tprmodecont: #x~X~%" (-> this prmodecont))
  (format #t "~Tprmodecontaddr: #x~X~%" (-> this prmodecontaddr))
  (format #t "~Tcolclamp: #x~X~%" (-> this colclamp))
  (format #t "~Tcolclampaddr: #x~X~%" (-> this colclampaddr))
  (format #t "~Tdthe: #x~X~%" (-> this dthe))
  (format #t "~Tdtheaddr: #x~X~%" (-> this dtheaddr))
  (format #t "~Ttest1: #x~X~%" (-> this test1))
  (format #t "~Ttest1addr: #x~X~%" (-> this test1addr))
  this
  )

;; definition for function put-draw-env
;; INFO: Used lq/sq
(defun put-draw-env ((arg0 (pointer gif-tag)))
  (dma-send (the-as dma-bank #x1000a000) (the-as uint arg0) (+ (-> arg0 0 nloop) 1))
  (none)
  )

;; definition of type display-frame
(deftype display-frame (basic)
  ((calc-buf      dma-buffer                    :offset   8)
   (vu1-buf       dma-buffer                    :overlay-at calc-buf)
   (debug-buf     dma-buffer                    :offset  36)
   (global-buf    dma-buffer                    :offset  40)
   (bucket-group  (inline-array dma-bucket)     :offset  44)
   (buffer        dma-buffer                 11 :offset   4)
   (profile-bar   profile-bar                2  :offset  48)
   (run-time      int64                         :offset  56)
   )
  (:methods
    (new (symbol type) _type_)
    )
  )

;; definition for method 3 of type display-frame
(defmethod inspect ((this display-frame))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tbuffer[11] @ #x~X~%" (-> this buffer))
  (format #t "~Tcalc-buf: ~A~%" (-> this calc-buf))
  (format #t "~Tvu1-buf: ~A~%" (-> this calc-buf))
  (format #t "~Tdebug-buf: ~A~%" (-> this debug-buf))
  (format #t "~Tglobal-buf: ~A~%" (-> this global-buf))
  (format #t "~Tbucket-group: #<dma-bucket @ #x~X>~%" (-> this bucket-group))
  (format #t "~Tprofile-bar[2] @ #x~X~%" (-> this profile-bar))
  (format #t "~Trun-time: ~D~%" (-> this run-time))
  this
  )

;; definition for method 0 of type display-frame
(defmethod new display-frame ((allocation symbol) (type-to-make type))
  (let ((this (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> this calc-buf) (the-as dma-buffer 0))
    (set! (-> this global-buf) (the-as dma-buffer 0))
    (set! (-> this debug-buf) (the-as dma-buffer 0))
    (when *debug-segment*
      (set! (-> this profile-bar 0) (new 'debug 'profile-bar))
      (set! (-> this profile-bar 1) (new 'debug 'profile-bar))
      )
    this
    )
  )

;; definition of type virtual-frame
(deftype virtual-frame (structure)
  ((display       display-env)
   (display-last  display-env)
   (gif           pointer)
   (draw          draw-env)
   (frame         display-frame)
   )
  :allow-misaligned
  )

;; definition for method 3 of type virtual-frame
(defmethod inspect ((this virtual-frame))
  (format #t "[~8x] ~A~%" this 'virtual-frame)
  (format #t "~Tdisplay: #<display-env @ #x~X>~%" (-> this display))
  (format #t "~Tdisplay-last: #<display-env @ #x~X>~%" (-> this display-last))
  (format #t "~Tgif: #x~X~%" (-> this gif))
  (format #t "~Tdraw: #<draw-env @ #x~X>~%" (-> this draw))
  (format #t "~Tframe: ~A~%" (-> this frame))
  this
  )

;; definition of type display
(deftype display (basic)
  ((display-env0                     display-env    :inline)
   (display-env1                     display-env    :inline)
   (display-env2                     display-env    :inline)
   (gif-tag0                         gs-gif-tag     :inline)
   (draw0                            draw-env       :inline)
   (gif-tag1                         gs-gif-tag     :inline)
   (draw1                            draw-env       :inline)
   (gif-tag2                         gs-gif-tag     :inline)
   (draw2                            draw-env       :inline)
   (on-screen                        int32)
   (last-screen                      int32)
   (frames                           virtual-frame  6 :inline)
   (bg-clear-color                   rgba           4)
   (real-frame-counter               time-frame)
   (base-frame-counter               time-frame)
   (game-frame-counter               time-frame)
   (integral-frame-counter           time-frame)
   (real-integral-frame-counter      time-frame)
   (actual-frame-counter             time-frame)
   (real-actual-frame-counter        time-frame)
   (part-frame-counter               time-frame)
   (old-real-frame-counter           time-frame)
   (old-base-frame-counter           time-frame)
   (old-game-frame-counter           time-frame)
   (old-integral-frame-counter       time-frame)
   (old-real-integral-frame-counter  time-frame)
   (old-actual-frame-counter         time-frame)
   (old-real-actual-frame-counter    time-frame)
   (old-part-frame-counter           time-frame)
   (time-ratio                       float)
   (seconds-per-frame                float)
   (frames-per-second                float)
   (time-factor                      float)
   (time-adjust-ratio                float)
   )
  (:methods
    (new (symbol type int int int int int) _type_)
    (set-time-ratios (_type_ float) float)
    )
  )

;; definition for method 3 of type display
;; INFO: Used lq/sq
(defmethod inspect ((this display))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tdisplay-env0: #<display-env @ #x~X>~%" (-> this display-env0))
  (format #t "~Tdisplay-env1: #<display-env @ #x~X>~%" (-> this display-env1))
  (format #t "~Tdisplay-env2: #<display-env @ #x~X>~%" (-> this display-env2))
  (format #t "~Tgif-tag0: #x~X~%" (-> this gif-tag0 qword))
  (format #t "~Tdraw0: #<draw-env @ #x~X>~%" (-> this draw0))
  (format #t "~Tgif-tag1: #x~X~%" (-> this gif-tag1 qword))
  (format #t "~Tdraw1: #<draw-env @ #x~X>~%" (-> this draw1))
  (format #t "~Tgif-tag2: #x~X~%" (-> this gif-tag2 qword))
  (format #t "~Tdraw2: #<draw-env @ #x~X>~%" (-> this draw2))
  (format #t "~Ton-screen: ~D~%" (-> this on-screen))
  (format #t "~Tlast-screen: ~D~%" (-> this last-screen))
  (format #t "~Tframes[6] @ #x~X~%" (-> this frames))
  (format #t "~Tbg-clear-color[4] @ #x~X~%" (-> this bg-clear-color))
  (format #t "~Treal-frame-counter: ~D~%" (-> this real-frame-counter))
  (format #t "~Tbase-frame-counter: ~D~%" (-> this base-frame-counter))
  (format #t "~Tgame-frame-counter: ~D~%" (-> this game-frame-counter))
  (format #t "~Tintegral-frame-counter: ~D~%" (-> this integral-frame-counter))
  (format #t "~Treal-integral-frame-counter: ~D~%" (-> this real-integral-frame-counter))
  (format #t "~Tactual-frame-counter: ~D~%" (-> this actual-frame-counter))
  (format #t "~Treal-actual-frame-counter: ~D~%" (-> this real-actual-frame-counter))
  (format #t "~Tpart-frame-counter: ~D~%" (-> this part-frame-counter))
  (format #t "~Told-real-frame-counter: ~D~%" (-> this old-real-frame-counter))
  (format #t "~Told-base-frame-counter: ~D~%" (-> this old-base-frame-counter))
  (format #t "~Told-game-frame-counter: ~D~%" (-> this old-game-frame-counter))
  (format #t "~Told-integral-frame-counter: ~D~%" (-> this old-integral-frame-counter))
  (format #t "~Told-real-integral-frame-counter: ~D~%" (-> this old-real-integral-frame-counter))
  (format #t "~Told-actual-frame-counter: ~D~%" (-> this old-actual-frame-counter))
  (format #t "~Told-real-actual-frame-counter: ~D~%" (-> this old-real-actual-frame-counter))
  (format #t "~Told-part-frame-counter: ~D~%" (-> this old-part-frame-counter))
  (format #t "~Ttime-ratio: ~f~%" (-> this time-ratio))
  (format #t "~Tseconds-per-frame: ~f~%" (-> this seconds-per-frame))
  (format #t "~Tframes-per-second: ~f~%" (-> this frames-per-second))
  (format #t "~Ttime-factor: ~f~%" (-> this time-factor))
  (format #t "~Ttime-adjust-ratio: ~f~%" (-> this time-adjust-ratio))
  this
  )

;; definition for method 0 of type display
(defmethod new display ((allocation symbol) (type-to-make type) (psm int) (w int) (h int) (ztest int) (zpsm int))
  (let ((this (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set-display this psm w h ztest zpsm)
    (set! (-> this frames 0 display) (-> this display-env0))
    (set! (-> this frames 1 display) (-> this display-env1))
    (set! (-> this frames 2 display) (-> this display-env2))
    (set! (-> this frames 3 display) (-> this display-env0))
    (set! (-> this frames 4 display) (-> this display-env1))
    (set! (-> this frames 5 display) (-> this display-env2))
    (set! (-> this frames 0 display-last) (-> this display-env2))
    (set! (-> this frames 1 display-last) (-> this display-env0))
    (set! (-> this frames 2 display-last) (-> this display-env1))
    (set! (-> this frames 3 display-last) (-> this display-env2))
    (set! (-> this frames 4 display-last) (-> this display-env0))
    (set! (-> this frames 5 display-last) (-> this display-env1))
    (set! (-> this frames 0 gif) (the-as pointer (-> this gif-tag0)))
    (set! (-> this frames 1 gif) (the-as pointer (-> this gif-tag1)))
    (set! (-> this frames 2 gif) (the-as pointer (-> this gif-tag2)))
    (set! (-> this frames 3 gif) (the-as pointer (-> this gif-tag0)))
    (set! (-> this frames 4 gif) (the-as pointer (-> this gif-tag1)))
    (set! (-> this frames 5 gif) (the-as pointer (-> this gif-tag2)))
    (set! (-> this frames 0 draw) (-> this draw0))
    (set! (-> this frames 1 draw) (-> this draw1))
    (set! (-> this frames 2 draw) (-> this draw2))
    (set! (-> this frames 3 draw) (-> this draw0))
    (set! (-> this frames 4 draw) (-> this draw1))
    (set! (-> this frames 5 draw) (-> this draw2))
    (set! (-> this frames 0 frame) (new 'global 'display-frame))
    (set! (-> this frames 1 frame) (new 'global 'display-frame))
    (set! (-> this frames 2 frame) (-> this frames 0 frame))
    (set! (-> this frames 3 frame) (-> this frames 1 frame))
    (set! (-> this frames 4 frame) (-> this frames 0 frame))
    (set! (-> this frames 5 frame) (-> this frames 1 frame))
    (default-buffer-init *default-regs-buffer*)
    (set! (-> this bg-clear-color 0) (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80))
    (set! (-> this bg-clear-color 1) (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80))
    (set! (-> this bg-clear-color 2) (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80))
    (set! (-> this bg-clear-color 3) (new 'static 'rgba :r #x80 :g #x80 :b #x80 :a #x80))
    this
    )
  )

;; definition for symbol *pre-draw-hook*, type (function object none)
(define *pre-draw-hook* (the-as (function object none) nothing))

;; definition for symbol *post-draw-hook*, type (function dma-buffer none)
(define *post-draw-hook* (the-as (function dma-buffer none) nothing))

;; failed to figure out what this is:
0
