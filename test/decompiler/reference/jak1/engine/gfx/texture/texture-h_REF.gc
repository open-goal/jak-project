;;-*-Lisp-*-
(in-package goal)

;; definition for symbol *texture-enable-user-menu*, type int
(define *texture-enable-user-menu* 31)

;; definition for symbol *texture-enable-user*, type int
(define *texture-enable-user* 0)

;; definition of type texture-id
(deftype texture-id (uint32)
  ((index uint16 :offset   8 :size  12)
   (page  uint16 :offset  20 :size  12)
   )
  )

;; definition for method 3 of type texture-id
(defmethod inspect ((this texture-id))
  (format #t "[~8x] ~A~%" this 'texture-id)
  (format #t "~Tindex: ~D~%" (-> this index))
  (format #t "~Tpage: ~D~%" (-> this page))
  this
  )

;; definition of type texture-pool-segment
(deftype texture-pool-segment (structure)
  ((dest  uint32)
   (size  uint32)
   )
  :pack-me
  )

;; definition for method 3 of type texture-pool-segment
(defmethod inspect ((this texture-pool-segment))
  (format #t "[~8x] ~A~%" this 'texture-pool-segment)
  (format #t "~Tdest: #x~X~%" (-> this dest))
  (format #t "~Tsize: #x~X~%" (-> this size))
  this
  )

;; definition of type texture-pool
(deftype texture-pool (basic)
  ((top               int32)
   (cur               int32)
   (allocate-func     (function texture-pool texture-page kheap int texture-page))
   (font-palette      int32)
   (segment           texture-pool-segment  4 :inline)
   (segment-near      texture-pool-segment  :inline :overlay-at (-> segment 0))
   (segment-common    texture-pool-segment  :inline :overlay-at (-> segment 1))
   (common-page       texture-page          32)
   (common-page-mask  int32)
   (ids               uint32                126)
   )
  (:methods
    (new (symbol type) _type_)
    (initialize! (_type_) _type_)
    (print-usage (_type_) _type_)
    (setup-font-texture! (_type_) none)
    (allocate-defaults! (_type_) none)
    (login-level-textures (_type_ level int (pointer texture-id)) none)
    (add-tex-to-dma! (_type_ level int) none)
    (allocate-vram-words! (_type_ int) int)
    (allocate-segment! (_type_ texture-pool-segment int) texture-pool-segment)
    (unused-17 () none)
    (unused-18 () none)
    (unused-19 () none)
    (unload! (_type_ texture-page) int)
    (upload-one-common! (_type_ level) symbol)
    (lookup-boot-common-id (_type_ int) int)
    )
  )

;; definition for method 3 of type texture-pool
(defmethod inspect ((this texture-pool))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Ttop: #x~X~%" (-> this top))
  (format #t "~Tcur: #x~X~%" (-> this cur))
  (format #t "~Tallocate-func: ~A~%" (-> this allocate-func))
  (format #t "~Tfont-palette: ~D~%" (-> this font-palette))
  (format #t "~Tsegment[4] @ #x~X~%" (-> this segment))
  (format #t "~Tsegment-near: #<texture-pool-segment @ #x~X>~%" (-> this segment))
  (format #t "~Tsegment-common: #<texture-pool-segment @ #x~X>~%" (-> this segment-common))
  (format #t "~Tcommon-page[32] @ #x~X~%" (-> this common-page))
  (format #t "~Tcommon-page-mask: ~D~%" (-> this common-page-mask))
  (format #t "~Tids[126] @ #x~X~%" (-> this ids))
  this
  )

;; definition of type texture
(deftype texture (basic)
  ((w             int16)
   (wu            uint16  :overlay-at w)
   (h             int16)
   (hu            uint16  :overlay-at h)
   (num-mips      uint8)
   (tex1-control  uint8)
   (psm           gs-psm)
   (mip-shift     uint8)
   (clutpsm       uint16)
   (dest          uint16  7)
   (clutdest      uint16)
   (width         uint8   7)
   (name          string)
   (size          uint32)
   (uv-dist       float)
   (masks         uint32  3)
   )
  )

;; definition for method 3 of type texture
(defmethod inspect ((this texture))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tw: ~D~%" (-> this w))
  (format #t "~Th: ~D~%" (-> this h))
  (format #t "~Tnum-mips: ~D~%" (-> this num-mips))
  (format #t "~Ttex1-control: ~D~%" (-> this tex1-control))
  (format #t "~Tpsm: ~D~%" (-> this psm))
  (format #t "~Tmip-shift: ~D~%" (-> this mip-shift))
  (format #t "~Tclutpsm: ~D~%" (-> this clutpsm))
  (format #t "~Tdest[7] @ #x~X~%" (-> this dest))
  (format #t "~Tclutdest: ~D~%" (-> this clutdest))
  (format #t "~Twidth[7] @ #x~X~%" (-> this width))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tsize: #x~X~%" (-> this size))
  (format #t "~Tuv-dist: ~f~%" (-> this uv-dist))
  (format #t "~Tmasks[3] @ #x~X~%" (-> this masks))
  this
  )

;; definition of type texture-page-segment
(deftype texture-page-segment (structure)
  ((block-data  pointer)
   (size        uint32)
   (dest        uint32)
   )
  :pack-me
  )

;; definition for method 3 of type texture-page-segment
(defmethod inspect ((this texture-page-segment))
  (format #t "[~8x] ~A~%" this 'texture-page-segment)
  (format #t "~Tblock-data: #x~X~%" (-> this block-data))
  (format #t "~Tsize: #x~X~%" (-> this size))
  (format #t "~Tdest: #x~X~%" (-> this dest))
  this
  )

;; definition for function texture-mip->segment
(defun texture-mip->segment ((arg0 int) (arg1 int))
  (if (>= 2 arg1)
      (+ (- -1 arg0) arg1)
      (max 0 (- 2 arg0))
      )
  )

;; definition of type texture-page
(deftype texture-page (basic)
  ((info       file-info)
   (name       basic)
   (id         uint32)
   (length     int32)
   (mip0-size  uint32)
   (size       uint32)
   (segment    texture-page-segment  3 :inline)
   (pad        uint32                16)
   (data       texture               :dynamic)
   )
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace)
    (remove-from-heap (_type_ kheap) _type_)
    (get-leftover-block-count (_type_ int int) int)
    (unused-11 () none)
    (relocate-dests! (_type_ int int) none)
    (add-to-dma-buffer (_type_ dma-buffer int) int)
    (upload-now! (_type_ int) none)
    )
  )

;; definition for method 3 of type texture-page
(defmethod inspect ((this texture-page))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tinfo: ~A~%" (-> this info))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tmip0-size: ~D~%" (-> this mip0-size))
  (format #t "~Tsize: #x~X~%" (-> this size))
  (format #t "~Tsegment[3] @ #x~X~%" (-> this segment))
  (format #t "~Tpad[16] @ #x~X~%" (-> this pad))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; definition of type shader-ptr
(deftype shader-ptr (uint32)
  ((shader uint32 :offset   8 :size  24)
   )
  )

;; definition of type texture-link
(deftype texture-link (structure)
  ((next  shader-ptr  1)
   )
  )

;; definition for method 3 of type texture-link
(defmethod inspect ((this texture-link))
  (format #t "[~8x] ~A~%" this 'texture-link)
  (format #t "~Tnext: #x~X~%" (-> this next 0))
  this
  )

;; definition of type texture-page-dir-entry
(deftype texture-page-dir-entry (structure)
  ((length  int16)
   (status  uint16)
   (page    texture-page)
   (link    texture-link)
   )
  :pack-me
  )

;; definition for method 3 of type texture-page-dir-entry
(defmethod inspect ((this texture-page-dir-entry))
  (format #t "[~8x] ~A~%" this 'texture-page-dir-entry)
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tstatus: ~D~%" (-> this status))
  (format #t "~Tpage: ~A~%" (-> this page))
  (format #t "~Tlink: #x~X~%" (-> this link))
  this
  )

;; definition of type texture-page-dir
(deftype texture-page-dir (basic)
  ((length   int32)
   (entries  texture-page-dir-entry  1 :inline)
   )
  (:methods
    (relocate (_type_ kheap (pointer uint8)) none :replace)
    (unlink-textures-in-heap! (_type_ kheap) int)
    )
  )

;; definition of type texture-relocate-later
(deftype texture-relocate-later (basic)
  ((memcpy  symbol)
   (dest    uint32)
   (source  uint32)
   (move    uint32)
   (entry   texture-page-dir-entry)
   (page    texture-page)
   )
  )

;; definition for method 3 of type texture-relocate-later
(defmethod inspect ((this texture-relocate-later))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tmemcpy: ~A~%" (-> this memcpy))
  (format #t "~Tdest: ~D~%" (-> this dest))
  (format #t "~Tsource: ~D~%" (-> this source))
  (format #t "~Tmove: ~D~%" (-> this move))
  (format #t "~Tentry: #<texture-page-dir-entry @ #x~X>~%" (-> this entry))
  (format #t "~Tpage: ~A~%" (-> this page))
  this
  )

;; definition for symbol *texture-relocate-later*, type texture-relocate-later
(define *texture-relocate-later* (new 'global 'texture-relocate-later))

;; failed to figure out what this is:
(set! (-> *texture-relocate-later* memcpy) #f)

;; definition for symbol *texture-page-dir*, type texture-page-dir
(define *texture-page-dir* (the-as texture-page-dir #f))

;; definition of type adgif-shader
(deftype adgif-shader (structure)
  ((quad             qword            5 :inline :offset   0)
   (prims            gs-reg64         10        :overlay-at quad)
   (tex0             gs-tex0                    :overlay-at (-> prims 0))
   (tex1             gs-tex1                    :overlay-at (-> prims 2))
   (miptbp1          gs-miptbp                  :overlay-at (-> prims 4))
   (clamp            gs-clamp                   :overlay-at (-> prims 6))
   (clamp-reg        gs-reg64                   :overlay-at (-> prims 7))
   (alpha            gs-alpha                   :overlay-at (-> prims 8))
   (alpha-as-miptb2  gs-miptbp                  :overlay-at alpha)
   (link-test        link-test-flags            :overlay-at (-> prims 1))
   (texture-id       texture-id                 :overlay-at (-> prims 3))
   (next             shader-ptr                 :overlay-at (-> prims 5))
   )
  )

;; definition for method 3 of type adgif-shader
(defmethod inspect ((this adgif-shader))
  (format #t "[~8x] ~A~%" this 'adgif-shader)
  (format #t "~Tquad[5] @ #x~X~%" (&-> this tex0))
  (format #t "~Tprims[10] @ #x~X~%" (&-> this tex0))
  (format #t "~Ttex0: #x~X~%" (-> this tex0))
  (format #t "~Ttex1: #x~X~%" (-> this tex1))
  (format #t "~Tmiptbp1: #x~X~%" (-> this miptbp1))
  (format #t "~Tclamp: #x~X~%" (-> this clamp))
  (format #t "~Tclamp-reg: ~D~%" (-> this clamp-reg))
  (format #t "~Talpha: #x~X~%" (-> this alpha))
  (format #t "~Tlink-test: ~D~%" (-> this link-test))
  (format #t "~Ttexture-id: ~D~%" (-> this texture-id))
  (format #t "~Tnext: #x~X~%" (-> this next))
  this
  )

;; definition of type adgif-shader-array
(deftype adgif-shader-array (inline-array-class)
  ((data  adgif-shader  :inline :dynamic :offset  16)
   )
  )

;; definition for method 3 of type adgif-shader-array
(defmethod inspect ((this adgif-shader-array))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; failed to figure out what this is:
(set! (-> adgif-shader-array heap-base) (the-as uint 80))

;; definition for symbol *sky-base-vram-word*, type int
(define *sky-base-vram-word* 0)

;; definition for symbol *sky-base-block*, type int
(define *sky-base-block* 0)

;; definition for symbol *sky-base-page*, type int
(define *sky-base-page* 0)

;; definition for symbol *depth-cue-base-vram-word*, type int
(define *depth-cue-base-vram-word* 0)

;; definition for symbol *depth-cue-base-block*, type int
(define *depth-cue-base-block* 0)

;; definition for symbol *depth-cue-base-page*, type int
(define *depth-cue-base-page* 0)

;; definition for symbol *eyes-base-vram-word*, type int
(define *eyes-base-vram-word* 0)

;; definition for symbol *eyes-base-block*, type int
(define *eyes-base-block* 0)

;; definition for symbol *eyes-base-page*, type int
(define *eyes-base-page* 0)

;; definition for symbol *ocean-base-vram-word*, type int
(define *ocean-base-vram-word* 0)

;; definition for symbol *ocean-base-block*, type int
(define *ocean-base-block* 0)

;; definition for symbol *ocean-base-page*, type int
(define *ocean-base-page* 0)

;; failed to figure out what this is:
0
