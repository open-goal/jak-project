;;-*-Lisp-*-
(in-package goal)

;; definition of type mood-fog
(deftype mood-fog (structure)
  ((fog-color    vector  :inline)
   (fog-dists    vector  :inline)
   (fog-start    meters  :overlay-at (-> fog-dists x))
   (fog-end      meters  :overlay-at (-> fog-dists y))
   (fog-max      float   :overlay-at (-> fog-dists z))
   (fog-min      float   :overlay-at (-> fog-dists w))
   (erase-color  vector  :inline)
   )
  )

;; definition for method 3 of type mood-fog
(defmethod inspect ((this mood-fog))
  (format #t "[~8x] ~A~%" this 'mood-fog)
  (format #t "~Tfog-color: #<vector @ #x~X>~%" (-> this fog-color))
  (format #t "~Tfog-dists: #<vector @ #x~X>~%" (-> this fog-dists))
  (format #t "~Tfog-start: (meters ~m)~%" (-> this fog-dists x))
  (format #t "~Tfog-end: (meters ~m)~%" (-> this fog-dists y))
  (format #t "~Tfog-max: ~f~%" (-> this fog-dists z))
  (format #t "~Tfog-min: ~f~%" (-> this fog-dists w))
  (format #t "~Terase-color: #<vector @ #x~X>~%" (-> this erase-color))
  this
  )

;; definition of type mood-fog-table
(deftype mood-fog-table (structure)
  ((data  mood-fog  8 :inline)
   )
  )

;; definition for method 3 of type mood-fog-table
(defmethod inspect ((this mood-fog-table))
  (format #t "[~8x] ~A~%" this 'mood-fog-table)
  (format #t "~Tdata[8] @ #x~X~%" (-> this data))
  this
  )

;; definition of type mood-lights
(deftype mood-lights (structure)
  ((direction  vector  :inline)
   (lgt-color  vector  :inline)
   (prt-color  vector  :inline)
   (amb-color  vector  :inline)
   (shadow     vector  :inline)
   )
  )

;; definition for method 3 of type mood-lights
(defmethod inspect ((this mood-lights))
  (format #t "[~8x] ~A~%" this 'mood-lights)
  (format #t "~Tdirection: #<vector @ #x~X>~%" (-> this direction))
  (format #t "~Tlgt-color: #<vector @ #x~X>~%" (-> this lgt-color))
  (format #t "~Tprt-color: #<vector @ #x~X>~%" (-> this prt-color))
  (format #t "~Tamb-color: #<vector @ #x~X>~%" (-> this amb-color))
  (format #t "~Tshadow: #<vector @ #x~X>~%" (-> this shadow))
  this
  )

;; definition of type mood-lights-table
(deftype mood-lights-table (structure)
  ((data  mood-lights  8 :inline)
   )
  )

;; definition for method 3 of type mood-lights-table
(defmethod inspect ((this mood-lights-table))
  (format #t "[~8x] ~A~%" this 'mood-lights-table)
  (format #t "~Tdata[8] @ #x~X~%" (-> this data))
  this
  )

;; definition of type mood-sun
(deftype mood-sun (structure)
  ((sun-color  vector  :inline)
   (env-color  vector  :inline)
   )
  )

;; definition for method 3 of type mood-sun
(defmethod inspect ((this mood-sun))
  (format #t "[~8x] ~A~%" this 'mood-sun)
  (format #t "~Tsun-color: #<vector @ #x~X>~%" (-> this sun-color))
  (format #t "~Tenv-color: #<vector @ #x~X>~%" (-> this env-color))
  this
  )

;; definition of type mood-sun-table
(deftype mood-sun-table (structure)
  ((data  mood-sun  8 :inline)
   )
  )

;; definition for method 3 of type mood-sun-table
(defmethod inspect ((this mood-sun-table))
  (format #t "[~8x] ~A~%" this 'mood-sun-table)
  (format #t "~Tdata[8] @ #x~X~%" (-> this data))
  this
  )

;; definition of type mood-context
(deftype mood-context (basic)
  ((mood-fog-table        mood-fog-table)
   (mood-lights-table     mood-lights-table)
   (mood-sun-table        mood-sun-table)
   (fog-interp            sky-color-day)
   (palette-interp        sky-color-day)
   (sky-texture-interp    sky-color-day)
   (current-fog           mood-fog     :inline)
   (current-sun           mood-sun     :inline)
   (current-prt-color     vector       :inline)
   (current-shadow        vector       :inline)
   (current-shadow-color  vector       :inline)
   (light-group           light-group  8 :inline)
   (times                 vector       8 :inline)
   (sky-times             float        8)
   (itimes                vector4w     4 :inline)
   (state                 uint8        16)
   (num-stars             float)
   (some-byte             uint8        :offset 1939)
   )
  (:methods
    (new (symbol type) _type_)
    )
  )

;; definition for method 3 of type mood-context
(defmethod inspect ((this mood-context))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tmood-fog-table: #<mood-fog-table @ #x~X>~%" (-> this mood-fog-table))
  (format #t "~Tmood-lights-table: #<mood-lights-table @ #x~X>~%" (-> this mood-lights-table))
  (format #t "~Tmood-sun-table: #<mood-sun-table @ #x~X>~%" (-> this mood-sun-table))
  (format #t "~Tfog-interp: #<sky-color-day @ #x~X>~%" (-> this fog-interp))
  (format #t "~Tpalette-interp: #<sky-color-day @ #x~X>~%" (-> this palette-interp))
  (format #t "~Tsky-texture-interp: #<sky-color-day @ #x~X>~%" (-> this sky-texture-interp))
  (format #t "~Tcurrent-fog: #<mood-fog @ #x~X>~%" (-> this current-fog))
  (format #t "~Tcurrent-sun: #<mood-sun @ #x~X>~%" (-> this current-sun))
  (format #t "~Tcurrent-prt-color: #<vector @ #x~X>~%" (-> this current-prt-color))
  (format #t "~Tcurrent-shadow: #<vector @ #x~X>~%" (-> this current-shadow))
  (format #t "~Tcurrent-shadow-color: #<vector @ #x~X>~%" (-> this current-shadow-color))
  (format #t "~Tlight-group[8] @ #x~X~%" (-> this light-group))
  (format #t "~Ttimes[8] @ #x~X~%" (-> this times))
  (format #t "~Tsky-times[8] @ #x~X~%" (-> this sky-times))
  (format #t "~Titimes[4] @ #x~X~%" (-> this itimes))
  (format #t "~Tstate[16] @ #x~X~%" (-> this state))
  (format #t "~Tnum-stars: ~f~%" (-> this num-stars))
  this
  )

;; definition for method 0 of type mood-context
(defmethod new mood-context ((allocation symbol) (type-to-make type))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set-vector! (-> v0-0 times 0) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 1) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 2) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 3) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 4) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 5) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 6) 1.0 1.0 1.0 0.0)
    (set-vector! (-> v0-0 times 7) 1.0 1.0 1.0 0.0)
    v0-0
    )
  )

;; failed to figure out what this is:
0
