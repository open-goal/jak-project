;;-*-Lisp-*-
(in-package goal)

;; definition of type tie-fragment
(deftype tie-fragment (drawable)
  ((gif-ref        (inline-array adgif-shader)  :overlay-at id)
   (point-ref      uint32                       :offset   8)
   (color-index    uint16                       :offset  12)
   (base-colors    uint8                        :offset  14)
   (tex-count      uint16)
   (gif-count      uint16)
   (vertex-count   uint16)
   (color-count    uint16)
   (num-tris       uint16)
   (num-dverts     uint16)
   (dp-ref         uint32)
   (dp-qwc         uint32)
   (generic-ref    uint32)
   (generic-count  uint32)
   (debug-lines    (array vector-array))
   )
  )

;; definition for method 3 of type tie-fragment
(defmethod inspect ((this tie-fragment))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tgif-ref: #x~X~%" (-> this gif-ref))
  (format #t "~Tpoint-ref: #x~X~%" (-> this point-ref))
  (format #t "~Tcolor-index: ~D~%" (-> this color-index))
  (format #t "~Tbase-colors: ~D~%" (-> this base-colors))
  (format #t "~Ttex-count: ~D~%" (-> this tex-count))
  (format #t "~Tgif-count: ~D~%" (-> this gif-count))
  (format #t "~Tvertex-count: ~D~%" (-> this vertex-count))
  (format #t "~Tcolor-count: ~D~%" (-> this color-count))
  (format #t "~Tnum-tris: ~D~%" (-> this num-tris))
  (format #t "~Tnum-dverts: ~D~%" (-> this num-dverts))
  (format #t "~Tdp-ref: #x~X~%" (-> this dp-ref))
  (format #t "~Tdp-qwc: ~D~%" (-> this dp-qwc))
  (format #t "~Tgeneric-ref: #x~X~%" (-> this generic-ref))
  (format #t "~Tgeneric-count: ~D~%" (-> this generic-count))
  (format #t "~Tdebug-lines: ~A~%" (-> this debug-lines))
  this
  )

;; definition of type instance-tie
(deftype instance-tie (instance)
  ((color-indices  uint32                :overlay-at error)
   (bucket-ptr     prototype-bucket-tie  :offset  12)
   (max-scale      uint16                :overlay-at (-> origin data 3))
   (flags          uint16                :overlay-at (-> origin data 7))
   )
  )

;; definition for method 3 of type instance-tie
(defmethod inspect ((this instance-tie))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tbucket-index: ~D~%" (-> this bucket-index))
  (format #t "~Torigin: #<matrix4h @ #x~X>~%" (-> this origin))
  (format #t "~Twind-index: ~D~%" (-> this wind-index))
  (format #t "~Tcolor-indices: #x~X~%" (-> this error))
  (format #t "~Tbucket-ptr: ~A~%" (-> this bucket-ptr))
  (format #t "~Tmax-scale: ~D~%" (-> this max-scale))
  (format #t "~Tflags: ~D~%" (-> this flags))
  this
  )

;; definition of type drawable-inline-array-instance-tie
(deftype drawable-inline-array-instance-tie (drawable-inline-array)
  ((data  instance-tie  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type drawable-tree-instance-tie
(deftype drawable-tree-instance-tie (drawable-tree)
  ((prototypes  proxy-prototype-array-tie  :offset   8)
   )
  )

;; definition for method 3 of type drawable-tree-instance-tie
(defmethod inspect ((this drawable-tree-instance-tie))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tdata[1] @ #x~X~%" (-> this data))
  (format #t "~Tprototypes: ~A~%" (-> this prototypes))
  this
  )

;; definition of type prototype-tie
(deftype prototype-tie (drawable-inline-array)
  ((data  tie-fragment  1 :inline)
   (pad   uint32)
   )
  )

;; definition of type tie-matrix
(deftype tie-matrix (structure)
  ((mat    matrix  :inline)
   (morph  qword   :inline)
   (fog    qword   :inline)
   )
  )

;; definition for method 3 of type tie-matrix
(defmethod inspect ((this tie-matrix))
  (format #t "[~8x] ~A~%" this 'tie-matrix)
  (format #t "~Tmat: #<matrix @ #x~X>~%" (-> this mat))
  (format #t "~Tmorph: #<qword @ #x~X>~%" (-> this morph))
  (format #t "~Tfog: #<qword @ #x~X>~%" (-> this fog))
  this
  )

;; definition of type instance-tie-work
(deftype instance-tie-work (structure)
  ((wind-const                   vector      :inline)
   (hmge-d                       vector      :inline)
   (hvdf-offset                  vector      :inline)
   (wind-force                   vector      :inline)
   (constant                     vector      :inline)
   (far-morph                    vector      :inline)
   (dist-test                    vector      :inline)
   (min-dist                     vector      :inline)
   (guard-plane                  plane       4 :inline)
   (upload-color-0               dma-packet  :inline)
   (upload-color-1               dma-packet  :inline)
   (upload-color-2               dma-packet  :inline)
   (upload-color-ret             dma-packet  :inline)
   (upload-color-temp            dma-packet  :inline)
   (generic-color-0              dma-packet  :inline)
   (generic-color-1              dma-packet  :inline)
   (generic-color-end            dma-packet  :inline)
   (tie-near-perspective-matrix  matrix      :inline)
   (wind-vectors                 uint32)
   (test-id                      uint32)
   (test-id2                     uint32)
   (dma-buffer                   basic)
   (to-spr                       uint32)
   (from-spr                     uint32)
   (wind-work                    uint32)
   (cur-vis-bits                 uint32)
   (end-vis-bits                 uint32)
   (first-generic-prototype      uint32)
   (refl-fade-fac                float)
   (refl-fade-end                float)
   (flags                        uint32)
   (paused                       basic)
   (wait-from-spr                uint32)
   (wait-to-spr                  uint32)
   )
  )

;; definition for method 3 of type instance-tie-work
(defmethod inspect ((this instance-tie-work))
  (format #t "[~8x] ~A~%" this 'instance-tie-work)
  (format #t "~Twind-const: #<vector @ #x~X>~%" (-> this wind-const))
  (format #t "~Thmge-d: #<vector @ #x~X>~%" (-> this hmge-d))
  (format #t "~Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~Twind-force: #<vector @ #x~X>~%" (-> this wind-force))
  (format #t "~Tconstant: #<vector @ #x~X>~%" (-> this constant))
  (format #t "~Tfar-morph: #<vector @ #x~X>~%" (-> this far-morph))
  (format #t "~Tdist-test: #<vector @ #x~X>~%" (-> this dist-test))
  (format #t "~Tmin-dist: #<vector @ #x~X>~%" (-> this min-dist))
  (format #t "~Tguard-plane[4] @ #x~X~%" (-> this guard-plane))
  (format #t "~Tupload-color-0: #<dma-packet @ #x~X>~%" (-> this upload-color-0))
  (format #t "~Tupload-color-1: #<dma-packet @ #x~X>~%" (-> this upload-color-1))
  (format #t "~Tupload-color-2: #<dma-packet @ #x~X>~%" (-> this upload-color-2))
  (format #t "~Tupload-color-ret: #<dma-packet @ #x~X>~%" (-> this upload-color-ret))
  (format #t "~Tupload-color-temp: #<dma-packet @ #x~X>~%" (-> this upload-color-temp))
  (format #t "~Tgeneric-color-0: #<dma-packet @ #x~X>~%" (-> this generic-color-0))
  (format #t "~Tgeneric-color-1: #<dma-packet @ #x~X>~%" (-> this generic-color-1))
  (format #t "~Tgeneric-color-end: #<dma-packet @ #x~X>~%" (-> this generic-color-end))
  (format #t "~Ttie-near-perspective-matrix: #<matrix @ #x~X>~%" (-> this tie-near-perspective-matrix))
  (format #t "~Twind-vectors: #x~X~%" (-> this wind-vectors))
  (format #t "~Ttest-id: ~D~%" (-> this test-id))
  (format #t "~Ttest-id2: ~D~%" (-> this test-id2))
  (format #t "~Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~Tto-spr: ~D~%" (-> this to-spr))
  (format #t "~Tfrom-spr: ~D~%" (-> this from-spr))
  (format #t "~Twind-work: ~D~%" (-> this wind-work))
  (format #t "~Tcur-vis-bits: ~D~%" (-> this cur-vis-bits))
  (format #t "~Tend-vis-bits: ~D~%" (-> this end-vis-bits))
  (format #t "~Tfirst-generic-prototype: #x~X~%" (-> this first-generic-prototype))
  (format #t "~Trefl-fade-fac: ~f~%" (-> this refl-fade-fac))
  (format #t "~Trefl-fade-end: ~f~%" (-> this refl-fade-end))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tpaused: ~A~%" (-> this paused))
  (format #t "~Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~Twait-to-spr: ~D~%" (-> this wait-to-spr))
  this
  )

;; definition of type instance-tie-dma
(deftype instance-tie-dma (structure)
  ((banka  instance-tie       32 :inline)
   (bankb  instance-tie       32 :inline)
   (outa   uint128            256)
   (outb   uint128            256)
   (work   instance-tie-work  :dynamic)
   )
  )

;; definition for method 3 of type instance-tie-dma
(defmethod inspect ((this instance-tie-dma))
  (format #t "[~8x] ~A~%" this 'instance-tie-dma)
  (format #t "~Tbanka[32] @ #x~X~%" (-> this banka))
  (format #t "~Tbankb[32] @ #x~X~%" (-> this bankb))
  (format #t "~Touta[256] @ #x~X~%" (-> this outa))
  (format #t "~Toutb[256] @ #x~X~%" (-> this outb))
  (format #t "~Twork: #<instance-tie-work @ #x~X>~%" (-> this work 0))
  this
  )

;; definition of type prototype-tie-work
(deftype prototype-tie-work (structure)
  ((upload-palette-0       dma-packet  :inline)
   (upload-palette-1       dma-packet  :inline)
   (upload-model-0         dma-packet  :inline)
   (upload-model-1         dma-packet  :inline)
   (upload-model-2         dma-packet  :inline)
   (upload-model-3         dma-packet  :inline)
   (upload-model-near-0    dma-packet  :inline)
   (upload-model-near-1    dma-packet  :inline)
   (upload-model-near-2    dma-packet  :inline)
   (upload-model-near-3    dma-packet  :inline)
   (upload-model-near-4    dma-packet  :inline)
   (generic-envmap-shader  dma-packet  :inline)
   (generic-palette        dma-packet  :inline)
   (generic-model-0        dma-packet  :inline)
   (generic-model-1        dma-packet  :inline)
   (generic-model-2        dma-packet  :inline)
   (generic-model-next     dma-packet  :inline)
   (clamp                  uint64)
   (prototype-array        basic)
   (generic-wait-from-spr  uint32)
   (generic-wait-to-spr    uint32)
   (wait-from-spr          uint32)
   (wait-to-spr            uint32)
   (near-wait-from-spr     uint32)
   (near-wait-to-spr       uint32)
   )
  )

;; definition for method 3 of type prototype-tie-work
(defmethod inspect ((this prototype-tie-work))
  (format #t "[~8x] ~A~%" this 'prototype-tie-work)
  (format #t "~Tupload-palette-0: #<dma-packet @ #x~X>~%" (-> this upload-palette-0))
  (format #t "~Tupload-palette-1: #<dma-packet @ #x~X>~%" (-> this upload-palette-1))
  (format #t "~Tupload-model-0: #<dma-packet @ #x~X>~%" (-> this upload-model-0))
  (format #t "~Tupload-model-1: #<dma-packet @ #x~X>~%" (-> this upload-model-1))
  (format #t "~Tupload-model-2: #<dma-packet @ #x~X>~%" (-> this upload-model-2))
  (format #t "~Tupload-model-3: #<dma-packet @ #x~X>~%" (-> this upload-model-3))
  (format #t "~Tupload-model-near-0: #<dma-packet @ #x~X>~%" (-> this upload-model-near-0))
  (format #t "~Tupload-model-near-1: #<dma-packet @ #x~X>~%" (-> this upload-model-near-1))
  (format #t "~Tupload-model-near-2: #<dma-packet @ #x~X>~%" (-> this upload-model-near-2))
  (format #t "~Tupload-model-near-3: #<dma-packet @ #x~X>~%" (-> this upload-model-near-3))
  (format #t "~Tupload-model-near-4: #<dma-packet @ #x~X>~%" (-> this upload-model-near-4))
  (format #t "~Tgeneric-envmap-shader: #<dma-packet @ #x~X>~%" (-> this generic-envmap-shader))
  (format #t "~Tgeneric-palette: #<dma-packet @ #x~X>~%" (-> this generic-palette))
  (format #t "~Tgeneric-model-0: #<dma-packet @ #x~X>~%" (-> this generic-model-0))
  (format #t "~Tgeneric-model-1: #<dma-packet @ #x~X>~%" (-> this generic-model-1))
  (format #t "~Tgeneric-model-2: #<dma-packet @ #x~X>~%" (-> this generic-model-2))
  (format #t "~Tgeneric-model-next: #<dma-packet @ #x~X>~%" (-> this generic-model-next))
  (format #t "~Tclamp: ~D~%" (-> this clamp))
  (format #t "~Tprototype-array: ~A~%" (-> this prototype-array))
  (format #t "~Tgeneric-wait-from-spr: ~D~%" (-> this generic-wait-from-spr))
  (format #t "~Tgeneric-wait-to-spr: ~D~%" (-> this generic-wait-to-spr))
  (format #t "~Twait-from-spr: ~D~%" (-> this wait-from-spr))
  (format #t "~Twait-to-spr: ~D~%" (-> this wait-to-spr))
  (format #t "~Tnear-wait-from-spr: ~D~%" (-> this near-wait-from-spr))
  (format #t "~Tnear-wait-to-spr: ~D~%" (-> this near-wait-to-spr))
  this
  )

;; definition of type prototype-tie-dma
(deftype prototype-tie-dma (structure)
  ((colora           rgba     256)
   (colorb           rgba     256)
   (outa             uint128  256)
   (outb             uint128  256)
   (length           uint32)
   (dma-buffer       basic)
   (this-frag-count  uint32)
   (next             uint32   4 :offset 10256)
   (geometry         uint32   4)
   (frag-count       uint8    4)
   )
  )

;; definition for method 3 of type prototype-tie-dma
(defmethod inspect ((this prototype-tie-dma))
  (format #t "[~8x] ~A~%" this 'prototype-tie-dma)
  (format #t "~Tcolora[256] @ #x~X~%" (-> this colora))
  (format #t "~Tcolorb[256] @ #x~X~%" (-> this colorb))
  (format #t "~Touta[256] @ #x~X~%" (-> this outa))
  (format #t "~Toutb[256] @ #x~X~%" (-> this outb))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tdma-buffer: ~A~%" (-> this dma-buffer))
  (format #t "~Tthis-frag-count: ~D~%" (-> this this-frag-count))
  (format #t "~Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~Tfrag-count[4] @ #x~X~%" (-> this frag-count))
  this
  )

;; definition for symbol *instance-tie-work-copy*, type instance-tie-work
(define *instance-tie-work-copy* (the-as instance-tie-work #f))

;; failed to figure out what this is:
0
