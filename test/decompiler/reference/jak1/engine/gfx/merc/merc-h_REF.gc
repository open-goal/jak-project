;;-*-Lisp-*-
(in-package goal)

;; definition of type ripple-merc-query
(deftype ripple-merc-query (inline-array-class)
  ((start-vertex  int32)
   (vertex-skip   int32)
   (vertex-count  int32)
   (current-loc   int32)
   (data          vector  :inline :dynamic)
   )
  )

;; definition for method 3 of type ripple-merc-query
(defmethod inspect ((this ripple-merc-query))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tstart-vertex: ~D~%" (-> this start-vertex))
  (format #t "~Tvertex-skip: ~D~%" (-> this vertex-skip))
  (format #t "~Tvertex-count: ~D~%" (-> this vertex-count))
  (format #t "~Tcurrent-loc: ~D~%" (-> this current-loc))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; failed to figure out what this is:
(set! (-> ripple-merc-query heap-base) (the-as uint 16))

;; definition of type merc-byte-header
(deftype merc-byte-header (structure)
  ((srcdest-off         uint8)
   (rgba-off            uint8)
   (lump-off            uint8)
   (fp-off              uint8)
   (mat1-cnt            uint8)
   (mat2-cnt            uint8)
   (mat3-cnt            uint8)
   (samecopy-cnt        uint8)
   (crosscopy-cnt       uint8)
   (strip-len           uint8)
   (mm-quadword-fp-off  uint8)
   (mm-quadword-size    uint8)
   (perc-off            uint8)
   (mat-slot            uint8  10)
   )
  )

;; definition for method 3 of type merc-byte-header
(defmethod inspect ((this merc-byte-header))
  (format #t "[~8x] ~A~%" this 'merc-byte-header)
  (format #t "~Tsrcdest-off: ~D~%" (-> this srcdest-off))
  (format #t "~Trgba-off: ~D~%" (-> this rgba-off))
  (format #t "~Tlump-off: ~D~%" (-> this lump-off))
  (format #t "~Tfp-off: ~D~%" (-> this fp-off))
  (format #t "~Tmat1-cnt: ~D~%" (-> this mat1-cnt))
  (format #t "~Tmat2-cnt: ~D~%" (-> this mat2-cnt))
  (format #t "~Tmat3-cnt: ~D~%" (-> this mat3-cnt))
  (format #t "~Tsamecopy-cnt: ~D~%" (-> this samecopy-cnt))
  (format #t "~Tcrosscopy-cnt: ~D~%" (-> this crosscopy-cnt))
  (format #t "~Tstrip-len: ~D~%" (-> this strip-len))
  (format #t "~Tmm-quadword-fp-off: ~D~%" (-> this mm-quadword-fp-off))
  (format #t "~Tmm-quadword-size: ~D~%" (-> this mm-quadword-size))
  (format #t "~Tperc-off: ~D~%" (-> this perc-off))
  (format #t "~Tmat-slot[10] @ #x~X~%" (-> this mat-slot))
  this
  )

;; definition of type merc-fragment
(deftype merc-fragment (structure)
  ((header  merc-byte-header  :inline)
   (rest    uint8             1)
   )
  (:methods
    (login-adgifs (_type_) none)
    )
  )

;; definition for method 3 of type merc-fragment
(defmethod inspect ((this merc-fragment))
  (format #t "[~8x] ~A~%" this 'merc-fragment)
  (format #t "~Theader: #<merc-byte-header @ #x~X>~%" (-> this header))
  (format #t "~Trest[1] @ #x~X~%" (-> this rest))
  this
  )

;; definition of type merc-vtx
(deftype merc-vtx (structure)
  ((mat-0  uint8)
   (mat-1  uint8)
   (nrm-x  uint8)
   (pos-x  uint8)
   (dst-0  uint8)
   (dst-1  uint8)
   (nrm-y  uint8)
   (pos-y  uint8)
   (tex-s  uint8)
   (tex-t  uint8)
   (nrm-z  uint8)
   (pos-z  uint8)
   )
  )

;; definition for method 3 of type merc-vtx
(defmethod inspect ((this merc-vtx))
  (format #t "[~8x] ~A~%" this 'merc-vtx)
  (format #t "~Tmat-0: ~D~%" (-> this mat-0))
  (format #t "~Tmat-1: ~D~%" (-> this mat-1))
  (format #t "~Tnrm-x: ~D~%" (-> this nrm-x))
  (format #t "~Tpos-x: ~D~%" (-> this pos-x))
  (format #t "~Tdst-0: ~D~%" (-> this dst-0))
  (format #t "~Tdst-1: ~D~%" (-> this dst-1))
  (format #t "~Tnrm-y: ~D~%" (-> this nrm-y))
  (format #t "~Tpos-y: ~D~%" (-> this pos-y))
  (format #t "~Ttex-s: ~D~%" (-> this tex-s))
  (format #t "~Ttex-t: ~D~%" (-> this tex-t))
  (format #t "~Tnrm-z: ~D~%" (-> this nrm-z))
  (format #t "~Tpos-z: ~D~%" (-> this pos-z))
  this
  )

;; definition of type merc-fp-header
(deftype merc-fp-header (structure)
  ((x-add             float)
   (y-add             float)
   (z-add             float)
   (shader-cnt        uint8)
   (kick-info-offset  uint8)
   (kick-info-step    uint8)
   (hword-cnt         uint8)
   )
  )

;; definition for method 3 of type merc-fp-header
(defmethod inspect ((this merc-fp-header))
  (format #t "[~8x] ~A~%" this 'merc-fp-header)
  (format #t "~Tx-add: ~f~%" (-> this x-add))
  (format #t "~Ty-add: ~f~%" (-> this y-add))
  (format #t "~Tz-add: ~f~%" (-> this z-add))
  (format #t "~Tshader-cnt: ~D~%" (-> this shader-cnt))
  (format #t "~Tkick-info-offset: ~D~%" (-> this kick-info-offset))
  (format #t "~Tkick-info-step: ~D~%" (-> this kick-info-step))
  (format #t "~Thword-cnt: ~D~%" (-> this hword-cnt))
  this
  )

;; definition for function merc-fragment-fp-data
;; INFO: Return type mismatch int vs merc-fp-header.
(defun merc-fragment-fp-data ((arg0 merc-fragment))
  (the-as merc-fp-header (+ (the-as uint arg0) (* (-> arg0 header mm-quadword-fp-off) 16)))
  )

;; definition of type merc-mat-dest
(deftype merc-mat-dest (structure)
  ((matrix-number  uint8)
   (matrix-dest    uint8)
   )
  :pack-me
  )

;; definition for method 3 of type merc-mat-dest
(defmethod inspect ((this merc-mat-dest))
  (format #t "[~8x] ~A~%" this 'merc-mat-dest)
  (format #t "~Tmatrix-number: ~D~%" (-> this matrix-number))
  (format #t "~Tmatrix-dest: ~D~%" (-> this matrix-dest))
  this
  )

;; definition of type merc-fragment-control
(deftype merc-fragment-control (structure)
  ((unsigned-four-count  uint8)
   (lump-four-count      uint8)
   (fp-qwc               uint8)
   (mat-xfer-count       uint8)
   (mat-dest-data        merc-mat-dest  :inline :dynamic)
   )
  )

;; definition for method 3 of type merc-fragment-control
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this merc-fragment-control))
  (format #t "[~8x] ~A~%" this 'merc-fragment-control)
  (format #t "~Tunsigned-four-count: ~D~%" (-> this unsigned-four-count))
  (format #t "~Tlump-four-count: ~D~%" (-> this lump-four-count))
  (format #t "~Tfp-qwc: ~D~%" (-> this fp-qwc))
  (format #t "~Tmat-xfer-count: ~D~%" (-> this mat-xfer-count))
  (format #t "~Tmat-dest-data[0] @ #x~X~%" (-> this mat-dest-data))
  this
  )

;; definition of type merc-blend-data
(deftype merc-blend-data (structure)
  ((int8-data  int8  :dynamic)
   )
  )

;; definition for method 3 of type merc-blend-data
(defmethod inspect ((this merc-blend-data))
  (format #t "[~8x] ~A~%" this 'merc-blend-data)
  (format #t "~Tint8-data[0] @ #x~X~%" (-> this int8-data))
  this
  )

;; definition of type merc-blend-ctrl
(deftype merc-blend-ctrl (structure)
  ((blend-vtx-count      uint8)
   (nonzero-index-count  uint8)
   (bt-index             uint8  :dynamic)
   )
  )

;; definition for method 3 of type merc-blend-ctrl
(defmethod inspect ((this merc-blend-ctrl))
  (format #t "[~8x] ~A~%" this 'merc-blend-ctrl)
  (format #t "~Tblend-vtx-count: ~D~%" (-> this blend-vtx-count))
  (format #t "~Tnonzero-index-count: ~D~%" (-> this nonzero-index-count))
  (format #t "~Tbt-index[0] @ #x~X~%" (-> this bt-index))
  this
  )

;; definition of type mei-envmap-tint
(deftype mei-envmap-tint (structure)
  ((fade0  float)
   (fade1  float)
   (tint   uint32)
   (dummy  int32)
   )
  )

;; definition for method 3 of type mei-envmap-tint
(defmethod inspect ((this mei-envmap-tint))
  (format #t "[~8x] ~A~%" this 'mei-envmap-tint)
  (format #t "~Tfade0: ~f~%" (-> this fade0))
  (format #t "~Tfade1: ~f~%" (-> this fade1))
  (format #t "~Ttint: ~D~%" (-> this tint))
  (format #t "~Tdummy: ~D~%" (-> this dummy))
  this
  )

;; definition of type mei-texture-scroll
(deftype mei-texture-scroll (structure)
  ((max-dist      float)
   (st-int-scale  uint8)
   (time-factor   uint8)
   (scroll-dir    uint8)
   (cached-time   uint8)
   (time-delta    uint8)
   (dummy         uint8  7)
   )
  )

;; definition for method 3 of type mei-texture-scroll
(defmethod inspect ((this mei-texture-scroll))
  (format #t "[~8x] ~A~%" this 'mei-texture-scroll)
  (format #t "~Tmax-dist: ~f~%" (-> this max-dist))
  (format #t "~Tst-int-scale: ~D~%" (-> this st-int-scale))
  (format #t "~Ttime-factor: ~D~%" (-> this time-factor))
  (format #t "~Tscroll-dir: ~D~%" (-> this scroll-dir))
  (format #t "~Tcached-time: ~D~%" (-> this cached-time))
  (format #t "~Ttime-delta: ~D~%" (-> this time-delta))
  (format #t "~Tdummy[7] @ #x~X~%" (-> this dummy))
  this
  )

;; definition of type mei-ripple
(deftype mei-ripple (structure)
  ((x-base     float)
   (z-base     float)
   (grid-size  float)
   (angle      float)
   )
  )

;; definition for method 3 of type mei-ripple
(defmethod inspect ((this mei-ripple))
  (format #t "[~8x] ~A~%" this 'mei-ripple)
  (format #t "~Tx-base: ~f~%" (-> this x-base))
  (format #t "~Tz-base: ~f~%" (-> this z-base))
  (format #t "~Tgrid-size: ~f~%" (-> this grid-size))
  (format #t "~Tangle: ~f~%" (-> this angle))
  this
  )

;; definition of type merc-extra-info
(deftype merc-extra-info (structure)
  ((envmap-tint-offset     uint8)
   (shader-offset          uint8)
   (texture-scroll-offset  uint8)
   (ripple-offset          uint8)
   (dummy                  uint8  12)
   )
  )

;; definition for method 3 of type merc-extra-info
(defmethod inspect ((this merc-extra-info))
  (format #t "[~8x] ~A~%" this 'merc-extra-info)
  (format #t "~Tenvmap-tint-offset: ~D~%" (-> this envmap-tint-offset))
  (format #t "~Tshader-offset: ~D~%" (-> this shader-offset))
  (format #t "~Ttexture-scroll-offset: ~D~%" (-> this texture-scroll-offset))
  (format #t "~Tripple-offset: ~D~%" (-> this ripple-offset))
  (format #t "~Tdummy[12] @ #x~X~%" (-> this dummy))
  this
  )

;; definition of type merc-effect
(deftype merc-effect (structure)
  ((frag-geo          merc-fragment)
   (frag-ctrl         merc-fragment-control)
   (blend-data        merc-blend-data)
   (blend-ctrl        merc-blend-ctrl)
   (dummy0            uint8)
   (effect-bits       uint8)
   (frag-count        uint16)
   (blend-frag-count  uint16)
   (tri-count         uint16)
   (dvert-count       uint16)
   (dummy1            uint8)
   (envmap-usage      uint8)
   (extra-info        merc-extra-info)
   (data              uint64  4 :overlay-at frag-geo)
   )
  (:methods
    (login-adgifs (_type_) none)
    )
  )

;; definition for method 3 of type merc-effect
(defmethod inspect ((this merc-effect))
  (format #t "[~8x] ~A~%" this 'merc-effect)
  (format #t "~Tfrag-geo: #<merc-fragment @ #x~X>~%" (-> this frag-geo))
  (format #t "~Tfrag-ctrl: #<merc-fragment-control @ #x~X>~%" (-> this frag-ctrl))
  (format #t "~Tblend-data: #<merc-blend-data @ #x~X>~%" (-> this blend-data))
  (format #t "~Tblend-ctrl: #<merc-blend-ctrl @ #x~X>~%" (-> this blend-ctrl))
  (format #t "~Tdummy0: ~D~%" (-> this dummy0))
  (format #t "~Teffect-bits: ~D~%" (-> this effect-bits))
  (format #t "~Tfrag-count: ~D~%" (-> this frag-count))
  (format #t "~Tblend-frag-count: ~D~%" (-> this blend-frag-count))
  (format #t "~Ttri-count: ~D~%" (-> this tri-count))
  (format #t "~Tdvert-count: ~D~%" (-> this dvert-count))
  (format #t "~Tdummy1: ~D~%" (-> this dummy1))
  (format #t "~Tenvmap-usage: ~D~%" (-> this envmap-usage))
  (format #t "~Textra-info: #<merc-extra-info @ #x~X>~%" (-> this extra-info))
  this
  )

;; definition of type merc-eye-ctrl
(deftype merc-eye-ctrl (structure)
  ((eye-slot       int8)
   (shader-offset  int8)
   (shader-count   int8)
   (shader         adgif-shader  3 :inline)
   (iris-shader    adgif-shader  :inline :overlay-at (-> shader 0))
   (pupil-shader   adgif-shader  :inline :overlay-at (-> shader 1))
   (lid-shader     adgif-shader  :inline :overlay-at (-> shader 2))
   )
  )

;; definition for method 3 of type merc-eye-ctrl
(defmethod inspect ((this merc-eye-ctrl))
  (format #t "[~8x] ~A~%" this 'merc-eye-ctrl)
  (format #t "~Teye-slot: ~D~%" (-> this eye-slot))
  (format #t "~Tshader-offset: ~D~%" (-> this shader-offset))
  (format #t "~Tshader-count: ~D~%" (-> this shader-count))
  (format #t "~Tshader[3] @ #x~X~%" (-> this iris-shader))
  (format #t "~Tiris-shader: #<adgif-shader @ #x~X>~%" (-> this iris-shader))
  (format #t "~Tpupil-shader: #<adgif-shader @ #x~X>~%" (-> this pupil-shader))
  (format #t "~Tlid-shader: #<adgif-shader @ #x~X>~%" (-> this lid-shader))
  this
  )

;; definition of type merc-eye-anim-frame
(deftype merc-eye-anim-frame (structure)
  ((pupil-trans-x  int8)
   (pupil-trans-y  int8)
   (blink          int8)
   (iris-scale     int8    :offset   4)
   (pupil-scale    int8)
   (lid-scale      int8)
   (dword          uint64  :overlay-at pupil-trans-x)
   )
  :pack-me
  )

;; definition for method 3 of type merc-eye-anim-frame
(defmethod inspect ((this merc-eye-anim-frame))
  (format #t "[~8x] ~A~%" this 'merc-eye-anim-frame)
  (format #t "~Tpupil-trans-x: ~D~%" (-> this pupil-trans-x))
  (format #t "~Tpupil-trans-y: ~D~%" (-> this pupil-trans-y))
  (format #t "~Tblink: ~D~%" (-> this blink))
  (format #t "~Tiris-scale: ~D~%" (-> this iris-scale))
  (format #t "~Tpupil-scale: ~D~%" (-> this pupil-scale))
  (format #t "~Tlid-scale: ~D~%" (-> this lid-scale))
  (format #t "~Tdword: ~D~%" (-> this dword))
  this
  )

;; definition of type merc-eye-anim-block
(deftype merc-eye-anim-block (structure)
  ((max-frame  int16)
   (data       merc-eye-anim-frame  :inline :dynamic :offset   8)
   )
  )

;; definition for method 3 of type merc-eye-anim-block
(defmethod inspect ((this merc-eye-anim-block))
  (format #t "[~8x] ~A~%" this 'merc-eye-anim-block)
  (format #t "~Tmax-frame: ~D~%" (-> this max-frame))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; definition of type merc-ctrl-header
(deftype merc-ctrl-header (structure)
  ((xyz-scale               float)
   (st-magic                uint32)
   (st-out-a                uint32)
   (st-out-b                uint32)
   (st-vif-add              uint32)
   (st-int-off              uint16)
   (st-int-scale            uint16)
   (effect-count            uint32)
   (blend-target-count      uint32)
   (fragment-count          uint16)
   (tri-count               uint16)
   (matrix-count            uint8)
   (shader-count            uint8)
   (transform-vertex-count  uint16)
   (dvert-count             uint16)
   (one-mat-count           uint16)
   (two-mat-count           uint16)
   (two-mat-reuse-count     uint16)
   (three-mat-count         uint16)
   (three-mat-reuse-count   uint16)
   (shader-upload-count     uint8)
   (matrix-upload-count     uint8)
   (same-copy-count         uint16)
   (cross-copy-count        uint16)
   (num-verts               uint16)
   (longest-edge            float)
   (eye-ctrl                merc-eye-ctrl)
   (masks                   uint32  3)
   (dummy-bytes             uint8   48 :overlay-at fragment-count)
   (envmap-tint             uint32     :overlay-at fragment-count)
   (query                   basic      :overlay-at matrix-count)
   (needs-clip              uint8      :overlay-at dvert-count)
   (use-isometric           uint8      :overlay-at (-> dummy-bytes 9))
   (use-attached-shader     uint8      :overlay-at one-mat-count)
   (display-triangles       uint8      :overlay-at (-> dummy-bytes 11))
   (death-vertex-skip       uint16     :overlay-at two-mat-count)
   (death-start-vertex      uint16     :overlay-at two-mat-reuse-count)
   (death-effect            uint32     :overlay-at three-mat-count)
   (use-translucent         uint8      :overlay-at shader-upload-count)
   (display-this-fragment   uint8      :overlay-at matrix-upload-count)
   )
  )

;; definition for method 3 of type merc-ctrl-header
(defmethod inspect ((this merc-ctrl-header))
  (format #t "[~8x] ~A~%" this 'merc-ctrl-header)
  (format #t "~Txyz-scale: #x~X~%" (-> this xyz-scale))
  (format #t "~Tst-magic: #x~X~%" (-> this st-magic))
  (format #t "~Tst-out-a: #x~X~%" (-> this st-out-a))
  (format #t "~Tst-out-b: #x~X~%" (-> this st-out-b))
  (format #t "~Tst-vif-add: #x~X~%" (-> this st-vif-add))
  (format #t "~Tst-int-off: ~D~%" (-> this st-int-off))
  (format #t "~Tst-int-scale: ~D~%" (-> this st-int-scale))
  (format #t "~Teffect-count: ~D~%" (-> this effect-count))
  (format #t "~Tblend-target-count: ~D~%" (-> this blend-target-count))
  (format #t "~Tfragment-count: ~D~%" (-> this fragment-count))
  (format #t "~Ttri-count: ~D~%" (-> this tri-count))
  (format #t "~Tmatrix-count: ~D~%" (-> this matrix-count))
  (format #t "~Tshader-count: ~D~%" (-> this shader-count))
  (format #t "~Ttransform-vertex-count: ~D~%" (-> this transform-vertex-count))
  (format #t "~Tdvert-count: ~D~%" (-> this dvert-count))
  (format #t "~Tone-mat-count: ~D~%" (-> this one-mat-count))
  (format #t "~Ttwo-mat-count: ~D~%" (-> this two-mat-count))
  (format #t "~Ttwo-mat-reuse-count: ~D~%" (-> this two-mat-reuse-count))
  (format #t "~Tthree-mat-count: ~D~%" (-> this three-mat-count))
  (format #t "~Tthree-mat-reuse-count: ~D~%" (-> this three-mat-reuse-count))
  (format #t "~Tshader-upload-count: ~D~%" (-> this shader-upload-count))
  (format #t "~Tmatrix-upload-count: ~D~%" (-> this matrix-upload-count))
  (format #t "~Tsame-copy-count: ~D~%" (-> this same-copy-count))
  (format #t "~Tcross-copy-count: ~D~%" (-> this cross-copy-count))
  (format #t "~Tnum-verts: ~D~%" (-> this num-verts))
  (format #t "~Tlongest-edge: ~f~%" (-> this longest-edge))
  (format #t "~Teye-ctrl: #<merc-eye-ctrl @ #x~X>~%" (-> this eye-ctrl))
  (format #t "~Tmasks[3] @ #x~X~%" (-> this masks))
  (format #t "~Tdummy-bytes[48] @ #x~X~%" (&-> this fragment-count))
  (format #t "~Tenvmap-tint: ~D~%" (-> this envmap-tint))
  (format #t "~Tquery: ~A~%" (-> this query))
  (format #t "~Tneeds-clip: ~D~%" (-> this needs-clip))
  (format #t "~Tuse-isometric: ~D~%" (-> this use-isometric))
  (format #t "~Tuse-attached-shader: ~D~%" (-> this use-attached-shader))
  (format #t "~Tdisplay-triangles: ~D~%" (-> this display-triangles))
  (format #t "~Tdeath-vertex-skip: ~D~%" (-> this two-mat-count))
  (format #t "~Tdeath-start-vertex: ~D~%" (-> this two-mat-reuse-count))
  (format #t "~Tdeath-effect: ~D~%" (-> this death-effect))
  (format #t "~Tuse-translucent: ~D~%" (-> this shader-upload-count))
  (format #t "~Tdisplay-this-fragment: ~D~%" (-> this matrix-upload-count))
  this
  )

;; definition of type merc-ctrl
(deftype merc-ctrl (art-element)
  ((num-joints  int32             :overlay-at (-> pad 0))
   (header      merc-ctrl-header  :inline)
   (effect      merc-effect       :inline :dynamic)
   )
  )

;; definition for method 3 of type merc-ctrl
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this merc-ctrl))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Textra: ~A~%" (-> this extra))
  (format #t "~Tnum-joints: ~D~%" (-> this num-joints))
  (format #t "~Theader: #<merc-ctrl-header @ #x~X>~%" (-> this header))
  (format #t "~Teffect[0] @ #x~X~%" (-> this effect))
  this
  )

;; definition of type merc-vu1-low-mem
(deftype merc-vu1-low-mem (structure)
  ((tri-strip-gif  gs-gif-tag  :inline)
   (ad-gif         gs-gif-tag  :inline)
   (hvdf-offset    vector      :inline)
   (perspective    uint128     4)
   (fog            vector      :inline)
   )
  )

;; definition for method 3 of type merc-vu1-low-mem
(defmethod inspect ((this merc-vu1-low-mem))
  (format #t "[~8x] ~A~%" this 'merc-vu1-low-mem)
  (format #t "~Ttri-strip-gif: #<qword @ #x~X>~%" (-> this tri-strip-gif))
  (format #t "~Tad-gif: #<qword @ #x~X>~%" (-> this ad-gif))
  (format #t "~Thvdf-offset: #<vector @ #x~X>~%" (-> this hvdf-offset))
  (format #t "~Tperspective[4] @ #x~X~%" (-> this perspective))
  (format #t "~Tfog: #<vector @ #x~X>~%" (-> this fog))
  this
  )

;; definition of type ripple-wave
(deftype ripple-wave (structure)
  ((scale  float)
   (offs   float)
   (xdiv   int16)
   (zdiv   int16)
   (speed  float)
   (xmul   float)
   (zmul   float)
   (delta  float)
   )
  :pack-me
  )

;; definition for method 3 of type ripple-wave
(defmethod inspect ((this ripple-wave))
  (format #t "[~8x] ~A~%" this 'ripple-wave)
  (format #t "~Tscale: ~f~%" (-> this scale))
  (format #t "~Toffs: ~f~%" (-> this offs))
  (format #t "~Txdiv: ~D~%" (-> this xdiv))
  (format #t "~Tzdiv: ~D~%" (-> this zdiv))
  (format #t "~Tspeed: ~f~%" (-> this speed))
  (format #t "~Txmul: ~f~%" (-> this xmul))
  (format #t "~Tzmul: ~f~%" (-> this zmul))
  (format #t "~Tdelta: ~f~%" (-> this delta))
  this
  )

;; definition of type ripple-wave-set
(deftype ripple-wave-set (basic)
  ((count         int32)
   (converted     basic)
   (frame-save    uint32)
   (normal-scale  float)
   (wave          ripple-wave  4 :inline)
   )
  )

;; definition for method 3 of type ripple-wave-set
(defmethod inspect ((this ripple-wave-set))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tcount: ~D~%" (-> this count))
  (format #t "~Tconverted: ~A~%" (-> this converted))
  (format #t "~Tframe-save: ~D~%" (-> this frame-save))
  (format #t "~Tnormal-scale: ~f~%" (-> this normal-scale))
  (format #t "~Twave[4] @ #x~X~%" (-> this wave))
  this
  )

;; definition of type ripple-control
(deftype ripple-control (basic)
  ((global-scale             float)
   (last-frame-scale         float)
   (close-fade-dist          float)
   (far-fade-dist            float)
   (faded-scale              float)
   (individual-normal-scale  float)
   (waveform                 ripple-wave-set)
   (send-query               symbol)
   (query                    ripple-merc-query)
   )
  (:methods
    (new (symbol type) _type_)
    )
  )

;; definition for method 3 of type ripple-control
(defmethod inspect ((this ripple-control))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tglobal-scale: ~f~%" (-> this global-scale))
  (format #t "~Tlast-frame-scale: ~f~%" (-> this last-frame-scale))
  (format #t "~Tclose-fade-dist: ~f~%" (-> this close-fade-dist))
  (format #t "~Tfar-fade-dist: ~f~%" (-> this far-fade-dist))
  (format #t "~Tfaded-scale: ~f~%" (-> this faded-scale))
  (format #t "~Tindividual-normal-scale: ~f~%" (-> this individual-normal-scale))
  (format #t "~Twaveform: ~A~%" (-> this waveform))
  (format #t "~Tsend-query: ~A~%" (-> this send-query))
  (format #t "~Tquery: ~A~%" (-> this query))
  this
  )

;; definition for method 0 of type ripple-control
(defmethod new ripple-control ((allocation symbol) (type-to-make type))
  (let ((this (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> this global-scale) 0.0)
    (set! (-> this last-frame-scale) -0.001)
    (set! (-> this close-fade-dist) 4096000000.0)
    (set! (-> this far-fade-dist) 8192000000.0)
    (set! (-> this faded-scale) -0.001)
    (set! (-> this waveform) #f)
    (set! (-> this individual-normal-scale) 1.0)
    (set! (-> this send-query) #f)
    (set! (-> this query) #f)
    this
    )
  )

;; failed to figure out what this is:
0
