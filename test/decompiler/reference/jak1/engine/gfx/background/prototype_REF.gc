;;-*-Lisp-*-
(in-package goal)

;; definition for method 9 of type prototype-array-tie
;; INFO: Return type mismatch prototype-array-tie vs none.
(defmethod login ((this prototype-array-tie))
  (dotimes (s5-0 (-> this length))
    (let ((s4-0 (-> this array-data s5-0)))
      (dotimes (s3-0 4)
        (let ((a0-1 (-> s4-0 geometry-override s3-0)))
          (if (nonzero? a0-1)
              (login a0-1)
              )
          )
        )
      (let ((s4-1 (-> s4-0 envmap-shader)))
        (when (nonzero? s4-1)
          (adgif-shader-login-no-remap s4-1)
          (set! (-> s4-1 tex1) (new 'static 'gs-tex1 :mmag #x1 :mmin #x1))
          (set! (-> s4-1 clamp) (new 'static 'gs-clamp :wms (gs-tex-wrap-mode clamp) :wmt (gs-tex-wrap-mode clamp)))
          (set! (-> s4-1 alpha) (new 'static 'gs-alpha :b #x2 :c #x1 :d #x1))
          (set! (-> s4-1 prims 1) (gs-reg64 tex0-1))
          (set! (-> s4-1 prims 3) (gs-reg64 tex1-1))
          (set! (-> s4-1 prims 5) (gs-reg64 miptbp1-1))
          (set! (-> s4-1 clamp-reg) (gs-reg64 clamp-1))
          (set! (-> s4-1 prims 9) (gs-reg64 alpha-1))
          )
        )
      )
    )
  (none)
  )

;; definition for method 9 of type prototype-inline-array-shrub
(defmethod login ((this prototype-inline-array-shrub))
  (dotimes (s5-0 (-> this length))
    (let ((s4-0 (-> this data s5-0)))
      (dotimes (s3-0 4)
        (let ((a0-1 (-> s4-0 geometry s3-0)))
          (if (nonzero? a0-1)
              (login a0-1)
              )
          )
        )
      )
    )
  this
  )

;; definition for method 8 of type prototype-array-tie
(defmethod mem-usage ((this prototype-array-tie) (usage memory-usage-block) (flags int))
  (set! (-> usage length) (max 1 (-> usage length)))
  (set! (-> usage data 0 name) (symbol->string 'drawable-group))
  (+! (-> usage data 0 count) 1)
  (let ((v1-8 (asize-of this)))
    (+! (-> usage data 0 used) v1-8)
    (+! (-> usage data 0 total) (logand -16 (+ v1-8 15)))
    )
  (dotimes (s3-0 (-> this length))
    (mem-usage (-> this array-data s3-0) usage flags)
    )
  this
  )

;; definition for method 8 of type prototype-bucket-tie
(defmethod mem-usage ((this prototype-bucket-tie) (usage memory-usage-block) (flags int))
  (dotimes (s3-0 4)
    (let ((a0-1 (-> this geometry-override s3-0)))
      (if (nonzero? a0-1)
          (mem-usage a0-1 usage (logior flags 1))
          )
      )
    )
  (set! (-> usage length) (max 81 (-> usage length)))
  (set! (-> usage data 80 name) "string")
  (+! (-> usage data 80 count) 1)
  (let ((v1-13 (asize-of (-> this name))))
    (+! (-> usage data 80 used) v1-13)
    (+! (-> usage data 80 total) (logand -16 (+ v1-13 15)))
    )
  (when (nonzero? (-> this tie-colors))
    (set! (-> usage length) (max 17 (-> usage length)))
    (set! (-> usage data 16 name) "tie-pal")
    (+! (-> usage data 16 count) 1)
    (let ((v1-25 (asize-of (-> this tie-colors))))
      (+! (-> usage data 16 used) v1-25)
      (+! (-> usage data 16 total) (logand -16 (+ v1-25 15)))
      )
    )
  (if (nonzero? (-> this collide-frag))
      (mem-usage (-> this collide-frag) usage (logior flags 1))
      )
  this
  )

;; definition for method 8 of type prototype-inline-array-shrub
(defmethod mem-usage ((this prototype-inline-array-shrub) (usage memory-usage-block) (flags int))
  (set! (-> usage length) (max 1 (-> usage length)))
  (set! (-> usage data 0 name) (symbol->string 'drawable-group))
  (+! (-> usage data 0 count) 1)
  (let ((v1-8 (asize-of this)))
    (+! (-> usage data 0 used) v1-8)
    (+! (-> usage data 0 total) (logand -16 (+ v1-8 15)))
    )
  (dotimes (s3-0 (-> this length))
    (mem-usage (-> this data s3-0) usage flags)
    )
  this
  )

;; definition for method 8 of type prototype-bucket-shrub
(defmethod mem-usage ((this prototype-bucket-shrub) (usage memory-usage-block) (flags int))
  (set! (-> usage length) (max 25 (-> usage length)))
  (set! (-> usage data 24 name) "prototype-bucket-shrub")
  (+! (-> usage data 24 count) 1)
  (let ((v1-5 112))
    (+! (-> usage data 24 used) v1-5)
    (+! (-> usage data 24 total) (logand -16 (+ v1-5 15)))
    )
  (dotimes (s3-0 4)
    (let ((a0-5 (-> this geometry s3-0)))
      (if (nonzero? a0-5)
          (mem-usage a0-5 usage (logior flags 1))
          )
      )
    )
  (set! (-> usage length) (max 81 (-> usage length)))
  (set! (-> usage data 80 name) "string")
  (+! (-> usage data 80 count) 1)
  (let ((v1-22 (asize-of (-> this name))))
    (+! (-> usage data 80 used) v1-22)
    (+! (-> usage data 80 total) (logand -16 (+ v1-22 15)))
    )
  this
  )
