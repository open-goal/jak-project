;;-*-Lisp-*-
(in-package goal)

;; definition of type prototype-bucket
(deftype prototype-bucket (basic)
  ((name           string)
   (flags          uint32)
   (in-level       uint16)
   (utextures      uint16)
   (geometry       drawable  4)
   (dists          vector    :inline)
   (rdists         vector    :inline)
   (next           uint32    4)
   (count          uint16    4)
   (near-plane     meters    :overlay-at (-> dists x))
   (near-stiff     meters    :overlay-at (-> dists y))
   (mid-plane      meters    :overlay-at (-> dists z))
   (far-plane      meters    :overlay-at (-> dists w))
   (rlength-near   float     :overlay-at (-> rdists x))
   (rlength-stiff  float     :overlay-at (-> rdists y))
   (rlength-mid    float     :overlay-at (-> rdists z))
   (stiffness      float     :overlay-at (-> rdists w))
   (next-clear     uint128   :overlay-at (-> next 0))
   (next-clear-1   int32     :overlay-at (-> next 0))
   (next-clear-2   int32     :overlay-at (-> next 1))
   (next-clear-3   int32     :overlay-at (-> next 2))
   (next-clear-4   int32     :overlay-at (-> next 3))
   (count-clear    uint64    :overlay-at (-> count 0))
   )
  )

;; definition for method 3 of type prototype-bucket
;; INFO: Used lq/sq
(defmethod inspect ((this prototype-bucket))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tin-level: ~D~%" (-> this in-level))
  (format #t "~Tutextures: ~D~%" (-> this utextures))
  (format #t "~Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~Tcount[4] @ #x~X~%" (-> this count))
  (format #t "~Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~Tnext-clear: ~D~%" (-> this next-clear))
  (format #t "~Tcount-clear: ~D~%" (-> this count-clear))
  this
  )

;; definition of type prototype-bucket-shrub
(deftype prototype-bucket-shrub (prototype-bucket)
  ((mod-count          uint16      4)
   (last               dma-packet  4)
   (count-clear-qword  uint128     :overlay-at (-> count 0))
   (last-clear         uint128     :overlay-at (-> last 0))
   )
  )

;; definition for method 3 of type prototype-bucket-shrub
;; INFO: Used lq/sq
(defmethod inspect ((this prototype-bucket-shrub))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tin-level: ~D~%" (-> this in-level))
  (format #t "~Tutextures: ~D~%" (-> this utextures))
  (format #t "~Tgeometry[4] @ #x~X~%" (-> this geometry))
  (format #t "~Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~Tcount[4] @ #x~X~%" (-> this count))
  (format #t "~Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~Tnext-clear: ~D~%" (-> this next-clear))
  (format #t "~Tcount-clear: ~D~%" (-> this count-clear))
  (format #t "~Tmod-count[4] @ #x~X~%" (-> this mod-count))
  (format #t "~Tlast[4] @ #x~X~%" (-> this last))
  (format #t "~Tlast-clear: ~D~%" (-> this last-clear))
  this
  )

;; definition of type prototype-inline-array-shrub
(deftype prototype-inline-array-shrub (drawable)
  ((length  int16                             :offset   6)
   (data    prototype-bucket-shrub  1 :inline :offset  32)
   (_pad    uint32)
   )
  )

;; definition for method 3 of type prototype-inline-array-shrub
(defmethod inspect ((this prototype-inline-array-shrub))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tdata[1] @ #x~X~%" (-> this data))
  this
  )

;; definition of type prototype-array-shrub-info
(deftype prototype-array-shrub-info (basic)
  ((prototype-inline-array-shrub  prototype-inline-array-shrub)
   (wind-vectors                  uint32)
   )
  )

;; definition for method 3 of type prototype-array-shrub-info
(defmethod inspect ((this prototype-array-shrub-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tprototype-inline-array-shrub: ~A~%" (-> this prototype-inline-array-shrub))
  (format #t "~Twind-vectors: #x~X~%" (-> this wind-vectors))
  this
  )

;; definition of type prototype-bucket-tie
(deftype prototype-bucket-tie (prototype-bucket)
  ((generic-count        uint16         4)
   (generic-next         uint32         4)
   (frag-count           uint8          4)
   (index-start          uint8          4)
   (base-qw              uint16         4)
   (envmap-rfade         float)
   (envmap-fade-far      float)
   (envmap-shader        adgif-shader)
   (collide-frag         drawable-inline-array-collide-fragment)
   (tie-colors           time-of-day-palette)
   (data                 uint32         :dynamic)
   (color-index-qwc      uint32         :dynamic)
   (generic-next-clear   uint128          :overlay-at (-> generic-next 0))
   (generic-count-clear  uint128          :overlay-at (-> count 0))
   (geometry-override    prototype-tie  4 :overlay-at (-> geometry 0))
   )
  )

;; definition for method 3 of type prototype-bucket-tie
;; INFO: Used lq/sq
(defmethod inspect ((this prototype-bucket-tie))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tflags: ~D~%" (-> this flags))
  (format #t "~Tin-level: ~D~%" (-> this in-level))
  (format #t "~Tutextures: ~D~%" (-> this utextures))
  (format #t "~Tgeometry[4] @ #x~X~%" (-> this geometry-override))
  (format #t "~Tdists: #<vector @ #x~X>~%" (-> this dists))
  (format #t "~Trdists: #<vector @ #x~X>~%" (-> this rdists))
  (format #t "~Tnext[4] @ #x~X~%" (-> this next))
  (format #t "~Tcount[4] @ #x~X~%" (-> this count))
  (format #t "~Tnear-plane: (meters ~m)~%" (-> this dists x))
  (format #t "~Tnear-stiff: (meters ~m)~%" (-> this dists y))
  (format #t "~Tmid-plane: (meters ~m)~%" (-> this dists z))
  (format #t "~Tfar-plane: (meters ~m)~%" (-> this dists w))
  (format #t "~Trlength-near: ~f~%" (-> this rdists x))
  (format #t "~Trlength-stiff: ~f~%" (-> this rdists y))
  (format #t "~Trlength-mid: ~f~%" (-> this rdists z))
  (format #t "~Tstiffness: ~f~%" (-> this rdists w))
  (format #t "~Tnext-clear: ~D~%" (-> this next-clear))
  (format #t "~Tcount-clear: ~D~%" (-> this count-clear))
  (format #t "~Tgeneric-count[4] @ #x~X~%" (-> this generic-count))
  (format #t "~Tgeneric-next[4] @ #x~X~%" (-> this generic-next))
  (format #t "~Tfrag-count[4] @ #x~X~%" (-> this frag-count))
  (format #t "~Tindex-start[4] @ #x~X~%" (-> this index-start))
  (format #t "~Tbase-qw[4] @ #x~X~%" (-> this base-qw))
  (format #t "~Tenvmap-rfade: ~f~%" (-> this envmap-rfade))
  (format #t "~Tenvmap-fade-far: ~f~%" (-> this envmap-fade-far))
  (format #t "~Tenvmap-shader: #<adgif-shader @ #x~X>~%" (-> this envmap-shader))
  (format #t "~Tcollide-frag: ~A~%" (-> this collide-frag))
  (format #t "~Ttie-colors: ~A~%" (-> this tie-colors))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  (format #t "~Tcolor-index-qwc[0] @ #x~X~%" (-> this data))
  (format #t "~Tgeneric-next-clear: ~D~%" (-> this generic-next-clear))
  (format #t "~Tgeneric-count-clear: ~D~%" (-> this generic-count-clear))
  this
  )

;; definition of type prototype-array-tie
(deftype prototype-array-tie (array)
  ((array-data  prototype-bucket-tie  :dynamic :offset  16)
   )
  (:methods
    (login (_type_) none)
    )
  )

;; definition for method 3 of type prototype-array-tie
(defmethod inspect ((this prototype-array-tie))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Ttype: ~A~%" (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tcontent-type: ~A~%" (-> this content-type))
  this
  )

;; definition of type proxy-prototype-array-tie
(deftype proxy-prototype-array-tie (basic)
  ((prototype-array-tie  prototype-array-tie)
   (wind-vectors         uint32)
   )
  )

;; definition for method 3 of type proxy-prototype-array-tie
(defmethod inspect ((this proxy-prototype-array-tie))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tprototype-array-tie: ~A~%" (-> this prototype-array-tie))
  (format #t "~Twind-vectors: #x~X~%" (-> this wind-vectors))
  this
  )

;; definition of type instance
(deftype instance (drawable)
  ((bucket-index    uint16                            :offset   6)
   (error           (pointer drawable-error)          :offset   8)
   (origin          matrix4h                  :inline)
   (unknown-vector  vector                    :inline :overlay-at (-> origin data 0))
   (wind-index      uint16                            :overlay-at (-> origin data 15))
   )
  )

;; definition for method 3 of type instance
(defmethod inspect ((this instance))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tbucket-index: ~D~%" (-> this bucket-index))
  (format #t "~Torigin: #<matrix4h @ #x~X>~%" (-> this origin))
  (format #t "~Twind-index: ~D~%" (-> this wind-index))
  this
  )

;; failed to figure out what this is:
0
