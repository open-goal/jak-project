;;-*-Lisp-*-
(in-package goal)

;; definition of type sky-color-hour
(deftype sky-color-hour (structure)
  ((snapshot1    int32)
   (snapshot2    int32)
   (morph-start  float)
   (morph-end    float)
   )
  )

;; definition for method 3 of type sky-color-hour
(defmethod inspect ((this sky-color-hour))
  (format #t "[~8x] ~A~%" this 'sky-color-hour)
  (format #t "~Tsnapshot1: ~D~%" (-> this snapshot1))
  (format #t "~Tsnapshot2: ~D~%" (-> this snapshot2))
  (format #t "~Tmorph-start: ~f~%" (-> this morph-start))
  (format #t "~Tmorph-end: ~f~%" (-> this morph-end))
  this
  )

;; definition of type sky-color-day
(deftype sky-color-day (structure)
  ((hour  sky-color-hour  24 :inline)
   )
  )

;; definition for method 3 of type sky-color-day
(defmethod inspect ((this sky-color-day))
  (format #t "[~8x] ~A~%" this 'sky-color-day)
  (format #t "~Thour[24] @ #x~X~%" (-> this hour))
  this
  )

;; definition of type sky-circle-data
(deftype sky-circle-data (structure)
  ((data  vector  17 :inline)
   )
  )

;; definition for method 3 of type sky-circle-data
(defmethod inspect ((this sky-circle-data))
  (format #t "[~8x] ~A~%" this 'sky-circle-data)
  (format #t "~Tdata[17] @ #x~X~%" (-> this data))
  this
  )

;; definition of type sky-sun-data
(deftype sky-sun-data (structure)
  ((data            uint128  4)
   (pos             vector   :inline :overlay-at (-> data 0))
   (r-sun           float            :overlay-at (-> data 1))
   (r-halo          float            :offset  20)
   (r-aurora        float            :offset  24)
   (c-sun-start     rgba             :overlay-at (-> data 2))
   (c-sun-end       rgba             :overlay-at (-> data 3))
   (c-halo-start    rgba             :offset  36)
   (c-halo-end      rgba             :offset  52)
   (c-aurora-start  rgba             :offset  40)
   (c-aurora-end    rgba             :offset  56)
   )
  )

;; definition for method 3 of type sky-sun-data
(defmethod inspect ((this sky-sun-data))
  (format #t "[~8x] ~A~%" this 'sky-sun-data)
  (format #t "~Tdata[4] @ #x~X~%" (-> this data))
  (format #t "~Tpos: #<vector @ #x~X>~%" (-> this data))
  (format #t "~Tr-sun: ~f~%" (-> this r-sun))
  (format #t "~Tr-halo: ~f~%" (-> this r-halo))
  (format #t "~Tr-aurora: ~f~%" (-> this r-aurora))
  (format #t "~Tc-sun-start: ~D~%" (-> this c-sun-start))
  (format #t "~Tc-sun-end: ~D~%" (-> this c-sun-end))
  (format #t "~Tc-halo-start: ~D~%" (-> this c-halo-start))
  (format #t "~Tc-halo-end: ~D~%" (-> this c-halo-end))
  (format #t "~Tc-aurora-start: ~D~%" (-> this c-aurora-start))
  (format #t "~Tc-aurora-end: ~D~%" (-> this c-aurora-end))
  this
  )

;; definition of type sky-moon-data
(deftype sky-moon-data (structure)
  ((data   uint128  2)
   (pos    vector   :inline :overlay-at (-> data 0))
   (scale  vector   :inline :overlay-at (-> data 1))
   )
  )

;; definition for method 3 of type sky-moon-data
(defmethod inspect ((this sky-moon-data))
  (format #t "[~8x] ~A~%" this 'sky-moon-data)
  (format #t "~Tdata[2] @ #x~X~%" (-> this data))
  (format #t "~Tpos: #<vector @ #x~X>~%" (-> this data))
  (format #t "~Tscale: #<vector @ #x~X>~%" (-> this scale))
  this
  )

;; definition of type sky-orbit
(deftype sky-orbit (structure)
  ((high-noon  float)
   (tilt       float)
   (rise       float)
   (dist       float)
   (min-halo   float)
   (max-halo   float)
   )
  :allow-misaligned
  )

;; definition for method 3 of type sky-orbit
(defmethod inspect ((this sky-orbit))
  (format #t "[~8x] ~A~%" this 'sky-orbit)
  (format #t "~Thigh-noon: ~f~%" (-> this high-noon))
  (format #t "~Ttilt: ~f~%" (-> this tilt))
  (format #t "~Trise: ~f~%" (-> this rise))
  (format #t "~Tdist: ~f~%" (-> this dist))
  (format #t "~Tmin-halo: ~f~%" (-> this min-halo))
  (format #t "~Tmax-halo: ~f~%" (-> this max-halo))
  this
  )

;; definition of type sky-upload-data
(deftype sky-upload-data (basic)
  ((circle  sky-circle-data  :inline)
   (sun     sky-sun-data     2 :inline)
   (moon    sky-moon-data    :inline)
   (data    uint128          27 :overlay-at (-> circle data))
   )
  )

;; definition for method 3 of type sky-upload-data
(defmethod inspect ((this sky-upload-data))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tdata[27] @ #x~X~%" (-> this circle))
  (format #t "~Tcircle: #<sky-circle-data @ #x~X>~%" (-> this circle))
  (format #t "~Tsun[2] @ #x~X~%" (-> this sun))
  (format #t "~Tmoon: #<sky-moon-data @ #x~X>~%" (-> this moon))
  this
  )

;; definition of type sky-parms
(deftype sky-parms (basic)
  ((orbit              sky-orbit        3 :inline)
   (upload-data        sky-upload-data  :inline)
   (sun-lights         light-group      :inline)
   (moon-lights        light-group      :inline)
   (default-lights     light-group      :inline)
   (default-vu-lights  vu-lights        :inline)
   )
  (:methods
    (new (symbol type) _type_)
    )
  )

;; definition for method 3 of type sky-parms
(defmethod inspect ((this sky-parms))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Torbit[3] @ #x~X~%" (-> this orbit))
  (format #t "~Tupload-data: #<sky-upload-data @ #x~X>~%" (-> this upload-data))
  (format #t "~Tsun-lights: #<light-group @ #x~X>~%" (-> this sun-lights))
  (format #t "~Tmoon-lights: #<light-group @ #x~X>~%" (-> this moon-lights))
  (format #t "~Tdefault-lights: #<light-group @ #x~X>~%" (-> this default-lights))
  (format #t "~Tdefault-vu-lights: #<vu-lights @ #x~X>~%" (-> this default-vu-lights))
  this
  )

;; definition for method 0 of type sky-parms
(defmethod new sky-parms ((allocation symbol) (type-to-make type))
  (let ((v0-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> v0-0 upload-data type) sky-upload-data)
    v0-0
    )
  )

;; definition for symbol *sky-parms*, type sky-parms
(define *sky-parms* (new 'global 'sky-parms))

;; definition for symbol *sky-upload-data*, type sky-upload-data
(define *sky-upload-data* (new 'global 'sky-upload-data))

;; failed to figure out what this is:
(dotimes (gp-0 17)
  (let ((f30-0 (+ MINUS_PI (* 0.39269906 (the float (logand gp-0 15))))))
    (set! (-> *sky-upload-data* circle data gp-0 x) (* 2.2 (sin-rad f30-0)))
    (set! (-> *sky-upload-data* circle data gp-0 y) (cos-rad f30-0))
    )
  (set! (-> *sky-upload-data* circle data gp-0 z) 0.0)
  (set! (-> *sky-upload-data* circle data gp-0 w) 0.0)
  )

;; definition of type sky-tng-data
(deftype sky-tng-data (basic)
  ((giftag-base   gs-gif-tag  :inline)
   (giftag-roof   gs-gif-tag  :inline)
   (giftag-ocean  gs-gif-tag  :inline)
   (fog           vector      :inline)
   (sky           uint32      8)
   (time          float)
   (off-s-0       uint16)
   (off-t-0       uint16)
   (off-s-1       uint16)
   (off-t-1       uint16)
   )
  )

;; definition for method 3 of type sky-tng-data
(defmethod inspect ((this sky-tng-data))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tgiftag-base: #<qword @ #x~X>~%" (-> this giftag-base))
  (format #t "~Tgiftag-roof: #<qword @ #x~X>~%" (-> this giftag-roof))
  (format #t "~Tgiftag-ocean: #<qword @ #x~X>~%" (-> this giftag-ocean))
  (format #t "~Tfog: #<vector @ #x~X>~%" (-> this fog))
  (format #t "~Tsky[8] @ #x~X~%" (-> this sky))
  (format #t "~Ttime: ~f~%" (-> this time))
  (format #t "~Toff-s-0: ~D~%" (-> this off-s-0))
  (format #t "~Toff-t-0: ~D~%" (-> this off-t-0))
  (format #t "~Toff-s-1: ~D~%" (-> this off-s-1))
  (format #t "~Toff-t-1: ~D~%" (-> this off-t-1))
  this
  )

;; definition of type sky-work
(deftype sky-work (structure)
  ((adgif-tmpl  dma-gif-packet  :inline)
   (draw-tmpl   dma-gif-packet  :inline)
   (blend-tmpl  dma-gif-packet  :inline)
   (sky-data    qword           5 :inline)
   (cloud-data  qword           5 :inline)
   )
  )

;; definition for method 3 of type sky-work
(defmethod inspect ((this sky-work))
  (format #t "[~8x] ~A~%" this 'sky-work)
  (format #t "~Tadgif-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this adgif-tmpl))
  (format #t "~Tdraw-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this draw-tmpl))
  (format #t "~Tblend-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this blend-tmpl))
  (format #t "~Tsky-data[5] @ #x~X~%" (-> this sky-data))
  (format #t "~Tcloud-data[5] @ #x~X~%" (-> this cloud-data))
  this
  )

;; definition of type sky-vertex
(deftype sky-vertex (structure)
  ((pos  vector  :inline)
   (stq  vector  :inline)
   (col  vector  :inline)
   )
  )

;; definition for method 3 of type sky-vertex
;; INFO: this function exists in multiple non-identical object files
(defmethod inspect ((this sky-vertex))
  (format #t "[~8x] ~A~%" this 'sky-vertex)
  (format #t "~Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~Tstq: #<vector @ #x~X>~%" (-> this stq))
  (format #t "~Tcol: #<vector @ #x~X>~%" (-> this col))
  this
  )

;; definition for symbol *sky-drawn*, type symbol
(define *sky-drawn* #f)

;; definition for symbol *cloud-drawn*, type symbol
(define *cloud-drawn* #f)

;; failed to figure out what this is:
0
