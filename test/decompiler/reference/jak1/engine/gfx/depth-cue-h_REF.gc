;;-*-Lisp-*-
(in-package goal)

;; definition of type depth-cue-data
(deftype depth-cue-data (structure)
  ((data       vector  :inline)
   (sharpness  float   :overlay-at (-> data x))
   (alpha      float   :overlay-at (-> data y))
   (distance   float   :overlay-at (-> data z))
   (w          float   :overlay-at (-> data w))
   )
  )

;; definition for method 3 of type depth-cue-data
(defmethod inspect ((this depth-cue-data))
  (format #t "[~8x] ~A~%" this 'depth-cue-data)
  (format #t "~Tdata: #<vector @ #x~X>~%" (-> this data))
  (format #t "~Tsharpness: ~f~%" (-> this data x))
  (format #t "~Talpha: ~f~%" (-> this data y))
  (format #t "~Tdistance: ~f~%" (-> this data z))
  (format #t "~Tw: ~f~%" (-> this data w))
  this
  )

;; definition of type depth-cue-work
(deftype depth-cue-work (structure)
  ((texture-strip-tmpl  dma-gif-packet  :inline)
   (temp-strip-tmpl     dma-gif-packet  :inline)
   (stencil-tmpl        dma-gif-packet  :inline)
   (clear-color         vector4w        :inline)
   (set-color           vector4w        :inline)
   (draw-color          vector4w        :inline)
   (depth               depth-cue-data)
   (front               depth-cue-data)
   )
  )

;; definition for method 3 of type depth-cue-work
(defmethod inspect ((this depth-cue-work))
  (format #t "[~8x] ~A~%" this 'depth-cue-work)
  (format #t "~Ttexture-strip-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this texture-strip-tmpl))
  (format #t "~Ttemp-strip-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this temp-strip-tmpl))
  (format #t "~Tstencil-tmpl: #<dma-gif-packet @ #x~X>~%" (-> this stencil-tmpl))
  (format #t "~Tclear-color: #<vector4w @ #x~X>~%" (-> this clear-color))
  (format #t "~Tset-color: #<vector4w @ #x~X>~%" (-> this set-color))
  (format #t "~Tdraw-color: #<vector4w @ #x~X>~%" (-> this draw-color))
  (format #t "~Tdepth: #<depth-cue-data @ #x~X>~%" (-> this depth))
  (format #t "~Tfront: #<depth-cue-data @ #x~X>~%" (-> this front))
  this
  )

;; failed to figure out what this is:
0
