;;-*-Lisp-*-
(in-package goal)

;; definition of type hud-icon
(deftype hud-icon (basic)
  ((icon    (pointer manipy)  :offset-assert   4)
   (icon-y  int32             :offset-assert   8)
   (icon-x  int32             :offset-assert  12)
   (icon-z  int32             :offset-assert  16)
   (scale-x float             :offset-assert  20)
   (scale-y float             :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type hud-icon
(defmethod inspect hud-icon ((this hud-icon))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Ticon: #x~X~%" (-> this icon))
  (format #t "~Ticon-y: ~D~%" (-> this icon-y))
  (format #t "~Ticon-x: ~D~%" (-> this icon-x))
  (format #t "~Ticon-z: ~D~%" (-> this icon-z))
  (format #t "~Tscale-x: ~f~%" (-> this scale-x))
  (format #t "~Tscale-y: ~f~%" (-> this scale-y))
  this
  )

;; definition of type hud-particle
(deftype hud-particle (basic)
  ((part     sparticle-launch-control         :offset-assert   4)
   (init-pos vector                   :inline :offset-assert  16)
   (pos      vector                   :inline :offset-assert  32)
   (prev-pos vector                   :inline :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type hud-particle
(defmethod inspect hud-particle ((this hud-particle))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tpart: ~A~%" (-> this part))
  (format #t "~Tinit-pos: #<vector @ #x~X>~%" (-> this init-pos))
  (format #t "~Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~Tprev-pos: #<vector @ #x~X>~%" (-> this prev-pos))
  this
  )

;; definition of type hud
(deftype hud (process)
  ((value                  int32          :offset-assert 112)
   (value2                 int32          :offset-assert 116)
   (target-value           int32          :offset-assert 120)
   (last-increment-time    time-frame     :offset-assert 128)
   (last-target-equal-time time-frame     :offset-assert 136)
   (offset                 int32          :offset-assert 144)
   (y-offset               int32          :offset-assert 148)
   (next-y-offset          int32          :offset-assert 152)
   (x-sgn                  int32          :offset-assert 156)
   (y-sgn                  int32          :offset-assert 160)
   (text-x                 int32          :offset-assert 164)
   (text-y                 int32          :offset-assert 168)
   (friend                 int32          :offset-assert 172)
   (first-init             symbol         :offset-assert 176)
   (increment-on-event     symbol         :offset-assert 180)
   (skip-particle          int32          :offset-assert 184)
   (disable                symbol         :offset-assert 188)
   (force-on-screen        symbol         :offset-assert 192)
   (deactivate-when-hidden symbol         :offset-assert 196)
   (trigger-time           time-frame     :offset-assert 200)
   (last-hide-time         time-frame     :offset-assert 208)
   (nb-of-icons            int32          :offset-assert 216)
   (icons                  hud-icon     6 :offset-assert 220)
   (max-nb-of-particles    int32          :offset-assert 244)
   (nb-of-particles        int32          :offset-assert 248)
   (particles              hud-particle 7 :offset-assert 252)
   )
  :heap-base #xb0
  :method-count-assert 27
  :size-assert         #x118
  :flag-assert         #x1b00b00118
  (:methods
    (hidden? (_type_) symbol 14)
    (draw-hud (_type_) none 15)
    (tally-value (_type_ int int) none 16)
    (draw-icons (_type_) none 17)
    (draw-particles (_type_) none 18)
    (hud-update (_type_) none 19)
    (init-particles! (_type_ int) none 20)
    (get-icon-pos-x (_type_) int 21)
    (get-icon-pos-y (_type_) int 22)
    (hud-method-23 (_type_) none 23)
    (set-pos-and-scale (_type_ symbol symbol) none 24)
    (get-icon-scale-x (_type_) float 25)
    (get-icon-scale-y (_type_) float 26)
    )
  (:states
    hud-arriving
    hud-hidden
    hud-in
    (hud-leaving int)
    )
  )

;; definition for method 3 of type hud
(defmethod inspect hud ((this hud))
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tvalue: ~D~%" (-> this value))
  (format #t "~T~Tvalue2: ~D~%" (-> this value2))
  (format #t "~T~Ttarget-value: ~D~%" (-> this target-value))
  (format #t "~T~Tlast-increment-time: ~D~%" (-> this last-increment-time))
  (format #t "~T~Tlast-target-equal-time: ~D~%" (-> this last-target-equal-time))
  (format #t "~T~Toffset: ~D~%" (-> this offset))
  (format #t "~T~Ty-offset: ~D~%" (-> this y-offset))
  (format #t "~T~Tnext-y-offset: ~D~%" (-> this next-y-offset))
  (format #t "~T~Tx-sgn: ~D~%" (-> this x-sgn))
  (format #t "~T~Ty-sgn: ~D~%" (-> this y-sgn))
  (format #t "~T~Ttext-x: ~D~%" (-> this text-x))
  (format #t "~T~Ttext-y: ~D~%" (-> this text-y))
  (format #t "~T~Tfriend: ~D~%" (-> this friend))
  (format #t "~T~Tfirst-init: ~A~%" (-> this first-init))
  (format #t "~T~Tincrement-on-event: ~A~%" (-> this increment-on-event))
  (format #t "~T~Tskip-particle: ~D~%" (-> this skip-particle))
  (format #t "~T~Tdisable: ~A~%" (-> this disable))
  (format #t "~T~Tforce-on-screen: ~A~%" (-> this force-on-screen))
  (format #t "~T~Tdeactivate-when-hidden: ~A~%" (-> this deactivate-when-hidden))
  (format #t "~T~Ttrigger-time: ~D~%" (-> this trigger-time))
  (format #t "~T~Tlast-hide-time: ~D~%" (-> this last-hide-time))
  (format #t "~T~Tnb-of-icons: ~D~%" (-> this nb-of-icons))
  (format #t "~T~Ticons[6] @ #x~X~%" (-> this icons))
  (format #t "~T~Tmax-nb-of-particles: ~D~%" (-> this max-nb-of-particles))
  (format #t "~T~Tnb-of-particles: ~D~%" (-> this nb-of-particles))
  (format #t "~T~Tparticles[7] @ #x~X~%" (-> this particles))
  this
  )

;; definition of type hud-parts
(deftype hud-parts (structure)
  ((pickups    (pointer hud-pickups)      :offset-assert   0)
   (money      (pointer hud-money)        :offset-assert   4)
   (fuel-cell  (pointer hud-fuel-cell)    :offset-assert   8)
   (health     (pointer hud-health)       :offset-assert  12)
   (buzzers    (pointer hud-buzzers)      :offset-assert  16)
   (power      (pointer hud-power)        :offset-assert  20)
   (bike-speed (pointer hud-bike-speed)   :offset-assert  24)
   (bike-heat  (pointer hud-bike-heat)    :offset-assert  28)
   (money-all  (pointer hud-money-all)    :offset-assert  32)
   (parts      (pointer hud)            9 :offset          0)
   )
  :method-count-assert 9
  :size-assert         #x24
  :flag-assert         #x900000024
  )

;; definition for method 3 of type hud-parts
(defmethod inspect hud-parts ((this hud-parts))
  (format #t "[~8x] ~A~%" this 'hud-parts)
  (format #t "~Tdata[9] @ #x~X~%" (&-> this pickups))
  (format #t "~Tpickups: #x~X~%" (-> this pickups))
  (format #t "~Tmoney: #x~X~%" (-> this money))
  (format #t "~Tfuel-cell: #x~X~%" (-> this fuel-cell))
  (format #t "~Thealth: #x~X~%" (-> this health))
  (format #t "~Tbuzzers: #x~X~%" (-> this buzzers))
  (format #t "~Tpower: #x~X~%" (-> this power))
  (format #t "~Tbike-speed: #x~X~%" (-> this bike-speed))
  (format #t "~Tbike-heat: #x~X~%" (-> this bike-heat))
  (format #t "~Tmoney-all: #x~X~%" (-> this money-all))
  this
  )

;; definition for symbol *hud-parts*, type hud-parts
(define *hud-parts* (new 'static 'hud-parts
                      :pickups #f
                      :money #f
                      :fuel-cell #f
                      :health #f
                      :buzzers #f
                      :power #f
                      :bike-speed #f
                      :bike-heat #f
                      :money-all #f
                      )
        )

;; failed to figure out what this is:
0
