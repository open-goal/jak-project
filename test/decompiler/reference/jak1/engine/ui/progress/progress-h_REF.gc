;;-*-Lisp-*-
(in-package goal)

;; definition of type count-info
(deftype count-info (structure)
  ((money-count   int32)
   (buzzer-count  int32)
   )
  :pack-me
  )

;; definition for method 3 of type count-info
(defmethod inspect ((this count-info))
  (format #t "[~8x] ~A~%" this 'count-info)
  (format #t "~Tmoney-count: ~D~%" (-> this money-count))
  (format #t "~Tbuzzer-count: ~D~%" (-> this buzzer-count))
  this
  )

;; definition of type game-count-info
(deftype game-count-info (basic)
  ((length  int32)
   (data    count-info  :inline :dynamic)
   )
  )

;; definition for method 3 of type game-count-info
(defmethod inspect ((this game-count-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; definition of type task-info-data
(deftype task-info-data (basic)
  ((task-id                   game-task)
   (task-name                 text-id  4)
   (text-index-when-resolved  int32)
   )
  )

;; definition for method 3 of type task-info-data
(defmethod inspect ((this task-info-data))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Ttask-id: ~D~%" (-> this task-id))
  (format #t "~Ttask-name[4] @ #x~X~%" (-> this task-name))
  (format #t "~Ttext-index-when-resolved: ~D~%" (-> this text-index-when-resolved))
  this
  )

;; definition of type level-tasks-info
(deftype level-tasks-info (basic)
  ((level-name-id      text-id)
   (text-group-index   int32)
   (nb-of-tasks        int32)
   (buzzer-task-index  int32)
   (task-info          task-info-data  8)
   )
  )

;; definition for method 3 of type level-tasks-info
(defmethod inspect ((this level-tasks-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlevel-name-id: ~D~%" (-> this level-name-id))
  (format #t "~Ttext-group-index: ~D~%" (-> this text-group-index))
  (format #t "~Tnb-of-tasks: ~D~%" (-> this nb-of-tasks))
  (format #t "~Tbuzzer-task-index: ~D~%" (-> this buzzer-task-index))
  (format #t "~Ttask-info[8] @ #x~X~%" (-> this task-info))
  this
  )

;; definition of type game-option
(deftype game-option (basic)
  ((option-type      game-option-type)
   (name             text-id)
   (scale            symbol)
   (param1           float)
   (param2           float)
   (param3           game-option-menu)
   (value-to-modify  pointer)
   )
  )

;; definition for method 3 of type game-option
(defmethod inspect ((this game-option))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Toption-type: ~D~%" (-> this option-type))
  (format #t "~Tname: ~D~%" (-> this name))
  (format #t "~Tscale: ~A~%" (-> this scale))
  (format #t "~Tparam1: ~f~%" (-> this param1))
  (format #t "~Tparam2: ~f~%" (-> this param2))
  (format #t "~Tparam3: ~D~%" (-> this param3))
  (format #t "~Tvalue-to-modify: #x~X~%" (-> this value-to-modify))
  this
  )

;; definition of type progress
(deftype progress (process)
  ((current-debug-string          int32)
   (current-debug-language        int32)
   (current-debug-group           int32)
   (in-out-position               int32)
   (display-state                 progress-screen)
   (next-display-state            progress-screen)
   (option-index                  int32)
   (selected-option               basic)
   (completion-percentage         float)
   (ready-to-run                  basic)
   (display-level-index           int32)
   (next-level-index              int32)
   (task-index                    int32)
   (in-transition                 basic)
   (last-in-transition            basic)
   (force-transition              basic)
   (stat-transition               basic)
   (level-transition              int32)
   (language-selection            language-enum)
   (language-direction            symbol)
   (language-transition           basic)
   (language-x-offset             int32)
   (sides-x-scale                 float)
   (sides-y-scale                 float)
   (left-x-offset                 int32)
   (right-x-offset                int32)
   (button-scale                  float)
   (slot-scale                    float)
   (left-side-x-scale             float)
   (left-side-y-scale             float)
   (right-side-x-scale            float)
   (right-side-y-scale            float)
   (small-orb-y-offset            int32)
   (big-orb-y-offset              int32)
   (transition-offset             int32)
   (transition-offset-invert      int32)
   (transition-percentage         float)
   (transition-percentage-invert  float)
   (transition-speed              float)
   (total-nb-of-power-cells       int32)
   (total-nb-of-orbs              int32)
   (total-nb-of-buzzers           int32)
   (card-info                     mc-slot-info)
   (last-option-index-change      time-frame)
   (video-mode-timeout            time-frame)
   (display-state-stack           progress-screen  5)
   (option-index-stack            int32            5)
   (display-state-pos             int32)
   (nb-of-icons                   int32)
   (icons                         hud-icon         6)
   (max-nb-of-particles           int32)
   (nb-of-particles               int32)
   (particles                     hud-particle     40)
   (particle-state                int32            40)
   )
  (:methods
    (progress-method-14 (_type_) none)
    (progress-method-15 (_type_) none)
    (progress-method-16 (_type_) none)
    (draw-progress (_type_) none)
    (progress-method-18 () none)
    (visible? (_type_) symbol)
    (hidden? (_type_) symbol)
    (adjust-sprites (_type_) none)
    (adjust-icons (_type_) none)
    (adjust-ratios (_type_ symbol symbol) none)
    (draw-fuel-cell-screen (_type_ int) none)
    (draw-money-screen (_type_ int) none)
    (draw-buzzer-screen (_type_ int) none)
    (draw-notice-screen (_type_) none)
    (draw-options (_type_ int int float) none)
    (respond-common (_type_) none)
    (respond-progress (_type_) none)
    (respond-memcard (_type_) none)
    (can-go-back? (_type_) symbol)
    (initialize-icons (_type_) none)
    (initialize-particles (_type_) none)
    (draw-memcard-storage-error (_type_ font-context) none)
    (draw-memcard-data-exists (_type_ font-context) none)
    (draw-memcard-no-data (_type_ font-context) none)
    (draw-memcard-accessing (_type_ font-context) none)
    (draw-memcard-insert (_type_ font-context) none)
    (draw-memcard-file-select (_type_ font-context) none)
    (draw-memcard-auto-save-error (_type_ font-context) none)
    (draw-memcard-removed (_type_ font-context) none)
    (draw-memcard-error (_type_ font-context) none)
    (progress-method-44 (_type_) none)
    (push! (_type_) none)
    (pop! (_type_) none)
    (progress-method-47 (_type_) none)
    (enter! (_type_ progress-screen int) none)
    (draw-memcard-format (_type_ font-context) none)
    (draw-auto-save (_type_ font-context) none)
    (set-transition-progress! (_type_ int) none)
    (set-transition-speed! (_type_) none)
    (set-memcard-screen (_type_ progress-screen) progress-screen)
    (draw-pal-change-to-60hz (_type_ font-context) none)
    (draw-pal-now-60hz (_type_ font-context) none)
    (draw-no-disc (_type_ font-context) none)
    (draw-bad-disc (_type_ font-context) none)
    (draw-quit (_type_ font-context) none)
    )
  (:states
    progress-coming-in
    progress-debug
    progress-going-out
    progress-gone
    progress-normal
    progress-waiting
    )
  )

;; definition for method 3 of type progress
(defmethod inspect ((this progress))
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tcurrent-debug-string: ~D~%" (-> this current-debug-string))
  (format #t "~T~Tcurrent-debug-language: ~D~%" (-> this current-debug-language))
  (format #t "~T~Tcurrent-debug-group: ~D~%" (-> this current-debug-group))
  (format #t "~T~Tin-out-position: ~D~%" (-> this in-out-position))
  (format #t "~T~Tdisplay-state: ~D~%" (-> this display-state))
  (format #t "~T~Tnext-display-state: ~D~%" (-> this next-display-state))
  (format #t "~T~Toption-index: ~D~%" (-> this option-index))
  (format #t "~T~Tselected-option: ~A~%" (-> this selected-option))
  (format #t "~T~Tcompletion-percentage: ~f~%" (-> this completion-percentage))
  (format #t "~T~Tready-to-run: ~A~%" (-> this ready-to-run))
  (format #t "~T~Tdisplay-level-index: ~D~%" (-> this display-level-index))
  (format #t "~T~Tnext-level-index: ~D~%" (-> this next-level-index))
  (format #t "~T~Ttask-index: ~D~%" (-> this task-index))
  (format #t "~T~Tin-transition: ~A~%" (-> this in-transition))
  (format #t "~T~Tlast-in-transition: ~A~%" (-> this last-in-transition))
  (format #t "~T~Tforce-transition: ~A~%" (-> this force-transition))
  (format #t "~T~Tstat-transition: ~A~%" (-> this stat-transition))
  (format #t "~T~Tlevel-transition: ~D~%" (-> this level-transition))
  (format #t "~T~Tlanguage-selection: ~D~%" (-> this language-selection))
  (format #t "~T~Tlanguage-direction: ~A~%" (-> this language-direction))
  (format #t "~T~Tlanguage-transition: ~A~%" (-> this language-transition))
  (format #t "~T~Tlanguage-x-offset: ~D~%" (-> this language-x-offset))
  (format #t "~T~Tsides-x-scale: ~f~%" (-> this sides-x-scale))
  (format #t "~T~Tsides-y-scale: ~f~%" (-> this sides-y-scale))
  (format #t "~T~Tleft-x-offset: ~D~%" (-> this left-x-offset))
  (format #t "~T~Tright-x-offset: ~D~%" (-> this right-x-offset))
  (format #t "~T~Tbutton-scale: ~f~%" (-> this button-scale))
  (format #t "~T~Tslot-scale: ~f~%" (-> this slot-scale))
  (format #t "~T~Tleft-side-x-scale: ~f~%" (-> this left-side-x-scale))
  (format #t "~T~Tleft-side-y-scale: ~f~%" (-> this left-side-y-scale))
  (format #t "~T~Tright-side-x-scale: ~f~%" (-> this right-side-x-scale))
  (format #t "~T~Tright-side-y-scale: ~f~%" (-> this right-side-y-scale))
  (format #t "~T~Tsmall-orb-y-offset: ~D~%" (-> this small-orb-y-offset))
  (format #t "~T~Tbig-orb-y-offset: ~D~%" (-> this big-orb-y-offset))
  (format #t "~T~Ttransition-offset: ~D~%" (-> this transition-offset))
  (format #t "~T~Ttransition-offset-invert: ~D~%" (-> this transition-offset-invert))
  (format #t "~T~Ttransition-percentage: ~f~%" (-> this transition-percentage))
  (format #t "~T~Ttransition-percentage-invert: ~f~%" (-> this transition-percentage-invert))
  (format #t "~T~Ttransition-speed: ~f~%" (-> this transition-speed))
  (format #t "~T~Ttotal-nb-of-power-cells: ~D~%" (-> this total-nb-of-power-cells))
  (format #t "~T~Ttotal-nb-of-orbs: ~D~%" (-> this total-nb-of-orbs))
  (format #t "~T~Ttotal-nb-of-buzzers: ~D~%" (-> this total-nb-of-buzzers))
  (format #t "~T~Tcard-info: #<mc-slot-info @ #x~X>~%" (-> this card-info))
  (format #t "~T~Tlast-option-index-change: ~D~%" (-> this last-option-index-change))
  (format #t "~T~Tvideo-mode-timeout: ~D~%" (-> this video-mode-timeout))
  (format #t "~T~Tdisplay-state-stack[5] @ #x~X~%" (-> this display-state-stack))
  (format #t "~T~Toption-index-stack[5] @ #x~X~%" (-> this option-index-stack))
  (format #t "~T~Tdisplay-state-pos: ~D~%" (-> this display-state-pos))
  (format #t "~T~Tnb-of-icons: ~D~%" (-> this nb-of-icons))
  (format #t "~T~Ticons[6] @ #x~X~%" (-> this icons))
  (format #t "~T~Tmax-nb-of-particles: ~D~%" (-> this max-nb-of-particles))
  (format #t "~T~Tnb-of-particles: ~D~%" (-> this nb-of-particles))
  (format #t "~T~Tparticles[40] @ #x~X~%" (-> this particles))
  (format #t "~T~Tparticle-state[40] @ #x~X~%" (-> this particle-state))
  this
  )

;; definition for symbol *progress-process*, type (pointer progress)
(define *progress-process* (the-as (pointer progress) #f))

;; definition for symbol *progress-last-task-index*, type int
(define *progress-last-task-index* 0)

;; failed to figure out what this is:
0
