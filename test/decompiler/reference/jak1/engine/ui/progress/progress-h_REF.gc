;;-*-Lisp-*-
(in-package goal)

;; definition of type count-info
(deftype count-info (structure)
  ((money-count  int32  :offset-assert   0)
   (buzzer-count int32  :offset-assert   4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type count-info
(defmethod inspect count-info ((this count-info))
  (format #t "[~8x] ~A~%" this 'count-info)
  (format #t "~Tmoney-count: ~D~%" (-> this money-count))
  (format #t "~Tbuzzer-count: ~D~%" (-> this buzzer-count))
  this
  )

;; definition of type game-count-info
(deftype game-count-info (basic)
  ((length int32                       :offset-assert   4)
   (data   count-info :inline :dynamic :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type game-count-info
(defmethod inspect game-count-info ((this game-count-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; definition of type task-info-data
(deftype task-info-data (basic)
  ((task-id                  game-task   :offset-assert   4)
   (task-name                text-id   4 :offset-assert   8)
   (text-index-when-resolved int32       :offset-assert  24)
   )
  :method-count-assert 9
  :size-assert         #x1c
  :flag-assert         #x90000001c
  )

;; definition for method 3 of type task-info-data
(defmethod inspect task-info-data ((this task-info-data))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Ttask-id: ~D~%" (-> this task-id))
  (format #t "~Ttask-name[4] @ #x~X~%" (-> this task-name))
  (format #t "~Ttext-index-when-resolved: ~D~%" (-> this text-index-when-resolved))
  this
  )

;; definition of type level-tasks-info
(deftype level-tasks-info (basic)
  ((level-name-id     text-id          :offset-assert   4)
   (text-group-index  int32            :offset-assert   8)
   (nb-of-tasks       int32            :offset-assert  12)
   (buzzer-task-index int32            :offset-assert  16)
   (task-info         task-info-data 8 :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x34
  :flag-assert         #x900000034
  )

;; definition for method 3 of type level-tasks-info
(defmethod inspect level-tasks-info ((this level-tasks-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlevel-name-id: ~D~%" (-> this level-name-id))
  (format #t "~Ttext-group-index: ~D~%" (-> this text-group-index))
  (format #t "~Tnb-of-tasks: ~D~%" (-> this nb-of-tasks))
  (format #t "~Tbuzzer-task-index: ~D~%" (-> this buzzer-task-index))
  (format #t "~Ttask-info[8] @ #x~X~%" (-> this task-info))
  this
  )

;; definition of type game-option
(deftype game-option (basic)
  ((option-type     game-option-type  :offset-assert   8)
   (name            text-id           :offset-assert  16)
   (scale           symbol            :offset-assert  20)
   (param1          float             :offset-assert  24)
   (param2          float             :offset-assert  28)
   (param3          game-option-menu  :offset-assert  32)
   (value-to-modify pointer           :offset-assert  36)
   )
  :method-count-assert 9
  :size-assert         #x28
  :flag-assert         #x900000028
  )

;; definition for method 3 of type game-option
(defmethod inspect game-option ((this game-option))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Toption-type: ~D~%" (-> this option-type))
  (format #t "~Tname: ~D~%" (-> this name))
  (format #t "~Tscale: ~A~%" (-> this scale))
  (format #t "~Tparam1: ~f~%" (-> this param1))
  (format #t "~Tparam2: ~f~%" (-> this param2))
  (format #t "~Tparam3: ~D~%" (-> this param3))
  (format #t "~Tvalue-to-modify: #x~X~%" (-> this value-to-modify))
  this
  )

;; definition of type progress
(deftype progress (process)
  ((current-debug-string         int32              :offset-assert 112)
   (current-debug-language       int32              :offset-assert 116)
   (current-debug-group          int32              :offset-assert 120)
   (in-out-position              int32              :offset-assert 124)
   (display-state                progress-screen    :offset-assert 128)
   (next-display-state           progress-screen    :offset-assert 136)
   (option-index                 int32              :offset-assert 144)
   (selected-option              basic              :offset-assert 148)
   (completion-percentage        float              :offset-assert 152)
   (ready-to-run                 basic              :offset-assert 156)
   (display-level-index          int32              :offset-assert 160)
   (next-level-index             int32              :offset-assert 164)
   (task-index                   int32              :offset-assert 168)
   (in-transition                basic              :offset-assert 172)
   (last-in-transition           basic              :offset-assert 176)
   (force-transition             basic              :offset-assert 180)
   (stat-transition              basic              :offset-assert 184)
   (level-transition             int32              :offset-assert 188)
   (language-selection           language-enum      :offset-assert 192)
   (language-direction           symbol             :offset-assert 200)
   (language-transition          basic              :offset-assert 204)
   (language-x-offset            int32              :offset-assert 208)
   (sides-x-scale                float              :offset-assert 212)
   (sides-y-scale                float              :offset-assert 216)
   (left-x-offset                int32              :offset-assert 220)
   (right-x-offset               int32              :offset-assert 224)
   (button-scale                 float              :offset-assert 228)
   (slot-scale                   float              :offset-assert 232)
   (left-side-x-scale            float              :offset-assert 236)
   (left-side-y-scale            float              :offset-assert 240)
   (right-side-x-scale           float              :offset-assert 244)
   (right-side-y-scale           float              :offset-assert 248)
   (small-orb-y-offset           int32              :offset-assert 252)
   (big-orb-y-offset             int32              :offset-assert 256)
   (transition-offset            int32              :offset-assert 260)
   (transition-offset-invert     int32              :offset-assert 264)
   (transition-percentage        float              :offset-assert 268)
   (transition-percentage-invert float              :offset-assert 272)
   (transition-speed             float              :offset-assert 276)
   (total-nb-of-power-cells      int32              :offset-assert 280)
   (total-nb-of-orbs             int32              :offset-assert 284)
   (total-nb-of-buzzers          int32              :offset-assert 288)
   (card-info                    mc-slot-info       :offset-assert 292)
   (last-option-index-change     time-frame         :offset-assert 296)
   (video-mode-timeout           time-frame         :offset-assert 304)
   (display-state-stack          progress-screen 5  :offset-assert 312)
   (option-index-stack           int32           5  :offset-assert 352)
   (display-state-pos            int32              :offset-assert 372)
   (nb-of-icons                  int32              :offset-assert 376)
   (icons                        hud-icon        6  :offset-assert 380)
   (max-nb-of-particles          int32              :offset-assert 404)
   (nb-of-particles              int32              :offset-assert 408)
   (particles                    hud-particle    40 :offset-assert 412)
   (particle-state               int32           40 :offset-assert 572)
   )
  :heap-base #x270
  :method-count-assert 59
  :size-assert         #x2dc
  :flag-assert         #x3b027002dc
  (:methods
    (progress-method-14 (_type_) none 14)
    (progress-method-15 (_type_) none 15)
    (progress-method-16 (_type_) none 16)
    (draw-progress (_type_) none 17)
    (progress-method-18 () none 18)
    (visible? (_type_) symbol 19)
    (hidden? (_type_) symbol 20)
    (adjust-sprites (_type_) none 21)
    (adjust-icons (_type_) none 22)
    (adjust-ratios (_type_ symbol symbol) none 23)
    (draw-fuel-cell-screen (_type_ int) none 24)
    (draw-money-screen (_type_ int) none 25)
    (draw-buzzer-screen (_type_ int) none 26)
    (draw-notice-screen (_type_) none 27)
    (draw-options (_type_ int int float) none 28)
    (respond-common (_type_) none 29)
    (respond-progress (_type_) none 30)
    (respond-memcard (_type_) none 31)
    (can-go-back? (_type_) symbol 32)
    (initialize-icons (_type_) none 33)
    (initialize-particles (_type_) none 34)
    (draw-memcard-storage-error (_type_ font-context) none 35)
    (draw-memcard-data-exists (_type_ font-context) none 36)
    (draw-memcard-no-data (_type_ font-context) none 37)
    (draw-memcard-accessing (_type_ font-context) none 38)
    (draw-memcard-insert (_type_ font-context) none 39)
    (draw-memcard-file-select (_type_ font-context) none 40)
    (draw-memcard-auto-save-error (_type_ font-context) none 41)
    (draw-memcard-removed (_type_ font-context) none 42)
    (draw-memcard-error (_type_ font-context) none 43)
    (progress-method-44 (_type_) none 44)
    (push! (_type_) none 45)
    (pop! (_type_) none 46)
    (progress-method-47 (_type_) none 47)
    (enter! (_type_ progress-screen int) none 48)
    (draw-memcard-format (_type_ font-context) none 49)
    (draw-auto-save (_type_ font-context) none 50)
    (set-transition-progress! (_type_ int) none 51)
    (set-transition-speed! (_type_) none 52)
    (set-memcard-screen (_type_ progress-screen) progress-screen 53)
    (draw-pal-change-to-60hz (_type_ font-context) none 54)
    (draw-pal-now-60hz (_type_ font-context) none 55)
    (draw-no-disc (_type_ font-context) none 56)
    (draw-bad-disc (_type_ font-context) none 57)
    (draw-quit (_type_ font-context) none 58)
    )
  (:states
    progress-coming-in
    progress-debug
    progress-going-out
    progress-gone
    progress-normal
    progress-waiting
    )
  )

;; definition for method 3 of type progress
(defmethod inspect progress ((this progress))
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tcurrent-debug-string: ~D~%" (-> this current-debug-string))
  (format #t "~T~Tcurrent-debug-language: ~D~%" (-> this current-debug-language))
  (format #t "~T~Tcurrent-debug-group: ~D~%" (-> this current-debug-group))
  (format #t "~T~Tin-out-position: ~D~%" (-> this in-out-position))
  (format #t "~T~Tdisplay-state: ~D~%" (-> this display-state))
  (format #t "~T~Tnext-display-state: ~D~%" (-> this next-display-state))
  (format #t "~T~Toption-index: ~D~%" (-> this option-index))
  (format #t "~T~Tselected-option: ~A~%" (-> this selected-option))
  (format #t "~T~Tcompletion-percentage: ~f~%" (-> this completion-percentage))
  (format #t "~T~Tready-to-run: ~A~%" (-> this ready-to-run))
  (format #t "~T~Tdisplay-level-index: ~D~%" (-> this display-level-index))
  (format #t "~T~Tnext-level-index: ~D~%" (-> this next-level-index))
  (format #t "~T~Ttask-index: ~D~%" (-> this task-index))
  (format #t "~T~Tin-transition: ~A~%" (-> this in-transition))
  (format #t "~T~Tlast-in-transition: ~A~%" (-> this last-in-transition))
  (format #t "~T~Tforce-transition: ~A~%" (-> this force-transition))
  (format #t "~T~Tstat-transition: ~A~%" (-> this stat-transition))
  (format #t "~T~Tlevel-transition: ~D~%" (-> this level-transition))
  (format #t "~T~Tlanguage-selection: ~D~%" (-> this language-selection))
  (format #t "~T~Tlanguage-direction: ~A~%" (-> this language-direction))
  (format #t "~T~Tlanguage-transition: ~A~%" (-> this language-transition))
  (format #t "~T~Tlanguage-x-offset: ~D~%" (-> this language-x-offset))
  (format #t "~T~Tsides-x-scale: ~f~%" (-> this sides-x-scale))
  (format #t "~T~Tsides-y-scale: ~f~%" (-> this sides-y-scale))
  (format #t "~T~Tleft-x-offset: ~D~%" (-> this left-x-offset))
  (format #t "~T~Tright-x-offset: ~D~%" (-> this right-x-offset))
  (format #t "~T~Tbutton-scale: ~f~%" (-> this button-scale))
  (format #t "~T~Tslot-scale: ~f~%" (-> this slot-scale))
  (format #t "~T~Tleft-side-x-scale: ~f~%" (-> this left-side-x-scale))
  (format #t "~T~Tleft-side-y-scale: ~f~%" (-> this left-side-y-scale))
  (format #t "~T~Tright-side-x-scale: ~f~%" (-> this right-side-x-scale))
  (format #t "~T~Tright-side-y-scale: ~f~%" (-> this right-side-y-scale))
  (format #t "~T~Tsmall-orb-y-offset: ~D~%" (-> this small-orb-y-offset))
  (format #t "~T~Tbig-orb-y-offset: ~D~%" (-> this big-orb-y-offset))
  (format #t "~T~Ttransition-offset: ~D~%" (-> this transition-offset))
  (format #t "~T~Ttransition-offset-invert: ~D~%" (-> this transition-offset-invert))
  (format #t "~T~Ttransition-percentage: ~f~%" (-> this transition-percentage))
  (format #t "~T~Ttransition-percentage-invert: ~f~%" (-> this transition-percentage-invert))
  (format #t "~T~Ttransition-speed: ~f~%" (-> this transition-speed))
  (format #t "~T~Ttotal-nb-of-power-cells: ~D~%" (-> this total-nb-of-power-cells))
  (format #t "~T~Ttotal-nb-of-orbs: ~D~%" (-> this total-nb-of-orbs))
  (format #t "~T~Ttotal-nb-of-buzzers: ~D~%" (-> this total-nb-of-buzzers))
  (format #t "~T~Tcard-info: #<mc-slot-info @ #x~X>~%" (-> this card-info))
  (format #t "~T~Tlast-option-index-change: ~D~%" (-> this last-option-index-change))
  (format #t "~T~Tvideo-mode-timeout: ~D~%" (-> this video-mode-timeout))
  (format #t "~T~Tdisplay-state-stack[5] @ #x~X~%" (-> this display-state-stack))
  (format #t "~T~Toption-index-stack[5] @ #x~X~%" (-> this option-index-stack))
  (format #t "~T~Tdisplay-state-pos: ~D~%" (-> this display-state-pos))
  (format #t "~T~Tnb-of-icons: ~D~%" (-> this nb-of-icons))
  (format #t "~T~Ticons[6] @ #x~X~%" (-> this icons))
  (format #t "~T~Tmax-nb-of-particles: ~D~%" (-> this max-nb-of-particles))
  (format #t "~T~Tnb-of-particles: ~D~%" (-> this nb-of-particles))
  (format #t "~T~Tparticles[40] @ #x~X~%" (-> this particles))
  (format #t "~T~Tparticle-state[40] @ #x~X~%" (-> this particle-state))
  this
  )

;; definition for symbol *progress-process*, type (pointer progress)
(define *progress-process* (the-as (pointer progress) #f))

;; definition for symbol *progress-last-task-index*, type int
(define *progress-last-task-index* 0)

;; failed to figure out what this is:
0
