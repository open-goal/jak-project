;;-*-Lisp-*-
(in-package goal)

;; definition of type drawable-ambient
(deftype drawable-ambient (drawable)
  ((ambient  entity-ambient  :offset   8)
   )
  (:methods
    (execute-ambient (_type_ vector) none)
    )
  )

;; definition for method 3 of type drawable-ambient
(defmethod inspect ((this drawable-ambient))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tid: ~D~%" (-> this id))
  (format #t "~Tbsphere: ~`vector`P~%" (-> this bsphere))
  (format #t "~Tambient: ~A~%" (-> this ambient))
  this
  )

;; definition of type drawable-tree-ambient
(deftype drawable-tree-ambient (drawable-tree)
  ()
  )

;; definition of type drawable-inline-array-ambient
(deftype drawable-inline-array-ambient (drawable-inline-array)
  ((data  drawable-ambient  1 :inline)
   (pad   uint32)
   )
  )

;; definition for method 10 of type drawable-tree-ambient
;; INFO: Return type mismatch int vs none.
(defmethod draw ((this drawable-tree-ambient) (arg0 drawable-tree-ambient) (arg1 display-frame))
  0
  (none)
  )

;; definition for method 16 of type drawable-tree-ambient
(defmethod unpack-vis ((this drawable-tree-ambient) (arg0 (pointer int8)) (arg1 (pointer int8)))
  arg1
  )

;; definition of type level-hint
(deftype level-hint (process)
  ((text-id-to-display  text-id)
   (sound-to-play       string)
   (trans               vector)
   (sound-id            sound-id)
   (mode                symbol)
   (total-time          time-frame)
   (total-off-time      time-frame)
   (last-time           time-frame)
   (voicebox            handle)
   )
  (:methods
    (print-text (_type_) none)
    (appeared-for-long-enough? (_type_) symbol)
    )
  (:states
    (level-hint-ambient-sound string)
    (level-hint-error string string)
    level-hint-exit
    level-hint-normal
    (level-hint-sidekick string)
    )
  )

;; definition for method 3 of type level-hint
(defmethod inspect ((this level-hint))
  (let ((t9-0 (method-of-type process inspect)))
    (t9-0 this)
    )
  (format #t "~T~Ttext-id-to-display: ~D~%" (-> this text-id-to-display))
  (format #t "~T~Tsound-to-play: ~A~%" (-> this sound-to-play))
  (format #t "~T~Ttrans: #<vector @ #x~X>~%" (-> this trans))
  (format #t "~T~Tsound-id: ~D~%" (-> this sound-id))
  (format #t "~T~Tmode: ~A~%" (-> this mode))
  (format #t "~T~Ttotal-time: ~D~%" (-> this total-time))
  (format #t "~T~Ttotal-off-time: ~D~%" (-> this total-off-time))
  (format #t "~T~Tlast-time: ~D~%" (-> this last-time))
  (format #t "~T~Tvoicebox: ~D~%" (-> this voicebox))
  this
  )

;; definition of type ambient-list
(deftype ambient-list (structure)
  ((num-items  int32)
   (items      drawable-ambient  2048)
   )
  )

;; definition for method 3 of type ambient-list
(defmethod inspect ((this ambient-list))
  (format #t "[~8x] ~A~%" this 'ambient-list)
  (format #t "~Tnum-items: ~D~%" (-> this num-items))
  (format #t "~Titems[2048] @ #x~X~%" (-> this items))
  this
  )

;; failed to figure out what this is:
0
