;;-*-Lisp-*-
(in-package goal)

;; definition of type pat-surface
(deftype pat-surface (uint32)
  ((skip          uint8        :offset   0 :size   3)
   (mode          pat-mode     :offset   3 :size   3)
   (material      pat-material :offset   6 :size   6)
   (camera        uint8        :offset  12 :size   2)
   (event         pat-event    :offset  14 :size   6)
   (noentity      uint8        :offset   0 :size   1)
   (nocamera      uint8        :offset   1 :size   1)
   (noedge        uint8        :offset   2 :size   1)
   (nolineofsight uint8        :offset  12 :size   1)
   (unknown-bit   uint8        :offset  15 :size   1)
   )
  )

;; definition for method 3 of type pat-surface
(defmethod inspect ((this pat-surface))
  (format #t "[~8x] ~A~%" this 'pat-surface)
  (format #t "~Tskip: ~D~%" (-> this skip))
  (format #t "~Tmode: ~D~%" (-> this mode))
  (format #t "~Tmaterial: ~D~%" (-> this material))
  (format #t "~Tcamera: ~D~%" (-> this camera))
  (format #t "~Tevent: ~D~%" (-> this event))
  (format #t "~Tnoentity: ~D~%" (-> this noentity))
  (format #t "~Tnocamera: ~D~%" (-> this nocamera))
  (format #t "~Tnoedge: ~D~%" (-> this noedge))
  (format #t "~Tnolineofsight: ~D~%" (-> this nolineofsight))
  this
  )

;; definition (debug) for function pat-material->string
(defun-debug pat-material->string ((arg0 pat-surface))
  (case (-> arg0 material)
    (((pat-material neutral))
     "neutral"
     )
    (((pat-material rotate))
     "rotate"
     )
    (((pat-material stopproj))
     "stopproj"
     )
    (((pat-material swamp))
     "swamp"
     )
    (((pat-material tube))
     "tube"
     )
    (((pat-material straw))
     "straw"
     )
    (((pat-material metal))
     "metal"
     )
    (((pat-material dirt))
     "dirt"
     )
    (((pat-material gravel))
     "gravel"
     )
    (((pat-material crwood))
     "crwood"
     )
    (((pat-material lava))
     "lava"
     )
    (((pat-material hotcoals))
     "hotcoals"
     )
    (((pat-material deepsnow))
     "deepsnow"
     )
    (((pat-material snow))
     "snow"
     )
    (((pat-material pcmetal))
     "pcmetal"
     )
    (((pat-material grass))
     "grass"
     )
    (((pat-material wood))
     "wood"
     )
    (((pat-material sand))
     "sand"
     )
    (((pat-material tar))
     "tar"
     )
    (((pat-material waterbottom))
     "waterbottom"
     )
    (((pat-material quicksand))
     "quicksand"
     )
    (((pat-material ice))
     "ice"
     )
    (((pat-material stone))
     "stone"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition (debug) for function pat-mode->string
(defun-debug pat-mode->string ((arg0 pat-surface))
  (case (-> arg0 mode)
    (((pat-mode obstacle))
     "obstacle"
     )
    (((pat-mode wall))
     "wall"
     )
    (((pat-mode ground))
     "ground"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition (debug) for function pat-event->string
(defun-debug pat-event->string ((arg0 pat-surface))
  (case (-> arg0 event)
    (((pat-event melt))
     "melt"
     )
    (((pat-event burnup))
     "burnup"
     )
    (((pat-event deadlyup))
     "deadlyup"
     )
    (((pat-event burn))
     "burn"
     )
    (((pat-event endlessfall))
     "endlessfall"
     )
    (((pat-event deadly))
     "deadly"
     )
    (((pat-event none))
     "none"
     )
    (else
      "*unknown*"
      )
    )
  )

;; definition of type pat-mode-info
(deftype pat-mode-info (structure)
  ((name          string)
   (wall-angle    float)
   (color         rgba)
   (hilite-color  rgba)
   )
  )

;; definition for method 3 of type pat-mode-info
(defmethod inspect ((this pat-mode-info))
  (format #t "[~8x] ~A~%" this 'pat-mode-info)
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Twall-angle: ~f~%" (-> this wall-angle))
  (format #t "~Tcolor: ~D~%" (-> this color))
  (format #t "~Thilite-color: ~D~%" (-> this hilite-color))
  this
  )

;; definition for symbol *pat-mode-info*, type (inline-array pat-mode-info)
(define *pat-mode-info* (new 'static 'inline-array pat-mode-info 4
                          (new 'static 'pat-mode-info
                            :name "ground"
                            :wall-angle 0.2
                            :color (new 'static 'rgba :r #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :r #xff :a #x80)
                            )
                          (new 'static 'pat-mode-info
                            :name "wall"
                            :wall-angle 2.0
                            :color (new 'static 'rgba :b #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :b #xff :a #x80)
                            )
                          (new 'static 'pat-mode-info
                            :name "obstacle"
                            :wall-angle 0.82
                            :color (new 'static 'rgba :r #x7f :b #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :r #xff :b #xff :a #x80)
                            )
                          (new 'static 'pat-mode-info
                            :name "pole"
                            :wall-angle 2.0
                            :color (new 'static 'rgba :r #x7f :g #x7f :a #x40)
                            :hilite-color (new 'static 'rgba :r #xff :g #xff :a #x80)
                            )
                          )
        )

;; failed to figure out what this is:
0
