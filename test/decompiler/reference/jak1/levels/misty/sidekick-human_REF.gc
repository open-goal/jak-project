;;-*-Lisp-*-
(in-package goal)

;; definition of type sequenceA
(deftype sequenceA (process-hidden)
  ()
  )

;; definition for method 3 of type sequenceA
(defmethod inspect ((this sequenceA))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tmask: ~D~%" (-> this mask))
  (format #t "~Tparent: #x~X~%" (-> this parent))
  (format #t "~Tbrother: #x~X~%" (-> this brother))
  (format #t "~Tchild: #x~X~%" (-> this child))
  (format #t "~Tppointer: #x~X~%" (-> this ppointer))
  (format #t "~Tself: ~A~%" (-> this self))
  (format #t "~Tpool: ~A~%" (-> this pool))
  (format #t "~Tstatus: ~A~%" (-> this status))
  (format #t "~Tpid: ~D~%" (-> this pid))
  (format #t "~Tmain-thread: ~A~%" (-> this main-thread))
  (format #t "~Ttop-thread: ~A~%" (-> this top-thread))
  (format #t "~Tentity: ~A~%" (-> this entity))
  (format #t "~Tstate: ~A~%" (-> this state))
  (format #t "~Ttrans-hook: ~A~%" (-> this trans-hook))
  (format #t "~Tpost-hook: ~A~%" (-> this post-hook))
  (format #t "~Tevent-hook: ~A~%" (-> this event-hook))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tnext-state: ~A~%" (-> this next-state))
  (format #t "~Theap-base: #x~X~%" (-> this heap-base))
  (format #t "~Theap-top: #x~X~%" (-> this heap-top))
  (format #t "~Theap-cur: #x~X~%" (-> this heap-cur))
  (format #t "~Tstack-frame-top: ~A~%" (-> this stack-frame-top))
  (format #t "~Theap: #<kheap @ #x~X>~%" (&-> this heap-base))
  (format #t "~Tconnection-list: ~`'connectable`P~%" (-> this connection-list))
  (format #t "~Tstack[0] @ #x~X~%" (-> this stack))
  this
  )

;; failed to figure out what this is:
(defpartgroup group-2d-intro-mist
  :id 657
  :flags (screen-space)
  :bounds (static-bspherem 0 0 0 2)
  :parts ((sp-item 2665 :period (seconds 1) :length (seconds 0.017) :binding 2663)
    (sp-item 2663 :flags (start-dead launch-asap) :binding 2664)
    (sp-item 2663 :flags (start-dead launch-asap) :binding 2664)
    (sp-item 2664 :flags (start-dead))
    (sp-item 2664 :flags (start-dead))
    (sp-item 2664 :flags (start-dead))
    (sp-item 2666)
    (sp-item 2667)
    )
  )

;; failed to figure out what this is:
(defpart 2665
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:x (meters -2.5) (meters 5))
    (:y (meters -1.5) (meters 3))
    (:scale-x (meters 0.1))
    (:scale-y :copy scale-x)
    (:g 128.0)
    (:a 0.0)
    (:vel-y (meters 0.0033333334) (meters 0.0033333334))
    (:timer (seconds 2))
    (:flags (bit3))
    (:conerot-z (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2663
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:x (meters 0) (meters 16))
    (:y (meters 0) (meters 16))
    (:z (meters 0.5) (meters 0.2))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0 96.0)
    (:g 0.0 32.0)
    (:b 64.0 32.0)
    (:a 128.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters -0.053333335) 1 (meters 0.10666667))
    (:scalevel-x (meters -0.0012121212))
    (:rotvel-z (degrees -0.3) 1 (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 2))
    (:flags (bit2 bit3 bit7))
    )
  )

;; failed to figure out what this is:
(defpart 2664
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:scale-x (meters 0.5) (meters 0.3))
    (:scale-y :copy scale-x)
    (:r 32.0 96.0)
    (:g 0.0 32.0)
    (:b 64.0 32.0)
    (:a 64.0 64.0)
    (:scalevel-x (meters -0.0010952381))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters 0) (meters -0.000033333334))
    (:timer (seconds 0.1) (seconds 0.997))
    (:flags (bit2 bit3))
    (:next-time (seconds 0.8))
    (:next-launcher 198)
    )
  )

;; failed to figure out what this is:
(defpart 2667
  :init-specs ((:texture (new 'static 'texture-id :index #x36 :page #x2))
    (:num 1.0)
    (:z (meters -3.90625))
    (:scale-x (meters 15))
    (:scale-y (meters 12))
    (:r 0.0)
    (:g 0.0)
    (:b 0.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit14))
    )
  )

;; failed to figure out what this is:
(defpart 2666
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.3)
    (:x (meters -4) (meters 8))
    (:y (meters -3) (meters 6))
    (:z (meters 0) (meters 3.4179688))
    (:scale-x (meters 6) (meters 8))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y (meters 6) (meters 8))
    (:r 16.0 80.0)
    (:g 0.0 16.0)
    (:b 16.0 150.0)
    (:a 0.0)
    (:scalevel-x (meters -0.0016666667) (meters 0.0033333334))
    (:rotvel-z (degrees -0.075) (degrees 0.15))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.21333334)
    (:timer (seconds 5))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.5) (seconds 0.497))
    (:next-launcher 2668)
    )
  )

;; failed to figure out what this is:
(defpart 2668
  :init-specs ((:fade-a 0.0) (:next-time (seconds 1) (seconds 0.997)) (:next-launcher 2669))
  )

;; failed to figure out what this is:
(defpart 2669
  :init-specs ((:fade-a -0.21333334))
  )

;; failed to figure out what this is:
(defpartgroup group-evilsib-appear
  :id 557
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2345 :period (seconds 5) :length (seconds 0.067) :offset 1500)
    (sp-item 2346 :period (seconds 5) :length (seconds 0.067) :offset 1500)
    (sp-item 2347 :period (seconds 5) :length (seconds 0.017) :offset 1500)
    (sp-item 2348 :period (seconds 5) :length (seconds 0.067) :offset 1500)
    (sp-item 2349 :period (seconds 5) :length (seconds 3) :offset 750 :binding 2344)
    (sp-item 2350 :period (seconds 5) :length (seconds 2.5) :offset 600 :binding 2344)
    (sp-item 2351 :period (seconds 5) :length (seconds 2) :offset 450 :binding 2344)
    (sp-item 2351 :period (seconds 5) :length (seconds 1.5) :offset 300 :binding 2344)
    (sp-item 2352 :period (seconds 5) :length (seconds 1) :offset 150 :binding 2344)
    (sp-item 2352 :period (seconds 5) :length (seconds 0.5) :binding 2344)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    )
  )

;; failed to figure out what this is:
(defpart 2349
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters 0) (meters 0.1))
    (:y (meters -1) (meters 4))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 2))
    (:flags (bit14))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2353
  :init-specs ((:fade-a -0.21333334))
  )

;; failed to figure out what this is:
(defpart 2350
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters 0) (meters 0.1))
    (:y (meters -1) (meters 4))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.21333334)
    (:timer (seconds 2))
    (:flags (bit2 bit14))
    (:next-time (seconds 1))
    (:next-launcher 2353)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2351
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters 0) (meters 0.3))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.21333334)
    (:timer (seconds 2))
    (:flags (bit2 bit14))
    (:next-time (seconds 1))
    (:next-launcher 2353)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2352
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters 0) (meters 0.5))
    (:y (meters -0.5) (meters 1))
    (:scale-x (meters 0.5) (meters 0.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.0033333334))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.21333334)
    (:timer (seconds 2))
    (:flags (bit2 bit14))
    (:next-time (seconds 1))
    (:next-launcher 2353)
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2344
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:x (meters 0) (meters 16))
    (:y (meters 0) (meters 16))
    (:z (meters 5) (meters 1.5))
    (:scale-x (meters 0.05) (meters 0.05))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 64.0 32.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters -0.074074075) (meters 0.14814815))
    (:vel-y (meters 0))
    (:vel-z (meters -0.015))
    (:scalevel-x (meters 0.0005))
    (:rotvel-z (degrees -0.53333336) (degrees 1.0666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 1))
    (:flags (bit2 bit3 bit7 bit14))
    (:next-time (seconds 0.9))
    (:next-launcher 2354)
    )
  )

;; failed to figure out what this is:
(defpart 2354
  :init-specs ((:fade-a -3.2))
  )

;; failed to figure out what this is:
(defpart 2345
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 32.0)
    (:y (meters 1) (meters 2))
    (:scale-x (meters 0.1) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 192.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0) (meters 0.21333334))
    (:scalevel-x (meters -0.00066666666))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.42666668)
    (:accel-y (meters -0.00016666666) (meters -0.00083333335))
    (:friction 0.8 0.05)
    (:timer (seconds 5))
    (:flags (bit0 bit2 bit14))
    (:next-time (seconds 0.1) (seconds 2.497))
    (:next-launcher 2355)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 2))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2355
  :init-specs ((:fade-g 0.0) (:fade-a 0.0))
  )

;; failed to figure out what this is:
(defpart 2346
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 32.0)
    (:y (meters 0) (meters 3))
    (:scale-x (meters 0.1) (meters 0.4))
    (:scale-y :copy scale-x)
    (:r 192.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0) (meters 0.026666667))
    (:scalevel-x (meters -0.00066666666))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.42666668)
    (:accel-y (meters -0.00016666666) (meters -0.00083333335))
    (:friction 0.75 0.05)
    (:timer (seconds 5))
    (:flags (bit0 bit2 bit14))
    (:next-time (seconds 0.1) (seconds 2.497))
    (:next-launcher 2355)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:conerot-radius (meters 0.5) (meters 1))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2347
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:y (meters 2))
    (:scale-x (meters 28) (meters 4))
    (:scale-y :copy scale-x)
    (:r 192.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:fade-g -2.3272727)
    (:fade-a -2.3272727)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpart 2348
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 2.0)
    (:y (meters 0.5) (meters 2))
    (:scale-x (meters 0.25) (meters 0.1))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 16))
    (:r 255.0)
    (:g 128.0)
    (:b 128.0 128.0)
    (:a 32.0 32.0)
    (:scalevel-y (meters 0.6))
    (:fade-r -2.1333334)
    (:fade-g -2.1333334)
    (:fade-a -1.0666667)
    (:timer (seconds 0.2))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-evilsib-hover
  :id 558
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2386 :binding 2385)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    )
  )

;; failed to figure out what this is:
(defpart 2386
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:y (meters 0.25) (meters 1.5))
    (:scale-x (meters 0.2) (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:a 0.0)
    (:accel-y (meters -0.0005))
    (:timer (seconds 1))
    (:flags (bit14))
    )
  )

;; failed to figure out what this is:
(defpart 2385
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 1.0)
    (:x (meters 0) (meters 16))
    (:y (meters 0))
    (:z (meters 0.25) (meters 0.25))
    (:scale-x (meters 0.05) (meters 0.025))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 0.0)
    (:omega 0.0 65536.0)
    (:vel-x (meters -0.04444444) (meters 0.08888888))
    (:vel-y (meters 0))
    (:vel-z (meters 0.0027777778))
    (:scalevel-x (meters 0.00027777778))
    (:rotvel-z (degrees -0.53333336) (degrees 1.0666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 4.266667)
    (:timer (seconds 1))
    (:flags (bit2 bit3 bit7 bit14))
    (:next-time (seconds 0.1) (seconds 0.047))
    (:next-launcher 2388)
    )
  )

;; failed to figure out what this is:
(defpart 2388
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.5)) (:next-launcher 2389))
  )

;; failed to figure out what this is:
(defpart 2389
  :init-specs ((:vel-z (meters -0.008333334))
    (:scalevel-x (meters -0.00041666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -1.0666667)
    )
  )

;; failed to figure out what this is:
(defpart 2384
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 0.1)
    (:scale-x (meters 0.4) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 128.0)
    (:g 0.0 32.0)
    (:b 64.0 64.0)
    (:a 64.0 32.0)
    (:scalevel-x (meters -0.03))
    (:rotvel-z (degrees -0.53333336) (degrees 1.0666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -4.8)
    (:accel-y (meters -0.00033333333))
    (:timer (seconds 0.05))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-sequenceC-glowing-can
  :id 560
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2298))
  )

;; failed to figure out what this is:
(defpart 2298
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.0)
    (:x (meters -0.25) (meters 0.5))
    (:y (meters -0.25) (meters 0.5))
    (:z (meters -0.25) (meters 0.5))
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 96.0 32.0)
    (:b 0.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:fade-a -0.42666668)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-sequenceC-exploding-can
  :id 561
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2785 :period (seconds 6) :length (seconds 0.017))
    (sp-item 2786 :period (seconds 6) :length (seconds 0.135))
    (sp-item 2787 :period (seconds 6) :length (seconds 0.067))
    (sp-item 2788 :period (seconds 6) :length (seconds 0.067))
    (sp-item 2830 :fade-after (meters 100) :period (seconds 2) :length (seconds 0.017) :binding 296)
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    )
  )

;; failed to figure out what this is:
(defpart 2830
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 32.0)
    (:x (meters -2) (meters 4))
    (:y (meters 1) (meters 2))
    (:z (meters -2) (meters 4))
    (:scale-x (meters 0.1))
    (:scale-y :copy scale-x)
    (:a 0.0)
    (:vel-y (meters 0.053333335) (meters 0.026666667))
    (:accel-y (meters -0.00033333333))
    (:friction 0.94)
    (:timer (seconds 0.8))
    (:flags (bit3))
    (:conerot-x (degrees 0) (degrees 140))
    (:conerot-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2786
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 12.0)
    (:y (meters -1.5) (meters 3))
    (:scale-x (meters 0.4) (meters 0.8))
    (:scale-y :copy scale-x)
    (:r 128.0 128.0)
    (:g 0.0 32.0)
    (:b 128.0 128.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.04) (meters 0.16))
    (:scalevel-x (meters -0.0026666666))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00016666666) (meters -0.00016666666))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.1) (seconds 0.297))
    (:next-launcher 2789)
    (:conerot-x (degrees 0) (degrees 120))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2) (meters 4))
    )
  )

;; failed to figure out what this is:
(defpart 2789
  :init-specs ((:fade-a -1.0666667))
  )

;; failed to figure out what this is:
(defpart 2788
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 12.0)
    (:scale-x (meters 0.3))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 12))
    (:r 128.0 128.0)
    (:g 0.0 32.0)
    (:b 128.0 64.0)
    (:a 32.0 64.0)
    (:scalevel-y (meters 1.04))
    (:fade-a -1.6)
    (:timer (seconds 0.2))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpart 2785
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:scale-x (meters 24))
    (:scale-y :copy scale-x)
    (:r 192.0 64.0)
    (:g 0.0 32.0)
    (:b 128.0 128.0)
    (:a 128.0)
    (:fade-a -2.3272727)
    (:timer (seconds 0.18))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpart 2787
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 16.0)
    (:y (meters -1.5) (meters 3))
    (:scale-x (meters 3) (meters 1.5))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0 96.0)
    (:g 0.0 32.0)
    (:b 64.0 32.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.08) (meters 0.04))
    (:scalevel-x (meters 0.02))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.28444445)
    (:accel-y (meters 0.00016666666) (meters 0.00016666666))
    (:friction 0.8)
    (:timer (seconds 1.7))
    (:flags (bit2 bit14))
    (:conerot-x (degrees 0) (degrees 120))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 4))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-sequenceC-dark-splash
  :id 562
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 295 :fade-after (meters 100) :period (seconds 2) :length (seconds 0.017) :binding 296)
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80) :falloff-to (meters 100) :flags (start-dead))
    (sp-item 2095 :period (seconds 2) :length (seconds 0.017))
    (sp-item 2096 :fade-after (meters 80) :falloff-to (meters 80) :period (seconds 2) :length (seconds 0.135))
    (sp-item 2097 :period (seconds 2) :length (seconds 0.067))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-sequenceC-blow-dust
  :id 681
  :duration (seconds 0.017)
  :linger-duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2790))
  )

;; failed to figure out what this is:
(defpart 2790
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 1.0)
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 96.0 64.0)
    (:b 64.0 32.0)
    (:a 0.0)
    (:vel-y (meters 0.016666668) (meters 0.0033333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -1.2) (degrees 2.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.4)
    (:accel-y (meters 0.00033333333) (meters -0.00033333333))
    (:friction 0.92)
    (:timer (seconds 1))
    (:flags (bit2 bit3))
    (:next-time (seconds 0.05) (seconds 0.147))
    (:next-launcher 2822)
    (:conerot-x (degrees 112.99999) (degrees 2))
    (:conerot-y (degrees -12.500001) (degrees 15))
    (:conerot-radius (meters 0.3) (meters -0.5))
    )
  )

;; failed to figure out what this is:
(defpart 2822
  :init-specs ((:fade-a -0.1))
  )

;; definition of type sequenceB
(deftype sequenceB (process-taskable)
  ((bonelurker   handle)
   (evilbro      handle)
   (evilsis      handle)
   (lurker-army  handle  9)
   )
  )

;; definition for method 3 of type sequenceB
(defmethod inspect ((this sequenceB))
  (let ((t9-0 (method-of-type process-taskable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tbonelurker: ~D~%" (-> this bonelurker))
  (format #t "~T~Tevilbro: ~D~%" (-> this evilbro))
  (format #t "~T~Tevilsis: ~D~%" (-> this evilsis))
  (format #t "~T~Tlurker-army[9] @ #x~X~%" (-> this lurker-army))
  this
  )

;; definition of type sequenceC
(deftype sequenceC (process-taskable)
  ((bonelurker               handle)
   (darkecocan               handle)
   (darkecocan-glowing-look  lod-set  :inline)
   )
  )

;; definition for method 3 of type sequenceC
(defmethod inspect ((this sequenceC))
  (let ((t9-0 (method-of-type process-taskable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tbonelurker: ~D~%" (-> this bonelurker))
  (format #t "~T~Tdarkecocan: ~D~%" (-> this darkecocan))
  (format #t "~T~Tdarkecocan-glowing-look: #<lod-set @ #x~X>~%" (-> this darkecocan-glowing-look))
  this
  )

;; failed to figure out what this is:
(defskelgroup *sidekick-human-sg* sidekick-human sidekick-human-lod0-jg sidekick-human-idle-ja
              ((sidekick-human-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2.5)
              :shadow sidekick-human-shadow-mg
              )

;; failed to figure out what this is:
(defskelgroup *darkecocan-sg* darkecocan darkecocan-lod0-jg darkecocan-idle-ja
              ((darkecocan-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

;; failed to figure out what this is:
(defskelgroup *darkecocan-glow-sg* darkecocan darkecocan-glow-lod0-jg darkecocan-idle-ja
              ((darkecocan-glow-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

;; failed to figure out what this is:
(defskelgroup *evilbro-sg* evilbro evilbro-lod0-jg evilbro-idle-ja
              ((evilbro-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

;; failed to figure out what this is:
(defskelgroup *evilsis-sg* evilsis evilsis-lod0-jg evilsis-idle-ja
              ((evilsis-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              )

;; definition of type army-info
(deftype army-info (structure)
  ((pos          vector)
   (rot          float)
   (start-frame  float)
   (skel         symbol)
   )
  )

;; definition for method 3 of type army-info
(defmethod inspect ((this army-info))
  (format #t "[~8x] ~A~%" this 'army-info)
  (format #t "~Tpos: #<vector @ #x~X>~%" (-> this pos))
  (format #t "~Trot: ~f~%" (-> this rot))
  (format #t "~Tstart-frame: ~f~%" (-> this start-frame))
  (format #t "~Tskel: ~A~%" (-> this skel))
  this
  )

;; definition for symbol *lurker-army*, type (array army-info)
(define *lurker-army* (new 'static 'boxed-array :type army-info
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -920633.4 :y 83546.11 :z 4210409.5)
                          :rot 28556.04
                          :skel 'babak
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -873488.4 :y 86441.984 :z 4225454.0)
                          :rot 37861.24
                          :start-frame 5.0
                          :skel 'babak
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -905871.4 :y 83132.414 :z 4231934.0)
                          :rot 32054.021
                          :start-frame 10.0
                          :skel 'babak
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -926765.06 :y 83496.96 :z 4236230.5)
                          :rot 30001.652
                          :start-frame 15.0
                          :skel 'babak
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -893345.8 :y 83517.44 :z 4212961.5)
                          :rot 32755.074
                          :start-frame 20.0
                          :skel 'babak
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -842797.06 :y 84041.73 :z 4218855.5)
                          :rot 43916.402
                          :skel 'bonelurker
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -839274.5 :y 82644.99 :z 4248723.5)
                          :rot 40510.715
                          :start-frame 6.0
                          :skel 'bonelurker
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -871485.44 :y 85909.51 :z 4243181.5)
                          :rot 37046.043
                          :start-frame 12.0
                          :skel 'bonelurker
                          )
                        (new 'static 'army-info
                          :pos (new 'static 'vector :x -947523.56 :y 85835.77 :z 4219314.0)
                          :rot 26980.078
                          :start-frame 18.0
                          :skel 'bonelurker
                          )
                        )
        )

;; definition for function evilsib-trans-hook-hover
;; INFO: Return type mismatch int vs none.
(defbehavior evilsib-trans-hook-hover evilbro ()
  0
  (none)
  )

;; definition for function evilsib-trans-hook-wait
;; INFO: Return type mismatch int vs none.
(defbehavior evilsib-trans-hook-wait evilbro ()
  (when (>= (ja-aframe-num 0) 425.0)
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> *part-group-id-table* 557)
      -1
      #f
      #f
      #f
      (-> self draw origin)
      :to *entity-pool*
      )
    (send-event self 'trans-hook evilsib-trans-hook-hover)
    )
  0
  (none)
  )

;; definition for method 32 of type sequenceB
(defmethod play-anim! ((this sequenceB) (arg0 symbol))
  (cond
    (arg0
      (send-event *target* 'sidekick #f)
      (set! (-> this bonelurker)
            (ppointer->handle (manipy-spawn (-> this root trans) (-> this entity) *bonelurker-sg* #f :to this))
            )
      (send-event (handle->process (-> this bonelurker)) 'anim-mode 'clone-anim)
      (send-event (handle->process (-> this bonelurker)) 'center-joint 3)
      (set-setting! 'music-volume-movie 'abs 0.0 0)
      (set-setting! 'sfx-volume-movie 'abs 0.0 0)
      (set-setting! 'ambient-volume-movie 'abs 0.0 0)
      (dotimes (s5-1 9)
        (let ((s4-0 (-> *lurker-army* s5-1)))
          (cond
            ((= (-> s4-0 skel) 'bonelurker)
             (set! (-> this lurker-army s5-1)
                   (ppointer->handle (manipy-spawn (-> s4-0 pos) (-> this entity) *bonelurker-sg* #f :to this))
                   )
             (let ((s3-1 (handle->process (-> this lurker-army s5-1))))
               (when s3-1
                 (set! (-> (the-as babak s3-1) draw light-index) (the-as uint 1))
                 (set! (-> (the-as babak s3-1) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                 )
               )
             )
            (else
              (set! (-> this lurker-army s5-1)
                    (ppointer->handle (manipy-spawn (-> s4-0 pos) (-> this entity) *babak-sg* #f :to this))
                    )
              (let ((s3-3 (handle->process (-> this lurker-army s5-1))))
                (when s3-3
                  (set! (-> (the-as babak s3-3) draw light-index) (the-as uint 1))
                  (set! (-> (the-as babak s3-3) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                  )
                )
              (send-event (handle->process (-> this lurker-army s5-1)) 'art-joint-anim "idle" 0)
              )
            )
          (send-event (handle->process (-> this lurker-army s5-1)) 'rot (-> s4-0 rot))
          )
        )
      )
    ((!= (level-status *level* 'intro) 'active)
     (return (get-art-elem this))
     )
    )
  (new 'static 'spool-anim
    :name "sidekick-human-intro-sequence-b"
    :index 5
    :parts 11
    :command-list '((0 blackout 0)
      (0 setting-reset ocean-off near)
      (0 want-levels misty intro)
      (0 display-level intro special)
      (0 kill "money-1404")
      (0 kill "money-1405")
      (0 kill "money-1406")
      (0 kill "money-1407")
      (0 kill "money-1551")
      (0 kill "money-1552")
      (0 kill "money-1553")
      (0 kill "balloonlurker-9")
      (0 kill "balloonlurker-10")
      (0 kill "balloonlurker-11")
      (0 kill "balloonlurker-12")
      (0 kill "balloonlurker-13")
      (0 kill "balloonlurker-14")
      (0 kill "keg-conveyor-8")
      (0 kill "mistycannon-8")
      (0 kill "muse-2")
      (0 kill "mud-1")
      (0 kill "mud-2")
      (0 kill "mud-3")
      (0 kill "mud-4")
      (0 kill "mud-5")
      (0 kill "mud-6")
      (0 kill "mud-7")
      (0 kill "mud-8")
      (0 kill "mud-9")
      (0 kill "mud-10")
      (0 kill "mud-11")
      (0 kill "dark-eco-pool-11")
      (0 kill "sharkey-32")
      (0 kill "sharkey-34")
      (0 kill "sharkey-39")
      (0 kill "sharkey-41")
      (0 kill "bonelurker-14")
      (0 kill "bonelurker-15")
      (0 kill "bonelurker-16")
      (0 kill "bonelurker-17")
      (0 kill "bonelurker-18")
      (0 kill "bonelurker-19")
      (0 kill "bonelurker-20")
      (0 kill "bonelurker-21")
      (0 kill "bonelurker-22")
      (0 kill "bonelurker-23")
      (0 kill "bonelurker-24")
      (0 kill "bonelurker-26")
      (0 kill "babak-with-cannon-5")
      (0 kill "babak-200")
      (0 kill "babak-201")
      (0 kill "babak-202")
      (0 kill "babak-203")
      (0 kill "babak-204")
      (0 kill "babak-205")
      (0 kill "babak-206")
      (0 kill "babak-207")
      (0 kill "babak-208")
      (0 kill "babak-209")
      (0 kill "babak-212")
      (0 kill "quicksandlurker-5")
      (0 kill "boatpaddle-4")
      (0 kill "silostep-7")
      (0 kill "silostep-8")
      (0 kill "silostep-9")
      (0 kill "silostep-10")
      (0 kill "orb-cache-top-15")
      (0 kill "windturbine-11")
      (0 kill "teetertotter-5")
      (0 kill "bone-platform-4")
      (0 kill "misty-battle-controller-1")
      (30 send-event self offset-army)
      (196 joint "cameraB")
      (196 shadow target #f)
      (196 shadow self #f)
      (380 send-event self evilbro)
      (385 send-event "evilbro" draw #t)
      (385 send-event "evilsis" draw #t)
      (397 joint "camera")
      (410 setting-reset ocean-off #t)
      (456 joint "cameraB")
      (546 joint "camera")
      (701 joint "cameraB")
      (701 setting-reset ocean-off near)
      (776 joint "camera")
      (776 setting-reset ocean-off #t)
      (937 joint "cameraB")
      (1027 joint "camera")
      (1122 joint "cameraB")
      (1221 joint "cameraB")
      (1221 setting-reset ocean-off near)
      (1280 alive "sequenceC-1")
      (1281 save)
      (1281 shadow target #t)
      (1281 setting-unset ocean-off)
      )
    )
  )

;; definition for method 31 of type sequenceB
(defmethod get-art-elem ((this sequenceB))
  (-> this draw art-group data 3)
  )

;; failed to figure out what this is:
(defstate play-anim (sequenceB)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('offset-army)
       (dotimes (gp-0 9)
         (let ((v1-3 (-> *lurker-army* gp-0)))
           (send-event (handle->process (-> self lurker-army gp-0)) 'set-frame-num (-> v1-3 start-frame))
           )
         )
       #f
       )
      (('evilbro)
       (when (= (level-status *level* 'intro) 'active)
         (let ((gp-2 (entity-by-name "evilbro-2")))
           (when gp-2
             (set! (-> self evilbro) (ppointer->handle (manipy-spawn (-> self root trans) gp-2 *evilbro-sg* #f :to self)))
             (let ((gp-3 (handle->process (-> self evilbro))))
               (when gp-3
                 (set! (-> (the-as evilbro gp-3) draw light-index) (the-as uint 1))
                 (set! (-> (the-as evilbro gp-3) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                 )
               )
             (send-event (handle->process (-> self evilbro)) 'anim-mode 'clone-anim)
             (send-event (handle->process (-> self evilbro)) 'blend-shape #t)
             (send-event (handle->process (-> self evilbro)) 'center-joint 3)
             (send-event (handle->process (-> self evilbro)) 'trans-hook evilsib-trans-hook-wait)
             (send-event (handle->process (-> self evilbro)) 'draw #f)
             (send-event
               (handle->process (-> self evilbro))
               'eval
               (lambda :behavior sequenceB () (let ((v0-0 (create-launch-control (-> *part-group-id-table* 558) self)))
                                                (set! (-> self part) v0-0)
                                                v0-0
                                                )
                                           )
               )
             )
           )
         (let ((gp-4 (entity-by-name "evilsis-2")))
           (when gp-4
             (set! (-> self evilsis) (ppointer->handle (manipy-spawn (-> self root trans) gp-4 *evilsis-sg* #f :to self)))
             (let ((gp-5 (handle->process (-> self evilsis))))
               (when gp-5
                 (set! (-> (the-as evilsis gp-5) draw light-index) (the-as uint 1))
                 (set! (-> (the-as evilsis gp-5) draw level-index) (the-as uint (-> (level-get *level* 'misty) index)))
                 )
               )
             (send-event (handle->process (-> self evilsis)) 'anim-mode 'clone-anim)
             (send-event (handle->process (-> self evilsis)) 'blend-shape #t)
             (send-event (handle->process (-> self evilsis)) 'center-joint 3)
             (send-event (handle->process (-> self evilsis)) 'trans-hook evilsib-trans-hook-wait)
             (send-event (handle->process (-> self evilsis)) 'draw #f)
             (send-event
               (handle->process (-> self evilsis))
               'eval
               (lambda :behavior sequenceB () (let ((v0-0 (create-launch-control (-> *part-group-id-table* 558) self)))
                                                (set! (-> self part) v0-0)
                                                v0-0
                                                )
                                           )
               )
             )
           )
         )
       )
      )
    )
  :exit (behavior ()
    (send-event *target* 'sidekick #t)
    (let ((a0-2 (handle->process (-> self bonelurker))))
      (if a0-2
          (deactivate a0-2)
          )
      )
    (let ((a0-6 (handle->process (-> self evilbro))))
      (if a0-6
          (deactivate a0-6)
          )
      )
    (let ((a0-10 (handle->process (-> self evilsis))))
      (if a0-10
          (deactivate a0-10)
          )
      )
    (dotimes (gp-0 9)
      (let ((a0-14 (handle->process (-> self lurker-army gp-0))))
        (if a0-14
            (deactivate a0-14)
            )
        )
      )
    ((-> (method-of-type process-taskable play-anim) exit))
    (let ((gp-1 (entity-by-name "sequenceC-1")))
      (set-blackout-frames (seconds 20))
      (send-event *camera* 'clear-entity)
      (entity-birth-no-kill gp-1)
      (send-event
        (if gp-1
            (-> gp-1 extra process)
            )
        'play-anim
        )
      )
    )
  :trans (behavior ()
    (spool-push *art-control* "sidekick-human-intro-sequence-c" 0 self (the-as float -1.0))
    ((-> (method-of-type process-taskable play-anim) trans))
    )
  )

;; definition for method 39 of type sequenceB
(defmethod should-display? ((this sequenceB))
  #f
  )

;; definition for method 11 of type sequenceB
(defmethod init-from-entity! ((this sequenceB) (arg0 entity-actor))
  (process-taskable-method-40 this arg0 *sidekick-human-sg* 3 44 (new 'static 'vector :w 4096.0) -1)
  (set! (-> this tasks) (get-task-control (game-task intro)))
  (set! (-> this bonelurker) (the-as handle #f))
  (set! (-> this evilbro) (the-as handle #f))
  (set! (-> this evilsis) (the-as handle #f))
  (dotimes (v1-2 9)
    (set! (-> this lurker-army v1-2) (the-as handle #f))
    )
  (process-taskable-method-42 this)
  (none)
  )

;; definition for function sequenceC-can-trans-hook-2
;; INFO: Return type mismatch int vs none.
(defbehavior sequenceC-can-trans-hook-2 sequenceC ()
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (vector<-cspace! gp-0 (-> self node-list data 4))
    (spawn (-> self part) gp-0)
    )
  (when (>= (ja-aframe-num 0) 1590.0)
    (process-spawn
      part-tracker
      :init part-tracker-init
      (-> *part-group-id-table* 561)
      -1
      #f
      #f
      #f
      (-> self draw origin)
      :to *entity-pool*
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

;; definition for function sequenceC-can-trans-hook
;; INFO: Return type mismatch int vs none.
(defbehavior sequenceC-can-trans-hook sequenceC ()
  (when (>= (ja-aframe-num 0) 1055.0)
    (lods-assign! (-> self draw) (the-as lod-set (&-> (the-as process-taskable (-> self parent 0)) stack 288)))
    (send-event self 'trans-hook sequenceC-can-trans-hook-2)
    (set-vector! (-> self draw color-emissive) 0.5 0.0 0.0 0.0)
    )
  0
  (none)
  )

;; definition for method 32 of type sequenceC
;; INFO: Return type mismatch spool-anim vs basic.
(defmethod play-anim! ((this sequenceC) (arg0 symbol))
  (when arg0
    (set-setting! 'music-volume-movie 'abs 0.0 0)
    (set-setting! 'sfx-volume-movie 'abs 0.0 0)
    (set-setting! 'ambient-volume-movie 'abs 0.0 0)
    (set! (-> this bonelurker)
          (ppointer->handle (manipy-spawn (-> this root trans) (-> this entity) *bonelurker-sg* #f :to this))
          )
    (send-event (handle->process (-> this bonelurker)) 'anim-mode 'clone-anim)
    (send-event (handle->process (-> this bonelurker)) 'center-joint 3)
    (set! (-> this darkecocan)
          (ppointer->handle (manipy-spawn (-> this root trans) (-> this entity) *darkecocan-sg* #f :to this))
          )
    (send-event (handle->process (-> this darkecocan)) 'anim-mode 'clone-anim)
    (send-event (handle->process (-> this darkecocan)) 'center-joint 3)
    (send-event (handle->process (-> this darkecocan)) 'trans-hook sequenceC-can-trans-hook)
    (send-event
      (handle->process (-> this darkecocan))
      'eval
      (lambda :behavior sequenceC
        ()
        ((method-of-type lod-set setup-lods!)
         (the-as lod-set (&-> (the-as process-taskable (-> self parent 0)) stack 288))
         *darkecocan-glow-sg*
         (-> self draw art-group)
         (-> (the-as process-taskable (-> self parent 0)) entity)
         )
        (let ((v0-1 (create-launch-control (-> *part-group-id-table* 560) self)))
          (set! (-> self part) v0-1)
          v0-1
          )
        )
      )
    )
  (the-as basic (new 'static 'spool-anim
                  :name "sidekick-human-intro-sequence-c"
                  :index 6
                  :parts 22
                  :command-list '((0 blackout 0)
                    (0 kill "fuel-cell-11")
                    (0 kill "fuel-cell-50")
                    (0 kill "money-1561")
                    (0 kill "money-1562")
                    (0 kill "money-1563")
                    (0 kill "money-1564")
                    (0 kill "money-1565")
                    (5 alive "dark-eco-pool-11")
                    (151 joint "cameraB")
                    (200 want-levels misty village1)
                    (236 joint "camera")
                    (301 joint "cameraB")
                    (421 joint "camera")
                    (460 shadow self #f)
                    (470 shadow self #t)
                    (496 joint "cameraB")
                    (611 joint "camera")
                    (721 joint "cameraB")
                    (1176 joint "camera")
                    (1271 joint "cameraB")
                    (1331 joint "camera")
                    (1386 joint "cameraB")
                    (1461 joint "camera")
                    (1524 joint "cameraB")
                    (1558 joint "camera")
                    (1602 joint "cameraB")
                    (1628 joint "camera")
                    (1676 joint "cameraB")
                    (1728 joint "camera")
                    (1791 joint "cameraB")
                    (1831 joint "camera")
                    (1942 joint "cameraB")
                    (2000 display-level village1 special)
                    (2028 joint "camera")
                    (2096 joint "cameraB")
                    (2154 joint "camera")
                    (2226 joint "cameraB")
                    (2266 joint "camera")
                    (2307 joint "cameraB")
                    (2431 joint "camera")
                    (2476 joint "cameraB")
                    (2530 display-level misty movie)
                    (2530 want-force-vis misty #t)
                    (2530 dead "dark-eco-pool-11")
                    (2534 display-level village1 display)
                    (2535 want-vis vi1)
                    (2536 joint "camera")
                    (2580 alive "sage-23")
                    (2596 save)
                    )
                  )
          )
  )

;; definition for method 31 of type sequenceC
(defmethod get-art-elem ((this sequenceC))
  (-> this draw art-group data 3)
  )

;; failed to figure out what this is:
(defstate play-anim (sequenceC)
  :virtual #t
  :exit (behavior ()
    (let ((a0-1 (handle->process (-> self bonelurker))))
      (if a0-1
          (deactivate a0-1)
          )
      )
    (let ((a0-5 (handle->process (-> self darkecocan))))
      (if a0-5
          (deactivate a0-5)
          )
      )
    ((-> (method-of-type process-taskable play-anim) exit))
    (start 'play (get-continue-by-name *game-info* "village1-intro"))
    )
  :trans (behavior ()
    (spool-push *art-control* "sage-intro-sequence-d1" 0 self (the-as float -1.0))
    ((-> (method-of-type process-taskable play-anim) trans))
    )
  )

;; definition for method 39 of type sequenceC
(defmethod should-display? ((this sequenceC))
  #f
  )

;; definition for function sequenceC-trans-hook
;; INFO: Return type mismatch int vs none.
(defbehavior sequenceC-trans-hook sequenceC ()
  (when (>= (ja-aframe-num 0) 1655.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (vector<-cspace! gp-0 (-> self node-list data 3))
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 562)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (set! (-> self cur-trans-hook) nothing)
    )
  0
  (none)
  )

;; definition for method 11 of type sequenceC
(defmethod init-from-entity! ((this sequenceC) (arg0 entity-actor))
  (process-taskable-method-40 this arg0 *sidekick-human-sg* 3 44 (new 'static 'vector :w 4096.0) -1)
  (set! (-> this tasks) (get-task-control (game-task intro)))
  (set! (-> this bonelurker) (the-as handle #f))
  (set! (-> this darkecocan) (the-as handle #f))
  (set! (-> this cur-trans-hook) sequenceC-trans-hook)
  (process-taskable-method-42 this)
  (none)
  )
