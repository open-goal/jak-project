;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpartgroup group-windturbine-particles
  :id 191
  :bounds (static-bspherem 0 0 0 12)
  :parts ((sp-item 908 :fade-after (meters 60) :period (seconds 4.04) :length (seconds 0.035))
    (sp-item 908 :fade-after (meters 60) :period (seconds 19.3) :length (seconds 0.035))
    (sp-item 908 :fade-after (meters 60) :period (seconds 16.627) :length (seconds 0.035))
    (sp-item 908 :fade-after (meters 60) :period (seconds 11.7) :length (seconds 0.035))
    (sp-item 908 :fade-after (meters 60) :period (seconds 6.125) :length (seconds 0.035))
    (sp-item 909 :fade-after (meters 60) :period (seconds 5.5) :length (seconds 0.035))
    (sp-item 909 :fade-after (meters 60) :period (seconds 12.6) :length (seconds 0.035))
    (sp-item 909 :fade-after (meters 60) :period (seconds 7.4) :length (seconds 0.035))
    (sp-item 909 :fade-after (meters 60) :period (seconds 27.45) :length (seconds 0.035))
    (sp-item 909 :fade-after (meters 60) :period (seconds 11.121) :length (seconds 0.035))
    (sp-item 910 :fade-after (meters 60) :period (seconds 0.5) :length (seconds 0.25))
    (sp-item 910 :fade-after (meters 120) :period (seconds 0.5) :length (seconds 0.25))
    (sp-item 910 :fade-after (meters 180) :period (seconds 0.5) :length (seconds 0.25))
    (sp-item 911 :fade-after (meters 60) :period (seconds 0.5) :length (seconds 0.25) :offset 75)
    (sp-item 911 :fade-after (meters 120) :period (seconds 0.5) :length (seconds 0.25) :offset 75)
    (sp-item 911 :fade-after (meters 180) :period (seconds 0.5) :length (seconds 0.25) :offset 75)
    )
  )

;; failed to figure out what this is:
(defpart 910
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.066 0.066)
    (:x (meters -4))
    (:y (meters -2) (meters 0.5))
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 32.0)
    (:b 32.0)
    (:a 0.0 32.0)
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.4) (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.21333334)
    (:accel-y (meters 0.0003))
    (:timer (seconds 2) (seconds 4.997))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.25))
    (:next-launcher 912)
    )
  )

;; failed to figure out what this is:
(defpart 912
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.8)) (:next-launcher 913))
  )

;; failed to figure out what this is:
(defpart 913
  :init-specs ((:vel-x (meters -0.06666667))
    (:vel-y (meters 0.0033333334))
    (:scalevel-x (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.2)
    (:accel-x (meters 0.00033333333))
    )
  )

;; failed to figure out what this is:
(defpart 911
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.066 0.066)
    (:x (meters -4))
    (:y (meters -2) (meters 0.5))
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 32.0)
    (:g 32.0)
    (:b 32.0)
    (:a 0.0 32.0)
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.4) (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.21333334)
    (:accel-y (meters 0.0003))
    (:timer (seconds 2) (seconds 4.997))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.5))
    (:next-launcher 912)
    )
  )

;; failed to figure out what this is:
(defpart 908
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 8.0 24.0)
    (:x (meters -4))
    (:y (meters -4.5) (meters 1))
    (:z (meters -0.5))
    (:scale-x (meters 0.1) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 128.0 128.0)
    (:g 128.0)
    (:b 64.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.013333334) (meters 0.08))
    (:scalevel-x (meters -0.00055555557))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.2)
    (:fade-b -0.2)
    (:fade-a -0.6)
    (:accel-y (meters -0.0016666667))
    (:friction 0.94)
    (:timer (seconds 0.3) (seconds 0.197))
    (:flags (bit2))
    (:conerot-x (degrees 0) (degrees 120))
    (:conerot-y (degrees -220) (degrees 110))
    )
  )

;; failed to figure out what this is:
(defpart 909
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 8.0 24.0)
    (:x (meters -4))
    (:y (meters -4.5) (meters 1))
    (:z (meters 0.5))
    (:scale-x (meters 0.1) (meters 0.2))
    (:scale-y :copy scale-x)
    (:r 128.0 128.0)
    (:g 128.0)
    (:b 64.0)
    (:a 64.0 64.0)
    (:vel-y (meters 0.013333334) (meters 0.08))
    (:scalevel-x (meters -0.00055555557))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.2)
    (:fade-b -0.2)
    (:fade-a -0.6)
    (:accel-y (meters -0.0016666667))
    (:friction 0.94)
    (:timer (seconds 0.3) (seconds 0.197))
    (:flags (bit2))
    (:conerot-x (degrees 0) (degrees 120))
    (:conerot-y (degrees -110) (degrees 110))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-misty-bone-01
  :id 192
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 916 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 917 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 918 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 919 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 920 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 921 :period (seconds 2.6) :length (seconds 0.107) :offset 64996)
    )
  )

;; failed to figure out what this is:
(defpart 921
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 187))
    )
  )

;; failed to figure out what this is:
(defpart 920
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 187))
    )
  )

;; failed to figure out what this is:
(defpart 919
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 187))
    )
  )

;; failed to figure out what this is:
(defpart 918
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 187))
    )
  )

;; failed to figure out what this is:
(defpart 922
  :init-specs ((:fade-a -1.0666667))
  )

;; failed to figure out what this is:
(defpart 917
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 187))
    )
  )

;; failed to figure out what this is:
(defpart 914
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 140))
    )
  )

;; failed to figure out what this is:
(defpart 915
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters 1) (meters 1))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-y (meters 0.04) (meters 0.026666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 923)
    (:conerot-x (degrees 70) (degrees 30))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 140))
    )
  )

;; failed to figure out what this is:
(defpart 923
  :init-specs ((:fade-a -3.2))
  )

;; failed to figure out what this is:
(defpart 916
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 187))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-misty-bone-03
  :id 193
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 924 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 925 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 926 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 927 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 928 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 929 :period (seconds 2.6) :length (seconds 0.107) :offset 64996)
    )
  )

;; failed to figure out what this is:
(defpart 929
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 249.99998))
    )
  )

;; failed to figure out what this is:
(defpart 928
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 249.99998))
    )
  )

;; failed to figure out what this is:
(defpart 927
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 249.99998))
    )
  )

;; failed to figure out what this is:
(defpart 926
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 249.99998))
    )
  )

;; failed to figure out what this is:
(defpart 925
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -80))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 249.99998))
    )
  )

;; failed to figure out what this is:
(defpart 924
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 249.99998))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-misty-bone-02
  :id 194
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 930 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 931 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 932 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 933 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 934 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 935 :period (seconds 2.6) :length (seconds 0.107) :offset 64996)
    )
  )

;; failed to figure out what this is:
(defpart 935
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 114))
    )
  )

;; failed to figure out what this is:
(defpart 934
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 114))
    )
  )

;; failed to figure out what this is:
(defpart 933
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 114))
    )
  )

;; failed to figure out what this is:
(defpart 932
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 114))
    )
  )

;; failed to figure out what this is:
(defpart 931
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -90))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 114))
    )
  )

;; failed to figure out what this is:
(defpart 930
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 114))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-misty-bone-07
  :id 195
  :duration (seconds 2)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 24)
  :parts ((sp-item 914 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 915 :period (seconds 2.6) :length (seconds 0.05))
    (sp-item 936 :period (seconds 2.6) :length (seconds 0.215))
    (sp-item 937 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 938 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 939 :period (seconds 2.6) :length (seconds 0.107) :offset 65131)
    (sp-item 940 :period (seconds 2.6) :length (seconds 0.107) :offset 65056)
    (sp-item 941 :period (seconds 2.6) :length (seconds 0.107) :offset 64966)
    )
  )

;; failed to figure out what this is:
(defpart 941
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 14.000005))
    )
  )

;; failed to figure out what this is:
(defpart 940
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters 2.5))
    (:y (meters 1) (meters 1))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 32.0 16.0)
    (:vel-y (meters 0.006666667) (meters 0.013333334))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.000033333334))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-x (degrees 80) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 2))
    (:rotate-y (degrees 14.000005))
    )
  )

;; failed to figure out what this is:
(defpart 939
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 3.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 2) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 16.0)
    (:vel-y (meters -0.01) (meters 0.04))
    (:vel-z (meters -0.023333333) (meters 0.046666667))
    (:scalevel-x (meters 0.006666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 14.000005))
    )
  )

;; failed to figure out what this is:
(defpart 938
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:x (meters -0.5) (meters 1.5))
    (:y (meters 1.5) (meters 0.5))
    (:z (meters -2.5) (meters 5))
    (:scale-x (meters 0.05) (meters 0.2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 64.0 32.0)
    (:vel-x (meters -0.026666667) (meters 0.013333334))
    (:vel-y (meters -0.013333334) (meters 0.053333335))
    (:vel-z (meters -0.033333335) (meters 0.06666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:accel-y (meters -0.0016666667))
    (:friction 0.996)
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.3))
    (:next-launcher 922)
    (:conerot-z (degrees -94))
    (:conerot-radius (meters 18))
    (:rotate-y (degrees 14.000005))
    )
  )

;; failed to figure out what this is:
(defpart 937
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 8.0)
    (:y (meters -1) (meters 1.5))
    (:z (meters -5) (meters 10))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 16.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.026666667)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:conerot-z (degrees -90))
    (:conerot-radius (meters 4) (meters 16))
    (:rotate-y (degrees 14.000005))
    )
  )

;; failed to figure out what this is:
(defpart 936
  :init-specs ((:texture (new 'static 'texture-id :index #x19 :page #x2))
    (:num 2.0)
    (:x (meters -3.5) (meters 4.5))
    (:y (meters 1) (meters 12))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 32.0)
    (:g 100.0 32.0)
    (:b 90.0 32.0)
    (:a 8.0 8.0)
    (:vel-y (meters -0.0016666667))
    (:rotvel-z (degrees -0.15) 1 (degrees 0.3))
    (:fade-a -0.017777778)
    (:accel-y (meters -0.0001))
    (:timer (seconds 3))
    (:flags (bit2 bit12))
    (:rotate-y (degrees 14.000005))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-misty-boat-paddle
  :id 196
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 944 :fade-after (meters 100)))
  )

;; failed to figure out what this is:
(defpart 944
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 0.8)
    (:x (meters -11) (meters 22))
    (:y (meters 0))
    (:z (meters 5) (meters 5))
    (:scale-x (meters 5.5) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 48.0)
    (:g 64.0)
    (:b 96.0 32.0)
    (:a 0.0)
    (:vel-z (meters -0.016666668) (meters 0.033333335))
    (:rotvel-z (degrees -0.2) 1 (degrees 0.4))
    (:fade-a 0.53333336)
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:next-time (seconds 0.25))
    (:next-launcher 945)
    (:rotate-y (degrees 140))
    )
  )

;; failed to figure out what this is:
(defpart 945
  :init-specs ((:fade-a -0.53333336))
  )

;; failed to figure out what this is:
(defpart 943
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 6.0)
    (:x (meters -9) (meters 18))
    (:scale-x (meters 0.5))
    (:scale-y :copy scale-x)
    (:r 64.0)
    (:g 96.0)
    (:b 100.0 28.0)
    (:a 0.0)
    (:vel-y (meters 0.001) (meters 0.033333335))
    (:fade-a 0.53333336)
    (:accel-y (meters -0.0013333333))
    (:timer (seconds 1))
    (:flags (bit2 bit12))
    (:next-time (seconds 0.7))
    (:next-launcher 946)
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) 3 (degrees 45))
    (:conerot-z (degrees 90))
    (:conerot-radius (meters 9))
    (:rotate-y (degrees 140))
    )
  )

;; failed to figure out what this is:
(defpart 946
  :init-specs ((:fade-a -2.0))
  )

;; failed to figure out what this is:
(defpart 942
  :init-specs ((:texture (new 'static 'texture-id :index #x18 :page #x2))
    (:num 1.0)
    (:x (meters -11) (meters 22))
    (:y (meters 0.5))
    (:z (meters 6) (meters 4))
    (:scale-x (meters 3.5))
    (:rot-z (degrees 0) 1 (degrees 180))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 0.0)
    (:vel-y (meters 0.001) (meters 0.033333335))
    (:vel-z (meters -0.016666668) (meters 0.033333335))
    (:fade-a 0.53333336)
    (:accel-y (meters -0.0013333333))
    (:timer (seconds 1))
    (:flags (bit2 bit12 bit14))
    (:next-time (seconds 0.25))
    (:next-launcher 947)
    (:rotate-y (degrees 140))
    )
  )

;; failed to figure out what this is:
(defpart 947
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.2)) (:next-launcher 948))
  )

;; failed to figure out what this is:
(defpart 948
  :init-specs ((:fade-a -1.0666667))
  )

;; definition of type boatpaddle
(deftype boatpaddle (process-drawable)
  ()
  (:states
    boatpaddle-idle
    )
  )

;; definition for method 3 of type boatpaddle
(defmethod inspect ((this boatpaddle))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defskelgroup *boatpaddle-sg* boatpaddle boatpaddle-lod0-jg boatpaddle-idle-ja
              ((boatpaddle-lod0-mg (meters 20)) (boatpaddle-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 18)
              )

;; failed to figure out what this is:
(defstate boatpaddle-idle (boatpaddle)
  :code (behavior ()
    (local-vars (s4-0 int))
    (loop
      (quaternion-rotate-local-x! (-> self root quat) (-> self root quat) (* -5461.3335 (seconds-per-frame)))
      (let ((gp-0 (-> self part))
            (s5-0 (-> self root trans))
            )
        (let ((f30-0 1274.3112)
              (f28-0 (the float s4-0))
              )
          (set! s4-0 (/ (the int (* 65536.0 (ja-frame-num 0))) (+ (-> (ja-group) data 0 length) -1)))
          (set! (-> *part-id-table* 943 init-specs 17 initial-valuef)
                (+ f30-0 (- f28-0 (* (the float (the int (/ (the float s4-0) 8192.0))) 8192.0)))
                )
          )
        (spawn gp-0 s5-0)
        )
      (suspend)
      )
    )
  :post ja-post
  )

;; definition for method 11 of type boatpaddle
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this boatpaddle) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *boatpaddle-sg* '())
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 196) this))
  (go boatpaddle-idle)
  (none)
  )

;; definition of type windturbine
(deftype windturbine (process-drawable)
  ((spawn-particle-enable  symbol)
   (angle-speed            float)
   )
  (:states
    windturbine-idle
    )
  )

;; definition for method 3 of type windturbine
(defmethod inspect ((this windturbine))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tspawn-particle-enable: ~A~%" (-> this spawn-particle-enable))
  (format #t "~T~Tangle-speed: ~f~%" (-> this angle-speed))
  this
  )

;; failed to figure out what this is:
(defskelgroup *windturbine-sg* windturbine windturbine-lod0-jg windturbine-idle-ja
              ((windturbine-lod0-mg (meters 20)) (windturbine-lod1-mg (meters 40)) (windturbine-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 3 0 7)
              )

;; failed to figure out what this is:
(defstate windturbine-idle (windturbine)
  :code (behavior ()
    (loop
      (let* ((a0-0 (-> self root trans))
             (f2-0
               (-> *wind-work*
                   wind-force
                   (logand (+ (the int (-> a0-0 x)) (the int (-> a0-0 z)) (-> *wind-work* wind-time)) 63)
                   )
               )
             (f0-5 (* 0.992 (+ (-> self angle-speed) (* 3.6408892 f2-0))))
             )
        (set! (-> self angle-speed) (fmin 65536.0 f0-5))
        )
      (quaternion-rotate-local-y!
        (-> self root quat)
        (-> self root quat)
        (* -1.0 (seconds-per-frame) (-> self angle-speed))
        )
      (if (-> self spawn-particle-enable)
          (spawn (-> self part) (-> self root trans))
          )
      (suspend)
      )
    )
  :post ja-post
  )

;; definition for method 11 of type windturbine
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this windturbine) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask ambient))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this spawn-particle-enable) (= (res-lump-value arg0 'particle-select uint128) 1))
  (if (-> this spawn-particle-enable)
      (set! (-> this part) (create-launch-control (-> *part-group-id-table* 191) this))
      )
  (initialize-skeleton this *windturbine-sg* '())
  (go windturbine-idle)
  (none)
  )

;; definition of type mis-bone-bridge
(deftype mis-bone-bridge (process-drawable)
  ((root              collide-shape-moving :override)
   (particle-group    sparticle-launch-group)
   (player-attack-id  int32)
   (fall-anim-index   int32)
   (hit-points        int8)
   )
  (:states
    mis-bone-bridge-bump
    (mis-bone-bridge-fall symbol)
    mis-bone-bridge-hit
    mis-bone-bridge-idle
    )
  )

;; definition for method 3 of type mis-bone-bridge
(defmethod inspect ((this mis-bone-bridge))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tparticle-group: ~A~%" (-> this particle-group))
  (format #t "~T~Tplayer-attack-id: ~D~%" (-> this player-attack-id))
  (format #t "~T~Tfall-anim-index: ~D~%" (-> this fall-anim-index))
  (format #t "~T~Thit-points: ~D~%" (-> this hit-points))
  this
  )

;; failed to figure out what this is:
(defskelgroup *mis-bone-bridge-sg* mis-bone-bridge mis-bone-bridge-lod0-jg mis-bone-bridge-idle-ja
              ((mis-bone-bridge-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 1 0 20)
              )

;; definition for function mis-bone-bridge-event-handler
;; INFO: Used lq/sq
(defbehavior mis-bone-bridge-event-handler mis-bone-bridge ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack)
     (let ((s5-0 (-> arg3 param 2))
           (gp-0 (vector-x-quaternion! (new-stack-vector0) (-> self root quat)))
           (a0-4 (vector-z-quaternion! (new-stack-vector0) (-> self root quat)))
           (v1-4 (vector-! (new-stack-vector0) (-> *target* control trans) (-> self root trans)))
           )
       0.0
       0.0
       (when (!= s5-0 (-> self player-attack-id))
         (set! (-> self player-attack-id) (the-as int s5-0))
         (let ((f0-3 (vector-dot gp-0 v1-4))
               (f1-1 (vector-dot a0-4 v1-4))
               )
           (cond
             ((and (< 0.0 f1-1) (< (fabs (* 0.5 f0-3)) f1-1))
              (if (send-event *target* 'query 'powerup (pickup-type eco-red))
                  (go mis-bone-bridge-fall #f)
                  (go mis-bone-bridge-hit)
                  )
              )
             (else
               (go mis-bone-bridge-bump)
               #f
               )
             )
           )
         )
       )
     )
    )
  )

;; failed to figure out what this is:
(defstate mis-bone-bridge-idle (mis-bone-bridge)
  :event mis-bone-bridge-event-handler
  :code (behavior ()
    (ja :num-func num-func-identity :frame-num 0.0)
    (loop
      (if (and *target* (>= 32768.0 (vector-vector-distance (-> self root trans) (-> *target* control trans))))
          (level-hint-spawn
            (text-id misty-bone-bridge-hint)
            "sksp0435"
            (the-as entity #f)
            *entity-pool*
            (game-task none)
            )
          )
      (suspend)
      )
    )
  :post transform-post
  )

;; failed to figure out what this is:
(defstate mis-bone-bridge-bump (mis-bone-bridge)
  :event mis-bone-bridge-event-handler
  :trans rider-trans
  :code (behavior ()
    (ja-no-eval :group! mis-bone-bridge-bumped-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go mis-bone-bridge-idle)
    )
  :post rider-post
  )

;; failed to figure out what this is:
(defstate mis-bone-bridge-hit (mis-bone-bridge)
  :event mis-bone-bridge-event-handler
  :trans rider-trans
  :code (behavior ()
    (+! (-> self hit-points) -1)
    (if (zero? (-> self hit-points))
        (go mis-bone-bridge-fall #f)
        )
    (ja-no-eval :group! mis-bone-bridge-kicked-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go mis-bone-bridge-idle)
    )
  :post rider-post
  )

;; failed to figure out what this is:
(defstate mis-bone-bridge-fall (mis-bone-bridge)
  :trans rider-trans
  :code (behavior ((arg0 symbol))
    (process-entity-status! self (entity-perm-status complete) #t)
    (when (not arg0)
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> self particle-group)
        -1
        #f
        #f
        #f
        (-> self root trans)
        :to *entity-pool*
        )
      (ja-no-eval :group! (-> self draw art-group data (-> self fall-anim-index)) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    (ja :group! (-> self draw art-group data (-> self fall-anim-index))
        :num! (identity (the float (+ (-> (ja-group) data 0 length) -1)))
        )
    (loop
      (suspend)
      )
    )
  :post rider-post
  )

;; definition for method 11 of type mis-bone-bridge
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this mis-bone-bridge) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-others))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid attackable attackable-unused))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 0)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 98304.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 0)
        (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 9011.2)
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 4)
        (set-vector! (-> s2-1 local-sphere) 0.0 49152.0 0.0 49152.0)
        (append-prim s3-0 s2-1)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *mis-bone-bridge-sg* '())
  (let ((v1-40 (res-lump-value arg0 'animation-select uint128)))
    (cond
      ((= (the-as uint v1-40) 1)
       (set! (-> this fall-anim-index) 2)
       (set! (-> this particle-group) (-> *part-group-id-table* 192))
       )
      ((= (the-as uint v1-40) 2)
       (set! (-> this fall-anim-index) 3)
       (set! (-> this particle-group) (-> *part-group-id-table* 194))
       )
      ((= (the-as uint v1-40) 3)
       (set! (-> this fall-anim-index) 2)
       (set! (-> this particle-group) (-> *part-group-id-table* 193))
       )
      ((= (the-as uint v1-40) 7)
       (set! (-> this fall-anim-index) 4)
       (set! (-> this particle-group) (-> *part-group-id-table* 195))
       )
      (else
        (set! (-> this fall-anim-index) 2)
        (set! (-> this particle-group) (-> *part-group-id-table* 192))
        )
      )
    )
  (set! (-> this hit-points) 3)
  (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
      (go mis-bone-bridge-fall #t)
      (go mis-bone-bridge-idle)
      )
  (none)
  )

;; definition of type breakaway
(deftype breakaway (process-drawable)
  ((root  collide-shape-moving :override)
   )
  (:methods
    (init! (_type_ res-lump int) none)
    (go-idle (_type_) none)
    )
  (:states
    breakaway-about-to-fall
    breakaway-fall
    breakaway-idle
    )
  )

;; definition for method 3 of type breakaway
(defmethod inspect ((this breakaway))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defstate breakaway-idle (breakaway)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touch)
       (send-event proc 'no-look-around (seconds 1.5))
       (go breakaway-about-to-fall)
       )
      )
    )
  :code anim-loop
  :post transform-post
  )

;; definition for function actor-wait-for-period
(defun actor-wait-for-period ((arg0 time-frame))
  (let ((s5-0 (current-time)))
    (while (not (time-elapsed? s5-0 arg0))
      (suspend)
      )
    )
  #f
  )

;; failed to figure out what this is:
(defstate breakaway-about-to-fall (breakaway)
  :code (behavior ()
    (sound-play "falling-bones")
    (launch-particles (-> *part-id-table* 281) (-> self root trans))
    (let ((gp-1 #f)
          (s5-1 (current-time))
          )
      (loop
        (ja-no-eval :group! (ja-group) :num! (seek! (ja-aframe 15.0 0)) :frame-num (ja-aframe 1.0 0))
        (until (ja-done? 0)
          (when (and (not gp-1) (time-elapsed? s5-1 (seconds 0.15)))
            (set! gp-1 #t)
            (send-to-next-and-prev (-> self link) 'touch)
            )
          (if (time-elapsed? s5-1 (seconds 0.25))
              (go breakaway-fall)
              )
          (suspend)
          (ja :num! (seek! (ja-aframe 15.0 0)))
          )
        )
      )
    )
  :post rider-post
  )

;; failed to figure out what this is:
(defstate breakaway-fall (breakaway)
  :code (behavior ()
    (let ((f30-0 0.0)
          (f28-0 0.0)
          (f26-0 (* 0.1 (- (-> *standard-dynamics* gravity-length))))
          )
      (ja-no-eval :group! (ja-group) :num! (seek! (ja-aframe 32.0 0) 0.4) :frame-num (ja-aframe 16.0 0))
      (until (ja-done? 0)
        (+! f30-0 (* f28-0 (seconds-per-frame)))
        (+! f28-0 (* f26-0 (seconds-per-frame)))
        (+! (-> self root trans y) f30-0)
        (suspend)
        (ja :num! (seek! (ja-aframe 32.0 0) 0.4))
        )
      )
    (cleanup-for-death self)
    )
  :post rider-post
  )

;; definition for method 20 of type breakaway
(defmethod init! ((this breakaway) (arg0 res-lump) (arg1 int))
  (logior! (-> this mask) (process-mask platform))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s4-0 1)
    (let ((s2-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s2-0 collide-with) (collide-kind target))
      (set! (-> s2-0 prim-core action) (collide-action solid))
      (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s2-0 transform-index) arg1)
      (set-vector! (-> s2-0 local-sphere) 8192.0 -4096.0 8192.0 16384.0)
      (set-root-prim! s4-0 s2-0)
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (set! (-> this link) (new 'process 'actor-link-info this))
  (process-drawable-from-entity! this (the-as entity-actor arg0))
  (none)
  )

;; definition for method 21 of type breakaway
;; INFO: Return type mismatch object vs none.
(defmethod go-idle ((this breakaway))
  (go breakaway-idle)
  (none)
  )

;; definition of type breakaway-right
(deftype breakaway-right (breakaway)
  ()
  )

;; definition for method 3 of type breakaway-right
(defmethod inspect ((this breakaway-right))
  (let ((t9-0 (method-of-type breakaway inspect)))
    (t9-0 this)
    )
  this
  )

;; definition of type breakaway-mid
(deftype breakaway-mid (breakaway)
  ()
  )

;; definition for method 3 of type breakaway-mid
(defmethod inspect ((this breakaway-mid))
  (let ((t9-0 (method-of-type breakaway inspect)))
    (t9-0 this)
    )
  this
  )

;; definition of type breakaway-left
(deftype breakaway-left (breakaway)
  ()
  )

;; definition for method 3 of type breakaway-left
(defmethod inspect ((this breakaway-left))
  (let ((t9-0 (method-of-type breakaway inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defskelgroup *breakaway-right-sg* breakaway-right breakaway-right-lod0-jg breakaway-right-idle-ja
              ((breakaway-right-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7)
              )

;; failed to figure out what this is:
(defskelgroup *breakaway-mid-sg* breakaway-mid breakaway-mid-lod0-jg breakaway-mid-idle-ja
              ((breakaway-mid-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7)
              )

;; failed to figure out what this is:
(defskelgroup *breakaway-left-sg* breakaway-left breakaway-left-lod0-jg breakaway-left-idle-ja
              ((breakaway-left-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7)
              )

;; definition for method 11 of type breakaway-right
(defmethod init-from-entity! ((this breakaway-right) (arg0 entity-actor))
  (init! this arg0 3)
  (initialize-skeleton this *breakaway-right-sg* '())
  (go-idle this)
  (none)
  )

;; definition for method 11 of type breakaway-mid
(defmethod init-from-entity! ((this breakaway-mid) (arg0 entity-actor))
  (init! this arg0 3)
  (initialize-skeleton this *breakaway-mid-sg* '())
  (go-idle this)
  (none)
  )

;; definition for method 11 of type breakaway-left
(defmethod init-from-entity! ((this breakaway-left) (arg0 entity-actor))
  (init! this arg0 3)
  (initialize-skeleton this *breakaway-left-sg* '())
  (go-idle this)
  (none)
  )

;; definition for symbol *bone-platform-constants*, type rigid-body-platform-constants
(define *bone-platform-constants* (new 'static 'rigid-body-platform-constants
                                    :drag-factor 2.0
                                    :buoyancy-factor 2.0
                                    :max-buoyancy-depth (meters 3)
                                    :gravity-factor 1.0
                                    :gravity (meters 80)
                                    :player-weight (meters 35)
                                    :player-bonk-factor 1.0
                                    :player-dive-factor 1.0
                                    :player-force-distance (meters 1000)
                                    :player-force-clamp (meters 1000000)
                                    :player-force-timeout (seconds 0.1)
                                    :explosion-force (meters 1000)
                                    :linear-damping 1.0
                                    :angular-damping 1.0
                                    :control-point-count 5
                                    :mass 2.0
                                    :inertial-tensor-x (meters 3)
                                    :inertial-tensor-y (meters 2)
                                    :inertial-tensor-z (meters 3)
                                    :cm-joint-y (meters -3)
                                    :idle-distance (meters 50)
                                    :platform #t
                                    :sound-name "mud-plat"
                                    )
        )

;; definition of type bone-platform
(deftype bone-platform (rigid-body-platform)
  ((anchor-point  vector  :inline)
   )
  )

;; definition for method 3 of type bone-platform
(defmethod inspect ((this bone-platform))
  (let ((t9-0 (method-of-type rigid-body-platform inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tanchor-point: #<vector @ #x~X>~%" (-> this anchor-point))
  this
  )

;; failed to figure out what this is:
(defskelgroup *mis-bone-platform-sg* mis-bone-platform mis-bone-platform-lod0-jg mis-bone-platform-idle-ja
              ((mis-bone-platform-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

;; definition for method 27 of type bone-platform
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-27 ((this bone-platform) (arg0 vector))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (vector-! gp-0 arg0 (-> this rbody position))
    (set! (-> gp-0 y) 0.0)
    (let* ((f0-1 (vector-length gp-0))
           (f1-1 (* 20.0 (fmax 0.0 (fmin 4096.0 (+ -819.2 f0-1)))))
           )
      (when (< 0.0 f1-1)
        (vector-float*! gp-0 gp-0 (/ f1-1 f0-1))
        (rigid-body-method-15 (-> this rbody) gp-0)
        )
      )
    )
  0
  (none)
  )

;; definition for method 23 of type bone-platform
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-23 ((this bone-platform) (arg0 float))
  (call-parent-method this arg0)
  (rigid-body-platform-method-27 this (-> this anchor-point))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate rigid-body-platform-idle (bone-platform)
  :virtual #t
  :enter (behavior ()
    (ja-channel-set! 0)
    )
  :code (behavior ()
    (loop
      (suspend)
      )
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate rigid-body-platform-float (bone-platform)
  :virtual #t
  :event rigid-body-platform-event-handler
  :trans (behavior ()
    (-> self entity extra trans y)
    (cond
      ((or (not *target*) (< (-> self info idle-distance)
                             (vector-vector-distance (-> self root-overlay trans) (-> *target* control trans))
                             )
           )
       (let ((f30-1 -4096.0))
         (seek! (-> self float-height-offset) f30-1 (* 2048.0 (seconds-per-frame)))
         (if (= (-> self float-height-offset) f30-1)
             (go-virtual rigid-body-platform-idle)
             )
         )
       )
      (else
        (seek! (-> self float-height-offset) 4096.0 (* 2048.0 (seconds-per-frame)))
        )
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.1))
    (ja :group! mis-bone-platform-idle-ja)
    (ja :num-func num-func-identity :frame-num 0.0)
    (loop
      (suspend)
      )
    )
  :post rigid-body-platform-post
  )

;; definition for method 30 of type bone-platform
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-30 ((this bone-platform))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 3)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 20480.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root-overlay) s5-0)
    )
  0
  (none)
  )

;; definition for method 31 of type bone-platform
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-31 ((this bone-platform))
  (initialize-skeleton this *mis-bone-platform-sg* '())
  (rigid-body-platform-method-29 this *bone-platform-constants*)
  (set! (-> this float-height-offset) -4096.0)
  (if (name= (-> this name) "bone-platform-5")
      (set-vector! (-> this root-overlay scale) 0.8 1.0 0.8 1.0)
      )
  (let ((s5-0 (-> this info control-point-count)))
    (dotimes (s4-0 s5-0)
      (let ((s3-0 (-> this control-point-array data s4-0)))
        (let ((f30-0 (* 65536.0 (/ (the float s4-0) (the float s5-0)))))
          (set! (-> s3-0 local-pos x) (* 12288.0 (sin f30-0)))
          (set! (-> s3-0 local-pos y) -12288.0)
          (set! (-> s3-0 local-pos z) (* 12288.0 (cos f30-0)))
          )
        (set! (-> s3-0 local-pos w) 1.0)
        )
      )
    )
  (set! (-> this anchor-point quad) (-> this root-overlay trans quad))
  0
  (none)
  )

;; definition of type mistycam
(deftype mistycam (process-hidden)
  ()
  )

;; definition for method 3 of type mistycam
(defmethod inspect ((this mistycam))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tmask: ~D~%" (-> this mask))
  (format #t "~Tparent: #x~X~%" (-> this parent))
  (format #t "~Tbrother: #x~X~%" (-> this brother))
  (format #t "~Tchild: #x~X~%" (-> this child))
  (format #t "~Tppointer: #x~X~%" (-> this ppointer))
  (format #t "~Tself: ~A~%" (-> this self))
  (format #t "~Tpool: ~A~%" (-> this pool))
  (format #t "~Tstatus: ~A~%" (-> this status))
  (format #t "~Tpid: ~D~%" (-> this pid))
  (format #t "~Tmain-thread: ~A~%" (-> this main-thread))
  (format #t "~Ttop-thread: ~A~%" (-> this top-thread))
  (format #t "~Tentity: ~A~%" (-> this entity))
  (format #t "~Tstate: ~A~%" (-> this state))
  (format #t "~Ttrans-hook: ~A~%" (-> this trans-hook))
  (format #t "~Tpost-hook: ~A~%" (-> this post-hook))
  (format #t "~Tevent-hook: ~A~%" (-> this event-hook))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tnext-state: ~A~%" (-> this next-state))
  (format #t "~Theap-base: #x~X~%" (-> this heap-base))
  (format #t "~Theap-top: #x~X~%" (-> this heap-top))
  (format #t "~Theap-cur: #x~X~%" (-> this heap-cur))
  (format #t "~Tstack-frame-top: ~A~%" (-> this stack-frame-top))
  (format #t "~Theap: #<kheap @ #x~X>~%" (&-> this heap-base))
  (format #t "~Tconnection-list: ~`'connectable`P~%" (-> this connection-list))
  (format #t "~Tstack[0] @ #x~X~%" (-> this stack))
  this
  )

;; failed to figure out what this is:
(defskelgroup *mistycam-sg* mistycam mistycam-lod0-jg mistycam-anim-ja
              ((mistycam-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 20)
              )

;; definition for function mistycam-spawn
;; INFO: Return type mismatch int vs none.
(defun mistycam-spawn ()
  (with-pp
    (let ((gp-0 (entity-actor-lookup (-> pp entity) 'alt-actor 0)))
      (when gp-0
        (let* ((gp-1
                 (ppointer->handle (process-spawn
                                     pov-camera
                                     (-> gp-0 extra trans)
                                     *mistycam-sg*
                                     (new 'static 'spool-anim :name "mistycam-cannon" :index 5 :parts 1 :command-list '())
                                     0
                                     #f
                                     '()
                                     :to pp
                                     )
                                   )
                 )
               (s5-2 (ppointer->handle
                       (process-spawn fuel-cell :init fuel-cell-init-as-clone gp-1 (-> pp entity extra perm task) :to pp)
                       )
                     )
               )
          (let ((v1-13 (handle->process gp-1)))
            (if v1-13
                (set! (-> (the-as pov-camera v1-13) notify-handle) (the-as handle s5-2))
                )
            )
          (while (handle->process gp-1)
            (suspend)
            )
          (send-event (handle->process s5-2) 'stop-cloning)
          )
        )
      )
    0
    (none)
    )
  )

;; definition of type misty-battlecontroller
(deftype misty-battlecontroller (battlecontroller)
  ()
  )

;; definition for method 3 of type misty-battlecontroller
(defmethod inspect ((this misty-battlecontroller))
  (let ((t9-0 (method-of-type battlecontroller inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defstate battlecontroller-play-intro-camera (misty-battlecontroller)
  :virtual #t
  :code (behavior ()
    (let ((gp-1 (ppointer->handle
                  (process-spawn pov-camera (-> self root trans) *mistycam-sg* "lurkerattack" 0 #f '() :to self)
                  )
                )
          )
      (while (handle->process (the-as handle gp-1))
        (suspend)
        )
      )
    (go-virtual battlecontroller-active)
    )
  )

;; definition for method 27 of type misty-battlecontroller
;; INFO: Return type mismatch int vs none.
(defmethod battlecontroller-method-27 ((this misty-battlecontroller))
  (call-parent-method this)
  (set! (-> this misty-ambush-collision-hack) #t)
  0
  (none)
  )

;; definition (debug) for function misty-cam-restore
;; INFO: Used lq/sq
(defun-debug misty-cam-restore ()
  (let ((a0-0 (new-stack-vector0))
        (a1-0 (new-stack-matrix0))
        )
    (set! (-> a0-0 x) -711702.3)
    (set! (-> a0-0 y) 268833.34)
    (set! (-> a0-0 z) 4193524.2)
    (set! (-> a0-0 w) 1.0)
    (set! (-> a1-0 vector 0 x) -0.6991)
    (set! (-> a1-0 vector 0 y) 0.0)
    (set! (-> a1-0 vector 0 z) -0.7149)
    (set! (-> a1-0 vector 0 w) 0.0)
    (set! (-> a1-0 vector 1 x) 0.3474)
    (set! (-> a1-0 vector 1 y) 0.8739)
    (set! (-> a1-0 vector 1 z) -0.3398)
    (set! (-> a1-0 vector 1 w) 0.0)
    (set! (-> a1-0 vector 2 x) 0.6248)
    (set! (-> a1-0 vector 2 y) -0.486)
    (set! (-> a1-0 vector 2 z) -0.611)
    (set! (-> a1-0 vector 2 w) 0.0)
    (set! (-> a1-0 vector 3 x) 0.0)
    (set! (-> a1-0 vector 3 y) 0.0)
    (set! (-> a1-0 vector 3 z) 0.0)
    (set! (-> a1-0 vector 3 w) 1.0)
    (debug-set-camera-pos-rot! a0-0 a1-0)
    )
  (send-event *camera* 'set-fov 11650.845)
  (clear *camera-old-level*)
  (format *camera-old-level* "misty")
  (set! *camera-old-cpu* 6867)
  (set! *camera-old-vu* #x4b0f)
  (set! *camera-old-tfrag-bytes* #x1ec490)
  (clear *camera-old-stat-string-tfrag*)
  (clear *camera-old-stat-string-tfrag-near*)
  (clear *camera-old-stat-string-total*)
  (let ((v0-7 #t))
    (set! *display-camera-old-stats* v0-7)
    v0-7
    )
  )

;; definition of type boat-fuelcell
(deftype boat-fuelcell (process-drawable)
  ((play-cutscene?  symbol)
   )
  (:states
    boat-fuelcell-die
    boat-fuelcell-idle
    boat-fuelcell-spawn
    )
  )

;; definition for method 3 of type boat-fuelcell
(defmethod inspect ((this boat-fuelcell))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tplay-cutscene?: ~A~%" (-> this play-cutscene?))
  this
  )

;; failed to figure out what this is:
(defstate boat-fuelcell-idle (boat-fuelcell)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('task-complete)
       (set! (-> self play-cutscene?) #t)
       (process-entity-status! self (entity-perm-status complete) #t)
       (go boat-fuelcell-spawn)
       )
      )
    )
  :code anim-loop
  )

;; failed to figure out what this is:
(defstate boat-fuelcell-spawn (boat-fuelcell)
  :event process-drawable-fuel-cell-handler
  :code (behavior ()
    (process-drawable-birth-fuel-cell (the-as entity #f) (the-as vector #f) #f)
    (when (and *target* (-> self play-cutscene?))
      (ambient-hint-spawn "gamcam02" (the-as vector #f) *entity-pool* 'camera)
      (let ((gp-1
              (ppointer->handle
                (process-spawn pov-camera (-> self root trans) *mistycam-sg* "mistycam-balloon-fuel-cell" 0 #f '() :to self)
                )
              )
            )
        (while (handle->process (the-as handle gp-1))
          (suspend)
          )
        )
      )
    (while (-> self child)
      (suspend)
      )
    (go boat-fuelcell-die)
    )
  )

;; failed to figure out what this is:
(defstate boat-fuelcell-die (boat-fuelcell)
  :code (behavior ()
    (cleanup-for-death self)
    )
  )

;; definition for method 11 of type boat-fuelcell
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this boat-fuelcell) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this play-cutscene?) #f)
  (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
      (go boat-fuelcell-spawn)
      (go boat-fuelcell-idle)
      )
  (none)
  )
