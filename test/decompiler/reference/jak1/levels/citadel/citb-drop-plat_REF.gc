;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defskelgroup *citb-drop-plat-sg* citb-drop-plat citb-drop-plat-lod0-jg citb-drop-plat-idle-ja
              ((citb-drop-plat-lod0-mg (meters 20)) (citb-drop-plat-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

;; failed to figure out what this is:
(defskelgroup *citb-drop-plat-red-sg* citb-drop-plat citb-drop-plat-red-lod0-jg citb-drop-plat-red-idle-ja
              ((citb-drop-plat-red-lod0-mg (meters 20)) (citb-drop-plat-red-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

;; failed to figure out what this is:
(defskelgroup *citb-drop-plat-green-sg* citb-drop-plat citb-drop-plat-green-lod0-jg citb-drop-plat-green-idle-ja
              ((citb-drop-plat-green-lod0-mg (meters 20)) (citb-drop-plat-green-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

;; failed to figure out what this is:
(defskelgroup *citb-drop-plat-blue-sg* citb-drop-plat citb-drop-plat-blue-lod0-jg citb-drop-plat-blue-idle-ja
              ((citb-drop-plat-blue-lod0-mg (meters 20)) (citb-drop-plat-blue-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

;; failed to figure out what this is:
(defskelgroup *citb-drop-plat-yellow-sg* citb-drop-plat citb-drop-plat-yellow-lod0-jg citb-drop-plat-yellow-idle-ja
              ((citb-drop-plat-yellow-lod0-mg (meters 20)) (citb-drop-plat-yellow-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3)
              )

;; definition of type drop-plat
(deftype drop-plat (process-drawable)
  ((root        collide-shape-moving :override)
   (spin-axis   vector                :inline)
   (spin-angle  float)
   (spin-speed  float)
   (interp      float)
   (duration    time-frame)
   (delay       time-frame)
   (color       int8)
   )
  (:methods
    (drop-plat-method-20 (_type_) none)
    (drop-plat-method-21 (_type_) none)
    )
  (:states
    drop-plat-die
    drop-plat-drop
    drop-plat-idle
    (drop-plat-rise draw-control)
    drop-plat-spawn
    )
  )

;; definition for method 3 of type drop-plat
(defmethod inspect ((this drop-plat))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tspin-axis: #<vector @ #x~X>~%" (-> this spin-axis))
  (format #t "~T~Tspin-angle: ~f~%" (-> this spin-angle))
  (format #t "~T~Tspin-speed: ~f~%" (-> this spin-speed))
  (format #t "~T~Tinterp: ~f~%" (-> this interp))
  (format #t "~T~Tduration: ~D~%" (-> this duration))
  (format #t "~T~Tdelay: ~D~%" (-> this delay))
  (format #t "~T~Tcolor: ~D~%" (-> this color))
  this
  )

;; failed to figure out what this is:
(defstate drop-plat-idle (drop-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('drop)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go drop-plat-drop)
       )
      (('touch 'attack)
       (send-event *target* 'no-look-around (seconds 1))
       (send-event (ppointer->process (-> self parent)) 'player-stepped (-> self color))
       #f
       )
      )
    )
  :code (behavior ()
    (suspend)
    (update-transforms! (-> self root))
    (set-time! (-> self state-time))
    (logior! (-> self mask) (process-mask actor-pause))
    (loop
      (if (time-elapsed? (-> self state-time) (-> self duration))
          (go drop-plat-drop)
          )
      (suspend)
      )
    )
  :post ja-post
  )

;; definition for function drop-plat-set-fade
;; INFO: Return type mismatch int vs none.
(defbehavior drop-plat-set-fade drop-plat ()
  (let ((f0-1
          (fmin
            1.0
            (* 0.000012207031
               (- (-> self root trans y) (+ -204800.0 (-> (the-as process-drawable (-> self parent 0)) root trans y)))
               )
            )
          )
        )
    (set-vector! (-> self draw color-mult) f0-1 f0-1 f0-1 1.0)
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate drop-plat-spawn (drop-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('drop)
       (go drop-plat-die)
       )
      )
    )
  :code (behavior ()
    (set! (-> self root trans y) (+ -204800.0 (-> (the-as process-drawable (-> self parent 0)) root trans y)))
    (logior! (-> self draw status) (draw-status hidden))
    (ja-post)
    (set-time! (-> self state-time))
    (loop
      (when (time-elapsed? (-> self state-time) (-> self delay))
        (let ((v1-14 (logclear (-> self draw status) (draw-status hidden)))
              (a0-5 (-> self draw))
              )
          (set! (-> a0-5 status) v1-14)
          (go drop-plat-rise a0-5)
          )
        )
      (suspend)
      )
    )
  )

;; failed to figure out what this is:
(defstate drop-plat-rise (drop-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('drop)
       (go drop-plat-drop)
       )
      )
    )
  :code (behavior ((arg0 draw-control))
    (set! (-> self interp) 1.0)
    (set-time! (-> self state-time))
    (set! (-> self spin-angle) 0.0)
    (set! (-> self root trans y) (+ -204800.0 (-> (the-as process-drawable (-> self parent 0)) root trans y)))
    (let ((gp-0 (new 'stack-no-clear 'vector))
          (s5-0 #f)
          )
      (set! (-> gp-0 quad) (-> self root trans quad))
      (set! (-> gp-0 y) (-> (the-as process-drawable (-> self parent 0)) root trans y))
      (loop
        (let ((f0-6 (fmax 0.0 (- 1.0 (* 0.0033333334 (the float (- (current-time) (-> self state-time))))))))
          (set! (-> self interp) (* f0-6 f0-6))
          )
        (set! (-> self root trans y)
              (- (-> (the-as process-drawable (-> self parent 0)) root trans y) (* 204800.0 (-> self interp)))
              )
        (when (and (not s5-0) (< (-> self interp) 0.05))
          (set! s5-0 #t)
          (sound-play "bridge-piece-up" :position (the-as symbol gp-0))
          )
        (set! (-> self spin-angle) (* 10.0 (-> self spin-speed) (-> self interp)))
        (if (= (-> (the-as process-drawable (-> self parent 0)) root trans y) (-> self root trans y))
            (go drop-plat-idle)
            )
        (suspend)
        )
      )
    )
  :post (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! gp-0 (-> self spin-axis) (-> self spin-angle))
      (quaternion*! (-> self root quat) (-> (the-as process-drawable (-> self parent 0)) root quat) gp-0)
      )
    (drop-plat-set-fade)
    (transform-post)
    )
  )

;; failed to figure out what this is:
(defstate drop-plat-drop (drop-plat)
  :code (behavior ()
    (when (= (-> (the-as process-drawable (-> self parent 0)) root trans y) (-> self root trans y))
      (set-time! (-> self state-time))
      (sound-play "bridge-piece-dn")
      (let ((gp-1 (the int (* 300.0 (rand-vu-float-range 0.2 0.3)))))
        (while (not (time-elapsed? (-> self state-time) gp-1))
          (set! (-> self interp) (/ (the float (- (current-time) (-> self state-time))) (the float gp-1)))
          (set! (-> self spin-angle) (* 910.2222 (sin (* 196608.0 (-> self interp)))))
          (suspend)
          )
        )
      )
    (loop
      (vector-v++! (-> self root transv) (compute-acc-due-to-gravity (-> self root) (new-stack-vector0) 0.0))
      (vector-v++! (-> self root trans) (-> self root transv))
      (if (< 204800.0 (- (-> (the-as process-drawable (-> self parent 0)) root trans y) (-> self root trans y)))
          (go drop-plat-die)
          )
      (+! (-> self spin-angle) (* (-> self spin-speed) (seconds-per-frame)))
      (suspend)
      )
    )
  :post (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! gp-0 (-> self spin-axis) (-> self spin-angle))
      (quaternion*! (-> self root quat) (-> (the-as process-drawable (-> self parent 0)) root quat) gp-0)
      )
    (drop-plat-set-fade)
    (transform-post)
    )
  )

;; failed to figure out what this is:
(defstate drop-plat-die (drop-plat)
  :code (behavior ()
    (cleanup-for-death self)
    )
  )

;; definition for method 20 of type drop-plat
;; INFO: Return type mismatch int vs none.
(defmethod drop-plat-method-20 ((this drop-plat))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 12288.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 21 of type drop-plat
;; INFO: Return type mismatch int vs none.
(defmethod drop-plat-method-21 ((this drop-plat))
  (case (-> this color)
    ((1)
     (initialize-skeleton this *citb-drop-plat-red-sg* '())
     )
    ((2)
     (initialize-skeleton this *citb-drop-plat-green-sg* '())
     )
    ((3)
     (initialize-skeleton this *citb-drop-plat-blue-sg* '())
     )
    ((4)
     (initialize-skeleton this *citb-drop-plat-yellow-sg* '())
     )
    (else
      (initialize-skeleton this *citb-drop-plat-sg* '())
      )
    )
  (logclear! (-> this mask) (process-mask actor-pause))
  (let ((s3-0 (new 'stack-no-clear 'vector))
        (s5-0 (new 'stack-no-clear 'vector))
        (s4-0 (new 'stack-no-clear 'vector))
        )
    (set! (-> s3-0 x) (* 65536.0 (rand-vu)))
    (let ((f30-1 14563.556)
          (f0-2 (rand-vu-float-range -1.0 1.0))
          )
      (set! (-> s3-0 y) (* f30-1 (* f0-2 f0-2)))
      )
    (vector-sincos! s5-0 s4-0 s3-0)
    (set! (-> this spin-axis x) (* (-> s4-0 y) (-> s4-0 x)))
    (set! (-> this spin-axis y) (-> s5-0 y))
    (set! (-> this spin-axis z) (* (-> s4-0 y) (-> s5-0 x)))
    )
  (set! (-> this spin-axis w) 1.0)
  (set! (-> this spin-angle) 0.0)
  (set! (-> this spin-speed) (* 8192.0 (+ 1.0 (rand-vu))))
  0
  (none)
  )

;; definition for function drop-plat-init-by-other
;; INFO: Used lq/sq
;; INFO: Return type mismatch object vs none.
(defbehavior drop-plat-init-by-other drop-plat ((arg0 vector) (arg1 time-frame) (arg2 time-frame) (arg3 int))
  (set! (-> self color) arg3)
  (set! (-> self delay) arg1)
  (set! (-> self duration) arg2)
  (drop-plat-method-20 self)
  (set! (-> self root trans quad) (-> arg0 quad))
  (vector-identity! (-> self root scale))
  (quaternion-copy! (-> self root quat) (-> (the-as process-drawable (-> self parent 0)) root quat))
  (drop-plat-method-21 self)
  (go drop-plat-spawn)
  (none)
  )

;; definition of type handle-inline-array
(deftype handle-inline-array (inline-array-class)
  ((data  handle  :dynamic)
   )
  )

;; definition for method 3 of type handle-inline-array
(defmethod inspect ((this handle-inline-array))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tlength: ~D~%" (-> this length))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tdata[0] @ #x~X~%" (-> this data))
  this
  )

;; failed to figure out what this is:
(set! (-> handle-inline-array heap-base) (the-as uint 8))

;; definition of type citb-drop-plat
(deftype citb-drop-plat (process-drawable)
  ((x-count            int32)
   (z-count            int32)
   (child-count        int32)
   (child-array        handle-inline-array)
   (child-color-array  (pointer int8))
   (x-dir              vector  :inline)
   (z-dir              vector  :inline)
   (origin             vector  :inline)
   (x-spacing          float)
   (z-spacing          float)
   (idle-distance      float)
   (duration           time-frame)
   (drop-time          time-frame)
   )
  (:states
    citb-drop-plat-active
    citb-drop-plat-idle
    )
  )

;; definition for method 3 of type citb-drop-plat
(defmethod inspect ((this citb-drop-plat))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tx-count: ~D~%" (-> this x-count))
  (format #t "~T~Tz-count: ~D~%" (-> this z-count))
  (format #t "~T~Tchild-count: ~D~%" (-> this child-count))
  (format #t "~T~Tchild-array: ~A~%" (-> this child-array))
  (format #t "~T~Tchild-color-array: #x~X~%" (-> this child-color-array))
  (format #t "~T~Tx-dir: #<vector @ #x~X>~%" (-> this x-dir))
  (format #t "~T~Tz-dir: #<vector @ #x~X>~%" (-> this z-dir))
  (format #t "~T~Torigin: #<vector @ #x~X>~%" (-> this origin))
  (format #t "~T~Tx-spacing: ~f~%" (-> this x-spacing))
  (format #t "~T~Tz-spacing: ~f~%" (-> this z-spacing))
  (format #t "~T~Tidle-distance: ~f~%" (-> this idle-distance))
  (format #t "~T~Tduration: ~D~%" (-> this duration))
  (format #t "~T~Tdrop-time: ~D~%" (-> this drop-time))
  this
  )

;; definition for method 7 of type citb-drop-plat
;; INFO: Return type mismatch process-drawable vs citb-drop-plat.
(defmethod relocate ((this citb-drop-plat) (arg0 int))
  (if (nonzero? (-> this child-array))
      (&+! (-> this child-array) arg0)
      )
  (the-as citb-drop-plat ((method-of-type process-drawable relocate) this arg0))
  )

;; definition for function citb-drop-plat-spawn-children
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior citb-drop-plat-spawn-children citb-drop-plat ()
  (local-vars (s0-0 int) (sv-48 process) (sv-64 int))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    6
    0
    (let ((s5-0 0)
          (s4-0 1)
          )
      (when (< 0.0
               (vector-dot (vector-! (new 'stack-no-clear 'vector) (target-pos 0) (-> self root trans)) (-> self z-dir))
               )
        (set! s5-0 (+ (-> self z-count) -1))
        (set! s4-0 -1)
        )
      (dotimes (s3-2 (-> self z-count))
        (dotimes (s2-0 (-> self x-count))
          (let ((s1-0 (+ s2-0 (* s5-0 (-> self x-count)))))
            (set! (-> gp-0 quad) (-> self origin quad))
            (vector+*! gp-0 gp-0 (-> self x-dir) (* (-> self x-spacing) (the float s2-0)))
            (vector+*! gp-0 gp-0 (-> self z-dir) (* (-> self z-spacing) (the float s5-0)))
            (if (-> self child-color-array)
                (set! s0-0 (-> self child-color-array s1-0))
                (set! s0-0 (rand-vu-int-range 0 5))
                )
            (when (nonzero? s0-0)
              (set! sv-64 (the int (* 150.0 (rand-vu))))
              (set! sv-48 (get-process *default-dead-pool* drop-plat #x4000))
              (set! (-> self child-array data s1-0)
                    (ppointer->handle (when sv-48
                                        (let ((t9-6 (method-of-type drop-plat activate)))
                                          (t9-6 (the-as drop-plat sv-48) self 'drop-plat (the-as pointer #x70004000))
                                          )
                                        (let ((t9-7 run-function-in-process)
                                              (a0-8 sv-48)
                                              (a1-5 drop-plat-init-by-other)
                                              (a2-4 gp-0)
                                              (t0-0 (-> self duration))
                                              )
                                          ((the-as (function process function vector int int int none) t9-7)
                                           a0-8
                                           a1-5
                                           a2-4
                                           sv-64
                                           (the-as int t0-0)
                                           s0-0
                                           )
                                          )
                                        (-> sv-48 ppointer)
                                        )
                                      )
                    )
              )
            )
          )
        (let ((s2-1 (current-time)))
          (until (time-elapsed? s2-1 (seconds 0.12))
            (suspend)
            )
          )
        (+! s5-0 s4-0)
        )
      )
    )
  (set-time! (-> self drop-time))
  0
  (none)
  )

;; definition for function citb-drop-plat-drop-all-children
(defbehavior citb-drop-plat-drop-all-children citb-drop-plat ()
  (dotimes (gp-0 (-> self child-count))
    (send-event (handle->process (-> self child-array data gp-0)) 'drop)
    (set! (-> self child-array data gp-0) (the-as handle #f))
    )
  #f
  )

;; definition for function citb-drop-plat-drop-children
;; INFO: Return type mismatch int vs none.
(defbehavior citb-drop-plat-drop-children citb-drop-plat ((arg0 int))
  (cond
    ((= arg0 6)
     )
    (else
      (dotimes (s5-0 (-> self child-count))
        (let ((a0-3 (handle->process (-> self child-array data s5-0))))
          (when (and a0-3 (!= (-> (the-as drop-plat a0-3) color) 6) (= arg0 (-> (the-as drop-plat a0-3) color)))
            (send-event a0-3 'drop)
            (set! (-> self child-array data s5-0) (the-as handle #f))
            )
          )
        )
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate citb-drop-plat-idle (citb-drop-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (go citb-drop-plat-active)
       )
      )
    )
  :code (behavior ()
    (citb-drop-plat-drop-all-children)
    (loop
      (suspend)
      )
    )
  )

;; failed to figure out what this is:
(defstate citb-drop-plat-active (citb-drop-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('player-stepped)
       (when (time-elapsed? (-> self drop-time) (seconds 0.2))
         (set-time! (-> self drop-time))
         (citb-drop-plat-drop-children (the-as int (-> block param 0)))
         )
       )
      (('trigger)
       (go citb-drop-plat-idle)
       )
      )
    )
  :code (behavior ()
    (set-time! (-> self state-time))
    (citb-drop-plat-spawn-children)
    (loop
      (if (or (time-elapsed? (-> self state-time) (+ (-> self duration) (seconds 2)))
              (or (not *target*)
                  (< (-> self idle-distance) (vector-vector-distance (-> self root trans) (-> *target* control trans)))
                  )
              (not (-> self child))
              )
          (go citb-drop-plat-idle)
          )
      (suspend)
      )
    )
  )

;; definition for method 11 of type citb-drop-plat
;; INFO: Used lq/sq
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this citb-drop-plat) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (let ((v1-2 (res-lump-data arg0 'count pointer)))
    (when v1-2
      (set! (-> this x-count) (-> (the-as (pointer int32) v1-2) 0))
      (set! (-> this z-count) (-> (the-as (pointer int32) v1-2) 1))
      )
    )
  (set! (-> this child-count) (* (-> this x-count) (-> this z-count)))
  (set! (-> this child-color-array) (res-lump-data arg0 'plat-type (pointer int8)))
  (when (> (-> this child-count) 0)
    (set! (-> this child-array) (new 'process 'handle-inline-array (-> this child-count)))
    (dotimes (v1-9 (-> this child-count))
      (set! (-> this child-array data v1-9) (the-as handle #f))
      )
    )
  (set! (-> this x-spacing) 16384.0)
  (set! (-> this z-spacing) 16384.0)
  (set! (-> this idle-distance) (+ 40960.0 (* 0.5 (the float (-> this z-count)) (-> this z-spacing))))
  (set! (-> this duration) (the-as time-frame (the int (* 300.0 (+ 2.0 (the float (-> this z-count)))))))
  (let ((f0-7 (res-lump-float arg0 'rotoffset)))
    (quaternion-rotate-y! (-> this root quat) (-> this root quat) f0-7)
    )
  (vector-x-quaternion! (-> this x-dir) (-> this root quat))
  (vector-z-quaternion! (-> this z-dir) (-> this root quat))
  (set! (-> this origin quad) (-> this root trans quad))
  (let ((f0-10 (* -0.5 (the float (+ (-> this x-count) -1)) (-> this x-spacing)))
        (f30-0 (* -0.5 (the float (+ (-> this z-count) -1)) (-> this z-spacing)))
        )
    (vector+*! (-> this origin) (-> this origin) (-> this x-dir) f0-10)
    (vector+*! (-> this origin) (-> this origin) (-> this z-dir) f30-0)
    )
  (go citb-drop-plat-idle)
  (none)
  )
