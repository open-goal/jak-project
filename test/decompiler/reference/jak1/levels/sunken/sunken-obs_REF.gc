;;-*-Lisp-*-
(in-package goal)

;; definition of type water-vol-deadly
(deftype water-vol-deadly (process-hidden)
  ()
  )

;; definition for method 3 of type water-vol-deadly
(defmethod inspect ((this water-vol-deadly))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tname: ~A~%" (-> this name))
  (format #t "~Tmask: ~D~%" (-> this mask))
  (format #t "~Tparent: #x~X~%" (-> this parent))
  (format #t "~Tbrother: #x~X~%" (-> this brother))
  (format #t "~Tchild: #x~X~%" (-> this child))
  (format #t "~Tppointer: #x~X~%" (-> this ppointer))
  (format #t "~Tself: ~A~%" (-> this self))
  (format #t "~Tpool: ~A~%" (-> this pool))
  (format #t "~Tstatus: ~A~%" (-> this status))
  (format #t "~Tpid: ~D~%" (-> this pid))
  (format #t "~Tmain-thread: ~A~%" (-> this main-thread))
  (format #t "~Ttop-thread: ~A~%" (-> this top-thread))
  (format #t "~Tentity: ~A~%" (-> this entity))
  (format #t "~Tstate: ~A~%" (-> this state))
  (format #t "~Ttrans-hook: ~A~%" (-> this trans-hook))
  (format #t "~Tpost-hook: ~A~%" (-> this post-hook))
  (format #t "~Tevent-hook: ~A~%" (-> this event-hook))
  (format #t "~Tallocated-length: ~D~%" (-> this allocated-length))
  (format #t "~Tnext-state: ~A~%" (-> this next-state))
  (format #t "~Theap-base: #x~X~%" (-> this heap-base))
  (format #t "~Theap-top: #x~X~%" (-> this heap-top))
  (format #t "~Theap-cur: #x~X~%" (-> this heap-cur))
  (format #t "~Tstack-frame-top: ~A~%" (-> this stack-frame-top))
  (format #t "~Theap: #<kheap @ #x~X>~%" (&-> this heap-base))
  (format #t "~Tconnection-list: ~`'connectable`P~%" (-> this connection-list))
  (format #t "~Tstack[0] @ #x~X~%" (-> this stack))
  this
  )

;; definition of type side-to-side-plat
(deftype side-to-side-plat (plat)
  ((part-ry  float)
   )
  )

;; definition for method 3 of type side-to-side-plat
(defmethod inspect ((this side-to-side-plat))
  (let ((t9-0 (method-of-type plat inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tpart-ry: ~f~%" (-> this part-ry))
  this
  )

;; failed to figure out what this is:
(defskelgroup *side-to-side-plat-sg* side-to-side-plat side-to-side-plat-lod0-jg side-to-side-plat-idle-ja
              ((side-to-side-plat-lod0-mg (meters 20)) (side-to-side-plat-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 14)
              )

;; failed to figure out what this is:
(defpartgroup group-side-to-side-plat
  :id 436
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1713 :fade-after (meters 60) :falloff-to (meters 60))
    (sp-item 1714 :fade-after (meters 160) :falloff-to (meters 160))
    )
  )

;; failed to figure out what this is:
(defpart 1713
  :init-specs ((:num 4.0)
    (:x (meters -11) (meters 22))
    (:y (meters 1))
    (:rot-x 5)
    (:r 5324.8)
    (:g 4096.0)
    (:b 3686.4)
    (:vel-y (meters 0.0033333334))
    (:fade-b -16.383999)
    (:timer (seconds 0.085))
    (:flags (aux-list))
    (:conerot-x (degrees 140) (degrees 40))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 3))
    (:rotate-y (degrees 18))
    )
  )

;; failed to figure out what this is:
(defpart 1714
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 6.0)
    (:x (meters -11) (meters 22))
    (:y (meters 1.5))
    (:scale-x (meters 2) (meters 1))
    (:scale-y :copy scale-x)
    (:g 0.0 64.0)
    (:b 128.0 128.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.01))
    (:fade-g -0.42666668)
    (:fade-a -0.32)
    (:accel-y (meters -0.000033333334))
    (:friction 0.96)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 130) (degrees 100.00001))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 3))
    (:rotate-y (degrees 18))
    )
  )

;; definition for method 23 of type side-to-side-plat
(defmethod get-unlit-skel ((this side-to-side-plat))
  *side-to-side-plat-sg*
  )

;; definition for method 24 of type side-to-side-plat
;; INFO: Return type mismatch int vs none.
(defmethod baseplat-method-24 ((this side-to-side-plat))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 57344.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 26 of type side-to-side-plat
;; INFO: Return type mismatch float vs none.
(defmethod baseplat-method-26 ((this side-to-side-plat))
  (set! (-> this part-ry) (+ 16384.0 (quaternion-y-angle (-> this root quat))))
  (none)
  )

;; definition for method 25 of type side-to-side-plat
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod baseplat-method-25 ((this side-to-side-plat))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 436) this)))
    (set! (-> this part) v0-0)
    (the-as sparticle-launch-group v0-0)
    )
  )

;; definition for method 20 of type side-to-side-plat
;; INFO: Return type mismatch object vs none.
(defmethod baseplat-method-20 ((this side-to-side-plat))
  (when (nonzero? (-> this part))
    (set! (-> *part-id-table* 1713 init-specs 14 initial-valuef) (-> this part-ry))
    (set! (-> *part-id-table* 1714 init-specs 19 initial-valuef) (-> this part-ry))
    (spawn (-> this part) (-> this root trans))
    )
  (none)
  )

;; definition of type sunkencam
(deftype sunkencam (pov-camera)
  ((ppointer-override  (pointer sunkencam)  :overlay-at ppointer)
   (seq                uint64)
   )
  )

;; definition for method 3 of type sunkencam
(defmethod inspect ((this sunkencam))
  (let ((t9-0 (method-of-type pov-camera inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tseq: ~D~%" (-> this seq))
  this
  )

;; failed to figure out what this is:
(defskelgroup *sunkencam-sg* sunkencam sunkencam-lod0-jg -1
              ((sunkencam-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

;; definition for method 29 of type sunkencam
(defmethod set-stack-size! ((this sunkencam))
  (stack-size-set! (-> this main-thread) 512)
  (none)
  )

;; failed to figure out what this is:
(defstate pov-camera-playing (sunkencam)
  :virtual #t
  :exit (behavior ()
    (set! (-> *screen-filter* draw?) #f)
    )
  :code (behavior ()
    (let ((v1-0 (-> self seq)))
      (cond
        ((zero? v1-0)
         (ja-no-eval :group! sunkencam-start-door-shut-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (ja-no-eval :group! sunkencam-start-in-room-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (let ((v1-45 *screen-filter*))
           (set! (-> v1-45 draw?) #t)
           (set! (-> v1-45 color) (new 'static 'rgba :g #x20 :b #x40 :a #x50))
           )
         (set-blackout-frames (seconds 0.1))
         (ja-no-eval :group! sunkencam-middle-in-water-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (set-blackout-frames (seconds 0.5))
         (let ((gp-0 2))
           (ja-no-eval :group! sunkencam-end-out-of-water-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (+! gp-0 -1)
             (if (zero? gp-0)
                 (set! (-> *screen-filter* draw?) #f)
                 )
             (suspend)
             (ja :num! (seek!))
             )
           )
         (set-blackout-frames (seconds 0.1))
         )
        ((= v1-0 1)
         (ja-no-eval :group! sunkencam-dive-start-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (let ((v1-116 *screen-filter*))
           (set! (-> v1-116 draw?) #t)
           (set! (-> v1-116 color) (new 'static 'rgba :g #x20 :b #x40 :a #x50))
           )
         (set-blackout-frames (seconds 0.1))
         (ja-no-eval :group! sunkencam-dive-middle-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (set-blackout-frames (seconds 0.1))
         (let ((gp-1 2))
           (ja-no-eval :group! sunkencam-dive-end-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (+! gp-1 -1)
             (if (zero? gp-1)
                 (set! (-> *screen-filter* draw?) #f)
                 )
             (suspend)
             (ja :num! (seek!))
             )
           )
         (let ((gp-2 *camera*))
           (send-event gp-2 'teleport)
           (send-event gp-2 'change-state cam-fixed 0)
           (send-event gp-2 'change-state *camera-base-mode* 0)
           )
         (set-time! (-> self state-time))
         (until (time-elapsed? (-> self state-time) (seconds 1))
           (suspend)
           )
         )
        ((= v1-0 2)
         (ja-no-eval :group! sunkencam-helix-hit-switch-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         (ja-no-eval :group! sunkencam-helix-door-shuts-ja :num! (seek! max 0.67) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek! max 0.67))
           )
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-helix-show-rising-water-ja)
           (new 'static 'vector :x 2449408.0 :y -1822720.0 :z -7299072.0)
           0.67
           )
         )
        ((= v1-0 3)
         (ambient-hint-spawn "gamcam34" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup1-rise1-ja)
           (new 'static 'vector :x 2707456.0 :y -630784.0 :z -6635520.0)
           1.0
           )
         )
        ((= v1-0 4)
         (ambient-hint-spawn "gamcam35" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup1-rise2-ja)
           (new 'static 'vector :x 2834432.0 :y -634880.0 :z -6811648.0)
           1.3
           )
         (set-time! (-> self state-time))
         (until (time-elapsed? (-> self state-time) (seconds 0.2))
           (suspend)
           )
         )
        ((= v1-0 5)
         (ambient-hint-spawn "gamcam37" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup2-rise1-ja)
           (new 'static 'vector :x 2695168.0 :y -544768.0 :z -7077888.0)
           1.0
           )
         )
        ((= v1-0 6)
         (ambient-hint-spawn "gamcam36" (the-as vector #f) *entity-pool* 'camera)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim sunkencam-square-platform-setup2-rise2-ja)
           (new 'static 'vector :x 2482176.0 :y -516096.0 :z -6922240.0)
           1.0
           )
         )
        (else
          (suspend)
          0
          )
        )
      )
    (go-virtual pov-camera-done-playing)
    )
  )

;; definition of type seaweed
(deftype seaweed (process-drawable)
  ((anim-speed  float)
   )
  (:states
    seaweed-idle
    )
  )

;; definition for method 3 of type seaweed
(defmethod inspect ((this seaweed))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tanim-speed: ~f~%" (-> this anim-speed))
  this
  )

;; failed to figure out what this is:
(defskelgroup *seaweed-sg* seaweed seaweed-lod0-jg -1
              ((seaweed-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 6 0 7)
              )

;; failed to figure out what this is:
(defstate seaweed-idle (seaweed)
  :code (behavior ()
    (ja-no-eval :num! (seek! max (-> self anim-speed)))
    (while (not (ja-done? 0))
      (suspend)
      (ja-eval)
      )
    (loop
      (ja-no-eval :group! seaweed-idle-ja :num! (seek! max (-> self anim-speed)) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max (-> self anim-speed)))
        )
      )
    )
  :post ja-post
  )

;; definition for method 11 of type seaweed
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this seaweed) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *seaweed-sg* '())
  (ja-channel-set! 1)
  (let ((s5-1 (-> this skel root-channel 0)))
    (joint-control-channel-group-eval!
      s5-1
      (the-as art-joint-anim (-> this draw art-group data 2))
      num-func-identity
      )
    (set! (-> s5-1 frame-num)
          (rand-vu-float-range 0.0 (the float (+ (-> (if (> (-> this skel active-channels) 0)
                                                         (-> this skel root-channel 0 frame-group)
                                                         )
                                                     data
                                                     0
                                                     length
                                                     )
                                                 -1
                                                 )
                                        )
                               )
          )
    )
  (set! (-> this anim-speed) (rand-vu-float-range 0.2 0.4))
  (set! *seaweed* this)
  (go seaweed-idle)
  (none)
  )
