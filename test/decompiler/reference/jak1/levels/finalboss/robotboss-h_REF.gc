;;-*-Lisp-*-
(in-package goal)

;; definition of type robotboss-dda
(deftype robotboss-dda (structure)
  ((blue-bomb-time        float)
   (num-blobs             int32)
   (green-bomb-time       float)
   (red-shots-min         int32)
   (red-shots-rnd         int32)
   (red-shot-time-min     float)
   (red-shot-time-rnd     float)
   (red-bomb-time         float)
   (yellow-shot-time-min  float)
   (yellow-shot-time-rnd  float)
   (yellow-gun-hits       int32)
   (yellow-bomb-time      float)
   )
  )

;; definition for method 3 of type robotboss-dda
(defmethod inspect ((this robotboss-dda))
  (format #t "[~8x] ~A~%" this 'robotboss-dda)
  (format #t "~Tblue-bomb-time: ~f~%" (-> this blue-bomb-time))
  (format #t "~Tnum-blobs: ~D~%" (-> this num-blobs))
  (format #t "~Tgreen-bomb-time: ~f~%" (-> this green-bomb-time))
  (format #t "~Tred-shots-min: ~D~%" (-> this red-shots-min))
  (format #t "~Tred-shots-rnd: ~D~%" (-> this red-shots-rnd))
  (format #t "~Tred-shot-time-min: ~f~%" (-> this red-shot-time-min))
  (format #t "~Tred-shot-time-rnd: ~f~%" (-> this red-shot-time-rnd))
  (format #t "~Tred-bomb-time: ~f~%" (-> this red-bomb-time))
  (format #t "~Tyellow-shot-time-min: ~f~%" (-> this yellow-shot-time-min))
  (format #t "~Tyellow-shot-time-rnd: ~f~%" (-> this yellow-shot-time-rnd))
  (format #t "~Tyellow-gun-hits: ~D~%" (-> this yellow-gun-hits))
  (format #t "~Tyellow-bomb-time: ~f~%" (-> this yellow-bomb-time))
  this
  )

;; definition of type robotboss
(deftype robotboss (process-drawable)
  ((root              collide-shape-moving     :override)
   (alts              entity-actor              13)
   (desired-loc       vector                    :inline)
   (old-loc           vector                    :inline)
   (loc-t             float)
   (loc-t-start       time-frame)
   (loc-t-duration    time-frame)
   (hits-to-go        int32)
   (took-hit          symbol)
   (children-spawned  int32)
   (vulnerable        int64)
   (till-next-shot    int64)
   (shot-attractor    handle)
   (desired-pool-y    float)
   (particle          sparticle-launch-control  7)
   (blue-smoke        symbol)
   (red-smoke         symbol)
   (yellow-smoke      symbol)
   (white-eco         handle)
   (des-cam-entity    string)
   (use-interesting   symbol)
   (ignore-camera     symbol)
   (ambient           ambient-control           :inline)
   (yellow-gun        joint-mod)
   (palette-val       float)
   (looping-sound     ambient-sound             4)
   (dda               robotboss-dda)
   (valid-frames      int32)
   (skip-cut          symbol)
   (keep-charging     symbol)
   )
  (:methods
    (ease-loc-t (_type_) float)
    )
  (:states
    robotboss-blue-dark-bomb
    robotboss-blue-dark-bomb-wait
    robotboss-blue-wait
    robotboss-daxter-sacrifice-movie
    robotboss-green
    robotboss-green-dark-bomb
    robotboss-green-dark-bomb-wait
    robotboss-green-wait
    robotboss-red
    robotboss-red-dark-bomb
    robotboss-red-dark-bomb-wait
    robotboss-red-wait
    robotboss-white-eco-movie
    robotboss-yellow
    robotboss-yellow-dark-bomb
    robotboss-yellow-dark-bomb-wait
    robotboss-yellow-wait
    )
  )

;; definition for method 3 of type robotboss
(defmethod inspect ((this robotboss))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Talts[13] @ #x~X~%" (-> this alts))
  (format #t "~T~Tdesired-loc: #<vector @ #x~X>~%" (-> this desired-loc))
  (format #t "~T~Told-loc: #<vector @ #x~X>~%" (-> this old-loc))
  (format #t "~T~Tloc-t: ~f~%" (-> this loc-t))
  (format #t "~T~Tloc-t-start: ~D~%" (-> this loc-t-start))
  (format #t "~T~Tloc-t-duration: ~D~%" (-> this loc-t-duration))
  (format #t "~T~Thits-to-go: ~D~%" (-> this hits-to-go))
  (format #t "~T~Ttook-hit: ~A~%" (-> this took-hit))
  (format #t "~T~Tchildren-spawned: ~D~%" (-> this children-spawned))
  (format #t "~T~Tvulnerable: ~D~%" (-> this vulnerable))
  (format #t "~T~Ttill-next-shot: ~D~%" (-> this till-next-shot))
  (format #t "~T~Tshot-attractor: ~D~%" (-> this shot-attractor))
  (format #t "~T~Tdesired-pool-y: ~f~%" (-> this desired-pool-y))
  (format #t "~T~Tparticle[7] @ #x~X~%" (-> this particle))
  (format #t "~T~Tblue-smoke: ~A~%" (-> this blue-smoke))
  (format #t "~T~Tred-smoke: ~A~%" (-> this red-smoke))
  (format #t "~T~Tyellow-smoke: ~A~%" (-> this yellow-smoke))
  (format #t "~T~Twhite-eco: ~D~%" (-> this white-eco))
  (format #t "~T~Tdes-cam-entity: ~A~%" (-> this des-cam-entity))
  (format #t "~T~Tuse-interesting: ~A~%" (-> this use-interesting))
  (format #t "~T~Tignore-camera: ~A~%" (-> this ignore-camera))
  (format #t "~T~Tambient: #<ambient-control @ #x~X>~%" (-> this ambient))
  (format #t "~T~Tyellow-gun: ~A~%" (-> this yellow-gun))
  (format #t "~T~Tpalette-val: ~f~%" (-> this palette-val))
  (format #t "~T~Tlooping-sound[4] @ #x~X~%" (-> this looping-sound))
  (format #t "~T~Tdda: #<robotboss-dda @ #x~X>~%" (-> this dda))
  (format #t "~T~Tvalid-frames: ~D~%" (-> this valid-frames))
  (format #t "~T~Tskip-cut: ~A~%" (-> this skip-cut))
  (format #t "~T~Tkeep-charging: ~A~%" (-> this keep-charging))
  this
  )

;; definition for method 7 of type robotboss
;; INFO: Return type mismatch process-drawable vs robotboss.
(defmethod relocate ((this robotboss) (arg0 int))
  (dotimes (v1-0 7)
    (if (nonzero? (-> this particle v1-0))
        (&+! (-> this particle v1-0) arg0)
        )
    )
  (dotimes (v1-3 4)
    (if (nonzero? (-> this looping-sound v1-3))
        (&+! (-> this looping-sound v1-3) arg0)
        )
    )
  (if (nonzero? (-> this yellow-gun))
      (&+! (-> this yellow-gun) arg0)
      )
  (the-as robotboss ((method-of-type process-drawable relocate) this arg0))
  )

;; definition for method 10 of type robotboss
(defmethod deactivate ((this robotboss))
  (dotimes (s5-0 7)
    (let ((a0-1 (-> this particle s5-0)))
      (if (nonzero? a0-1)
          (kill-and-free-particles a0-1)
          )
      )
    )
  (dotimes (s5-1 4)
    (let ((a0-2 (-> this looping-sound s5-1)))
      (if (nonzero? a0-2)
          (stop! a0-2)
          )
      )
    )
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

;; definition for function target-has-all-the-cells?
;; INFO: Return type mismatch basic vs symbol.
(defbehavior target-has-all-the-cells? process ()
  (the-as
    symbol
    (and *target* (>= (the int (the-as float (send-event *target* 'query 'pickup (pickup-type fuel-cell)))) 100))
    )
  )

;; failed to figure out what this is:
(defskelgroup *robotboss-sg* robotboss robotboss-basic-lod0-jg robotboss-idle-ja
              ((robotboss-basic-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -10 0 80)
              :longest-edge (meters 19.9)
              )
