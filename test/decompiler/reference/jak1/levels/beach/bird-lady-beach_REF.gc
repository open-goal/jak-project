;;-*-Lisp-*-
(in-package goal)

;; definition of type bird-lady-beach
(deftype bird-lady-beach (process-taskable)
  ((flutflut  handle)
   (egg       handle)
   )
  )

;; definition for method 3 of type bird-lady-beach
(defmethod inspect ((this bird-lady-beach))
  (let ((t9-0 (method-of-type process-taskable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tflutflut: ~D~%" (-> this flutflut))
  (format #t "~T~Tegg: ~D~%" (-> this egg))
  this
  )

;; failed to figure out what this is:
(defskelgroup *bird-lady-beach-sg* bird-lady-beach bird-lady-beach-lod0-jg bird-lady-beach-idle-ja
              ((bird-lady-beach-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              :shadow bird-lady-beach-shadow-mg
              )

;; failed to figure out what this is:
(defstate idle (bird-lady-beach)
  :virtual #t
  :enter (behavior ()
    (when (not (should-display? self))
      (let ((a0-2 (handle->process (-> self flutflut))))
        (if a0-2
            (deactivate a0-2)
            )
        )
      (let ((a0-6 (handle->process (-> self egg))))
        (if a0-6
            (deactivate a0-6)
            )
        )
      (go-virtual hidden)
      )
    ((-> (method-of-type process-taskable idle) enter))
    )
  )

;; definition for method 32 of type bird-lady-beach
(defmethod play-anim! ((this bird-lady-beach) (arg0 symbol))
  (case (current-status (-> this tasks))
    (((task-status need-reward-speech))
     (when arg0
       (set! (-> this cell-for-task) (current-task (-> this tasks)))
       (close-current! (-> this tasks))
       (set! (-> this flutflut)
             (ppointer->handle (manipy-spawn (-> this root trans) (-> this entity) *flutflut-naked-sg* #f :to this))
             )
       (send-event (handle->process (-> this flutflut)) 'anim-mode 'clone-anim)
       (send-event (handle->process (-> this flutflut)) 'blend-shape #t)
       (set! (-> this egg)
             (ppointer->handle (manipy-spawn (-> this root trans) (-> this entity) *flutflutegg-sg* #f :to this))
             )
       (send-event (handle->process (-> this egg)) 'anim-mode 'clone-anim)
       )
     (new 'static 'spool-anim
       :name "bird-lady-beach-resolution"
       :index 4
       :parts 10
       :command-list '((141 joint "cameraB") (535 joint "camera") (696 joint "cameraB") (758 joint "camera") (813 joint "cameraB"))
       )
     )
    (else
      (if arg0
          (format
            0
            "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
            (-> this name)
            (task-status->string (current-status (-> this tasks)))
            )
          )
      (-> this draw art-group data 3)
      )
    )
  )

;; definition for method 31 of type bird-lady-beach
(defmethod get-art-elem ((this bird-lady-beach))
  (-> this draw art-group data 3)
  )

;; definition for method 39 of type bird-lady-beach
(defmethod should-display? ((this bird-lady-beach))
  (= (current-status (-> this tasks)) (task-status need-reward-speech))
  )

;; definition for method 11 of type bird-lady-beach
(defmethod init-from-entity! ((this bird-lady-beach) (arg0 entity-actor))
  (process-taskable-method-40 this arg0 *bird-lady-beach-sg* 3 51 (new 'static 'vector :y 4096.0 :w 4096.0) 5)
  (set! (-> this tasks) (get-task-control (game-task beach-flutflut)))
  (set! (-> this sound-flava) (music-flava birdlady))
  (process-taskable-method-42 this)
  (none)
  )
