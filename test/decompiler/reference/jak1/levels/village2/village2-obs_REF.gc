;;-*-Lisp-*-
(in-package goal)

;; definition of type village2cam
(deftype village2cam (pov-camera)
  ((seq  uint64)
   )
  )

;; definition for method 3 of type village2cam
(defmethod inspect ((this village2cam))
  (let ((t9-0 (method-of-type pov-camera inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tseq: ~D~%" (-> this seq))
  this
  )

;; failed to figure out what this is:
(defskelgroup *village2cam-sg* village2cam village2cam-lod0-jg -1
              ((village2cam-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              )

;; definition for method 29 of type village2cam
(defmethod set-stack-size! ((this village2cam))
  (stack-size-set! (-> this main-thread) 512)
  (none)
  )

;; failed to figure out what this is:
(defstate pov-camera-playing (village2cam)
  :virtual #t
  :code (behavior ()
    (let ((v1-0 (-> self seq)))
      (cond
        ((zero? v1-0)
         (ja-no-eval :group! village2cam-elevator-at-top-going-down-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         )
        ((= v1-0 1)
         (ja-no-eval :group! village2cam-elevator-at-bottom-going-up-ja :num! (seek!) :frame-num 0.0)
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))
           )
         )
        ((= v1-0 2)
         (pov-camera-play-and-reposition
           (the-as art-joint-anim village2cam-elevator-at-top-going-up-ja)
           (new 'static 'vector :x 2199552.0 :y 40960.0 :z -6676480.0)
           1.0
           )
         )
        (else
          (suspend)
          0
          )
        )
      )
    (go-virtual pov-camera-done-playing)
    )
  )

;; failed to figure out what this is:
(defskelgroup *med-res-rolling-sg* medres-rolling medres-rolling-lod0-jg medres-rolling-idle-ja
              ((medres-rolling-lod0-mg (meters 999999)))
              :bounds (static-spherem -520 110 70 100)
              :longest-edge (meters 0.01)
              )

;; failed to figure out what this is:
(defskelgroup *med-res-rolling1-sg* medres-rolling1 medres-rolling1-lod0-jg medres-rolling1-idle-ja
              ((medres-rolling1-lod0-mg (meters 999999)))
              :bounds (static-spherem -300 30 -20 120)
              :longest-edge (meters 0.01)
              )

;; failed to figure out what this is:
(defskelgroup *med-res-village2-sg* medres-village2 medres-village2-lod0-jg medres-village2-idle-ja
              ((medres-village2-lod0-mg (meters 999999)))
              :bounds (static-spherem -60 65 0 90)
              :longest-edge (meters 0.01)
              )

;; definition of type pontoon
(deftype pontoon (rigid-body-platform)
  ((anchor-point  vector  :inline)
   (task          uint8)
   (alt-task      uint8)
   )
  (:states
    pontoon-die
    pontoon-hidden
    )
  )

;; definition for method 3 of type pontoon
(defmethod inspect ((this pontoon))
  (let ((t9-0 (method-of-type rigid-body-platform inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tanchor-point: #<vector @ #x~X>~%" (-> this anchor-point))
  (format #t "~T~Ttask: ~D~%" (-> this task))
  (format #t "~T~Talt-task: ~D~%" (-> this alt-task))
  this
  )

;; failed to figure out what this is:
(defstate pontoon-hidden (pontoon)
  :enter (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (clear-collide-with-as (-> self root-overlay))
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-status hidden))
    (restore-collide-with-as (-> self root-overlay))
    )
  :trans (behavior ()
    (if (task-closed? (the-as game-task (-> self task)) (task-status need-resolution))
        (go-virtual rigid-body-platform-idle)
        )
    )
  :code (behavior ()
    (loop
      (suspend)
      )
    )
  )

;; failed to figure out what this is:
(defstate pontoon-die (pontoon)
  :code (behavior ()
    (cleanup-for-death self)
    (deactivate self)
    )
  )

;; failed to figure out what this is:
(defstate rigid-body-platform-float (pontoon)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('die)
       (cleanup-for-death self)
       (deactivate self)
       )
      (else
        (rigid-body-platform-event-handler proc argc message block)
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate rigid-body-platform-idle (pontoon)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('die)
       (cleanup-for-death self)
       (deactivate self)
       )
      )
    )
  )

;; definition for method 11 of type pontoon
;; INFO: Return type mismatch int vs none.
(defmethod init-from-entity! ((this pontoon) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (rigid-body-platform-method-30 this)
  (process-drawable-from-entity! this arg0)
  (rigid-body-platform-method-31 this)
  (set! (-> this water-anim) #f)
  (set! (-> this root-overlay pause-adjust-distance) -122880.0)
  (set! (-> this task) (the-as uint (-> arg0 extra perm task)))
  (set! (-> this alt-task) (res-lump-value arg0 'alt-task uint))
  (cond
    ((and (nonzero? (-> this alt-task))
          (task-closed? (the-as game-task (-> this alt-task)) (task-status need-resolution))
          )
     (go pontoon-die)
     )
    ((zero? (-> this task))
     (go (method-of-object this rigid-body-platform-idle))
     )
    ((task-closed? (the-as game-task (-> this task)) (task-status need-resolution))
     (go (method-of-object this rigid-body-platform-idle))
     )
    (else
      (go pontoon-hidden)
      )
    )
  0
  (none)
  )

;; definition for method 23 of type pontoon
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-23 ((this pontoon) (arg0 float))
  (call-parent-method this arg0)
  (rigid-body-platform-method-27 this (-> this anchor-point))
  0
  (none)
  )

;; definition for symbol *pontoonfive-constants*, type rigid-body-platform-constants
(define *pontoonfive-constants* (new 'static 'rigid-body-platform-constants
                                  :drag-factor 4.0
                                  :buoyancy-factor 3.0
                                  :max-buoyancy-depth (meters 3)
                                  :gravity-factor 1.0
                                  :gravity (meters 80)
                                  :player-weight (meters 35)
                                  :player-bonk-factor 1.0
                                  :player-dive-factor 1.0
                                  :player-force-distance (meters 1000)
                                  :player-force-clamp (meters 1000000)
                                  :player-force-timeout (seconds 0.1)
                                  :explosion-force (meters 1000)
                                  :linear-damping 0.98
                                  :angular-damping 0.98
                                  :control-point-count 4
                                  :mass 2.0
                                  :inertial-tensor-x (meters 2.5)
                                  :inertial-tensor-y (meters 2)
                                  :inertial-tensor-z (meters 3.2)
                                  :idle-distance (meters 90)
                                  :platform #t
                                  :sound-name "pontoonten"
                                  )
        )

;; definition for symbol *pontoonten-constants*, type rigid-body-platform-constants
(define *pontoonten-constants* (new 'static 'rigid-body-platform-constants
                                 :drag-factor 4.0
                                 :buoyancy-factor 3.0
                                 :max-buoyancy-depth (meters 3)
                                 :gravity-factor 1.0
                                 :gravity (meters 80)
                                 :player-weight (meters 35)
                                 :player-bonk-factor 1.0
                                 :player-dive-factor 1.0
                                 :player-force-distance (meters 1000)
                                 :player-force-clamp (meters 1000000)
                                 :player-force-timeout (seconds 0.1)
                                 :explosion-force (meters 1000)
                                 :linear-damping 0.98
                                 :angular-damping 0.95
                                 :control-point-count 4
                                 :mass 4.0
                                 :inertial-tensor-x (meters 5)
                                 :inertial-tensor-y (meters 2)
                                 :inertial-tensor-z (meters 3.2)
                                 :idle-distance (meters 90)
                                 :platform #t
                                 :sound-name "pontoonten"
                                 )
        )

;; definition of type pontoonfive
(deftype pontoonfive (pontoon)
  ()
  )

;; definition for method 3 of type pontoonfive
(defmethod inspect ((this pontoonfive))
  (let ((t9-0 (method-of-type pontoon inspect)))
    (t9-0 this)
    )
  this
  )

;; definition of type pontoonten
(deftype pontoonten (pontoon)
  ()
  )

;; definition for method 3 of type pontoonten
(defmethod inspect ((this pontoonten))
  (let ((t9-0 (method-of-type pontoon inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defskelgroup *pontoonfive-sg* pontoonfive pontoonfive-lod0-jg pontoonfive-idle-ja
              ((pontoonfive-lod0-mg (meters 20)) (pontoonfive-lod1-mg (meters 40)) (pontoonfive-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :longest-edge (meters 3.5)
              )

;; failed to figure out what this is:
(defskelgroup *pontoonten-sg* pontoonten pontoonten-lod0-jg pontoonten-idle-ja
              ((pontoonten-lod0-mg (meters 20)) (pontoonten-lod1-mg (meters 40)) (pontoonten-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 7)
              :longest-edge (meters 4)
              )

;; definition for method 30 of type pontoonfive
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-30 ((this pontoonfive))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 18432.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root-overlay) s5-0)
    )
  0
  (none)
  )

;; definition for method 31 of type pontoonfive
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-31 ((this pontoonfive))
  (initialize-skeleton this *pontoonfive-sg* '())
  (rigid-body-platform-method-29 this *pontoonfive-constants*)
  (set! (-> this float-height-offset) 6144.0)
  (set! (-> this root-overlay nav-radius) 12288.0)
  (let ((v1-6 (-> this control-point-array data)))
    (set! (-> v1-6 0 local-pos x) 9216.0)
    (set! (-> v1-6 0 local-pos y) 0.0)
    (set! (-> v1-6 0 local-pos z) 12083.2)
    (set! (-> v1-6 0 local-pos w) 1.0)
    )
  (let ((v1-8 (-> this control-point-array data 1)))
    (set! (-> v1-8 local-pos x) 9216.0)
    (set! (-> v1-8 local-pos y) 0.0)
    (set! (-> v1-8 local-pos z) -12083.2)
    (set! (-> v1-8 local-pos w) 1.0)
    )
  (let ((v1-10 (-> this control-point-array data 2)))
    (set! (-> v1-10 local-pos x) -9216.0)
    (set! (-> v1-10 local-pos y) 0.0)
    (set! (-> v1-10 local-pos z) -12083.2)
    (set! (-> v1-10 local-pos w) 1.0)
    )
  (let ((v1-12 (-> this control-point-array data 3)))
    (set! (-> v1-12 local-pos x) -9216.0)
    (set! (-> v1-12 local-pos y) 0.0)
    (set! (-> v1-12 local-pos z) 12083.2)
    (set! (-> v1-12 local-pos w) 1.0)
    )
  (set! (-> this anchor-point quad) (-> this root-overlay trans quad))
  (nav-mesh-connect this (-> this root-overlay) (the-as nav-control #f))
  0
  (none)
  )

;; definition for method 30 of type pontoonten
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-30 ((this pontoonten))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 25395.2)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root-overlay) s5-0)
    )
  0
  (none)
  )

;; definition for method 31 of type pontoonten
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defmethod rigid-body-platform-method-31 ((this pontoonten))
  (initialize-skeleton this *pontoonten-sg* '())
  (rigid-body-platform-method-29 this *pontoonten-constants*)
  (set! (-> this float-height-offset) 6144.0)
  (set! (-> this root-overlay nav-radius) 20480.0)
  (let ((v1-6 (-> this control-point-array data)))
    (set! (-> v1-6 0 local-pos x) 17408.0)
    (set! (-> v1-6 0 local-pos y) 0.0)
    (set! (-> v1-6 0 local-pos z) 10035.2)
    (set! (-> v1-6 0 local-pos w) 1.0)
    )
  (let ((v1-8 (-> this control-point-array data 1)))
    (set! (-> v1-8 local-pos x) 17408.0)
    (set! (-> v1-8 local-pos y) 0.0)
    (set! (-> v1-8 local-pos z) -10035.2)
    (set! (-> v1-8 local-pos w) 1.0)
    )
  (let ((v1-10 (-> this control-point-array data 2)))
    (set! (-> v1-10 local-pos x) -17408.0)
    (set! (-> v1-10 local-pos y) 0.0)
    (set! (-> v1-10 local-pos z) -10035.2)
    (set! (-> v1-10 local-pos w) 1.0)
    )
  (let ((v1-12 (-> this control-point-array data 3)))
    (set! (-> v1-12 local-pos x) -17408.0)
    (set! (-> v1-12 local-pos y) 0.0)
    (set! (-> v1-12 local-pos z) 10035.2)
    (set! (-> v1-12 local-pos w) 1.0)
    )
  (set! (-> this anchor-point quad) (-> this root-overlay trans quad))
  (nav-mesh-connect this (-> this root-overlay) (the-as nav-control #f))
  0
  (none)
  )

;; failed to figure out what this is:
(defpartgroup group-allpontoons-trail
  :id 563
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2841 :flags (is-3d) :period (seconds 3) :length (seconds 0.017))
    (sp-item 2842 :flags (is-3d) :period (seconds 3) :length (seconds 0.017))
    )
  )

;; failed to figure out what this is:
(defpart 2841
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 8.0)
    (:x (meters 0) (meters 9))
    (:y (meters 0.1))
    (:scale-x (meters 0.2) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.01) (meters 0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 3.2)
    (:timer (seconds 5))
    (:flags (bit2 bit3 bit14))
    (:next-time (seconds 0.035) (seconds 0.097))
    (:next-launcher 2843)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2843
  :init-specs ((:fade-a -0.094814815))
  )

;; failed to figure out what this is:
(defpart 2842
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 8.0)
    (:x (meters 8) (meters 8))
    (:y (meters 0.1))
    (:scale-x (meters 0.2) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.006666667) (meters 0.001))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 3.2)
    (:timer (seconds 5))
    (:flags (bit2 bit3 bit14))
    (:next-time (seconds 0.035) (seconds 0.097))
    (:next-launcher 2843)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; definition of type allpontoons
(deftype allpontoons (process-drawable)
  ((task  uint8)
   )
  (:states
    (allpontoons-be-clone handle)
    allpontoons-idle
    )
  )

;; definition for method 3 of type allpontoons
(defmethod inspect ((this allpontoons))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Ttask: ~D~%" (-> this task))
  this
  )

;; failed to figure out what this is:
(defskelgroup *allpontoons-sg* allpontoons allpontoons-lod0-jg allpontoons-idle-ja
              ((allpontoons-lod0-mg (meters 999999)))
              :bounds (static-spherem 32 0 -5 34)
              )

;; failed to figure out what this is:
(defstate allpontoons-be-clone (allpontoons)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('end-mode)
       (cleanup-for-death self)
       (deactivate self)
       )
      )
    )
  :enter (behavior ((arg0 handle))
    (logclear! (-> self draw status) (draw-status hidden))
    (logclear! (-> self mask) (process-mask actor-pause))
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    )
  :trans (behavior ()
    (when (>= (ja-aframe-num 0) 500.0)
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node allpontoons-lod0-jg 1)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node allpontoons-lod0-jg 2)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node allpontoons-lod0-jg 3)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node allpontoons-lod0-jg 4)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node allpontoons-lod0-jg 5)))
      (spawn (-> self part) (vector<-cspace! (new 'stack-no-clear 'vector) (joint-node allpontoons-lod0-jg 6)))
      )
    )
  :code (behavior ((arg0 handle))
    (clone-anim arg0 3 #t "")
    (cleanup-for-death self)
    (deactivate self)
    )
  )

;; failed to figure out what this is:
(defstate allpontoons-idle (allpontoons)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('clone)
       (go allpontoons-be-clone (the-as handle (-> block param 0)))
       )
      )
    )
  :enter (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    )
  :code (behavior ()
    (loop
      (when (and (nonzero? (-> self task)) (task-closed? (the-as game-task (-> self task)) (task-status need-resolution)))
        (cleanup-for-death self)
        (deactivate self)
        )
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    )
  )

;; definition for method 11 of type allpontoons
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this allpontoons) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *allpontoons-sg* '())
  (set! (-> this task) (the-as uint (-> arg0 extra perm task)))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 563) this))
  (go allpontoons-idle)
  (none)
  )

;; definition of type fireboulder
(deftype fireboulder (process-drawable)
  ((root     collide-shape :override)
   (tracker  handle)
   (task     uint8)
   )
  (:states
    (fireboulder-be-clone handle)
    fireboulder-hover
    fireboulder-idle
    )
  )

;; definition for method 3 of type fireboulder
(defmethod inspect ((this fireboulder))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Ttracker: ~D~%" (-> this tracker))
  (format #t "~T~Ttask: ~D~%" (-> this task))
  this
  )

;; failed to figure out what this is:
(defskelgroup *fireboulder-sg* fireboulder fireboulder-lod0-jg fireboulder-idle-ja
              ((fireboulder-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 3.5 0 6)
              :longest-edge (meters 3.5)
              )

;; definition for function fireboulder-disable-blocking-collision
;; INFO: Return type mismatch int vs none.
(defbehavior fireboulder-disable-blocking-collision fireboulder ()
  (let ((v1-1 (-> self root root-prim)))
    (dotimes (a0-0 (-> (the-as collide-shape-prim-group v1-1) num-prims))
      (let ((a1-2 (-> (the-as collide-shape-prim-group v1-1) prims a0-0)))
        (when (= (-> a1-2 prim-id) 256)
          (set! (-> a1-2 prim-core collide-as) (collide-kind))
          (set! (-> a1-2 collide-with) (collide-kind))
          0
          )
        )
      )
    (set! (-> v1-1 local-sphere x) 0.0)
    (set! (-> v1-1 local-sphere w) 24576.0)
    )
  0
  (none)
  )

;; definition for function fireboulder-hover-stuff
;; INFO: Used lq/sq
(defbehavior fireboulder-hover-stuff fireboulder ()
  (local-vars (v0-1 object))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (vector<-cspace! gp-0 (joint-node fireboulder-lod0-jg bouldercenter))
    (cond
      ((handle->process (-> self tracker))
       (let ((v1-6 (-> (the-as (pointer part-tracker) (-> self tracker process)) 0)))
         (set-time! (-> v1-6 start-time))
         (set! v0-1 (-> v1-6 root trans))
         )
       (set! (-> (the-as vector v0-1) quad) (-> gp-0 quad))
       )
      (else
        (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
          (set! v0-1
                (ppointer->handle
                  (when gp-1
                    (let ((t9-2 (method-of-type part-tracker activate)))
                      (t9-2 (the-as part-tracker gp-1) *entity-pool* 'part-tracker (the-as pointer #x70004000))
                      )
                    (run-now-in-process gp-1 part-tracker-init (-> *part-group-id-table* 678) -1 #f #f #f (-> self root trans))
                    (-> gp-1 ppointer)
                    )
                  )
                )
          )
        (set! (-> self tracker) (the-as handle v0-1))
        )
      )
    )
  v0-1
  )

;; failed to figure out what this is:
(defstate fireboulder-hover (fireboulder)
  :enter (behavior ()
    (fireboulder-disable-blocking-collision)
    (ja-channel-set! 1)
    (ja :group! fireboulder-hover-ja)
    (logclear! (-> self draw status) (draw-status hidden))
    (set! (-> self root trans quad) (-> self entity extra trans quad))
    (vector-reset! (-> self draw origin))
    (logior! (-> self skel status) (janim-status inited))
    (ja-post)
    (logclear! (-> self skel status) (janim-status inited))
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (vector<-cspace! gp-0 (joint-node fireboulder-lod0-jg bouldercenter))
      (vector-! (-> self draw bounds) gp-0 (-> self root trans))
      )
    (set! (-> self draw bounds w) 24576.0)
    )
  :exit (behavior ()
    (stop! (-> self sound))
    )
  :trans (behavior ()
    (fireboulder-hover-stuff)
    (update! (-> self sound))
    )
  :code (behavior ()
    (loop
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* 455.1111 (-> *display* time-adjust-ratio)))
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post transform-post
  )

;; failed to figure out what this is:
(defstate fireboulder-be-clone (fireboulder)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('stop-cloning)
       (go fireboulder-hover)
       )
      )
    )
  :enter (behavior ((arg0 handle))
    (logclear! (-> self mask) (process-mask actor-pause))
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (logclear! (-> self skel status) (janim-status spool))
    )
  :trans fireboulder-hover-stuff
  :code (behavior ((arg0 handle))
    (clone-anim arg0 3 #t "")
    (format 0 "ERROR<GMJ>: fireboulder-be-clone ended~%")
    (cleanup-for-death self)
    (deactivate self)
    )
  )

;; failed to figure out what this is:
(defstate fireboulder-idle (fireboulder)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('clone)
       (go fireboulder-be-clone (the-as handle (-> block param 0)))
       )
      )
    )
  :exit (behavior ()
    (let ((a0-1 (handle->process (-> self tracker))))
      (if a0-1
          (deactivate a0-1)
          )
      )
    )
  :code (behavior ()
    (transform-post)
    (loop
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (cond
          ((zero? (-> self task))
           )
          ((handle->process (-> self tracker))
           (set-time! (-> (the-as (pointer part-tracker) (-> self tracker process)) 0 start-time))
           )
          (else
            (set! (-> self tracker) (ppointer->handle (process-spawn
                                                        part-tracker
                                                        :init part-tracker-init
                                                        (-> *part-group-id-table* 271)
                                                        -1
                                                        #f
                                                        #f
                                                        #f
                                                        (-> self root trans)
                                                        :to *entity-pool*
                                                        )
                                                      )
                  )
            )
          )
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post ja-post
  )

;; definition for method 11 of type fireboulder
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this fireboulder) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-others))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set-vector! (-> s3-0 local-sphere) -24576.0 18432.0 0.0 49152.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-0 transform-index) 4)
        (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 24576.0)
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 256))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind wall-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 4)
        (set-vector! (-> s2-1 local-sphere) 0.0 0.0 -24576.0 49152.0)
        (append-prim s3-0 s2-1)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (cond
    ((name= (-> this name) "fireboulder-6")
     (quaternion-axis-angle! (-> this root quat) 0.0 1.0 0.0 16384.0)
     (set! (-> this sound)
           (new 'process 'ambient-sound (static-sound-spec "rock-hover" :fo-max 30) (-> this root trans))
           )
     )
    (else
      (fireboulder-disable-blocking-collision)
      )
    )
  (initialize-skeleton this *fireboulder-sg* '())
  (set! (-> this tracker) (the-as handle #f))
  (set-vector! (-> this draw color-emissive) 0.125 0.0625 0.0 0.0)
  (set! (-> this task) (the-as uint (-> arg0 extra perm task)))
  (cond
    ((zero? (-> this task))
     (go fireboulder-idle)
     )
    ((= (get-task-status (-> arg0 extra perm task)) (task-status invalid))
     (go fireboulder-hover)
     )
    (else
      (go fireboulder-idle)
      )
    )
  (none)
  )

;; definition of type ceilingflag
(deftype ceilingflag (process-drawable)
  ()
  (:states
    ceilingflag-idle
    )
  )

;; definition for method 3 of type ceilingflag
(defmethod inspect ((this ceilingflag))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defskelgroup *ceilingflag-sg* ceilingflag ceilingflag-geo-jg ceilingflag-idle-ja
              ((ceilingflag-geo-mg (meters 999999)))
              :bounds (static-spherem 0 -4 0 7)
              )

;; failed to figure out what this is:
(defstate ceilingflag-idle (ceilingflag)
  :code (behavior ()
    (loop
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    )
  :post ja-post
  )

;; definition for method 11 of type ceilingflag
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this ceilingflag) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *ceilingflag-sg* '())
  (go ceilingflag-idle)
  (none)
  )

;; definition of type exit-chamber-dummy
(deftype exit-chamber-dummy (process-drawable)
  ((orig-trans    vector  :inline)
   (fcell-handle  handle)
   )
  (:methods
    (skip-reminder? (_type_) symbol)
    )
  (:states
    exit-chamber-dummy-idle
    exit-chamber-dummy-wait-to-appear
    )
  )

;; definition for method 3 of type exit-chamber-dummy
(defmethod inspect ((this exit-chamber-dummy))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Torig-trans: #<vector @ #x~X>~%" (-> this orig-trans))
  (format #t "~T~Tfcell-handle: ~D~%" (-> this fcell-handle))
  this
  )

;; failed to figure out what this is:
(defskelgroup *exit-chamber-dummy-sg* exit-chamber-dummy exit-chamber-dummy-lod0-jg -1
              ((exit-chamber-dummy-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 5 0 15)
              )

;; definition for method 20 of type exit-chamber-dummy
(defmethod skip-reminder? ((this exit-chamber-dummy))
  (case (get-reminder (get-task-control (game-task sunken-room)) 0)
    ((2)
     (let ((v1-4 (level-get *level* 'sunken)))
       (if (or (not v1-4) (!= (-> v1-4 status) 'active))
           (return #t)
           )
       )
     )
    )
  #f
  )

;; failed to figure out what this is:
(defstate exit-chamber-dummy-wait-to-appear (exit-chamber-dummy)
  :code (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (while (not (skip-reminder? self))
      (suspend)
      )
    (when (and (not (task-complete? *game-info* (game-task sunken-room))) (not (-> self child)))
      (let ((a0-3 (new 'stack-no-clear 'vector)))
        (set! (-> a0-3 quad) (-> self root trans quad))
        (+! (-> a0-3 y) 67584.0)
        (let ((v1-12 (birth-pickup-at-point a0-3 (pickup-type fuel-cell) 47.0 #f self (the-as fact-info #f))))
          (set! (-> self fcell-handle) (ppointer->handle v1-12))
          (send-event (ppointer->process v1-12) 'collide-shape #f)
          )
        )
      )
    (go exit-chamber-dummy-idle)
    )
  )

;; failed to figure out what this is:
(defstate exit-chamber-dummy-idle (exit-chamber-dummy)
  :code (behavior ()
    (logclear! (-> self draw status) (draw-status hidden))
    (let ((gp-0 0))
      (while (< gp-0 2)
        (if (skip-reminder? self)
            (set! gp-0 0)
            (+! gp-0 1)
            )
        (set! (-> self root trans y)
              (+ (-> self orig-trans y) (* 2252.8 (cos (* 36.40889 (the float (mod (current-time) 1800))))))
              )
        (let ((a0-7 (handle->process (-> self fcell-handle))))
          (when a0-7
            (let ((v1-14 (new 'stack-no-clear 'vector)))
              (set! (-> v1-14 quad) (-> self root trans quad))
              (+! (-> v1-14 y) 67584.0)
              (send-event a0-7 'trans v1-14)
              )
            )
          )
        (suspend)
        )
      )
    (let ((a0-11 (handle->process (-> self fcell-handle))))
      (if a0-11
          (deactivate a0-11)
          )
      )
    (go exit-chamber-dummy-wait-to-appear)
    )
  :post ja-post
  )

;; definition for method 11 of type exit-chamber-dummy
;; INFO: Used lq/sq
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this exit-chamber-dummy) (arg0 entity-actor))
  (set! (-> this fcell-handle) (the-as handle #f))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (+! (-> this root trans y) 24576.0)
  (set! (-> this orig-trans quad) (-> this root trans quad))
  (initialize-skeleton this *exit-chamber-dummy-sg* '())
  (ja-channel-set! 1)
  (let ((s5-1 (-> this skel root-channel 0)))
    (joint-control-channel-group-eval!
      s5-1
      (the-as art-joint-anim (-> this draw art-group data 2))
      num-func-identity
      )
    (set! (-> s5-1 frame-num) 0.0)
    )
  (logior! (-> this draw status) (draw-status hidden))
  (go exit-chamber-dummy-wait-to-appear)
  (none)
  )

;; definition of type ogreboss-village2
(deftype ogreboss-village2 (process-drawable)
  ((boulder  handle)
   )
  (:states
    ogreboss-village2-idle
    ogreboss-village2-throw
    )
  )

;; definition for method 3 of type ogreboss-village2
(defmethod inspect ((this ogreboss-village2))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Tboulder: ~D~%" (-> this boulder))
  this
  )

;; failed to figure out what this is:
(defskelgroup *ogreboss-village2-sg* ogreboss-village2 ogreboss-village2-lod0-jg ogreboss-village2-idle-ja
              ((ogreboss-village2-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 10 0 15)
              )

;; failed to figure out what this is:
(defpartgroup group-ogreboulder-trail
  :id 564
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2319 :fade-after (meters 200) :falloff-to (meters 200))
    (sp-item 2320 :fade-after (meters 200) :falloff-to (meters 200))
    )
  )

;; failed to figure out what this is:
(defpart 2320
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters -1) (meters 2))
    (:y (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 8) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 96.0)
    (:b 32.0)
    (:a 48.0 48.0)
    (:vel-y (meters 0.0016666667) (meters 0.00083333335))
    (:scalevel-x (meters 0.04))
    (:rotvel-z (degrees -1.9999999) (degrees 3.9999998))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.21333334)
    (:fade-g -0.10666667)
    (:fade-b 0.10666667)
    (:fade-a -0.32)
    (:accel-y (meters -0.000006666667))
    (:timer (seconds 1))
    (:flags (bit2 bit14))
    )
  )

;; failed to figure out what this is:
(defpart 2319
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 0.5)
    (:x (meters -1) (meters 2))
    (:y (meters -1) (meters 2))
    (:z (meters -1) (meters 2))
    (:scale-x (meters 8) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 96.0)
    (:b 32.0)
    (:a 80.0 80.0)
    (:vel-y (meters 0.0016666667) (meters 0.00083333335))
    (:scalevel-x (meters 0.04))
    (:rotvel-z (degrees -1.9999999) (degrees 3.9999998))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.53333336)
    (:fade-b -0.17777778)
    (:fade-a -1.0666667)
    (:accel-y (meters -0.000006666667))
    (:timer (seconds 0.6))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-ogreboulder-hit-wall
  :id 551
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2287 :period (seconds 3) :length (seconds 0.135)))
  )

;; failed to figure out what this is:
(defpart 2287
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 12.0)
    (:y (meters 1) (meters 3))
    (:scale-x (meters 0.4) (meters 0.1))
    (:rot-z (degrees 0) (degrees 180))
    (:scale-y (meters 10) (meters 6))
    (:r 196.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 32.0 64.0)
    (:scalevel-y (meters 1.4))
    (:fade-a -3.2)
    (:timer (seconds 0.1))
    (:flags (bit2 bit3 bit14))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-ogreboulder-splash
  :id 552
  :duration (seconds 3)
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 64)
  :parts ((sp-item 2288 :period (seconds 3) :length (seconds 0.067))
    (sp-item 2321 :flags (is-3d) :period (seconds 3) :length (seconds 0.035))
    (sp-item 2322 :flags (is-3d) :period (seconds 3) :length (seconds 0.035))
    )
  )

;; failed to figure out what this is:
(defpart 2321
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 8.0)
    (:x (meters 0) (meters 9))
    (:scale-x (meters 16) (meters 8))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.026666667) (meters 0.026666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 3.2)
    (:timer (seconds 5))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.035) (seconds 0.097))
    (:next-launcher 2323)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2323
  :init-specs ((:fade-a -0.094814815))
  )

;; failed to figure out what this is:
(defpart 2322
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 8.0)
    (:x (meters 8) (meters 8))
    (:scale-x (meters 4.5) (meters 3.5))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 0.0)
    (:scalevel-x (meters 0.02) (meters 0.013333334))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 3.2)
    (:timer (seconds 5))
    (:flags (bit2 bit14))
    (:next-time (seconds 0.035) (seconds 0.097))
    (:next-launcher 2323)
    (:conerot-x (degrees 70) (degrees 20))
    (:conerot-y (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 360))
    )
  )

;; failed to figure out what this is:
(defpart 2288
  :init-specs ((:texture (new 'static 'texture-id :page #x2))
    (:num 16.0)
    (:y (meters 0) (meters 1))
    (:scale-x (meters 12) (meters 6))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 50.0)
    (:g 80.0 64.0)
    (:b 200.0)
    (:a 48.0 48.0)
    (:vel-y (meters 0.10666667) (meters 0.10666667))
    (:scalevel-x (meters 0.026666667))
    (:rotvel-z (degrees -0.6) (degrees 1.2))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.16)
    (:accel-y (meters 0.0005) (meters 0.0005))
    (:friction 0.85)
    (:timer (seconds 2.2))
    (:flags (bit2 bit14))
    (:conerot-x (degrees 0) (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 0) (meters 8))
    )
  )

;; definition for function ogreboss-village2-trans
(defbehavior ogreboss-village2-trans ogreboss-village2 ()
  (when (= (get-task-status (game-task village2-levitator)) (task-status invalid))
    (cleanup-for-death self)
    (deactivate self)
    )
  (none)
  )

;; definition for function boulder1-trans
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder1-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 82.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

;; definition for function boulder2-trans-2
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder2-trans-2 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 120.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

;; definition for function boulder2-trans
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder2-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 82.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder2-trans-2)
    )
  0
  (none)
  )

;; definition for function boulder3-trans-2
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder3-trans-2 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 131.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

;; definition for function boulder3-trans
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder3-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 80.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder3-trans-2)
    )
  0
  (none)
  )

;; definition for function boulder4-trans-3
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder4-trans-3 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 152.4)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "boulder-splash")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 552)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook nothing)
    )
  0
  (none)
  )

;; definition for function boulder4-trans-2
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder4-trans-2 fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 116.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder4-trans-3)
    )
  0
  (none)
  )

;; definition for function boulder4-trans
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defbehavior boulder4-trans fireboulder ()
  (spawn (-> self part) (-> self draw origin))
  (when (>= (ja-aframe-num 0) 74.0)
    (let ((gp-0 (new 'stack-no-clear 'vector)))
      (set! (-> gp-0 quad) (-> self draw origin quad))
      (+! (-> gp-0 y) 2048.0)
      (sound-play "v2ogre-boulder")
      (process-spawn
        part-tracker
        :init part-tracker-init
        (-> *part-group-id-table* 551)
        -1
        #f
        #f
        #f
        gp-0
        :to *entity-pool*
        )
      )
    (send-event self 'trans-hook boulder4-trans-2)
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defstate ogreboss-village2-throw (ogreboss-village2)
  :trans ogreboss-village2-trans
  :code (behavior ()
    (set! (-> self boulder)
          (ppointer->handle (manipy-spawn (-> self entity extra trans) (-> self entity) *fireboulder-sg* #f :to self))
          )
    (send-event (handle->process (-> self boulder)) 'anim-mode 'play1)
    (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-pre-throw" 0)
    (send-event (handle->process (-> self boulder)) 'draw #t)
    (send-event (handle->process (-> self boulder)) 'origin-joint-index 4)
    (send-event (handle->process (-> self boulder)) 'max-vis-dist 2048000.0)
    (send-event
      (handle->process (-> self boulder))
      'eval
      (lambda :behavior ogreboss-village2
        ()
        (let ((v0-0 (create-launch-control (-> *part-group-id-table* 564) self)))
          (set! (-> self part) v0-0)
          v0-0
          )
        )
      )
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! ogreboss-village2-pre-throw-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (let ((f0-9 (rand-float-gen)))
      (cond
        ((< 0.75 f0-9)
         (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder1" 0)
         (send-event (handle->process (-> self boulder)) 'trans-hook boulder1-trans)
         )
        ((< 0.5 f0-9)
         (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder2" 0)
         (send-event (handle->process (-> self boulder)) 'trans-hook boulder2-trans)
         )
        ((< 0.25 f0-9)
         (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder3" 0)
         (send-event (handle->process (-> self boulder)) 'trans-hook boulder3-trans)
         )
        (else
          (send-event (handle->process (-> self boulder)) 'art-joint-anim "fireboulder-boulder4" 0)
          (send-event (handle->process (-> self boulder)) 'trans-hook boulder4-trans)
          )
        )
      )
    (ja-channel-push! 1 (seconds 0.2))
    (ja-no-eval :group! ogreboss-village2-throw-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go ogreboss-village2-idle)
    )
  :post ja-post
  )

;; failed to figure out what this is:
(defstate ogreboss-village2-idle (ogreboss-village2)
  :trans ogreboss-village2-trans
  :code (behavior ()
    (loop
      (ja-channel-push! 1 (seconds 0.1))
      (let ((v1-0 (rand-vu-int-range 0 2)))
        (cond
          ((zero? v1-0)
           (ja-no-eval :group! ogreboss-village2-idle-ja :num! (seek! (ja-aframe 140.0 0)) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek! (ja-aframe 140.0 0)))
             )
           (let ((gp-2 (current-time)))
             (until (time-elapsed? gp-2 (seconds 0.167))
               (suspend)
               )
             )
           (ja-no-eval :group! ogreboss-village2-idle-ja
                       :num! (seek! (ja-aframe 168.0 0))
                       :frame-num (ja-aframe 140.0 0)
                       )
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek! (ja-aframe 168.0 0)))
             )
           (let ((gp-5 (current-time)))
             (until (time-elapsed? gp-5 (seconds 0.167))
               (suspend)
               )
             )
           (ja-no-eval :group! ogreboss-village2-idle-ja :num! (seek!) :frame-num (ja-aframe 168.0 0))
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          ((= v1-0 1)
           (ja-no-eval :group! ogreboss-village2-idle-alt-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          (else
            (dotimes (gp-7 4)
              (ja-no-eval :group! ogreboss-village2-idle-bored-ja :num! (seek!) :frame-num 0.0)
              (until (ja-done? 0)
                (suspend)
                (ja :num! (seek!))
                )
              )
            )
          )
        )
      (let ((f0-33 (rand-float-gen)))
        (cond
          ((< 0.6666667 f0-33)
           (ja-channel-push! 1 (seconds 0.2))
           (ja-no-eval :group! ogreboss-village2-victory-ja :num! (seek!) :frame-num 0.0)
           (until (ja-done? 0)
             (suspend)
             (ja :num! (seek!))
             )
           )
          ((not (handle->process (-> self boulder)))
           (go ogreboss-village2-throw)
           )
          )
        )
      )
    )
  :post ja-post
  )

;; definition for method 11 of type ogreboss-village2
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this ogreboss-village2) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 1) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set-vector! (-> s3-0 local-sphere) 0.0 40960.0 0.0 40960.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 3))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense touch))
        (set-vector! (-> s2-0 local-sphere) 0.0 34816.0 0.0 14336.0)
        (append-prim s3-0 s2-0)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *ogreboss-village2-sg* '())
  (set-vector! (-> this root scale) 0.65 0.65 0.65 1.0)
  (transform-post)
  (set! (-> this root pause-adjust-distance) 122880.0)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this boulder) (the-as handle #f))
  (go ogreboss-village2-idle)
  (none)
  )

;; definition of type villageb-ogreboss
(deftype villageb-ogreboss (ogreboss-village2)
  ()
  )

;; definition for method 3 of type villageb-ogreboss
(defmethod inspect ((this villageb-ogreboss))
  (let ((t9-0 (method-of-type ogreboss-village2 inspect)))
    (t9-0 this)
    )
  this
  )

;; definition of type villageb-water
(deftype villageb-water (water-anim)
  ()
  )

;; definition for method 3 of type villageb-water
(defmethod inspect ((this villageb-water))
  (let ((t9-0 (method-of-type water-anim inspect)))
    (t9-0 this)
    )
  this
  )

;; definition for symbol ripple-for-villageb-water, type ripple-wave-set
(define ripple-for-villageb-water (new 'static 'ripple-wave-set
                                    :count 3
                                    :converted #f
                                    :normal-scale 6.0
                                    :wave (new 'static 'inline-array ripple-wave 4
                                      (new 'static 'ripple-wave :scale 7.0 :xdiv 1 :speed 6.0)
                                      (new 'static 'ripple-wave :scale 7.0 :xdiv -1 :zdiv 1 :speed 6.0)
                                      (new 'static 'ripple-wave :scale 3.0 :xdiv 5 :zdiv 3 :speed 3.0)
                                      (new 'static 'ripple-wave)
                                      )
                                    )
        )

;; definition for method 22 of type villageb-water
;; INFO: Return type mismatch ripple-wave-set vs none.
(defmethod water-vol-method-22 ((this villageb-water))
  (let ((t9-0 (method-of-type water-anim water-vol-method-22)))
    (t9-0 this)
    )
  (let ((v1-2 (new 'process 'ripple-control)))
    (set! (-> this draw ripple) v1-2)
    (set-vector! (-> this draw color-mult) 0.01 0.45 0.5 0.75)
    (set! (-> v1-2 global-scale) 3072.0)
    (set! (-> v1-2 close-fade-dist) 163840.0)
    (set! (-> v1-2 far-fade-dist) 245760.0)
    (set! (-> v1-2 waveform) ripple-for-villageb-water)
    )
  (none)
  )
