;;-*-Lisp-*-
(in-package goal)

;; definition of type flutflut-bluehut
(deftype flutflut-bluehut (process-taskable)
  ()
  )

;; definition for method 3 of type flutflut-bluehut
(defmethod inspect ((this flutflut-bluehut))
  (let ((t9-0 (method-of-type process-taskable inspect)))
    (t9-0 this)
    )
  this
  )

;; failed to figure out what this is:
(defskelgroup *flutflut-bluehut-sg* flutflut-bluehut flutflut-bluehut-lod0-jg flutflut-bluehut-idle-breathe-ja
              ((flutflut-bluehut-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.25)
              )

;; definition for method 32 of type flutflut-bluehut
;; INFO: Return type mismatch art-element vs basic.
(defmethod play-anim! ((this flutflut-bluehut) (arg0 symbol))
  (current-status (-> this tasks))
  (if arg0
      (format
        0
        "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
        (-> this name)
        (task-status->string (current-status (-> this tasks)))
        )
      )
  (the-as basic (get-art-elem this))
  )

;; definition for method 31 of type flutflut-bluehut
(defmethod get-art-elem ((this flutflut-bluehut))
  (-> this draw art-group data 2)
  )

;; definition for method 39 of type flutflut-bluehut
(defmethod should-display? ((this flutflut-bluehut))
  (and (closed? (-> this tasks) (game-task village2-levitator) (task-status need-introduction))
       (task-closed? (game-task beach-flutflut) (task-status need-resolution))
       )
  )

;; failed to figure out what this is:
(defstate idle (flutflut-bluehut)
  :virtual #t
  :trans (behavior ()
    (set! (-> self will-talk) #f)
    ((-> (method-of-type process-taskable idle) trans))
    )
  :code (behavior ()
    (if (!= (ja-group) (get-art-elem self))
        (ja-channel-push! 1 (seconds 0.05))
        )
    (loop
      (ja :group! flutflut-bluehut-idle-breathe-ja)
      (let* ((f30-0 2.0)
             (v1-8 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-9 (the-as number (logior #x3f800000 v1-8)))
             )
        (countdown (gp-0 (+ (the int (* f30-0 (+ -1.0 (the-as float v1-9)))) 1))
          (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!))
            )
          (let ((s5-0 (current-time)))
            (while (< (+ (current-time) (seconds -0.5)) s5-0)
              (suspend)
              )
            )
          (ja-no-eval :group! (ja-group) :num! (seek! 0.0) :frame-num max)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek! 0.0))
            )
          (let ((s5-1 (current-time)))
            (while (< (+ (current-time) (seconds -0.5)) s5-1)
              (suspend)
              )
            )
          )
        )
      (ja-no-eval :group! flutflut-bluehut-idle-start-scratch-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      (ja :group! flutflut-bluehut-idle-scratch-ja)
      (let* ((f30-1 2.0)
             (v1-102 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
             (v1-103 (the-as number (logior #x3f800000 v1-102)))
             )
        (countdown (gp-1 (+ (the int (* f30-1 (+ -1.0 (the-as float v1-103)))) 6))
          (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!))
            )
          )
        )
      (ja-no-eval :group! flutflut-bluehut-idle-start-scratch-ja :num! (seek! 0.0) :frame-num max)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! 0.0))
        )
      )
    )
  )

;; definition for method 11 of type flutflut-bluehut
(defmethod init-from-entity! ((this flutflut-bluehut) (arg0 entity-actor))
  (process-taskable-method-40 this arg0 *flutflut-bluehut-sg* 3 0 (new 'static 'vector :w 4096.0) 27)
  (set! (-> this tasks) (get-task-control (game-task village2-levitator)))
  (set! (-> this draw light-index) (the-as uint 1))
  (process-taskable-method-42 this)
  (none)
  )
