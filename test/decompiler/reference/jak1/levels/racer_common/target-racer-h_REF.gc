;;-*-Lisp-*-
(in-package goal)

;; definition of type racer-info
(deftype racer-info (basic)
  ((entity               entity-actor)
   (bike-trans           vector         :inline)
   (bike-quat            vector         :inline)
   (bike-scale           vector         :inline)
   (mod-x                float)
   (rot                  vector         :inline)
   (rot-old              vector         :inline)
   (rotv                 vector         :inline)
   (lean-rotx            degrees)
   (change-roty          degrees)
   (change-roty-old      degrees)
   (quat                 vector         :inline)
   (surface-y            meters)
   (surface-vy           meters)
   (surface-quat         vector         :inline)
   (surface-quat-smooth  vector         :inline)
   (cushion-base         meters)
   (cushion-offset       meters)
   (cushion-bob          meters)
   (cushion-bob-old      meters)
   (cushion-smush        smush-control  :inline)
   (shock-offset         meters)
   (shock-offsetv        meters)
   (shock-rotx           meters)
   (hill-value           float)
   (hill-ground-value    float)
   (hill-offset          meters)
   (hill-rotx            degrees)
   (hill-boost           meters)
   (bob-timer            float)
   (bob-meta-timer       float)
   (bob-meta-meta-timer  float)
   (bob-mult-rot         float)
   (bob-mult-trans       float)
   (bob-period           float)
   (bob-meta-time        time-frame)
   (bob-hit-ground-time  time-frame)
   (cur-rotx             degrees)
   (targ-rotx            degrees)
   (speed-rotx           float)
   (mult-rotx            degrees)
   (front-blade          joint-mod)
   (front-rot            degrees)
   (front-rotv           degrees)
   (bottom-blade         joint-mod)
   (bottom-rot           degrees)
   (front                joint-mod)
   (front-turn           degrees)
   (tail                 joint-mod)
   (tail-tilt            degrees)
   (transv-max           meters)
   (slide-down-time      time-frame     2)
   (slide-enter-time     time-frame)
   (slide-mode           int32)
   (slide-amp            float)
   (slide-grip-mult      float)
   (slide-shift-x        float)
   (slide-interp         float)
   (heat                 float)
   (boost-time           time-frame)
   (boost-duration       time-frame)
   (boost-curve          float)
   (boost-level          float)
   (boost-target         float)
   (boost-output         float)
   (hop?                 symbol)
   (hop-start-y          float)
   (bounce               int32)
   (bounce-hit           float)
   (engine-sound-id      sound-id)
   (boost-sound-id       sound-id)
   (engine-sound-pitch   float)
   (turn-anim-targ       float)
   (turn-anim-frame      float)
   (turn-anim-vel        float)
   (tail-anim-vel        float)
   (tail-anim-frame      float)
   (rudd-anim-vel        float)
   (rudd-anim-frame      float)
   (racing-time          time-frame)
   (stick-lock           symbol)
   (stick-off            symbol)
   (heavy                symbol)
   (unstuck-time         time-frame)
   (stuck-count          int32)
   (scrape-sound-id      sound-id)
   (heat-sound-time      time-frame)
   )
  )

;; definition for method 3 of type racer-info
(defmethod inspect ((this racer-info))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tentity: ~A~%" (-> this entity))
  (format #t "~Tbike-trans: ~`vector`P~%" (-> this bike-trans))
  (format #t "~Tbike-quat: ~`vector`P~%" (-> this bike-quat))
  (format #t "~Tbike-scale: ~`vector`P~%" (-> this bike-scale))
  (format #t "~Tmod-x: ~f~%" (-> this mod-x))
  (format #t "~Trot: ~`vector`P~%" (-> this rot))
  (format #t "~Trot-old: ~`vector`P~%" (-> this rot-old))
  (format #t "~Trotv: ~`vector`P~%" (-> this rotv))
  (format #t "~Tlean-rotx: (deg ~r)~%" (-> this lean-rotx))
  (format #t "~Tchange-roty: (deg ~r)~%" (-> this change-roty))
  (format #t "~Tchange-roty-old: (deg ~r)~%" (-> this change-roty-old))
  (format #t "~Tquat: ~`vector`P~%" (-> this quat))
  (format #t "~Tsurface-y: (meters ~m)~%" (-> this surface-y))
  (format #t "~Tsurface-vy: (meters ~m)~%" (-> this surface-vy))
  (format #t "~Tsurface-quat: ~`vector`P~%" (-> this surface-quat))
  (format #t "~Tsurface-quat-smooth: ~`vector`P~%" (-> this surface-quat-smooth))
  (format #t "~Tcushion-base: (meters ~m)~%" (-> this cushion-base))
  (format #t "~Tcushion-offset: (meters ~m)~%" (-> this cushion-offset))
  (format #t "~Tcushion-bob: (meters ~m)~%" (-> this cushion-bob))
  (format #t "~Tcushion-bob-old: (meters ~m)~%" (-> this cushion-bob-old))
  (format #t "~Tcushion-smush: #<smush-control @ #x~X>~%" (-> this cushion-smush))
  (format #t "~Tshock-offset: (meters ~m)~%" (-> this shock-offset))
  (format #t "~Tshock-offsetv: (meters ~m)~%" (-> this shock-offsetv))
  (format #t "~Tshock-rotx: (meters ~m)~%" (-> this shock-rotx))
  (format #t "~Thill-value: ~f~%" (-> this hill-value))
  (format #t "~Thill-ground-value: ~f~%" (-> this hill-ground-value))
  (format #t "~Thill-offset: (meters ~m)~%" (-> this hill-offset))
  (format #t "~Thill-rotx: (deg ~r)~%" (-> this hill-rotx))
  (format #t "~Thill-boost: (meters ~m)~%" (-> this hill-boost))
  (format #t "~Tbob-timer: ~f~%" (-> this bob-timer))
  (format #t "~Tbob-meta-timer: ~f~%" (-> this bob-meta-timer))
  (format #t "~Tbob-meta-meta-timer: ~f~%" (-> this bob-meta-meta-timer))
  (format #t "~Tbob-mult-rot: ~f~%" (-> this bob-mult-rot))
  (format #t "~Tbob-mult-trans: ~f~%" (-> this bob-mult-trans))
  (format #t "~Tbob-period: ~f~%" (-> this bob-period))
  (format #t "~Tbob-meta-time: ~D~%" (-> this bob-meta-time))
  (format #t "~Tbob-hit-ground-time: ~D~%" (-> this bob-hit-ground-time))
  (format #t "~Tcur-rotx: (deg ~r)~%" (-> this cur-rotx))
  (format #t "~Ttarg-rotx: (deg ~r)~%" (-> this targ-rotx))
  (format #t "~Tspeed-rotx: ~f~%" (-> this speed-rotx))
  (format #t "~Tmult-rotx: (deg ~r)~%" (-> this mult-rotx))
  (format #t "~Tfront-blade: ~A~%" (-> this front-blade))
  (format #t "~Tfront-rot: (deg ~r)~%" (-> this front-rot))
  (format #t "~Tfront-rotv: (deg ~r)~%" (-> this front-rotv))
  (format #t "~Tbottom-blade: ~A~%" (-> this bottom-blade))
  (format #t "~Tbottom-rot: (deg ~r)~%" (-> this bottom-rot))
  (format #t "~Tfront: ~A~%" (-> this front))
  (format #t "~Tfront-turn: (deg ~r)~%" (-> this front-turn))
  (format #t "~Ttail: ~A~%" (-> this tail))
  (format #t "~Ttail-tilt: (deg ~r)~%" (-> this tail-tilt))
  (format #t "~Ttransv-max: (meters ~m)~%" (-> this transv-max))
  (format #t "~Tslide-down-time[2] @ #x~X~%" (-> this slide-down-time))
  (format #t "~Tslide-enter-time: ~D~%" (-> this slide-enter-time))
  (format #t "~Tslide-mode: ~D~%" (-> this slide-mode))
  (format #t "~Tslide-amp: ~f~%" (-> this slide-amp))
  (format #t "~Tslide-grip-mult: ~f~%" (-> this slide-grip-mult))
  (format #t "~Tslide-shift-x: ~f~%" (-> this slide-shift-x))
  (format #t "~Tslide-interp: ~f~%" (-> this slide-interp))
  (format #t "~Theat: ~f~%" (-> this heat))
  (format #t "~Tboost-time: ~D~%" (-> this boost-time))
  (format #t "~Tboost-duration: ~D~%" (-> this boost-duration))
  (format #t "~Tboost-curve: ~f~%" (-> this boost-curve))
  (format #t "~Tboost-level: ~f~%" (-> this boost-level))
  (format #t "~Tboost-target: ~f~%" (-> this boost-target))
  (format #t "~Tboost-output: ~f~%" (-> this boost-output))
  (format #t "~Thop?: ~A~%" (-> this hop?))
  (format #t "~Thop-start-y: ~f~%" (-> this hop-start-y))
  (format #t "~Tbounce: ~D~%" (-> this bounce))
  (format #t "~Tbounce-hit: ~f~%" (-> this bounce-hit))
  (format #t "~Tengine-sound-id: ~D~%" (-> this engine-sound-id))
  (format #t "~Tboost-sound-id: ~D~%" (-> this boost-sound-id))
  (format #t "~Tengine-sound-pitch: ~f~%" (-> this engine-sound-pitch))
  (format #t "~Tturn-anim-targ: ~f~%" (-> this turn-anim-targ))
  (format #t "~Tturn-anim-frame: ~f~%" (-> this turn-anim-frame))
  (format #t "~Tturn-anim-vel: ~f~%" (-> this turn-anim-vel))
  (format #t "~Ttail-anim-vel: ~f~%" (-> this tail-anim-vel))
  (format #t "~Ttail-anim-frame: ~f~%" (-> this tail-anim-frame))
  (format #t "~Trudd-anim-vel: ~f~%" (-> this rudd-anim-vel))
  (format #t "~Trudd-anim-frame: ~f~%" (-> this rudd-anim-frame))
  (format #t "~Tracing-time: ~D~%" (-> this racing-time))
  (format #t "~Tstick-lock: ~A~%" (-> this stick-lock))
  (format #t "~Tstick-off: ~A~%" (-> this stick-off))
  (format #t "~Theavy: ~A~%" (-> this heavy))
  (format #t "~Tunstuck-time: ~D~%" (-> this unstuck-time))
  (format #t "~Tstuck-count: ~D~%" (-> this stuck-count))
  (format #t "~Tscrape-sound-id: ~D~%" (-> this scrape-sound-id))
  (format #t "~Theat-sound-time: ~D~%" (-> this heat-sound-time))
  this
  )

;; definition of type racer-bank
(deftype racer-bank (basic)
  ((slide-hold-time             seconds)
   (heat-max                    float)
   (hotcoals-heat-inc           float)
   (lava-heat-inc               float)
   (lava-air-heat-inc           float)
   (surface-heat-inc            float)
   (jump-heat-inc               float)
   (lavatube-hotcoals-heat-inc  float)
   (lavatube-lava-heat-inc      float)
   (lavatube-lava-air-heat-inc  float)
   (lavatube-surface-heat-inc   float)
   (lavatube-jump-heat-inc      float)
   (boost-curve-max             meters)
   (boost-level-max             meters)
   (boost-level-inc             meters)
   (boost-duration              seconds)
   (default-front-blade         degrees)
   (yellow-projectile-speed     meters)
   )
  )

;; definition for method 3 of type racer-bank
(defmethod inspect ((this racer-bank))
  (format #t "[~8x] ~A~%" this (-> this type))
  (format #t "~Tslide-hold-time: (seconds ~e)~%" (-> this slide-hold-time))
  (format #t "~Theat-max: ~f~%" (-> this heat-max))
  (format #t "~Thotcoals-heat-inc: ~f~%" (-> this hotcoals-heat-inc))
  (format #t "~Tlava-heat-inc: ~f~%" (-> this lava-heat-inc))
  (format #t "~Tlava-air-heat-inc: ~f~%" (-> this lava-air-heat-inc))
  (format #t "~Tsurface-heat-inc: ~f~%" (-> this surface-heat-inc))
  (format #t "~Tjump-heat-inc: ~f~%" (-> this jump-heat-inc))
  (format #t "~Tlavatube-hotcoals-heat-inc: ~f~%" (-> this lavatube-hotcoals-heat-inc))
  (format #t "~Tlavatube-lava-heat-inc: ~f~%" (-> this lavatube-lava-heat-inc))
  (format #t "~Tlavatube-lava-air-heat-inc: ~f~%" (-> this lavatube-lava-air-heat-inc))
  (format #t "~Tlavatube-surface-heat-inc: ~f~%" (-> this lavatube-surface-heat-inc))
  (format #t "~Tlavatube-jump-heat-inc: ~f~%" (-> this lavatube-jump-heat-inc))
  (format #t "~Tboost-curve-max: (meters ~m)~%" (-> this boost-curve-max))
  (format #t "~Tboost-level-max: (meters ~m)~%" (-> this boost-level-max))
  (format #t "~Tboost-level-inc: (meters ~m)~%" (-> this boost-level-inc))
  (format #t "~Tboost-duration: (seconds ~e)~%" (-> this boost-duration))
  (format #t "~Tdefault-front-blade: (deg ~r)~%" (-> this default-front-blade))
  (format #t "~Tyellow-projectile-speed: (meters ~m)~%" (-> this yellow-projectile-speed))
  this
  )

;; definition for symbol *RACER-bank*, type racer-bank
(define *RACER-bank* (new 'static 'racer-bank
                       :slide-hold-time (seconds 0.2)
                       :heat-max 100.0
                       :hotcoals-heat-inc 3.0
                       :lava-heat-inc 20.0
                       :lava-air-heat-inc 4.0
                       :surface-heat-inc 1.0
                       :jump-heat-inc 2.0
                       :lavatube-hotcoals-heat-inc 2.0
                       :lavatube-lava-heat-inc 4.5
                       :lavatube-lava-air-heat-inc 4.0
                       :lavatube-surface-heat-inc 1.0
                       :lavatube-jump-heat-inc 10.0
                       :boost-curve-max (meters 5)
                       :boost-level-max (meters 12.5)
                       :boost-level-inc (meters 2)
                       :boost-duration (seconds 2.5)
                       :yellow-projectile-speed (meters 80)
                       )
        )

;; failed to figure out what this is:
(defskelgroup *balloon-sg* balloon balloon-lod0-jg balloon-idle-ja
              ((balloon-lod0-mg (meters 20)) (balloon-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 1.7 0 3)
              )
