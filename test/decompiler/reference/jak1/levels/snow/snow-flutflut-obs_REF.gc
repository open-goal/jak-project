;;-*-Lisp-*-
(in-package goal)

;; definition of type flutflut-plat
(deftype flutflut-plat (plat)
  ((has-path?            symbol)
   (plat-type            int32)
   (rise-time            int32)
   (fall-time            int32)
   (part-ry              float)
   (sync-starting-val    float)
   (flutflut-button      entity-actor)
   (appear-trans-top     vector      :inline)
   (appear-trans-bottom  vector      :inline)
   (appear-quat-top      quaternion  :inline)
   (appear-quat-bottom   quaternion  :inline)
   (start-trans          vector      :inline)
   )
  (:states
    elevator-idle-at-cave
    elevator-idle-at-fort
    elevator-travel-to-cave
    elevator-travel-to-fort
    flutflut-plat-appear
    flutflut-plat-hidden-idle
    flutflut-plat-hide
    )
  )

;; definition for method 3 of type flutflut-plat
(defmethod inspect ((this flutflut-plat))
  (let ((t9-0 (method-of-type plat inspect)))
    (t9-0 this)
    )
  (format #t "~T~Thas-path?: ~A~%" (-> this has-path?))
  (format #t "~T~Tplat-type: ~D~%" (-> this plat-type))
  (format #t "~T~Trise-time: ~D~%" (-> this rise-time))
  (format #t "~T~Tfall-time: ~D~%" (-> this fall-time))
  (format #t "~T~Tpart-ry: ~f~%" (-> this part-ry))
  (format #t "~T~Tsync-starting-val: ~f~%" (-> this sync-starting-val))
  (format #t "~T~Tflutflut-button: ~A~%" (-> this flutflut-button))
  (format #t "~T~Tappear-trans-top: #<vector @ #x~X>~%" (-> this appear-trans-top))
  (format #t "~T~Tappear-trans-bottom: #<vector @ #x~X>~%" (-> this appear-trans-bottom))
  (format #t "~T~Tappear-quat-top: #<quaternion @ #x~X>~%" (-> this appear-quat-top))
  (format #t "~T~Tappear-quat-bottom: #<quaternion @ #x~X>~%" (-> this appear-quat-bottom))
  (format #t "~T~Tstart-trans: #<vector @ #x~X>~%" (-> this start-trans))
  this
  )

;; definition of type snow-button
(deftype snow-button (process-drawable)
  ((root                   collide-shape-moving :override)
   (wiggled?               symbol)
   (trying-for-fuel-cell?  symbol)
   (timeout                time-frame)
   (delay-til-wiggle       time-frame)
   (prev-button            entity-actor)
   (ticker                 ticky                 :inline)
   )
  (:states
    snow-button-activate
    snow-button-deactivate
    snow-button-up-idle
    )
  )

;; definition for method 3 of type snow-button
(defmethod inspect ((this snow-button))
  (let ((t9-0 (method-of-type process-drawable inspect)))
    (t9-0 this)
    )
  (format #t "~T~Twiggled?: ~A~%" (-> this wiggled?))
  (format #t "~T~Ttimeout: ~D~%" (-> this timeout))
  (format #t "~T~Tdelay-til-wiggle: ~D~%" (-> this delay-til-wiggle))
  (format #t "~T~Tprev-button: ~A~%" (-> this prev-button))
  (format #t "~T~Tticker: #<ticky @ #x~X>~%" (-> this ticker))
  this
  )

;; failed to figure out what this is:
(defskelgroup *flutflut-plat-small-sg* flutflut-plat-small flutflut-plat-small-lod0-jg flutflut-plat-small-idle-ja
              ((flutflut-plat-small-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -0.5 0 4)
              )

;; failed to figure out what this is:
(defskelgroup *flutflut-plat-med-sg* flutflut-plat-med flutflut-plat-med-lod0-jg flutflut-plat-med-idle-ja
              ((flutflut-plat-med-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -1 0 6.75)
              )

;; failed to figure out what this is:
(defskelgroup *flutflut-plat-large-sg* flutflut-plat-large flutflut-plat-large-lod0-jg flutflut-plat-large-idle-ja
              ((flutflut-plat-large-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 9)
              )

;; failed to figure out what this is:
(defskelgroup *snow-button-sg* snow-button snow-button-lod0-jg -1
              ((snow-button-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4.3)
              )

;; failed to figure out what this is:
(defpartgroup group-flutflut-plat-small
  :id 516
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2087 :fade-after (meters 50) :falloff-to (meters 50))
    (sp-item 2088 :fade-after (meters 120) :falloff-to (meters 120))
    )
  )

;; failed to figure out what this is:
(defpart 2087
  :init-specs ((:num 1.5)
    (:x (meters -2) (meters 4))
    (:y (meters -1))
    (:z (meters -2) (meters 4))
    (:rot-x 5)
    (:r 5324.8)
    (:g 4096.0)
    (:b 3686.4)
    (:vel-y (meters -0.0033333334))
    (:fade-b -16.383999)
    (:timer (seconds 0.085))
    (:flags (aux-list))
    (:rotate-y (degrees 45))
    )
  )

;; failed to figure out what this is:
(defpart 2088
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 3.0)
    (:x (meters -3) (meters 6))
    (:y (meters -1.25))
    (:z (meters -3) (meters 6))
    (:scale-x (meters 2.5) (meters 1.5))
    (:scale-y :copy scale-x)
    (:g 0.0 64.0)
    (:b 128.0 128.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.01))
    (:fade-g -0.42666668)
    (:fade-a -0.32)
    (:accel-y (meters -0.000033333334))
    (:friction 0.96)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:rotate-y (degrees 45))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-flutflut-plat-med
  :id 517
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2089 :fade-after (meters 50) :falloff-to (meters 50))
    (sp-item 2090 :fade-after (meters 120) :falloff-to (meters 120))
    )
  )

;; failed to figure out what this is:
(defpart 2089
  :init-specs ((:num 3.0)
    (:y (meters -2.5))
    (:rot-x 5)
    (:r 5324.8)
    (:g 4096.0)
    (:b 3686.4)
    (:vel-y (meters 0.0033333334))
    (:fade-b -16.383999)
    (:timer (seconds 0.085))
    (:flags (aux-list))
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 1) (meters 3))
    )
  )

;; failed to figure out what this is:
(defpart 2090
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 6.0)
    (:y (meters -2.25))
    (:scale-x (meters 3) (meters 2))
    (:scale-y :copy scale-x)
    (:g 0.0 64.0)
    (:b 128.0 128.0)
    (:a 16.0 32.0)
    (:vel-y (meters 0.01))
    (:fade-g -0.42666668)
    (:fade-a -0.32)
    (:accel-y (meters -0.000033333334))
    (:friction 0.96)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 90))
    (:conerot-y (degrees 0) (degrees 360))
    (:conerot-radius (meters 1) (meters 3))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-flutflut-plat-large
  :id 518
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 2091 :fade-after (meters 50) :falloff-to (meters 50))
    (sp-item 2092 :fade-after (meters 120) :falloff-to (meters 120))
    )
  )

;; failed to figure out what this is:
(defpart 2091
  :init-specs ((:num 4.0)
    (:x (meters -2) (meters 4))
    (:y (meters -1.5))
    (:z (meters -6) (meters 12))
    (:rot-x 5)
    (:r 5324.8)
    (:g 4096.0)
    (:b 3686.4)
    (:vel-y (meters -0.0033333334))
    (:fade-b -16.383999)
    (:timer (seconds 0.085))
    (:flags (aux-list))
    (:rotate-y (degrees 30))
    )
  )

;; failed to figure out what this is:
(defpart 2092
  :init-specs ((:texture (new 'static 'texture-id :index #xf :page #x2))
    (:num 8.0)
    (:x (meters -2) (meters 4))
    (:y (meters -1.25))
    (:z (meters -6) (meters 12))
    (:scale-x (meters 3) (meters 2))
    (:scale-y :copy scale-x)
    (:g 0.0 64.0)
    (:b 128.0 128.0)
    (:a 16.0 32.0)
    (:vel-y (meters -0.01))
    (:fade-g -0.42666668)
    (:fade-a -0.32)
    (:accel-y (meters -0.000033333334))
    (:friction 0.96)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:rotate-y (degrees 30))
    )
  )

;; failed to figure out what this is:
(defstate snow-button-up-idle (snow-button)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (v0-2 object))
    (case message
      (('touch 'attack 'bonk)
       (when (and (= (-> proc type) target)
                  (logtest? (-> *target* control root-prim prim-core action) (collide-action flut))
                  (>= 10649.6 (vector-vector-xz-distance (-> self root trans) (target-pos 0)))
                  )
         (close-specific-task! (game-task snow-ball) (task-status need-hint))
         (logclear! (-> self mask) (process-mask actor-pause))
         (process-entity-status! self (entity-perm-status bit-3) #t)
         (go snow-button-activate)
         )
       )
      (('query)
       (return #f)
       v0-2
       )
      )
    )
  :code (behavior ()
    (ja :group! snow-button-going-down-ja :num! min)
    (transform-post)
    (logior! (-> self mask) (process-mask sleep-code))
    (suspend)
    0
    )
  )

;; failed to figure out what this is:
(defstate snow-button-activate (snow-button)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (v0-0 object))
    (case message
      (('untrigger)
       (go snow-button-deactivate)
       )
      (('query)
       (return #t)
       v0-0
       )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set! (-> self wiggled?) #f)
    (sleep (-> self ticker) (-> self timeout))
    (when (-> self prev-button)
      (let* ((v1-6 (-> self prev-button))
             (a0-1 (if v1-6
                       (-> v1-6 extra process)
                       )
                   )
             )
        (if a0-1
            (send-event a0-1 'untrigger)
            )
        )
      )
    (send-to-all-after (-> self link) 'trigger)
    )
  :trans (behavior ()
    (if (completed? (-> self ticker))
        (go snow-button-deactivate)
        )
    (when (reached-delay? (-> self ticker) (-> self delay-til-wiggle))
      (when (not (-> self wiggled?))
        (set! (-> self wiggled?) #t)
        (send-to-all-after (-> self link) 'bounce)
        )
      )
    (rider-trans)
    )
  :code (behavior ()
    (sound-play "prec-button1" :pitch -1)
    (ja-no-eval :group! snow-button-going-down-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (logior! (-> self mask) (process-mask sleep-code))
    (suspend)
    0
    )
  :post rider-post
  )

;; failed to figure out what this is:
(defstate snow-button-deactivate (snow-button)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (v0-0 symbol))
    (case message
      (('query)
       (return (the-as object #f))
       v0-0
       )
      )
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (process-entity-status! self (entity-perm-status bit-3) #f)
    )
  :trans rider-trans
  :code (behavior ()
    (send-to-all-after (-> self link) 'untrigger)
    (set-time! (-> self state-time))
    (until (time-elapsed? (-> self state-time) (seconds 0.6))
      (suspend)
      )
    (ja-no-eval :group! snow-button-going-up-ja :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (go snow-button-up-idle)
    )
  :post rider-post
  )

;; definition for method 11 of type snow-button
;; INFO: Return type mismatch object vs none.
(defmethod init-from-entity! ((this snow-button) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 3) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 17612.8)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core offense) (collide-offense no-offense))
        (set! (-> s2-0 transform-index) 4)
        (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 10649.6)
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 1))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid rider-plat-sticky))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-1 transform-index) 4)
        (set-vector! (-> s2-1 local-sphere) 0.0 2048.0 0.0 11468.8)
        (append-prim s3-0 s2-1)
        )
      (let ((s2-2 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 1) (the-as uint 2))))
        (set! (-> s2-2 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s2-2 collide-with) (collide-kind target))
        (set! (-> s2-2 prim-core action) (collide-action solid rider-plat-sticky))
        (set! (-> s2-2 prim-core offense) (collide-offense indestructible))
        (set! (-> s2-2 transform-index) 3)
        (set-vector! (-> s2-2 local-sphere) 0.0 0.0 0.0 17612.8)
        (append-prim s3-0 s2-2)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (set! (-> this link) (new 'process 'actor-link-info this))
  (initialize-skeleton this *snow-button-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (set! (-> this timeout) (the-as time-frame (the int (* 300.0 (res-lump-float arg0 'timeout :default 10.0)))))
  (set! (-> this delay-til-wiggle) (+ (-> this timeout) (seconds -0.4)))
  (if (> (entity-actor-count arg0 'alt-actor) 0)
      (set! (-> this prev-button) (entity-actor-lookup arg0 'alt-actor 0))
      (set! (-> this prev-button) #f)
      )
  (ja-channel-set! 1)
  (let ((s5-1 (-> this skel root-channel 0)))
    (joint-control-channel-group-eval!
      s5-1
      (the-as art-joint-anim (-> this draw art-group data 2))
      num-func-identity
      )
    (set! (-> s5-1 frame-num) 0.0)
    )
  (transform-post)
  (go snow-button-up-idle)
  (none)
  )

;; definition for method 26 of type flutflut-plat
;; INFO: Used lq/sq
;; INFO: Return type mismatch int vs none.
(defmethod baseplat-method-26 ((this flutflut-plat))
  (let ((t9-0 (method-of-type plat baseplat-method-26)))
    (t9-0 this)
    )
  (if (zero? (-> this link))
      (set! (-> this link) (new 'process 'actor-link-info this))
      )
  (set! (-> this sound-id) (new-sound-id))
  (set! (-> this plat-type) (res-lump-value (-> this entity) 'mode int))
  (set! (-> this flutflut-button) (entity-actor-lookup (-> this entity) 'alt-actor 0))
  (let ((f0-0 (res-lump-float (-> this entity) 'rotoffset)))
    (if (!= f0-0 0.0)
        (quaternion-rotate-y! (-> this root quat) (-> this root quat) f0-0)
        )
    )
  (set! (-> this has-path?)
        (and (not (logtest? (-> this path flags) (path-control-flag not-found))) (> (-> this sync period) 0))
        )
  (when (nonzero? (-> this plat-type))
    (cond
      ((-> this has-path?)
       (set! (-> this sync-starting-val) (get-phase-offset (-> this sync)))
       (sync-now! (-> this sync) (-> this sync-starting-val))
       (eval-path-curve!
         (-> this path)
         (-> this appear-trans-top)
         (if (logtest? (-> this fact options) (fact-options wrap-phase))
             (get-current-phase (-> this sync))
             (get-current-phase-with-mirror (-> this sync))
             )
         'interp
         )
       )
      (else
        (set! (-> this appear-trans-top quad) (-> this root trans quad))
        )
      )
    (set! (-> this appear-trans-bottom quad) (-> this appear-trans-top quad))
    (+! (-> this appear-trans-bottom y) -286720.0)
    (quaternion-copy! (-> this appear-quat-top) (-> this root quat))
    (let ((v1-33 (res-lump-value (-> this entity) 'extra-id uint128)))
      (set! (-> this rise-time) (the int (* 300.0 (+ 0.6 (* 0.15 (the float v1-33))))))
      )
    (set! (-> this fall-time) 180)
    )
  (none)
  )

;; definition for method 27 of type flutflut-plat
;; INFO: Return type mismatch symbol vs skeleton-group.
(defmethod get-lit-skel ((this flutflut-plat))
  (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
      (return (the-as skeleton-group #t))
      )
  (when (task-complete? *game-info* (-> this entity extra perm task))
    (process-entity-status! this (entity-perm-status complete) #t)
    (return (the-as skeleton-group #t))
    )
  (the-as skeleton-group #f)
  )

;; failed to figure out what this is:
(defstate plat-startup (flutflut-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (when (or (!= (-> self plat-type) 1)
                 (not (and (-> self entity) (logtest? (-> self entity extra perm status) (entity-perm-status complete))))
                 )
         (logclear! (-> self mask) (process-mask actor-pause))
         (go flutflut-plat-appear)
         )
       )
      )
    )
  :code (behavior ((arg0 plat))
    (cond
      ((and (= (-> self plat-type) 1)
            (-> self entity)
            (logtest? (-> self entity extra perm status) (entity-perm-status complete))
            )
       (set! (-> self basetrans quad) (-> self appear-trans-top quad))
       (go elevator-idle-at-cave)
       )
      ((or (= (-> self plat-type) 1) (= (-> self plat-type) 2))
       (let* ((v1-11 (-> self flutflut-button))
              (a0-10 (if v1-11
                         (-> v1-11 extra process)
                         )
                     )
              )
         (if (and a0-10 (send-event a0-10 'query))
             (go flutflut-plat-appear)
             (go flutflut-plat-hidden-idle)
             )
         )
       )
      (else
        (let ((t9-4 (-> (method-of-type plat plat-startup) code)))
          (if t9-4
              ((the-as (function none :behavior plat) t9-4))
              )
          )
        )
      )
    )
  )

;; failed to figure out what this is:
(defstate flutflut-plat-hidden-idle (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('trigger)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go flutflut-plat-appear)
       )
      )
    )
  :trans (behavior ()
    (if (and (= (-> self plat-type) 1) (get-lit-skel self))
        (go flutflut-plat-appear)
        )
    )
  :code (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (clear-collide-with-as (-> self root))
    (set! (-> self root trans quad) (-> self appear-trans-top quad))
    (transform-post)
    (logior! (-> self mask) (process-mask sleep-code))
    (suspend)
    0
    )
  )

;; failed to figure out what this is:
(defstate flutflut-plat-appear (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk 'bounce)
       (baseplat-method-22 self)
       )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logclear! (-> self mask) (process-mask actor-pause))
    (logclear! (-> self draw status) (draw-status hidden))
    (restore-collide-with-as (-> self root))
    (set! (-> self basetrans quad) (-> self appear-trans-bottom quad))
    (let ((s5-0 (new 'stack-no-clear 'vector))
          (gp-0 (new 'stack-no-clear 'quaternion))
          )
      (let ((f30-0 (rand-vu-float-range 0.0 65536.0)))
        (set-vector! s5-0 (cos f30-0) 0.0 (sin f30-0) 1.0)
        )
      (quaternion-vector-angle! (-> self appear-quat-bottom) s5-0 (rand-vu-float-range -21845.334 21845.334))
      (quaternion-axis-angle! gp-0 0.0 1.0 0.0 (rand-vu-float-range -32768.0 32768.0))
      (quaternion*! (-> self appear-quat-bottom) (-> self appear-quat-bottom) gp-0)
      )
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    )
  :trans (behavior ()
    (plat-trans)
    (let* ((f0-1 (fmin 1.0 (/ (the float (- (current-time) (-> self state-time))) (the float (-> self rise-time)))))
           (f0-2 (- 1.0 f0-1))
           (f0-3 (* f0-2 f0-2))
           (f30-0 (- 1.0 f0-3))
           )
      (vector-lerp! (-> self basetrans) (-> self appear-trans-bottom) (-> self appear-trans-top) f30-0)
      (quaternion-slerp! (-> self root quat) (-> self appear-quat-bottom) (-> self appear-quat-top) f30-0)
      (set-vector! (-> self draw color-mult) f30-0 f30-0 f30-0 1.0)
      (when (>= f30-0 1.0)
        (baseplat-method-22 self)
        (rider-post)
        (cond
          ((= (-> self plat-type) 1)
           (if (and (-> self entity) (logtest? (-> self entity extra perm status) (entity-perm-status complete)))
               (go elevator-idle-at-cave)
               (go-virtual plat-idle)
               )
           )
          ((-> self has-path?)
           (let ((a0-9 (-> self sync)))
             (sync-now! a0-9 (-> self sync-starting-val))
             (go-virtual plat-path-active (the-as plat a0-9))
             )
           )
          (else
            (go-virtual plat-idle)
            )
          )
        )
      )
    (baseplat-method-20 self)
    )
  :code anim-loop
  :post rider-post
  )

;; failed to figure out what this is:
(defstate plat-idle (flutflut-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk 'bounce)
       (baseplat-method-22 self)
       )
      (('untrigger)
       (go flutflut-plat-hide)
       )
      )
    )
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type plat plat-idle) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (logclear! (-> self mask) (process-mask actor-pause))
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (let ((t9-0 (-> (method-of-type plat plat-idle) exit)))
      (if t9-0
          (t9-0)
          )
      )
    )
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type plat plat-idle) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (if (and (= (-> self plat-type) 1) (get-lit-skel self))
        (go elevator-idle-at-cave)
        )
    )
  )

;; failed to figure out what this is:
(defstate plat-path-active (flutflut-plat)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk 'bounce)
       (baseplat-method-22 self)
       )
      (('untrigger)
       (go flutflut-plat-hide)
       )
      )
    )
  :enter (behavior ((arg0 plat))
    (let ((t9-0 (-> (method-of-type plat plat-path-active) enter)))
      (if t9-0
          (t9-0 arg0)
          )
      )
    (if (or (!= (-> self plat-type) 1)
            (not (and (-> self entity) (logtest? (-> self entity extra perm status) (entity-perm-status complete))))
            )
        (logclear! (-> self mask) (process-mask actor-pause))
        )
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (let ((t9-0 (-> (method-of-type plat plat-path-active) exit)))
      (if t9-0
          (t9-0)
          )
      )
    )
  )

;; failed to figure out what this is:
(defstate flutflut-plat-hide (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk)
       (baseplat-method-22 self)
       )
      )
    )
  :enter (behavior ()
    (set-time! (-> self state-time))
    (logclear! (-> self mask) (process-mask actor-pause))
    (logclear! (-> self root root-prim prim-core action) (collide-action rider-plat-sticky))
    (set! (-> self start-trans quad) (-> self root trans quad))
    (let ((s5-0 (new 'stack-no-clear 'vector))
          (gp-0 (new 'stack-no-clear 'quaternion))
          )
      (let ((f30-0 (rand-vu-float-range 0.0 65536.0)))
        (set-vector! s5-0 (cos f30-0) 0.0 (sin f30-0) 1.0)
        )
      (quaternion-vector-angle! (-> self appear-quat-bottom) s5-0 (rand-vu-float-range -21845.334 21845.334))
      (quaternion-axis-angle! gp-0 0.0 1.0 0.0 (rand-vu-float-range -32768.0 32768.0))
      (quaternion*! (-> self appear-quat-bottom) (-> self appear-quat-bottom) gp-0)
      )
    )
  :exit (behavior ()
    (logior! (-> self mask) (process-mask actor-pause))
    (logior! (-> self root root-prim prim-core action) (collide-action rider-plat-sticky))
    )
  :trans (behavior ()
    (plat-trans)
    (let* ((f0-1 (fmin 1.0 (/ (the float (- (current-time) (-> self state-time))) (the float (-> self fall-time)))))
           (f30-0 (* f0-1 f0-1))
           )
      (vector-lerp! (-> self basetrans) (-> self start-trans) (-> self appear-trans-bottom) f30-0)
      (quaternion-slerp! (-> self root quat) (-> self appear-quat-top) (-> self appear-quat-bottom) f30-0)
      (let ((f0-3 (- 1.0 f30-0)))
        (set-vector! (-> self draw color-mult) f0-3 f0-3 f0-3 1.0)
        )
      (when (>= f30-0 1.0)
        (rider-post)
        (go flutflut-plat-hidden-idle)
        )
      )
    (baseplat-method-20 self)
    )
  :code anim-loop
  :post rider-post
  )

;; failed to figure out what this is:
(defstate elevator-idle-at-cave (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk)
       (baseplat-method-22 self)
       )
      (('bounce)
       (if (not (and (-> self entity) (logtest? (-> self entity extra perm status) (entity-perm-status complete))))
           (baseplat-method-22 self)
           )
       )
      (('ridden)
       (if (or (not *target*) (not (logtest? (-> *target* control root-prim prim-core action) (collide-action flut))))
           (go elevator-travel-to-fort)
           )
       )
      )
    )
  :enter (behavior ()
    (set! (-> self path-pos) 0.0)
    (eval-path-curve! (-> self path) (-> self basetrans) 0.0 'interp)
    )
  :trans (behavior ()
    (plat-trans)
    (baseplat-method-20 self)
    )
  :code anim-loop
  :post plat-post
  )

;; failed to figure out what this is:
(defstate elevator-travel-to-fort (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk 'bounce)
       (baseplat-method-22 self)
       )
      )
    )
  :trans (behavior ()
    (when (= (-> self path-pos) 1.0)
      (baseplat-method-22 self)
      (go elevator-idle-at-fort)
      )
    (seek! (-> self path-pos) 1.0 (* 0.06666667 (seconds-per-frame)))
    (eval-path-curve! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
    (plat-trans)
    (baseplat-method-20 self)
    )
  :code anim-loop
  :post plat-post
  )

;; failed to figure out what this is:
(defstate elevator-idle-at-fort (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk 'bounce)
       (baseplat-method-22 self)
       )
      )
    )
  :enter (behavior ()
    (set! (-> self path-pos) 1.0)
    (eval-path-curve! (-> self path) (-> self basetrans) 1.0 'interp)
    )
  :trans (behavior ()
    (when *target*
      (if (and (>= 798720.0 (-> (target-pos 0) y))
               (not (and (logtest? (-> *target* control unknown-surface00 flags) (surface-flags jump))
                         (not (logtest? (-> *target* control status) (cshape-moving-flags onsurf)))
                         )
                    )
               )
          (go elevator-travel-to-cave)
          )
      )
    (plat-trans)
    (baseplat-method-20 self)
    )
  :code anim-loop
  :post plat-post
  )

;; failed to figure out what this is:
(defstate elevator-travel-to-cave (flutflut-plat)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('bonk 'bounce)
       (baseplat-method-22 self)
       )
      )
    )
  :trans (behavior ()
    (when (= (-> self path-pos) 0.0)
      (baseplat-method-22 self)
      (go elevator-idle-at-cave)
      )
    (seek! (-> self path-pos) 0.0 (* 0.06666667 (seconds-per-frame)))
    (eval-path-curve! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
    (plat-trans)
    (baseplat-method-20 self)
    )
  :code anim-loop
  :post plat-post
  )

;; definition of type flutflut-plat-small
(deftype flutflut-plat-small (flutflut-plat)
  ()
  )

;; definition for method 3 of type flutflut-plat-small
(defmethod inspect ((this flutflut-plat-small))
  (let ((t9-0 (method-of-type flutflut-plat inspect)))
    (t9-0 this)
    )
  this
  )

;; definition of type flutflut-plat-med
(deftype flutflut-plat-med (flutflut-plat)
  ()
  )

;; definition for method 3 of type flutflut-plat-med
(defmethod inspect ((this flutflut-plat-med))
  (let ((t9-0 (method-of-type flutflut-plat inspect)))
    (t9-0 this)
    )
  this
  )

;; definition of type flutflut-plat-large
(deftype flutflut-plat-large (flutflut-plat)
  ()
  )

;; definition for method 3 of type flutflut-plat-large
(defmethod inspect ((this flutflut-plat-large))
  (let ((t9-0 (method-of-type flutflut-plat inspect)))
    (t9-0 this)
    )
  this
  )

;; definition for method 23 of type flutflut-plat-small
(defmethod get-unlit-skel ((this flutflut-plat-small))
  *flutflut-plat-small-sg*
  )

;; definition for method 25 of type flutflut-plat-small
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod baseplat-method-25 ((this flutflut-plat-small))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 516) this)))
    (set! (-> this part) v0-0)
    (the-as sparticle-launch-group v0-0)
    )
  )

;; definition for method 20 of type flutflut-plat-small
;; INFO: Return type mismatch object vs none.
(defmethod baseplat-method-20 ((this flutflut-plat-small))
  (when (nonzero? (-> this part))
    (set! (-> *part-id-table* 2087 init-specs 12 initial-valuef) (-> this part-ry))
    (set! (-> *part-id-table* 2088 init-specs 17 initial-valuef) (-> this part-ry))
    (spawn (-> this part) (-> this root trans))
    )
  (none)
  )

;; definition for method 26 of type flutflut-plat-small
;; INFO: Return type mismatch float vs none.
(defmethod baseplat-method-26 ((this flutflut-plat-small))
  (let ((t9-0 (method-of-type flutflut-plat baseplat-method-26)))
    (t9-0 this)
    )
  (set! (-> this part-ry) (+ 16384.0 (quaternion-y-angle (-> this root quat))))
  (none)
  )

;; definition for method 24 of type flutflut-plat-small
;; INFO: Return type mismatch int vs none.
(defmethod baseplat-method-24 ((this flutflut-plat-small))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 -2048.0 0.0 16384.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 23 of type flutflut-plat-med
(defmethod get-unlit-skel ((this flutflut-plat-med))
  *flutflut-plat-med-sg*
  )

;; definition for method 25 of type flutflut-plat-med
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod baseplat-method-25 ((this flutflut-plat-med))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 517) this)))
    (set! (-> this part) v0-0)
    (the-as sparticle-launch-group v0-0)
    )
  )

;; definition for method 24 of type flutflut-plat-med
;; INFO: Return type mismatch int vs none.
(defmethod baseplat-method-24 ((this flutflut-plat-med))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 -4096.0 0.0 27648.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

;; definition for method 23 of type flutflut-plat-large
(defmethod get-unlit-skel ((this flutflut-plat-large))
  *flutflut-plat-large-sg*
  )

;; definition for method 25 of type flutflut-plat-large
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod baseplat-method-25 ((this flutflut-plat-large))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 518) this)))
    (set! (-> this part) v0-0)
    (the-as sparticle-launch-group v0-0)
    )
  )

;; definition for method 20 of type flutflut-plat-large
;; INFO: Return type mismatch object vs none.
(defmethod baseplat-method-20 ((this flutflut-plat-large))
  (when (nonzero? (-> this part))
    (set! (-> *part-id-table* 2091 init-specs 12 initial-valuef) (-> this part-ry))
    (set! (-> *part-id-table* 2092 init-specs 17 initial-valuef) (-> this part-ry))
    (spawn (-> this part) (-> this root trans))
    )
  (none)
  )

;; definition for method 26 of type flutflut-plat-large
;; INFO: Return type mismatch float vs none.
(defmethod baseplat-method-26 ((this flutflut-plat-large))
  (let ((t9-0 (method-of-type flutflut-plat baseplat-method-26)))
    (t9-0 this)
    )
  (set! (-> this part-ry) (+ 16384.0 (quaternion-y-angle (-> this root quat))))
  (none)
  )

;; definition for method 24 of type flutflut-plat-large
;; INFO: Return type mismatch int vs none.
(defmethod baseplat-method-24 ((this flutflut-plat-large))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 36864.0)
      (set-root-prim! s5-0 s4-0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )
