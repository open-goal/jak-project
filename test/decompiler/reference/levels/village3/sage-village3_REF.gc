;;-*-Lisp-*-
(in-package goal)

;; definition of type sage-villagec
(deftype sage-villagec (process-taskable)
  ((evilbro   handle        :offset-assert 384)
   (evilsis   handle        :offset-assert 392)
   (assistant entity-actor  :offset-assert 400)
   )
  :heap-base #x130
  :method-count-assert 53
  :size-assert         #x194
  :flag-assert         #x3501300194
  )

;; definition for method 3 of type sage-villagec
(defmethod inspect sage-villagec ((obj sage-villagec))
  (let ((t9-0 (method-of-type process-taskable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tevilbro: ~D~%" (-> obj evilbro))
  (format #t "~T~Tevilsis: ~D~%" (-> obj evilsis))
  (format #t "~T~Tassistant: ~A~%" (-> obj assistant))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "sage-village3"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     :shadow 2
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 3)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 4095996000.0)
  (set! *sage-village3-sg* v1-1)
  )

;; failed to figure out what this is:
(let
  ((v1-2
    (new 'static 'skeleton-group
     :art-group-name "evilbro-village3"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     :shadow 2
     )
    )
   )
  (set! (-> v1-2 jgeo) 0)
  (set! (-> v1-2 janim) 3)
  (set! (-> v1-2 mgeo 0) (the-as uint 1))
  (set! (-> v1-2 lod-dist 0) 4095996000.0)
  (set! *evilbro-village3-sg* v1-2)
  )

;; failed to figure out what this is:
(let
  ((v1-3
    (new 'static 'skeleton-group
     :art-group-name "evilsis-village3"
     :bounds (new 'static 'vector :w 16384.0)
     :version #x6
     :shadow 2
     )
    )
   )
  (set! (-> v1-3 jgeo) 0)
  (set! (-> v1-3 janim) 3)
  (set! (-> v1-3 mgeo 0) (the-as uint 1))
  (set! (-> v1-3 lod-dist 0) 4095996000.0)
  (set! *evilsis-village3-sg* v1-3)
  )

;; definition for method 32 of type sage-villagec
(defmethod play-anim! sage-villagec ((obj sage-villagec) (arg0 symbol))
  (with-pp
   (set! (-> obj talk-message) (the-as uint 291))
   (case (current-status (-> obj tasks)) 
    ((1 2 3)
      (if (not arg0)
       (set! (-> obj will-talk) #t)
       )
      (case (current-task (-> obj tasks)) 
       ((105)
         (when arg0
          (close-status! (-> obj tasks) (task-status need-introduction))
          (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-5 from) pp)
           (set! (-> a1-5 num-params) 1)
           (set! (-> a1-5 message) 'clone)
           (set! (-> a1-5 param 0) (the-as uint (process->handle obj)))
           (send-event-function (-> obj assistant extra process) a1-5)
           )
          (let ((s5-1 (get-process *default-dead-pool* manipy #x4000)))
           (set! (-> obj evilbro) (ppointer->handle (when s5-1
                                                     (let
                                                      ((t9-5
                                                        (method-of-type
                                                         manipy
                                                         activate
                                                         )
                                                        )
                                                       )
                                                      (t9-5
                                                       (the-as manipy s5-1)
                                                       obj
                                                       'manipy
                                                       (the-as
                                                        pointer
                                                        #x70004000
                                                        )
                                                       )
                                                      )
                                                     (run-now-in-process
                                                      s5-1
                                                      manipy-init
                                                      (->
                                                       obj
                                                       root-override
                                                       trans
                                                       )
                                                      (-> obj entity)
                                                      *evilbro-village3-sg*
                                                      #f
                                                      )
                                                     (-> s5-1 ppointer)
                                                     )
                                   )
            )
           )
          (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-9 from) pp)
           (set! (-> a1-9 num-params) 1)
           (set! (-> a1-9 message) 'anim-mode)
           (set! (-> a1-9 param 0) (the-as uint 'clone-anim))
           (send-event-function (handle->process (-> obj evilbro)) a1-9)
           )
          (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-10 from) pp)
           (set! (-> a1-10 num-params) 1)
           (set! (-> a1-10 message) 'blend-shape)
           (set! (-> a1-10 param 0) (the-as uint #t))
           (send-event-function (handle->process (-> obj evilbro)) a1-10)
           )
          (let ((a1-11 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-11 from) pp)
           (set! (-> a1-11 num-params) 1)
           (set! (-> a1-11 message) 'center-joint)
           (set! (-> a1-11 param 0) (the-as uint 3))
           (send-event-function (handle->process (-> obj evilbro)) a1-11)
           )
          (let ((s5-2 (get-process *default-dead-pool* manipy #x4000)))
           (set! (-> obj evilsis) (ppointer->handle (when s5-2
                                                     (let
                                                      ((t9-11
                                                        (method-of-type
                                                         manipy
                                                         activate
                                                         )
                                                        )
                                                       )
                                                      (t9-11
                                                       (the-as manipy s5-2)
                                                       obj
                                                       'manipy
                                                       (the-as
                                                        pointer
                                                        #x70004000
                                                        )
                                                       )
                                                      )
                                                     (run-now-in-process
                                                      s5-2
                                                      manipy-init
                                                      (->
                                                       obj
                                                       root-override
                                                       trans
                                                       )
                                                      (-> obj entity)
                                                      *evilsis-village3-sg*
                                                      #f
                                                      )
                                                     (-> s5-2 ppointer)
                                                     )
                                   )
            )
           )
          (let ((a1-15 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-15 from) pp)
           (set! (-> a1-15 num-params) 1)
           (set! (-> a1-15 message) 'anim-mode)
           (set! (-> a1-15 param 0) (the-as uint 'clone-anim))
           (send-event-function (handle->process (-> obj evilsis)) a1-15)
           )
          (let ((a1-16 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-16 from) pp)
           (set! (-> a1-16 num-params) 1)
           (set! (-> a1-16 message) 'blend-shape)
           (set! (-> a1-16 param 0) (the-as uint #t))
           (send-event-function (handle->process (-> obj evilsis)) a1-16)
           )
          (let ((a1-17 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-17 from) pp)
           (set! (-> a1-17 num-params) 1)
           (set! (-> a1-17 message) 'center-joint)
           (set! (-> a1-17 param 0) (the-as uint 3))
           (send-event-function (handle->process (-> obj evilsis)) a1-17)
           )
          (set! (-> obj draw bounds w) 40960.0)
          )
         (new 'static 'spool-anim
          :name "sage-village3-introduction"
          :index 8
          :parts 58
          :command-list
          '(
            ((the binteger 206)
              joint
              "cameraB"
              )
            ((the binteger 268)
             joint
             "camera"
             )
            ((the binteger 321)
             joint
             "cameraB"
             )
            ((the binteger 415)
             joint
             "camera"
             )
            ((the binteger 502)
             joint
             "cameraB"
             )
            ((the binteger 655)
             joint
             "camera"
             )
            ((the binteger 864)
             joint
             "cameraB"
             )
            ((the binteger 958)
             joint
             "camera"
             )
            ((the binteger 1178)
             joint
             "cameraB"
             )
            ((the binteger 1295)
             joint
             "camera"
             )
            ((the binteger 1377)
             joint
             "cameraB"
             )
            ((the binteger 1683)
             joint
             "camera"
             )
            ((the binteger 2066)
             joint
             "cameraB"
             )
            ((the binteger 2209)
             joint
             "camera"
             )
            ((the binteger 2389)
             joint
             "cameraB"
             )
            ((the binteger 2707)
             joint
             "camera"
             )
            ((the binteger 2769)
             joint
             "cameraB"
             )
            ((the binteger 2901)
             joint
             "camera"
             )
            ((the binteger 3021)
             joint
             "cameraB"
             )
            ((the binteger 3158)
             joint
             "camera"
             )
            ((the binteger 3301)
             joint
             "cameraB"
             )
            ((the binteger 3533)
             joint
             "camera"
             )
            ((the binteger 3632)
             joint
             "cameraB"
             )
            ((the binteger 3692)
             joint
             "camera"
             )
            ((the binteger 3780)
             joint
             "cameraB"
             )
            ((the binteger 3818)
             joint
             "camera"
             )
            ((the binteger 4188)
             joint
             "cameraB"
             )
            ((the binteger 4324)
             joint
             "camera"
             )
            ((the binteger 4462)
             joint
             "cameraB"
             )
            ((the binteger 4542) joint "camera")
            )
          )
         )
       ((79)
        (when arg0
         (let* ((s5-3 (-> obj tasks))
                (s4-0 (method-of-object s5-3 save-reminder))
                (a1-18 (new 'stack-no-clear 'event-message-block))
                )
          (set! (-> a1-18 from) pp)
          (set! (-> a1-18 num-params) 2)
          (set! (-> a1-18 message) 'query)
          (set! (-> a1-18 param 0) (the-as uint 'pickup))
          (set! (-> a1-18 param 1) (the-as uint 6))
          (s4-0
           s5-3
           (the int (the-as float (send-event-function *target* a1-18)))
           1
           )
          )
         (close-status! (-> obj tasks) (task-status need-introduction))
         )
        (new 'static 'spool-anim
         :name "sage-village3-introduction-dark-eco"
         :index 4
         :parts 9
         :command-list
         '(
           ((the binteger 111)
             joint
             "cameraB"
             )
           ((the binteger 189)
            joint
            "camera"
            )
           ((the binteger 455)
            joint
            "cameraB"
            )
           ((the binteger 638)
            joint
            "camera"
            )
           ((the binteger 753) joint "cameraB")
           )
         )
        )
       (else
        (if arg0
         (close-specific-task!
          (game-task snow-ram)
          (task-status need-introduction)
          )
         )
        (new 'static 'spool-anim
         :name "sage-village3-introduction-rams"
         :index 6
         :parts 6
         :command-list
         '(
           ((the binteger 155)
             joint
             "cameraB"
             )
           ((the binteger 370) joint "camera")
           )
         )
        )
       )
      )
    ((4 5)
     (set! (-> obj skippable) #t)
     (let ((s4-1 (+ (get-reminder (-> obj tasks) 0) 1)))
      (if (< (the-as uint 1) (the-as uint s4-1))
       (set! s4-1 0)
       )
      (countdown (s3-0 2)
       (cond
        ((zero? s4-1)
         (if
          (!=
           (get-task-status (game-task cave-dark-crystals))
           (task-status need-reminder)
           )
          (set! s4-1 1)
          )
         )
        (else
         (if
          (not
           (or
            (=
             (get-task-status (game-task snow-ram))
             (task-status need-reminder)
             )
            (=
             (get-task-status (game-task snow-ram))
             (task-status need-reminder-a)
             )
            )
           )
          (set! s4-1 0)
          )
         )
        )
       )
      (if arg0
       (save-reminder (-> obj tasks) s4-1 0)
       )
      (if (zero? s4-1)
       (new 'static 'spool-anim
        :name "sage-village3-reminder-1-dark-eco"
        :index 5
        :parts 2
        :command-list '()
        )
       (new 'static 'spool-anim
        :name "sage-village3-reminder-1-rams"
        :index 7
        :parts 3
        :command-list '()
        )
       )
      )
     )
    (else
     (if arg0
      (format
       0
       "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
       (-> obj name)
       (task-status->string
        (the-as task-status (current-status (-> obj tasks)))
        )
       )
      )
     (get-art-elem obj)
     )
    )
   )
  )

;; definition for method 31 of type sage-villagec
(defmethod get-art-elem sage-villagec ((obj sage-villagec))
  (-> obj draw art-group data 3)
  )

;; definition for method 47 of type sage-villagec
;; INFO: Return type mismatch basic vs symbol.
(defmethod target-above-threshold? sage-villagec ((obj sage-villagec))
  (the-as
   symbol
   (and
    *target*
    (< (-> (target-pos 0) x) 4575232.0)
    (< -14323302.0 (-> (target-pos 0) z))
    )
   )
  )

;; definition for method 43 of type sage-villagec
(defmethod TODO-RENAME-43 sage-villagec ((obj sage-villagec))
  (when
   (TODO-RENAME-10
    (-> obj ambient)
    (new 'stack-no-clear 'vector)
    9000
    122880.0
    obj
    )
   (let* ((v1-3 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
          (v1-4 (the-as number (logior #x3f800000 v1-3)))
          (f0-2 (+ -1.0 (the-as float v1-4)))
          )
    (cond
     ((< 0.875 f0-2)
      (dummy-11 (-> obj ambient) "SAGELP31" #f (-> obj root-override trans))
      )
     ((< 0.75 f0-2)
      (if
       (not
        (closed?
         (-> obj tasks)
         (game-task cave-dark-crystals)
         (task-status need-reminder)
         )
        )
       (dummy-11 (-> obj ambient) "SAGELP32" #f (-> obj root-override trans))
       )
      )
     ((< 0.625 f0-2)
      (if (nonzero? (get-task-status (game-task citadel-sage-green)))
       (dummy-11 (-> obj ambient) "SAGELP33" #f (-> obj root-override trans))
       )
      )
     ((< 0.5 f0-2)
      (dummy-11 (-> obj ambient) "SAGELP34" #f (-> obj root-override trans))
      )
     ((< 0.375 f0-2)
      (dummy-11 (-> obj ambient) "SAGELP35" #f (-> obj root-override trans))
      )
     ((< 0.25 f0-2)
      (dummy-11 (-> obj ambient) "SAGELP36" #f (-> obj root-override trans))
      )
     ((< 0.125 f0-2)
      (if (nonzero? (get-task-status (game-task citadel-sage-green)))
       (dummy-11 (-> obj ambient) "SAGELP37" #f (-> obj root-override trans))
       )
      )
     ((!=
       (get-task-status (game-task citadel-sage-green))
       (task-status need-resolution)
       )
      (dummy-11 (-> obj ambient) "SAGELP38" #f (-> obj root-override trans))
      )
     )
    )
   )
  )

;; failed to figure out what this is:
(defstate idle (sage-villagec)
  :virtual #t
  :trans
  (behavior ()
   (case (get-task-status (game-task village3-button)) 
    (((task-status need-introduction))
      (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-0 from) self)
       (set! (-> a1-0 num-params) 0)
       (set! (-> a1-0 message) 'play-anim)
       (send-event-function self a1-0)
       )
      )
    )
   ((-> (method-of-type process-taskable idle) trans))
   (none)
   )
  )

;; failed to figure out what this is:
(defstate play-anim (sage-villagec)
  :virtual #t
  :exit
  (behavior ()
   (set! (-> self draw bounds w) 10240.0)
   (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-0 from) self)
    (set! (-> a1-0 num-params) 0)
    (set! (-> a1-0 message) 'end-mode)
    (send-event-function (-> self assistant extra process) a1-0)
    )
   (let ((a0-2 (handle->process (-> self evilbro))))
    (if a0-2
     (deactivate a0-2)
     )
    )
   (let ((a0-6 (handle->process (-> self evilsis))))
    (if a0-6
     (deactivate a0-6)
     )
    )
   ((-> (method-of-type process-taskable play-anim) exit))
   (none)
   )
  )

;; definition for method 39 of type sage-villagec
(defmethod should-display? sage-villagec ((obj sage-villagec))
  (cond
   ((not
     (closed?
      (-> obj tasks)
      (game-task village3-button)
      (task-status need-hint)
      )
     )
    (dummy-33 obj)
    #f
    )
   ((sages-kidnapped?)
    (dummy-33 obj)
    #f
    )
   (else
    #t
    )
   )
  )

;; definition for method 48 of type sage-villagec
(defmethod draw-npc-shadow sage-villagec ((obj sage-villagec))
  (let ((v1-1 (-> obj draw shadow-ctrl)))
   (cond
    ((and
      (-> obj draw shadow)
      (zero? (-> obj draw cur-lod))
      (logtest? (-> obj draw status) 8)
      )
     (set! (-> v1-1 settings flags) (logand -9 (-> v1-1 settings flags)))
     (set! (-> v1-1 settings flags) (logand -5 (-> v1-1 settings flags)))
     (set! (-> v1-1 settings bot-plane w) 20480.0)
     (let ((a0-8 v1-1))
      (set! (-> a0-8 settings flags) (logand -33 (-> a0-8 settings flags)))
      )
     0
     (dummy-14 v1-1)
     )
    (else
     (logior! (-> v1-1 settings flags) 32)
     0
     )
    )
   )
  (none)
  )

;; definition for method 11 of type sage-villagec
(defmethod copy-defaults! sage-villagec ((obj sage-villagec) (arg0 res-lump))
  (dummy-40 obj arg0 *sage-village3-sg* 3 40 (new 'static 'vector :w 8192.0) 5)
  (set! (-> obj tasks) (get-task-control (game-task cave-dark-crystals)))
  (set! (-> obj assistant) (entity-actor-lookup arg0 'alt-actor 0))
  (set! (-> obj evilbro) (the-as handle #f))
  (set! (-> obj evilsis) (the-as handle #f))
  (set! (-> obj sound-flava) (the-as uint 5))
  (dummy-42 obj)
  (none)
  )
