;;-*-Lisp-*-
(in-package goal)

;; definition of type spider-egg
(deftype spider-egg (process-drawable)
  ((root-override collide-shape-moving         :offset        112)
   (notify-actor  entity-actor                 :offset-assert 176)
   (broken-look   lod-set              :inline :offset-assert 180)
   )
  :heap-base #x70
  :method-count-assert 20
  :size-assert         #xd5
  :flag-assert         #x14007000d5
  )

;; definition for method 3 of type spider-egg
(defmethod inspect spider-egg ((obj spider-egg))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tnotify-actor: ~A~%" (-> obj notify-actor))
  (format #t "~T~Tbroken-look: #<lod-set @ #x~X>~%" (-> obj broken-look))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "spider-egg"
     :bounds
     (new 'static 'vector :y 4096.0 :w 8192.0)
     :max-lod 2
     :version #x6
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) -1)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 81920.0)
  (set! (-> v1-1 mgeo 1) (the-as uint 2))
  (set! (-> v1-1 lod-dist 1) 163840.0)
  (set! (-> v1-1 mgeo 2) (the-as uint 3))
  (set! (-> v1-1 lod-dist 2) 4095996000.0)
  (set! *spider-egg-unbroken-sg* v1-1)
  )

;; failed to figure out what this is:
(let
  ((v1-2
    (new 'static 'skeleton-group
     :art-group-name "spider-egg"
     :bounds
     (new 'static 'vector :y 4096.0 :w 8192.0)
     :max-lod 2
     :version #x6
     )
    )
   )
  (set! (-> v1-2 jgeo) 5)
  (set! (-> v1-2 janim) -1)
  (set! (-> v1-2 mgeo 0) (the-as uint 6))
  (set! (-> v1-2 lod-dist 0) 81920.0)
  (set! (-> v1-2 mgeo 1) (the-as uint 7))
  (set! (-> v1-2 lod-dist 1) 163840.0)
  (set! (-> v1-2 mgeo 2) (the-as uint 8))
  (set! (-> v1-2 lod-dist 2) 4095996000.0)
  (set! *spider-egg-broken-sg* v1-2)
  )

;; failed to figure out what this is:
(defstate spider-egg-idle (spider-egg)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (v0-0 none))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((= v1-0 'touch)
                     (dummy-55
                      (-> self root-override)
                      arg0
                      (-> arg3 param 0)
                      0.7
                      6144.0
                      16384.0
                      )
                     )
                    ((= v1-0 'can-spawn?)
                     (return (the-as object #t))
                     v0-0
                     )
                    ((= v1-0 'notify-spawned)
                     (go spider-egg-hatch)
                     )
                    ((= v1-0 'attack)
                     (go spider-egg-die)
                     )
                    )
     )
    )
   )
  :enter
  (behavior ((arg0 symbol))
   (set! (-> self state-time) (-> *display* base-frame-counter))
   (none)
   )
  :code
  (behavior ((arg0 symbol))
   (let ((f30-0 (rand-vu-float-range 0.8 1.2)))
    (cond
     (arg0
      (ja-channel-set! 1)
      (let ((gp-1 (-> self skel root-channel 0)))
       (set!
        (-> gp-1 frame-group)
        (the-as art-joint-anim (-> self draw art-group data 9))
        )
       (set!
        (-> gp-1 param 0)
        (the
         float
         (+
          (->
           (the-as art-joint-anim (-> self draw art-group data 9))
           data
           0
           length
           )
          -1
          )
         )
        )
       (set! (-> gp-1 param 1) f30-0)
       (set!
        (-> gp-1 frame-num)
        (rand-vu-float-range
         0.0
         (the float (+ (-> (if (> (-> self skel active-channels) 0)
                            (-> self skel root-channel 0 frame-group)
                            )
                        data
                        0
                        length
                        )
                     -1
                     )
          )
         )
        )
       (joint-control-channel-group!
        gp-1
        (the-as art-joint-anim (-> self draw art-group data 9))
        num-func-seek!
        )
       )
      (until (ja-done? 0)
       (suspend)
       (let ((a0-5 (-> self skel root-channel 0)))
        (set!
         (-> a0-5 param 0)
         (the float (+ (-> a0-5 frame-group data 0 length) -1))
         )
        (set! (-> a0-5 param 1) f30-0)
        (joint-control-channel-group-eval!
         a0-5
         (the-as art-joint-anim #f)
         num-func-seek!
         )
        )
       )
      )
     (else
      (ja-channel-push! 1 60)
      )
     )
    (while #t
     (let ((gp-2 (rand-vu-int-range 2 6)))
      (dotimes (s5-0 gp-2)
       (let ((a0-9 (-> self skel root-channel 0)))
        (set!
         (-> a0-9 frame-group)
         (the-as art-joint-anim (-> self draw art-group data 9))
         )
        (set!
         (-> a0-9 param 0)
         (the
          float
          (+
           (->
            (the-as art-joint-anim (-> self draw art-group data 9))
            data
            0
            length
            )
           -1
           )
          )
         )
        (set! (-> a0-9 param 1) f30-0)
        (set! (-> a0-9 frame-num) 0.0)
        (joint-control-channel-group!
         a0-9
         (the-as art-joint-anim (-> self draw art-group data 9))
         num-func-seek!
         )
        )
       (until (ja-done? 0)
        (suspend)
        (let ((a0-10 (-> self skel root-channel 0)))
         (set!
          (-> a0-10 param 0)
          (the float (+ (-> a0-10 frame-group data 0 length) -1))
          )
         (set! (-> a0-10 param 1) f30-0)
         (joint-control-channel-group-eval!
          a0-10
          (the-as art-joint-anim #f)
          num-func-seek!
          )
         )
        )
       )
      )
     (ja-channel-push! 1 30)
     (let ((a0-13 (-> self skel root-channel 0)))
      (set!
       (-> a0-13 frame-group)
       (the-as art-joint-anim (-> self draw art-group data 13))
       )
      (set!
       (-> a0-13 param 0)
       (the
        float
        (+
         (->
          (the-as art-joint-anim (-> self draw art-group data 13))
          data
          0
          length
          )
         -1
         )
        )
       )
      (set! (-> a0-13 param 1) 1.0)
      (set! (-> a0-13 frame-num) 0.0)
      (joint-control-channel-group!
       a0-13
       (the-as art-joint-anim (-> self draw art-group data 13))
       num-func-seek!
       )
      )
     (until (ja-done? 0)
      (suspend)
      (let ((a0-14 (-> self skel root-channel 0)))
       (set!
        (-> a0-14 param 0)
        (the float (+ (-> a0-14 frame-group data 0 length) -1))
        )
       (set! (-> a0-14 param 1) 1.0)
       (joint-control-channel-group-eval!
        a0-14
        (the-as art-joint-anim #f)
        num-func-seek!
        )
       )
      )
     (ja-channel-push! 1 30)
     )
    )
   (none)
   )
  :post
  (the-as (function none :behavior spider-egg) ja-post)
  )

;; failed to figure out what this is:
(defstate spider-egg-hatch (spider-egg)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (v0-0 symbol))
   (case arg2 
    (('can-spawn?)
      (return (the-as object #f))
      v0-0
      )
    )
   )
  :code
  (behavior ()
   (dummy-18 self)
   (logclear! (-> self mask) (process-mask actor-pause))
   (dummy-48 (-> self root-override))
   (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-0
     (let ((t9-3 (method-of-type part-tracker activate)))
      (t9-3
       (the-as part-tracker gp-0)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-0
      part-tracker-init
      (-> *part-group-id-table* 324)
      -1
      #f
      #f
      #f
      (-> self root-override trans)
      )
     (-> gp-0 ppointer)
     )
    )
   (dummy-11 (-> self draw) (-> self broken-look))
   (ja-channel-push! 1 60)
   (let ((a0-8 (-> self skel root-channel 0)))
    (set!
     (-> a0-8 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 10))
     )
    (set!
     (-> a0-8 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 10))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-8 param 1) 1.0)
    (set! (-> a0-8 frame-num) 0.0)
    (joint-control-channel-group!
     a0-8
     (the-as art-joint-anim (-> self draw art-group data 10))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-9 (-> self skel root-channel 0)))
     (set!
      (-> a0-9 param 0)
      (the float (+ (-> a0-9 frame-group data 0 length) -1))
      )
     (set! (-> a0-9 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-9
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (logior! (-> self draw status) 2)
   (until (not (-> self child))
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior spider-egg) ja-post)
  )

;; failed to figure out what this is:
(defstate spider-egg-die (spider-egg)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (v0-0 symbol))
   (case arg2 
    (('can-spawn?)
      (return (the-as object #f))
      v0-0
      )
    )
   )
  :code
  (behavior ()
   (dummy-18 self)
   (logclear! (-> self mask) (process-mask actor-pause))
   (when (-> self notify-actor)
    (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-0 from) self)
     (set! (-> a1-0 num-params) 1)
     (set! (-> a1-0 message) 'notify)
     (set! (-> a1-0 param 0) (the-as uint 'die))
     (let ((t9-1 send-event-function)
           (v1-9 (-> self notify-actor))
           )
      (t9-1 (if v1-9
             (-> v1-9 extra process)
             )
       a1-0
       )
      )
     )
    )
   (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-0
     (let ((t9-3 (method-of-type part-tracker activate)))
      (t9-3
       (the-as part-tracker gp-0)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-0
      part-tracker-init
      (-> *part-group-id-table* 325)
      -1
      #f
      #f
      #f
      (-> self root-override trans)
      )
     (-> gp-0 ppointer)
     )
    )
   (dummy-11 (-> self draw) (-> self broken-look))
   (ja-channel-push! 1 30)
   (dummy-48 (-> self root-override))
   (let ((a0-9 (-> self skel root-channel 0)))
    (set!
     (-> a0-9 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 12))
     )
    (set!
     (-> a0-9 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 12))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-9 param 1) 1.0)
    (set! (-> a0-9 frame-num) 0.0)
    (joint-control-channel-group!
     a0-9
     (the-as art-joint-anim (-> self draw art-group data 12))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-10 (-> self skel root-channel 0)))
     (set!
      (-> a0-10 param 0)
      (the float (+ (-> a0-10 frame-group data 0 length) -1))
      )
     (set! (-> a0-10 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-10
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (logior! (-> self draw status) 2)
   (until (not (-> self child))
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior spider-egg) ja-post)
  )

;; definition for method 11 of type spider-egg
;; Used lq/sq
(defmethod copy-defaults! spider-egg ((obj spider-egg) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask enemy) (-> obj mask)))
  (set! (-> obj mask) (logior (process-mask attackable) (-> obj mask)))
  (let
   ((s4-0
     (new
      'process
      'collide-shape-moving
      obj
      (collide-list-enum usually-hit-by-player)
      )
     )
    )
   (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s4-0 reaction) default-collision-reaction)
   (set! (-> s4-0 no-reaction) nothing)
   (let ((s3-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
    (set! (-> s3-0 prim-core collide-as) (the-as uint 256))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set! (-> s3-0 prim-core offense) 1)
    (set-vector! (-> s3-0 local-sphere) 0.0 2048.0 0.0 3686.4)
    )
   (dummy-46 s4-0)
   (set! (-> s4-0 nav-radius) 4096.0)
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *spider-egg-unbroken-sg* '())
  (let ((a0-10 (-> obj broken-look))
        (t9-7 (method-of-type lod-set dummy-9))
        )
   *spider-egg-broken-sg*
   (-> obj draw art-group)
   (-> obj entity)
   (t9-7 a0-10)
   )
  (set-vector! (-> obj root-override scale) 0.4 0.4 0.4 1.0)
  (if (not (dummy-60 (-> obj root-override) 12288.0 40960.0 #t (the-as uint 1)))
   (go process-drawable-art-error "no ground")
   )
  (set!
   (-> obj root-override trans y)
   (+ -409.6 (-> obj root-override trans y))
   )
  (let ((s4-1 (new 'stack-no-clear 'vector)))
   (set! (-> s4-1 quad) (-> obj root-override surface-normal quad))
   (+! (-> s4-1 x) (rand-vu-float-range -0.2 0.2))
   (+! (-> s4-1 z) (rand-vu-float-range -0.2 0.2))
   (vector-normalize! s4-1 1.0)
   (quaternion-axis-angle!
    (-> obj root-override quat)
    (-> s4-1 x)
    (-> s4-1 y)
    (-> s4-1 z)
    (rand-vu-float-range 0.0 65536.0)
    )
   )
  (dummy-47 (-> obj root-override))
  (nav-mesh-connect obj (-> obj root-override) (the-as nav-control #f))
  (if (> (entity-actor-count arg0 'alt-actor) 0)
   (set! (-> obj notify-actor) (entity-actor-lookup arg0 'alt-actor 0))
   (set! (-> obj notify-actor) #f)
   )
  (go spider-egg-idle #t)
  (none)
  )
