;;-*-Lisp-*-
(in-package goal)

;; definition of type geologist
(deftype geologist (process-taskable)
  ()
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x17c
  :flag-assert         #x350110017c
  )

;; definition for method 3 of type geologist
(defmethod inspect geologist ((obj geologist))
  (let ((t9-0 (method-of-type process-taskable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "geologist"
     :bounds (new 'static 'vector :w 16384.0)
     :max-lod 2
     :version #x6
     :shadow 4
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 5)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 81920.0)
  (set! (-> v1-1 mgeo 1) (the-as uint 2))
  (set! (-> v1-1 lod-dist 1) 163840.0)
  (set! (-> v1-1 mgeo 2) (the-as uint 3))
  (set! (-> v1-1 lod-dist 2) 4095996000.0)
  (set! *geologist-sg* v1-1)
  )

;; definition for method 32 of type geologist
(defmethod play-anim! geologist ((obj geologist) (arg0 symbol))
  (with-pp
   (set! (-> obj talk-message) (the-as uint 260))
   (case (current-status (-> obj tasks)) 
    ((2 3)
      (when arg0
       (close-status! (-> obj tasks) (task-status need-introduction))
       (close-specific-task!
        (game-task village2-geologist-money)
        (task-status need-introduction)
        )
       )
      (new 'static 'spool-anim
       :name "geologist-introduction"
       :index 6
       :parts 13
       :command-list
       '(
         (0
           want-levels
           village2
           rolling
           )
         ((the binteger 199)
          joint
          "cameraB"
          )
         ((the binteger 325)
          joint
          "camera"
          )
         ((the binteger 520)
          alive
          "racer-2"
          )
         ((the binteger 544)
          joint
          "cameraB"
          )
         ((the binteger 546)
          dead
          "racer-2"
          )
         ((the binteger 809)
          joint
          "camera"
          )
         ((the binteger 1031)
          joint
          "cameraB"
          )
         ((the binteger 1229) joint "camera")
         )
       )
      )
    ((5)
     (set! (-> obj skippable) #t)
     (cond
      ((closed?
        (-> obj tasks)
        (game-task rolling-moles)
        (task-status need-reward-speech)
        )
       (new 'static 'spool-anim
        :name "geologist-reminder-money"
        :index 8
        :parts 2
        :command-list '()
        )
       )
      ((closed?
        (-> obj tasks)
        (game-task village2-geologist-money)
        (task-status need-reward-speech)
        )
       (new 'static 'spool-anim
        :name "geologist-reminder-moles"
        :index 7
        :parts 3
        :command-list '()
        )
       )
      ((zero? (get-reminder (-> obj tasks) 0))
       (if arg0
        (save-reminder (-> obj tasks) 1 0)
        )
       (new 'static 'spool-anim
        :name "geologist-reminder-moles"
        :index 7
        :parts 3
        :command-list '()
        )
       )
      (else
       (if arg0
        (save-reminder (-> obj tasks) 0 0)
        )
       (new 'static 'spool-anim
        :name "geologist-reminder-money"
        :index 8
        :parts 2
        :command-list '()
        )
       )
      )
     )
    ((6)
     (if (not arg0)
      (set! (-> obj will-talk) #t)
      )
     (case (current-task (-> obj tasks)) 
      ((54)
        (when arg0
         (set!
          (-> obj cell-for-task)
          (the-as game-task (current-task (-> obj tasks)))
          )
         (close-current! (-> obj tasks))
         )
        (new 'static 'spool-anim
         :name "geologist-resolution-moles"
         :index 9
         :parts 3
         :command-list '()
         )
        )
      (else
       (cond
        (arg0
         (set!
          (-> obj cell-for-task)
          (the-as game-task (current-task (-> obj tasks)))
          )
         (close-current! (-> obj tasks))
         (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-10 from) pp)
          (set! (-> a1-10 num-params) 2)
          (set! (-> a1-10 message) 'get-pickup)
          (set! (-> a1-10 param 0) (the-as uint 5))
          (set!
           (-> a1-10 param 1)
           (the-as uint (- (-> *GAME-bank* money-task-inc)))
           )
          (send-event-function *target* a1-10)
          )
         )
        (else
         (set! (-> obj talk-message) (the-as uint 282))
         )
        )
       (new 'static 'spool-anim
        :name "geologist-resolution-money"
        :index 10
        :parts 2
        :command-list '()
        )
       )
      )
     )
    (else
     (if arg0
      (format
       0
       "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
       (-> obj name)
       (task-status->string
        (the-as task-status (current-status (-> obj tasks)))
        )
       )
      )
     (-> obj draw art-group data 5)
     )
    )
   )
  )

;; definition for method 31 of type geologist
(defmethod get-3rd-art-elem geologist ((obj geologist))
  (-> obj draw art-group data 5)
  )

;; definition for method 43 of type geologist
(defmethod TODO-RENAME-43 geologist ((obj geologist))
  (when
   (dummy-10 (-> obj ambient) (new 'stack-no-clear 'vector) 9000 122880.0 obj)
   (let* ((v1-3 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
          (v1-4 (the-as number (logior #x3f800000 v1-3)))
          (f0-2 (+ -1.0 (the-as float v1-4)))
          )
    (cond
     ((< 0.8888889 f0-2)
      (-> obj ambient)
      (let ((t9-2 (method-of-type ambient-control dummy-11)))
       "GEO-AM01"
       (-> obj root trans)
       (t9-2)
       )
      )
     ((< 0.7777778 f0-2)
      (when
       (not
        (closed?
         (-> obj tasks)
         (game-task rolling-moles)
         (task-status need-reminder)
         )
        )
       (-> obj ambient)
       (let ((t9-4 (method-of-type ambient-control dummy-11)))
        "GEO-AM02"
        (-> obj root trans)
        (t9-4)
        )
       )
      )
     ((< 0.6666667 f0-2)
      (-> obj ambient)
      (let ((t9-5 (method-of-type ambient-control dummy-11)))
       "GEO-AM03"
       (-> obj root trans)
       (t9-5)
       )
      )
     ((< 0.5555556 f0-2)
      (when
       (closed?
        (-> obj tasks)
        (game-task village2-geologist-money)
        (task-status need-introduction)
        )
       (-> obj ambient)
       (let ((t9-7 (method-of-type ambient-control dummy-11)))
        "GEO-AM04"
        (-> obj root trans)
        (t9-7)
        )
       )
      )
     ((< 0.44444445 f0-2)
      (-> obj ambient)
      (let ((t9-8 (method-of-type ambient-control dummy-11)))
       "GEO-AM05"
       (-> obj root trans)
       (t9-8)
       )
      )
     ((< 0.33333334 f0-2)
      (-> obj ambient)
      (let ((t9-9 (method-of-type ambient-control dummy-11)))
       "GEO-AM06"
       (-> obj root trans)
       (t9-9)
       )
      )
     ((< 0.22222222 f0-2)
      (when
       (not
        (closed?
         (-> obj tasks)
         (game-task rolling-moles)
         (task-status need-reminder)
         )
        )
       (-> obj ambient)
       (let ((t9-11 (method-of-type ambient-control dummy-11)))
        "GEO-AM07"
        (-> obj root trans)
        (t9-11)
        )
       )
      )
     ((< 0.11111111 f0-2)
      (-> obj ambient)
      (let ((t9-12 (method-of-type ambient-control dummy-11)))
       "GEO-LO02"
       (-> obj root trans)
       (t9-12)
       )
      )
     ((closed?
       (-> obj tasks)
       (game-task village2-geologist-money)
       (task-status need-resolution)
       )
      (-> obj ambient)
      (let ((t9-14 (method-of-type ambient-control dummy-11)))
       "GEO-AM08"
       (-> obj root trans)
       (t9-14)
       )
      )
     (else
      (-> obj ambient)
      (let ((t9-15 (method-of-type ambient-control dummy-11)))
       "GEO-LO01"
       (-> obj root trans)
       (t9-15)
       )
      )
     )
    )
   )
  (none)
  )

;; definition for method 11 of type geologist
(defmethod copy-defaults! geologist ((obj geologist) (arg0 res-lump))
  (dummy-40 obj arg0 *geologist-sg* 3 45 (new 'static 'vector :w 4096.0) 5)
  (set! (-> obj tasks) (get-task-control (game-task rolling-moles)))
  (set! (-> obj sound-flava) (the-as uint 16))
  (set! (-> obj draw light-index) (the-as uint 2))
  (dummy-42 obj)
  (none)
  )




