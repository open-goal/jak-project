;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(let ((v1-0 L93))
  (set! (-> v1-0 jgeo) 0)
  (set! (-> v1-0 janim) 2)
  (set! (-> v1-0 mgeo 0) (the-as uint 1))
  (set! (-> v1-0 lod-dist 0) 4095996000.0)
  (set! *lrocklrg-sg* v1-0)
  )

;; failed to figure out what this is:
(set! (-> *part-group-id-table* 553) L90)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2341) L88)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2340) L86)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2289) L84)

;; failed to figure out what this is:
(set! (-> *part-group-id-table* 554) L81)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2290) L79)

;; failed to figure out what this is:
(set! (-> *part-group-id-table* 555) L76)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2343) L74)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2342) L72)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2291) L70)

;; definition of type beach-rock
(deftype beach-rock (process-drawable)
  ((root-override collide-shape-moving      :offset        112)
   (trigger       basic                     :offset-assert 176)
   (movie-start   uint64                    :offset-assert 184)
   (part-falling  sparticle-launch-control  :offset-assert 192)
   (part-landing  sparticle-launch-control  :offset-assert 196)
   (prev-frame    float                     :offset-assert 200)
   )
  :heap-base #x60
  :method-count-assert 24
  :size-assert         #xcc
  :flag-assert         #x18006000cc
  (:methods
    (idle () none 20)
    (loading () none 21)
    (falling () none 22)
    (fallen () none 23)
    )
  )

;; definition for method 3 of type beach-rock
(defmethod inspect beach-rock ((obj beach-rock))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Ttrigger: ~A~%" (-> obj trigger))
  (format #t "~T~Tmovie-start: ~D~%" (-> obj movie-start))
  (format #t "~T~Tpart-falling: ~A~%" (-> obj part-falling))
  (format #t "~T~Tpart-landing: ~A~%" (-> obj part-landing))
  (format #t "~T~Tprev-frame: ~f~%" (-> obj prev-frame))
  obj
  )

;; definition for method 7 of type beach-rock
;; INFO: Return type mismatch none vs beach-rock.
(defmethod relocate beach-rock ((obj beach-rock) (arg0 int))
  (if (nonzero? (-> obj part-falling))
   (set!
    (-> obj part-falling)
    (the-as
     sparticle-launch-control
     (+ (the-as int (-> obj part-falling)) arg0)
     )
    )
   )
  (if (nonzero? (-> obj part-landing))
   (set!
    (-> obj part-landing)
    (the-as
     sparticle-launch-control
     (+ (the-as int (-> obj part-landing)) arg0)
     )
    )
   )
  (the-as
   beach-rock
   ((the-as
     (function process-drawable int none)
     (find-parent-method beach-rock 7)
     )
    obj
    arg0
    )
   )
  )

;; definition for method 10 of type beach-rock
(defmethod deactivate beach-rock ((obj beach-rock))
  (if (nonzero? (-> obj part-falling))
   ((method-of-object (-> obj part-falling) dummy-12))
   )
  (if (nonzero? (-> obj part-landing))
   ((method-of-object (-> obj part-landing) dummy-12))
   )
  ((the-as (function process-drawable none) (find-parent-method beach-rock 10))
   obj
   )
  (none)
  )

;; failed to figure out what this is:
(let ((gp-0 L69))
  (method-set! beach-rock 20 (the-as function gp-0))
  (set!
   (-> gp-0 event)
   (the-as (function process int symbol event-message-block object) L45)
   )
  (set! (-> gp-0 code) L42)
  )

;; failed to figure out what this is:
(let ((gp-1 L67))
  (method-set! beach-rock 21 (the-as function gp-1))
  (set!
   (-> gp-1 event)
   (-> (the-as state (method-of-type beach-rock idle)) event)
   )
  (set! (-> gp-1 code) L40)
  )

;; failed to figure out what this is:
(let ((gp-2 L57))
  (method-set! beach-rock 22 (the-as function gp-2))
  (set! (-> gp-2 trans) (the-as (function object) L21))
  (set! (-> gp-2 code) L7)
  (set! (-> gp-2 post) transform-post)
  )

;; failed to figure out what this is:
(let ((gp-3 L55))
  (method-set! beach-rock 23 (the-as function gp-3))
  (set! (-> gp-3 code) L6)
  (set! (-> gp-3 post) ja-post)
  )

;; definition for method 11 of type beach-rock
(defmethod dummy-method-11 beach-rock ((obj beach-rock) (arg0 object))
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (set! (-> obj align) (new 'process 'align-control obj))
  (set! (-> obj trigger) #f)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set!
   (-> obj part)
   (the-as
    sparticle-launch-control
    ((method-of-object (-> *part-group-id-table* 553) dummy-9))
    )
   )
  (set!
   (-> obj part-falling)
   (the-as
    sparticle-launch-control
    ((method-of-object (-> *part-group-id-table* 554) dummy-9))
    )
   )
  (set!
   (-> obj part-landing)
   (the-as
    sparticle-launch-control
    ((method-of-object (-> *part-group-id-table* 555) dummy-9))
    )
   )
  (set! (-> obj prev-frame) -1000.0)
  (set! (-> obj draw origin-joint-index) (the-as uint 4))
  (case (get-task-status (-> obj entity extra perm task)) 
   (((task-status invalid))
     (go (the-as (state none) (method-of-object obj fallen)))
     )
   (((task-status need-resolution))
    (let ((s5-0 (new 'stack-no-clear 'vector)))
     (ja-post)
     (vector<-cspace! s5-0 (-> obj node-list data 8))
     (birth-pickup-at-point
      s5-0
      6
      (the float (the-as int (-> obj entity extra perm task)))
      #f
      obj
      #f
      )
     )
    (go (the-as (state none) (method-of-object obj fallen)))
    )
   (else
    (go (the-as (state none) (method-of-object obj idle)))
    )
   )
  (none)
  )

;; definition of type lrocklrg
(deftype lrocklrg (beach-rock)
  ()
  :heap-base #x60
  :method-count-assert 24
  :size-assert         #xcc
  :flag-assert         #x18006000cc
  )

;; definition for method 3 of type lrocklrg
(defmethod inspect lrocklrg ((obj lrocklrg))
  (let ((t9-0 (method-of-type beach-rock inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition for method 11 of type lrocklrg
(defmethod dummy-method-11 lrocklrg ((obj lrocklrg) (arg0 object))
  (stack-size-set! (-> obj main-thread) 512)
  (let
   ((s4-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s4-0 reaction) default-collision-reaction)
   (set! (-> s4-0 no-reaction) nothing)
   (let
    ((s3-0
      (new
       'process
       'collide-shape-prim-mesh
       s4-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s3-0 prim-core collide-as) (the-as uint 1))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set! (-> s3-0 prim-core offense) 4)
    (set! (-> s3-0 transform-index) 4)
    (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 24576.0)
    )
   ((method-of-object s4-0 dummy-46))
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   ((method-of-object s4-0 dummy-50))
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *lrocklrg-sg* '())
  ((method-of-type beach-rock dummy-method-11) obj arg0)
  (none)
  )




