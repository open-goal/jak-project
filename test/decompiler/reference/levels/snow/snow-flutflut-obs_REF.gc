;;-*-Lisp-*-
(in-package goal)

;; definition of type flutflut-plat
(deftype flutflut-plat (plat)
  ((has-path?           symbol               :offset-assert 264)
   (plat-type           int32                :offset-assert 268)
   (rise-time           int32                :offset-assert 272)
   (fall-time           int32                :offset-assert 276)
   (part-ry             float                :offset-assert 280)
   (sync-starting-val   float                :offset-assert 284)
   (flutflut-button     entity-actor         :offset-assert 288)
   (appear-trans-top    vector       :inline :offset-assert 304)
   (appear-trans-bottom vector       :inline :offset-assert 320)
   (appear-quat-top     quaternion   :inline :offset-assert 336)
   (appear-quat-bottom  quaternion   :inline :offset-assert 352)
   (start-trans         vector       :inline :offset-assert 368)
   )
  :heap-base #x110
  :method-count-assert 33
  :size-assert         #x180
  :flag-assert         #x2101100180
  )

;; definition for method 3 of type flutflut-plat
(defmethod inspect flutflut-plat ((obj flutflut-plat))
  (let ((t9-0 (method-of-type plat inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Thas-path?: ~A~%" (-> obj has-path?))
  (format #t "~T~Tplat-type: ~D~%" (-> obj plat-type))
  (format #t "~T~Trise-time: ~D~%" (-> obj rise-time))
  (format #t "~T~Tfall-time: ~D~%" (-> obj fall-time))
  (format #t "~T~Tpart-ry: ~f~%" (-> obj part-ry))
  (format #t "~T~Tsync-starting-val: ~f~%" (-> obj sync-starting-val))
  (format #t "~T~Tflutflut-button: ~A~%" (-> obj flutflut-button))
  (format
   #t
   "~T~Tappear-trans-top: #<vector @ #x~X>~%"
   (-> obj appear-trans-top)
   )
  (format
   #t
   "~T~Tappear-trans-bottom: #<vector @ #x~X>~%"
   (-> obj appear-trans-bottom)
   )
  (format
   #t
   "~T~Tappear-quat-top: #<quaternion @ #x~X>~%"
   (-> obj appear-quat-top)
   )
  (format
   #t
   "~T~Tappear-quat-bottom: #<quaternion @ #x~X>~%"
   (-> obj appear-quat-bottom)
   )
  (format #t "~T~Tstart-trans: #<vector @ #x~X>~%" (-> obj start-trans))
  obj
  )

;; definition of type snow-button
(deftype snow-button (process-drawable)
  ((root-override    collide-shape-moving         :offset        112)
   (wiggled?         symbol                       :offset-assert 176)
   (timeout          uint64                       :offset-assert 184)
   (delay-til-wiggle uint64                       :offset-assert 192)
   (prev-button      entity-actor                 :offset-assert 200)
   (ticker           ticky                :inline :offset-assert 208)
   )
  :heap-base #x80
  :method-count-assert 20
  :size-assert         #xf0
  :flag-assert         #x14008000f0
  )

;; definition for method 3 of type snow-button
(defmethod inspect snow-button ((obj snow-button))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Twiggled?: ~A~%" (-> obj wiggled?))
  (format #t "~T~Ttimeout: ~D~%" (-> obj timeout))
  (format #t "~T~Tdelay-til-wiggle: ~D~%" (-> obj delay-til-wiggle))
  (format #t "~T~Tprev-button: ~A~%" (-> obj prev-button))
  (format #t "~T~Tticker: #<ticky @ #x~X>~%" (-> obj ticker))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-2
    (new 'static 'skeleton-group
     :art-group-name "flutflut-plat-small"
     :bounds
     (new 'static 'vector :y -2048.0 :w 16384.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-2 jgeo) 0)
  (set! (-> v1-2 janim) 2)
  (set! (-> v1-2 mgeo 0) (the-as uint 1))
  (set! (-> v1-2 lod-dist 0) 4095996000.0)
  (set! *flutflut-plat-small-sg* v1-2)
  )

;; failed to figure out what this is:
(let
  ((v1-3
    (new 'static 'skeleton-group
     :art-group-name "flutflut-plat-med"
     :bounds
     (new 'static 'vector :y -4096.0 :w 27648.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-3 jgeo) 0)
  (set! (-> v1-3 janim) 2)
  (set! (-> v1-3 mgeo 0) (the-as uint 1))
  (set! (-> v1-3 lod-dist 0) 4095996000.0)
  (set! *flutflut-plat-med-sg* v1-3)
  )

;; failed to figure out what this is:
(let
  ((v1-4
    (new 'static 'skeleton-group
     :art-group-name "flutflut-plat-large"
     :bounds (new 'static 'vector :w 36864.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-4 jgeo) 0)
  (set! (-> v1-4 janim) 2)
  (set! (-> v1-4 mgeo 0) (the-as uint 1))
  (set! (-> v1-4 lod-dist 0) 4095996000.0)
  (set! *flutflut-plat-large-sg* v1-4)
  )

;; failed to figure out what this is:
(let
  ((v1-5
    (new 'static 'skeleton-group
     :art-group-name "snow-button"
     :bounds (new 'static 'vector :w 17612.8)
     :version #x6
     )
    )
   )
  (set! (-> v1-5 jgeo) 0)
  (set! (-> v1-5 janim) -1)
  (set! (-> v1-5 mgeo 0) (the-as uint 1))
  (set! (-> v1-5 lod-dist 0) 4095996000.0)
  (set! *snow-button-sg* v1-5)
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 516)
  (new 'static 'sparticle-launch-group
   :length 2
   :duration #xbb8
   :linger-duration #x5dc
   :flags #x1
   :name "group-flutflut-plat-small"
   :launcher
   (new 'static 'inline-array sparticle-group-item 2
    (new 'static 'sparticle-group-item
     :launcher #x827
     :fade-after (meters 50.0)
     :falloff-to (meters 50.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x828
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2087)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 14
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 1.5
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef -8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xc
     :flags #x1
     :initial-valuef -8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xe
     :initial-valuef (the-as float #x5)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 5324.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 3686.4
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef -13.653334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x23
     :flags #x1
     :initial-valuef -16.383999
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x19)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x100)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2088)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 19
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200f00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 3.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef -12288.0
     :random-rangef 24576.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -5120.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xc
     :flags #x1
     :initial-valuef -12288.0
     :random-rangef 24576.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 10240.0
     :random-rangef 6144.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef -40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x22
     :flags #x1
     :initial-valuef -0.42666668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.32
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -0.13653333
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x96)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 517)
  (new 'static 'sparticle-launch-group
   :length 2
   :duration #xbb8
   :linger-duration #x5dc
   :flags #x1
   :name "group-flutflut-plat-med"
   :launcher
   (new 'static 'inline-array sparticle-group-item 2
    (new 'static 'sparticle-group-item
     :launcher #x829
     :fade-after (meters 50.0)
     :falloff-to (meters 50.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x82a
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2089)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 14
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 3.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -10240.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xe
     :initial-valuef (the-as float #x5)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 5324.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 3686.4
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 13.653334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x23
     :flags #x1
     :initial-valuef -16.383999
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x19)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x100)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 12288.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2090)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 19
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200f00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 6.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -9216.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 12288.0
     :random-rangef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x22
     :flags #x1
     :initial-valuef -0.42666668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.32
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -0.13653333
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x96)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 12288.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 518)
  (new 'static 'sparticle-launch-group
   :length 2
   :duration #xbb8
   :linger-duration #x5dc
   :flags #x1
   :name "group-flutflut-plat-large"
   :launcher
   (new 'static 'inline-array sparticle-group-item 2
    (new 'static 'sparticle-group-item
     :launcher #x82b
     :fade-after (meters 50.0)
     :falloff-to (meters 50.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x82c
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2091)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 14
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 4.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef -8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -6144.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xc
     :flags #x1
     :initial-valuef -24576.0
     :random-rangef 49152.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xe
     :initial-valuef (the-as float #x5)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 5324.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 3686.4
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef -13.653334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x23
     :flags #x1
     :initial-valuef -16.383999
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x19)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x100)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef 5461.3335
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2092)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 19
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200f00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 8.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef -8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -5120.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xc
     :flags #x1
     :initial-valuef -24576.0
     :random-rangef 49152.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 12288.0
     :random-rangef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef -40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x22
     :flags #x1
     :initial-valuef -0.42666668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.32
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -0.13653333
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x96)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef 5461.3335
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(defstate snow-button-up-idle (snow-button)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (v0-2 none))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((or (= v1-0 'touch) (= v1-0 'attack) (= v1-0 'bonk))
                     (when
                      (and
                       (= (-> arg0 type) target)
                       (logtest?
                        (-> *target* control root-prim prim-core action)
                        #x4000
                        )
                       (>=
                        10649.6
                        (vector-vector-xz-distance
                         (-> self root-override trans)
                         (target-pos 0)
                         )
                        )
                       )
                      (close-specific-task!
                       (game-task snow-ball)
                       (task-status need-hint)
                       )
                      (logclear! (-> self mask) (process-mask actor-pause))
                      (process-entity-status!
                       self
                       (entity-perm-status bit-3)
                       #t
                       )
                      (go snow-button-activate)
                      )
                     )
                    ((= v1-0 'query)
                     (return (the-as object #f))
                     v0-2
                     )
                    )
     )
    )
   )
  :code
  (behavior ()
   (let ((gp-0 (-> self skel root-channel 0)))
    (joint-control-channel-group-eval!
     gp-0
     (the-as art-joint-anim (-> self draw art-group data 2))
     num-func-identity
     )
    (set! (-> gp-0 frame-num) 0.0)
    )
   (transform-post)
   (logior! (-> self mask) (process-mask sleep-code))
   (suspend)
   0
   (none)
   )
  )

;; failed to figure out what this is:
(defstate snow-button-activate (snow-button)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (v0-0 none))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((= v1-0 'untrigger)
                     (go snow-button-deactivate)
                     )
                    ((= v1-0 'query)
                     (return (the-as object #t))
                     v0-0
                     )
                    )
     )
    )
   )
  :enter
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (set! (-> self wiggled?) #f)
   (sleep (-> self ticker) (-> self timeout))
   (when (-> self prev-button)
    (let* ((v1-6 (-> self prev-button))
           (a0-1 (if v1-6
                  (-> v1-6 extra process)
                  )
            )
           )
     (when a0-1
      (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
       (set! (-> a1-1 from) self)
       (set! (-> a1-1 num-params) 0)
       (set! (-> a1-1 message) 'untrigger)
       (send-event-function a0-1 a1-1)
       )
      )
     )
    )
   (send-to-all-after (-> self link) 'trigger)
   (none)
   )
  :trans
  (behavior ()
   (if (completed? (-> self ticker))
    (go snow-button-deactivate)
    )
   (when (reached-delay? (-> self ticker) (-> self delay-til-wiggle))
    (when (not (-> self wiggled?))
     (set! (-> self wiggled?) #t)
     (send-to-all-after (-> self link) 'bounce)
     )
    )
   (rider-trans)
   (none)
   )
  :code
  (behavior ()
   (sound-play-by-name
    (static-sound-name "prec-button1")
    (new-sound-id)
    1024
    -1524
    0
    (the-as uint 1)
    (the-as vector #t)
    )
   (let ((a0-2 (-> self skel root-channel 0)))
    (set!
     (-> a0-2 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 2))
     )
    (set!
     (-> a0-2 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 2))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-2 param 1) 1.0)
    (set! (-> a0-2 frame-num) 0.0)
    (joint-control-channel-group!
     a0-2
     (the-as art-joint-anim (-> self draw art-group data 2))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-3 (-> self skel root-channel 0)))
     (set!
      (-> a0-3 param 0)
      (the float (+ (-> a0-3 frame-group data 0 length) -1))
      )
     (set! (-> a0-3 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (logior! (-> self mask) (process-mask sleep-code))
   (suspend)
   0
   (none)
   )
  :post
  (the-as (function none :behavior snow-button) rider-post)
  )

;; failed to figure out what this is:
(defstate snow-button-deactivate (snow-button)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (local-vars (v0-0 symbol))
   (case arg2 
    (('query)
      (return (the-as object #f))
      v0-0
      )
    )
   )
  :exit
  (behavior ()
   (logior! (-> self mask) (process-mask actor-pause))
   (process-entity-status! self (entity-perm-status bit-3) #f)
   (none)
   )
  :trans
  (the-as (function none :behavior snow-button) rider-trans)
  :code
  (behavior ()
   (send-to-all-after (-> self link) 'untrigger)
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (until
    (>=
     (- (-> *display* base-frame-counter) (the-as int (-> self state-time)))
     180
     )
    (suspend)
    )
   (let ((a0-2 (-> self skel root-channel 0)))
    (set!
     (-> a0-2 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 3))
     )
    (set!
     (-> a0-2 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 3))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-2 param 1) 1.0)
    (set! (-> a0-2 frame-num) 0.0)
    (joint-control-channel-group!
     a0-2
     (the-as art-joint-anim (-> self draw art-group data 3))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-3 (-> self skel root-channel 0)))
     (set!
      (-> a0-3 param 0)
      (the float (+ (-> a0-3 frame-group data 0 length) -1))
      )
     (set! (-> a0-3 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-3
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (go snow-button-up-idle)
   (none)
   )
  :post
  (the-as (function none :behavior snow-button) rider-post)
  )

;; definition for method 11 of type snow-button
(defmethod copy-defaults! snow-button ((obj snow-button) (arg0 res-lump))
  (let
   ((s4-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s4-0 reaction) default-collision-reaction)
   (set! (-> s4-0 no-reaction) nothing)
   (dummy-29 s4-0 1)
   (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 3) 0)))
    (set! (-> s3-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 3))
    (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 17612.8)
    (dummy-46 s4-0)
    (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 1))))
     (set! (-> s2-0 prim-core collide-as) (the-as uint 2048))
     (set! (-> s2-0 collide-with) (the-as uint 16))
     (set! (-> s2-0 prim-core offense) 0)
     (set! (-> s2-0 transform-index) 4)
     (set-vector! (-> s2-0 local-sphere) 0.0 0.0 0.0 10649.6)
     )
    (dummy-28 s3-0)
    (let
     ((s2-1
       (new
        'process
        'collide-shape-prim-mesh
        s4-0
        (the-as uint 0)
        (the-as uint 1)
        )
       )
      )
     (set! (-> s2-1 prim-core collide-as) (the-as uint 2048))
     (set! (-> s2-1 collide-with) (the-as uint 16))
     (set! (-> s2-1 prim-core action) (the-as uint 3))
     (set! (-> s2-1 prim-core offense) 4)
     (set! (-> s2-1 transform-index) 4)
     (set-vector! (-> s2-1 local-sphere) 0.0 2048.0 0.0 11468.8)
     )
    (dummy-28 s3-0)
    (let
     ((s2-2
       (new
        'process
        'collide-shape-prim-mesh
        s4-0
        (the-as uint 1)
        (the-as uint 2)
        )
       )
      )
     (set! (-> s2-2 prim-core collide-as) (the-as uint 2048))
     (set! (-> s2-2 collide-with) (the-as uint 16))
     (set! (-> s2-2 prim-core action) (the-as uint 3))
     (set! (-> s2-2 prim-core offense) 4)
     (set! (-> s2-2 transform-index) 3)
     (set-vector! (-> s2-2 local-sphere) 0.0 0.0 0.0 17612.8)
     )
    (dummy-28 s3-0)
    )
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (dummy-14 obj *snow-button-sg* '())
  (logior! (-> obj skel status) 1)
  (set!
   (-> obj timeout)
   (the-as
    uint
    (the int (* 300.0 (res-lump-float arg0 'timeout :default 10.0)))
    )
   )
  (set! (-> obj delay-til-wiggle) (+ (-> obj timeout) -120))
  (if (> (entity-actor-count arg0 'alt-actor) 0)
   (set! (-> obj prev-button) (entity-actor-lookup arg0 'alt-actor 0))
   (set! (-> obj prev-button) #f)
   )
  (ja-channel-set! 1)
  (let ((s5-1 (-> obj skel root-channel 0)))
   (joint-control-channel-group-eval!
    s5-1
    (the-as art-joint-anim (-> obj draw art-group data 2))
    num-func-identity
    )
   (set! (-> s5-1 frame-num) 0.0)
   )
  (transform-post)
  (go snow-button-up-idle)
  (none)
  )

;; definition for method 26 of type flutflut-plat
;; INFO: Return type mismatch int vs none.
;; Used lq/sq
(defmethod dummy-26 flutflut-plat ((obj flutflut-plat))
  (let ((t9-0 (method-of-type plat dummy-26)))
   (t9-0 obj)
   )
  (if (zero? (-> obj link))
   (set! (-> obj link) (new 'process 'actor-link-info obj))
   )
  (set! (-> obj sound-id) (new-sound-id))
  (set! (-> obj plat-type) (res-lump-value (-> obj entity) 'mode int))
  (set!
   (-> obj flutflut-button)
   (entity-actor-lookup (-> obj entity) 'alt-actor 0)
   )
  (let ((f0-0 (res-lump-float (-> obj entity) 'rotoffset)))
   (if (!= f0-0 0.0)
    (quaternion-rotate-y!
     (-> obj root-override quat)
     (-> obj root-override quat)
     f0-0
     )
    )
   )
  (set!
   (-> obj has-path?)
   (and
    (zero? (logand (-> obj path flags) (path-control-flag not-found)))
    (> (-> obj sync period) 0)
    )
   )
  (when (nonzero? (-> obj plat-type))
   (cond
    ((-> obj has-path?)
     (set! (-> obj sync-starting-val) (get-phase-offset (-> obj sync)))
     (sync-now! (-> obj sync) (-> obj sync-starting-val))
     (eval-path-curve!
      (-> obj path)
      (-> obj appear-trans-top)
      (if (logtest? (-> obj fact options) 8)
       (get-current-phase (-> obj sync))
       (get-current-phase-with-mirror (-> obj sync))
       )
      'interp
      )
     )
    (else
     (set! (-> obj appear-trans-top quad) (-> obj root-override trans quad))
     )
    )
   (set! (-> obj appear-trans-bottom quad) (-> obj appear-trans-top quad))
   (set!
    (-> obj appear-trans-bottom y)
    (+ -286720.0 (-> obj appear-trans-bottom y))
    )
   (quaternion-copy! (-> obj appear-quat-top) (-> obj root-override quat))
   (let ((v1-33 (res-lump-value (-> obj entity) 'extra-id uint128)))
    (set!
     (-> obj rise-time)
     (the int (* 300.0 (+ 0.6 (* 0.15 (the float v1-33)))))
     )
    )
   (set! (-> obj fall-time) 180)
   )
  (none)
  )

;; definition for method 27 of type flutflut-plat
;; INFO: Return type mismatch symbol vs int.
(defmethod TODO-RENAME-27 flutflut-plat ((obj flutflut-plat))
  (if
   (and
    (-> obj entity)
    (logtest? (-> obj entity extra perm status) (entity-perm-status complete))
    )
   (return (the-as int #t))
   )
  (when (task-complete? *game-info* (-> obj entity extra perm task))
   (process-entity-status! obj (entity-perm-status complete) #t)
   (return (the-as int #t))
   )
  (the-as int #f)
  )

;; failed to figure out what this is:
(defstate plat-startup (flutflut-plat)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'trigger)
                    (when
                     (or
                      (!= (-> self plat-type) 1)
                      (not
                       (and
                        (-> self entity)
                        (logtest?
                         (-> self entity extra perm status)
                         (entity-perm-status complete)
                         )
                        )
                       )
                      )
                     (logclear! (-> self mask) (process-mask actor-pause))
                     (go flutflut-plat-appear)
                     )
                    )
     )
    )
   )
  :code
  (behavior ()
   (cond
    ((and
      (= (-> self plat-type) 1)
      (-> self entity)
      (logtest?
       (-> self entity extra perm status)
       (entity-perm-status complete)
       )
      )
     (set! (-> self basetrans quad) (-> self appear-trans-top quad))
     (go elevator-idle-at-cave)
     )
    ((or (= (-> self plat-type) 1) (= (-> self plat-type) 2))
     (let* ((v1-11 (-> self flutflut-button))
            (a0-9 (if v1-11
                   (-> v1-11 extra process)
                   )
             )
            )
      (if (and a0-9 (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-0 from) self)
                     (set! (-> a1-0 num-params) 0)
                     (set! (-> a1-0 message) 'query)
                     (send-event-function a0-9 a1-0)
                     )
           )
       (go flutflut-plat-appear)
       (go flutflut-plat-hidden-idle)
       )
      )
     )
    (else
     (let ((t9-4 (-> (method-of-type plat plat-startup) code)))
      (if t9-4
       ((the-as (function none :behavior plat) t9-4))
       )
      )
     )
    )
   (none)
   )
  )

;; failed to figure out what this is:
(defstate flutflut-plat-hidden-idle (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'trigger)
                    (logclear! (-> self mask) (process-mask actor-pause))
                    (go flutflut-plat-appear)
                    )
     )
    )
   )
  :trans
  (behavior ()
   (if (and (= (-> self plat-type) 1) (TODO-RENAME-27 self))
    (go flutflut-plat-appear)
    )
   (none)
   )
  :code
  (behavior ()
   (logior! (-> self draw status) 2)
   (dummy-48 (-> self root-override))
   (set! (-> self root-override trans quad) (-> self appear-trans-top quad))
   (transform-post)
   (logior! (-> self mask) (process-mask sleep-code))
   (suspend)
   0
   (none)
   )
  )

;; failed to figure out what this is:
(defstate flutflut-plat-appear (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (or (= v1-0 'bonk) (= v1-0 'bounce))
                    (dummy-22 self)
                    )
     )
    )
   )
  :enter
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (logclear! (-> self mask) (process-mask actor-pause))
   (set! (-> self draw status) (logand -3 (-> self draw status)))
   ((method-of-object (-> self root-override) dummy-49))
   (set! (-> self basetrans quad) (-> self appear-trans-bottom quad))
   (let ((s5-0 (new 'stack-no-clear 'vector))
         (gp-0 (new 'stack-no-clear 'quaternion))
         )
    (let ((f30-0 (rand-vu-float-range 0.0 65536.0)))
     (set-vector! s5-0 (cos f30-0) 0.0 (sin f30-0) 1.0)
     )
    (quaternion-vector-angle!
     (-> self appear-quat-bottom)
     s5-0
     (rand-vu-float-range -21845.334 21845.334)
     )
    (quaternion-axis-angle!
     gp-0
     0.0
     1.0
     0.0
     (rand-vu-float-range -32768.0 32768.0)
     )
    (quaternion*!
     (-> self appear-quat-bottom)
     (-> self appear-quat-bottom)
     gp-0
     )
    )
   (none)
   )
  :exit
  (behavior ()
   (logior! (-> self mask) (process-mask actor-pause))
   (none)
   )
  :trans
  (behavior ()
   (plat-trans)
   (let*
    ((f0-1
      (fmin
       1.0
       (/
        (the
         float
         (- (-> *display* base-frame-counter) (the-as int (-> self state-time)))
         )
        (the float (-> self rise-time))
        )
       )
      )
     (f0-2 (- 1.0 f0-1))
     (f0-3 (* f0-2 f0-2))
     (f30-0 (- 1.0 f0-3))
     )
    (vector-lerp!
     (-> self basetrans)
     (-> self appear-trans-bottom)
     (-> self appear-trans-top)
     f30-0
     )
    (quaternion-slerp!
     (-> self root-override quat)
     (-> self appear-quat-bottom)
     (-> self appear-quat-top)
     f30-0
     )
    (set-vector! (-> self draw color-mult) f30-0 f30-0 f30-0 1.0)
    (when (>= f30-0 1.0)
     (dummy-22 self)
     (rider-post)
     (cond
      ((= (-> self plat-type) 1)
       (if
        (and
         (-> self entity)
         (logtest?
          (-> self entity extra perm status)
          (entity-perm-status complete)
          )
         )
        (go elevator-idle-at-cave)
        (go-virtual plat-idle)
        )
       )
      ((-> self has-path?)
       (sync-now! (-> self sync) (-> self sync-starting-val))
       (go-virtual plat-path-active)
       )
      (else
       (go-virtual plat-idle)
       )
      )
     )
    )
   (dummy-20 self)
   (none)
   )
  :code
  (the-as (function none :behavior flutflut-plat) anim-loop)
  :post
  (the-as (function none :behavior flutflut-plat) rider-post)
  )

;; failed to figure out what this is:
(defstate plat-idle (flutflut-plat)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((or (= v1-0 'bonk) (= v1-0 'bounce))
                     (dummy-22 self)
                     )
                    ((= v1-0 'untrigger)
                     (go flutflut-plat-hide)
                     )
                    )
     )
    )
   )
  :enter
  (behavior ()
   (let ((t9-0 (-> (method-of-type plat plat-idle) enter)))
    (if t9-0
     (t9-0)
     )
    )
   (logclear! (-> self mask) (process-mask actor-pause))
   (none)
   )
  :exit
  (behavior ()
   (logior! (-> self mask) (process-mask actor-pause))
   (let ((t9-0 (-> (method-of-type plat plat-idle) exit)))
    (if t9-0
     (t9-0)
     )
    )
   (none)
   )
  :trans
  (behavior ()
   (let ((t9-0 (-> (method-of-type plat plat-idle) trans)))
    (if t9-0
     (t9-0)
     )
    )
   (if (and (= (-> self plat-type) 1) (TODO-RENAME-27 self))
    (go elevator-idle-at-cave)
    )
   (none)
   )
  )

;; failed to figure out what this is:
(defstate plat-path-active (flutflut-plat)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((or (= v1-0 'bonk) (= v1-0 'bounce))
                     (dummy-22 self)
                     )
                    ((= v1-0 'untrigger)
                     (go flutflut-plat-hide)
                     )
                    )
     )
    )
   )
  :enter
  (behavior ()
   (let ((t9-0 (-> (method-of-type plat plat-path-active) enter)))
    (if t9-0
     (t9-0)
     )
    )
   (if
    (or
     (!= (-> self plat-type) 1)
     (not
      (and
       (-> self entity)
       (logtest?
        (-> self entity extra perm status)
        (entity-perm-status complete)
        )
       )
      )
     )
    (logclear! (-> self mask) (process-mask actor-pause))
    )
   (none)
   )
  :exit
  (behavior ()
   (logior! (-> self mask) (process-mask actor-pause))
   (let ((t9-0 (-> (method-of-type plat plat-path-active) exit)))
    (if t9-0
     (t9-0)
     )
    )
   (none)
   )
  )

;; failed to figure out what this is:
(defstate flutflut-plat-hide (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (= v1-0 'bonk)
                    (dummy-22 self)
                    )
     )
    )
   )
  :enter
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (logclear! (-> self mask) (process-mask actor-pause))
   (set!
    (-> self root-override root-prim prim-core action)
    (logand -3 (-> self root-override root-prim prim-core action))
    )
   (set! (-> self start-trans quad) (-> self root-override trans quad))
   (let ((s5-0 (new 'stack-no-clear 'vector))
         (gp-0 (new 'stack-no-clear 'quaternion))
         )
    (let ((f30-0 (rand-vu-float-range 0.0 65536.0)))
     (set-vector! s5-0 (cos f30-0) 0.0 (sin f30-0) 1.0)
     )
    (quaternion-vector-angle!
     (-> self appear-quat-bottom)
     s5-0
     (rand-vu-float-range -21845.334 21845.334)
     )
    (quaternion-axis-angle!
     gp-0
     0.0
     1.0
     0.0
     (rand-vu-float-range -32768.0 32768.0)
     )
    (quaternion*!
     (-> self appear-quat-bottom)
     (-> self appear-quat-bottom)
     gp-0
     )
    )
   (none)
   )
  :exit
  (behavior ()
   (logior! (-> self mask) (process-mask actor-pause))
   (logior! (-> self root-override root-prim prim-core action) 2)
   (none)
   )
  :trans
  (behavior ()
   (plat-trans)
   (let*
    ((f0-1
      (fmin
       1.0
       (/
        (the
         float
         (- (-> *display* base-frame-counter) (the-as int (-> self state-time)))
         )
        (the float (-> self fall-time))
        )
       )
      )
     (f30-0 (* f0-1 f0-1))
     )
    (vector-lerp!
     (-> self basetrans)
     (-> self start-trans)
     (-> self appear-trans-bottom)
     f30-0
     )
    (quaternion-slerp!
     (-> self root-override quat)
     (-> self appear-quat-top)
     (-> self appear-quat-bottom)
     f30-0
     )
    (let ((f0-3 (- 1.0 f30-0)))
     (set-vector! (-> self draw color-mult) f0-3 f0-3 f0-3 1.0)
     )
    (when (>= f30-0 1.0)
     (rider-post)
     (go flutflut-plat-hidden-idle)
     )
    )
   (dummy-20 self)
   (none)
   )
  :code
  (the-as (function none :behavior flutflut-plat) anim-loop)
  :post
  (the-as (function none :behavior flutflut-plat) rider-post)
  )

;; failed to figure out what this is:
(defstate elevator-idle-at-cave (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (cond
                    ((= v1-0 'bonk)
                     (dummy-22 self)
                     )
                    ((= v1-0 'bounce)
                     (if
                      (not
                       (and
                        (-> self entity)
                        (logtest?
                         (-> self entity extra perm status)
                         (entity-perm-status complete)
                         )
                        )
                       )
                      (dummy-22 self)
                      )
                     )
                    ((= v1-0 'ridden)
                     (if
                      (or
                       (not *target*)
                       (zero?
                        (logand
                         (-> *target* control root-prim prim-core action)
                         #x4000
                         )
                        )
                       )
                      (go elevator-travel-to-fort)
                      )
                     )
                    )
     )
    )
   )
  :enter
  (behavior ()
   (set! (-> self path-pos) 0.0)
   (eval-path-curve! (-> self path) (-> self basetrans) 0.0 'interp)
   (none)
   )
  :trans
  (behavior ()
   (plat-trans)
   (dummy-20 self)
   (none)
   )
  :code
  (the-as (function none :behavior flutflut-plat) anim-loop)
  :post
  (the-as (function none :behavior flutflut-plat) plat-post)
  )

;; failed to figure out what this is:
(defstate elevator-travel-to-fort (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (or (= v1-0 'bonk) (= v1-0 'bounce))
                    (dummy-22 self)
                    )
     )
    )
   )
  :trans
  (behavior ()
   (when (= (-> self path-pos) 1.0)
    (dummy-22 self)
    (go elevator-idle-at-fort)
    )
   (set!
    (-> self path-pos)
    (seek
     (-> self path-pos)
     1.0
     (* 0.06666667 (-> *display* seconds-per-frame))
     )
    )
   (eval-path-curve!
    (-> self path)
    (-> self basetrans)
    (-> self path-pos)
    'interp
    )
   (plat-trans)
   (dummy-20 self)
   (none)
   )
  :code
  (the-as (function none :behavior flutflut-plat) anim-loop)
  :post
  (the-as (function none :behavior flutflut-plat) plat-post)
  )

;; failed to figure out what this is:
(defstate elevator-idle-at-fort (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (or (= v1-0 'bonk) (= v1-0 'bounce))
                    (dummy-22 self)
                    )
     )
    )
   )
  :enter
  (behavior ()
   (set! (-> self path-pos) 1.0)
   (eval-path-curve! (-> self path) (-> self basetrans) 1.0 'interp)
   (none)
   )
  :trans
  (behavior ()
   (when *target*
    (if
     (and
      (>= 798720.0 (-> (target-pos 0) y))
      (not
       (and
        (logtest? (-> *target* control unknown-surface00 flags) 2048)
        (zero? (logand (-> *target* control status) 1))
        )
       )
      )
     (go elevator-travel-to-cave)
     )
    )
   (plat-trans)
   (dummy-20 self)
   (none)
   )
  :code
  (the-as (function none :behavior flutflut-plat) anim-loop)
  :post
  (the-as (function none :behavior flutflut-plat) plat-post)
  )

;; failed to figure out what this is:
(defstate elevator-travel-to-cave (flutflut-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (or (= v1-0 'bonk) (= v1-0 'bounce))
                    (dummy-22 self)
                    )
     )
    )
   )
  :trans
  (behavior ()
   (when (= (-> self path-pos) 0.0)
    (dummy-22 self)
    (go elevator-idle-at-cave)
    )
   (set!
    (-> self path-pos)
    (seek
     (-> self path-pos)
     0.0
     (* 0.06666667 (-> *display* seconds-per-frame))
     )
    )
   (eval-path-curve!
    (-> self path)
    (-> self basetrans)
    (-> self path-pos)
    'interp
    )
   (plat-trans)
   (dummy-20 self)
   (none)
   )
  :code
  (the-as (function none :behavior flutflut-plat) anim-loop)
  :post
  (the-as (function none :behavior flutflut-plat) plat-post)
  )

;; definition of type flutflut-plat-small
(deftype flutflut-plat-small (flutflut-plat)
  ()
  :heap-base #x110
  :method-count-assert 33
  :size-assert         #x180
  :flag-assert         #x2101100180
  )

;; definition for method 3 of type flutflut-plat-small
(defmethod inspect flutflut-plat-small ((obj flutflut-plat-small))
  (let ((t9-0 (method-of-type flutflut-plat inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition of type flutflut-plat-med
(deftype flutflut-plat-med (flutflut-plat)
  ()
  :heap-base #x110
  :method-count-assert 33
  :size-assert         #x180
  :flag-assert         #x2101100180
  )

;; definition for method 3 of type flutflut-plat-med
(defmethod inspect flutflut-plat-med ((obj flutflut-plat-med))
  (let ((t9-0 (method-of-type flutflut-plat inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition of type flutflut-plat-large
(deftype flutflut-plat-large (flutflut-plat)
  ()
  :heap-base #x110
  :method-count-assert 33
  :size-assert         #x180
  :flag-assert         #x2101100180
  )

;; definition for method 3 of type flutflut-plat-large
(defmethod inspect flutflut-plat-large ((obj flutflut-plat-large))
  (let ((t9-0 (method-of-type flutflut-plat inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition for method 23 of type flutflut-plat-small
(defmethod TODO-RENAME-23 flutflut-plat-small ((obj flutflut-plat-small))
  *flutflut-plat-small-sg*
  )

;; definition for method 25 of type flutflut-plat-small
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod TODO-RENAME-25 flutflut-plat-small ((obj flutflut-plat-small))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 516) obj)))
   (set! (-> obj part) v0-0)
   (the-as sparticle-launch-group v0-0)
   )
  )

;; definition for method 20 of type flutflut-plat-small
(defmethod dummy-20 flutflut-plat-small ((obj flutflut-plat-small))
  (when (nonzero? (-> obj part))
   (set!
    (-> *part-id-table* 2087 init-specs 12 initial-valuef)
    (-> obj part-ry)
    )
   (set!
    (-> *part-id-table* 2088 init-specs 17 initial-valuef)
    (-> obj part-ry)
    )
   (dummy-11 (-> obj part) (-> obj root-override trans))
   )
  (none)
  )

;; definition for method 26 of type flutflut-plat-small
;; INFO: Return type mismatch float vs none.
(defmethod dummy-26 flutflut-plat-small ((obj flutflut-plat-small))
  (let ((t9-0 (method-of-type flutflut-plat dummy-26)))
   (t9-0 obj)
   )
  (set!
   (-> obj part-ry)
   (+ 16384.0 (quaternion-y-angle (-> obj root-override quat)))
   )
  (none)
  )

;; definition for method 24 of type flutflut-plat-small
;; INFO: Return type mismatch int vs none.
(defmethod dummy-24 flutflut-plat-small ((obj flutflut-plat-small))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 3))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 0)
    (set-vector! (-> s4-0 local-sphere) 0.0 -2048.0 0.0 16384.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )

;; definition for method 23 of type flutflut-plat-med
(defmethod TODO-RENAME-23 flutflut-plat-med ((obj flutflut-plat-med))
  *flutflut-plat-med-sg*
  )

;; definition for method 25 of type flutflut-plat-med
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod TODO-RENAME-25 flutflut-plat-med ((obj flutflut-plat-med))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 517) obj)))
   (set! (-> obj part) v0-0)
   (the-as sparticle-launch-group v0-0)
   )
  )

;; definition for method 24 of type flutflut-plat-med
;; INFO: Return type mismatch int vs none.
(defmethod dummy-24 flutflut-plat-med ((obj flutflut-plat-med))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 3))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 0)
    (set-vector! (-> s4-0 local-sphere) 0.0 -4096.0 0.0 27648.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )

;; definition for method 23 of type flutflut-plat-large
(defmethod TODO-RENAME-23 flutflut-plat-large ((obj flutflut-plat-large))
  *flutflut-plat-large-sg*
  )

;; definition for method 25 of type flutflut-plat-large
;; INFO: Return type mismatch sparticle-launch-control vs sparticle-launch-group.
(defmethod TODO-RENAME-25 flutflut-plat-large ((obj flutflut-plat-large))
  (let ((v0-0 (create-launch-control (-> *part-group-id-table* 518) obj)))
   (set! (-> obj part) v0-0)
   (the-as sparticle-launch-group v0-0)
   )
  )

;; definition for method 20 of type flutflut-plat-large
(defmethod dummy-20 flutflut-plat-large ((obj flutflut-plat-large))
  (when (nonzero? (-> obj part))
   (set!
    (-> *part-id-table* 2091 init-specs 12 initial-valuef)
    (-> obj part-ry)
    )
   (set!
    (-> *part-id-table* 2092 init-specs 17 initial-valuef)
    (-> obj part-ry)
    )
   (dummy-11 (-> obj part) (-> obj root-override trans))
   )
  (none)
  )

;; definition for method 26 of type flutflut-plat-large
;; INFO: Return type mismatch float vs none.
(defmethod dummy-26 flutflut-plat-large ((obj flutflut-plat-large))
  (let ((t9-0 (method-of-type flutflut-plat dummy-26)))
   (t9-0 obj)
   )
  (set!
   (-> obj part-ry)
   (+ 16384.0 (quaternion-y-angle (-> obj root-override quat)))
   )
  (none)
  )

;; definition for method 24 of type flutflut-plat-large
;; INFO: Return type mismatch int vs none.
(defmethod dummy-24 flutflut-plat-large ((obj flutflut-plat-large))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 3))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 0)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 36864.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  0
  (none)
  )




