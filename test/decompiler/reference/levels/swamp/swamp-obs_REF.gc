;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 289)
  (new 'static 'sparticle-launch-group
   :length 3
   :duration #x5
   :linger-duration #x5dc
   :flags #x1
   :name "group-swamp-spike-up"
   :launcher
   (new 'static 'inline-array sparticle-group-item 3
    (new 'static 'sparticle-group-item
     :launcher #x52d
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x52e
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x52f
     :fade-after (meters 60.0)
     :falloff-to (meters 60.0)
     )
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1325)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200000)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x2
     :initial-valuef -8192.0
     :random-rangef (the-as float #x2)
     :random-multf 8192.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 3072.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 6144.0
     :random-rangef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 64.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 48.0
     :random-rangef 24.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 48.0
     :random-rangef 8.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 27.306667
     :random-rangef 40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef 40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -0.13653333
     :random-rangef -0.27306667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x1c2)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x32
     :initial-valuef (the-as float #x1e)
     :random-rangef (the-as float #x12b)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x33
     :flags #x6
     :initial-valuef (the-as float #x530)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 12743.111
     :random-rangef 3640.889
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef -32657.281
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1328)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.32
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1326)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200000)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x2
     :initial-valuef -8192.0
     :random-rangef (the-as float #x2)
     :random-multf 8192.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef -3072.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 6144.0
     :random-rangef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 32.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 36.0
     :random-rangef 18.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 24.0
     :random-rangef 4.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 27.306667
     :random-rangef 40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef 40.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef 0.13653333
     :random-rangef 0.27306667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x1c2)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x32
     :initial-valuef (the-as float #x1e)
     :random-rangef (the-as float #x12b)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x33
     :flags #x6
     :initial-valuef (the-as float #x530)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 16384.0
     :random-rangef 3640.889
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef -32657.281
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1327)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 23
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201d00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 8.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x2
     :initial-valuef -8192.0
     :random-rangef (the-as float #x2)
     :random-multf 8192.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 1024.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 409.6
     :random-rangef 819.2
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 64.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 48.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 48.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 218.45334
     :random-rangef 109.22667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -13.653334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.96
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x96)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x30 :flags #x1 :random-multf 1.0)
    (new 'static 'sp-field-init-spec
     :field #x31
     :flags #x5
     :sym 'check-water-level-drop
     )
    (new 'static 'sp-field-init-spec
     :field #x32
     :initial-valuef (the-as float #x186)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x33
     :flags #x6
     :initial-valuef (the-as float #x531)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 5461.3335
     :random-rangef 3640.889
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3f
     :flags #x1
     :initial-valuef -32657.281
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 290)
  (new 'static 'sparticle-launch-group
   :length 2
   :duration #x5
   :linger-duration #x5dc
   :flags #x1
   :name "group-swamp-spike-down"
   :launcher
   (new 'static 'inline-array sparticle-group-item 2
    (new 'static 'sparticle-group-item
     :launcher #x52d
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x52e
     :fade-after (meters 120.0)
     :falloff-to (meters 120.0)
     )
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; definition of type swamp-spike
(deftype swamp-spike (process-drawable)
  ((root-override collide-shape         :offset        112)
   (sync          sync-info     :inline :offset-assert 176)
   (open-gate     symbol                :offset-assert 184)
   (dangerous     symbol                :offset-assert 188)
   )
  :heap-base #x50
  :method-count-assert 21
  :size-assert         #xc0
  :flag-assert         #x15005000c0
  (:methods
    (init! (_type_) symbol 20)
    )
  )

;; definition for method 3 of type swamp-spike
(defmethod inspect swamp-spike ((obj swamp-spike))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tsync: #<sync-info @ #x~X>~%" (-> obj sync))
  (format #t "~T~Topen-gate: ~A~%" (-> obj open-gate))
  (format #t "~T~Tdangerous: ~A~%" (-> obj dangerous))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-7
    (new 'static 'skeleton-group
     :art-group-name "swamp-spike"
     :bounds
     (new 'static 'vector :y 20480.0 :w 24576.0)
     :max-lod 1
     :longest-edge (meters 2.5)
     :version #x6
     )
    )
   )
  (set! (-> v1-7 jgeo) 0)
  (set! (-> v1-7 janim) 3)
  (set! (-> v1-7 mgeo 0) (the-as uint 1))
  (set! (-> v1-7 lod-dist 0) 81920.0)
  (set! (-> v1-7 mgeo 1) (the-as uint 2))
  (set! (-> v1-7 lod-dist 1) 4095996000.0)
  (set! *swamp-spike-sg* v1-7)
  )

;; definition for function swamp-spike-default-event-handler
(defbehavior
  swamp-spike-default-event-handler swamp-spike
  ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2 
   (('touch)
     (when (-> self dangerous)
      (when
       ((method-of-type touching-shapes-entry prims-touching?)
        (the-as touching-shapes-entry (-> arg3 param 0))
        (the-as collide-shape-moving (-> self root-override))
        (the-as uint 1)
        )
       (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-2 from) self)
        (set! (-> a1-2 num-params) 2)
        (set! (-> a1-2 message) 'attack)
        (set! (-> a1-2 param 0) (-> arg3 param 0))
        (set! (-> a1-2 param 1) (the-as uint (new 'static 'attack-info)))
        (send-event-function arg0 a1-2)
        )
       )
      )
     )
   )
  )

;; definition for function swamp-spike-set-particle-rotation-callback
;; INFO: Return type mismatch int vs none.
(defun swamp-spike-set-particle-rotation-callback ((arg0 part-tracker))
  (let* ((v1-0 (the-as object (-> arg0 userdata)))
         (f0-1
          (+
           -65314.562
           (quaternion-y-angle
            (-> (the-as (pointer swamp-spike) v1-0) 0 root-override quat)
            )
           )
          )
         )
   (set! (-> *part-id-table* 1325 init-specs 20 initial-valuef) f0-1)
   (set! (-> *part-id-table* 1326 init-specs 20 initial-valuef) f0-1)
   (set! (-> *part-id-table* 1327 init-specs 21 initial-valuef) f0-1)
   )
  0
  (none)
  )

;; definition for function swamp-spike-post
(defbehavior swamp-spike-post swamp-spike ()
  (transform-post)
  (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
   (set! (-> a1-0 to) (the-as process 1))
   (set! (-> a1-0 from) (the-as process *touching-list*))
   (if (dummy-40 (-> self root-override) a1-0)
    (dummy-45 (-> self root-override))
    )
   )
  (none)
  )

;; failed to figure out what this is:
(defstate swamp-spike-idle (swamp-spike)
  :event
  swamp-spike-default-event-handler
  :code
  (behavior ()
   (set! (-> self dangerous) #f)
   (let ((gp-0 (new 'stack-no-clear 'vector)))
    (new 'stack-no-clear 'vector)
    (vector-z-quaternion! gp-0 (-> self root-override quat))
    (set! (-> gp-0 w) (- (vector-dot gp-0 (-> self root-override trans))))
    (while #t
     (set!
      (-> self state-time)
      (the-as seconds (-> *display* base-frame-counter))
      )
     (let ((v1-10 (-> self skel root-channel 0)))
      (set!
       (-> v1-10 frame-group)
       (the-as art-joint-anim (-> self draw art-group data 3))
       )
      )
     (until (>= (get-current-phase (-> self sync)) 0.5)
      (let ((v1-13 (-> self skel root-channel 0)))
       (set! (-> v1-13 num-func) num-func-identity)
       (set! (-> v1-13 frame-num) 0.0)
       )
      (suspend)
      )
     (let
      ((s5-0
        (or
         (not *target*)
         (<
          204800.0
          (vector-vector-distance
           (-> self root-override trans)
           (-> *target* control trans)
           )
          )
         )
        )
       )
      (if
       (and
        (and
         *target*
         (>=
          61440.0
          (vector-vector-distance
           (-> self root-override trans)
           (-> *target* control trans)
           )
          )
         )
        *camera*
        )
       (set!
        s5-0
        (<
         (* (vector4-dot gp-0 (target-pos 0)) (vector4-dot gp-0 (camera-pos)))
         0.0
         )
        )
       )
      (cond
       (s5-0
        (until (< (get-current-phase (-> self sync)) 0.5)
         (suspend)
         )
        )
       (else
        (let ((a0-11 (-> self skel root-channel 0)))
         (set!
          (-> a0-11 frame-group)
          (the-as art-joint-anim (-> self draw art-group data 5))
          )
         (set!
          (-> a0-11 param 0)
          (the
           float
           (+
            (->
             (the-as art-joint-anim (-> self draw art-group data 5))
             data
             0
             length
             )
            -1
            )
           )
          )
         (set! (-> a0-11 param 1) 1.0)
         (set! (-> a0-11 frame-num) 0.0)
         (joint-control-channel-group!
          a0-11
          (the-as art-joint-anim (-> self draw art-group data 5))
          num-func-seek!
          )
         )
        (until (ja-done? 0)
         (suspend)
         (let ((a0-12 (-> self skel root-channel 0)))
          (set!
           (-> a0-12 param 0)
           (the float (+ (-> a0-12 frame-group data 0 length) -1))
           )
          (set! (-> a0-12 param 1) 1.0)
          (joint-control-channel-group-eval!
           a0-12
           (the-as art-joint-anim #f)
           num-func-seek!
           )
          )
         )
        (when (logtest? (-> self draw status) 8)
         (let ((s5-3 (get-process *default-dead-pool* part-tracker #x4000)))
          (when s5-3
           (let ((t9-11 (method-of-type part-tracker activate)))
            (t9-11
             (the-as part-tracker s5-3)
             self
             'part-tracker
             (the-as pointer #x70004000)
             )
            )
           (run-now-in-process
            s5-3
            part-tracker-init
            (-> *part-group-id-table* 289)
            -1
            swamp-spike-set-particle-rotation-callback
            (-> self ppointer)
            #f
            (-> self root-override trans)
            )
           (-> s5-3 ppointer)
           )
          )
         )
        (set! (-> self dangerous) #t)
        (let ((a0-17 (-> self skel root-channel 0)))
         (set!
          (-> a0-17 frame-group)
          (the-as art-joint-anim (-> self draw art-group data 3))
          )
         (set!
          (-> a0-17 param 0)
          (the
           float
           (+
            (->
             (the-as art-joint-anim (-> self draw art-group data 3))
             data
             0
             length
             )
            -1
            )
           )
          )
         (set! (-> a0-17 param 1) 1.0)
         (set! (-> a0-17 frame-num) 0.0)
         (joint-control-channel-group!
          a0-17
          (the-as art-joint-anim (-> self draw art-group data 3))
          num-func-seek!
          )
         )
        (until (ja-done? 0)
         (suspend)
         (let ((a0-18 (-> self skel root-channel 0)))
          (set!
           (-> a0-18 param 0)
           (the float (+ (-> a0-18 frame-group data 0 length) -1))
           )
          (set! (-> a0-18 param 1) 1.0)
          (joint-control-channel-group-eval!
           a0-18
           (the-as art-joint-anim #f)
           num-func-seek!
           )
          )
         )
        (set! (-> self dangerous) #f)
        (set!
         (-> self state-time)
         (the-as seconds (-> *display* base-frame-counter))
         )
        (let ((v1-96 (-> self skel root-channel 0)))
         (set! (-> v1-96 num-func) num-func-identity)
         (set!
          (-> v1-96 frame-num)
          (the float (+ (-> v1-96 frame-group data 0 length) -1))
          )
         )
        (until (< (get-current-phase (-> self sync)) 0.5)
         (suspend)
         )
        (when (logtest? (-> self draw status) 8)
         (let ((s5-4 (get-process *default-dead-pool* part-tracker #x4000)))
          (when s5-4
           (let ((t9-18 (method-of-type part-tracker activate)))
            (t9-18
             (the-as part-tracker s5-4)
             self
             'part-tracker
             (the-as pointer #x70004000)
             )
            )
           (run-now-in-process
            s5-4
            part-tracker-init
            (-> *part-group-id-table* 290)
            -1
            swamp-spike-set-particle-rotation-callback
            (-> self ppointer)
            #f
            (-> self root-override trans)
            )
           (-> s5-4 ppointer)
           )
          )
         )
        (let ((a0-29 (-> self skel root-channel 0)))
         (set!
          (-> a0-29 frame-group)
          (the-as art-joint-anim (-> self draw art-group data 4))
          )
         (set!
          (-> a0-29 param 0)
          (the
           float
           (+
            (->
             (the-as art-joint-anim (-> self draw art-group data 4))
             data
             0
             length
             )
            -1
            )
           )
          )
         (set! (-> a0-29 param 1) 1.0)
         (set! (-> a0-29 frame-num) 0.0)
         (joint-control-channel-group!
          a0-29
          (the-as art-joint-anim (-> self draw art-group data 4))
          num-func-seek!
          )
         )
        (until (ja-done? 0)
         (suspend)
         (let ((a0-30 (-> self skel root-channel 0)))
          (set!
           (-> a0-30 param 0)
           (the float (+ (-> a0-30 frame-group data 0 length) -1))
           )
          (set! (-> a0-30 param 1) 1.0)
          (joint-control-channel-group-eval!
           a0-30
           (the-as art-joint-anim #f)
           num-func-seek!
           )
          )
         )
        )
       )
      )
     )
    )
   (none)
   )
  :post
  swamp-spike-post
  )

;; failed to figure out what this is:
(defstate swamp-spike-gate-up (swampgate)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'trigger)
                    (let ((v0-0 #t))
                     (set! (-> self open-gate) v0-0)
                     v0-0
                     )
                    )
     )
    )
   )
  :code
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (let ((v1-4 (-> self skel root-channel 0)))
    (set!
     (-> v1-4 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 4))
     )
    )
   (until (-> self open-gate)
    (let ((v1-7 (-> self skel root-channel 0)))
     (set! (-> v1-7 num-func) num-func-identity)
     (set! (-> v1-7 frame-num) 0.0)
     )
    (suspend)
    )
   (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-0
     (let ((t9-1 (method-of-type part-tracker activate)))
      (t9-1
       (the-as part-tracker gp-0)
       self
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-0
      part-tracker-init
      (-> *part-group-id-table* 290)
      -1
      swamp-spike-set-particle-rotation-callback
      (-> self ppointer)
      #f
      (-> self root-override trans)
      )
     (-> gp-0 ppointer)
     )
    )
   (let ((a0-7 (-> self skel root-channel 0)))
    (set!
     (-> a0-7 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 4))
     )
    (set!
     (-> a0-7 param 0)
     (the
      float
      (+
       (->
        (the-as art-joint-anim (-> self draw art-group data 4))
        data
        0
        length
        )
       -1
       )
      )
     )
    (set! (-> a0-7 param 1) 1.0)
    (set! (-> a0-7 frame-num) 0.0)
    (joint-control-channel-group!
     a0-7
     (the-as art-joint-anim (-> self draw art-group data 4))
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (suspend)
    (let ((a0-8 (-> self skel root-channel 0)))
     (set!
      (-> a0-8 param 0)
      (the float (+ (-> a0-8 frame-group data 0 length) -1))
      )
     (set! (-> a0-8 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-8
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (go swamp-spike-gate-down)
   (none)
   )
  :post
  (the-as (function none :behavior swampgate) swamp-spike-post)
  )

;; failed to figure out what this is:
(defstate swamp-spike-gate-down (swampgate)
  :code
  (behavior ()
   (process-entity-status! self (entity-perm-status complete) #t)
   (dummy-18 self)
   (none)
   )
  :post
  (the-as (function none :behavior swampgate) swamp-spike-post)
  )

;; definition for method 20 of type swamp-spike
(defmethod init! swamp-spike ((obj swamp-spike))
  (let
   ((s5-0
     (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))
     )
    )
   (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
    (set! (-> s4-0 prim-core collide-as) (the-as uint 512))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 1))
    (set-vector! (-> s4-0 local-sphere) 0.0 20480.0 0.0 24576.0)
    (dummy-46 s5-0)
    (let
     ((s3-0
       (new
        'process
        'collide-shape-prim-mesh
        s5-0
        (the-as uint 0)
        (the-as uint 1)
        )
       )
      )
     (set! (-> s3-0 prim-core collide-as) (the-as uint 512))
     (set! (-> s3-0 collide-with) (the-as uint 16))
     (set! (-> s3-0 prim-core action) (the-as uint 1))
     (set! (-> s3-0 prim-core offense) 4)
     (set! (-> s3-0 transform-index) 3)
     (set-vector! (-> s3-0 local-sphere) 0.0 20480.0 0.0 24576.0)
     )
    (dummy-28 s4-0)
    (let
     ((s3-1
       (new
        'process
        'collide-shape-prim-mesh
        s5-0
        (the-as uint 1)
        (the-as uint 0)
        )
       )
      )
     (set! (-> s3-1 prim-core collide-as) (the-as uint 512))
     (set! (-> s3-1 collide-with) (the-as uint 16))
     (set! (-> s3-1 prim-core action) (the-as uint 1))
     (set! (-> s3-1 prim-core offense) 4)
     (set! (-> s3-1 transform-index) 3)
     (set-vector! (-> s3-1 local-sphere) 0.0 20480.0 0.0 24576.0)
     )
    (dummy-28 s4-0)
    )
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-override) s5-0)
   )
  (process-drawable-from-entity! obj (-> obj entity))
  (dummy-14 obj *swamp-spike-sg* '())
  (set! (-> obj draw origin-joint-index) (the-as uint 3))
  (load-params! (-> obj sync) obj (the-as uint 1500) 0.0 0.15 0.15)
  (set! (-> obj open-gate) #f)
  (set! (-> obj dangerous) #f)
  #f
  )

;; definition for method 11 of type swamp-spike
(defmethod copy-defaults! swamp-spike ((obj swamp-spike) (arg0 res-lump))
  (init! obj)
  (go swamp-spike-idle)
  (none)
  )

;; definition of type swampgate
(deftype swampgate (swamp-spike)
  ()
  :heap-base #x50
  :method-count-assert 21
  :size-assert         #xc0
  :flag-assert         #x15005000c0
  )

;; definition for method 3 of type swampgate
(defmethod inspect swampgate ((obj swampgate))
  (let ((t9-0 (method-of-type swamp-spike inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition for method 11 of type swampgate
(defmethod copy-defaults! swampgate ((obj swampgate) (arg0 res-lump))
  (init! obj)
  (if (logtest? (-> arg0 extra perm status) (entity-perm-status complete))
   (go swamp-spike-gate-down)
   (go swamp-spike-gate-up)
   )
  (none)
  )

;; definition of type balance-plat
(deftype balance-plat (process-drawable)
  ((root-override collide-shape-moving  :offset        112)
   (y-travel      float                 :offset-assert 176)
   (y-init        float                 :offset-assert 180)
   (y-offset      float                 :offset-assert 184)
   (y-vel         float                 :offset-assert 188)
   (y-accel       float                 :offset-assert 192)
   (got-grow      symbol                :offset-assert 196)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xc8
  :flag-assert         #x14006000c8
  )

;; definition for method 3 of type balance-plat
(defmethod inspect balance-plat ((obj balance-plat))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Ty-travel: ~f~%" (-> obj y-travel))
  (format #t "~T~Ty-init: ~f~%" (-> obj y-init))
  (format #t "~T~Ty-offset: ~f~%" (-> obj y-offset))
  (format #t "~T~Ty-vel: ~f~%" (-> obj y-vel))
  (format #t "~T~Ty-accel: ~f~%" (-> obj y-accel))
  (format #t "~T~Tgot-grow: ~A~%" (-> obj got-grow))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-16
    (new 'static 'skeleton-group
     :art-group-name "balance-plat"
     :bounds (new 'static 'vector :w 40960.0)
     :max-lod 2
     :version #x6
     )
    )
   )
  (set! (-> v1-16 jgeo) 0)
  (set! (-> v1-16 janim) 4)
  (set! (-> v1-16 mgeo 0) (the-as uint 1))
  (set! (-> v1-16 lod-dist 0) 81920.0)
  (set! (-> v1-16 mgeo 1) (the-as uint 2))
  (set! (-> v1-16 lod-dist 1) 163840.0)
  (set! (-> v1-16 mgeo 2) (the-as uint 3))
  (set! (-> v1-16 lod-dist 2) 4095996000.0)
  (set! *balance-plat-sg* v1-16)
  )

;; failed to figure out what this is:
(defstate balance-plat-idle (balance-plat)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'grow)
                    (let ((v0-0 #t))
                     (set! (-> self got-grow) v0-0)
                     v0-0
                     )
                    )
     )
    )
   )
  :trans
  (the-as (function none :behavior balance-plat) rider-trans)
  :code
  (behavior ()
   (while #t
    (let ((f30-0 (* -0.025 (+ (-> self y-offset) (-> self y-travel))))
          (f28-0 (* -0.025 (- (-> self y-offset) (-> self y-travel))))
          )
     (cond
      ((and
        (-> self root-override riders)
        (nonzero? (-> self root-override riders num-riders))
        )
       (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-0 from) self)
        (set! (-> a1-0 num-params) 1)
        (set! (-> a1-0 message) 'no-look-around)
        (set! (-> a1-0 param 0) (the-as uint 75))
        (send-event-function *target* a1-0)
        )
       (set!
        (-> self y-accel)
        (fmin 4.096 (fmax -4.096 (+ -0.2048 (-> self y-accel))))
        )
       (set!
        (-> self y-vel)
        (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (-> self y-accel))))
        )
       (send-to-all-after (-> self link) 'grow)
       (send-to-all-before (-> self link) 'grow)
       )
      ((-> self got-grow)
       (set! (-> self got-grow) #f)
       (set!
        (-> self y-accel)
        (fmin 4.096 (fmax -4.096 (+ 0.2048 (-> self y-accel))))
        )
       (set!
        (-> self y-vel)
        (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (-> self y-accel))))
        )
       )
      ((< (-> self y-offset) 0.0)
       (set!
        (-> self y-accel)
        (fmin
         (fmin 4.096 (fmax -4.096 (+ 0.1024 (-> self y-accel))))
         (* -0.0001 (-> self y-offset))
         )
        )
       (set!
        (-> self y-vel)
        (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (-> self y-accel))))
        )
       (set! (-> self y-vel) (* 0.99 (-> self y-vel)))
       )
      (else
       (set!
        (-> self y-accel)
        (fmin
         4.096
         (fmax
          (fmax -4.096 (+ -0.1024 (-> self y-accel)))
          (* -0.0001 (-> self y-offset))
          )
         )
        )
       (set!
        (-> self y-vel)
        (fmin f28-0 (fmax f30-0 (+ (-> self y-vel) (-> self y-accel))))
        )
       (set! (-> self y-vel) (* 0.99 (-> self y-vel)))
       )
      )
     )
    (+! (-> self y-offset) (-> self y-vel))
    (set!
     (-> self root-override trans y)
     (+ (-> self y-init) (-> self y-offset))
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior balance-plat) rider-post)
  )

;; definition for method 11 of type balance-plat
(defmethod copy-defaults! balance-plat ((obj balance-plat) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask platform) (-> obj mask)))
  (let
   ((s4-0
     (new
      'process
      'collide-shape-moving
      obj
      (collide-list-enum usually-hit-by-player)
      )
     )
    )
   (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s4-0 reaction) default-collision-reaction)
   (set! (-> s4-0 no-reaction) nothing)
   (dummy-29 s4-0 1)
   (let
    ((s3-0
      (new
       'process
       'collide-shape-prim-mesh
       s4-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s3-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 3))
    (set! (-> s3-0 prim-core offense) 4)
    (set! (-> s3-0 transform-index) 3)
    (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 40960.0)
    )
   (dummy-46 s4-0)
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *balance-plat-sg* '())
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (set! (-> obj y-accel) 0.0)
  (set! (-> obj y-vel) 0.0)
  (set! (-> obj y-offset) 0.0)
  (set! (-> obj y-init) (-> obj root-override trans y))
  (set! (-> obj got-grow) #f)
  (set! (-> obj y-travel) (res-lump-float arg0 'distance :default 20480.0))
  (go balance-plat-idle)
  (none)
  )

;; definition of type swamp-rock
(deftype swamp-rock (process-drawable)
  ((root-override basic  :offset 112)
   )
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  )

;; definition for method 3 of type swamp-rock
(defmethod inspect swamp-rock ((obj swamp-rock))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 291)
  (new 'static 'sparticle-launch-group
   :length 3
   :duration #x12c
   :linger-duration #x5dc
   :flags #x1
   :name "group-swamp-rock-explosion"
   :launcher
   (new 'static 'inline-array sparticle-group-item 3
    (new 'static 'sparticle-group-item
     :launcher #x532
     :period #x5dc
     :length #x5
     )
    (new 'static 'sparticle-group-item
     :launcher #x533
     :period #x5dc
     :length #x5
     )
    (new 'static 'sparticle-group-item
     :launcher #x534
     :period #x5dc
     :length #xf
     )
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1331)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 12
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 1.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 61440.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 130.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 54.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -2.1333334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x3c)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1330)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 20
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201d00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 409.6
     :random-rangef 1228.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 70.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 70.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 70.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 163.84
     :random-rangef 163.84
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -218.45334
     :random-rangef 436.90668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -10.922667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.99
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x12c)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x30 :flags #x1 :random-multf 1.0)
    (new 'static 'sp-field-init-spec
     :field #x31
     :flags #x5
     :sym 'check-water-level-drop
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 3640.889
     :random-rangef 9102.223
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1332)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 21
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200000)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 2048.0
     :random-rangef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 10240.0
     :random-rangef 6144.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 96.0
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 64.0
     :random-rangef 48.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 64.0
     :random-rangef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 16.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 68.26667
     :random-rangef 68.26667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef 54.613335
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x1
     :initial-valuef 13.653334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -1.0922667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.95
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x258)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x32
     :initial-valuef (the-as float #x1e)
     :random-rangef (the-as float #x12b)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x33
     :flags #x6
     :initial-valuef (the-as float #x535)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-valuef 12743.111
     :random-rangef 3640.889
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1333)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.2
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(let
  ((v1-24
    (new 'static 'skeleton-group
     :art-group-name "swamp-rock"
     :bounds (new 'static 'vector :w 12288.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-24 jgeo) 0)
  (set! (-> v1-24 janim) 2)
  (set! (-> v1-24 mgeo 0) (the-as uint 1))
  (set! (-> v1-24 lod-dist 0) 4095996000.0)
  (set! *swamp-rock-sg* v1-24)
  )

;; failed to figure out what this is:
(defstate swamp-rock-break (swamp-rock)
  :code
  (behavior ()
   (process-entity-status! self (entity-perm-status complete) #t)
   (sound-play-by-name
    (static-sound-name "rock-break")
    (new-sound-id)
    1024
    0
    0
    (the-as uint 1)
    (the-as vector #t)
    )
   (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-1
     (let ((t9-4 (method-of-type part-tracker activate)))
      (t9-4
       (the-as part-tracker gp-1)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-1
      part-tracker-init
      (-> *part-group-id-table* 291)
      -1
      #f
      #f
      #f
      (-> self root trans)
      )
     (-> gp-1 ppointer)
     )
    )
   (dummy-18 self)
   (deactivate self)
   (none)
   )
  :post
  (the-as (function none :behavior swamp-rock) ja-post)
  )

;; failed to figure out what this is:
(defstate swamp-rock-idle (swamp-rock)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'attack)
                    (if (and (>= arg1 2) (= (-> arg3 param 1) 'eco-yellow))
                     (go swamp-rock-break)
                     )
                    )
     )
    )
   )
  :code
  (behavior ()
   (transform-post)
   (while #t
    (logior! (-> self mask) (process-mask sleep))
    (suspend)
    )
   (none)
   )
  )

;; definition for method 11 of type swamp-rock
(defmethod copy-defaults! swamp-rock ((obj swamp-rock) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask attackable) (-> obj mask)))
  (let ((f30-0 (res-lump-float arg0 'scale-factor :default 1.0)))
   (let
    ((s4-0
      (new
       'process
       'collide-shape
       obj
       (collide-list-enum usually-hit-by-player)
       )
      )
     )
    (let
     ((s3-0
       (new
        'process
        'collide-shape-prim-mesh
        s4-0
        (the-as uint 0)
        (the-as uint 0)
        )
       )
      )
     (set! (-> s3-0 prim-core collide-as) (the-as uint 512))
     (set! (-> s3-0 collide-with) (the-as uint 16))
     (set! (-> s3-0 prim-core action) (the-as uint 1))
     (set! (-> s3-0 prim-core offense) 4)
     (set! (-> s3-0 transform-index) 3)
     (set-vector!
      (-> s3-0 local-sphere)
      0.0
      (* 4096.0 f30-0)
      0.0
      (* 4096.0 (* 3.0 f30-0))
      )
     )
    (dummy-46 s4-0)
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (dummy-50 s4-0)
    (set! (-> obj root) s4-0)
    )
   (process-drawable-from-entity! obj arg0)
   (vector-float*! (-> obj root scale) *identity-vector* f30-0)
   )
  (dummy-14 obj *swamp-rock-sg* '())
  (nav-mesh-connect obj (-> obj root) (the-as nav-control #f))
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 291) obj)
   )
  (go swamp-rock-idle)
  (none)
  )

;; definition for function swamp-rock-init-by-other
;; Used lq/sq
(defbehavior swamp-rock-init-by-other swamp-rock ((arg0 vector))
  (set! (-> self mask) (logior (process-mask attackable) (-> self mask)))
  (let
   ((s5-0
     (new
      'process
      'collide-shape-moving
      self
      (collide-list-enum usually-hit-by-player)
      )
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 512))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 1))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 3)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 12288.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> self root) s5-0)
   )
  (set! (-> self root trans quad) (-> arg0 quad))
  (dummy-14 self *swamp-rock-sg* '())
  (nav-mesh-connect self (-> self root) (the-as nav-control #f))
  (set!
   (-> self part)
   (create-launch-control (-> *part-group-id-table* 291) self)
   )
  (go swamp-rock-idle)
  (none)
  )

;; failed to figure out what this is:
(let
  ((v1-28
    (new 'static 'skeleton-group
     :art-group-name "tar-plat"
     :bounds (new 'static 'vector :w 12288.0)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-28 jgeo) 0)
  (set! (-> v1-28 janim) 3)
  (set! (-> v1-28 mgeo 0) (the-as uint 1))
  (set! (-> v1-28 lod-dist 0) 81920.0)
  (set! (-> v1-28 mgeo 1) (the-as uint 2))
  (set! (-> v1-28 lod-dist 1) 4095996000.0)
  (set! *tar-plat-sg* v1-28)
  )

;; definition for symbol *tar-plat-constants*, type rigid-body-platform-constants
(define
  *tar-plat-constants*
  (new 'static 'rigid-body-platform-constants
   :drag-factor 2.0
   :buoyancy-factor 1.5
   :max-buoyancy-depth (meters 2.0)
   :gravity-factor 1.0
   :gravity (meters 80.0)
   :player-weight (meters 60.0)
   :player-bonk-factor 0.5
   :player-dive-factor 1.0
   :player-force-distance (meters 2.0)
   :player-force-clamp (meters 1000000.0)
   :player-force-timeout #x1e
   :explosion-force (meters 1000.0)
   :linear-damping 0.9
   :angular-damping 0.9
   :control-point-count 4
   :mass 1.0
   :inertial-tensor-x (meters 6.0)
   :inertial-tensor-y (meters 2.0)
   :inertial-tensor-z (meters 6.0)
   :cm-joint-y (meters -2.0)
   :idle-distance (meters 50.0)
   :platform #t
   :sound-name "tar-plat"
   )
  )

;; definition of type tar-plat
(deftype tar-plat (rigid-body-platform)
  ((anchor-point vector :inline :offset-assert 736)
   (float-height float          :offset-assert 752)
   )
  :heap-base #x290
  :method-count-assert 35
  :size-assert         #x2f4
  :flag-assert         #x23029002f4
  )

;; definition for method 3 of type tar-plat
(defmethod inspect tar-plat ((obj tar-plat))
  (let ((t9-0 (method-of-type rigid-body-platform inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tanchor-point: #<vector @ #x~X>~%" (-> obj anchor-point))
  (format #t "~T~Tfloat-height: ~f~%" (-> obj float-height))
  obj
  )

;; definition for method 22 of type tar-plat
(defmethod TODO-RENAME-22 tar-plat ((obj tar-plat) (arg0 vector) (arg1 float))
  (+
   (-> obj float-height)
   (-> obj float-height-offset)
   (*
    512.0
    (cos
     (* 109.22667 (+ (* 60.0 arg1) (* 0.03 (-> arg0 x)) (* 0.03 (-> arg0 z))))
     )
    )
   )
  )

;; definition for method 23 of type tar-plat
;; INFO: Return type mismatch int vs none.
(defmethod TODO-RENAME-23 tar-plat ((obj tar-plat) (arg0 basic))
  ((the-as
    (function rigid-body-platform basic none)
    (find-parent-method tar-plat 23)
    )
   obj
   arg0
   )
  (TODO-RENAME-27 obj (-> obj anchor-point))
  0
  (none)
  )

;; failed to figure out what this is:
(defstate rigid-body-platform-idle (tar-plat)
  :virtual #t
  :enter
  (behavior ()
   (ja-channel-set! 0)
   (none)
   )
  :code
  (behavior ()
   (while #t
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior tar-plat) ja-post)
  )

;; failed to figure out what this is:
(defstate rigid-body-platform-float (tar-plat)
  :virtual #t
  :event
  (the-as
   (function process int symbol event-message-block object :behavior tar-plat)
   rigid-body-platform-event-handler
   )
  :trans
  (behavior ()
   (cond
    ((or
      (not *target*)
      (<
       (-> self info idle-distance)
       (vector-vector-distance
        (-> self root-overlay trans)
        (-> *target* control trans)
        )
       )
      )
     (let ((f30-1 -2048.0))
      (set!
       (-> self float-height-offset)
       (seek
        (-> self float-height-offset)
        f30-1
        (* 2048.0 (-> *display* seconds-per-frame))
        )
       )
      (if (= (-> self float-height-offset) f30-1)
       (go-virtual rigid-body-platform-idle)
       )
      )
     )
    (else
     (set!
      (-> self float-height-offset)
      (seek
       (-> self float-height-offset)
       4096.0
       (* 2048.0 (-> *display* seconds-per-frame))
       )
      )
     )
    )
   (none)
   )
  :code
  (behavior ()
   (ja-channel-push! 1 30)
   (let ((v1-2 (-> self skel root-channel 0)))
    (set!
     (-> v1-2 frame-group)
     (the-as art-joint-anim (-> self draw art-group data 3))
     )
    )
   (let ((v1-5 (-> self skel root-channel 0)))
    (set! (-> v1-5 num-func) num-func-identity)
    (set! (-> v1-5 frame-num) 0.0)
    )
   (while #t
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior tar-plat) rigid-body-platform-post)
  )

;; definition for method 30 of type tar-plat
;; INFO: Return type mismatch int vs none.
(defmethod TODO-RENAME-30 tar-plat ((obj tar-plat))
  (let
   ((s5-0
     (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (dummy-29 s5-0 1)
   (let
    ((s4-0
      (new
       'process
       'collide-shape-prim-mesh
       s5-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s4-0 prim-core collide-as) (the-as uint 2048))
    (set! (-> s4-0 collide-with) (the-as uint 16))
    (set! (-> s4-0 prim-core action) (the-as uint 19))
    (set! (-> s4-0 prim-core offense) 4)
    (set! (-> s4-0 transform-index) 3)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 20480.0)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj root-overlay) s5-0)
   )
  0
  (none)
  )

;; definition for method 31 of type tar-plat
;; INFO: Return type mismatch int vs none.
;; Used lq/sq
(defmethod TODO-RENAME-31 tar-plat ((obj tar-plat))
  (dummy-14 obj *tar-plat-sg* '())
  (TODO-RENAME-29 obj *tar-plat-constants*)
  (set! (-> obj float-height) (-> obj entity extra trans y))
  (set! (-> obj float-height-offset) -2048.0)
  (let ((s5-0 (-> obj info control-point-count)))
   (dotimes (s4-0 s5-0)
    (let ((s3-0 (-> obj control-point-array data s4-0)))
     (let ((f26-0 (+ 8192.0 (* 65536.0 (/ (the float s4-0) (the float s5-0)))))
           (f28-0 20480.0)
           (f30-0 12288.0)
           )
      (set!
       (-> s3-0 local-pos x)
       (fmax (fmin (* f28-0 (sin f26-0)) f30-0) (- f30-0))
       )
      (set! (-> s3-0 local-pos y) 0.0)
      (set!
       (-> s3-0 local-pos z)
       (fmax (fmin (* f28-0 (cos f26-0)) f30-0) (- f30-0))
       )
      )
     (set! (-> s3-0 local-pos w) 1.0)
     )
    )
   )
  (nav-mesh-connect obj (-> obj root-overlay) (the-as nav-control #f))
  (set! (-> obj anchor-point quad) (-> obj root-overlay trans quad))
  0
  (none)
  )

;; definition of type swamp-barrel
(deftype swamp-barrel (barrel)
  ()
  :heap-base #x90
  :method-count-assert 30
  :size-assert         #x100
  :flag-assert         #x1e00900100
  )

;; definition for method 3 of type swamp-barrel
(defmethod inspect swamp-barrel ((obj swamp-barrel))
  (let ((t9-0 (method-of-type barrel inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition of type swampcam
(deftype swampcam (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

;; definition for method 3 of type swampcam
(defmethod inspect swampcam ((obj swampcam))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tname: ~A~%" (-> obj name))
  (format #t "~Tmask: ~D~%" (-> obj mask))
  (format #t "~Tparent: #x~X~%" (-> obj parent))
  (format #t "~Tbrother: #x~X~%" (-> obj brother))
  (format #t "~Tchild: #x~X~%" (-> obj child))
  (format #t "~Tppointer: #x~X~%" (-> obj ppointer))
  (format #t "~Tself: ~A~%" (-> obj self))
  (format #t "~Tpool: ~A~%" (-> obj pool))
  (format #t "~Tstatus: ~A~%" (-> obj status))
  (format #t "~Tpid: ~D~%" (-> obj pid))
  (format #t "~Tmain-thread: ~A~%" (-> obj main-thread))
  (format #t "~Ttop-thread: ~A~%" (-> obj top-thread))
  (format #t "~Tentity: ~A~%" (-> obj entity))
  (format #t "~Tstate: ~A~%" (-> obj state))
  (format #t "~Ttrans-hook: ~A~%" (-> obj trans-hook))
  (format #t "~Tpost-hook: ~A~%" (-> obj post-hook))
  (format #t "~Tevent-hook: ~A~%" (-> obj event-hook))
  (format #t "~Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~Tnext-state: ~A~%" (-> obj next-state))
  (format #t "~Theap-base: #x~X~%" (-> obj heap-base))
  (format #t "~Theap-top: #x~X~%" (-> obj heap-top))
  (format #t "~Theap-cur: #x~X~%" (-> obj heap-cur))
  (format #t "~Tstack-frame-top: ~A~%" (-> obj stack-frame-top))
  (format #t "~Theap: #<kheap @ #x~X>~%" (&-> obj heap-base))
  (format #t "~Tconnection-list: ~`'connectable`P~%" (-> obj connection-list))
  (format #t "~Tstack[0] @ #x~X~%" (-> obj stack))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-42
    (new 'static 'skeleton-group
     :art-group-name "swampcam"
     :bounds (new 'static 'vector :w 61440.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-42 jgeo) 0)
  (set! (-> v1-42 janim) 2)
  (set! (-> v1-42 mgeo 0) (the-as uint 1))
  (set! (-> v1-42 lod-dist 0) 4095996000.0)
  (set! *swampcam-sg* v1-42)
  )

;; definition of type swamp-battlecontroller
(deftype swamp-battlecontroller (battlecontroller)
  ()
  :heap-base #x210
  :method-count-assert 29
  :size-assert         #x27c
  :flag-assert         #x1d0210027c
  )

;; definition for method 3 of type swamp-battlecontroller
(defmethod inspect swamp-battlecontroller ((obj swamp-battlecontroller))
  (let ((t9-0 (method-of-type battlecontroller inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(defstate battlecontroller-play-intro-camera (swamp-battlecontroller)
  :virtual #t
  :code
  (behavior ()
   (suspend)
   (process-drawable-delay-player 300)
   (let* ((gp-0 (get-process *default-dead-pool* pov-camera #x4000))
          (gp-1 (ppointer->handle (when gp-0
                                   (let
                                    ((t9-2 (method-of-type pov-camera activate))
                                     )
                                    (t9-2
                                     (the-as pov-camera gp-0)
                                     self
                                     'pov-camera
                                     (the-as pointer #x70004000)
                                     )
                                    )
                                   (run-now-in-process
                                    gp-0
                                    pov-camera-init-by-other
                                    (-> self root trans)
                                    *swampcam-sg*
                                    "swamp-ambush"
                                    0
                                    #f
                                    '()
                                    )
                                   (-> gp-0 ppointer)
                                   )
                 )
           )
          )
    (while (handle->process (the-as handle gp-1))
     (suspend)
     )
    )
   (go-virtual dummy-24)
   (none)
   )
  )

;; failed to figure out what this is:
(defstate battlecontroller-die (swamp-battlecontroller)
  :virtual #t
  :code
  (behavior ()
   (process-entity-status! self (entity-perm-status complete) #t)
   ((the-as
     (function none :behavior battlecontroller)
     (-> (method-of-type battlecontroller battlecontroller-die) code)
     )
    )
   (none)
   )
  )




