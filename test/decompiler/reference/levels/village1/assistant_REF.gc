;;-*-Lisp-*-
(in-package goal)

;; definition of type assistant
(deftype assistant (process-taskable)
  ((sound-id sound-id  :offset-assert 380)
   )
  :heap-base #x110
  :method-count-assert 53
  :size-assert         #x180
  :flag-assert         #x3501100180
  )

;; definition for method 3 of type assistant
(defmethod inspect assistant ((obj assistant))
  (let ((t9-0 (method-of-type process-taskable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tsound-id: ~D~%" (-> obj sound-id))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "assistant"
     :bounds (new 'static 'vector :w 8192.0)
     :version #x6
     :shadow 2
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 3)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 4095996000.0)
  (set! *assistant-sg* v1-1)
  )

;; definition for method 52 of type assistant
;; INFO: Return type mismatch int vs none.
(defmethod dummy-52 assistant ((obj assistant))
  (let ((v1-1 (-> obj draw shadow-ctrl)))
   (when v1-1
    (let ((f0-0 (-> obj root trans y)))
     (let ((a0-2 v1-1))
      (set! (-> a0-2 settings bot-plane w) (- (+ -4096.0 f0-0)))
      )
     0
     (let ((a0-4 v1-1))
      (set! (-> a0-4 settings top-plane w) (- (+ 4096.0 f0-0)))
      )
     )
    0
    (set! (-> v1-1 settings flags) (logand -9 (-> v1-1 settings flags)))
    )
   )
  (none)
  )

;; definition for method 48 of type assistant
(defmethod draw-shadow assistant ((obj assistant))
  (-> obj draw shadow-ctrl)
  (cond
   ((and
     (-> obj draw shadow)
     (zero? (-> obj draw cur-lod))
     (logtest? (-> obj draw status) 8)
     )
    (let ((v1-9 (-> obj draw shadow-ctrl)))
     (set! (-> v1-9 settings flags) (logand -33 (-> v1-9 settings flags)))
     )
    0
    ((method-of-object (-> obj draw shadow-ctrl) dummy-14))
    )
   (else
    (let ((v1-14 (-> obj draw shadow-ctrl)))
     (logior! (-> v1-14 settings flags) 32)
     )
    0
    )
   )
  (none)
  )

;; definition for method 32 of type assistant
(defmethod play-anim! assistant ((obj assistant) (arg0 symbol))
  (with-pp
   (case (current-status (-> obj tasks)) 
    ((2 3)
      (case (current-task (-> obj tasks)) 
       ((2)
         (when arg0
          (let* ((s5-1 (-> obj tasks))
                 (s4-0 (method-of-object s5-1 save-reminder))
                 (a1-3 (new 'stack-no-clear 'event-message-block))
                 )
           (set! (-> a1-3 from) pp)
           (set! (-> a1-3 num-params) 2)
           (set! (-> a1-3 message) 'query)
           (set! (-> a1-3 param 0) (the-as uint 'pickup))
           (set! (-> a1-3 param 1) (the-as uint 6))
           (s4-0
            s5-1
            (the int (the-as float (send-event-function *target* a1-3)))
            1
            )
           )
          (close-status! (-> obj tasks) (task-status need-introduction))
          )
         (new 'static 'spool-anim
          :name
          "assistant-introduction-blue-eco-switch"
          :index 10
          :parts 11
          :command-list
          '(
            (0
              want-levels
              village1
              beach
              )
            ((the binteger 128)
             joint
             "cameraB"
             )
            ((the binteger 312)
             joint
             "camera"
             )
            ((the binteger 492)
             joint
             "cameraB"
             )
            ((the binteger 537)
             joint
             "camera"
             )
            ((the binteger 734)
             display-level
             beach
             movie
             )
            ((the binteger 734)
             want-force-vis
             beach
             #t
             )
            ((the binteger 735)
             alive
             "ecovent-48"
             )
            ((the binteger 742)
             blackout
             (the binteger 10)
             )
            ((the binteger 743)
             joint
             "cameraB"
             )
            ((the binteger 745)
             blackout
             0
             )
            ((the binteger 839)
             alive
             "ecovent-200"
             )
            ((the binteger 841)
             joint
             "camera"
             )
            ((the binteger 842)
             dead
             "ecovent-48"
             )
            ((the binteger 942)
             blackout
             (the binteger 10)
             )
            ((the binteger 944)
             joint
             "cameraB"
             )
            ((the binteger 945)
             blackout
             0
             )
            ((the binteger 945)
             dead
             "ecovent-200"
             )
            ((the binteger 945)
             display-level
             beach
             #f
             )
            ((the binteger 1049)
             blackout
             (the binteger 10)
             )
            ((the binteger 1051)
             joint
             "camera"
             )
            ((the binteger 1052)
             blackout
             0
             )
            ((the binteger 1135)
             blackout
             (the binteger 10)
             )
            ((the binteger 1137)
             joint
             "cameraB"
             )
            ((the binteger 1138)
             blackout
             0
             )
            ((the binteger 1216) joint "camera")
            )
          )
         )
       (else
        (if arg0
         (close-status! (-> obj tasks) (task-status need-introduction))
         )
        (new 'static 'spool-anim
         :name "assistant-introduction-race-bike"
         :index 12
         :parts 6
         :command-list
         '(
           (0
             want-levels
             village1
             beach
             )
           ((the binteger 129)
            joint
            "cameraB"
            )
           ((the binteger 319)
            joint
            "camera"
            )
           ((the binteger 505) joint "cameraB")
           )
         )
        )
       )
      )
    ((5 4)
     (set! (-> obj skippable) #t)
     (cond
      ((zero? (current-task (-> obj tasks)))
       (new 'static 'spool-anim
        :name "assistant-reminder-1-generic"
        :index 14
        :parts 2
        :command-list '()
        )
       )
      ((closed?
        (-> obj tasks)
        (game-task jungle-eggtop)
        (task-status need-resolution)
        )
       (new 'static 'spool-anim
        :name "assistant-reminder-1-race-bike"
        :index 13
        :parts 3
        :command-list '()
        )
       )
      ((or
        (closed?
         (-> obj tasks)
         (game-task misty-bike)
         (task-status need-resolution)
         )
        (not
         (closed?
          (-> obj tasks)
          (game-task misty-bike)
          (task-status need-introduction)
          )
         )
        )
       (new 'static 'spool-anim
        :name "assistant-reminder-1-blue-eco-switch"
        :index 11
        :parts 3
        :command-list '()
        )
       )
      ((zero? (get-reminder (-> obj tasks) 2))
       (if arg0
        (save-reminder (-> obj tasks) 1 2)
        )
       (new 'static 'spool-anim
        :name "assistant-reminder-1-race-bike"
        :index 13
        :parts 3
        :command-list '()
        )
       )
      (else
       (if arg0
        (save-reminder (-> obj tasks) 0 2)
        )
       (new 'static 'spool-anim
        :name "assistant-reminder-1-blue-eco-switch"
        :index 11
        :parts 3
        :command-list '()
        )
       )
      )
     )
    (else
     (if arg0
      (format
       0
       "ERROR: <GMJ>: ~S playing anim for task status ~S~%"
       (-> obj name)
       (task-status->string
        (the-as task-status (current-status (-> obj tasks)))
        )
       )
      )
     (-> obj draw art-group data 3)
     )
    )
   )
  )

;; definition for method 31 of type assistant
(defmethod get-art-elem assistant ((obj assistant))
  (-> obj draw art-group data 3)
  )

;; definition for method 43 of type assistant
(defmethod TODO-RENAME-43 assistant ((obj assistant))
  (let
   ((s5-0
     (TODO-RENAME-10
      (-> obj ambient)
      (new 'stack-no-clear 'vector)
      9000
      122880.0
      obj
      )
     )
    )
   (when s5-0
    (let* ((v1-2 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-3 (the-as number (logior #x3f800000 v1-2)))
           (f0-2 (+ -1.0 (the-as float v1-3)))
           )
     (cond
      ((< 16384.0 (-> s5-0 y))
       )
      ((< 0.8 f0-2)
       (dummy-11 (-> obj ambient) "ASSTLP01" #f (-> obj root trans))
       )
      ((< 0.6 f0-2)
       (dummy-11 (-> obj ambient) "ASSTLP04" #f (-> obj root trans))
       )
      ((< 0.4 f0-2)
       (dummy-11 (-> obj ambient) "ASSTLP05" #f (-> obj root trans))
       )
      ((< 0.2 f0-2)
       (dummy-11 (-> obj ambient) "ASSTLP02" #f (-> obj root trans))
       )
      (else
       (dummy-11 (-> obj ambient) "ASSTLP03" #f (-> obj root trans))
       )
      )
     )
    )
   )
  (none)
  )

;; failed to figure out what this is:
(defstate idle (assistant)
  :virtual #t
  :code
  (behavior ()
   (if (!= (if (> (-> self skel active-channels) 0)
            (-> self skel root-channel 0 frame-group)
            )
        (-> self draw art-group data 3)
        )
    (ja-channel-push! 1 60)
    )
   (while #t
    (TODO-RENAME-43 self)
    (let ((v1-9 (-> self skel root-channel 0)))
     (set!
      (-> v1-9 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 3))
      )
     )
    (let* ((v1-11 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-12 (the-as number (logior #x3f800000 v1-11)))
           )
     (countdown (gp-0 (+ (the int (+ -1.0 (the-as float v1-12))) 2))
      (let ((a0-12 (-> self skel root-channel 0)))
       (set! (-> a0-12 frame-group) (if (> (-> self skel active-channels) 0)
                                     (-> self skel root-channel 0 frame-group)
                                     )
        )
       (set!
        (-> a0-12 param 0)
        (the float (+ (-> (if (> (-> self skel active-channels) 0)
                           (-> self skel root-channel 0 frame-group)
                           )
                       data
                       0
                       length
                       )
                    -1
                    )
         )
        )
       (set! (-> a0-12 param 1) 1.0)
       (set! (-> a0-12 frame-num) 0.0)
       (joint-control-channel-group!
        a0-12
        (if (> (-> self skel active-channels) 0)
         (-> self skel root-channel 0 frame-group)
         )
        num-func-seek!
        )
       )
      (until (ja-done? 0)
       (suspend)
       (let ((a0-13 (-> self skel root-channel 0)))
        (set!
         (-> a0-13 param 0)
         (the float (+ (-> a0-13 frame-group data 0 length) -1))
         )
        (set! (-> a0-13 param 1) 1.0)
        (joint-control-channel-group-eval!
         a0-13
         (the-as art-joint-anim #f)
         num-func-seek!
         )
        )
       )
      )
     )
    (let* ((v1-46 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-47 (the-as number (logior #x3f800000 v1-46)))
           )
     (cond
      ((< (+ -1.0 (the-as float v1-47)) 0.66)
       (let ((a0-17 (-> self skel root-channel 0)))
        (set!
         (-> a0-17 frame-group)
         (the-as art-joint-anim (-> self draw art-group data 8))
         )
        (set!
         (-> a0-17 param 0)
         (the
          float
          (+
           (->
            (the-as art-joint-anim (-> self draw art-group data 8))
            data
            0
            length
            )
           -1
           )
          )
         )
        (set! (-> a0-17 param 1) 1.0)
        (set! (-> a0-17 frame-num) 0.0)
        (joint-control-channel-group!
         a0-17
         (the-as art-joint-anim (-> self draw art-group data 8))
         num-func-seek!
         )
        )
       (until (ja-done? 0)
        (suspend)
        (let ((a0-18 (-> self skel root-channel 0)))
         (set!
          (-> a0-18 param 0)
          (the float (+ (-> a0-18 frame-group data 0 length) -1))
          )
         (set! (-> a0-18 param 1) 1.0)
         (joint-control-channel-group-eval!
          a0-18
          (the-as art-joint-anim #f)
          num-func-seek!
          )
         )
        )
       (sound-play-by-name
        (static-sound-name "welding-loop")
        (-> self sound-id)
        1024
        0
        0
        (the-as uint 1)
        (target-pos 0)
        )
       (let ((v1-74 (-> self skel root-channel 0)))
        (set!
         (-> v1-74 frame-group)
         (the-as art-joint-anim (-> self draw art-group data 9))
         )
        )
       (let* ((f30-0 4.0)
              (v1-76 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
              (v1-77 (the-as number (logior #x3f800000 v1-76)))
              )
        (countdown
         (gp-2 (+ (the int (* f30-0 (+ -1.0 (the-as float v1-77)))) 4))
         (let ((a0-28 (-> self skel root-channel 0)))
          (set! (-> a0-28 frame-group) (if (> (-> self skel active-channels) 0)
                                        (->
                                         self
                                         skel
                                         root-channel
                                         0
                                         frame-group
                                         )
                                        )
           )
          (set!
           (-> a0-28 param 0)
           (the float (+ (-> (if (> (-> self skel active-channels) 0)
                              (-> self skel root-channel 0 frame-group)
                              )
                          data
                          0
                          length
                          )
                       -1
                       )
            )
           )
          (set! (-> a0-28 param 1) 1.0)
          (set! (-> a0-28 frame-num) 0.0)
          (joint-control-channel-group!
           a0-28
           (if (> (-> self skel active-channels) 0)
            (-> self skel root-channel 0 frame-group)
            )
           num-func-seek!
           )
          )
         (until (ja-done? 0)
          (dummy-11
           (-> self part)
           (vector<-cspace!
            (new 'stack-no-clear 'vector)
            (-> self node-list data 30)
            )
           )
          (suspend)
          (let ((a0-31 (-> self skel root-channel 0)))
           (set!
            (-> a0-31 param 0)
            (the float (+ (-> a0-31 frame-group data 0 length) -1))
            )
           (set! (-> a0-31 param 1) 1.0)
           (joint-control-channel-group-eval!
            a0-31
            (the-as art-joint-anim #f)
            num-func-seek!
            )
           )
          )
         (let ((a0-33 (-> self skel root-channel 0)))
          (set! (-> a0-33 frame-group) (if (> (-> self skel active-channels) 0)
                                        (->
                                         self
                                         skel
                                         root-channel
                                         0
                                         frame-group
                                         )
                                        )
           )
          (set! (-> a0-33 param 0) 0.0)
          (set! (-> a0-33 param 1) 1.0)
          (set!
           (-> a0-33 frame-num)
           (the float (+ (-> (if (> (-> self skel active-channels) 0)
                              (-> self skel root-channel 0 frame-group)
                              )
                          data
                          0
                          length
                          )
                       -1
                       )
            )
           )
          (joint-control-channel-group!
           a0-33
           (if (> (-> self skel active-channels) 0)
            (-> self skel root-channel 0 frame-group)
            )
           num-func-seek!
           )
          )
         (until (ja-done? 0)
          (dummy-11
           (-> self part)
           (vector<-cspace!
            (new 'stack-no-clear 'vector)
            (-> self node-list data 30)
            )
           )
          (suspend)
          (let ((a0-36 (-> self skel root-channel 0)))
           (set! (-> a0-36 param 0) 0.0)
           (set! (-> a0-36 param 1) 1.0)
           (joint-control-channel-group-eval!
            a0-36
            (the-as art-joint-anim #f)
            num-func-seek!
            )
           )
          )
         )
        )
       (sound-stop (-> self sound-id))
       (let ((a0-39 (-> self skel root-channel 0)))
        (set!
         (-> a0-39 frame-group)
         (the-as art-joint-anim (-> self draw art-group data 8))
         )
        (set! (-> a0-39 param 0) 0.0)
        (set! (-> a0-39 param 1) 1.0)
        (set!
         (-> a0-39 frame-num)
         (the
          float
          (+
           (->
            (the-as art-joint-anim (-> self draw art-group data 8))
            data
            0
            length
            )
           -1
           )
          )
         )
        (joint-control-channel-group!
         a0-39
         (the-as art-joint-anim (-> self draw art-group data 8))
         num-func-seek!
         )
        )
       (until (ja-done? 0)
        (suspend)
        (let ((a0-40 (-> self skel root-channel 0)))
         (set! (-> a0-40 param 0) 0.0)
         (set! (-> a0-40 param 1) 1.0)
         (joint-control-channel-group-eval!
          a0-40
          (the-as art-joint-anim #f)
          num-func-seek!
          )
         )
        )
       (let* ((v1-159 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
              (v1-160 (the-as number (logior #x3f800000 v1-159)))
              )
        (when (< (+ -1.0 (the-as float v1-160)) 0.66)
         (let ((a0-44 (-> self skel root-channel 0)))
          (set!
           (-> a0-44 frame-group)
           (the-as art-joint-anim (-> self draw art-group data 7))
           )
          (set!
           (-> a0-44 param 0)
           (the
            float
            (+
             (->
              (the-as art-joint-anim (-> self draw art-group data 7))
              data
              0
              length
              )
             -1
             )
            )
           )
          (set! (-> a0-44 param 1) 1.0)
          (set! (-> a0-44 frame-num) 0.0)
          (joint-control-channel-group!
           a0-44
           (the-as art-joint-anim (-> self draw art-group data 7))
           num-func-seek!
           )
          )
         (until (ja-done? 0)
          (suspend)
          (let ((a0-45 (-> self skel root-channel 0)))
           (set!
            (-> a0-45 param 0)
            (the float (+ (-> a0-45 frame-group data 0 length) -1))
            )
           (set! (-> a0-45 param 1) 1.0)
           (joint-control-channel-group-eval!
            a0-45
            (the-as art-joint-anim #f)
            num-func-seek!
            )
           )
          )
         )
        )
       )
      (else
       (let ((a0-47 (-> self skel root-channel 0)))
        (set!
         (-> a0-47 frame-group)
         (the-as art-joint-anim (-> self draw art-group data 4))
         )
        (set!
         (-> a0-47 param 0)
         (the
          float
          (+
           (->
            (the-as art-joint-anim (-> self draw art-group data 4))
            data
            0
            length
            )
           -1
           )
          )
         )
        (set! (-> a0-47 param 1) 1.0)
        (set! (-> a0-47 frame-num) 0.0)
        (joint-control-channel-group!
         a0-47
         (the-as art-joint-anim (-> self draw art-group data 4))
         num-func-seek!
         )
        )
       (until (ja-done? 0)
        (suspend)
        (let ((a0-48 (-> self skel root-channel 0)))
         (set!
          (-> a0-48 param 0)
          (the float (+ (-> a0-48 frame-group data 0 length) -1))
          )
         (set! (-> a0-48 param 1) 1.0)
         (joint-control-channel-group-eval!
          a0-48
          (the-as art-joint-anim #f)
          num-func-seek!
          )
         )
        )
       (let* ((v1-208 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
              (v1-209 (the-as number (logior #x3f800000 v1-208)))
              )
        (countdown (gp-3 (+ (the int (+ -1.0 (the-as float v1-209))) 1))
         (let ((a0-52 (-> self skel root-channel 0)))
          (set!
           (-> a0-52 frame-group)
           (the-as art-joint-anim (-> self draw art-group data 5))
           )
          (set!
           (-> a0-52 param 0)
           (the
            float
            (+
             (->
              (the-as art-joint-anim (-> self draw art-group data 5))
              data
              0
              length
              )
             -1
             )
            )
           )
          (set! (-> a0-52 param 1) 1.0)
          (set! (-> a0-52 frame-num) 0.0)
          (joint-control-channel-group!
           a0-52
           (the-as art-joint-anim (-> self draw art-group data 5))
           num-func-seek!
           )
          )
         (until (ja-done? 0)
          (suspend)
          (let ((a0-53 (-> self skel root-channel 0)))
           (set!
            (-> a0-53 param 0)
            (the float (+ (-> a0-53 frame-group data 0 length) -1))
            )
           (set! (-> a0-53 param 1) 1.0)
           (joint-control-channel-group-eval!
            a0-53
            (the-as art-joint-anim #f)
            num-func-seek!
            )
           )
          )
         )
        )
       (let ((a0-55 (-> self skel root-channel 0)))
        (set!
         (-> a0-55 frame-group)
         (the-as art-joint-anim (-> self draw art-group data 6))
         )
        (set!
         (-> a0-55 param 0)
         (the
          float
          (+
           (->
            (the-as art-joint-anim (-> self draw art-group data 6))
            data
            0
            length
            )
           -1
           )
          )
         )
        (set! (-> a0-55 param 1) 1.0)
        (set! (-> a0-55 frame-num) 0.0)
        (joint-control-channel-group!
         a0-55
         (the-as art-joint-anim (-> self draw art-group data 6))
         num-func-seek!
         )
        )
       (until (ja-done? 0)
        (suspend)
        (let ((a0-56 (-> self skel root-channel 0)))
         (set!
          (-> a0-56 param 0)
          (the float (+ (-> a0-56 frame-group data 0 length) -1))
          )
         (set! (-> a0-56 param 1) 1.0)
         (joint-control-channel-group-eval!
          a0-56
          (the-as art-joint-anim #f)
          num-func-seek!
          )
         )
        )
       )
      )
     )
    )
   (none)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 122)
  (new 'static 'sparticle-launch-group
   :length 2
   :duration #xbb8
   :linger-duration #x5dc
   :name "group-assistant-torch"
   :launcher
   (new 'static 'inline-array sparticle-group-item 2
    (new 'static 'sparticle-group-item
     :launcher #x16d
     :fade-after (meters 30.0)
     :falloff-to (meters 30.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x16e
     :fade-after (meters 60.0)
     :falloff-to (meters 80.0)
     )
    )
   :bounds (new 'static 'sphere :w 61440.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 365)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 13
    (new 'static 'sp-field-init-spec :field #x1 :initial-value #x201200)
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-value #x3dcccccd
     :random-range #x3f800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-value #x45800000
     :random-range #x46400000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-range #x47800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-value -4
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-value #x42c80000
     :random-range #x41e00000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-value #x42c80000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-value #x42a00000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-value #x42000000
     :random-range #x42800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-value -1060320051
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-value 10
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-value 12
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 366)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (new 'static 'sp-field-init-spec :field #x1 :initial-value #x200f00)
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-value #x3dcccccd
     :random-range #x3f800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-value #x43cccccd
     :random-range #x43cccccd
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-value -4
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-value #x43000000
     :random-range #x43000000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-value #x43000000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-value #x42800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-value #x42000000
     :random-range #x42c00000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-value #x425a740e
     :random-range #x43a3d70a
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-value -1087454402
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-value -4
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x22
     :flags #x1
     :initial-value -1102263091
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x23
     :flags #x1
     :initial-value -1102263091
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-value -1056763281
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-value #x3f6e147b
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-value #x4b0
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-value 4
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x30
     :flags #x1
     :initial-value #x48090000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x31
     :flags #x5
     :func 'check-drop-level-assistant
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :random-range #x47000000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :initial-value #x46000000
     :random-range #x47000000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 367)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 15
    (new 'static 'sp-field-init-spec :field #x1 :initial-value #x200f00)
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-value #x40400000
     :random-range #x3f800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-value #x4399999a
     :random-range #x4399999a
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-value -4
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-value #x43000000
     :random-range #x42800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-value #x42c00000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-value #x42000000
     :random-range #x42c00000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-value #x423f258c
     :random-range #x415a740e
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-value -1084591090
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-value -1087454402
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-value #x12c
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-value 4
     :random-mult 1
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :initial-value #x460e38e4
     :random-range #x45aaaaab
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-range #x47800000
     :random-mult #x3f800000
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; definition for function check-drop-level-assistant
(defun
  check-drop-level-assistant
  ((arg0 assistant) (arg1 sparticle-cpuinfo) (arg2 vector))
  (when (< (-> arg2 y) (-> arg1 user-float))
   (let ((gp-0 (new 'stack-no-clear 'vector)))
    (sp-kill-particle (the-as sparticle-system arg0) arg1)
    (let* ((v1-1 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-2 (the-as number (logior #x3f800000 v1-1)))
           )
     (if (< (+ -1.0 (the-as float v1-2)) 0.25)
      (sound-play-by-name
       (static-sound-name "water-drop")
       (new-sound-id)
       1024
       0
       0
       (the-as uint 1)
       (the-as vector #t)
       )
      )
     )
    (set-vector! gp-0 (-> arg2 x) (-> arg1 user-float) (-> arg2 z) 1.0)
    (sp-launch-particles-var
     *sp-particle-system-2d*
     (-> *part-id-table* 367)
     gp-0
     #f
     #f
     1.0
     )
    )
   )
  (none)
  )

;; definition for method 11 of type assistant
(defmethod copy-defaults! assistant ((obj assistant) (arg0 res-lump))
  (dummy-40 obj arg0 *assistant-sg* 3 31 (new 'static 'vector :w 4096.0) 5)
  (set! (-> obj bounce-away) #f)
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 122) obj)
   )
  (set! (-> obj tasks) (get-task-control (game-task jungle-eggtop)))
  (set! (-> obj sound-id) (new-sound-id))
  (set! (-> obj draw light-index) (the-as uint 1))
  (case (get-task-status (game-task firecanyon-assistant)) 
   (((task-status unknown))
     (go (method-of-object obj idle))
     )
   (else
    (dummy-18 obj)
    (deactivate obj)
    )
   )
  (none)
  )




