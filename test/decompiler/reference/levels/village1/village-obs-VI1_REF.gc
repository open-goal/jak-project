;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(let
  ((v1-0
    (new 'static 'skeleton-group
     :art-group-name "medres-jungle"
     :bounds
     (new 'static 'vector :x -327680.0 :z -327680.0 :w 983040.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-0 jgeo) 0)
  (set! (-> v1-0 janim) 2)
  (set! (-> v1-0 mgeo 0) (the-as uint 1))
  (set! (-> v1-0 lod-dist 0) 4095996000.0)
  (set! *med-res-jungle-sg* v1-0)
  )

;; failed to figure out what this is:
(let
  ((v1-1
    (new 'static 'skeleton-group
     :art-group-name "medres-jungle1"
     :bounds
     (new 'static 'vector :x 122880.0 :z -163840.0 :w 942080.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-1 jgeo) 0)
  (set! (-> v1-1 janim) 2)
  (set! (-> v1-1 mgeo 0) (the-as uint 1))
  (set! (-> v1-1 lod-dist 0) 4095996000.0)
  (set! *med-res-jungle1-sg* v1-1)
  )

;; failed to figure out what this is:
(let
  ((v1-2
    (new 'static 'skeleton-group
     :art-group-name "medres-jungle2"
     :bounds
     (new 'static 'vector :x 368640.0 :z 532480.0 :w 450560.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-2 jgeo) 0)
  (set! (-> v1-2 janim) 2)
  (set! (-> v1-2 mgeo 0) (the-as uint 1))
  (set! (-> v1-2 lod-dist 0) 4095996000.0)
  (set! *med-res-jungle2-sg* v1-2)
  )

;; failed to figure out what this is:
(let
  ((v1-3
    (new 'static 'skeleton-group
     :art-group-name "medres-beach"
     :bounds
     (new 'static 'vector :z -573440.0 :w 819200.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-3 jgeo) 0)
  (set! (-> v1-3 janim) 2)
  (set! (-> v1-3 mgeo 0) (the-as uint 1))
  (set! (-> v1-3 lod-dist 0) 4095996000.0)
  (set! *med-res-beach-sg* v1-3)
  )

;; failed to figure out what this is:
(let
  ((v1-4
    (new 'static 'skeleton-group
     :art-group-name "medres-beach1"
     :bounds
     (new 'static 'vector :z -1474560.0 :w 819200.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-4 jgeo) 0)
  (set! (-> v1-4 janim) 2)
  (set! (-> v1-4 mgeo 0) (the-as uint 1))
  (set! (-> v1-4 lod-dist 0) 4095996000.0)
  (set! *med-res-beach1-sg* v1-4)
  )

;; failed to figure out what this is:
(let
  ((v1-5
    (new 'static 'skeleton-group
     :art-group-name "medres-beach2"
     :bounds
     (new 'static 'vector :x -819200.0 :z -1843200.0 :w 737280.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-5 jgeo) 0)
  (set! (-> v1-5 janim) 2)
  (set! (-> v1-5 mgeo 0) (the-as uint 1))
  (set! (-> v1-5 lod-dist 0) 4095996000.0)
  (set! *med-res-beach2-sg* v1-5)
  )

;; failed to figure out what this is:
(let
  ((v1-6
    (new 'static 'skeleton-group
     :art-group-name "medres-beach3"
     :bounds
     (new 'static 'vector :x 307200.0 :y 286720.0 :z -1966080.0 :w 409600.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-6 jgeo) 0)
  (set! (-> v1-6 janim) 2)
  (set! (-> v1-6 mgeo 0) (the-as uint 1))
  (set! (-> v1-6 lod-dist 0) 4095996000.0)
  (set! *med-res-beach3-sg* v1-6)
  )

;; failed to figure out what this is:
(let
  ((v1-7
    (new 'static 'skeleton-group
     :art-group-name "medres-misty"
     :bounds
     (new 'static 'vector :x -163840.0 :z -81920.0 :w 1064960.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-7 jgeo) 0)
  (set! (-> v1-7 janim) 2)
  (set! (-> v1-7 mgeo 0) (the-as uint 1))
  (set! (-> v1-7 lod-dist 0) 4095996000.0)
  (set! *med-res-misty-sg* v1-7)
  )

;; failed to figure out what this is:
(let
  ((v1-8
    (new 'static 'skeleton-group
     :art-group-name "medres-village11"
     :bounds
     (new 'static 'vector :x -409600.0 :z 368640.0 :w 819200.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-8 jgeo) 0)
  (set! (-> v1-8 janim) 2)
  (set! (-> v1-8 mgeo 0) (the-as uint 1))
  (set! (-> v1-8 lod-dist 0) 4095996000.0)
  (set! *med-res-village11-sg* v1-8)
  )

;; failed to figure out what this is:
(let
  ((v1-9
    (new 'static 'skeleton-group
     :art-group-name "medres-village12"
     :bounds
     (new 'static 'vector :x 163840.0 :z -204800.0 :w 634880.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-9 jgeo) 0)
  (set! (-> v1-9 janim) 2)
  (set! (-> v1-9 mgeo 0) (the-as uint 1))
  (set! (-> v1-9 lod-dist 0) 4095996000.0)
  (set! *med-res-village12-sg* v1-9)
  )

;; failed to figure out what this is:
(let
  ((v1-10
    (new 'static 'skeleton-group
     :art-group-name "medres-village13"
     :bounds
     (new 'static 'vector :x 737280.0 :y -163840.0 :z -163840.0 :w 737280.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-10 jgeo) 0)
  (set! (-> v1-10 janim) 2)
  (set! (-> v1-10 mgeo 0) (the-as uint 1))
  (set! (-> v1-10 lod-dist 0) 4095996000.0)
  (set! *med-res-village13-sg* v1-10)
  )

;; failed to figure out what this is:
(let
  ((v1-11
    (new 'static 'skeleton-group
     :art-group-name "medres-training"
     :bounds
     (new 'static 'vector :z -245760.0 :w 901120.0)
     :longest-edge (meters 0.01)
     :version #x6
     )
    )
   )
  (set! (-> v1-11 jgeo) 0)
  (set! (-> v1-11 janim) 2)
  (set! (-> v1-11 mgeo 0) (the-as uint 1))
  (set! (-> v1-11 lod-dist 0) 4095996000.0)
  (set! *med-res-training-sg* v1-11)
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 368)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 18
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 2.5
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef 3276.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 6963.2
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 255.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef -8.533334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x21
     :flags #x1
     :initial-valuef -0.08888889
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -0.13653333
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x2d0)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x2
     :random-rangef (the-as float #x3)
     :random-multf 16384.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 8192.0
     :random-rangef 71680.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 369)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 24
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 3.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 2048.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 255.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x19
     :flags #x1
     :initial-valuef -40.96
     :random-rangef 81.92
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 207.53067
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1b
     :flags #x1
     :initial-valuef -40.96
     :random-rangef 81.92
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef 6.826667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -546.13336
     :random-rangef 1092.2667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x21
     :flags #x1
     :initial-valuef -0.35555556
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x22
     :flags #x1
     :initial-valuef -0.35555556
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef 0.35555556
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #xa5)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x2
     :initial-valuef -8192.0
     :random-rangef (the-as float #x3)
     :random-multf 16384.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 370)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 23
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 5.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 6963.2
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 255.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x19
     :flags #x1
     :initial-valuef -109.22667
     :random-rangef 314.02667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef -27.306667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1b
     :flags #x1
     :initial-valuef -204.8
     :random-rangef 409.6
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef -34.133335
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -546.13336
     :random-rangef 1092.2667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x21
     :flags #x1
     :initial-valuef -0.17777778
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -4.096
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #xb4)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x2
     :initial-valuef -8192.0
     :random-rangef (the-as float #x3)
     :random-multf 16384.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 43417.6
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 371)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 3.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef 22528.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 255.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 196.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x19
     :flags #x1
     :initial-valuef -27.306667
     :random-rangef 109.22667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 30.037334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef -34.133335
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -182.04443
     :random-rangef 364.08887
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x21
     :flags #x1
     :initial-valuef -0.17777778
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -1.0888889
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #xa5)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :random-rangef 9420.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; definition of type windmill-sail
(deftype windmill-sail (process-drawable)
  ((root-override trsq                             :offset        112)
   (sync          sync-info                :inline :offset-assert 176)
   (blade-normal  vector                   :inline :offset-assert 192)
   (orig-quat     quaternion               :inline :offset-assert 208)
   (alt-actor     entity-actor                     :offset-assert 224)
   (part2         sparticle-launch-control         :offset-assert 228)
   )
  :heap-base #x80
  :method-count-assert 20
  :size-assert         #xe8
  :flag-assert         #x14008000e8
  )

;; definition for method 3 of type windmill-sail
(defmethod inspect windmill-sail ((obj windmill-sail))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tsync: #<sync-info @ #x~X>~%" (-> obj sync))
  (format #t "~T~Tblade-normal: #<vector @ #x~X>~%" (-> obj blade-normal))
  (format #t "~T~Torig-quat: #<quaternion @ #x~X>~%" (-> obj orig-quat))
  (format #t "~T~Talt-actor: ~A~%" (-> obj alt-actor))
  (format #t "~T~Tpart2: ~A~%" (-> obj part2))
  obj
  )

;; definition for method 7 of type windmill-sail
;; INFO: Return type mismatch process-drawable vs windmill-sail.
(defmethod relocate windmill-sail ((obj windmill-sail) (arg0 int))
  (if (nonzero? (-> obj part2))
   (&+! (-> obj part2) arg0)
   )
  (the-as windmill-sail ((method-of-type process-drawable relocate) obj arg0))
  )

;; definition for method 10 of type windmill-sail
(defmethod deactivate windmill-sail ((obj windmill-sail))
  (if (nonzero? (-> obj part2))
   (deactivate (-> obj part2))
   )
  ((method-of-type process-drawable deactivate) obj)
  (none)
  )

;; failed to figure out what this is:
(let
  ((v1-17
    (new 'static 'skeleton-group
     :art-group-name "windmill-sail"
     :bounds (new 'static 'vector :w 86016.0)
     :max-lod 2
     :longest-edge (meters 14.9)
     :version #x6
     )
    )
   )
  (set! (-> v1-17 jgeo) 0)
  (set! (-> v1-17 janim) 4)
  (set! (-> v1-17 mgeo 0) (the-as uint 1))
  (set! (-> v1-17 lod-dist 0) 81920.0)
  (set! (-> v1-17 mgeo 1) (the-as uint 2))
  (set! (-> v1-17 lod-dist 1) 163840.0)
  (set! (-> v1-17 mgeo 2) (the-as uint 3))
  (set! (-> v1-17 lod-dist 2) 4095996000.0)
  (set! *windmill-sail-sg* v1-17)
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 123)
  (new 'static 'sparticle-launch-group
   :length 4
   :duration #xbb8
   :linger-duration #x5dc
   :name "group-win-wind-mill"
   :launcher
   (new 'static 'inline-array sparticle-group-item 4
    (new 'static 'sparticle-group-item
     :launcher #x170
     :fade-after (meters 100.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x171
     :fade-after (meters 100.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x172
     :fade-after (meters 200.0)
     )
    (new 'static 'sparticle-group-item
     :launcher #x173
     :fade-after (meters 200.0)
     )
    )
   :bounds (new 'static 'sphere :w 81920.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 124)
  (new 'static 'sparticle-launch-group
   :length 4
   :duration #xbb8
   :linger-duration #x5dc
   :name "group-win-wind-mill-hires"
   :launcher
   (new 'static 'inline-array sparticle-group-item 4
    (new 'static 'sparticle-group-item :launcher #x170)
    (new 'static 'sparticle-group-item :launcher #x171)
    (new 'static 'sparticle-group-item :launcher #x172)
    (new 'static 'sparticle-group-item :launcher #x173)
    )
   :bounds (new 'static 'sphere :w 81920.0)
   )
  )

;; failed to figure out what this is:
(defstate windmill-sail-idle (windmill-sail)
  :trans
  (behavior ()
   (cond
    ((task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
     (let ((f30-0 (get-current-value (-> self sync) 65536.0)))
      (set! (-> self sync period) (the-as uint 4800))
      (quaternion-axis-angle!
       (-> self root-override quat)
       (-> self blade-normal x)
       (-> self blade-normal y)
       (-> self blade-normal z)
       f30-0
       )
      (quaternion*!
       (-> self root-override quat)
       (-> self root-override quat)
       (-> self orig-quat)
       )
      (quaternion-normalize! (-> self root-override quat))
      (set! (-> *part-id-table* 368 init-specs 15 initial-valuef) f30-0)
      )
     (dummy-11 (if (movie?)
                (-> self part2)
                (-> self part)
                )
      (-> self root-override trans)
      )
     (if (nonzero? (-> self sound))
      (change-sound! (-> self sound) (static-sound-name "mayors-gears"))
      )
     )
    (else
     (set! (-> self sync period) (the-as uint #x15f90))
     (let ((f0-3 (get-current-value (-> self sync) 65536.0)))
      (quaternion-axis-angle!
       (-> self root-override quat)
       (-> self blade-normal x)
       (-> self blade-normal y)
       (-> self blade-normal z)
       f0-3
       )
      )
     (quaternion*!
      (-> self root-override quat)
      (-> self root-override quat)
      (-> self orig-quat)
      )
     (quaternion-normalize! (-> self root-override quat))
     )
    )
   (if (nonzero? (-> self sound))
    (update! (-> self sound))
    )
   (if (= (-> self draw cur-lod) (-> self draw lod-set max-lod))
    (logior! (-> self draw status) 64)
    (set! (-> self draw status) (logand -65 (-> self draw status)))
    )
   (none)
   )
  :code
  (the-as (function none :behavior windmill-sail) anim-loop)
  :post
  (the-as (function none :behavior windmill-sail) ja-post)
  )

;; definition for method 11 of type windmill-sail
(defmethod copy-defaults! windmill-sail ((obj windmill-sail) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (load-params! (-> obj sync) obj (the-as uint 4800) 0.0 0.15 0.15)
  (set! (-> obj root-override) (new 'process 'trsq))
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (dummy-14 obj *windmill-sail-sg* '())
  (quaternion-copy! (-> obj orig-quat) (-> obj root-override quat))
  (vector-x-quaternion! (-> obj blade-normal) (-> obj root-override quat))
  (vector-normalize! (-> obj blade-normal) 1.0)
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 123) obj)
   )
  (set!
   (-> obj part2)
   (create-launch-control (-> *part-group-id-table* 124) obj)
   )
  (set!
   (-> obj sound)
   (new 'process 'ambient-sound arg0 (-> obj root-override trans))
   )
  (go windmill-sail-idle)
  (none)
  )

;; definition of type sagesail
(deftype sagesail (process-drawable)
  ((root-override trsq               :offset        112)
   (sync          sync-info  :inline :offset-assert 176)
   (blade-normal  vector     :inline :offset-assert 192)
   (orig-quat     quaternion :inline :offset-assert 208)
   )
  :heap-base #x70
  :method-count-assert 20
  :size-assert         #xe0
  :flag-assert         #x14007000e0
  )

;; definition for method 3 of type sagesail
(defmethod inspect sagesail ((obj sagesail))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tsync: #<sync-info @ #x~X>~%" (-> obj sync))
  (format #t "~T~Tblade-normal: #<vector @ #x~X>~%" (-> obj blade-normal))
  (format #t "~T~Torig-quat: #<quaternion @ #x~X>~%" (-> obj orig-quat))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-22
    (new 'static 'skeleton-group
     :art-group-name "sagesail"
     :bounds (new 'static 'vector :w 104448.0)
     :max-lod 2
     :longest-edge (meters 24.2)
     :version #x6
     )
    )
   )
  (set! (-> v1-22 jgeo) 0)
  (set! (-> v1-22 janim) 4)
  (set! (-> v1-22 mgeo 0) (the-as uint 1))
  (set! (-> v1-22 lod-dist 0) 81920.0)
  (set! (-> v1-22 mgeo 1) (the-as uint 2))
  (set! (-> v1-22 lod-dist 1) 163840.0)
  (set! (-> v1-22 mgeo 2) (the-as uint 3))
  (set! (-> v1-22 lod-dist 2) 4095996000.0)
  (set! *sagesail-sg* v1-22)
  )

;; failed to figure out what this is:
(defstate sagesail-idle (sagesail)
  :trans
  (behavior ()
   (let ((f0-0 (get-current-value (-> self sync) 65536.0)))
    (quaternion-axis-angle!
     (-> self root-override quat)
     (-> self blade-normal x)
     (-> self blade-normal y)
     (-> self blade-normal z)
     f0-0
     )
    )
   (quaternion*!
    (-> self root-override quat)
    (-> self root-override quat)
    (-> self orig-quat)
    )
   (quaternion-normalize! (-> self root-override quat))
   (none)
   )
  :code
  (the-as (function none :behavior sagesail) anim-loop)
  :post
  (the-as (function none :behavior sagesail) ja-post)
  )

;; definition for method 11 of type sagesail
(defmethod copy-defaults! sagesail ((obj sagesail) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (load-params! (-> obj sync) obj (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> obj root-override) (new 'process 'trsq))
  (process-drawable-from-entity! obj arg0)
  (logclear! (-> obj mask) (process-mask actor-pause))
  (dummy-14 obj *sagesail-sg* '())
  (quaternion-copy! (-> obj orig-quat) (-> obj root-override quat))
  (vector-z-quaternion! (-> obj blade-normal) (-> obj root-override quat))
  (vector-normalize! (-> obj blade-normal) 1.0)
  (go sagesail-idle)
  (none)
  )

;; definition of type windspinner
(deftype windspinner (process-drawable)
  ((blade-normal vector     :inline :offset-assert 176)
   (orig-quat    quaternion :inline :offset-assert 192)
   (angle        float              :offset-assert 208)
   (angle-vel    float              :offset-assert 212)
   )
  :heap-base #x70
  :method-count-assert 20
  :size-assert         #xd8
  :flag-assert         #x14007000d8
  )

;; definition for method 3 of type windspinner
(defmethod inspect windspinner ((obj windspinner))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tblade-normal: #<vector @ #x~X>~%" (-> obj blade-normal))
  (format #t "~T~Torig-quat: #<quaternion @ #x~X>~%" (-> obj orig-quat))
  (format #t "~T~Tangle: ~f~%" (-> obj angle))
  (format #t "~T~Tangle-vel: ~f~%" (-> obj angle-vel))
  obj
  )

;; definition for method 12 of type windspinner
(defmethod run-logic? windspinner ((obj windspinner))
  (or
   (zero? (logand (-> obj mask) (process-mask actor-pause)))
   (or
    (and
     (nonzero? (-> obj draw))
     (logtest? (-> obj draw status) 8)
     (>=
      (+ (-> *ACTOR-bank* pause-dist) (-> obj root pause-adjust-distance))
      (vector-vector-distance (-> obj root trans) (math-camera-pos))
      )
     )
    (and
     (nonzero? (-> obj skel))
     (!= (-> obj skel root-channel 0) (-> obj skel channel))
     )
    (and (nonzero? (-> obj draw)) (logtest? (-> obj draw status) 16))
    )
   )
  )

;; failed to figure out what this is:
(let
  ((v1-25
    (new 'static 'skeleton-group
     :art-group-name "windspinner"
     :bounds (new 'static 'vector :w 32768.0)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-25 jgeo) 0)
  (set! (-> v1-25 janim) 3)
  (set! (-> v1-25 mgeo 0) (the-as uint 1))
  (set! (-> v1-25 lod-dist 0) 81920.0)
  (set! (-> v1-25 mgeo 1) (the-as uint 2))
  (set! (-> v1-25 lod-dist 1) 4095996000.0)
  (set! *windspinner-sg* v1-25)
  )

;; failed to figure out what this is:
(defstate windspinner-idle (windspinner)
  :trans
  (behavior ()
   (let* ((f0-0 0.992)
          (f1-0 0.008090864)
          (a0-0 (-> self root trans))
          (f0-1
           (*
            f0-0
            (+
             (*
              f1-0
              (->
               *wind-work*
               wind-force
               (logand
                (+
                 (the int (-> a0-0 x))
                 (the int (-> a0-0 z))
                 (-> *wind-work* wind-time)
                 )
                63
                )
               )
              )
             (-> self angle-vel)
             )
            )
           )
          )
    (if (< 291.27112 f0-1)
     (set! f0-1 291.27112)
     )
    (set! (-> self angle-vel) f0-1)
    )
   (let ((f0-3 (+ (-> self angle) (-> self angle-vel))))
    (set!
     (-> self angle)
     (- f0-3 (* (the float (the int (/ f0-3 65536.0))) 65536.0))
     )
    )
   (quaternion-axis-angle!
    (-> self root quat)
    (-> self blade-normal x)
    (-> self blade-normal y)
    (-> self blade-normal z)
    (-> self angle)
    )
   (quaternion*! (-> self root quat) (-> self root quat) (-> self orig-quat))
   (quaternion-normalize! (-> self root quat))
   (none)
   )
  :code
  (the-as (function none :behavior windspinner) anim-loop)
  :post
  (the-as (function none :behavior windspinner) ja-post)
  )

;; definition for method 11 of type windspinner
(defmethod copy-defaults! windspinner ((obj windspinner) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (set! (-> obj angle) 0.0)
  (set! (-> obj angle-vel) 145.63556)
  (set! (-> obj root) (the-as trsqv (new 'process 'trsq)))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *windspinner-sg* '())
  (set! (-> obj root pause-adjust-distance) 819200.0)
  (quaternion-copy! (-> obj orig-quat) (-> obj root quat))
  (vector-y-quaternion! (-> obj blade-normal) (-> obj root quat))
  (vector-normalize! (-> obj blade-normal) 1.0)
  (go windspinner-idle)
  (none)
  )

;; definition of type mayorgears
(deftype mayorgears (process-drawable)
  ((alt-actor entity-actor  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  )

;; definition for method 3 of type mayorgears
(defmethod inspect mayorgears ((obj mayorgears))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Talt-actor: ~A~%" (-> obj alt-actor))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-28
    (new 'static 'skeleton-group
     :art-group-name "mayorgears"
     :bounds (new 'static 'vector :w 18432.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-28 jgeo) 0)
  (set! (-> v1-28 janim) 2)
  (set! (-> v1-28 mgeo 0) (the-as uint 1))
  (set! (-> v1-28 lod-dist 0) 4095996000.0)
  (set! *mayorgears-sg* v1-28)
  )

;; failed to figure out what this is:
(defstate mayorgears-idle (mayorgears)
  :code
  (behavior ()
   (while #t
    (cond
     ((task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
      (let ((a0-1 (-> self skel root-channel 0)))
       (set! (-> a0-1 param 0) 1.0)
       (joint-control-channel-group-eval!
        a0-1
        (the-as art-joint-anim #f)
        num-func-loop!
        )
       )
      )
     (else
      (let ((a0-2 (-> self skel root-channel 0)))
       (set! (-> a0-2 param 0) 0.0)
       (joint-control-channel-group-eval!
        a0-2
        (the-as art-joint-anim #f)
        num-func-loop!
        )
       )
      )
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior mayorgears) ja-post)
  )

;; definition for method 11 of type mayorgears
(defmethod copy-defaults! mayorgears ((obj mayorgears) (arg0 res-lump))
  (set! (-> obj mask) (logior (process-mask ambient) (-> obj mask)))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *mayorgears-sg* '())
  (set! (-> obj draw shadow-mask) (the-as uint 255))
  (go mayorgears-idle)
  (none)
  )

;; definition of type reflector-middle
(deftype reflector-middle (process-drawable)
  ((reflector-trans      vector :inline :offset-assert 176)
   (next-reflector-trans vector :inline :offset-assert 192)
   )
  :heap-base #x60
  :method-count-assert 20
  :size-assert         #xd0
  :flag-assert         #x14006000d0
  )

;; definition for method 3 of type reflector-middle
(defmethod inspect reflector-middle ((obj reflector-middle))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Treflector-trans: ~`vector`P~%" (-> obj reflector-trans))
  (format
   #t
   "~T~Tnext-reflector-trans: ~`vector`P~%"
   (-> obj next-reflector-trans)
   )
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-31
    (new 'static 'skeleton-group
     :art-group-name "reflector-middle"
     :bounds
     (new 'static 'vector :y 69632.0 :w 69632.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-31 jgeo) 0)
  (set! (-> v1-31 janim) 2)
  (set! (-> v1-31 mgeo 0) (the-as uint 1))
  (set! (-> v1-31 lod-dist 0) 4095996000.0)
  (set! *reflector-middle-sg* v1-31)
  )

;; failed to figure out what this is:
(defstate reflector-middle-idle (reflector-middle)
  :trans
  (behavior ()
   (when (task-closed? (game-task jungle-lurkerm) (task-status need-reminder))
    (process-entity-status! self (entity-perm-status complete) #t)
    (draw-eco-beam (-> self reflector-trans) (-> self next-reflector-trans))
    )
   (none)
   )
  :code
  (the-as (function none :behavior reflector-middle) anim-loop)
  :post
  (the-as (function none :behavior reflector-middle) ja-post)
  )

;; definition for method 11 of type reflector-middle
;; Used lq/sq
(defmethod
  copy-defaults!
  reflector-middle
  ((obj reflector-middle) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *reflector-middle-sg* '())
  (logclear! (-> obj mask) (process-mask actor-pause))
  (set! (-> obj link) (new 'process 'actor-link-info obj))
  (set! (-> obj reflector-trans quad) (-> obj root trans quad))
  (+! (-> obj reflector-trans y) (res-lump-float arg0 'height-info))
  (let ((a0-10 (-> obj link next)))
   (when a0-10
    (set! (-> obj next-reflector-trans quad) (-> a0-10 extra trans quad))
    (+! (-> obj next-reflector-trans y) (res-lump-float a0-10 'height-info))
    )
   )
  (logior! (-> obj draw status) 64)
  (go reflector-middle-idle)
  (none)
  )

;; definition of type reflector-end
(deftype reflector-end (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  )

;; definition for method 3 of type reflector-end
(defmethod inspect reflector-end ((obj reflector-end))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(defstate reflector-end-idle (reflector-end)
  :code
  (the-as (function none :behavior reflector-end) anim-loop)
  )

;; definition for method 11 of type reflector-end
(defmethod copy-defaults! reflector-end ((obj reflector-end) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (go reflector-end-idle)
  (none)
  )

;; definition of type villa-starfish
(deftype villa-starfish (process-drawable)
  ((child-count int8  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )

;; definition for method 3 of type villa-starfish
(defmethod inspect villa-starfish ((obj villa-starfish))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tchild-count: ~D~%" (-> obj child-count))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-36
    (new 'static 'skeleton-group
     :art-group-name "villa-starfish"
     :bounds (new 'static 'vector :w 8192.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-36 jgeo) 0)
  (set! (-> v1-36 janim) 2)
  (set! (-> v1-36 mgeo 0) (the-as uint 1))
  (set! (-> v1-36 lod-dist 0) 4095996000.0)
  (set! *starfish-sg* v1-36)
  )

;; definition of type starfish
(deftype starfish (nav-enemy)
  ()
  :heap-base #x120
  :method-count-assert 76
  :size-assert         #x190
  :flag-assert         #x4c01200190
  )

;; definition for method 3 of type starfish
(defmethod inspect starfish ((obj starfish))
  (let ((t9-0 (method-of-type nav-enemy inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(defstate starfish-idle (starfish)
  :enter
  (behavior ()
   (dummy-60 (-> self collide-info) 40960.0 40960.0 #t (the-as uint 1))
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (ja-channel-set! 0)
   (none)
   )
  :exit
  (behavior ()
   (ja-channel-set! 1)
   (none)
   )
  :trans
  (behavior ()
   (if
    (and
     *target*
     (>=
      163840.0
      (vector-vector-distance
       (-> self collide-info trans)
       (-> *target* control trans)
       )
      )
     )
    (go starfish-patrol)
    )
   (none)
   )
  :code
  (behavior ()
   (while #t
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior starfish) ja-post)
  )

;; failed to figure out what this is:
(defstate starfish-patrol (starfish)
  :enter
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (set!
    (-> self nav flags)
    (logior (nav-control-flags bit19) (-> self nav flags))
    )
   (none)
   )
  :trans
  (behavior ()
   (when
    (>=
     (- (-> *display* base-frame-counter) (the-as int (-> self state-time)))
     300
     )
    (if
     (or
      (not *target*)
      (<
       204800.0
       (vector-vector-distance
        (-> self collide-info trans)
        (-> *target* control trans)
        )
       )
      )
     (go starfish-idle)
     )
    )
   (none)
   )
  :code
  (behavior ()
   (set! (-> self target-speed) 4096.0)
   (set! (-> self rotate-speed) 12743.111)
   (set! (-> self turn-time) 150)
   (while #t
    (let ((a0-0 (-> self skel root-channel 0)))
     (set!
      (-> a0-0 frame-group)
      (the-as art-joint-anim (-> self draw art-group data 2))
      )
     (set!
      (-> a0-0 param 0)
      (the
       float
       (+
        (->
         (the-as art-joint-anim (-> self draw art-group data 2))
         data
         0
         length
         )
        -1
        )
       )
      )
     (set! (-> a0-0 param 1) 1.0)
     (set! (-> a0-0 frame-num) 0.0)
     (joint-control-channel-group!
      a0-0
      (the-as art-joint-anim (-> self draw art-group data 2))
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-1 (-> self skel root-channel 0)))
      (set!
       (-> a0-1 param 0)
       (the float (+ (-> a0-1 frame-group data 0 length) -1))
       )
      (set! (-> a0-1 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-1
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  :post
  (the-as (function none :behavior starfish) nav-enemy-patrol-post)
  )

;; definition for symbol *starfish-nav-enemy-info*, type nav-enemy-info
(define
  *starfish-nav-enemy-info*
  (new 'static 'nav-enemy-info
   :idle-anim -1
   :walk-anim -1
   :turn-anim -1
   :notice-anim -1
   :run-anim -1
   :jump-anim -1
   :jump-land-anim -1
   :victory-anim -1
   :taunt-anim -1
   :die-anim -1
   :neck-joint -1
   :player-look-at-joint 5
   :run-travel-speed (meters 1.0)
   :run-rotate-speed (degrees 70.0)
   :run-acceleration (meters 1.0)
   :run-turn-time #x96
   :walk-travel-speed (meters 1.0)
   :walk-rotate-speed (degrees 70.0)
   :walk-acceleration (meters 1.0)
   :walk-turn-time #x96
   :attack-shove-back (meters 3.0)
   :attack-shove-up (meters 2.0)
   :shadow-size (meters 1.0)
   :nav-nearest-y-threshold (meters 10.0)
   :notice-distance (meters 30.0)
   :stop-chase-distance (meters 40.0)
   :frustration-distance (meters 8.0)
   :frustration-time #x4b0
   :die-anim-hold-frame 10000000000.0
   :jump-land-anim-end-frame 10000000000.0
   :jump-height-min (meters 1.0)
   :jump-height-factor 0.5
   :jump-start-anim-speed 1.0
   :shadow-max-y (meters 1.0)
   :shadow-min-y (meters -1.0)
   :shadow-locus-dist (meters 150.0)
   :use-align #f
   :draw-shadow #f
   :move-to-ground #t
   :hover-if-no-ground #f
   :use-momentum #f
   :use-flee #f
   :use-proximity-notice #f
   :use-jump-blocked #f
   :use-jump-patrol #f
   :gnd-collide-with #x1
   :debug-draw-neck #f
   :debug-draw-jump #f
   )
  )

;; definition for method 47 of type starfish
;; INFO: Return type mismatch int vs none.
(defmethod initialize-collision starfish ((obj starfish))
  (set! (-> obj mask) (logior (process-mask enemy) (-> obj mask)))
  (let
   ((s5-0
     (new
      'process
      'collide-shape-moving
      obj
      (collide-list-enum usually-hit-by-player)
      )
     )
    )
   (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
   (set! (-> s5-0 reaction) default-collision-reaction)
   (set! (-> s5-0 no-reaction) nothing)
   (let ((s4-0 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
    (set! (-> s4-0 prim-core offense) 2)
    (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 2457.6)
    )
   (dummy-46 s5-0)
   (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
   (dummy-50 s5-0)
   (set! (-> obj collide-info) s5-0)
   )
  0
  (none)
  )

;; definition for method 48 of type starfish
;; INFO: Return type mismatch int vs none.
(defmethod TODO-RENAME-48 starfish ((obj starfish))
  (dummy-14 obj *starfish-sg* '())
  (TODO-RENAME-45 obj *starfish-nav-enemy-info*)
  0
  (none)
  )

;; definition for function starfish-init-by-other
;; Used lq/sq
(defbehavior starfish-init-by-other starfish ((arg0 starfish) (arg1 vector))
  (initialize-collision self)
  (logior! (-> self mask) (process-mask actor-pause))
  (set! (-> self collide-info trans quad) (-> arg1 quad))
  (quaternion-copy! (-> self collide-info quat) (-> arg0 collide-info quat))
  (vector-identity! (-> self collide-info scale))
  (set! (-> self entity) (-> arg0 entity))
  (TODO-RENAME-48 self)
  (go starfish-idle)
  (none)
  )

;; definition for function process-drawable-child-count
(defbehavior process-drawable-child-count process-drawable ()
  (let ((v0-0 0))
   (let ((v1-0 (-> self child)))
    (while v1-0
     (+! v0-0 1)
     (set! v1-0 (-> v1-0 0 brother))
     (nop!)
     (nop!)
     )
    )
   v0-0
   )
  )

;; definition for function starfish-spawn-child
;; INFO: Return type mismatch (pointer process) vs (pointer starfish).
;; Used lq/sq
(defbehavior starfish-spawn-child starfish ()
  (let ((gp-0 (new-stack-vector0)))
   (get-random-point (-> self path) gp-0)
   (let ((s5-0 (get-process *default-dead-pool* starfish #x4000)))
    (the-as (pointer starfish) (when s5-0
                                (let ((t9-2 (method-of-type starfish activate)))
                                 (t9-2
                                  (the-as starfish s5-0)
                                  self
                                  'starfish
                                  (the-as pointer #x70004000)
                                  )
                                 )
                                (run-now-in-process
                                 s5-0
                                 starfish-init-by-other
                                 self
                                 gp-0
                                 )
                                (-> s5-0 ppointer)
                                )
     )
    )
   )
  )

;; failed to figure out what this is:
(defstate villa-starfish-idle (villa-starfish)
  :code
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (while #t
    (when
     (>=
      (- (-> *display* base-frame-counter) (the-as int (-> self state-time)))
      150
      )
     (set!
      (-> self state-time)
      (the-as seconds (-> *display* base-frame-counter))
      )
     (if
      (and
       (and
        *target*
        (>=
         204800.0
         (vector-vector-distance
          (-> self root trans)
          (-> *target* control trans)
          )
         )
        )
       (< (process-drawable-child-count) (-> self child-count))
       )
      (starfish-spawn-child)
      )
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior villa-starfish) #f)
  )

;; definition for method 11 of type villa-starfish
(defmethod copy-defaults! villa-starfish ((obj villa-starfish) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (let
   ((a1-4
     (res-lump-value arg0 'num-lurkers uint128 :default (the-as uint128 3))
     )
    )
   (set! (-> obj child-count) (max 1 (min 8 (the-as int a1-4))))
   )
  (set! (-> obj path) (new 'process 'path-control obj 'path 0.0))
  (go villa-starfish-idle)
  (none)
  )

;; definition of type village-fish
(deftype village-fish (process-drawable)
  ((child-count int8  :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )

;; definition for method 3 of type village-fish
(defmethod inspect village-fish ((obj village-fish))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tchild-count: ~D~%" (-> obj child-count))
  obj
  )

;; failed to figure out what this is:
(defstate village-fish-idle (village-fish)
  :code
  (behavior ()
   (set!
    (-> self state-time)
    (the-as seconds (-> *display* base-frame-counter))
    )
   (while #t
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior village-fish) #f)
  )

;; definition for method 11 of type village-fish
(defmethod copy-defaults! village-fish ((obj village-fish) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (go village-fish-idle)
  (none)
  )

;; definition of type villa-fisha
(deftype villa-fisha (village-fish)
  ()
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )

;; definition for method 3 of type villa-fisha
(defmethod inspect villa-fisha ((obj villa-fisha))
  (let ((t9-0 (method-of-type village-fish inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition of type villa-fishb
(deftype villa-fishb (village-fish)
  ()
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb1
  :flag-assert         #x14005000b1
  )

;; definition for method 3 of type villa-fishb
(defmethod inspect villa-fishb ((obj villa-fishb))
  (let ((t9-0 (method-of-type village-fish inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition of type cyclegen
(deftype cyclegen (structure)
  ((output float  :offset-assert   0)
   (inc    float  :offset-assert   4)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type cyclegen
(defmethod inspect cyclegen ((obj cyclegen))
  (format #t "[~8x] ~A~%" obj 'cyclegen)
  (format #t "~Toutput: ~f~%" (-> obj output))
  (format #t "~Tinc: ~f~%" (-> obj inc))
  obj
  )

;; definition for function set-period
(defun set-period ((arg0 cyclegen) (arg1 int))
  (let ((f0-1 (/ 5.0 (the float arg1))))
   (set! (-> arg0 inc) f0-1)
   f0-1
   )
  )

;; definition for function update-clock
(defun update-clock ((arg0 cyclegen))
  (let
   ((f0-1
     (+ (-> arg0 output) (* (-> arg0 inc) (-> *display* time-adjust-ratio)))
     )
    )
   (set! (-> arg0 output) (- f0-1 (the float (the int f0-1))))
   )
  (-> arg0 output)
  )

;; definition of type hutlamp
(deftype hutlamp (process-drawable)
  ((pivot joint-mod-set-local         :offset-assert 176)
   (clock cyclegen            :inline :offset-assert 180)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xbc
  :flag-assert         #x14005000bc
  )

;; definition for method 3 of type hutlamp
(defmethod inspect hutlamp ((obj hutlamp))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tpivot: ~A~%" (-> obj pivot))
  (format #t "~T~Tclock: #<cyclegen @ #x~X>~%" (-> obj clock))
  obj
  )

;; definition for method 7 of type hutlamp
;; INFO: Return type mismatch process-drawable vs hutlamp.
(defmethod relocate hutlamp ((obj hutlamp) (arg0 int))
  (if (nonzero? (-> obj pivot))
   (&+! (-> obj pivot) arg0)
   )
  (the-as
   hutlamp
   ((the-as
     (function process-drawable int process-drawable)
     (find-parent-method hutlamp 7)
     )
    obj
    arg0
    )
   )
  )

;; failed to figure out what this is:
(let
  ((v1-53
    (new 'static 'skeleton-group
     :art-group-name "hutlamp"
     :bounds
     (new 'static 'vector :y 4096.0 :w 4915.2)
     :longest-edge (meters 0.7)
     :version #x6
     )
    )
   )
  (set! (-> v1-53 jgeo) 0)
  (set! (-> v1-53 janim) 2)
  (set! (-> v1-53 mgeo 0) (the-as uint 1))
  (set! (-> v1-53 lod-dist 0) 4095996000.0)
  (set! *hutlamp-sg* v1-53)
  )

;; failed to figure out what this is:
(defstate hutlamp-idle (hutlamp)
  :code
  (behavior ()
   (while #t
    (let ((f0-3 (* 1820.4445 (sin (* 65536.0 (update-clock (-> self clock)))))))
     (quaternion-vector-angle! (-> self pivot transform quat) *x-vector* f0-3)
     )
    (suspend)
    )
   (none)
   )
  :post
  (the-as (function none :behavior hutlamp) ja-post)
  )

;; definition for method 11 of type hutlamp
(defmethod copy-defaults! hutlamp ((obj hutlamp) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *hutlamp-sg* '())
  (set! (-> obj pivot) (new 'process 'joint-mod-set-local obj 3 #f #t #f))
  (set-period (-> obj clock) 900)
  (set! (-> obj clock output) (rand-vu))
  (go hutlamp-idle)
  (none)
  )

;; definition of type revcycleprop
(deftype revcycleprop (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 21
  :size-assert         #xb0
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

;; definition for method 3 of type revcycleprop
(defmethod inspect revcycleprop ((obj revcycleprop))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-56
    (new 'static 'skeleton-group
     :art-group-name "revcycleprop"
     :bounds (new 'static 'vector :w 9011.2)
     :version #x6
     )
    )
   )
  (set! (-> v1-56 jgeo) 0)
  (set! (-> v1-56 janim) 2)
  (set! (-> v1-56 mgeo 0) (the-as uint 1))
  (set! (-> v1-56 lod-dist 0) 4095996000.0)
  (set! *revcycleprop-sg* v1-56)
  )

;; failed to figure out what this is:
(defstate idle (revcycleprop)
  :virtual #t
  :code
  (the-as (function none :behavior revcycleprop) anim-loop)
  :post
  (the-as (function none :behavior revcycleprop) ja-post)
  )

;; definition for method 11 of type revcycleprop
(defmethod copy-defaults! revcycleprop ((obj revcycleprop) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *revcycleprop-sg* '())
  (set! (-> obj draw light-index) (the-as uint 1))
  (go (method-of-object obj idle))
  (none)
  )

;; definition of type revcycle
(deftype revcycle (process-drawable)
  ()
  :heap-base #x40
  :method-count-assert 21
  :size-assert         #xb0
  :flag-assert         #x15004000b0
  (:methods
    (idle () _type_ :state 20)
    )
  )

;; definition for method 3 of type revcycle
(defmethod inspect revcycle ((obj revcycle))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-60
    (new 'static 'skeleton-group
     :art-group-name "revcycle"
     :bounds (new 'static 'vector :w 13107.2)
     :version #x6
     )
    )
   )
  (set! (-> v1-60 jgeo) 0)
  (set! (-> v1-60 janim) 2)
  (set! (-> v1-60 mgeo 0) (the-as uint 1))
  (set! (-> v1-60 lod-dist 0) 4095996000.0)
  (set! *revcycle-sg* v1-60)
  )

;; failed to figure out what this is:
(defstate idle (revcycle)
  :virtual #t
  :code
  (the-as (function none :behavior revcycle) anim-loop)
  :post
  (the-as (function none :behavior revcycle) ja-post)
  )

;; definition for method 11 of type revcycle
(defmethod copy-defaults! revcycle ((obj revcycle) (arg0 res-lump))
  (set! (-> obj root) (new 'process 'trsqv))
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *revcycle-sg* '())
  (set! (-> obj draw light-index) (the-as uint 1))
  (go (method-of-object obj idle))
  (none)
  )

;; definition of type villagea-water
(deftype villagea-water (water-anim)
  ()
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  )

;; definition for method 3 of type villagea-water
(defmethod inspect villagea-water ((obj villagea-water))
  (let ((t9-0 (method-of-type water-anim inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition for symbol ripple-for-villagea-water, type ripple-wave-set
(define
  ripple-for-villagea-water
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 4.0
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 10.0 :xdiv 1 :speed 1.5)
    (new 'static 'ripple-wave :scale 10.0 :xdiv -1 :zdiv 1 :speed 1.5)
    (new 'static 'ripple-wave :scale 5.0 :xdiv 5 :zdiv 3 :speed 0.75)
    (new 'static 'ripple-wave)
    )
   )
  )

;; definition for method 22 of type villagea-water
(defmethod TODO-RENAME-22 villagea-water ((obj villagea-water))
  (let ((t9-0 (method-of-type water-anim TODO-RENAME-22)))
   (t9-0 obj)
   )
  (let ((v1-2 (new 'process 'ripple-control)))
   (set! (-> obj draw ripple) v1-2)
   (set-vector! (-> obj draw color-mult) 0.01 0.45 0.5 0.75)
   (set! (-> v1-2 global-scale) 3072.0)
   (set! (-> v1-2 close-fade-dist) 163840.0)
   (set! (-> v1-2 far-fade-dist) 245760.0)
   (let ((v0-2 ripple-for-villagea-water))
    (set! (-> v1-2 waveform) v0-2)
    v0-2
    )
   )
  )
