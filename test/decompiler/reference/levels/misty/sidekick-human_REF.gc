;;-*-Lisp-*-
(in-package goal)

;; definition of type sequenceA
(deftype sequenceA (process-hidden)
  ()
  :method-count-assert 15
  :size-assert         #x70
  :flag-assert         #xf00000070
  )

;; definition for method 3 of type sequenceA
(defmethod inspect sequenceA ((obj sequenceA))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tname: ~A~%" (-> obj name))
  (format #t "~Tmask: ~D~%" (-> obj mask))
  (format #t "~Tparent: #x~X~%" (-> obj parent))
  (format #t "~Tbrother: #x~X~%" (-> obj brother))
  (format #t "~Tchild: #x~X~%" (-> obj child))
  (format #t "~Tppointer: #x~X~%" (-> obj ppointer))
  (format #t "~Tself: ~A~%" (-> obj self))
  (format #t "~Tpool: ~A~%" (-> obj pool))
  (format #t "~Tstatus: ~A~%" (-> obj status))
  (format #t "~Tpid: ~D~%" (-> obj pid))
  (format #t "~Tmain-thread: ~A~%" (-> obj main-thread))
  (format #t "~Ttop-thread: ~A~%" (-> obj top-thread))
  (format #t "~Tentity: ~A~%" (-> obj entity))
  (format #t "~Tstate: ~A~%" (-> obj state))
  (format #t "~Ttrans-hook: ~A~%" (-> obj trans-hook))
  (format #t "~Tpost-hook: ~A~%" (-> obj post-hook))
  (format #t "~Tevent-hook: ~A~%" (-> obj event-hook))
  (format #t "~Tallocated-length: ~D~%" (-> obj allocated-length))
  (format #t "~Tnext-state: ~A~%" (-> obj next-state))
  (format #t "~Theap-base: #x~X~%" (-> obj heap-base))
  (format #t "~Theap-top: #x~X~%" (-> obj heap-top))
  (format #t "~Theap-cur: #x~X~%" (-> obj heap-cur))
  (format #t "~Tstack-frame-top: ~A~%" (-> obj stack-frame-top))
  (format #t "~Theap: #<kheap @ #x~X>~%" (&-> obj heap-base))
  (format #t "~Tconnection-list: ~`'connectable`P~%" (-> obj connection-list))
  (format #t "~Tstack[0] @ #x~X~%" (-> obj stack))
  obj
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 657)
  (new 'static 'sparticle-launch-group
   :length 8
   :duration #xbb8
   :linger-duration #x5dc
   :flags (sp-group-flag screen-space)
   :name "group-2d-intro-mist"
   :launcher
   (new 'static 'inline-array sparticle-group-item 8
    (sp-item 2665 :period 300 :length 5 :binding 2663)
    (sp-item 2663 :flags (start-dead launch-asap) :binding 2664)
    (sp-item 2663 :flags (start-dead launch-asap) :binding 2664)
    (sp-item 2664 :flags (start-dead))
    (sp-item 2664 :flags (start-dead))
    (sp-item 2664 :flags (start-dead))
    (sp-item 2666)
    (sp-item 2667)
    )
   :bounds (new 'static 'sphere :w 8192.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2665)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 13
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters -2.5) (meters 5.0) 1.0)
    (sp-rnd-flt spt-y (meters -1.5) (meters 3.0) 1.0)
    (sp-flt spt-scale-x (meters 0.1))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-g 128.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.0033333334) (meters 0.0033333334) 1.0)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit3)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2663)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 20
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters 0.0) (meters 16.0) 1.0)
    (sp-rnd-flt spt-y (meters 0.0) (meters 16.0) 1.0)
    (sp-rnd-flt spt-z 2048.0 819.2 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 0.0 96.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-rnd-flt spt-omega 0.0 65536.0 1.0)
    (sp-rnd-int-flt spt-vel-x (meters -0.053333335) 1 436.90668)
    (sp-flt spt-scalevel-x (meters -0.0012121212))
    (sp-rnd-int-flt spt-rotvel-z (degrees -0.3) 1 109.22667)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit3 bit7)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2664)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 16
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.3) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 32.0 96.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-flt spt-scalevel-x (meters -0.0010952381))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-accel-y 0.0 -0.13653333 1.0)
    (sp-int-plain-rnd spt-timer 30 299 1)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-int spt-next-time 240)
    (sp-launcher-by-id spt-next-launcher 198)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2667)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 12
    (sp-tex spt-texture (new 'static 'texture-id :index #x36 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-flt spt-z -16000.0)
    (sp-flt spt-scale-x (meters 15.0))
    (sp-flt spt-scale-y (meters 12.0))
    (sp-flt spt-r 0.0)
    (sp-flt spt-g 0.0)
    (sp-flt spt-b 0.0)
    (sp-flt spt-a 128.0)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2666)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 21
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.3)
    (sp-rnd-flt spt-x (meters -4.0) (meters 8.0) 1.0)
    (sp-rnd-flt spt-y (meters -3.0) (meters 6.0) 1.0)
    (sp-rnd-flt spt-z 0.0 14000.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 6.0) (meters 8.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-scale-y (meters 6.0) (meters 8.0) 1.0)
    (sp-rnd-flt spt-r 16.0 80.0 1.0)
    (sp-rnd-flt spt-g 0.0 16.0 1.0)
    (sp-rnd-flt spt-b 16.0 150.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-scalevel-x (meters -0.0016666667) (meters 0.0033333334) 1.0)
    (sp-rnd-flt spt-rotvel-z (degrees -0.075) (degrees 0.15) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 1500)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int-plain-rnd spt-next-time 150 149 1)
    (sp-launcher-by-id spt-next-launcher 2668)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2668)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 4
    (sp-flt spt-fade-a 0.0)
    (sp-int-plain-rnd spt-next-time 300 299 1)
    (sp-launcher-by-id spt-next-launcher 2669)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2669)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (sp-flt spt-fade-a -0.21333334)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 557)
  (new 'static 'sparticle-launch-group
   :length #x101
   :duration #x384
   :linger-duration #x5dc
   :flags (sp-group-flag use-local-clock)
   :name "group-evilsib-appear"
   :launcher
   (new 'static 'inline-array sparticle-group-item 257
    (sp-item 2345 :period 1500 :length 20 :offset 1500)
    (sp-item 2346 :period 1500 :length 20 :offset 1500)
    (sp-item 2347 :period 1500 :length 5 :offset 1500)
    (sp-item 2348 :period 1500 :length 20 :offset 1500)
    (sp-item 2349 :period 1500 :length 900 :offset 750 :binding 2344)
    (sp-item 2350 :period 1500 :length 750 :offset 600 :binding 2344)
    (sp-item 2351 :period 1500 :length 600 :offset 450 :binding 2344)
    (sp-item 2351 :period 1500 :length 450 :offset 300 :binding 2344)
    (sp-item 2352 :period 1500 :length 300 :offset 150 :binding 2344)
    (sp-item 2352 :period 1500 :length 150 :binding 2344)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2344 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    )
   :bounds (new 'static 'sphere :w 262144.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2349)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 18
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0.0) (meters 0.1) 1.0)
    (sp-rnd-flt spt-y (meters -1.0) (meters 4.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit14)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2353)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (sp-flt spt-fade-a -0.21333334)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2350)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 21
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0.0) (meters 0.1) 1.0)
    (sp-rnd-flt spt-y (meters -1.0) (meters 4.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int spt-next-time 300)
    (sp-launcher-by-id spt-next-launcher 2353)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2351)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 21
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0.0) (meters 0.3) 1.0)
    (sp-rnd-flt spt-y (meters 0.0) (meters 2.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int spt-next-time 300)
    (sp-launcher-by-id spt-next-launcher 2353)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2352)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 21
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.5)
    (sp-rnd-flt spt-x (meters 0.0) (meters 0.5) 1.0)
    (sp-rnd-flt spt-y (meters -0.5) (meters 1.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.5) (meters 0.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-scalevel-x (meters 0.0033333334))
    (sp-rnd-flt spt-rotvel-z (degrees -0.2) (degrees 0.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.21333334)
    (sp-int spt-timer 600)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int spt-next-time 300)
    (sp-launcher-by-id spt-next-launcher 2353)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2344)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 24
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters 0.0) (meters 16.0) 1.0)
    (sp-rnd-flt spt-y (meters 0.0) (meters 16.0) 1.0)
    (sp-rnd-flt spt-z 20480.0 6144.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.05) (meters 0.05) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-rnd-flt spt-omega 0.0 65536.0 1.0)
    (sp-rnd-flt spt-vel-x (meters -0.074074075) (meters 0.14814815) 1.0)
    (sp-flt spt-vel-y (meters 0.0))
    (sp-flt spt-vel-z (meters -0.015))
    (sp-flt spt-scalevel-x (meters 0.0005))
    (sp-rnd-flt spt-rotvel-z (degrees -0.53333336) (degrees 1.0666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit3 bit7 bit14)
    (sp-int spt-next-time 270)
    (sp-launcher-by-id spt-next-launcher 2354)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2354)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (sp-flt spt-fade-a -3.2)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2345)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 25
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 1.0) (meters 2.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.2) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.0) (meters 0.21333334) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00066666666))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-g -0.42666668)
    (sp-rnd-flt spt-accel-y -0.68266666 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.8 0.05 1.0)
    (sp-int spt-timer 1500)
    (sp-cpuinfo-flags bit0 bit2 bit14)
    (sp-int-plain-rnd spt-next-time 30 749 1)
    (sp-launcher-by-id spt-next-launcher 2355)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.0) (meters 2.0) 1.0)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2355)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 3
    (sp-flt spt-fade-g 0.0)
    (sp-flt spt-fade-a 0.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2346)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 25
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-y (meters 0.0) (meters 3.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.4) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.0) (meters 0.026666667) 1.0)
    (sp-flt spt-scalevel-x (meters -0.00066666666))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-g -0.42666668)
    (sp-rnd-flt spt-accel-y -0.68266666 -3.4133334 1.0)
    (sp-rnd-flt spt-friction 0.75 0.05 1.0)
    (sp-int spt-timer 1500)
    (sp-cpuinfo-flags bit0 bit2 bit14)
    (sp-int-plain-rnd spt-next-time 30 749 1)
    (sp-launcher-by-id spt-next-launcher 2355)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.5) (meters 1.0) 1.0)
    (sp-rnd-flt spt-rotate-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2347)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 14
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-flt spt-y (meters 2.0))
    (sp-rnd-flt spt-scale-x (meters 28.0) (meters 4.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 128.0 64.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-flt spt-fade-g -2.3272727)
    (sp-flt spt-fade-a -2.3272727)
    (sp-int spt-timer 5)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2348)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 17
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 2.0)
    (sp-rnd-flt spt-y (meters 0.5) (meters 2.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.25) (meters 0.1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-scale-y (meters 16.0))
    (sp-flt spt-r 255.0)
    (sp-flt spt-g 128.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-flt spt-scalevel-y (meters 0.6))
    (sp-flt spt-fade-r -2.1333334)
    (sp-flt spt-fade-g -2.1333334)
    (sp-flt spt-fade-a -1.0666667)
    (sp-int spt-timer 60)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 558)
  (new 'static 'sparticle-launch-group
   :length 79
   :duration #xbb8
   :linger-duration #x5dc
   :flags (sp-group-flag use-local-clock)
   :name "group-evilsib-hover"
   :launcher
   (new 'static 'inline-array sparticle-group-item 79
    (sp-item 2386 :binding 2385)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2385 :flags (bit1 start-dead launch-asap) :binding 2384)
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    (sp-item 2384 :flags (bit1 start-dead))
    )
   :bounds (new 'static 'sphere :w 32768.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2386)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 11
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-y (meters 0.25) (meters 1.5) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.2) (meters 0.5) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-flt spt-accel-y -2.048)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2385)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 25
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-x (meters 0.0) (meters 16.0) 1.0)
    (sp-flt spt-y (meters 0.0))
    (sp-rnd-flt spt-z 1024.0 1024.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.05) (meters 0.025) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-omega 0.0 65536.0 1.0)
    (sp-rnd-flt spt-vel-x (meters -0.04444444) (meters 0.08888888) 1.0)
    (sp-flt spt-vel-y (meters 0.0))
    (sp-flt spt-vel-z (meters 0.0027777778))
    (sp-flt spt-scalevel-x (meters 0.00027777778))
    (sp-rnd-flt spt-rotvel-z (degrees -0.53333336) (degrees 1.0666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 4.266667)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit3 bit7 bit14)
    (sp-int-plain-rnd spt-next-time 30 14 1)
    (sp-launcher-by-id spt-next-launcher 2388)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2388)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 4
    (sp-flt spt-fade-a 0.0)
    (sp-int spt-next-time 150)
    (sp-launcher-by-id spt-next-launcher 2389)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2389)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 5
    (sp-flt spt-vel-z (meters -0.008333334))
    (sp-flt spt-scalevel-x (meters -0.00041666668))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -1.0666667)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2384)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 17
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 0.1)
    (sp-rnd-flt spt-scale-x (meters 0.4) (meters 0.2) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 64.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 64.0 1.0)
    (sp-rnd-flt spt-a 64.0 32.0 1.0)
    (sp-flt spt-scalevel-x (meters -0.03))
    (sp-rnd-flt spt-rotvel-z (degrees -0.53333336) (degrees 1.0666667) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -4.8)
    (sp-flt spt-accel-y -1.3653333)
    (sp-int spt-timer 15)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 560)
  (new 'static 'sparticle-launch-group
   :length 1
   :duration #x384
   :linger-duration #x5dc
   :flags (sp-group-flag use-local-clock)
   :name "group-sequenceC-glowing-can"
   :launcher
   (new 'static 'inline-array sparticle-group-item 1 (sp-item 2298))
   :bounds (new 'static 'sphere :w 262144.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2298)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 18
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 0.0)
    (sp-rnd-flt spt-x (meters -0.25) (meters 0.5) 1.0)
    (sp-rnd-flt spt-y (meters -0.25) (meters 0.5) 1.0)
    (sp-rnd-flt spt-z -1024.0 2048.0 1.0)
    (sp-rnd-flt spt-scale-x (meters 1.0) (meters 1.0) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-r 0.0)
    (sp-rnd-flt spt-g 96.0 32.0 1.0)
    (sp-flt spt-b 0.0)
    (sp-rnd-flt spt-a 32.0 32.0 1.0)
    (sp-flt spt-vel-y (meters 0.0))
    (sp-rnd-flt spt-rotvel-z (degrees -1.2) (degrees 2.4) 1.0)
    (sp-flt spt-fade-a -0.42666668)
    (sp-int spt-timer 150)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 561)
  (new 'static 'sparticle-launch-group
   :length 69
   :duration #x384
   :linger-duration #x5dc
   :flags (sp-group-flag use-local-clock)
   :name "group-sequenceC-exploding-can"
   :launcher
   (new 'static 'inline-array sparticle-group-item 69
    (sp-item 2785 :period 1800 :length 5)
    (sp-item 2786 :period 1800 :length 40)
    (sp-item 2787 :period 1800 :length 20)
    (sp-item 2788 :period 1800 :length 20)
    (sp-item 2830 :fade-after (meters 100.0) :period 600 :length 5 :binding 296)
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    )
   :bounds (new 'static 'sphere :w 262144.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2830)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 16
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 32.0)
    (sp-rnd-flt spt-x (meters -2.0) (meters 4.0) 1.0)
    (sp-rnd-flt spt-y (meters 1.0) (meters 2.0) 1.0)
    (sp-rnd-flt spt-z -8192.0 16384.0 1.0)
    (sp-flt spt-scale-x (meters 0.1))
    (sp-copy-from-other spt-scale-y -4)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.053333335) (meters 0.026666667) 1.0)
    (sp-flt spt-accel-y -1.3653333)
    (sp-flt spt-friction 0.94)
    (sp-int spt-timer 240)
    (sp-cpuinfo-flags bit3)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 140.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2786)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 12.0)
    (sp-rnd-flt spt-y (meters -1.5) (meters 3.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.4) (meters 0.8) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-rnd-flt spt-a 32.0 96.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.04) (meters 0.16) 1.0)
    (sp-flt spt-scalevel-x (meters -0.0026666666))
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-rnd-flt spt-accel-y -0.68266666 -0.68266666 1.0)
    (sp-flt spt-friction 0.9)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-int-plain-rnd spt-next-time 30 89 1)
    (sp-launcher-by-id spt-next-launcher 2789)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 120.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 2.0) (meters 4.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2789)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (sp-flt spt-fade-a -1.0666667)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2788)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 14
    (sp-tex spt-texture (new 'static 'texture-id :index #xf :page #x2))
    (sp-flt spt-num 12.0)
    (sp-flt spt-scale-x (meters 0.3))
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 180.0) 1.0)
    (sp-flt spt-scale-y (meters 12.0))
    (sp-rnd-flt spt-r 128.0 128.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 128.0 64.0 1.0)
    (sp-rnd-flt spt-a 32.0 64.0 1.0)
    (sp-flt spt-scalevel-y (meters 1.04))
    (sp-flt spt-fade-a -1.6)
    (sp-int spt-timer 60)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2785)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 12
    (sp-tex spt-texture (new 'static 'texture-id :index #x12 :page #x2))
    (sp-flt spt-num 1.0)
    (sp-flt spt-scale-x (meters 24.0))
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 192.0 64.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 128.0 128.0 1.0)
    (sp-flt spt-a 128.0)
    (sp-flt spt-fade-a -2.3272727)
    (sp-int spt-timer 54)
    (sp-cpuinfo-flags bit2 bit3 bit14)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2787)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 23
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 16.0)
    (sp-rnd-flt spt-y (meters -1.5) (meters 3.0) 1.0)
    (sp-rnd-flt spt-scale-x (meters 3.0) (meters 1.5) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 0.0 96.0 1.0)
    (sp-rnd-flt spt-g 0.0 32.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-rnd-flt spt-a 64.0 64.0 1.0)
    (sp-rnd-flt spt-vel-y (meters 0.08) (meters 0.04) 1.0)
    (sp-flt spt-scalevel-x (meters 0.02))
    (sp-rnd-flt spt-rotvel-z (degrees -0.6) (degrees 1.2) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a -0.28444445)
    (sp-rnd-flt spt-accel-y 0.68266666 0.68266666 1.0)
    (sp-flt spt-friction 0.8)
    (sp-int spt-timer 510)
    (sp-cpuinfo-flags bit2 bit14)
    (sp-rnd-flt spt-conerot-x (degrees 0.0) (degrees 120.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees 0.0) (degrees 360.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.0) (meters 4.0) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 562)
  (new 'static 'sparticle-launch-group
   :length 36
   :duration #x384
   :linger-duration #x5dc
   :flags (sp-group-flag use-local-clock)
   :name "group-sequenceC-dark-splash"
   :launcher
   (new 'static 'inline-array sparticle-group-item 36
    (sp-item 295 :fade-after (meters 100.0) :period 600 :length 5 :binding 296)
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 296 :flags (start-dead launch-asap) :binding 297)
    (sp-item 297 :fade-after (meters 80.0) :falloff-to (meters 100.0) :flags (start-dead))
    (sp-item 2095 :period 600 :length 5)
    (sp-item 2096 :fade-after (meters 80.0) :falloff-to (meters 80.0) :period 600 :length 40)
    (sp-item 2097 :period 600 :length 20)
    )
   :bounds (new 'static 'sphere :w 262144.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 681)
  (new 'static 'sparticle-launch-group
   :length 1
   :duration #x5
   :linger-duration #x384
   :flags (sp-group-flag use-local-clock)
   :name "group-sequenceC-blow-dust"
   :launcher
   (new 'static 'inline-array sparticle-group-item 1 (sp-item 2790))
   :bounds (new 'static 'sphere :w 262144.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2790)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 24
    (sp-tex spt-texture (new 'static 'texture-id :page #x2))
    (sp-flt spt-num 1.0)
    (sp-rnd-flt spt-scale-x (meters 0.1) (meters 0.1) 1.0)
    (sp-rnd-flt spt-rot-z (degrees 0.0) (degrees 360.0) 1.0)
    (sp-copy-from-other spt-scale-y -4)
    (sp-rnd-flt spt-r 128.0 32.0 1.0)
    (sp-rnd-flt spt-g 96.0 64.0 1.0)
    (sp-rnd-flt spt-b 64.0 32.0 1.0)
    (sp-flt spt-a 0.0)
    (sp-rnd-flt spt-vel-y (meters 0.016666668) (meters 0.0033333334) 1.0)
    (sp-flt spt-scalevel-x (meters 0.006666667))
    (sp-rnd-flt spt-rotvel-z (degrees -1.2) (degrees 2.4) 1.0)
    (sp-copy-from-other spt-scalevel-y -4)
    (sp-flt spt-fade-a 0.4)
    (sp-rnd-flt spt-accel-y 1.3653333 -1.3653333 1.0)
    (sp-flt spt-friction 0.92)
    (sp-int spt-timer 300)
    (sp-cpuinfo-flags bit2 bit3)
    (sp-int-plain-rnd spt-next-time 15 44 1)
    (sp-launcher-by-id spt-next-launcher 2822)
    (sp-rnd-flt spt-conerot-x (degrees 112.99999) (degrees 2.0) 1.0)
    (sp-rnd-flt spt-conerot-y (degrees -12.500001) (degrees 15.0) 1.0)
    (sp-rnd-flt spt-conerot-radius (meters 0.3) (meters -0.5) 1.0)
    (sp-end)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2822)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (sp-flt spt-fade-a -0.1)
    (sp-end)
    )
   )
  )

;; definition of type sequenceB
(deftype sequenceB (process-taskable)
  ((bonelurker  handle   :offset-assert 384)
   (evilbro     handle   :offset-assert 392)
   (evilsis     handle   :offset-assert 400)
   (lurker-army handle 9 :offset-assert 408)
   )
  :heap-base #x170
  :method-count-assert 53
  :size-assert         #x1e0
  :flag-assert         #x35017001e0
  )

;; definition for method 3 of type sequenceB
(defmethod inspect sequenceB ((obj sequenceB))
  (let ((t9-0 (method-of-type process-taskable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tbonelurker: ~D~%" (-> obj bonelurker))
  (format #t "~T~Tevilbro: ~D~%" (-> obj evilbro))
  (format #t "~T~Tevilsis: ~D~%" (-> obj evilsis))
  (format #t "~T~Tlurker-army[9] @ #x~X~%" (-> obj lurker-army))
  obj
  )

;; definition of type sequenceC
(deftype sequenceC (process-taskable)
  ((bonelurker              handle          :offset-assert 384)
   (darkecocan              handle          :offset-assert 392)
   (darkecocan-glowing-look lod-set :inline :offset-assert 400)
   )
  :heap-base #x150
  :method-count-assert 53
  :size-assert         #x1b1
  :flag-assert         #x35015001b1
  )

;; definition for method 3 of type sequenceC
(defmethod inspect sequenceC ((obj sequenceC))
  (let ((t9-0 (method-of-type process-taskable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tbonelurker: ~D~%" (-> obj bonelurker))
  (format #t "~T~Tdarkecocan: ~D~%" (-> obj darkecocan))
  (format
   #t
   "~T~Tdarkecocan-glowing-look: #<lod-set @ #x~X>~%"
   (-> obj darkecocan-glowing-look)
   )
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-46
    (new 'static 'skeleton-group
     :art-group-name "sidekick-human"
     :bounds (new 'static 'vector :w 10240.0)
     :version #x6
     :shadow 2
     )
    )
   )
  (set! (-> v1-46 jgeo) 0)
  (set! (-> v1-46 janim) 3)
  (set! (-> v1-46 mgeo 0) (the-as uint 1))
  (set! (-> v1-46 lod-dist 0) 4095996000.0)
  (set! *sidekick-human-sg* v1-46)
  )

;; failed to figure out what this is:
(let
  ((v1-47
    (new 'static 'skeleton-group
     :art-group-name "darkecocan"
     :bounds (new 'static 'vector :w 4096.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-47 jgeo) 0)
  (set! (-> v1-47 janim) 4)
  (set! (-> v1-47 mgeo 0) (the-as uint 1))
  (set! (-> v1-47 lod-dist 0) 4095996000.0)
  (set! *darkecocan-sg* v1-47)
  )

;; failed to figure out what this is:
(let
  ((v1-48
    (new 'static 'skeleton-group
     :art-group-name "darkecocan"
     :bounds (new 'static 'vector :w 4096.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-48 jgeo) 2)
  (set! (-> v1-48 janim) 4)
  (set! (-> v1-48 mgeo 0) (the-as uint 3))
  (set! (-> v1-48 lod-dist 0) 4095996000.0)
  (set! *darkecocan-glow-sg* v1-48)
  )

;; failed to figure out what this is:
(let
  ((v1-49
    (new 'static 'skeleton-group
     :art-group-name "evilbro"
     :bounds (new 'static 'vector :w 4096.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-49 jgeo) 0)
  (set! (-> v1-49 janim) 3)
  (set! (-> v1-49 mgeo 0) (the-as uint 1))
  (set! (-> v1-49 lod-dist 0) 4095996000.0)
  (set! *evilbro-sg* v1-49)
  )

;; failed to figure out what this is:
(let
  ((v1-50
    (new 'static 'skeleton-group
     :art-group-name "evilsis"
     :bounds (new 'static 'vector :w 4096.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-50 jgeo) 0)
  (set! (-> v1-50 janim) 3)
  (set! (-> v1-50 mgeo 0) (the-as uint 1))
  (set! (-> v1-50 lod-dist 0) 4095996000.0)
  (set! *evilsis-sg* v1-50)
  )

;; definition of type army-info
(deftype army-info (structure)
  ((pos         vector  :offset-assert   0)
   (rot         float   :offset-assert   4)
   (start-frame float   :offset-assert   8)
   (skel        symbol  :offset-assert  12)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type army-info
(defmethod inspect army-info ((obj army-info))
  (format #t "[~8x] ~A~%" obj 'army-info)
  (format #t "~Tpos: #<vector @ #x~X>~%" (-> obj pos))
  (format #t "~Trot: ~f~%" (-> obj rot))
  (format #t "~Tstart-frame: ~f~%" (-> obj start-frame))
  (format #t "~Tskel: ~A~%" (-> obj skel))
  obj
  )

;; definition for symbol *lurker-army*, type (array army-info)
(define
  *lurker-army*
  (the-as (array army-info)
   (new
    'static
    'boxed-array
    :type army-info :length 9 :allocated-length 9
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -920633.4 :y 83546.11 :z 4210409.5)
     :rot 28556.04
     :skel 'babak
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -873488.4 :y 86441.984 :z 4225454.0)
     :rot 37861.24
     :start-frame 5.0
     :skel 'babak
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -905871.4 :y 83132.414 :z 4231934.0)
     :rot 32054.021
     :start-frame 10.0
     :skel 'babak
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -926765.06 :y 83496.96 :z 4236230.5)
     :rot 30001.652
     :start-frame 15.0
     :skel 'babak
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -893345.8 :y 83517.44 :z 4212961.5)
     :rot 32755.074
     :start-frame 20.0
     :skel 'babak
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -842797.06 :y 84041.73 :z 4218855.5)
     :rot 43916.402
     :skel 'bonelurker
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -839274.5 :y 82644.99 :z 4248723.5)
     :rot 40510.715
     :start-frame 6.0
     :skel 'bonelurker
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -871485.44 :y 85909.51 :z 4243181.5)
     :rot 37046.043
     :start-frame 12.0
     :skel 'bonelurker
     )
    (new 'static 'army-info
     :pos
     (new 'static 'vector :x -947523.56 :y 85835.77 :z 4219314.0)
     :rot 26980.078
     :start-frame 18.0
     :skel 'bonelurker
     )
    )
   )
  )

;; definition for function evilsib-trans-hook-hover
;; INFO: Return type mismatch int vs none.
(defbehavior evilsib-trans-hook-hover evilbro ()
  0
  (none)
  )

;; definition for function evilsib-trans-hook-wait
;; INFO: Return type mismatch int vs none.
(defbehavior evilsib-trans-hook-wait evilbro ()
  (when (>= (ja-aframe-num 0) 425.0)
   (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-0
     (let ((t9-2 (method-of-type part-tracker activate)))
      (t9-2
       (the-as part-tracker gp-0)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-0
      part-tracker-init
      (-> *part-group-id-table* 557)
      -1
      #f
      #f
      #f
      (-> self draw origin)
      )
     (-> gp-0 ppointer)
     )
    )
   (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-3 from) self)
    (set! (-> a1-3 num-params) 1)
    (set! (-> a1-3 message) 'trans-hook)
    (set! (-> a1-3 param 0) (the-as uint evilsib-trans-hook-hover))
    (send-event-function self a1-3)
    )
   )
  0
  (none)
  )

;; definition for method 32 of type sequenceB
(defmethod play-anim! sequenceB ((obj sequenceB) (arg0 symbol))
  (with-pp
   (cond
    (arg0
     (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-1 from) pp)
      (set! (-> a1-1 num-params) 1)
      (set! (-> a1-1 message) 'sidekick)
      (set! (-> a1-1 param 0) (the-as uint #f))
      (send-event-function *target* a1-1)
      )
     (let ((s5-0 (get-process *default-dead-pool* manipy #x4000)))
      (set! (-> obj bonelurker) (ppointer->handle (when s5-0
                                                   (let
                                                    ((t9-2
                                                      (method-of-type
                                                       manipy
                                                       activate
                                                       )
                                                      )
                                                     )
                                                    (t9-2
                                                     (the-as manipy s5-0)
                                                     obj
                                                     'manipy
                                                     (the-as pointer #x70004000)
                                                     )
                                                    )
                                                   (run-now-in-process
                                                    s5-0
                                                    manipy-init
                                                    (-> obj root trans)
                                                    (-> obj entity)
                                                    *bonelurker-sg*
                                                    #f
                                                    )
                                                   (-> s5-0 ppointer)
                                                   )
                                 )
       )
      )
     (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-5 from) pp)
      (set! (-> a1-5 num-params) 1)
      (set! (-> a1-5 message) 'anim-mode)
      (set! (-> a1-5 param 0) (the-as uint 'clone-anim))
      (send-event-function (handle->process (-> obj bonelurker)) a1-5)
      )
     (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-6 from) pp)
      (set! (-> a1-6 num-params) 1)
      (set! (-> a1-6 message) 'center-joint)
      (set! (-> a1-6 param 0) (the-as uint 3))
      (send-event-function (handle->process (-> obj bonelurker)) a1-6)
      )
     (set-setting!
      *setting-control*
      pp
      'music-volume-movie
      'abs
      (the-as float 0.0)
      0
      )
     (set-setting!
      *setting-control*
      pp
      'sfx-volume-movie
      'abs
      (the-as float 0.0)
      0
      )
     (set-setting!
      *setting-control*
      pp
      'ambient-volume-movie
      'abs
      (the-as float 0.0)
      0
      )
     (dotimes (s5-1 9)
      (let ((s4-0 (-> *lurker-army* s5-1)))
       (cond
        ((= (-> s4-0 skel) 'bonelurker)
         (let ((s3-0 (get-process *default-dead-pool* manipy #x4000)))
          (set! (-> obj lurker-army s5-1) (ppointer->handle (when s3-0
                                                             (let
                                                              ((t9-10
                                                                (method-of-type
                                                                 manipy
                                                                 activate
                                                                 )
                                                                )
                                                               )
                                                              (t9-10
                                                               (the-as
                                                                manipy
                                                                s3-0
                                                                )
                                                               obj
                                                               'manipy
                                                               (the-as
                                                                pointer
                                                                #x70004000
                                                                )
                                                               )
                                                              )
                                                             (run-now-in-process
                                                              s3-0
                                                              manipy-init
                                                              (-> s4-0 pos)
                                                              (-> obj entity)
                                                              *bonelurker-sg*
                                                              #f
                                                              )
                                                             (-> s3-0 ppointer)
                                                             )
                                           )
           )
          )
         (let ((s3-1 (handle->process (-> obj lurker-army s5-1))))
          (when s3-1
           (set! (-> (the-as babak s3-1) draw light-index) (the-as uint 1))
           (set!
            (-> (the-as babak s3-1) draw level-index)
            (the-as uint (-> (level-get *level* 'misty) index))
            )
           )
          )
         )
        (else
         (let ((s3-2 (get-process *default-dead-pool* manipy #x4000)))
          (set! (-> obj lurker-army s5-1) (ppointer->handle (when s3-2
                                                             (let
                                                              ((t9-14
                                                                (method-of-type
                                                                 manipy
                                                                 activate
                                                                 )
                                                                )
                                                               )
                                                              (t9-14
                                                               (the-as
                                                                manipy
                                                                s3-2
                                                                )
                                                               obj
                                                               'manipy
                                                               (the-as
                                                                pointer
                                                                #x70004000
                                                                )
                                                               )
                                                              )
                                                             (run-now-in-process
                                                              s3-2
                                                              manipy-init
                                                              (-> s4-0 pos)
                                                              (-> obj entity)
                                                              *babak-sg*
                                                              #f
                                                              )
                                                             (-> s3-2 ppointer)
                                                             )
                                           )
           )
          )
         (let ((s3-3 (handle->process (-> obj lurker-army s5-1))))
          (when s3-3
           (set! (-> (the-as babak s3-3) draw light-index) (the-as uint 1))
           (set!
            (-> (the-as babak s3-3) draw level-index)
            (the-as uint (-> (level-get *level* 'misty) index))
            )
           )
          )
         (let ((a1-20 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-20 from) pp)
          (set! (-> a1-20 num-params) 2)
          (set! (-> a1-20 message) 'art-joint-anim)
          (set! (-> a1-20 param 0) (the-as uint "idle"))
          (set! (-> a1-20 param 1) (the-as uint 0))
          (send-event-function
           (handle->process (-> obj lurker-army s5-1))
           a1-20
           )
          )
         )
        )
       (let ((a1-21 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-21 from) pp)
        (set! (-> a1-21 num-params) 1)
        (set! (-> a1-21 message) 'rot)
        (set! (-> a1-21 param 0) (the-as uint (-> s4-0 rot)))
        (send-event-function (handle->process (-> obj lurker-army s5-1)) a1-21)
        )
       )
      )
     )
    ((!= (level-status *level* 'intro) 'active)
     (return (get-art-elem obj))
     )
    )
   (new 'static 'spool-anim
    :name "sidekick-human-intro-sequence-b"
    :index 5
    :parts 11
    :command-list
    '(
      (0
        blackout
        0
        )
      (0
       setting-reset
       ocean-off
       near
       )
      (0
       want-levels
       misty
       intro
       )
      (0
       display-level
       intro
       special
       )
      (0
       kill
       "money-1404"
       )
      (0
       kill
       "money-1405"
       )
      (0
       kill
       "money-1406"
       )
      (0
       kill
       "money-1407"
       )
      (0
       kill
       "money-1551"
       )
      (0
       kill
       "money-1552"
       )
      (0
       kill
       "money-1553"
       )
      (0
       kill
       "balloonlurker-9"
       )
      (0
       kill
       "balloonlurker-10"
       )
      (0
       kill
       "balloonlurker-11"
       )
      (0
       kill
       "balloonlurker-12"
       )
      (0
       kill
       "balloonlurker-13"
       )
      (0
       kill
       "balloonlurker-14"
       )
      (0
       kill
       "keg-conveyor-8"
       )
      (0
       kill
       "mistycannon-8"
       )
      (0
       kill
       "muse-2"
       )
      (0
       kill
       "mud-1"
       )
      (0
       kill
       "mud-2"
       )
      (0
       kill
       "mud-3"
       )
      (0
       kill
       "mud-4"
       )
      (0
       kill
       "mud-5"
       )
      (0
       kill
       "mud-6"
       )
      (0
       kill
       "mud-7"
       )
      (0
       kill
       "mud-8"
       )
      (0
       kill
       "mud-9"
       )
      (0
       kill
       "mud-10"
       )
      (0
       kill
       "mud-11"
       )
      (0
       kill
       "dark-eco-pool-11"
       )
      (0
       kill
       "sharkey-32"
       )
      (0
       kill
       "sharkey-34"
       )
      (0
       kill
       "sharkey-39"
       )
      (0
       kill
       "sharkey-41"
       )
      (0
       kill
       "bonelurker-14"
       )
      (0
       kill
       "bonelurker-15"
       )
      (0
       kill
       "bonelurker-16"
       )
      (0
       kill
       "bonelurker-17"
       )
      (0
       kill
       "bonelurker-18"
       )
      (0
       kill
       "bonelurker-19"
       )
      (0
       kill
       "bonelurker-20"
       )
      (0
       kill
       "bonelurker-21"
       )
      (0
       kill
       "bonelurker-22"
       )
      (0
       kill
       "bonelurker-23"
       )
      (0
       kill
       "bonelurker-24"
       )
      (0
       kill
       "bonelurker-26"
       )
      (0
       kill
       "babak-with-cannon-5"
       )
      (0
       kill
       "babak-200"
       )
      (0
       kill
       "babak-201"
       )
      (0
       kill
       "babak-202"
       )
      (0
       kill
       "babak-203"
       )
      (0
       kill
       "babak-204"
       )
      (0
       kill
       "babak-205"
       )
      (0
       kill
       "babak-206"
       )
      (0
       kill
       "babak-207"
       )
      (0
       kill
       "babak-208"
       )
      (0
       kill
       "babak-209"
       )
      (0
       kill
       "babak-212"
       )
      (0
       kill
       "quicksandlurker-5"
       )
      (0
       kill
       "boatpaddle-4"
       )
      (0
       kill
       "silostep-7"
       )
      (0
       kill
       "silostep-8"
       )
      (0
       kill
       "silostep-9"
       )
      (0
       kill
       "silostep-10"
       )
      (0
       kill
       "orb-cache-top-15"
       )
      (0
       kill
       "windturbine-11"
       )
      (0
       kill
       "teetertotter-5"
       )
      (0
       kill
       "bone-platform-4"
       )
      (0
       kill
       "misty-battle-controller-1"
       )
      ((the binteger 30)
       send-event
       self
       offset-army
       )
      ((the binteger 196)
       joint
       "cameraB"
       )
      ((the binteger 196)
       shadow
       target
       #f
       )
      ((the binteger 196)
       shadow
       self
       #f
       )
      ((the binteger 380)
       send-event
       self
       evilbro
       )
      ((the binteger 385)
       send-event
       "evilbro"
       draw
       #t
       )
      ((the binteger 385)
       send-event
       "evilsis"
       draw
       #t
       )
      ((the binteger 397)
       joint
       "camera"
       )
      ((the binteger 410)
       setting-reset
       ocean-off
       #t
       )
      ((the binteger 456)
       joint
       "cameraB"
       )
      ((the binteger 546)
       joint
       "camera"
       )
      ((the binteger 701)
       joint
       "cameraB"
       )
      ((the binteger 701)
       setting-reset
       ocean-off
       near
       )
      ((the binteger 776)
       joint
       "camera"
       )
      ((the binteger 776)
       setting-reset
       ocean-off
       #t
       )
      ((the binteger 937)
       joint
       "cameraB"
       )
      ((the binteger 1027)
       joint
       "camera"
       )
      ((the binteger 1122)
       joint
       "cameraB"
       )
      ((the binteger 1221)
       joint
       "cameraB"
       )
      ((the binteger 1221)
       setting-reset
       ocean-off
       near
       )
      ((the binteger 1280)
       alive
       "sequenceC-1"
       )
      ((the binteger 1281)
       save
       )
      ((the binteger 1281)
       shadow
       target
       #t
       )
      ((the binteger 1281) setting-unset ocean-off)
      )
    )
   )
  )

;; definition for method 31 of type sequenceB
(defmethod get-art-elem sequenceB ((obj sequenceB))
  (-> obj draw art-group data 3)
  )

;; failed to figure out what this is:
(defstate play-anim (sequenceB)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (case arg2 
    (('offset-army)
      (dotimes (gp-0 9)
       (let ((v1-3 (-> *lurker-army* gp-0))
             (a1-1 (new 'stack-no-clear 'event-message-block))
             )
        (set! (-> a1-1 from) self)
        (set! (-> a1-1 num-params) 1)
        (set! (-> a1-1 message) 'set-frame-num)
        (set! (-> a1-1 param 0) (the-as uint (-> v1-3 start-frame)))
        (send-event-function (handle->process (-> self lurker-army gp-0)) a1-1)
        )
       )
      #f
      )
    (('evilbro)
     (when (= (level-status *level* 'intro) 'active)
      (let ((gp-2 (entity-by-name "evilbro-2")))
       (when gp-2
        (let ((s5-0 (get-process *default-dead-pool* manipy #x4000)))
         (set! (-> self evilbro) (ppointer->handle (when s5-0
                                                    (let
                                                     ((t9-4
                                                       (method-of-type
                                                        manipy
                                                        activate
                                                        )
                                                       )
                                                      )
                                                     (t9-4
                                                      (the-as manipy s5-0)
                                                      self
                                                      'manipy
                                                      (the-as
                                                       pointer
                                                       #x70004000
                                                       )
                                                      )
                                                     )
                                                    (run-now-in-process
                                                     s5-0
                                                     manipy-init
                                                     (-> self root trans)
                                                     gp-2
                                                     *evilbro-sg*
                                                     #f
                                                     )
                                                    (-> s5-0 ppointer)
                                                    )
                                  )
          )
         )
        (let ((gp-3 (handle->process (-> self evilbro))))
         (when gp-3
          (set! (-> (the-as evilbro gp-3) draw light-index) (the-as uint 1))
          (set!
           (-> (the-as evilbro gp-3) draw level-index)
           (the-as uint (-> (level-get *level* 'misty) index))
           )
          )
         )
        (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-8 from) self)
         (set! (-> a1-8 num-params) 1)
         (set! (-> a1-8 message) 'anim-mode)
         (set! (-> a1-8 param 0) (the-as uint 'clone-anim))
         (send-event-function (handle->process (-> self evilbro)) a1-8)
         )
        (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-9 from) self)
         (set! (-> a1-9 num-params) 1)
         (set! (-> a1-9 message) 'blend-shape)
         (set! (-> a1-9 param 0) (the-as uint #t))
         (send-event-function (handle->process (-> self evilbro)) a1-9)
         )
        (let ((a1-10 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-10 from) self)
         (set! (-> a1-10 num-params) 1)
         (set! (-> a1-10 message) 'center-joint)
         (set! (-> a1-10 param 0) (the-as uint 3))
         (send-event-function (handle->process (-> self evilbro)) a1-10)
         )
        (let ((a1-11 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-11 from) self)
         (set! (-> a1-11 num-params) 1)
         (set! (-> a1-11 message) 'trans-hook)
         (set! (-> a1-11 param 0) (the-as uint evilsib-trans-hook-wait))
         (send-event-function (handle->process (-> self evilbro)) a1-11)
         )
        (let ((a1-12 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-12 from) self)
         (set! (-> a1-12 num-params) 1)
         (set! (-> a1-12 message) 'draw)
         (set! (-> a1-12 param 0) (the-as uint #f))
         (send-event-function (handle->process (-> self evilbro)) a1-12)
         )
        (let ((a1-13 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-13 from) self)
         (set! (-> a1-13 num-params) 1)
         (set! (-> a1-13 message) 'eval)
         (set!
          (-> a1-13 param 0)
          (the-as
           uint
           (lambda :behavior sequenceB
            ()
            (let
             ((v0-0 (create-launch-control (-> *part-group-id-table* 558) self))
              )
             (set! (-> self part) v0-0)
             v0-0
             )
            )
           )
          )
         (send-event-function (handle->process (-> self evilbro)) a1-13)
         )
        )
       )
      (let ((gp-4 (entity-by-name "evilsis-2")))
       (when gp-4
        (let ((s5-1 (get-process *default-dead-pool* manipy #x4000)))
         (set! (-> self evilsis) (ppointer->handle (when s5-1
                                                    (let
                                                     ((t9-15
                                                       (method-of-type
                                                        manipy
                                                        activate
                                                        )
                                                       )
                                                      )
                                                     (t9-15
                                                      (the-as manipy s5-1)
                                                      self
                                                      'manipy
                                                      (the-as
                                                       pointer
                                                       #x70004000
                                                       )
                                                      )
                                                     )
                                                    (run-now-in-process
                                                     s5-1
                                                     manipy-init
                                                     (-> self root trans)
                                                     gp-4
                                                     *evilsis-sg*
                                                     #f
                                                     )
                                                    (-> s5-1 ppointer)
                                                    )
                                  )
          )
         )
        (let ((gp-5 (handle->process (-> self evilsis))))
         (when gp-5
          (set! (-> (the-as evilsis gp-5) draw light-index) (the-as uint 1))
          (set!
           (-> (the-as evilsis gp-5) draw level-index)
           (the-as uint (-> (level-get *level* 'misty) index))
           )
          )
         )
        (let ((a1-19 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-19 from) self)
         (set! (-> a1-19 num-params) 1)
         (set! (-> a1-19 message) 'anim-mode)
         (set! (-> a1-19 param 0) (the-as uint 'clone-anim))
         (send-event-function (handle->process (-> self evilsis)) a1-19)
         )
        (let ((a1-20 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-20 from) self)
         (set! (-> a1-20 num-params) 1)
         (set! (-> a1-20 message) 'blend-shape)
         (set! (-> a1-20 param 0) (the-as uint #t))
         (send-event-function (handle->process (-> self evilsis)) a1-20)
         )
        (let ((a1-21 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-21 from) self)
         (set! (-> a1-21 num-params) 1)
         (set! (-> a1-21 message) 'center-joint)
         (set! (-> a1-21 param 0) (the-as uint 3))
         (send-event-function (handle->process (-> self evilsis)) a1-21)
         )
        (let ((a1-22 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-22 from) self)
         (set! (-> a1-22 num-params) 1)
         (set! (-> a1-22 message) 'trans-hook)
         (set! (-> a1-22 param 0) (the-as uint evilsib-trans-hook-wait))
         (send-event-function (handle->process (-> self evilsis)) a1-22)
         )
        (let ((a1-23 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-23 from) self)
         (set! (-> a1-23 num-params) 1)
         (set! (-> a1-23 message) 'draw)
         (set! (-> a1-23 param 0) (the-as uint #f))
         (send-event-function (handle->process (-> self evilsis)) a1-23)
         )
        (let ((a1-24 (new 'stack-no-clear 'event-message-block)))
         (set! (-> a1-24 from) self)
         (set! (-> a1-24 num-params) 1)
         (set! (-> a1-24 message) 'eval)
         (set!
          (-> a1-24 param 0)
          (the-as
           uint
           (lambda :behavior sequenceB
            ()
            (let
             ((v0-0 (create-launch-control (-> *part-group-id-table* 558) self))
              )
             (set! (-> self part) v0-0)
             v0-0
             )
            )
           )
          )
         (send-event-function (handle->process (-> self evilsis)) a1-24)
         )
        )
       )
      )
     )
    )
   )
  :exit
  (behavior ()
   (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-0 from) self)
    (set! (-> a1-0 num-params) 1)
    (set! (-> a1-0 message) 'sidekick)
    (set! (-> a1-0 param 0) (the-as uint #t))
    (send-event-function *target* a1-0)
    )
   (let ((a0-2 (handle->process (-> self bonelurker))))
    (if a0-2
     (deactivate a0-2)
     )
    )
   (let ((a0-6 (handle->process (-> self evilbro))))
    (if a0-6
     (deactivate a0-6)
     )
    )
   (let ((a0-10 (handle->process (-> self evilsis))))
    (if a0-10
     (deactivate a0-10)
     )
    )
   (dotimes (gp-0 9)
    (let ((a0-14 (handle->process (-> self lurker-army gp-0))))
     (if a0-14
      (deactivate a0-14)
      )
     )
    )
   ((-> (method-of-type process-taskable play-anim) exit))
   (let ((gp-1 (entity-by-name "sequenceC-1")))
    (set-blackout-frames 6000)
    (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-5 from) self)
     (set! (-> a1-5 num-params) 0)
     (set! (-> a1-5 message) 'clear-entity)
     (send-event-function *camera* a1-5)
     )
    (entity-birth-no-kill gp-1)
    (let ((a1-6 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-6 from) self)
     (set! (-> a1-6 num-params) 0)
     (set! (-> a1-6 message) 'play-anim)
     (send-event-function (if gp-1
                           (-> gp-1 extra process)
                           )
      a1-6
      )
     )
    )
   (none)
   )
  :trans
  (behavior ()
   (spool-push
    *art-control*
    "sidekick-human-intro-sequence-c"
    0
    self
    (the-as float -1.0)
    )
   ((-> (method-of-type process-taskable play-anim) trans))
   (none)
   )
  )

;; definition for method 39 of type sequenceB
(defmethod should-display? sequenceB ((obj sequenceB))
  #f
  )

;; definition for method 11 of type sequenceB
(defmethod copy-defaults! sequenceB ((obj sequenceB) (arg0 res-lump))
  (dummy-40
   obj
   arg0
   *sidekick-human-sg*
   3
   44
   (new 'static 'vector :w 4096.0)
   -1
   )
  (set! (-> obj tasks) (get-task-control (game-task intro)))
  (set! (-> obj bonelurker) (the-as handle #f))
  (set! (-> obj evilbro) (the-as handle #f))
  (set! (-> obj evilsis) (the-as handle #f))
  (dotimes (v1-2 9)
   (set! (-> obj lurker-army v1-2) (the-as handle #f))
   )
  (dummy-42 obj)
  (none)
  )

;; definition for function sequenceC-can-trans-hook-2
;; INFO: Return type mismatch int vs none.
(defbehavior sequenceC-can-trans-hook-2 sequenceC ()
  (let ((gp-0 (new 'stack-no-clear 'vector)))
   (vector<-cspace! gp-0 (-> self node-list data 4))
   (spawn (-> self part) gp-0)
   )
  (when (>= (ja-aframe-num 0) 1590.0)
   (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-1
     (let ((t9-4 (method-of-type part-tracker activate)))
      (t9-4
       (the-as part-tracker gp-1)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-1
      part-tracker-init
      (-> *part-group-id-table* 561)
      -1
      #f
      #f
      #f
      (-> self draw origin)
      )
     (-> gp-1 ppointer)
     )
    )
   (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-5 from) self)
    (set! (-> a1-5 num-params) 1)
    (set! (-> a1-5 message) 'trans-hook)
    (set! (-> a1-5 param 0) (the-as uint nothing))
    (send-event-function self a1-5)
    )
   )
  0
  (none)
  )

;; definition for function sequenceC-can-trans-hook
;; INFO: Return type mismatch int vs none.
(defbehavior sequenceC-can-trans-hook sequenceC ()
  (when (>= (ja-aframe-num 0) 1055.0)
   (dummy-11
    (-> self draw)
    (&-> (the-as process-taskable (-> self parent 0)) stack 288)
    )
   (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
    (set! (-> a1-1 from) self)
    (set! (-> a1-1 num-params) 1)
    (set! (-> a1-1 message) 'trans-hook)
    (set! (-> a1-1 param 0) (the-as uint sequenceC-can-trans-hook-2))
    (send-event-function self a1-1)
    )
   (set-vector! (-> self draw color-emissive) 0.5 0.0 0.0 0.0)
   )
  0
  (none)
  )

;; definition for method 32 of type sequenceC
;; INFO: Return type mismatch spool-anim vs basic.
(defmethod play-anim! sequenceC ((obj sequenceC) (arg0 symbol))
  (with-pp
   (when arg0
    (set-setting!
     *setting-control*
     pp
     'music-volume-movie
     'abs
     (the-as float 0.0)
     0
     )
    (set-setting!
     *setting-control*
     pp
     'sfx-volume-movie
     'abs
     (the-as float 0.0)
     0
     )
    (set-setting!
     *setting-control*
     pp
     'ambient-volume-movie
     'abs
     (the-as float 0.0)
     0
     )
    (let ((s5-0 (get-process *default-dead-pool* manipy #x4000)))
     (set! (-> obj bonelurker) (ppointer->handle (when s5-0
                                                  (let
                                                   ((t9-4
                                                     (method-of-type
                                                      manipy
                                                      activate
                                                      )
                                                     )
                                                    )
                                                   (t9-4
                                                    (the-as manipy s5-0)
                                                    obj
                                                    'manipy
                                                    (the-as pointer #x70004000)
                                                    )
                                                   )
                                                  (run-now-in-process
                                                   s5-0
                                                   manipy-init
                                                   (-> obj root trans)
                                                   (-> obj entity)
                                                   *bonelurker-sg*
                                                   #f
                                                   )
                                                  (-> s5-0 ppointer)
                                                  )
                                )
      )
     )
    (let ((a1-7 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-7 from) pp)
     (set! (-> a1-7 num-params) 1)
     (set! (-> a1-7 message) 'anim-mode)
     (set! (-> a1-7 param 0) (the-as uint 'clone-anim))
     (send-event-function (handle->process (-> obj bonelurker)) a1-7)
     )
    (let ((a1-8 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-8 from) pp)
     (set! (-> a1-8 num-params) 1)
     (set! (-> a1-8 message) 'center-joint)
     (set! (-> a1-8 param 0) (the-as uint 3))
     (send-event-function (handle->process (-> obj bonelurker)) a1-8)
     )
    (let ((s5-1 (get-process *default-dead-pool* manipy #x4000)))
     (set! (-> obj darkecocan) (ppointer->handle (when s5-1
                                                  (let
                                                   ((t9-9
                                                     (method-of-type
                                                      manipy
                                                      activate
                                                      )
                                                     )
                                                    )
                                                   (t9-9
                                                    (the-as manipy s5-1)
                                                    obj
                                                    'manipy
                                                    (the-as pointer #x70004000)
                                                    )
                                                   )
                                                  (run-now-in-process
                                                   s5-1
                                                   manipy-init
                                                   (-> obj root trans)
                                                   (-> obj entity)
                                                   *darkecocan-sg*
                                                   #f
                                                   )
                                                  (-> s5-1 ppointer)
                                                  )
                                )
      )
     )
    (let ((a1-12 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-12 from) pp)
     (set! (-> a1-12 num-params) 1)
     (set! (-> a1-12 message) 'anim-mode)
     (set! (-> a1-12 param 0) (the-as uint 'clone-anim))
     (send-event-function (handle->process (-> obj darkecocan)) a1-12)
     )
    (let ((a1-13 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-13 from) pp)
     (set! (-> a1-13 num-params) 1)
     (set! (-> a1-13 message) 'center-joint)
     (set! (-> a1-13 param 0) (the-as uint 3))
     (send-event-function (handle->process (-> obj darkecocan)) a1-13)
     )
    (let ((a1-14 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-14 from) pp)
     (set! (-> a1-14 num-params) 1)
     (set! (-> a1-14 message) 'trans-hook)
     (set! (-> a1-14 param 0) (the-as uint sequenceC-can-trans-hook))
     (send-event-function (handle->process (-> obj darkecocan)) a1-14)
     )
    (let ((a1-15 (new 'stack-no-clear 'event-message-block)))
     (set! (-> a1-15 from) pp)
     (set! (-> a1-15 num-params) 1)
     (set! (-> a1-15 message) 'eval)
     (set!
      (-> a1-15 param 0)
      (the-as
       uint
       (lambda :behavior sequenceC
        ()
        (let
         ((a0-0 (&-> (the-as process-taskable (-> self parent 0)) stack 288))
          (t9-0 (method-of-type lod-set dummy-9))
          )
         *darkecocan-glow-sg*
         (-> self draw art-group)
         (-> (the-as process-taskable (-> self parent 0)) entity)
         (t9-0 (the-as lod-set a0-0))
         )
        (let
         ((v0-1 (create-launch-control (-> *part-group-id-table* 560) self)))
         (set! (-> self part) v0-1)
         v0-1
         )
        )
       )
      )
     (send-event-function (handle->process (-> obj darkecocan)) a1-15)
     )
    )
   (the-as
    basic
    (new 'static 'spool-anim
     :name "sidekick-human-intro-sequence-c"
     :index 6
     :parts 22
     :command-list
     '(
       (0
         blackout
         0
         )
       (0
        kill
        "fuel-cell-11"
        )
       (0
        kill
        "fuel-cell-50"
        )
       (0
        kill
        "money-1561"
        )
       (0
        kill
        "money-1562"
        )
       (0
        kill
        "money-1563"
        )
       (0
        kill
        "money-1564"
        )
       (0
        kill
        "money-1565"
        )
       ((the binteger 5)
        alive
        "dark-eco-pool-11"
        )
       ((the binteger 151)
        joint
        "cameraB"
        )
       ((the binteger 200)
        want-levels
        misty
        village1
        )
       ((the binteger 236)
        joint
        "camera"
        )
       ((the binteger 301)
        joint
        "cameraB"
        )
       ((the binteger 421)
        joint
        "camera"
        )
       ((the binteger 460)
        shadow
        self
        #f
        )
       ((the binteger 470)
        shadow
        self
        #t
        )
       ((the binteger 496)
        joint
        "cameraB"
        )
       ((the binteger 611)
        joint
        "camera"
        )
       ((the binteger 721)
        joint
        "cameraB"
        )
       ((the binteger 1176)
        joint
        "camera"
        )
       ((the binteger 1271)
        joint
        "cameraB"
        )
       ((the binteger 1331)
        joint
        "camera"
        )
       ((the binteger 1386)
        joint
        "cameraB"
        )
       ((the binteger 1461)
        joint
        "camera"
        )
       ((the binteger 1524)
        joint
        "cameraB"
        )
       ((the binteger 1558)
        joint
        "camera"
        )
       ((the binteger 1602)
        joint
        "cameraB"
        )
       ((the binteger 1628)
        joint
        "camera"
        )
       ((the binteger 1676)
        joint
        "cameraB"
        )
       ((the binteger 1728)
        joint
        "camera"
        )
       ((the binteger 1791)
        joint
        "cameraB"
        )
       ((the binteger 1831)
        joint
        "camera"
        )
       ((the binteger 1942)
        joint
        "cameraB"
        )
       ((the binteger 2000)
        display-level
        village1
        special
        )
       ((the binteger 2028)
        joint
        "camera"
        )
       ((the binteger 2096)
        joint
        "cameraB"
        )
       ((the binteger 2154)
        joint
        "camera"
        )
       ((the binteger 2226)
        joint
        "cameraB"
        )
       ((the binteger 2266)
        joint
        "camera"
        )
       ((the binteger 2307)
        joint
        "cameraB"
        )
       ((the binteger 2431)
        joint
        "camera"
        )
       ((the binteger 2476)
        joint
        "cameraB"
        )
       ((the binteger 2530)
        display-level
        misty
        movie
        )
       ((the binteger 2530)
        want-force-vis
        misty
        #t
        )
       ((the binteger 2530)
        dead
        "dark-eco-pool-11"
        )
       ((the binteger 2534)
        display-level
        village1
        display
        )
       ((the binteger 2535)
        want-vis
        vi1
        )
       ((the binteger 2536)
        joint
        "camera"
        )
       ((the binteger 2580) alive "sage-23") ((the binteger 2596) save)
       )
     )
    )
   )
  )

;; definition for method 31 of type sequenceC
(defmethod get-art-elem sequenceC ((obj sequenceC))
  (-> obj draw art-group data 3)
  )

;; failed to figure out what this is:
(defstate play-anim (sequenceC)
  :virtual #t
  :exit
  (behavior ()
   (let ((a0-1 (handle->process (-> self bonelurker))))
    (if a0-1
     (deactivate a0-1)
     )
    )
   (let ((a0-5 (handle->process (-> self darkecocan))))
    (if a0-5
     (deactivate a0-5)
     )
    )
   ((-> (method-of-type process-taskable play-anim) exit))
   (start 'play (get-continue-by-name *game-info* "village1-intro"))
   (none)
   )
  :trans
  (behavior ()
   (spool-push
    *art-control*
    "sage-intro-sequence-d1"
    0
    self
    (the-as float -1.0)
    )
   ((-> (method-of-type process-taskable play-anim) trans))
   (none)
   )
  )

;; definition for method 39 of type sequenceC
(defmethod should-display? sequenceC ((obj sequenceC))
  #f
  )

;; definition for function sequenceC-trans-hook
;; INFO: Return type mismatch int vs none.
(defbehavior sequenceC-trans-hook sequenceC ()
  (when (>= (ja-aframe-num 0) 1655.0)
   (let ((gp-0 (new 'stack-no-clear 'vector)))
    (vector<-cspace! gp-0 (-> self node-list data 3))
    (let ((s5-0 (get-process *default-dead-pool* part-tracker #x4000)))
     (when s5-0
      (let ((t9-3 (method-of-type part-tracker activate)))
       (t9-3
        (the-as part-tracker s5-0)
        *entity-pool*
        'part-tracker
        (the-as pointer #x70004000)
        )
       )
      (run-now-in-process
       s5-0
       part-tracker-init
       (-> *part-group-id-table* 562)
       -1
       #f
       #f
       #f
       gp-0
       )
      (-> s5-0 ppointer)
      )
     )
    )
   (set! (-> self cur-trans-hook) nothing)
   )
  0
  (none)
  )

;; definition for method 11 of type sequenceC
(defmethod copy-defaults! sequenceC ((obj sequenceC) (arg0 res-lump))
  (dummy-40
   obj
   arg0
   *sidekick-human-sg*
   3
   44
   (new 'static 'vector :w 4096.0)
   -1
   )
  (set! (-> obj tasks) (get-task-control (game-task intro)))
  (set! (-> obj bonelurker) (the-as handle #f))
  (set! (-> obj darkecocan) (the-as handle #f))
  (set! (-> obj cur-trans-hook) sequenceC-trans-hook)
  (dummy-42 obj)
  (none)
  )




