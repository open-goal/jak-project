;;-*-Lisp-*-
(in-package goal)

;; definition of type nav-enemy-info
(deftype nav-enemy-info (basic)
  ((idle-anim                 int32   :offset-assert 4)
   (walk-anim                 int32   :offset-assert 8)
   (turn-anim                 int32   :offset-assert 12)
   (notice-anim               int32   :offset-assert 16)
   (run-anim                  int32   :offset-assert 20)
   (jump-anim                 int32   :offset-assert 24)
   (jump-land-anim            int32   :offset-assert 28)
   (victory-anim              int32   :offset-assert 32)
   (taunt-anim                int32   :offset-assert 36)
   (die-anim                  int32   :offset-assert 40)
   (neck-joint                int32   :offset-assert 44)
   (player-look-at-joint      int32   :offset-assert 48)
   (run-travel-speed          float   :offset-assert 52)
   (run-rotate-speed          float   :offset-assert 56)
   (run-acceleration          float   :offset-assert 60)
   (run-turn-time             uint64  :offset-assert 64)
   (walk-travel-speed         float   :offset-assert 72)
   (walk-rotate-speed         float   :offset-assert 76)
   (walk-acceleration         float   :offset-assert 80)
   (walk-turn-time            uint64  :offset-assert 88)
   (attack-shove-back         float   :offset-assert 96)
   (attack-shove-up           float   :offset-assert 100)
   (shadow-size               float   :offset-assert 104)
   (notice-nav-radius         float   :offset-assert 108)
   (nav-nearest-y-threshold   float   :offset-assert 112)
   (notice-distance           float   :offset-assert 116)
   (proximity-notice-distance float   :offset-assert 120)
   (stop-chase-distance       float   :offset-assert 124)
   (frustration-distance      float   :offset-assert 128)
   (frustration-time          uint64  :offset-assert 136)
   (die-anim-hold-frame       float   :offset-assert 144)
   (jump-anim-start-frame     float   :offset-assert 148)
   (jump-land-anim-end-frame  float   :offset-assert 152)
   (jump-height-min           float   :offset-assert 156)
   (jump-height-factor        float   :offset-assert 160)
   (jump-start-anim-speed     float   :offset-assert 164)
   (shadow-max-y              float   :offset-assert 168)
   (shadow-min-y              float   :offset-assert 172)
   (shadow-locus-dist         float   :offset-assert 176)
   (use-align                 basic   :offset-assert 180)
   (draw-shadow               basic   :offset-assert 184)
   (move-to-ground            basic   :offset-assert 188)
   (hover-if-no-ground        basic   :offset-assert 192)
   (use-momentum              basic   :offset-assert 196)
   (use-flee                  basic   :offset-assert 200)
   (use-proximity-notice      basic   :offset-assert 204)
   (use-jump-blocked          basic   :offset-assert 208)
   (use-jump-patrol           basic   :offset-assert 212)
   (gnd-collide-with          uint64  :offset-assert 216)
   (debug-draw-neck           basic   :offset-assert 224)
   (debug-draw-jump           basic   :offset-assert 228)
   )
  :method-count-assert 9
  :size-assert         #xe8
  :flag-assert         #x9000000e8
  )

;; definition for method 3 of type nav-enemy-info
(defmethod inspect nav-enemy-info ((obj nav-enemy-info))
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~Tidle-anim: ~D~%" (-> obj idle-anim))
  (format #t "~Twalk-anim: ~D~%" (-> obj walk-anim))
  (format #t "~Tturn-anim: ~D~%" (-> obj turn-anim))
  (format #t "~Tnotice-anim: ~D~%" (-> obj notice-anim))
  (format #t "~Trun-anim: ~D~%" (-> obj run-anim))
  (format #t "~Tjump-anim: ~D~%" (-> obj jump-anim))
  (format #t "~Tjump-land-anim: ~D~%" (-> obj jump-land-anim))
  (format #t "~Tvictory-anim: ~D~%" (-> obj victory-anim))
  (format #t "~Ttaunt-anim: ~D~%" (-> obj taunt-anim))
  (format #t "~Tdie-anim: ~D~%" (-> obj die-anim))
  (format #t "~Tneck-joint: ~D~%" (-> obj neck-joint))
  (format #t "~Tplayer-look-at-joint: ~D~%" (-> obj player-look-at-joint))
  (format #t "~Trun-travel-speed: (meters ~m)~%" (-> obj run-travel-speed))
  (format #t "~Trun-rotate-speed: (deg ~r)~%" (-> obj run-rotate-speed))
  (format #t "~Trun-acceleration: (meters ~m)~%" (-> obj run-acceleration))
  (format #t "~Trun-turn-time: (seconds ~e)~%" (-> obj run-turn-time))
  (format #t "~Twalk-travel-speed: (meters ~m)~%" (-> obj walk-travel-speed))
  (format #t "~Twalk-rotate-speed: (deg ~r)~%" (-> obj walk-rotate-speed))
  (format #t "~Twalk-acceleration: (meters ~m)~%" (-> obj walk-acceleration))
  (format #t "~Twalk-turn-time: (seconds ~e)~%" (-> obj walk-turn-time))
  (format #t "~Tattack-shove-back: (meters ~m)~%" (-> obj attack-shove-back))
  (format #t "~Tattack-shove-up: (meters ~m)~%" (-> obj attack-shove-up))
  (format #t "~Tshadow-size: (meters ~m)~%" (-> obj shadow-size))
  (format #t "~Tnotice-nav-radius: (meters ~m)~%" (-> obj notice-nav-radius))
  (format
   #t
   "~Tnav-nearest-y-threshold: (meters ~m)~%"
   (-> obj nav-nearest-y-threshold)
   )
  (format #t "~Tnotice-distance: (meters ~m)~%" (-> obj notice-distance))
  (format
   #t
   "~Tproximity-notice-distance: (meters ~m)~%"
   (-> obj proximity-notice-distance)
   )
  (format
   #t
   "~Tstop-chase-distance: (meters ~m)~%"
   (-> obj stop-chase-distance)
   )
  (format
   #t
   "~Tfrustration-distance: (meters ~m)~%"
   (-> obj frustration-distance)
   )
  (format #t "~Tfrustration-time: ~D~%" (-> obj frustration-time))
  (format #t "~Tdie-anim-hold-frame: ~f~%" (-> obj die-anim-hold-frame))
  (format #t "~Tjump-anim-start-frame: ~f~%" (-> obj jump-anim-start-frame))
  (format
   #t
   "~Tjump-land-anim-end-frame: ~f~%"
   (-> obj jump-land-anim-end-frame)
   )
  (format #t "~Tjump-height-min: (meters ~m)~%" (-> obj jump-height-min))
  (format #t "~Tjump-height-factor: ~f~%" (-> obj jump-height-factor))
  (format #t "~Tjump-start-anim-speed: ~f~%" (-> obj jump-start-anim-speed))
  (format #t "~Tshadow-max-y: (meters ~m)~%" (-> obj shadow-max-y))
  (format #t "~Tshadow-min-y: (meters ~m)~%" (-> obj shadow-min-y))
  (format #t "~Tshadow-locus-dist: (meters ~m)~%" (-> obj shadow-locus-dist))
  (format #t "~Tuse-align: ~A~%" (-> obj use-align))
  (format #t "~Tdraw-shadow: ~A~%" (-> obj draw-shadow))
  (format #t "~Tmove-to-ground: ~A~%" (-> obj move-to-ground))
  (format #t "~Thover-if-no-ground: ~A~%" (-> obj hover-if-no-ground))
  (format #t "~Tuse-momentum: ~A~%" (-> obj use-momentum))
  (format #t "~Tuse-flee: ~A~%" (-> obj use-flee))
  (format #t "~Tuse-proximity-notice: ~A~%" (-> obj use-proximity-notice))
  (format #t "~Tuse-jump-blocked: ~A~%" (-> obj use-jump-blocked))
  (format #t "~Tuse-jump-patrol: ~A~%" (-> obj use-jump-patrol))
  (format #t "~Tgnd-collide-with: ~D~%" (-> obj gnd-collide-with))
  (format #t "~Tdebug-draw-neck: ~A~%" (-> obj debug-draw-neck))
  (format #t "~Tdebug-draw-jump: ~A~%" (-> obj debug-draw-jump))
  obj
  )

;; definition of type nav-enemy
(deftype nav-enemy (process-drawable)
  ((hit-from-dir        vector     :inline :offset-assert 176)
   (event-param-point   vector     :inline :offset-assert 192)
   (frustration-point   vector     :inline :offset-assert 208)
   (jump-dest           vector     :inline :offset-assert 224)
   (jump-trajectory     trajectory :inline :offset-assert 240)
   (jump-time           uint64             :offset-assert 280)
   (nav-info            basic              :offset-assert 288)
   (target-speed        float              :offset-assert 292)
   (momentum-speed      float              :offset-assert 296)
   (acceleration        float              :offset-assert 300)
   (rotate-speed        float              :offset-assert 304)
   (turn-time           uint64             :offset-assert 312)
   (frustration-time    uint64             :offset-assert 320)
   (speed-scale         float              :offset-assert 328)
   (neck                basic              :offset-assert 332)
   (reaction-time       uint64             :offset-assert 336)
   (notice-time         uint64             :offset-assert 344)
   (state-timeout       uint64             :offset-assert 352)
   (free-time           uint64             :offset-assert 360)
   (touch-time          uint64             :offset-assert 368)
   (nav-enemy-flags     uint32             :offset-assert 376)
   (incomming-attack-id uint64             :offset-assert 384)
   (jump-return-state   basic              :offset-assert 392)
   (rand-gen            basic              :offset-assert 396)
   )
  :heap-base #x120
  :method-count-assert 76
  :size-assert         #x190
  :flag-assert         #x4c01200190
  (:methods
    (dummy-20 () none 20)
    (dummy-21 () none 21)
    (dummy-22 () none 22)
    (dummy-23 () none 23)
    (dummy-24 () none 24)
    (dummy-25 () none 25)
    (dummy-26 () none 26)
    (dummy-27 () none 27)
    (dummy-28 () none 28)
    (dummy-29 () none 29)
    (dummy-30 () none 30)
    (dummy-31 () none 31)
    (dummy-32 () none 32)
    (dummy-33 () none 33)
    (dummy-34 () none 34)
    (dummy-35 () none 35)
    (dummy-36 () none 36)
    (dummy-37 () none 37)
    (dummy-38 () none 38)
    (dummy-39 () none 39)
    (dummy-40 () none 40)
    (dummy-41 () none 41)
    (dummy-42 () none 42)
    (dummy-43 () none 43)
    (dummy-44 () none 44)
    (dummy-45 () none 45)
    (dummy-46 () none 46)
    (dummy-47 () none 47)
    (dummy-48 () none 48)
    (dummy-49 () none 49)
    (dummy-50 () none 50)
    (dummy-51 () none 51)
    (dummy-52 () none 52)
    (dummy-53 () none 53)
    (dummy-54 () none 54)
    (dummy-55 () none 55)
    (dummy-56 () none 56)
    (dummy-57 () none 57)
    (dummy-58 () none 58)
    (dummy-59 () none 59)
    (dummy-60 () none 60)
    (dummy-61 () none 61)
    (dummy-62 () none 62)
    (dummy-63 () none 63)
    (dummy-64 () none 64)
    (dummy-65 () none 65)
    (dummy-66 () none 66)
    (dummy-67 () none 67)
    (dummy-68 () none 68)
    (dummy-69 () none 69)
    (dummy-70 () none 70)
    (dummy-71 () none 71)
    (dummy-72 () none 72)
    (dummy-73 () none 73)
    (dummy-74 () none 74)
    (dummy-75 () none 75)
    )
  )

;; definition for method 3 of type nav-enemy
(defmethod inspect nav-enemy ((obj nav-enemy))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Thit-from-dir: ~`vector`P~%" (-> obj hit-from-dir))
  (format #t "~T~Tevent-param-point: ~`vector`P~%" (-> obj event-param-point))
  (format #t "~T~Tfrustration-point: ~`vector`P~%" (-> obj frustration-point))
  (format #t "~T~Tjump-dest: ~`vector`P~%" (-> obj jump-dest))
  (format
   #t
   "~T~Tjump-trajectory: #<trajectory @ #x~X>~%"
   (-> obj jump-trajectory)
   )
  (format #t "~T~Tjump-time: ~D~%" (-> obj jump-time))
  (format #t "~T~Tnav-info: ~A~%" (-> obj nav-info))
  (format #t "~T~Ttarget-speed: ~f~%" (-> obj target-speed))
  (format #t "~T~Tmomentum-speed: ~f~%" (-> obj momentum-speed))
  (format #t "~T~Tacceleration: ~f~%" (-> obj acceleration))
  (format #t "~T~Trotate-speed: ~f~%" (-> obj rotate-speed))
  (format #t "~T~Tturn-time: ~D~%" (-> obj turn-time))
  (format #t "~T~Tfrustration-time: ~D~%" (-> obj frustration-time))
  (format #t "~T~Tspeed-scale: ~f~%" (-> obj speed-scale))
  (format #t "~T~Tneck: ~A~%" (-> obj neck))
  (format #t "~T~Treaction-time: ~D~%" (-> obj reaction-time))
  (format #t "~T~Tnotice-time: ~D~%" (-> obj notice-time))
  (format #t "~T~Tstate-timeout: ~D~%" (-> obj state-timeout))
  (format #t "~T~Tfree-time: ~D~%" (-> obj free-time))
  (format #t "~T~Ttouch-time: ~D~%" (-> obj touch-time))
  (format #t "~T~Tnav-enemy-flags: ~D~%" (-> obj nav-enemy-flags))
  (format #t "~T~Tincomming-attack-id: ~D~%" (-> obj incomming-attack-id))
  (format #t "~T~Tjump-return-state: ~A~%" (-> obj jump-return-state))
  (format #t "~T~Trand-gen: ~A~%" (-> obj rand-gen))
  obj
  )

;; failed to figure out what this is:
(let ((v0-4 0))
  )
