;;-*-Lisp-*-
(in-package goal)

;; definition of type dark-eco-pool
(deftype dark-eco-pool (water-anim)
  ()
  :heap-base #x70
  :method-count-assert 30
  :size-assert         #xdc
  :flag-assert         #x1e007000dc
  )

;; definition for method 3 of type dark-eco-pool
(defmethod inspect dark-eco-pool ((obj dark-eco-pool))
  (let ((t9-0 (method-of-type water-anim inspect)))
   (t9-0 obj)
   )
  obj
  )

;; definition for symbol ripple-for-misty-dark-eco-pool, type ripple-wave-set
(define
  ripple-for-misty-dark-eco-pool
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 3.0
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 40.0 :xdiv 2 :speed 0.5)
    (new 'static 'ripple-wave :scale 15.0 :xdiv -2 :zdiv 2 :speed 2.0)
    (new 'static 'ripple-wave :scale 3.0 :xdiv 5 :zdiv 3 :speed 2.0)
    (new 'static 'ripple-wave)
    )
   )
  )

;; definition for symbol ripple-for-maincave-dark-eco-pool, type ripple-wave-set
(define
  ripple-for-maincave-dark-eco-pool
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 8.57
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 14.0 :xdiv 1 :speed 1.0)
    (new 'static 'ripple-wave :scale 5.25 :xdiv -1 :zdiv 1 :speed 4.0)
    (new 'static 'ripple-wave :scale 0.7 :xdiv 5 :zdiv 3 :speed 2.0)
    (new 'static 'ripple-wave)
    )
   )
  )

;; definition for symbol ripple-for-finalboss-dark-eco-pool, type ripple-wave-set
(define
  ripple-for-finalboss-dark-eco-pool
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 4.0
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 25.0 :xdiv 2 :speed -2.0)
    (new 'static 'ripple-wave :scale 15.0 :xdiv -2 :zdiv 2 :speed 3.0)
    (new 'static 'ripple-wave :scale 4.0 :xdiv 5 :zdiv 3 :speed 4.0)
    (new 'static 'ripple-wave)
    )
   )
  )

;; definition for symbol ripple-for-dark-eco-pool, type ripple-wave-set
(define
  ripple-for-dark-eco-pool
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 3.0
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 40.0 :xdiv 1 :speed 1.0)
    (new 'static 'ripple-wave :scale 15.0 :xdiv -1 :zdiv 1 :speed 4.0)
    (new 'static 'ripple-wave :scale 2.0 :xdiv 5 :zdiv 3 :speed 2.0)
    (new 'static 'ripple-wave)
    )
   )
  )

;; definition for symbol ripple-for-sunken-dark-eco-helix-room, type ripple-wave-set
(define
  ripple-for-sunken-dark-eco-helix-room
  (new 'static 'ripple-wave-set
   :count 3
   :converted #f
   :normal-scale 8.0
   :wave
   (new 'static 'inline-array ripple-wave 4
    (new 'static 'ripple-wave :scale 15.0 :xdiv 1 :speed 1.0)
    (new 'static 'ripple-wave :scale 5.625 :xdiv -1 :zdiv 1 :speed 4.0)
    (new 'static 'ripple-wave :scale 0.75 :xdiv 5 :zdiv 3 :speed 2.0)
    (new 'static 'ripple-wave)
    )
   )
  )

;; definition for method 25 of type dark-eco-pool
(defmethod TODO-RENAME-25 dark-eco-pool ((obj dark-eco-pool))
  (let ((t9-0 (method-of-type water-anim TODO-RENAME-25)))
   (t9-0 obj)
   )
  (set! (-> obj flags) (logand -8388609 (-> obj flags)))
  (set! (-> obj flags) (logior #x1000000 (-> obj flags)))
  (let
   ((v0-1
     ((the-as
       (function res-lump symbol symbol float structure (pointer res-tag) pointer object)
       (method-of-type res-lump get-property-struct)
       )
      (-> obj entity)
      'attack-event
      'interp
      -1000000000.0
      'dark-eco-pool
      (the-as (pointer res-tag) #f)
      *res-static-buf*
      )
     )
    )
   (set! (-> obj attack-event) (the-as basic v0-1))
   v0-1
   )
  )

;; definition for method 22 of type dark-eco-pool
;; INFO: Return type mismatch ripple-wave-set vs none.
(defmethod TODO-RENAME-22 dark-eco-pool ((obj dark-eco-pool))
  (let ((t9-0 (method-of-type water-anim TODO-RENAME-22)))
   (t9-0 obj)
   )
  (let ((gp-0 (new 'process 'ripple-control)))
   (set! (-> obj draw ripple) gp-0)
   (set! (-> gp-0 global-scale) 3072.0)
   (set! (-> gp-0 close-fade-dist) 163840.0)
   (set! (-> gp-0 far-fade-dist) 245760.0)
   (set! (-> gp-0 waveform) ripple-for-dark-eco-pool)
   (set! (-> gp-0 query) (new 'process 'ripple-merc-query 100))
   (case (-> obj look) 
    ((32)
      (set! (-> gp-0 waveform) ripple-for-misty-dark-eco-pool)
      )
    ((15 16 17 18 19 20)
     (set! (-> gp-0 waveform) ripple-for-maincave-dark-eco-pool)
     )
    ((40)
     (set! (-> gp-0 waveform) ripple-for-sunken-dark-eco-helix-room)
     )
    ((41)
     (set! (-> gp-0 waveform) ripple-for-finalboss-dark-eco-pool)
     )
    )
   )
  (none)
  )

;; failed to figure out what this is:
(set! (-> *part-group-id-table* 444) L37)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2020) L35)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2021) L33)

;; failed to figure out what this is:
(set! (-> *part-group-id-table* 445) L30)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2056) L28)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2057) L26)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2052) L24)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2053) L22)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2058) L20)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2054) L18)

;; failed to figure out what this is:
(set! (-> *part-id-table* 2055) L16)

;; failed to figure out what this is:
(let ((gp-0 L15))
  (inherit-state gp-0 (the-as state (method-of-type water-anim water-vol-idle)))
  (method-set! dark-eco-pool 20 (the-as function gp-0))
  (set! (-> gp-0 trans) (the-as (function object) L1))
  )




