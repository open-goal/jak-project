;;-*-Lisp-*-
(in-package goal)

;; definition of type balloon
(deftype balloon (process-drawable)
  ((root-override collide-shape  :offset 112)
   )
  :heap-base #x40
  :method-count-assert 20
  :size-assert         #xb0
  :flag-assert         #x14004000b0
  )

;; definition for method 3 of type balloon
(defmethod inspect balloon ((obj balloon))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 227)
  (new 'static 'sparticle-launch-group
   :length 3
   :duration #x5
   :linger-duration #x5dc
   :name "group-balloon"
   :launcher
   (new 'static 'inline-array sparticle-group-item 3
    (new 'static 'sparticle-group-item :launcher #x3ee)
    (new 'static 'sparticle-group-item :launcher #x3ef)
    (new 'static 'sparticle-group-item :launcher #x3f0)
    )
   :bounds (new 'static 'sphere :w 61440.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1007)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 17
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200000)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 8.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef -4096.0
     :random-rangef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xc
     :flags #x1
     :initial-valuef -4096.0
     :random-rangef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 12288.0
     :random-rangef 12288.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 255.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 32.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -218.45334
     :random-rangef 436.90668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.42666668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x96)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1008)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 20
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200000)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 2048.0
     :random-rangef 4096.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 255.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 32.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 163.84
     :random-rangef 327.68
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -218.45334
     :random-rangef 436.90668
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.85333335
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.98
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x4b)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :random-rangef 32768.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 6144.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 1006)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 14
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 1.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 49152.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 100.0
     :random-rangef 28.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :initial-valuef 100.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 80.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.08
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #xf)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #xc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(defstate balloon-popping (balloon)
  :code
  (behavior ()
   (ja-channel-set! 0)
   (dummy-48 (-> self root-override))
   (ja-post)
   (sound-play-by-name
    (static-sound-name "cool-balloon")
    (new-sound-id)
    1024
    0
    0
    (the-as uint 1)
    (the-as vector #t)
    )
   (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-1
     (let ((t9-6 (method-of-type part-tracker activate)))
      (t9-6
       (the-as part-tracker gp-1)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-1
      part-tracker-init
      (-> *part-group-id-table* 227)
      -1
      #f
      #f
      #f
      (-> self root-override trans)
      )
     (-> gp-1 ppointer)
     )
    )
   (suspend)
   (dummy-18 self)
   (deactivate self)
   (none)
   )
  )

;; failed to figure out what this is:
(defstate balloon-idle (balloon)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'attack)
                    (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-2 from) self)
                     (set! (-> a1-2 num-params) 1)
                     (set! (-> a1-2 message) 'heat)
                     (set! (-> a1-2 param 0) (the-as uint -10.0))
                     (send-event-function arg0 a1-2)
                     )
                    (go balloon-popping)
                    )
     )
    )
   )
  :code
  (behavior ()
   (transform-post)
   (while #t
    (let ((a0-0 (-> self skel root-channel 0)))
     (set! (-> a0-0 frame-group) (if (> (-> self skel active-channels) 0)
                                  (-> self skel root-channel 0 frame-group)
                                  )
      )
     (set!
      (-> a0-0 param 0)
      (the float (+ (-> (if (> (-> self skel active-channels) 0)
                         (-> self skel root-channel 0 frame-group)
                         )
                     data
                     0
                     length
                     )
                  -1
                  )
       )
      )
     (set! (-> a0-0 param 1) 1.0)
     (set! (-> a0-0 frame-num) 0.0)
     (joint-control-channel-group! a0-0 (if (> (-> self skel active-channels) 0)
                                         (->
                                          self
                                          skel
                                          root-channel
                                          0
                                          frame-group
                                          )
                                         )
      num-func-seek!
      )
     )
    (until (ja-done? 0)
     (suspend)
     (let ((a0-1 (-> self skel root-channel 0)))
      (set!
       (-> a0-1 param 0)
       (the float (+ (-> a0-1 frame-group data 0 length) -1))
       )
      (set! (-> a0-1 param 1) 1.0)
      (joint-control-channel-group-eval!
       a0-1
       (the-as art-joint-anim #f)
       num-func-seek!
       )
      )
     )
    )
   (none)
   )
  :post
  (the-as (function none :behavior balloon) ja-post)
  )

;; definition for method 11 of type balloon
(defmethod copy-defaults! balloon ((obj balloon) (arg0 res-lump))
  (let
   ((s4-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-player))))
   (let ((s3-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
    (set! (-> s3-0 prim-core collide-as) (the-as uint 256))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core offense) 4)
    (set-vector! (-> s3-0 local-sphere) 0.0 8192.0 0.0 8192.0)
    )
   (dummy-46 s4-0)
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *balloon-sg* '())
  (set!
   (-> obj part)
   (create-launch-control (-> *part-group-id-table* 227) obj)
   )
  (go balloon-idle)
  (none)
  )

;; definition of type spike
(deftype spike (process-drawable)
  ((root-override collide-shape  :offset        112)
   (num-alts      int32          :offset-assert 176)
   )
  :heap-base #x50
  :method-count-assert 20
  :size-assert         #xb4
  :flag-assert         #x14005000b4
  )

;; definition for method 3 of type spike
(defmethod inspect spike ((obj spike))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  (format #t "~T~Tnum-alts: ~D~%" (-> obj num-alts))
  obj
  )

;; failed to figure out what this is:
(let
  ((v1-8
    (new 'static 'skeleton-group
     :art-group-name "spike"
     :bounds
     (new 'static 'vector :y 32768.0 :w 41779.2)
     :max-lod 1
     :longest-edge (meters 5.0)
     :version #x6
     )
    )
   )
  (set! (-> v1-8 jgeo) 0)
  (set! (-> v1-8 janim) 3)
  (set! (-> v1-8 mgeo 0) (the-as uint 1))
  (set! (-> v1-8 lod-dist 0) 81920.0)
  (set! (-> v1-8 mgeo 1) (the-as uint 2))
  (set! (-> v1-8 lod-dist 1) 4095996000.0)
  (set! *spike-sg* v1-8)
  )

;; failed to figure out what this is:
(defstate spike-up (spike)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (if (= v1-0 'go-spike-up)
                    #t
                    )
     )
    )
   )
  :trans
  (behavior ()
   (when (nonzero? (-> self num-alts))
    (let ((s5-0 (/ (-> self num-alts) 2))
          (gp-0 #t)
          )
     (while (< s5-0 (+ (-> self num-alts) -1))
      (let ((v1-2 (entity-actor-lookup (-> self entity) 'alt-actor s5-0)))
       (if
        (and
         v1-2
         (-> v1-2 extra process)
         (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-1 from) self)
          (set! (-> a1-1 num-params) 0)
          (set! (-> a1-1 message) 'go-spike-up)
          (not (send-event-function (if v1-2
                                     (-> v1-2 extra process)
                                     )
                a1-1
                )
           )
          )
         )
        (set! gp-0 #f)
        )
       )
      (+! s5-0 1)
      )
     (when gp-0
      (set! (-> self num-alts) 0)
      0
      )
     )
    )
   (none)
   )
  :code
  (behavior ()
   (let ((a0-0 (-> self skel root-channel 0)))
    (set! (-> a0-0 frame-group) (if (> (-> self skel active-channels) 0)
                                 (-> self skel root-channel 0 frame-group)
                                 )
     )
    (set!
     (-> a0-0 param 0)
     (the float (+ (-> (if (> (-> self skel active-channels) 0)
                        (-> self skel root-channel 0 frame-group)
                        )
                    data
                    0
                    length
                    )
                 -1
                 )
      )
     )
    (set! (-> a0-0 param 1) 1.0)
    (set! (-> a0-0 frame-num) 0.0)
    (joint-control-channel-group! a0-0 (if (> (-> self skel active-channels) 0)
                                        (->
                                         self
                                         skel
                                         root-channel
                                         0
                                         frame-group
                                         )
                                        )
     num-func-seek!
     )
    )
   (until (ja-done? 0)
    (transform-post)
    (suspend)
    (let ((a0-1 (-> self skel root-channel 0)))
     (set!
      (-> a0-1 param 0)
      (the float (+ (-> a0-1 frame-group data 0 length) -1))
      )
     (set! (-> a0-1 param 1) 1.0)
     (joint-control-channel-group-eval!
      a0-1
      (the-as art-joint-anim #f)
      num-func-seek!
      )
     )
    )
   (while #t
    (suspend)
    )
   (none)
   )
  )

;; failed to figure out what this is:
(defstate spike-down (spike)
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (= v1-0 'go-spike-up)
                    (go spike-up)
                    #t
                    )
     )
    )
   )
  :trans
  (behavior ()
   (when (nonzero? (-> self num-alts))
    (let ((s5-0 0)
          (gp-0 #t)
          )
     (while (< s5-0 (/ (-> self num-alts) 2))
      (let ((v1-1 (entity-actor-lookup (-> self entity) 'alt-actor s5-0)))
       (if
        (and
         v1-1
         (-> v1-1 extra process)
         (let ((a1-1 (new 'stack-no-clear 'event-message-block)))
          (set! (-> a1-1 from) self)
          (set! (-> a1-1 num-params) 0)
          (set! (-> a1-1 message) 'go-spike-up)
          (not (send-event-function (if v1-1
                                     (-> v1-1 extra process)
                                     )
                a1-1
                )
           )
          )
         )
        (set! gp-0 #f)
        )
       )
      (+! s5-0 1)
      )
     (when gp-0
      (set! (-> self num-alts) 0)
      0
      )
     )
    )
   (none)
   )
  :code
  (behavior ()
   (transform-post)
   (while #t
    (suspend)
    )
   (none)
   )
  )

;; failed to figure out what this is:
(defstate spike-idle (spike)
  :trans
  (behavior ()
   (when (and *target* (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
                        (set! (-> a1-0 from) self)
                        (set! (-> a1-0 num-params) 1)
                        (set! (-> a1-0 message) 'query)
                        (set! (-> a1-0 param 0) (the-as uint 'mode))
                        (= (send-event-function *target* a1-0) 'racer)
                        )
          (<
           (vector-vector-distance (-> self root-override trans) (target-pos 0))
           225280.0
           )
          )
    (sound-play-by-name
     (static-sound-name "magma-rock")
     (new-sound-id)
     1024
     0
     0
     (the-as uint 1)
     (the-as vector #t)
     )
    (let ((v1-8 (entity-actor-count (-> self entity) 'alt-actor)))
     0
     (cond
      ((>= 1 v1-8)
       (go spike-up)
       )
      ((let* ((v1-11 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
              (v1-12 (the-as number (logior #x3f800000 v1-11)))
              )
        (< (+ -1.0 (the-as float v1-12)) 0.5)
        )
       (go spike-down)
       )
      (else
       (go spike-up)
       )
      )
     )
    )
   (none)
   )
  :code
  (behavior ()
   (transform-post)
   (while #t
    (suspend)
    )
   (none)
   )
  )

;; definition for method 11 of type spike
(defmethod copy-defaults! spike ((obj spike) (arg0 res-lump))
  (let
   ((s4-0 (new 'process 'collide-shape obj (collide-list-enum hit-by-player))))
   (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 4) 0)))
    (set! (-> s3-0 prim-core collide-as) (the-as uint 256))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set! (-> s3-0 prim-core offense) 4)
    (set! (-> s3-0 transform-index) 3)
    (set-vector! (-> s3-0 local-sphere) 0.0 24576.0 0.0 40960.0)
    (dummy-46 s4-0)
    (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
     (set! (-> s2-0 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-0 collide-with) (the-as uint 16))
     (set! (-> s2-0 prim-core action) (the-as uint 1))
     (set! (-> s2-0 prim-core offense) 4)
     (set! (-> s2-0 transform-index) 3)
     (set-vector! (-> s2-0 local-sphere) 0.0 8192.0 0.0 16384.0)
     )
    (dummy-28 s3-0)
    (let ((s2-1 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
     (set! (-> s2-1 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-1 collide-with) (the-as uint 16))
     (set! (-> s2-1 prim-core action) (the-as uint 1))
     (set! (-> s2-1 prim-core offense) 4)
     (set! (-> s2-1 transform-index) 3)
     (set-vector! (-> s2-1 local-sphere) 0.0 20480.0 0.0 16384.0)
     )
    (dummy-28 s3-0)
    (let ((s2-2 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
     (set! (-> s2-2 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-2 collide-with) (the-as uint 16))
     (set! (-> s2-2 prim-core action) (the-as uint 1))
     (set! (-> s2-2 prim-core offense) 4)
     (set! (-> s2-2 transform-index) 3)
     (set-vector! (-> s2-2 local-sphere) 0.0 32768.0 0.0 16384.0)
     )
    (dummy-28 s3-0)
    (let ((s2-3 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
     (set! (-> s2-3 prim-core collide-as) (the-as uint 256))
     (set! (-> s2-3 collide-with) (the-as uint 16))
     (set! (-> s2-3 prim-core action) (the-as uint 1))
     (set! (-> s2-3 prim-core offense) 4)
     (set! (-> s2-3 transform-index) 3)
     (set-vector! (-> s2-3 local-sphere) 0.0 45056.0 0.0 16384.0)
     )
    (dummy-28 s3-0)
    )
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *spike-sg* '())
  (set! (-> obj draw origin-joint-index) (the-as uint 3))
  (set! (-> obj num-alts) (entity-actor-count (-> obj entity) 'alt-actor))
  (if (zero? (-> obj num-alts))
   (go spike-down)
   (go spike-idle)
   )
  (none)
  )

;; failed to figure out what this is:
(let
  ((v1-12
    (new 'static 'skeleton-group
     :art-group-name "crate-darkeco-cluster"
     :bounds
     (new 'static 'vector :y 6553.6 :w 13516.8)
     :max-lod 1
     :version #x6
     )
    )
   )
  (set! (-> v1-12 jgeo) 0)
  (set! (-> v1-12 janim) 3)
  (set! (-> v1-12 mgeo 0) (the-as uint 1))
  (set! (-> v1-12 lod-dist 0) 81920.0)
  (set! (-> v1-12 mgeo 1) (the-as uint 2))
  (set! (-> v1-12 lod-dist 1) 4095996000.0)
  (set! *crate-darkeco-cluster-sg* v1-12)
  )

;; definition of type crate-darkeco-cluster
(deftype crate-darkeco-cluster (process-drawable)
  ((root-override collide-shape  :offset 112)
   )
  :heap-base #x40
  :method-count-assert 22
  :size-assert         #xb0
  :flag-assert         #x16004000b0
  (:methods
    (idle () _type_ :state 20)
    (die () _type_ :state 21)
    )
  )

;; definition for method 3 of type crate-darkeco-cluster
(defmethod inspect crate-darkeco-cluster ((obj crate-darkeco-cluster))
  (let ((t9-0 (method-of-type process-drawable inspect)))
   (t9-0 obj)
   )
  obj
  )

;; failed to figure out what this is:
(set!
  (-> *part-group-id-table* 228)
  (new 'static 'sparticle-launch-group
   :length 69
   :duration #x258
   :linger-duration #x5dc
   :flags #x1
   :name "group-dark-cluster-explosion"
   :launcher
   (new 'static 'inline-array sparticle-group-item 69
    (new 'static 'sparticle-group-item
     :launcher #x834
     :period #x258
     :length #x5
     )
    (new 'static 'sparticle-group-item
     :launcher #x835
     :period #x258
     :length #x28
     )
    (new 'static 'sparticle-group-item
     :launcher #x836
     :period #x258
     :length #x14
     )
    (new 'static 'sparticle-group-item
     :launcher #x837
     :period #x258
     :length #x14
     )
    (new 'static 'sparticle-group-item
     :launcher #x838
     :fade-after (meters 100.0)
     :period #x258
     :length #x5
     :binding #x128
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    (new 'static 'sparticle-group-item
     :launcher #x128
     :flags #xc
     :binding #x129
     )
    (new 'static 'sparticle-group-item
     :launcher #x129
     :fade-after (meters 80.0)
     :falloff-to (meters 100.0)
     :flags #x4
     )
    )
   :bounds (new 'static 'sphere :w 49152.0)
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2104)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 16
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xa
     :flags #x1
     :initial-valuef -8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xc
     :flags #x1
     :initial-valuef -8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 409.6
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x15 :flags #x1 :random-multf 1.0)
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 218.45334
     :random-rangef 109.22667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -1.3653333
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.94
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #xf0)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x8)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :random-rangef 25486.223
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2101)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 22
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200f00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 12.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 12288.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 1638.4
     :random-rangef 3276.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 32.0
     :random-rangef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 163.84
     :random-rangef 655.36
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef -10.922667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef -0.68266666
     :random-rangef -0.68266666
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.9
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x12c)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4004)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x32
     :initial-valuef (the-as float #x1e)
     :random-rangef (the-as float #x59)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x33
     :flags #x6
     :initial-valuef (the-as float #x839)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :random-rangef 21845.334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :initial-valuef 8192.0
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2105)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 2
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -1.0666667
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2103)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 15
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200f00)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 12.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 12288.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 1228.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 32768.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x1
     :initial-valuef 49152.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 32.0
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x1
     :initial-valuef 4259.84
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -1.6
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x3c)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x400c)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2100)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 13
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x201200)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 1.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 8192.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 98304.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :initial-valuef 192.0
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 128.0
     :random-rangef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 128.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -2.3272727
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x36)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x400c)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(set!
  (-> *part-id-table* 2102)
  (new 'static 'sparticle-launcher
   :init-specs
   (new 'static 'inline-array sp-field-init-spec 23
    (new 'static 'sp-field-init-spec
     :field #x1
     :initial-valuef (the-as float #x200000)
     )
    (new 'static 'sp-field-init-spec
     :field #x6
     :flags #x1
     :initial-valuef 16.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xb
     :flags #x1
     :initial-valuef 4096.0
     :random-rangef 12288.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #xd
     :flags #x1
     :initial-valuef 12288.0
     :random-rangef 6144.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x10
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x11
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x12
     :flags #x1
     :random-rangef 96.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x13
     :flags #x1
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x14
     :flags #x1
     :initial-valuef 64.0
     :random-rangef 32.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x15
     :flags #x1
     :initial-valuef 64.0
     :random-rangef 64.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1a
     :flags #x1
     :initial-valuef 327.68
     :random-rangef 163.84
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1c
     :flags #x1
     :initial-valuef 81.92
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x1f
     :flags #x1
     :initial-valuef -109.22667
     :random-rangef 218.45334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x20
     :flags #x3
     :initial-valuef (the-as float #xfffffffc)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x24
     :flags #x1
     :initial-valuef -0.28444445
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x26
     :flags #x1
     :initial-valuef 0.68266666
     :random-rangef 0.68266666
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2d
     :flags #x1
     :initial-valuef 0.8
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x2e
     :initial-valuef (the-as float #x1fe)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x2f
     :initial-valuef (the-as float #x4004)
     :random-multf (the-as float #x1)
     )
    (new 'static 'sp-field-init-spec
     :field #x3a
     :flags #x1
     :random-rangef 21845.334
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3b
     :flags #x1
     :random-rangef 65536.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec
     :field #x3e
     :flags #x1
     :random-rangef 16384.0
     :random-multf 1.0
     )
    (new 'static 'sp-field-init-spec :field #x43)
    )
   )
  )

;; failed to figure out what this is:
(defstate die (crate-darkeco-cluster)
  :virtual #t
  :code
  (behavior ()
   (ja-channel-set! 0)
   (dummy-48 (-> self root-override))
   (ja-post)
   (sound-play-by-name
    (static-sound-name "dcrate-break")
    (new-sound-id)
    1024
    0
    0
    (the-as uint 1)
    (the-as vector #t)
    )
   (let ((gp-1 (get-process *default-dead-pool* part-tracker #x4000)))
    (when gp-1
     (let ((t9-6 (method-of-type part-tracker activate)))
      (t9-6
       (the-as part-tracker gp-1)
       *entity-pool*
       'part-tracker
       (the-as pointer #x70004000)
       )
      )
     (run-now-in-process
      gp-1
      part-tracker-init
      (-> *part-group-id-table* 228)
      -1
      #f
      #f
      #f
      (-> self root-override trans)
      )
     (-> gp-1 ppointer)
     )
    )
   (suspend)
   (dummy-18 self)
   (deactivate self)
   (none)
   )
  )

;; failed to figure out what this is:
(defstate idle (crate-darkeco-cluster)
  :virtual #t
  :event
  (behavior ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
   (let ((v1-0 arg2))
    (the-as object (when (or (= v1-0 'attack) (= v1-0 'touch))
                    (let ((a1-3 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-3 from) self)
                     (set! (-> a1-3 num-params) 2)
                     (set! (-> a1-3 message) 'attack)
                     (set! (-> a1-3 param 0) (-> arg3 param 0))
                     (let ((a2-2 (new 'static 'attack-info :mask #x20)))
                      (set! (-> a2-2 mode) 'darkeco)
                      (set! (-> a1-3 param 1) (the-as uint a2-2))
                      )
                     (send-event-function arg0 a1-3)
                     )
                    (go-virtual die)
                    )
     )
    )
   )
  :code
  (behavior ()
   (transform-post)
   (logior! (-> self mask) (process-mask sleep))
   (suspend)
   0
   (none)
   )
  )

;; definition for method 11 of type crate-darkeco-cluster
(defmethod
  copy-defaults!
  crate-darkeco-cluster
  ((obj crate-darkeco-cluster) (arg0 res-lump))
  (let
   ((s4-0
     (new 'process 'collide-shape obj (collide-list-enum usually-hit-by-player))
     )
    )
   (let
    ((s3-0
      (new
       'process
       'collide-shape-prim-mesh
       s4-0
       (the-as uint 0)
       (the-as uint 0)
       )
      )
     )
    (set! (-> s3-0 prim-core collide-as) (the-as uint 128))
    (set! (-> s3-0 collide-with) (the-as uint 16))
    (set! (-> s3-0 prim-core action) (the-as uint 1))
    (set! (-> s3-0 prim-core offense) 1)
    (set! (-> s3-0 transform-index) 3)
    (set-vector! (-> s3-0 local-sphere) 0.0 6553.6 0.0 13516.8)
    )
   (dummy-46 s4-0)
   (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
   (dummy-50 s4-0)
   (set! (-> obj root-override) s4-0)
   )
  (process-drawable-from-entity! obj arg0)
  (dummy-14 obj *crate-darkeco-cluster-sg* '())
  (go (method-of-object obj idle))
  (none)
  )




