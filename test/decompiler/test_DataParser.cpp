
#include "gtest/gtest.h"
#include "decompiler/util/DataParser.h"
#include "decompiler/Disasm/DecompilerLabel.h"
#include "decompiler/util/data_decompile.h"
#include "decompiler/util/DecompilerTypeSystem.h"
#include "third-party/fmt/core.h"
#include "common/goos/PrettyPrinter.h"
#include "decompiler/VuDisasm/VuDisassembler.h"

using namespace decompiler;

class DataDecompTest : public ::testing::Test {
 protected:
  static std::unique_ptr<decompiler::DecompilerTypeSystem> dts;

  static void SetUpTestCase() {
    dts = std::make_unique<DecompilerTypeSystem>();
    dts->parse_type_defs({"decompiler", "config", "all-types.gc"});
  }

  static void TearDownTestCase() { dts.reset(); }

  void check_forms_equal(const std::string& actual, const std::string& expected) {
    auto expected_form =
        pretty_print::get_pretty_printer_reader().read_from_string(expected, false).as_pair()->car;
    auto actual_form =
        pretty_print::get_pretty_printer_reader().read_from_string(actual, false).as_pair()->car;
    if (expected_form != actual_form) {
      printf("Got:\n%s\n\nExpected\n%s\n", pretty_print::to_string(actual_form).c_str(),
             pretty_print::to_string(expected_form).c_str());
    }
    EXPECT_TRUE(expected_form == actual_form);
  }
};

std::unique_ptr<DecompilerTypeSystem> DataDecompTest::dts;

TEST_F(DataDecompTest, Basic) {
  // just test we can parse a very simple data.
  std::string input =
      "L123: (offset 2)\n"
      "    .type test\n"
      "    .symbol #t\n"
      "L234:\n"
      "    .empty-list\n"
      "    .word L123\n"
      "    .word L555\n"
      "L555:\n"
      "    .symbol asdf\n"
      "    .word 0x0\n"
      "    .word 0xdeadbeef\n"
      "    .word 0xffffffff\n";
  auto result = parse_data(input);
  EXPECT_EQ(input, result.print());
}

TEST_F(DataDecompTest, FromDecomp) {
  std::string input =
      "    .symbol finalboss\n"
      "    .empty-list\n"
      "    .symbol *finalboss-mood*\n"
      "    .symbol update-mood-finalboss\n"
      "    .symbol #f\n"
      "    .symbol #t\n"
      "    .word 0x3f800000\n"
      "    .word L55\n"
      "    .empty-list\n"
      "    .word 0x64\n"
      "    .empty-list\n"
      "    .empty-list\n"
      "    .word 0x0\n"
      "L63:\n"
      "    .word 0xffffffff\n"
      "L62:\n"
      "    .word 0xffffffff\n"
      "L968:\n"
      "    .word L54\n"
      "    .word 0x5b\n"
      "    .word 0xc8e40000\n"
      "    .word L53\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .symbol #f\n"
      "    .word 0x0\n"
      "L53: (offset 2)\n"
      "    .word L968\n"
      "    .empty-list\n"
      "L54:\n"
      "    .word 0x4b34a000\n"
      "    .word 0x4a020000\n"
      "    .word 0xcb956000\n"
      "    .word 0x493e0000\n"
      "L55: (offset 2)\n"
      "    .word L63\n"
      "    .word L56\n"
      "L56: (offset 2)\n"
      "    .word L57\n"
      "    .empty-list\n"
      "    .type continue-point\n"
      "L57:\n"
      "    .word L62\n"
      "    .symbol finalboss\n"
      "    .word 0x0\n"
      "    .word 0x4b3b814f\n"
      "    .word 0x49f088ef\n"
      "    .word 0xcb976ea5\n"
      "    .word 0x3f800000\n"
      "    .word 0x0\n"
      "    .word 0xbf0930be\n"
      "    .word 0x0\n";
  auto result = parse_data(input);
  EXPECT_EQ(input, result.print());
}

TEST_F(DataDecompTest, String) {
  std::string input =
      "    .type string\n"
      "L62:\n"
      "    .word 0xf\n"
      "    .word 0x616e6966\n"
      "    .word 0x736f626c\n"
      "    .word 0x69662d73\n"
      "    .word 0x746867\n"
      "    .word 0x0\n"
      "    .word 0x0\n";
  auto parsed = parse_data(input);
  auto decomp =
      decompile_at_label_guess_type(parsed.label("L62"), parsed.labels, {parsed.words}, dts->ts);
  EXPECT_EQ(decomp.print(), "\"finalboss-fight\"");
}

TEST_F(DataDecompTest, SimpleStructure) {
  std::string input =
      "L217:\n"
      "    .word 0x7f\n"
      "    .word 0x1\n"
      "    .word 0x0\n"
      "    .word 0x2\n"
      "    .word L218\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .type string\n"
      "L218:\n"
      "    .word 0x6\n"
      "    .word 0x79637473\n"
      "    .word 0x6c63\n";
  auto parsed = parse_data(input);
  auto decomp = decompile_at_label(TypeSpec("vif-disasm-element"), parsed.label("L217"),
                                   parsed.labels, {parsed.words}, dts->ts);
  check_forms_equal(decomp.print(),
                    "(new 'static 'vif-disasm-element :mask #x7f :tag (vif-cmd-32 stcycl) :print "
                    "#x2 :string1 \"stcycl\")");
}

TEST_F(DataDecompTest, VifDisasmArray) {
  std::string input =
      ".type array\n"
      "L148:\n"
      "    .word 0x3\n"
      "    .word 0x3\n"
      "    .type vif-disasm-element\n"
      "    .word L219\n"
      "    .word L217\n"
      "    .word L215\n"
      "    .word 0x0\n"
      "L215:\n"
      "    .word 0x7f\n"
      "    .word 0x2\n"
      "    .word 0x0\n"
      "    .word 0x1\n"
      "    .word L216\n"
      "    .word L216\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .type string\n"
      "L216:\n"
      "    .word 0x6\n"
      "    .word 0x7366666f\n"
      "    .word 0x7465\n"
      "L217:\n"
      "    .word 0x7f\n"
      "    .word 0x1\n"
      "    .word 0x0\n"
      "    .word 0x2\n"
      "    .word L218\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .type string\n"
      "L218:\n"
      "    .word 0x6\n"
      "    .word 0x79637473\n"
      "    .word 0x6c63\n"
      "L219:\n"
      "    .word 0x7f\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word L220\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .type string\n"
      "L220:\n"
      "    .word 0x3\n"
      "    .word 0x706f6e\n"
      "    .word 0x0";
  auto parsed = parse_data(input);
  auto decomp =
      decompile_at_label_guess_type(parsed.label("L148"), parsed.labels, {parsed.words}, dts->ts);
  check_forms_equal(decomp.print(),
                    "(new 'static 'boxed-array vif-disasm-element 3\n"
                    "  (new 'static 'vif-disasm-element :mask #x7f :string1 \"nop\")\n"
                    "  (new 'static 'vif-disasm-element :mask #x7f :tag (vif-cmd-32 stcycl) :print "
                    "#x2 :string1 \"stcycl\")\n"
                    "  (new 'static 'vif-disasm-element :mask #x7f :tag (vif-cmd-32 offset) :print "
                    "#x1 :string1 \"offset\" "
                    "      :string2 \"offset\"))");
}

TEST_F(DataDecompTest, ContinuePoint) {
  std::string input =
      "    .type continue-point\n"
      "L63:\n"
      "    .word L69\n"
      "    .symbol finalboss\n"
      "    .word 0x0\n"
      "    .word 0x4b303728\n"
      "    .word 0x4a073f00\n"
      "    .word 0xcb94152d\n"
      "    .word 0x3f800000\n"
      "    .word 0x0\n"
      "    .word 0x3f3b851f\n"
      "    .word 0x0\n"
      "    .word 0x3f2e425b\n"
      "    .word 0x4b2faddf\n"
      "    .word 0x4a0869de\n"
      "    .word 0xcb94485e\n"
      "    .word 0x3f800000\n"
      "    .word 0x3f169ad4\n"
      "    .word 0x0\n"
      "    .word 0xbf4ef9db\n"
      "    .word 0x3ddbf488\n"
      "    .word 0x3f7db8bb\n"
      "    .word 0x3d9ff2e5\n"
      "    .word 0x3f4d288d\n"
      "    .word 0xbe07fcb9\n"
      "    .word 0x3f15460b\n"
      "    .word L64\n"
      "    .symbol fin\n"
      "    .symbol finalboss\n"
      "    .symbol display\n"
      "    .symbol citadel\n"
      "    .symbol special\n"
      "    .word 0x0\n"
      "L64: (offset 2)\n"
      "    .word L65\n"
      "    .empty-list\n"
      "L65: (offset 2)\n"
      "    .symbol special\n"
      "    .word L66\n"
      "L66: (offset 2)\n"
      "    .word L68\n"
      "    .word L67\n"
      "L67: (offset 2)\n"
      "    .symbol #t\n"
      "    .empty-list\n"
      "    .type string\n"
      "L68:\n"
      "    .word 0x10\n"
      "    .word 0x62746963\n"
      "    .word 0x6978652d\n"
      "    .word 0x6c702d74\n"
      "    .word 0x342d7461\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .type string\n"
      "L69:\n"
      "    .word 0xf\n"
      "    .word 0x616e6966\n"
      "    .word 0x736f626c\n"
      "    .word 0x74732d73\n"
      "    .word 0x747261";
  auto parsed = parse_data(input);
  auto decomp =
      decompile_at_label_guess_type(parsed.label("L63"), parsed.labels, {parsed.words}, dts->ts);
  check_forms_equal(decomp.print(),
                    "(new 'static 'continue-point\n"
                    "     :name \"finalboss-start\"\n"
                    "     :level 'finalboss\n"
                    "     :trans (new 'static 'vector\n"
                    "                 :x 11548456.0\n"
                    "                 :y 2215872.0\n"
                    "                 :z -19409498.0\n"
                    "                 :w 1.0\n"
                    "                 )\n"
                    "     :quat (new 'static 'vector\n"
                    "                :y 0.7325\n"
                    "                :w 0.6807\n"
                    "                )\n"
                    "     :camera-trans (new 'static 'vector\n"
                    "                        :x 11513311.0\n"
                    "                        :y 2234999.5\n"
                    "                        :z -19435708.0\n"
                    "                        :w 1.0\n"
                    "                        )\n"
                    "     :camera-rot (new 'static 'array float 9\n"
                    "                      0.5883\n"
                    "                      0.0\n"
                    "                      -0.8085\n"
                    "                      0.1074\n"
                    "                      0.9911\n"
                    "                      0.0781\n"
                    "                      0.8014\n"
                    "                      -0.1328\n"
                    "                      0.5831\n"
                    "                      )\n"
                    "     :load-commands '((special \"citb-exit-plat-4\" #t))\n"
                    "     :vis-nick 'fin\n"
                    "     :lev0 'finalboss\n"
                    "     :disp0 'display\n"
                    "     :lev1 'citadel\n"
                    "     :disp1 'special\n"
                    "     )");
}

TEST_F(DataDecompTest, FloatArray) {
  std::string input =
      "    .type continue-point\n"
      "L63:\n"
      "    .word 0x3f800000\n"
      "    .word 0x0\n"
      "    .word 0x3f800000\n"
      "    .word 0x0\n"
      "    .word 0x3f800000\n"
      "    .word 0x0\n"
      "    .word 0x3f800000\n\n";
  auto parsed = parse_data(input);
  auto decomp = decompile_at_label_with_hint({"(pointer float)", true, 7}, parsed.label("L63"),
                                             parsed.labels, {parsed.words}, *dts);
  check_forms_equal(decomp.print(),
                    "(new 'static 'array float 7\n"
                    "1.0 0.0 1.0 0.0 1.0 0.0 1.0)");
}

TEST_F(DataDecompTest, Bitfield) {
  // this is for testing bitfields from a 64-bit static constant.
  std::string input =
      "L80:\n"
      "    .word 0x80400040\n"
      "    .word 0x0";
  auto parsed = parse_data(input);
  auto& ts = dts->ts;
  auto typespec = ts.make_typespec("rgba");
  auto info = dynamic_cast<BitFieldType*>(ts.lookup_type(typespec));
  auto decomp =
      decompile_bitfield(typespec, info, parsed.label("L80"), parsed.labels, {parsed.words}, ts);
  check_forms_equal(decomp.print(), "(new 'static 'rgba :r #x40 :b #x40 :a #x80)");
}

TEST_F(DataDecompTest, KernelContext) {
  std::string input =
      "    .type kernel-context\n"
      "L345:\n"
      "    .word 0x41\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word 0x2\n"
      "    .word 0x0\n"
      "    .symbol #f\n"
      "    .symbol #f\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .word 0x0\n"
      "    .symbol #t\n";
  auto parsed = parse_data(input);
  auto decomp =
      decompile_at_label_guess_type(parsed.label("L345"), parsed.labels, {parsed.words}, dts->ts);
  check_forms_equal(decomp.print(),
                    "(new 'static 'kernel-context\n"
                    "  :prevent-from-run (process-mask execute sleep)\n"
                    "  :next-pid 2\n"
                    "  :current-process #f\n"
                    "  :relocating-process #f\n"
                    "  :low-memory-message #t)\n");
}

TEST_F(DataDecompTest, VuDisasmSpriteDistort) {
  std::string input =
      "L345:\n"
      //      "    .word 0x3f\n"
      //      "    .word 0x0\n"
      //      "    .word 0x20\n"
      //      "    .word 0x0\n"
      "    .word 0x1e101e9\n"
      "    .word 0x2ff\n"
      "    .word 0x1e501ea\n"
      "    .word 0x2ff\n"
      "    .word 0x90101ff\n"
      "    .word 0x2ff\n"
      "    .word 0x10040200\n"
      "    .word 0x2ff\n"
      "    .word 0x80020032\n"
      "    .word 0x2ff\n"
      "    .word 0x8272001\n"
      "    .word 0x2ff\n"
      "    .word 0x80001175\n"
      "    .word 0x2ff\n"
      "    .word 0x90639dd\n"
      "    .word 0x2ff\n"
      "    .word 0x81e50b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x11083800\n"
      "    .word 0x2ff\n"
      "    .word 0x11084000\n"
      "    .word 0x2ff\n"
      "    .word 0xb082fff\n"
      "    .word 0x2ff\n"
      "    .word 0x81e2237c\n"
      "    .word 0x2ff\n"
      "    .word 0x81e3237c\n"
      "    .word 0x2ff\n"
      "    .word 0x81e4237c\n"
      "    .word 0x2ff\n"
      "    .word 0x80000030\n"
      "    .word 0x1ee117d\n"
      "    .word 0x81e6337c\n"
      "    .word 0x2ff\n"
      "    .word 0x81e7337c\n"
      "    .word 0x2ff\n"
      "    .word 0x1e83000\n"
      "    .word 0x2ff\n"
      "    .word 0x1e93001\n"
      "    .word 0x2ff\n"
      "    .word 0x80073ff2\n"
      "    .word 0x1e43299\n"
      "    .word 0x80000030\n"
      "    .word 0x1e43ada\n"
      "    .word 0x80000030\n"
      "    .word 0x1e44319\n"
      "    .word 0x80000030\n"
      "    .word 0x1e44b5a\n"
      "    .word 0x80000030\n"
      "    .word 0x1e43198\n"
      "    .word 0x80000030\n"
      "    .word 0x1e439d8\n"
      "    .word 0x80000030\n"
      "    .word 0x1e44218\n"
      "    .word 0x80000030\n"
      "    .word 0x1e44a58\n"
      "    .word 0x80000030\n"
      "    .word 0x1e252a8\n"
      "    .word 0x80000030\n"
      "    .word 0x1e35ae8\n"
      "    .word 0x80000030\n"
      "    .word 0x1e26328\n"
      "    .word 0x80000030\n"
      "    .word 0x1e36b68\n"
      "    .word 0x80000030\n"
      "    .word 0x1e231a8\n"
      "    .word 0x80000030\n"
      "    .word 0x1e339e8\n"
      "    .word 0x80000030\n"
      "    .word 0x1e24228\n"
      "    .word 0x80000030\n"
      "    .word 0x1e34a68\n"
      "    .word 0x80000030\n"
      "    .word 0x1ea517d\n"
      "    .word 0x80000030\n"
      "    .word 0x1ec617d\n"
      "    .word 0x80000030\n"
      "    .word 0x1e6317d\n"
      "    .word 0x80000030\n"
      "    .word 0x1e8417d\n"
      "    .word 0x81e53b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e52b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e5337d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e54b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e52b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e5437d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e55b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e52b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e5537d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e56b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e52b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e5637d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e51b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x81e52b7d\n"
      "    .word 0x2ff\n"
      "    .word 0x52003fd9\n"
      "    .word 0x2ff\n"
      "    .word 0x81e5737d\n"
      "    .word 0x2ff\n"
      "    .word 0x800016fc\n"
      "    .word 0x2ff\n"
      "    .word 0x80010ff2\n"
      "    .word 0x2ff\n"
      "    .word 0x100300b0\n"
      "    .word 0x2ff\n"
      "    .word 0x52000fc9\n"
      "    .word 0x2ff\n"
      "    .word 0x800218b1\n"
      "    .word 0x2ff\n"
      "    .word 0x80000030\n"
      "    .word 0x400002ff\n"
      "    .word 0x80000030\n"
      "    .word 0x2ff\n";
  auto parsed = parse_data(input);

  std::vector<u32> data;
  for (auto& w : parsed.words) {
    ASSERT_EQ(w.kind, LinkedWord::Kind::PLAIN_DATA);
    data.push_back(w.data);
  }

  VuDisassembler disasm;
  auto prog = disasm.disassemble(data.data(), data.size() * 4);

  EXPECT_EQ(disasm.to_string(prog),
            "  lq.xyzw vf01, 489(vi00)    |  nop                      \n"  // some constant
            "  lq.xyzw vf05, 490(vi00)    |  nop                      \n"  // some constant
            "  ilw.x vi01, 511(vi00)      |  nop                      \n"  // outer loop counter
            "  iaddiu vi04, vi00, 0x200   |  nop                      \n"  // base for something
            "  iaddi vi02, vi00, 0x0      |  nop                      \n"  // prim data?
            "L2:\n"
            "  ilw.w vi07, 1(vi04)        |  nop                      \n"  // inner chain
            "  ior vi05, vi02, vi00       |  nop                      \n"  // incrementing store ptr
            "  ilw.x vi06, 477(vi07)      |  nop                      \n"  // data ptr
            "  sqi.xyzw vf01, vi05        |  nop                      \n"  // store gfx data
            "  iaddiu vi08, vi07, 0x4000  |  nop                      \n"  //
            "  iaddiu vi08, vi08, 0x4000  |  nop                      \n"
            "  isw.x vi08, -1(vi05)       |  nop                      \n"
            "  lqi.xyzw vf02, vi04        |  nop                      \n"
            "  lqi.xyzw vf03, vi04        |  nop                      \n"
            "  lqi.xyzw vf04, vi04        |  nop                      \n"
            "  nop                        |  ftoi4.xyzw vf14, vf02    \n"
            "L1:\n"
            "  lqi.xyzw vf06, vi06        |  nop                      \n"
            "  lqi.xyzw vf07, vi06        |  nop                      \n"
            "  lq.xyzw vf08, 0(vi06)      |  nop                      \n"
            "  lq.xyzw vf09, 1(vi06)      |  nop                      \n"
            "  iaddi vi07, vi07, -0x1     |  muly.xyzw vf10, vf06, vf04\n"
            "  nop                        |  mulz.xyzw vf11, vf07, vf04\n"
            "  nop                        |  muly.xyzw vf12, vf08, vf04\n"
            "  nop                        |  mulz.xyzw vf13, vf09, vf04\n"
            "  nop                        |  mulx.xyzw vf06, vf06, vf04\n"
            "  nop                        |  mulx.xyzw vf07, vf07, vf04\n"
            "  nop                        |  mulx.xyzw vf08, vf08, vf04\n"
            "  nop                        |  mulx.xyzw vf09, vf09, vf04\n"
            "  nop                        |  add.xyzw vf10, vf10, vf02\n"
            "  nop                        |  add.xyzw vf11, vf11, vf03\n"
            "  nop                        |  add.xyzw vf12, vf12, vf02\n"
            "  nop                        |  add.xyzw vf13, vf13, vf03\n"
            "  nop                        |  add.xyzw vf06, vf06, vf02\n"
            "  nop                        |  add.xyzw vf07, vf07, vf03\n"
            "  nop                        |  add.xyzw vf08, vf08, vf02\n"
            "  nop                        |  add.xyzw vf09, vf09, vf03\n"
            "  nop                        |  ftoi4.xyzw vf10, vf10    \n"
            "  nop                        |  ftoi4.xyzw vf12, vf12    \n"
            "  nop                        |  ftoi4.xyzw vf06, vf06    \n"
            "  nop                        |  ftoi4.xyzw vf08, vf08    \n"
            "  sqi.xyzw vf07, vi05        |  nop                      \n"
            "  sqi.xyzw vf05, vi05        |  nop                      \n"
            "  sqi.xyzw vf06, vi05        |  nop                      \n"
            "  sqi.xyzw vf09, vi05        |  nop                      \n"
            "  sqi.xyzw vf05, vi05        |  nop                      \n"
            "  sqi.xyzw vf08, vi05        |  nop                      \n"
            "  sqi.xyzw vf11, vi05        |  nop                      \n"
            "  sqi.xyzw vf05, vi05        |  nop                      \n"
            "  sqi.xyzw vf10, vi05        |  nop                      \n"
            "  sqi.xyzw vf13, vi05        |  nop                      \n"
            "  sqi.xyzw vf05, vi05        |  nop                      \n"
            "  sqi.xyzw vf12, vi05        |  nop                      \n"
            "  sqi.xyzw vf03, vi05        |  nop                      \n"
            "  sqi.xyzw vf05, vi05        |  nop                      \n"
            "  ibne vi00, vi07, L1        |  nop                      \n"
            "  sqi.xyzw vf14, vi05        |  nop                      \n"
            "  xgkick vi02                |  nop                      \n"  // go!
            "  iaddi vi01, vi01, -0x1     |  nop                      \n"
            "  iaddiu vi03, vi00, 0xb0    |  nop                      \n"
            "  ibne vi00, vi01, L2        |  nop                      \n"
            "  isub vi02, vi03, vi02      |  nop                      \n"
            "  nop                        |  nop :e                   \n"
            "  nop                        |  nop                      \n");
}

TEST_F(DataDecompTest, VuDisasmBackgroundVu0) {
  std::string input =
      "L123:\n"
      //      "    .word 0x3b\n"
      //      "    .word 0x0\n"
      //      "    .word 0x1e\n"
      //      "    .word 0x0\n"
      "    .word 0x3e0c004\n"
      "    .word 0x1e00053\n"
      "    .word 0x3e0c805\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0d006\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0d807\n"
      "    .word 0x2ff\n"
      "    .word 0x3e08000\n"
      "    .word 0x1f80e1a\n"
      "    .word 0x3e08801\n"
      "    .word 0x1f90e5a\n"
      "    .word 0x3e09002\n"
      "    .word 0x1fa0e9a\n"
      "    .word 0x3e09803\n"
      "    .word 0x1fb0eda\n"
      "    .word 0x3e0c00c\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0c80d\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0d00e\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0d80f\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0e008\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0e809\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0f00a\n"
      "    .word 0x2ff\n"
      "    .word 0x3e0f80b\n"
      "    .word 0x400002ff\n"
      "    .word 0x100200f0\n"
      "    .word 0x2ff\n"
      "    .word 0x1f00000\n"
      "    .word 0x2ff\n"
      "    .word 0x1f10001\n"
      "    .word 0x2ff\n"
      "    .word 0x1f20002\n"
      "    .word 0x2ff\n"
      "    .word 0x1f30003\n"
      "    .word 0x2ff\n"
      "    .word 0x1f8000c\n"
      "    .word 0x2ff\n"
      "    .word 0x1f9000d\n"
      "    .word 0x2ff\n"
      "    .word 0x1fa000e\n"
      "    .word 0x400002ff\n"
      "    .word 0x1fb000f\n"
      "    .word 0x2ff\n"
      "    .word 0x1f00000\n"
      "    .word 0x2ff\n"
      "    .word 0x1f10001\n"
      "    .word 0x2ff\n"
      "    .word 0x1f20002\n"
      "    .word 0x400002ff\n"
      "    .word 0x1f30003\n"
      "    .word 0x2ff\n"
      "    .word 0x1f80004\n"
      "    .word 0x2ff\n"
      "    .word 0x1f90005\n"
      "    .word 0x2ff\n"
      "    .word 0x1fa0006\n"
      "    .word 0x400002ff\n"
      "    .word 0x1fb0007\n"
      "    .word 0x2ff\n"
      "    .word 0x1f8000c\n"
      "    .word 0x1e281bc\n"
      "    .word 0x1f9000d\n"
      "    .word 0x1e288bd\n"
      "    .word 0x1fa000e\n"
      "    .word 0x1e290be\n"
      "    .word 0x1fb000f\n"
      "    .word 0x1e098ff\n"
      "    .word 0x80000030\n"
      "    .word 0x1e2090b\n"
      "    .word 0x80000030\n"
      "    .word 0x1e2c1bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e2c8bd\n"
      "    .word 0x80000030\n"
      "    .word 0x41e2d0be\n"
      "    .word 0x34011000\n"
      "    .word 0x1e0d98b\n"
      "    .word 0x1f00000\n"
      "    .word 0x2ff\n"
      "    .word 0x1f10001\n"
      "    .word 0x2ff\n"
      "    .word 0x1f20002\n"
      "    .word 0x2ff\n"
      "    .word 0x1f30003\n"
      "    .word 0x2ff\n"
      "    .word 0x1fc0008\n"
      "    .word 0x1e281bc\n"
      "    .word 0x1fd0009\n"
      "    .word 0x1e288bd\n"
      "    .word 0x1fe000a\n"
      "    .word 0x1e290be\n"
      "    .word 0x1ff000b\n"
      "    .word 0x1e098ff\n"
      "    .word 0x1f80004\n"
      "    .word 0x1e2090b\n"
      "    .word 0x1f90005\n"
      "    .word 0x1e2e1bc\n"
      "    .word 0x1fa0006\n"
      "    .word 0x1e2e8bd\n"
      "    .word 0x1fb0007\n"
      "    .word 0x1e2f0be\n"
      "    .word 0x34011000\n"
      "    .word 0x1e0f94b\n"
      "    .word 0x80000030\n"
      "    .word 0x1e2c1bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e2c8bd\n"
      "    .word 0x80000030\n"
      "    .word 0x41e2d0be\n"
      "    .word 0x80000030\n"
      "    .word 0x1e0d98b";
  auto parsed = parse_data(input);

  std::vector<u32> data;
  for (auto& w : parsed.words) {
    ASSERT_EQ(w.kind, LinkedWord::Kind::PLAIN_DATA);
    data.push_back(w.data);
  }

  VuDisassembler disasm;
  auto prog = disasm.disassemble(data.data(), data.size() * 4, false);

  EXPECT_EQ(disasm.to_string(prog),
            "  sq.xyzw vf24, 4(vi00)      |  maxw.xyzw vf01, vf00, vf00\n"
            "  sq.xyzw vf25, 5(vi00)      |  nop                      \n"
            "  sq.xyzw vf26, 6(vi00)      |  nop                      \n"
            "  sq.xyzw vf27, 7(vi00)      |  nop                      \n"
            "  sq.xyzw vf16, 0(vi00)      |  mulz.xyzw vf24, vf01, vf24\n"
            "  sq.xyzw vf17, 1(vi00)      |  mulz.xyzw vf25, vf01, vf25\n"
            "  sq.xyzw vf18, 2(vi00)      |  mulz.xyzw vf26, vf01, vf26\n"
            "  sq.xyzw vf19, 3(vi00)      |  mulz.xyzw vf27, vf01, vf27\n"
            "  sq.xyzw vf24, 12(vi00)     |  nop                      \n"
            "  sq.xyzw vf25, 13(vi00)     |  nop                      \n"
            "  sq.xyzw vf26, 14(vi00)     |  nop                      \n"
            "  sq.xyzw vf27, 15(vi00)     |  nop                      \n"
            "  sq.xyzw vf28, 8(vi00)      |  nop                      \n"
            "  sq.xyzw vf29, 9(vi00)      |  nop                      \n"
            "  sq.xyzw vf30, 10(vi00)     |  nop                      \n"
            "  sq.xyzw vf31, 11(vi00)     |  nop :e                   \n"
            "  iaddiu vi02, vi00, 0xf0    |  nop                      \n"
            "  lq.xyzw vf16, 0(vi00)      |  nop                      \n"
            "  lq.xyzw vf17, 1(vi00)      |  nop                      \n"
            "  lq.xyzw vf18, 2(vi00)      |  nop                      \n"
            "  lq.xyzw vf19, 3(vi00)      |  nop                      \n"
            "  lq.xyzw vf24, 12(vi00)     |  nop                      \n"
            "  lq.xyzw vf25, 13(vi00)     |  nop                      \n"
            "  lq.xyzw vf26, 14(vi00)     |  nop :e                   \n"
            "  lq.xyzw vf27, 15(vi00)     |  nop                      \n"
            "  lq.xyzw vf16, 0(vi00)      |  nop                      \n"
            "  lq.xyzw vf17, 1(vi00)      |  nop                      \n"
            "  lq.xyzw vf18, 2(vi00)      |  nop :e                   \n"
            "  lq.xyzw vf19, 3(vi00)      |  nop                      \n"
            "  lq.xyzw vf24, 4(vi00)      |  nop                      \n"
            "  lq.xyzw vf25, 5(vi00)      |  nop                      \n"
            "  lq.xyzw vf26, 6(vi00)      |  nop :e                   \n"
            "  lq.xyzw vf27, 7(vi00)      |  nop                      \n"
            "  lq.xyzw vf24, 12(vi00)     |  mulax.xyzw ACC, vf16, vf02\n"
            "  lq.xyzw vf25, 13(vi00)     |  madday.xyzw ACC, vf17, vf02\n"
            "  lq.xyzw vf26, 14(vi00)     |  maddaz.xyzw ACC, vf18, vf02\n"
            "  lq.xyzw vf27, 15(vi00)     |  msubaw.xyzw ACC, vf19, vf00\n"
            "  nop                        |  maddw.xyzw vf04, vf01, vf02\n"
            "  nop                        |  mulax.xyzw ACC, vf24, vf02\n"
            "  nop                        |  madday.xyzw ACC, vf25, vf02\n"
            "  nop                        |  maddaz.xyzw ACC, vf26, vf02 :e\n"
            "  fmand vi01, vi02           |  maddw.xyzw vf06, vf27, vf00\n"
            "  lq.xyzw vf16, 0(vi00)      |  nop                      \n"
            "  lq.xyzw vf17, 1(vi00)      |  nop                      \n"
            "  lq.xyzw vf18, 2(vi00)      |  nop                      \n"
            "  lq.xyzw vf19, 3(vi00)      |  nop                      \n"
            "  lq.xyzw vf28, 8(vi00)      |  mulax.xyzw ACC, vf16, vf02\n"
            "  lq.xyzw vf29, 9(vi00)      |  madday.xyzw ACC, vf17, vf02\n"
            "  lq.xyzw vf30, 10(vi00)     |  maddaz.xyzw ACC, vf18, vf02\n"
            "  lq.xyzw vf31, 11(vi00)     |  msubaw.xyzw ACC, vf19, vf00\n"
            "  lq.xyzw vf24, 4(vi00)      |  maddw.xyzw vf04, vf01, vf02\n"
            "  lq.xyzw vf25, 5(vi00)      |  mulax.xyzw ACC, vf28, vf02\n"
            "  lq.xyzw vf26, 6(vi00)      |  madday.xyzw ACC, vf29, vf02\n"
            "  lq.xyzw vf27, 7(vi00)      |  maddaz.xyzw ACC, vf30, vf02\n"
            "  fmand vi01, vi02           |  maddw.xyzw vf05, vf31, vf00\n"
            "  nop                        |  mulax.xyzw ACC, vf24, vf02\n"
            "  nop                        |  madday.xyzw ACC, vf25, vf02\n"
            "  nop                        |  maddaz.xyzw ACC, vf26, vf02 :e\n"
            "  nop                        |  maddw.xyzw vf06, vf27, vf00\n");
}

TEST_F(DataDecompTest, VuDisasmCollideVu0) {
  std::string input =
      "L123:\n"
      //      "    .word 0x5a\n"
      //      "    .word 0x0\n"
      //      "    .word 0x2d\n"
      //      "    .word 0x0\n"
      "    .word 0x80000030\n"
      "    .word 0x1e021bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e508bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e510bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1c5194a\n"
      "    .word 0x80000030\n"
      "    .word 0x1e021bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e608bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e610bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1c6198a\n"
      "    .word 0x80000030\n"
      "    .word 0x1e021bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e708bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e710bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1c719ca\n"
      "    .word 0x80000030\n"
      "    .word 0x1e021bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e808bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e810bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1c81a0a\n"
      "    .word 0x80000030\n"
      "    .word 0x1c52a47\n"
      "    .word 0x80000030\n"
      "    .word 0x1c632c7\n"
      "    .word 0x80000030\n"
      "    .word 0x1c73b47\n"
      "    .word 0x80000030\n"
      "    .word 0x1c843c7\n"
      "    .word 0x80000030\n"
      "    .word 0x1c52a83\n"
      "    .word 0x80000030\n"
      "    .word 0x1c63303\n"
      "    .word 0x80000030\n"
      "    .word 0x1c73b83\n"
      "    .word 0x80000030\n"
      "    .word 0x1c84403\n"
      "    .word 0x80000030\n"
      "    .word 0x1e9497c\n"
      "    .word 0x80000030\n"
      "    .word 0x1eb597c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ed697c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ef797c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ea517c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ec617c\n"
      "    .word 0x80000030\n"
      "    .word 0x41ee717c\n"
      "    .word 0x80000030\n"
      "    .word 0x1f0817c\n"
      "    .word 0x80000030\n"
      "    .word 0x1f4a13c\n"
      "    .word 0x80000030\n"
      "    .word 0x1f1893e\n"
      "    .word 0x80000030\n"
      "    .word 0x1f2913e\n"
      "    .word 0x80000030\n"
      "    .word 0x1f3993e\n"
      "    .word 0x80000030\n"
      "    .word 0x1d7a528\n"
      "    .word 0x80000030\n"
      "    .word 0x1f5a93e\n"
      "    .word 0x80000030\n"
      "    .word 0x1f409bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1f410bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1f418be\n"
      "    .word 0x80000030\n"
      "    .word 0x1c0250b\n"
      "    .word 0x80000030\n"
      "    .word 0x1f109bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1f110bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1f118be\n"
      "    .word 0x80000030\n"
      "    .word 0x1c02448\n"
      "    .word 0x80000030\n"
      "    .word 0x1f209bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1f210bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1f218be\n"
      "    .word 0x80000030\n"
      "    .word 0x1c02488\n"
      "    .word 0x80000030\n"
      "    .word 0x1f309bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1f310bd\n"
      "    .word 0x80000030\n"
      "    .word 0x41f318be\n"
      "    .word 0x80000030\n"
      "    .word 0x1c024c8\n"
      "    .word 0x80000030\n"
      "    .word 0x1e0a1bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e588bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e590bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1e59a4a\n"
      "    .word 0x80000030\n"
      "    .word 0x1e0a1bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e688bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e690bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1e69aca\n"
      "    .word 0x80000030\n"
      "    .word 0x1e0a1bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e788bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e790bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1e79b4a\n"
      "    .word 0x80000030\n"
      "    .word 0x1e0a1bf\n"
      "    .word 0x80000030\n"
      "    .word 0x1e888bc\n"
      "    .word 0x80000030\n"
      "    .word 0x1e890bd\n"
      "    .word 0x80000030\n"
      "    .word 0x1e89bca\n"
      "    .word 0x80000030\n"
      "    .word 0x105ad9b\n"
      "    .word 0x80000030\n"
      "    .word 0x86ad9b\n"
      "    .word 0x80000030\n"
      "    .word 0x47ad9b\n"
      "    .word 0x80000030\n"
      "    .word 0x28ad9b\n"
      "    .word 0x80000030\n"
      "    .word 0x1d64a80\n"
      "    .word 0x80000030\n"
      "    .word 0x1d64a44\n"
      "    .word 0x80000030\n"
      "    .word 0x1d65b01\n"
      "    .word 0x80000030\n"
      "    .word 0x1d65ac5\n"
      "    .word 0x80000030\n"
      "    .word 0x1d66b82\n"
      "    .word 0x80000030\n"
      "    .word 0x1d66b46\n"
      "    .word 0x80000030\n"
      "    .word 0x1d67c03\n"
      "    .word 0x80000030\n"
      "    .word 0x1d67bc7\n"
      "    .word 0x80000030\n"
      "    .word 0x1ea517c\n"
      "    .word 0x80000030\n"
      "    .word 0x1e9497c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ec617c\n"
      "    .word 0x80000030\n"
      "    .word 0x1eb597c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ee717c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ed697c\n"
      "    .word 0x80000030\n"
      "    .word 0x41f0817c\n"
      "    .word 0x80000030\n"
      "    .word 0x1ef797c";
  auto parsed = parse_data(input);

  std::vector<u32> data;
  for (auto& w : parsed.words) {
    ASSERT_EQ(w.kind, LinkedWord::Kind::PLAIN_DATA);
    data.push_back(w.data);
  }

  VuDisassembler disasm;
  auto prog = disasm.disassemble(data.data(), data.size() * 4, false);

  EXPECT_EQ(disasm.to_string(prog),
            "  nop                        |  mulaw.xyzw ACC, vf04, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf01, vf05\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf05\n"
            "  nop                        |  maddz.xyz vf05, vf03, vf05\n"
            "  nop                        |  mulaw.xyzw ACC, vf04, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf01, vf06\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf06\n"
            "  nop                        |  maddz.xyz vf06, vf03, vf06\n"
            "  nop                        |  mulaw.xyzw ACC, vf04, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf01, vf07\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf07\n"
            "  nop                        |  maddz.xyz vf07, vf03, vf07\n"
            "  nop                        |  mulaw.xyzw ACC, vf04, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf01, vf08\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf08\n"
            "  nop                        |  maddz.xyz vf08, vf03, vf08\n"
            "  nop                        |  subw.xyz vf09, vf05, vf05\n"
            "  nop                        |  subw.xyz vf11, vf06, vf06\n"
            "  nop                        |  subw.xyz vf13, vf07, vf07\n"
            "  nop                        |  subw.xyz vf15, vf08, vf08\n"
            "  nop                        |  addw.xyz vf10, vf05, vf05\n"
            "  nop                        |  addw.xyz vf12, vf06, vf06\n"
            "  nop                        |  addw.xyz vf14, vf07, vf07\n"
            "  nop                        |  addw.xyz vf16, vf08, vf08\n"
            "  nop                        |  ftoi0.xyzw vf09, vf09    \n"
            "  nop                        |  ftoi0.xyzw vf11, vf11    \n"
            "  nop                        |  ftoi0.xyzw vf13, vf13    \n"
            "  nop                        |  ftoi0.xyzw vf15, vf15    \n"
            "  nop                        |  ftoi0.xyzw vf10, vf10    \n"
            "  nop                        |  ftoi0.xyzw vf12, vf12    \n"
            "  nop                        |  ftoi0.xyzw vf14, vf14 :e \n"
            "  nop                        |  ftoi0.xyzw vf16, vf16    \n"
            "  nop                        |  itof0.xyzw vf20, vf20    \n"
            "  nop                        |  itof12.xyzw vf17, vf17   \n"
            "  nop                        |  itof12.xyzw vf18, vf18   \n"
            "  nop                        |  itof12.xyzw vf19, vf19   \n"
            "  nop                        |  add.xyz vf20, vf20, vf23 \n"
            "  nop                        |  itof12.xyzw vf21, vf21   \n"
            "  nop                        |  mulax.xyzw ACC, vf01, vf20\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf20\n"
            "  nop                        |  maddaz.xyzw ACC, vf03, vf20\n"
            "  nop                        |  maddw.xyz vf20, vf04, vf00\n"
            "  nop                        |  mulax.xyzw ACC, vf01, vf17\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf17\n"
            "  nop                        |  maddaz.xyzw ACC, vf03, vf17\n"
            "  nop                        |  maddx.xyz vf17, vf04, vf00\n"
            "  nop                        |  mulax.xyzw ACC, vf01, vf18\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf18\n"
            "  nop                        |  maddaz.xyzw ACC, vf03, vf18\n"
            "  nop                        |  maddx.xyz vf18, vf04, vf00\n"
            "  nop                        |  mulax.xyzw ACC, vf01, vf19\n"
            "  nop                        |  madday.xyzw ACC, vf02, vf19\n"
            "  nop                        |  maddaz.xyzw ACC, vf03, vf19 :e\n"
            "  nop                        |  maddx.xyz vf19, vf04, vf00\n"
            "  nop                        |  mulaw.xyzw ACC, vf20, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf17, vf05\n"
            "  nop                        |  madday.xyzw ACC, vf18, vf05\n"
            "  nop                        |  maddz.xyzw vf09, vf19, vf05\n"
            "  nop                        |  mulaw.xyzw ACC, vf20, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf17, vf06\n"
            "  nop                        |  madday.xyzw ACC, vf18, vf06\n"
            "  nop                        |  maddz.xyzw vf11, vf19, vf06\n"
            "  nop                        |  mulaw.xyzw ACC, vf20, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf17, vf07\n"
            "  nop                        |  madday.xyzw ACC, vf18, vf07\n"
            "  nop                        |  maddz.xyzw vf13, vf19, vf07\n"
            "  nop                        |  mulaw.xyzw ACC, vf20, vf00\n"
            "  nop                        |  maddax.xyzw ACC, vf17, vf08\n"
            "  nop                        |  madday.xyzw ACC, vf18, vf08\n"
            "  nop                        |  maddz.xyzw vf15, vf19, vf08\n"
            "  nop                        |  mulw.x vf22, vf21, vf05  \n"
            "  nop                        |  mulw.y vf22, vf21, vf06  \n"
            "  nop                        |  mulw.z vf22, vf21, vf07  \n"
            "  nop                        |  mulw.w vf22, vf21, vf08  \n"
            "  nop                        |  addx.xyz vf10, vf09, vf22\n"
            "  nop                        |  subx.xyz vf09, vf09, vf22\n"
            "  nop                        |  addy.xyz vf12, vf11, vf22\n"
            "  nop                        |  suby.xyz vf11, vf11, vf22\n"
            "  nop                        |  addz.xyz vf14, vf13, vf22\n"
            "  nop                        |  subz.xyz vf13, vf13, vf22\n"
            "  nop                        |  addw.xyz vf16, vf15, vf22\n"
            "  nop                        |  subw.xyz vf15, vf15, vf22\n"
            "  nop                        |  ftoi0.xyzw vf10, vf10    \n"
            "  nop                        |  ftoi0.xyzw vf09, vf09    \n"
            "  nop                        |  ftoi0.xyzw vf12, vf12    \n"
            "  nop                        |  ftoi0.xyzw vf11, vf11    \n"
            "  nop                        |  ftoi0.xyzw vf14, vf14    \n"
            "  nop                        |  ftoi0.xyzw vf13, vf13    \n"
            "  nop                        |  ftoi0.xyzw vf16, vf16 :e \n"
            "  nop                        |  ftoi0.xyzw vf15, vf15    \n");
}