version: 2.1
orbs:
  codecov: codecov/codecov@1.0.2
jobs:
  "build-linux-gcc":
    docker:
      - image: "debian:buster"
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Installing GCC and CMake
          command: 'apt-get update && apt-get install -y gcc g++ cmake lcov curl'
      - run:
          name: Build
          command: cmake -DCOMPILE_TESTS=ON -DCOMPILE_EXAMPLES=ON -DCODE_COVERAGE=ON . && cmake --build .
      - run:
          name: Run tests
          command: ./jsonrpccpp-test -s
      - run:
          name: Create coverage report
          command: lcov --directory . --capture --output-file coverage.info && lcov --remove coverage.info '/usr/*' --output-file coverage.info
      - codecov/upload:
          file: coverage.info
      - run:
          name: Run example
          command: ./example-warehouse
  "build-linux-clang":
    docker:
      - image: "debian:buster"
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Installing GCC and CMake
          command: 'apt-get update && apt-get install -y clang cmake'
      - run:
          name: Build
          command: cmake -DCOMPILE_TESTS=ON -DCOMPILE_EXAMPLES=ON . && cmake --build .
      - run:
          name: Run tests
          command: ./jsonrpccpp-test -s
      - run:
          name: Run example
          command: ./example-warehouse
  "build-osx-clang":
    macos:
      xcode: "12.4.0"
    steps:
      - checkout
      - run:
          name: Installing CMake
          command: 'brew install cmake'
      - run:
          name: Build
          command: cmake -DCOMPILE_TESTS=ON -DCOMPILE_EXAMPLES=ON . && cmake --build .
      - run:
          name: Run tests
          command: ./jsonrpccpp-test -s
      - run:
          name: Run example
          command: ./example-warehouse
workflows:
  version: 2
  build:
    jobs:
      - "build-linux-gcc"
      - "build-linux-clang"
      - "build-osx-clang"
